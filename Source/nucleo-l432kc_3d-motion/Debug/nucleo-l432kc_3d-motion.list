
nucleo-l432kc_3d-motion.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bde4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000208  0800bf78  0800bf78  0001bf78  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c180  0800c180  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  0800c180  0800c180  0001c180  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c188  0800c188  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c188  0800c188  0001c188  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c18c  0800c18c  0001c18c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  0800c190  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004cec  20000078  0800c204  00020078  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20004d64  0800c204  00024d64  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00024756  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004bfe  00000000  00000000  000447fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001bd0  00000000  00000000  000493f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000019c8  00000000  00000000  0004afc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00008480  00000000  00000000  0004c990  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00025246  00000000  00000000  00054e10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000dbaf0  00000000  00000000  0007a056  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00155b46  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000802c  00000000  00000000  00155b98  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000078 	.word	0x20000078
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800bf5c 	.word	0x0800bf5c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000007c 	.word	0x2000007c
 80001cc:	0800bf5c 	.word	0x0800bf5c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	; 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	3c01      	subs	r4, #1
 80003ac:	bf28      	it	cs
 80003ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003b2:	d2e9      	bcs.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_dmul>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005f6:	bf1d      	ittte	ne
 80005f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005fc:	ea94 0f0c 	teqne	r4, ip
 8000600:	ea95 0f0c 	teqne	r5, ip
 8000604:	f000 f8de 	bleq	80007c4 <__aeabi_dmul+0x1dc>
 8000608:	442c      	add	r4, r5
 800060a:	ea81 0603 	eor.w	r6, r1, r3
 800060e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000612:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000616:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800061a:	bf18      	it	ne
 800061c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000624:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000628:	d038      	beq.n	800069c <__aeabi_dmul+0xb4>
 800062a:	fba0 ce02 	umull	ip, lr, r0, r2
 800062e:	f04f 0500 	mov.w	r5, #0
 8000632:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000636:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800063a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800063e:	f04f 0600 	mov.w	r6, #0
 8000642:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000646:	f09c 0f00 	teq	ip, #0
 800064a:	bf18      	it	ne
 800064c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000650:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000654:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000658:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800065c:	d204      	bcs.n	8000668 <__aeabi_dmul+0x80>
 800065e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000662:	416d      	adcs	r5, r5
 8000664:	eb46 0606 	adc.w	r6, r6, r6
 8000668:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800066c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000670:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000674:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000678:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800067c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000680:	bf88      	it	hi
 8000682:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000686:	d81e      	bhi.n	80006c6 <__aeabi_dmul+0xde>
 8000688:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800068c:	bf08      	it	eq
 800068e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000692:	f150 0000 	adcs.w	r0, r0, #0
 8000696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006a0:	ea46 0101 	orr.w	r1, r6, r1
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	ea81 0103 	eor.w	r1, r1, r3
 80006ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b0:	bfc2      	ittt	gt
 80006b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	popgt	{r4, r5, r6, pc}
 80006bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006c0:	f04f 0e00 	mov.w	lr, #0
 80006c4:	3c01      	subs	r4, #1
 80006c6:	f300 80ab 	bgt.w	8000820 <__aeabi_dmul+0x238>
 80006ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ce:	bfde      	ittt	le
 80006d0:	2000      	movle	r0, #0
 80006d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006d6:	bd70      	pople	{r4, r5, r6, pc}
 80006d8:	f1c4 0400 	rsb	r4, r4, #0
 80006dc:	3c20      	subs	r4, #32
 80006de:	da35      	bge.n	800074c <__aeabi_dmul+0x164>
 80006e0:	340c      	adds	r4, #12
 80006e2:	dc1b      	bgt.n	800071c <__aeabi_dmul+0x134>
 80006e4:	f104 0414 	add.w	r4, r4, #20
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f305 	lsl.w	r3, r0, r5
 80006f0:	fa20 f004 	lsr.w	r0, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000700:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000708:	fa21 f604 	lsr.w	r6, r1, r4
 800070c:	eb42 0106 	adc.w	r1, r2, r6
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 040c 	rsb	r4, r4, #12
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f304 	lsl.w	r3, r0, r4
 8000728:	fa20 f005 	lsr.w	r0, r0, r5
 800072c:	fa01 f204 	lsl.w	r2, r1, r4
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800073c:	f141 0100 	adc.w	r1, r1, #0
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f205 	lsl.w	r2, r0, r5
 8000754:	ea4e 0e02 	orr.w	lr, lr, r2
 8000758:	fa20 f304 	lsr.w	r3, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea43 0302 	orr.w	r3, r3, r2
 8000764:	fa21 f004 	lsr.w	r0, r1, r4
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800076c:	fa21 f204 	lsr.w	r2, r1, r4
 8000770:	ea20 0002 	bic.w	r0, r0, r2
 8000774:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f094 0f00 	teq	r4, #0
 8000788:	d10f      	bne.n	80007aa <__aeabi_dmul+0x1c2>
 800078a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800078e:	0040      	lsls	r0, r0, #1
 8000790:	eb41 0101 	adc.w	r1, r1, r1
 8000794:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000798:	bf08      	it	eq
 800079a:	3c01      	subeq	r4, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1a6>
 800079e:	ea41 0106 	orr.w	r1, r1, r6
 80007a2:	f095 0f00 	teq	r5, #0
 80007a6:	bf18      	it	ne
 80007a8:	4770      	bxne	lr
 80007aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ae:	0052      	lsls	r2, r2, #1
 80007b0:	eb43 0303 	adc.w	r3, r3, r3
 80007b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3d01      	subeq	r5, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1c6>
 80007be:	ea43 0306 	orr.w	r3, r3, r6
 80007c2:	4770      	bx	lr
 80007c4:	ea94 0f0c 	teq	r4, ip
 80007c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007cc:	bf18      	it	ne
 80007ce:	ea95 0f0c 	teqne	r5, ip
 80007d2:	d00c      	beq.n	80007ee <__aeabi_dmul+0x206>
 80007d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d8:	bf18      	it	ne
 80007da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007de:	d1d1      	bne.n	8000784 <__aeabi_dmul+0x19c>
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e8:	f04f 0000 	mov.w	r0, #0
 80007ec:	bd70      	pop	{r4, r5, r6, pc}
 80007ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f2:	bf06      	itte	eq
 80007f4:	4610      	moveq	r0, r2
 80007f6:	4619      	moveq	r1, r3
 80007f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fc:	d019      	beq.n	8000832 <__aeabi_dmul+0x24a>
 80007fe:	ea94 0f0c 	teq	r4, ip
 8000802:	d102      	bne.n	800080a <__aeabi_dmul+0x222>
 8000804:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000808:	d113      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800080a:	ea95 0f0c 	teq	r5, ip
 800080e:	d105      	bne.n	800081c <__aeabi_dmul+0x234>
 8000810:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000814:	bf1c      	itt	ne
 8000816:	4610      	movne	r0, r2
 8000818:	4619      	movne	r1, r3
 800081a:	d10a      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800081c:	ea81 0103 	eor.w	r1, r1, r3
 8000820:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000824:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000828:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000836:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800083a:	bd70      	pop	{r4, r5, r6, pc}

0800083c <__aeabi_ddiv>:
 800083c:	b570      	push	{r4, r5, r6, lr}
 800083e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000842:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000846:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800084a:	bf1d      	ittte	ne
 800084c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000850:	ea94 0f0c 	teqne	r4, ip
 8000854:	ea95 0f0c 	teqne	r5, ip
 8000858:	f000 f8a7 	bleq	80009aa <__aeabi_ddiv+0x16e>
 800085c:	eba4 0405 	sub.w	r4, r4, r5
 8000860:	ea81 0e03 	eor.w	lr, r1, r3
 8000864:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000868:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800086c:	f000 8088 	beq.w	8000980 <__aeabi_ddiv+0x144>
 8000870:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000874:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000878:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800087c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000880:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000884:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000888:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800088c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000890:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000894:	429d      	cmp	r5, r3
 8000896:	bf08      	it	eq
 8000898:	4296      	cmpeq	r6, r2
 800089a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800089e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008a2:	d202      	bcs.n	80008aa <__aeabi_ddiv+0x6e>
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	1ab6      	subs	r6, r6, r2
 80008ac:	eb65 0503 	sbc.w	r5, r5, r3
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000918:	ea55 0e06 	orrs.w	lr, r5, r6
 800091c:	d018      	beq.n	8000950 <__aeabi_ddiv+0x114>
 800091e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000922:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000926:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800092a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800092e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000932:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000936:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800093a:	d1c0      	bne.n	80008be <__aeabi_ddiv+0x82>
 800093c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000940:	d10b      	bne.n	800095a <__aeabi_ddiv+0x11e>
 8000942:	ea41 0100 	orr.w	r1, r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800094e:	e7b6      	b.n	80008be <__aeabi_ddiv+0x82>
 8000950:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000954:	bf04      	itt	eq
 8000956:	4301      	orreq	r1, r0
 8000958:	2000      	moveq	r0, #0
 800095a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800095e:	bf88      	it	hi
 8000960:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000964:	f63f aeaf 	bhi.w	80006c6 <__aeabi_dmul+0xde>
 8000968:	ebb5 0c03 	subs.w	ip, r5, r3
 800096c:	bf04      	itt	eq
 800096e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000972:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000976:	f150 0000 	adcs.w	r0, r0, #0
 800097a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000984:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000988:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800098c:	bfc2      	ittt	gt
 800098e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000992:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000996:	bd70      	popgt	{r4, r5, r6, pc}
 8000998:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800099c:	f04f 0e00 	mov.w	lr, #0
 80009a0:	3c01      	subs	r4, #1
 80009a2:	e690      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009a4:	ea45 0e06 	orr.w	lr, r5, r6
 80009a8:	e68d      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ae:	ea94 0f0c 	teq	r4, ip
 80009b2:	bf08      	it	eq
 80009b4:	ea95 0f0c 	teqeq	r5, ip
 80009b8:	f43f af3b 	beq.w	8000832 <__aeabi_dmul+0x24a>
 80009bc:	ea94 0f0c 	teq	r4, ip
 80009c0:	d10a      	bne.n	80009d8 <__aeabi_ddiv+0x19c>
 80009c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009c6:	f47f af34 	bne.w	8000832 <__aeabi_dmul+0x24a>
 80009ca:	ea95 0f0c 	teq	r5, ip
 80009ce:	f47f af25 	bne.w	800081c <__aeabi_dmul+0x234>
 80009d2:	4610      	mov	r0, r2
 80009d4:	4619      	mov	r1, r3
 80009d6:	e72c      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009d8:	ea95 0f0c 	teq	r5, ip
 80009dc:	d106      	bne.n	80009ec <__aeabi_ddiv+0x1b0>
 80009de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009e2:	f43f aefd 	beq.w	80007e0 <__aeabi_dmul+0x1f8>
 80009e6:	4610      	mov	r0, r2
 80009e8:	4619      	mov	r1, r3
 80009ea:	e722      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009f6:	f47f aec5 	bne.w	8000784 <__aeabi_dmul+0x19c>
 80009fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009fe:	f47f af0d 	bne.w	800081c <__aeabi_dmul+0x234>
 8000a02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a06:	f47f aeeb 	bne.w	80007e0 <__aeabi_dmul+0x1f8>
 8000a0a:	e712      	b.n	8000832 <__aeabi_dmul+0x24a>

08000a0c <__gedf2>:
 8000a0c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a10:	e006      	b.n	8000a20 <__cmpdf2+0x4>
 8000a12:	bf00      	nop

08000a14 <__ledf2>:
 8000a14:	f04f 0c01 	mov.w	ip, #1
 8000a18:	e002      	b.n	8000a20 <__cmpdf2+0x4>
 8000a1a:	bf00      	nop

08000a1c <__cmpdf2>:
 8000a1c:	f04f 0c01 	mov.w	ip, #1
 8000a20:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a24:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a28:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a36:	d01b      	beq.n	8000a70 <__cmpdf2+0x54>
 8000a38:	b001      	add	sp, #4
 8000a3a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a3e:	bf0c      	ite	eq
 8000a40:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a44:	ea91 0f03 	teqne	r1, r3
 8000a48:	bf02      	ittt	eq
 8000a4a:	ea90 0f02 	teqeq	r0, r2
 8000a4e:	2000      	moveq	r0, #0
 8000a50:	4770      	bxeq	lr
 8000a52:	f110 0f00 	cmn.w	r0, #0
 8000a56:	ea91 0f03 	teq	r1, r3
 8000a5a:	bf58      	it	pl
 8000a5c:	4299      	cmppl	r1, r3
 8000a5e:	bf08      	it	eq
 8000a60:	4290      	cmpeq	r0, r2
 8000a62:	bf2c      	ite	cs
 8000a64:	17d8      	asrcs	r0, r3, #31
 8000a66:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a6a:	f040 0001 	orr.w	r0, r0, #1
 8000a6e:	4770      	bx	lr
 8000a70:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a74:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a78:	d102      	bne.n	8000a80 <__cmpdf2+0x64>
 8000a7a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a7e:	d107      	bne.n	8000a90 <__cmpdf2+0x74>
 8000a80:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d1d6      	bne.n	8000a38 <__cmpdf2+0x1c>
 8000a8a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a8e:	d0d3      	beq.n	8000a38 <__cmpdf2+0x1c>
 8000a90:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop

08000a98 <__aeabi_cdrcmple>:
 8000a98:	4684      	mov	ip, r0
 8000a9a:	4610      	mov	r0, r2
 8000a9c:	4662      	mov	r2, ip
 8000a9e:	468c      	mov	ip, r1
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	4663      	mov	r3, ip
 8000aa4:	e000      	b.n	8000aa8 <__aeabi_cdcmpeq>
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdcmpeq>:
 8000aa8:	b501      	push	{r0, lr}
 8000aaa:	f7ff ffb7 	bl	8000a1c <__cmpdf2>
 8000aae:	2800      	cmp	r0, #0
 8000ab0:	bf48      	it	mi
 8000ab2:	f110 0f00 	cmnmi.w	r0, #0
 8000ab6:	bd01      	pop	{r0, pc}

08000ab8 <__aeabi_dcmpeq>:
 8000ab8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000abc:	f7ff fff4 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ac0:	bf0c      	ite	eq
 8000ac2:	2001      	moveq	r0, #1
 8000ac4:	2000      	movne	r0, #0
 8000ac6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aca:	bf00      	nop

08000acc <__aeabi_dcmplt>:
 8000acc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad0:	f7ff ffea 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ad4:	bf34      	ite	cc
 8000ad6:	2001      	movcc	r0, #1
 8000ad8:	2000      	movcs	r0, #0
 8000ada:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ade:	bf00      	nop

08000ae0 <__aeabi_dcmple>:
 8000ae0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae4:	f7ff ffe0 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ae8:	bf94      	ite	ls
 8000aea:	2001      	movls	r0, #1
 8000aec:	2000      	movhi	r0, #0
 8000aee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000af2:	bf00      	nop

08000af4 <__aeabi_dcmpge>:
 8000af4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af8:	f7ff ffce 	bl	8000a98 <__aeabi_cdrcmple>
 8000afc:	bf94      	ite	ls
 8000afe:	2001      	movls	r0, #1
 8000b00:	2000      	movhi	r0, #0
 8000b02:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b06:	bf00      	nop

08000b08 <__aeabi_dcmpgt>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff ffc4 	bl	8000a98 <__aeabi_cdrcmple>
 8000b10:	bf34      	ite	cc
 8000b12:	2001      	movcc	r0, #1
 8000b14:	2000      	movcs	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmpun>:
 8000b1c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b24:	d102      	bne.n	8000b2c <__aeabi_dcmpun+0x10>
 8000b26:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b2a:	d10a      	bne.n	8000b42 <__aeabi_dcmpun+0x26>
 8000b2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x20>
 8000b36:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b3a:	d102      	bne.n	8000b42 <__aeabi_dcmpun+0x26>
 8000b3c:	f04f 0000 	mov.w	r0, #0
 8000b40:	4770      	bx	lr
 8000b42:	f04f 0001 	mov.w	r0, #1
 8000b46:	4770      	bx	lr

08000b48 <__aeabi_uldivmod>:
 8000b48:	b953      	cbnz	r3, 8000b60 <__aeabi_uldivmod+0x18>
 8000b4a:	b94a      	cbnz	r2, 8000b60 <__aeabi_uldivmod+0x18>
 8000b4c:	2900      	cmp	r1, #0
 8000b4e:	bf08      	it	eq
 8000b50:	2800      	cmpeq	r0, #0
 8000b52:	bf1c      	itt	ne
 8000b54:	f04f 31ff 	movne.w	r1, #4294967295
 8000b58:	f04f 30ff 	movne.w	r0, #4294967295
 8000b5c:	f000 b974 	b.w	8000e48 <__aeabi_idiv0>
 8000b60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b68:	f000 f806 	bl	8000b78 <__udivmoddi4>
 8000b6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b74:	b004      	add	sp, #16
 8000b76:	4770      	bx	lr

08000b78 <__udivmoddi4>:
 8000b78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b7c:	9d08      	ldr	r5, [sp, #32]
 8000b7e:	4604      	mov	r4, r0
 8000b80:	468e      	mov	lr, r1
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d14d      	bne.n	8000c22 <__udivmoddi4+0xaa>
 8000b86:	428a      	cmp	r2, r1
 8000b88:	4694      	mov	ip, r2
 8000b8a:	d969      	bls.n	8000c60 <__udivmoddi4+0xe8>
 8000b8c:	fab2 f282 	clz	r2, r2
 8000b90:	b152      	cbz	r2, 8000ba8 <__udivmoddi4+0x30>
 8000b92:	fa01 f302 	lsl.w	r3, r1, r2
 8000b96:	f1c2 0120 	rsb	r1, r2, #32
 8000b9a:	fa20 f101 	lsr.w	r1, r0, r1
 8000b9e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ba2:	ea41 0e03 	orr.w	lr, r1, r3
 8000ba6:	4094      	lsls	r4, r2
 8000ba8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000bac:	0c21      	lsrs	r1, r4, #16
 8000bae:	fbbe f6f8 	udiv	r6, lr, r8
 8000bb2:	fa1f f78c 	uxth.w	r7, ip
 8000bb6:	fb08 e316 	mls	r3, r8, r6, lr
 8000bba:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000bbe:	fb06 f107 	mul.w	r1, r6, r7
 8000bc2:	4299      	cmp	r1, r3
 8000bc4:	d90a      	bls.n	8000bdc <__udivmoddi4+0x64>
 8000bc6:	eb1c 0303 	adds.w	r3, ip, r3
 8000bca:	f106 30ff 	add.w	r0, r6, #4294967295
 8000bce:	f080 811f 	bcs.w	8000e10 <__udivmoddi4+0x298>
 8000bd2:	4299      	cmp	r1, r3
 8000bd4:	f240 811c 	bls.w	8000e10 <__udivmoddi4+0x298>
 8000bd8:	3e02      	subs	r6, #2
 8000bda:	4463      	add	r3, ip
 8000bdc:	1a5b      	subs	r3, r3, r1
 8000bde:	b2a4      	uxth	r4, r4
 8000be0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000be4:	fb08 3310 	mls	r3, r8, r0, r3
 8000be8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000bec:	fb00 f707 	mul.w	r7, r0, r7
 8000bf0:	42a7      	cmp	r7, r4
 8000bf2:	d90a      	bls.n	8000c0a <__udivmoddi4+0x92>
 8000bf4:	eb1c 0404 	adds.w	r4, ip, r4
 8000bf8:	f100 33ff 	add.w	r3, r0, #4294967295
 8000bfc:	f080 810a 	bcs.w	8000e14 <__udivmoddi4+0x29c>
 8000c00:	42a7      	cmp	r7, r4
 8000c02:	f240 8107 	bls.w	8000e14 <__udivmoddi4+0x29c>
 8000c06:	4464      	add	r4, ip
 8000c08:	3802      	subs	r0, #2
 8000c0a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c0e:	1be4      	subs	r4, r4, r7
 8000c10:	2600      	movs	r6, #0
 8000c12:	b11d      	cbz	r5, 8000c1c <__udivmoddi4+0xa4>
 8000c14:	40d4      	lsrs	r4, r2
 8000c16:	2300      	movs	r3, #0
 8000c18:	e9c5 4300 	strd	r4, r3, [r5]
 8000c1c:	4631      	mov	r1, r6
 8000c1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c22:	428b      	cmp	r3, r1
 8000c24:	d909      	bls.n	8000c3a <__udivmoddi4+0xc2>
 8000c26:	2d00      	cmp	r5, #0
 8000c28:	f000 80ef 	beq.w	8000e0a <__udivmoddi4+0x292>
 8000c2c:	2600      	movs	r6, #0
 8000c2e:	e9c5 0100 	strd	r0, r1, [r5]
 8000c32:	4630      	mov	r0, r6
 8000c34:	4631      	mov	r1, r6
 8000c36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c3a:	fab3 f683 	clz	r6, r3
 8000c3e:	2e00      	cmp	r6, #0
 8000c40:	d14a      	bne.n	8000cd8 <__udivmoddi4+0x160>
 8000c42:	428b      	cmp	r3, r1
 8000c44:	d302      	bcc.n	8000c4c <__udivmoddi4+0xd4>
 8000c46:	4282      	cmp	r2, r0
 8000c48:	f200 80f9 	bhi.w	8000e3e <__udivmoddi4+0x2c6>
 8000c4c:	1a84      	subs	r4, r0, r2
 8000c4e:	eb61 0303 	sbc.w	r3, r1, r3
 8000c52:	2001      	movs	r0, #1
 8000c54:	469e      	mov	lr, r3
 8000c56:	2d00      	cmp	r5, #0
 8000c58:	d0e0      	beq.n	8000c1c <__udivmoddi4+0xa4>
 8000c5a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000c5e:	e7dd      	b.n	8000c1c <__udivmoddi4+0xa4>
 8000c60:	b902      	cbnz	r2, 8000c64 <__udivmoddi4+0xec>
 8000c62:	deff      	udf	#255	; 0xff
 8000c64:	fab2 f282 	clz	r2, r2
 8000c68:	2a00      	cmp	r2, #0
 8000c6a:	f040 8092 	bne.w	8000d92 <__udivmoddi4+0x21a>
 8000c6e:	eba1 010c 	sub.w	r1, r1, ip
 8000c72:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c76:	fa1f fe8c 	uxth.w	lr, ip
 8000c7a:	2601      	movs	r6, #1
 8000c7c:	0c20      	lsrs	r0, r4, #16
 8000c7e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000c82:	fb07 1113 	mls	r1, r7, r3, r1
 8000c86:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c8a:	fb0e f003 	mul.w	r0, lr, r3
 8000c8e:	4288      	cmp	r0, r1
 8000c90:	d908      	bls.n	8000ca4 <__udivmoddi4+0x12c>
 8000c92:	eb1c 0101 	adds.w	r1, ip, r1
 8000c96:	f103 38ff 	add.w	r8, r3, #4294967295
 8000c9a:	d202      	bcs.n	8000ca2 <__udivmoddi4+0x12a>
 8000c9c:	4288      	cmp	r0, r1
 8000c9e:	f200 80cb 	bhi.w	8000e38 <__udivmoddi4+0x2c0>
 8000ca2:	4643      	mov	r3, r8
 8000ca4:	1a09      	subs	r1, r1, r0
 8000ca6:	b2a4      	uxth	r4, r4
 8000ca8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000cac:	fb07 1110 	mls	r1, r7, r0, r1
 8000cb0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000cb4:	fb0e fe00 	mul.w	lr, lr, r0
 8000cb8:	45a6      	cmp	lr, r4
 8000cba:	d908      	bls.n	8000cce <__udivmoddi4+0x156>
 8000cbc:	eb1c 0404 	adds.w	r4, ip, r4
 8000cc0:	f100 31ff 	add.w	r1, r0, #4294967295
 8000cc4:	d202      	bcs.n	8000ccc <__udivmoddi4+0x154>
 8000cc6:	45a6      	cmp	lr, r4
 8000cc8:	f200 80bb 	bhi.w	8000e42 <__udivmoddi4+0x2ca>
 8000ccc:	4608      	mov	r0, r1
 8000cce:	eba4 040e 	sub.w	r4, r4, lr
 8000cd2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000cd6:	e79c      	b.n	8000c12 <__udivmoddi4+0x9a>
 8000cd8:	f1c6 0720 	rsb	r7, r6, #32
 8000cdc:	40b3      	lsls	r3, r6
 8000cde:	fa22 fc07 	lsr.w	ip, r2, r7
 8000ce2:	ea4c 0c03 	orr.w	ip, ip, r3
 8000ce6:	fa20 f407 	lsr.w	r4, r0, r7
 8000cea:	fa01 f306 	lsl.w	r3, r1, r6
 8000cee:	431c      	orrs	r4, r3
 8000cf0:	40f9      	lsrs	r1, r7
 8000cf2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000cf6:	fa00 f306 	lsl.w	r3, r0, r6
 8000cfa:	fbb1 f8f9 	udiv	r8, r1, r9
 8000cfe:	0c20      	lsrs	r0, r4, #16
 8000d00:	fa1f fe8c 	uxth.w	lr, ip
 8000d04:	fb09 1118 	mls	r1, r9, r8, r1
 8000d08:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d0c:	fb08 f00e 	mul.w	r0, r8, lr
 8000d10:	4288      	cmp	r0, r1
 8000d12:	fa02 f206 	lsl.w	r2, r2, r6
 8000d16:	d90b      	bls.n	8000d30 <__udivmoddi4+0x1b8>
 8000d18:	eb1c 0101 	adds.w	r1, ip, r1
 8000d1c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d20:	f080 8088 	bcs.w	8000e34 <__udivmoddi4+0x2bc>
 8000d24:	4288      	cmp	r0, r1
 8000d26:	f240 8085 	bls.w	8000e34 <__udivmoddi4+0x2bc>
 8000d2a:	f1a8 0802 	sub.w	r8, r8, #2
 8000d2e:	4461      	add	r1, ip
 8000d30:	1a09      	subs	r1, r1, r0
 8000d32:	b2a4      	uxth	r4, r4
 8000d34:	fbb1 f0f9 	udiv	r0, r1, r9
 8000d38:	fb09 1110 	mls	r1, r9, r0, r1
 8000d3c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000d40:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d44:	458e      	cmp	lr, r1
 8000d46:	d908      	bls.n	8000d5a <__udivmoddi4+0x1e2>
 8000d48:	eb1c 0101 	adds.w	r1, ip, r1
 8000d4c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d50:	d26c      	bcs.n	8000e2c <__udivmoddi4+0x2b4>
 8000d52:	458e      	cmp	lr, r1
 8000d54:	d96a      	bls.n	8000e2c <__udivmoddi4+0x2b4>
 8000d56:	3802      	subs	r0, #2
 8000d58:	4461      	add	r1, ip
 8000d5a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000d5e:	fba0 9402 	umull	r9, r4, r0, r2
 8000d62:	eba1 010e 	sub.w	r1, r1, lr
 8000d66:	42a1      	cmp	r1, r4
 8000d68:	46c8      	mov	r8, r9
 8000d6a:	46a6      	mov	lr, r4
 8000d6c:	d356      	bcc.n	8000e1c <__udivmoddi4+0x2a4>
 8000d6e:	d053      	beq.n	8000e18 <__udivmoddi4+0x2a0>
 8000d70:	b15d      	cbz	r5, 8000d8a <__udivmoddi4+0x212>
 8000d72:	ebb3 0208 	subs.w	r2, r3, r8
 8000d76:	eb61 010e 	sbc.w	r1, r1, lr
 8000d7a:	fa01 f707 	lsl.w	r7, r1, r7
 8000d7e:	fa22 f306 	lsr.w	r3, r2, r6
 8000d82:	40f1      	lsrs	r1, r6
 8000d84:	431f      	orrs	r7, r3
 8000d86:	e9c5 7100 	strd	r7, r1, [r5]
 8000d8a:	2600      	movs	r6, #0
 8000d8c:	4631      	mov	r1, r6
 8000d8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d92:	f1c2 0320 	rsb	r3, r2, #32
 8000d96:	40d8      	lsrs	r0, r3
 8000d98:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d9c:	fa21 f303 	lsr.w	r3, r1, r3
 8000da0:	4091      	lsls	r1, r2
 8000da2:	4301      	orrs	r1, r0
 8000da4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000da8:	fa1f fe8c 	uxth.w	lr, ip
 8000dac:	fbb3 f0f7 	udiv	r0, r3, r7
 8000db0:	fb07 3610 	mls	r6, r7, r0, r3
 8000db4:	0c0b      	lsrs	r3, r1, #16
 8000db6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000dba:	fb00 f60e 	mul.w	r6, r0, lr
 8000dbe:	429e      	cmp	r6, r3
 8000dc0:	fa04 f402 	lsl.w	r4, r4, r2
 8000dc4:	d908      	bls.n	8000dd8 <__udivmoddi4+0x260>
 8000dc6:	eb1c 0303 	adds.w	r3, ip, r3
 8000dca:	f100 38ff 	add.w	r8, r0, #4294967295
 8000dce:	d22f      	bcs.n	8000e30 <__udivmoddi4+0x2b8>
 8000dd0:	429e      	cmp	r6, r3
 8000dd2:	d92d      	bls.n	8000e30 <__udivmoddi4+0x2b8>
 8000dd4:	3802      	subs	r0, #2
 8000dd6:	4463      	add	r3, ip
 8000dd8:	1b9b      	subs	r3, r3, r6
 8000dda:	b289      	uxth	r1, r1
 8000ddc:	fbb3 f6f7 	udiv	r6, r3, r7
 8000de0:	fb07 3316 	mls	r3, r7, r6, r3
 8000de4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000de8:	fb06 f30e 	mul.w	r3, r6, lr
 8000dec:	428b      	cmp	r3, r1
 8000dee:	d908      	bls.n	8000e02 <__udivmoddi4+0x28a>
 8000df0:	eb1c 0101 	adds.w	r1, ip, r1
 8000df4:	f106 38ff 	add.w	r8, r6, #4294967295
 8000df8:	d216      	bcs.n	8000e28 <__udivmoddi4+0x2b0>
 8000dfa:	428b      	cmp	r3, r1
 8000dfc:	d914      	bls.n	8000e28 <__udivmoddi4+0x2b0>
 8000dfe:	3e02      	subs	r6, #2
 8000e00:	4461      	add	r1, ip
 8000e02:	1ac9      	subs	r1, r1, r3
 8000e04:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e08:	e738      	b.n	8000c7c <__udivmoddi4+0x104>
 8000e0a:	462e      	mov	r6, r5
 8000e0c:	4628      	mov	r0, r5
 8000e0e:	e705      	b.n	8000c1c <__udivmoddi4+0xa4>
 8000e10:	4606      	mov	r6, r0
 8000e12:	e6e3      	b.n	8000bdc <__udivmoddi4+0x64>
 8000e14:	4618      	mov	r0, r3
 8000e16:	e6f8      	b.n	8000c0a <__udivmoddi4+0x92>
 8000e18:	454b      	cmp	r3, r9
 8000e1a:	d2a9      	bcs.n	8000d70 <__udivmoddi4+0x1f8>
 8000e1c:	ebb9 0802 	subs.w	r8, r9, r2
 8000e20:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e24:	3801      	subs	r0, #1
 8000e26:	e7a3      	b.n	8000d70 <__udivmoddi4+0x1f8>
 8000e28:	4646      	mov	r6, r8
 8000e2a:	e7ea      	b.n	8000e02 <__udivmoddi4+0x28a>
 8000e2c:	4620      	mov	r0, r4
 8000e2e:	e794      	b.n	8000d5a <__udivmoddi4+0x1e2>
 8000e30:	4640      	mov	r0, r8
 8000e32:	e7d1      	b.n	8000dd8 <__udivmoddi4+0x260>
 8000e34:	46d0      	mov	r8, sl
 8000e36:	e77b      	b.n	8000d30 <__udivmoddi4+0x1b8>
 8000e38:	3b02      	subs	r3, #2
 8000e3a:	4461      	add	r1, ip
 8000e3c:	e732      	b.n	8000ca4 <__udivmoddi4+0x12c>
 8000e3e:	4630      	mov	r0, r6
 8000e40:	e709      	b.n	8000c56 <__udivmoddi4+0xde>
 8000e42:	4464      	add	r4, ip
 8000e44:	3802      	subs	r0, #2
 8000e46:	e742      	b.n	8000cce <__udivmoddi4+0x156>

08000e48 <__aeabi_idiv0>:
 8000e48:	4770      	bx	lr
 8000e4a:	bf00      	nop

08000e4c <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	af00      	add	r7, sp, #0
	/* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* Create the timer(s) */
  /* creation of timeBaseTimer */
  timeBaseTimerHandle = osTimerNew(timeBaseCallback, osTimerPeriodic, NULL, &timeBaseTimer_attributes);
 8000e50:	4b09      	ldr	r3, [pc, #36]	; (8000e78 <MX_FREERTOS_Init+0x2c>)
 8000e52:	2200      	movs	r2, #0
 8000e54:	2101      	movs	r1, #1
 8000e56:	4809      	ldr	r0, [pc, #36]	; (8000e7c <MX_FREERTOS_Init+0x30>)
 8000e58:	f006 fa38 	bl	80072cc <osTimerNew>
 8000e5c:	4603      	mov	r3, r0
 8000e5e:	4a08      	ldr	r2, [pc, #32]	; (8000e80 <MX_FREERTOS_Init+0x34>)
 8000e60:	6013      	str	r3, [r2, #0]
	/* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of getDataTask */
  getDataTaskHandle = osThreadNew(StartGetDataTask, NULL, &getDataTask_attributes);
 8000e62:	4a08      	ldr	r2, [pc, #32]	; (8000e84 <MX_FREERTOS_Init+0x38>)
 8000e64:	2100      	movs	r1, #0
 8000e66:	4808      	ldr	r0, [pc, #32]	; (8000e88 <MX_FREERTOS_Init+0x3c>)
 8000e68:	f006 f988 	bl	800717c <osThreadNew>
 8000e6c:	4603      	mov	r3, r0
 8000e6e:	4a07      	ldr	r2, [pc, #28]	; (8000e8c <MX_FREERTOS_Init+0x40>)
 8000e70:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8000e72:	bf00      	nop
 8000e74:	bd80      	pop	{r7, pc}
 8000e76:	bf00      	nop
 8000e78:	0800c060 	.word	0x0800c060
 8000e7c:	08000f1d 	.word	0x08000f1d
 8000e80:	20000098 	.word	0x20000098
 8000e84:	0800c03c 	.word	0x0800c03c
 8000e88:	08000e91 	.word	0x08000e91
 8000e8c:	20000094 	.word	0x20000094

08000e90 <StartGetDataTask>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartGetDataTask */
void StartGetDataTask(void *argument)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b084      	sub	sp, #16
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartGetDataTask */
	size_t state = 0;
 8000e98:	2300      	movs	r3, #0
 8000e9a:	60fb      	str	r3, [r7, #12]

	printf("\r\n--3D-Motion-Click--\r\n");
 8000e9c:	481b      	ldr	r0, [pc, #108]	; (8000f0c <StartGetDataTask+0x7c>)
 8000e9e:	f009 fa19 	bl	800a2d4 <puts>

	/* Send Reset Signal to the Module */
	Reset_signal();
 8000ea2:	f001 fdc7 	bl	8002a34 <Reset_signal>
	HAL_Delay(1000);
 8000ea6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000eaa:	f002 fec9 	bl	8003c40 <HAL_Delay>

	/* Send Wake Signal to the Module */
	Wake_signal();
 8000eae:	f001 fdad 	bl	8002a0c <Wake_signal>
	HAL_Delay(1000);
 8000eb2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000eb6:	f002 fec3 	bl	8003c40 <HAL_Delay>

	/* Initialize the Virtual Register Bank */
	printf("Pre-Init\r\n");
 8000eba:	4815      	ldr	r0, [pc, #84]	; (8000f10 <StartGetDataTask+0x80>)
 8000ebc:	f009 fa0a 	bl	800a2d4 <puts>
	while(VREG_init())
 8000ec0:	e00e      	b.n	8000ee0 <StartGetDataTask+0x50>
	{
		printf("Init-Error\r\n");
 8000ec2:	4814      	ldr	r0, [pc, #80]	; (8000f14 <StartGetDataTask+0x84>)
 8000ec4:	f009 fa06 	bl	800a2d4 <puts>
		Reset_signal();
 8000ec8:	f001 fdb4 	bl	8002a34 <Reset_signal>
		HAL_Delay(1000);
 8000ecc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000ed0:	f002 feb6 	bl	8003c40 <HAL_Delay>
		Wake_signal();
 8000ed4:	f001 fd9a 	bl	8002a0c <Wake_signal>
		HAL_Delay(1000);
 8000ed8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000edc:	f002 feb0 	bl	8003c40 <HAL_Delay>
	while(VREG_init())
 8000ee0:	f001 feda 	bl	8002c98 <VREG_init>
 8000ee4:	4603      	mov	r3, r0
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d1eb      	bne.n	8000ec2 <StartGetDataTask+0x32>
	};
	printf("Init-OK\r\n");
 8000eea:	480b      	ldr	r0, [pc, #44]	; (8000f18 <StartGetDataTask+0x88>)
 8000eec:	f009 f9f2 	bl	800a2d4 <puts>

	/* Infinite loop */
	for (;;)
	{
		/* TODO: Connection to Module Works, but Data Retrieval does NOT */
		_accel();
 8000ef0:	f000 fb56 	bl	80015a0 <_accel>
		HAL_Delay(1000);
 8000ef4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000ef8:	f002 fea2 	bl	8003c40 <HAL_Delay>
		_gyro();
 8000efc:	f000 fca0 	bl	8001840 <_gyro>
		HAL_Delay(1000);
 8000f00:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000f04:	f002 fe9c 	bl	8003c40 <HAL_Delay>
		_accel();
 8000f08:	e7f2      	b.n	8000ef0 <StartGetDataTask+0x60>
 8000f0a:	bf00      	nop
 8000f0c:	0800bf94 	.word	0x0800bf94
 8000f10:	0800bfac 	.word	0x0800bfac
 8000f14:	0800bfb8 	.word	0x0800bfb8
 8000f18:	0800bfc4 	.word	0x0800bfc4

08000f1c <timeBaseCallback>:
  /* USER CODE END StartGetDataTask */
}

/* timeBaseCallback function */
void timeBaseCallback(void *argument)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	b083      	sub	sp, #12
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN timeBaseCallback */
	TIMER_10MS_FLG = TRUE;
 8000f24:	4b04      	ldr	r3, [pc, #16]	; (8000f38 <timeBaseCallback+0x1c>)
 8000f26:	2201      	movs	r2, #1
 8000f28:	701a      	strb	r2, [r3, #0]
  /* USER CODE END timeBaseCallback */
}
 8000f2a:	bf00      	nop
 8000f2c:	370c      	adds	r7, #12
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f34:	4770      	bx	lr
 8000f36:	bf00      	nop
 8000f38:	200000f0 	.word	0x200000f0

08000f3c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b088      	sub	sp, #32
 8000f40:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f42:	f107 030c 	add.w	r3, r7, #12
 8000f46:	2200      	movs	r2, #0
 8000f48:	601a      	str	r2, [r3, #0]
 8000f4a:	605a      	str	r2, [r3, #4]
 8000f4c:	609a      	str	r2, [r3, #8]
 8000f4e:	60da      	str	r2, [r3, #12]
 8000f50:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f52:	4b33      	ldr	r3, [pc, #204]	; (8001020 <MX_GPIO_Init+0xe4>)
 8000f54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f56:	4a32      	ldr	r2, [pc, #200]	; (8001020 <MX_GPIO_Init+0xe4>)
 8000f58:	f043 0304 	orr.w	r3, r3, #4
 8000f5c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f5e:	4b30      	ldr	r3, [pc, #192]	; (8001020 <MX_GPIO_Init+0xe4>)
 8000f60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f62:	f003 0304 	and.w	r3, r3, #4
 8000f66:	60bb      	str	r3, [r7, #8]
 8000f68:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f6a:	4b2d      	ldr	r3, [pc, #180]	; (8001020 <MX_GPIO_Init+0xe4>)
 8000f6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f6e:	4a2c      	ldr	r2, [pc, #176]	; (8001020 <MX_GPIO_Init+0xe4>)
 8000f70:	f043 0301 	orr.w	r3, r3, #1
 8000f74:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f76:	4b2a      	ldr	r3, [pc, #168]	; (8001020 <MX_GPIO_Init+0xe4>)
 8000f78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f7a:	f003 0301 	and.w	r3, r3, #1
 8000f7e:	607b      	str	r3, [r7, #4]
 8000f80:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f82:	4b27      	ldr	r3, [pc, #156]	; (8001020 <MX_GPIO_Init+0xe4>)
 8000f84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f86:	4a26      	ldr	r2, [pc, #152]	; (8001020 <MX_GPIO_Init+0xe4>)
 8000f88:	f043 0302 	orr.w	r3, r3, #2
 8000f8c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f8e:	4b24      	ldr	r3, [pc, #144]	; (8001020 <MX_GPIO_Init+0xe4>)
 8000f90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f92:	f003 0302 	and.w	r3, r3, #2
 8000f96:	603b      	str	r3, [r7, #0]
 8000f98:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MOTION_WAKE_PIN_GPIO_Port, MOTION_WAKE_PIN_Pin, GPIO_PIN_SET);
 8000f9a:	2201      	movs	r2, #1
 8000f9c:	2101      	movs	r1, #1
 8000f9e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fa2:	f003 f8bd 	bl	8004120 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MOTION_RESET_PIN_GPIO_Port, MOTION_RESET_PIN_Pin, GPIO_PIN_SET);
 8000fa6:	2201      	movs	r2, #1
 8000fa8:	2102      	movs	r1, #2
 8000faa:	481e      	ldr	r0, [pc, #120]	; (8001024 <MX_GPIO_Init+0xe8>)
 8000fac:	f003 f8b8 	bl	8004120 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MOTION_WAKE_PIN_Pin;
 8000fb0:	2301      	movs	r3, #1
 8000fb2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fb4:	2301      	movs	r3, #1
 8000fb6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000fb8:	2301      	movs	r3, #1
 8000fba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fbc:	2303      	movs	r3, #3
 8000fbe:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(MOTION_WAKE_PIN_GPIO_Port, &GPIO_InitStruct);
 8000fc0:	f107 030c 	add.w	r3, r7, #12
 8000fc4:	4619      	mov	r1, r3
 8000fc6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fca:	f002 ff3f 	bl	8003e4c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MOTION_EXTI3_PIN_Pin;
 8000fce:	2308      	movs	r3, #8
 8000fd0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000fd2:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000fd6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000fd8:	2301      	movs	r3, #1
 8000fda:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(MOTION_EXTI3_PIN_GPIO_Port, &GPIO_InitStruct);
 8000fdc:	f107 030c 	add.w	r3, r7, #12
 8000fe0:	4619      	mov	r1, r3
 8000fe2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fe6:	f002 ff31 	bl	8003e4c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MOTION_RESET_PIN_Pin;
 8000fea:	2302      	movs	r3, #2
 8000fec:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fee:	2301      	movs	r3, #1
 8000ff0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ff2:	2301      	movs	r3, #1
 8000ff4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ff6:	2303      	movs	r3, #3
 8000ff8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(MOTION_RESET_PIN_GPIO_Port, &GPIO_InitStruct);
 8000ffa:	f107 030c 	add.w	r3, r7, #12
 8000ffe:	4619      	mov	r1, r3
 8001000:	4808      	ldr	r0, [pc, #32]	; (8001024 <MX_GPIO_Init+0xe8>)
 8001002:	f002 ff23 	bl	8003e4c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 5, 0);
 8001006:	2200      	movs	r2, #0
 8001008:	2105      	movs	r1, #5
 800100a:	2009      	movs	r0, #9
 800100c:	f002 fef4 	bl	8003df8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8001010:	2009      	movs	r0, #9
 8001012:	f002 ff0d 	bl	8003e30 <HAL_NVIC_EnableIRQ>

}
 8001016:	bf00      	nop
 8001018:	3720      	adds	r7, #32
 800101a:	46bd      	mov	sp, r7
 800101c:	bd80      	pop	{r7, pc}
 800101e:	bf00      	nop
 8001020:	40021000 	.word	0x40021000
 8001024:	48000400 	.word	0x48000400

08001028 <HAL_GPIO_EXTI_Callback>:
 * 			Sets the Interrupt to fire on opposite Signal-Edge.
 * @param: The Pin from where the Interrupt came from
 * TODO: Directly Write to the Registers without using the HAL functions
 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b088      	sub	sp, #32
 800102c:	af00      	add	r7, sp, #0
 800102e:	4603      	mov	r3, r0
 8001030:	80fb      	strh	r3, [r7, #6]
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001032:	f107 030c 	add.w	r3, r7, #12
 8001036:	2200      	movs	r2, #0
 8001038:	601a      	str	r2, [r3, #0]
 800103a:	605a      	str	r2, [r3, #4]
 800103c:	609a      	str	r2, [r3, #8]
 800103e:	60da      	str	r2, [r3, #12]
 8001040:	611a      	str	r2, [r3, #16]

    /* Check if the INT Source is our Data Available PIN */
    if(GPIO_Pin == MOTION_EXTI3_PIN_Pin)
 8001042:	88fb      	ldrh	r3, [r7, #6]
 8001044:	2b08      	cmp	r3, #8
 8001046:	d11e      	bne.n	8001086 <HAL_GPIO_EXTI_Callback+0x5e>
    {
    	/*If no data available, but INT Line was driven LOW */
        if (!EC_DATA_AVAIL)
 8001048:	4b11      	ldr	r3, [pc, #68]	; (8001090 <HAL_GPIO_EXTI_Callback+0x68>)
 800104a:	781b      	ldrb	r3, [r3, #0]
 800104c:	b2db      	uxtb	r3, r3
 800104e:	2b00      	cmp	r3, #0
 8001050:	d106      	bne.n	8001060 <HAL_GPIO_EXTI_Callback+0x38>
        {
        	/* INT1 Edge configured to interrupt on rising edge (wait for end of data) */
            GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001052:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001056:	613b      	str	r3, [r7, #16]

            /*Toggle EC_DATA_AVAIL flag to notify data received */
            EC_DATA_AVAIL = TRUE;
 8001058:	4b0d      	ldr	r3, [pc, #52]	; (8001090 <HAL_GPIO_EXTI_Callback+0x68>)
 800105a:	2201      	movs	r2, #1
 800105c:	701a      	strb	r2, [r3, #0]
 800105e:	e005      	b.n	800106c <HAL_GPIO_EXTI_Callback+0x44>
        }
        /* if data was available and INT line got driven HIGH */
        else
        {
        	/* INT1 Edge configured to interrupt on falling edge (data is no longer available) */
            GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001060:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001064:	613b      	str	r3, [r7, #16]

            /*Toggle EC_DATA_AVAIL flag to notify that there is no new data rn */
            EC_DATA_AVAIL = FALSE;
 8001066:	4b0a      	ldr	r3, [pc, #40]	; (8001090 <HAL_GPIO_EXTI_Callback+0x68>)
 8001068:	2200      	movs	r2, #0
 800106a:	701a      	strb	r2, [r3, #0]
        }

		GPIO_InitStruct.Pin = MOTION_EXTI3_PIN_Pin;
 800106c:	2308      	movs	r3, #8
 800106e:	60fb      	str	r3, [r7, #12]
        GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001070:	2300      	movs	r3, #0
 8001072:	617b      	str	r3, [r7, #20]
        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001074:	2302      	movs	r3, #2
 8001076:	61bb      	str	r3, [r7, #24]

        /* Re-Initialize the Portpin to Trigger on falling/rising Edge */
        HAL_GPIO_Init(MOTION_EXTI3_PIN_GPIO_Port, &GPIO_InitStruct);
 8001078:	f107 030c 	add.w	r3, r7, #12
 800107c:	4619      	mov	r1, r3
 800107e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001082:	f002 fee3 	bl	8003e4c <HAL_GPIO_Init>
    }
}
 8001086:	bf00      	nop
 8001088:	3720      	adds	r7, #32
 800108a:	46bd      	mov	sp, r7
 800108c:	bd80      	pop	{r7, pc}
 800108e:	bf00      	nop
 8001090:	200000f1 	.word	0x200000f1

08001094 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001098:	4b1b      	ldr	r3, [pc, #108]	; (8001108 <MX_I2C1_Init+0x74>)
 800109a:	4a1c      	ldr	r2, [pc, #112]	; (800110c <MX_I2C1_Init+0x78>)
 800109c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00702991;
 800109e:	4b1a      	ldr	r3, [pc, #104]	; (8001108 <MX_I2C1_Init+0x74>)
 80010a0:	4a1b      	ldr	r2, [pc, #108]	; (8001110 <MX_I2C1_Init+0x7c>)
 80010a2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80010a4:	4b18      	ldr	r3, [pc, #96]	; (8001108 <MX_I2C1_Init+0x74>)
 80010a6:	2200      	movs	r2, #0
 80010a8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80010aa:	4b17      	ldr	r3, [pc, #92]	; (8001108 <MX_I2C1_Init+0x74>)
 80010ac:	2201      	movs	r2, #1
 80010ae:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80010b0:	4b15      	ldr	r3, [pc, #84]	; (8001108 <MX_I2C1_Init+0x74>)
 80010b2:	2200      	movs	r2, #0
 80010b4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80010b6:	4b14      	ldr	r3, [pc, #80]	; (8001108 <MX_I2C1_Init+0x74>)
 80010b8:	2200      	movs	r2, #0
 80010ba:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80010bc:	4b12      	ldr	r3, [pc, #72]	; (8001108 <MX_I2C1_Init+0x74>)
 80010be:	2200      	movs	r2, #0
 80010c0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80010c2:	4b11      	ldr	r3, [pc, #68]	; (8001108 <MX_I2C1_Init+0x74>)
 80010c4:	2200      	movs	r2, #0
 80010c6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_ENABLE;
 80010c8:	4b0f      	ldr	r3, [pc, #60]	; (8001108 <MX_I2C1_Init+0x74>)
 80010ca:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80010ce:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80010d0:	480d      	ldr	r0, [pc, #52]	; (8001108 <MX_I2C1_Init+0x74>)
 80010d2:	f003 f855 	bl	8004180 <HAL_I2C_Init>
 80010d6:	4603      	mov	r3, r0
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d001      	beq.n	80010e0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80010dc:	f000 f994 	bl	8001408 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80010e0:	2100      	movs	r1, #0
 80010e2:	4809      	ldr	r0, [pc, #36]	; (8001108 <MX_I2C1_Init+0x74>)
 80010e4:	f003 fd3e 	bl	8004b64 <HAL_I2CEx_ConfigAnalogFilter>
 80010e8:	4603      	mov	r3, r0
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d001      	beq.n	80010f2 <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 80010ee:	f000 f98b 	bl	8001408 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80010f2:	2100      	movs	r1, #0
 80010f4:	4804      	ldr	r0, [pc, #16]	; (8001108 <MX_I2C1_Init+0x74>)
 80010f6:	f003 fd80 	bl	8004bfa <HAL_I2CEx_ConfigDigitalFilter>
 80010fa:	4603      	mov	r3, r0
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d001      	beq.n	8001104 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8001100:	f000 f982 	bl	8001408 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001104:	bf00      	nop
 8001106:	bd80      	pop	{r7, pc}
 8001108:	2000009c 	.word	0x2000009c
 800110c:	40005400 	.word	0x40005400
 8001110:	00702991 	.word	0x00702991

08001114 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b09e      	sub	sp, #120	; 0x78
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800111c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001120:	2200      	movs	r2, #0
 8001122:	601a      	str	r2, [r3, #0]
 8001124:	605a      	str	r2, [r3, #4]
 8001126:	609a      	str	r2, [r3, #8]
 8001128:	60da      	str	r2, [r3, #12]
 800112a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800112c:	f107 0310 	add.w	r3, r7, #16
 8001130:	2254      	movs	r2, #84	; 0x54
 8001132:	2100      	movs	r1, #0
 8001134:	4618      	mov	r0, r3
 8001136:	f008 ffaa 	bl	800a08e <memset>
  if(i2cHandle->Instance==I2C1)
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	4a24      	ldr	r2, [pc, #144]	; (80011d0 <HAL_I2C_MspInit+0xbc>)
 8001140:	4293      	cmp	r3, r2
 8001142:	d141      	bne.n	80011c8 <HAL_I2C_MspInit+0xb4>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001144:	2340      	movs	r3, #64	; 0x40
 8001146:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001148:	2300      	movs	r3, #0
 800114a:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800114c:	f107 0310 	add.w	r3, r7, #16
 8001150:	4618      	mov	r0, r3
 8001152:	f004 fc7d 	bl	8005a50 <HAL_RCCEx_PeriphCLKConfig>
 8001156:	4603      	mov	r3, r0
 8001158:	2b00      	cmp	r3, #0
 800115a:	d001      	beq.n	8001160 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 800115c:	f000 f954 	bl	8001408 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001160:	4b1c      	ldr	r3, [pc, #112]	; (80011d4 <HAL_I2C_MspInit+0xc0>)
 8001162:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001164:	4a1b      	ldr	r2, [pc, #108]	; (80011d4 <HAL_I2C_MspInit+0xc0>)
 8001166:	f043 0302 	orr.w	r3, r3, #2
 800116a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800116c:	4b19      	ldr	r3, [pc, #100]	; (80011d4 <HAL_I2C_MspInit+0xc0>)
 800116e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001170:	f003 0302 	and.w	r3, r3, #2
 8001174:	60fb      	str	r3, [r7, #12]
 8001176:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = MOTION_I2C1_SCL_Pin|MOTION_I2C1_SDA_Pin;
 8001178:	23c0      	movs	r3, #192	; 0xc0
 800117a:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800117c:	2312      	movs	r3, #18
 800117e:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001180:	2300      	movs	r3, #0
 8001182:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001184:	2303      	movs	r3, #3
 8001186:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001188:	2304      	movs	r3, #4
 800118a:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800118c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001190:	4619      	mov	r1, r3
 8001192:	4811      	ldr	r0, [pc, #68]	; (80011d8 <HAL_I2C_MspInit+0xc4>)
 8001194:	f002 fe5a 	bl	8003e4c <HAL_GPIO_Init>

    __HAL_SYSCFG_FASTMODEPLUS_ENABLE(SYSCFG_FASTMODEPLUS_PB6);
 8001198:	4b10      	ldr	r3, [pc, #64]	; (80011dc <HAL_I2C_MspInit+0xc8>)
 800119a:	685b      	ldr	r3, [r3, #4]
 800119c:	4a0f      	ldr	r2, [pc, #60]	; (80011dc <HAL_I2C_MspInit+0xc8>)
 800119e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80011a2:	6053      	str	r3, [r2, #4]

    __HAL_SYSCFG_FASTMODEPLUS_ENABLE(SYSCFG_FASTMODEPLUS_PB7);
 80011a4:	4b0d      	ldr	r3, [pc, #52]	; (80011dc <HAL_I2C_MspInit+0xc8>)
 80011a6:	685b      	ldr	r3, [r3, #4]
 80011a8:	4a0c      	ldr	r2, [pc, #48]	; (80011dc <HAL_I2C_MspInit+0xc8>)
 80011aa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011ae:	6053      	str	r3, [r2, #4]

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80011b0:	4b08      	ldr	r3, [pc, #32]	; (80011d4 <HAL_I2C_MspInit+0xc0>)
 80011b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011b4:	4a07      	ldr	r2, [pc, #28]	; (80011d4 <HAL_I2C_MspInit+0xc0>)
 80011b6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80011ba:	6593      	str	r3, [r2, #88]	; 0x58
 80011bc:	4b05      	ldr	r3, [pc, #20]	; (80011d4 <HAL_I2C_MspInit+0xc0>)
 80011be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011c0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80011c4:	60bb      	str	r3, [r7, #8]
 80011c6:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80011c8:	bf00      	nop
 80011ca:	3778      	adds	r7, #120	; 0x78
 80011cc:	46bd      	mov	sp, r7
 80011ce:	bd80      	pop	{r7, pc}
 80011d0:	40005400 	.word	0x40005400
 80011d4:	40021000 	.word	0x40021000
 80011d8:	48000400 	.word	0x48000400
 80011dc:	40010000 	.word	0x40010000

080011e0 <error_handler>:
volatile uint16_t status = 0;
volatile BOOL TIMER_10MS_FLG = FALSE;         // 10 msec timer interrupt flag
volatile BOOL EC_DATA_AVAIL = FALSE;          // EC data available for read flag

void error_handler(char *str, UINT16 offset, UINT16 errval)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b084      	sub	sp, #16
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	60f8      	str	r0, [r7, #12]
 80011e8:	60b9      	str	r1, [r7, #8]
 80011ea:	607a      	str	r2, [r7, #4]
	printf("\r\n ***Error in function: %s:%02X errval=0x%X*** \r\n", str, offset, errval);
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	68ba      	ldr	r2, [r7, #8]
 80011f0:	68f9      	ldr	r1, [r7, #12]
 80011f2:	4803      	ldr	r0, [pc, #12]	; (8001200 <error_handler+0x20>)
 80011f4:	f008 ffe8 	bl	800a1c8 <iprintf>

	/*
	Error_Handler();
	 */
}
 80011f8:	bf00      	nop
 80011fa:	3710      	adds	r7, #16
 80011fc:	46bd      	mov	sp, r7
 80011fe:	bd80      	pop	{r7, pc}
 8001200:	0800bfd0 	.word	0x0800bfd0

08001204 <i2c_cmd_WrRd>:
 * @param ucData_rd Pointer to data buffer from slave
 * @param bAdjust Use 1st 2 bytes returned as new length (=TRUE)
 * @return I2C_SUCCESS(=0), I2C_BUF_OVRFLO(=0x22)
 */
UINT8 i2c_cmd_WrRd(UINT8 ucCmd, UINT8 ucBytes_wr, UINT8 *ucData_wr, UINT16 ucBytes_rd, UINT8 *ucData_rd, BOOL bAdjust)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b086      	sub	sp, #24
 8001208:	af02      	add	r7, sp, #8
 800120a:	60ba      	str	r2, [r7, #8]
 800120c:	607b      	str	r3, [r7, #4]
 800120e:	4603      	mov	r3, r0
 8001210:	73fb      	strb	r3, [r7, #15]
 8001212:	460b      	mov	r3, r1
 8001214:	73bb      	strb	r3, [r7, #14]

	/* Sanity Check for Maximum Buffer Size */
	if (ucBytes_wr > BUF_150)
 8001216:	7bbb      	ldrb	r3, [r7, #14]
 8001218:	2b96      	cmp	r3, #150	; 0x96
 800121a:	d901      	bls.n	8001220 <i2c_cmd_WrRd+0x1c>
	{
		return I2C_BUF_OVRFLO;
 800121c:	2322      	movs	r3, #34	; 0x22
 800121e:	e060      	b.n	80012e2 <i2c_cmd_WrRd+0xde>
	}

	switch (ucCmd)
 8001220:	7bfb      	ldrb	r3, [r7, #15]
 8001222:	2b03      	cmp	r3, #3
 8001224:	d02c      	beq.n	8001280 <i2c_cmd_WrRd+0x7c>
 8001226:	2b03      	cmp	r3, #3
 8001228:	dc4f      	bgt.n	80012ca <i2c_cmd_WrRd+0xc6>
 800122a:	2b01      	cmp	r3, #1
 800122c:	d002      	beq.n	8001234 <i2c_cmd_WrRd+0x30>
 800122e:	2b02      	cmp	r3, #2
 8001230:	d013      	beq.n	800125a <i2c_cmd_WrRd+0x56>
 8001232:	e04a      	b.n	80012ca <i2c_cmd_WrRd+0xc6>
	{
		/* Perform a Single Write */
		case WRITE:
			if(HAL_I2C_Master_Transmit(&hi2c1, SLAVE_ADDR, ucData_wr, ucBytes_wr, I2_TIMEOUT_PERIOD) != HAL_OK)
 8001234:	7bbb      	ldrb	r3, [r7, #14]
 8001236:	b29b      	uxth	r3, r3
 8001238:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800123c:	9200      	str	r2, [sp, #0]
 800123e:	68ba      	ldr	r2, [r7, #8]
 8001240:	2180      	movs	r1, #128	; 0x80
 8001242:	482a      	ldr	r0, [pc, #168]	; (80012ec <i2c_cmd_WrRd+0xe8>)
 8001244:	f003 f82c 	bl	80042a0 <HAL_I2C_Master_Transmit>
 8001248:	4603      	mov	r3, r0
 800124a:	2b00      	cmp	r3, #0
 800124c:	d043      	beq.n	80012d6 <i2c_cmd_WrRd+0xd2>
			{
				error_handler("i2c ", 0, I2C_ERROR);
 800124e:	2221      	movs	r2, #33	; 0x21
 8001250:	2100      	movs	r1, #0
 8001252:	4827      	ldr	r0, [pc, #156]	; (80012f0 <i2c_cmd_WrRd+0xec>)
 8001254:	f7ff ffc4 	bl	80011e0 <error_handler>
			}
			break;
 8001258:	e03d      	b.n	80012d6 <i2c_cmd_WrRd+0xd2>

		/* Perform a Single Read */
		case READ:

			if(HAL_I2C_Master_Receive(&hi2c1, SLAVE_ADDR, ucData_rd, ucBytes_rd, I2_TIMEOUT_PERIOD) != HAL_OK)
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	b29b      	uxth	r3, r3
 800125e:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001262:	9200      	str	r2, [sp, #0]
 8001264:	69ba      	ldr	r2, [r7, #24]
 8001266:	2180      	movs	r1, #128	; 0x80
 8001268:	4820      	ldr	r0, [pc, #128]	; (80012ec <i2c_cmd_WrRd+0xe8>)
 800126a:	f003 f90d 	bl	8004488 <HAL_I2C_Master_Receive>
 800126e:	4603      	mov	r3, r0
 8001270:	2b00      	cmp	r3, #0
 8001272:	d032      	beq.n	80012da <i2c_cmd_WrRd+0xd6>
			{
				error_handler("i2c ", 0, I2C_ERROR);
 8001274:	2221      	movs	r2, #33	; 0x21
 8001276:	2100      	movs	r1, #0
 8001278:	481d      	ldr	r0, [pc, #116]	; (80012f0 <i2c_cmd_WrRd+0xec>)
 800127a:	f7ff ffb1 	bl	80011e0 <error_handler>
			}
			break;
 800127e:	e02c      	b.n	80012da <i2c_cmd_WrRd+0xd6>

		/* Perform a Write and Read Command */
		case WR_RD:
			if(HAL_I2C_Master_Transmit(&hi2c1, SLAVE_ADDR, ucData_wr, ucBytes_wr, I2_TIMEOUT_PERIOD) != HAL_OK)
 8001280:	7bbb      	ldrb	r3, [r7, #14]
 8001282:	b29b      	uxth	r3, r3
 8001284:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001288:	9200      	str	r2, [sp, #0]
 800128a:	68ba      	ldr	r2, [r7, #8]
 800128c:	2180      	movs	r1, #128	; 0x80
 800128e:	4817      	ldr	r0, [pc, #92]	; (80012ec <i2c_cmd_WrRd+0xe8>)
 8001290:	f003 f806 	bl	80042a0 <HAL_I2C_Master_Transmit>
 8001294:	4603      	mov	r3, r0
 8001296:	2b00      	cmp	r3, #0
 8001298:	d004      	beq.n	80012a4 <i2c_cmd_WrRd+0xa0>
			{
				error_handler("i2c ", 0, I2C_ERROR);
 800129a:	2221      	movs	r2, #33	; 0x21
 800129c:	2100      	movs	r1, #0
 800129e:	4814      	ldr	r0, [pc, #80]	; (80012f0 <i2c_cmd_WrRd+0xec>)
 80012a0:	f7ff ff9e 	bl	80011e0 <error_handler>
			}

			if(HAL_I2C_Master_Receive(&hi2c1, SLAVE_ADDR, ucData_rd, ucBytes_rd, I2_TIMEOUT_PERIOD) != HAL_OK)
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	b29b      	uxth	r3, r3
 80012a8:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80012ac:	9200      	str	r2, [sp, #0]
 80012ae:	69ba      	ldr	r2, [r7, #24]
 80012b0:	2180      	movs	r1, #128	; 0x80
 80012b2:	480e      	ldr	r0, [pc, #56]	; (80012ec <i2c_cmd_WrRd+0xe8>)
 80012b4:	f003 f8e8 	bl	8004488 <HAL_I2C_Master_Receive>
 80012b8:	4603      	mov	r3, r0
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d00f      	beq.n	80012de <i2c_cmd_WrRd+0xda>
			{
				error_handler("i2c ", 0, I2C_ERROR);
 80012be:	2221      	movs	r2, #33	; 0x21
 80012c0:	2100      	movs	r1, #0
 80012c2:	480b      	ldr	r0, [pc, #44]	; (80012f0 <i2c_cmd_WrRd+0xec>)
 80012c4:	f7ff ff8c 	bl	80011e0 <error_handler>
			}
			break;
 80012c8:	e009      	b.n	80012de <i2c_cmd_WrRd+0xda>
		default:
			error_handler("i2c ", 0, I2C_ERROR);
 80012ca:	2221      	movs	r2, #33	; 0x21
 80012cc:	2100      	movs	r1, #0
 80012ce:	4808      	ldr	r0, [pc, #32]	; (80012f0 <i2c_cmd_WrRd+0xec>)
 80012d0:	f7ff ff86 	bl	80011e0 <error_handler>
 80012d4:	e004      	b.n	80012e0 <i2c_cmd_WrRd+0xdc>
			break;
 80012d6:	bf00      	nop
 80012d8:	e002      	b.n	80012e0 <i2c_cmd_WrRd+0xdc>
			break;
 80012da:	bf00      	nop
 80012dc:	e000      	b.n	80012e0 <i2c_cmd_WrRd+0xdc>
			break;
 80012de:	bf00      	nop
	}

	return I2C_SUCCESS;
 80012e0:	2300      	movs	r3, #0
}
 80012e2:	4618      	mov	r0, r3
 80012e4:	3710      	adds	r7, #16
 80012e6:	46bd      	mov	sp, r7
 80012e8:	bd80      	pop	{r7, pc}
 80012ea:	bf00      	nop
 80012ec:	2000009c 	.word	0x2000009c
 80012f0:	0800c004 	.word	0x0800c004

080012f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80012f8:	f002 fc69 	bl	8003bce <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80012fc:	f000 f810 	bl	8001320 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001300:	f7ff fe1c 	bl	8000f3c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001304:	f001 fbec 	bl	8002ae0 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8001308:	f7ff fec4 	bl	8001094 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 800130c:	f001 fbb8 	bl	8002a80 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8001310:	f005 feea 	bl	80070e8 <osKernelInitialize>
  MX_FREERTOS_Init();
 8001314:	f7ff fd9a 	bl	8000e4c <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8001318:	f005 ff0a 	bl	8007130 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800131c:	e7fe      	b.n	800131c <main+0x28>
	...

08001320 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b096      	sub	sp, #88	; 0x58
 8001324:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001326:	f107 0314 	add.w	r3, r7, #20
 800132a:	2244      	movs	r2, #68	; 0x44
 800132c:	2100      	movs	r1, #0
 800132e:	4618      	mov	r0, r3
 8001330:	f008 fead 	bl	800a08e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001334:	463b      	mov	r3, r7
 8001336:	2200      	movs	r2, #0
 8001338:	601a      	str	r2, [r3, #0]
 800133a:	605a      	str	r2, [r3, #4]
 800133c:	609a      	str	r2, [r3, #8]
 800133e:	60da      	str	r2, [r3, #12]
 8001340:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001342:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001346:	f003 fcc3 	bl	8004cd0 <HAL_PWREx_ControlVoltageScaling>
 800134a:	4603      	mov	r3, r0
 800134c:	2b00      	cmp	r3, #0
 800134e:	d001      	beq.n	8001354 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001350:	f000 f85a 	bl	8001408 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001354:	f003 fc9e 	bl	8004c94 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001358:	4b21      	ldr	r3, [pc, #132]	; (80013e0 <SystemClock_Config+0xc0>)
 800135a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800135e:	4a20      	ldr	r2, [pc, #128]	; (80013e0 <SystemClock_Config+0xc0>)
 8001360:	f023 0318 	bic.w	r3, r3, #24
 8001364:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8001368:	2314      	movs	r3, #20
 800136a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800136c:	2301      	movs	r3, #1
 800136e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001370:	2301      	movs	r3, #1
 8001372:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001374:	2300      	movs	r3, #0
 8001376:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001378:	2360      	movs	r3, #96	; 0x60
 800137a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800137c:	2302      	movs	r3, #2
 800137e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8001380:	2301      	movs	r3, #1
 8001382:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001384:	2301      	movs	r3, #1
 8001386:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8001388:	2328      	movs	r3, #40	; 0x28
 800138a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800138c:	2307      	movs	r3, #7
 800138e:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001390:	2302      	movs	r3, #2
 8001392:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001394:	2302      	movs	r3, #2
 8001396:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001398:	f107 0314 	add.w	r3, r7, #20
 800139c:	4618      	mov	r0, r3
 800139e:	f003 fced 	bl	8004d7c <HAL_RCC_OscConfig>
 80013a2:	4603      	mov	r3, r0
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d001      	beq.n	80013ac <SystemClock_Config+0x8c>
  {
    Error_Handler();
 80013a8:	f000 f82e 	bl	8001408 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80013ac:	230f      	movs	r3, #15
 80013ae:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80013b0:	2303      	movs	r3, #3
 80013b2:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80013b4:	2300      	movs	r3, #0
 80013b6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80013b8:	2300      	movs	r3, #0
 80013ba:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80013bc:	2300      	movs	r3, #0
 80013be:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80013c0:	463b      	mov	r3, r7
 80013c2:	2104      	movs	r1, #4
 80013c4:	4618      	mov	r0, r3
 80013c6:	f004 f8ed 	bl	80055a4 <HAL_RCC_ClockConfig>
 80013ca:	4603      	mov	r3, r0
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d001      	beq.n	80013d4 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80013d0:	f000 f81a 	bl	8001408 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 80013d4:	f004 fd32 	bl	8005e3c <HAL_RCCEx_EnableMSIPLLMode>
}
 80013d8:	bf00      	nop
 80013da:	3758      	adds	r7, #88	; 0x58
 80013dc:	46bd      	mov	sp, r7
 80013de:	bd80      	pop	{r7, pc}
 80013e0:	40021000 	.word	0x40021000

080013e4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b082      	sub	sp, #8
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM16) {
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	4a04      	ldr	r2, [pc, #16]	; (8001404 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80013f2:	4293      	cmp	r3, r2
 80013f4:	d101      	bne.n	80013fa <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80013f6:	f002 fc03 	bl	8003c00 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80013fa:	bf00      	nop
 80013fc:	3708      	adds	r7, #8
 80013fe:	46bd      	mov	sp, r7
 8001400:	bd80      	pop	{r7, pc}
 8001402:	bf00      	nop
 8001404:	40014400 	.word	0x40014400

08001408 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001408:	b480      	push	{r7}
 800140a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800140c:	b672      	cpsid	i
}
 800140e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001410:	e7fe      	b.n	8001410 <Error_Handler+0x8>
	...

08001414 <RetargetInit>:
#define STDOUT_FILENO 1
#define STDERR_FILENO 2

UART_HandleTypeDef *gHuart;

void RetargetInit(UART_HandleTypeDef *huart) {
 8001414:	b580      	push	{r7, lr}
 8001416:	b082      	sub	sp, #8
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
  gHuart = huart;
 800141c:	4a07      	ldr	r2, [pc, #28]	; (800143c <RetargetInit+0x28>)
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	6013      	str	r3, [r2, #0]

  /* Disable I/O buffering for STDOUT stream, so that
   * chars are sent out as soon as they are printed. */
  setvbuf(stdout, NULL, _IONBF, 0);
 8001422:	4b07      	ldr	r3, [pc, #28]	; (8001440 <RetargetInit+0x2c>)
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	6898      	ldr	r0, [r3, #8]
 8001428:	2300      	movs	r3, #0
 800142a:	2202      	movs	r2, #2
 800142c:	2100      	movs	r1, #0
 800142e:	f008 ffd3 	bl	800a3d8 <setvbuf>
}
 8001432:	bf00      	nop
 8001434:	3708      	adds	r7, #8
 8001436:	46bd      	mov	sp, r7
 8001438:	bd80      	pop	{r7, pc}
 800143a:	bf00      	nop
 800143c:	200000f4 	.word	0x200000f4
 8001440:	20000010 	.word	0x20000010

08001444 <_isatty>:

int _isatty(int fd) {
 8001444:	b580      	push	{r7, lr}
 8001446:	b082      	sub	sp, #8
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	2b00      	cmp	r3, #0
 8001450:	db04      	blt.n	800145c <_isatty+0x18>
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	2b02      	cmp	r3, #2
 8001456:	dc01      	bgt.n	800145c <_isatty+0x18>
    return 1;
 8001458:	2301      	movs	r3, #1
 800145a:	e005      	b.n	8001468 <_isatty+0x24>

  errno = EBADF;
 800145c:	f008 fce6 	bl	8009e2c <__errno>
 8001460:	4603      	mov	r3, r0
 8001462:	2209      	movs	r2, #9
 8001464:	601a      	str	r2, [r3, #0]
  return 0;
 8001466:	2300      	movs	r3, #0
}
 8001468:	4618      	mov	r0, r3
 800146a:	3708      	adds	r7, #8
 800146c:	46bd      	mov	sp, r7
 800146e:	bd80      	pop	{r7, pc}

08001470 <_write>:

int _write(int fd, char* ptr, int len) {
 8001470:	b580      	push	{r7, lr}
 8001472:	b086      	sub	sp, #24
 8001474:	af00      	add	r7, sp, #0
 8001476:	60f8      	str	r0, [r7, #12]
 8001478:	60b9      	str	r1, [r7, #8]
 800147a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDOUT_FILENO || fd == STDERR_FILENO) {
 800147c:	68fb      	ldr	r3, [r7, #12]
 800147e:	2b01      	cmp	r3, #1
 8001480:	d002      	beq.n	8001488 <_write+0x18>
 8001482:	68fb      	ldr	r3, [r7, #12]
 8001484:	2b02      	cmp	r3, #2
 8001486:	d111      	bne.n	80014ac <_write+0x3c>
    hstatus = HAL_UART_Transmit(gHuart, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 8001488:	4b0e      	ldr	r3, [pc, #56]	; (80014c4 <_write+0x54>)
 800148a:	6818      	ldr	r0, [r3, #0]
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	b29a      	uxth	r2, r3
 8001490:	f04f 33ff 	mov.w	r3, #4294967295
 8001494:	68b9      	ldr	r1, [r7, #8]
 8001496:	f005 f8a1 	bl	80065dc <HAL_UART_Transmit>
 800149a:	4603      	mov	r3, r0
 800149c:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 800149e:	7dfb      	ldrb	r3, [r7, #23]
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d101      	bne.n	80014a8 <_write+0x38>
      return len;
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	e008      	b.n	80014ba <_write+0x4a>
    else
      return EIO;
 80014a8:	2305      	movs	r3, #5
 80014aa:	e006      	b.n	80014ba <_write+0x4a>
  }
  errno = EBADF;
 80014ac:	f008 fcbe 	bl	8009e2c <__errno>
 80014b0:	4603      	mov	r3, r0
 80014b2:	2209      	movs	r2, #9
 80014b4:	601a      	str	r2, [r3, #0]
  return -1;
 80014b6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80014ba:	4618      	mov	r0, r3
 80014bc:	3718      	adds	r7, #24
 80014be:	46bd      	mov	sp, r7
 80014c0:	bd80      	pop	{r7, pc}
 80014c2:	bf00      	nop
 80014c4:	200000f4 	.word	0x200000f4

080014c8 <_close>:

int _close(int fd) {
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b082      	sub	sp, #8
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	db04      	blt.n	80014e0 <_close+0x18>
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	2b02      	cmp	r3, #2
 80014da:	dc01      	bgt.n	80014e0 <_close+0x18>
    return 0;
 80014dc:	2300      	movs	r3, #0
 80014de:	e006      	b.n	80014ee <_close+0x26>

  errno = EBADF;
 80014e0:	f008 fca4 	bl	8009e2c <__errno>
 80014e4:	4603      	mov	r3, r0
 80014e6:	2209      	movs	r2, #9
 80014e8:	601a      	str	r2, [r3, #0]
  return -1;
 80014ea:	f04f 33ff 	mov.w	r3, #4294967295
}
 80014ee:	4618      	mov	r0, r3
 80014f0:	3708      	adds	r7, #8
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bd80      	pop	{r7, pc}

080014f6 <_lseek>:

int _lseek(int fd, int ptr, int dir) {
 80014f6:	b580      	push	{r7, lr}
 80014f8:	b084      	sub	sp, #16
 80014fa:	af00      	add	r7, sp, #0
 80014fc:	60f8      	str	r0, [r7, #12]
 80014fe:	60b9      	str	r1, [r7, #8]
 8001500:	607a      	str	r2, [r7, #4]
  (void) fd;
  (void) ptr;
  (void) dir;

  errno = EBADF;
 8001502:	f008 fc93 	bl	8009e2c <__errno>
 8001506:	4603      	mov	r3, r0
 8001508:	2209      	movs	r2, #9
 800150a:	601a      	str	r2, [r3, #0]
  return -1;
 800150c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001510:	4618      	mov	r0, r3
 8001512:	3710      	adds	r7, #16
 8001514:	46bd      	mov	sp, r7
 8001516:	bd80      	pop	{r7, pc}

08001518 <_read>:

int _read(int fd, char* ptr, int len) {
 8001518:	b580      	push	{r7, lr}
 800151a:	b086      	sub	sp, #24
 800151c:	af00      	add	r7, sp, #0
 800151e:	60f8      	str	r0, [r7, #12]
 8001520:	60b9      	str	r1, [r7, #8]
 8001522:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDIN_FILENO) {
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	2b00      	cmp	r3, #0
 8001528:	d110      	bne.n	800154c <_read+0x34>
    hstatus = HAL_UART_Receive(gHuart, (uint8_t *) ptr, 1, HAL_MAX_DELAY);
 800152a:	4b0e      	ldr	r3, [pc, #56]	; (8001564 <_read+0x4c>)
 800152c:	6818      	ldr	r0, [r3, #0]
 800152e:	f04f 33ff 	mov.w	r3, #4294967295
 8001532:	2201      	movs	r2, #1
 8001534:	68b9      	ldr	r1, [r7, #8]
 8001536:	f005 f8e5 	bl	8006704 <HAL_UART_Receive>
 800153a:	4603      	mov	r3, r0
 800153c:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 800153e:	7dfb      	ldrb	r3, [r7, #23]
 8001540:	2b00      	cmp	r3, #0
 8001542:	d101      	bne.n	8001548 <_read+0x30>
      return 1;
 8001544:	2301      	movs	r3, #1
 8001546:	e008      	b.n	800155a <_read+0x42>
    else
      return EIO;
 8001548:	2305      	movs	r3, #5
 800154a:	e006      	b.n	800155a <_read+0x42>
  }
  errno = EBADF;
 800154c:	f008 fc6e 	bl	8009e2c <__errno>
 8001550:	4603      	mov	r3, r0
 8001552:	2209      	movs	r2, #9
 8001554:	601a      	str	r2, [r3, #0]
  return -1;
 8001556:	f04f 33ff 	mov.w	r3, #4294967295
}
 800155a:	4618      	mov	r0, r3
 800155c:	3718      	adds	r7, #24
 800155e:	46bd      	mov	sp, r7
 8001560:	bd80      	pop	{r7, pc}
 8001562:	bf00      	nop
 8001564:	200000f4 	.word	0x200000f4

08001568 <_fstat>:

int _fstat(int fd, struct stat* st) {
 8001568:	b580      	push	{r7, lr}
 800156a:	b082      	sub	sp, #8
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
 8001570:	6039      	str	r1, [r7, #0]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO) {
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	2b00      	cmp	r3, #0
 8001576:	db08      	blt.n	800158a <_fstat+0x22>
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	2b02      	cmp	r3, #2
 800157c:	dc05      	bgt.n	800158a <_fstat+0x22>
    st->st_mode = S_IFCHR;
 800157e:	683b      	ldr	r3, [r7, #0]
 8001580:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001584:	605a      	str	r2, [r3, #4]
    return 0;
 8001586:	2300      	movs	r3, #0
 8001588:	e005      	b.n	8001596 <_fstat+0x2e>
  }

  errno = EBADF;
 800158a:	f008 fc4f 	bl	8009e2c <__errno>
 800158e:	4603      	mov	r3, r0
 8001590:	2209      	movs	r2, #9
 8001592:	601a      	str	r2, [r3, #0]
  return 0;
 8001594:	2300      	movs	r3, #0
}
 8001596:	4618      	mov	r0, r3
 8001598:	3708      	adds	r7, #8
 800159a:	46bd      	mov	sp, r7
 800159c:	bd80      	pop	{r7, pc}
	...

080015a0 <_accel>:
static double prev_dat[4] = { 0 }; // Used to hold previous data readings to preclude redundant data output
extern char flag;
extern char state;

void _accel()
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b09e      	sub	sp, #120	; 0x78
 80015a4:	af00      	add	r7, sp, #0
	UINT8 ucRetStat;                                      // return status value
	UINT16 wdata;                                    // pre-exponent-scaled data
	double dDataX = 0, dDataY = 0, dDataZ = 0, dDataW = 0; // Data field variables
 80015a6:	f04f 0200 	mov.w	r2, #0
 80015aa:	f04f 0300 	mov.w	r3, #0
 80015ae:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
 80015b2:	f04f 0200 	mov.w	r2, #0
 80015b6:	f04f 0300 	mov.w	r3, #0
 80015ba:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
 80015be:	f04f 0200 	mov.w	r2, #0
 80015c2:	f04f 0300 	mov.w	r3, #0
 80015c6:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
 80015ca:	f04f 0200 	mov.w	r2, #0
 80015ce:	f04f 0300 	mov.w	r3, #0
 80015d2:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
	double dMult = 1; // Multiplier for data fields : sets them to appropriate order of magnitude
 80015d6:	f04f 0200 	mov.w	r2, #0
 80015da:	4b94      	ldr	r3, [pc, #592]	; (800182c <_accel+0x28c>)
 80015dc:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50

	char _x[15], _y[15], _z[15], _w[15];

	// Enable the Accelerometer
	// To support multi-threaded applications, Read-Modify-Write the VREG:
	if ((ucRetStat = HOST_SF_LIB_VREG_read(VREG_SHC, &wRMWdata)) == SUCCESS) // Read data from the Sensor Hub Configuration register
 80015e0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80015e4:	4619      	mov	r1, r3
 80015e6:	2000      	movs	r0, #0
 80015e8:	f001 fe96 	bl	8003318 <HOST_SF_LIB_VREG_read>
 80015ec:	4603      	mov	r3, r0
 80015ee:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 80015f2:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d115      	bne.n	8001626 <_accel+0x86>
	{
		if ((ucRetStat = HOST_SF_LIB_VREG_write(VREG_SHC, wRMWdata | VREG_SHC_ACC_EN)))
 80015fa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80015fc:	f043 0310 	orr.w	r3, r3, #16
 8001600:	4619      	mov	r1, r3
 8001602:	2000      	movs	r0, #0
 8001604:	f001 fef2 	bl	80033ec <HOST_SF_LIB_VREG_write>
 8001608:	4603      	mov	r3, r0
 800160a:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800160e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001612:	2b00      	cmp	r3, #0
 8001614:	d00e      	beq.n	8001634 <_accel+0x94>
		{
			// Enable the accelerometer (ACC_EN)
			error_handler("VRWr", VREG_SHC, ucRetStat);  // error display
 8001616:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800161a:	461a      	mov	r2, r3
 800161c:	2100      	movs	r1, #0
 800161e:	4884      	ldr	r0, [pc, #528]	; (8001830 <_accel+0x290>)
 8001620:	f7ff fdde 	bl	80011e0 <error_handler>
 8001624:	e006      	b.n	8001634 <_accel+0x94>
		}
	}
	else
	{
		error_handler("VRRd", VREG_SHC, ucRetStat);       // error display
 8001626:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800162a:	461a      	mov	r2, r3
 800162c:	2100      	movs	r1, #0
 800162e:	4881      	ldr	r0, [pc, #516]	; (8001834 <_accel+0x294>)
 8001630:	f7ff fdd6 	bl	80011e0 <error_handler>
	}

	// Change Accelerometer sensitivity
	if ((ucRetStat = HOST_SF_LIB_VREG_write(VREG_ACSEN, 0x14)))
 8001634:	2114      	movs	r1, #20
 8001636:	2002      	movs	r0, #2
 8001638:	f001 fed8 	bl	80033ec <HOST_SF_LIB_VREG_write>
 800163c:	4603      	mov	r3, r0
 800163e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8001642:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001646:	2b00      	cmp	r3, #0
 8001648:	d006      	beq.n	8001658 <_accel+0xb8>
	{
		error_handler("VRWr", VREG_ACSEN, ucRetStat);     // error display
 800164a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800164e:	461a      	mov	r2, r3
 8001650:	2102      	movs	r1, #2
 8001652:	4877      	ldr	r0, [pc, #476]	; (8001830 <_accel+0x290>)
 8001654:	f7ff fdc4 	bl	80011e0 <error_handler>
	}

	// Change acc data rate
	if ((ucRetStat = HOST_SF_LIB_VREG_write(VREG_ACDXR, 0x64)))
 8001658:	2164      	movs	r1, #100	; 0x64
 800165a:	200c      	movs	r0, #12
 800165c:	f001 fec6 	bl	80033ec <HOST_SF_LIB_VREG_write>
 8001660:	4603      	mov	r3, r0
 8001662:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8001666:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800166a:	2b00      	cmp	r3, #0
 800166c:	d006      	beq.n	800167c <_accel+0xdc>
	{
		error_handler("VRWr", VREG_ACDXR, ucRetStat);     // error display
 800166e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001672:	461a      	mov	r2, r3
 8001674:	210c      	movs	r1, #12
 8001676:	486e      	ldr	r0, [pc, #440]	; (8001830 <_accel+0x290>)
 8001678:	f7ff fdb2 	bl	80011e0 <error_handler>
	}

	dMult = ret_exponent(ACCEL_VREG_OFFSET); // Get unit exponent for this sensor's data
 800167c:	2000      	movs	r0, #0
 800167e:	f000 ff9f 	bl	80025c0 <ret_exponent>
 8001682:	ed87 0b14 	vstr	d0, [r7, #80]	; 0x50

	// get acc readings
	// Read data from the accelerometer datax register
	if ((ucRetStat = HOST_SF_LIB_VREG_read(VREG_ACXD, &wdata)))
 8001686:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800168a:	4619      	mov	r1, r3
 800168c:	2016      	movs	r0, #22
 800168e:	f001 fe43 	bl	8003318 <HOST_SF_LIB_VREG_read>
 8001692:	4603      	mov	r3, r0
 8001694:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8001698:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800169c:	2b00      	cmp	r3, #0
 800169e:	d006      	beq.n	80016ae <_accel+0x10e>
	{
		error_handler("VRRd", VREG_ACXD, ucRetStat);  // error display
 80016a0:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80016a4:	461a      	mov	r2, r3
 80016a6:	2116      	movs	r1, #22
 80016a8:	4862      	ldr	r0, [pc, #392]	; (8001834 <_accel+0x294>)
 80016aa:	f7ff fd99 	bl	80011e0 <error_handler>
	}

	dDataX = (int16_t) wdata * dMult; // Multiply this by the exponent scaler to get floating point value
 80016ae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80016b0:	b21b      	sxth	r3, r3
 80016b2:	4618      	mov	r0, r3
 80016b4:	f7fe ff2e 	bl	8000514 <__aeabi_i2d>
 80016b8:	4602      	mov	r2, r0
 80016ba:	460b      	mov	r3, r1
 80016bc:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80016c0:	f7fe ff92 	bl	80005e8 <__aeabi_dmul>
 80016c4:	4602      	mov	r2, r0
 80016c6:	460b      	mov	r3, r1
 80016c8:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70

	 // Read data from the accelerometer datay register
	if ((ucRetStat = HOST_SF_LIB_VREG_read(VREG_ACYD, &wdata)))
 80016cc:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80016d0:	4619      	mov	r1, r3
 80016d2:	2017      	movs	r0, #23
 80016d4:	f001 fe20 	bl	8003318 <HOST_SF_LIB_VREG_read>
 80016d8:	4603      	mov	r3, r0
 80016da:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 80016de:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d006      	beq.n	80016f4 <_accel+0x154>
	{
		error_handler("VRRd", VREG_ACYD, ucRetStat);  // error display
 80016e6:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80016ea:	461a      	mov	r2, r3
 80016ec:	2117      	movs	r1, #23
 80016ee:	4851      	ldr	r0, [pc, #324]	; (8001834 <_accel+0x294>)
 80016f0:	f7ff fd76 	bl	80011e0 <error_handler>
	}

	dDataY = (int16_t) wdata * dMult; // Multiply this by the exponent scaler to get floating point value
 80016f4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80016f6:	b21b      	sxth	r3, r3
 80016f8:	4618      	mov	r0, r3
 80016fa:	f7fe ff0b 	bl	8000514 <__aeabi_i2d>
 80016fe:	4602      	mov	r2, r0
 8001700:	460b      	mov	r3, r1
 8001702:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8001706:	f7fe ff6f 	bl	80005e8 <__aeabi_dmul>
 800170a:	4602      	mov	r2, r0
 800170c:	460b      	mov	r3, r1
 800170e:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68

	 // Read data from the accelerometer dataz register
	if ((ucRetStat = HOST_SF_LIB_VREG_read(VREG_ACZD, &wdata)))
 8001712:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001716:	4619      	mov	r1, r3
 8001718:	2018      	movs	r0, #24
 800171a:	f001 fdfd 	bl	8003318 <HOST_SF_LIB_VREG_read>
 800171e:	4603      	mov	r3, r0
 8001720:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8001724:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001728:	2b00      	cmp	r3, #0
 800172a:	d006      	beq.n	800173a <_accel+0x19a>
	{
		error_handler("VRRd", VREG_ACZD, ucRetStat);  // error display
 800172c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001730:	461a      	mov	r2, r3
 8001732:	2118      	movs	r1, #24
 8001734:	483f      	ldr	r0, [pc, #252]	; (8001834 <_accel+0x294>)
 8001736:	f7ff fd53 	bl	80011e0 <error_handler>
	}

	dDataZ = (int16_t) wdata * dMult; // Multiply this by the exponent scaler to get floating point value
 800173a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800173c:	b21b      	sxth	r3, r3
 800173e:	4618      	mov	r0, r3
 8001740:	f7fe fee8 	bl	8000514 <__aeabi_i2d>
 8001744:	4602      	mov	r2, r0
 8001746:	460b      	mov	r3, r1
 8001748:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800174c:	f7fe ff4c 	bl	80005e8 <__aeabi_dmul>
 8001750:	4602      	mov	r2, r0
 8001752:	460b      	mov	r3, r1
 8001754:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60

	if (prev_dat[0] != dDataX || prev_dat[1] != dDataY || prev_dat[2] != dDataZ) // Ensure that this data has not yet been displayed
 8001758:	4b37      	ldr	r3, [pc, #220]	; (8001838 <_accel+0x298>)
 800175a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800175e:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8001762:	f7ff f9a9 	bl	8000ab8 <__aeabi_dcmpeq>
 8001766:	4603      	mov	r3, r0
 8001768:	2b00      	cmp	r3, #0
 800176a:	d013      	beq.n	8001794 <_accel+0x1f4>
 800176c:	4b32      	ldr	r3, [pc, #200]	; (8001838 <_accel+0x298>)
 800176e:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001772:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8001776:	f7ff f99f 	bl	8000ab8 <__aeabi_dcmpeq>
 800177a:	4603      	mov	r3, r0
 800177c:	2b00      	cmp	r3, #0
 800177e:	d009      	beq.n	8001794 <_accel+0x1f4>
 8001780:	4b2d      	ldr	r3, [pc, #180]	; (8001838 <_accel+0x298>)
 8001782:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8001786:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800178a:	f7ff f995 	bl	8000ab8 <__aeabi_dcmpeq>
 800178e:	4603      	mov	r3, r0
 8001790:	2b00      	cmp	r3, #0
 8001792:	d10e      	bne.n	80017b2 <_accel+0x212>
	{
		prev_dat[0] = dDataX; // Store the current data values for later reference
 8001794:	4928      	ldr	r1, [pc, #160]	; (8001838 <_accel+0x298>)
 8001796:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800179a:	e9c1 2300 	strd	r2, r3, [r1]
		prev_dat[1] = dDataY;
 800179e:	4926      	ldr	r1, [pc, #152]	; (8001838 <_accel+0x298>)
 80017a0:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 80017a4:	e9c1 2302 	strd	r2, r3, [r1, #8]
		prev_dat[2] = dDataZ;
 80017a8:	4923      	ldr	r1, [pc, #140]	; (8001838 <_accel+0x298>)
 80017aa:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 80017ae:	e9c1 2304 	strd	r2, r3, [r1, #16]
	} //NOTE: If data does not change in response to movement of sensor, SSC7150 not sending EC_DATA_AVAIL interrupts and 'may' need POR

	/* TODO: In the final version this shouldnt be here */
	printf("%d\r\n", dDataX);
 80017b2:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80017b6:	4821      	ldr	r0, [pc, #132]	; (800183c <_accel+0x29c>)
 80017b8:	f008 fd06 	bl	800a1c8 <iprintf>
	printf("%d\r\n", dDataY);
 80017bc:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 80017c0:	481e      	ldr	r0, [pc, #120]	; (800183c <_accel+0x29c>)
 80017c2:	f008 fd01 	bl	800a1c8 <iprintf>
	printf("%d\r\n", dDataZ);
 80017c6:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 80017ca:	481c      	ldr	r0, [pc, #112]	; (800183c <_accel+0x29c>)
 80017cc:	f008 fcfc 	bl	800a1c8 <iprintf>

	//Disable the Accelerometer on exit
	if ((ucRetStat = HOST_SF_LIB_VREG_read(VREG_SHC, &wRMWdata)) == SUCCESS) // Read data from the Sensor Hub Configuration register
 80017d0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80017d4:	4619      	mov	r1, r3
 80017d6:	2000      	movs	r0, #0
 80017d8:	f001 fd9e 	bl	8003318 <HOST_SF_LIB_VREG_read>
 80017dc:	4603      	mov	r3, r0
 80017de:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 80017e2:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d115      	bne.n	8001816 <_accel+0x276>
	{
		// Disable the accelerometer (clear the ACC_EN bit)
		if ((ucRetStat = HOST_SF_LIB_VREG_write(VREG_SHC, wRMWdata & ~VREG_SHC_ACC_EN)))
 80017ea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80017ec:	f023 0310 	bic.w	r3, r3, #16
 80017f0:	4619      	mov	r1, r3
 80017f2:	2000      	movs	r0, #0
 80017f4:	f001 fdfa 	bl	80033ec <HOST_SF_LIB_VREG_write>
 80017f8:	4603      	mov	r3, r0
 80017fa:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 80017fe:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001802:	2b00      	cmp	r3, #0
 8001804:	d00e      	beq.n	8001824 <_accel+0x284>
		{
				error_handler("VRWr", VREG_SHC, ucRetStat); // error display
 8001806:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800180a:	461a      	mov	r2, r3
 800180c:	2100      	movs	r1, #0
 800180e:	4808      	ldr	r0, [pc, #32]	; (8001830 <_accel+0x290>)
 8001810:	f7ff fce6 	bl	80011e0 <error_handler>
	}
	else
	{
		error_handler("VRRd", VREG_SHC, ucRetStat);   // error display
	}
}
 8001814:	e006      	b.n	8001824 <_accel+0x284>
		error_handler("VRRd", VREG_SHC, ucRetStat);   // error display
 8001816:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800181a:	461a      	mov	r2, r3
 800181c:	2100      	movs	r1, #0
 800181e:	4805      	ldr	r0, [pc, #20]	; (8001834 <_accel+0x294>)
 8001820:	f7ff fcde 	bl	80011e0 <error_handler>
}
 8001824:	bf00      	nop
 8001826:	3778      	adds	r7, #120	; 0x78
 8001828:	46bd      	mov	sp, r7
 800182a:	bd80      	pop	{r7, pc}
 800182c:	3ff00000 	.word	0x3ff00000
 8001830:	0800c00c 	.word	0x0800c00c
 8001834:	0800c014 	.word	0x0800c014
 8001838:	200000f8 	.word	0x200000f8
 800183c:	0800c01c 	.word	0x0800c01c

08001840 <_gyro>:


void _gyro()
{
 8001840:	b580      	push	{r7, lr}
 8001842:	b09e      	sub	sp, #120	; 0x78
 8001844:	af00      	add	r7, sp, #0
	UINT8 ucRetStat;                                      // return status value
	UINT16 wdata;                                    // pre-exponent-scaled data
	double dDataX = 0, dDataY = 0, dDataZ = 0, dDataW = 0; // Data field variables
 8001846:	f04f 0200 	mov.w	r2, #0
 800184a:	f04f 0300 	mov.w	r3, #0
 800184e:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
 8001852:	f04f 0200 	mov.w	r2, #0
 8001856:	f04f 0300 	mov.w	r3, #0
 800185a:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
 800185e:	f04f 0200 	mov.w	r2, #0
 8001862:	f04f 0300 	mov.w	r3, #0
 8001866:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
 800186a:	f04f 0200 	mov.w	r2, #0
 800186e:	f04f 0300 	mov.w	r3, #0
 8001872:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
	double dMult = 1; // Multiplier for data fields : sets them to appropriate order of magnitude
 8001876:	f04f 0200 	mov.w	r2, #0
 800187a:	4b94      	ldr	r3, [pc, #592]	; (8001acc <_gyro+0x28c>)
 800187c:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50

	char _x[15], _y[15], _z[15], _w[15];

	// Enable the Gyrometer
	// To support multi-threaded applications, Read-Modify-Write the VREG:
	if ((ucRetStat = HOST_SF_LIB_VREG_read(VREG_SHC, &wRMWdata)) == SUCCESS) // Read data from the Sensor Hub Configuration register
 8001880:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001884:	4619      	mov	r1, r3
 8001886:	2000      	movs	r0, #0
 8001888:	f001 fd46 	bl	8003318 <HOST_SF_LIB_VREG_read>
 800188c:	4603      	mov	r3, r0
 800188e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8001892:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001896:	2b00      	cmp	r3, #0
 8001898:	d115      	bne.n	80018c6 <_gyro+0x86>
			{
		if ((ucRetStat = HOST_SF_LIB_VREG_write(VREG_SHC,
 800189a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800189c:	f043 0320 	orr.w	r3, r3, #32
 80018a0:	4619      	mov	r1, r3
 80018a2:	2000      	movs	r0, #0
 80018a4:	f001 fda2 	bl	80033ec <HOST_SF_LIB_VREG_write>
 80018a8:	4603      	mov	r3, r0
 80018aa:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 80018ae:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d00e      	beq.n	80018d4 <_gyro+0x94>
				wRMWdata | VREG_SHC_GYRO_EN))) // Enable the Gyrometer (GYRO_EN)
			error_handler("VRWr", VREG_SHC, ucRetStat);  // error display
 80018b6:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80018ba:	461a      	mov	r2, r3
 80018bc:	2100      	movs	r1, #0
 80018be:	4884      	ldr	r0, [pc, #528]	; (8001ad0 <_gyro+0x290>)
 80018c0:	f7ff fc8e 	bl	80011e0 <error_handler>
 80018c4:	e006      	b.n	80018d4 <_gyro+0x94>
	} else
		error_handler("VRRd", VREG_SHC, ucRetStat);       // error display
 80018c6:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80018ca:	461a      	mov	r2, r3
 80018cc:	2100      	movs	r1, #0
 80018ce:	4881      	ldr	r0, [pc, #516]	; (8001ad4 <_gyro+0x294>)
 80018d0:	f7ff fc86 	bl	80011e0 <error_handler>

	if ((ucRetStat = HOST_SF_LIB_VREG_write(VREG_GYSEN, 0x01))) // Change gyro sensitivity
 80018d4:	2101      	movs	r1, #1
 80018d6:	2003      	movs	r0, #3
 80018d8:	f001 fd88 	bl	80033ec <HOST_SF_LIB_VREG_write>
 80018dc:	4603      	mov	r3, r0
 80018de:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 80018e2:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d006      	beq.n	80018f8 <_gyro+0xb8>
		error_handler("VRWr", VREG_GYSEN, ucRetStat);     // error display
 80018ea:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80018ee:	461a      	mov	r2, r3
 80018f0:	2103      	movs	r1, #3
 80018f2:	4877      	ldr	r0, [pc, #476]	; (8001ad0 <_gyro+0x290>)
 80018f4:	f7ff fc74 	bl	80011e0 <error_handler>

	if ((ucRetStat = HOST_SF_LIB_VREG_write(VREG_GYDR, 0x64))) // Change gyro data rate
 80018f8:	2164      	movs	r1, #100	; 0x64
 80018fa:	200d      	movs	r0, #13
 80018fc:	f001 fd76 	bl	80033ec <HOST_SF_LIB_VREG_write>
 8001900:	4603      	mov	r3, r0
 8001902:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8001906:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800190a:	2b00      	cmp	r3, #0
 800190c:	d006      	beq.n	800191c <_gyro+0xdc>
		error_handler("VRWr", VREG_GYDR, ucRetStat);      // error display
 800190e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001912:	461a      	mov	r2, r3
 8001914:	210d      	movs	r1, #13
 8001916:	486e      	ldr	r0, [pc, #440]	; (8001ad0 <_gyro+0x290>)
 8001918:	f7ff fc62 	bl	80011e0 <error_handler>

	dMult = ret_exponent(GYRO_VREG_OFFSET); // Get unit exponent for this sensor's data
 800191c:	2001      	movs	r0, #1
 800191e:	f000 fe4f 	bl	80025c0 <ret_exponent>
 8001922:	ed87 0b14 	vstr	d0, [r7, #80]	; 0x50

	// get gyro readings
	if ((ucRetStat = HOST_SF_LIB_VREG_read(VREG_GYXD, &wdata))) // Read data from the gyrometer datax register
 8001926:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800192a:	4619      	mov	r1, r3
 800192c:	201c      	movs	r0, #28
 800192e:	f001 fcf3 	bl	8003318 <HOST_SF_LIB_VREG_read>
 8001932:	4603      	mov	r3, r0
 8001934:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8001938:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800193c:	2b00      	cmp	r3, #0
 800193e:	d006      	beq.n	800194e <_gyro+0x10e>
		error_handler("VRRd", VREG_GYXD, ucRetStat);  // error display
 8001940:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001944:	461a      	mov	r2, r3
 8001946:	211c      	movs	r1, #28
 8001948:	4862      	ldr	r0, [pc, #392]	; (8001ad4 <_gyro+0x294>)
 800194a:	f7ff fc49 	bl	80011e0 <error_handler>

	dDataX = (int16_t) wdata * dMult; // Multiply this by the exponent scaler to get floating point value
 800194e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001950:	b21b      	sxth	r3, r3
 8001952:	4618      	mov	r0, r3
 8001954:	f7fe fdde 	bl	8000514 <__aeabi_i2d>
 8001958:	4602      	mov	r2, r0
 800195a:	460b      	mov	r3, r1
 800195c:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8001960:	f7fe fe42 	bl	80005e8 <__aeabi_dmul>
 8001964:	4602      	mov	r2, r0
 8001966:	460b      	mov	r3, r1
 8001968:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70

	if ((ucRetStat = HOST_SF_LIB_VREG_read(VREG_GYYD, &wdata))) // Read data from the gyrometer datay register
 800196c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001970:	4619      	mov	r1, r3
 8001972:	201d      	movs	r0, #29
 8001974:	f001 fcd0 	bl	8003318 <HOST_SF_LIB_VREG_read>
 8001978:	4603      	mov	r3, r0
 800197a:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800197e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001982:	2b00      	cmp	r3, #0
 8001984:	d006      	beq.n	8001994 <_gyro+0x154>
		error_handler("VRRd", VREG_GYYD, ucRetStat);  // error display
 8001986:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800198a:	461a      	mov	r2, r3
 800198c:	211d      	movs	r1, #29
 800198e:	4851      	ldr	r0, [pc, #324]	; (8001ad4 <_gyro+0x294>)
 8001990:	f7ff fc26 	bl	80011e0 <error_handler>

	dDataY = (int16_t) wdata * dMult; // Multiply this by the exponent scaler to get floating point value
 8001994:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001996:	b21b      	sxth	r3, r3
 8001998:	4618      	mov	r0, r3
 800199a:	f7fe fdbb 	bl	8000514 <__aeabi_i2d>
 800199e:	4602      	mov	r2, r0
 80019a0:	460b      	mov	r3, r1
 80019a2:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80019a6:	f7fe fe1f 	bl	80005e8 <__aeabi_dmul>
 80019aa:	4602      	mov	r2, r0
 80019ac:	460b      	mov	r3, r1
 80019ae:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68

	if ((ucRetStat = HOST_SF_LIB_VREG_read(VREG_GYZD, &wdata))) // Read data from the gyrometer dataz register
 80019b2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80019b6:	4619      	mov	r1, r3
 80019b8:	201e      	movs	r0, #30
 80019ba:	f001 fcad 	bl	8003318 <HOST_SF_LIB_VREG_read>
 80019be:	4603      	mov	r3, r0
 80019c0:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 80019c4:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d006      	beq.n	80019da <_gyro+0x19a>
		error_handler("VRRd", VREG_GYZD, ucRetStat);  // error display
 80019cc:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80019d0:	461a      	mov	r2, r3
 80019d2:	211e      	movs	r1, #30
 80019d4:	483f      	ldr	r0, [pc, #252]	; (8001ad4 <_gyro+0x294>)
 80019d6:	f7ff fc03 	bl	80011e0 <error_handler>

	dDataZ = (int16_t) wdata * dMult; // Multiply this by the exponent scaler to get floating point value
 80019da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80019dc:	b21b      	sxth	r3, r3
 80019de:	4618      	mov	r0, r3
 80019e0:	f7fe fd98 	bl	8000514 <__aeabi_i2d>
 80019e4:	4602      	mov	r2, r0
 80019e6:	460b      	mov	r3, r1
 80019e8:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80019ec:	f7fe fdfc 	bl	80005e8 <__aeabi_dmul>
 80019f0:	4602      	mov	r2, r0
 80019f2:	460b      	mov	r3, r1
 80019f4:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60

	if (prev_dat[0] != dDataX || prev_dat[1] != dDataY || prev_dat[2] != dDataZ) // Ensure that this data has not yet been displayed
 80019f8:	4b37      	ldr	r3, [pc, #220]	; (8001ad8 <_gyro+0x298>)
 80019fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019fe:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8001a02:	f7ff f859 	bl	8000ab8 <__aeabi_dcmpeq>
 8001a06:	4603      	mov	r3, r0
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d013      	beq.n	8001a34 <_gyro+0x1f4>
 8001a0c:	4b32      	ldr	r3, [pc, #200]	; (8001ad8 <_gyro+0x298>)
 8001a0e:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001a12:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8001a16:	f7ff f84f 	bl	8000ab8 <__aeabi_dcmpeq>
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d009      	beq.n	8001a34 <_gyro+0x1f4>
 8001a20:	4b2d      	ldr	r3, [pc, #180]	; (8001ad8 <_gyro+0x298>)
 8001a22:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8001a26:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8001a2a:	f7ff f845 	bl	8000ab8 <__aeabi_dcmpeq>
 8001a2e:	4603      	mov	r3, r0
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d10e      	bne.n	8001a52 <_gyro+0x212>
			{
		prev_dat[0] = dDataX; // Store the current data values for later reference
 8001a34:	4928      	ldr	r1, [pc, #160]	; (8001ad8 <_gyro+0x298>)
 8001a36:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8001a3a:	e9c1 2300 	strd	r2, r3, [r1]
		prev_dat[1] = dDataY;
 8001a3e:	4926      	ldr	r1, [pc, #152]	; (8001ad8 <_gyro+0x298>)
 8001a40:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8001a44:	e9c1 2302 	strd	r2, r3, [r1, #8]
		prev_dat[2] = dDataZ;
 8001a48:	4923      	ldr	r1, [pc, #140]	; (8001ad8 <_gyro+0x298>)
 8001a4a:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8001a4e:	e9c1 2304 	strd	r2, r3, [r1, #16]
	} //NOTE: If data does not change in response to movement of sensor, SSC7150 not sending EC_DATA_AVAIL interrupts and 'may' need POR

	printf("%d\r\n", dDataX);
 8001a52:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8001a56:	4821      	ldr	r0, [pc, #132]	; (8001adc <_gyro+0x29c>)
 8001a58:	f008 fbb6 	bl	800a1c8 <iprintf>
	printf("%d\r\n", dDataY);
 8001a5c:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8001a60:	481e      	ldr	r0, [pc, #120]	; (8001adc <_gyro+0x29c>)
 8001a62:	f008 fbb1 	bl	800a1c8 <iprintf>
	printf("%d\r\n", dDataZ);
 8001a66:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8001a6a:	481c      	ldr	r0, [pc, #112]	; (8001adc <_gyro+0x29c>)
 8001a6c:	f008 fbac 	bl	800a1c8 <iprintf>

		//Disable the Gyrometer on exit
		if ((ucRetStat = HOST_SF_LIB_VREG_read(VREG_SHC, &wRMWdata)) == SUCCESS) // Read data from the Sensor Hub Configuration register
 8001a70:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001a74:	4619      	mov	r1, r3
 8001a76:	2000      	movs	r0, #0
 8001a78:	f001 fc4e 	bl	8003318 <HOST_SF_LIB_VREG_read>
 8001a7c:	4603      	mov	r3, r0
 8001a7e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8001a82:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d115      	bne.n	8001ab6 <_gyro+0x276>
				{
			if ((ucRetStat = HOST_SF_LIB_VREG_write(VREG_SHC,
 8001a8a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001a8c:	f023 0320 	bic.w	r3, r3, #32
 8001a90:	4619      	mov	r1, r3
 8001a92:	2000      	movs	r0, #0
 8001a94:	f001 fcaa 	bl	80033ec <HOST_SF_LIB_VREG_write>
 8001a98:	4603      	mov	r3, r0
 8001a9a:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8001a9e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d00e      	beq.n	8001ac4 <_gyro+0x284>
					wRMWdata & ~VREG_SHC_GYRO_EN))) // Disable the Gyrometer (clear the GYRO_EN bit)
				error_handler("VRWr", VREG_SHC, ucRetStat); // error display
 8001aa6:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001aaa:	461a      	mov	r2, r3
 8001aac:	2100      	movs	r1, #0
 8001aae:	4808      	ldr	r0, [pc, #32]	; (8001ad0 <_gyro+0x290>)
 8001ab0:	f7ff fb96 	bl	80011e0 <error_handler>
		} else
			error_handler("VRRd", VREG_SHC, ucRetStat); // error display
}
 8001ab4:	e006      	b.n	8001ac4 <_gyro+0x284>
			error_handler("VRRd", VREG_SHC, ucRetStat); // error display
 8001ab6:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001aba:	461a      	mov	r2, r3
 8001abc:	2100      	movs	r1, #0
 8001abe:	4805      	ldr	r0, [pc, #20]	; (8001ad4 <_gyro+0x294>)
 8001ac0:	f7ff fb8e 	bl	80011e0 <error_handler>
}
 8001ac4:	bf00      	nop
 8001ac6:	3778      	adds	r7, #120	; 0x78
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	bd80      	pop	{r7, pc}
 8001acc:	3ff00000 	.word	0x3ff00000
 8001ad0:	0800c00c 	.word	0x0800c00c
 8001ad4:	0800c014 	.word	0x0800c014
 8001ad8:	200000f8 	.word	0x200000f8
 8001adc:	0800c01c 	.word	0x0800c01c

08001ae0 <hid_i2c_descriptor_handler>:
/** hid_i2c_descriptor_handler
 * @note        Retrieve either the descriptor or report tables from the SSC7150 device Note: call GET_HID_DESC 1st
 * @param ucCmd_req command to execute (GET_HID_DESC/GET_RPT_DESC)
 * @return completion_status 0=SUCCESS, 0x10=ID_FAIL, 0x11=HID_DESC_FAIL, 0x12=RPT_DESC_FAIL, 0x14=REP_PARS_FAIL
 */
UINT16 hid_i2c_descriptor_handler(UINT8 ucCmd_req) {
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b090      	sub	sp, #64	; 0x40
 8001ae4:	af02      	add	r7, sp, #8
 8001ae6:	4603      	mov	r3, r0
 8001ae8:	71fb      	strb	r3, [r7, #7]
	UINT8 ucRet = FALSE;
 8001aea:	2300      	movs	r3, #0
 8001aec:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	UINT8 ucTx_data[BUF_40];           // buffer for general writes to i2c slave

	switch (ucCmd_req) {
 8001af0:	79fb      	ldrb	r3, [r7, #7]
 8001af2:	2b01      	cmp	r3, #1
 8001af4:	d003      	beq.n	8001afe <hid_i2c_descriptor_handler+0x1e>
 8001af6:	2b02      	cmp	r3, #2
 8001af8:	f000 8095 	beq.w	8001c26 <hid_i2c_descriptor_handler+0x146>
 8001afc:	e0ba      	b.n	8001c74 <hid_i2c_descriptor_handler+0x194>
	case GET_HID_DESC:             //read the HID Config Descriptor from SSC7150
		ucTx_data[0] = HID_DESC_CMD_LSB; // HID descriptor table request is 0x00 01
 8001afe:	2301      	movs	r3, #1
 8001b00:	733b      	strb	r3, [r7, #12]
		ucTx_data[1] = HID_DESC_CMD_MSB;
 8001b02:	2300      	movs	r3, #0
 8001b04:	737b      	strb	r3, [r7, #13]

		ucRet = i2c_cmd_WrRd( WR_RD, //read the HID Config Descriptor from SSC7150
 8001b06:	f107 020c 	add.w	r2, r7, #12
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	9301      	str	r3, [sp, #4]
 8001b0e:	4b5c      	ldr	r3, [pc, #368]	; (8001c80 <hid_i2c_descriptor_handler+0x1a0>)
 8001b10:	9300      	str	r3, [sp, #0]
 8001b12:	231e      	movs	r3, #30
 8001b14:	2102      	movs	r1, #2
 8001b16:	2003      	movs	r0, #3
 8001b18:	f7ff fb74 	bl	8001204 <i2c_cmd_WrRd>
 8001b1c:	4603      	mov	r3, r0
 8001b1e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
				DESC_CMD_LEN,                       //num of cmd bytes
				ucTx_data,                          //cmd buf 
				HID_CNFG_LEN,                       //num of bytes to read
				HID_DESC,                           //recv buf
				FALSE); //flag indicating that we specified the number of bytes to read explicitly
		if (ucRet)
 8001b22:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d001      	beq.n	8001b2e <hid_i2c_descriptor_handler+0x4e>
			return HID_DESC_FAIL;            //read HID Config Descriptor failed
 8001b2a:	2311      	movs	r3, #17
 8001b2c:	e0a3      	b.n	8001c76 <hid_i2c_descriptor_handler+0x196>

		HID_FIELD.wHIDDescLen = ((HID_DESC[1] << BYTE_SHIFT) | HID_DESC[0]); // As an error check, parse out descriptor table length
 8001b2e:	4b54      	ldr	r3, [pc, #336]	; (8001c80 <hid_i2c_descriptor_handler+0x1a0>)
 8001b30:	785b      	ldrb	r3, [r3, #1]
 8001b32:	021b      	lsls	r3, r3, #8
 8001b34:	4a52      	ldr	r2, [pc, #328]	; (8001c80 <hid_i2c_descriptor_handler+0x1a0>)
 8001b36:	7812      	ldrb	r2, [r2, #0]
 8001b38:	4313      	orrs	r3, r2
 8001b3a:	461a      	mov	r2, r3
 8001b3c:	4b51      	ldr	r3, [pc, #324]	; (8001c84 <hid_i2c_descriptor_handler+0x1a4>)
 8001b3e:	601a      	str	r2, [r3, #0]

		if (HID_FIELD.wHIDDescLen != HID_CNFG_LEN) // If descriptor table length != 30 there is a problem with the transmission
 8001b40:	4b50      	ldr	r3, [pc, #320]	; (8001c84 <hid_i2c_descriptor_handler+0x1a4>)
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	2b1e      	cmp	r3, #30
 8001b46:	d001      	beq.n	8001b4c <hid_i2c_descriptor_handler+0x6c>
			return HID_DESC_FAIL;
 8001b48:	2311      	movs	r3, #17
 8001b4a:	e094      	b.n	8001c76 <hid_i2c_descriptor_handler+0x196>

		HID_FIELD.wRepDescLen = ((HID_DESC[5] << BYTE_SHIFT) | HID_DESC[4]); // Parse out report descriptor length and store in appropriate variable
 8001b4c:	4b4c      	ldr	r3, [pc, #304]	; (8001c80 <hid_i2c_descriptor_handler+0x1a0>)
 8001b4e:	795b      	ldrb	r3, [r3, #5]
 8001b50:	021b      	lsls	r3, r3, #8
 8001b52:	4a4b      	ldr	r2, [pc, #300]	; (8001c80 <hid_i2c_descriptor_handler+0x1a0>)
 8001b54:	7912      	ldrb	r2, [r2, #4]
 8001b56:	4313      	orrs	r3, r2
 8001b58:	461a      	mov	r2, r3
 8001b5a:	4b4a      	ldr	r3, [pc, #296]	; (8001c84 <hid_i2c_descriptor_handler+0x1a4>)
 8001b5c:	605a      	str	r2, [r3, #4]

		if (!HID_FIELD.wRepDescLen || HID_FIELD.wRepDescLen == 0xFFFF
 8001b5e:	4b49      	ldr	r3, [pc, #292]	; (8001c84 <hid_i2c_descriptor_handler+0x1a4>)
 8001b60:	685b      	ldr	r3, [r3, #4]
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d00b      	beq.n	8001b7e <hid_i2c_descriptor_handler+0x9e>
 8001b66:	4b47      	ldr	r3, [pc, #284]	; (8001c84 <hid_i2c_descriptor_handler+0x1a4>)
 8001b68:	685b      	ldr	r3, [r3, #4]
 8001b6a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001b6e:	4293      	cmp	r3, r2
 8001b70:	d005      	beq.n	8001b7e <hid_i2c_descriptor_handler+0x9e>
				|| (HID_FIELD.wRepDescLen > HID_RPT_LEN)) // Check to see if the report descriptor size is valid
 8001b72:	4b44      	ldr	r3, [pc, #272]	; (8001c84 <hid_i2c_descriptor_handler+0x1a4>)
 8001b74:	685b      	ldr	r3, [r3, #4]
 8001b76:	f640 52ac 	movw	r2, #3500	; 0xdac
 8001b7a:	4293      	cmp	r3, r2
 8001b7c:	d901      	bls.n	8001b82 <hid_i2c_descriptor_handler+0xa2>
			return HID_DESC_FAIL;
 8001b7e:	2311      	movs	r3, #17
 8001b80:	e079      	b.n	8001c76 <hid_i2c_descriptor_handler+0x196>

		HID_FIELD.wRepDescReg = ((HID_DESC[6] << BYTE_SHIFT) | HID_DESC[7]); // Parse out report descriptor register and store in appropriate variable
 8001b82:	4b3f      	ldr	r3, [pc, #252]	; (8001c80 <hid_i2c_descriptor_handler+0x1a0>)
 8001b84:	799b      	ldrb	r3, [r3, #6]
 8001b86:	021b      	lsls	r3, r3, #8
 8001b88:	4a3d      	ldr	r2, [pc, #244]	; (8001c80 <hid_i2c_descriptor_handler+0x1a0>)
 8001b8a:	79d2      	ldrb	r2, [r2, #7]
 8001b8c:	4313      	orrs	r3, r2
 8001b8e:	461a      	mov	r2, r3
 8001b90:	4b3c      	ldr	r3, [pc, #240]	; (8001c84 <hid_i2c_descriptor_handler+0x1a4>)
 8001b92:	609a      	str	r2, [r3, #8]

		HID_FIELD.wCmdReg = ((HID_DESC[17] << BYTE_SHIFT) | HID_DESC[16]); // Parse out command register and store in appropriate variable
 8001b94:	4b3a      	ldr	r3, [pc, #232]	; (8001c80 <hid_i2c_descriptor_handler+0x1a0>)
 8001b96:	7c5b      	ldrb	r3, [r3, #17]
 8001b98:	021b      	lsls	r3, r3, #8
 8001b9a:	4a39      	ldr	r2, [pc, #228]	; (8001c80 <hid_i2c_descriptor_handler+0x1a0>)
 8001b9c:	7c12      	ldrb	r2, [r2, #16]
 8001b9e:	4313      	orrs	r3, r2
 8001ba0:	461a      	mov	r2, r3
 8001ba2:	4b38      	ldr	r3, [pc, #224]	; (8001c84 <hid_i2c_descriptor_handler+0x1a4>)
 8001ba4:	611a      	str	r2, [r3, #16]

		HID_FIELD.wDatReg = ((HID_DESC[19] << BYTE_SHIFT) | HID_DESC[18]); // Parse out data register and store in appropriate variable
 8001ba6:	4b36      	ldr	r3, [pc, #216]	; (8001c80 <hid_i2c_descriptor_handler+0x1a0>)
 8001ba8:	7cdb      	ldrb	r3, [r3, #19]
 8001baa:	021b      	lsls	r3, r3, #8
 8001bac:	4a34      	ldr	r2, [pc, #208]	; (8001c80 <hid_i2c_descriptor_handler+0x1a0>)
 8001bae:	7c92      	ldrb	r2, [r2, #18]
 8001bb0:	4313      	orrs	r3, r2
 8001bb2:	461a      	mov	r2, r3
 8001bb4:	4b33      	ldr	r3, [pc, #204]	; (8001c84 <hid_i2c_descriptor_handler+0x1a4>)
 8001bb6:	615a      	str	r2, [r3, #20]

		if (!(HID_FIELD.wVenID = ((HID_DESC[21] << BYTE_SHIFT) | HID_DESC[20]))) // Parse out vendor ID and store in appropriate variable
 8001bb8:	4b31      	ldr	r3, [pc, #196]	; (8001c80 <hid_i2c_descriptor_handler+0x1a0>)
 8001bba:	7d5b      	ldrb	r3, [r3, #21]
 8001bbc:	021b      	lsls	r3, r3, #8
 8001bbe:	4a30      	ldr	r2, [pc, #192]	; (8001c80 <hid_i2c_descriptor_handler+0x1a0>)
 8001bc0:	7d12      	ldrb	r2, [r2, #20]
 8001bc2:	4313      	orrs	r3, r2
 8001bc4:	461a      	mov	r2, r3
 8001bc6:	4b2f      	ldr	r3, [pc, #188]	; (8001c84 <hid_i2c_descriptor_handler+0x1a4>)
 8001bc8:	619a      	str	r2, [r3, #24]
 8001bca:	4b2e      	ldr	r3, [pc, #184]	; (8001c84 <hid_i2c_descriptor_handler+0x1a4>)
 8001bcc:	699b      	ldr	r3, [r3, #24]
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d101      	bne.n	8001bd6 <hid_i2c_descriptor_handler+0xf6>
			return ID_FAIL;
 8001bd2:	2310      	movs	r3, #16
 8001bd4:	e04f      	b.n	8001c76 <hid_i2c_descriptor_handler+0x196>

		if (!(HID_FIELD.wProdID = ((HID_DESC[23] << BYTE_SHIFT) | HID_DESC[22]))) // Parse out product ID and store in appropriate variable
 8001bd6:	4b2a      	ldr	r3, [pc, #168]	; (8001c80 <hid_i2c_descriptor_handler+0x1a0>)
 8001bd8:	7ddb      	ldrb	r3, [r3, #23]
 8001bda:	021b      	lsls	r3, r3, #8
 8001bdc:	4a28      	ldr	r2, [pc, #160]	; (8001c80 <hid_i2c_descriptor_handler+0x1a0>)
 8001bde:	7d92      	ldrb	r2, [r2, #22]
 8001be0:	4313      	orrs	r3, r2
 8001be2:	461a      	mov	r2, r3
 8001be4:	4b27      	ldr	r3, [pc, #156]	; (8001c84 <hid_i2c_descriptor_handler+0x1a4>)
 8001be6:	61da      	str	r2, [r3, #28]
 8001be8:	4b26      	ldr	r3, [pc, #152]	; (8001c84 <hid_i2c_descriptor_handler+0x1a4>)
 8001bea:	69db      	ldr	r3, [r3, #28]
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d101      	bne.n	8001bf4 <hid_i2c_descriptor_handler+0x114>
			return ID_FAIL;
 8001bf0:	2310      	movs	r3, #16
 8001bf2:	e040      	b.n	8001c76 <hid_i2c_descriptor_handler+0x196>

		HID_FIELD.wVerID = ((HID_DESC[25] << BYTE_SHIFT) | HID_DESC[24]); // Parse out version ID and store in appropriate variable
 8001bf4:	4b22      	ldr	r3, [pc, #136]	; (8001c80 <hid_i2c_descriptor_handler+0x1a0>)
 8001bf6:	7e5b      	ldrb	r3, [r3, #25]
 8001bf8:	021b      	lsls	r3, r3, #8
 8001bfa:	4a21      	ldr	r2, [pc, #132]	; (8001c80 <hid_i2c_descriptor_handler+0x1a0>)
 8001bfc:	7e12      	ldrb	r2, [r2, #24]
 8001bfe:	4313      	orrs	r3, r2
 8001c00:	461a      	mov	r2, r3
 8001c02:	4b20      	ldr	r3, [pc, #128]	; (8001c84 <hid_i2c_descriptor_handler+0x1a4>)
 8001c04:	621a      	str	r2, [r3, #32]

		_VREGS.IDs.PID = HID_FIELD.wProdID;    // Update virtual register fields
 8001c06:	4b1f      	ldr	r3, [pc, #124]	; (8001c84 <hid_i2c_descriptor_handler+0x1a4>)
 8001c08:	69db      	ldr	r3, [r3, #28]
 8001c0a:	4a1f      	ldr	r2, [pc, #124]	; (8001c88 <hid_i2c_descriptor_handler+0x1a8>)
 8001c0c:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
		_VREGS.IDs.VID = HID_FIELD.wVenID;
 8001c10:	4b1c      	ldr	r3, [pc, #112]	; (8001c84 <hid_i2c_descriptor_handler+0x1a4>)
 8001c12:	699b      	ldr	r3, [r3, #24]
 8001c14:	4a1c      	ldr	r2, [pc, #112]	; (8001c88 <hid_i2c_descriptor_handler+0x1a8>)
 8001c16:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
		_VREGS.IDs.DID = HID_FIELD.wVerID;
 8001c1a:	4b1a      	ldr	r3, [pc, #104]	; (8001c84 <hid_i2c_descriptor_handler+0x1a4>)
 8001c1c:	6a1b      	ldr	r3, [r3, #32]
 8001c1e:	4a1a      	ldr	r2, [pc, #104]	; (8001c88 <hid_i2c_descriptor_handler+0x1a8>)
 8001c20:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0

		break;
 8001c24:	e026      	b.n	8001c74 <hid_i2c_descriptor_handler+0x194>

	case GET_RPT_DESC:           //read HID Report Descriptor table from SSC7150

		ucTx_data[0] = (HID_FIELD.wRepDescReg >> BYTE_SHIFT); // Report table request is 0x02 00
 8001c26:	4b17      	ldr	r3, [pc, #92]	; (8001c84 <hid_i2c_descriptor_handler+0x1a4>)
 8001c28:	689b      	ldr	r3, [r3, #8]
 8001c2a:	0a1b      	lsrs	r3, r3, #8
 8001c2c:	b2db      	uxtb	r3, r3
 8001c2e:	733b      	strb	r3, [r7, #12]
		ucTx_data[1] = HID_FIELD.wRepDescReg;
 8001c30:	4b14      	ldr	r3, [pc, #80]	; (8001c84 <hid_i2c_descriptor_handler+0x1a4>)
 8001c32:	689b      	ldr	r3, [r3, #8]
 8001c34:	b2db      	uxtb	r3, r3
 8001c36:	737b      	strb	r3, [r7, #13]

		ucRet = i2c_cmd_WrRd(WR_RD, //read the HID Report Descriptor from SSC7150
 8001c38:	4b12      	ldr	r3, [pc, #72]	; (8001c84 <hid_i2c_descriptor_handler+0x1a4>)
 8001c3a:	685b      	ldr	r3, [r3, #4]
 8001c3c:	f107 020c 	add.w	r2, r7, #12
 8001c40:	2100      	movs	r1, #0
 8001c42:	9101      	str	r1, [sp, #4]
 8001c44:	4911      	ldr	r1, [pc, #68]	; (8001c8c <hid_i2c_descriptor_handler+0x1ac>)
 8001c46:	9100      	str	r1, [sp, #0]
 8001c48:	2102      	movs	r1, #2
 8001c4a:	2003      	movs	r0, #3
 8001c4c:	f7ff fada 	bl	8001204 <i2c_cmd_WrRd>
 8001c50:	4603      	mov	r3, r0
 8001c52:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
				DESC_CMD_LEN,                       //num of cmd bytes
				ucTx_data,                          //cmd buf
				HID_FIELD.wRepDescLen,              //num of bytes to read
				RPT_DESC,                           //recv buf
				FALSE); //flag indicating that we specified the number of bytes to read explicitly
		if (ucRet)
 8001c56:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d001      	beq.n	8001c62 <hid_i2c_descriptor_handler+0x182>
			return RPT_DESC_FAIL; // Attempt to acquire the report descriptor table from the HID device
 8001c5e:	2312      	movs	r3, #18
 8001c60:	e009      	b.n	8001c76 <hid_i2c_descriptor_handler+0x196>

		if (report_parse(RPT_DESC)) // Parse the descriptor for sensor information
 8001c62:	480a      	ldr	r0, [pc, #40]	; (8001c8c <hid_i2c_descriptor_handler+0x1ac>)
 8001c64:	f000 f9f2 	bl	800204c <report_parse>
 8001c68:	4603      	mov	r3, r0
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d001      	beq.n	8001c72 <hid_i2c_descriptor_handler+0x192>
			return REP_PARS_FAIL;
 8001c6e:	2314      	movs	r3, #20
 8001c70:	e001      	b.n	8001c76 <hid_i2c_descriptor_handler+0x196>

		break;
 8001c72:	bf00      	nop
	}

	return SUCCESS;
 8001c74:	2300      	movs	r3, #0
}
 8001c76:	4618      	mov	r0, r3
 8001c78:	3738      	adds	r7, #56	; 0x38
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	bd80      	pop	{r7, pc}
 8001c7e:	bf00      	nop
 8001c80:	200001e4 	.word	0x200001e4
 8001c84:	200001c0 	.word	0x200001c0
 8001c88:	2000110c 	.word	0x2000110c
 8001c8c:	20000204 	.word	0x20000204

08001c90 <hid_i2c_cmd_process>:
 * @param ucCmd_req command 
 * @param ucReport_id sensor id 
 * @return completion_status 0=SUCCESS, failcode: 0x16=GET_FEAT_FAIL, 0x17=SET_FEAT_FAIL, 0x18=RESET_FAIL, 0x19=SET_RPT_FAIL, 0x1A=POWER_ON_FAIL, 0x1B=SLEEP_CMD_FAIL, 0x1C=HID_GET_RPT_INPT_FAIL, 0x1D=HID_GET_RPT_FEAT_FAIL 
 */
UINT8 hid_i2c_cmd_process(UINT8 *ucCmdDatbuf, UINT8 ucCmd_req,
		UINT8 ucReport_id) {
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b092      	sub	sp, #72	; 0x48
 8001c94:	af02      	add	r7, sp, #8
 8001c96:	6078      	str	r0, [r7, #4]
 8001c98:	460b      	mov	r3, r1
 8001c9a:	70fb      	strb	r3, [r7, #3]
 8001c9c:	4613      	mov	r3, r2
 8001c9e:	70bb      	strb	r3, [r7, #2]
	UINT8 ucRetStat;
	UINT8 ucTx_data[BUF_40];
	UINT8 ucSensPtr, ucTmpPtr;
	UINT8 ucCmdBufMaxSize = 0;
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	UINT16 usTimeout;
	UINT16 *usVREGSptr = (UINT16*) &_VREGS; // Pointer to individual virtual registers; initialized to start of _VREGS struct
 8001ca6:	4b79      	ldr	r3, [pc, #484]	; (8001e8c <hid_i2c_cmd_process+0x1fc>)
 8001ca8:	637b      	str	r3, [r7, #52]	; 0x34

	switch (ucCmd_req) {
 8001caa:	78fb      	ldrb	r3, [r7, #3]
 8001cac:	3b01      	subs	r3, #1
 8001cae:	2b06      	cmp	r3, #6
 8001cb0:	f200 81b6 	bhi.w	8002020 <hid_i2c_cmd_process+0x390>
 8001cb4:	a201      	add	r2, pc, #4	; (adr r2, 8001cbc <hid_i2c_cmd_process+0x2c>)
 8001cb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001cba:	bf00      	nop
 8001cbc:	08001cd9 	.word	0x08001cd9
 8001cc0:	08001daf 	.word	0x08001daf
 8001cc4:	08001df3 	.word	0x08001df3
 8001cc8:	08001e37 	.word	0x08001e37
 8001ccc:	08001e53 	.word	0x08001e53
 8001cd0:	08002021 	.word	0x08002021
 8001cd4:	08001fed 	.word	0x08001fed

	case RESET_DEV_CMD:                //HID Reset command                      
		ucTx_data[0] = HID_FIELD.wCmdReg; //command field bytes from HID config table                    
 8001cd8:	4b6d      	ldr	r3, [pc, #436]	; (8001e90 <hid_i2c_cmd_process+0x200>)
 8001cda:	691b      	ldr	r3, [r3, #16]
 8001cdc:	b2db      	uxtb	r3, r3
 8001cde:	723b      	strb	r3, [r7, #8]
		ucTx_data[1] = (HID_FIELD.wCmdReg >> BYTE_SHIFT);
 8001ce0:	4b6b      	ldr	r3, [pc, #428]	; (8001e90 <hid_i2c_cmd_process+0x200>)
 8001ce2:	691b      	ldr	r3, [r3, #16]
 8001ce4:	0a1b      	lsrs	r3, r3, #8
 8001ce6:	b2db      	uxtb	r3, r3
 8001ce8:	727b      	strb	r3, [r7, #9]
		ucTx_data[2] = RESET_CMD_LSB; //HID Reset command opcode low byte              
 8001cea:	2300      	movs	r3, #0
 8001cec:	72bb      	strb	r3, [r7, #10]
		ucTx_data[3] = RESET_CMD_MSB;       //HID Reset command opcode high byte
 8001cee:	2301      	movs	r3, #1
 8001cf0:	72fb      	strb	r3, [r7, #11]

		// send the reset command to SSC7150
		ucRetStat = i2c_cmd_WrRd(WRITE,       //WRITE command packet to SSC7150 
 8001cf2:	f107 0208 	add.w	r2, r7, #8
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	9301      	str	r3, [sp, #4]
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	9300      	str	r3, [sp, #0]
 8001cfe:	2300      	movs	r3, #0
 8001d00:	2104      	movs	r1, #4
 8001d02:	2001      	movs	r0, #1
 8001d04:	f7ff fa7e 	bl	8001204 <i2c_cmd_WrRd>
 8001d08:	4603      	mov	r3, r0
 8001d0a:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
				ucTx_data,                          //cmd buf 
				0,                           //num of bytes to read             
				ucCmdDatbuf,                        //recv buf
				FALSE); //flag indicating that we specified the number of bytes to read explicitly

		if (ucRetStat != SUCCESS)
 8001d0e:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d001      	beq.n	8001d1a <hid_i2c_cmd_process+0x8a>
			return RESET_FAIL;
 8001d16:	2318      	movs	r3, #24
 8001d18:	e18c      	b.n	8002034 <hid_i2c_cmd_process+0x3a4>

		TIMER_10MS_FLG = 0;                       // Prepare timer1 for counting
 8001d1a:	4b5e      	ldr	r3, [pc, #376]	; (8001e94 <hid_i2c_cmd_process+0x204>)
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	701a      	strb	r2, [r3, #0]
		usTimeout = TIMEOUT_5SEC; // 5 sec (as per HID spec) timeout for reset command 
 8001d20:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001d24:	63bb      	str	r3, [r7, #56]	; 0x38

		osTimerStart(&timeBaseTimerHandle, 10);
 8001d26:	210a      	movs	r1, #10
 8001d28:	485b      	ldr	r0, [pc, #364]	; (8001e98 <hid_i2c_cmd_process+0x208>)
 8001d2a:	f005 fb4b 	bl	80073c4 <osTimerStart>
		while (usTimeout) // wait up to API spec timeout to respond with EC_DATA avail interrupt   
 8001d2e:	e00f      	b.n	8001d50 <hid_i2c_cmd_process+0xc0>
		{
			if (EC_DATA_AVAIL)      // EC interrupt asserted (data is available)
 8001d30:	4b5a      	ldr	r3, [pc, #360]	; (8001e9c <hid_i2c_cmd_process+0x20c>)
 8001d32:	781b      	ldrb	r3, [r3, #0]
 8001d34:	b2db      	uxtb	r3, r3
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d10e      	bne.n	8001d58 <hid_i2c_cmd_process+0xc8>
				break;

			if (TIMER_10MS_FLG) {
 8001d3a:	4b56      	ldr	r3, [pc, #344]	; (8001e94 <hid_i2c_cmd_process+0x204>)
 8001d3c:	781b      	ldrb	r3, [r3, #0]
 8001d3e:	b2db      	uxtb	r3, r3
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d005      	beq.n	8001d50 <hid_i2c_cmd_process+0xc0>
				TIMER_10MS_FLG = 0;
 8001d44:	4b53      	ldr	r3, [pc, #332]	; (8001e94 <hid_i2c_cmd_process+0x204>)
 8001d46:	2200      	movs	r2, #0
 8001d48:	701a      	strb	r2, [r3, #0]
				usTimeout = usTimeout - 10;    // 1 msec expired, reduce counter
 8001d4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001d4c:	3b0a      	subs	r3, #10
 8001d4e:	63bb      	str	r3, [r7, #56]	; 0x38
		while (usTimeout) // wait up to API spec timeout to respond with EC_DATA avail interrupt   
 8001d50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d1ec      	bne.n	8001d30 <hid_i2c_cmd_process+0xa0>
 8001d56:	e000      	b.n	8001d5a <hid_i2c_cmd_process+0xca>
				break;
 8001d58:	bf00      	nop
			}
		}

		if (!usTimeout)
 8001d5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d101      	bne.n	8001d64 <hid_i2c_cmd_process+0xd4>
			return RESET_FAIL; // timeout occured without device responding with interrupt
 8001d60:	2318      	movs	r3, #24
 8001d62:	e167      	b.n	8002034 <hid_i2c_cmd_process+0x3a4>

		ucRetStat = i2c_cmd_WrRd(READ, // EC_DATA_AVAIL flag was set indicating SSC7150 has data available to be read in response to the RESET CMD
 8001d64:	f107 0208 	add.w	r2, r7, #8
 8001d68:	2300      	movs	r3, #0
 8001d6a:	9301      	str	r3, [sp, #4]
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	9300      	str	r3, [sp, #0]
 8001d70:	2302      	movs	r3, #2
 8001d72:	2100      	movs	r1, #0
 8001d74:	2002      	movs	r0, #2
 8001d76:	f7ff fa45 	bl	8001204 <i2c_cmd_WrRd>
 8001d7a:	4603      	mov	r3, r0
 8001d7c:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
				ucTx_data,                      //cmd buf
				2,                              //num of bytes to read
				ucCmdDatbuf,                    //recv buf 
				FALSE); //flag indicating that we specified the number of bytes to read explicitly

		if (ucRetStat != SUCCESS)
 8001d80:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d001      	beq.n	8001d8c <hid_i2c_cmd_process+0xfc>
			return RESET_FAIL;
 8001d88:	2318      	movs	r3, #24
 8001d8a:	e153      	b.n	8002034 <hid_i2c_cmd_process+0x3a4>

		if (ucCmdDatbuf[0] != 0 && ucCmdDatbuf[1] != 0) // expect 1st two bytes of data packet from SSC7150 in response to RESET command to be "00 00"
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	781b      	ldrb	r3, [r3, #0]
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d006      	beq.n	8001da2 <hid_i2c_cmd_process+0x112>
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	3301      	adds	r3, #1
 8001d98:	781b      	ldrb	r3, [r3, #0]
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d001      	beq.n	8001da2 <hid_i2c_cmd_process+0x112>
			return RESET_FAIL;                             // invalid data found
 8001d9e:	2318      	movs	r3, #24
 8001da0:	e148      	b.n	8002034 <hid_i2c_cmd_process+0x3a4>

		_VREGS.SHC.reset = VREG_RESET_SUCCESS; // Clear the reset VREG to indicate successful 
 8001da2:	4a3a      	ldr	r2, [pc, #232]	; (8001e8c <hid_i2c_cmd_process+0x1fc>)
 8001da4:	7813      	ldrb	r3, [r2, #0]
 8001da6:	f36f 03c3 	bfc	r3, #3, #1
 8001daa:	7013      	strb	r3, [r2, #0]

		break;
 8001dac:	e141      	b.n	8002032 <hid_i2c_cmd_process+0x3a2>

	case POWER_ON:
		ucTx_data[0] = HID_FIELD.wCmdReg; //command field bytes from HID config table 
 8001dae:	4b38      	ldr	r3, [pc, #224]	; (8001e90 <hid_i2c_cmd_process+0x200>)
 8001db0:	691b      	ldr	r3, [r3, #16]
 8001db2:	b2db      	uxtb	r3, r3
 8001db4:	723b      	strb	r3, [r7, #8]
		ucTx_data[1] = (HID_FIELD.wCmdReg >> BYTE_SHIFT);
 8001db6:	4b36      	ldr	r3, [pc, #216]	; (8001e90 <hid_i2c_cmd_process+0x200>)
 8001db8:	691b      	ldr	r3, [r3, #16]
 8001dba:	0a1b      	lsrs	r3, r3, #8
 8001dbc:	b2db      	uxtb	r3, r3
 8001dbe:	727b      	strb	r3, [r7, #9]
		ucTx_data[2] = POWER_CMD_LSB; //HID Power command opcode low  byte for POWER Device ON
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	72bb      	strb	r3, [r7, #10]
		ucTx_data[3] = POWER_CMD_MSB;       //HID Power command opcode high byte
 8001dc4:	2308      	movs	r3, #8
 8001dc6:	72fb      	strb	r3, [r7, #11]

		ucRetStat = i2c_cmd_WrRd(WRITE,     // Issue power on command to SSC7150
 8001dc8:	f107 0208 	add.w	r2, r7, #8
 8001dcc:	2300      	movs	r3, #0
 8001dce:	9301      	str	r3, [sp, #4]
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	9300      	str	r3, [sp, #0]
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	2104      	movs	r1, #4
 8001dd8:	2001      	movs	r0, #1
 8001dda:	f7ff fa13 	bl	8001204 <i2c_cmd_WrRd>
 8001dde:	4603      	mov	r3, r0
 8001de0:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
				ucTx_data,                          //cmd buf
				0,                                  //num of bytes to read
				ucCmdDatbuf,                        //recv buf
				FALSE); //flag indicating that we specified the number of bytes to read explicitly

		if (ucRetStat != SUCCESS)
 8001de4:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	f000 811b 	beq.w	8002024 <hid_i2c_cmd_process+0x394>
			return POWER_ON_FAIL;                              // command failed
 8001dee:	231a      	movs	r3, #26
 8001df0:	e120      	b.n	8002034 <hid_i2c_cmd_process+0x3a4>

		break;

	case SLEEP:

		ucTx_data[0] = HID_FIELD.wCmdReg; //command field bytes from HID config table
 8001df2:	4b27      	ldr	r3, [pc, #156]	; (8001e90 <hid_i2c_cmd_process+0x200>)
 8001df4:	691b      	ldr	r3, [r3, #16]
 8001df6:	b2db      	uxtb	r3, r3
 8001df8:	723b      	strb	r3, [r7, #8]
		ucTx_data[1] = (HID_FIELD.wCmdReg >> BYTE_SHIFT);
 8001dfa:	4b25      	ldr	r3, [pc, #148]	; (8001e90 <hid_i2c_cmd_process+0x200>)
 8001dfc:	691b      	ldr	r3, [r3, #16]
 8001dfe:	0a1b      	lsrs	r3, r3, #8
 8001e00:	b2db      	uxtb	r3, r3
 8001e02:	727b      	strb	r3, [r7, #9]
		ucTx_data[2] = SLEEP_ON_LSB; //HID Power command opcode low byte for Device SLEEP
 8001e04:	2301      	movs	r3, #1
 8001e06:	72bb      	strb	r3, [r7, #10]
		ucTx_data[3] = POWER_CMD_MSB;       //HID Power command opcode high byte
 8001e08:	2308      	movs	r3, #8
 8001e0a:	72fb      	strb	r3, [r7, #11]

		ucRetStat = i2c_cmd_WrRd(WRITE,        // Issue sleep command to SSC7150
 8001e0c:	f107 0208 	add.w	r2, r7, #8
 8001e10:	2300      	movs	r3, #0
 8001e12:	9301      	str	r3, [sp, #4]
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	9300      	str	r3, [sp, #0]
 8001e18:	2300      	movs	r3, #0
 8001e1a:	2104      	movs	r1, #4
 8001e1c:	2001      	movs	r0, #1
 8001e1e:	f7ff f9f1 	bl	8001204 <i2c_cmd_WrRd>
 8001e22:	4603      	mov	r3, r0
 8001e24:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
				ucTx_data,                          //cmd buf 
				0,                                  //num of bytes to read
				ucCmdDatbuf,                        //recv buf
				FALSE); //flag indicating that we specified the number of bytes to read explicitly

		if (ucRetStat != SUCCESS)
 8001e28:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	f000 80fb 	beq.w	8002028 <hid_i2c_cmd_process+0x398>
			return SLEEP_CMD_FAIL;                    // command failed         
 8001e32:	231b      	movs	r3, #27
 8001e34:	e0fe      	b.n	8002034 <hid_i2c_cmd_process+0x3a4>

		break;

	case HID_GET_RPT_INPT:

		ucCmdDatbuf[0] = ucReport_id; //the HOST_SF_LIB_HID_Get_Report expects the sensor id in byte[0] of passed buffer
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	78ba      	ldrb	r2, [r7, #2]
 8001e3a:	701a      	strb	r2, [r3, #0]

		if (HOST_SF_LIB_HID_Get_Report(GET_RRT_INPT, ucCmdDatbuf, 0))
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	6879      	ldr	r1, [r7, #4]
 8001e40:	2010      	movs	r0, #16
 8001e42:	f000 fca7 	bl	8002794 <HOST_SF_LIB_HID_Get_Report>
 8001e46:	4603      	mov	r3, r0
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	f000 80ef 	beq.w	800202c <hid_i2c_cmd_process+0x39c>
			return HID_GET_RPT_FEAT_FAIL;                      // command failed
 8001e4e:	231d      	movs	r3, #29
 8001e50:	e0f0      	b.n	8002034 <hid_i2c_cmd_process+0x3a4>

		break;

	case HID_GET_RPT_FEAT:

		ucCmdDatbuf[0] = ucReport_id; //the HOST_SF_LIB_HID_Get_Report expects the sensor id in byte[0] of passed buffer
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	78ba      	ldrb	r2, [r7, #2]
 8001e56:	701a      	strb	r2, [r3, #0]

		if (HOST_SF_LIB_HID_Get_Report(GET_RPT_FEAT, ucCmdDatbuf, 0))
 8001e58:	2200      	movs	r2, #0
 8001e5a:	6879      	ldr	r1, [r7, #4]
 8001e5c:	2030      	movs	r0, #48	; 0x30
 8001e5e:	f000 fc99 	bl	8002794 <HOST_SF_LIB_HID_Get_Report>
 8001e62:	4603      	mov	r3, r0
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d001      	beq.n	8001e6c <hid_i2c_cmd_process+0x1dc>
			return HID_GET_RPT_FEAT_FAIL;                      // command failed
 8001e68:	231d      	movs	r3, #29
 8001e6a:	e0e3      	b.n	8002034 <hid_i2c_cmd_process+0x3a4>

		if ((ucCmdDatbuf[2] == 0) || (ucCmdDatbuf[2] > NUM_SENS)) // check for valid ID range in feature report
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	3302      	adds	r3, #2
 8001e70:	781b      	ldrb	r3, [r3, #0]
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d004      	beq.n	8001e80 <hid_i2c_cmd_process+0x1f0>
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	3302      	adds	r3, #2
 8001e7a:	781b      	ldrb	r3, [r3, #0]
 8001e7c:	2b0c      	cmp	r3, #12
 8001e7e:	d901      	bls.n	8001e84 <hid_i2c_cmd_process+0x1f4>
			return HID_GET_RPT_FEAT_FAIL;                    // invalid reportID
 8001e80:	231d      	movs	r3, #29
 8001e82:	e0d7      	b.n	8002034 <hid_i2c_cmd_process+0x3a4>

		//now parse the parameters in returned report feature based on offsets derived earlier from parsing the HID Report Descriptor
		for (ucSensPtr = 0; ucSensPtr < NUM_SENS; ucSensPtr++) // traverse through the sensor list looking for matching sesnor id
 8001e84:	2300      	movs	r3, #0
 8001e86:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8001e8a:	e0a7      	b.n	8001fdc <hid_i2c_cmd_process+0x34c>
 8001e8c:	2000110c 	.word	0x2000110c
 8001e90:	200001c0 	.word	0x200001c0
 8001e94:	200000f0 	.word	0x200000f0
 8001e98:	20000098 	.word	0x20000098
 8001e9c:	200000f1 	.word	0x200000f1
				{
			if (SENSOR[ucSensPtr].id == ucReport_id) {
 8001ea0:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8001ea4:	4965      	ldr	r1, [pc, #404]	; (800203c <hid_i2c_cmd_process+0x3ac>)
 8001ea6:	4613      	mov	r3, r2
 8001ea8:	00db      	lsls	r3, r3, #3
 8001eaa:	1a9b      	subs	r3, r3, r2
 8001eac:	440b      	add	r3, r1
 8001eae:	781b      	ldrb	r3, [r3, #0]
 8001eb0:	78ba      	ldrb	r2, [r7, #2]
 8001eb2:	429a      	cmp	r2, r3
 8001eb4:	f040 808d 	bne.w	8001fd2 <hid_i2c_cmd_process+0x342>
				usVREGSptr = &_VREGS.sensitivity.ACSEN + ucSensPtr; // Set pointer to appropriate sensitivity register (as offset from accelerometer sensitivity VREG02)
 8001eb8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001ebc:	009b      	lsls	r3, r3, #2
 8001ebe:	4a60      	ldr	r2, [pc, #384]	; (8002040 <hid_i2c_cmd_process+0x3b0>)
 8001ec0:	4413      	add	r3, r2
 8001ec2:	637b      	str	r3, [r7, #52]	; 0x34

				//retrieve offset pointer to sensitivty parameters for this sensor device (from the Report Descriptor table). Add offset to initial pointer for the actual desired "ACSEN" data within the feature report packet and store this value in VREG register 
				*usVREGSptr = ((ucCmdDatbuf[SENSOR[ucSensPtr].SensOffset
 8001ec4:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8001ec8:	495c      	ldr	r1, [pc, #368]	; (800203c <hid_i2c_cmd_process+0x3ac>)
 8001eca:	4613      	mov	r3, r2
 8001ecc:	00db      	lsls	r3, r3, #3
 8001ece:	1a9b      	subs	r3, r3, r2
 8001ed0:	440b      	add	r3, r1
 8001ed2:	3303      	adds	r3, #3
 8001ed4:	781b      	ldrb	r3, [r3, #0]
 8001ed6:	3307      	adds	r3, #7
 8001ed8:	687a      	ldr	r2, [r7, #4]
 8001eda:	4413      	add	r3, r2
 8001edc:	781b      	ldrb	r3, [r3, #0]
						+ GF_SENS_OFFSET_MSB] << BYTE_SHIFT)
 8001ede:	0219      	lsls	r1, r3, #8
						| ucCmdDatbuf[SENSOR[ucSensPtr].SensOffset
 8001ee0:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8001ee4:	4855      	ldr	r0, [pc, #340]	; (800203c <hid_i2c_cmd_process+0x3ac>)
 8001ee6:	4613      	mov	r3, r2
 8001ee8:	00db      	lsls	r3, r3, #3
 8001eea:	1a9b      	subs	r3, r3, r2
 8001eec:	4403      	add	r3, r0
 8001eee:	3303      	adds	r3, #3
 8001ef0:	781b      	ldrb	r3, [r3, #0]
 8001ef2:	3306      	adds	r3, #6
 8001ef4:	687a      	ldr	r2, [r7, #4]
 8001ef6:	4413      	add	r3, r2
 8001ef8:	781b      	ldrb	r3, [r3, #0]
 8001efa:	430b      	orrs	r3, r1
 8001efc:	461a      	mov	r2, r3
				*usVREGSptr = ((ucCmdDatbuf[SENSOR[ucSensPtr].SensOffset
 8001efe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f00:	601a      	str	r2, [r3, #0]
								+ GF_SENS_OFFSET_LSB]); // Use info about offsets to set _VREGS to appropriate data

				usVREGSptr = &_VREGS.data_rt.ACDXR + ucSensPtr; // Set pointer to appropriate data rate register
 8001f02:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001f06:	009b      	lsls	r3, r3, #2
 8001f08:	4a4e      	ldr	r2, [pc, #312]	; (8002044 <hid_i2c_cmd_process+0x3b4>)
 8001f0a:	4413      	add	r3, r2
 8001f0c:	637b      	str	r3, [r7, #52]	; 0x34

				*usVREGSptr = ((ucCmdDatbuf[SENSOR[ucSensPtr].DatRtOffset
 8001f0e:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8001f12:	494a      	ldr	r1, [pc, #296]	; (800203c <hid_i2c_cmd_process+0x3ac>)
 8001f14:	4613      	mov	r3, r2
 8001f16:	00db      	lsls	r3, r3, #3
 8001f18:	1a9b      	subs	r3, r3, r2
 8001f1a:	440b      	add	r3, r1
 8001f1c:	3302      	adds	r3, #2
 8001f1e:	781b      	ldrb	r3, [r3, #0]
 8001f20:	3304      	adds	r3, #4
 8001f22:	687a      	ldr	r2, [r7, #4]
 8001f24:	4413      	add	r3, r2
 8001f26:	781b      	ldrb	r3, [r3, #0]
						+ GF_DATR_OFFSET_MSB] << BYTE_SHIFT)
 8001f28:	0219      	lsls	r1, r3, #8
						| ucCmdDatbuf[SENSOR[ucSensPtr].DatRtOffset
 8001f2a:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8001f2e:	4843      	ldr	r0, [pc, #268]	; (800203c <hid_i2c_cmd_process+0x3ac>)
 8001f30:	4613      	mov	r3, r2
 8001f32:	00db      	lsls	r3, r3, #3
 8001f34:	1a9b      	subs	r3, r3, r2
 8001f36:	4403      	add	r3, r0
 8001f38:	3302      	adds	r3, #2
 8001f3a:	781b      	ldrb	r3, [r3, #0]
 8001f3c:	3303      	adds	r3, #3
 8001f3e:	687a      	ldr	r2, [r7, #4]
 8001f40:	4413      	add	r3, r2
 8001f42:	781b      	ldrb	r3, [r3, #0]
 8001f44:	430b      	orrs	r3, r1
 8001f46:	461a      	mov	r2, r3
				*usVREGSptr = ((ucCmdDatbuf[SENSOR[ucSensPtr].DatRtOffset
 8001f48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f4a:	601a      	str	r2, [r3, #0]
								+ GF_DATR_OFFSET_LSB]); //point to appropriate data fields within the feature report and store in VREG reg

				usVREGSptr = (UINT16*) &(_VREGS.expo.exp1); //point to appropriate data fields within the feature report and store in VREG reg  NOTE: each exponent VREG holds 4 devices' 4bit exponent value fields
 8001f4c:	4b3e      	ldr	r3, [pc, #248]	; (8002048 <hid_i2c_cmd_process+0x3b8>)
 8001f4e:	637b      	str	r3, [r7, #52]	; 0x34
				if (ucSensPtr > 3) // sensor indexes from 4 to 7 = sensors that have unit exponents in the 2nd exponent register (VREG37)
 8001f50:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001f54:	2b03      	cmp	r3, #3
 8001f56:	d902      	bls.n	8001f5e <hid_i2c_cmd_process+0x2ce>
					usVREGSptr++; // Increment ptr to VREG exponent register to be searched
 8001f58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f5a:	3304      	adds	r3, #4
 8001f5c:	637b      	str	r3, [r7, #52]	; 0x34

				if (ucSensPtr > 7) // sensor indexes > 7 = sensors that have unit exponents in the 3rd exponent register (VREG38)
 8001f5e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001f62:	2b07      	cmp	r3, #7
 8001f64:	d902      	bls.n	8001f6c <hid_i2c_cmd_process+0x2dc>
					usVREGSptr++; // Increment ptr to VREG exponent register to be searched
 8001f66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f68:	3304      	adds	r3, #4
 8001f6a:	637b      	str	r3, [r7, #52]	; 0x34

				ucTmpPtr = ucSensPtr % 4; // Find the appropriate offset for this sensor's unit exponent
 8001f6c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001f70:	f003 0303 	and.w	r3, r3, #3
 8001f74:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32

				*usVREGSptr &= ~(0xF << (4 * ucTmpPtr)); // Clear unit exponent data   
 8001f78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f897 2032 	ldrb.w	r2, [r7, #50]	; 0x32
 8001f80:	0092      	lsls	r2, r2, #2
 8001f82:	210f      	movs	r1, #15
 8001f84:	fa01 f202 	lsl.w	r2, r1, r2
 8001f88:	43d2      	mvns	r2, r2
 8001f8a:	401a      	ands	r2, r3
 8001f8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f8e:	601a      	str	r2, [r3, #0]

				if (SENSOR[ucSensPtr].DatExp) {
 8001f90:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8001f94:	4929      	ldr	r1, [pc, #164]	; (800203c <hid_i2c_cmd_process+0x3ac>)
 8001f96:	4613      	mov	r3, r2
 8001f98:	00db      	lsls	r3, r3, #3
 8001f9a:	1a9b      	subs	r3, r3, r2
 8001f9c:	440b      	add	r3, r1
 8001f9e:	3306      	adds	r3, #6
 8001fa0:	781b      	ldrb	r3, [r3, #0]
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d020      	beq.n	8001fe8 <hid_i2c_cmd_process+0x358>
					*usVREGSptr |= (SENSOR[ucSensPtr].DatExp << (4 * ucTmpPtr)); // Set the unit exponent data to the appropriate VREG  
 8001fa6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001fa8:	6819      	ldr	r1, [r3, #0]
 8001faa:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8001fae:	4823      	ldr	r0, [pc, #140]	; (800203c <hid_i2c_cmd_process+0x3ac>)
 8001fb0:	4613      	mov	r3, r2
 8001fb2:	00db      	lsls	r3, r3, #3
 8001fb4:	1a9b      	subs	r3, r3, r2
 8001fb6:	4403      	add	r3, r0
 8001fb8:	3306      	adds	r3, #6
 8001fba:	781b      	ldrb	r3, [r3, #0]
 8001fbc:	461a      	mov	r2, r3
 8001fbe:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8001fc2:	009b      	lsls	r3, r3, #2
 8001fc4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc8:	ea41 0203 	orr.w	r2, r1, r3
 8001fcc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001fce:	601a      	str	r2, [r3, #0]
				}

				break;
 8001fd0:	e00a      	b.n	8001fe8 <hid_i2c_cmd_process+0x358>
		for (ucSensPtr = 0; ucSensPtr < NUM_SENS; ucSensPtr++) // traverse through the sensor list looking for matching sesnor id
 8001fd2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001fd6:	3301      	adds	r3, #1
 8001fd8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8001fdc:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001fe0:	2b0b      	cmp	r3, #11
 8001fe2:	f67f af5d 	bls.w	8001ea0 <hid_i2c_cmd_process+0x210>
			}
		}

		break;
 8001fe6:	e024      	b.n	8002032 <hid_i2c_cmd_process+0x3a2>
				break;
 8001fe8:	bf00      	nop
		break;
 8001fea:	e022      	b.n	8002032 <hid_i2c_cmd_process+0x3a2>

	case HID_SET_RPT_FEAT:
		//for non-Vendor commands, the sensor id is NOT passed in byte[0] to 'HOST_SF_LIB_HID_Set_Report'
		ucCmdBufMaxSize = ucCmdDatbuf[RPT_SIZE_LSB]; //get size of GetReportFeature Packet
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	781b      	ldrb	r3, [r3, #0]
 8001ff0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

		if ((ucCmdBufMaxSize == 0) || (ucCmdBufMaxSize == 0xFF)) //is the size reasonable?
 8001ff4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d003      	beq.n	8002004 <hid_i2c_cmd_process+0x374>
 8001ffc:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002000:	2bff      	cmp	r3, #255	; 0xff
 8002002:	d101      	bne.n	8002008 <hid_i2c_cmd_process+0x378>
			return SET_FEAT_FAIL;
 8002004:	2317      	movs	r3, #23
 8002006:	e015      	b.n	8002034 <hid_i2c_cmd_process+0x3a4>

		if (HOST_SF_LIB_HID_Set_Report(SET_RPT_FEAT, ucCmdDatbuf,
 8002008:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800200c:	461a      	mov	r2, r3
 800200e:	6879      	ldr	r1, [r7, #4]
 8002010:	2030      	movs	r0, #48	; 0x30
 8002012:	f000 fb3f 	bl	8002694 <HOST_SF_LIB_HID_Set_Report>
 8002016:	4603      	mov	r3, r0
 8002018:	2b00      	cmp	r3, #0
 800201a:	d009      	beq.n	8002030 <hid_i2c_cmd_process+0x3a0>
				ucCmdBufMaxSize))
			return SET_FEAT_FAIL;                              // command failed
 800201c:	2317      	movs	r3, #23
 800201e:	e009      	b.n	8002034 <hid_i2c_cmd_process+0x3a4>

		break;

	default:
		break;
 8002020:	bf00      	nop
 8002022:	e006      	b.n	8002032 <hid_i2c_cmd_process+0x3a2>
		break;
 8002024:	bf00      	nop
 8002026:	e004      	b.n	8002032 <hid_i2c_cmd_process+0x3a2>
		break;
 8002028:	bf00      	nop
 800202a:	e002      	b.n	8002032 <hid_i2c_cmd_process+0x3a2>
		break;
 800202c:	bf00      	nop
 800202e:	e000      	b.n	8002032 <hid_i2c_cmd_process+0x3a2>
		break;
 8002030:	bf00      	nop
	}

	return SUCCESS;
 8002032:	2300      	movs	r3, #0
}
 8002034:	4618      	mov	r0, r3
 8002036:	3740      	adds	r7, #64	; 0x40
 8002038:	46bd      	mov	sp, r7
 800203a:	bd80      	pop	{r7, pc}
 800203c:	20000118 	.word	0x20000118
 8002040:	20001114 	.word	0x20001114
 8002044:	2000113c 	.word	0x2000113c
 8002048:	200011f0 	.word	0x200011f0

0800204c <report_parse>:
/** report_parse
 * @note        Parse data retrieved from SSC7150 HID Report Descriptor, calls and populate required local structs
 * @param *ucBuf Buffer holding the report descriptor table
 * @return completion_status 0=SUCCESS, failcodes: 0x14=REP_PARS_FAIL, 0x15=NO_EOC_FAIL 
 */
UINT8 report_parse(UINT8 *ucBuf) {
 800204c:	b580      	push	{r7, lr}
 800204e:	b086      	sub	sp, #24
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]
	UINT8 *ucBptr = ucBuf;                        // HID Descriptor byte pointer
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	617b      	str	r3, [r7, #20]
	UINT8 *ucStrt = ucBptr; // Pointer to hold start address for later reference
 8002058:	697b      	ldr	r3, [r7, #20]
 800205a:	60fb      	str	r3, [r7, #12]
	UINT8 ucSensptr = 0;     // sensor number variable for struct array traverse
 800205c:	2300      	movs	r3, #0
 800205e:	74fb      	strb	r3, [r7, #19]
	UINT8 ucUsageOffset; // offset of desired HID_USAGE_SENSOR_PROERTY field in report descriptor for later use in finding parameters within the GetReportFeature data
	BOOL bFlag = FALSE; // Flag variable to notify that desired fields have been reached
 8002060:	2300      	movs	r3, #0
 8002062:	747b      	strb	r3, [r7, #17]

	memset(TEMP_SF, 0xFF, sizeof(TEMP_SF)); // Set all of the structs in the TEMP array to 0xFF so we can know if a sensor wasn't found in the report
 8002064:	2254      	movs	r2, #84	; 0x54
 8002066:	21ff      	movs	r1, #255	; 0xff
 8002068:	489a      	ldr	r0, [pc, #616]	; (80022d4 <report_parse+0x288>)
 800206a:	f008 f810 	bl	800a08e <memset>

	while ((ucBptr - ucStrt) <= HID_FIELD.wRepDescLen) // Continue looping until end of report
 800206e:	e196      	b.n	800239e <report_parse+0x352>
	{
		if (*ucBptr == HID_COLLECTION) // Look for HID_COLLECTION(Physical) which should be start of REPORT ID (sensor device) info in report descriptor table  
 8002070:	697b      	ldr	r3, [r7, #20]
 8002072:	781b      	ldrb	r3, [r3, #0]
 8002074:	2ba1      	cmp	r3, #161	; 0xa1
 8002076:	d12e      	bne.n	80020d6 <report_parse+0x8a>
		{
			ucBptr++;          // Increment the pointer to look at the next byte
 8002078:	697b      	ldr	r3, [r7, #20]
 800207a:	3301      	adds	r3, #1
 800207c:	617b      	str	r3, [r7, #20]

			if (*(ucBptr++) == HID_PHYSICAL && *(ucBptr++) == HID_REPORT_ID) // Check if the next two bytes meet the next required identifier needs   
 800207e:	697b      	ldr	r3, [r7, #20]
 8002080:	1c5a      	adds	r2, r3, #1
 8002082:	617a      	str	r2, [r7, #20]
 8002084:	781b      	ldrb	r3, [r3, #0]
 8002086:	2b00      	cmp	r3, #0
 8002088:	d125      	bne.n	80020d6 <report_parse+0x8a>
 800208a:	697b      	ldr	r3, [r7, #20]
 800208c:	1c5a      	adds	r2, r3, #1
 800208e:	617a      	str	r2, [r7, #20]
 8002090:	781b      	ldrb	r3, [r3, #0]
 8002092:	2b85      	cmp	r3, #133	; 0x85
 8002094:	d11f      	bne.n	80020d6 <report_parse+0x8a>
			{
				ucUsageOffset = 0; // clear offset of desired HID_USAGE_SENSOR_PROERTY field in report descriptor for later use in finding parameters within the GetReportFeature data                                    
 8002096:	2300      	movs	r3, #0
 8002098:	74bb      	strb	r3, [r7, #18]
				TEMP_SF[ucSensptr].id = *ucBptr; // Store first sensor device ID number in out temp struct
 800209a:	7cfa      	ldrb	r2, [r7, #19]
 800209c:	697b      	ldr	r3, [r7, #20]
 800209e:	7818      	ldrb	r0, [r3, #0]
 80020a0:	498c      	ldr	r1, [pc, #560]	; (80022d4 <report_parse+0x288>)
 80020a2:	4613      	mov	r3, r2
 80020a4:	00db      	lsls	r3, r3, #3
 80020a6:	1a9b      	subs	r3, r3, r2
 80020a8:	440b      	add	r3, r1
 80020aa:	4602      	mov	r2, r0
 80020ac:	701a      	strb	r2, [r3, #0]

				while (*(ucBptr++) != HID_USAGE_SENSOR_TYPE)
 80020ae:	bf00      	nop
 80020b0:	697b      	ldr	r3, [r7, #20]
 80020b2:	1c5a      	adds	r2, r3, #1
 80020b4:	617a      	str	r2, [r7, #20]
 80020b6:	781b      	ldrb	r3, [r3, #0]
 80020b8:	2b09      	cmp	r3, #9
 80020ba:	d1f9      	bne.n	80020b0 <report_parse+0x64>
					; // Parse until sensor type indicator found  (in HID table: HID_USAGE_SENSOR_TYPE_MOTION_ACCELEROMETER_3D)

				TEMP_SF[ucSensptr].type = *ucBptr; // Store sensor type in struct      
 80020bc:	7cfa      	ldrb	r2, [r7, #19]
 80020be:	697b      	ldr	r3, [r7, #20]
 80020c0:	7818      	ldrb	r0, [r3, #0]
 80020c2:	4984      	ldr	r1, [pc, #528]	; (80022d4 <report_parse+0x288>)
 80020c4:	4613      	mov	r3, r2
 80020c6:	00db      	lsls	r3, r3, #3
 80020c8:	1a9b      	subs	r3, r3, r2
 80020ca:	440b      	add	r3, r1
 80020cc:	3301      	adds	r3, #1
 80020ce:	4602      	mov	r2, r0
 80020d0:	701a      	strb	r2, [r3, #0]
				bFlag = TRUE; // Set the flag to show we are in a field of data that we desire
 80020d2:	2301      	movs	r3, #1
 80020d4:	747b      	strb	r3, [r7, #17]
			}
		}

		if (*ucBptr == HID_END_COLLECTION) // Look for end of this sensor's collection 
 80020d6:	697b      	ldr	r3, [r7, #20]
 80020d8:	781b      	ldrb	r3, [r3, #0]
 80020da:	2bc0      	cmp	r3, #192	; 0xc0
 80020dc:	d12f      	bne.n	800213e <report_parse+0xf2>
		{
			ucBptr++;
 80020de:	697b      	ldr	r3, [r7, #20]
 80020e0:	3301      	adds	r3, #1
 80020e2:	617b      	str	r3, [r7, #20]

			if (*ucBptr == HID_END_COLLECTION)
 80020e4:	697b      	ldr	r3, [r7, #20]
 80020e6:	781b      	ldrb	r3, [r3, #0]
 80020e8:	2bc0      	cmp	r3, #192	; 0xc0
 80020ea:	f000 8162 	beq.w	80023b2 <report_parse+0x366>
				break;                         // end of the report has occurred

			else if (*(ucBptr++) == HID_REPORT_ID) // Next report ID has been found
 80020ee:	697b      	ldr	r3, [r7, #20]
 80020f0:	1c5a      	adds	r2, r3, #1
 80020f2:	617a      	str	r2, [r7, #20]
 80020f4:	781b      	ldrb	r3, [r3, #0]
 80020f6:	2b85      	cmp	r3, #133	; 0x85
 80020f8:	d121      	bne.n	800213e <report_parse+0xf2>
			{
				ucUsageOffset = 0; // clear offset of desired HID_USAGE_SENSOR_PROERTY field in report descriptor for later use in finding parameters within the GetReportFeature data
 80020fa:	2300      	movs	r3, #0
 80020fc:	74bb      	strb	r3, [r7, #18]
				TEMP_SF[ucSensptr].id = *ucBptr; // Store location of sensor ID within the HID Report in struct
 80020fe:	7cfa      	ldrb	r2, [r7, #19]
 8002100:	697b      	ldr	r3, [r7, #20]
 8002102:	7818      	ldrb	r0, [r3, #0]
 8002104:	4973      	ldr	r1, [pc, #460]	; (80022d4 <report_parse+0x288>)
 8002106:	4613      	mov	r3, r2
 8002108:	00db      	lsls	r3, r3, #3
 800210a:	1a9b      	subs	r3, r3, r2
 800210c:	440b      	add	r3, r1
 800210e:	4602      	mov	r2, r0
 8002110:	701a      	strb	r2, [r3, #0]

				while (*(ucBptr++) != HID_USAGE_SENSOR_TYPE)
 8002112:	bf00      	nop
 8002114:	697b      	ldr	r3, [r7, #20]
 8002116:	1c5a      	adds	r2, r3, #1
 8002118:	617a      	str	r2, [r7, #20]
 800211a:	781b      	ldrb	r3, [r3, #0]
 800211c:	2b09      	cmp	r3, #9
 800211e:	d1f9      	bne.n	8002114 <report_parse+0xc8>
					; // Look for sensor type identifier (ie HID_USAGE_SENSOR_TYPE_MOTION_ACCELEROMETER_3D)

				TEMP_SF[ucSensptr].type = *(ucBptr++); // Store location of sensor type within the HID Report in struct   
 8002120:	697b      	ldr	r3, [r7, #20]
 8002122:	1c5a      	adds	r2, r3, #1
 8002124:	617a      	str	r2, [r7, #20]
 8002126:	7cfa      	ldrb	r2, [r7, #19]
 8002128:	7818      	ldrb	r0, [r3, #0]
 800212a:	496a      	ldr	r1, [pc, #424]	; (80022d4 <report_parse+0x288>)
 800212c:	4613      	mov	r3, r2
 800212e:	00db      	lsls	r3, r3, #3
 8002130:	1a9b      	subs	r3, r3, r2
 8002132:	440b      	add	r3, r1
 8002134:	3301      	adds	r3, #1
 8002136:	4602      	mov	r2, r0
 8002138:	701a      	strb	r2, [r3, #0]
				bFlag = TRUE; // Set the flag to show we are in a field of data that we desire
 800213a:	2301      	movs	r3, #1
 800213c:	747b      	strb	r3, [r7, #17]
			}
		}

		if (bFlag) // Check if we should proceed parsing within the HID_USAGE_SENSOR_Properties or simply continue incrementing until a new ID is found
 800213e:	7c7b      	ldrb	r3, [r7, #17]
 8002140:	2b00      	cmp	r3, #0
 8002142:	f000 8129 	beq.w	8002398 <report_parse+0x34c>
		{
			while ((ucBptr - ucStrt) <= HID_FIELD.wRepDescLen) // Search for relevant features HID_USAGE_SENSOR_Properties
 8002146:	e0b8      	b.n	80022ba <report_parse+0x26e>
			{
				if (*ucBptr == HID_USAGE_SENSOR_PROPERTY) {
 8002148:	697b      	ldr	r3, [r7, #20]
 800214a:	781b      	ldrb	r3, [r3, #0]
 800214c:	2b0a      	cmp	r3, #10
 800214e:	f040 80b1 	bne.w	80022b4 <report_parse+0x268>
					ucBptr++;
 8002152:	697b      	ldr	r3, [r7, #20]
 8002154:	3301      	adds	r3, #1
 8002156:	617b      	str	r3, [r7, #20]
					if (*ucBptr == HID_USAGE_SENSOR_PROPERTY_CONN_TYPE) // Seach for sensor connection type and increment offset variable because this field is undesired  (in HID table:HID_USAGE_SENSOR_PROPERTY_SENSOR_CONNECTION_TYPE)
 8002158:	697b      	ldr	r3, [r7, #20]
 800215a:	781b      	ldrb	r3, [r3, #0]
 800215c:	2b09      	cmp	r3, #9
 800215e:	d10b      	bne.n	8002178 <report_parse+0x12c>
					{
						ucBptr++;
 8002160:	697b      	ldr	r3, [r7, #20]
 8002162:	3301      	adds	r3, #1
 8002164:	617b      	str	r3, [r7, #20]
						if (*(ucBptr++) == 0x03) // last parameter of HID_USAGE_SENSOR_PROPERTY_SENSOR_CONNECTION_TYPE (0x0A,0x09,0x03) 
 8002166:	697b      	ldr	r3, [r7, #20]
 8002168:	1c5a      	adds	r2, r3, #1
 800216a:	617a      	str	r2, [r7, #20]
 800216c:	781b      	ldrb	r3, [r3, #0]
 800216e:	2b03      	cmp	r3, #3
 8002170:	d102      	bne.n	8002178 <report_parse+0x12c>
							ucUsageOffset++; //increment HID_USAGE_SENSOR_PROPERTY_... offset "pointer" (for later use in finding parameters within the GetReportFeature data)
 8002172:	7cbb      	ldrb	r3, [r7, #18]
 8002174:	3301      	adds	r3, #1
 8002176:	74bb      	strb	r3, [r7, #18]
					}

					if (*ucBptr == HID_USAGE_SENSOR_PROPERTY_RPT_STATE) // Search for reporting state and increment offset variable because this field is undesired  (in HID table:HID_USAGE_SENSOR_PROPERTY_REPORTING_STATE)
 8002178:	697b      	ldr	r3, [r7, #20]
 800217a:	781b      	ldrb	r3, [r3, #0]
 800217c:	2b16      	cmp	r3, #22
 800217e:	d10b      	bne.n	8002198 <report_parse+0x14c>
					{
						ucBptr++;
 8002180:	697b      	ldr	r3, [r7, #20]
 8002182:	3301      	adds	r3, #1
 8002184:	617b      	str	r3, [r7, #20]
						if (*(ucBptr++) == 0x03) // last parameter of HID_USAGE_SENSOR_PROPERTY_REPORT_INTERVAL (0x0A,0x0E,0x03) 
 8002186:	697b      	ldr	r3, [r7, #20]
 8002188:	1c5a      	adds	r2, r3, #1
 800218a:	617a      	str	r2, [r7, #20]
 800218c:	781b      	ldrb	r3, [r3, #0]
 800218e:	2b03      	cmp	r3, #3
 8002190:	d102      	bne.n	8002198 <report_parse+0x14c>
							ucUsageOffset++; //increment HID_USAGE_SENSOR_PROPERTY_... offset "pointer" (for later use in finding parameters within the GetReportFeature data)
 8002192:	7cbb      	ldrb	r3, [r7, #18]
 8002194:	3301      	adds	r3, #1
 8002196:	74bb      	strb	r3, [r7, #18]
					}

					if (*ucBptr == HID_USAGE_SENSOR_PROPERTY_PWR_STATE) // Search for power state and increment offset variable because this field is undesired  (in HID table : HID_USAGE_SENSOR_PROPERTY_POWER_STATE)
 8002198:	697b      	ldr	r3, [r7, #20]
 800219a:	781b      	ldrb	r3, [r3, #0]
 800219c:	2b19      	cmp	r3, #25
 800219e:	d10b      	bne.n	80021b8 <report_parse+0x16c>
					{
						ucBptr++;
 80021a0:	697b      	ldr	r3, [r7, #20]
 80021a2:	3301      	adds	r3, #1
 80021a4:	617b      	str	r3, [r7, #20]
						if (*(ucBptr++) == 0x03) // last parameter of HID_USAGE_SENSOR_PROPERTY_POWER_STATE (0x0A,0x19,0x03) 
 80021a6:	697b      	ldr	r3, [r7, #20]
 80021a8:	1c5a      	adds	r2, r3, #1
 80021aa:	617a      	str	r2, [r7, #20]
 80021ac:	781b      	ldrb	r3, [r3, #0]
 80021ae:	2b03      	cmp	r3, #3
 80021b0:	d102      	bne.n	80021b8 <report_parse+0x16c>
							ucUsageOffset++; //increment HID_USAGE_SENSOR_PROPERTY_... offset "pointer" (for later use in finding parameters within the GetReportFeature data)
 80021b2:	7cbb      	ldrb	r3, [r7, #18]
 80021b4:	3301      	adds	r3, #1
 80021b6:	74bb      	strb	r3, [r7, #18]
					}

					if (*ucBptr == HID_USAGE_SENSOR_STATE_1) // Search for sensor state and increment offset variable because this field is undesired  (in HID table:HID_USAGE_SENSOR_STATE)
 80021b8:	697b      	ldr	r3, [r7, #20]
 80021ba:	781b      	ldrb	r3, [r3, #0]
 80021bc:	2b01      	cmp	r3, #1
 80021be:	d10b      	bne.n	80021d8 <report_parse+0x18c>
					{
						ucBptr++;
 80021c0:	697b      	ldr	r3, [r7, #20]
 80021c2:	3301      	adds	r3, #1
 80021c4:	617b      	str	r3, [r7, #20]
						if (*(ucBptr++) == 0x02) // last parameter of HID_USAGE_SENSOR_STATE (0x0A,0x01,0x02) 
 80021c6:	697b      	ldr	r3, [r7, #20]
 80021c8:	1c5a      	adds	r2, r3, #1
 80021ca:	617a      	str	r2, [r7, #20]
 80021cc:	781b      	ldrb	r3, [r3, #0]
 80021ce:	2b02      	cmp	r3, #2
 80021d0:	d102      	bne.n	80021d8 <report_parse+0x18c>
							ucUsageOffset++; //increment HID_USAGE_SENSOR_PROPERTY_... offset "pointer" (for later use in finding parameters within the GetReportFeature data)
 80021d2:	7cbb      	ldrb	r3, [r7, #18]
 80021d4:	3301      	adds	r3, #1
 80021d6:	74bb      	strb	r3, [r7, #18]
					}

					if (*ucBptr == HID_USAGE_SENSOR_PROPERTY_RPT_INT) // Search for reporting interval. We desire this value so store it in our struct and then increment the offset  (in HID table:HID_USAGE_SENSOR_PROPERTY_REPORT_INTERVAL)
 80021d8:	697b      	ldr	r3, [r7, #20]
 80021da:	781b      	ldrb	r3, [r3, #0]
 80021dc:	2b0e      	cmp	r3, #14
 80021de:	d113      	bne.n	8002208 <report_parse+0x1bc>
					{
						ucBptr++;
 80021e0:	697b      	ldr	r3, [r7, #20]
 80021e2:	3301      	adds	r3, #1
 80021e4:	617b      	str	r3, [r7, #20]
						if (*(ucBptr++) == 0x03) // last parameter of HID_USAGE_SENSOR_PROPERTY_REPORT_INTERVAL (0x0A,0x0E,0x03)
 80021e6:	697b      	ldr	r3, [r7, #20]
 80021e8:	1c5a      	adds	r2, r3, #1
 80021ea:	617a      	str	r2, [r7, #20]
 80021ec:	781b      	ldrb	r3, [r3, #0]
 80021ee:	2b03      	cmp	r3, #3
 80021f0:	d10a      	bne.n	8002208 <report_parse+0x1bc>
							TEMP_SF[ucSensptr].DatRtOffset = ucUsageOffset++; //save & increment HID_USAGE_SENSOR_PROPERTY_... offset "pointer" (for later use in finding parameters within the GetReportFeature data)
 80021f2:	7cba      	ldrb	r2, [r7, #18]
 80021f4:	1c53      	adds	r3, r2, #1
 80021f6:	74bb      	strb	r3, [r7, #18]
 80021f8:	7cf9      	ldrb	r1, [r7, #19]
 80021fa:	4836      	ldr	r0, [pc, #216]	; (80022d4 <report_parse+0x288>)
 80021fc:	460b      	mov	r3, r1
 80021fe:	00db      	lsls	r3, r3, #3
 8002200:	1a5b      	subs	r3, r3, r1
 8002202:	4403      	add	r3, r0
 8002204:	3302      	adds	r3, #2
 8002206:	701a      	strb	r2, [r3, #0]
					}

					ucBptr++;                           //increment position ptr
 8002208:	697b      	ldr	r3, [r7, #20]
 800220a:	3301      	adds	r3, #1
 800220c:	617b      	str	r3, [r7, #20]

					// NOTE: There is a different identifier for RAW data and that is why two identifiers are checked for here
					if ((*ucBptr == HID_USAGE_SENSOR_DATA_ACCU)
 800220e:	697b      	ldr	r3, [r7, #20]
 8002210:	781b      	ldrb	r3, [r3, #0]
 8002212:	2b44      	cmp	r3, #68	; 0x44
 8002214:	d003      	beq.n	800221e <report_parse+0x1d2>
							|| (*ucBptr == HID_USAGE_SENSOR_DATA_RAW_ACCU)) // Search for sensor accuracy & increment offset variable because this field is undesired (in HID table:HID_USAGE_SENSOR_DATA(HID_USAGE_SENSOR_DATA_MOTION_ACCELERATION,HID_USAGE_SENSOR_DATA_MOD_ACCURACY))
 8002216:	697b      	ldr	r3, [r7, #20]
 8002218:	781b      	ldrb	r3, [r3, #0]
 800221a:	2b45      	cmp	r3, #69	; 0x45
 800221c:	d102      	bne.n	8002224 <report_parse+0x1d8>
						ucUsageOffset++; //increment HID_USAGE_SENSOR_PROPERTY_... offset "pointer" (for later use in finding parameters within the GetReportFeature data)
 800221e:	7cbb      	ldrb	r3, [r7, #18]
 8002220:	3301      	adds	r3, #1
 8002222:	74bb      	strb	r3, [r7, #18]

					if ((*ucBptr == HID_USAGE_SENSOR_DATA_RES)
 8002224:	697b      	ldr	r3, [r7, #20]
 8002226:	781b      	ldrb	r3, [r3, #0]
 8002228:	2b54      	cmp	r3, #84	; 0x54
 800222a:	d003      	beq.n	8002234 <report_parse+0x1e8>
							|| (*ucBptr == HID_USAGE_SENSOR_DATA_RAW_RES)) // Search for sensor resolution and increment offset variable because this field is undesired (in HID table: HID_USAGE_SENSOR_DATA(HID_USAGE_SENSOR_DATA_MOTION_ACCELERATION,HID_USAGE_SENSOR_DATA_MOD_RESOLUTION))
 800222c:	697b      	ldr	r3, [r7, #20]
 800222e:	781b      	ldrb	r3, [r3, #0]
 8002230:	2b55      	cmp	r3, #85	; 0x55
 8002232:	d102      	bne.n	800223a <report_parse+0x1ee>
						ucUsageOffset++; //increment HID_USAGE_SENSOR_PROPERTY_... offset "pointer" (for later use in finding parameters within the GetReportFeature data)
 8002234:	7cbb      	ldrb	r3, [r7, #18]
 8002236:	3301      	adds	r3, #1
 8002238:	74bb      	strb	r3, [r7, #18]

					if ((*ucBptr == HID_USAGE_SENSOR_DATA_MOD_SENS)
 800223a:	697b      	ldr	r3, [r7, #20]
 800223c:	781b      	ldrb	r3, [r3, #0]
 800223e:	2b14      	cmp	r3, #20
 8002240:	d003      	beq.n	800224a <report_parse+0x1fe>
							|| (*ucBptr == HID_USAGE_SENSOR_DATA_RAW_MOD_SENS)) // Search for sensor sensitivity (HID_USAGE_SENSOR_DATA(HID_USAGE_SENSOR_DATA_MOTION_ACCELERATION,HID_USAGE_SENSOR_DATA_MOD_CHANGE_SENSITIVITY_ABS))
 8002242:	697b      	ldr	r3, [r7, #20]
 8002244:	781b      	ldrb	r3, [r3, #0]
 8002246:	2b15      	cmp	r3, #21
 8002248:	d11d      	bne.n	8002286 <report_parse+0x23a>
							{
						TEMP_SF[ucSensptr].SensOffset = ucUsageOffset++; //save & increment HID_USAGE_SENSOR_PROPERTY_... offset "pointer" (for later use in finding parameters within the GetReportFeature data)                         
 800224a:	7cba      	ldrb	r2, [r7, #18]
 800224c:	1c53      	adds	r3, r2, #1
 800224e:	74bb      	strb	r3, [r7, #18]
 8002250:	7cf9      	ldrb	r1, [r7, #19]
 8002252:	4820      	ldr	r0, [pc, #128]	; (80022d4 <report_parse+0x288>)
 8002254:	460b      	mov	r3, r1
 8002256:	00db      	lsls	r3, r3, #3
 8002258:	1a5b      	subs	r3, r3, r1
 800225a:	4403      	add	r3, r0
 800225c:	3303      	adds	r3, #3
 800225e:	701a      	strb	r2, [r3, #0]

						while (*(ucBptr++) != HID_UNIT_EXP)
 8002260:	bf00      	nop
 8002262:	697b      	ldr	r3, [r7, #20]
 8002264:	1c5a      	adds	r2, r3, #1
 8002266:	617a      	str	r2, [r7, #20]
 8002268:	781b      	ldrb	r3, [r3, #0]
 800226a:	2b55      	cmp	r3, #85	; 0x55
 800226c:	d1f9      	bne.n	8002262 <report_parse+0x216>
							; // Increment until exponent value of the data is found

						TEMP_SF[ucSensptr].SensExp = *ucBptr; // Store this value in the temp struct
 800226e:	7cfa      	ldrb	r2, [r7, #19]
 8002270:	697b      	ldr	r3, [r7, #20]
 8002272:	7818      	ldrb	r0, [r3, #0]
 8002274:	4917      	ldr	r1, [pc, #92]	; (80022d4 <report_parse+0x288>)
 8002276:	4613      	mov	r3, r2
 8002278:	00db      	lsls	r3, r3, #3
 800227a:	1a9b      	subs	r3, r3, r2
 800227c:	440b      	add	r3, r1
 800227e:	3304      	adds	r3, #4
 8002280:	4602      	mov	r2, r0
 8002282:	701a      	strb	r2, [r3, #0]
						break;
 8002284:	e022      	b.n	80022cc <report_parse+0x280>
					}

					if ((*ucBptr == HID_USAGE_SENSOR_DATA_MOD_MAX)
 8002286:	697b      	ldr	r3, [r7, #20]
 8002288:	781b      	ldrb	r3, [r3, #0]
 800228a:	2b24      	cmp	r3, #36	; 0x24
 800228c:	d003      	beq.n	8002296 <report_parse+0x24a>
							|| (*ucBptr == HID_USAGE_SENSOR_DATA_RAW_MOD_MAX)) // Search for sensor MAX val and increment offset variable because this field is undesired HID_USAGE_SENSOR_DATA(HID_USAGE_SENSOR_DATA_MOTION_ACCELERATION,HID_USAGE_SENSOR_DATA_MOD_MAX)
 800228e:	697b      	ldr	r3, [r7, #20]
 8002290:	781b      	ldrb	r3, [r3, #0]
 8002292:	2b25      	cmp	r3, #37	; 0x25
 8002294:	d102      	bne.n	800229c <report_parse+0x250>
						ucUsageOffset++; //increment HID_USAGE_SENSOR_PROPERTY_... offset "pointer" (for later use in finding parameters within the GetReportFeature data)
 8002296:	7cbb      	ldrb	r3, [r7, #18]
 8002298:	3301      	adds	r3, #1
 800229a:	74bb      	strb	r3, [r7, #18]

					if ((*ucBptr == HID_USAGE_SENSOR_DATA_MOD_MIN)
 800229c:	697b      	ldr	r3, [r7, #20]
 800229e:	781b      	ldrb	r3, [r3, #0]
 80022a0:	2b34      	cmp	r3, #52	; 0x34
 80022a2:	d003      	beq.n	80022ac <report_parse+0x260>
							|| (*ucBptr == HID_USAGE_SENSOR_DATA_RAW_MOD_MIN)) // Search for sensor MIN val and increment offset variable because this field is undesired HID_USAGE_SENSOR_DATA(HID_USAGE_SENSOR_DATA_MOTION_ACCELERATION,HID_USAGE_SENSOR_DATA_MOD_MIN)
 80022a4:	697b      	ldr	r3, [r7, #20]
 80022a6:	781b      	ldrb	r3, [r3, #0]
 80022a8:	2b35      	cmp	r3, #53	; 0x35
 80022aa:	d106      	bne.n	80022ba <report_parse+0x26e>
						ucUsageOffset++; //increment HID_USAGE_SENSOR_PROPERTY_... offset "pointer" (for later use in finding parameters within the GetReportFeature data)
 80022ac:	7cbb      	ldrb	r3, [r7, #18]
 80022ae:	3301      	adds	r3, #1
 80022b0:	74bb      	strb	r3, [r7, #18]
 80022b2:	e002      	b.n	80022ba <report_parse+0x26e>
				}

				else
					ucBptr++; // If a new identifier has not yet been reached, continue traversing report descriptor 
 80022b4:	697b      	ldr	r3, [r7, #20]
 80022b6:	3301      	adds	r3, #1
 80022b8:	617b      	str	r3, [r7, #20]
			while ((ucBptr - ucStrt) <= HID_FIELD.wRepDescLen) // Search for relevant features HID_USAGE_SENSOR_Properties
 80022ba:	697a      	ldr	r2, [r7, #20]
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	1ad3      	subs	r3, r2, r3
 80022c0:	461a      	mov	r2, r3
 80022c2:	4b05      	ldr	r3, [pc, #20]	; (80022d8 <report_parse+0x28c>)
 80022c4:	685b      	ldr	r3, [r3, #4]
 80022c6:	429a      	cmp	r2, r3
 80022c8:	f67f af3e 	bls.w	8002148 <report_parse+0xfc>
			}

			ucUsageOffset = 0; //reset HID_USAGE_SENSOR_PROPERTY_... offset "pointer" (for later use in finding parameters within the GetReportFeature data)
 80022cc:	2300      	movs	r3, #0
 80022ce:	74bb      	strb	r3, [r7, #18]

			while ((ucBptr - ucStrt) <= HID_FIELD.wRepDescLen) // Search for relevant input features
 80022d0:	e054      	b.n	800237c <report_parse+0x330>
 80022d2:	bf00      	nop
 80022d4:	2000016c 	.word	0x2000016c
 80022d8:	200001c0 	.word	0x200001c0
			{
				if (*ucBptr == HID_USAGE_SENSOR_) {
 80022dc:	697b      	ldr	r3, [r7, #20]
 80022de:	781b      	ldrb	r3, [r3, #0]
 80022e0:	2b0a      	cmp	r3, #10
 80022e2:	d148      	bne.n	8002376 <report_parse+0x32a>
					ucBptr++;                           // Continue to next byte
 80022e4:	697b      	ldr	r3, [r7, #20]
 80022e6:	3301      	adds	r3, #1
 80022e8:	617b      	str	r3, [r7, #20]

					if (*ucBptr == HID_USAGE_SENSOR_STATE_1) {
 80022ea:	697b      	ldr	r3, [r7, #20]
 80022ec:	781b      	ldrb	r3, [r3, #0]
 80022ee:	2b01      	cmp	r3, #1
 80022f0:	d10b      	bne.n	800230a <report_parse+0x2be>
						ucBptr++;
 80022f2:	697b      	ldr	r3, [r7, #20]
 80022f4:	3301      	adds	r3, #1
 80022f6:	617b      	str	r3, [r7, #20]
						if (*(ucBptr++) == HID_USAGE_SENSOR_STATE_2) // Search for HID usage sensor state and increment offset variable because this field is undesired
 80022f8:	697b      	ldr	r3, [r7, #20]
 80022fa:	1c5a      	adds	r2, r3, #1
 80022fc:	617a      	str	r2, [r7, #20]
 80022fe:	781b      	ldrb	r3, [r3, #0]
 8002300:	2b02      	cmp	r3, #2
 8002302:	d102      	bne.n	800230a <report_parse+0x2be>
							ucUsageOffset++; //increment HID_USAGE_SENSOR_PROPERTY_... offset "pointer" (for later use in finding parameters within the GetReportFeature data)
 8002304:	7cbb      	ldrb	r3, [r7, #18]
 8002306:	3301      	adds	r3, #1
 8002308:	74bb      	strb	r3, [r7, #18]
					}

					if (*ucBptr == HID_USAGE_SENSOR_EVENT_1) {
 800230a:	697b      	ldr	r3, [r7, #20]
 800230c:	781b      	ldrb	r3, [r3, #0]
 800230e:	2b02      	cmp	r3, #2
 8002310:	d134      	bne.n	800237c <report_parse+0x330>
						ucBptr++;                       // Continue to next byte
 8002312:	697b      	ldr	r3, [r7, #20]
 8002314:	3301      	adds	r3, #1
 8002316:	617b      	str	r3, [r7, #20]
						if (*(ucBptr++) == HID_USAGE_SENSOR_EVENT_2) // Search for HID usage sensor event and increment the offset variable
 8002318:	697b      	ldr	r3, [r7, #20]
 800231a:	1c5a      	adds	r2, r3, #1
 800231c:	617a      	str	r2, [r7, #20]
 800231e:	781b      	ldrb	r3, [r3, #0]
 8002320:	2b02      	cmp	r3, #2
 8002322:	d12b      	bne.n	800237c <report_parse+0x330>
						{
							ucUsageOffset++; //increment HID_USAGE_SENSOR_PROPERTY_... offset "pointer" (for later use in finding parameters within the GetReportFeature data)
 8002324:	7cbb      	ldrb	r3, [r7, #18]
 8002326:	3301      	adds	r3, #1
 8002328:	74bb      	strb	r3, [r7, #18]
							while (*(ucBptr++) != HID_END_COLLECTION)
 800232a:	bf00      	nop
 800232c:	697b      	ldr	r3, [r7, #20]
 800232e:	1c5a      	adds	r2, r3, #1
 8002330:	617a      	str	r2, [r7, #20]
 8002332:	781b      	ldrb	r3, [r3, #0]
 8002334:	2bc0      	cmp	r3, #192	; 0xc0
 8002336:	d1f9      	bne.n	800232c <report_parse+0x2e0>
								; // end of the sensor event field signifies the start of desired input data

							TEMP_SF[ucSensptr].DatOffset = ucUsageOffset + 3; //save HID_USAGE_SENSOR_PROPERTY_... offset "pointer" (for later use in finding parameters within the GetReportFeature data) NOTE: offset an additional 3 for extra data received on GPIO interrupt
 8002338:	7cfa      	ldrb	r2, [r7, #19]
 800233a:	7cbb      	ldrb	r3, [r7, #18]
 800233c:	3303      	adds	r3, #3
 800233e:	b2d8      	uxtb	r0, r3
 8002340:	4999      	ldr	r1, [pc, #612]	; (80025a8 <report_parse+0x55c>)
 8002342:	4613      	mov	r3, r2
 8002344:	00db      	lsls	r3, r3, #3
 8002346:	1a9b      	subs	r3, r3, r2
 8002348:	440b      	add	r3, r1
 800234a:	3305      	adds	r3, #5
 800234c:	4602      	mov	r2, r0
 800234e:	701a      	strb	r2, [r3, #0]

							while (*(ucBptr++) != HID_UNIT_EXP)
 8002350:	bf00      	nop
 8002352:	697b      	ldr	r3, [r7, #20]
 8002354:	1c5a      	adds	r2, r3, #1
 8002356:	617a      	str	r2, [r7, #20]
 8002358:	781b      	ldrb	r3, [r3, #0]
 800235a:	2b55      	cmp	r3, #85	; 0x55
 800235c:	d1f9      	bne.n	8002352 <report_parse+0x306>
								; // Search for, and store, the unit exponent value for the input data

							TEMP_SF[ucSensptr].DatExp = *ucBptr;
 800235e:	7cfa      	ldrb	r2, [r7, #19]
 8002360:	697b      	ldr	r3, [r7, #20]
 8002362:	7818      	ldrb	r0, [r3, #0]
 8002364:	4990      	ldr	r1, [pc, #576]	; (80025a8 <report_parse+0x55c>)
 8002366:	4613      	mov	r3, r2
 8002368:	00db      	lsls	r3, r3, #3
 800236a:	1a9b      	subs	r3, r3, r2
 800236c:	440b      	add	r3, r1
 800236e:	3306      	adds	r3, #6
 8002370:	4602      	mov	r2, r0
 8002372:	701a      	strb	r2, [r3, #0]

							break;
 8002374:	e00a      	b.n	800238c <report_parse+0x340>
						}
					}
				} else
					ucBptr++; // If desired identifiers haven't been reached, continue traversing HID Report Descriptor
 8002376:	697b      	ldr	r3, [r7, #20]
 8002378:	3301      	adds	r3, #1
 800237a:	617b      	str	r3, [r7, #20]
			while ((ucBptr - ucStrt) <= HID_FIELD.wRepDescLen) // Search for relevant input features
 800237c:	697a      	ldr	r2, [r7, #20]
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	1ad3      	subs	r3, r2, r3
 8002382:	461a      	mov	r2, r3
 8002384:	4b89      	ldr	r3, [pc, #548]	; (80025ac <report_parse+0x560>)
 8002386:	685b      	ldr	r3, [r3, #4]
 8002388:	429a      	cmp	r2, r3
 800238a:	d9a7      	bls.n	80022dc <report_parse+0x290>
			}

			bFlag = FALSE; // Reset the flag to 0 to show that we are done with descriptor data from this report ID
 800238c:	2300      	movs	r3, #0
 800238e:	747b      	strb	r3, [r7, #17]
			ucSensptr++; // Increment to the next sensor in the struct array of sensors
 8002390:	7cfb      	ldrb	r3, [r7, #19]
 8002392:	3301      	adds	r3, #1
 8002394:	74fb      	strb	r3, [r7, #19]
 8002396:	e002      	b.n	800239e <report_parse+0x352>
		}

		else
			ucBptr++; // If desired identifiers haven't been reached, continue traversing HID Report Descriptor
 8002398:	697b      	ldr	r3, [r7, #20]
 800239a:	3301      	adds	r3, #1
 800239c:	617b      	str	r3, [r7, #20]
	while ((ucBptr - ucStrt) <= HID_FIELD.wRepDescLen) // Continue looping until end of report
 800239e:	697a      	ldr	r2, [r7, #20]
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	1ad3      	subs	r3, r2, r3
 80023a4:	461a      	mov	r2, r3
 80023a6:	4b81      	ldr	r3, [pc, #516]	; (80025ac <report_parse+0x560>)
 80023a8:	685b      	ldr	r3, [r3, #4]
 80023aa:	429a      	cmp	r2, r3
 80023ac:	f67f ae60 	bls.w	8002070 <report_parse+0x24>
 80023b0:	e000      	b.n	80023b4 <report_parse+0x368>
				break;                         // end of the report has occurred
 80023b2:	bf00      	nop
	}

	if ((ucBptr - ucStrt) > (HID_FIELD.wRepDescLen + 1)) // Sanity check to ensure the loop exited at the end of the report descriptor
 80023b4:	697a      	ldr	r2, [r7, #20]
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	1ad3      	subs	r3, r2, r3
 80023ba:	461a      	mov	r2, r3
 80023bc:	4b7b      	ldr	r3, [pc, #492]	; (80025ac <report_parse+0x560>)
 80023be:	685b      	ldr	r3, [r3, #4]
 80023c0:	3301      	adds	r3, #1
 80023c2:	429a      	cmp	r2, r3
 80023c4:	d901      	bls.n	80023ca <report_parse+0x37e>
		return NO_EOC_FAIL;
 80023c6:	2315      	movs	r3, #21
 80023c8:	e0e9      	b.n	800259e <report_parse+0x552>

	for (ucSensptr = 0; ucSensptr < NUM_SENS; ucSensptr++) // Sanity check to see if the desired fields were parsed correctly
 80023ca:	2300      	movs	r3, #0
 80023cc:	74fb      	strb	r3, [r7, #19]
 80023ce:	e01a      	b.n	8002406 <report_parse+0x3ba>
			{
		if (TEMP_SF[ucSensptr].id == 0xFF) // If the ID == 0xFF it means that the sensor isn't present in the device
 80023d0:	7cfa      	ldrb	r2, [r7, #19]
 80023d2:	4975      	ldr	r1, [pc, #468]	; (80025a8 <report_parse+0x55c>)
 80023d4:	4613      	mov	r3, r2
 80023d6:	00db      	lsls	r3, r3, #3
 80023d8:	1a9b      	subs	r3, r3, r2
 80023da:	440b      	add	r3, r1
 80023dc:	781b      	ldrb	r3, [r3, #0]
 80023de:	2bff      	cmp	r3, #255	; 0xff
 80023e0:	d00d      	beq.n	80023fe <report_parse+0x3b2>
			continue;
		if (TEMP_SF[ucSensptr].id != (ucSensptr + 1)) // Make sure every filled struct has a valid sensor ID
 80023e2:	7cfa      	ldrb	r2, [r7, #19]
 80023e4:	4970      	ldr	r1, [pc, #448]	; (80025a8 <report_parse+0x55c>)
 80023e6:	4613      	mov	r3, r2
 80023e8:	00db      	lsls	r3, r3, #3
 80023ea:	1a9b      	subs	r3, r3, r2
 80023ec:	440b      	add	r3, r1
 80023ee:	781b      	ldrb	r3, [r3, #0]
 80023f0:	461a      	mov	r2, r3
 80023f2:	7cfb      	ldrb	r3, [r7, #19]
 80023f4:	3301      	adds	r3, #1
 80023f6:	429a      	cmp	r2, r3
 80023f8:	d002      	beq.n	8002400 <report_parse+0x3b4>
			return REP_PARS_FAIL;
 80023fa:	2314      	movs	r3, #20
 80023fc:	e0cf      	b.n	800259e <report_parse+0x552>
			continue;
 80023fe:	bf00      	nop
	for (ucSensptr = 0; ucSensptr < NUM_SENS; ucSensptr++) // Sanity check to see if the desired fields were parsed correctly
 8002400:	7cfb      	ldrb	r3, [r7, #19]
 8002402:	3301      	adds	r3, #1
 8002404:	74fb      	strb	r3, [r7, #19]
 8002406:	7cfb      	ldrb	r3, [r7, #19]
 8002408:	2b0b      	cmp	r3, #11
 800240a:	d9e1      	bls.n	80023d0 <report_parse+0x384>
	}

	memset(&SENSOR, 0xFF, sizeof(SENSOR)); // Init & Rearrange structs into order compatible with _VREGS structure            
 800240c:	2254      	movs	r2, #84	; 0x54
 800240e:	21ff      	movs	r1, #255	; 0xff
 8002410:	4867      	ldr	r0, [pc, #412]	; (80025b0 <report_parse+0x564>)
 8002412:	f007 fe3c 	bl	800a08e <memset>

	for (ucSensptr = 0; ucSensptr < NUM_SENS; ucSensptr++) // go through the entire sensor list looking for sensor types
 8002416:	2300      	movs	r3, #0
 8002418:	74fb      	strb	r3, [r7, #19]
 800241a:	e0bb      	b.n	8002594 <report_parse+0x548>
			{
		if (TEMP_SF[ucSensptr].type == ACCEL_SENSOR_TYPE) // Sensor type identifier for accelerometer
 800241c:	7cfa      	ldrb	r2, [r7, #19]
 800241e:	4962      	ldr	r1, [pc, #392]	; (80025a8 <report_parse+0x55c>)
 8002420:	4613      	mov	r3, r2
 8002422:	00db      	lsls	r3, r3, #3
 8002424:	1a9b      	subs	r3, r3, r2
 8002426:	440b      	add	r3, r1
 8002428:	3301      	adds	r3, #1
 800242a:	781b      	ldrb	r3, [r3, #0]
 800242c:	2b73      	cmp	r3, #115	; 0x73
 800242e:	d112      	bne.n	8002456 <report_parse+0x40a>
		{
			SENSOR[ACCEL_VREG_OFFSET] = TEMP_SF[ucSensptr]; // Store this struct as the first in the new order
 8002430:	7cfa      	ldrb	r2, [r7, #19]
 8002432:	485f      	ldr	r0, [pc, #380]	; (80025b0 <report_parse+0x564>)
 8002434:	495c      	ldr	r1, [pc, #368]	; (80025a8 <report_parse+0x55c>)
 8002436:	4613      	mov	r3, r2
 8002438:	00db      	lsls	r3, r3, #3
 800243a:	1a9b      	subs	r3, r3, r2
 800243c:	18ca      	adds	r2, r1, r3
 800243e:	4603      	mov	r3, r0
 8002440:	6810      	ldr	r0, [r2, #0]
 8002442:	6018      	str	r0, [r3, #0]
 8002444:	8891      	ldrh	r1, [r2, #4]
 8002446:	7992      	ldrb	r2, [r2, #6]
 8002448:	8099      	strh	r1, [r3, #4]
 800244a:	719a      	strb	r2, [r3, #6]
			_VREGS.SL.accel = TRUE; // VREG01 accelerometer available bit(0) set
 800244c:	4a59      	ldr	r2, [pc, #356]	; (80025b4 <report_parse+0x568>)
 800244e:	7913      	ldrb	r3, [r2, #4]
 8002450:	f043 0301 	orr.w	r3, r3, #1
 8002454:	7113      	strb	r3, [r2, #4]
		}

		if (TEMP_SF[ucSensptr].type == GYRO_SENSOR_TYPE) // Sensor type identifier for gyrometer
 8002456:	7cfa      	ldrb	r2, [r7, #19]
 8002458:	4953      	ldr	r1, [pc, #332]	; (80025a8 <report_parse+0x55c>)
 800245a:	4613      	mov	r3, r2
 800245c:	00db      	lsls	r3, r3, #3
 800245e:	1a9b      	subs	r3, r3, r2
 8002460:	440b      	add	r3, r1
 8002462:	3301      	adds	r3, #1
 8002464:	781b      	ldrb	r3, [r3, #0]
 8002466:	2b76      	cmp	r3, #118	; 0x76
 8002468:	d112      	bne.n	8002490 <report_parse+0x444>
		{
			SENSOR[GYRO_VREG_OFFSET] = TEMP_SF[ucSensptr]; // Store this struct as the second in the new order
 800246a:	7cfa      	ldrb	r2, [r7, #19]
 800246c:	4950      	ldr	r1, [pc, #320]	; (80025b0 <report_parse+0x564>)
 800246e:	484e      	ldr	r0, [pc, #312]	; (80025a8 <report_parse+0x55c>)
 8002470:	4613      	mov	r3, r2
 8002472:	00db      	lsls	r3, r3, #3
 8002474:	1a9b      	subs	r3, r3, r2
 8002476:	18c2      	adds	r2, r0, r3
 8002478:	1dcb      	adds	r3, r1, #7
 800247a:	6811      	ldr	r1, [r2, #0]
 800247c:	6019      	str	r1, [r3, #0]
 800247e:	8891      	ldrh	r1, [r2, #4]
 8002480:	7992      	ldrb	r2, [r2, #6]
 8002482:	8099      	strh	r1, [r3, #4]
 8002484:	719a      	strb	r2, [r3, #6]
			_VREGS.SL.gyro = TRUE;      // VREG01 gyrometer available bit(1) set
 8002486:	4a4b      	ldr	r2, [pc, #300]	; (80025b4 <report_parse+0x568>)
 8002488:	7913      	ldrb	r3, [r2, #4]
 800248a:	f043 0302 	orr.w	r3, r3, #2
 800248e:	7113      	strb	r3, [r2, #4]
		}

		if (TEMP_SF[ucSensptr].type == CMP_SENSOR_TYPE) // Sensor type identifier for compass
 8002490:	7cfa      	ldrb	r2, [r7, #19]
 8002492:	4945      	ldr	r1, [pc, #276]	; (80025a8 <report_parse+0x55c>)
 8002494:	4613      	mov	r3, r2
 8002496:	00db      	lsls	r3, r3, #3
 8002498:	1a9b      	subs	r3, r3, r2
 800249a:	440b      	add	r3, r1
 800249c:	3301      	adds	r3, #1
 800249e:	781b      	ldrb	r3, [r3, #0]
 80024a0:	2b83      	cmp	r3, #131	; 0x83
 80024a2:	d113      	bne.n	80024cc <report_parse+0x480>
		{
			SENSOR[CMP_VREG_OFFSET] = TEMP_SF[ucSensptr]; // Store this struct as the third in the new order
 80024a4:	7cfa      	ldrb	r2, [r7, #19]
 80024a6:	4942      	ldr	r1, [pc, #264]	; (80025b0 <report_parse+0x564>)
 80024a8:	483f      	ldr	r0, [pc, #252]	; (80025a8 <report_parse+0x55c>)
 80024aa:	4613      	mov	r3, r2
 80024ac:	00db      	lsls	r3, r3, #3
 80024ae:	1a9b      	subs	r3, r3, r2
 80024b0:	18c2      	adds	r2, r0, r3
 80024b2:	f101 030e 	add.w	r3, r1, #14
 80024b6:	6811      	ldr	r1, [r2, #0]
 80024b8:	6019      	str	r1, [r3, #0]
 80024ba:	8891      	ldrh	r1, [r2, #4]
 80024bc:	7992      	ldrb	r2, [r2, #6]
 80024be:	8099      	strh	r1, [r3, #4]
 80024c0:	719a      	strb	r2, [r3, #6]
			_VREGS.SL.cmp = TRUE;         // VREG01 compass available bit(2) set
 80024c2:	4a3c      	ldr	r2, [pc, #240]	; (80025b4 <report_parse+0x568>)
 80024c4:	7913      	ldrb	r3, [r2, #4]
 80024c6:	f043 0304 	orr.w	r3, r3, #4
 80024ca:	7113      	strb	r3, [r2, #4]
		}

		if (TEMP_SF[ucSensptr].type == ORI_SENSOR_TYPE) // Sensor type identifier for orientation sensor
 80024cc:	7cfa      	ldrb	r2, [r7, #19]
 80024ce:	4936      	ldr	r1, [pc, #216]	; (80025a8 <report_parse+0x55c>)
 80024d0:	4613      	mov	r3, r2
 80024d2:	00db      	lsls	r3, r3, #3
 80024d4:	1a9b      	subs	r3, r3, r2
 80024d6:	440b      	add	r3, r1
 80024d8:	3301      	adds	r3, #1
 80024da:	781b      	ldrb	r3, [r3, #0]
 80024dc:	2b8a      	cmp	r3, #138	; 0x8a
 80024de:	d113      	bne.n	8002508 <report_parse+0x4bc>
		{
			SENSOR[ORI_VREG_OFFSET] = TEMP_SF[ucSensptr]; // Store this struct as the fourth in the new order
 80024e0:	7cfa      	ldrb	r2, [r7, #19]
 80024e2:	4933      	ldr	r1, [pc, #204]	; (80025b0 <report_parse+0x564>)
 80024e4:	4830      	ldr	r0, [pc, #192]	; (80025a8 <report_parse+0x55c>)
 80024e6:	4613      	mov	r3, r2
 80024e8:	00db      	lsls	r3, r3, #3
 80024ea:	1a9b      	subs	r3, r3, r2
 80024ec:	18c2      	adds	r2, r0, r3
 80024ee:	f101 0315 	add.w	r3, r1, #21
 80024f2:	6811      	ldr	r1, [r2, #0]
 80024f4:	6019      	str	r1, [r3, #0]
 80024f6:	8891      	ldrh	r1, [r2, #4]
 80024f8:	7992      	ldrb	r2, [r2, #6]
 80024fa:	8099      	strh	r1, [r3, #4]
 80024fc:	719a      	strb	r2, [r3, #6]
			_VREGS.SL.ori = TRUE;     // VREG01 orientation available bit(3) set
 80024fe:	4a2d      	ldr	r2, [pc, #180]	; (80025b4 <report_parse+0x568>)
 8002500:	7913      	ldrb	r3, [r2, #4]
 8002502:	f043 0308 	orr.w	r3, r3, #8
 8002506:	7113      	strb	r3, [r2, #4]
		}

		if (TEMP_SF[ucSensptr].type == INCL_SENSOR_TYPE) // Sensor type identifier for inclinometer
 8002508:	7cfa      	ldrb	r2, [r7, #19]
 800250a:	4927      	ldr	r1, [pc, #156]	; (80025a8 <report_parse+0x55c>)
 800250c:	4613      	mov	r3, r2
 800250e:	00db      	lsls	r3, r3, #3
 8002510:	1a9b      	subs	r3, r3, r2
 8002512:	440b      	add	r3, r1
 8002514:	3301      	adds	r3, #1
 8002516:	781b      	ldrb	r3, [r3, #0]
 8002518:	2b86      	cmp	r3, #134	; 0x86
 800251a:	d113      	bne.n	8002544 <report_parse+0x4f8>
		{
			SENSOR[INCL_VREG_OFFSET] = TEMP_SF[ucSensptr]; // Store this struct as the fifth in the new order
 800251c:	7cfa      	ldrb	r2, [r7, #19]
 800251e:	4924      	ldr	r1, [pc, #144]	; (80025b0 <report_parse+0x564>)
 8002520:	4821      	ldr	r0, [pc, #132]	; (80025a8 <report_parse+0x55c>)
 8002522:	4613      	mov	r3, r2
 8002524:	00db      	lsls	r3, r3, #3
 8002526:	1a9b      	subs	r3, r3, r2
 8002528:	18c2      	adds	r2, r0, r3
 800252a:	f101 031c 	add.w	r3, r1, #28
 800252e:	6810      	ldr	r0, [r2, #0]
 8002530:	6018      	str	r0, [r3, #0]
 8002532:	8891      	ldrh	r1, [r2, #4]
 8002534:	7992      	ldrb	r2, [r2, #6]
 8002536:	8099      	strh	r1, [r3, #4]
 8002538:	719a      	strb	r2, [r3, #6]
			_VREGS.SL.incl = TRUE;      // VREG01 gyrometer available bit(4) set
 800253a:	4a1e      	ldr	r2, [pc, #120]	; (80025b4 <report_parse+0x568>)
 800253c:	7913      	ldrb	r3, [r2, #4]
 800253e:	f043 0310 	orr.w	r3, r3, #16
 8002542:	7113      	strb	r3, [r2, #4]
		}

		if (TEMP_SF[ucSensptr].type == RAW_SENSOR_TYPE) // Sensor type identifier for raw data
 8002544:	7cfa      	ldrb	r2, [r7, #19]
 8002546:	4918      	ldr	r1, [pc, #96]	; (80025a8 <report_parse+0x55c>)
 8002548:	4613      	mov	r3, r2
 800254a:	00db      	lsls	r3, r3, #3
 800254c:	1a9b      	subs	r3, r3, r2
 800254e:	440b      	add	r3, r1
 8002550:	3301      	adds	r3, #1
 8002552:	781b      	ldrb	r3, [r3, #0]
 8002554:	2be1      	cmp	r3, #225	; 0xe1
 8002556:	d11a      	bne.n	800258e <report_parse+0x542>
		{             // NOTE: there is no VREG01 bit for raw sensors available 
			SENSOR[RAW_VREG_OFFSET + RAW_SENSOR_CNT] = TEMP_SF[ucSensptr]; // Store this struct as the 8th/9th/10th in the new order
 8002558:	7cfa      	ldrb	r2, [r7, #19]
 800255a:	4b17      	ldr	r3, [pc, #92]	; (80025b8 <report_parse+0x56c>)
 800255c:	781b      	ldrb	r3, [r3, #0]
 800255e:	1dd9      	adds	r1, r3, #7
 8002560:	4813      	ldr	r0, [pc, #76]	; (80025b0 <report_parse+0x564>)
 8002562:	460b      	mov	r3, r1
 8002564:	00db      	lsls	r3, r3, #3
 8002566:	1a5b      	subs	r3, r3, r1
 8002568:	4418      	add	r0, r3
 800256a:	490f      	ldr	r1, [pc, #60]	; (80025a8 <report_parse+0x55c>)
 800256c:	4613      	mov	r3, r2
 800256e:	00db      	lsls	r3, r3, #3
 8002570:	1a9b      	subs	r3, r3, r2
 8002572:	18ca      	adds	r2, r1, r3
 8002574:	4603      	mov	r3, r0
 8002576:	6811      	ldr	r1, [r2, #0]
 8002578:	6019      	str	r1, [r3, #0]
 800257a:	8891      	ldrh	r1, [r2, #4]
 800257c:	7992      	ldrb	r2, [r2, #6]
 800257e:	8099      	strh	r1, [r3, #4]
 8002580:	719a      	strb	r2, [r3, #6]
			RAW_SENSOR_CNT++; // NOTE: pre-production SSC7150 F/W only enumerates 1 RAW sensor, so keep running count
 8002582:	4b0d      	ldr	r3, [pc, #52]	; (80025b8 <report_parse+0x56c>)
 8002584:	781b      	ldrb	r3, [r3, #0]
 8002586:	3301      	adds	r3, #1
 8002588:	b2da      	uxtb	r2, r3
 800258a:	4b0b      	ldr	r3, [pc, #44]	; (80025b8 <report_parse+0x56c>)
 800258c:	701a      	strb	r2, [r3, #0]
	for (ucSensptr = 0; ucSensptr < NUM_SENS; ucSensptr++) // go through the entire sensor list looking for sensor types
 800258e:	7cfb      	ldrb	r3, [r7, #19]
 8002590:	3301      	adds	r3, #1
 8002592:	74fb      	strb	r3, [r7, #19]
 8002594:	7cfb      	ldrb	r3, [r7, #19]
 8002596:	2b0b      	cmp	r3, #11
 8002598:	f67f af40 	bls.w	800241c <report_parse+0x3d0>
		}
	}

	return SUCCESS;
 800259c:	2300      	movs	r3, #0
}
 800259e:	4618      	mov	r0, r3
 80025a0:	3718      	adds	r7, #24
 80025a2:	46bd      	mov	sp, r7
 80025a4:	bd80      	pop	{r7, pc}
 80025a6:	bf00      	nop
 80025a8:	2000016c 	.word	0x2000016c
 80025ac:	200001c0 	.word	0x200001c0
 80025b0:	20000118 	.word	0x20000118
 80025b4:	2000110c 	.word	0x2000110c
 80025b8:	20000fb0 	.word	0x20000fb0
 80025bc:	00000000 	.word	0x00000000

080025c0 <ret_exponent>:
/** ret_exponent
 * @note        Returns the exponent scaler for a requested data field
 * @param ucAdj_SensN sensor num of interest
 * @return dMult multiplier value
 */
double ret_exponent(UINT8 ucAdj_SensN) {
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b088      	sub	sp, #32
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	4603      	mov	r3, r0
 80025c8:	71fb      	strb	r3, [r7, #7]
	UINT8 ucVreg_ptr = VREG_EXP1;          // VREG36 is start of exponent values
 80025ca:	2339      	movs	r3, #57	; 0x39
 80025cc:	77fb      	strb	r3, [r7, #31]
	UINT8 ucRet;                                     // Function status variable
	double dMult = 1;                     // Unit exponent scaler to be returned
 80025ce:	f04f 0200 	mov.w	r2, #0
 80025d2:	4b2f      	ldr	r3, [pc, #188]	; (8002690 <ret_exponent+0xd0>)
 80025d4:	e9c7 2304 	strd	r2, r3, [r7, #16]
	UINT16 wExpo;           // 'Buffer' to hold the exponent register's contents
	UINT8 ucTemp_expo = 0;          // Variable to hold the 4 bit exponent value
 80025d8:	2300      	movs	r3, #0
 80025da:	73fb      	strb	r3, [r7, #15]

	if (ucAdj_SensN > 3) // sensor indexes from 4 to 7 = sensors that have unit exponents in the 2nd exponent register (VREG37)
 80025dc:	79fb      	ldrb	r3, [r7, #7]
 80025de:	2b03      	cmp	r3, #3
 80025e0:	d902      	bls.n	80025e8 <ret_exponent+0x28>
		ucVreg_ptr++;  // Increment ptr to VREG exponent register to be searched
 80025e2:	7ffb      	ldrb	r3, [r7, #31]
 80025e4:	3301      	adds	r3, #1
 80025e6:	77fb      	strb	r3, [r7, #31]

	if (ucAdj_SensN > 7) // sensor indexes > 7 = sensors that have unit exponents in the 3rd exponent register (VREG38)
 80025e8:	79fb      	ldrb	r3, [r7, #7]
 80025ea:	2b07      	cmp	r3, #7
 80025ec:	d902      	bls.n	80025f4 <ret_exponent+0x34>
		ucVreg_ptr++;  // Increment ptr to VREG exponent register to be searched
 80025ee:	7ffb      	ldrb	r3, [r7, #31]
 80025f0:	3301      	adds	r3, #1
 80025f2:	77fb      	strb	r3, [r7, #31]

	ucAdj_SensN = ucAdj_SensN % 4; // Find the appropriate offset for this sensor's unit exponent
 80025f4:	79fb      	ldrb	r3, [r7, #7]
 80025f6:	f003 0303 	and.w	r3, r3, #3
 80025fa:	71fb      	strb	r3, [r7, #7]

	ucRet = HOST_SF_LIB_VREG_read(ucVreg_ptr, &wExpo); // Read this sesnor's data unit exponent value from the VREG
 80025fc:	f107 0208 	add.w	r2, r7, #8
 8002600:	7ffb      	ldrb	r3, [r7, #31]
 8002602:	4611      	mov	r1, r2
 8002604:	4618      	mov	r0, r3
 8002606:	f000 fe87 	bl	8003318 <HOST_SF_LIB_VREG_read>
 800260a:	4603      	mov	r3, r0
 800260c:	73bb      	strb	r3, [r7, #14]

	ucTemp_expo = (UINT8) ((wExpo >> (4 * ucAdj_SensN)) & 0xF); // get the 4 exp bits for desired sensor
 800260e:	68ba      	ldr	r2, [r7, #8]
 8002610:	79fb      	ldrb	r3, [r7, #7]
 8002612:	009b      	lsls	r3, r3, #2
 8002614:	fa22 f303 	lsr.w	r3, r2, r3
 8002618:	b2db      	uxtb	r3, r3
 800261a:	f003 030f 	and.w	r3, r3, #15
 800261e:	73fb      	strb	r3, [r7, #15]

	if (ucTemp_expo >= 0 && ucTemp_expo <= 7) // These values are all positive exponents
 8002620:	7bfb      	ldrb	r3, [r7, #15]
 8002622:	2b07      	cmp	r3, #7
 8002624:	d80d      	bhi.n	8002642 <ret_exponent+0x82>
		dMult = pow(10, ucTemp_expo);
 8002626:	7bfb      	ldrb	r3, [r7, #15]
 8002628:	4618      	mov	r0, r3
 800262a:	f7fd ff63 	bl	80004f4 <__aeabi_ui2d>
 800262e:	4602      	mov	r2, r0
 8002630:	460b      	mov	r3, r1
 8002632:	ec43 2b11 	vmov	d1, r2, r3
 8002636:	ed9f 0b14 	vldr	d0, [pc, #80]	; 8002688 <ret_exponent+0xc8>
 800263a:	f008 fd75 	bl	800b128 <pow>
 800263e:	ed87 0b04 	vstr	d0, [r7, #16]

	if (ucTemp_expo >= 8 && ucTemp_expo <= 0x0F) // These values are all negative exponents (ie. to right of decimal place)
 8002642:	7bfb      	ldrb	r3, [r7, #15]
 8002644:	2b07      	cmp	r3, #7
 8002646:	d914      	bls.n	8002672 <ret_exponent+0xb2>
 8002648:	7bfb      	ldrb	r3, [r7, #15]
 800264a:	2b0f      	cmp	r3, #15
 800264c:	d811      	bhi.n	8002672 <ret_exponent+0xb2>
		dMult = pow(10, (int16_t) (-16 + ucTemp_expo));
 800264e:	7bfb      	ldrb	r3, [r7, #15]
 8002650:	b29b      	uxth	r3, r3
 8002652:	3b10      	subs	r3, #16
 8002654:	b29b      	uxth	r3, r3
 8002656:	b21b      	sxth	r3, r3
 8002658:	4618      	mov	r0, r3
 800265a:	f7fd ff5b 	bl	8000514 <__aeabi_i2d>
 800265e:	4602      	mov	r2, r0
 8002660:	460b      	mov	r3, r1
 8002662:	ec43 2b11 	vmov	d1, r2, r3
 8002666:	ed9f 0b08 	vldr	d0, [pc, #32]	; 8002688 <ret_exponent+0xc8>
 800266a:	f008 fd5d 	bl	800b128 <pow>
 800266e:	ed87 0b04 	vstr	d0, [r7, #16]

	return dMult;                                  //return Unit exponent scaler
 8002672:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002676:	ec43 2b17 	vmov	d7, r2, r3
}
 800267a:	eeb0 0a47 	vmov.f32	s0, s14
 800267e:	eef0 0a67 	vmov.f32	s1, s15
 8002682:	3720      	adds	r7, #32
 8002684:	46bd      	mov	sp, r7
 8002686:	bd80      	pop	{r7, pc}
 8002688:	00000000 	.word	0x00000000
 800268c:	40240000 	.word	0x40240000
 8002690:	3ff00000 	.word	0x3ff00000

08002694 <HOST_SF_LIB_HID_Set_Report>:
 * @param type refers to feature or output report; type = 3 - feature, 2 - output
 * @param ReportBuffer pointer to data that needs to be sent to the device
 * @param size specifies the size, in bytes,of the report buffer 
 * @return completion_status 0=SUCCESS, failcode: 0x19=SET_RPT_FAIL
 */
UINT8 HOST_SF_LIB_HID_Set_Report(UINT8 type, UINT8 *ReportBuffer, UINT8 size) {
 8002694:	b580      	push	{r7, lr}
 8002696:	b0ac      	sub	sp, #176	; 0xb0
 8002698:	af02      	add	r7, sp, #8
 800269a:	4603      	mov	r3, r0
 800269c:	6039      	str	r1, [r7, #0]
 800269e:	71fb      	strb	r3, [r7, #7]
 80026a0:	4613      	mov	r3, r2
 80026a2:	71bb      	strb	r3, [r7, #6]
	UINT8 ucTx_data[BUF_150];
	UINT8 ucRetStat;
	UINT8 ucCmdBytePtr;
	BOOL bVendorCmd = FALSE;
 80026a4:	2300      	movs	r3, #0
 80026a6:	f887 30a6 	strb.w	r3, [r7, #166]	; 0xa6

	if (size <= 0 || size >= (BUF_150 - RPT_LEN))
 80026aa:	79bb      	ldrb	r3, [r7, #6]
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d002      	beq.n	80026b6 <HOST_SF_LIB_HID_Set_Report+0x22>
 80026b0:	79bb      	ldrb	r3, [r7, #6]
 80026b2:	2b8f      	cmp	r3, #143	; 0x8f
 80026b4:	d901      	bls.n	80026ba <HOST_SF_LIB_HID_Set_Report+0x26>
		return SET_RPT_FAIL;
 80026b6:	2319      	movs	r3, #25
 80026b8:	e066      	b.n	8002788 <HOST_SF_LIB_HID_Set_Report+0xf4>

	if (ReportBuffer[0] == FLASH_UPDATE_RPT_ID) // the flash update (Vendor) commands have a different format
 80026ba:	683b      	ldr	r3, [r7, #0]
 80026bc:	781b      	ldrb	r3, [r3, #0]
 80026be:	2b0e      	cmp	r3, #14
 80026c0:	d102      	bne.n	80026c8 <HOST_SF_LIB_HID_Set_Report+0x34>
		bVendorCmd = TRUE;
 80026c2:	2301      	movs	r3, #1
 80026c4:	f887 30a6 	strb.w	r3, [r7, #166]	; 0xa6

	ucTx_data[0] = HID_FIELD.wCmdReg; //command field bytes from HID config table
 80026c8:	4b31      	ldr	r3, [pc, #196]	; (8002790 <HOST_SF_LIB_HID_Set_Report+0xfc>)
 80026ca:	691b      	ldr	r3, [r3, #16]
 80026cc:	b2db      	uxtb	r3, r3
 80026ce:	733b      	strb	r3, [r7, #12]
	ucTx_data[1] = (HID_FIELD.wCmdReg >> BYTE_SHIFT);    // Command register MSB
 80026d0:	4b2f      	ldr	r3, [pc, #188]	; (8002790 <HOST_SF_LIB_HID_Set_Report+0xfc>)
 80026d2:	691b      	ldr	r3, [r3, #16]
 80026d4:	0a1b      	lsrs	r3, r3, #8
 80026d6:	b2db      	uxtb	r3, r3
 80026d8:	737b      	strb	r3, [r7, #13]
	if (bVendorCmd)
 80026da:	f897 30a6 	ldrb.w	r3, [r7, #166]	; 0xa6
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d006      	beq.n	80026f0 <HOST_SF_LIB_HID_Set_Report+0x5c>
		ucTx_data[2] = type | ReportBuffer[0]; // HID Set command opcode low byte which includes the sensor's ReportID, high byte report type
 80026e2:	683b      	ldr	r3, [r7, #0]
 80026e4:	781a      	ldrb	r2, [r3, #0]
 80026e6:	79fb      	ldrb	r3, [r7, #7]
 80026e8:	4313      	orrs	r3, r2
 80026ea:	b2db      	uxtb	r3, r3
 80026ec:	73bb      	strb	r3, [r7, #14]
 80026ee:	e006      	b.n	80026fe <HOST_SF_LIB_HID_Set_Report+0x6a>
	else
		ucTx_data[2] = type | ReportBuffer[2];
 80026f0:	683b      	ldr	r3, [r7, #0]
 80026f2:	3302      	adds	r3, #2
 80026f4:	781a      	ldrb	r2, [r3, #0]
 80026f6:	79fb      	ldrb	r3, [r7, #7]
 80026f8:	4313      	orrs	r3, r2
 80026fa:	b2db      	uxtb	r3, r3
 80026fc:	73bb      	strb	r3, [r7, #14]
	ucTx_data[3] = SET_OPCODE;         // HID SetReport command opcode high byte
 80026fe:	2303      	movs	r3, #3
 8002700:	73fb      	strb	r3, [r7, #15]
	ucTx_data[4] = HID_FIELD.wDatReg;   //data field bytes from HID config table
 8002702:	4b23      	ldr	r3, [pc, #140]	; (8002790 <HOST_SF_LIB_HID_Set_Report+0xfc>)
 8002704:	695b      	ldr	r3, [r3, #20]
 8002706:	b2db      	uxtb	r3, r3
 8002708:	743b      	strb	r3, [r7, #16]
	ucTx_data[5] = (HID_FIELD.wDatReg >> BYTE_SHIFT);
 800270a:	4b21      	ldr	r3, [pc, #132]	; (8002790 <HOST_SF_LIB_HID_Set_Report+0xfc>)
 800270c:	695b      	ldr	r3, [r3, #20]
 800270e:	0a1b      	lsrs	r3, r3, #8
 8002710:	b2db      	uxtb	r3, r3
 8002712:	747b      	strb	r3, [r7, #17]

	ucCmdBytePtr = RPT_LEN;
 8002714:	2306      	movs	r3, #6
 8002716:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7

	if (bVendorCmd)    // flash update (vendor) commands have a different format
 800271a:	f897 30a6 	ldrb.w	r3, [r7, #166]	; 0xa6
 800271e:	2b00      	cmp	r3, #0
 8002720:	d003      	beq.n	800272a <HOST_SF_LIB_HID_Set_Report+0x96>
		ReportBuffer++;                         //skips 1st byte of input buffer
 8002722:	683b      	ldr	r3, [r7, #0]
 8002724:	3301      	adds	r3, #1
 8002726:	603b      	str	r3, [r7, #0]
 8002728:	e012      	b.n	8002750 <HOST_SF_LIB_HID_Set_Report+0xbc>
	else
		size++;
 800272a:	79bb      	ldrb	r3, [r7, #6]
 800272c:	3301      	adds	r3, #1
 800272e:	71bb      	strb	r3, [r7, #6]

	while (size--) {
 8002730:	e00e      	b.n	8002750 <HOST_SF_LIB_HID_Set_Report+0xbc>
		ucTx_data[ucCmdBytePtr++] = *(ReportBuffer++); // Append input to the command
 8002732:	683b      	ldr	r3, [r7, #0]
 8002734:	1c5a      	adds	r2, r3, #1
 8002736:	603a      	str	r2, [r7, #0]
 8002738:	f897 20a7 	ldrb.w	r2, [r7, #167]	; 0xa7
 800273c:	1c51      	adds	r1, r2, #1
 800273e:	f887 10a7 	strb.w	r1, [r7, #167]	; 0xa7
 8002742:	4611      	mov	r1, r2
 8002744:	781a      	ldrb	r2, [r3, #0]
 8002746:	f101 03a8 	add.w	r3, r1, #168	; 0xa8
 800274a:	443b      	add	r3, r7
 800274c:	f803 2c9c 	strb.w	r2, [r3, #-156]
	while (size--) {
 8002750:	79bb      	ldrb	r3, [r7, #6]
 8002752:	1e5a      	subs	r2, r3, #1
 8002754:	71ba      	strb	r2, [r7, #6]
 8002756:	2b00      	cmp	r3, #0
 8002758:	d1eb      	bne.n	8002732 <HOST_SF_LIB_HID_Set_Report+0x9e>
	}

	ucRetStat = i2c_cmd_WrRd(WRITE,   //issue SetReportOutput command to SSC7150
 800275a:	f107 020c 	add.w	r2, r7, #12
 800275e:	f897 10a7 	ldrb.w	r1, [r7, #167]	; 0xa7
 8002762:	2300      	movs	r3, #0
 8002764:	9301      	str	r3, [sp, #4]
 8002766:	2300      	movs	r3, #0
 8002768:	9300      	str	r3, [sp, #0]
 800276a:	2300      	movs	r3, #0
 800276c:	2001      	movs	r0, #1
 800276e:	f7fe fd49 	bl	8001204 <i2c_cmd_WrRd>
 8002772:	4603      	mov	r3, r0
 8002774:	f887 30a5 	strb.w	r3, [r7, #165]	; 0xa5
			ucTx_data,                                  //cmd buf
			0,                                  //num of bytes to read initially
			0,                                          //recv buf
			FALSE); //actual # of bytes SSC7150 returns is in 1st two bytes of read packet, this flag(=TRUE) means "use the 1st two bytes as the actual read packet length"

	if (ucRetStat != SUCCESS) {
 8002778:	f897 30a5 	ldrb.w	r3, [r7, #165]	; 0xa5
 800277c:	2b00      	cmp	r3, #0
 800277e:	d001      	beq.n	8002784 <HOST_SF_LIB_HID_Set_Report+0xf0>
		return SET_RPT_FAIL;
 8002780:	2319      	movs	r3, #25
 8002782:	e001      	b.n	8002788 <HOST_SF_LIB_HID_Set_Report+0xf4>
	}

	return ucRetStat;
 8002784:	f897 30a5 	ldrb.w	r3, [r7, #165]	; 0xa5
}
 8002788:	4618      	mov	r0, r3
 800278a:	37a8      	adds	r7, #168	; 0xa8
 800278c:	46bd      	mov	sp, r7
 800278e:	bd80      	pop	{r7, pc}
 8002790:	200001c0 	.word	0x200001c0

08002794 <HOST_SF_LIB_HID_Get_Report>:
 * @param type refers to feature or input report; type = 3 - feature, 1 - input
 * @param ReportBuffer pointer towhich the feature report data is read into 
 * @param size specifies the size, in bytes, of the report buffer 
 * @return completion_status 0=I2C_SUCCESS, failcode: 0x1C=HID_GET_RPT_INPT_FAIL,0x1D=HID_GET_RPT_FEAT_FAIL
 */
UINT8 HOST_SF_LIB_HID_Get_Report(UINT8 type, UINT8 *ReportBuffer, UINT8 size) {
 8002794:	b580      	push	{r7, lr}
 8002796:	b0aa      	sub	sp, #168	; 0xa8
 8002798:	af02      	add	r7, sp, #8
 800279a:	4603      	mov	r3, r0
 800279c:	6039      	str	r1, [r7, #0]
 800279e:	71fb      	strb	r3, [r7, #7]
 80027a0:	4613      	mov	r3, r2
 80027a2:	71bb      	strb	r3, [r7, #6]
	UINT8 ucTx_data[BUF_150];
	UINT8 ucRetStat;
	UINT8 ucCmdBytePtr;

	ucTx_data[0] = HID_FIELD.wCmdReg; //command field bytes from HID config table
 80027a4:	4b1e      	ldr	r3, [pc, #120]	; (8002820 <HOST_SF_LIB_HID_Get_Report+0x8c>)
 80027a6:	691b      	ldr	r3, [r3, #16]
 80027a8:	b2db      	uxtb	r3, r3
 80027aa:	723b      	strb	r3, [r7, #8]
	ucTx_data[1] = (HID_FIELD.wCmdReg >> BYTE_SHIFT);    // Command register MSB
 80027ac:	4b1c      	ldr	r3, [pc, #112]	; (8002820 <HOST_SF_LIB_HID_Get_Report+0x8c>)
 80027ae:	691b      	ldr	r3, [r3, #16]
 80027b0:	0a1b      	lsrs	r3, r3, #8
 80027b2:	b2db      	uxtb	r3, r3
 80027b4:	727b      	strb	r3, [r7, #9]
	ucTx_data[2] = type | ReportBuffer[0]; // HID Get command opcode low byte which includes the sensor's ReportID, high byte report type
 80027b6:	683b      	ldr	r3, [r7, #0]
 80027b8:	781a      	ldrb	r2, [r3, #0]
 80027ba:	79fb      	ldrb	r3, [r7, #7]
 80027bc:	4313      	orrs	r3, r2
 80027be:	b2db      	uxtb	r3, r3
 80027c0:	72bb      	strb	r3, [r7, #10]
	ucTx_data[3] = GET_RPT_CMD_MSB;    // HID GetReport command opcode high byte
 80027c2:	2302      	movs	r3, #2
 80027c4:	72fb      	strb	r3, [r7, #11]
	ucTx_data[4] = HID_FIELD.wDatReg;   //data field bytes from HID config table
 80027c6:	4b16      	ldr	r3, [pc, #88]	; (8002820 <HOST_SF_LIB_HID_Get_Report+0x8c>)
 80027c8:	695b      	ldr	r3, [r3, #20]
 80027ca:	b2db      	uxtb	r3, r3
 80027cc:	733b      	strb	r3, [r7, #12]
	ucTx_data[5] = (HID_FIELD.wDatReg >> BYTE_SHIFT);
 80027ce:	4b14      	ldr	r3, [pc, #80]	; (8002820 <HOST_SF_LIB_HID_Get_Report+0x8c>)
 80027d0:	695b      	ldr	r3, [r3, #20]
 80027d2:	0a1b      	lsrs	r3, r3, #8
 80027d4:	b2db      	uxtb	r3, r3
 80027d6:	737b      	strb	r3, [r7, #13]

	ucCmdBytePtr = RPT_LEN;
 80027d8:	2306      	movs	r3, #6
 80027da:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f

	ucRetStat = i2c_cmd_WrRd(WR_RD,   //issue SetReportOutput command to SSC7150
 80027de:	f107 0208 	add.w	r2, r7, #8
 80027e2:	f897 109f 	ldrb.w	r1, [r7, #159]	; 0x9f
 80027e6:	2301      	movs	r3, #1
 80027e8:	9301      	str	r3, [sp, #4]
 80027ea:	683b      	ldr	r3, [r7, #0]
 80027ec:	9300      	str	r3, [sp, #0]
 80027ee:	2303      	movs	r3, #3
 80027f0:	2003      	movs	r0, #3
 80027f2:	f7fe fd07 	bl	8001204 <i2c_cmd_WrRd>
 80027f6:	4603      	mov	r3, r0
 80027f8:	f887 309e 	strb.w	r3, [r7, #158]	; 0x9e
			ucTx_data,                                  //cmd buf
			BYTE_ADJ_VAL,                       //num of bytes to read initially
			ReportBuffer,                               //recv buf
			TRUE); //actual # of bytes SSC7150 returns is in 1st two bytes of read packet, this flag(=TRUE) means "use the 1st two bytes as the actual read packet length"

	if (ucRetStat != SUCCESS) {
 80027fc:	f897 309e 	ldrb.w	r3, [r7, #158]	; 0x9e
 8002800:	2b00      	cmp	r3, #0
 8002802:	d006      	beq.n	8002812 <HOST_SF_LIB_HID_Get_Report+0x7e>
		if (type == GET_RPT_FEAT)
 8002804:	79fb      	ldrb	r3, [r7, #7]
 8002806:	2b30      	cmp	r3, #48	; 0x30
 8002808:	d101      	bne.n	800280e <HOST_SF_LIB_HID_Get_Report+0x7a>
			return HID_GET_RPT_FEAT_FAIL;
 800280a:	231d      	movs	r3, #29
 800280c:	e003      	b.n	8002816 <HOST_SF_LIB_HID_Get_Report+0x82>
		else
			return HID_GET_RPT_INPT_FAIL;
 800280e:	231c      	movs	r3, #28
 8002810:	e001      	b.n	8002816 <HOST_SF_LIB_HID_Get_Report+0x82>
	}

	return ucRetStat;
 8002812:	f897 309e 	ldrb.w	r3, [r7, #158]	; 0x9e
}
 8002816:	4618      	mov	r0, r3
 8002818:	37a0      	adds	r7, #160	; 0xa0
 800281a:	46bd      	mov	sp, r7
 800281c:	bd80      	pop	{r7, pc}
 800281e:	bf00      	nop
 8002820:	200001c0 	.word	0x200001c0

08002824 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002824:	b580      	push	{r7, lr}
 8002826:	b082      	sub	sp, #8
 8002828:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800282a:	4b11      	ldr	r3, [pc, #68]	; (8002870 <HAL_MspInit+0x4c>)
 800282c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800282e:	4a10      	ldr	r2, [pc, #64]	; (8002870 <HAL_MspInit+0x4c>)
 8002830:	f043 0301 	orr.w	r3, r3, #1
 8002834:	6613      	str	r3, [r2, #96]	; 0x60
 8002836:	4b0e      	ldr	r3, [pc, #56]	; (8002870 <HAL_MspInit+0x4c>)
 8002838:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800283a:	f003 0301 	and.w	r3, r3, #1
 800283e:	607b      	str	r3, [r7, #4]
 8002840:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002842:	4b0b      	ldr	r3, [pc, #44]	; (8002870 <HAL_MspInit+0x4c>)
 8002844:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002846:	4a0a      	ldr	r2, [pc, #40]	; (8002870 <HAL_MspInit+0x4c>)
 8002848:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800284c:	6593      	str	r3, [r2, #88]	; 0x58
 800284e:	4b08      	ldr	r3, [pc, #32]	; (8002870 <HAL_MspInit+0x4c>)
 8002850:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002852:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002856:	603b      	str	r3, [r7, #0]
 8002858:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800285a:	2200      	movs	r2, #0
 800285c:	210f      	movs	r1, #15
 800285e:	f06f 0001 	mvn.w	r0, #1
 8002862:	f001 fac9 	bl	8003df8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002866:	bf00      	nop
 8002868:	3708      	adds	r7, #8
 800286a:	46bd      	mov	sp, r7
 800286c:	bd80      	pop	{r7, pc}
 800286e:	bf00      	nop
 8002870:	40021000 	.word	0x40021000

08002874 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002874:	b580      	push	{r7, lr}
 8002876:	b08c      	sub	sp, #48	; 0x30
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 800287c:	2300      	movs	r3, #0
 800287e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Enable TIM16 clock */
  __HAL_RCC_TIM16_CLK_ENABLE();
 8002882:	4b2e      	ldr	r3, [pc, #184]	; (800293c <HAL_InitTick+0xc8>)
 8002884:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002886:	4a2d      	ldr	r2, [pc, #180]	; (800293c <HAL_InitTick+0xc8>)
 8002888:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800288c:	6613      	str	r3, [r2, #96]	; 0x60
 800288e:	4b2b      	ldr	r3, [pc, #172]	; (800293c <HAL_InitTick+0xc8>)
 8002890:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002892:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002896:	60bb      	str	r3, [r7, #8]
 8002898:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800289a:	f107 020c 	add.w	r2, r7, #12
 800289e:	f107 0310 	add.w	r3, r7, #16
 80028a2:	4611      	mov	r1, r2
 80028a4:	4618      	mov	r0, r3
 80028a6:	f003 f841 	bl	800592c <HAL_RCC_GetClockConfig>

  /* Compute TIM16 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 80028aa:	f003 f829 	bl	8005900 <HAL_RCC_GetPCLK2Freq>
 80028ae:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM16 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80028b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028b2:	4a23      	ldr	r2, [pc, #140]	; (8002940 <HAL_InitTick+0xcc>)
 80028b4:	fba2 2303 	umull	r2, r3, r2, r3
 80028b8:	0c9b      	lsrs	r3, r3, #18
 80028ba:	3b01      	subs	r3, #1
 80028bc:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM16 */
  htim16.Instance = TIM16;
 80028be:	4b21      	ldr	r3, [pc, #132]	; (8002944 <HAL_InitTick+0xd0>)
 80028c0:	4a21      	ldr	r2, [pc, #132]	; (8002948 <HAL_InitTick+0xd4>)
 80028c2:	601a      	str	r2, [r3, #0]
  + Period = [(TIM16CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim16.Init.Period = (1000000U / 1000U) - 1U;
 80028c4:	4b1f      	ldr	r3, [pc, #124]	; (8002944 <HAL_InitTick+0xd0>)
 80028c6:	f240 32e7 	movw	r2, #999	; 0x3e7
 80028ca:	60da      	str	r2, [r3, #12]
  htim16.Init.Prescaler = uwPrescalerValue;
 80028cc:	4a1d      	ldr	r2, [pc, #116]	; (8002944 <HAL_InitTick+0xd0>)
 80028ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028d0:	6053      	str	r3, [r2, #4]
  htim16.Init.ClockDivision = 0;
 80028d2:	4b1c      	ldr	r3, [pc, #112]	; (8002944 <HAL_InitTick+0xd0>)
 80028d4:	2200      	movs	r2, #0
 80028d6:	611a      	str	r2, [r3, #16]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80028d8:	4b1a      	ldr	r3, [pc, #104]	; (8002944 <HAL_InitTick+0xd0>)
 80028da:	2200      	movs	r2, #0
 80028dc:	609a      	str	r2, [r3, #8]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80028de:	4b19      	ldr	r3, [pc, #100]	; (8002944 <HAL_InitTick+0xd0>)
 80028e0:	2200      	movs	r2, #0
 80028e2:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim16);
 80028e4:	4817      	ldr	r0, [pc, #92]	; (8002944 <HAL_InitTick+0xd0>)
 80028e6:	f003 fbab 	bl	8006040 <HAL_TIM_Base_Init>
 80028ea:	4603      	mov	r3, r0
 80028ec:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 80028f0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d11b      	bne.n	8002930 <HAL_InitTick+0xbc>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim16);
 80028f8:	4812      	ldr	r0, [pc, #72]	; (8002944 <HAL_InitTick+0xd0>)
 80028fa:	f003 fc03 	bl	8006104 <HAL_TIM_Base_Start_IT>
 80028fe:	4603      	mov	r3, r0
 8002900:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8002904:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002908:	2b00      	cmp	r3, #0
 800290a:	d111      	bne.n	8002930 <HAL_InitTick+0xbc>
    {
    /* Enable the TIM16 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 800290c:	2019      	movs	r0, #25
 800290e:	f001 fa8f 	bl	8003e30 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	2b0f      	cmp	r3, #15
 8002916:	d808      	bhi.n	800292a <HAL_InitTick+0xb6>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority, 0U);
 8002918:	2200      	movs	r2, #0
 800291a:	6879      	ldr	r1, [r7, #4]
 800291c:	2019      	movs	r0, #25
 800291e:	f001 fa6b 	bl	8003df8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002922:	4a0a      	ldr	r2, [pc, #40]	; (800294c <HAL_InitTick+0xd8>)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	6013      	str	r3, [r2, #0]
 8002928:	e002      	b.n	8002930 <HAL_InitTick+0xbc>
      }
      else
      {
        status = HAL_ERROR;
 800292a:	2301      	movs	r3, #1
 800292c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8002930:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8002934:	4618      	mov	r0, r3
 8002936:	3730      	adds	r7, #48	; 0x30
 8002938:	46bd      	mov	sp, r7
 800293a:	bd80      	pop	{r7, pc}
 800293c:	40021000 	.word	0x40021000
 8002940:	431bde83 	.word	0x431bde83
 8002944:	20000fb4 	.word	0x20000fb4
 8002948:	40014400 	.word	0x40014400
 800294c:	20000004 	.word	0x20000004

08002950 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002950:	b480      	push	{r7}
 8002952:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002954:	e7fe      	b.n	8002954 <NMI_Handler+0x4>

08002956 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002956:	b480      	push	{r7}
 8002958:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800295a:	e7fe      	b.n	800295a <HardFault_Handler+0x4>

0800295c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800295c:	b480      	push	{r7}
 800295e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002960:	e7fe      	b.n	8002960 <MemManage_Handler+0x4>

08002962 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002962:	b480      	push	{r7}
 8002964:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002966:	e7fe      	b.n	8002966 <BusFault_Handler+0x4>

08002968 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002968:	b480      	push	{r7}
 800296a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800296c:	e7fe      	b.n	800296c <UsageFault_Handler+0x4>

0800296e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800296e:	b480      	push	{r7}
 8002970:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002972:	bf00      	nop
 8002974:	46bd      	mov	sp, r7
 8002976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297a:	4770      	bx	lr

0800297c <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 800297c:	b580      	push	{r7, lr}
 800297e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(MOTION_EXTI3_PIN_Pin);
 8002980:	2008      	movs	r0, #8
 8002982:	f001 fbe5 	bl	8004150 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8002986:	bf00      	nop
 8002988:	bd80      	pop	{r7, pc}
	...

0800298c <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 800298c:	b580      	push	{r7, lr}
 800298e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8002990:	4802      	ldr	r0, [pc, #8]	; (800299c <TIM1_UP_TIM16_IRQHandler+0x10>)
 8002992:	f003 fc0b 	bl	80061ac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8002996:	bf00      	nop
 8002998:	bd80      	pop	{r7, pc}
 800299a:	bf00      	nop
 800299c:	20000fb4 	.word	0x20000fb4

080029a0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80029a0:	b580      	push	{r7, lr}
 80029a2:	b086      	sub	sp, #24
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80029a8:	4a14      	ldr	r2, [pc, #80]	; (80029fc <_sbrk+0x5c>)
 80029aa:	4b15      	ldr	r3, [pc, #84]	; (8002a00 <_sbrk+0x60>)
 80029ac:	1ad3      	subs	r3, r2, r3
 80029ae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80029b0:	697b      	ldr	r3, [r7, #20]
 80029b2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80029b4:	4b13      	ldr	r3, [pc, #76]	; (8002a04 <_sbrk+0x64>)
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d102      	bne.n	80029c2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80029bc:	4b11      	ldr	r3, [pc, #68]	; (8002a04 <_sbrk+0x64>)
 80029be:	4a12      	ldr	r2, [pc, #72]	; (8002a08 <_sbrk+0x68>)
 80029c0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80029c2:	4b10      	ldr	r3, [pc, #64]	; (8002a04 <_sbrk+0x64>)
 80029c4:	681a      	ldr	r2, [r3, #0]
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	4413      	add	r3, r2
 80029ca:	693a      	ldr	r2, [r7, #16]
 80029cc:	429a      	cmp	r2, r3
 80029ce:	d207      	bcs.n	80029e0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80029d0:	f007 fa2c 	bl	8009e2c <__errno>
 80029d4:	4603      	mov	r3, r0
 80029d6:	220c      	movs	r2, #12
 80029d8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80029da:	f04f 33ff 	mov.w	r3, #4294967295
 80029de:	e009      	b.n	80029f4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80029e0:	4b08      	ldr	r3, [pc, #32]	; (8002a04 <_sbrk+0x64>)
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80029e6:	4b07      	ldr	r3, [pc, #28]	; (8002a04 <_sbrk+0x64>)
 80029e8:	681a      	ldr	r2, [r3, #0]
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	4413      	add	r3, r2
 80029ee:	4a05      	ldr	r2, [pc, #20]	; (8002a04 <_sbrk+0x64>)
 80029f0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80029f2:	68fb      	ldr	r3, [r7, #12]
}
 80029f4:	4618      	mov	r0, r3
 80029f6:	3718      	adds	r7, #24
 80029f8:	46bd      	mov	sp, r7
 80029fa:	bd80      	pop	{r7, pc}
 80029fc:	20010000 	.word	0x20010000
 8002a00:	00000400 	.word	0x00000400
 8002a04:	20001000 	.word	0x20001000
 8002a08:	20004d68 	.word	0x20004d68

08002a0c <Wake_signal>:
* @note        Assert Wake and Reset Signal on Specified Portpin with Delay According to Datasheet
* @param
* @return
*/
void Wake_signal()
{
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	af00      	add	r7, sp, #0
	/* Assert Wake Signal */
	 HAL_GPIO_WritePin(MOTION_WAKE_PIN_GPIO_Port, MOTION_WAKE_PIN_Pin, GPIO_PIN_RESET);
 8002a10:	2200      	movs	r2, #0
 8002a12:	2101      	movs	r1, #1
 8002a14:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002a18:	f001 fb82 	bl	8004120 <HAL_GPIO_WritePin>
	/* Assert Wake Signal */
	//HAL_GPIO_WritePin(MOTION_RESET_PIN_GPIO_Port, MOTION_RESET_PIN_Pin, GPIO_PIN_SET);

	 /* TODO: (1/2) Test different Timing Variants because the 2ms according to the Reference Manual does not work! */
	/* Wait 2ms */
    HAL_Delay(20);
 8002a1c:	2014      	movs	r0, #20
 8002a1e:	f001 f90f 	bl	8003c40 <HAL_Delay>

    /* De-Assert Wake Signal */
    HAL_GPIO_WritePin(MOTION_WAKE_PIN_GPIO_Port, MOTION_WAKE_PIN_Pin, GPIO_PIN_SET);
 8002a22:	2201      	movs	r2, #1
 8002a24:	2101      	movs	r1, #1
 8002a26:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002a2a:	f001 fb79 	bl	8004120 <HAL_GPIO_WritePin>
	//HAL_GPIO_WritePin(MOTION_RESET_PIN_GPIO_Port, MOTION_RESET_PIN_Pin, GPIO_PIN_RESET);
}
 8002a2e:	bf00      	nop
 8002a30:	bd80      	pop	{r7, pc}
	...

08002a34 <Reset_signal>:

void Reset_signal()
{
 8002a34:	b580      	push	{r7, lr}
 8002a36:	af00      	add	r7, sp, #0
	/* Assert Wake Signal */
	HAL_GPIO_WritePin(MOTION_RESET_PIN_GPIO_Port, MOTION_RESET_PIN_Pin, GPIO_PIN_RESET);
 8002a38:	2200      	movs	r2, #0
 8002a3a:	2102      	movs	r1, #2
 8002a3c:	4806      	ldr	r0, [pc, #24]	; (8002a58 <Reset_signal+0x24>)
 8002a3e:	f001 fb6f 	bl	8004120 <HAL_GPIO_WritePin>

	/* TODO: (2/2) Test different Timing Variants because the 11ms according to the Reference Manual does not work! */
	/* Wait 11ms */
	HAL_Delay(20);
 8002a42:	2014      	movs	r0, #20
 8002a44:	f001 f8fc 	bl	8003c40 <HAL_Delay>

	/* De-Assert Wake Signal */
	HAL_GPIO_WritePin(MOTION_RESET_PIN_GPIO_Port, MOTION_RESET_PIN_Pin, GPIO_PIN_SET);
 8002a48:	2201      	movs	r2, #1
 8002a4a:	2102      	movs	r1, #2
 8002a4c:	4802      	ldr	r0, [pc, #8]	; (8002a58 <Reset_signal+0x24>)
 8002a4e:	f001 fb67 	bl	8004120 <HAL_GPIO_WritePin>
}
 8002a52:	bf00      	nop
 8002a54:	bd80      	pop	{r7, pc}
 8002a56:	bf00      	nop
 8002a58:	48000400 	.word	0x48000400

08002a5c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002a5c:	b480      	push	{r7}
 8002a5e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002a60:	4b06      	ldr	r3, [pc, #24]	; (8002a7c <SystemInit+0x20>)
 8002a62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a66:	4a05      	ldr	r2, [pc, #20]	; (8002a7c <SystemInit+0x20>)
 8002a68:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002a6c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8002a70:	bf00      	nop
 8002a72:	46bd      	mov	sp, r7
 8002a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a78:	4770      	bx	lr
 8002a7a:	bf00      	nop
 8002a7c:	e000ed00 	.word	0xe000ed00

08002a80 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002a80:	b580      	push	{r7, lr}
 8002a82:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002a84:	4b14      	ldr	r3, [pc, #80]	; (8002ad8 <MX_USART1_UART_Init+0x58>)
 8002a86:	4a15      	ldr	r2, [pc, #84]	; (8002adc <MX_USART1_UART_Init+0x5c>)
 8002a88:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002a8a:	4b13      	ldr	r3, [pc, #76]	; (8002ad8 <MX_USART1_UART_Init+0x58>)
 8002a8c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002a90:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002a92:	4b11      	ldr	r3, [pc, #68]	; (8002ad8 <MX_USART1_UART_Init+0x58>)
 8002a94:	2200      	movs	r2, #0
 8002a96:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002a98:	4b0f      	ldr	r3, [pc, #60]	; (8002ad8 <MX_USART1_UART_Init+0x58>)
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002a9e:	4b0e      	ldr	r3, [pc, #56]	; (8002ad8 <MX_USART1_UART_Init+0x58>)
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002aa4:	4b0c      	ldr	r3, [pc, #48]	; (8002ad8 <MX_USART1_UART_Init+0x58>)
 8002aa6:	220c      	movs	r2, #12
 8002aa8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002aaa:	4b0b      	ldr	r3, [pc, #44]	; (8002ad8 <MX_USART1_UART_Init+0x58>)
 8002aac:	2200      	movs	r2, #0
 8002aae:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002ab0:	4b09      	ldr	r3, [pc, #36]	; (8002ad8 <MX_USART1_UART_Init+0x58>)
 8002ab2:	2200      	movs	r2, #0
 8002ab4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002ab6:	4b08      	ldr	r3, [pc, #32]	; (8002ad8 <MX_USART1_UART_Init+0x58>)
 8002ab8:	2200      	movs	r2, #0
 8002aba:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002abc:	4b06      	ldr	r3, [pc, #24]	; (8002ad8 <MX_USART1_UART_Init+0x58>)
 8002abe:	2200      	movs	r2, #0
 8002ac0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002ac2:	4805      	ldr	r0, [pc, #20]	; (8002ad8 <MX_USART1_UART_Init+0x58>)
 8002ac4:	f003 fd3c 	bl	8006540 <HAL_UART_Init>
 8002ac8:	4603      	mov	r3, r0
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d001      	beq.n	8002ad2 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8002ace:	f7fe fc9b 	bl	8001408 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002ad2:	bf00      	nop
 8002ad4:	bd80      	pop	{r7, pc}
 8002ad6:	bf00      	nop
 8002ad8:	20001004 	.word	0x20001004
 8002adc:	40013800 	.word	0x40013800

08002ae0 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002ae4:	4b15      	ldr	r3, [pc, #84]	; (8002b3c <MX_USART2_UART_Init+0x5c>)
 8002ae6:	4a16      	ldr	r2, [pc, #88]	; (8002b40 <MX_USART2_UART_Init+0x60>)
 8002ae8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002aea:	4b14      	ldr	r3, [pc, #80]	; (8002b3c <MX_USART2_UART_Init+0x5c>)
 8002aec:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002af0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002af2:	4b12      	ldr	r3, [pc, #72]	; (8002b3c <MX_USART2_UART_Init+0x5c>)
 8002af4:	2200      	movs	r2, #0
 8002af6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002af8:	4b10      	ldr	r3, [pc, #64]	; (8002b3c <MX_USART2_UART_Init+0x5c>)
 8002afa:	2200      	movs	r2, #0
 8002afc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002afe:	4b0f      	ldr	r3, [pc, #60]	; (8002b3c <MX_USART2_UART_Init+0x5c>)
 8002b00:	2200      	movs	r2, #0
 8002b02:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002b04:	4b0d      	ldr	r3, [pc, #52]	; (8002b3c <MX_USART2_UART_Init+0x5c>)
 8002b06:	220c      	movs	r2, #12
 8002b08:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002b0a:	4b0c      	ldr	r3, [pc, #48]	; (8002b3c <MX_USART2_UART_Init+0x5c>)
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002b10:	4b0a      	ldr	r3, [pc, #40]	; (8002b3c <MX_USART2_UART_Init+0x5c>)
 8002b12:	2200      	movs	r2, #0
 8002b14:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002b16:	4b09      	ldr	r3, [pc, #36]	; (8002b3c <MX_USART2_UART_Init+0x5c>)
 8002b18:	2200      	movs	r2, #0
 8002b1a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002b1c:	4b07      	ldr	r3, [pc, #28]	; (8002b3c <MX_USART2_UART_Init+0x5c>)
 8002b1e:	2200      	movs	r2, #0
 8002b20:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002b22:	4806      	ldr	r0, [pc, #24]	; (8002b3c <MX_USART2_UART_Init+0x5c>)
 8002b24:	f003 fd0c 	bl	8006540 <HAL_UART_Init>
 8002b28:	4603      	mov	r3, r0
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d001      	beq.n	8002b32 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8002b2e:	f7fe fc6b 	bl	8001408 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */
  RetargetInit(&huart2);
 8002b32:	4802      	ldr	r0, [pc, #8]	; (8002b3c <MX_USART2_UART_Init+0x5c>)
 8002b34:	f7fe fc6e 	bl	8001414 <RetargetInit>
  /* USER CODE END USART2_Init 2 */

}
 8002b38:	bf00      	nop
 8002b3a:	bd80      	pop	{r7, pc}
 8002b3c:	20001088 	.word	0x20001088
 8002b40:	40004400 	.word	0x40004400

08002b44 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002b44:	b580      	push	{r7, lr}
 8002b46:	b0a0      	sub	sp, #128	; 0x80
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b4c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002b50:	2200      	movs	r2, #0
 8002b52:	601a      	str	r2, [r3, #0]
 8002b54:	605a      	str	r2, [r3, #4]
 8002b56:	609a      	str	r2, [r3, #8]
 8002b58:	60da      	str	r2, [r3, #12]
 8002b5a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002b5c:	f107 0318 	add.w	r3, r7, #24
 8002b60:	2254      	movs	r2, #84	; 0x54
 8002b62:	2100      	movs	r1, #0
 8002b64:	4618      	mov	r0, r3
 8002b66:	f007 fa92 	bl	800a08e <memset>
  if(uartHandle->Instance==USART1)
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	4a47      	ldr	r2, [pc, #284]	; (8002c8c <HAL_UART_MspInit+0x148>)
 8002b70:	4293      	cmp	r3, r2
 8002b72:	d138      	bne.n	8002be6 <HAL_UART_MspInit+0xa2>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002b74:	2301      	movs	r3, #1
 8002b76:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002b78:	2300      	movs	r3, #0
 8002b7a:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002b7c:	f107 0318 	add.w	r3, r7, #24
 8002b80:	4618      	mov	r0, r3
 8002b82:	f002 ff65 	bl	8005a50 <HAL_RCCEx_PeriphCLKConfig>
 8002b86:	4603      	mov	r3, r0
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d001      	beq.n	8002b90 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002b8c:	f7fe fc3c 	bl	8001408 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002b90:	4b3f      	ldr	r3, [pc, #252]	; (8002c90 <HAL_UART_MspInit+0x14c>)
 8002b92:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b94:	4a3e      	ldr	r2, [pc, #248]	; (8002c90 <HAL_UART_MspInit+0x14c>)
 8002b96:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002b9a:	6613      	str	r3, [r2, #96]	; 0x60
 8002b9c:	4b3c      	ldr	r3, [pc, #240]	; (8002c90 <HAL_UART_MspInit+0x14c>)
 8002b9e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ba0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ba4:	617b      	str	r3, [r7, #20]
 8002ba6:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ba8:	4b39      	ldr	r3, [pc, #228]	; (8002c90 <HAL_UART_MspInit+0x14c>)
 8002baa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002bac:	4a38      	ldr	r2, [pc, #224]	; (8002c90 <HAL_UART_MspInit+0x14c>)
 8002bae:	f043 0301 	orr.w	r3, r3, #1
 8002bb2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002bb4:	4b36      	ldr	r3, [pc, #216]	; (8002c90 <HAL_UART_MspInit+0x14c>)
 8002bb6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002bb8:	f003 0301 	and.w	r3, r3, #1
 8002bbc:	613b      	str	r3, [r7, #16]
 8002bbe:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = WIFI_USART1_TX_Pin|WIFI_USART1_RX_Pin;
 8002bc0:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002bc4:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bc6:	2302      	movs	r3, #2
 8002bc8:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bca:	2300      	movs	r3, #0
 8002bcc:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002bce:	2303      	movs	r3, #3
 8002bd0:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002bd2:	2307      	movs	r3, #7
 8002bd4:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002bd6:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002bda:	4619      	mov	r1, r3
 8002bdc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002be0:	f001 f934 	bl	8003e4c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8002be4:	e04d      	b.n	8002c82 <HAL_UART_MspInit+0x13e>
  else if(uartHandle->Instance==USART2)
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	4a2a      	ldr	r2, [pc, #168]	; (8002c94 <HAL_UART_MspInit+0x150>)
 8002bec:	4293      	cmp	r3, r2
 8002bee:	d148      	bne.n	8002c82 <HAL_UART_MspInit+0x13e>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002bf0:	2302      	movs	r3, #2
 8002bf2:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002bf4:	2300      	movs	r3, #0
 8002bf6:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002bf8:	f107 0318 	add.w	r3, r7, #24
 8002bfc:	4618      	mov	r0, r3
 8002bfe:	f002 ff27 	bl	8005a50 <HAL_RCCEx_PeriphCLKConfig>
 8002c02:	4603      	mov	r3, r0
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d001      	beq.n	8002c0c <HAL_UART_MspInit+0xc8>
      Error_Handler();
 8002c08:	f7fe fbfe 	bl	8001408 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002c0c:	4b20      	ldr	r3, [pc, #128]	; (8002c90 <HAL_UART_MspInit+0x14c>)
 8002c0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c10:	4a1f      	ldr	r2, [pc, #124]	; (8002c90 <HAL_UART_MspInit+0x14c>)
 8002c12:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002c16:	6593      	str	r3, [r2, #88]	; 0x58
 8002c18:	4b1d      	ldr	r3, [pc, #116]	; (8002c90 <HAL_UART_MspInit+0x14c>)
 8002c1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c20:	60fb      	str	r3, [r7, #12]
 8002c22:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c24:	4b1a      	ldr	r3, [pc, #104]	; (8002c90 <HAL_UART_MspInit+0x14c>)
 8002c26:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c28:	4a19      	ldr	r2, [pc, #100]	; (8002c90 <HAL_UART_MspInit+0x14c>)
 8002c2a:	f043 0301 	orr.w	r3, r3, #1
 8002c2e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002c30:	4b17      	ldr	r3, [pc, #92]	; (8002c90 <HAL_UART_MspInit+0x14c>)
 8002c32:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c34:	f003 0301 	and.w	r3, r3, #1
 8002c38:	60bb      	str	r3, [r7, #8]
 8002c3a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8002c3c:	2304      	movs	r3, #4
 8002c3e:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c40:	2302      	movs	r3, #2
 8002c42:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c44:	2300      	movs	r3, #0
 8002c46:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c48:	2303      	movs	r3, #3
 8002c4a:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002c4c:	2307      	movs	r3, #7
 8002c4e:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8002c50:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002c54:	4619      	mov	r1, r3
 8002c56:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002c5a:	f001 f8f7 	bl	8003e4c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8002c5e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002c62:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c64:	2302      	movs	r3, #2
 8002c66:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c68:	2300      	movs	r3, #0
 8002c6a:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c6c:	2303      	movs	r3, #3
 8002c6e:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8002c70:	2303      	movs	r3, #3
 8002c72:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8002c74:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002c78:	4619      	mov	r1, r3
 8002c7a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002c7e:	f001 f8e5 	bl	8003e4c <HAL_GPIO_Init>
}
 8002c82:	bf00      	nop
 8002c84:	3780      	adds	r7, #128	; 0x80
 8002c86:	46bd      	mov	sp, r7
 8002c88:	bd80      	pop	{r7, pc}
 8002c8a:	bf00      	nop
 8002c8c:	40013800 	.word	0x40013800
 8002c90:	40021000 	.word	0x40021000
 8002c94:	40004400 	.word	0x40004400

08002c98 <VREG_init>:
* @note        Inits VREG registers, get HID config & report descriptor tables, retrieves all device features
* @param 
* @return error status 0=SUCCESS, failcodes: 0x11=HID_DESC_FAIL, 0x12=RPT_DESC_FAIL, 0x18=RESET_FAIL 
*/ 
UINT8 VREG_init() 
{
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	b08c      	sub	sp, #48	; 0x30
 8002c9c:	af00      	add	r7, sp, #0
    UINT8 ucBuf[BUF_40];                                           
    UINT8 ucSensor_num;
    
        
    memset(&_VREGS, 0x00, sizeof(_VREGS));                            // Initialize VREG registers 
 8002c9e:	f44f 7286 	mov.w	r2, #268	; 0x10c
 8002ca2:	2100      	movs	r1, #0
 8002ca4:	4841      	ldr	r0, [pc, #260]	; (8002dac <VREG_init+0x114>)
 8002ca6:	f007 f9f2 	bl	800a08e <memset>

    
    if ( hid_i2c_descriptor_handler(GET_HID_DESC) )                 // get HID descriptor from SSC7150
 8002caa:	2001      	movs	r0, #1
 8002cac:	f7fe ff18 	bl	8001ae0 <hid_i2c_descriptor_handler>
 8002cb0:	4603      	mov	r3, r0
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d008      	beq.n	8002cc8 <VREG_init+0x30>
    {
        _VREGS.stat.stat4.SHStartStatus = VREG_SHSTART_FAIL;         // update status register (VREG 0x3F) for failure to get HID descriptor
 8002cb6:	4a3d      	ldr	r2, [pc, #244]	; (8002dac <VREG_init+0x114>)
 8002cb8:	f892 3108 	ldrb.w	r3, [r2, #264]	; 0x108
 8002cbc:	f043 0318 	orr.w	r3, r3, #24
 8002cc0:	f882 3108 	strb.w	r3, [r2, #264]	; 0x108
        return HID_DESC_FAIL;
 8002cc4:	2311      	movs	r3, #17
 8002cc6:	e06c      	b.n	8002da2 <VREG_init+0x10a>
    }        
    
    hid_i2c_cmd_process(ucBuf, POWER_ON, ARB_ID);                   // Issue HID Power ON command to SSC7150 (NOTE: 'ucBuf' and 'ARB_ID' are don't cares for POWER_ON command)
 8002cc8:	1d3b      	adds	r3, r7, #4
 8002cca:	2201      	movs	r2, #1
 8002ccc:	2102      	movs	r1, #2
 8002cce:	4618      	mov	r0, r3
 8002cd0:	f7fe ffde 	bl	8001c90 <hid_i2c_cmd_process>
    
    _VREGS.SHC.reset = VREG_RESET_INIT;                              //set the SHC reset bit to indicate this operation has not yet completed successfully
 8002cd4:	4a35      	ldr	r2, [pc, #212]	; (8002dac <VREG_init+0x114>)
 8002cd6:	7813      	ldrb	r3, [r2, #0]
 8002cd8:	f043 0308 	orr.w	r3, r3, #8
 8002cdc:	7013      	strb	r3, [r2, #0]
    if ( hid_i2c_cmd_process (ucBuf, RESET_DEV_CMD, ARB_ID) )       // Issue HID Reset command  (NOTE: 'ucBuf' and 'ARB_ID' are don't cares for RESET_REG command)
 8002cde:	1d3b      	adds	r3, r7, #4
 8002ce0:	2201      	movs	r2, #1
 8002ce2:	2101      	movs	r1, #1
 8002ce4:	4618      	mov	r0, r3
 8002ce6:	f7fe ffd3 	bl	8001c90 <hid_i2c_cmd_process>
 8002cea:	4603      	mov	r3, r0
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d008      	beq.n	8002d02 <VREG_init+0x6a>
    {
        _VREGS.stat.stat4.SHStartStatus = VREG_SHSTART_FAIL;         // If HID Reset fails, update status register (VREG 0x3F)
 8002cf0:	4a2e      	ldr	r2, [pc, #184]	; (8002dac <VREG_init+0x114>)
 8002cf2:	f892 3108 	ldrb.w	r3, [r2, #264]	; 0x108
 8002cf6:	f043 0318 	orr.w	r3, r3, #24
 8002cfa:	f882 3108 	strb.w	r3, [r2, #264]	; 0x108
        return RESET_FAIL;
 8002cfe:	2318      	movs	r3, #24
 8002d00:	e04f      	b.n	8002da2 <VREG_init+0x10a>
    }    
    
    if ( hid_i2c_descriptor_handler(GET_RPT_DESC) )                 // Get HID Report descriptor from SSC7150 
 8002d02:	2002      	movs	r0, #2
 8002d04:	f7fe feec 	bl	8001ae0 <hid_i2c_descriptor_handler>
 8002d08:	4603      	mov	r3, r0
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d008      	beq.n	8002d20 <VREG_init+0x88>
    {
        _VREGS.stat.stat4.SHStartStatus = VREG_SHSTART_FAIL;         // HID report descriptor error, update status register (VREG 0x3F)
 8002d0e:	4a27      	ldr	r2, [pc, #156]	; (8002dac <VREG_init+0x114>)
 8002d10:	f892 3108 	ldrb.w	r3, [r2, #264]	; 0x108
 8002d14:	f043 0318 	orr.w	r3, r3, #24
 8002d18:	f882 3108 	strb.w	r3, [r2, #264]	; 0x108
        return RPT_DESC_FAIL;
 8002d1c:	2312      	movs	r3, #18
 8002d1e:	e040      	b.n	8002da2 <VREG_init+0x10a>
    }       
    
    for (ucSensor_num = 0; ucSensor_num <= NUM_SENS; ucSensor_num++) //go through the sensor list but only GetFeatureReport for valid ids   
 8002d20:	2300      	movs	r3, #0
 8002d22:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8002d26:	e025      	b.n	8002d74 <VREG_init+0xdc>
    {
        if (SENSOR[ucSensor_num].id != 0xFF && SENSOR[ucSensor_num].id != 0)
 8002d28:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8002d2c:	4920      	ldr	r1, [pc, #128]	; (8002db0 <VREG_init+0x118>)
 8002d2e:	4613      	mov	r3, r2
 8002d30:	00db      	lsls	r3, r3, #3
 8002d32:	1a9b      	subs	r3, r3, r2
 8002d34:	440b      	add	r3, r1
 8002d36:	781b      	ldrb	r3, [r3, #0]
 8002d38:	2bff      	cmp	r3, #255	; 0xff
 8002d3a:	d016      	beq.n	8002d6a <VREG_init+0xd2>
 8002d3c:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8002d40:	491b      	ldr	r1, [pc, #108]	; (8002db0 <VREG_init+0x118>)
 8002d42:	4613      	mov	r3, r2
 8002d44:	00db      	lsls	r3, r3, #3
 8002d46:	1a9b      	subs	r3, r3, r2
 8002d48:	440b      	add	r3, r1
 8002d4a:	781b      	ldrb	r3, [r3, #0]
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d00c      	beq.n	8002d6a <VREG_init+0xd2>
        {
            hid_i2c_cmd_process(ucBuf, HID_GET_RPT_FEAT, SENSOR[ucSensor_num].id);  // Get feature report for all valid sensors and update _VREGS register
 8002d50:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8002d54:	4916      	ldr	r1, [pc, #88]	; (8002db0 <VREG_init+0x118>)
 8002d56:	4613      	mov	r3, r2
 8002d58:	00db      	lsls	r3, r3, #3
 8002d5a:	1a9b      	subs	r3, r3, r2
 8002d5c:	440b      	add	r3, r1
 8002d5e:	781a      	ldrb	r2, [r3, #0]
 8002d60:	1d3b      	adds	r3, r7, #4
 8002d62:	2105      	movs	r1, #5
 8002d64:	4618      	mov	r0, r3
 8002d66:	f7fe ff93 	bl	8001c90 <hid_i2c_cmd_process>
    for (ucSensor_num = 0; ucSensor_num <= NUM_SENS; ucSensor_num++) //go through the sensor list but only GetFeatureReport for valid ids   
 8002d6a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002d6e:	3301      	adds	r3, #1
 8002d70:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8002d74:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002d78:	2b0c      	cmp	r3, #12
 8002d7a:	d9d5      	bls.n	8002d28 <VREG_init+0x90>
        }
    }

    
    _VREGS.stat.stat4.SHStartStatus = VREG_SHSTART_SUCCESS;          // HID startup successful, update status register (VREG 0x3F) 
 8002d7c:	4a0b      	ldr	r2, [pc, #44]	; (8002dac <VREG_init+0x114>)
 8002d7e:	f892 3108 	ldrb.w	r3, [r2, #264]	; 0x108
 8002d82:	2101      	movs	r1, #1
 8002d84:	f361 03c4 	bfi	r3, r1, #3, #2
 8002d88:	f882 3108 	strb.w	r3, [r2, #264]	; 0x108

    _VREGS.SHC.SHwake = TRUE;                                        // HID device is now awake and ready for operation
 8002d8c:	4a07      	ldr	r2, [pc, #28]	; (8002dac <VREG_init+0x114>)
 8002d8e:	7813      	ldrb	r3, [r2, #0]
 8002d90:	f043 0301 	orr.w	r3, r3, #1
 8002d94:	7013      	strb	r3, [r2, #0]
    _VREGS.SHC.SHstart = TRUE;
 8002d96:	4a05      	ldr	r2, [pc, #20]	; (8002dac <VREG_init+0x114>)
 8002d98:	7813      	ldrb	r3, [r2, #0]
 8002d9a:	f043 0304 	orr.w	r3, r3, #4
 8002d9e:	7013      	strb	r3, [r2, #0]

    return SUCCESS;
 8002da0:	2300      	movs	r3, #0
}
 8002da2:	4618      	mov	r0, r3
 8002da4:	3730      	adds	r7, #48	; 0x30
 8002da6:	46bd      	mov	sp, r7
 8002da8:	bd80      	pop	{r7, pc}
 8002daa:	bf00      	nop
 8002dac:	2000110c 	.word	0x2000110c
 8002db0:	20000118 	.word	0x20000118

08002db4 <set_state_data>:
* @note        Set and confirm new features for a device 
* @param GET_SET_PARAMS structure containing  power state (=2: FULL, =3: LOW),sensor ID, New data rate,New sensitivity
* @return error status 0=SUCCESS, failcodes: 0x17=SET_FEAT_FAIL 
*/ 
UINT8 set_state_data(GET_SET_PARAMS SET_PARAMS)    
{
 8002db4:	b084      	sub	sp, #16
 8002db6:	b5b0      	push	{r4, r5, r7, lr}
 8002db8:	b096      	sub	sp, #88	; 0x58
 8002dba:	af00      	add	r7, sp, #0
 8002dbc:	f107 0468 	add.w	r4, r7, #104	; 0x68
 8002dc0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    UINT8 ucGetFeatBuf[BUF_40];                                     // GetFeature report buffer
    UINT8 ucSetFeatBuf[BUF_40];                                     // SetFeature report buffer
    UINT8 ucRetryCnt, ucGSptr, ucBufSize;


    if ( hid_i2c_cmd_process(ucGetFeatBuf, HID_GET_RPT_FEAT, SET_PARAMS.ucid) ) // Issue a get report feature command and store the get features in ucGetFeatBuf
 8002dc4:	f897 2068 	ldrb.w	r2, [r7, #104]	; 0x68
 8002dc8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002dcc:	2105      	movs	r1, #5
 8002dce:	4618      	mov	r0, r3
 8002dd0:	f7fe ff5e 	bl	8001c90 <hid_i2c_cmd_process>
 8002dd4:	4603      	mov	r3, r0
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d001      	beq.n	8002dde <set_state_data+0x2a>
        return SET_FEAT_FAIL;  
 8002dda:	2317      	movs	r3, #23
 8002ddc:	e073      	b.n	8002ec6 <set_state_data+0x112>
    
    memcpy(&ucSetFeatBuf, &ucGetFeatBuf, BUF_40);                   // Copy GetFeatBuff to bufs to use for set feature command
 8002dde:	1d3c      	adds	r4, r7, #4
 8002de0:	f107 052c 	add.w	r5, r7, #44	; 0x2c
 8002de4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002de6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002de8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002dea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002dec:	e895 0003 	ldmia.w	r5, {r0, r1}
 8002df0:	e884 0003 	stmia.w	r4, {r0, r1}

    // Modify fields that we would like to set in bufs (sensor state, power state, data rate, sensitivity)
    ucSetFeatBuf[RPT_REPORT_STATE] = HID_USAGE_SENSOR_PROPERTY_REPORTING_STATE_ALL_EVENTS_ENUM;   
 8002df4:	2302      	movs	r3, #2
 8002df6:	723b      	strb	r3, [r7, #8]
    ucSetFeatBuf[RPT_PWR_STATE] = SET_PARAMS.ucPowerState;          //update the Power state parameter
 8002df8:	f897 3069 	ldrb.w	r3, [r7, #105]	; 0x69
 8002dfc:	727b      	strb	r3, [r7, #9]

    if (SET_PARAMS.bDataRateValid)                                  // update data rate value?
 8002dfe:	f897 3078 	ldrb.w	r3, [r7, #120]	; 0x78
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d006      	beq.n	8002e14 <set_state_data+0x60>
    {
        ucSetFeatBuf[RPT_REPORT_INTVAL_LSB] = (UINT8) SET_PARAMS.usDataRateVal; //update 16 bit data rate value
 8002e06:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002e08:	b2db      	uxtb	r3, r3
 8002e0a:	72fb      	strb	r3, [r7, #11]
        ucSetFeatBuf[RPT_REPORT_INTVAL_MSB] = (UINT8) (SET_PARAMS.usDataRateVal >> BYTE_SHIFT);
 8002e0c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002e0e:	0a1b      	lsrs	r3, r3, #8
 8002e10:	b2db      	uxtb	r3, r3
 8002e12:	733b      	strb	r3, [r7, #12]
    }
    
    if (SET_PARAMS.bSensitivityValid)                               // update sensitivity value?
 8002e14:	f897 3070 	ldrb.w	r3, [r7, #112]	; 0x70
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d006      	beq.n	8002e2a <set_state_data+0x76>
    {
        ucSetFeatBuf[RPT_CHG_SENS_LSB] = (UINT8) SET_PARAMS.usSensitivityVal; //update 16 bit sensitivity value
 8002e1c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e1e:	b2db      	uxtb	r3, r3
 8002e20:	747b      	strb	r3, [r7, #17]
        ucSetFeatBuf[RPT_CHG_SENS_MSB] = (UINT8) (SET_PARAMS.usSensitivityVal >> BYTE_SHIFT);
 8002e22:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e24:	0a1b      	lsrs	r3, r3, #8
 8002e26:	b2db      	uxtb	r3, r3
 8002e28:	74bb      	strb	r3, [r7, #18]
    }

    for (ucRetryCnt = 0; ucRetryCnt < MAX_RETRIES; ucRetryCnt++)    // API spec requires 3 attempts at setting new features. 
 8002e2a:	2300      	movs	r3, #0
 8002e2c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 8002e30:	e03c      	b.n	8002eac <set_state_data+0xf8>
    {
        hid_i2c_cmd_process(ucSetFeatBuf, HID_SET_RPT_FEAT, SET_PARAMS.ucid);  // Send HID_SetFeature command to SSC7150 to update new features to the device
 8002e32:	f897 2068 	ldrb.w	r2, [r7, #104]	; 0x68
 8002e36:	1d3b      	adds	r3, r7, #4
 8002e38:	2107      	movs	r1, #7
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	f7fe ff28 	bl	8001c90 <hid_i2c_cmd_process>
        hid_i2c_cmd_process(ucGetFeatBuf, HID_GET_RPT_FEAT, SET_PARAMS.ucid);  // Send HID_GetFeature command to SSC7150 to check if new feature request to device were updated
 8002e40:	f897 2068 	ldrb.w	r2, [r7, #104]	; 0x68
 8002e44:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002e48:	2105      	movs	r1, #5
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	f7fe ff20 	bl	8001c90 <hid_i2c_cmd_process>
        
        ucBufSize = ucGetFeatBuf[RPT_SIZE_LSB];                     // size (in bytes) of packet is in 1st byte
 8002e50:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8002e54:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
        for (ucGSptr = 0; ucGSptr < ucBufSize; ucGSptr++)           // Check to see if the features have been updated
 8002e58:	2300      	movs	r3, #0
 8002e5a:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
 8002e5e:	e012      	b.n	8002e86 <set_state_data+0xd2>
        {
            if ( ucGetFeatBuf[ucGSptr] != ucSetFeatBuf[ucGSptr] ) 
 8002e60:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 8002e64:	3358      	adds	r3, #88	; 0x58
 8002e66:	443b      	add	r3, r7
 8002e68:	f813 2c2c 	ldrb.w	r2, [r3, #-44]
 8002e6c:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 8002e70:	3358      	adds	r3, #88	; 0x58
 8002e72:	443b      	add	r3, r7
 8002e74:	f813 3c54 	ldrb.w	r3, [r3, #-84]
 8002e78:	429a      	cmp	r2, r3
 8002e7a:	d10b      	bne.n	8002e94 <set_state_data+0xe0>
        for (ucGSptr = 0; ucGSptr < ucBufSize; ucGSptr++)           // Check to see if the features have been updated
 8002e7c:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 8002e80:	3301      	adds	r3, #1
 8002e82:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
 8002e86:	f897 2056 	ldrb.w	r2, [r7, #86]	; 0x56
 8002e8a:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8002e8e:	429a      	cmp	r2, r3
 8002e90:	d3e6      	bcc.n	8002e60 <set_state_data+0xac>
 8002e92:	e000      	b.n	8002e96 <set_state_data+0xe2>
                break;                                              //no they weren't, try again
 8002e94:	bf00      	nop
        }

        if ( ucGSptr == ucBufSize )                                 //that's the whole packet, ALL data matches
 8002e96:	f897 2056 	ldrb.w	r2, [r7, #86]	; 0x56
 8002e9a:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8002e9e:	429a      	cmp	r2, r3
 8002ea0:	d009      	beq.n	8002eb6 <set_state_data+0x102>
    for (ucRetryCnt = 0; ucRetryCnt < MAX_RETRIES; ucRetryCnt++)    // API spec requires 3 attempts at setting new features. 
 8002ea2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8002ea6:	3301      	adds	r3, #1
 8002ea8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 8002eac:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8002eb0:	2b02      	cmp	r3, #2
 8002eb2:	d9be      	bls.n	8002e32 <set_state_data+0x7e>
 8002eb4:	e000      	b.n	8002eb8 <set_state_data+0x104>
            break;                                                  //we're done
 8002eb6:	bf00      	nop
    }

    if (ucRetryCnt == MAX_RETRIES)
 8002eb8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8002ebc:	2b03      	cmp	r3, #3
 8002ebe:	d101      	bne.n	8002ec4 <set_state_data+0x110>
        return SET_FEAT_FAIL;                                       // Return error code
 8002ec0:	2317      	movs	r3, #23
 8002ec2:	e000      	b.n	8002ec6 <set_state_data+0x112>
    
    else return SUCCESS;                                            // Return successful
 8002ec4:	2300      	movs	r3, #0
}
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	3758      	adds	r7, #88	; 0x58
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8002ed0:	b004      	add	sp, #16
 8002ed2:	4770      	bx	lr

08002ed4 <parse_update_VREG_data>:
* @param ucSensorNum Sensor data struct checked for unit exponent value
* @param ucInpRep Pointer to input report data buffer
* @return 
*/ 
void parse_update_VREG_data (UINT8 ucSensorNum, UINT8 *ucInpRep)
{
 8002ed4:	b480      	push	{r7}
 8002ed6:	b083      	sub	sp, #12
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	4603      	mov	r3, r0
 8002edc:	6039      	str	r1, [r7, #0]
 8002ede:	71fb      	strb	r3, [r7, #7]

    switch (ucSensorNum)                                            //update VREG data registers with their respective data.
 8002ee0:	79fb      	ldrb	r3, [r7, #7]
 8002ee2:	2b09      	cmp	r3, #9
 8002ee4:	f200 820d 	bhi.w	8003302 <parse_update_VREG_data+0x42e>
 8002ee8:	a201      	add	r2, pc, #4	; (adr r2, 8002ef0 <parse_update_VREG_data+0x1c>)
 8002eea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002eee:	bf00      	nop
 8002ef0:	08002f19 	.word	0x08002f19
 8002ef4:	08002f81 	.word	0x08002f81
 8002ef8:	08002fe9 	.word	0x08002fe9
 8002efc:	0800300f 	.word	0x0800300f
 8002f00:	080030a1 	.word	0x080030a1
 8002f04:	08003303 	.word	0x08003303
 8002f08:	08003303 	.word	0x08003303
 8002f0c:	0800311b 	.word	0x0800311b
 8002f10:	08003199 	.word	0x08003199
 8002f14:	0800328b 	.word	0x0800328b
    {     
        case ACCEL_VREG_OFFSET:                                     // Accelerometer data has been read
 
            _VREGS._data.ACXD = ((ucInpRep[SENSOR[ACCEL_VREG_OFFSET].DatOffset + 1] << BYTE_SHIFT) | ucInpRep[SENSOR[ACCEL_VREG_OFFSET].DatOffset]);    // parse data from data offset found in report descriptor
 8002f18:	4b9d      	ldr	r3, [pc, #628]	; (8003190 <parse_update_VREG_data+0x2bc>)
 8002f1a:	795b      	ldrb	r3, [r3, #5]
 8002f1c:	3301      	adds	r3, #1
 8002f1e:	683a      	ldr	r2, [r7, #0]
 8002f20:	4413      	add	r3, r2
 8002f22:	781b      	ldrb	r3, [r3, #0]
 8002f24:	021b      	lsls	r3, r3, #8
 8002f26:	4a9a      	ldr	r2, [pc, #616]	; (8003190 <parse_update_VREG_data+0x2bc>)
 8002f28:	7952      	ldrb	r2, [r2, #5]
 8002f2a:	4611      	mov	r1, r2
 8002f2c:	683a      	ldr	r2, [r7, #0]
 8002f2e:	440a      	add	r2, r1
 8002f30:	7812      	ldrb	r2, [r2, #0]
 8002f32:	4313      	orrs	r3, r2
 8002f34:	461a      	mov	r2, r3
 8002f36:	4b97      	ldr	r3, [pc, #604]	; (8003194 <parse_update_VREG_data+0x2c0>)
 8002f38:	659a      	str	r2, [r3, #88]	; 0x58
            _VREGS._data.ACYD = ((ucInpRep[SENSOR[ACCEL_VREG_OFFSET].DatOffset + 3] << BYTE_SHIFT) | ucInpRep[SENSOR[ACCEL_VREG_OFFSET].DatOffset + 2]);
 8002f3a:	4b95      	ldr	r3, [pc, #596]	; (8003190 <parse_update_VREG_data+0x2bc>)
 8002f3c:	795b      	ldrb	r3, [r3, #5]
 8002f3e:	3303      	adds	r3, #3
 8002f40:	683a      	ldr	r2, [r7, #0]
 8002f42:	4413      	add	r3, r2
 8002f44:	781b      	ldrb	r3, [r3, #0]
 8002f46:	021b      	lsls	r3, r3, #8
 8002f48:	4a91      	ldr	r2, [pc, #580]	; (8003190 <parse_update_VREG_data+0x2bc>)
 8002f4a:	7952      	ldrb	r2, [r2, #5]
 8002f4c:	3202      	adds	r2, #2
 8002f4e:	6839      	ldr	r1, [r7, #0]
 8002f50:	440a      	add	r2, r1
 8002f52:	7812      	ldrb	r2, [r2, #0]
 8002f54:	4313      	orrs	r3, r2
 8002f56:	461a      	mov	r2, r3
 8002f58:	4b8e      	ldr	r3, [pc, #568]	; (8003194 <parse_update_VREG_data+0x2c0>)
 8002f5a:	65da      	str	r2, [r3, #92]	; 0x5c
            _VREGS._data.ACZD = ((ucInpRep[SENSOR[ACCEL_VREG_OFFSET].DatOffset + 5] << BYTE_SHIFT) | ucInpRep[SENSOR[ACCEL_VREG_OFFSET].DatOffset + 4]);
 8002f5c:	4b8c      	ldr	r3, [pc, #560]	; (8003190 <parse_update_VREG_data+0x2bc>)
 8002f5e:	795b      	ldrb	r3, [r3, #5]
 8002f60:	3305      	adds	r3, #5
 8002f62:	683a      	ldr	r2, [r7, #0]
 8002f64:	4413      	add	r3, r2
 8002f66:	781b      	ldrb	r3, [r3, #0]
 8002f68:	021b      	lsls	r3, r3, #8
 8002f6a:	4a89      	ldr	r2, [pc, #548]	; (8003190 <parse_update_VREG_data+0x2bc>)
 8002f6c:	7952      	ldrb	r2, [r2, #5]
 8002f6e:	3204      	adds	r2, #4
 8002f70:	6839      	ldr	r1, [r7, #0]
 8002f72:	440a      	add	r2, r1
 8002f74:	7812      	ldrb	r2, [r2, #0]
 8002f76:	4313      	orrs	r3, r2
 8002f78:	461a      	mov	r2, r3
 8002f7a:	4b86      	ldr	r3, [pc, #536]	; (8003194 <parse_update_VREG_data+0x2c0>)
 8002f7c:	661a      	str	r2, [r3, #96]	; 0x60
            break;
 8002f7e:	e1c1      	b.n	8003304 <parse_update_VREG_data+0x430>

        case GYRO_VREG_OFFSET:                                      // Gyrometer data has been read
 
            _VREGS._data.GYXD = ((ucInpRep[SENSOR[GYRO_VREG_OFFSET].DatOffset + 1] << BYTE_SHIFT) | ucInpRep[SENSOR[GYRO_VREG_OFFSET].DatOffset]);
 8002f80:	4b83      	ldr	r3, [pc, #524]	; (8003190 <parse_update_VREG_data+0x2bc>)
 8002f82:	7b1b      	ldrb	r3, [r3, #12]
 8002f84:	3301      	adds	r3, #1
 8002f86:	683a      	ldr	r2, [r7, #0]
 8002f88:	4413      	add	r3, r2
 8002f8a:	781b      	ldrb	r3, [r3, #0]
 8002f8c:	021b      	lsls	r3, r3, #8
 8002f8e:	4a80      	ldr	r2, [pc, #512]	; (8003190 <parse_update_VREG_data+0x2bc>)
 8002f90:	7b12      	ldrb	r2, [r2, #12]
 8002f92:	4611      	mov	r1, r2
 8002f94:	683a      	ldr	r2, [r7, #0]
 8002f96:	440a      	add	r2, r1
 8002f98:	7812      	ldrb	r2, [r2, #0]
 8002f9a:	4313      	orrs	r3, r2
 8002f9c:	461a      	mov	r2, r3
 8002f9e:	4b7d      	ldr	r3, [pc, #500]	; (8003194 <parse_update_VREG_data+0x2c0>)
 8002fa0:	671a      	str	r2, [r3, #112]	; 0x70
            _VREGS._data.GYYD = ((ucInpRep[SENSOR[GYRO_VREG_OFFSET].DatOffset + 3] << BYTE_SHIFT) | ucInpRep[SENSOR[GYRO_VREG_OFFSET].DatOffset + 2]);
 8002fa2:	4b7b      	ldr	r3, [pc, #492]	; (8003190 <parse_update_VREG_data+0x2bc>)
 8002fa4:	7b1b      	ldrb	r3, [r3, #12]
 8002fa6:	3303      	adds	r3, #3
 8002fa8:	683a      	ldr	r2, [r7, #0]
 8002faa:	4413      	add	r3, r2
 8002fac:	781b      	ldrb	r3, [r3, #0]
 8002fae:	021b      	lsls	r3, r3, #8
 8002fb0:	4a77      	ldr	r2, [pc, #476]	; (8003190 <parse_update_VREG_data+0x2bc>)
 8002fb2:	7b12      	ldrb	r2, [r2, #12]
 8002fb4:	3202      	adds	r2, #2
 8002fb6:	6839      	ldr	r1, [r7, #0]
 8002fb8:	440a      	add	r2, r1
 8002fba:	7812      	ldrb	r2, [r2, #0]
 8002fbc:	4313      	orrs	r3, r2
 8002fbe:	461a      	mov	r2, r3
 8002fc0:	4b74      	ldr	r3, [pc, #464]	; (8003194 <parse_update_VREG_data+0x2c0>)
 8002fc2:	675a      	str	r2, [r3, #116]	; 0x74
            _VREGS._data.GYZD = ((ucInpRep[SENSOR[GYRO_VREG_OFFSET].DatOffset + 5] << BYTE_SHIFT) | ucInpRep[SENSOR[GYRO_VREG_OFFSET].DatOffset + 4]);
 8002fc4:	4b72      	ldr	r3, [pc, #456]	; (8003190 <parse_update_VREG_data+0x2bc>)
 8002fc6:	7b1b      	ldrb	r3, [r3, #12]
 8002fc8:	3305      	adds	r3, #5
 8002fca:	683a      	ldr	r2, [r7, #0]
 8002fcc:	4413      	add	r3, r2
 8002fce:	781b      	ldrb	r3, [r3, #0]
 8002fd0:	021b      	lsls	r3, r3, #8
 8002fd2:	4a6f      	ldr	r2, [pc, #444]	; (8003190 <parse_update_VREG_data+0x2bc>)
 8002fd4:	7b12      	ldrb	r2, [r2, #12]
 8002fd6:	3204      	adds	r2, #4
 8002fd8:	6839      	ldr	r1, [r7, #0]
 8002fda:	440a      	add	r2, r1
 8002fdc:	7812      	ldrb	r2, [r2, #0]
 8002fde:	4313      	orrs	r3, r2
 8002fe0:	461a      	mov	r2, r3
 8002fe2:	4b6c      	ldr	r3, [pc, #432]	; (8003194 <parse_update_VREG_data+0x2c0>)
 8002fe4:	679a      	str	r2, [r3, #120]	; 0x78
            break;
 8002fe6:	e18d      	b.n	8003304 <parse_update_VREG_data+0x430>

        case CMP_VREG_OFFSET:                                       // Compass data has been read
  
            _VREGS._data.CMD = ((ucInpRep[SENSOR[CMP_VREG_OFFSET].DatOffset + 1] << BYTE_SHIFT) | ucInpRep[SENSOR[CMP_VREG_OFFSET].DatOffset]);
 8002fe8:	4b69      	ldr	r3, [pc, #420]	; (8003190 <parse_update_VREG_data+0x2bc>)
 8002fea:	7cdb      	ldrb	r3, [r3, #19]
 8002fec:	3301      	adds	r3, #1
 8002fee:	683a      	ldr	r2, [r7, #0]
 8002ff0:	4413      	add	r3, r2
 8002ff2:	781b      	ldrb	r3, [r3, #0]
 8002ff4:	021b      	lsls	r3, r3, #8
 8002ff6:	4a66      	ldr	r2, [pc, #408]	; (8003190 <parse_update_VREG_data+0x2bc>)
 8002ff8:	7cd2      	ldrb	r2, [r2, #19]
 8002ffa:	4611      	mov	r1, r2
 8002ffc:	683a      	ldr	r2, [r7, #0]
 8002ffe:	440a      	add	r2, r1
 8003000:	7812      	ldrb	r2, [r2, #0]
 8003002:	4313      	orrs	r3, r2
 8003004:	461a      	mov	r2, r3
 8003006:	4b63      	ldr	r3, [pc, #396]	; (8003194 <parse_update_VREG_data+0x2c0>)
 8003008:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
            break;
 800300c:	e17a      	b.n	8003304 <parse_update_VREG_data+0x430>
        
        case ORI_VREG_OFFSET:                                       // Orientation data has been read

            _VREGS._data.ORXD = ((ucInpRep[SENSOR[ORI_VREG_OFFSET].DatOffset + 1] << BYTE_SHIFT) | ucInpRep[SENSOR[ORI_VREG_OFFSET].DatOffset]);
 800300e:	4b60      	ldr	r3, [pc, #384]	; (8003190 <parse_update_VREG_data+0x2bc>)
 8003010:	7e9b      	ldrb	r3, [r3, #26]
 8003012:	3301      	adds	r3, #1
 8003014:	683a      	ldr	r2, [r7, #0]
 8003016:	4413      	add	r3, r2
 8003018:	781b      	ldrb	r3, [r3, #0]
 800301a:	021b      	lsls	r3, r3, #8
 800301c:	4a5c      	ldr	r2, [pc, #368]	; (8003190 <parse_update_VREG_data+0x2bc>)
 800301e:	7e92      	ldrb	r2, [r2, #26]
 8003020:	4611      	mov	r1, r2
 8003022:	683a      	ldr	r2, [r7, #0]
 8003024:	440a      	add	r2, r1
 8003026:	7812      	ldrb	r2, [r2, #0]
 8003028:	4313      	orrs	r3, r2
 800302a:	461a      	mov	r2, r3
 800302c:	4b59      	ldr	r3, [pc, #356]	; (8003194 <parse_update_VREG_data+0x2c0>)
 800302e:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
            _VREGS._data.ORYD = ((ucInpRep[SENSOR[ORI_VREG_OFFSET].DatOffset + 3] << BYTE_SHIFT) | ucInpRep[SENSOR[ORI_VREG_OFFSET].DatOffset + 2]);
 8003032:	4b57      	ldr	r3, [pc, #348]	; (8003190 <parse_update_VREG_data+0x2bc>)
 8003034:	7e9b      	ldrb	r3, [r3, #26]
 8003036:	3303      	adds	r3, #3
 8003038:	683a      	ldr	r2, [r7, #0]
 800303a:	4413      	add	r3, r2
 800303c:	781b      	ldrb	r3, [r3, #0]
 800303e:	021b      	lsls	r3, r3, #8
 8003040:	4a53      	ldr	r2, [pc, #332]	; (8003190 <parse_update_VREG_data+0x2bc>)
 8003042:	7e92      	ldrb	r2, [r2, #26]
 8003044:	3202      	adds	r2, #2
 8003046:	6839      	ldr	r1, [r7, #0]
 8003048:	440a      	add	r2, r1
 800304a:	7812      	ldrb	r2, [r2, #0]
 800304c:	4313      	orrs	r3, r2
 800304e:	461a      	mov	r2, r3
 8003050:	4b50      	ldr	r3, [pc, #320]	; (8003194 <parse_update_VREG_data+0x2c0>)
 8003052:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
            _VREGS._data.ORZD = ((ucInpRep[SENSOR[ORI_VREG_OFFSET].DatOffset + 5] << BYTE_SHIFT) | ucInpRep[SENSOR[ORI_VREG_OFFSET].DatOffset + 4]);
 8003056:	4b4e      	ldr	r3, [pc, #312]	; (8003190 <parse_update_VREG_data+0x2bc>)
 8003058:	7e9b      	ldrb	r3, [r3, #26]
 800305a:	3305      	adds	r3, #5
 800305c:	683a      	ldr	r2, [r7, #0]
 800305e:	4413      	add	r3, r2
 8003060:	781b      	ldrb	r3, [r3, #0]
 8003062:	021b      	lsls	r3, r3, #8
 8003064:	4a4a      	ldr	r2, [pc, #296]	; (8003190 <parse_update_VREG_data+0x2bc>)
 8003066:	7e92      	ldrb	r2, [r2, #26]
 8003068:	3204      	adds	r2, #4
 800306a:	6839      	ldr	r1, [r7, #0]
 800306c:	440a      	add	r2, r1
 800306e:	7812      	ldrb	r2, [r2, #0]
 8003070:	4313      	orrs	r3, r2
 8003072:	461a      	mov	r2, r3
 8003074:	4b47      	ldr	r3, [pc, #284]	; (8003194 <parse_update_VREG_data+0x2c0>)
 8003076:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
            _VREGS._data.ORWD = ((ucInpRep[SENSOR[ORI_VREG_OFFSET].DatOffset + 7] << BYTE_SHIFT) | ucInpRep[SENSOR[ORI_VREG_OFFSET].DatOffset + 6]);
 800307a:	4b45      	ldr	r3, [pc, #276]	; (8003190 <parse_update_VREG_data+0x2bc>)
 800307c:	7e9b      	ldrb	r3, [r3, #26]
 800307e:	3307      	adds	r3, #7
 8003080:	683a      	ldr	r2, [r7, #0]
 8003082:	4413      	add	r3, r2
 8003084:	781b      	ldrb	r3, [r3, #0]
 8003086:	021b      	lsls	r3, r3, #8
 8003088:	4a41      	ldr	r2, [pc, #260]	; (8003190 <parse_update_VREG_data+0x2bc>)
 800308a:	7e92      	ldrb	r2, [r2, #26]
 800308c:	3206      	adds	r2, #6
 800308e:	6839      	ldr	r1, [r7, #0]
 8003090:	440a      	add	r2, r1
 8003092:	7812      	ldrb	r2, [r2, #0]
 8003094:	4313      	orrs	r3, r2
 8003096:	461a      	mov	r2, r3
 8003098:	4b3e      	ldr	r3, [pc, #248]	; (8003194 <parse_update_VREG_data+0x2c0>)
 800309a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
            break;
 800309e:	e131      	b.n	8003304 <parse_update_VREG_data+0x430>
       
        case INCL_VREG_OFFSET:                                      // Inclinometer data has been read

            _VREGS._data.INXD = ((ucInpRep[SENSOR[INCL_VREG_OFFSET].DatOffset + 1] << BYTE_SHIFT) | ucInpRep[SENSOR[INCL_VREG_OFFSET].DatOffset]);
 80030a0:	4b3b      	ldr	r3, [pc, #236]	; (8003190 <parse_update_VREG_data+0x2bc>)
 80030a2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80030a6:	3301      	adds	r3, #1
 80030a8:	683a      	ldr	r2, [r7, #0]
 80030aa:	4413      	add	r3, r2
 80030ac:	781b      	ldrb	r3, [r3, #0]
 80030ae:	021b      	lsls	r3, r3, #8
 80030b0:	4a37      	ldr	r2, [pc, #220]	; (8003190 <parse_update_VREG_data+0x2bc>)
 80030b2:	f892 2021 	ldrb.w	r2, [r2, #33]	; 0x21
 80030b6:	4611      	mov	r1, r2
 80030b8:	683a      	ldr	r2, [r7, #0]
 80030ba:	440a      	add	r2, r1
 80030bc:	7812      	ldrb	r2, [r2, #0]
 80030be:	4313      	orrs	r3, r2
 80030c0:	461a      	mov	r2, r3
 80030c2:	4b34      	ldr	r3, [pc, #208]	; (8003194 <parse_update_VREG_data+0x2c0>)
 80030c4:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
            _VREGS._data.INYD = ((ucInpRep[SENSOR[INCL_VREG_OFFSET].DatOffset + 3] << BYTE_SHIFT) | ucInpRep[SENSOR[INCL_VREG_OFFSET].DatOffset + 2]);
 80030c8:	4b31      	ldr	r3, [pc, #196]	; (8003190 <parse_update_VREG_data+0x2bc>)
 80030ca:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80030ce:	3303      	adds	r3, #3
 80030d0:	683a      	ldr	r2, [r7, #0]
 80030d2:	4413      	add	r3, r2
 80030d4:	781b      	ldrb	r3, [r3, #0]
 80030d6:	021b      	lsls	r3, r3, #8
 80030d8:	4a2d      	ldr	r2, [pc, #180]	; (8003190 <parse_update_VREG_data+0x2bc>)
 80030da:	f892 2021 	ldrb.w	r2, [r2, #33]	; 0x21
 80030de:	3202      	adds	r2, #2
 80030e0:	6839      	ldr	r1, [r7, #0]
 80030e2:	440a      	add	r2, r1
 80030e4:	7812      	ldrb	r2, [r2, #0]
 80030e6:	4313      	orrs	r3, r2
 80030e8:	461a      	mov	r2, r3
 80030ea:	4b2a      	ldr	r3, [pc, #168]	; (8003194 <parse_update_VREG_data+0x2c0>)
 80030ec:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
            _VREGS._data.INZD = ((ucInpRep[SENSOR[INCL_VREG_OFFSET].DatOffset + 5] << BYTE_SHIFT) | ucInpRep[SENSOR[INCL_VREG_OFFSET].DatOffset + 4]);
 80030f0:	4b27      	ldr	r3, [pc, #156]	; (8003190 <parse_update_VREG_data+0x2bc>)
 80030f2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80030f6:	3305      	adds	r3, #5
 80030f8:	683a      	ldr	r2, [r7, #0]
 80030fa:	4413      	add	r3, r2
 80030fc:	781b      	ldrb	r3, [r3, #0]
 80030fe:	021b      	lsls	r3, r3, #8
 8003100:	4a23      	ldr	r2, [pc, #140]	; (8003190 <parse_update_VREG_data+0x2bc>)
 8003102:	f892 2021 	ldrb.w	r2, [r2, #33]	; 0x21
 8003106:	3204      	adds	r2, #4
 8003108:	6839      	ldr	r1, [r7, #0]
 800310a:	440a      	add	r2, r1
 800310c:	7812      	ldrb	r2, [r2, #0]
 800310e:	4313      	orrs	r3, r2
 8003110:	461a      	mov	r2, r3
 8003112:	4b20      	ldr	r3, [pc, #128]	; (8003194 <parse_update_VREG_data+0x2c0>)
 8003114:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
            break;
 8003118:	e0f4      	b.n	8003304 <parse_update_VREG_data+0x430>

        case RAW_ACC_VREG_OFFSET:                                   // Raw data has been read
            
            _VREGS._data.RACXD = ((ucInpRep[SENSOR[RAW_VREG_OFFSET].DatOffset + 1] << BYTE_SHIFT) | ucInpRep[SENSOR[RAW_VREG_OFFSET].DatOffset]);
 800311a:	4b1d      	ldr	r3, [pc, #116]	; (8003190 <parse_update_VREG_data+0x2bc>)
 800311c:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8003120:	3301      	adds	r3, #1
 8003122:	683a      	ldr	r2, [r7, #0]
 8003124:	4413      	add	r3, r2
 8003126:	781b      	ldrb	r3, [r3, #0]
 8003128:	021b      	lsls	r3, r3, #8
 800312a:	4a19      	ldr	r2, [pc, #100]	; (8003190 <parse_update_VREG_data+0x2bc>)
 800312c:	f892 2036 	ldrb.w	r2, [r2, #54]	; 0x36
 8003130:	4611      	mov	r1, r2
 8003132:	683a      	ldr	r2, [r7, #0]
 8003134:	440a      	add	r2, r1
 8003136:	7812      	ldrb	r2, [r2, #0]
 8003138:	4313      	orrs	r3, r2
 800313a:	461a      	mov	r2, r3
 800313c:	4b15      	ldr	r3, [pc, #84]	; (8003194 <parse_update_VREG_data+0x2c0>)
 800313e:	665a      	str	r2, [r3, #100]	; 0x64
            _VREGS._data.RACYD = ((ucInpRep[SENSOR[RAW_VREG_OFFSET].DatOffset + 3] << BYTE_SHIFT) | ucInpRep[SENSOR[RAW_VREG_OFFSET].DatOffset + 2]);
 8003140:	4b13      	ldr	r3, [pc, #76]	; (8003190 <parse_update_VREG_data+0x2bc>)
 8003142:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8003146:	3303      	adds	r3, #3
 8003148:	683a      	ldr	r2, [r7, #0]
 800314a:	4413      	add	r3, r2
 800314c:	781b      	ldrb	r3, [r3, #0]
 800314e:	021b      	lsls	r3, r3, #8
 8003150:	4a0f      	ldr	r2, [pc, #60]	; (8003190 <parse_update_VREG_data+0x2bc>)
 8003152:	f892 2036 	ldrb.w	r2, [r2, #54]	; 0x36
 8003156:	3202      	adds	r2, #2
 8003158:	6839      	ldr	r1, [r7, #0]
 800315a:	440a      	add	r2, r1
 800315c:	7812      	ldrb	r2, [r2, #0]
 800315e:	4313      	orrs	r3, r2
 8003160:	461a      	mov	r2, r3
 8003162:	4b0c      	ldr	r3, [pc, #48]	; (8003194 <parse_update_VREG_data+0x2c0>)
 8003164:	669a      	str	r2, [r3, #104]	; 0x68
            _VREGS._data.RACZD = ((ucInpRep[SENSOR[RAW_VREG_OFFSET].DatOffset + 5] << BYTE_SHIFT) | ucInpRep[SENSOR[RAW_VREG_OFFSET].DatOffset + 4]);
 8003166:	4b0a      	ldr	r3, [pc, #40]	; (8003190 <parse_update_VREG_data+0x2bc>)
 8003168:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800316c:	3305      	adds	r3, #5
 800316e:	683a      	ldr	r2, [r7, #0]
 8003170:	4413      	add	r3, r2
 8003172:	781b      	ldrb	r3, [r3, #0]
 8003174:	021b      	lsls	r3, r3, #8
 8003176:	4a06      	ldr	r2, [pc, #24]	; (8003190 <parse_update_VREG_data+0x2bc>)
 8003178:	f892 2036 	ldrb.w	r2, [r2, #54]	; 0x36
 800317c:	3204      	adds	r2, #4
 800317e:	6839      	ldr	r1, [r7, #0]
 8003180:	440a      	add	r2, r1
 8003182:	7812      	ldrb	r2, [r2, #0]
 8003184:	4313      	orrs	r3, r2
 8003186:	461a      	mov	r2, r3
 8003188:	4b02      	ldr	r3, [pc, #8]	; (8003194 <parse_update_VREG_data+0x2c0>)
 800318a:	66da      	str	r2, [r3, #108]	; 0x6c
            break;
 800318c:	e0ba      	b.n	8003304 <parse_update_VREG_data+0x430>
 800318e:	bf00      	nop
 8003190:	20000118 	.word	0x20000118
 8003194:	2000110c 	.word	0x2000110c
       
        case RAW_MAG_VREG_OFFSET:                                   // Raw MAG data has been read
            
            _VREGS._data.MGFXD = ((ucInpRep[SENSOR[RAW_MAG_VREG_OFFSET].DatOffset + 1] << BYTE_SHIFT) | ucInpRep[SENSOR[RAW_MAG_VREG_OFFSET].DatOffset]);
 8003198:	4b5d      	ldr	r3, [pc, #372]	; (8003310 <parse_update_VREG_data+0x43c>)
 800319a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800319e:	3301      	adds	r3, #1
 80031a0:	683a      	ldr	r2, [r7, #0]
 80031a2:	4413      	add	r3, r2
 80031a4:	781b      	ldrb	r3, [r3, #0]
 80031a6:	021b      	lsls	r3, r3, #8
 80031a8:	4a59      	ldr	r2, [pc, #356]	; (8003310 <parse_update_VREG_data+0x43c>)
 80031aa:	f892 203d 	ldrb.w	r2, [r2, #61]	; 0x3d
 80031ae:	4611      	mov	r1, r2
 80031b0:	683a      	ldr	r2, [r7, #0]
 80031b2:	440a      	add	r2, r1
 80031b4:	7812      	ldrb	r2, [r2, #0]
 80031b6:	4313      	orrs	r3, r2
 80031b8:	461a      	mov	r2, r3
 80031ba:	4b56      	ldr	r3, [pc, #344]	; (8003314 <parse_update_VREG_data+0x440>)
 80031bc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
            _VREGS._data.MGFYD = ((ucInpRep[SENSOR[RAW_MAG_VREG_OFFSET].DatOffset + 3] << BYTE_SHIFT) | ucInpRep[SENSOR[RAW_MAG_VREG_OFFSET].DatOffset + 2]);
 80031c0:	4b53      	ldr	r3, [pc, #332]	; (8003310 <parse_update_VREG_data+0x43c>)
 80031c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031c6:	3303      	adds	r3, #3
 80031c8:	683a      	ldr	r2, [r7, #0]
 80031ca:	4413      	add	r3, r2
 80031cc:	781b      	ldrb	r3, [r3, #0]
 80031ce:	021b      	lsls	r3, r3, #8
 80031d0:	4a4f      	ldr	r2, [pc, #316]	; (8003310 <parse_update_VREG_data+0x43c>)
 80031d2:	f892 203d 	ldrb.w	r2, [r2, #61]	; 0x3d
 80031d6:	3202      	adds	r2, #2
 80031d8:	6839      	ldr	r1, [r7, #0]
 80031da:	440a      	add	r2, r1
 80031dc:	7812      	ldrb	r2, [r2, #0]
 80031de:	4313      	orrs	r3, r2
 80031e0:	461a      	mov	r2, r3
 80031e2:	4b4c      	ldr	r3, [pc, #304]	; (8003314 <parse_update_VREG_data+0x440>)
 80031e4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
            _VREGS._data.MGFZD = ((ucInpRep[SENSOR[RAW_MAG_VREG_OFFSET].DatOffset + 5] << BYTE_SHIFT) | ucInpRep[SENSOR[RAW_MAG_VREG_OFFSET].DatOffset + 4]);
 80031e8:	4b49      	ldr	r3, [pc, #292]	; (8003310 <parse_update_VREG_data+0x43c>)
 80031ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031ee:	3305      	adds	r3, #5
 80031f0:	683a      	ldr	r2, [r7, #0]
 80031f2:	4413      	add	r3, r2
 80031f4:	781b      	ldrb	r3, [r3, #0]
 80031f6:	021b      	lsls	r3, r3, #8
 80031f8:	4a45      	ldr	r2, [pc, #276]	; (8003310 <parse_update_VREG_data+0x43c>)
 80031fa:	f892 203d 	ldrb.w	r2, [r2, #61]	; 0x3d
 80031fe:	3204      	adds	r2, #4
 8003200:	6839      	ldr	r1, [r7, #0]
 8003202:	440a      	add	r2, r1
 8003204:	7812      	ldrb	r2, [r2, #0]
 8003206:	4313      	orrs	r3, r2
 8003208:	461a      	mov	r2, r3
 800320a:	4b42      	ldr	r3, [pc, #264]	; (8003314 <parse_update_VREG_data+0x440>)
 800320c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
            _VREGS._data.RMGXD = ((ucInpRep[SENSOR[RAW_MAG_VREG_OFFSET].DatOffset + 7] << BYTE_SHIFT) | ucInpRep[SENSOR[RAW_MAG_VREG_OFFSET].DatOffset + 6]);
 8003210:	4b3f      	ldr	r3, [pc, #252]	; (8003310 <parse_update_VREG_data+0x43c>)
 8003212:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003216:	3307      	adds	r3, #7
 8003218:	683a      	ldr	r2, [r7, #0]
 800321a:	4413      	add	r3, r2
 800321c:	781b      	ldrb	r3, [r3, #0]
 800321e:	021b      	lsls	r3, r3, #8
 8003220:	4a3b      	ldr	r2, [pc, #236]	; (8003310 <parse_update_VREG_data+0x43c>)
 8003222:	f892 203d 	ldrb.w	r2, [r2, #61]	; 0x3d
 8003226:	3206      	adds	r2, #6
 8003228:	6839      	ldr	r1, [r7, #0]
 800322a:	440a      	add	r2, r1
 800322c:	7812      	ldrb	r2, [r2, #0]
 800322e:	4313      	orrs	r3, r2
 8003230:	461a      	mov	r2, r3
 8003232:	4b38      	ldr	r3, [pc, #224]	; (8003314 <parse_update_VREG_data+0x440>)
 8003234:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
            _VREGS._data.RMGYD = ((ucInpRep[SENSOR[RAW_MAG_VREG_OFFSET].DatOffset + 9] << BYTE_SHIFT) | ucInpRep[SENSOR[RAW_MAG_VREG_OFFSET].DatOffset + 8]);
 8003238:	4b35      	ldr	r3, [pc, #212]	; (8003310 <parse_update_VREG_data+0x43c>)
 800323a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800323e:	3309      	adds	r3, #9
 8003240:	683a      	ldr	r2, [r7, #0]
 8003242:	4413      	add	r3, r2
 8003244:	781b      	ldrb	r3, [r3, #0]
 8003246:	021b      	lsls	r3, r3, #8
 8003248:	4a31      	ldr	r2, [pc, #196]	; (8003310 <parse_update_VREG_data+0x43c>)
 800324a:	f892 203d 	ldrb.w	r2, [r2, #61]	; 0x3d
 800324e:	3208      	adds	r2, #8
 8003250:	6839      	ldr	r1, [r7, #0]
 8003252:	440a      	add	r2, r1
 8003254:	7812      	ldrb	r2, [r2, #0]
 8003256:	4313      	orrs	r3, r2
 8003258:	461a      	mov	r2, r3
 800325a:	4b2e      	ldr	r3, [pc, #184]	; (8003314 <parse_update_VREG_data+0x440>)
 800325c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
            _VREGS._data.RMGZD = ((ucInpRep[SENSOR[RAW_MAG_VREG_OFFSET].DatOffset + 11] << BYTE_SHIFT) | ucInpRep[SENSOR[RAW_MAG_VREG_OFFSET].DatOffset + 10]);
 8003260:	4b2b      	ldr	r3, [pc, #172]	; (8003310 <parse_update_VREG_data+0x43c>)
 8003262:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003266:	330b      	adds	r3, #11
 8003268:	683a      	ldr	r2, [r7, #0]
 800326a:	4413      	add	r3, r2
 800326c:	781b      	ldrb	r3, [r3, #0]
 800326e:	021b      	lsls	r3, r3, #8
 8003270:	4a27      	ldr	r2, [pc, #156]	; (8003310 <parse_update_VREG_data+0x43c>)
 8003272:	f892 203d 	ldrb.w	r2, [r2, #61]	; 0x3d
 8003276:	320a      	adds	r2, #10
 8003278:	6839      	ldr	r1, [r7, #0]
 800327a:	440a      	add	r2, r1
 800327c:	7812      	ldrb	r2, [r2, #0]
 800327e:	4313      	orrs	r3, r2
 8003280:	461a      	mov	r2, r3
 8003282:	4b24      	ldr	r3, [pc, #144]	; (8003314 <parse_update_VREG_data+0x440>)
 8003284:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
            break;
 8003288:	e03c      	b.n	8003304 <parse_update_VREG_data+0x430>
        
        case RAW_GYR_VREG_OFFSET:                                   // Raw GYRO data has been read
            
            _VREGS._data.RGYXD = ((ucInpRep[SENSOR[RAW_GYR_VREG_OFFSET].DatOffset + 1] << BYTE_SHIFT) | ucInpRep[SENSOR[RAW_GYR_VREG_OFFSET].DatOffset]);
 800328a:	4b21      	ldr	r3, [pc, #132]	; (8003310 <parse_update_VREG_data+0x43c>)
 800328c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003290:	3301      	adds	r3, #1
 8003292:	683a      	ldr	r2, [r7, #0]
 8003294:	4413      	add	r3, r2
 8003296:	781b      	ldrb	r3, [r3, #0]
 8003298:	021b      	lsls	r3, r3, #8
 800329a:	4a1d      	ldr	r2, [pc, #116]	; (8003310 <parse_update_VREG_data+0x43c>)
 800329c:	f892 2044 	ldrb.w	r2, [r2, #68]	; 0x44
 80032a0:	4611      	mov	r1, r2
 80032a2:	683a      	ldr	r2, [r7, #0]
 80032a4:	440a      	add	r2, r1
 80032a6:	7812      	ldrb	r2, [r2, #0]
 80032a8:	4313      	orrs	r3, r2
 80032aa:	461a      	mov	r2, r3
 80032ac:	4b19      	ldr	r3, [pc, #100]	; (8003314 <parse_update_VREG_data+0x440>)
 80032ae:	67da      	str	r2, [r3, #124]	; 0x7c
            _VREGS._data.RGYYD = ((ucInpRep[SENSOR[RAW_GYR_VREG_OFFSET].DatOffset + 3] << BYTE_SHIFT) | ucInpRep[SENSOR[RAW_GYR_VREG_OFFSET].DatOffset + 2]);
 80032b0:	4b17      	ldr	r3, [pc, #92]	; (8003310 <parse_update_VREG_data+0x43c>)
 80032b2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80032b6:	3303      	adds	r3, #3
 80032b8:	683a      	ldr	r2, [r7, #0]
 80032ba:	4413      	add	r3, r2
 80032bc:	781b      	ldrb	r3, [r3, #0]
 80032be:	021b      	lsls	r3, r3, #8
 80032c0:	4a13      	ldr	r2, [pc, #76]	; (8003310 <parse_update_VREG_data+0x43c>)
 80032c2:	f892 2044 	ldrb.w	r2, [r2, #68]	; 0x44
 80032c6:	3202      	adds	r2, #2
 80032c8:	6839      	ldr	r1, [r7, #0]
 80032ca:	440a      	add	r2, r1
 80032cc:	7812      	ldrb	r2, [r2, #0]
 80032ce:	4313      	orrs	r3, r2
 80032d0:	461a      	mov	r2, r3
 80032d2:	4b10      	ldr	r3, [pc, #64]	; (8003314 <parse_update_VREG_data+0x440>)
 80032d4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
            _VREGS._data.RGYZD = ((ucInpRep[SENSOR[RAW_GYR_VREG_OFFSET].DatOffset + 5] << BYTE_SHIFT) | ucInpRep[SENSOR[RAW_GYR_VREG_OFFSET].DatOffset + 4]);
 80032d8:	4b0d      	ldr	r3, [pc, #52]	; (8003310 <parse_update_VREG_data+0x43c>)
 80032da:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80032de:	3305      	adds	r3, #5
 80032e0:	683a      	ldr	r2, [r7, #0]
 80032e2:	4413      	add	r3, r2
 80032e4:	781b      	ldrb	r3, [r3, #0]
 80032e6:	021b      	lsls	r3, r3, #8
 80032e8:	4a09      	ldr	r2, [pc, #36]	; (8003310 <parse_update_VREG_data+0x43c>)
 80032ea:	f892 2044 	ldrb.w	r2, [r2, #68]	; 0x44
 80032ee:	3204      	adds	r2, #4
 80032f0:	6839      	ldr	r1, [r7, #0]
 80032f2:	440a      	add	r2, r1
 80032f4:	7812      	ldrb	r2, [r2, #0]
 80032f6:	4313      	orrs	r3, r2
 80032f8:	461a      	mov	r2, r3
 80032fa:	4b06      	ldr	r3, [pc, #24]	; (8003314 <parse_update_VREG_data+0x440>)
 80032fc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
            break;
 8003300:	e000      	b.n	8003304 <parse_update_VREG_data+0x430>

        default:
            break;
 8003302:	bf00      	nop
    }
    return;
 8003304:	bf00      	nop
}
 8003306:	370c      	adds	r7, #12
 8003308:	46bd      	mov	sp, r7
 800330a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800330e:	4770      	bx	lr
 8003310:	20000118 	.word	0x20000118
 8003314:	2000110c 	.word	0x2000110c

08003318 <HOST_SF_LIB_VREG_read>:
* @param ucRegOffset VREG register of interest
* @param usData Ptr for 16 bit value
* @return completion status 0=SUCCESS, failcodes: 0x31=HID_INT_FAIL, 0x33=VREG_OFFSET_ERR,  
*/ 
UINT8 HOST_SF_LIB_VREG_read(UINT8 ucRegOffset, UINT16 *usData)
{
 8003318:	b580      	push	{r7, lr}
 800331a:	b090      	sub	sp, #64	; 0x40
 800331c:	af02      	add	r7, sp, #8
 800331e:	4603      	mov	r3, r0
 8003320:	6039      	str	r1, [r7, #0]
 8003322:	71fb      	strb	r3, [r7, #7]
    UINT8 ucRet = FALSE;
 8003324:	2300      	movs	r3, #0
 8003326:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
    UINT8 ucRx_data[BUF_40];
    UINT8 ucSensorNum;
    UINT16 *usRegPtr;                                               // Pointer to individual register

    if (ucRegOffset > VREG_MAX_OFFSET)                              //make sure this is within the VREG register set 
 800332a:	79fb      	ldrb	r3, [r7, #7]
 800332c:	2b3f      	cmp	r3, #63	; 0x3f
 800332e:	d901      	bls.n	8003334 <HOST_SF_LIB_VREG_read+0x1c>
        return VREG_OFFSET_ERR;
 8003330:	2333      	movs	r3, #51	; 0x33
 8003332:	e050      	b.n	80033d6 <HOST_SF_LIB_VREG_read+0xbe>

    usRegPtr = (UINT16 *)&_VREGS.SHC;                                // Set the pointer to SHC (VREG00 register)
 8003334:	4b2a      	ldr	r3, [pc, #168]	; (80033e0 <HOST_SF_LIB_VREG_read+0xc8>)
 8003336:	633b      	str	r3, [r7, #48]	; 0x30

    if (EC_DATA_AVAIL)                                              //SSC7150 sensor has data available for us to read
 8003338:	4b2a      	ldr	r3, [pc, #168]	; (80033e4 <HOST_SF_LIB_VREG_read+0xcc>)
 800333a:	781b      	ldrb	r3, [r3, #0]
 800333c:	b2db      	uxtb	r3, r3
 800333e:	2b00      	cmp	r3, #0
 8003340:	d03f      	beq.n	80033c2 <HOST_SF_LIB_VREG_read+0xaa>
    {       
        ucRet = i2c_cmd_WrRd (READ,                                  // Read the data from the SSC7150
 8003342:	2301      	movs	r3, #1
 8003344:	9301      	str	r3, [sp, #4]
 8003346:	f107 0308 	add.w	r3, r7, #8
 800334a:	9300      	str	r3, [sp, #0]
 800334c:	2303      	movs	r3, #3
 800334e:	2200      	movs	r2, #0
 8003350:	2100      	movs	r1, #0
 8003352:	2002      	movs	r0, #2
 8003354:	f7fd ff56 	bl	8001204 <i2c_cmd_WrRd>
 8003358:	4603      	mov	r3, r0
 800335a:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
                            0,                                      //num of cmd bytes
                            0,                                      //cmd buf (ignored)
                            BYTE_ADJ_VAL,                           //num of bytes to read
                            ucRx_data,                              //recv buf 
                            TRUE);                                  //actual # of bytes SSC7150 returns is in 1st two bytes of read packet, this flag(=TRUE) means "use the 1st two bytes as the actual read packet length"
        if (ucRet) 
 800335e:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8003362:	2b00      	cmp	r3, #0
 8003364:	d001      	beq.n	800336a <HOST_SF_LIB_VREG_read+0x52>
            return HID_INT_FAIL;
 8003366:	2331      	movs	r3, #49	; 0x31
 8003368:	e035      	b.n	80033d6 <HOST_SF_LIB_VREG_read+0xbe>

        for (ucSensorNum = 0; ucSensorNum < NUM_SENS; ucSensorNum++) //go through the sensor list to see where to put the received data 
 800336a:	2300      	movs	r3, #0
 800336c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8003370:	e023      	b.n	80033ba <HOST_SF_LIB_VREG_read+0xa2>
        {              
            if (ucRx_data[2] == SENSOR[ucSensorNum].id)          //1st two bytes of read data packet hold size of packet, then data begins at byte 2
 8003372:	7ab9      	ldrb	r1, [r7, #10]
 8003374:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8003378:	481b      	ldr	r0, [pc, #108]	; (80033e8 <HOST_SF_LIB_VREG_read+0xd0>)
 800337a:	4613      	mov	r3, r2
 800337c:	00db      	lsls	r3, r3, #3
 800337e:	1a9b      	subs	r3, r3, r2
 8003380:	4403      	add	r3, r0
 8003382:	781b      	ldrb	r3, [r3, #0]
 8003384:	4299      	cmp	r1, r3
 8003386:	d113      	bne.n	80033b0 <HOST_SF_LIB_VREG_read+0x98>
            {
                if (*usRegPtr & (1 << (ucSensorNum + VREG_SHC_ACC_EN_VAL))) // If the incoming data belongs to an enabled sensor (in SHC (VREGS00))
 8003388:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8003390:	3204      	adds	r2, #4
 8003392:	2101      	movs	r1, #1
 8003394:	fa01 f202 	lsl.w	r2, r1, r2
 8003398:	4013      	ands	r3, r2
 800339a:	2b00      	cmp	r3, #0
 800339c:	d008      	beq.n	80033b0 <HOST_SF_LIB_VREG_read+0x98>
                {
                    parse_update_VREG_data(ucSensorNum, ucRx_data); //store data in appropriate VREG data registers
 800339e:	f107 0208 	add.w	r2, r7, #8
 80033a2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80033a6:	4611      	mov	r1, r2
 80033a8:	4618      	mov	r0, r3
 80033aa:	f7ff fd93 	bl	8002ed4 <parse_update_VREG_data>
                    break;                                          //found correct enabled sensor, no reason to look further
 80033ae:	e008      	b.n	80033c2 <HOST_SF_LIB_VREG_read+0xaa>
        for (ucSensorNum = 0; ucSensorNum < NUM_SENS; ucSensorNum++) //go through the sensor list to see where to put the received data 
 80033b0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80033b4:	3301      	adds	r3, #1
 80033b6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80033ba:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80033be:	2b0b      	cmp	r3, #11
 80033c0:	d9d7      	bls.n	8003372 <HOST_SF_LIB_VREG_read+0x5a>
                }
            }            
        }   
    }

    usRegPtr += (UINT16) ucRegOffset;                               //point to VREG specified by input parameter 'ucRegOffset'
 80033c2:	79fb      	ldrb	r3, [r7, #7]
 80033c4:	009b      	lsls	r3, r3, #2
 80033c6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80033c8:	4413      	add	r3, r2
 80033ca:	633b      	str	r3, [r7, #48]	; 0x30
    *usData = *usRegPtr;                                            //return the register contents specified by the read command
 80033cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033ce:	681a      	ldr	r2, [r3, #0]
 80033d0:	683b      	ldr	r3, [r7, #0]
 80033d2:	601a      	str	r2, [r3, #0]
    return SUCCESS;
 80033d4:	2300      	movs	r3, #0
}
 80033d6:	4618      	mov	r0, r3
 80033d8:	3738      	adds	r7, #56	; 0x38
 80033da:	46bd      	mov	sp, r7
 80033dc:	bd80      	pop	{r7, pc}
 80033de:	bf00      	nop
 80033e0:	2000110c 	.word	0x2000110c
 80033e4:	200000f1 	.word	0x200000f1
 80033e8:	20000118 	.word	0x20000118

080033ec <HOST_SF_LIB_VREG_write>:
* @param ucRegOffset VREG register of interest
* @param usData Data to be written to device
* @return completion status 0=SUCCESS, failcodes: 0x32=VREG_ACCESS_ERR, 0x33=VREG_OFFSET_ERR, 0x31=HID_INT_FAIL, 0x17=SET_FEAT_FAIL, 0x18=RESET_FAIL, 0x1E=WAKE_CMD_FAIL, 0x1B=SLEEP_CMD_FAIL 
*/ 
UINT8 HOST_SF_LIB_VREG_write(UINT8 ucRegOffset, UINT16 usData)
{
 80033ec:	b580      	push	{r7, lr}
 80033ee:	b094      	sub	sp, #80	; 0x50
 80033f0:	af02      	add	r7, sp, #8
 80033f2:	4603      	mov	r3, r0
 80033f4:	6039      	str	r1, [r7, #0]
 80033f6:	71fb      	strb	r3, [r7, #7]
    UINT8 ucRet = FALSE;
 80033f8:	2300      	movs	r3, #0
 80033fa:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
    UINT16 *usRegPtr, *usStat_ptr, *usSHC_ptr;                      // Pointer to individual register
    UINT16 usMask;
    UINT8 ucRx_data[BUF_40];                                        // local buffer for i2c comm
    UINT8 ucId = 0xFF;
 80033fe:	23ff      	movs	r3, #255	; 0xff
 8003400:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
    UINT8 ucBitOffset, ucAdjustedPtr, ucSensorNum, usTmpStatptr, ucTmpStatVal, ucTmpPtr;


    if (ucRegOffset > VREG_MAX_OFFSET)                              //make sure this is within the VREG register set 
 8003404:	79fb      	ldrb	r3, [r7, #7]
 8003406:	2b3f      	cmp	r3, #63	; 0x3f
 8003408:	d901      	bls.n	800340e <HOST_SF_LIB_VREG_write+0x22>
        return VREG_OFFSET_ERR;
 800340a:	2333      	movs	r3, #51	; 0x33
 800340c:	e3a9      	b.n	8003b62 <HOST_SF_LIB_VREG_write+0x776>

    if ( (ucRegOffset == VREG_SL || (ucRegOffset >= VREG_ACXD && ucRegOffset <= VREG_EXPCSS3) ) ) // If the requested register is READ ONLY, return an error
 800340e:	79fb      	ldrb	r3, [r7, #7]
 8003410:	2b01      	cmp	r3, #1
 8003412:	d005      	beq.n	8003420 <HOST_SF_LIB_VREG_write+0x34>
 8003414:	79fb      	ldrb	r3, [r7, #7]
 8003416:	2b15      	cmp	r3, #21
 8003418:	d904      	bls.n	8003424 <HOST_SF_LIB_VREG_write+0x38>
 800341a:	79fb      	ldrb	r3, [r7, #7]
 800341c:	2b3e      	cmp	r3, #62	; 0x3e
 800341e:	d801      	bhi.n	8003424 <HOST_SF_LIB_VREG_write+0x38>
         return VREG_ACCESS_ERR;
 8003420:	2332      	movs	r3, #50	; 0x32
 8003422:	e39e      	b.n	8003b62 <HOST_SF_LIB_VREG_write+0x776>

    usSHC_ptr = (UINT16 *)&_VREGS.SHC;                               // Set pointers to SHC (VREG00 register)
 8003424:	4ba9      	ldr	r3, [pc, #676]	; (80036cc <HOST_SF_LIB_VREG_write+0x2e0>)
 8003426:	63bb      	str	r3, [r7, #56]	; 0x38
  
    usPREV_SHC_STATE = *usSHC_ptr;                                  //save previous state of SHC VREG contents for comparison 
 8003428:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	4aa8      	ldr	r2, [pc, #672]	; (80036d0 <HOST_SF_LIB_VREG_write+0x2e4>)
 800342e:	6013      	str	r3, [r2, #0]

    usRegPtr = usSHC_ptr + (UINT16)ucRegOffset;                     //point to VREG specified by input parameter 'ucRegOffset'
 8003430:	79fb      	ldrb	r3, [r7, #7]
 8003432:	009b      	lsls	r3, r3, #2
 8003434:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003436:	4413      	add	r3, r2
 8003438:	637b      	str	r3, [r7, #52]	; 0x34

    if (_VREGS.SHC.SHstart)                                          // this bit set during VREG_init and after RESET (no user access to this bit)
 800343a:	4ba4      	ldr	r3, [pc, #656]	; (80036cc <HOST_SF_LIB_VREG_write+0x2e0>)
 800343c:	781b      	ldrb	r3, [r3, #0]
 800343e:	f003 0304 	and.w	r3, r3, #4
 8003442:	b2db      	uxtb	r3, r3
 8003444:	2b00      	cmp	r3, #0
 8003446:	f000 8346 	beq.w	8003ad6 <HOST_SF_LIB_VREG_write+0x6ea>
    { 
        SET_PARAMS.ucPowerState = FULL_POWER;                       //initialize parameters for SetFeature call (NOTE: set to LOW_POWER when disabling sensor)
 800344a:	4ba2      	ldr	r3, [pc, #648]	; (80036d4 <HOST_SF_LIB_VREG_write+0x2e8>)
 800344c:	2202      	movs	r2, #2
 800344e:	705a      	strb	r2, [r3, #1]
        SET_PARAMS.bSensitivityValid = FALSE;
 8003450:	4ba0      	ldr	r3, [pc, #640]	; (80036d4 <HOST_SF_LIB_VREG_write+0x2e8>)
 8003452:	2200      	movs	r2, #0
 8003454:	721a      	strb	r2, [r3, #8]
        SET_PARAMS.bDataRateValid = FALSE;
 8003456:	4b9f      	ldr	r3, [pc, #636]	; (80036d4 <HOST_SF_LIB_VREG_write+0x2e8>)
 8003458:	2200      	movs	r2, #0
 800345a:	741a      	strb	r2, [r3, #16]
        
        if (ucRegOffset == VREG_SHC)                                // If the command will be written to the SHC register
 800345c:	79fb      	ldrb	r3, [r7, #7]
 800345e:	2b00      	cmp	r3, #0
 8003460:	f040 819b 	bne.w	800379a <HOST_SF_LIB_VREG_write+0x3ae>
        {
            usStat_ptr = (UINT16 *)&_VREGS.stat;                     // Set the status register pointer to the first status register
 8003464:	4b9c      	ldr	r3, [pc, #624]	; (80036d8 <HOST_SF_LIB_VREG_write+0x2ec>)
 8003466:	647b      	str	r3, [r7, #68]	; 0x44

       /*****************RESET COMMAND********************/
            if (usData & VREG_SHC_RST_BIT)                          // Reset bit has been set
 8003468:	683b      	ldr	r3, [r7, #0]
 800346a:	f003 0308 	and.w	r3, r3, #8
 800346e:	2b00      	cmp	r3, #0
 8003470:	d02a      	beq.n	80034c8 <HOST_SF_LIB_VREG_write+0xdc>
            {
                if (!hid_i2c_cmd_process(0, RESET_DEV_CMD, ARB_ID)) // Issue the reset command (parameters 1 and 3 are not used)
 8003472:	2201      	movs	r2, #1
 8003474:	2101      	movs	r1, #1
 8003476:	2000      	movs	r0, #0
 8003478:	f7fe fc0a 	bl	8001c90 <hid_i2c_cmd_process>
 800347c:	4603      	mov	r3, r0
 800347e:	2b00      	cmp	r3, #0
 8003480:	d119      	bne.n	80034b6 <HOST_SF_LIB_VREG_write+0xca>
                {
                    memset(&_VREGS, 0x00, sizeof(_VREGS));            // Initialize VREG registers to POR values
 8003482:	f44f 7286 	mov.w	r2, #268	; 0x10c
 8003486:	2100      	movs	r1, #0
 8003488:	4890      	ldr	r0, [pc, #576]	; (80036cc <HOST_SF_LIB_VREG_write+0x2e0>)
 800348a:	f006 fe00 	bl	800a08e <memset>
                    _VREGS.stat.stat4.ResetStatus = VREG_RST_CMD_SUCCESS; // Status update to notify command set succesful
 800348e:	4a8f      	ldr	r2, [pc, #572]	; (80036cc <HOST_SF_LIB_VREG_write+0x2e0>)
 8003490:	f892 3108 	ldrb.w	r3, [r2, #264]	; 0x108
 8003494:	2101      	movs	r1, #1
 8003496:	f361 1346 	bfi	r3, r1, #5, #2
 800349a:	f882 3108 	strb.w	r3, [r2, #264]	; 0x108
                    _VREGS.SHC.SHstart = TRUE;
 800349e:	4a8b      	ldr	r2, [pc, #556]	; (80036cc <HOST_SF_LIB_VREG_write+0x2e0>)
 80034a0:	7813      	ldrb	r3, [r2, #0]
 80034a2:	f043 0304 	orr.w	r3, r3, #4
 80034a6:	7013      	strb	r3, [r2, #0]
                    _VREGS.SHC.SHwake = TRUE;
 80034a8:	4a88      	ldr	r2, [pc, #544]	; (80036cc <HOST_SF_LIB_VREG_write+0x2e0>)
 80034aa:	7813      	ldrb	r3, [r2, #0]
 80034ac:	f043 0301 	orr.w	r3, r3, #1
 80034b0:	7013      	strb	r3, [r2, #0]
                    return SUCCESS;                                 //return success (all VREG bits have been reset to POR values)
 80034b2:	2300      	movs	r3, #0
 80034b4:	e355      	b.n	8003b62 <HOST_SF_LIB_VREG_write+0x776>
                }
                else
                {
                    _VREGS.stat.stat4.ResetStatus = VREG_RESET_CMD_FAIL; // Status update to notify command set error occurred
 80034b6:	4a85      	ldr	r2, [pc, #532]	; (80036cc <HOST_SF_LIB_VREG_write+0x2e0>)
 80034b8:	f892 3108 	ldrb.w	r3, [r2, #264]	; 0x108
 80034bc:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80034c0:	f882 3108 	strb.w	r3, [r2, #264]	; 0x108
                    return RESET_FAIL;
 80034c4:	2318      	movs	r3, #24
 80034c6:	e34c      	b.n	8003b62 <HOST_SF_LIB_VREG_write+0x776>
                }
            }

       /*****************WAKE COMMAND********************/
            if (usData & VREG_SHC_WAKE_BIT)                         // wake bit set?
 80034c8:	683b      	ldr	r3, [r7, #0]
 80034ca:	f003 0301 	and.w	r3, r3, #1
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d032      	beq.n	8003538 <HOST_SF_LIB_VREG_write+0x14c>
            {
                if ((usPREV_SHC_STATE & VREG_SHC_WAKE_BIT) == 0)    // this bit was not previously set, issue wake command
 80034d2:	4b7f      	ldr	r3, [pc, #508]	; (80036d0 <HOST_SF_LIB_VREG_write+0x2e4>)
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f003 0301 	and.w	r3, r3, #1
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d12c      	bne.n	8003538 <HOST_SF_LIB_VREG_write+0x14c>
                {
                    Wake_signal();                                   //assert wake signal (1 ms toggle of RE9 signal to SSC150)
 80034de:	f7ff fa95 	bl	8002a0c <Wake_signal>

                    HAL_Delay(12);                                      //wait 12 ms (11 ms min per spec) after wake signal and before sending POWER_ON command to SSC7150
 80034e2:	200c      	movs	r0, #12
 80034e4:	f000 fbac 	bl	8003c40 <HAL_Delay>
                                        
                    if (!hid_i2c_cmd_process(0, POWER_ON, ARB_ID))  // Issue the wake command (parameters 1 and 3 are not used)
 80034e8:	2201      	movs	r2, #1
 80034ea:	2102      	movs	r1, #2
 80034ec:	2000      	movs	r0, #0
 80034ee:	f7fe fbcf 	bl	8001c90 <hid_i2c_cmd_process>
 80034f2:	4603      	mov	r3, r0
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d115      	bne.n	8003524 <HOST_SF_LIB_VREG_write+0x138>
                    {
                        _VREGS.SHC.sleep = FALSE;                    //clear the sleep bit as per API spec
 80034f8:	4a74      	ldr	r2, [pc, #464]	; (80036cc <HOST_SF_LIB_VREG_write+0x2e0>)
 80034fa:	7813      	ldrb	r3, [r2, #0]
 80034fc:	f36f 0341 	bfc	r3, #1, #1
 8003500:	7013      	strb	r3, [r2, #0]
                        _VREGS.SHC.SHwake = TRUE;
 8003502:	4a72      	ldr	r2, [pc, #456]	; (80036cc <HOST_SF_LIB_VREG_write+0x2e0>)
 8003504:	7813      	ldrb	r3, [r2, #0]
 8003506:	f043 0301 	orr.w	r3, r3, #1
 800350a:	7013      	strb	r3, [r2, #0]
                        _VREGS.stat.stat4.ShSleepWakeStatus = VREG_WAKE_SUCCESS; // Status update to notify command set succesful
 800350c:	4a6f      	ldr	r2, [pc, #444]	; (80036cc <HOST_SF_LIB_VREG_write+0x2e0>)
 800350e:	f8b2 3108 	ldrh.w	r3, [r2, #264]	; 0x108
 8003512:	2102      	movs	r1, #2
 8003514:	f361 13c9 	bfi	r3, r1, #7, #3
 8003518:	f8a2 3108 	strh.w	r3, [r2, #264]	; 0x108
                                                
                        //spec says must wait a minimum of 30 ms before next command to SSC7150, so let's wait here...
                        HAL_Delay(31);                                  //dDlay_ms 31 ms (30 ms min per spec)
 800351c:	201f      	movs	r0, #31
 800351e:	f000 fb8f 	bl	8003c40 <HAL_Delay>
 8003522:	e009      	b.n	8003538 <HOST_SF_LIB_VREG_write+0x14c>
                    }
                    else
                    {
                        _VREGS.stat.stat4.ShSleepWakeStatus = VREG_WAKE_FAIL; // Status update to notify command set error occurred
 8003524:	4a69      	ldr	r2, [pc, #420]	; (80036cc <HOST_SF_LIB_VREG_write+0x2e0>)
 8003526:	f8b2 3108 	ldrh.w	r3, [r2, #264]	; 0x108
 800352a:	2106      	movs	r1, #6
 800352c:	f361 13c9 	bfi	r3, r1, #7, #3
 8003530:	f8a2 3108 	strh.w	r3, [r2, #264]	; 0x108
                        return WAKE_CMD_FAIL;
 8003534:	231e      	movs	r3, #30
 8003536:	e314      	b.n	8003b62 <HOST_SF_LIB_VREG_write+0x776>
                    }
                }
            }
            
            /*****************SLEEP COMMAND********************/
            if (usData & VREG_SHC_SLP_BIT)                          //sleep bit set?
 8003538:	683b      	ldr	r3, [r7, #0]
 800353a:	f003 0302 	and.w	r3, r3, #2
 800353e:	2b00      	cmp	r3, #0
 8003540:	d03a      	beq.n	80035b8 <HOST_SF_LIB_VREG_write+0x1cc>
            {
                //check if any sensors are enabled, if they are then CLEAR SHC Sleep bit and return without setting status bit as per API spec
                if ( (usData & ~(VREG_SHC_SLP_BIT | VREG_SHC_START_BIT) ) > (VREG_SHC_SLP_BIT | VREG_SHC_START_BIT | VREG_SHC_WAKE_BIT) )
 8003542:	683b      	ldr	r3, [r7, #0]
 8003544:	f023 0306 	bic.w	r3, r3, #6
 8003548:	2b07      	cmp	r3, #7
 800354a:	d906      	bls.n	800355a <HOST_SF_LIB_VREG_write+0x16e>
                {
                    _VREGS.SHC.sleep = FALSE;
 800354c:	4a5f      	ldr	r2, [pc, #380]	; (80036cc <HOST_SF_LIB_VREG_write+0x2e0>)
 800354e:	7813      	ldrb	r3, [r2, #0]
 8003550:	f36f 0341 	bfc	r3, #1, #1
 8003554:	7013      	strb	r3, [r2, #0]
                    return SUCCESS;                                 //although the sleep command wasn't issued, don't return any error because user shouldn't issue sleep with any sensors enabled
 8003556:	2300      	movs	r3, #0
 8003558:	e303      	b.n	8003b62 <HOST_SF_LIB_VREG_write+0x776>
                }

                if ((usPREV_SHC_STATE & VREG_SHC_SLP_BIT) == 0)     // this bit was not previously set, issue sleep command
 800355a:	4b5d      	ldr	r3, [pc, #372]	; (80036d0 <HOST_SF_LIB_VREG_write+0x2e4>)
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f003 0302 	and.w	r3, r3, #2
 8003562:	2b00      	cmp	r3, #0
 8003564:	d128      	bne.n	80035b8 <HOST_SF_LIB_VREG_write+0x1cc>
                {
                    if (!hid_i2c_cmd_process(0, SLEEP, ARB_ID))     // Issue the sleep command (parameters 1 and 3 are not used)
 8003566:	2201      	movs	r2, #1
 8003568:	2103      	movs	r1, #3
 800356a:	2000      	movs	r0, #0
 800356c:	f7fe fb90 	bl	8001c90 <hid_i2c_cmd_process>
 8003570:	4603      	mov	r3, r0
 8003572:	2b00      	cmp	r3, #0
 8003574:	d116      	bne.n	80035a4 <HOST_SF_LIB_VREG_write+0x1b8>
                    {
                        _VREGS.stat.stat4.ShSleepWakeStatus = VREG_SLEEP_SUCCESS; // Status update to notify command set succesful
 8003576:	4a55      	ldr	r2, [pc, #340]	; (80036cc <HOST_SF_LIB_VREG_write+0x2e0>)
 8003578:	f8b2 3108 	ldrh.w	r3, [r2, #264]	; 0x108
 800357c:	2101      	movs	r1, #1
 800357e:	f361 13c9 	bfi	r3, r1, #7, #3
 8003582:	f8a2 3108 	strh.w	r3, [r2, #264]	; 0x108
                        _VREGS.SHC.sleep = TRUE;                     // Set SHC (VREG00) to show SSC7150 device is asleep   
 8003586:	4a51      	ldr	r2, [pc, #324]	; (80036cc <HOST_SF_LIB_VREG_write+0x2e0>)
 8003588:	7813      	ldrb	r3, [r2, #0]
 800358a:	f043 0302 	orr.w	r3, r3, #2
 800358e:	7013      	strb	r3, [r2, #0]
                        _VREGS.SHC.SHwake = FALSE;                   // Clear SHC (VREG00) bit that shows device is not awake
 8003590:	4a4e      	ldr	r2, [pc, #312]	; (80036cc <HOST_SF_LIB_VREG_write+0x2e0>)
 8003592:	7813      	ldrb	r3, [r2, #0]
 8003594:	f36f 0300 	bfc	r3, #0, #1
 8003598:	7013      	strb	r3, [r2, #0]
                        
                        //spec says must wait a minimum of 70 ms before wake command, so let's wait here...
                        HAL_Delay(71);                                  //dDlay_ms 71 ms (70 ms min per spec)
 800359a:	2047      	movs	r0, #71	; 0x47
 800359c:	f000 fb50 	bl	8003c40 <HAL_Delay>
                                                
                        return SUCCESS;                             // no need to continue checking (since we already checked if any sensors were enabled) and we won't wake & sleep at the same time
 80035a0:	2300      	movs	r3, #0
 80035a2:	e2de      	b.n	8003b62 <HOST_SF_LIB_VREG_write+0x776>
                   }
                   else
                   {
                        _VREGS.stat.stat4.ShSleepWakeStatus = VREG_SLEEP_FAIL;  // Status update to notify command set error occurred
 80035a4:	4a49      	ldr	r2, [pc, #292]	; (80036cc <HOST_SF_LIB_VREG_write+0x2e0>)
 80035a6:	f8b2 3108 	ldrh.w	r3, [r2, #264]	; 0x108
 80035aa:	2105      	movs	r1, #5
 80035ac:	f361 13c9 	bfi	r3, r1, #7, #3
 80035b0:	f8a2 3108 	strh.w	r3, [r2, #264]	; 0x108
                        return SLEEP_CMD_FAIL;
 80035b4:	231b      	movs	r3, #27
 80035b6:	e2d4      	b.n	8003b62 <HOST_SF_LIB_VREG_write+0x776>
                   }
                }
            }

        /*****************ENABLE SENSOR COMMANDS********************/
            ucTmpStatVal = 0;                                       //initialize for the case of disabling ALL sensors
 80035b8:	2300      	movs	r3, #0
 80035ba:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
            
            for (ucBitOffset = VREG_SHC_ACC_EN_VAL; ucBitOffset <= VREG_SHC_RAWGYR_EN_VAL; ucBitOffset++) // Runs through bits relevant to sensor enable/disable (in VREG00) and executes command
 80035be:	2304      	movs	r3, #4
 80035c0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80035c4:	e0de      	b.n	8003784 <HOST_SF_LIB_VREG_write+0x398>
            {
                ucAdjustedPtr = ucBitOffset;
 80035c6:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 80035ca:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
            
                if (ucBitOffset == VREG_SHC_RAWMAG_EN_VAL)          // bit 12 in VREG00 corresponds to Raw Mag. This is bit0 of VREG3D (Stat2)
 80035ce:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 80035d2:	2b0c      	cmp	r3, #12
 80035d4:	d102      	bne.n	80035dc <HOST_SF_LIB_VREG_write+0x1f0>
                    usStat_ptr++;                                   //  so we need to increment the status reg pointer
 80035d6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80035d8:	3304      	adds	r3, #4
 80035da:	647b      	str	r3, [r7, #68]	; 0x44
            
                if ( ((1 << ucBitOffset) & usData) || (usPREV_SHC_STATE & (1 << ucBitOffset)) ) //is enable bit set now OR was it previously set?
 80035dc:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 80035e0:	2201      	movs	r2, #1
 80035e2:	fa02 f303 	lsl.w	r3, r2, r3
 80035e6:	461a      	mov	r2, r3
 80035e8:	683b      	ldr	r3, [r7, #0]
 80035ea:	4013      	ands	r3, r2
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d10b      	bne.n	8003608 <HOST_SF_LIB_VREG_write+0x21c>
 80035f0:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 80035f4:	2201      	movs	r2, #1
 80035f6:	fa02 f303 	lsl.w	r3, r2, r3
 80035fa:	461a      	mov	r2, r3
 80035fc:	4b34      	ldr	r3, [pc, #208]	; (80036d0 <HOST_SF_LIB_VREG_write+0x2e4>)
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	4013      	ands	r3, r2
 8003602:	2b00      	cmp	r3, #0
 8003604:	f000 80b9 	beq.w	800377a <HOST_SF_LIB_VREG_write+0x38e>
                {

                    usTmpStatptr = ucBitOffset;                     // do some pre-calculation for sensor stat bit position
 8003608:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 800360c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

                    if (usTmpStatptr >= VREG_SHC_RAWMAG_EN_VAL)     // Set appropriate offset if the sensor falls in stat2
 8003610:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8003614:	2b0b      	cmp	r3, #11
 8003616:	d904      	bls.n	8003622 <HOST_SF_LIB_VREG_write+0x236>
                        usTmpStatptr = ucBitOffset - 8;
 8003618:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 800361c:	3b08      	subs	r3, #8
 800361e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
                    ucTmpStatVal = VREG_ENABLE_SUCCESS;             // success status value for VREG status reg
 8003622:	2301      	movs	r3, #1
 8003624:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e


                    if ((1 << ucBitOffset) & usData)                // this sensor's enable bit is set
 8003628:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 800362c:	2201      	movs	r2, #1
 800362e:	fa02 f303 	lsl.w	r3, r2, r3
 8003632:	461a      	mov	r2, r3
 8003634:	683b      	ldr	r3, [r7, #0]
 8003636:	4013      	ands	r3, r2
 8003638:	2b00      	cmp	r3, #0
 800363a:	d051      	beq.n	80036e0 <HOST_SF_LIB_VREG_write+0x2f4>
                    {
                        if ((usPREV_SHC_STATE & (1 << ucBitOffset)) == 0) // this bit was not previously set, need to set this sensor to FULL_POWER      
 800363c:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 8003640:	2201      	movs	r2, #1
 8003642:	fa02 f303 	lsl.w	r3, r2, r3
 8003646:	461a      	mov	r2, r3
 8003648:	4b21      	ldr	r3, [pc, #132]	; (80036d0 <HOST_SF_LIB_VREG_write+0x2e4>)
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	4013      	ands	r3, r2
 800364e:	2b00      	cmp	r3, #0
 8003650:	f040 8093 	bne.w	800377a <HOST_SF_LIB_VREG_write+0x38e>
                        {                           
                            SET_PARAMS.ucid = SENSOR[ucAdjustedPtr - VREG_SHC_ACC_EN_VAL].id;
 8003654:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 8003658:	1f1a      	subs	r2, r3, #4
 800365a:	4920      	ldr	r1, [pc, #128]	; (80036dc <HOST_SF_LIB_VREG_write+0x2f0>)
 800365c:	4613      	mov	r3, r2
 800365e:	00db      	lsls	r3, r3, #3
 8003660:	1a9b      	subs	r3, r3, r2
 8003662:	440b      	add	r3, r1
 8003664:	781a      	ldrb	r2, [r3, #0]
 8003666:	4b1b      	ldr	r3, [pc, #108]	; (80036d4 <HOST_SF_LIB_VREG_write+0x2e8>)
 8003668:	701a      	strb	r2, [r3, #0]
                            
                            if (set_state_data(SET_PARAMS))         // Set this sensor to FULL POWER
 800366a:	4b1a      	ldr	r3, [pc, #104]	; (80036d4 <HOST_SF_LIB_VREG_write+0x2e8>)
 800366c:	691a      	ldr	r2, [r3, #16]
 800366e:	9200      	str	r2, [sp, #0]
 8003670:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003672:	f7ff fb9f 	bl	8002db4 <set_state_data>
 8003676:	4603      	mov	r3, r0
 8003678:	2b00      	cmp	r3, #0
 800367a:	d002      	beq.n	8003682 <HOST_SF_LIB_VREG_write+0x296>
                                ucTmpStatVal = VREG_ENA_DIS_FAIL;   // Error occurred, write an error code to the sensor status register
 800367c:	2303      	movs	r3, #3
 800367e:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e

                            *usStat_ptr &= ~(STATUS1_MASK << (2*(usTmpStatptr - VREG_SHC_ACC_EN_VAL))); //clear stat bits before updating
 8003682:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 800368a:	3a04      	subs	r2, #4
 800368c:	0052      	lsls	r2, r2, #1
 800368e:	2103      	movs	r1, #3
 8003690:	fa01 f202 	lsl.w	r2, r1, r2
 8003694:	43d2      	mvns	r2, r2
 8003696:	401a      	ands	r2, r3
 8003698:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800369a:	601a      	str	r2, [r3, #0]
                            *usStat_ptr |= (ucTmpStatVal << (2*(usTmpStatptr - VREG_SHC_ACC_EN_VAL)));  // Write applicable status value to VREG status register
 800369c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f897 103e 	ldrb.w	r1, [r7, #62]	; 0x3e
 80036a4:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 80036a8:	3a04      	subs	r2, #4
 80036aa:	0052      	lsls	r2, r2, #1
 80036ac:	fa01 f202 	lsl.w	r2, r1, r2
 80036b0:	431a      	orrs	r2, r3
 80036b2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80036b4:	601a      	str	r2, [r3, #0]
                            *usSHC_ptr |= (1 << ucBitOffset);       // Set the sensor enable bit in VREG00          
 80036b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f897 2042 	ldrb.w	r2, [r7, #66]	; 0x42
 80036be:	2101      	movs	r1, #1
 80036c0:	fa01 f202 	lsl.w	r2, r1, r2
 80036c4:	431a      	orrs	r2, r3
 80036c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036c8:	601a      	str	r2, [r3, #0]
 80036ca:	e056      	b.n	800377a <HOST_SF_LIB_VREG_write+0x38e>
 80036cc:	2000110c 	.word	0x2000110c
 80036d0:	2000122c 	.word	0x2000122c
 80036d4:	20001218 	.word	0x20001218
 80036d8:	20001208 	.word	0x20001208
 80036dc:	20000118 	.word	0x20000118
                        }
                        //else if this sensor's enable bit was previously set, no need to do anything 
                    }

                    else if (usPREV_SHC_STATE & (1 << ucBitOffset)) // this sensor's enable bit is not set now, but it was enabled previously, send LOW POWER command 
 80036e0:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 80036e4:	2201      	movs	r2, #1
 80036e6:	fa02 f303 	lsl.w	r3, r2, r3
 80036ea:	461a      	mov	r2, r3
 80036ec:	4bac      	ldr	r3, [pc, #688]	; (80039a0 <HOST_SF_LIB_VREG_write+0x5b4>)
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	4013      	ands	r3, r2
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d041      	beq.n	800377a <HOST_SF_LIB_VREG_write+0x38e>
                    {
                        ucTmpStatVal = VREG_DISABLE_SUCCESS;        //successful disable status value
 80036f6:	2302      	movs	r3, #2
 80036f8:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e

                        SET_PARAMS.ucid = SENSOR[ucAdjustedPtr - VREG_SHC_ACC_EN_VAL].id;
 80036fc:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 8003700:	1f1a      	subs	r2, r3, #4
 8003702:	49a8      	ldr	r1, [pc, #672]	; (80039a4 <HOST_SF_LIB_VREG_write+0x5b8>)
 8003704:	4613      	mov	r3, r2
 8003706:	00db      	lsls	r3, r3, #3
 8003708:	1a9b      	subs	r3, r3, r2
 800370a:	440b      	add	r3, r1
 800370c:	781a      	ldrb	r2, [r3, #0]
 800370e:	4ba6      	ldr	r3, [pc, #664]	; (80039a8 <HOST_SF_LIB_VREG_write+0x5bc>)
 8003710:	701a      	strb	r2, [r3, #0]
                        SET_PARAMS.ucPowerState = LOW_POWER;        //set sensor to LOW POWER
 8003712:	4ba5      	ldr	r3, [pc, #660]	; (80039a8 <HOST_SF_LIB_VREG_write+0x5bc>)
 8003714:	2203      	movs	r2, #3
 8003716:	705a      	strb	r2, [r3, #1]
                        if (set_state_data(SET_PARAMS))             // Sensor should be disabled
 8003718:	4ba3      	ldr	r3, [pc, #652]	; (80039a8 <HOST_SF_LIB_VREG_write+0x5bc>)
 800371a:	691a      	ldr	r2, [r3, #16]
 800371c:	9200      	str	r2, [sp, #0]
 800371e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003720:	f7ff fb48 	bl	8002db4 <set_state_data>
 8003724:	4603      	mov	r3, r0
 8003726:	2b00      	cmp	r3, #0
 8003728:	d002      	beq.n	8003730 <HOST_SF_LIB_VREG_write+0x344>
                            ucTmpStatVal = VREG_ENA_DIS_FAIL;       // Error occurred, write an error code to the sensor status register
 800372a:	2303      	movs	r3, #3
 800372c:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e

                        *usStat_ptr &= ~(STATUS1_MASK << (2*(usTmpStatptr - VREG_SHC_ACC_EN_VAL))); //clear stat bits before updating
 8003730:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8003738:	3a04      	subs	r2, #4
 800373a:	0052      	lsls	r2, r2, #1
 800373c:	2103      	movs	r1, #3
 800373e:	fa01 f202 	lsl.w	r2, r1, r2
 8003742:	43d2      	mvns	r2, r2
 8003744:	401a      	ands	r2, r3
 8003746:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003748:	601a      	str	r2, [r3, #0]
                        *usStat_ptr |= (ucTmpStatVal << (2*(usTmpStatptr - VREG_SHC_ACC_EN_VAL))); // Write appropriate status value to the status register
 800374a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f897 103e 	ldrb.w	r1, [r7, #62]	; 0x3e
 8003752:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8003756:	3a04      	subs	r2, #4
 8003758:	0052      	lsls	r2, r2, #1
 800375a:	fa01 f202 	lsl.w	r2, r1, r2
 800375e:	431a      	orrs	r2, r3
 8003760:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003762:	601a      	str	r2, [r3, #0]
                        *usSHC_ptr &= ~(1 << ucBitOffset);          // Clear the sensor enable bit in VREG00        
 8003764:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f897 2042 	ldrb.w	r2, [r7, #66]	; 0x42
 800376c:	2101      	movs	r1, #1
 800376e:	fa01 f202 	lsl.w	r2, r1, r2
 8003772:	43d2      	mvns	r2, r2
 8003774:	401a      	ands	r2, r3
 8003776:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003778:	601a      	str	r2, [r3, #0]
            for (ucBitOffset = VREG_SHC_ACC_EN_VAL; ucBitOffset <= VREG_SHC_RAWGYR_EN_VAL; ucBitOffset++) // Runs through bits relevant to sensor enable/disable (in VREG00) and executes command
 800377a:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 800377e:	3301      	adds	r3, #1
 8003780:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8003784:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 8003788:	2b0d      	cmp	r3, #13
 800378a:	f67f af1c 	bls.w	80035c6 <HOST_SF_LIB_VREG_write+0x1da>
                    }
                }
            }
            
            if (ucTmpStatVal == VREG_ENA_DIS_FAIL) 
 800378e:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8003792:	2b03      	cmp	r3, #3
 8003794:	d101      	bne.n	800379a <HOST_SF_LIB_VREG_write+0x3ae>
                return SET_FEAT_FAIL;
 8003796:	2317      	movs	r3, #23
 8003798:	e1e3      	b.n	8003b62 <HOST_SF_LIB_VREG_write+0x776>
        }   //end of SHC register

    /*****************SENSITIVITY-CHANGE COMMAND********************/
        if (ucRegOffset >= VREG_ACSEN && ucRegOffset <= VREG_RGYSEN) // data will be written to VREG sensitivity register
 800379a:	79fb      	ldrb	r3, [r7, #7]
 800379c:	2b01      	cmp	r3, #1
 800379e:	f240 80a1 	bls.w	80038e4 <HOST_SF_LIB_VREG_write+0x4f8>
 80037a2:	79fb      	ldrb	r3, [r7, #7]
 80037a4:	2b0b      	cmp	r3, #11
 80037a6:	f200 809d 	bhi.w	80038e4 <HOST_SF_LIB_VREG_write+0x4f8>
        {
            usStat_ptr = (UINT16 *)&_VREGS.stat;                     // Reset the status register pointer to the first status register (VREG3C)
 80037aa:	4b80      	ldr	r3, [pc, #512]	; (80039ac <HOST_SF_LIB_VREG_write+0x5c0>)
 80037ac:	647b      	str	r3, [r7, #68]	; 0x44
            usStat_ptr++;                                           // Increment to status register (VREG3D) for change in sensitivity (CS) stat bits
 80037ae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80037b0:	3304      	adds	r3, #4
 80037b2:	647b      	str	r3, [r7, #68]	; 0x44
        
            for (ucTmpPtr = VREG_ACSEN; ucTmpPtr <= VREG_RGYSEN; ucTmpPtr++) // Loop through the VREG sensitivity registers
 80037b4:	2302      	movs	r3, #2
 80037b6:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
 80037ba:	e024      	b.n	8003806 <HOST_SF_LIB_VREG_write+0x41a>
            {
                if ( (ucRegOffset == ucTmpPtr) &&                   // If current register matches desired one, and that sensor is enabled...
 80037bc:	79fa      	ldrb	r2, [r7, #7]
 80037be:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 80037c2:	429a      	cmp	r2, r3
 80037c4:	d11a      	bne.n	80037fc <HOST_SF_LIB_VREG_write+0x410>
                    (*usSHC_ptr & (1 << (ucTmpPtr + VREG_ACSEN))) )
 80037c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 80037ce:	3202      	adds	r2, #2
 80037d0:	2101      	movs	r1, #1
 80037d2:	fa01 f202 	lsl.w	r2, r1, r2
 80037d6:	4013      	ands	r3, r2
                if ( (ucRegOffset == ucTmpPtr) &&                   // If current register matches desired one, and that sensor is enabled...
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d00f      	beq.n	80037fc <HOST_SF_LIB_VREG_write+0x410>
                {
                    ucAdjustedPtr = ucTmpPtr - VREG_ACSEN;          //offset from first sensitivity VREG
 80037dc:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 80037e0:	3b02      	subs	r3, #2
 80037e2:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
                    
                    ucId = SENSOR[ucAdjustedPtr].id;                // Set variable equal to id of current sensor
 80037e6:	f897 2041 	ldrb.w	r2, [r7, #65]	; 0x41
 80037ea:	496e      	ldr	r1, [pc, #440]	; (80039a4 <HOST_SF_LIB_VREG_write+0x5b8>)
 80037ec:	4613      	mov	r3, r2
 80037ee:	00db      	lsls	r3, r3, #3
 80037f0:	1a9b      	subs	r3, r3, r2
 80037f2:	440b      	add	r3, r1
 80037f4:	781b      	ldrb	r3, [r3, #0]
 80037f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
                    break;
 80037fa:	e008      	b.n	800380e <HOST_SF_LIB_VREG_write+0x422>
            for (ucTmpPtr = VREG_ACSEN; ucTmpPtr <= VREG_RGYSEN; ucTmpPtr++) // Loop through the VREG sensitivity registers
 80037fc:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8003800:	3301      	adds	r3, #1
 8003802:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
 8003806:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 800380a:	2b0b      	cmp	r3, #11
 800380c:	d9d6      	bls.n	80037bc <HOST_SF_LIB_VREG_write+0x3d0>
                }
            }
            
            if ((ucTmpPtr - VREG_ACSEN) < 4)                        // Sensitivity status of accel, gyro, compass, and orientation, are in VREG 0x3D (3-bits each) starting at bit 4
 800380e:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8003812:	2b05      	cmp	r3, #5
 8003814:	d809      	bhi.n	800382a <HOST_SF_LIB_VREG_write+0x43e>
                ucAdjustedPtr = (3*ucAdjustedPtr) + 4;              // calculate proper ptr value
 8003816:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 800381a:	461a      	mov	r2, r3
 800381c:	0052      	lsls	r2, r2, #1
 800381e:	4413      	add	r3, r2
 8003820:	b2db      	uxtb	r3, r3
 8003822:	3304      	adds	r3, #4
 8003824:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
 8003828:	e01a      	b.n	8003860 <HOST_SF_LIB_VREG_write+0x474>
                    
            else if ((ucTmpPtr - VREG_ACSEN) >= 4 && (ucTmpPtr - VREG_ACSEN) < 9) //Sensitivity status of inclinometer, 2 reserved sensors, raw accelerometr, and raw manometer are in VREG 0x3E
 800382a:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 800382e:	2b05      	cmp	r3, #5
 8003830:	d910      	bls.n	8003854 <HOST_SF_LIB_VREG_write+0x468>
 8003832:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8003836:	2b0a      	cmp	r3, #10
 8003838:	d80c      	bhi.n	8003854 <HOST_SF_LIB_VREG_write+0x468>
            {
                usStat_ptr++;                                       // point to next VREG status register (VREG3E)
 800383a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800383c:	3304      	adds	r3, #4
 800383e:	647b      	str	r3, [r7, #68]	; 0x44
                ucAdjustedPtr = 3 * (-(4 - (ucTmpPtr - VREG_ACSEN))); // calculate proper ptr value
 8003840:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8003844:	461a      	mov	r2, r3
 8003846:	0052      	lsls	r2, r2, #1
 8003848:	4413      	add	r3, r2
 800384a:	b2db      	uxtb	r3, r3
 800384c:	3b12      	subs	r3, #18
 800384e:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
 8003852:	e005      	b.n	8003860 <HOST_SF_LIB_VREG_write+0x474>
            }

            else                                                    
            {                                                       // Last sensor (raw gyrometer) is in VREG 0x3F
                usStat_ptr += 2;                                    // pointer to last VREG status register
 8003854:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003856:	3308      	adds	r3, #8
 8003858:	647b      	str	r3, [r7, #68]	; 0x44
                ucAdjustedPtr = 0;
 800385a:	2300      	movs	r3, #0
 800385c:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
            }

            SET_PARAMS.ucid = ucId;
 8003860:	4a51      	ldr	r2, [pc, #324]	; (80039a8 <HOST_SF_LIB_VREG_write+0x5bc>)
 8003862:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8003866:	7013      	strb	r3, [r2, #0]
            SET_PARAMS.bSensitivityValid = TRUE;                    //update with valid sensitivity value
 8003868:	4b4f      	ldr	r3, [pc, #316]	; (80039a8 <HOST_SF_LIB_VREG_write+0x5bc>)
 800386a:	2201      	movs	r2, #1
 800386c:	721a      	strb	r2, [r3, #8]
            SET_PARAMS.usSensitivityVal = usData;
 800386e:	4a4e      	ldr	r2, [pc, #312]	; (80039a8 <HOST_SF_LIB_VREG_write+0x5bc>)
 8003870:	683b      	ldr	r3, [r7, #0]
 8003872:	6053      	str	r3, [r2, #4]
 
            if (set_state_data(SET_PARAMS))                         // If sensor is enabled, sensitivity register will be written to
 8003874:	4b4c      	ldr	r3, [pc, #304]	; (80039a8 <HOST_SF_LIB_VREG_write+0x5bc>)
 8003876:	691a      	ldr	r2, [r3, #16]
 8003878:	9200      	str	r2, [sp, #0]
 800387a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800387c:	f7ff fa9a 	bl	8002db4 <set_state_data>
 8003880:	4603      	mov	r3, r0
 8003882:	2b00      	cmp	r3, #0
 8003884:	d016      	beq.n	80038b4 <HOST_SF_LIB_VREG_write+0x4c8>
            {
                *usStat_ptr &= ~(STATUS2_MASK << ucAdjustedPtr);    // Clear status bits before writing to them 
 8003886:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f897 2041 	ldrb.w	r2, [r7, #65]	; 0x41
 800388e:	2107      	movs	r1, #7
 8003890:	fa01 f202 	lsl.w	r2, r1, r2
 8003894:	43d2      	mvns	r2, r2
 8003896:	401a      	ands	r2, r3
 8003898:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800389a:	601a      	str	r2, [r3, #0]
                *usStat_ptr |= (VREG_UPDATE_SENS_FAIL << ucAdjustedPtr);   // Set status bits with Update Sensitivity error (one-shot status that is only valid immediately after a VREGWrite to Sensitivity update because it is shared with Data Rate update)
 800389c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f897 2041 	ldrb.w	r2, [r7, #65]	; 0x41
 80038a4:	2105      	movs	r1, #5
 80038a6:	fa01 f202 	lsl.w	r2, r1, r2
 80038aa:	431a      	orrs	r2, r3
 80038ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80038ae:	601a      	str	r2, [r3, #0]
                return SET_FEAT_FAIL;
 80038b0:	2317      	movs	r3, #23
 80038b2:	e156      	b.n	8003b62 <HOST_SF_LIB_VREG_write+0x776>
            }
            
            else
            {
                *usRegPtr = usData;                                 // write succesful, update new sensitivity value in sensitivity register
 80038b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80038b6:	683a      	ldr	r2, [r7, #0]
 80038b8:	601a      	str	r2, [r3, #0]
                *usStat_ptr &= ~(STATUS2_MASK << ucAdjustedPtr);    // Clear status bits before writing to them            
 80038ba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f897 2041 	ldrb.w	r2, [r7, #65]	; 0x41
 80038c2:	2107      	movs	r1, #7
 80038c4:	fa01 f202 	lsl.w	r2, r1, r2
 80038c8:	43d2      	mvns	r2, r2
 80038ca:	401a      	ands	r2, r3
 80038cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80038ce:	601a      	str	r2, [r3, #0]
                *usStat_ptr |= (VREG_UPDATE_SENS_SUCCESS << ucAdjustedPtr); // set status bits with Update Sensitivity Success status (one-shot status that is only valid immediately after a VREGWrite to Sensitivity update because it is shared with Data Rate update)
 80038d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f897 2041 	ldrb.w	r2, [r7, #65]	; 0x41
 80038d8:	2101      	movs	r1, #1
 80038da:	fa01 f202 	lsl.w	r2, r1, r2
 80038de:	431a      	orrs	r2, r3
 80038e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80038e2:	601a      	str	r2, [r3, #0]
            }
        }                                                           //end of SENSITIVITY command
    
    /*****************DATA-RATE-CHANGE COMMAND********************/
        if (ucRegOffset >= VREG_ACDXR && ucRegOffset <= VREG_RGYDR) // data will be written to VREG data rate register
 80038e4:	79fb      	ldrb	r3, [r7, #7]
 80038e6:	2b0b      	cmp	r3, #11
 80038e8:	f240 80aa 	bls.w	8003a40 <HOST_SF_LIB_VREG_write+0x654>
 80038ec:	79fb      	ldrb	r3, [r7, #7]
 80038ee:	2b15      	cmp	r3, #21
 80038f0:	f200 80a6 	bhi.w	8003a40 <HOST_SF_LIB_VREG_write+0x654>
        {
            usStat_ptr = (UINT16 *)&_VREGS.stat;                     // Set the status register pointer to the first status register
 80038f4:	4b2d      	ldr	r3, [pc, #180]	; (80039ac <HOST_SF_LIB_VREG_write+0x5c0>)
 80038f6:	647b      	str	r3, [r7, #68]	; 0x44
            usStat_ptr++;                                           // Increment to status register (VREG3D) for data rate stat bits
 80038f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80038fa:	3304      	adds	r3, #4
 80038fc:	647b      	str	r3, [r7, #68]	; 0x44

            for(ucTmpPtr = VREG_ACDXR; ucTmpPtr <= VREG_RGYDR; ucTmpPtr++) // Loop through VREG data rate registers
 80038fe:	230c      	movs	r3, #12
 8003900:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
 8003904:	e024      	b.n	8003950 <HOST_SF_LIB_VREG_write+0x564>
            {
                if ( (ucRegOffset == ucTmpPtr) &&                   // If current register matches desired one, and that sensor is enabled...
 8003906:	79fa      	ldrb	r2, [r7, #7]
 8003908:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 800390c:	429a      	cmp	r2, r3
 800390e:	d11a      	bne.n	8003946 <HOST_SF_LIB_VREG_write+0x55a>
                    (*usSHC_ptr & (1 << (ucTmpPtr - 8))) )
 8003910:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8003918:	3a08      	subs	r2, #8
 800391a:	2101      	movs	r1, #1
 800391c:	fa01 f202 	lsl.w	r2, r1, r2
 8003920:	4013      	ands	r3, r2
                if ( (ucRegOffset == ucTmpPtr) &&                   // If current register matches desired one, and that sensor is enabled...
 8003922:	2b00      	cmp	r3, #0
 8003924:	d00f      	beq.n	8003946 <HOST_SF_LIB_VREG_write+0x55a>
                {
                    ucAdjustedPtr = ucTmpPtr - VREG_ACDXR;          //offset from first data rate VREG
 8003926:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 800392a:	3b0c      	subs	r3, #12
 800392c:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
                    

                    ucId = SENSOR[ucAdjustedPtr].id;                // Set variable equal to id of current sensor
 8003930:	f897 2041 	ldrb.w	r2, [r7, #65]	; 0x41
 8003934:	491b      	ldr	r1, [pc, #108]	; (80039a4 <HOST_SF_LIB_VREG_write+0x5b8>)
 8003936:	4613      	mov	r3, r2
 8003938:	00db      	lsls	r3, r3, #3
 800393a:	1a9b      	subs	r3, r3, r2
 800393c:	440b      	add	r3, r1
 800393e:	781b      	ldrb	r3, [r3, #0]
 8003940:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
                    break;
 8003944:	e008      	b.n	8003958 <HOST_SF_LIB_VREG_write+0x56c>
            for(ucTmpPtr = VREG_ACDXR; ucTmpPtr <= VREG_RGYDR; ucTmpPtr++) // Loop through VREG data rate registers
 8003946:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 800394a:	3301      	adds	r3, #1
 800394c:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
 8003950:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8003954:	2b15      	cmp	r3, #21
 8003956:	d9d6      	bls.n	8003906 <HOST_SF_LIB_VREG_write+0x51a>
                }
            }
            
            if ((ucTmpPtr - VREG_ACDXR) < 4)                        // Data rate status of accel, gyro, compass, and orientation, are in VREG 0x3D (3-bits each) starting at bit 4
 8003958:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 800395c:	2b0f      	cmp	r3, #15
 800395e:	d809      	bhi.n	8003974 <HOST_SF_LIB_VREG_write+0x588>
                ucAdjustedPtr = (3*ucAdjustedPtr) + 4;              // calculate proper ptr value
 8003960:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 8003964:	461a      	mov	r2, r3
 8003966:	0052      	lsls	r2, r2, #1
 8003968:	4413      	add	r3, r2
 800396a:	b2db      	uxtb	r3, r3
 800396c:	3304      	adds	r3, #4
 800396e:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
 8003972:	e023      	b.n	80039bc <HOST_SF_LIB_VREG_write+0x5d0>
                
            else if ((ucTmpPtr - VREG_ACDXR) >= 4 && (ucTmpPtr - VREG_ACDXR) < 9) //Data rate status of inclinometer, 2 reserved sensors, raw accelerometr, and raw manometer are found in VREG 0x3E
 8003974:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8003978:	2b0f      	cmp	r3, #15
 800397a:	d919      	bls.n	80039b0 <HOST_SF_LIB_VREG_write+0x5c4>
 800397c:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8003980:	2b14      	cmp	r3, #20
 8003982:	d815      	bhi.n	80039b0 <HOST_SF_LIB_VREG_write+0x5c4>
            {
                usStat_ptr++;                                       // point to next VREG status register
 8003984:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003986:	3304      	adds	r3, #4
 8003988:	647b      	str	r3, [r7, #68]	; 0x44
                ucAdjustedPtr = 3 * (-(4 - (ucTmpPtr - VREG_ACDXR))); // calculate proper ptr value
 800398a:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 800398e:	461a      	mov	r2, r3
 8003990:	0052      	lsls	r2, r2, #1
 8003992:	4413      	add	r3, r2
 8003994:	b2db      	uxtb	r3, r3
 8003996:	3b30      	subs	r3, #48	; 0x30
 8003998:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
 800399c:	e00e      	b.n	80039bc <HOST_SF_LIB_VREG_write+0x5d0>
 800399e:	bf00      	nop
 80039a0:	2000122c 	.word	0x2000122c
 80039a4:	20000118 	.word	0x20000118
 80039a8:	20001218 	.word	0x20001218
 80039ac:	20001208 	.word	0x20001208
            }
              
            else            
            {                                                       // Last sensor (raw gyrometer) is in VREG 0x3F
                usStat_ptr += 2;                                    // pointer to last VREG status register
 80039b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80039b2:	3308      	adds	r3, #8
 80039b4:	647b      	str	r3, [r7, #68]	; 0x44
                ucAdjustedPtr = 0;
 80039b6:	2300      	movs	r3, #0
 80039b8:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
            }
                
            SET_PARAMS.ucid = ucId;
 80039bc:	4a6b      	ldr	r2, [pc, #428]	; (8003b6c <HOST_SF_LIB_VREG_write+0x780>)
 80039be:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80039c2:	7013      	strb	r3, [r2, #0]
            SET_PARAMS.bDataRateValid = TRUE;                       //update sensor with valid data rate value
 80039c4:	4b69      	ldr	r3, [pc, #420]	; (8003b6c <HOST_SF_LIB_VREG_write+0x780>)
 80039c6:	2201      	movs	r2, #1
 80039c8:	741a      	strb	r2, [r3, #16]
            SET_PARAMS.usDataRateVal = usData;
 80039ca:	4a68      	ldr	r2, [pc, #416]	; (8003b6c <HOST_SF_LIB_VREG_write+0x780>)
 80039cc:	683b      	ldr	r3, [r7, #0]
 80039ce:	60d3      	str	r3, [r2, #12]
            
            if (set_state_data(SET_PARAMS))                         // If sensor is enabled, data rate register will be written to
 80039d0:	4b66      	ldr	r3, [pc, #408]	; (8003b6c <HOST_SF_LIB_VREG_write+0x780>)
 80039d2:	691a      	ldr	r2, [r3, #16]
 80039d4:	9200      	str	r2, [sp, #0]
 80039d6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80039d8:	f7ff f9ec 	bl	8002db4 <set_state_data>
 80039dc:	4603      	mov	r3, r0
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d016      	beq.n	8003a10 <HOST_SF_LIB_VREG_write+0x624>
            {
                *usStat_ptr &= ~(STATUS2_MASK << ucAdjustedPtr);    // Clear status bits before writing to them   
 80039e2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f897 2041 	ldrb.w	r2, [r7, #65]	; 0x41
 80039ea:	2107      	movs	r1, #7
 80039ec:	fa01 f202 	lsl.w	r2, r1, r2
 80039f0:	43d2      	mvns	r2, r2
 80039f2:	401a      	ands	r2, r3
 80039f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80039f6:	601a      	str	r2, [r3, #0]
                *usStat_ptr |= (VREG_UPDATE_DATARATE_FAIL << ucAdjustedPtr); // Update status bits with error (one-shot status that is only valid immediately after a VREGWrite to Data Rate update because it is shared with Sensitivity update)
 80039f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	f897 2041 	ldrb.w	r2, [r7, #65]	; 0x41
 8003a00:	2106      	movs	r1, #6
 8003a02:	fa01 f202 	lsl.w	r2, r1, r2
 8003a06:	431a      	orrs	r2, r3
 8003a08:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003a0a:	601a      	str	r2, [r3, #0]
                return SET_FEAT_FAIL;
 8003a0c:	2317      	movs	r3, #23
 8003a0e:	e0a8      	b.n	8003b62 <HOST_SF_LIB_VREG_write+0x776>
            }
            
            else
            {
                *usRegPtr = usData;                                 // write succesful, update new sensitivity value in sensitivity register
 8003a10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a12:	683a      	ldr	r2, [r7, #0]
 8003a14:	601a      	str	r2, [r3, #0]
                *usStat_ptr &= ~(STATUS2_MASK << ucAdjustedPtr);    // Clear status bits before writing to them    
 8003a16:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f897 2041 	ldrb.w	r2, [r7, #65]	; 0x41
 8003a1e:	2107      	movs	r1, #7
 8003a20:	fa01 f202 	lsl.w	r2, r1, r2
 8003a24:	43d2      	mvns	r2, r2
 8003a26:	401a      	ands	r2, r3
 8003a28:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003a2a:	601a      	str	r2, [r3, #0]
                *usStat_ptr |= (VREG_UPDATE_DATARATE_SUCCESS << ucAdjustedPtr); // Update status bits with success status (one-shot status that is only valid immediately after a VREGWrite to Data Rate update because it is shared with Sensitivity update)
 8003a2c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f897 2041 	ldrb.w	r2, [r7, #65]	; 0x41
 8003a34:	2102      	movs	r1, #2
 8003a36:	fa01 f202 	lsl.w	r2, r1, r2
 8003a3a:	431a      	orrs	r2, r3
 8003a3c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003a3e:	601a      	str	r2, [r3, #0]
            }
        }                                                           //end of DATA_RATE command

    /*****************STATUS-BIT-CLEAR COMMAND********************/
        if (ucRegOffset >= VREG_STAT1 && ucRegOffset <= VREG_STAT4) // offset is in status registers field
 8003a40:	79fb      	ldrb	r3, [r7, #7]
 8003a42:	2b3e      	cmp	r3, #62	; 0x3e
 8003a44:	d947      	bls.n	8003ad6 <HOST_SF_LIB_VREG_write+0x6ea>
 8003a46:	79fb      	ldrb	r3, [r7, #7]
 8003a48:	2b42      	cmp	r3, #66	; 0x42
 8003a4a:	d844      	bhi.n	8003ad6 <HOST_SF_LIB_VREG_write+0x6ea>
        {
            usStat_ptr = (UINT16 *)&_VREGS.stat;                     // Reset the status register pointer to the first status register
 8003a4c:	4b48      	ldr	r3, [pc, #288]	; (8003b70 <HOST_SF_LIB_VREG_write+0x784>)
 8003a4e:	647b      	str	r3, [r7, #68]	; 0x44
                
            for (ucTmpPtr = 0; ucTmpPtr < 8; ucTmpPtr++)            //validate current status field = enable_disable_failed
 8003a50:	2300      	movs	r3, #0
 8003a52:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
 8003a56:	e03a      	b.n	8003ace <HOST_SF_LIB_VREG_write+0x6e2>
            {
                usMask = (VREG_ENA_DIS_FAIL << (ucTmpPtr * 2) );    //mask individual sensor status fields
 8003a58:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8003a5c:	005b      	lsls	r3, r3, #1
 8003a5e:	2203      	movs	r2, #3
 8003a60:	fa02 f303 	lsl.w	r3, r2, r3
 8003a64:	633b      	str	r3, [r7, #48]	; 0x30
                if ( ( usData & usMask) == 0 )                      //clear these stat bits from input data if valid fields exist in status register
 8003a66:	683a      	ldr	r2, [r7, #0]
 8003a68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a6a:	4013      	ands	r3, r2
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d129      	bne.n	8003ac4 <HOST_SF_LIB_VREG_write+0x6d8>
                {
                    if ( ucRegOffset == VREG_STAT1)                 //all 8 sensor status fields are valid for possilbe update
 8003a70:	79fb      	ldrb	r3, [r7, #7]
 8003a72:	2b3f      	cmp	r3, #63	; 0x3f
 8003a74:	d10e      	bne.n	8003a94 <HOST_SF_LIB_VREG_write+0x6a8>
                    {
                        if (( *usStat_ptr & usMask) == usMask )     //valid status field contents
 8003a76:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003a78:	681a      	ldr	r2, [r3, #0]
 8003a7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a7c:	4013      	ands	r3, r2
 8003a7e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003a80:	429a      	cmp	r2, r3
 8003a82:	d11f      	bne.n	8003ac4 <HOST_SF_LIB_VREG_write+0x6d8>
                        {
                            *usStat_ptr &= ~usMask;                 //clear these two bits of status field preserving the rest of the register
 8003a84:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003a86:	681a      	ldr	r2, [r3, #0]
 8003a88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a8a:	43db      	mvns	r3, r3
 8003a8c:	401a      	ands	r2, r3
 8003a8e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003a90:	601a      	str	r2, [r3, #0]
 8003a92:	e017      	b.n	8003ac4 <HOST_SF_LIB_VREG_write+0x6d8>
                        }
                    }
                    else if ((ucRegOffset == VREG_STAT2) && (ucTmpPtr < 2)) // only 1st two status fields of VREG_STAT2 are valid for possible update
 8003a94:	79fb      	ldrb	r3, [r7, #7]
 8003a96:	2b40      	cmp	r3, #64	; 0x40
 8003a98:	d114      	bne.n	8003ac4 <HOST_SF_LIB_VREG_write+0x6d8>
 8003a9a:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8003a9e:	2b01      	cmp	r3, #1
 8003aa0:	d810      	bhi.n	8003ac4 <HOST_SF_LIB_VREG_write+0x6d8>
                    {
                        if (( *(usStat_ptr+1) & usMask) == usMask ) //valid status field contents
 8003aa2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003aa4:	3304      	adds	r3, #4
 8003aa6:	681a      	ldr	r2, [r3, #0]
 8003aa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003aaa:	4013      	ands	r3, r2
 8003aac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003aae:	429a      	cmp	r2, r3
 8003ab0:	d108      	bne.n	8003ac4 <HOST_SF_LIB_VREG_write+0x6d8>
                        {
                            *(usStat_ptr+1) &= ~usMask;             //clear these two bits of status field preserving the rest of the register
 8003ab2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003ab4:	3304      	adds	r3, #4
 8003ab6:	6819      	ldr	r1, [r3, #0]
 8003ab8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003aba:	43da      	mvns	r2, r3
 8003abc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003abe:	3304      	adds	r3, #4
 8003ac0:	400a      	ands	r2, r1
 8003ac2:	601a      	str	r2, [r3, #0]
            for (ucTmpPtr = 0; ucTmpPtr < 8; ucTmpPtr++)            //validate current status field = enable_disable_failed
 8003ac4:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8003ac8:	3301      	adds	r3, #1
 8003aca:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
 8003ace:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8003ad2:	2b07      	cmp	r3, #7
 8003ad4:	d9c0      	bls.n	8003a58 <HOST_SF_LIB_VREG_write+0x66c>
                }
            }
        }
    }

    if (EC_DATA_AVAIL)                                              // Check if the device has new data
 8003ad6:	4b27      	ldr	r3, [pc, #156]	; (8003b74 <HOST_SF_LIB_VREG_write+0x788>)
 8003ad8:	781b      	ldrb	r3, [r3, #0]
 8003ada:	b2db      	uxtb	r3, r3
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d03f      	beq.n	8003b60 <HOST_SF_LIB_VREG_write+0x774>
    {                                                              
         ucRet = i2c_cmd_WrRd (READ,                                // Read the data from the SSC7150
 8003ae0:	2301      	movs	r3, #1
 8003ae2:	9301      	str	r3, [sp, #4]
 8003ae4:	f107 0308 	add.w	r3, r7, #8
 8003ae8:	9300      	str	r3, [sp, #0]
 8003aea:	2303      	movs	r3, #3
 8003aec:	2200      	movs	r2, #0
 8003aee:	2100      	movs	r1, #0
 8003af0:	2002      	movs	r0, #2
 8003af2:	f7fd fb87 	bl	8001204 <i2c_cmd_WrRd>
 8003af6:	4603      	mov	r3, r0
 8003af8:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
                            0,                                      //cmd buf (ignored)
                            BYTE_ADJ_VAL,                           //num of bytes to read
                            ucRx_data,                              //recv buf 
                            TRUE);                                  //actual # of bytes SSC7150 returns is in 1st two bytes of read packet, this flag(=TRUE) means "use the 1st two bytes as the actual read packet length"

       if (ucRet) 
 8003afc:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d001      	beq.n	8003b08 <HOST_SF_LIB_VREG_write+0x71c>
           return HID_INT_FAIL;
 8003b04:	2331      	movs	r3, #49	; 0x31
 8003b06:	e02c      	b.n	8003b62 <HOST_SF_LIB_VREG_write+0x776>

        for (ucSensorNum = 0; ucSensorNum < NUM_SENS; ucSensorNum++) //go through the sensor list to see where to put the received data
 8003b08:	2300      	movs	r3, #0
 8003b0a:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
 8003b0e:	e023      	b.n	8003b58 <HOST_SF_LIB_VREG_write+0x76c>
        {          
            if (ucRx_data[2] == SENSOR[ucSensorNum].id)           //1st two bytes of read data packet hold size of packet, then data begins at byte 2
 8003b10:	7ab9      	ldrb	r1, [r7, #10]
 8003b12:	f897 2040 	ldrb.w	r2, [r7, #64]	; 0x40
 8003b16:	4818      	ldr	r0, [pc, #96]	; (8003b78 <HOST_SF_LIB_VREG_write+0x78c>)
 8003b18:	4613      	mov	r3, r2
 8003b1a:	00db      	lsls	r3, r3, #3
 8003b1c:	1a9b      	subs	r3, r3, r2
 8003b1e:	4403      	add	r3, r0
 8003b20:	781b      	ldrb	r3, [r3, #0]
 8003b22:	4299      	cmp	r1, r3
 8003b24:	d113      	bne.n	8003b4e <HOST_SF_LIB_VREG_write+0x762>
            {
                if (*usSHC_ptr & (1 << (ucTmpPtr + VREG_SHC_ACC_EN_VAL))) // If the incoming data belongs to an enabled sensor, store it in VREG data registers
 8003b26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8003b2e:	3204      	adds	r2, #4
 8003b30:	2101      	movs	r1, #1
 8003b32:	fa01 f202 	lsl.w	r2, r1, r2
 8003b36:	4013      	ands	r3, r2
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d008      	beq.n	8003b4e <HOST_SF_LIB_VREG_write+0x762>
                { 
                    parse_update_VREG_data(ucSensorNum, ucRx_data);
 8003b3c:	f107 0208 	add.w	r2, r7, #8
 8003b40:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8003b44:	4611      	mov	r1, r2
 8003b46:	4618      	mov	r0, r3
 8003b48:	f7ff f9c4 	bl	8002ed4 <parse_update_VREG_data>
                    break;
 8003b4c:	e008      	b.n	8003b60 <HOST_SF_LIB_VREG_write+0x774>
        for (ucSensorNum = 0; ucSensorNum < NUM_SENS; ucSensorNum++) //go through the sensor list to see where to put the received data
 8003b4e:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8003b52:	3301      	adds	r3, #1
 8003b54:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
 8003b58:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8003b5c:	2b0b      	cmp	r3, #11
 8003b5e:	d9d7      	bls.n	8003b10 <HOST_SF_LIB_VREG_write+0x724>
                }
            }
        }
    }
    
    return SUCCESS;
 8003b60:	2300      	movs	r3, #0
}
 8003b62:	4618      	mov	r0, r3
 8003b64:	3748      	adds	r7, #72	; 0x48
 8003b66:	46bd      	mov	sp, r7
 8003b68:	bd80      	pop	{r7, pc}
 8003b6a:	bf00      	nop
 8003b6c:	20001218 	.word	0x20001218
 8003b70:	20001208 	.word	0x20001208
 8003b74:	200000f1 	.word	0x200000f1
 8003b78:	20000118 	.word	0x20000118

08003b7c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8003b7c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003bb4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8003b80:	f7fe ff6c 	bl	8002a5c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
   ldr r0, =_sdata
 8003b84:	480c      	ldr	r0, [pc, #48]	; (8003bb8 <LoopForever+0x6>)
  ldr r1, =_edata
 8003b86:	490d      	ldr	r1, [pc, #52]	; (8003bbc <LoopForever+0xa>)
  ldr r2, =_sidata
 8003b88:	4a0d      	ldr	r2, [pc, #52]	; (8003bc0 <LoopForever+0xe>)
  movs r3, #0
 8003b8a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003b8c:	e002      	b.n	8003b94 <LoopCopyDataInit>

08003b8e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003b8e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003b90:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003b92:	3304      	adds	r3, #4

08003b94 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003b94:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003b96:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003b98:	d3f9      	bcc.n	8003b8e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003b9a:	4a0a      	ldr	r2, [pc, #40]	; (8003bc4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003b9c:	4c0a      	ldr	r4, [pc, #40]	; (8003bc8 <LoopForever+0x16>)
  movs r3, #0
 8003b9e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003ba0:	e001      	b.n	8003ba6 <LoopFillZerobss>

08003ba2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003ba2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003ba4:	3204      	adds	r2, #4

08003ba6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003ba6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003ba8:	d3fb      	bcc.n	8003ba2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003baa:	f006 fa3b 	bl	800a024 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003bae:	f7fd fba1 	bl	80012f4 <main>

08003bb2 <LoopForever>:

LoopForever:
    b LoopForever
 8003bb2:	e7fe      	b.n	8003bb2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8003bb4:	20010000 	.word	0x20010000
   ldr r0, =_sdata
 8003bb8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003bbc:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8003bc0:	0800c190 	.word	0x0800c190
  ldr r2, =_sbss
 8003bc4:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8003bc8:	20004d64 	.word	0x20004d64

08003bcc <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003bcc:	e7fe      	b.n	8003bcc <ADC1_IRQHandler>

08003bce <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003bce:	b580      	push	{r7, lr}
 8003bd0:	b082      	sub	sp, #8
 8003bd2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003bd4:	2300      	movs	r3, #0
 8003bd6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003bd8:	2003      	movs	r0, #3
 8003bda:	f000 f902 	bl	8003de2 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003bde:	200f      	movs	r0, #15
 8003be0:	f7fe fe48 	bl	8002874 <HAL_InitTick>
 8003be4:	4603      	mov	r3, r0
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d002      	beq.n	8003bf0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8003bea:	2301      	movs	r3, #1
 8003bec:	71fb      	strb	r3, [r7, #7]
 8003bee:	e001      	b.n	8003bf4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003bf0:	f7fe fe18 	bl	8002824 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003bf4:	79fb      	ldrb	r3, [r7, #7]
}
 8003bf6:	4618      	mov	r0, r3
 8003bf8:	3708      	adds	r7, #8
 8003bfa:	46bd      	mov	sp, r7
 8003bfc:	bd80      	pop	{r7, pc}
	...

08003c00 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003c00:	b480      	push	{r7}
 8003c02:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003c04:	4b06      	ldr	r3, [pc, #24]	; (8003c20 <HAL_IncTick+0x20>)
 8003c06:	781b      	ldrb	r3, [r3, #0]
 8003c08:	461a      	mov	r2, r3
 8003c0a:	4b06      	ldr	r3, [pc, #24]	; (8003c24 <HAL_IncTick+0x24>)
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	4413      	add	r3, r2
 8003c10:	4a04      	ldr	r2, [pc, #16]	; (8003c24 <HAL_IncTick+0x24>)
 8003c12:	6013      	str	r3, [r2, #0]
}
 8003c14:	bf00      	nop
 8003c16:	46bd      	mov	sp, r7
 8003c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c1c:	4770      	bx	lr
 8003c1e:	bf00      	nop
 8003c20:	20000008 	.word	0x20000008
 8003c24:	20001230 	.word	0x20001230

08003c28 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003c28:	b480      	push	{r7}
 8003c2a:	af00      	add	r7, sp, #0
  return uwTick;
 8003c2c:	4b03      	ldr	r3, [pc, #12]	; (8003c3c <HAL_GetTick+0x14>)
 8003c2e:	681b      	ldr	r3, [r3, #0]
}
 8003c30:	4618      	mov	r0, r3
 8003c32:	46bd      	mov	sp, r7
 8003c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c38:	4770      	bx	lr
 8003c3a:	bf00      	nop
 8003c3c:	20001230 	.word	0x20001230

08003c40 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003c40:	b580      	push	{r7, lr}
 8003c42:	b084      	sub	sp, #16
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003c48:	f7ff ffee 	bl	8003c28 <HAL_GetTick>
 8003c4c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c58:	d005      	beq.n	8003c66 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8003c5a:	4b0a      	ldr	r3, [pc, #40]	; (8003c84 <HAL_Delay+0x44>)
 8003c5c:	781b      	ldrb	r3, [r3, #0]
 8003c5e:	461a      	mov	r2, r3
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	4413      	add	r3, r2
 8003c64:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003c66:	bf00      	nop
 8003c68:	f7ff ffde 	bl	8003c28 <HAL_GetTick>
 8003c6c:	4602      	mov	r2, r0
 8003c6e:	68bb      	ldr	r3, [r7, #8]
 8003c70:	1ad3      	subs	r3, r2, r3
 8003c72:	68fa      	ldr	r2, [r7, #12]
 8003c74:	429a      	cmp	r2, r3
 8003c76:	d8f7      	bhi.n	8003c68 <HAL_Delay+0x28>
  {
  }
}
 8003c78:	bf00      	nop
 8003c7a:	bf00      	nop
 8003c7c:	3710      	adds	r7, #16
 8003c7e:	46bd      	mov	sp, r7
 8003c80:	bd80      	pop	{r7, pc}
 8003c82:	bf00      	nop
 8003c84:	20000008 	.word	0x20000008

08003c88 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003c88:	b480      	push	{r7}
 8003c8a:	b085      	sub	sp, #20
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	f003 0307 	and.w	r3, r3, #7
 8003c96:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003c98:	4b0c      	ldr	r3, [pc, #48]	; (8003ccc <__NVIC_SetPriorityGrouping+0x44>)
 8003c9a:	68db      	ldr	r3, [r3, #12]
 8003c9c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003c9e:	68ba      	ldr	r2, [r7, #8]
 8003ca0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003ca4:	4013      	ands	r3, r2
 8003ca6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003cac:	68bb      	ldr	r3, [r7, #8]
 8003cae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003cb0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003cb4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003cb8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003cba:	4a04      	ldr	r2, [pc, #16]	; (8003ccc <__NVIC_SetPriorityGrouping+0x44>)
 8003cbc:	68bb      	ldr	r3, [r7, #8]
 8003cbe:	60d3      	str	r3, [r2, #12]
}
 8003cc0:	bf00      	nop
 8003cc2:	3714      	adds	r7, #20
 8003cc4:	46bd      	mov	sp, r7
 8003cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cca:	4770      	bx	lr
 8003ccc:	e000ed00 	.word	0xe000ed00

08003cd0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003cd0:	b480      	push	{r7}
 8003cd2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003cd4:	4b04      	ldr	r3, [pc, #16]	; (8003ce8 <__NVIC_GetPriorityGrouping+0x18>)
 8003cd6:	68db      	ldr	r3, [r3, #12]
 8003cd8:	0a1b      	lsrs	r3, r3, #8
 8003cda:	f003 0307 	and.w	r3, r3, #7
}
 8003cde:	4618      	mov	r0, r3
 8003ce0:	46bd      	mov	sp, r7
 8003ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce6:	4770      	bx	lr
 8003ce8:	e000ed00 	.word	0xe000ed00

08003cec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003cec:	b480      	push	{r7}
 8003cee:	b083      	sub	sp, #12
 8003cf0:	af00      	add	r7, sp, #0
 8003cf2:	4603      	mov	r3, r0
 8003cf4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003cf6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	db0b      	blt.n	8003d16 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003cfe:	79fb      	ldrb	r3, [r7, #7]
 8003d00:	f003 021f 	and.w	r2, r3, #31
 8003d04:	4907      	ldr	r1, [pc, #28]	; (8003d24 <__NVIC_EnableIRQ+0x38>)
 8003d06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d0a:	095b      	lsrs	r3, r3, #5
 8003d0c:	2001      	movs	r0, #1
 8003d0e:	fa00 f202 	lsl.w	r2, r0, r2
 8003d12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003d16:	bf00      	nop
 8003d18:	370c      	adds	r7, #12
 8003d1a:	46bd      	mov	sp, r7
 8003d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d20:	4770      	bx	lr
 8003d22:	bf00      	nop
 8003d24:	e000e100 	.word	0xe000e100

08003d28 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003d28:	b480      	push	{r7}
 8003d2a:	b083      	sub	sp, #12
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	4603      	mov	r3, r0
 8003d30:	6039      	str	r1, [r7, #0]
 8003d32:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003d34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	db0a      	blt.n	8003d52 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003d3c:	683b      	ldr	r3, [r7, #0]
 8003d3e:	b2da      	uxtb	r2, r3
 8003d40:	490c      	ldr	r1, [pc, #48]	; (8003d74 <__NVIC_SetPriority+0x4c>)
 8003d42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d46:	0112      	lsls	r2, r2, #4
 8003d48:	b2d2      	uxtb	r2, r2
 8003d4a:	440b      	add	r3, r1
 8003d4c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003d50:	e00a      	b.n	8003d68 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003d52:	683b      	ldr	r3, [r7, #0]
 8003d54:	b2da      	uxtb	r2, r3
 8003d56:	4908      	ldr	r1, [pc, #32]	; (8003d78 <__NVIC_SetPriority+0x50>)
 8003d58:	79fb      	ldrb	r3, [r7, #7]
 8003d5a:	f003 030f 	and.w	r3, r3, #15
 8003d5e:	3b04      	subs	r3, #4
 8003d60:	0112      	lsls	r2, r2, #4
 8003d62:	b2d2      	uxtb	r2, r2
 8003d64:	440b      	add	r3, r1
 8003d66:	761a      	strb	r2, [r3, #24]
}
 8003d68:	bf00      	nop
 8003d6a:	370c      	adds	r7, #12
 8003d6c:	46bd      	mov	sp, r7
 8003d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d72:	4770      	bx	lr
 8003d74:	e000e100 	.word	0xe000e100
 8003d78:	e000ed00 	.word	0xe000ed00

08003d7c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003d7c:	b480      	push	{r7}
 8003d7e:	b089      	sub	sp, #36	; 0x24
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	60f8      	str	r0, [r7, #12]
 8003d84:	60b9      	str	r1, [r7, #8]
 8003d86:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	f003 0307 	and.w	r3, r3, #7
 8003d8e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003d90:	69fb      	ldr	r3, [r7, #28]
 8003d92:	f1c3 0307 	rsb	r3, r3, #7
 8003d96:	2b04      	cmp	r3, #4
 8003d98:	bf28      	it	cs
 8003d9a:	2304      	movcs	r3, #4
 8003d9c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003d9e:	69fb      	ldr	r3, [r7, #28]
 8003da0:	3304      	adds	r3, #4
 8003da2:	2b06      	cmp	r3, #6
 8003da4:	d902      	bls.n	8003dac <NVIC_EncodePriority+0x30>
 8003da6:	69fb      	ldr	r3, [r7, #28]
 8003da8:	3b03      	subs	r3, #3
 8003daa:	e000      	b.n	8003dae <NVIC_EncodePriority+0x32>
 8003dac:	2300      	movs	r3, #0
 8003dae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003db0:	f04f 32ff 	mov.w	r2, #4294967295
 8003db4:	69bb      	ldr	r3, [r7, #24]
 8003db6:	fa02 f303 	lsl.w	r3, r2, r3
 8003dba:	43da      	mvns	r2, r3
 8003dbc:	68bb      	ldr	r3, [r7, #8]
 8003dbe:	401a      	ands	r2, r3
 8003dc0:	697b      	ldr	r3, [r7, #20]
 8003dc2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003dc4:	f04f 31ff 	mov.w	r1, #4294967295
 8003dc8:	697b      	ldr	r3, [r7, #20]
 8003dca:	fa01 f303 	lsl.w	r3, r1, r3
 8003dce:	43d9      	mvns	r1, r3
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003dd4:	4313      	orrs	r3, r2
         );
}
 8003dd6:	4618      	mov	r0, r3
 8003dd8:	3724      	adds	r7, #36	; 0x24
 8003dda:	46bd      	mov	sp, r7
 8003ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de0:	4770      	bx	lr

08003de2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003de2:	b580      	push	{r7, lr}
 8003de4:	b082      	sub	sp, #8
 8003de6:	af00      	add	r7, sp, #0
 8003de8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003dea:	6878      	ldr	r0, [r7, #4]
 8003dec:	f7ff ff4c 	bl	8003c88 <__NVIC_SetPriorityGrouping>
}
 8003df0:	bf00      	nop
 8003df2:	3708      	adds	r7, #8
 8003df4:	46bd      	mov	sp, r7
 8003df6:	bd80      	pop	{r7, pc}

08003df8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003df8:	b580      	push	{r7, lr}
 8003dfa:	b086      	sub	sp, #24
 8003dfc:	af00      	add	r7, sp, #0
 8003dfe:	4603      	mov	r3, r0
 8003e00:	60b9      	str	r1, [r7, #8]
 8003e02:	607a      	str	r2, [r7, #4]
 8003e04:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003e06:	2300      	movs	r3, #0
 8003e08:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003e0a:	f7ff ff61 	bl	8003cd0 <__NVIC_GetPriorityGrouping>
 8003e0e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003e10:	687a      	ldr	r2, [r7, #4]
 8003e12:	68b9      	ldr	r1, [r7, #8]
 8003e14:	6978      	ldr	r0, [r7, #20]
 8003e16:	f7ff ffb1 	bl	8003d7c <NVIC_EncodePriority>
 8003e1a:	4602      	mov	r2, r0
 8003e1c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003e20:	4611      	mov	r1, r2
 8003e22:	4618      	mov	r0, r3
 8003e24:	f7ff ff80 	bl	8003d28 <__NVIC_SetPriority>
}
 8003e28:	bf00      	nop
 8003e2a:	3718      	adds	r7, #24
 8003e2c:	46bd      	mov	sp, r7
 8003e2e:	bd80      	pop	{r7, pc}

08003e30 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003e30:	b580      	push	{r7, lr}
 8003e32:	b082      	sub	sp, #8
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	4603      	mov	r3, r0
 8003e38:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003e3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e3e:	4618      	mov	r0, r3
 8003e40:	f7ff ff54 	bl	8003cec <__NVIC_EnableIRQ>
}
 8003e44:	bf00      	nop
 8003e46:	3708      	adds	r7, #8
 8003e48:	46bd      	mov	sp, r7
 8003e4a:	bd80      	pop	{r7, pc}

08003e4c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003e4c:	b480      	push	{r7}
 8003e4e:	b087      	sub	sp, #28
 8003e50:	af00      	add	r7, sp, #0
 8003e52:	6078      	str	r0, [r7, #4]
 8003e54:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003e56:	2300      	movs	r3, #0
 8003e58:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003e5a:	e148      	b.n	80040ee <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003e5c:	683b      	ldr	r3, [r7, #0]
 8003e5e:	681a      	ldr	r2, [r3, #0]
 8003e60:	2101      	movs	r1, #1
 8003e62:	697b      	ldr	r3, [r7, #20]
 8003e64:	fa01 f303 	lsl.w	r3, r1, r3
 8003e68:	4013      	ands	r3, r2
 8003e6a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	f000 813a 	beq.w	80040e8 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003e74:	683b      	ldr	r3, [r7, #0]
 8003e76:	685b      	ldr	r3, [r3, #4]
 8003e78:	f003 0303 	and.w	r3, r3, #3
 8003e7c:	2b01      	cmp	r3, #1
 8003e7e:	d005      	beq.n	8003e8c <HAL_GPIO_Init+0x40>
 8003e80:	683b      	ldr	r3, [r7, #0]
 8003e82:	685b      	ldr	r3, [r3, #4]
 8003e84:	f003 0303 	and.w	r3, r3, #3
 8003e88:	2b02      	cmp	r3, #2
 8003e8a:	d130      	bne.n	8003eee <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	689b      	ldr	r3, [r3, #8]
 8003e90:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003e92:	697b      	ldr	r3, [r7, #20]
 8003e94:	005b      	lsls	r3, r3, #1
 8003e96:	2203      	movs	r2, #3
 8003e98:	fa02 f303 	lsl.w	r3, r2, r3
 8003e9c:	43db      	mvns	r3, r3
 8003e9e:	693a      	ldr	r2, [r7, #16]
 8003ea0:	4013      	ands	r3, r2
 8003ea2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003ea4:	683b      	ldr	r3, [r7, #0]
 8003ea6:	68da      	ldr	r2, [r3, #12]
 8003ea8:	697b      	ldr	r3, [r7, #20]
 8003eaa:	005b      	lsls	r3, r3, #1
 8003eac:	fa02 f303 	lsl.w	r3, r2, r3
 8003eb0:	693a      	ldr	r2, [r7, #16]
 8003eb2:	4313      	orrs	r3, r2
 8003eb4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	693a      	ldr	r2, [r7, #16]
 8003eba:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	685b      	ldr	r3, [r3, #4]
 8003ec0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003ec2:	2201      	movs	r2, #1
 8003ec4:	697b      	ldr	r3, [r7, #20]
 8003ec6:	fa02 f303 	lsl.w	r3, r2, r3
 8003eca:	43db      	mvns	r3, r3
 8003ecc:	693a      	ldr	r2, [r7, #16]
 8003ece:	4013      	ands	r3, r2
 8003ed0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003ed2:	683b      	ldr	r3, [r7, #0]
 8003ed4:	685b      	ldr	r3, [r3, #4]
 8003ed6:	091b      	lsrs	r3, r3, #4
 8003ed8:	f003 0201 	and.w	r2, r3, #1
 8003edc:	697b      	ldr	r3, [r7, #20]
 8003ede:	fa02 f303 	lsl.w	r3, r2, r3
 8003ee2:	693a      	ldr	r2, [r7, #16]
 8003ee4:	4313      	orrs	r3, r2
 8003ee6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	693a      	ldr	r2, [r7, #16]
 8003eec:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003eee:	683b      	ldr	r3, [r7, #0]
 8003ef0:	685b      	ldr	r3, [r3, #4]
 8003ef2:	f003 0303 	and.w	r3, r3, #3
 8003ef6:	2b03      	cmp	r3, #3
 8003ef8:	d017      	beq.n	8003f2a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	68db      	ldr	r3, [r3, #12]
 8003efe:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003f00:	697b      	ldr	r3, [r7, #20]
 8003f02:	005b      	lsls	r3, r3, #1
 8003f04:	2203      	movs	r2, #3
 8003f06:	fa02 f303 	lsl.w	r3, r2, r3
 8003f0a:	43db      	mvns	r3, r3
 8003f0c:	693a      	ldr	r2, [r7, #16]
 8003f0e:	4013      	ands	r3, r2
 8003f10:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003f12:	683b      	ldr	r3, [r7, #0]
 8003f14:	689a      	ldr	r2, [r3, #8]
 8003f16:	697b      	ldr	r3, [r7, #20]
 8003f18:	005b      	lsls	r3, r3, #1
 8003f1a:	fa02 f303 	lsl.w	r3, r2, r3
 8003f1e:	693a      	ldr	r2, [r7, #16]
 8003f20:	4313      	orrs	r3, r2
 8003f22:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	693a      	ldr	r2, [r7, #16]
 8003f28:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003f2a:	683b      	ldr	r3, [r7, #0]
 8003f2c:	685b      	ldr	r3, [r3, #4]
 8003f2e:	f003 0303 	and.w	r3, r3, #3
 8003f32:	2b02      	cmp	r3, #2
 8003f34:	d123      	bne.n	8003f7e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003f36:	697b      	ldr	r3, [r7, #20]
 8003f38:	08da      	lsrs	r2, r3, #3
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	3208      	adds	r2, #8
 8003f3e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003f42:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003f44:	697b      	ldr	r3, [r7, #20]
 8003f46:	f003 0307 	and.w	r3, r3, #7
 8003f4a:	009b      	lsls	r3, r3, #2
 8003f4c:	220f      	movs	r2, #15
 8003f4e:	fa02 f303 	lsl.w	r3, r2, r3
 8003f52:	43db      	mvns	r3, r3
 8003f54:	693a      	ldr	r2, [r7, #16]
 8003f56:	4013      	ands	r3, r2
 8003f58:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003f5a:	683b      	ldr	r3, [r7, #0]
 8003f5c:	691a      	ldr	r2, [r3, #16]
 8003f5e:	697b      	ldr	r3, [r7, #20]
 8003f60:	f003 0307 	and.w	r3, r3, #7
 8003f64:	009b      	lsls	r3, r3, #2
 8003f66:	fa02 f303 	lsl.w	r3, r2, r3
 8003f6a:	693a      	ldr	r2, [r7, #16]
 8003f6c:	4313      	orrs	r3, r2
 8003f6e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003f70:	697b      	ldr	r3, [r7, #20]
 8003f72:	08da      	lsrs	r2, r3, #3
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	3208      	adds	r2, #8
 8003f78:	6939      	ldr	r1, [r7, #16]
 8003f7a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003f84:	697b      	ldr	r3, [r7, #20]
 8003f86:	005b      	lsls	r3, r3, #1
 8003f88:	2203      	movs	r2, #3
 8003f8a:	fa02 f303 	lsl.w	r3, r2, r3
 8003f8e:	43db      	mvns	r3, r3
 8003f90:	693a      	ldr	r2, [r7, #16]
 8003f92:	4013      	ands	r3, r2
 8003f94:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003f96:	683b      	ldr	r3, [r7, #0]
 8003f98:	685b      	ldr	r3, [r3, #4]
 8003f9a:	f003 0203 	and.w	r2, r3, #3
 8003f9e:	697b      	ldr	r3, [r7, #20]
 8003fa0:	005b      	lsls	r3, r3, #1
 8003fa2:	fa02 f303 	lsl.w	r3, r2, r3
 8003fa6:	693a      	ldr	r2, [r7, #16]
 8003fa8:	4313      	orrs	r3, r2
 8003faa:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	693a      	ldr	r2, [r7, #16]
 8003fb0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003fb2:	683b      	ldr	r3, [r7, #0]
 8003fb4:	685b      	ldr	r3, [r3, #4]
 8003fb6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	f000 8094 	beq.w	80040e8 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003fc0:	4b52      	ldr	r3, [pc, #328]	; (800410c <HAL_GPIO_Init+0x2c0>)
 8003fc2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003fc4:	4a51      	ldr	r2, [pc, #324]	; (800410c <HAL_GPIO_Init+0x2c0>)
 8003fc6:	f043 0301 	orr.w	r3, r3, #1
 8003fca:	6613      	str	r3, [r2, #96]	; 0x60
 8003fcc:	4b4f      	ldr	r3, [pc, #316]	; (800410c <HAL_GPIO_Init+0x2c0>)
 8003fce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003fd0:	f003 0301 	and.w	r3, r3, #1
 8003fd4:	60bb      	str	r3, [r7, #8]
 8003fd6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003fd8:	4a4d      	ldr	r2, [pc, #308]	; (8004110 <HAL_GPIO_Init+0x2c4>)
 8003fda:	697b      	ldr	r3, [r7, #20]
 8003fdc:	089b      	lsrs	r3, r3, #2
 8003fde:	3302      	adds	r3, #2
 8003fe0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003fe4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003fe6:	697b      	ldr	r3, [r7, #20]
 8003fe8:	f003 0303 	and.w	r3, r3, #3
 8003fec:	009b      	lsls	r3, r3, #2
 8003fee:	220f      	movs	r2, #15
 8003ff0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ff4:	43db      	mvns	r3, r3
 8003ff6:	693a      	ldr	r2, [r7, #16]
 8003ff8:	4013      	ands	r3, r2
 8003ffa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8004002:	d00d      	beq.n	8004020 <HAL_GPIO_Init+0x1d4>
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	4a43      	ldr	r2, [pc, #268]	; (8004114 <HAL_GPIO_Init+0x2c8>)
 8004008:	4293      	cmp	r3, r2
 800400a:	d007      	beq.n	800401c <HAL_GPIO_Init+0x1d0>
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	4a42      	ldr	r2, [pc, #264]	; (8004118 <HAL_GPIO_Init+0x2cc>)
 8004010:	4293      	cmp	r3, r2
 8004012:	d101      	bne.n	8004018 <HAL_GPIO_Init+0x1cc>
 8004014:	2302      	movs	r3, #2
 8004016:	e004      	b.n	8004022 <HAL_GPIO_Init+0x1d6>
 8004018:	2307      	movs	r3, #7
 800401a:	e002      	b.n	8004022 <HAL_GPIO_Init+0x1d6>
 800401c:	2301      	movs	r3, #1
 800401e:	e000      	b.n	8004022 <HAL_GPIO_Init+0x1d6>
 8004020:	2300      	movs	r3, #0
 8004022:	697a      	ldr	r2, [r7, #20]
 8004024:	f002 0203 	and.w	r2, r2, #3
 8004028:	0092      	lsls	r2, r2, #2
 800402a:	4093      	lsls	r3, r2
 800402c:	693a      	ldr	r2, [r7, #16]
 800402e:	4313      	orrs	r3, r2
 8004030:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004032:	4937      	ldr	r1, [pc, #220]	; (8004110 <HAL_GPIO_Init+0x2c4>)
 8004034:	697b      	ldr	r3, [r7, #20]
 8004036:	089b      	lsrs	r3, r3, #2
 8004038:	3302      	adds	r3, #2
 800403a:	693a      	ldr	r2, [r7, #16]
 800403c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004040:	4b36      	ldr	r3, [pc, #216]	; (800411c <HAL_GPIO_Init+0x2d0>)
 8004042:	689b      	ldr	r3, [r3, #8]
 8004044:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	43db      	mvns	r3, r3
 800404a:	693a      	ldr	r2, [r7, #16]
 800404c:	4013      	ands	r3, r2
 800404e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004050:	683b      	ldr	r3, [r7, #0]
 8004052:	685b      	ldr	r3, [r3, #4]
 8004054:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004058:	2b00      	cmp	r3, #0
 800405a:	d003      	beq.n	8004064 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 800405c:	693a      	ldr	r2, [r7, #16]
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	4313      	orrs	r3, r2
 8004062:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004064:	4a2d      	ldr	r2, [pc, #180]	; (800411c <HAL_GPIO_Init+0x2d0>)
 8004066:	693b      	ldr	r3, [r7, #16]
 8004068:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800406a:	4b2c      	ldr	r3, [pc, #176]	; (800411c <HAL_GPIO_Init+0x2d0>)
 800406c:	68db      	ldr	r3, [r3, #12]
 800406e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	43db      	mvns	r3, r3
 8004074:	693a      	ldr	r2, [r7, #16]
 8004076:	4013      	ands	r3, r2
 8004078:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800407a:	683b      	ldr	r3, [r7, #0]
 800407c:	685b      	ldr	r3, [r3, #4]
 800407e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004082:	2b00      	cmp	r3, #0
 8004084:	d003      	beq.n	800408e <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8004086:	693a      	ldr	r2, [r7, #16]
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	4313      	orrs	r3, r2
 800408c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800408e:	4a23      	ldr	r2, [pc, #140]	; (800411c <HAL_GPIO_Init+0x2d0>)
 8004090:	693b      	ldr	r3, [r7, #16]
 8004092:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8004094:	4b21      	ldr	r3, [pc, #132]	; (800411c <HAL_GPIO_Init+0x2d0>)
 8004096:	685b      	ldr	r3, [r3, #4]
 8004098:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	43db      	mvns	r3, r3
 800409e:	693a      	ldr	r2, [r7, #16]
 80040a0:	4013      	ands	r3, r2
 80040a2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80040a4:	683b      	ldr	r3, [r7, #0]
 80040a6:	685b      	ldr	r3, [r3, #4]
 80040a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d003      	beq.n	80040b8 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 80040b0:	693a      	ldr	r2, [r7, #16]
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	4313      	orrs	r3, r2
 80040b6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80040b8:	4a18      	ldr	r2, [pc, #96]	; (800411c <HAL_GPIO_Init+0x2d0>)
 80040ba:	693b      	ldr	r3, [r7, #16]
 80040bc:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80040be:	4b17      	ldr	r3, [pc, #92]	; (800411c <HAL_GPIO_Init+0x2d0>)
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	43db      	mvns	r3, r3
 80040c8:	693a      	ldr	r2, [r7, #16]
 80040ca:	4013      	ands	r3, r2
 80040cc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80040ce:	683b      	ldr	r3, [r7, #0]
 80040d0:	685b      	ldr	r3, [r3, #4]
 80040d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d003      	beq.n	80040e2 <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 80040da:	693a      	ldr	r2, [r7, #16]
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	4313      	orrs	r3, r2
 80040e0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80040e2:	4a0e      	ldr	r2, [pc, #56]	; (800411c <HAL_GPIO_Init+0x2d0>)
 80040e4:	693b      	ldr	r3, [r7, #16]
 80040e6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80040e8:	697b      	ldr	r3, [r7, #20]
 80040ea:	3301      	adds	r3, #1
 80040ec:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80040ee:	683b      	ldr	r3, [r7, #0]
 80040f0:	681a      	ldr	r2, [r3, #0]
 80040f2:	697b      	ldr	r3, [r7, #20]
 80040f4:	fa22 f303 	lsr.w	r3, r2, r3
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	f47f aeaf 	bne.w	8003e5c <HAL_GPIO_Init+0x10>
  }
}
 80040fe:	bf00      	nop
 8004100:	bf00      	nop
 8004102:	371c      	adds	r7, #28
 8004104:	46bd      	mov	sp, r7
 8004106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800410a:	4770      	bx	lr
 800410c:	40021000 	.word	0x40021000
 8004110:	40010000 	.word	0x40010000
 8004114:	48000400 	.word	0x48000400
 8004118:	48000800 	.word	0x48000800
 800411c:	40010400 	.word	0x40010400

08004120 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004120:	b480      	push	{r7}
 8004122:	b083      	sub	sp, #12
 8004124:	af00      	add	r7, sp, #0
 8004126:	6078      	str	r0, [r7, #4]
 8004128:	460b      	mov	r3, r1
 800412a:	807b      	strh	r3, [r7, #2]
 800412c:	4613      	mov	r3, r2
 800412e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004130:	787b      	ldrb	r3, [r7, #1]
 8004132:	2b00      	cmp	r3, #0
 8004134:	d003      	beq.n	800413e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004136:	887a      	ldrh	r2, [r7, #2]
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800413c:	e002      	b.n	8004144 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800413e:	887a      	ldrh	r2, [r7, #2]
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004144:	bf00      	nop
 8004146:	370c      	adds	r7, #12
 8004148:	46bd      	mov	sp, r7
 800414a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800414e:	4770      	bx	lr

08004150 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004150:	b580      	push	{r7, lr}
 8004152:	b082      	sub	sp, #8
 8004154:	af00      	add	r7, sp, #0
 8004156:	4603      	mov	r3, r0
 8004158:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800415a:	4b08      	ldr	r3, [pc, #32]	; (800417c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800415c:	695a      	ldr	r2, [r3, #20]
 800415e:	88fb      	ldrh	r3, [r7, #6]
 8004160:	4013      	ands	r3, r2
 8004162:	2b00      	cmp	r3, #0
 8004164:	d006      	beq.n	8004174 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004166:	4a05      	ldr	r2, [pc, #20]	; (800417c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004168:	88fb      	ldrh	r3, [r7, #6]
 800416a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800416c:	88fb      	ldrh	r3, [r7, #6]
 800416e:	4618      	mov	r0, r3
 8004170:	f7fc ff5a 	bl	8001028 <HAL_GPIO_EXTI_Callback>
  }
}
 8004174:	bf00      	nop
 8004176:	3708      	adds	r7, #8
 8004178:	46bd      	mov	sp, r7
 800417a:	bd80      	pop	{r7, pc}
 800417c:	40010400 	.word	0x40010400

08004180 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004180:	b580      	push	{r7, lr}
 8004182:	b082      	sub	sp, #8
 8004184:	af00      	add	r7, sp, #0
 8004186:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	2b00      	cmp	r3, #0
 800418c:	d101      	bne.n	8004192 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800418e:	2301      	movs	r3, #1
 8004190:	e081      	b.n	8004296 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004198:	b2db      	uxtb	r3, r3
 800419a:	2b00      	cmp	r3, #0
 800419c:	d106      	bne.n	80041ac <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	2200      	movs	r2, #0
 80041a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80041a6:	6878      	ldr	r0, [r7, #4]
 80041a8:	f7fc ffb4 	bl	8001114 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	2224      	movs	r2, #36	; 0x24
 80041b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	681a      	ldr	r2, [r3, #0]
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f022 0201 	bic.w	r2, r2, #1
 80041c2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	685a      	ldr	r2, [r3, #4]
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80041d0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	689a      	ldr	r2, [r3, #8]
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80041e0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	68db      	ldr	r3, [r3, #12]
 80041e6:	2b01      	cmp	r3, #1
 80041e8:	d107      	bne.n	80041fa <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	689a      	ldr	r2, [r3, #8]
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80041f6:	609a      	str	r2, [r3, #8]
 80041f8:	e006      	b.n	8004208 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	689a      	ldr	r2, [r3, #8]
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8004206:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	68db      	ldr	r3, [r3, #12]
 800420c:	2b02      	cmp	r3, #2
 800420e:	d104      	bne.n	800421a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004218:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	685b      	ldr	r3, [r3, #4]
 8004220:	687a      	ldr	r2, [r7, #4]
 8004222:	6812      	ldr	r2, [r2, #0]
 8004224:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004228:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800422c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	68da      	ldr	r2, [r3, #12]
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800423c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	691a      	ldr	r2, [r3, #16]
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	695b      	ldr	r3, [r3, #20]
 8004246:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	699b      	ldr	r3, [r3, #24]
 800424e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	430a      	orrs	r2, r1
 8004256:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	69d9      	ldr	r1, [r3, #28]
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	6a1a      	ldr	r2, [r3, #32]
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	430a      	orrs	r2, r1
 8004266:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	681a      	ldr	r2, [r3, #0]
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	f042 0201 	orr.w	r2, r2, #1
 8004276:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	2200      	movs	r2, #0
 800427c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	2220      	movs	r2, #32
 8004282:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	2200      	movs	r2, #0
 800428a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	2200      	movs	r2, #0
 8004290:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8004294:	2300      	movs	r3, #0
}
 8004296:	4618      	mov	r0, r3
 8004298:	3708      	adds	r7, #8
 800429a:	46bd      	mov	sp, r7
 800429c:	bd80      	pop	{r7, pc}
	...

080042a0 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80042a0:	b580      	push	{r7, lr}
 80042a2:	b088      	sub	sp, #32
 80042a4:	af02      	add	r7, sp, #8
 80042a6:	60f8      	str	r0, [r7, #12]
 80042a8:	607a      	str	r2, [r7, #4]
 80042aa:	461a      	mov	r2, r3
 80042ac:	460b      	mov	r3, r1
 80042ae:	817b      	strh	r3, [r7, #10]
 80042b0:	4613      	mov	r3, r2
 80042b2:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80042ba:	b2db      	uxtb	r3, r3
 80042bc:	2b20      	cmp	r3, #32
 80042be:	f040 80da 	bne.w	8004476 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80042c8:	2b01      	cmp	r3, #1
 80042ca:	d101      	bne.n	80042d0 <HAL_I2C_Master_Transmit+0x30>
 80042cc:	2302      	movs	r3, #2
 80042ce:	e0d3      	b.n	8004478 <HAL_I2C_Master_Transmit+0x1d8>
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	2201      	movs	r2, #1
 80042d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80042d8:	f7ff fca6 	bl	8003c28 <HAL_GetTick>
 80042dc:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80042de:	697b      	ldr	r3, [r7, #20]
 80042e0:	9300      	str	r3, [sp, #0]
 80042e2:	2319      	movs	r3, #25
 80042e4:	2201      	movs	r2, #1
 80042e6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80042ea:	68f8      	ldr	r0, [r7, #12]
 80042ec:	f000 f9e6 	bl	80046bc <I2C_WaitOnFlagUntilTimeout>
 80042f0:	4603      	mov	r3, r0
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d001      	beq.n	80042fa <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 80042f6:	2301      	movs	r3, #1
 80042f8:	e0be      	b.n	8004478 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	2221      	movs	r2, #33	; 0x21
 80042fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	2210      	movs	r2, #16
 8004306:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	2200      	movs	r2, #0
 800430e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	687a      	ldr	r2, [r7, #4]
 8004314:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	893a      	ldrh	r2, [r7, #8]
 800431a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	2200      	movs	r2, #0
 8004320:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004326:	b29b      	uxth	r3, r3
 8004328:	2bff      	cmp	r3, #255	; 0xff
 800432a:	d90e      	bls.n	800434a <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	22ff      	movs	r2, #255	; 0xff
 8004330:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004336:	b2da      	uxtb	r2, r3
 8004338:	8979      	ldrh	r1, [r7, #10]
 800433a:	4b51      	ldr	r3, [pc, #324]	; (8004480 <HAL_I2C_Master_Transmit+0x1e0>)
 800433c:	9300      	str	r3, [sp, #0]
 800433e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004342:	68f8      	ldr	r0, [r7, #12]
 8004344:	f000 fbdc 	bl	8004b00 <I2C_TransferConfig>
 8004348:	e06c      	b.n	8004424 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800434e:	b29a      	uxth	r2, r3
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004358:	b2da      	uxtb	r2, r3
 800435a:	8979      	ldrh	r1, [r7, #10]
 800435c:	4b48      	ldr	r3, [pc, #288]	; (8004480 <HAL_I2C_Master_Transmit+0x1e0>)
 800435e:	9300      	str	r3, [sp, #0]
 8004360:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004364:	68f8      	ldr	r0, [r7, #12]
 8004366:	f000 fbcb 	bl	8004b00 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 800436a:	e05b      	b.n	8004424 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800436c:	697a      	ldr	r2, [r7, #20]
 800436e:	6a39      	ldr	r1, [r7, #32]
 8004370:	68f8      	ldr	r0, [r7, #12]
 8004372:	f000 f9e3 	bl	800473c <I2C_WaitOnTXISFlagUntilTimeout>
 8004376:	4603      	mov	r3, r0
 8004378:	2b00      	cmp	r3, #0
 800437a:	d001      	beq.n	8004380 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 800437c:	2301      	movs	r3, #1
 800437e:	e07b      	b.n	8004478 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004384:	781a      	ldrb	r2, [r3, #0]
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004390:	1c5a      	adds	r2, r3, #1
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800439a:	b29b      	uxth	r3, r3
 800439c:	3b01      	subs	r3, #1
 800439e:	b29a      	uxth	r2, r3
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043a8:	3b01      	subs	r3, #1
 80043aa:	b29a      	uxth	r2, r3
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043b4:	b29b      	uxth	r3, r3
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d034      	beq.n	8004424 <HAL_I2C_Master_Transmit+0x184>
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d130      	bne.n	8004424 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80043c2:	697b      	ldr	r3, [r7, #20]
 80043c4:	9300      	str	r3, [sp, #0]
 80043c6:	6a3b      	ldr	r3, [r7, #32]
 80043c8:	2200      	movs	r2, #0
 80043ca:	2180      	movs	r1, #128	; 0x80
 80043cc:	68f8      	ldr	r0, [r7, #12]
 80043ce:	f000 f975 	bl	80046bc <I2C_WaitOnFlagUntilTimeout>
 80043d2:	4603      	mov	r3, r0
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d001      	beq.n	80043dc <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 80043d8:	2301      	movs	r3, #1
 80043da:	e04d      	b.n	8004478 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043e0:	b29b      	uxth	r3, r3
 80043e2:	2bff      	cmp	r3, #255	; 0xff
 80043e4:	d90e      	bls.n	8004404 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	22ff      	movs	r2, #255	; 0xff
 80043ea:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043f0:	b2da      	uxtb	r2, r3
 80043f2:	8979      	ldrh	r1, [r7, #10]
 80043f4:	2300      	movs	r3, #0
 80043f6:	9300      	str	r3, [sp, #0]
 80043f8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80043fc:	68f8      	ldr	r0, [r7, #12]
 80043fe:	f000 fb7f 	bl	8004b00 <I2C_TransferConfig>
 8004402:	e00f      	b.n	8004424 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004408:	b29a      	uxth	r2, r3
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004412:	b2da      	uxtb	r2, r3
 8004414:	8979      	ldrh	r1, [r7, #10]
 8004416:	2300      	movs	r3, #0
 8004418:	9300      	str	r3, [sp, #0]
 800441a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800441e:	68f8      	ldr	r0, [r7, #12]
 8004420:	f000 fb6e 	bl	8004b00 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004428:	b29b      	uxth	r3, r3
 800442a:	2b00      	cmp	r3, #0
 800442c:	d19e      	bne.n	800436c <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800442e:	697a      	ldr	r2, [r7, #20]
 8004430:	6a39      	ldr	r1, [r7, #32]
 8004432:	68f8      	ldr	r0, [r7, #12]
 8004434:	f000 f9c2 	bl	80047bc <I2C_WaitOnSTOPFlagUntilTimeout>
 8004438:	4603      	mov	r3, r0
 800443a:	2b00      	cmp	r3, #0
 800443c:	d001      	beq.n	8004442 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 800443e:	2301      	movs	r3, #1
 8004440:	e01a      	b.n	8004478 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	2220      	movs	r2, #32
 8004448:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	6859      	ldr	r1, [r3, #4]
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	681a      	ldr	r2, [r3, #0]
 8004454:	4b0b      	ldr	r3, [pc, #44]	; (8004484 <HAL_I2C_Master_Transmit+0x1e4>)
 8004456:	400b      	ands	r3, r1
 8004458:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	2220      	movs	r2, #32
 800445e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	2200      	movs	r2, #0
 8004466:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	2200      	movs	r2, #0
 800446e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004472:	2300      	movs	r3, #0
 8004474:	e000      	b.n	8004478 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8004476:	2302      	movs	r3, #2
  }
}
 8004478:	4618      	mov	r0, r3
 800447a:	3718      	adds	r7, #24
 800447c:	46bd      	mov	sp, r7
 800447e:	bd80      	pop	{r7, pc}
 8004480:	80002000 	.word	0x80002000
 8004484:	fe00e800 	.word	0xfe00e800

08004488 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8004488:	b580      	push	{r7, lr}
 800448a:	b088      	sub	sp, #32
 800448c:	af02      	add	r7, sp, #8
 800448e:	60f8      	str	r0, [r7, #12]
 8004490:	607a      	str	r2, [r7, #4]
 8004492:	461a      	mov	r2, r3
 8004494:	460b      	mov	r3, r1
 8004496:	817b      	strh	r3, [r7, #10]
 8004498:	4613      	mov	r3, r2
 800449a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80044a2:	b2db      	uxtb	r3, r3
 80044a4:	2b20      	cmp	r3, #32
 80044a6:	f040 80db 	bne.w	8004660 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80044b0:	2b01      	cmp	r3, #1
 80044b2:	d101      	bne.n	80044b8 <HAL_I2C_Master_Receive+0x30>
 80044b4:	2302      	movs	r3, #2
 80044b6:	e0d4      	b.n	8004662 <HAL_I2C_Master_Receive+0x1da>
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	2201      	movs	r2, #1
 80044bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80044c0:	f7ff fbb2 	bl	8003c28 <HAL_GetTick>
 80044c4:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80044c6:	697b      	ldr	r3, [r7, #20]
 80044c8:	9300      	str	r3, [sp, #0]
 80044ca:	2319      	movs	r3, #25
 80044cc:	2201      	movs	r2, #1
 80044ce:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80044d2:	68f8      	ldr	r0, [r7, #12]
 80044d4:	f000 f8f2 	bl	80046bc <I2C_WaitOnFlagUntilTimeout>
 80044d8:	4603      	mov	r3, r0
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d001      	beq.n	80044e2 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 80044de:	2301      	movs	r3, #1
 80044e0:	e0bf      	b.n	8004662 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	2222      	movs	r2, #34	; 0x22
 80044e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	2210      	movs	r2, #16
 80044ee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	2200      	movs	r2, #0
 80044f6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	687a      	ldr	r2, [r7, #4]
 80044fc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	893a      	ldrh	r2, [r7, #8]
 8004502:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	2200      	movs	r2, #0
 8004508:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800450e:	b29b      	uxth	r3, r3
 8004510:	2bff      	cmp	r3, #255	; 0xff
 8004512:	d90e      	bls.n	8004532 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	22ff      	movs	r2, #255	; 0xff
 8004518:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800451e:	b2da      	uxtb	r2, r3
 8004520:	8979      	ldrh	r1, [r7, #10]
 8004522:	4b52      	ldr	r3, [pc, #328]	; (800466c <HAL_I2C_Master_Receive+0x1e4>)
 8004524:	9300      	str	r3, [sp, #0]
 8004526:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800452a:	68f8      	ldr	r0, [r7, #12]
 800452c:	f000 fae8 	bl	8004b00 <I2C_TransferConfig>
 8004530:	e06d      	b.n	800460e <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004536:	b29a      	uxth	r2, r3
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004540:	b2da      	uxtb	r2, r3
 8004542:	8979      	ldrh	r1, [r7, #10]
 8004544:	4b49      	ldr	r3, [pc, #292]	; (800466c <HAL_I2C_Master_Receive+0x1e4>)
 8004546:	9300      	str	r3, [sp, #0]
 8004548:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800454c:	68f8      	ldr	r0, [r7, #12]
 800454e:	f000 fad7 	bl	8004b00 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8004552:	e05c      	b.n	800460e <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004554:	697a      	ldr	r2, [r7, #20]
 8004556:	6a39      	ldr	r1, [r7, #32]
 8004558:	68f8      	ldr	r0, [r7, #12]
 800455a:	f000 f96b 	bl	8004834 <I2C_WaitOnRXNEFlagUntilTimeout>
 800455e:	4603      	mov	r3, r0
 8004560:	2b00      	cmp	r3, #0
 8004562:	d001      	beq.n	8004568 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8004564:	2301      	movs	r3, #1
 8004566:	e07c      	b.n	8004662 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004572:	b2d2      	uxtb	r2, r2
 8004574:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800457a:	1c5a      	adds	r2, r3, #1
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004584:	3b01      	subs	r3, #1
 8004586:	b29a      	uxth	r2, r3
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004590:	b29b      	uxth	r3, r3
 8004592:	3b01      	subs	r3, #1
 8004594:	b29a      	uxth	r2, r3
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800459e:	b29b      	uxth	r3, r3
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d034      	beq.n	800460e <HAL_I2C_Master_Receive+0x186>
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d130      	bne.n	800460e <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80045ac:	697b      	ldr	r3, [r7, #20]
 80045ae:	9300      	str	r3, [sp, #0]
 80045b0:	6a3b      	ldr	r3, [r7, #32]
 80045b2:	2200      	movs	r2, #0
 80045b4:	2180      	movs	r1, #128	; 0x80
 80045b6:	68f8      	ldr	r0, [r7, #12]
 80045b8:	f000 f880 	bl	80046bc <I2C_WaitOnFlagUntilTimeout>
 80045bc:	4603      	mov	r3, r0
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d001      	beq.n	80045c6 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 80045c2:	2301      	movs	r3, #1
 80045c4:	e04d      	b.n	8004662 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045ca:	b29b      	uxth	r3, r3
 80045cc:	2bff      	cmp	r3, #255	; 0xff
 80045ce:	d90e      	bls.n	80045ee <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	22ff      	movs	r2, #255	; 0xff
 80045d4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045da:	b2da      	uxtb	r2, r3
 80045dc:	8979      	ldrh	r1, [r7, #10]
 80045de:	2300      	movs	r3, #0
 80045e0:	9300      	str	r3, [sp, #0]
 80045e2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80045e6:	68f8      	ldr	r0, [r7, #12]
 80045e8:	f000 fa8a 	bl	8004b00 <I2C_TransferConfig>
 80045ec:	e00f      	b.n	800460e <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045f2:	b29a      	uxth	r2, r3
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045fc:	b2da      	uxtb	r2, r3
 80045fe:	8979      	ldrh	r1, [r7, #10]
 8004600:	2300      	movs	r3, #0
 8004602:	9300      	str	r3, [sp, #0]
 8004604:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004608:	68f8      	ldr	r0, [r7, #12]
 800460a:	f000 fa79 	bl	8004b00 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004612:	b29b      	uxth	r3, r3
 8004614:	2b00      	cmp	r3, #0
 8004616:	d19d      	bne.n	8004554 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004618:	697a      	ldr	r2, [r7, #20]
 800461a:	6a39      	ldr	r1, [r7, #32]
 800461c:	68f8      	ldr	r0, [r7, #12]
 800461e:	f000 f8cd 	bl	80047bc <I2C_WaitOnSTOPFlagUntilTimeout>
 8004622:	4603      	mov	r3, r0
 8004624:	2b00      	cmp	r3, #0
 8004626:	d001      	beq.n	800462c <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8004628:	2301      	movs	r3, #1
 800462a:	e01a      	b.n	8004662 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	2220      	movs	r2, #32
 8004632:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	6859      	ldr	r1, [r3, #4]
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	681a      	ldr	r2, [r3, #0]
 800463e:	4b0c      	ldr	r3, [pc, #48]	; (8004670 <HAL_I2C_Master_Receive+0x1e8>)
 8004640:	400b      	ands	r3, r1
 8004642:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	2220      	movs	r2, #32
 8004648:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	2200      	movs	r2, #0
 8004650:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	2200      	movs	r2, #0
 8004658:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800465c:	2300      	movs	r3, #0
 800465e:	e000      	b.n	8004662 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8004660:	2302      	movs	r3, #2
  }
}
 8004662:	4618      	mov	r0, r3
 8004664:	3718      	adds	r7, #24
 8004666:	46bd      	mov	sp, r7
 8004668:	bd80      	pop	{r7, pc}
 800466a:	bf00      	nop
 800466c:	80002400 	.word	0x80002400
 8004670:	fe00e800 	.word	0xfe00e800

08004674 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004674:	b480      	push	{r7}
 8004676:	b083      	sub	sp, #12
 8004678:	af00      	add	r7, sp, #0
 800467a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	699b      	ldr	r3, [r3, #24]
 8004682:	f003 0302 	and.w	r3, r3, #2
 8004686:	2b02      	cmp	r3, #2
 8004688:	d103      	bne.n	8004692 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	2200      	movs	r2, #0
 8004690:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	699b      	ldr	r3, [r3, #24]
 8004698:	f003 0301 	and.w	r3, r3, #1
 800469c:	2b01      	cmp	r3, #1
 800469e:	d007      	beq.n	80046b0 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	699a      	ldr	r2, [r3, #24]
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	f042 0201 	orr.w	r2, r2, #1
 80046ae:	619a      	str	r2, [r3, #24]
  }
}
 80046b0:	bf00      	nop
 80046b2:	370c      	adds	r7, #12
 80046b4:	46bd      	mov	sp, r7
 80046b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ba:	4770      	bx	lr

080046bc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80046bc:	b580      	push	{r7, lr}
 80046be:	b084      	sub	sp, #16
 80046c0:	af00      	add	r7, sp, #0
 80046c2:	60f8      	str	r0, [r7, #12]
 80046c4:	60b9      	str	r1, [r7, #8]
 80046c6:	603b      	str	r3, [r7, #0]
 80046c8:	4613      	mov	r3, r2
 80046ca:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80046cc:	e022      	b.n	8004714 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80046ce:	683b      	ldr	r3, [r7, #0]
 80046d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046d4:	d01e      	beq.n	8004714 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80046d6:	f7ff faa7 	bl	8003c28 <HAL_GetTick>
 80046da:	4602      	mov	r2, r0
 80046dc:	69bb      	ldr	r3, [r7, #24]
 80046de:	1ad3      	subs	r3, r2, r3
 80046e0:	683a      	ldr	r2, [r7, #0]
 80046e2:	429a      	cmp	r2, r3
 80046e4:	d302      	bcc.n	80046ec <I2C_WaitOnFlagUntilTimeout+0x30>
 80046e6:	683b      	ldr	r3, [r7, #0]
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d113      	bne.n	8004714 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046f0:	f043 0220 	orr.w	r2, r3, #32
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	2220      	movs	r2, #32
 80046fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	2200      	movs	r2, #0
 8004704:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	2200      	movs	r2, #0
 800470c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8004710:	2301      	movs	r3, #1
 8004712:	e00f      	b.n	8004734 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	699a      	ldr	r2, [r3, #24]
 800471a:	68bb      	ldr	r3, [r7, #8]
 800471c:	4013      	ands	r3, r2
 800471e:	68ba      	ldr	r2, [r7, #8]
 8004720:	429a      	cmp	r2, r3
 8004722:	bf0c      	ite	eq
 8004724:	2301      	moveq	r3, #1
 8004726:	2300      	movne	r3, #0
 8004728:	b2db      	uxtb	r3, r3
 800472a:	461a      	mov	r2, r3
 800472c:	79fb      	ldrb	r3, [r7, #7]
 800472e:	429a      	cmp	r2, r3
 8004730:	d0cd      	beq.n	80046ce <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004732:	2300      	movs	r3, #0
}
 8004734:	4618      	mov	r0, r3
 8004736:	3710      	adds	r7, #16
 8004738:	46bd      	mov	sp, r7
 800473a:	bd80      	pop	{r7, pc}

0800473c <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800473c:	b580      	push	{r7, lr}
 800473e:	b084      	sub	sp, #16
 8004740:	af00      	add	r7, sp, #0
 8004742:	60f8      	str	r0, [r7, #12]
 8004744:	60b9      	str	r1, [r7, #8]
 8004746:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004748:	e02c      	b.n	80047a4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800474a:	687a      	ldr	r2, [r7, #4]
 800474c:	68b9      	ldr	r1, [r7, #8]
 800474e:	68f8      	ldr	r0, [r7, #12]
 8004750:	f000 f8ea 	bl	8004928 <I2C_IsErrorOccurred>
 8004754:	4603      	mov	r3, r0
 8004756:	2b00      	cmp	r3, #0
 8004758:	d001      	beq.n	800475e <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800475a:	2301      	movs	r3, #1
 800475c:	e02a      	b.n	80047b4 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800475e:	68bb      	ldr	r3, [r7, #8]
 8004760:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004764:	d01e      	beq.n	80047a4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004766:	f7ff fa5f 	bl	8003c28 <HAL_GetTick>
 800476a:	4602      	mov	r2, r0
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	1ad3      	subs	r3, r2, r3
 8004770:	68ba      	ldr	r2, [r7, #8]
 8004772:	429a      	cmp	r2, r3
 8004774:	d302      	bcc.n	800477c <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8004776:	68bb      	ldr	r3, [r7, #8]
 8004778:	2b00      	cmp	r3, #0
 800477a:	d113      	bne.n	80047a4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004780:	f043 0220 	orr.w	r2, r3, #32
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	2220      	movs	r2, #32
 800478c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	2200      	movs	r2, #0
 8004794:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	2200      	movs	r2, #0
 800479c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80047a0:	2301      	movs	r3, #1
 80047a2:	e007      	b.n	80047b4 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	699b      	ldr	r3, [r3, #24]
 80047aa:	f003 0302 	and.w	r3, r3, #2
 80047ae:	2b02      	cmp	r3, #2
 80047b0:	d1cb      	bne.n	800474a <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80047b2:	2300      	movs	r3, #0
}
 80047b4:	4618      	mov	r0, r3
 80047b6:	3710      	adds	r7, #16
 80047b8:	46bd      	mov	sp, r7
 80047ba:	bd80      	pop	{r7, pc}

080047bc <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80047bc:	b580      	push	{r7, lr}
 80047be:	b084      	sub	sp, #16
 80047c0:	af00      	add	r7, sp, #0
 80047c2:	60f8      	str	r0, [r7, #12]
 80047c4:	60b9      	str	r1, [r7, #8]
 80047c6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80047c8:	e028      	b.n	800481c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80047ca:	687a      	ldr	r2, [r7, #4]
 80047cc:	68b9      	ldr	r1, [r7, #8]
 80047ce:	68f8      	ldr	r0, [r7, #12]
 80047d0:	f000 f8aa 	bl	8004928 <I2C_IsErrorOccurred>
 80047d4:	4603      	mov	r3, r0
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d001      	beq.n	80047de <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80047da:	2301      	movs	r3, #1
 80047dc:	e026      	b.n	800482c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80047de:	f7ff fa23 	bl	8003c28 <HAL_GetTick>
 80047e2:	4602      	mov	r2, r0
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	1ad3      	subs	r3, r2, r3
 80047e8:	68ba      	ldr	r2, [r7, #8]
 80047ea:	429a      	cmp	r2, r3
 80047ec:	d302      	bcc.n	80047f4 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80047ee:	68bb      	ldr	r3, [r7, #8]
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d113      	bne.n	800481c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047f8:	f043 0220 	orr.w	r2, r3, #32
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	2220      	movs	r2, #32
 8004804:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	2200      	movs	r2, #0
 800480c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	2200      	movs	r2, #0
 8004814:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8004818:	2301      	movs	r3, #1
 800481a:	e007      	b.n	800482c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	699b      	ldr	r3, [r3, #24]
 8004822:	f003 0320 	and.w	r3, r3, #32
 8004826:	2b20      	cmp	r3, #32
 8004828:	d1cf      	bne.n	80047ca <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800482a:	2300      	movs	r3, #0
}
 800482c:	4618      	mov	r0, r3
 800482e:	3710      	adds	r7, #16
 8004830:	46bd      	mov	sp, r7
 8004832:	bd80      	pop	{r7, pc}

08004834 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004834:	b580      	push	{r7, lr}
 8004836:	b084      	sub	sp, #16
 8004838:	af00      	add	r7, sp, #0
 800483a:	60f8      	str	r0, [r7, #12]
 800483c:	60b9      	str	r1, [r7, #8]
 800483e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004840:	e064      	b.n	800490c <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004842:	687a      	ldr	r2, [r7, #4]
 8004844:	68b9      	ldr	r1, [r7, #8]
 8004846:	68f8      	ldr	r0, [r7, #12]
 8004848:	f000 f86e 	bl	8004928 <I2C_IsErrorOccurred>
 800484c:	4603      	mov	r3, r0
 800484e:	2b00      	cmp	r3, #0
 8004850:	d001      	beq.n	8004856 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004852:	2301      	movs	r3, #1
 8004854:	e062      	b.n	800491c <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	699b      	ldr	r3, [r3, #24]
 800485c:	f003 0320 	and.w	r3, r3, #32
 8004860:	2b20      	cmp	r3, #32
 8004862:	d138      	bne.n	80048d6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	699b      	ldr	r3, [r3, #24]
 800486a:	f003 0304 	and.w	r3, r3, #4
 800486e:	2b04      	cmp	r3, #4
 8004870:	d105      	bne.n	800487e <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004876:	2b00      	cmp	r3, #0
 8004878:	d001      	beq.n	800487e <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 800487a:	2300      	movs	r3, #0
 800487c:	e04e      	b.n	800491c <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	699b      	ldr	r3, [r3, #24]
 8004884:	f003 0310 	and.w	r3, r3, #16
 8004888:	2b10      	cmp	r3, #16
 800488a:	d107      	bne.n	800489c <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	2210      	movs	r2, #16
 8004892:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	2204      	movs	r2, #4
 8004898:	645a      	str	r2, [r3, #68]	; 0x44
 800489a:	e002      	b.n	80048a2 <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	2200      	movs	r2, #0
 80048a0:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	2220      	movs	r2, #32
 80048a8:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	6859      	ldr	r1, [r3, #4]
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	681a      	ldr	r2, [r3, #0]
 80048b4:	4b1b      	ldr	r3, [pc, #108]	; (8004924 <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 80048b6:	400b      	ands	r3, r1
 80048b8:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	2220      	movs	r2, #32
 80048be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	2200      	movs	r2, #0
 80048c6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	2200      	movs	r2, #0
 80048ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80048d2:	2301      	movs	r3, #1
 80048d4:	e022      	b.n	800491c <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80048d6:	f7ff f9a7 	bl	8003c28 <HAL_GetTick>
 80048da:	4602      	mov	r2, r0
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	1ad3      	subs	r3, r2, r3
 80048e0:	68ba      	ldr	r2, [r7, #8]
 80048e2:	429a      	cmp	r2, r3
 80048e4:	d302      	bcc.n	80048ec <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 80048e6:	68bb      	ldr	r3, [r7, #8]
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d10f      	bne.n	800490c <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048f0:	f043 0220 	orr.w	r2, r3, #32
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	2220      	movs	r2, #32
 80048fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	2200      	movs	r2, #0
 8004904:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8004908:	2301      	movs	r3, #1
 800490a:	e007      	b.n	800491c <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	699b      	ldr	r3, [r3, #24]
 8004912:	f003 0304 	and.w	r3, r3, #4
 8004916:	2b04      	cmp	r3, #4
 8004918:	d193      	bne.n	8004842 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800491a:	2300      	movs	r3, #0
}
 800491c:	4618      	mov	r0, r3
 800491e:	3710      	adds	r7, #16
 8004920:	46bd      	mov	sp, r7
 8004922:	bd80      	pop	{r7, pc}
 8004924:	fe00e800 	.word	0xfe00e800

08004928 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004928:	b580      	push	{r7, lr}
 800492a:	b08a      	sub	sp, #40	; 0x28
 800492c:	af00      	add	r7, sp, #0
 800492e:	60f8      	str	r0, [r7, #12]
 8004930:	60b9      	str	r1, [r7, #8]
 8004932:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004934:	2300      	movs	r3, #0
 8004936:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	699b      	ldr	r3, [r3, #24]
 8004940:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8004942:	2300      	movs	r3, #0
 8004944:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800494a:	69bb      	ldr	r3, [r7, #24]
 800494c:	f003 0310 	and.w	r3, r3, #16
 8004950:	2b00      	cmp	r3, #0
 8004952:	d075      	beq.n	8004a40 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	2210      	movs	r2, #16
 800495a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800495c:	e056      	b.n	8004a0c <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800495e:	68bb      	ldr	r3, [r7, #8]
 8004960:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004964:	d052      	beq.n	8004a0c <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004966:	f7ff f95f 	bl	8003c28 <HAL_GetTick>
 800496a:	4602      	mov	r2, r0
 800496c:	69fb      	ldr	r3, [r7, #28]
 800496e:	1ad3      	subs	r3, r2, r3
 8004970:	68ba      	ldr	r2, [r7, #8]
 8004972:	429a      	cmp	r2, r3
 8004974:	d302      	bcc.n	800497c <I2C_IsErrorOccurred+0x54>
 8004976:	68bb      	ldr	r3, [r7, #8]
 8004978:	2b00      	cmp	r3, #0
 800497a:	d147      	bne.n	8004a0c <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	685b      	ldr	r3, [r3, #4]
 8004982:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004986:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800498e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	699b      	ldr	r3, [r3, #24]
 8004996:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800499a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800499e:	d12e      	bne.n	80049fe <I2C_IsErrorOccurred+0xd6>
 80049a0:	697b      	ldr	r3, [r7, #20]
 80049a2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80049a6:	d02a      	beq.n	80049fe <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 80049a8:	7cfb      	ldrb	r3, [r7, #19]
 80049aa:	2b20      	cmp	r3, #32
 80049ac:	d027      	beq.n	80049fe <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	685a      	ldr	r2, [r3, #4]
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80049bc:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80049be:	f7ff f933 	bl	8003c28 <HAL_GetTick>
 80049c2:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80049c4:	e01b      	b.n	80049fe <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80049c6:	f7ff f92f 	bl	8003c28 <HAL_GetTick>
 80049ca:	4602      	mov	r2, r0
 80049cc:	69fb      	ldr	r3, [r7, #28]
 80049ce:	1ad3      	subs	r3, r2, r3
 80049d0:	2b19      	cmp	r3, #25
 80049d2:	d914      	bls.n	80049fe <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049d8:	f043 0220 	orr.w	r2, r3, #32
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	2220      	movs	r2, #32
 80049e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	2200      	movs	r2, #0
 80049ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	2200      	movs	r2, #0
 80049f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 80049f8:	2301      	movs	r3, #1
 80049fa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	699b      	ldr	r3, [r3, #24]
 8004a04:	f003 0320 	and.w	r3, r3, #32
 8004a08:	2b20      	cmp	r3, #32
 8004a0a:	d1dc      	bne.n	80049c6 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	699b      	ldr	r3, [r3, #24]
 8004a12:	f003 0320 	and.w	r3, r3, #32
 8004a16:	2b20      	cmp	r3, #32
 8004a18:	d003      	beq.n	8004a22 <I2C_IsErrorOccurred+0xfa>
 8004a1a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d09d      	beq.n	800495e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8004a22:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d103      	bne.n	8004a32 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	2220      	movs	r2, #32
 8004a30:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8004a32:	6a3b      	ldr	r3, [r7, #32]
 8004a34:	f043 0304 	orr.w	r3, r3, #4
 8004a38:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8004a3a:	2301      	movs	r3, #1
 8004a3c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	699b      	ldr	r3, [r3, #24]
 8004a46:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8004a48:	69bb      	ldr	r3, [r7, #24]
 8004a4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d00b      	beq.n	8004a6a <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8004a52:	6a3b      	ldr	r3, [r7, #32]
 8004a54:	f043 0301 	orr.w	r3, r3, #1
 8004a58:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004a62:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004a64:	2301      	movs	r3, #1
 8004a66:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8004a6a:	69bb      	ldr	r3, [r7, #24]
 8004a6c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d00b      	beq.n	8004a8c <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8004a74:	6a3b      	ldr	r3, [r7, #32]
 8004a76:	f043 0308 	orr.w	r3, r3, #8
 8004a7a:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004a84:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004a86:	2301      	movs	r3, #1
 8004a88:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8004a8c:	69bb      	ldr	r3, [r7, #24]
 8004a8e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d00b      	beq.n	8004aae <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8004a96:	6a3b      	ldr	r3, [r7, #32]
 8004a98:	f043 0302 	orr.w	r3, r3, #2
 8004a9c:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004aa6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004aa8:	2301      	movs	r3, #1
 8004aaa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8004aae:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d01c      	beq.n	8004af0 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004ab6:	68f8      	ldr	r0, [r7, #12]
 8004ab8:	f7ff fddc 	bl	8004674 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	6859      	ldr	r1, [r3, #4]
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	681a      	ldr	r2, [r3, #0]
 8004ac6:	4b0d      	ldr	r3, [pc, #52]	; (8004afc <I2C_IsErrorOccurred+0x1d4>)
 8004ac8:	400b      	ands	r3, r1
 8004aca:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004ad0:	6a3b      	ldr	r3, [r7, #32]
 8004ad2:	431a      	orrs	r2, r3
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	2220      	movs	r2, #32
 8004adc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	2200      	movs	r2, #0
 8004ae4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	2200      	movs	r2, #0
 8004aec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8004af0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8004af4:	4618      	mov	r0, r3
 8004af6:	3728      	adds	r7, #40	; 0x28
 8004af8:	46bd      	mov	sp, r7
 8004afa:	bd80      	pop	{r7, pc}
 8004afc:	fe00e800 	.word	0xfe00e800

08004b00 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004b00:	b480      	push	{r7}
 8004b02:	b087      	sub	sp, #28
 8004b04:	af00      	add	r7, sp, #0
 8004b06:	60f8      	str	r0, [r7, #12]
 8004b08:	607b      	str	r3, [r7, #4]
 8004b0a:	460b      	mov	r3, r1
 8004b0c:	817b      	strh	r3, [r7, #10]
 8004b0e:	4613      	mov	r3, r2
 8004b10:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004b12:	897b      	ldrh	r3, [r7, #10]
 8004b14:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004b18:	7a7b      	ldrb	r3, [r7, #9]
 8004b1a:	041b      	lsls	r3, r3, #16
 8004b1c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004b20:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004b26:	6a3b      	ldr	r3, [r7, #32]
 8004b28:	4313      	orrs	r3, r2
 8004b2a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004b2e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	685a      	ldr	r2, [r3, #4]
 8004b36:	6a3b      	ldr	r3, [r7, #32]
 8004b38:	0d5b      	lsrs	r3, r3, #21
 8004b3a:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8004b3e:	4b08      	ldr	r3, [pc, #32]	; (8004b60 <I2C_TransferConfig+0x60>)
 8004b40:	430b      	orrs	r3, r1
 8004b42:	43db      	mvns	r3, r3
 8004b44:	ea02 0103 	and.w	r1, r2, r3
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	697a      	ldr	r2, [r7, #20]
 8004b4e:	430a      	orrs	r2, r1
 8004b50:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8004b52:	bf00      	nop
 8004b54:	371c      	adds	r7, #28
 8004b56:	46bd      	mov	sp, r7
 8004b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b5c:	4770      	bx	lr
 8004b5e:	bf00      	nop
 8004b60:	03ff63ff 	.word	0x03ff63ff

08004b64 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004b64:	b480      	push	{r7}
 8004b66:	b083      	sub	sp, #12
 8004b68:	af00      	add	r7, sp, #0
 8004b6a:	6078      	str	r0, [r7, #4]
 8004b6c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004b74:	b2db      	uxtb	r3, r3
 8004b76:	2b20      	cmp	r3, #32
 8004b78:	d138      	bne.n	8004bec <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004b80:	2b01      	cmp	r3, #1
 8004b82:	d101      	bne.n	8004b88 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004b84:	2302      	movs	r3, #2
 8004b86:	e032      	b.n	8004bee <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	2201      	movs	r2, #1
 8004b8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	2224      	movs	r2, #36	; 0x24
 8004b94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	681a      	ldr	r2, [r3, #0]
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	f022 0201 	bic.w	r2, r2, #1
 8004ba6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	681a      	ldr	r2, [r3, #0]
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004bb6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	6819      	ldr	r1, [r3, #0]
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	683a      	ldr	r2, [r7, #0]
 8004bc4:	430a      	orrs	r2, r1
 8004bc6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	681a      	ldr	r2, [r3, #0]
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	f042 0201 	orr.w	r2, r2, #1
 8004bd6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	2220      	movs	r2, #32
 8004bdc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	2200      	movs	r2, #0
 8004be4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004be8:	2300      	movs	r3, #0
 8004bea:	e000      	b.n	8004bee <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004bec:	2302      	movs	r3, #2
  }
}
 8004bee:	4618      	mov	r0, r3
 8004bf0:	370c      	adds	r7, #12
 8004bf2:	46bd      	mov	sp, r7
 8004bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf8:	4770      	bx	lr

08004bfa <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004bfa:	b480      	push	{r7}
 8004bfc:	b085      	sub	sp, #20
 8004bfe:	af00      	add	r7, sp, #0
 8004c00:	6078      	str	r0, [r7, #4]
 8004c02:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004c0a:	b2db      	uxtb	r3, r3
 8004c0c:	2b20      	cmp	r3, #32
 8004c0e:	d139      	bne.n	8004c84 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004c16:	2b01      	cmp	r3, #1
 8004c18:	d101      	bne.n	8004c1e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004c1a:	2302      	movs	r3, #2
 8004c1c:	e033      	b.n	8004c86 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	2201      	movs	r2, #1
 8004c22:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	2224      	movs	r2, #36	; 0x24
 8004c2a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	681a      	ldr	r2, [r3, #0]
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	f022 0201 	bic.w	r2, r2, #1
 8004c3c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004c4c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004c4e:	683b      	ldr	r3, [r7, #0]
 8004c50:	021b      	lsls	r3, r3, #8
 8004c52:	68fa      	ldr	r2, [r7, #12]
 8004c54:	4313      	orrs	r3, r2
 8004c56:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	68fa      	ldr	r2, [r7, #12]
 8004c5e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	681a      	ldr	r2, [r3, #0]
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	f042 0201 	orr.w	r2, r2, #1
 8004c6e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	2220      	movs	r2, #32
 8004c74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	2200      	movs	r2, #0
 8004c7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004c80:	2300      	movs	r3, #0
 8004c82:	e000      	b.n	8004c86 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004c84:	2302      	movs	r3, #2
  }
}
 8004c86:	4618      	mov	r0, r3
 8004c88:	3714      	adds	r7, #20
 8004c8a:	46bd      	mov	sp, r7
 8004c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c90:	4770      	bx	lr
	...

08004c94 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004c94:	b480      	push	{r7}
 8004c96:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004c98:	4b05      	ldr	r3, [pc, #20]	; (8004cb0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	4a04      	ldr	r2, [pc, #16]	; (8004cb0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004c9e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004ca2:	6013      	str	r3, [r2, #0]
}
 8004ca4:	bf00      	nop
 8004ca6:	46bd      	mov	sp, r7
 8004ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cac:	4770      	bx	lr
 8004cae:	bf00      	nop
 8004cb0:	40007000 	.word	0x40007000

08004cb4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004cb4:	b480      	push	{r7}
 8004cb6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8004cb8:	4b04      	ldr	r3, [pc, #16]	; (8004ccc <HAL_PWREx_GetVoltageRange+0x18>)
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8004cc0:	4618      	mov	r0, r3
 8004cc2:	46bd      	mov	sp, r7
 8004cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc8:	4770      	bx	lr
 8004cca:	bf00      	nop
 8004ccc:	40007000 	.word	0x40007000

08004cd0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004cd0:	b480      	push	{r7}
 8004cd2:	b085      	sub	sp, #20
 8004cd4:	af00      	add	r7, sp, #0
 8004cd6:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004cde:	d130      	bne.n	8004d42 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8004ce0:	4b23      	ldr	r3, [pc, #140]	; (8004d70 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004ce8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004cec:	d038      	beq.n	8004d60 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004cee:	4b20      	ldr	r3, [pc, #128]	; (8004d70 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004cf6:	4a1e      	ldr	r2, [pc, #120]	; (8004d70 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004cf8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004cfc:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004cfe:	4b1d      	ldr	r3, [pc, #116]	; (8004d74 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	2232      	movs	r2, #50	; 0x32
 8004d04:	fb02 f303 	mul.w	r3, r2, r3
 8004d08:	4a1b      	ldr	r2, [pc, #108]	; (8004d78 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8004d0a:	fba2 2303 	umull	r2, r3, r2, r3
 8004d0e:	0c9b      	lsrs	r3, r3, #18
 8004d10:	3301      	adds	r3, #1
 8004d12:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004d14:	e002      	b.n	8004d1c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	3b01      	subs	r3, #1
 8004d1a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004d1c:	4b14      	ldr	r3, [pc, #80]	; (8004d70 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004d1e:	695b      	ldr	r3, [r3, #20]
 8004d20:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d24:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d28:	d102      	bne.n	8004d30 <HAL_PWREx_ControlVoltageScaling+0x60>
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d1f2      	bne.n	8004d16 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004d30:	4b0f      	ldr	r3, [pc, #60]	; (8004d70 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004d32:	695b      	ldr	r3, [r3, #20]
 8004d34:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d38:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d3c:	d110      	bne.n	8004d60 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8004d3e:	2303      	movs	r3, #3
 8004d40:	e00f      	b.n	8004d62 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8004d42:	4b0b      	ldr	r3, [pc, #44]	; (8004d70 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004d4a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d4e:	d007      	beq.n	8004d60 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004d50:	4b07      	ldr	r3, [pc, #28]	; (8004d70 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004d58:	4a05      	ldr	r2, [pc, #20]	; (8004d70 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004d5a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004d5e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8004d60:	2300      	movs	r3, #0
}
 8004d62:	4618      	mov	r0, r3
 8004d64:	3714      	adds	r7, #20
 8004d66:	46bd      	mov	sp, r7
 8004d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d6c:	4770      	bx	lr
 8004d6e:	bf00      	nop
 8004d70:	40007000 	.word	0x40007000
 8004d74:	20000000 	.word	0x20000000
 8004d78:	431bde83 	.word	0x431bde83

08004d7c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004d7c:	b580      	push	{r7, lr}
 8004d7e:	b088      	sub	sp, #32
 8004d80:	af00      	add	r7, sp, #0
 8004d82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d102      	bne.n	8004d90 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004d8a:	2301      	movs	r3, #1
 8004d8c:	f000 bc02 	b.w	8005594 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004d90:	4b96      	ldr	r3, [pc, #600]	; (8004fec <HAL_RCC_OscConfig+0x270>)
 8004d92:	689b      	ldr	r3, [r3, #8]
 8004d94:	f003 030c 	and.w	r3, r3, #12
 8004d98:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004d9a:	4b94      	ldr	r3, [pc, #592]	; (8004fec <HAL_RCC_OscConfig+0x270>)
 8004d9c:	68db      	ldr	r3, [r3, #12]
 8004d9e:	f003 0303 	and.w	r3, r3, #3
 8004da2:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	f003 0310 	and.w	r3, r3, #16
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	f000 80e4 	beq.w	8004f7a <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004db2:	69bb      	ldr	r3, [r7, #24]
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d007      	beq.n	8004dc8 <HAL_RCC_OscConfig+0x4c>
 8004db8:	69bb      	ldr	r3, [r7, #24]
 8004dba:	2b0c      	cmp	r3, #12
 8004dbc:	f040 808b 	bne.w	8004ed6 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004dc0:	697b      	ldr	r3, [r7, #20]
 8004dc2:	2b01      	cmp	r3, #1
 8004dc4:	f040 8087 	bne.w	8004ed6 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004dc8:	4b88      	ldr	r3, [pc, #544]	; (8004fec <HAL_RCC_OscConfig+0x270>)
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	f003 0302 	and.w	r3, r3, #2
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d005      	beq.n	8004de0 <HAL_RCC_OscConfig+0x64>
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	699b      	ldr	r3, [r3, #24]
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d101      	bne.n	8004de0 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8004ddc:	2301      	movs	r3, #1
 8004dde:	e3d9      	b.n	8005594 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	6a1a      	ldr	r2, [r3, #32]
 8004de4:	4b81      	ldr	r3, [pc, #516]	; (8004fec <HAL_RCC_OscConfig+0x270>)
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	f003 0308 	and.w	r3, r3, #8
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d004      	beq.n	8004dfa <HAL_RCC_OscConfig+0x7e>
 8004df0:	4b7e      	ldr	r3, [pc, #504]	; (8004fec <HAL_RCC_OscConfig+0x270>)
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004df8:	e005      	b.n	8004e06 <HAL_RCC_OscConfig+0x8a>
 8004dfa:	4b7c      	ldr	r3, [pc, #496]	; (8004fec <HAL_RCC_OscConfig+0x270>)
 8004dfc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004e00:	091b      	lsrs	r3, r3, #4
 8004e02:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004e06:	4293      	cmp	r3, r2
 8004e08:	d223      	bcs.n	8004e52 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	6a1b      	ldr	r3, [r3, #32]
 8004e0e:	4618      	mov	r0, r3
 8004e10:	f000 fdbe 	bl	8005990 <RCC_SetFlashLatencyFromMSIRange>
 8004e14:	4603      	mov	r3, r0
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d001      	beq.n	8004e1e <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8004e1a:	2301      	movs	r3, #1
 8004e1c:	e3ba      	b.n	8005594 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004e1e:	4b73      	ldr	r3, [pc, #460]	; (8004fec <HAL_RCC_OscConfig+0x270>)
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	4a72      	ldr	r2, [pc, #456]	; (8004fec <HAL_RCC_OscConfig+0x270>)
 8004e24:	f043 0308 	orr.w	r3, r3, #8
 8004e28:	6013      	str	r3, [r2, #0]
 8004e2a:	4b70      	ldr	r3, [pc, #448]	; (8004fec <HAL_RCC_OscConfig+0x270>)
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	6a1b      	ldr	r3, [r3, #32]
 8004e36:	496d      	ldr	r1, [pc, #436]	; (8004fec <HAL_RCC_OscConfig+0x270>)
 8004e38:	4313      	orrs	r3, r2
 8004e3a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004e3c:	4b6b      	ldr	r3, [pc, #428]	; (8004fec <HAL_RCC_OscConfig+0x270>)
 8004e3e:	685b      	ldr	r3, [r3, #4]
 8004e40:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	69db      	ldr	r3, [r3, #28]
 8004e48:	021b      	lsls	r3, r3, #8
 8004e4a:	4968      	ldr	r1, [pc, #416]	; (8004fec <HAL_RCC_OscConfig+0x270>)
 8004e4c:	4313      	orrs	r3, r2
 8004e4e:	604b      	str	r3, [r1, #4]
 8004e50:	e025      	b.n	8004e9e <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004e52:	4b66      	ldr	r3, [pc, #408]	; (8004fec <HAL_RCC_OscConfig+0x270>)
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	4a65      	ldr	r2, [pc, #404]	; (8004fec <HAL_RCC_OscConfig+0x270>)
 8004e58:	f043 0308 	orr.w	r3, r3, #8
 8004e5c:	6013      	str	r3, [r2, #0]
 8004e5e:	4b63      	ldr	r3, [pc, #396]	; (8004fec <HAL_RCC_OscConfig+0x270>)
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	6a1b      	ldr	r3, [r3, #32]
 8004e6a:	4960      	ldr	r1, [pc, #384]	; (8004fec <HAL_RCC_OscConfig+0x270>)
 8004e6c:	4313      	orrs	r3, r2
 8004e6e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004e70:	4b5e      	ldr	r3, [pc, #376]	; (8004fec <HAL_RCC_OscConfig+0x270>)
 8004e72:	685b      	ldr	r3, [r3, #4]
 8004e74:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	69db      	ldr	r3, [r3, #28]
 8004e7c:	021b      	lsls	r3, r3, #8
 8004e7e:	495b      	ldr	r1, [pc, #364]	; (8004fec <HAL_RCC_OscConfig+0x270>)
 8004e80:	4313      	orrs	r3, r2
 8004e82:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004e84:	69bb      	ldr	r3, [r7, #24]
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d109      	bne.n	8004e9e <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	6a1b      	ldr	r3, [r3, #32]
 8004e8e:	4618      	mov	r0, r3
 8004e90:	f000 fd7e 	bl	8005990 <RCC_SetFlashLatencyFromMSIRange>
 8004e94:	4603      	mov	r3, r0
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d001      	beq.n	8004e9e <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8004e9a:	2301      	movs	r3, #1
 8004e9c:	e37a      	b.n	8005594 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004e9e:	f000 fc81 	bl	80057a4 <HAL_RCC_GetSysClockFreq>
 8004ea2:	4602      	mov	r2, r0
 8004ea4:	4b51      	ldr	r3, [pc, #324]	; (8004fec <HAL_RCC_OscConfig+0x270>)
 8004ea6:	689b      	ldr	r3, [r3, #8]
 8004ea8:	091b      	lsrs	r3, r3, #4
 8004eaa:	f003 030f 	and.w	r3, r3, #15
 8004eae:	4950      	ldr	r1, [pc, #320]	; (8004ff0 <HAL_RCC_OscConfig+0x274>)
 8004eb0:	5ccb      	ldrb	r3, [r1, r3]
 8004eb2:	f003 031f 	and.w	r3, r3, #31
 8004eb6:	fa22 f303 	lsr.w	r3, r2, r3
 8004eba:	4a4e      	ldr	r2, [pc, #312]	; (8004ff4 <HAL_RCC_OscConfig+0x278>)
 8004ebc:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004ebe:	4b4e      	ldr	r3, [pc, #312]	; (8004ff8 <HAL_RCC_OscConfig+0x27c>)
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	4618      	mov	r0, r3
 8004ec4:	f7fd fcd6 	bl	8002874 <HAL_InitTick>
 8004ec8:	4603      	mov	r3, r0
 8004eca:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8004ecc:	7bfb      	ldrb	r3, [r7, #15]
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d052      	beq.n	8004f78 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8004ed2:	7bfb      	ldrb	r3, [r7, #15]
 8004ed4:	e35e      	b.n	8005594 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	699b      	ldr	r3, [r3, #24]
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d032      	beq.n	8004f44 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004ede:	4b43      	ldr	r3, [pc, #268]	; (8004fec <HAL_RCC_OscConfig+0x270>)
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	4a42      	ldr	r2, [pc, #264]	; (8004fec <HAL_RCC_OscConfig+0x270>)
 8004ee4:	f043 0301 	orr.w	r3, r3, #1
 8004ee8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004eea:	f7fe fe9d 	bl	8003c28 <HAL_GetTick>
 8004eee:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004ef0:	e008      	b.n	8004f04 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004ef2:	f7fe fe99 	bl	8003c28 <HAL_GetTick>
 8004ef6:	4602      	mov	r2, r0
 8004ef8:	693b      	ldr	r3, [r7, #16]
 8004efa:	1ad3      	subs	r3, r2, r3
 8004efc:	2b02      	cmp	r3, #2
 8004efe:	d901      	bls.n	8004f04 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8004f00:	2303      	movs	r3, #3
 8004f02:	e347      	b.n	8005594 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004f04:	4b39      	ldr	r3, [pc, #228]	; (8004fec <HAL_RCC_OscConfig+0x270>)
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	f003 0302 	and.w	r3, r3, #2
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d0f0      	beq.n	8004ef2 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004f10:	4b36      	ldr	r3, [pc, #216]	; (8004fec <HAL_RCC_OscConfig+0x270>)
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	4a35      	ldr	r2, [pc, #212]	; (8004fec <HAL_RCC_OscConfig+0x270>)
 8004f16:	f043 0308 	orr.w	r3, r3, #8
 8004f1a:	6013      	str	r3, [r2, #0]
 8004f1c:	4b33      	ldr	r3, [pc, #204]	; (8004fec <HAL_RCC_OscConfig+0x270>)
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	6a1b      	ldr	r3, [r3, #32]
 8004f28:	4930      	ldr	r1, [pc, #192]	; (8004fec <HAL_RCC_OscConfig+0x270>)
 8004f2a:	4313      	orrs	r3, r2
 8004f2c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004f2e:	4b2f      	ldr	r3, [pc, #188]	; (8004fec <HAL_RCC_OscConfig+0x270>)
 8004f30:	685b      	ldr	r3, [r3, #4]
 8004f32:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	69db      	ldr	r3, [r3, #28]
 8004f3a:	021b      	lsls	r3, r3, #8
 8004f3c:	492b      	ldr	r1, [pc, #172]	; (8004fec <HAL_RCC_OscConfig+0x270>)
 8004f3e:	4313      	orrs	r3, r2
 8004f40:	604b      	str	r3, [r1, #4]
 8004f42:	e01a      	b.n	8004f7a <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004f44:	4b29      	ldr	r3, [pc, #164]	; (8004fec <HAL_RCC_OscConfig+0x270>)
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	4a28      	ldr	r2, [pc, #160]	; (8004fec <HAL_RCC_OscConfig+0x270>)
 8004f4a:	f023 0301 	bic.w	r3, r3, #1
 8004f4e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004f50:	f7fe fe6a 	bl	8003c28 <HAL_GetTick>
 8004f54:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004f56:	e008      	b.n	8004f6a <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004f58:	f7fe fe66 	bl	8003c28 <HAL_GetTick>
 8004f5c:	4602      	mov	r2, r0
 8004f5e:	693b      	ldr	r3, [r7, #16]
 8004f60:	1ad3      	subs	r3, r2, r3
 8004f62:	2b02      	cmp	r3, #2
 8004f64:	d901      	bls.n	8004f6a <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8004f66:	2303      	movs	r3, #3
 8004f68:	e314      	b.n	8005594 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004f6a:	4b20      	ldr	r3, [pc, #128]	; (8004fec <HAL_RCC_OscConfig+0x270>)
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	f003 0302 	and.w	r3, r3, #2
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d1f0      	bne.n	8004f58 <HAL_RCC_OscConfig+0x1dc>
 8004f76:	e000      	b.n	8004f7a <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004f78:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	f003 0301 	and.w	r3, r3, #1
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d073      	beq.n	800506e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8004f86:	69bb      	ldr	r3, [r7, #24]
 8004f88:	2b08      	cmp	r3, #8
 8004f8a:	d005      	beq.n	8004f98 <HAL_RCC_OscConfig+0x21c>
 8004f8c:	69bb      	ldr	r3, [r7, #24]
 8004f8e:	2b0c      	cmp	r3, #12
 8004f90:	d10e      	bne.n	8004fb0 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004f92:	697b      	ldr	r3, [r7, #20]
 8004f94:	2b03      	cmp	r3, #3
 8004f96:	d10b      	bne.n	8004fb0 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004f98:	4b14      	ldr	r3, [pc, #80]	; (8004fec <HAL_RCC_OscConfig+0x270>)
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d063      	beq.n	800506c <HAL_RCC_OscConfig+0x2f0>
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	685b      	ldr	r3, [r3, #4]
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d15f      	bne.n	800506c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8004fac:	2301      	movs	r3, #1
 8004fae:	e2f1      	b.n	8005594 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	685b      	ldr	r3, [r3, #4]
 8004fb4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004fb8:	d106      	bne.n	8004fc8 <HAL_RCC_OscConfig+0x24c>
 8004fba:	4b0c      	ldr	r3, [pc, #48]	; (8004fec <HAL_RCC_OscConfig+0x270>)
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	4a0b      	ldr	r2, [pc, #44]	; (8004fec <HAL_RCC_OscConfig+0x270>)
 8004fc0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004fc4:	6013      	str	r3, [r2, #0]
 8004fc6:	e025      	b.n	8005014 <HAL_RCC_OscConfig+0x298>
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	685b      	ldr	r3, [r3, #4]
 8004fcc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004fd0:	d114      	bne.n	8004ffc <HAL_RCC_OscConfig+0x280>
 8004fd2:	4b06      	ldr	r3, [pc, #24]	; (8004fec <HAL_RCC_OscConfig+0x270>)
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	4a05      	ldr	r2, [pc, #20]	; (8004fec <HAL_RCC_OscConfig+0x270>)
 8004fd8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004fdc:	6013      	str	r3, [r2, #0]
 8004fde:	4b03      	ldr	r3, [pc, #12]	; (8004fec <HAL_RCC_OscConfig+0x270>)
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	4a02      	ldr	r2, [pc, #8]	; (8004fec <HAL_RCC_OscConfig+0x270>)
 8004fe4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004fe8:	6013      	str	r3, [r2, #0]
 8004fea:	e013      	b.n	8005014 <HAL_RCC_OscConfig+0x298>
 8004fec:	40021000 	.word	0x40021000
 8004ff0:	0800c070 	.word	0x0800c070
 8004ff4:	20000000 	.word	0x20000000
 8004ff8:	20000004 	.word	0x20000004
 8004ffc:	4ba0      	ldr	r3, [pc, #640]	; (8005280 <HAL_RCC_OscConfig+0x504>)
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	4a9f      	ldr	r2, [pc, #636]	; (8005280 <HAL_RCC_OscConfig+0x504>)
 8005002:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005006:	6013      	str	r3, [r2, #0]
 8005008:	4b9d      	ldr	r3, [pc, #628]	; (8005280 <HAL_RCC_OscConfig+0x504>)
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	4a9c      	ldr	r2, [pc, #624]	; (8005280 <HAL_RCC_OscConfig+0x504>)
 800500e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005012:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	685b      	ldr	r3, [r3, #4]
 8005018:	2b00      	cmp	r3, #0
 800501a:	d013      	beq.n	8005044 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800501c:	f7fe fe04 	bl	8003c28 <HAL_GetTick>
 8005020:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005022:	e008      	b.n	8005036 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005024:	f7fe fe00 	bl	8003c28 <HAL_GetTick>
 8005028:	4602      	mov	r2, r0
 800502a:	693b      	ldr	r3, [r7, #16]
 800502c:	1ad3      	subs	r3, r2, r3
 800502e:	2b64      	cmp	r3, #100	; 0x64
 8005030:	d901      	bls.n	8005036 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8005032:	2303      	movs	r3, #3
 8005034:	e2ae      	b.n	8005594 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005036:	4b92      	ldr	r3, [pc, #584]	; (8005280 <HAL_RCC_OscConfig+0x504>)
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800503e:	2b00      	cmp	r3, #0
 8005040:	d0f0      	beq.n	8005024 <HAL_RCC_OscConfig+0x2a8>
 8005042:	e014      	b.n	800506e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005044:	f7fe fdf0 	bl	8003c28 <HAL_GetTick>
 8005048:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800504a:	e008      	b.n	800505e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800504c:	f7fe fdec 	bl	8003c28 <HAL_GetTick>
 8005050:	4602      	mov	r2, r0
 8005052:	693b      	ldr	r3, [r7, #16]
 8005054:	1ad3      	subs	r3, r2, r3
 8005056:	2b64      	cmp	r3, #100	; 0x64
 8005058:	d901      	bls.n	800505e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800505a:	2303      	movs	r3, #3
 800505c:	e29a      	b.n	8005594 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800505e:	4b88      	ldr	r3, [pc, #544]	; (8005280 <HAL_RCC_OscConfig+0x504>)
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005066:	2b00      	cmp	r3, #0
 8005068:	d1f0      	bne.n	800504c <HAL_RCC_OscConfig+0x2d0>
 800506a:	e000      	b.n	800506e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800506c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	f003 0302 	and.w	r3, r3, #2
 8005076:	2b00      	cmp	r3, #0
 8005078:	d060      	beq.n	800513c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800507a:	69bb      	ldr	r3, [r7, #24]
 800507c:	2b04      	cmp	r3, #4
 800507e:	d005      	beq.n	800508c <HAL_RCC_OscConfig+0x310>
 8005080:	69bb      	ldr	r3, [r7, #24]
 8005082:	2b0c      	cmp	r3, #12
 8005084:	d119      	bne.n	80050ba <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8005086:	697b      	ldr	r3, [r7, #20]
 8005088:	2b02      	cmp	r3, #2
 800508a:	d116      	bne.n	80050ba <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800508c:	4b7c      	ldr	r3, [pc, #496]	; (8005280 <HAL_RCC_OscConfig+0x504>)
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005094:	2b00      	cmp	r3, #0
 8005096:	d005      	beq.n	80050a4 <HAL_RCC_OscConfig+0x328>
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	68db      	ldr	r3, [r3, #12]
 800509c:	2b00      	cmp	r3, #0
 800509e:	d101      	bne.n	80050a4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80050a0:	2301      	movs	r3, #1
 80050a2:	e277      	b.n	8005594 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80050a4:	4b76      	ldr	r3, [pc, #472]	; (8005280 <HAL_RCC_OscConfig+0x504>)
 80050a6:	685b      	ldr	r3, [r3, #4]
 80050a8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	691b      	ldr	r3, [r3, #16]
 80050b0:	061b      	lsls	r3, r3, #24
 80050b2:	4973      	ldr	r1, [pc, #460]	; (8005280 <HAL_RCC_OscConfig+0x504>)
 80050b4:	4313      	orrs	r3, r2
 80050b6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80050b8:	e040      	b.n	800513c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	68db      	ldr	r3, [r3, #12]
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d023      	beq.n	800510a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80050c2:	4b6f      	ldr	r3, [pc, #444]	; (8005280 <HAL_RCC_OscConfig+0x504>)
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	4a6e      	ldr	r2, [pc, #440]	; (8005280 <HAL_RCC_OscConfig+0x504>)
 80050c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80050cc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050ce:	f7fe fdab 	bl	8003c28 <HAL_GetTick>
 80050d2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80050d4:	e008      	b.n	80050e8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80050d6:	f7fe fda7 	bl	8003c28 <HAL_GetTick>
 80050da:	4602      	mov	r2, r0
 80050dc:	693b      	ldr	r3, [r7, #16]
 80050de:	1ad3      	subs	r3, r2, r3
 80050e0:	2b02      	cmp	r3, #2
 80050e2:	d901      	bls.n	80050e8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80050e4:	2303      	movs	r3, #3
 80050e6:	e255      	b.n	8005594 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80050e8:	4b65      	ldr	r3, [pc, #404]	; (8005280 <HAL_RCC_OscConfig+0x504>)
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d0f0      	beq.n	80050d6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80050f4:	4b62      	ldr	r3, [pc, #392]	; (8005280 <HAL_RCC_OscConfig+0x504>)
 80050f6:	685b      	ldr	r3, [r3, #4]
 80050f8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	691b      	ldr	r3, [r3, #16]
 8005100:	061b      	lsls	r3, r3, #24
 8005102:	495f      	ldr	r1, [pc, #380]	; (8005280 <HAL_RCC_OscConfig+0x504>)
 8005104:	4313      	orrs	r3, r2
 8005106:	604b      	str	r3, [r1, #4]
 8005108:	e018      	b.n	800513c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800510a:	4b5d      	ldr	r3, [pc, #372]	; (8005280 <HAL_RCC_OscConfig+0x504>)
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	4a5c      	ldr	r2, [pc, #368]	; (8005280 <HAL_RCC_OscConfig+0x504>)
 8005110:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005114:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005116:	f7fe fd87 	bl	8003c28 <HAL_GetTick>
 800511a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800511c:	e008      	b.n	8005130 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800511e:	f7fe fd83 	bl	8003c28 <HAL_GetTick>
 8005122:	4602      	mov	r2, r0
 8005124:	693b      	ldr	r3, [r7, #16]
 8005126:	1ad3      	subs	r3, r2, r3
 8005128:	2b02      	cmp	r3, #2
 800512a:	d901      	bls.n	8005130 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800512c:	2303      	movs	r3, #3
 800512e:	e231      	b.n	8005594 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005130:	4b53      	ldr	r3, [pc, #332]	; (8005280 <HAL_RCC_OscConfig+0x504>)
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005138:	2b00      	cmp	r3, #0
 800513a:	d1f0      	bne.n	800511e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	f003 0308 	and.w	r3, r3, #8
 8005144:	2b00      	cmp	r3, #0
 8005146:	d03c      	beq.n	80051c2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	695b      	ldr	r3, [r3, #20]
 800514c:	2b00      	cmp	r3, #0
 800514e:	d01c      	beq.n	800518a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005150:	4b4b      	ldr	r3, [pc, #300]	; (8005280 <HAL_RCC_OscConfig+0x504>)
 8005152:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005156:	4a4a      	ldr	r2, [pc, #296]	; (8005280 <HAL_RCC_OscConfig+0x504>)
 8005158:	f043 0301 	orr.w	r3, r3, #1
 800515c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005160:	f7fe fd62 	bl	8003c28 <HAL_GetTick>
 8005164:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005166:	e008      	b.n	800517a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005168:	f7fe fd5e 	bl	8003c28 <HAL_GetTick>
 800516c:	4602      	mov	r2, r0
 800516e:	693b      	ldr	r3, [r7, #16]
 8005170:	1ad3      	subs	r3, r2, r3
 8005172:	2b02      	cmp	r3, #2
 8005174:	d901      	bls.n	800517a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8005176:	2303      	movs	r3, #3
 8005178:	e20c      	b.n	8005594 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800517a:	4b41      	ldr	r3, [pc, #260]	; (8005280 <HAL_RCC_OscConfig+0x504>)
 800517c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005180:	f003 0302 	and.w	r3, r3, #2
 8005184:	2b00      	cmp	r3, #0
 8005186:	d0ef      	beq.n	8005168 <HAL_RCC_OscConfig+0x3ec>
 8005188:	e01b      	b.n	80051c2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800518a:	4b3d      	ldr	r3, [pc, #244]	; (8005280 <HAL_RCC_OscConfig+0x504>)
 800518c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005190:	4a3b      	ldr	r2, [pc, #236]	; (8005280 <HAL_RCC_OscConfig+0x504>)
 8005192:	f023 0301 	bic.w	r3, r3, #1
 8005196:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800519a:	f7fe fd45 	bl	8003c28 <HAL_GetTick>
 800519e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80051a0:	e008      	b.n	80051b4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80051a2:	f7fe fd41 	bl	8003c28 <HAL_GetTick>
 80051a6:	4602      	mov	r2, r0
 80051a8:	693b      	ldr	r3, [r7, #16]
 80051aa:	1ad3      	subs	r3, r2, r3
 80051ac:	2b02      	cmp	r3, #2
 80051ae:	d901      	bls.n	80051b4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80051b0:	2303      	movs	r3, #3
 80051b2:	e1ef      	b.n	8005594 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80051b4:	4b32      	ldr	r3, [pc, #200]	; (8005280 <HAL_RCC_OscConfig+0x504>)
 80051b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80051ba:	f003 0302 	and.w	r3, r3, #2
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d1ef      	bne.n	80051a2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	f003 0304 	and.w	r3, r3, #4
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	f000 80a6 	beq.w	800531c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80051d0:	2300      	movs	r3, #0
 80051d2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80051d4:	4b2a      	ldr	r3, [pc, #168]	; (8005280 <HAL_RCC_OscConfig+0x504>)
 80051d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d10d      	bne.n	80051fc <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80051e0:	4b27      	ldr	r3, [pc, #156]	; (8005280 <HAL_RCC_OscConfig+0x504>)
 80051e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051e4:	4a26      	ldr	r2, [pc, #152]	; (8005280 <HAL_RCC_OscConfig+0x504>)
 80051e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80051ea:	6593      	str	r3, [r2, #88]	; 0x58
 80051ec:	4b24      	ldr	r3, [pc, #144]	; (8005280 <HAL_RCC_OscConfig+0x504>)
 80051ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80051f4:	60bb      	str	r3, [r7, #8]
 80051f6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80051f8:	2301      	movs	r3, #1
 80051fa:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80051fc:	4b21      	ldr	r3, [pc, #132]	; (8005284 <HAL_RCC_OscConfig+0x508>)
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005204:	2b00      	cmp	r3, #0
 8005206:	d118      	bne.n	800523a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005208:	4b1e      	ldr	r3, [pc, #120]	; (8005284 <HAL_RCC_OscConfig+0x508>)
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	4a1d      	ldr	r2, [pc, #116]	; (8005284 <HAL_RCC_OscConfig+0x508>)
 800520e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005212:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005214:	f7fe fd08 	bl	8003c28 <HAL_GetTick>
 8005218:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800521a:	e008      	b.n	800522e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800521c:	f7fe fd04 	bl	8003c28 <HAL_GetTick>
 8005220:	4602      	mov	r2, r0
 8005222:	693b      	ldr	r3, [r7, #16]
 8005224:	1ad3      	subs	r3, r2, r3
 8005226:	2b02      	cmp	r3, #2
 8005228:	d901      	bls.n	800522e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800522a:	2303      	movs	r3, #3
 800522c:	e1b2      	b.n	8005594 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800522e:	4b15      	ldr	r3, [pc, #84]	; (8005284 <HAL_RCC_OscConfig+0x508>)
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005236:	2b00      	cmp	r3, #0
 8005238:	d0f0      	beq.n	800521c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	689b      	ldr	r3, [r3, #8]
 800523e:	2b01      	cmp	r3, #1
 8005240:	d108      	bne.n	8005254 <HAL_RCC_OscConfig+0x4d8>
 8005242:	4b0f      	ldr	r3, [pc, #60]	; (8005280 <HAL_RCC_OscConfig+0x504>)
 8005244:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005248:	4a0d      	ldr	r2, [pc, #52]	; (8005280 <HAL_RCC_OscConfig+0x504>)
 800524a:	f043 0301 	orr.w	r3, r3, #1
 800524e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005252:	e029      	b.n	80052a8 <HAL_RCC_OscConfig+0x52c>
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	689b      	ldr	r3, [r3, #8]
 8005258:	2b05      	cmp	r3, #5
 800525a:	d115      	bne.n	8005288 <HAL_RCC_OscConfig+0x50c>
 800525c:	4b08      	ldr	r3, [pc, #32]	; (8005280 <HAL_RCC_OscConfig+0x504>)
 800525e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005262:	4a07      	ldr	r2, [pc, #28]	; (8005280 <HAL_RCC_OscConfig+0x504>)
 8005264:	f043 0304 	orr.w	r3, r3, #4
 8005268:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800526c:	4b04      	ldr	r3, [pc, #16]	; (8005280 <HAL_RCC_OscConfig+0x504>)
 800526e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005272:	4a03      	ldr	r2, [pc, #12]	; (8005280 <HAL_RCC_OscConfig+0x504>)
 8005274:	f043 0301 	orr.w	r3, r3, #1
 8005278:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800527c:	e014      	b.n	80052a8 <HAL_RCC_OscConfig+0x52c>
 800527e:	bf00      	nop
 8005280:	40021000 	.word	0x40021000
 8005284:	40007000 	.word	0x40007000
 8005288:	4b9a      	ldr	r3, [pc, #616]	; (80054f4 <HAL_RCC_OscConfig+0x778>)
 800528a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800528e:	4a99      	ldr	r2, [pc, #612]	; (80054f4 <HAL_RCC_OscConfig+0x778>)
 8005290:	f023 0301 	bic.w	r3, r3, #1
 8005294:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005298:	4b96      	ldr	r3, [pc, #600]	; (80054f4 <HAL_RCC_OscConfig+0x778>)
 800529a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800529e:	4a95      	ldr	r2, [pc, #596]	; (80054f4 <HAL_RCC_OscConfig+0x778>)
 80052a0:	f023 0304 	bic.w	r3, r3, #4
 80052a4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	689b      	ldr	r3, [r3, #8]
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d016      	beq.n	80052de <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80052b0:	f7fe fcba 	bl	8003c28 <HAL_GetTick>
 80052b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80052b6:	e00a      	b.n	80052ce <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80052b8:	f7fe fcb6 	bl	8003c28 <HAL_GetTick>
 80052bc:	4602      	mov	r2, r0
 80052be:	693b      	ldr	r3, [r7, #16]
 80052c0:	1ad3      	subs	r3, r2, r3
 80052c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80052c6:	4293      	cmp	r3, r2
 80052c8:	d901      	bls.n	80052ce <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80052ca:	2303      	movs	r3, #3
 80052cc:	e162      	b.n	8005594 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80052ce:	4b89      	ldr	r3, [pc, #548]	; (80054f4 <HAL_RCC_OscConfig+0x778>)
 80052d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052d4:	f003 0302 	and.w	r3, r3, #2
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d0ed      	beq.n	80052b8 <HAL_RCC_OscConfig+0x53c>
 80052dc:	e015      	b.n	800530a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80052de:	f7fe fca3 	bl	8003c28 <HAL_GetTick>
 80052e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80052e4:	e00a      	b.n	80052fc <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80052e6:	f7fe fc9f 	bl	8003c28 <HAL_GetTick>
 80052ea:	4602      	mov	r2, r0
 80052ec:	693b      	ldr	r3, [r7, #16]
 80052ee:	1ad3      	subs	r3, r2, r3
 80052f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80052f4:	4293      	cmp	r3, r2
 80052f6:	d901      	bls.n	80052fc <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80052f8:	2303      	movs	r3, #3
 80052fa:	e14b      	b.n	8005594 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80052fc:	4b7d      	ldr	r3, [pc, #500]	; (80054f4 <HAL_RCC_OscConfig+0x778>)
 80052fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005302:	f003 0302 	and.w	r3, r3, #2
 8005306:	2b00      	cmp	r3, #0
 8005308:	d1ed      	bne.n	80052e6 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800530a:	7ffb      	ldrb	r3, [r7, #31]
 800530c:	2b01      	cmp	r3, #1
 800530e:	d105      	bne.n	800531c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005310:	4b78      	ldr	r3, [pc, #480]	; (80054f4 <HAL_RCC_OscConfig+0x778>)
 8005312:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005314:	4a77      	ldr	r2, [pc, #476]	; (80054f4 <HAL_RCC_OscConfig+0x778>)
 8005316:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800531a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	f003 0320 	and.w	r3, r3, #32
 8005324:	2b00      	cmp	r3, #0
 8005326:	d03c      	beq.n	80053a2 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800532c:	2b00      	cmp	r3, #0
 800532e:	d01c      	beq.n	800536a <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005330:	4b70      	ldr	r3, [pc, #448]	; (80054f4 <HAL_RCC_OscConfig+0x778>)
 8005332:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005336:	4a6f      	ldr	r2, [pc, #444]	; (80054f4 <HAL_RCC_OscConfig+0x778>)
 8005338:	f043 0301 	orr.w	r3, r3, #1
 800533c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005340:	f7fe fc72 	bl	8003c28 <HAL_GetTick>
 8005344:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005346:	e008      	b.n	800535a <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005348:	f7fe fc6e 	bl	8003c28 <HAL_GetTick>
 800534c:	4602      	mov	r2, r0
 800534e:	693b      	ldr	r3, [r7, #16]
 8005350:	1ad3      	subs	r3, r2, r3
 8005352:	2b02      	cmp	r3, #2
 8005354:	d901      	bls.n	800535a <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8005356:	2303      	movs	r3, #3
 8005358:	e11c      	b.n	8005594 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800535a:	4b66      	ldr	r3, [pc, #408]	; (80054f4 <HAL_RCC_OscConfig+0x778>)
 800535c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005360:	f003 0302 	and.w	r3, r3, #2
 8005364:	2b00      	cmp	r3, #0
 8005366:	d0ef      	beq.n	8005348 <HAL_RCC_OscConfig+0x5cc>
 8005368:	e01b      	b.n	80053a2 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800536a:	4b62      	ldr	r3, [pc, #392]	; (80054f4 <HAL_RCC_OscConfig+0x778>)
 800536c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005370:	4a60      	ldr	r2, [pc, #384]	; (80054f4 <HAL_RCC_OscConfig+0x778>)
 8005372:	f023 0301 	bic.w	r3, r3, #1
 8005376:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800537a:	f7fe fc55 	bl	8003c28 <HAL_GetTick>
 800537e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005380:	e008      	b.n	8005394 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005382:	f7fe fc51 	bl	8003c28 <HAL_GetTick>
 8005386:	4602      	mov	r2, r0
 8005388:	693b      	ldr	r3, [r7, #16]
 800538a:	1ad3      	subs	r3, r2, r3
 800538c:	2b02      	cmp	r3, #2
 800538e:	d901      	bls.n	8005394 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8005390:	2303      	movs	r3, #3
 8005392:	e0ff      	b.n	8005594 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005394:	4b57      	ldr	r3, [pc, #348]	; (80054f4 <HAL_RCC_OscConfig+0x778>)
 8005396:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800539a:	f003 0302 	and.w	r3, r3, #2
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d1ef      	bne.n	8005382 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	f000 80f3 	beq.w	8005592 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053b0:	2b02      	cmp	r3, #2
 80053b2:	f040 80c9 	bne.w	8005548 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80053b6:	4b4f      	ldr	r3, [pc, #316]	; (80054f4 <HAL_RCC_OscConfig+0x778>)
 80053b8:	68db      	ldr	r3, [r3, #12]
 80053ba:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80053bc:	697b      	ldr	r3, [r7, #20]
 80053be:	f003 0203 	and.w	r2, r3, #3
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053c6:	429a      	cmp	r2, r3
 80053c8:	d12c      	bne.n	8005424 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80053ca:	697b      	ldr	r3, [r7, #20]
 80053cc:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053d4:	3b01      	subs	r3, #1
 80053d6:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80053d8:	429a      	cmp	r2, r3
 80053da:	d123      	bne.n	8005424 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80053dc:	697b      	ldr	r3, [r7, #20]
 80053de:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80053e6:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80053e8:	429a      	cmp	r2, r3
 80053ea:	d11b      	bne.n	8005424 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80053ec:	697b      	ldr	r3, [r7, #20]
 80053ee:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053f6:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80053f8:	429a      	cmp	r2, r3
 80053fa:	d113      	bne.n	8005424 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80053fc:	697b      	ldr	r3, [r7, #20]
 80053fe:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005406:	085b      	lsrs	r3, r3, #1
 8005408:	3b01      	subs	r3, #1
 800540a:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800540c:	429a      	cmp	r2, r3
 800540e:	d109      	bne.n	8005424 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005410:	697b      	ldr	r3, [r7, #20]
 8005412:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800541a:	085b      	lsrs	r3, r3, #1
 800541c:	3b01      	subs	r3, #1
 800541e:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005420:	429a      	cmp	r2, r3
 8005422:	d06b      	beq.n	80054fc <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005424:	69bb      	ldr	r3, [r7, #24]
 8005426:	2b0c      	cmp	r3, #12
 8005428:	d062      	beq.n	80054f0 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800542a:	4b32      	ldr	r3, [pc, #200]	; (80054f4 <HAL_RCC_OscConfig+0x778>)
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005432:	2b00      	cmp	r3, #0
 8005434:	d001      	beq.n	800543a <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8005436:	2301      	movs	r3, #1
 8005438:	e0ac      	b.n	8005594 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800543a:	4b2e      	ldr	r3, [pc, #184]	; (80054f4 <HAL_RCC_OscConfig+0x778>)
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	4a2d      	ldr	r2, [pc, #180]	; (80054f4 <HAL_RCC_OscConfig+0x778>)
 8005440:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005444:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005446:	f7fe fbef 	bl	8003c28 <HAL_GetTick>
 800544a:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800544c:	e008      	b.n	8005460 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800544e:	f7fe fbeb 	bl	8003c28 <HAL_GetTick>
 8005452:	4602      	mov	r2, r0
 8005454:	693b      	ldr	r3, [r7, #16]
 8005456:	1ad3      	subs	r3, r2, r3
 8005458:	2b02      	cmp	r3, #2
 800545a:	d901      	bls.n	8005460 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 800545c:	2303      	movs	r3, #3
 800545e:	e099      	b.n	8005594 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005460:	4b24      	ldr	r3, [pc, #144]	; (80054f4 <HAL_RCC_OscConfig+0x778>)
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005468:	2b00      	cmp	r3, #0
 800546a:	d1f0      	bne.n	800544e <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800546c:	4b21      	ldr	r3, [pc, #132]	; (80054f4 <HAL_RCC_OscConfig+0x778>)
 800546e:	68da      	ldr	r2, [r3, #12]
 8005470:	4b21      	ldr	r3, [pc, #132]	; (80054f8 <HAL_RCC_OscConfig+0x77c>)
 8005472:	4013      	ands	r3, r2
 8005474:	687a      	ldr	r2, [r7, #4]
 8005476:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8005478:	687a      	ldr	r2, [r7, #4]
 800547a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800547c:	3a01      	subs	r2, #1
 800547e:	0112      	lsls	r2, r2, #4
 8005480:	4311      	orrs	r1, r2
 8005482:	687a      	ldr	r2, [r7, #4]
 8005484:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005486:	0212      	lsls	r2, r2, #8
 8005488:	4311      	orrs	r1, r2
 800548a:	687a      	ldr	r2, [r7, #4]
 800548c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800548e:	0852      	lsrs	r2, r2, #1
 8005490:	3a01      	subs	r2, #1
 8005492:	0552      	lsls	r2, r2, #21
 8005494:	4311      	orrs	r1, r2
 8005496:	687a      	ldr	r2, [r7, #4]
 8005498:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800549a:	0852      	lsrs	r2, r2, #1
 800549c:	3a01      	subs	r2, #1
 800549e:	0652      	lsls	r2, r2, #25
 80054a0:	4311      	orrs	r1, r2
 80054a2:	687a      	ldr	r2, [r7, #4]
 80054a4:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80054a6:	06d2      	lsls	r2, r2, #27
 80054a8:	430a      	orrs	r2, r1
 80054aa:	4912      	ldr	r1, [pc, #72]	; (80054f4 <HAL_RCC_OscConfig+0x778>)
 80054ac:	4313      	orrs	r3, r2
 80054ae:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80054b0:	4b10      	ldr	r3, [pc, #64]	; (80054f4 <HAL_RCC_OscConfig+0x778>)
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	4a0f      	ldr	r2, [pc, #60]	; (80054f4 <HAL_RCC_OscConfig+0x778>)
 80054b6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80054ba:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80054bc:	4b0d      	ldr	r3, [pc, #52]	; (80054f4 <HAL_RCC_OscConfig+0x778>)
 80054be:	68db      	ldr	r3, [r3, #12]
 80054c0:	4a0c      	ldr	r2, [pc, #48]	; (80054f4 <HAL_RCC_OscConfig+0x778>)
 80054c2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80054c6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80054c8:	f7fe fbae 	bl	8003c28 <HAL_GetTick>
 80054cc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80054ce:	e008      	b.n	80054e2 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80054d0:	f7fe fbaa 	bl	8003c28 <HAL_GetTick>
 80054d4:	4602      	mov	r2, r0
 80054d6:	693b      	ldr	r3, [r7, #16]
 80054d8:	1ad3      	subs	r3, r2, r3
 80054da:	2b02      	cmp	r3, #2
 80054dc:	d901      	bls.n	80054e2 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 80054de:	2303      	movs	r3, #3
 80054e0:	e058      	b.n	8005594 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80054e2:	4b04      	ldr	r3, [pc, #16]	; (80054f4 <HAL_RCC_OscConfig+0x778>)
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d0f0      	beq.n	80054d0 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80054ee:	e050      	b.n	8005592 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80054f0:	2301      	movs	r3, #1
 80054f2:	e04f      	b.n	8005594 <HAL_RCC_OscConfig+0x818>
 80054f4:	40021000 	.word	0x40021000
 80054f8:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80054fc:	4b27      	ldr	r3, [pc, #156]	; (800559c <HAL_RCC_OscConfig+0x820>)
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005504:	2b00      	cmp	r3, #0
 8005506:	d144      	bne.n	8005592 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8005508:	4b24      	ldr	r3, [pc, #144]	; (800559c <HAL_RCC_OscConfig+0x820>)
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	4a23      	ldr	r2, [pc, #140]	; (800559c <HAL_RCC_OscConfig+0x820>)
 800550e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005512:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005514:	4b21      	ldr	r3, [pc, #132]	; (800559c <HAL_RCC_OscConfig+0x820>)
 8005516:	68db      	ldr	r3, [r3, #12]
 8005518:	4a20      	ldr	r2, [pc, #128]	; (800559c <HAL_RCC_OscConfig+0x820>)
 800551a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800551e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005520:	f7fe fb82 	bl	8003c28 <HAL_GetTick>
 8005524:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005526:	e008      	b.n	800553a <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005528:	f7fe fb7e 	bl	8003c28 <HAL_GetTick>
 800552c:	4602      	mov	r2, r0
 800552e:	693b      	ldr	r3, [r7, #16]
 8005530:	1ad3      	subs	r3, r2, r3
 8005532:	2b02      	cmp	r3, #2
 8005534:	d901      	bls.n	800553a <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8005536:	2303      	movs	r3, #3
 8005538:	e02c      	b.n	8005594 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800553a:	4b18      	ldr	r3, [pc, #96]	; (800559c <HAL_RCC_OscConfig+0x820>)
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005542:	2b00      	cmp	r3, #0
 8005544:	d0f0      	beq.n	8005528 <HAL_RCC_OscConfig+0x7ac>
 8005546:	e024      	b.n	8005592 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005548:	69bb      	ldr	r3, [r7, #24]
 800554a:	2b0c      	cmp	r3, #12
 800554c:	d01f      	beq.n	800558e <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800554e:	4b13      	ldr	r3, [pc, #76]	; (800559c <HAL_RCC_OscConfig+0x820>)
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	4a12      	ldr	r2, [pc, #72]	; (800559c <HAL_RCC_OscConfig+0x820>)
 8005554:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005558:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800555a:	f7fe fb65 	bl	8003c28 <HAL_GetTick>
 800555e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005560:	e008      	b.n	8005574 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005562:	f7fe fb61 	bl	8003c28 <HAL_GetTick>
 8005566:	4602      	mov	r2, r0
 8005568:	693b      	ldr	r3, [r7, #16]
 800556a:	1ad3      	subs	r3, r2, r3
 800556c:	2b02      	cmp	r3, #2
 800556e:	d901      	bls.n	8005574 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8005570:	2303      	movs	r3, #3
 8005572:	e00f      	b.n	8005594 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005574:	4b09      	ldr	r3, [pc, #36]	; (800559c <HAL_RCC_OscConfig+0x820>)
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800557c:	2b00      	cmp	r3, #0
 800557e:	d1f0      	bne.n	8005562 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8005580:	4b06      	ldr	r3, [pc, #24]	; (800559c <HAL_RCC_OscConfig+0x820>)
 8005582:	68da      	ldr	r2, [r3, #12]
 8005584:	4905      	ldr	r1, [pc, #20]	; (800559c <HAL_RCC_OscConfig+0x820>)
 8005586:	4b06      	ldr	r3, [pc, #24]	; (80055a0 <HAL_RCC_OscConfig+0x824>)
 8005588:	4013      	ands	r3, r2
 800558a:	60cb      	str	r3, [r1, #12]
 800558c:	e001      	b.n	8005592 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800558e:	2301      	movs	r3, #1
 8005590:	e000      	b.n	8005594 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8005592:	2300      	movs	r3, #0
}
 8005594:	4618      	mov	r0, r3
 8005596:	3720      	adds	r7, #32
 8005598:	46bd      	mov	sp, r7
 800559a:	bd80      	pop	{r7, pc}
 800559c:	40021000 	.word	0x40021000
 80055a0:	feeefffc 	.word	0xfeeefffc

080055a4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80055a4:	b580      	push	{r7, lr}
 80055a6:	b084      	sub	sp, #16
 80055a8:	af00      	add	r7, sp, #0
 80055aa:	6078      	str	r0, [r7, #4]
 80055ac:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d101      	bne.n	80055b8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80055b4:	2301      	movs	r3, #1
 80055b6:	e0e7      	b.n	8005788 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80055b8:	4b75      	ldr	r3, [pc, #468]	; (8005790 <HAL_RCC_ClockConfig+0x1ec>)
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	f003 0307 	and.w	r3, r3, #7
 80055c0:	683a      	ldr	r2, [r7, #0]
 80055c2:	429a      	cmp	r2, r3
 80055c4:	d910      	bls.n	80055e8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80055c6:	4b72      	ldr	r3, [pc, #456]	; (8005790 <HAL_RCC_ClockConfig+0x1ec>)
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	f023 0207 	bic.w	r2, r3, #7
 80055ce:	4970      	ldr	r1, [pc, #448]	; (8005790 <HAL_RCC_ClockConfig+0x1ec>)
 80055d0:	683b      	ldr	r3, [r7, #0]
 80055d2:	4313      	orrs	r3, r2
 80055d4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80055d6:	4b6e      	ldr	r3, [pc, #440]	; (8005790 <HAL_RCC_ClockConfig+0x1ec>)
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	f003 0307 	and.w	r3, r3, #7
 80055de:	683a      	ldr	r2, [r7, #0]
 80055e0:	429a      	cmp	r2, r3
 80055e2:	d001      	beq.n	80055e8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80055e4:	2301      	movs	r3, #1
 80055e6:	e0cf      	b.n	8005788 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	f003 0302 	and.w	r3, r3, #2
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d010      	beq.n	8005616 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	689a      	ldr	r2, [r3, #8]
 80055f8:	4b66      	ldr	r3, [pc, #408]	; (8005794 <HAL_RCC_ClockConfig+0x1f0>)
 80055fa:	689b      	ldr	r3, [r3, #8]
 80055fc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005600:	429a      	cmp	r2, r3
 8005602:	d908      	bls.n	8005616 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005604:	4b63      	ldr	r3, [pc, #396]	; (8005794 <HAL_RCC_ClockConfig+0x1f0>)
 8005606:	689b      	ldr	r3, [r3, #8]
 8005608:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	689b      	ldr	r3, [r3, #8]
 8005610:	4960      	ldr	r1, [pc, #384]	; (8005794 <HAL_RCC_ClockConfig+0x1f0>)
 8005612:	4313      	orrs	r3, r2
 8005614:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	f003 0301 	and.w	r3, r3, #1
 800561e:	2b00      	cmp	r3, #0
 8005620:	d04c      	beq.n	80056bc <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	685b      	ldr	r3, [r3, #4]
 8005626:	2b03      	cmp	r3, #3
 8005628:	d107      	bne.n	800563a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800562a:	4b5a      	ldr	r3, [pc, #360]	; (8005794 <HAL_RCC_ClockConfig+0x1f0>)
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005632:	2b00      	cmp	r3, #0
 8005634:	d121      	bne.n	800567a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8005636:	2301      	movs	r3, #1
 8005638:	e0a6      	b.n	8005788 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	685b      	ldr	r3, [r3, #4]
 800563e:	2b02      	cmp	r3, #2
 8005640:	d107      	bne.n	8005652 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005642:	4b54      	ldr	r3, [pc, #336]	; (8005794 <HAL_RCC_ClockConfig+0x1f0>)
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800564a:	2b00      	cmp	r3, #0
 800564c:	d115      	bne.n	800567a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800564e:	2301      	movs	r3, #1
 8005650:	e09a      	b.n	8005788 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	685b      	ldr	r3, [r3, #4]
 8005656:	2b00      	cmp	r3, #0
 8005658:	d107      	bne.n	800566a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800565a:	4b4e      	ldr	r3, [pc, #312]	; (8005794 <HAL_RCC_ClockConfig+0x1f0>)
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	f003 0302 	and.w	r3, r3, #2
 8005662:	2b00      	cmp	r3, #0
 8005664:	d109      	bne.n	800567a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8005666:	2301      	movs	r3, #1
 8005668:	e08e      	b.n	8005788 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800566a:	4b4a      	ldr	r3, [pc, #296]	; (8005794 <HAL_RCC_ClockConfig+0x1f0>)
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005672:	2b00      	cmp	r3, #0
 8005674:	d101      	bne.n	800567a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8005676:	2301      	movs	r3, #1
 8005678:	e086      	b.n	8005788 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800567a:	4b46      	ldr	r3, [pc, #280]	; (8005794 <HAL_RCC_ClockConfig+0x1f0>)
 800567c:	689b      	ldr	r3, [r3, #8]
 800567e:	f023 0203 	bic.w	r2, r3, #3
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	685b      	ldr	r3, [r3, #4]
 8005686:	4943      	ldr	r1, [pc, #268]	; (8005794 <HAL_RCC_ClockConfig+0x1f0>)
 8005688:	4313      	orrs	r3, r2
 800568a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800568c:	f7fe facc 	bl	8003c28 <HAL_GetTick>
 8005690:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005692:	e00a      	b.n	80056aa <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005694:	f7fe fac8 	bl	8003c28 <HAL_GetTick>
 8005698:	4602      	mov	r2, r0
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	1ad3      	subs	r3, r2, r3
 800569e:	f241 3288 	movw	r2, #5000	; 0x1388
 80056a2:	4293      	cmp	r3, r2
 80056a4:	d901      	bls.n	80056aa <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80056a6:	2303      	movs	r3, #3
 80056a8:	e06e      	b.n	8005788 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80056aa:	4b3a      	ldr	r3, [pc, #232]	; (8005794 <HAL_RCC_ClockConfig+0x1f0>)
 80056ac:	689b      	ldr	r3, [r3, #8]
 80056ae:	f003 020c 	and.w	r2, r3, #12
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	685b      	ldr	r3, [r3, #4]
 80056b6:	009b      	lsls	r3, r3, #2
 80056b8:	429a      	cmp	r2, r3
 80056ba:	d1eb      	bne.n	8005694 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	f003 0302 	and.w	r3, r3, #2
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d010      	beq.n	80056ea <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	689a      	ldr	r2, [r3, #8]
 80056cc:	4b31      	ldr	r3, [pc, #196]	; (8005794 <HAL_RCC_ClockConfig+0x1f0>)
 80056ce:	689b      	ldr	r3, [r3, #8]
 80056d0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80056d4:	429a      	cmp	r2, r3
 80056d6:	d208      	bcs.n	80056ea <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80056d8:	4b2e      	ldr	r3, [pc, #184]	; (8005794 <HAL_RCC_ClockConfig+0x1f0>)
 80056da:	689b      	ldr	r3, [r3, #8]
 80056dc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	689b      	ldr	r3, [r3, #8]
 80056e4:	492b      	ldr	r1, [pc, #172]	; (8005794 <HAL_RCC_ClockConfig+0x1f0>)
 80056e6:	4313      	orrs	r3, r2
 80056e8:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80056ea:	4b29      	ldr	r3, [pc, #164]	; (8005790 <HAL_RCC_ClockConfig+0x1ec>)
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	f003 0307 	and.w	r3, r3, #7
 80056f2:	683a      	ldr	r2, [r7, #0]
 80056f4:	429a      	cmp	r2, r3
 80056f6:	d210      	bcs.n	800571a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80056f8:	4b25      	ldr	r3, [pc, #148]	; (8005790 <HAL_RCC_ClockConfig+0x1ec>)
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	f023 0207 	bic.w	r2, r3, #7
 8005700:	4923      	ldr	r1, [pc, #140]	; (8005790 <HAL_RCC_ClockConfig+0x1ec>)
 8005702:	683b      	ldr	r3, [r7, #0]
 8005704:	4313      	orrs	r3, r2
 8005706:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005708:	4b21      	ldr	r3, [pc, #132]	; (8005790 <HAL_RCC_ClockConfig+0x1ec>)
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	f003 0307 	and.w	r3, r3, #7
 8005710:	683a      	ldr	r2, [r7, #0]
 8005712:	429a      	cmp	r2, r3
 8005714:	d001      	beq.n	800571a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8005716:	2301      	movs	r3, #1
 8005718:	e036      	b.n	8005788 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	f003 0304 	and.w	r3, r3, #4
 8005722:	2b00      	cmp	r3, #0
 8005724:	d008      	beq.n	8005738 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005726:	4b1b      	ldr	r3, [pc, #108]	; (8005794 <HAL_RCC_ClockConfig+0x1f0>)
 8005728:	689b      	ldr	r3, [r3, #8]
 800572a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	68db      	ldr	r3, [r3, #12]
 8005732:	4918      	ldr	r1, [pc, #96]	; (8005794 <HAL_RCC_ClockConfig+0x1f0>)
 8005734:	4313      	orrs	r3, r2
 8005736:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	f003 0308 	and.w	r3, r3, #8
 8005740:	2b00      	cmp	r3, #0
 8005742:	d009      	beq.n	8005758 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005744:	4b13      	ldr	r3, [pc, #76]	; (8005794 <HAL_RCC_ClockConfig+0x1f0>)
 8005746:	689b      	ldr	r3, [r3, #8]
 8005748:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	691b      	ldr	r3, [r3, #16]
 8005750:	00db      	lsls	r3, r3, #3
 8005752:	4910      	ldr	r1, [pc, #64]	; (8005794 <HAL_RCC_ClockConfig+0x1f0>)
 8005754:	4313      	orrs	r3, r2
 8005756:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005758:	f000 f824 	bl	80057a4 <HAL_RCC_GetSysClockFreq>
 800575c:	4602      	mov	r2, r0
 800575e:	4b0d      	ldr	r3, [pc, #52]	; (8005794 <HAL_RCC_ClockConfig+0x1f0>)
 8005760:	689b      	ldr	r3, [r3, #8]
 8005762:	091b      	lsrs	r3, r3, #4
 8005764:	f003 030f 	and.w	r3, r3, #15
 8005768:	490b      	ldr	r1, [pc, #44]	; (8005798 <HAL_RCC_ClockConfig+0x1f4>)
 800576a:	5ccb      	ldrb	r3, [r1, r3]
 800576c:	f003 031f 	and.w	r3, r3, #31
 8005770:	fa22 f303 	lsr.w	r3, r2, r3
 8005774:	4a09      	ldr	r2, [pc, #36]	; (800579c <HAL_RCC_ClockConfig+0x1f8>)
 8005776:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8005778:	4b09      	ldr	r3, [pc, #36]	; (80057a0 <HAL_RCC_ClockConfig+0x1fc>)
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	4618      	mov	r0, r3
 800577e:	f7fd f879 	bl	8002874 <HAL_InitTick>
 8005782:	4603      	mov	r3, r0
 8005784:	72fb      	strb	r3, [r7, #11]

  return status;
 8005786:	7afb      	ldrb	r3, [r7, #11]
}
 8005788:	4618      	mov	r0, r3
 800578a:	3710      	adds	r7, #16
 800578c:	46bd      	mov	sp, r7
 800578e:	bd80      	pop	{r7, pc}
 8005790:	40022000 	.word	0x40022000
 8005794:	40021000 	.word	0x40021000
 8005798:	0800c070 	.word	0x0800c070
 800579c:	20000000 	.word	0x20000000
 80057a0:	20000004 	.word	0x20000004

080057a4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80057a4:	b480      	push	{r7}
 80057a6:	b089      	sub	sp, #36	; 0x24
 80057a8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80057aa:	2300      	movs	r3, #0
 80057ac:	61fb      	str	r3, [r7, #28]
 80057ae:	2300      	movs	r3, #0
 80057b0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80057b2:	4b3e      	ldr	r3, [pc, #248]	; (80058ac <HAL_RCC_GetSysClockFreq+0x108>)
 80057b4:	689b      	ldr	r3, [r3, #8]
 80057b6:	f003 030c 	and.w	r3, r3, #12
 80057ba:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80057bc:	4b3b      	ldr	r3, [pc, #236]	; (80058ac <HAL_RCC_GetSysClockFreq+0x108>)
 80057be:	68db      	ldr	r3, [r3, #12]
 80057c0:	f003 0303 	and.w	r3, r3, #3
 80057c4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80057c6:	693b      	ldr	r3, [r7, #16]
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d005      	beq.n	80057d8 <HAL_RCC_GetSysClockFreq+0x34>
 80057cc:	693b      	ldr	r3, [r7, #16]
 80057ce:	2b0c      	cmp	r3, #12
 80057d0:	d121      	bne.n	8005816 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	2b01      	cmp	r3, #1
 80057d6:	d11e      	bne.n	8005816 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80057d8:	4b34      	ldr	r3, [pc, #208]	; (80058ac <HAL_RCC_GetSysClockFreq+0x108>)
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	f003 0308 	and.w	r3, r3, #8
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d107      	bne.n	80057f4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80057e4:	4b31      	ldr	r3, [pc, #196]	; (80058ac <HAL_RCC_GetSysClockFreq+0x108>)
 80057e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80057ea:	0a1b      	lsrs	r3, r3, #8
 80057ec:	f003 030f 	and.w	r3, r3, #15
 80057f0:	61fb      	str	r3, [r7, #28]
 80057f2:	e005      	b.n	8005800 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80057f4:	4b2d      	ldr	r3, [pc, #180]	; (80058ac <HAL_RCC_GetSysClockFreq+0x108>)
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	091b      	lsrs	r3, r3, #4
 80057fa:	f003 030f 	and.w	r3, r3, #15
 80057fe:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8005800:	4a2b      	ldr	r2, [pc, #172]	; (80058b0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8005802:	69fb      	ldr	r3, [r7, #28]
 8005804:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005808:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800580a:	693b      	ldr	r3, [r7, #16]
 800580c:	2b00      	cmp	r3, #0
 800580e:	d10d      	bne.n	800582c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8005810:	69fb      	ldr	r3, [r7, #28]
 8005812:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005814:	e00a      	b.n	800582c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8005816:	693b      	ldr	r3, [r7, #16]
 8005818:	2b04      	cmp	r3, #4
 800581a:	d102      	bne.n	8005822 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800581c:	4b25      	ldr	r3, [pc, #148]	; (80058b4 <HAL_RCC_GetSysClockFreq+0x110>)
 800581e:	61bb      	str	r3, [r7, #24]
 8005820:	e004      	b.n	800582c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8005822:	693b      	ldr	r3, [r7, #16]
 8005824:	2b08      	cmp	r3, #8
 8005826:	d101      	bne.n	800582c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005828:	4b23      	ldr	r3, [pc, #140]	; (80058b8 <HAL_RCC_GetSysClockFreq+0x114>)
 800582a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800582c:	693b      	ldr	r3, [r7, #16]
 800582e:	2b0c      	cmp	r3, #12
 8005830:	d134      	bne.n	800589c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005832:	4b1e      	ldr	r3, [pc, #120]	; (80058ac <HAL_RCC_GetSysClockFreq+0x108>)
 8005834:	68db      	ldr	r3, [r3, #12]
 8005836:	f003 0303 	and.w	r3, r3, #3
 800583a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800583c:	68bb      	ldr	r3, [r7, #8]
 800583e:	2b02      	cmp	r3, #2
 8005840:	d003      	beq.n	800584a <HAL_RCC_GetSysClockFreq+0xa6>
 8005842:	68bb      	ldr	r3, [r7, #8]
 8005844:	2b03      	cmp	r3, #3
 8005846:	d003      	beq.n	8005850 <HAL_RCC_GetSysClockFreq+0xac>
 8005848:	e005      	b.n	8005856 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800584a:	4b1a      	ldr	r3, [pc, #104]	; (80058b4 <HAL_RCC_GetSysClockFreq+0x110>)
 800584c:	617b      	str	r3, [r7, #20]
      break;
 800584e:	e005      	b.n	800585c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8005850:	4b19      	ldr	r3, [pc, #100]	; (80058b8 <HAL_RCC_GetSysClockFreq+0x114>)
 8005852:	617b      	str	r3, [r7, #20]
      break;
 8005854:	e002      	b.n	800585c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8005856:	69fb      	ldr	r3, [r7, #28]
 8005858:	617b      	str	r3, [r7, #20]
      break;
 800585a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800585c:	4b13      	ldr	r3, [pc, #76]	; (80058ac <HAL_RCC_GetSysClockFreq+0x108>)
 800585e:	68db      	ldr	r3, [r3, #12]
 8005860:	091b      	lsrs	r3, r3, #4
 8005862:	f003 0307 	and.w	r3, r3, #7
 8005866:	3301      	adds	r3, #1
 8005868:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800586a:	4b10      	ldr	r3, [pc, #64]	; (80058ac <HAL_RCC_GetSysClockFreq+0x108>)
 800586c:	68db      	ldr	r3, [r3, #12]
 800586e:	0a1b      	lsrs	r3, r3, #8
 8005870:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005874:	697a      	ldr	r2, [r7, #20]
 8005876:	fb03 f202 	mul.w	r2, r3, r2
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005880:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005882:	4b0a      	ldr	r3, [pc, #40]	; (80058ac <HAL_RCC_GetSysClockFreq+0x108>)
 8005884:	68db      	ldr	r3, [r3, #12]
 8005886:	0e5b      	lsrs	r3, r3, #25
 8005888:	f003 0303 	and.w	r3, r3, #3
 800588c:	3301      	adds	r3, #1
 800588e:	005b      	lsls	r3, r3, #1
 8005890:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8005892:	697a      	ldr	r2, [r7, #20]
 8005894:	683b      	ldr	r3, [r7, #0]
 8005896:	fbb2 f3f3 	udiv	r3, r2, r3
 800589a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800589c:	69bb      	ldr	r3, [r7, #24]
}
 800589e:	4618      	mov	r0, r3
 80058a0:	3724      	adds	r7, #36	; 0x24
 80058a2:	46bd      	mov	sp, r7
 80058a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a8:	4770      	bx	lr
 80058aa:	bf00      	nop
 80058ac:	40021000 	.word	0x40021000
 80058b0:	0800c088 	.word	0x0800c088
 80058b4:	00f42400 	.word	0x00f42400
 80058b8:	007a1200 	.word	0x007a1200

080058bc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80058bc:	b480      	push	{r7}
 80058be:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80058c0:	4b03      	ldr	r3, [pc, #12]	; (80058d0 <HAL_RCC_GetHCLKFreq+0x14>)
 80058c2:	681b      	ldr	r3, [r3, #0]
}
 80058c4:	4618      	mov	r0, r3
 80058c6:	46bd      	mov	sp, r7
 80058c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058cc:	4770      	bx	lr
 80058ce:	bf00      	nop
 80058d0:	20000000 	.word	0x20000000

080058d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80058d4:	b580      	push	{r7, lr}
 80058d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80058d8:	f7ff fff0 	bl	80058bc <HAL_RCC_GetHCLKFreq>
 80058dc:	4602      	mov	r2, r0
 80058de:	4b06      	ldr	r3, [pc, #24]	; (80058f8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80058e0:	689b      	ldr	r3, [r3, #8]
 80058e2:	0a1b      	lsrs	r3, r3, #8
 80058e4:	f003 0307 	and.w	r3, r3, #7
 80058e8:	4904      	ldr	r1, [pc, #16]	; (80058fc <HAL_RCC_GetPCLK1Freq+0x28>)
 80058ea:	5ccb      	ldrb	r3, [r1, r3]
 80058ec:	f003 031f 	and.w	r3, r3, #31
 80058f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80058f4:	4618      	mov	r0, r3
 80058f6:	bd80      	pop	{r7, pc}
 80058f8:	40021000 	.word	0x40021000
 80058fc:	0800c080 	.word	0x0800c080

08005900 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005900:	b580      	push	{r7, lr}
 8005902:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005904:	f7ff ffda 	bl	80058bc <HAL_RCC_GetHCLKFreq>
 8005908:	4602      	mov	r2, r0
 800590a:	4b06      	ldr	r3, [pc, #24]	; (8005924 <HAL_RCC_GetPCLK2Freq+0x24>)
 800590c:	689b      	ldr	r3, [r3, #8]
 800590e:	0adb      	lsrs	r3, r3, #11
 8005910:	f003 0307 	and.w	r3, r3, #7
 8005914:	4904      	ldr	r1, [pc, #16]	; (8005928 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005916:	5ccb      	ldrb	r3, [r1, r3]
 8005918:	f003 031f 	and.w	r3, r3, #31
 800591c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005920:	4618      	mov	r0, r3
 8005922:	bd80      	pop	{r7, pc}
 8005924:	40021000 	.word	0x40021000
 8005928:	0800c080 	.word	0x0800c080

0800592c <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800592c:	b480      	push	{r7}
 800592e:	b083      	sub	sp, #12
 8005930:	af00      	add	r7, sp, #0
 8005932:	6078      	str	r0, [r7, #4]
 8005934:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	220f      	movs	r2, #15
 800593a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 800593c:	4b12      	ldr	r3, [pc, #72]	; (8005988 <HAL_RCC_GetClockConfig+0x5c>)
 800593e:	689b      	ldr	r3, [r3, #8]
 8005940:	f003 0203 	and.w	r2, r3, #3
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8005948:	4b0f      	ldr	r3, [pc, #60]	; (8005988 <HAL_RCC_GetClockConfig+0x5c>)
 800594a:	689b      	ldr	r3, [r3, #8]
 800594c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8005954:	4b0c      	ldr	r3, [pc, #48]	; (8005988 <HAL_RCC_GetClockConfig+0x5c>)
 8005956:	689b      	ldr	r3, [r3, #8]
 8005958:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8005960:	4b09      	ldr	r3, [pc, #36]	; (8005988 <HAL_RCC_GetClockConfig+0x5c>)
 8005962:	689b      	ldr	r3, [r3, #8]
 8005964:	08db      	lsrs	r3, r3, #3
 8005966:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 800596e:	4b07      	ldr	r3, [pc, #28]	; (800598c <HAL_RCC_GetClockConfig+0x60>)
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	f003 0207 	and.w	r2, r3, #7
 8005976:	683b      	ldr	r3, [r7, #0]
 8005978:	601a      	str	r2, [r3, #0]
}
 800597a:	bf00      	nop
 800597c:	370c      	adds	r7, #12
 800597e:	46bd      	mov	sp, r7
 8005980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005984:	4770      	bx	lr
 8005986:	bf00      	nop
 8005988:	40021000 	.word	0x40021000
 800598c:	40022000 	.word	0x40022000

08005990 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8005990:	b580      	push	{r7, lr}
 8005992:	b086      	sub	sp, #24
 8005994:	af00      	add	r7, sp, #0
 8005996:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8005998:	2300      	movs	r3, #0
 800599a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800599c:	4b2a      	ldr	r3, [pc, #168]	; (8005a48 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800599e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80059a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d003      	beq.n	80059b0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80059a8:	f7ff f984 	bl	8004cb4 <HAL_PWREx_GetVoltageRange>
 80059ac:	6178      	str	r0, [r7, #20]
 80059ae:	e014      	b.n	80059da <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80059b0:	4b25      	ldr	r3, [pc, #148]	; (8005a48 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80059b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80059b4:	4a24      	ldr	r2, [pc, #144]	; (8005a48 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80059b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80059ba:	6593      	str	r3, [r2, #88]	; 0x58
 80059bc:	4b22      	ldr	r3, [pc, #136]	; (8005a48 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80059be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80059c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80059c4:	60fb      	str	r3, [r7, #12]
 80059c6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80059c8:	f7ff f974 	bl	8004cb4 <HAL_PWREx_GetVoltageRange>
 80059cc:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80059ce:	4b1e      	ldr	r3, [pc, #120]	; (8005a48 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80059d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80059d2:	4a1d      	ldr	r2, [pc, #116]	; (8005a48 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80059d4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80059d8:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80059da:	697b      	ldr	r3, [r7, #20]
 80059dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80059e0:	d10b      	bne.n	80059fa <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	2b80      	cmp	r3, #128	; 0x80
 80059e6:	d919      	bls.n	8005a1c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	2ba0      	cmp	r3, #160	; 0xa0
 80059ec:	d902      	bls.n	80059f4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80059ee:	2302      	movs	r3, #2
 80059f0:	613b      	str	r3, [r7, #16]
 80059f2:	e013      	b.n	8005a1c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80059f4:	2301      	movs	r3, #1
 80059f6:	613b      	str	r3, [r7, #16]
 80059f8:	e010      	b.n	8005a1c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	2b80      	cmp	r3, #128	; 0x80
 80059fe:	d902      	bls.n	8005a06 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8005a00:	2303      	movs	r3, #3
 8005a02:	613b      	str	r3, [r7, #16]
 8005a04:	e00a      	b.n	8005a1c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	2b80      	cmp	r3, #128	; 0x80
 8005a0a:	d102      	bne.n	8005a12 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005a0c:	2302      	movs	r3, #2
 8005a0e:	613b      	str	r3, [r7, #16]
 8005a10:	e004      	b.n	8005a1c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	2b70      	cmp	r3, #112	; 0x70
 8005a16:	d101      	bne.n	8005a1c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005a18:	2301      	movs	r3, #1
 8005a1a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005a1c:	4b0b      	ldr	r3, [pc, #44]	; (8005a4c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	f023 0207 	bic.w	r2, r3, #7
 8005a24:	4909      	ldr	r1, [pc, #36]	; (8005a4c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005a26:	693b      	ldr	r3, [r7, #16]
 8005a28:	4313      	orrs	r3, r2
 8005a2a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8005a2c:	4b07      	ldr	r3, [pc, #28]	; (8005a4c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	f003 0307 	and.w	r3, r3, #7
 8005a34:	693a      	ldr	r2, [r7, #16]
 8005a36:	429a      	cmp	r2, r3
 8005a38:	d001      	beq.n	8005a3e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8005a3a:	2301      	movs	r3, #1
 8005a3c:	e000      	b.n	8005a40 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8005a3e:	2300      	movs	r3, #0
}
 8005a40:	4618      	mov	r0, r3
 8005a42:	3718      	adds	r7, #24
 8005a44:	46bd      	mov	sp, r7
 8005a46:	bd80      	pop	{r7, pc}
 8005a48:	40021000 	.word	0x40021000
 8005a4c:	40022000 	.word	0x40022000

08005a50 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005a50:	b580      	push	{r7, lr}
 8005a52:	b086      	sub	sp, #24
 8005a54:	af00      	add	r7, sp, #0
 8005a56:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005a58:	2300      	movs	r3, #0
 8005a5a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005a5c:	2300      	movs	r3, #0
 8005a5e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d031      	beq.n	8005ad0 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a70:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005a74:	d01a      	beq.n	8005aac <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8005a76:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005a7a:	d814      	bhi.n	8005aa6 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d009      	beq.n	8005a94 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8005a80:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005a84:	d10f      	bne.n	8005aa6 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8005a86:	4b5d      	ldr	r3, [pc, #372]	; (8005bfc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005a88:	68db      	ldr	r3, [r3, #12]
 8005a8a:	4a5c      	ldr	r2, [pc, #368]	; (8005bfc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005a8c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005a90:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005a92:	e00c      	b.n	8005aae <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	3304      	adds	r3, #4
 8005a98:	2100      	movs	r1, #0
 8005a9a:	4618      	mov	r0, r3
 8005a9c:	f000 f9de 	bl	8005e5c <RCCEx_PLLSAI1_Config>
 8005aa0:	4603      	mov	r3, r0
 8005aa2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005aa4:	e003      	b.n	8005aae <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005aa6:	2301      	movs	r3, #1
 8005aa8:	74fb      	strb	r3, [r7, #19]
      break;
 8005aaa:	e000      	b.n	8005aae <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8005aac:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005aae:	7cfb      	ldrb	r3, [r7, #19]
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d10b      	bne.n	8005acc <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005ab4:	4b51      	ldr	r3, [pc, #324]	; (8005bfc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005ab6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005aba:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ac2:	494e      	ldr	r1, [pc, #312]	; (8005bfc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005ac4:	4313      	orrs	r3, r2
 8005ac6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8005aca:	e001      	b.n	8005ad0 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005acc:	7cfb      	ldrb	r3, [r7, #19]
 8005ace:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	f000 809e 	beq.w	8005c1a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005ade:	2300      	movs	r3, #0
 8005ae0:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005ae2:	4b46      	ldr	r3, [pc, #280]	; (8005bfc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005ae4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ae6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d101      	bne.n	8005af2 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8005aee:	2301      	movs	r3, #1
 8005af0:	e000      	b.n	8005af4 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8005af2:	2300      	movs	r3, #0
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d00d      	beq.n	8005b14 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005af8:	4b40      	ldr	r3, [pc, #256]	; (8005bfc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005afa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005afc:	4a3f      	ldr	r2, [pc, #252]	; (8005bfc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005afe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005b02:	6593      	str	r3, [r2, #88]	; 0x58
 8005b04:	4b3d      	ldr	r3, [pc, #244]	; (8005bfc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005b06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b08:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005b0c:	60bb      	str	r3, [r7, #8]
 8005b0e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005b10:	2301      	movs	r3, #1
 8005b12:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005b14:	4b3a      	ldr	r3, [pc, #232]	; (8005c00 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	4a39      	ldr	r2, [pc, #228]	; (8005c00 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8005b1a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005b1e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005b20:	f7fe f882 	bl	8003c28 <HAL_GetTick>
 8005b24:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005b26:	e009      	b.n	8005b3c <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005b28:	f7fe f87e 	bl	8003c28 <HAL_GetTick>
 8005b2c:	4602      	mov	r2, r0
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	1ad3      	subs	r3, r2, r3
 8005b32:	2b02      	cmp	r3, #2
 8005b34:	d902      	bls.n	8005b3c <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8005b36:	2303      	movs	r3, #3
 8005b38:	74fb      	strb	r3, [r7, #19]
        break;
 8005b3a:	e005      	b.n	8005b48 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005b3c:	4b30      	ldr	r3, [pc, #192]	; (8005c00 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d0ef      	beq.n	8005b28 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8005b48:	7cfb      	ldrb	r3, [r7, #19]
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d15a      	bne.n	8005c04 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005b4e:	4b2b      	ldr	r3, [pc, #172]	; (8005bfc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005b50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b54:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005b58:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005b5a:	697b      	ldr	r3, [r7, #20]
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d01e      	beq.n	8005b9e <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b64:	697a      	ldr	r2, [r7, #20]
 8005b66:	429a      	cmp	r2, r3
 8005b68:	d019      	beq.n	8005b9e <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005b6a:	4b24      	ldr	r3, [pc, #144]	; (8005bfc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005b6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b70:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005b74:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005b76:	4b21      	ldr	r3, [pc, #132]	; (8005bfc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005b78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b7c:	4a1f      	ldr	r2, [pc, #124]	; (8005bfc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005b7e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005b82:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005b86:	4b1d      	ldr	r3, [pc, #116]	; (8005bfc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005b88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b8c:	4a1b      	ldr	r2, [pc, #108]	; (8005bfc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005b8e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005b92:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005b96:	4a19      	ldr	r2, [pc, #100]	; (8005bfc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005b98:	697b      	ldr	r3, [r7, #20]
 8005b9a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005b9e:	697b      	ldr	r3, [r7, #20]
 8005ba0:	f003 0301 	and.w	r3, r3, #1
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d016      	beq.n	8005bd6 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ba8:	f7fe f83e 	bl	8003c28 <HAL_GetTick>
 8005bac:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005bae:	e00b      	b.n	8005bc8 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005bb0:	f7fe f83a 	bl	8003c28 <HAL_GetTick>
 8005bb4:	4602      	mov	r2, r0
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	1ad3      	subs	r3, r2, r3
 8005bba:	f241 3288 	movw	r2, #5000	; 0x1388
 8005bbe:	4293      	cmp	r3, r2
 8005bc0:	d902      	bls.n	8005bc8 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8005bc2:	2303      	movs	r3, #3
 8005bc4:	74fb      	strb	r3, [r7, #19]
            break;
 8005bc6:	e006      	b.n	8005bd6 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005bc8:	4b0c      	ldr	r3, [pc, #48]	; (8005bfc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005bca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005bce:	f003 0302 	and.w	r3, r3, #2
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d0ec      	beq.n	8005bb0 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8005bd6:	7cfb      	ldrb	r3, [r7, #19]
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d10b      	bne.n	8005bf4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005bdc:	4b07      	ldr	r3, [pc, #28]	; (8005bfc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005bde:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005be2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005bea:	4904      	ldr	r1, [pc, #16]	; (8005bfc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005bec:	4313      	orrs	r3, r2
 8005bee:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8005bf2:	e009      	b.n	8005c08 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005bf4:	7cfb      	ldrb	r3, [r7, #19]
 8005bf6:	74bb      	strb	r3, [r7, #18]
 8005bf8:	e006      	b.n	8005c08 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8005bfa:	bf00      	nop
 8005bfc:	40021000 	.word	0x40021000
 8005c00:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c04:	7cfb      	ldrb	r3, [r7, #19]
 8005c06:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005c08:	7c7b      	ldrb	r3, [r7, #17]
 8005c0a:	2b01      	cmp	r3, #1
 8005c0c:	d105      	bne.n	8005c1a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005c0e:	4b8a      	ldr	r3, [pc, #552]	; (8005e38 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005c10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c12:	4a89      	ldr	r2, [pc, #548]	; (8005e38 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005c14:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005c18:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	f003 0301 	and.w	r3, r3, #1
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d00a      	beq.n	8005c3c <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005c26:	4b84      	ldr	r3, [pc, #528]	; (8005e38 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005c28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c2c:	f023 0203 	bic.w	r2, r3, #3
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	6a1b      	ldr	r3, [r3, #32]
 8005c34:	4980      	ldr	r1, [pc, #512]	; (8005e38 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005c36:	4313      	orrs	r3, r2
 8005c38:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	f003 0302 	and.w	r3, r3, #2
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d00a      	beq.n	8005c5e <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005c48:	4b7b      	ldr	r3, [pc, #492]	; (8005e38 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005c4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c4e:	f023 020c 	bic.w	r2, r3, #12
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c56:	4978      	ldr	r1, [pc, #480]	; (8005e38 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005c58:	4313      	orrs	r3, r2
 8005c5a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	f003 0320 	and.w	r3, r3, #32
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d00a      	beq.n	8005c80 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005c6a:	4b73      	ldr	r3, [pc, #460]	; (8005e38 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005c6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c70:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c78:	496f      	ldr	r1, [pc, #444]	; (8005e38 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005c7a:	4313      	orrs	r3, r2
 8005c7c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d00a      	beq.n	8005ca2 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005c8c:	4b6a      	ldr	r3, [pc, #424]	; (8005e38 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005c8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c92:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c9a:	4967      	ldr	r1, [pc, #412]	; (8005e38 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005c9c:	4313      	orrs	r3, r2
 8005c9e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d00a      	beq.n	8005cc4 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005cae:	4b62      	ldr	r3, [pc, #392]	; (8005e38 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005cb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005cb4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cbc:	495e      	ldr	r1, [pc, #376]	; (8005e38 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005cbe:	4313      	orrs	r3, r2
 8005cc0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d00a      	beq.n	8005ce6 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005cd0:	4b59      	ldr	r3, [pc, #356]	; (8005e38 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005cd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005cd6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cde:	4956      	ldr	r1, [pc, #344]	; (8005e38 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005ce0:	4313      	orrs	r3, r2
 8005ce2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d00a      	beq.n	8005d08 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005cf2:	4b51      	ldr	r3, [pc, #324]	; (8005e38 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005cf4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005cf8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d00:	494d      	ldr	r1, [pc, #308]	; (8005e38 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005d02:	4313      	orrs	r3, r2
 8005d04:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d028      	beq.n	8005d66 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005d14:	4b48      	ldr	r3, [pc, #288]	; (8005e38 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005d16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d1a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d22:	4945      	ldr	r1, [pc, #276]	; (8005e38 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005d24:	4313      	orrs	r3, r2
 8005d26:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d2e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005d32:	d106      	bne.n	8005d42 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005d34:	4b40      	ldr	r3, [pc, #256]	; (8005e38 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005d36:	68db      	ldr	r3, [r3, #12]
 8005d38:	4a3f      	ldr	r2, [pc, #252]	; (8005e38 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005d3a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005d3e:	60d3      	str	r3, [r2, #12]
 8005d40:	e011      	b.n	8005d66 <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d46:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005d4a:	d10c      	bne.n	8005d66 <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	3304      	adds	r3, #4
 8005d50:	2101      	movs	r1, #1
 8005d52:	4618      	mov	r0, r3
 8005d54:	f000 f882 	bl	8005e5c <RCCEx_PLLSAI1_Config>
 8005d58:	4603      	mov	r3, r0
 8005d5a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8005d5c:	7cfb      	ldrb	r3, [r7, #19]
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d001      	beq.n	8005d66 <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 8005d62:	7cfb      	ldrb	r3, [r7, #19]
 8005d64:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d028      	beq.n	8005dc4 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005d72:	4b31      	ldr	r3, [pc, #196]	; (8005e38 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005d74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d78:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d80:	492d      	ldr	r1, [pc, #180]	; (8005e38 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005d82:	4313      	orrs	r3, r2
 8005d84:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d8c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005d90:	d106      	bne.n	8005da0 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005d92:	4b29      	ldr	r3, [pc, #164]	; (8005e38 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005d94:	68db      	ldr	r3, [r3, #12]
 8005d96:	4a28      	ldr	r2, [pc, #160]	; (8005e38 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005d98:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005d9c:	60d3      	str	r3, [r2, #12]
 8005d9e:	e011      	b.n	8005dc4 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005da4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005da8:	d10c      	bne.n	8005dc4 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	3304      	adds	r3, #4
 8005dae:	2101      	movs	r1, #1
 8005db0:	4618      	mov	r0, r3
 8005db2:	f000 f853 	bl	8005e5c <RCCEx_PLLSAI1_Config>
 8005db6:	4603      	mov	r3, r0
 8005db8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005dba:	7cfb      	ldrb	r3, [r7, #19]
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d001      	beq.n	8005dc4 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 8005dc0:	7cfb      	ldrb	r3, [r7, #19]
 8005dc2:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d01c      	beq.n	8005e0a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005dd0:	4b19      	ldr	r3, [pc, #100]	; (8005e38 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005dd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005dd6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005dde:	4916      	ldr	r1, [pc, #88]	; (8005e38 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005de0:	4313      	orrs	r3, r2
 8005de2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005dea:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005dee:	d10c      	bne.n	8005e0a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	3304      	adds	r3, #4
 8005df4:	2102      	movs	r1, #2
 8005df6:	4618      	mov	r0, r3
 8005df8:	f000 f830 	bl	8005e5c <RCCEx_PLLSAI1_Config>
 8005dfc:	4603      	mov	r3, r0
 8005dfe:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005e00:	7cfb      	ldrb	r3, [r7, #19]
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d001      	beq.n	8005e0a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 8005e06:	7cfb      	ldrb	r3, [r7, #19]
 8005e08:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d00a      	beq.n	8005e2c <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005e16:	4b08      	ldr	r3, [pc, #32]	; (8005e38 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005e18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e1c:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005e24:	4904      	ldr	r1, [pc, #16]	; (8005e38 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005e26:	4313      	orrs	r3, r2
 8005e28:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8005e2c:	7cbb      	ldrb	r3, [r7, #18]
}
 8005e2e:	4618      	mov	r0, r3
 8005e30:	3718      	adds	r7, #24
 8005e32:	46bd      	mov	sp, r7
 8005e34:	bd80      	pop	{r7, pc}
 8005e36:	bf00      	nop
 8005e38:	40021000 	.word	0x40021000

08005e3c <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8005e3c:	b480      	push	{r7}
 8005e3e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8005e40:	4b05      	ldr	r3, [pc, #20]	; (8005e58 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	4a04      	ldr	r2, [pc, #16]	; (8005e58 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8005e46:	f043 0304 	orr.w	r3, r3, #4
 8005e4a:	6013      	str	r3, [r2, #0]
}
 8005e4c:	bf00      	nop
 8005e4e:	46bd      	mov	sp, r7
 8005e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e54:	4770      	bx	lr
 8005e56:	bf00      	nop
 8005e58:	40021000 	.word	0x40021000

08005e5c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8005e5c:	b580      	push	{r7, lr}
 8005e5e:	b084      	sub	sp, #16
 8005e60:	af00      	add	r7, sp, #0
 8005e62:	6078      	str	r0, [r7, #4]
 8005e64:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005e66:	2300      	movs	r3, #0
 8005e68:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005e6a:	4b74      	ldr	r3, [pc, #464]	; (800603c <RCCEx_PLLSAI1_Config+0x1e0>)
 8005e6c:	68db      	ldr	r3, [r3, #12]
 8005e6e:	f003 0303 	and.w	r3, r3, #3
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d018      	beq.n	8005ea8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8005e76:	4b71      	ldr	r3, [pc, #452]	; (800603c <RCCEx_PLLSAI1_Config+0x1e0>)
 8005e78:	68db      	ldr	r3, [r3, #12]
 8005e7a:	f003 0203 	and.w	r2, r3, #3
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	429a      	cmp	r2, r3
 8005e84:	d10d      	bne.n	8005ea2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
       ||
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d009      	beq.n	8005ea2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8005e8e:	4b6b      	ldr	r3, [pc, #428]	; (800603c <RCCEx_PLLSAI1_Config+0x1e0>)
 8005e90:	68db      	ldr	r3, [r3, #12]
 8005e92:	091b      	lsrs	r3, r3, #4
 8005e94:	f003 0307 	and.w	r3, r3, #7
 8005e98:	1c5a      	adds	r2, r3, #1
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	685b      	ldr	r3, [r3, #4]
       ||
 8005e9e:	429a      	cmp	r2, r3
 8005ea0:	d047      	beq.n	8005f32 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8005ea2:	2301      	movs	r3, #1
 8005ea4:	73fb      	strb	r3, [r7, #15]
 8005ea6:	e044      	b.n	8005f32 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	2b03      	cmp	r3, #3
 8005eae:	d018      	beq.n	8005ee2 <RCCEx_PLLSAI1_Config+0x86>
 8005eb0:	2b03      	cmp	r3, #3
 8005eb2:	d825      	bhi.n	8005f00 <RCCEx_PLLSAI1_Config+0xa4>
 8005eb4:	2b01      	cmp	r3, #1
 8005eb6:	d002      	beq.n	8005ebe <RCCEx_PLLSAI1_Config+0x62>
 8005eb8:	2b02      	cmp	r3, #2
 8005eba:	d009      	beq.n	8005ed0 <RCCEx_PLLSAI1_Config+0x74>
 8005ebc:	e020      	b.n	8005f00 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005ebe:	4b5f      	ldr	r3, [pc, #380]	; (800603c <RCCEx_PLLSAI1_Config+0x1e0>)
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	f003 0302 	and.w	r3, r3, #2
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d11d      	bne.n	8005f06 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8005eca:	2301      	movs	r3, #1
 8005ecc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005ece:	e01a      	b.n	8005f06 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005ed0:	4b5a      	ldr	r3, [pc, #360]	; (800603c <RCCEx_PLLSAI1_Config+0x1e0>)
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d116      	bne.n	8005f0a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8005edc:	2301      	movs	r3, #1
 8005ede:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005ee0:	e013      	b.n	8005f0a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005ee2:	4b56      	ldr	r3, [pc, #344]	; (800603c <RCCEx_PLLSAI1_Config+0x1e0>)
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d10f      	bne.n	8005f0e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005eee:	4b53      	ldr	r3, [pc, #332]	; (800603c <RCCEx_PLLSAI1_Config+0x1e0>)
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d109      	bne.n	8005f0e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8005efa:	2301      	movs	r3, #1
 8005efc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005efe:	e006      	b.n	8005f0e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005f00:	2301      	movs	r3, #1
 8005f02:	73fb      	strb	r3, [r7, #15]
      break;
 8005f04:	e004      	b.n	8005f10 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005f06:	bf00      	nop
 8005f08:	e002      	b.n	8005f10 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005f0a:	bf00      	nop
 8005f0c:	e000      	b.n	8005f10 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005f0e:	bf00      	nop
    }

    if(status == HAL_OK)
 8005f10:	7bfb      	ldrb	r3, [r7, #15]
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d10d      	bne.n	8005f32 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005f16:	4b49      	ldr	r3, [pc, #292]	; (800603c <RCCEx_PLLSAI1_Config+0x1e0>)
 8005f18:	68db      	ldr	r3, [r3, #12]
 8005f1a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	6819      	ldr	r1, [r3, #0]
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	685b      	ldr	r3, [r3, #4]
 8005f26:	3b01      	subs	r3, #1
 8005f28:	011b      	lsls	r3, r3, #4
 8005f2a:	430b      	orrs	r3, r1
 8005f2c:	4943      	ldr	r1, [pc, #268]	; (800603c <RCCEx_PLLSAI1_Config+0x1e0>)
 8005f2e:	4313      	orrs	r3, r2
 8005f30:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005f32:	7bfb      	ldrb	r3, [r7, #15]
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d17c      	bne.n	8006032 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8005f38:	4b40      	ldr	r3, [pc, #256]	; (800603c <RCCEx_PLLSAI1_Config+0x1e0>)
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	4a3f      	ldr	r2, [pc, #252]	; (800603c <RCCEx_PLLSAI1_Config+0x1e0>)
 8005f3e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005f42:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005f44:	f7fd fe70 	bl	8003c28 <HAL_GetTick>
 8005f48:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005f4a:	e009      	b.n	8005f60 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005f4c:	f7fd fe6c 	bl	8003c28 <HAL_GetTick>
 8005f50:	4602      	mov	r2, r0
 8005f52:	68bb      	ldr	r3, [r7, #8]
 8005f54:	1ad3      	subs	r3, r2, r3
 8005f56:	2b02      	cmp	r3, #2
 8005f58:	d902      	bls.n	8005f60 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8005f5a:	2303      	movs	r3, #3
 8005f5c:	73fb      	strb	r3, [r7, #15]
        break;
 8005f5e:	e005      	b.n	8005f6c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005f60:	4b36      	ldr	r3, [pc, #216]	; (800603c <RCCEx_PLLSAI1_Config+0x1e0>)
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d1ef      	bne.n	8005f4c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005f6c:	7bfb      	ldrb	r3, [r7, #15]
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d15f      	bne.n	8006032 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005f72:	683b      	ldr	r3, [r7, #0]
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d110      	bne.n	8005f9a <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005f78:	4b30      	ldr	r3, [pc, #192]	; (800603c <RCCEx_PLLSAI1_Config+0x1e0>)
 8005f7a:	691b      	ldr	r3, [r3, #16]
 8005f7c:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8005f80:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005f84:	687a      	ldr	r2, [r7, #4]
 8005f86:	6892      	ldr	r2, [r2, #8]
 8005f88:	0211      	lsls	r1, r2, #8
 8005f8a:	687a      	ldr	r2, [r7, #4]
 8005f8c:	68d2      	ldr	r2, [r2, #12]
 8005f8e:	06d2      	lsls	r2, r2, #27
 8005f90:	430a      	orrs	r2, r1
 8005f92:	492a      	ldr	r1, [pc, #168]	; (800603c <RCCEx_PLLSAI1_Config+0x1e0>)
 8005f94:	4313      	orrs	r3, r2
 8005f96:	610b      	str	r3, [r1, #16]
 8005f98:	e027      	b.n	8005fea <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8005f9a:	683b      	ldr	r3, [r7, #0]
 8005f9c:	2b01      	cmp	r3, #1
 8005f9e:	d112      	bne.n	8005fc6 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005fa0:	4b26      	ldr	r3, [pc, #152]	; (800603c <RCCEx_PLLSAI1_Config+0x1e0>)
 8005fa2:	691b      	ldr	r3, [r3, #16]
 8005fa4:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8005fa8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005fac:	687a      	ldr	r2, [r7, #4]
 8005fae:	6892      	ldr	r2, [r2, #8]
 8005fb0:	0211      	lsls	r1, r2, #8
 8005fb2:	687a      	ldr	r2, [r7, #4]
 8005fb4:	6912      	ldr	r2, [r2, #16]
 8005fb6:	0852      	lsrs	r2, r2, #1
 8005fb8:	3a01      	subs	r2, #1
 8005fba:	0552      	lsls	r2, r2, #21
 8005fbc:	430a      	orrs	r2, r1
 8005fbe:	491f      	ldr	r1, [pc, #124]	; (800603c <RCCEx_PLLSAI1_Config+0x1e0>)
 8005fc0:	4313      	orrs	r3, r2
 8005fc2:	610b      	str	r3, [r1, #16]
 8005fc4:	e011      	b.n	8005fea <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005fc6:	4b1d      	ldr	r3, [pc, #116]	; (800603c <RCCEx_PLLSAI1_Config+0x1e0>)
 8005fc8:	691b      	ldr	r3, [r3, #16]
 8005fca:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8005fce:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005fd2:	687a      	ldr	r2, [r7, #4]
 8005fd4:	6892      	ldr	r2, [r2, #8]
 8005fd6:	0211      	lsls	r1, r2, #8
 8005fd8:	687a      	ldr	r2, [r7, #4]
 8005fda:	6952      	ldr	r2, [r2, #20]
 8005fdc:	0852      	lsrs	r2, r2, #1
 8005fde:	3a01      	subs	r2, #1
 8005fe0:	0652      	lsls	r2, r2, #25
 8005fe2:	430a      	orrs	r2, r1
 8005fe4:	4915      	ldr	r1, [pc, #84]	; (800603c <RCCEx_PLLSAI1_Config+0x1e0>)
 8005fe6:	4313      	orrs	r3, r2
 8005fe8:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8005fea:	4b14      	ldr	r3, [pc, #80]	; (800603c <RCCEx_PLLSAI1_Config+0x1e0>)
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	4a13      	ldr	r2, [pc, #76]	; (800603c <RCCEx_PLLSAI1_Config+0x1e0>)
 8005ff0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005ff4:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005ff6:	f7fd fe17 	bl	8003c28 <HAL_GetTick>
 8005ffa:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005ffc:	e009      	b.n	8006012 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005ffe:	f7fd fe13 	bl	8003c28 <HAL_GetTick>
 8006002:	4602      	mov	r2, r0
 8006004:	68bb      	ldr	r3, [r7, #8]
 8006006:	1ad3      	subs	r3, r2, r3
 8006008:	2b02      	cmp	r3, #2
 800600a:	d902      	bls.n	8006012 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 800600c:	2303      	movs	r3, #3
 800600e:	73fb      	strb	r3, [r7, #15]
          break;
 8006010:	e005      	b.n	800601e <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006012:	4b0a      	ldr	r3, [pc, #40]	; (800603c <RCCEx_PLLSAI1_Config+0x1e0>)
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800601a:	2b00      	cmp	r3, #0
 800601c:	d0ef      	beq.n	8005ffe <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 800601e:	7bfb      	ldrb	r3, [r7, #15]
 8006020:	2b00      	cmp	r3, #0
 8006022:	d106      	bne.n	8006032 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8006024:	4b05      	ldr	r3, [pc, #20]	; (800603c <RCCEx_PLLSAI1_Config+0x1e0>)
 8006026:	691a      	ldr	r2, [r3, #16]
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	699b      	ldr	r3, [r3, #24]
 800602c:	4903      	ldr	r1, [pc, #12]	; (800603c <RCCEx_PLLSAI1_Config+0x1e0>)
 800602e:	4313      	orrs	r3, r2
 8006030:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8006032:	7bfb      	ldrb	r3, [r7, #15]
}
 8006034:	4618      	mov	r0, r3
 8006036:	3710      	adds	r7, #16
 8006038:	46bd      	mov	sp, r7
 800603a:	bd80      	pop	{r7, pc}
 800603c:	40021000 	.word	0x40021000

08006040 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006040:	b580      	push	{r7, lr}
 8006042:	b082      	sub	sp, #8
 8006044:	af00      	add	r7, sp, #0
 8006046:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	2b00      	cmp	r3, #0
 800604c:	d101      	bne.n	8006052 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800604e:	2301      	movs	r3, #1
 8006050:	e049      	b.n	80060e6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006058:	b2db      	uxtb	r3, r3
 800605a:	2b00      	cmp	r3, #0
 800605c:	d106      	bne.n	800606c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	2200      	movs	r2, #0
 8006062:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006066:	6878      	ldr	r0, [r7, #4]
 8006068:	f000 f841 	bl	80060ee <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	2202      	movs	r2, #2
 8006070:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681a      	ldr	r2, [r3, #0]
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	3304      	adds	r3, #4
 800607c:	4619      	mov	r1, r3
 800607e:	4610      	mov	r0, r2
 8006080:	f000 f9dc 	bl	800643c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	2201      	movs	r2, #1
 8006088:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	2201      	movs	r2, #1
 8006090:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	2201      	movs	r2, #1
 8006098:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	2201      	movs	r2, #1
 80060a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	2201      	movs	r2, #1
 80060a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	2201      	movs	r2, #1
 80060b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	2201      	movs	r2, #1
 80060b8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	2201      	movs	r2, #1
 80060c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	2201      	movs	r2, #1
 80060c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	2201      	movs	r2, #1
 80060d0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	2201      	movs	r2, #1
 80060d8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	2201      	movs	r2, #1
 80060e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80060e4:	2300      	movs	r3, #0
}
 80060e6:	4618      	mov	r0, r3
 80060e8:	3708      	adds	r7, #8
 80060ea:	46bd      	mov	sp, r7
 80060ec:	bd80      	pop	{r7, pc}

080060ee <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80060ee:	b480      	push	{r7}
 80060f0:	b083      	sub	sp, #12
 80060f2:	af00      	add	r7, sp, #0
 80060f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80060f6:	bf00      	nop
 80060f8:	370c      	adds	r7, #12
 80060fa:	46bd      	mov	sp, r7
 80060fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006100:	4770      	bx	lr
	...

08006104 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006104:	b480      	push	{r7}
 8006106:	b085      	sub	sp, #20
 8006108:	af00      	add	r7, sp, #0
 800610a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006112:	b2db      	uxtb	r3, r3
 8006114:	2b01      	cmp	r3, #1
 8006116:	d001      	beq.n	800611c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006118:	2301      	movs	r3, #1
 800611a:	e03b      	b.n	8006194 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	2202      	movs	r2, #2
 8006120:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	68da      	ldr	r2, [r3, #12]
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	f042 0201 	orr.w	r2, r2, #1
 8006132:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	4a19      	ldr	r2, [pc, #100]	; (80061a0 <HAL_TIM_Base_Start_IT+0x9c>)
 800613a:	4293      	cmp	r3, r2
 800613c:	d009      	beq.n	8006152 <HAL_TIM_Base_Start_IT+0x4e>
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006146:	d004      	beq.n	8006152 <HAL_TIM_Base_Start_IT+0x4e>
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	4a15      	ldr	r2, [pc, #84]	; (80061a4 <HAL_TIM_Base_Start_IT+0xa0>)
 800614e:	4293      	cmp	r3, r2
 8006150:	d115      	bne.n	800617e <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	689a      	ldr	r2, [r3, #8]
 8006158:	4b13      	ldr	r3, [pc, #76]	; (80061a8 <HAL_TIM_Base_Start_IT+0xa4>)
 800615a:	4013      	ands	r3, r2
 800615c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	2b06      	cmp	r3, #6
 8006162:	d015      	beq.n	8006190 <HAL_TIM_Base_Start_IT+0x8c>
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800616a:	d011      	beq.n	8006190 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	681a      	ldr	r2, [r3, #0]
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	f042 0201 	orr.w	r2, r2, #1
 800617a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800617c:	e008      	b.n	8006190 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	681a      	ldr	r2, [r3, #0]
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	f042 0201 	orr.w	r2, r2, #1
 800618c:	601a      	str	r2, [r3, #0]
 800618e:	e000      	b.n	8006192 <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006190:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006192:	2300      	movs	r3, #0
}
 8006194:	4618      	mov	r0, r3
 8006196:	3714      	adds	r7, #20
 8006198:	46bd      	mov	sp, r7
 800619a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800619e:	4770      	bx	lr
 80061a0:	40012c00 	.word	0x40012c00
 80061a4:	40014000 	.word	0x40014000
 80061a8:	00010007 	.word	0x00010007

080061ac <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80061ac:	b580      	push	{r7, lr}
 80061ae:	b082      	sub	sp, #8
 80061b0:	af00      	add	r7, sp, #0
 80061b2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	691b      	ldr	r3, [r3, #16]
 80061ba:	f003 0302 	and.w	r3, r3, #2
 80061be:	2b02      	cmp	r3, #2
 80061c0:	d122      	bne.n	8006208 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	68db      	ldr	r3, [r3, #12]
 80061c8:	f003 0302 	and.w	r3, r3, #2
 80061cc:	2b02      	cmp	r3, #2
 80061ce:	d11b      	bne.n	8006208 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	f06f 0202 	mvn.w	r2, #2
 80061d8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	2201      	movs	r2, #1
 80061de:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	699b      	ldr	r3, [r3, #24]
 80061e6:	f003 0303 	and.w	r3, r3, #3
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d003      	beq.n	80061f6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80061ee:	6878      	ldr	r0, [r7, #4]
 80061f0:	f000 f905 	bl	80063fe <HAL_TIM_IC_CaptureCallback>
 80061f4:	e005      	b.n	8006202 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80061f6:	6878      	ldr	r0, [r7, #4]
 80061f8:	f000 f8f7 	bl	80063ea <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80061fc:	6878      	ldr	r0, [r7, #4]
 80061fe:	f000 f908 	bl	8006412 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	2200      	movs	r2, #0
 8006206:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	691b      	ldr	r3, [r3, #16]
 800620e:	f003 0304 	and.w	r3, r3, #4
 8006212:	2b04      	cmp	r3, #4
 8006214:	d122      	bne.n	800625c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	68db      	ldr	r3, [r3, #12]
 800621c:	f003 0304 	and.w	r3, r3, #4
 8006220:	2b04      	cmp	r3, #4
 8006222:	d11b      	bne.n	800625c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	f06f 0204 	mvn.w	r2, #4
 800622c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	2202      	movs	r2, #2
 8006232:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	699b      	ldr	r3, [r3, #24]
 800623a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800623e:	2b00      	cmp	r3, #0
 8006240:	d003      	beq.n	800624a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006242:	6878      	ldr	r0, [r7, #4]
 8006244:	f000 f8db 	bl	80063fe <HAL_TIM_IC_CaptureCallback>
 8006248:	e005      	b.n	8006256 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800624a:	6878      	ldr	r0, [r7, #4]
 800624c:	f000 f8cd 	bl	80063ea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006250:	6878      	ldr	r0, [r7, #4]
 8006252:	f000 f8de 	bl	8006412 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	2200      	movs	r2, #0
 800625a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	691b      	ldr	r3, [r3, #16]
 8006262:	f003 0308 	and.w	r3, r3, #8
 8006266:	2b08      	cmp	r3, #8
 8006268:	d122      	bne.n	80062b0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	68db      	ldr	r3, [r3, #12]
 8006270:	f003 0308 	and.w	r3, r3, #8
 8006274:	2b08      	cmp	r3, #8
 8006276:	d11b      	bne.n	80062b0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	f06f 0208 	mvn.w	r2, #8
 8006280:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	2204      	movs	r2, #4
 8006286:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	69db      	ldr	r3, [r3, #28]
 800628e:	f003 0303 	and.w	r3, r3, #3
 8006292:	2b00      	cmp	r3, #0
 8006294:	d003      	beq.n	800629e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006296:	6878      	ldr	r0, [r7, #4]
 8006298:	f000 f8b1 	bl	80063fe <HAL_TIM_IC_CaptureCallback>
 800629c:	e005      	b.n	80062aa <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800629e:	6878      	ldr	r0, [r7, #4]
 80062a0:	f000 f8a3 	bl	80063ea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80062a4:	6878      	ldr	r0, [r7, #4]
 80062a6:	f000 f8b4 	bl	8006412 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	2200      	movs	r2, #0
 80062ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	691b      	ldr	r3, [r3, #16]
 80062b6:	f003 0310 	and.w	r3, r3, #16
 80062ba:	2b10      	cmp	r3, #16
 80062bc:	d122      	bne.n	8006304 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	68db      	ldr	r3, [r3, #12]
 80062c4:	f003 0310 	and.w	r3, r3, #16
 80062c8:	2b10      	cmp	r3, #16
 80062ca:	d11b      	bne.n	8006304 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	f06f 0210 	mvn.w	r2, #16
 80062d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	2208      	movs	r2, #8
 80062da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	69db      	ldr	r3, [r3, #28]
 80062e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d003      	beq.n	80062f2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80062ea:	6878      	ldr	r0, [r7, #4]
 80062ec:	f000 f887 	bl	80063fe <HAL_TIM_IC_CaptureCallback>
 80062f0:	e005      	b.n	80062fe <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80062f2:	6878      	ldr	r0, [r7, #4]
 80062f4:	f000 f879 	bl	80063ea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80062f8:	6878      	ldr	r0, [r7, #4]
 80062fa:	f000 f88a 	bl	8006412 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	2200      	movs	r2, #0
 8006302:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	691b      	ldr	r3, [r3, #16]
 800630a:	f003 0301 	and.w	r3, r3, #1
 800630e:	2b01      	cmp	r3, #1
 8006310:	d10e      	bne.n	8006330 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	68db      	ldr	r3, [r3, #12]
 8006318:	f003 0301 	and.w	r3, r3, #1
 800631c:	2b01      	cmp	r3, #1
 800631e:	d107      	bne.n	8006330 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	f06f 0201 	mvn.w	r2, #1
 8006328:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800632a:	6878      	ldr	r0, [r7, #4]
 800632c:	f7fb f85a 	bl	80013e4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	691b      	ldr	r3, [r3, #16]
 8006336:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800633a:	2b80      	cmp	r3, #128	; 0x80
 800633c:	d10e      	bne.n	800635c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	68db      	ldr	r3, [r3, #12]
 8006344:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006348:	2b80      	cmp	r3, #128	; 0x80
 800634a:	d107      	bne.n	800635c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006354:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006356:	6878      	ldr	r0, [r7, #4]
 8006358:	f000 f8de 	bl	8006518 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	691b      	ldr	r3, [r3, #16]
 8006362:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006366:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800636a:	d10e      	bne.n	800638a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	68db      	ldr	r3, [r3, #12]
 8006372:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006376:	2b80      	cmp	r3, #128	; 0x80
 8006378:	d107      	bne.n	800638a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8006382:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006384:	6878      	ldr	r0, [r7, #4]
 8006386:	f000 f8d1 	bl	800652c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	691b      	ldr	r3, [r3, #16]
 8006390:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006394:	2b40      	cmp	r3, #64	; 0x40
 8006396:	d10e      	bne.n	80063b6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	68db      	ldr	r3, [r3, #12]
 800639e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063a2:	2b40      	cmp	r3, #64	; 0x40
 80063a4:	d107      	bne.n	80063b6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80063ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80063b0:	6878      	ldr	r0, [r7, #4]
 80063b2:	f000 f838 	bl	8006426 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	691b      	ldr	r3, [r3, #16]
 80063bc:	f003 0320 	and.w	r3, r3, #32
 80063c0:	2b20      	cmp	r3, #32
 80063c2:	d10e      	bne.n	80063e2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	68db      	ldr	r3, [r3, #12]
 80063ca:	f003 0320 	and.w	r3, r3, #32
 80063ce:	2b20      	cmp	r3, #32
 80063d0:	d107      	bne.n	80063e2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	f06f 0220 	mvn.w	r2, #32
 80063da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80063dc:	6878      	ldr	r0, [r7, #4]
 80063de:	f000 f891 	bl	8006504 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80063e2:	bf00      	nop
 80063e4:	3708      	adds	r7, #8
 80063e6:	46bd      	mov	sp, r7
 80063e8:	bd80      	pop	{r7, pc}

080063ea <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80063ea:	b480      	push	{r7}
 80063ec:	b083      	sub	sp, #12
 80063ee:	af00      	add	r7, sp, #0
 80063f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80063f2:	bf00      	nop
 80063f4:	370c      	adds	r7, #12
 80063f6:	46bd      	mov	sp, r7
 80063f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063fc:	4770      	bx	lr

080063fe <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80063fe:	b480      	push	{r7}
 8006400:	b083      	sub	sp, #12
 8006402:	af00      	add	r7, sp, #0
 8006404:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006406:	bf00      	nop
 8006408:	370c      	adds	r7, #12
 800640a:	46bd      	mov	sp, r7
 800640c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006410:	4770      	bx	lr

08006412 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006412:	b480      	push	{r7}
 8006414:	b083      	sub	sp, #12
 8006416:	af00      	add	r7, sp, #0
 8006418:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800641a:	bf00      	nop
 800641c:	370c      	adds	r7, #12
 800641e:	46bd      	mov	sp, r7
 8006420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006424:	4770      	bx	lr

08006426 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006426:	b480      	push	{r7}
 8006428:	b083      	sub	sp, #12
 800642a:	af00      	add	r7, sp, #0
 800642c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800642e:	bf00      	nop
 8006430:	370c      	adds	r7, #12
 8006432:	46bd      	mov	sp, r7
 8006434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006438:	4770      	bx	lr
	...

0800643c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800643c:	b480      	push	{r7}
 800643e:	b085      	sub	sp, #20
 8006440:	af00      	add	r7, sp, #0
 8006442:	6078      	str	r0, [r7, #4]
 8006444:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	4a2a      	ldr	r2, [pc, #168]	; (80064f8 <TIM_Base_SetConfig+0xbc>)
 8006450:	4293      	cmp	r3, r2
 8006452:	d003      	beq.n	800645c <TIM_Base_SetConfig+0x20>
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800645a:	d108      	bne.n	800646e <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006462:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006464:	683b      	ldr	r3, [r7, #0]
 8006466:	685b      	ldr	r3, [r3, #4]
 8006468:	68fa      	ldr	r2, [r7, #12]
 800646a:	4313      	orrs	r3, r2
 800646c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	4a21      	ldr	r2, [pc, #132]	; (80064f8 <TIM_Base_SetConfig+0xbc>)
 8006472:	4293      	cmp	r3, r2
 8006474:	d00b      	beq.n	800648e <TIM_Base_SetConfig+0x52>
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800647c:	d007      	beq.n	800648e <TIM_Base_SetConfig+0x52>
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	4a1e      	ldr	r2, [pc, #120]	; (80064fc <TIM_Base_SetConfig+0xc0>)
 8006482:	4293      	cmp	r3, r2
 8006484:	d003      	beq.n	800648e <TIM_Base_SetConfig+0x52>
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	4a1d      	ldr	r2, [pc, #116]	; (8006500 <TIM_Base_SetConfig+0xc4>)
 800648a:	4293      	cmp	r3, r2
 800648c:	d108      	bne.n	80064a0 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006494:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006496:	683b      	ldr	r3, [r7, #0]
 8006498:	68db      	ldr	r3, [r3, #12]
 800649a:	68fa      	ldr	r2, [r7, #12]
 800649c:	4313      	orrs	r3, r2
 800649e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80064a6:	683b      	ldr	r3, [r7, #0]
 80064a8:	695b      	ldr	r3, [r3, #20]
 80064aa:	4313      	orrs	r3, r2
 80064ac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	68fa      	ldr	r2, [r7, #12]
 80064b2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80064b4:	683b      	ldr	r3, [r7, #0]
 80064b6:	689a      	ldr	r2, [r3, #8]
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80064bc:	683b      	ldr	r3, [r7, #0]
 80064be:	681a      	ldr	r2, [r3, #0]
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	4a0c      	ldr	r2, [pc, #48]	; (80064f8 <TIM_Base_SetConfig+0xbc>)
 80064c8:	4293      	cmp	r3, r2
 80064ca:	d007      	beq.n	80064dc <TIM_Base_SetConfig+0xa0>
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	4a0b      	ldr	r2, [pc, #44]	; (80064fc <TIM_Base_SetConfig+0xc0>)
 80064d0:	4293      	cmp	r3, r2
 80064d2:	d003      	beq.n	80064dc <TIM_Base_SetConfig+0xa0>
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	4a0a      	ldr	r2, [pc, #40]	; (8006500 <TIM_Base_SetConfig+0xc4>)
 80064d8:	4293      	cmp	r3, r2
 80064da:	d103      	bne.n	80064e4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80064dc:	683b      	ldr	r3, [r7, #0]
 80064de:	691a      	ldr	r2, [r3, #16]
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	2201      	movs	r2, #1
 80064e8:	615a      	str	r2, [r3, #20]
}
 80064ea:	bf00      	nop
 80064ec:	3714      	adds	r7, #20
 80064ee:	46bd      	mov	sp, r7
 80064f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f4:	4770      	bx	lr
 80064f6:	bf00      	nop
 80064f8:	40012c00 	.word	0x40012c00
 80064fc:	40014000 	.word	0x40014000
 8006500:	40014400 	.word	0x40014400

08006504 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006504:	b480      	push	{r7}
 8006506:	b083      	sub	sp, #12
 8006508:	af00      	add	r7, sp, #0
 800650a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800650c:	bf00      	nop
 800650e:	370c      	adds	r7, #12
 8006510:	46bd      	mov	sp, r7
 8006512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006516:	4770      	bx	lr

08006518 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006518:	b480      	push	{r7}
 800651a:	b083      	sub	sp, #12
 800651c:	af00      	add	r7, sp, #0
 800651e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006520:	bf00      	nop
 8006522:	370c      	adds	r7, #12
 8006524:	46bd      	mov	sp, r7
 8006526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800652a:	4770      	bx	lr

0800652c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800652c:	b480      	push	{r7}
 800652e:	b083      	sub	sp, #12
 8006530:	af00      	add	r7, sp, #0
 8006532:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006534:	bf00      	nop
 8006536:	370c      	adds	r7, #12
 8006538:	46bd      	mov	sp, r7
 800653a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800653e:	4770      	bx	lr

08006540 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006540:	b580      	push	{r7, lr}
 8006542:	b082      	sub	sp, #8
 8006544:	af00      	add	r7, sp, #0
 8006546:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	2b00      	cmp	r3, #0
 800654c:	d101      	bne.n	8006552 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800654e:	2301      	movs	r3, #1
 8006550:	e040      	b.n	80065d4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006556:	2b00      	cmp	r3, #0
 8006558:	d106      	bne.n	8006568 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	2200      	movs	r2, #0
 800655e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006562:	6878      	ldr	r0, [r7, #4]
 8006564:	f7fc faee 	bl	8002b44 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	2224      	movs	r2, #36	; 0x24
 800656c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	681a      	ldr	r2, [r3, #0]
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	f022 0201 	bic.w	r2, r2, #1
 800657c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800657e:	6878      	ldr	r0, [r7, #4]
 8006580:	f000 f992 	bl	80068a8 <UART_SetConfig>
 8006584:	4603      	mov	r3, r0
 8006586:	2b01      	cmp	r3, #1
 8006588:	d101      	bne.n	800658e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800658a:	2301      	movs	r3, #1
 800658c:	e022      	b.n	80065d4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006592:	2b00      	cmp	r3, #0
 8006594:	d002      	beq.n	800659c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8006596:	6878      	ldr	r0, [r7, #4]
 8006598:	f000 fbb2 	bl	8006d00 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	685a      	ldr	r2, [r3, #4]
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80065aa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	689a      	ldr	r2, [r3, #8]
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80065ba:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	681a      	ldr	r2, [r3, #0]
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	f042 0201 	orr.w	r2, r2, #1
 80065ca:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80065cc:	6878      	ldr	r0, [r7, #4]
 80065ce:	f000 fc39 	bl	8006e44 <UART_CheckIdleState>
 80065d2:	4603      	mov	r3, r0
}
 80065d4:	4618      	mov	r0, r3
 80065d6:	3708      	adds	r7, #8
 80065d8:	46bd      	mov	sp, r7
 80065da:	bd80      	pop	{r7, pc}

080065dc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80065dc:	b580      	push	{r7, lr}
 80065de:	b08a      	sub	sp, #40	; 0x28
 80065e0:	af02      	add	r7, sp, #8
 80065e2:	60f8      	str	r0, [r7, #12]
 80065e4:	60b9      	str	r1, [r7, #8]
 80065e6:	603b      	str	r3, [r7, #0]
 80065e8:	4613      	mov	r3, r2
 80065ea:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80065f0:	2b20      	cmp	r3, #32
 80065f2:	f040 8082 	bne.w	80066fa <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 80065f6:	68bb      	ldr	r3, [r7, #8]
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d002      	beq.n	8006602 <HAL_UART_Transmit+0x26>
 80065fc:	88fb      	ldrh	r3, [r7, #6]
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d101      	bne.n	8006606 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8006602:	2301      	movs	r3, #1
 8006604:	e07a      	b.n	80066fc <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800660c:	2b01      	cmp	r3, #1
 800660e:	d101      	bne.n	8006614 <HAL_UART_Transmit+0x38>
 8006610:	2302      	movs	r3, #2
 8006612:	e073      	b.n	80066fc <HAL_UART_Transmit+0x120>
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	2201      	movs	r2, #1
 8006618:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	2200      	movs	r2, #0
 8006620:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	2221      	movs	r2, #33	; 0x21
 8006628:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800662a:	f7fd fafd 	bl	8003c28 <HAL_GetTick>
 800662e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	88fa      	ldrh	r2, [r7, #6]
 8006634:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	88fa      	ldrh	r2, [r7, #6]
 800663c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	689b      	ldr	r3, [r3, #8]
 8006644:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006648:	d108      	bne.n	800665c <HAL_UART_Transmit+0x80>
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	691b      	ldr	r3, [r3, #16]
 800664e:	2b00      	cmp	r3, #0
 8006650:	d104      	bne.n	800665c <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8006652:	2300      	movs	r3, #0
 8006654:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006656:	68bb      	ldr	r3, [r7, #8]
 8006658:	61bb      	str	r3, [r7, #24]
 800665a:	e003      	b.n	8006664 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 800665c:	68bb      	ldr	r3, [r7, #8]
 800665e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006660:	2300      	movs	r3, #0
 8006662:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	2200      	movs	r2, #0
 8006668:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 800666c:	e02d      	b.n	80066ca <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800666e:	683b      	ldr	r3, [r7, #0]
 8006670:	9300      	str	r3, [sp, #0]
 8006672:	697b      	ldr	r3, [r7, #20]
 8006674:	2200      	movs	r2, #0
 8006676:	2180      	movs	r1, #128	; 0x80
 8006678:	68f8      	ldr	r0, [r7, #12]
 800667a:	f000 fc2c 	bl	8006ed6 <UART_WaitOnFlagUntilTimeout>
 800667e:	4603      	mov	r3, r0
 8006680:	2b00      	cmp	r3, #0
 8006682:	d001      	beq.n	8006688 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8006684:	2303      	movs	r3, #3
 8006686:	e039      	b.n	80066fc <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8006688:	69fb      	ldr	r3, [r7, #28]
 800668a:	2b00      	cmp	r3, #0
 800668c:	d10b      	bne.n	80066a6 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800668e:	69bb      	ldr	r3, [r7, #24]
 8006690:	881a      	ldrh	r2, [r3, #0]
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800669a:	b292      	uxth	r2, r2
 800669c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800669e:	69bb      	ldr	r3, [r7, #24]
 80066a0:	3302      	adds	r3, #2
 80066a2:	61bb      	str	r3, [r7, #24]
 80066a4:	e008      	b.n	80066b8 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80066a6:	69fb      	ldr	r3, [r7, #28]
 80066a8:	781a      	ldrb	r2, [r3, #0]
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	b292      	uxth	r2, r2
 80066b0:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80066b2:	69fb      	ldr	r3, [r7, #28]
 80066b4:	3301      	adds	r3, #1
 80066b6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80066be:	b29b      	uxth	r3, r3
 80066c0:	3b01      	subs	r3, #1
 80066c2:	b29a      	uxth	r2, r3
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80066d0:	b29b      	uxth	r3, r3
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d1cb      	bne.n	800666e <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80066d6:	683b      	ldr	r3, [r7, #0]
 80066d8:	9300      	str	r3, [sp, #0]
 80066da:	697b      	ldr	r3, [r7, #20]
 80066dc:	2200      	movs	r2, #0
 80066de:	2140      	movs	r1, #64	; 0x40
 80066e0:	68f8      	ldr	r0, [r7, #12]
 80066e2:	f000 fbf8 	bl	8006ed6 <UART_WaitOnFlagUntilTimeout>
 80066e6:	4603      	mov	r3, r0
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d001      	beq.n	80066f0 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 80066ec:	2303      	movs	r3, #3
 80066ee:	e005      	b.n	80066fc <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	2220      	movs	r2, #32
 80066f4:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80066f6:	2300      	movs	r3, #0
 80066f8:	e000      	b.n	80066fc <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 80066fa:	2302      	movs	r3, #2
  }
}
 80066fc:	4618      	mov	r0, r3
 80066fe:	3720      	adds	r7, #32
 8006700:	46bd      	mov	sp, r7
 8006702:	bd80      	pop	{r7, pc}

08006704 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006704:	b580      	push	{r7, lr}
 8006706:	b08a      	sub	sp, #40	; 0x28
 8006708:	af02      	add	r7, sp, #8
 800670a:	60f8      	str	r0, [r7, #12]
 800670c:	60b9      	str	r1, [r7, #8]
 800670e:	603b      	str	r3, [r7, #0]
 8006710:	4613      	mov	r3, r2
 8006712:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006718:	2b20      	cmp	r3, #32
 800671a:	f040 80bf 	bne.w	800689c <HAL_UART_Receive+0x198>
  {
    if ((pData == NULL) || (Size == 0U))
 800671e:	68bb      	ldr	r3, [r7, #8]
 8006720:	2b00      	cmp	r3, #0
 8006722:	d002      	beq.n	800672a <HAL_UART_Receive+0x26>
 8006724:	88fb      	ldrh	r3, [r7, #6]
 8006726:	2b00      	cmp	r3, #0
 8006728:	d101      	bne.n	800672e <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 800672a:	2301      	movs	r3, #1
 800672c:	e0b7      	b.n	800689e <HAL_UART_Receive+0x19a>
    }

    __HAL_LOCK(huart);
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8006734:	2b01      	cmp	r3, #1
 8006736:	d101      	bne.n	800673c <HAL_UART_Receive+0x38>
 8006738:	2302      	movs	r3, #2
 800673a:	e0b0      	b.n	800689e <HAL_UART_Receive+0x19a>
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	2201      	movs	r2, #1
 8006740:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	2200      	movs	r2, #0
 8006748:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	2222      	movs	r2, #34	; 0x22
 8006750:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	2200      	movs	r2, #0
 8006756:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006758:	f7fd fa66 	bl	8003c28 <HAL_GetTick>
 800675c:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	88fa      	ldrh	r2, [r7, #6]
 8006762:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	88fa      	ldrh	r2, [r7, #6]
 800676a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	689b      	ldr	r3, [r3, #8]
 8006772:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006776:	d10e      	bne.n	8006796 <HAL_UART_Receive+0x92>
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	691b      	ldr	r3, [r3, #16]
 800677c:	2b00      	cmp	r3, #0
 800677e:	d105      	bne.n	800678c <HAL_UART_Receive+0x88>
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	f240 12ff 	movw	r2, #511	; 0x1ff
 8006786:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800678a:	e02d      	b.n	80067e8 <HAL_UART_Receive+0xe4>
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	22ff      	movs	r2, #255	; 0xff
 8006790:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006794:	e028      	b.n	80067e8 <HAL_UART_Receive+0xe4>
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	689b      	ldr	r3, [r3, #8]
 800679a:	2b00      	cmp	r3, #0
 800679c:	d10d      	bne.n	80067ba <HAL_UART_Receive+0xb6>
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	691b      	ldr	r3, [r3, #16]
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d104      	bne.n	80067b0 <HAL_UART_Receive+0xac>
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	22ff      	movs	r2, #255	; 0xff
 80067aa:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80067ae:	e01b      	b.n	80067e8 <HAL_UART_Receive+0xe4>
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	227f      	movs	r2, #127	; 0x7f
 80067b4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80067b8:	e016      	b.n	80067e8 <HAL_UART_Receive+0xe4>
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	689b      	ldr	r3, [r3, #8]
 80067be:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80067c2:	d10d      	bne.n	80067e0 <HAL_UART_Receive+0xdc>
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	691b      	ldr	r3, [r3, #16]
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d104      	bne.n	80067d6 <HAL_UART_Receive+0xd2>
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	227f      	movs	r2, #127	; 0x7f
 80067d0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80067d4:	e008      	b.n	80067e8 <HAL_UART_Receive+0xe4>
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	223f      	movs	r2, #63	; 0x3f
 80067da:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80067de:	e003      	b.n	80067e8 <HAL_UART_Receive+0xe4>
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	2200      	movs	r2, #0
 80067e4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80067ee:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	689b      	ldr	r3, [r3, #8]
 80067f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80067f8:	d108      	bne.n	800680c <HAL_UART_Receive+0x108>
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	691b      	ldr	r3, [r3, #16]
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d104      	bne.n	800680c <HAL_UART_Receive+0x108>
    {
      pdata8bits  = NULL;
 8006802:	2300      	movs	r3, #0
 8006804:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006806:	68bb      	ldr	r3, [r7, #8]
 8006808:	61bb      	str	r3, [r7, #24]
 800680a:	e003      	b.n	8006814 <HAL_UART_Receive+0x110>
    }
    else
    {
      pdata8bits  = pData;
 800680c:	68bb      	ldr	r3, [r7, #8]
 800680e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006810:	2300      	movs	r3, #0
 8006812:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	2200      	movs	r2, #0
 8006818:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800681c:	e033      	b.n	8006886 <HAL_UART_Receive+0x182>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800681e:	683b      	ldr	r3, [r7, #0]
 8006820:	9300      	str	r3, [sp, #0]
 8006822:	697b      	ldr	r3, [r7, #20]
 8006824:	2200      	movs	r2, #0
 8006826:	2120      	movs	r1, #32
 8006828:	68f8      	ldr	r0, [r7, #12]
 800682a:	f000 fb54 	bl	8006ed6 <UART_WaitOnFlagUntilTimeout>
 800682e:	4603      	mov	r3, r0
 8006830:	2b00      	cmp	r3, #0
 8006832:	d001      	beq.n	8006838 <HAL_UART_Receive+0x134>
      {
        return HAL_TIMEOUT;
 8006834:	2303      	movs	r3, #3
 8006836:	e032      	b.n	800689e <HAL_UART_Receive+0x19a>
      }
      if (pdata8bits == NULL)
 8006838:	69fb      	ldr	r3, [r7, #28]
 800683a:	2b00      	cmp	r3, #0
 800683c:	d10c      	bne.n	8006858 <HAL_UART_Receive+0x154>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8006844:	b29a      	uxth	r2, r3
 8006846:	8a7b      	ldrh	r3, [r7, #18]
 8006848:	4013      	ands	r3, r2
 800684a:	b29a      	uxth	r2, r3
 800684c:	69bb      	ldr	r3, [r7, #24]
 800684e:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8006850:	69bb      	ldr	r3, [r7, #24]
 8006852:	3302      	adds	r3, #2
 8006854:	61bb      	str	r3, [r7, #24]
 8006856:	e00d      	b.n	8006874 <HAL_UART_Receive+0x170>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800685e:	b29b      	uxth	r3, r3
 8006860:	b2da      	uxtb	r2, r3
 8006862:	8a7b      	ldrh	r3, [r7, #18]
 8006864:	b2db      	uxtb	r3, r3
 8006866:	4013      	ands	r3, r2
 8006868:	b2da      	uxtb	r2, r3
 800686a:	69fb      	ldr	r3, [r7, #28]
 800686c:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800686e:	69fb      	ldr	r3, [r7, #28]
 8006870:	3301      	adds	r3, #1
 8006872:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800687a:	b29b      	uxth	r3, r3
 800687c:	3b01      	subs	r3, #1
 800687e:	b29a      	uxth	r2, r3
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800688c:	b29b      	uxth	r3, r3
 800688e:	2b00      	cmp	r3, #0
 8006890:	d1c5      	bne.n	800681e <HAL_UART_Receive+0x11a>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	2220      	movs	r2, #32
 8006896:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8006898:	2300      	movs	r3, #0
 800689a:	e000      	b.n	800689e <HAL_UART_Receive+0x19a>
  }
  else
  {
    return HAL_BUSY;
 800689c:	2302      	movs	r3, #2
  }
}
 800689e:	4618      	mov	r0, r3
 80068a0:	3720      	adds	r7, #32
 80068a2:	46bd      	mov	sp, r7
 80068a4:	bd80      	pop	{r7, pc}
	...

080068a8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80068a8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80068ac:	b08a      	sub	sp, #40	; 0x28
 80068ae:	af00      	add	r7, sp, #0
 80068b0:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80068b2:	2300      	movs	r3, #0
 80068b4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	689a      	ldr	r2, [r3, #8]
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	691b      	ldr	r3, [r3, #16]
 80068c0:	431a      	orrs	r2, r3
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	695b      	ldr	r3, [r3, #20]
 80068c6:	431a      	orrs	r2, r3
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	69db      	ldr	r3, [r3, #28]
 80068cc:	4313      	orrs	r3, r2
 80068ce:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	681a      	ldr	r2, [r3, #0]
 80068d6:	4bb4      	ldr	r3, [pc, #720]	; (8006ba8 <UART_SetConfig+0x300>)
 80068d8:	4013      	ands	r3, r2
 80068da:	68fa      	ldr	r2, [r7, #12]
 80068dc:	6812      	ldr	r2, [r2, #0]
 80068de:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80068e0:	430b      	orrs	r3, r1
 80068e2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	685b      	ldr	r3, [r3, #4]
 80068ea:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	68da      	ldr	r2, [r3, #12]
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	430a      	orrs	r2, r1
 80068f8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	699b      	ldr	r3, [r3, #24]
 80068fe:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	4aa9      	ldr	r2, [pc, #676]	; (8006bac <UART_SetConfig+0x304>)
 8006906:	4293      	cmp	r3, r2
 8006908:	d004      	beq.n	8006914 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	6a1b      	ldr	r3, [r3, #32]
 800690e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006910:	4313      	orrs	r3, r2
 8006912:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	689b      	ldr	r3, [r3, #8]
 800691a:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006924:	430a      	orrs	r2, r1
 8006926:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	4aa0      	ldr	r2, [pc, #640]	; (8006bb0 <UART_SetConfig+0x308>)
 800692e:	4293      	cmp	r3, r2
 8006930:	d126      	bne.n	8006980 <UART_SetConfig+0xd8>
 8006932:	4ba0      	ldr	r3, [pc, #640]	; (8006bb4 <UART_SetConfig+0x30c>)
 8006934:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006938:	f003 0303 	and.w	r3, r3, #3
 800693c:	2b03      	cmp	r3, #3
 800693e:	d81b      	bhi.n	8006978 <UART_SetConfig+0xd0>
 8006940:	a201      	add	r2, pc, #4	; (adr r2, 8006948 <UART_SetConfig+0xa0>)
 8006942:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006946:	bf00      	nop
 8006948:	08006959 	.word	0x08006959
 800694c:	08006969 	.word	0x08006969
 8006950:	08006961 	.word	0x08006961
 8006954:	08006971 	.word	0x08006971
 8006958:	2301      	movs	r3, #1
 800695a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800695e:	e080      	b.n	8006a62 <UART_SetConfig+0x1ba>
 8006960:	2302      	movs	r3, #2
 8006962:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006966:	e07c      	b.n	8006a62 <UART_SetConfig+0x1ba>
 8006968:	2304      	movs	r3, #4
 800696a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800696e:	e078      	b.n	8006a62 <UART_SetConfig+0x1ba>
 8006970:	2308      	movs	r3, #8
 8006972:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006976:	e074      	b.n	8006a62 <UART_SetConfig+0x1ba>
 8006978:	2310      	movs	r3, #16
 800697a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800697e:	e070      	b.n	8006a62 <UART_SetConfig+0x1ba>
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	4a8c      	ldr	r2, [pc, #560]	; (8006bb8 <UART_SetConfig+0x310>)
 8006986:	4293      	cmp	r3, r2
 8006988:	d138      	bne.n	80069fc <UART_SetConfig+0x154>
 800698a:	4b8a      	ldr	r3, [pc, #552]	; (8006bb4 <UART_SetConfig+0x30c>)
 800698c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006990:	f003 030c 	and.w	r3, r3, #12
 8006994:	2b0c      	cmp	r3, #12
 8006996:	d82d      	bhi.n	80069f4 <UART_SetConfig+0x14c>
 8006998:	a201      	add	r2, pc, #4	; (adr r2, 80069a0 <UART_SetConfig+0xf8>)
 800699a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800699e:	bf00      	nop
 80069a0:	080069d5 	.word	0x080069d5
 80069a4:	080069f5 	.word	0x080069f5
 80069a8:	080069f5 	.word	0x080069f5
 80069ac:	080069f5 	.word	0x080069f5
 80069b0:	080069e5 	.word	0x080069e5
 80069b4:	080069f5 	.word	0x080069f5
 80069b8:	080069f5 	.word	0x080069f5
 80069bc:	080069f5 	.word	0x080069f5
 80069c0:	080069dd 	.word	0x080069dd
 80069c4:	080069f5 	.word	0x080069f5
 80069c8:	080069f5 	.word	0x080069f5
 80069cc:	080069f5 	.word	0x080069f5
 80069d0:	080069ed 	.word	0x080069ed
 80069d4:	2300      	movs	r3, #0
 80069d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80069da:	e042      	b.n	8006a62 <UART_SetConfig+0x1ba>
 80069dc:	2302      	movs	r3, #2
 80069de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80069e2:	e03e      	b.n	8006a62 <UART_SetConfig+0x1ba>
 80069e4:	2304      	movs	r3, #4
 80069e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80069ea:	e03a      	b.n	8006a62 <UART_SetConfig+0x1ba>
 80069ec:	2308      	movs	r3, #8
 80069ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80069f2:	e036      	b.n	8006a62 <UART_SetConfig+0x1ba>
 80069f4:	2310      	movs	r3, #16
 80069f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80069fa:	e032      	b.n	8006a62 <UART_SetConfig+0x1ba>
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	4a6a      	ldr	r2, [pc, #424]	; (8006bac <UART_SetConfig+0x304>)
 8006a02:	4293      	cmp	r3, r2
 8006a04:	d12a      	bne.n	8006a5c <UART_SetConfig+0x1b4>
 8006a06:	4b6b      	ldr	r3, [pc, #428]	; (8006bb4 <UART_SetConfig+0x30c>)
 8006a08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a0c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006a10:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006a14:	d01a      	beq.n	8006a4c <UART_SetConfig+0x1a4>
 8006a16:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006a1a:	d81b      	bhi.n	8006a54 <UART_SetConfig+0x1ac>
 8006a1c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006a20:	d00c      	beq.n	8006a3c <UART_SetConfig+0x194>
 8006a22:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006a26:	d815      	bhi.n	8006a54 <UART_SetConfig+0x1ac>
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d003      	beq.n	8006a34 <UART_SetConfig+0x18c>
 8006a2c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006a30:	d008      	beq.n	8006a44 <UART_SetConfig+0x19c>
 8006a32:	e00f      	b.n	8006a54 <UART_SetConfig+0x1ac>
 8006a34:	2300      	movs	r3, #0
 8006a36:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006a3a:	e012      	b.n	8006a62 <UART_SetConfig+0x1ba>
 8006a3c:	2302      	movs	r3, #2
 8006a3e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006a42:	e00e      	b.n	8006a62 <UART_SetConfig+0x1ba>
 8006a44:	2304      	movs	r3, #4
 8006a46:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006a4a:	e00a      	b.n	8006a62 <UART_SetConfig+0x1ba>
 8006a4c:	2308      	movs	r3, #8
 8006a4e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006a52:	e006      	b.n	8006a62 <UART_SetConfig+0x1ba>
 8006a54:	2310      	movs	r3, #16
 8006a56:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006a5a:	e002      	b.n	8006a62 <UART_SetConfig+0x1ba>
 8006a5c:	2310      	movs	r3, #16
 8006a5e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	4a51      	ldr	r2, [pc, #324]	; (8006bac <UART_SetConfig+0x304>)
 8006a68:	4293      	cmp	r3, r2
 8006a6a:	d17a      	bne.n	8006b62 <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006a6c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006a70:	2b08      	cmp	r3, #8
 8006a72:	d824      	bhi.n	8006abe <UART_SetConfig+0x216>
 8006a74:	a201      	add	r2, pc, #4	; (adr r2, 8006a7c <UART_SetConfig+0x1d4>)
 8006a76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a7a:	bf00      	nop
 8006a7c:	08006aa1 	.word	0x08006aa1
 8006a80:	08006abf 	.word	0x08006abf
 8006a84:	08006aa9 	.word	0x08006aa9
 8006a88:	08006abf 	.word	0x08006abf
 8006a8c:	08006aaf 	.word	0x08006aaf
 8006a90:	08006abf 	.word	0x08006abf
 8006a94:	08006abf 	.word	0x08006abf
 8006a98:	08006abf 	.word	0x08006abf
 8006a9c:	08006ab7 	.word	0x08006ab7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006aa0:	f7fe ff18 	bl	80058d4 <HAL_RCC_GetPCLK1Freq>
 8006aa4:	61f8      	str	r0, [r7, #28]
        break;
 8006aa6:	e010      	b.n	8006aca <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006aa8:	4b44      	ldr	r3, [pc, #272]	; (8006bbc <UART_SetConfig+0x314>)
 8006aaa:	61fb      	str	r3, [r7, #28]
        break;
 8006aac:	e00d      	b.n	8006aca <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006aae:	f7fe fe79 	bl	80057a4 <HAL_RCC_GetSysClockFreq>
 8006ab2:	61f8      	str	r0, [r7, #28]
        break;
 8006ab4:	e009      	b.n	8006aca <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006ab6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006aba:	61fb      	str	r3, [r7, #28]
        break;
 8006abc:	e005      	b.n	8006aca <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 8006abe:	2300      	movs	r3, #0
 8006ac0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006ac2:	2301      	movs	r3, #1
 8006ac4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006ac8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006aca:	69fb      	ldr	r3, [r7, #28]
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	f000 8107 	beq.w	8006ce0 <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	685a      	ldr	r2, [r3, #4]
 8006ad6:	4613      	mov	r3, r2
 8006ad8:	005b      	lsls	r3, r3, #1
 8006ada:	4413      	add	r3, r2
 8006adc:	69fa      	ldr	r2, [r7, #28]
 8006ade:	429a      	cmp	r2, r3
 8006ae0:	d305      	bcc.n	8006aee <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	685b      	ldr	r3, [r3, #4]
 8006ae6:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006ae8:	69fa      	ldr	r2, [r7, #28]
 8006aea:	429a      	cmp	r2, r3
 8006aec:	d903      	bls.n	8006af6 <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 8006aee:	2301      	movs	r3, #1
 8006af0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006af4:	e0f4      	b.n	8006ce0 <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8006af6:	69fb      	ldr	r3, [r7, #28]
 8006af8:	2200      	movs	r2, #0
 8006afa:	461c      	mov	r4, r3
 8006afc:	4615      	mov	r5, r2
 8006afe:	f04f 0200 	mov.w	r2, #0
 8006b02:	f04f 0300 	mov.w	r3, #0
 8006b06:	022b      	lsls	r3, r5, #8
 8006b08:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8006b0c:	0222      	lsls	r2, r4, #8
 8006b0e:	68f9      	ldr	r1, [r7, #12]
 8006b10:	6849      	ldr	r1, [r1, #4]
 8006b12:	0849      	lsrs	r1, r1, #1
 8006b14:	2000      	movs	r0, #0
 8006b16:	4688      	mov	r8, r1
 8006b18:	4681      	mov	r9, r0
 8006b1a:	eb12 0a08 	adds.w	sl, r2, r8
 8006b1e:	eb43 0b09 	adc.w	fp, r3, r9
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	685b      	ldr	r3, [r3, #4]
 8006b26:	2200      	movs	r2, #0
 8006b28:	603b      	str	r3, [r7, #0]
 8006b2a:	607a      	str	r2, [r7, #4]
 8006b2c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006b30:	4650      	mov	r0, sl
 8006b32:	4659      	mov	r1, fp
 8006b34:	f7fa f808 	bl	8000b48 <__aeabi_uldivmod>
 8006b38:	4602      	mov	r2, r0
 8006b3a:	460b      	mov	r3, r1
 8006b3c:	4613      	mov	r3, r2
 8006b3e:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006b40:	69bb      	ldr	r3, [r7, #24]
 8006b42:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006b46:	d308      	bcc.n	8006b5a <UART_SetConfig+0x2b2>
 8006b48:	69bb      	ldr	r3, [r7, #24]
 8006b4a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006b4e:	d204      	bcs.n	8006b5a <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	69ba      	ldr	r2, [r7, #24]
 8006b56:	60da      	str	r2, [r3, #12]
 8006b58:	e0c2      	b.n	8006ce0 <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 8006b5a:	2301      	movs	r3, #1
 8006b5c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006b60:	e0be      	b.n	8006ce0 <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	69db      	ldr	r3, [r3, #28]
 8006b66:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006b6a:	d16a      	bne.n	8006c42 <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 8006b6c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006b70:	2b08      	cmp	r3, #8
 8006b72:	d834      	bhi.n	8006bde <UART_SetConfig+0x336>
 8006b74:	a201      	add	r2, pc, #4	; (adr r2, 8006b7c <UART_SetConfig+0x2d4>)
 8006b76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b7a:	bf00      	nop
 8006b7c:	08006ba1 	.word	0x08006ba1
 8006b80:	08006bc1 	.word	0x08006bc1
 8006b84:	08006bc9 	.word	0x08006bc9
 8006b88:	08006bdf 	.word	0x08006bdf
 8006b8c:	08006bcf 	.word	0x08006bcf
 8006b90:	08006bdf 	.word	0x08006bdf
 8006b94:	08006bdf 	.word	0x08006bdf
 8006b98:	08006bdf 	.word	0x08006bdf
 8006b9c:	08006bd7 	.word	0x08006bd7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006ba0:	f7fe fe98 	bl	80058d4 <HAL_RCC_GetPCLK1Freq>
 8006ba4:	61f8      	str	r0, [r7, #28]
        break;
 8006ba6:	e020      	b.n	8006bea <UART_SetConfig+0x342>
 8006ba8:	efff69f3 	.word	0xefff69f3
 8006bac:	40008000 	.word	0x40008000
 8006bb0:	40013800 	.word	0x40013800
 8006bb4:	40021000 	.word	0x40021000
 8006bb8:	40004400 	.word	0x40004400
 8006bbc:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006bc0:	f7fe fe9e 	bl	8005900 <HAL_RCC_GetPCLK2Freq>
 8006bc4:	61f8      	str	r0, [r7, #28]
        break;
 8006bc6:	e010      	b.n	8006bea <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006bc8:	4b4c      	ldr	r3, [pc, #304]	; (8006cfc <UART_SetConfig+0x454>)
 8006bca:	61fb      	str	r3, [r7, #28]
        break;
 8006bcc:	e00d      	b.n	8006bea <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006bce:	f7fe fde9 	bl	80057a4 <HAL_RCC_GetSysClockFreq>
 8006bd2:	61f8      	str	r0, [r7, #28]
        break;
 8006bd4:	e009      	b.n	8006bea <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006bd6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006bda:	61fb      	str	r3, [r7, #28]
        break;
 8006bdc:	e005      	b.n	8006bea <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 8006bde:	2300      	movs	r3, #0
 8006be0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006be2:	2301      	movs	r3, #1
 8006be4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006be8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006bea:	69fb      	ldr	r3, [r7, #28]
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d077      	beq.n	8006ce0 <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006bf0:	69fb      	ldr	r3, [r7, #28]
 8006bf2:	005a      	lsls	r2, r3, #1
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	685b      	ldr	r3, [r3, #4]
 8006bf8:	085b      	lsrs	r3, r3, #1
 8006bfa:	441a      	add	r2, r3
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	685b      	ldr	r3, [r3, #4]
 8006c00:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c04:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006c06:	69bb      	ldr	r3, [r7, #24]
 8006c08:	2b0f      	cmp	r3, #15
 8006c0a:	d916      	bls.n	8006c3a <UART_SetConfig+0x392>
 8006c0c:	69bb      	ldr	r3, [r7, #24]
 8006c0e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006c12:	d212      	bcs.n	8006c3a <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006c14:	69bb      	ldr	r3, [r7, #24]
 8006c16:	b29b      	uxth	r3, r3
 8006c18:	f023 030f 	bic.w	r3, r3, #15
 8006c1c:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006c1e:	69bb      	ldr	r3, [r7, #24]
 8006c20:	085b      	lsrs	r3, r3, #1
 8006c22:	b29b      	uxth	r3, r3
 8006c24:	f003 0307 	and.w	r3, r3, #7
 8006c28:	b29a      	uxth	r2, r3
 8006c2a:	8afb      	ldrh	r3, [r7, #22]
 8006c2c:	4313      	orrs	r3, r2
 8006c2e:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	8afa      	ldrh	r2, [r7, #22]
 8006c36:	60da      	str	r2, [r3, #12]
 8006c38:	e052      	b.n	8006ce0 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8006c3a:	2301      	movs	r3, #1
 8006c3c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006c40:	e04e      	b.n	8006ce0 <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006c42:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006c46:	2b08      	cmp	r3, #8
 8006c48:	d827      	bhi.n	8006c9a <UART_SetConfig+0x3f2>
 8006c4a:	a201      	add	r2, pc, #4	; (adr r2, 8006c50 <UART_SetConfig+0x3a8>)
 8006c4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c50:	08006c75 	.word	0x08006c75
 8006c54:	08006c7d 	.word	0x08006c7d
 8006c58:	08006c85 	.word	0x08006c85
 8006c5c:	08006c9b 	.word	0x08006c9b
 8006c60:	08006c8b 	.word	0x08006c8b
 8006c64:	08006c9b 	.word	0x08006c9b
 8006c68:	08006c9b 	.word	0x08006c9b
 8006c6c:	08006c9b 	.word	0x08006c9b
 8006c70:	08006c93 	.word	0x08006c93
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006c74:	f7fe fe2e 	bl	80058d4 <HAL_RCC_GetPCLK1Freq>
 8006c78:	61f8      	str	r0, [r7, #28]
        break;
 8006c7a:	e014      	b.n	8006ca6 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006c7c:	f7fe fe40 	bl	8005900 <HAL_RCC_GetPCLK2Freq>
 8006c80:	61f8      	str	r0, [r7, #28]
        break;
 8006c82:	e010      	b.n	8006ca6 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006c84:	4b1d      	ldr	r3, [pc, #116]	; (8006cfc <UART_SetConfig+0x454>)
 8006c86:	61fb      	str	r3, [r7, #28]
        break;
 8006c88:	e00d      	b.n	8006ca6 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006c8a:	f7fe fd8b 	bl	80057a4 <HAL_RCC_GetSysClockFreq>
 8006c8e:	61f8      	str	r0, [r7, #28]
        break;
 8006c90:	e009      	b.n	8006ca6 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006c92:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006c96:	61fb      	str	r3, [r7, #28]
        break;
 8006c98:	e005      	b.n	8006ca6 <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 8006c9a:	2300      	movs	r3, #0
 8006c9c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006c9e:	2301      	movs	r3, #1
 8006ca0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006ca4:	bf00      	nop
    }

    if (pclk != 0U)
 8006ca6:	69fb      	ldr	r3, [r7, #28]
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d019      	beq.n	8006ce0 <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	685b      	ldr	r3, [r3, #4]
 8006cb0:	085a      	lsrs	r2, r3, #1
 8006cb2:	69fb      	ldr	r3, [r7, #28]
 8006cb4:	441a      	add	r2, r3
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	685b      	ldr	r3, [r3, #4]
 8006cba:	fbb2 f3f3 	udiv	r3, r2, r3
 8006cbe:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006cc0:	69bb      	ldr	r3, [r7, #24]
 8006cc2:	2b0f      	cmp	r3, #15
 8006cc4:	d909      	bls.n	8006cda <UART_SetConfig+0x432>
 8006cc6:	69bb      	ldr	r3, [r7, #24]
 8006cc8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006ccc:	d205      	bcs.n	8006cda <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006cce:	69bb      	ldr	r3, [r7, #24]
 8006cd0:	b29a      	uxth	r2, r3
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	60da      	str	r2, [r3, #12]
 8006cd8:	e002      	b.n	8006ce0 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8006cda:	2301      	movs	r3, #1
 8006cdc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	2200      	movs	r2, #0
 8006ce4:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	2200      	movs	r2, #0
 8006cea:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8006cec:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8006cf0:	4618      	mov	r0, r3
 8006cf2:	3728      	adds	r7, #40	; 0x28
 8006cf4:	46bd      	mov	sp, r7
 8006cf6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006cfa:	bf00      	nop
 8006cfc:	00f42400 	.word	0x00f42400

08006d00 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006d00:	b480      	push	{r7}
 8006d02:	b083      	sub	sp, #12
 8006d04:	af00      	add	r7, sp, #0
 8006d06:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d0c:	f003 0301 	and.w	r3, r3, #1
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d00a      	beq.n	8006d2a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	685b      	ldr	r3, [r3, #4]
 8006d1a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	430a      	orrs	r2, r1
 8006d28:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d2e:	f003 0302 	and.w	r3, r3, #2
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d00a      	beq.n	8006d4c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	685b      	ldr	r3, [r3, #4]
 8006d3c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	430a      	orrs	r2, r1
 8006d4a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d50:	f003 0304 	and.w	r3, r3, #4
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d00a      	beq.n	8006d6e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	685b      	ldr	r3, [r3, #4]
 8006d5e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	430a      	orrs	r2, r1
 8006d6c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d72:	f003 0308 	and.w	r3, r3, #8
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d00a      	beq.n	8006d90 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	685b      	ldr	r3, [r3, #4]
 8006d80:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	430a      	orrs	r2, r1
 8006d8e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d94:	f003 0310 	and.w	r3, r3, #16
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d00a      	beq.n	8006db2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	689b      	ldr	r3, [r3, #8]
 8006da2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	430a      	orrs	r2, r1
 8006db0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006db6:	f003 0320 	and.w	r3, r3, #32
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d00a      	beq.n	8006dd4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	689b      	ldr	r3, [r3, #8]
 8006dc4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	430a      	orrs	r2, r1
 8006dd2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d01a      	beq.n	8006e16 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	685b      	ldr	r3, [r3, #4]
 8006de6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	430a      	orrs	r2, r1
 8006df4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dfa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006dfe:	d10a      	bne.n	8006e16 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	685b      	ldr	r3, [r3, #4]
 8006e06:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	430a      	orrs	r2, r1
 8006e14:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d00a      	beq.n	8006e38 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	685b      	ldr	r3, [r3, #4]
 8006e28:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	430a      	orrs	r2, r1
 8006e36:	605a      	str	r2, [r3, #4]
  }
}
 8006e38:	bf00      	nop
 8006e3a:	370c      	adds	r7, #12
 8006e3c:	46bd      	mov	sp, r7
 8006e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e42:	4770      	bx	lr

08006e44 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006e44:	b580      	push	{r7, lr}
 8006e46:	b086      	sub	sp, #24
 8006e48:	af02      	add	r7, sp, #8
 8006e4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	2200      	movs	r2, #0
 8006e50:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006e54:	f7fc fee8 	bl	8003c28 <HAL_GetTick>
 8006e58:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	f003 0308 	and.w	r3, r3, #8
 8006e64:	2b08      	cmp	r3, #8
 8006e66:	d10e      	bne.n	8006e86 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006e68:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006e6c:	9300      	str	r3, [sp, #0]
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	2200      	movs	r2, #0
 8006e72:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006e76:	6878      	ldr	r0, [r7, #4]
 8006e78:	f000 f82d 	bl	8006ed6 <UART_WaitOnFlagUntilTimeout>
 8006e7c:	4603      	mov	r3, r0
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d001      	beq.n	8006e86 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006e82:	2303      	movs	r3, #3
 8006e84:	e023      	b.n	8006ece <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	f003 0304 	and.w	r3, r3, #4
 8006e90:	2b04      	cmp	r3, #4
 8006e92:	d10e      	bne.n	8006eb2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006e94:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006e98:	9300      	str	r3, [sp, #0]
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	2200      	movs	r2, #0
 8006e9e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006ea2:	6878      	ldr	r0, [r7, #4]
 8006ea4:	f000 f817 	bl	8006ed6 <UART_WaitOnFlagUntilTimeout>
 8006ea8:	4603      	mov	r3, r0
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d001      	beq.n	8006eb2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006eae:	2303      	movs	r3, #3
 8006eb0:	e00d      	b.n	8006ece <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	2220      	movs	r2, #32
 8006eb6:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	2220      	movs	r2, #32
 8006ebc:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	2200      	movs	r2, #0
 8006ec2:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	2200      	movs	r2, #0
 8006ec8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8006ecc:	2300      	movs	r3, #0
}
 8006ece:	4618      	mov	r0, r3
 8006ed0:	3710      	adds	r7, #16
 8006ed2:	46bd      	mov	sp, r7
 8006ed4:	bd80      	pop	{r7, pc}

08006ed6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006ed6:	b580      	push	{r7, lr}
 8006ed8:	b09c      	sub	sp, #112	; 0x70
 8006eda:	af00      	add	r7, sp, #0
 8006edc:	60f8      	str	r0, [r7, #12]
 8006ede:	60b9      	str	r1, [r7, #8]
 8006ee0:	603b      	str	r3, [r7, #0]
 8006ee2:	4613      	mov	r3, r2
 8006ee4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006ee6:	e0a5      	b.n	8007034 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006ee8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006eea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006eee:	f000 80a1 	beq.w	8007034 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006ef2:	f7fc fe99 	bl	8003c28 <HAL_GetTick>
 8006ef6:	4602      	mov	r2, r0
 8006ef8:	683b      	ldr	r3, [r7, #0]
 8006efa:	1ad3      	subs	r3, r2, r3
 8006efc:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8006efe:	429a      	cmp	r2, r3
 8006f00:	d302      	bcc.n	8006f08 <UART_WaitOnFlagUntilTimeout+0x32>
 8006f02:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d13e      	bne.n	8006f86 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f0e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006f10:	e853 3f00 	ldrex	r3, [r3]
 8006f14:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006f16:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006f18:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006f1c:	667b      	str	r3, [r7, #100]	; 0x64
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	461a      	mov	r2, r3
 8006f24:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006f26:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006f28:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f2a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006f2c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006f2e:	e841 2300 	strex	r3, r2, [r1]
 8006f32:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006f34:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d1e6      	bne.n	8006f08 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	3308      	adds	r3, #8
 8006f40:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f42:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006f44:	e853 3f00 	ldrex	r3, [r3]
 8006f48:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006f4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f4c:	f023 0301 	bic.w	r3, r3, #1
 8006f50:	663b      	str	r3, [r7, #96]	; 0x60
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	3308      	adds	r3, #8
 8006f58:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006f5a:	64ba      	str	r2, [r7, #72]	; 0x48
 8006f5c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f5e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006f60:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006f62:	e841 2300 	strex	r3, r2, [r1]
 8006f66:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006f68:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d1e5      	bne.n	8006f3a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	2220      	movs	r2, #32
 8006f72:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	2220      	movs	r2, #32
 8006f78:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	2200      	movs	r2, #0
 8006f7e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8006f82:	2303      	movs	r3, #3
 8006f84:	e067      	b.n	8007056 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	f003 0304 	and.w	r3, r3, #4
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d04f      	beq.n	8007034 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	69db      	ldr	r3, [r3, #28]
 8006f9a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006f9e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006fa2:	d147      	bne.n	8007034 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006fac:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fb6:	e853 3f00 	ldrex	r3, [r3]
 8006fba:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006fbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fbe:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006fc2:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	461a      	mov	r2, r3
 8006fca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006fcc:	637b      	str	r3, [r7, #52]	; 0x34
 8006fce:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fd0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006fd2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006fd4:	e841 2300 	strex	r3, r2, [r1]
 8006fd8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006fda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d1e6      	bne.n	8006fae <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	3308      	adds	r3, #8
 8006fe6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fe8:	697b      	ldr	r3, [r7, #20]
 8006fea:	e853 3f00 	ldrex	r3, [r3]
 8006fee:	613b      	str	r3, [r7, #16]
   return(result);
 8006ff0:	693b      	ldr	r3, [r7, #16]
 8006ff2:	f023 0301 	bic.w	r3, r3, #1
 8006ff6:	66bb      	str	r3, [r7, #104]	; 0x68
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	3308      	adds	r3, #8
 8006ffe:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007000:	623a      	str	r2, [r7, #32]
 8007002:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007004:	69f9      	ldr	r1, [r7, #28]
 8007006:	6a3a      	ldr	r2, [r7, #32]
 8007008:	e841 2300 	strex	r3, r2, [r1]
 800700c:	61bb      	str	r3, [r7, #24]
   return(result);
 800700e:	69bb      	ldr	r3, [r7, #24]
 8007010:	2b00      	cmp	r3, #0
 8007012:	d1e5      	bne.n	8006fe0 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	2220      	movs	r2, #32
 8007018:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	2220      	movs	r2, #32
 800701e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	2220      	movs	r2, #32
 8007024:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	2200      	movs	r2, #0
 800702c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8007030:	2303      	movs	r3, #3
 8007032:	e010      	b.n	8007056 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	69da      	ldr	r2, [r3, #28]
 800703a:	68bb      	ldr	r3, [r7, #8]
 800703c:	4013      	ands	r3, r2
 800703e:	68ba      	ldr	r2, [r7, #8]
 8007040:	429a      	cmp	r2, r3
 8007042:	bf0c      	ite	eq
 8007044:	2301      	moveq	r3, #1
 8007046:	2300      	movne	r3, #0
 8007048:	b2db      	uxtb	r3, r3
 800704a:	461a      	mov	r2, r3
 800704c:	79fb      	ldrb	r3, [r7, #7]
 800704e:	429a      	cmp	r2, r3
 8007050:	f43f af4a 	beq.w	8006ee8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007054:	2300      	movs	r3, #0
}
 8007056:	4618      	mov	r0, r3
 8007058:	3770      	adds	r7, #112	; 0x70
 800705a:	46bd      	mov	sp, r7
 800705c:	bd80      	pop	{r7, pc}
	...

08007060 <__NVIC_SetPriority>:
{
 8007060:	b480      	push	{r7}
 8007062:	b083      	sub	sp, #12
 8007064:	af00      	add	r7, sp, #0
 8007066:	4603      	mov	r3, r0
 8007068:	6039      	str	r1, [r7, #0]
 800706a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800706c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007070:	2b00      	cmp	r3, #0
 8007072:	db0a      	blt.n	800708a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007074:	683b      	ldr	r3, [r7, #0]
 8007076:	b2da      	uxtb	r2, r3
 8007078:	490c      	ldr	r1, [pc, #48]	; (80070ac <__NVIC_SetPriority+0x4c>)
 800707a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800707e:	0112      	lsls	r2, r2, #4
 8007080:	b2d2      	uxtb	r2, r2
 8007082:	440b      	add	r3, r1
 8007084:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8007088:	e00a      	b.n	80070a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800708a:	683b      	ldr	r3, [r7, #0]
 800708c:	b2da      	uxtb	r2, r3
 800708e:	4908      	ldr	r1, [pc, #32]	; (80070b0 <__NVIC_SetPriority+0x50>)
 8007090:	79fb      	ldrb	r3, [r7, #7]
 8007092:	f003 030f 	and.w	r3, r3, #15
 8007096:	3b04      	subs	r3, #4
 8007098:	0112      	lsls	r2, r2, #4
 800709a:	b2d2      	uxtb	r2, r2
 800709c:	440b      	add	r3, r1
 800709e:	761a      	strb	r2, [r3, #24]
}
 80070a0:	bf00      	nop
 80070a2:	370c      	adds	r7, #12
 80070a4:	46bd      	mov	sp, r7
 80070a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070aa:	4770      	bx	lr
 80070ac:	e000e100 	.word	0xe000e100
 80070b0:	e000ed00 	.word	0xe000ed00

080070b4 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80070b4:	b580      	push	{r7, lr}
 80070b6:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80070b8:	4b05      	ldr	r3, [pc, #20]	; (80070d0 <SysTick_Handler+0x1c>)
 80070ba:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80070bc:	f001 fd98 	bl	8008bf0 <xTaskGetSchedulerState>
 80070c0:	4603      	mov	r3, r0
 80070c2:	2b01      	cmp	r3, #1
 80070c4:	d001      	beq.n	80070ca <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80070c6:	f002 fc37 	bl	8009938 <xPortSysTickHandler>
  }
}
 80070ca:	bf00      	nop
 80070cc:	bd80      	pop	{r7, pc}
 80070ce:	bf00      	nop
 80070d0:	e000e010 	.word	0xe000e010

080070d4 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80070d4:	b580      	push	{r7, lr}
 80070d6:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80070d8:	2100      	movs	r1, #0
 80070da:	f06f 0004 	mvn.w	r0, #4
 80070de:	f7ff ffbf 	bl	8007060 <__NVIC_SetPriority>
#endif
}
 80070e2:	bf00      	nop
 80070e4:	bd80      	pop	{r7, pc}
	...

080070e8 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80070e8:	b480      	push	{r7}
 80070ea:	b083      	sub	sp, #12
 80070ec:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80070ee:	f3ef 8305 	mrs	r3, IPSR
 80070f2:	603b      	str	r3, [r7, #0]
  return(result);
 80070f4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d003      	beq.n	8007102 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80070fa:	f06f 0305 	mvn.w	r3, #5
 80070fe:	607b      	str	r3, [r7, #4]
 8007100:	e00c      	b.n	800711c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8007102:	4b0a      	ldr	r3, [pc, #40]	; (800712c <osKernelInitialize+0x44>)
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	2b00      	cmp	r3, #0
 8007108:	d105      	bne.n	8007116 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800710a:	4b08      	ldr	r3, [pc, #32]	; (800712c <osKernelInitialize+0x44>)
 800710c:	2201      	movs	r2, #1
 800710e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8007110:	2300      	movs	r3, #0
 8007112:	607b      	str	r3, [r7, #4]
 8007114:	e002      	b.n	800711c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8007116:	f04f 33ff 	mov.w	r3, #4294967295
 800711a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800711c:	687b      	ldr	r3, [r7, #4]
}
 800711e:	4618      	mov	r0, r3
 8007120:	370c      	adds	r7, #12
 8007122:	46bd      	mov	sp, r7
 8007124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007128:	4770      	bx	lr
 800712a:	bf00      	nop
 800712c:	20001234 	.word	0x20001234

08007130 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8007130:	b580      	push	{r7, lr}
 8007132:	b082      	sub	sp, #8
 8007134:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007136:	f3ef 8305 	mrs	r3, IPSR
 800713a:	603b      	str	r3, [r7, #0]
  return(result);
 800713c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800713e:	2b00      	cmp	r3, #0
 8007140:	d003      	beq.n	800714a <osKernelStart+0x1a>
    stat = osErrorISR;
 8007142:	f06f 0305 	mvn.w	r3, #5
 8007146:	607b      	str	r3, [r7, #4]
 8007148:	e010      	b.n	800716c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800714a:	4b0b      	ldr	r3, [pc, #44]	; (8007178 <osKernelStart+0x48>)
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	2b01      	cmp	r3, #1
 8007150:	d109      	bne.n	8007166 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8007152:	f7ff ffbf 	bl	80070d4 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8007156:	4b08      	ldr	r3, [pc, #32]	; (8007178 <osKernelStart+0x48>)
 8007158:	2202      	movs	r2, #2
 800715a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800715c:	f001 f8ec 	bl	8008338 <vTaskStartScheduler>
      stat = osOK;
 8007160:	2300      	movs	r3, #0
 8007162:	607b      	str	r3, [r7, #4]
 8007164:	e002      	b.n	800716c <osKernelStart+0x3c>
    } else {
      stat = osError;
 8007166:	f04f 33ff 	mov.w	r3, #4294967295
 800716a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800716c:	687b      	ldr	r3, [r7, #4]
}
 800716e:	4618      	mov	r0, r3
 8007170:	3708      	adds	r7, #8
 8007172:	46bd      	mov	sp, r7
 8007174:	bd80      	pop	{r7, pc}
 8007176:	bf00      	nop
 8007178:	20001234 	.word	0x20001234

0800717c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800717c:	b580      	push	{r7, lr}
 800717e:	b08e      	sub	sp, #56	; 0x38
 8007180:	af04      	add	r7, sp, #16
 8007182:	60f8      	str	r0, [r7, #12]
 8007184:	60b9      	str	r1, [r7, #8]
 8007186:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8007188:	2300      	movs	r3, #0
 800718a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800718c:	f3ef 8305 	mrs	r3, IPSR
 8007190:	617b      	str	r3, [r7, #20]
  return(result);
 8007192:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8007194:	2b00      	cmp	r3, #0
 8007196:	d17f      	bne.n	8007298 <osThreadNew+0x11c>
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	2b00      	cmp	r3, #0
 800719c:	d07c      	beq.n	8007298 <osThreadNew+0x11c>
    stack = configMINIMAL_STACK_SIZE;
 800719e:	f44f 7380 	mov.w	r3, #256	; 0x100
 80071a2:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80071a4:	2318      	movs	r3, #24
 80071a6:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80071a8:	2300      	movs	r3, #0
 80071aa:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 80071ac:	f04f 33ff 	mov.w	r3, #4294967295
 80071b0:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d045      	beq.n	8007244 <osThreadNew+0xc8>
      if (attr->name != NULL) {
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d002      	beq.n	80071c6 <osThreadNew+0x4a>
        name = attr->name;
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	699b      	ldr	r3, [r3, #24]
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d002      	beq.n	80071d4 <osThreadNew+0x58>
        prio = (UBaseType_t)attr->priority;
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	699b      	ldr	r3, [r3, #24]
 80071d2:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80071d4:	69fb      	ldr	r3, [r7, #28]
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d008      	beq.n	80071ec <osThreadNew+0x70>
 80071da:	69fb      	ldr	r3, [r7, #28]
 80071dc:	2b38      	cmp	r3, #56	; 0x38
 80071de:	d805      	bhi.n	80071ec <osThreadNew+0x70>
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	685b      	ldr	r3, [r3, #4]
 80071e4:	f003 0301 	and.w	r3, r3, #1
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d001      	beq.n	80071f0 <osThreadNew+0x74>
        return (NULL);
 80071ec:	2300      	movs	r3, #0
 80071ee:	e054      	b.n	800729a <osThreadNew+0x11e>
      }

      if (attr->stack_size > 0U) {
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	695b      	ldr	r3, [r3, #20]
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d003      	beq.n	8007200 <osThreadNew+0x84>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	695b      	ldr	r3, [r3, #20]
 80071fc:	089b      	lsrs	r3, r3, #2
 80071fe:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	689b      	ldr	r3, [r3, #8]
 8007204:	2b00      	cmp	r3, #0
 8007206:	d00e      	beq.n	8007226 <osThreadNew+0xaa>
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	68db      	ldr	r3, [r3, #12]
 800720c:	2bbb      	cmp	r3, #187	; 0xbb
 800720e:	d90a      	bls.n	8007226 <osThreadNew+0xaa>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007214:	2b00      	cmp	r3, #0
 8007216:	d006      	beq.n	8007226 <osThreadNew+0xaa>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	695b      	ldr	r3, [r3, #20]
 800721c:	2b00      	cmp	r3, #0
 800721e:	d002      	beq.n	8007226 <osThreadNew+0xaa>
        mem = 1;
 8007220:	2301      	movs	r3, #1
 8007222:	61bb      	str	r3, [r7, #24]
 8007224:	e010      	b.n	8007248 <osThreadNew+0xcc>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	689b      	ldr	r3, [r3, #8]
 800722a:	2b00      	cmp	r3, #0
 800722c:	d10c      	bne.n	8007248 <osThreadNew+0xcc>
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	68db      	ldr	r3, [r3, #12]
 8007232:	2b00      	cmp	r3, #0
 8007234:	d108      	bne.n	8007248 <osThreadNew+0xcc>
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	691b      	ldr	r3, [r3, #16]
 800723a:	2b00      	cmp	r3, #0
 800723c:	d104      	bne.n	8007248 <osThreadNew+0xcc>
          mem = 0;
 800723e:	2300      	movs	r3, #0
 8007240:	61bb      	str	r3, [r7, #24]
 8007242:	e001      	b.n	8007248 <osThreadNew+0xcc>
        }
      }
    }
    else {
      mem = 0;
 8007244:	2300      	movs	r3, #0
 8007246:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8007248:	69bb      	ldr	r3, [r7, #24]
 800724a:	2b01      	cmp	r3, #1
 800724c:	d110      	bne.n	8007270 <osThreadNew+0xf4>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8007252:	687a      	ldr	r2, [r7, #4]
 8007254:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007256:	9202      	str	r2, [sp, #8]
 8007258:	9301      	str	r3, [sp, #4]
 800725a:	69fb      	ldr	r3, [r7, #28]
 800725c:	9300      	str	r3, [sp, #0]
 800725e:	68bb      	ldr	r3, [r7, #8]
 8007260:	6a3a      	ldr	r2, [r7, #32]
 8007262:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007264:	68f8      	ldr	r0, [r7, #12]
 8007266:	f000 feaf 	bl	8007fc8 <xTaskCreateStatic>
 800726a:	4603      	mov	r3, r0
 800726c:	613b      	str	r3, [r7, #16]
 800726e:	e013      	b.n	8007298 <osThreadNew+0x11c>
      #endif
    }
    else {
      if (mem == 0) {
 8007270:	69bb      	ldr	r3, [r7, #24]
 8007272:	2b00      	cmp	r3, #0
 8007274:	d110      	bne.n	8007298 <osThreadNew+0x11c>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8007276:	6a3b      	ldr	r3, [r7, #32]
 8007278:	b29a      	uxth	r2, r3
 800727a:	f107 0310 	add.w	r3, r7, #16
 800727e:	9301      	str	r3, [sp, #4]
 8007280:	69fb      	ldr	r3, [r7, #28]
 8007282:	9300      	str	r3, [sp, #0]
 8007284:	68bb      	ldr	r3, [r7, #8]
 8007286:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007288:	68f8      	ldr	r0, [r7, #12]
 800728a:	f000 fefa 	bl	8008082 <xTaskCreate>
 800728e:	4603      	mov	r3, r0
 8007290:	2b01      	cmp	r3, #1
 8007292:	d001      	beq.n	8007298 <osThreadNew+0x11c>
            hTask = NULL;
 8007294:	2300      	movs	r3, #0
 8007296:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8007298:	693b      	ldr	r3, [r7, #16]
}
 800729a:	4618      	mov	r0, r3
 800729c:	3728      	adds	r7, #40	; 0x28
 800729e:	46bd      	mov	sp, r7
 80072a0:	bd80      	pop	{r7, pc}

080072a2 <TimerCallback>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_TIMER == 1)

static void TimerCallback (TimerHandle_t hTimer) {
 80072a2:	b580      	push	{r7, lr}
 80072a4:	b084      	sub	sp, #16
 80072a6:	af00      	add	r7, sp, #0
 80072a8:	6078      	str	r0, [r7, #4]
  TimerCallback_t *callb;

  callb = (TimerCallback_t *)pvTimerGetTimerID (hTimer);
 80072aa:	6878      	ldr	r0, [r7, #4]
 80072ac:	f002 f968 	bl	8009580 <pvTimerGetTimerID>
 80072b0:	60f8      	str	r0, [r7, #12]

  if (callb != NULL) {
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d005      	beq.n	80072c4 <TimerCallback+0x22>
    callb->func (callb->arg);
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	68fa      	ldr	r2, [r7, #12]
 80072be:	6852      	ldr	r2, [r2, #4]
 80072c0:	4610      	mov	r0, r2
 80072c2:	4798      	blx	r3
  }
}
 80072c4:	bf00      	nop
 80072c6:	3710      	adds	r7, #16
 80072c8:	46bd      	mov	sp, r7
 80072ca:	bd80      	pop	{r7, pc}

080072cc <osTimerNew>:

osTimerId_t osTimerNew (osTimerFunc_t func, osTimerType_t type, void *argument, const osTimerAttr_t *attr) {
 80072cc:	b580      	push	{r7, lr}
 80072ce:	b08c      	sub	sp, #48	; 0x30
 80072d0:	af02      	add	r7, sp, #8
 80072d2:	60f8      	str	r0, [r7, #12]
 80072d4:	607a      	str	r2, [r7, #4]
 80072d6:	603b      	str	r3, [r7, #0]
 80072d8:	460b      	mov	r3, r1
 80072da:	72fb      	strb	r3, [r7, #11]
  TimerHandle_t hTimer;
  TimerCallback_t *callb;
  UBaseType_t reload;
  int32_t mem;

  hTimer = NULL;
 80072dc:	2300      	movs	r3, #0
 80072de:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80072e0:	f3ef 8305 	mrs	r3, IPSR
 80072e4:	613b      	str	r3, [r7, #16]
  return(result);
 80072e6:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (func != NULL)) {
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d163      	bne.n	80073b4 <osTimerNew+0xe8>
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d060      	beq.n	80073b4 <osTimerNew+0xe8>
    /* Allocate memory to store callback function and argument */
    callb = pvPortMalloc (sizeof(TimerCallback_t));
 80072f2:	2008      	movs	r0, #8
 80072f4:	f002 fbb0 	bl	8009a58 <pvPortMalloc>
 80072f8:	6178      	str	r0, [r7, #20]

    if (callb != NULL) {
 80072fa:	697b      	ldr	r3, [r7, #20]
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d059      	beq.n	80073b4 <osTimerNew+0xe8>
      callb->func = func;
 8007300:	697b      	ldr	r3, [r7, #20]
 8007302:	68fa      	ldr	r2, [r7, #12]
 8007304:	601a      	str	r2, [r3, #0]
      callb->arg  = argument;
 8007306:	697b      	ldr	r3, [r7, #20]
 8007308:	687a      	ldr	r2, [r7, #4]
 800730a:	605a      	str	r2, [r3, #4]

      if (type == osTimerOnce) {
 800730c:	7afb      	ldrb	r3, [r7, #11]
 800730e:	2b00      	cmp	r3, #0
 8007310:	d102      	bne.n	8007318 <osTimerNew+0x4c>
        reload = pdFALSE;
 8007312:	2300      	movs	r3, #0
 8007314:	61fb      	str	r3, [r7, #28]
 8007316:	e001      	b.n	800731c <osTimerNew+0x50>
      } else {
        reload = pdTRUE;
 8007318:	2301      	movs	r3, #1
 800731a:	61fb      	str	r3, [r7, #28]
      }

      mem  = -1;
 800731c:	f04f 33ff 	mov.w	r3, #4294967295
 8007320:	61bb      	str	r3, [r7, #24]
      name = NULL;
 8007322:	2300      	movs	r3, #0
 8007324:	627b      	str	r3, [r7, #36]	; 0x24

      if (attr != NULL) {
 8007326:	683b      	ldr	r3, [r7, #0]
 8007328:	2b00      	cmp	r3, #0
 800732a:	d01c      	beq.n	8007366 <osTimerNew+0x9a>
        if (attr->name != NULL) {
 800732c:	683b      	ldr	r3, [r7, #0]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	2b00      	cmp	r3, #0
 8007332:	d002      	beq.n	800733a <osTimerNew+0x6e>
          name = attr->name;
 8007334:	683b      	ldr	r3, [r7, #0]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	627b      	str	r3, [r7, #36]	; 0x24
        }

        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticTimer_t))) {
 800733a:	683b      	ldr	r3, [r7, #0]
 800733c:	689b      	ldr	r3, [r3, #8]
 800733e:	2b00      	cmp	r3, #0
 8007340:	d006      	beq.n	8007350 <osTimerNew+0x84>
 8007342:	683b      	ldr	r3, [r7, #0]
 8007344:	68db      	ldr	r3, [r3, #12]
 8007346:	2b2b      	cmp	r3, #43	; 0x2b
 8007348:	d902      	bls.n	8007350 <osTimerNew+0x84>
          mem = 1;
 800734a:	2301      	movs	r3, #1
 800734c:	61bb      	str	r3, [r7, #24]
 800734e:	e00c      	b.n	800736a <osTimerNew+0x9e>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8007350:	683b      	ldr	r3, [r7, #0]
 8007352:	689b      	ldr	r3, [r3, #8]
 8007354:	2b00      	cmp	r3, #0
 8007356:	d108      	bne.n	800736a <osTimerNew+0x9e>
 8007358:	683b      	ldr	r3, [r7, #0]
 800735a:	68db      	ldr	r3, [r3, #12]
 800735c:	2b00      	cmp	r3, #0
 800735e:	d104      	bne.n	800736a <osTimerNew+0x9e>
            mem = 0;
 8007360:	2300      	movs	r3, #0
 8007362:	61bb      	str	r3, [r7, #24]
 8007364:	e001      	b.n	800736a <osTimerNew+0x9e>
          }
        }
      }
      else {
        mem = 0;
 8007366:	2300      	movs	r3, #0
 8007368:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 800736a:	69bb      	ldr	r3, [r7, #24]
 800736c:	2b01      	cmp	r3, #1
 800736e:	d10c      	bne.n	800738a <osTimerNew+0xbe>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          hTimer = xTimerCreateStatic (name, 1, reload, callb, TimerCallback, (StaticTimer_t *)attr->cb_mem);
 8007370:	683b      	ldr	r3, [r7, #0]
 8007372:	689b      	ldr	r3, [r3, #8]
 8007374:	9301      	str	r3, [sp, #4]
 8007376:	4b12      	ldr	r3, [pc, #72]	; (80073c0 <osTimerNew+0xf4>)
 8007378:	9300      	str	r3, [sp, #0]
 800737a:	697b      	ldr	r3, [r7, #20]
 800737c:	69fa      	ldr	r2, [r7, #28]
 800737e:	2101      	movs	r1, #1
 8007380:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007382:	f001 fd7e 	bl	8008e82 <xTimerCreateStatic>
 8007386:	6238      	str	r0, [r7, #32]
 8007388:	e00b      	b.n	80073a2 <osTimerNew+0xd6>
        #endif
      }
      else {
        if (mem == 0) {
 800738a:	69bb      	ldr	r3, [r7, #24]
 800738c:	2b00      	cmp	r3, #0
 800738e:	d108      	bne.n	80073a2 <osTimerNew+0xd6>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hTimer = xTimerCreate (name, 1, reload, callb, TimerCallback);
 8007390:	4b0b      	ldr	r3, [pc, #44]	; (80073c0 <osTimerNew+0xf4>)
 8007392:	9300      	str	r3, [sp, #0]
 8007394:	697b      	ldr	r3, [r7, #20]
 8007396:	69fa      	ldr	r2, [r7, #28]
 8007398:	2101      	movs	r1, #1
 800739a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800739c:	f001 fd50 	bl	8008e40 <xTimerCreate>
 80073a0:	6238      	str	r0, [r7, #32]
          #endif
        }
      }

      if ((hTimer == NULL) && (callb != NULL)) {
 80073a2:	6a3b      	ldr	r3, [r7, #32]
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d105      	bne.n	80073b4 <osTimerNew+0xe8>
 80073a8:	697b      	ldr	r3, [r7, #20]
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d002      	beq.n	80073b4 <osTimerNew+0xe8>
        vPortFree (callb);
 80073ae:	6978      	ldr	r0, [r7, #20]
 80073b0:	f002 fc1e 	bl	8009bf0 <vPortFree>
      }
    }
  }

  return ((osTimerId_t)hTimer);
 80073b4:	6a3b      	ldr	r3, [r7, #32]
}
 80073b6:	4618      	mov	r0, r3
 80073b8:	3728      	adds	r7, #40	; 0x28
 80073ba:	46bd      	mov	sp, r7
 80073bc:	bd80      	pop	{r7, pc}
 80073be:	bf00      	nop
 80073c0:	080072a3 	.word	0x080072a3

080073c4 <osTimerStart>:
  }

  return (p);
}

osStatus_t osTimerStart (osTimerId_t timer_id, uint32_t ticks) {
 80073c4:	b580      	push	{r7, lr}
 80073c6:	b088      	sub	sp, #32
 80073c8:	af02      	add	r7, sp, #8
 80073ca:	6078      	str	r0, [r7, #4]
 80073cc:	6039      	str	r1, [r7, #0]
  TimerHandle_t hTimer = (TimerHandle_t)timer_id;
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80073d2:	f3ef 8305 	mrs	r3, IPSR
 80073d6:	60fb      	str	r3, [r7, #12]
  return(result);
 80073d8:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d003      	beq.n	80073e6 <osTimerStart+0x22>
    stat = osErrorISR;
 80073de:	f06f 0305 	mvn.w	r3, #5
 80073e2:	617b      	str	r3, [r7, #20]
 80073e4:	e017      	b.n	8007416 <osTimerStart+0x52>
  }
  else if (hTimer == NULL) {
 80073e6:	693b      	ldr	r3, [r7, #16]
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d103      	bne.n	80073f4 <osTimerStart+0x30>
    stat = osErrorParameter;
 80073ec:	f06f 0303 	mvn.w	r3, #3
 80073f0:	617b      	str	r3, [r7, #20]
 80073f2:	e010      	b.n	8007416 <osTimerStart+0x52>
  }
  else {
    if (xTimerChangePeriod (hTimer, ticks, 0) == pdPASS) {
 80073f4:	2300      	movs	r3, #0
 80073f6:	9300      	str	r3, [sp, #0]
 80073f8:	2300      	movs	r3, #0
 80073fa:	683a      	ldr	r2, [r7, #0]
 80073fc:	2104      	movs	r1, #4
 80073fe:	6938      	ldr	r0, [r7, #16]
 8007400:	f001 fdb8 	bl	8008f74 <xTimerGenericCommand>
 8007404:	4603      	mov	r3, r0
 8007406:	2b01      	cmp	r3, #1
 8007408:	d102      	bne.n	8007410 <osTimerStart+0x4c>
      stat = osOK;
 800740a:	2300      	movs	r3, #0
 800740c:	617b      	str	r3, [r7, #20]
 800740e:	e002      	b.n	8007416 <osTimerStart+0x52>
    } else {
      stat = osErrorResource;
 8007410:	f06f 0302 	mvn.w	r3, #2
 8007414:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8007416:	697b      	ldr	r3, [r7, #20]
}
 8007418:	4618      	mov	r0, r3
 800741a:	3718      	adds	r7, #24
 800741c:	46bd      	mov	sp, r7
 800741e:	bd80      	pop	{r7, pc}

08007420 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8007420:	b480      	push	{r7}
 8007422:	b085      	sub	sp, #20
 8007424:	af00      	add	r7, sp, #0
 8007426:	60f8      	str	r0, [r7, #12]
 8007428:	60b9      	str	r1, [r7, #8]
 800742a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	4a07      	ldr	r2, [pc, #28]	; (800744c <vApplicationGetIdleTaskMemory+0x2c>)
 8007430:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8007432:	68bb      	ldr	r3, [r7, #8]
 8007434:	4a06      	ldr	r2, [pc, #24]	; (8007450 <vApplicationGetIdleTaskMemory+0x30>)
 8007436:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800743e:	601a      	str	r2, [r3, #0]
}
 8007440:	bf00      	nop
 8007442:	3714      	adds	r7, #20
 8007444:	46bd      	mov	sp, r7
 8007446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800744a:	4770      	bx	lr
 800744c:	20001238 	.word	0x20001238
 8007450:	200012f4 	.word	0x200012f4

08007454 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8007454:	b480      	push	{r7}
 8007456:	b085      	sub	sp, #20
 8007458:	af00      	add	r7, sp, #0
 800745a:	60f8      	str	r0, [r7, #12]
 800745c:	60b9      	str	r1, [r7, #8]
 800745e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	4a07      	ldr	r2, [pc, #28]	; (8007480 <vApplicationGetTimerTaskMemory+0x2c>)
 8007464:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8007466:	68bb      	ldr	r3, [r7, #8]
 8007468:	4a06      	ldr	r2, [pc, #24]	; (8007484 <vApplicationGetTimerTaskMemory+0x30>)
 800746a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007472:	601a      	str	r2, [r3, #0]
}
 8007474:	bf00      	nop
 8007476:	3714      	adds	r7, #20
 8007478:	46bd      	mov	sp, r7
 800747a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800747e:	4770      	bx	lr
 8007480:	200016f4 	.word	0x200016f4
 8007484:	200017b0 	.word	0x200017b0

08007488 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007488:	b480      	push	{r7}
 800748a:	b083      	sub	sp, #12
 800748c:	af00      	add	r7, sp, #0
 800748e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	f103 0208 	add.w	r2, r3, #8
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	f04f 32ff 	mov.w	r2, #4294967295
 80074a0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	f103 0208 	add.w	r2, r3, #8
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	f103 0208 	add.w	r2, r3, #8
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	2200      	movs	r2, #0
 80074ba:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80074bc:	bf00      	nop
 80074be:	370c      	adds	r7, #12
 80074c0:	46bd      	mov	sp, r7
 80074c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074c6:	4770      	bx	lr

080074c8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80074c8:	b480      	push	{r7}
 80074ca:	b083      	sub	sp, #12
 80074cc:	af00      	add	r7, sp, #0
 80074ce:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	2200      	movs	r2, #0
 80074d4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80074d6:	bf00      	nop
 80074d8:	370c      	adds	r7, #12
 80074da:	46bd      	mov	sp, r7
 80074dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074e0:	4770      	bx	lr

080074e2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80074e2:	b480      	push	{r7}
 80074e4:	b085      	sub	sp, #20
 80074e6:	af00      	add	r7, sp, #0
 80074e8:	6078      	str	r0, [r7, #4]
 80074ea:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	685b      	ldr	r3, [r3, #4]
 80074f0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80074f2:	683b      	ldr	r3, [r7, #0]
 80074f4:	68fa      	ldr	r2, [r7, #12]
 80074f6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	689a      	ldr	r2, [r3, #8]
 80074fc:	683b      	ldr	r3, [r7, #0]
 80074fe:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	689b      	ldr	r3, [r3, #8]
 8007504:	683a      	ldr	r2, [r7, #0]
 8007506:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	683a      	ldr	r2, [r7, #0]
 800750c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800750e:	683b      	ldr	r3, [r7, #0]
 8007510:	687a      	ldr	r2, [r7, #4]
 8007512:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	1c5a      	adds	r2, r3, #1
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	601a      	str	r2, [r3, #0]
}
 800751e:	bf00      	nop
 8007520:	3714      	adds	r7, #20
 8007522:	46bd      	mov	sp, r7
 8007524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007528:	4770      	bx	lr

0800752a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800752a:	b480      	push	{r7}
 800752c:	b085      	sub	sp, #20
 800752e:	af00      	add	r7, sp, #0
 8007530:	6078      	str	r0, [r7, #4]
 8007532:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007534:	683b      	ldr	r3, [r7, #0]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800753a:	68bb      	ldr	r3, [r7, #8]
 800753c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007540:	d103      	bne.n	800754a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	691b      	ldr	r3, [r3, #16]
 8007546:	60fb      	str	r3, [r7, #12]
 8007548:	e00c      	b.n	8007564 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	3308      	adds	r3, #8
 800754e:	60fb      	str	r3, [r7, #12]
 8007550:	e002      	b.n	8007558 <vListInsert+0x2e>
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	685b      	ldr	r3, [r3, #4]
 8007556:	60fb      	str	r3, [r7, #12]
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	685b      	ldr	r3, [r3, #4]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	68ba      	ldr	r2, [r7, #8]
 8007560:	429a      	cmp	r2, r3
 8007562:	d2f6      	bcs.n	8007552 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	685a      	ldr	r2, [r3, #4]
 8007568:	683b      	ldr	r3, [r7, #0]
 800756a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800756c:	683b      	ldr	r3, [r7, #0]
 800756e:	685b      	ldr	r3, [r3, #4]
 8007570:	683a      	ldr	r2, [r7, #0]
 8007572:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007574:	683b      	ldr	r3, [r7, #0]
 8007576:	68fa      	ldr	r2, [r7, #12]
 8007578:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	683a      	ldr	r2, [r7, #0]
 800757e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8007580:	683b      	ldr	r3, [r7, #0]
 8007582:	687a      	ldr	r2, [r7, #4]
 8007584:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	1c5a      	adds	r2, r3, #1
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	601a      	str	r2, [r3, #0]
}
 8007590:	bf00      	nop
 8007592:	3714      	adds	r7, #20
 8007594:	46bd      	mov	sp, r7
 8007596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800759a:	4770      	bx	lr

0800759c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800759c:	b480      	push	{r7}
 800759e:	b085      	sub	sp, #20
 80075a0:	af00      	add	r7, sp, #0
 80075a2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	691b      	ldr	r3, [r3, #16]
 80075a8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	685b      	ldr	r3, [r3, #4]
 80075ae:	687a      	ldr	r2, [r7, #4]
 80075b0:	6892      	ldr	r2, [r2, #8]
 80075b2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	689b      	ldr	r3, [r3, #8]
 80075b8:	687a      	ldr	r2, [r7, #4]
 80075ba:	6852      	ldr	r2, [r2, #4]
 80075bc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	685b      	ldr	r3, [r3, #4]
 80075c2:	687a      	ldr	r2, [r7, #4]
 80075c4:	429a      	cmp	r2, r3
 80075c6:	d103      	bne.n	80075d0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	689a      	ldr	r2, [r3, #8]
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	2200      	movs	r2, #0
 80075d4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	1e5a      	subs	r2, r3, #1
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	681b      	ldr	r3, [r3, #0]
}
 80075e4:	4618      	mov	r0, r3
 80075e6:	3714      	adds	r7, #20
 80075e8:	46bd      	mov	sp, r7
 80075ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ee:	4770      	bx	lr

080075f0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80075f0:	b580      	push	{r7, lr}
 80075f2:	b084      	sub	sp, #16
 80075f4:	af00      	add	r7, sp, #0
 80075f6:	6078      	str	r0, [r7, #4]
 80075f8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	2b00      	cmp	r3, #0
 8007602:	d10a      	bne.n	800761a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007604:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007608:	f383 8811 	msr	BASEPRI, r3
 800760c:	f3bf 8f6f 	isb	sy
 8007610:	f3bf 8f4f 	dsb	sy
 8007614:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8007616:	bf00      	nop
 8007618:	e7fe      	b.n	8007618 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800761a:	f002 f8fb 	bl	8009814 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	681a      	ldr	r2, [r3, #0]
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007626:	68f9      	ldr	r1, [r7, #12]
 8007628:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800762a:	fb01 f303 	mul.w	r3, r1, r3
 800762e:	441a      	add	r2, r3
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	2200      	movs	r2, #0
 8007638:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	681a      	ldr	r2, [r3, #0]
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	681a      	ldr	r2, [r3, #0]
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800764a:	3b01      	subs	r3, #1
 800764c:	68f9      	ldr	r1, [r7, #12]
 800764e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007650:	fb01 f303 	mul.w	r3, r1, r3
 8007654:	441a      	add	r2, r3
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	22ff      	movs	r2, #255	; 0xff
 800765e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	22ff      	movs	r2, #255	; 0xff
 8007666:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800766a:	683b      	ldr	r3, [r7, #0]
 800766c:	2b00      	cmp	r3, #0
 800766e:	d114      	bne.n	800769a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	691b      	ldr	r3, [r3, #16]
 8007674:	2b00      	cmp	r3, #0
 8007676:	d01a      	beq.n	80076ae <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	3310      	adds	r3, #16
 800767c:	4618      	mov	r0, r3
 800767e:	f001 f8f5 	bl	800886c <xTaskRemoveFromEventList>
 8007682:	4603      	mov	r3, r0
 8007684:	2b00      	cmp	r3, #0
 8007686:	d012      	beq.n	80076ae <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8007688:	4b0c      	ldr	r3, [pc, #48]	; (80076bc <xQueueGenericReset+0xcc>)
 800768a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800768e:	601a      	str	r2, [r3, #0]
 8007690:	f3bf 8f4f 	dsb	sy
 8007694:	f3bf 8f6f 	isb	sy
 8007698:	e009      	b.n	80076ae <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	3310      	adds	r3, #16
 800769e:	4618      	mov	r0, r3
 80076a0:	f7ff fef2 	bl	8007488 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	3324      	adds	r3, #36	; 0x24
 80076a8:	4618      	mov	r0, r3
 80076aa:	f7ff feed 	bl	8007488 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80076ae:	f002 f8e1 	bl	8009874 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80076b2:	2301      	movs	r3, #1
}
 80076b4:	4618      	mov	r0, r3
 80076b6:	3710      	adds	r7, #16
 80076b8:	46bd      	mov	sp, r7
 80076ba:	bd80      	pop	{r7, pc}
 80076bc:	e000ed04 	.word	0xe000ed04

080076c0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80076c0:	b580      	push	{r7, lr}
 80076c2:	b08e      	sub	sp, #56	; 0x38
 80076c4:	af02      	add	r7, sp, #8
 80076c6:	60f8      	str	r0, [r7, #12]
 80076c8:	60b9      	str	r1, [r7, #8]
 80076ca:	607a      	str	r2, [r7, #4]
 80076cc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	d10a      	bne.n	80076ea <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80076d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076d8:	f383 8811 	msr	BASEPRI, r3
 80076dc:	f3bf 8f6f 	isb	sy
 80076e0:	f3bf 8f4f 	dsb	sy
 80076e4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80076e6:	bf00      	nop
 80076e8:	e7fe      	b.n	80076e8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80076ea:	683b      	ldr	r3, [r7, #0]
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d10a      	bne.n	8007706 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80076f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076f4:	f383 8811 	msr	BASEPRI, r3
 80076f8:	f3bf 8f6f 	isb	sy
 80076fc:	f3bf 8f4f 	dsb	sy
 8007700:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007702:	bf00      	nop
 8007704:	e7fe      	b.n	8007704 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	2b00      	cmp	r3, #0
 800770a:	d002      	beq.n	8007712 <xQueueGenericCreateStatic+0x52>
 800770c:	68bb      	ldr	r3, [r7, #8]
 800770e:	2b00      	cmp	r3, #0
 8007710:	d001      	beq.n	8007716 <xQueueGenericCreateStatic+0x56>
 8007712:	2301      	movs	r3, #1
 8007714:	e000      	b.n	8007718 <xQueueGenericCreateStatic+0x58>
 8007716:	2300      	movs	r3, #0
 8007718:	2b00      	cmp	r3, #0
 800771a:	d10a      	bne.n	8007732 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800771c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007720:	f383 8811 	msr	BASEPRI, r3
 8007724:	f3bf 8f6f 	isb	sy
 8007728:	f3bf 8f4f 	dsb	sy
 800772c:	623b      	str	r3, [r7, #32]
}
 800772e:	bf00      	nop
 8007730:	e7fe      	b.n	8007730 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	2b00      	cmp	r3, #0
 8007736:	d102      	bne.n	800773e <xQueueGenericCreateStatic+0x7e>
 8007738:	68bb      	ldr	r3, [r7, #8]
 800773a:	2b00      	cmp	r3, #0
 800773c:	d101      	bne.n	8007742 <xQueueGenericCreateStatic+0x82>
 800773e:	2301      	movs	r3, #1
 8007740:	e000      	b.n	8007744 <xQueueGenericCreateStatic+0x84>
 8007742:	2300      	movs	r3, #0
 8007744:	2b00      	cmp	r3, #0
 8007746:	d10a      	bne.n	800775e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8007748:	f04f 0350 	mov.w	r3, #80	; 0x50
 800774c:	f383 8811 	msr	BASEPRI, r3
 8007750:	f3bf 8f6f 	isb	sy
 8007754:	f3bf 8f4f 	dsb	sy
 8007758:	61fb      	str	r3, [r7, #28]
}
 800775a:	bf00      	nop
 800775c:	e7fe      	b.n	800775c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800775e:	2350      	movs	r3, #80	; 0x50
 8007760:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8007762:	697b      	ldr	r3, [r7, #20]
 8007764:	2b50      	cmp	r3, #80	; 0x50
 8007766:	d00a      	beq.n	800777e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8007768:	f04f 0350 	mov.w	r3, #80	; 0x50
 800776c:	f383 8811 	msr	BASEPRI, r3
 8007770:	f3bf 8f6f 	isb	sy
 8007774:	f3bf 8f4f 	dsb	sy
 8007778:	61bb      	str	r3, [r7, #24]
}
 800777a:	bf00      	nop
 800777c:	e7fe      	b.n	800777c <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800777e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007780:	683b      	ldr	r3, [r7, #0]
 8007782:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8007784:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007786:	2b00      	cmp	r3, #0
 8007788:	d00d      	beq.n	80077a6 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800778a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800778c:	2201      	movs	r2, #1
 800778e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007792:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8007796:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007798:	9300      	str	r3, [sp, #0]
 800779a:	4613      	mov	r3, r2
 800779c:	687a      	ldr	r2, [r7, #4]
 800779e:	68b9      	ldr	r1, [r7, #8]
 80077a0:	68f8      	ldr	r0, [r7, #12]
 80077a2:	f000 f805 	bl	80077b0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80077a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80077a8:	4618      	mov	r0, r3
 80077aa:	3730      	adds	r7, #48	; 0x30
 80077ac:	46bd      	mov	sp, r7
 80077ae:	bd80      	pop	{r7, pc}

080077b0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80077b0:	b580      	push	{r7, lr}
 80077b2:	b084      	sub	sp, #16
 80077b4:	af00      	add	r7, sp, #0
 80077b6:	60f8      	str	r0, [r7, #12]
 80077b8:	60b9      	str	r1, [r7, #8]
 80077ba:	607a      	str	r2, [r7, #4]
 80077bc:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80077be:	68bb      	ldr	r3, [r7, #8]
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	d103      	bne.n	80077cc <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80077c4:	69bb      	ldr	r3, [r7, #24]
 80077c6:	69ba      	ldr	r2, [r7, #24]
 80077c8:	601a      	str	r2, [r3, #0]
 80077ca:	e002      	b.n	80077d2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80077cc:	69bb      	ldr	r3, [r7, #24]
 80077ce:	687a      	ldr	r2, [r7, #4]
 80077d0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80077d2:	69bb      	ldr	r3, [r7, #24]
 80077d4:	68fa      	ldr	r2, [r7, #12]
 80077d6:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80077d8:	69bb      	ldr	r3, [r7, #24]
 80077da:	68ba      	ldr	r2, [r7, #8]
 80077dc:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80077de:	2101      	movs	r1, #1
 80077e0:	69b8      	ldr	r0, [r7, #24]
 80077e2:	f7ff ff05 	bl	80075f0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80077e6:	69bb      	ldr	r3, [r7, #24]
 80077e8:	78fa      	ldrb	r2, [r7, #3]
 80077ea:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80077ee:	bf00      	nop
 80077f0:	3710      	adds	r7, #16
 80077f2:	46bd      	mov	sp, r7
 80077f4:	bd80      	pop	{r7, pc}
	...

080077f8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80077f8:	b580      	push	{r7, lr}
 80077fa:	b08e      	sub	sp, #56	; 0x38
 80077fc:	af00      	add	r7, sp, #0
 80077fe:	60f8      	str	r0, [r7, #12]
 8007800:	60b9      	str	r1, [r7, #8]
 8007802:	607a      	str	r2, [r7, #4]
 8007804:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8007806:	2300      	movs	r3, #0
 8007808:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800780e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007810:	2b00      	cmp	r3, #0
 8007812:	d10a      	bne.n	800782a <xQueueGenericSend+0x32>
	__asm volatile
 8007814:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007818:	f383 8811 	msr	BASEPRI, r3
 800781c:	f3bf 8f6f 	isb	sy
 8007820:	f3bf 8f4f 	dsb	sy
 8007824:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007826:	bf00      	nop
 8007828:	e7fe      	b.n	8007828 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800782a:	68bb      	ldr	r3, [r7, #8]
 800782c:	2b00      	cmp	r3, #0
 800782e:	d103      	bne.n	8007838 <xQueueGenericSend+0x40>
 8007830:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007832:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007834:	2b00      	cmp	r3, #0
 8007836:	d101      	bne.n	800783c <xQueueGenericSend+0x44>
 8007838:	2301      	movs	r3, #1
 800783a:	e000      	b.n	800783e <xQueueGenericSend+0x46>
 800783c:	2300      	movs	r3, #0
 800783e:	2b00      	cmp	r3, #0
 8007840:	d10a      	bne.n	8007858 <xQueueGenericSend+0x60>
	__asm volatile
 8007842:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007846:	f383 8811 	msr	BASEPRI, r3
 800784a:	f3bf 8f6f 	isb	sy
 800784e:	f3bf 8f4f 	dsb	sy
 8007852:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007854:	bf00      	nop
 8007856:	e7fe      	b.n	8007856 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007858:	683b      	ldr	r3, [r7, #0]
 800785a:	2b02      	cmp	r3, #2
 800785c:	d103      	bne.n	8007866 <xQueueGenericSend+0x6e>
 800785e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007860:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007862:	2b01      	cmp	r3, #1
 8007864:	d101      	bne.n	800786a <xQueueGenericSend+0x72>
 8007866:	2301      	movs	r3, #1
 8007868:	e000      	b.n	800786c <xQueueGenericSend+0x74>
 800786a:	2300      	movs	r3, #0
 800786c:	2b00      	cmp	r3, #0
 800786e:	d10a      	bne.n	8007886 <xQueueGenericSend+0x8e>
	__asm volatile
 8007870:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007874:	f383 8811 	msr	BASEPRI, r3
 8007878:	f3bf 8f6f 	isb	sy
 800787c:	f3bf 8f4f 	dsb	sy
 8007880:	623b      	str	r3, [r7, #32]
}
 8007882:	bf00      	nop
 8007884:	e7fe      	b.n	8007884 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007886:	f001 f9b3 	bl	8008bf0 <xTaskGetSchedulerState>
 800788a:	4603      	mov	r3, r0
 800788c:	2b00      	cmp	r3, #0
 800788e:	d102      	bne.n	8007896 <xQueueGenericSend+0x9e>
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	2b00      	cmp	r3, #0
 8007894:	d101      	bne.n	800789a <xQueueGenericSend+0xa2>
 8007896:	2301      	movs	r3, #1
 8007898:	e000      	b.n	800789c <xQueueGenericSend+0xa4>
 800789a:	2300      	movs	r3, #0
 800789c:	2b00      	cmp	r3, #0
 800789e:	d10a      	bne.n	80078b6 <xQueueGenericSend+0xbe>
	__asm volatile
 80078a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078a4:	f383 8811 	msr	BASEPRI, r3
 80078a8:	f3bf 8f6f 	isb	sy
 80078ac:	f3bf 8f4f 	dsb	sy
 80078b0:	61fb      	str	r3, [r7, #28]
}
 80078b2:	bf00      	nop
 80078b4:	e7fe      	b.n	80078b4 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80078b6:	f001 ffad 	bl	8009814 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80078ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078bc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80078be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80078c2:	429a      	cmp	r2, r3
 80078c4:	d302      	bcc.n	80078cc <xQueueGenericSend+0xd4>
 80078c6:	683b      	ldr	r3, [r7, #0]
 80078c8:	2b02      	cmp	r3, #2
 80078ca:	d129      	bne.n	8007920 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80078cc:	683a      	ldr	r2, [r7, #0]
 80078ce:	68b9      	ldr	r1, [r7, #8]
 80078d0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80078d2:	f000 fa0b 	bl	8007cec <prvCopyDataToQueue>
 80078d6:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80078d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d010      	beq.n	8007902 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80078e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078e2:	3324      	adds	r3, #36	; 0x24
 80078e4:	4618      	mov	r0, r3
 80078e6:	f000 ffc1 	bl	800886c <xTaskRemoveFromEventList>
 80078ea:	4603      	mov	r3, r0
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d013      	beq.n	8007918 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80078f0:	4b3f      	ldr	r3, [pc, #252]	; (80079f0 <xQueueGenericSend+0x1f8>)
 80078f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80078f6:	601a      	str	r2, [r3, #0]
 80078f8:	f3bf 8f4f 	dsb	sy
 80078fc:	f3bf 8f6f 	isb	sy
 8007900:	e00a      	b.n	8007918 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8007902:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007904:	2b00      	cmp	r3, #0
 8007906:	d007      	beq.n	8007918 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8007908:	4b39      	ldr	r3, [pc, #228]	; (80079f0 <xQueueGenericSend+0x1f8>)
 800790a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800790e:	601a      	str	r2, [r3, #0]
 8007910:	f3bf 8f4f 	dsb	sy
 8007914:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8007918:	f001 ffac 	bl	8009874 <vPortExitCritical>
				return pdPASS;
 800791c:	2301      	movs	r3, #1
 800791e:	e063      	b.n	80079e8 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	2b00      	cmp	r3, #0
 8007924:	d103      	bne.n	800792e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007926:	f001 ffa5 	bl	8009874 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800792a:	2300      	movs	r3, #0
 800792c:	e05c      	b.n	80079e8 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800792e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007930:	2b00      	cmp	r3, #0
 8007932:	d106      	bne.n	8007942 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007934:	f107 0314 	add.w	r3, r7, #20
 8007938:	4618      	mov	r0, r3
 800793a:	f000 fffb 	bl	8008934 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800793e:	2301      	movs	r3, #1
 8007940:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007942:	f001 ff97 	bl	8009874 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007946:	f000 fd67 	bl	8008418 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800794a:	f001 ff63 	bl	8009814 <vPortEnterCritical>
 800794e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007950:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007954:	b25b      	sxtb	r3, r3
 8007956:	f1b3 3fff 	cmp.w	r3, #4294967295
 800795a:	d103      	bne.n	8007964 <xQueueGenericSend+0x16c>
 800795c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800795e:	2200      	movs	r2, #0
 8007960:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007964:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007966:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800796a:	b25b      	sxtb	r3, r3
 800796c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007970:	d103      	bne.n	800797a <xQueueGenericSend+0x182>
 8007972:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007974:	2200      	movs	r2, #0
 8007976:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800797a:	f001 ff7b 	bl	8009874 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800797e:	1d3a      	adds	r2, r7, #4
 8007980:	f107 0314 	add.w	r3, r7, #20
 8007984:	4611      	mov	r1, r2
 8007986:	4618      	mov	r0, r3
 8007988:	f000 ffea 	bl	8008960 <xTaskCheckForTimeOut>
 800798c:	4603      	mov	r3, r0
 800798e:	2b00      	cmp	r3, #0
 8007990:	d124      	bne.n	80079dc <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8007992:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007994:	f000 faa2 	bl	8007edc <prvIsQueueFull>
 8007998:	4603      	mov	r3, r0
 800799a:	2b00      	cmp	r3, #0
 800799c:	d018      	beq.n	80079d0 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800799e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079a0:	3310      	adds	r3, #16
 80079a2:	687a      	ldr	r2, [r7, #4]
 80079a4:	4611      	mov	r1, r2
 80079a6:	4618      	mov	r0, r3
 80079a8:	f000 ff10 	bl	80087cc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80079ac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80079ae:	f000 fa2d 	bl	8007e0c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80079b2:	f000 fd3f 	bl	8008434 <xTaskResumeAll>
 80079b6:	4603      	mov	r3, r0
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	f47f af7c 	bne.w	80078b6 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80079be:	4b0c      	ldr	r3, [pc, #48]	; (80079f0 <xQueueGenericSend+0x1f8>)
 80079c0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80079c4:	601a      	str	r2, [r3, #0]
 80079c6:	f3bf 8f4f 	dsb	sy
 80079ca:	f3bf 8f6f 	isb	sy
 80079ce:	e772      	b.n	80078b6 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80079d0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80079d2:	f000 fa1b 	bl	8007e0c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80079d6:	f000 fd2d 	bl	8008434 <xTaskResumeAll>
 80079da:	e76c      	b.n	80078b6 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80079dc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80079de:	f000 fa15 	bl	8007e0c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80079e2:	f000 fd27 	bl	8008434 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80079e6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80079e8:	4618      	mov	r0, r3
 80079ea:	3738      	adds	r7, #56	; 0x38
 80079ec:	46bd      	mov	sp, r7
 80079ee:	bd80      	pop	{r7, pc}
 80079f0:	e000ed04 	.word	0xe000ed04

080079f4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80079f4:	b580      	push	{r7, lr}
 80079f6:	b090      	sub	sp, #64	; 0x40
 80079f8:	af00      	add	r7, sp, #0
 80079fa:	60f8      	str	r0, [r7, #12]
 80079fc:	60b9      	str	r1, [r7, #8]
 80079fe:	607a      	str	r2, [r7, #4]
 8007a00:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8007a06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	d10a      	bne.n	8007a22 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8007a0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a10:	f383 8811 	msr	BASEPRI, r3
 8007a14:	f3bf 8f6f 	isb	sy
 8007a18:	f3bf 8f4f 	dsb	sy
 8007a1c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007a1e:	bf00      	nop
 8007a20:	e7fe      	b.n	8007a20 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007a22:	68bb      	ldr	r3, [r7, #8]
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	d103      	bne.n	8007a30 <xQueueGenericSendFromISR+0x3c>
 8007a28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	d101      	bne.n	8007a34 <xQueueGenericSendFromISR+0x40>
 8007a30:	2301      	movs	r3, #1
 8007a32:	e000      	b.n	8007a36 <xQueueGenericSendFromISR+0x42>
 8007a34:	2300      	movs	r3, #0
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d10a      	bne.n	8007a50 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8007a3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a3e:	f383 8811 	msr	BASEPRI, r3
 8007a42:	f3bf 8f6f 	isb	sy
 8007a46:	f3bf 8f4f 	dsb	sy
 8007a4a:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007a4c:	bf00      	nop
 8007a4e:	e7fe      	b.n	8007a4e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007a50:	683b      	ldr	r3, [r7, #0]
 8007a52:	2b02      	cmp	r3, #2
 8007a54:	d103      	bne.n	8007a5e <xQueueGenericSendFromISR+0x6a>
 8007a56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a5a:	2b01      	cmp	r3, #1
 8007a5c:	d101      	bne.n	8007a62 <xQueueGenericSendFromISR+0x6e>
 8007a5e:	2301      	movs	r3, #1
 8007a60:	e000      	b.n	8007a64 <xQueueGenericSendFromISR+0x70>
 8007a62:	2300      	movs	r3, #0
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d10a      	bne.n	8007a7e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8007a68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a6c:	f383 8811 	msr	BASEPRI, r3
 8007a70:	f3bf 8f6f 	isb	sy
 8007a74:	f3bf 8f4f 	dsb	sy
 8007a78:	623b      	str	r3, [r7, #32]
}
 8007a7a:	bf00      	nop
 8007a7c:	e7fe      	b.n	8007a7c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007a7e:	f001 ffab 	bl	80099d8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8007a82:	f3ef 8211 	mrs	r2, BASEPRI
 8007a86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a8a:	f383 8811 	msr	BASEPRI, r3
 8007a8e:	f3bf 8f6f 	isb	sy
 8007a92:	f3bf 8f4f 	dsb	sy
 8007a96:	61fa      	str	r2, [r7, #28]
 8007a98:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8007a9a:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007a9c:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007a9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007aa0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007aa2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007aa4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007aa6:	429a      	cmp	r2, r3
 8007aa8:	d302      	bcc.n	8007ab0 <xQueueGenericSendFromISR+0xbc>
 8007aaa:	683b      	ldr	r3, [r7, #0]
 8007aac:	2b02      	cmp	r3, #2
 8007aae:	d12f      	bne.n	8007b10 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007ab0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ab2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007ab6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007aba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007abc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007abe:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007ac0:	683a      	ldr	r2, [r7, #0]
 8007ac2:	68b9      	ldr	r1, [r7, #8]
 8007ac4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007ac6:	f000 f911 	bl	8007cec <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007aca:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8007ace:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ad2:	d112      	bne.n	8007afa <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007ad4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ad6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d016      	beq.n	8007b0a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007adc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ade:	3324      	adds	r3, #36	; 0x24
 8007ae0:	4618      	mov	r0, r3
 8007ae2:	f000 fec3 	bl	800886c <xTaskRemoveFromEventList>
 8007ae6:	4603      	mov	r3, r0
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d00e      	beq.n	8007b0a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d00b      	beq.n	8007b0a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	2201      	movs	r2, #1
 8007af6:	601a      	str	r2, [r3, #0]
 8007af8:	e007      	b.n	8007b0a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007afa:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8007afe:	3301      	adds	r3, #1
 8007b00:	b2db      	uxtb	r3, r3
 8007b02:	b25a      	sxtb	r2, r3
 8007b04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b06:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8007b0a:	2301      	movs	r3, #1
 8007b0c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8007b0e:	e001      	b.n	8007b14 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007b10:	2300      	movs	r3, #0
 8007b12:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007b14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b16:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007b18:	697b      	ldr	r3, [r7, #20]
 8007b1a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8007b1e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007b20:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8007b22:	4618      	mov	r0, r3
 8007b24:	3740      	adds	r7, #64	; 0x40
 8007b26:	46bd      	mov	sp, r7
 8007b28:	bd80      	pop	{r7, pc}
	...

08007b2c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8007b2c:	b580      	push	{r7, lr}
 8007b2e:	b08c      	sub	sp, #48	; 0x30
 8007b30:	af00      	add	r7, sp, #0
 8007b32:	60f8      	str	r0, [r7, #12]
 8007b34:	60b9      	str	r1, [r7, #8]
 8007b36:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8007b38:	2300      	movs	r3, #0
 8007b3a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007b40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	d10a      	bne.n	8007b5c <xQueueReceive+0x30>
	__asm volatile
 8007b46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b4a:	f383 8811 	msr	BASEPRI, r3
 8007b4e:	f3bf 8f6f 	isb	sy
 8007b52:	f3bf 8f4f 	dsb	sy
 8007b56:	623b      	str	r3, [r7, #32]
}
 8007b58:	bf00      	nop
 8007b5a:	e7fe      	b.n	8007b5a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007b5c:	68bb      	ldr	r3, [r7, #8]
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d103      	bne.n	8007b6a <xQueueReceive+0x3e>
 8007b62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d101      	bne.n	8007b6e <xQueueReceive+0x42>
 8007b6a:	2301      	movs	r3, #1
 8007b6c:	e000      	b.n	8007b70 <xQueueReceive+0x44>
 8007b6e:	2300      	movs	r3, #0
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d10a      	bne.n	8007b8a <xQueueReceive+0x5e>
	__asm volatile
 8007b74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b78:	f383 8811 	msr	BASEPRI, r3
 8007b7c:	f3bf 8f6f 	isb	sy
 8007b80:	f3bf 8f4f 	dsb	sy
 8007b84:	61fb      	str	r3, [r7, #28]
}
 8007b86:	bf00      	nop
 8007b88:	e7fe      	b.n	8007b88 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007b8a:	f001 f831 	bl	8008bf0 <xTaskGetSchedulerState>
 8007b8e:	4603      	mov	r3, r0
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	d102      	bne.n	8007b9a <xQueueReceive+0x6e>
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d101      	bne.n	8007b9e <xQueueReceive+0x72>
 8007b9a:	2301      	movs	r3, #1
 8007b9c:	e000      	b.n	8007ba0 <xQueueReceive+0x74>
 8007b9e:	2300      	movs	r3, #0
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d10a      	bne.n	8007bba <xQueueReceive+0x8e>
	__asm volatile
 8007ba4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ba8:	f383 8811 	msr	BASEPRI, r3
 8007bac:	f3bf 8f6f 	isb	sy
 8007bb0:	f3bf 8f4f 	dsb	sy
 8007bb4:	61bb      	str	r3, [r7, #24]
}
 8007bb6:	bf00      	nop
 8007bb8:	e7fe      	b.n	8007bb8 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007bba:	f001 fe2b 	bl	8009814 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007bbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bc2:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007bc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d01f      	beq.n	8007c0a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007bca:	68b9      	ldr	r1, [r7, #8]
 8007bcc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007bce:	f000 f8f7 	bl	8007dc0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007bd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bd4:	1e5a      	subs	r2, r3, #1
 8007bd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bd8:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007bda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bdc:	691b      	ldr	r3, [r3, #16]
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d00f      	beq.n	8007c02 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007be2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007be4:	3310      	adds	r3, #16
 8007be6:	4618      	mov	r0, r3
 8007be8:	f000 fe40 	bl	800886c <xTaskRemoveFromEventList>
 8007bec:	4603      	mov	r3, r0
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d007      	beq.n	8007c02 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007bf2:	4b3d      	ldr	r3, [pc, #244]	; (8007ce8 <xQueueReceive+0x1bc>)
 8007bf4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007bf8:	601a      	str	r2, [r3, #0]
 8007bfa:	f3bf 8f4f 	dsb	sy
 8007bfe:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007c02:	f001 fe37 	bl	8009874 <vPortExitCritical>
				return pdPASS;
 8007c06:	2301      	movs	r3, #1
 8007c08:	e069      	b.n	8007cde <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	d103      	bne.n	8007c18 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007c10:	f001 fe30 	bl	8009874 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007c14:	2300      	movs	r3, #0
 8007c16:	e062      	b.n	8007cde <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007c18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d106      	bne.n	8007c2c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007c1e:	f107 0310 	add.w	r3, r7, #16
 8007c22:	4618      	mov	r0, r3
 8007c24:	f000 fe86 	bl	8008934 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007c28:	2301      	movs	r3, #1
 8007c2a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007c2c:	f001 fe22 	bl	8009874 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007c30:	f000 fbf2 	bl	8008418 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007c34:	f001 fdee 	bl	8009814 <vPortEnterCritical>
 8007c38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c3a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007c3e:	b25b      	sxtb	r3, r3
 8007c40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c44:	d103      	bne.n	8007c4e <xQueueReceive+0x122>
 8007c46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c48:	2200      	movs	r2, #0
 8007c4a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007c4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c50:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007c54:	b25b      	sxtb	r3, r3
 8007c56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c5a:	d103      	bne.n	8007c64 <xQueueReceive+0x138>
 8007c5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c5e:	2200      	movs	r2, #0
 8007c60:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007c64:	f001 fe06 	bl	8009874 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007c68:	1d3a      	adds	r2, r7, #4
 8007c6a:	f107 0310 	add.w	r3, r7, #16
 8007c6e:	4611      	mov	r1, r2
 8007c70:	4618      	mov	r0, r3
 8007c72:	f000 fe75 	bl	8008960 <xTaskCheckForTimeOut>
 8007c76:	4603      	mov	r3, r0
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	d123      	bne.n	8007cc4 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007c7c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007c7e:	f000 f917 	bl	8007eb0 <prvIsQueueEmpty>
 8007c82:	4603      	mov	r3, r0
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	d017      	beq.n	8007cb8 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007c88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c8a:	3324      	adds	r3, #36	; 0x24
 8007c8c:	687a      	ldr	r2, [r7, #4]
 8007c8e:	4611      	mov	r1, r2
 8007c90:	4618      	mov	r0, r3
 8007c92:	f000 fd9b 	bl	80087cc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007c96:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007c98:	f000 f8b8 	bl	8007e0c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007c9c:	f000 fbca 	bl	8008434 <xTaskResumeAll>
 8007ca0:	4603      	mov	r3, r0
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	d189      	bne.n	8007bba <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8007ca6:	4b10      	ldr	r3, [pc, #64]	; (8007ce8 <xQueueReceive+0x1bc>)
 8007ca8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007cac:	601a      	str	r2, [r3, #0]
 8007cae:	f3bf 8f4f 	dsb	sy
 8007cb2:	f3bf 8f6f 	isb	sy
 8007cb6:	e780      	b.n	8007bba <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8007cb8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007cba:	f000 f8a7 	bl	8007e0c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007cbe:	f000 fbb9 	bl	8008434 <xTaskResumeAll>
 8007cc2:	e77a      	b.n	8007bba <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8007cc4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007cc6:	f000 f8a1 	bl	8007e0c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007cca:	f000 fbb3 	bl	8008434 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007cce:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007cd0:	f000 f8ee 	bl	8007eb0 <prvIsQueueEmpty>
 8007cd4:	4603      	mov	r3, r0
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	f43f af6f 	beq.w	8007bba <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007cdc:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007cde:	4618      	mov	r0, r3
 8007ce0:	3730      	adds	r7, #48	; 0x30
 8007ce2:	46bd      	mov	sp, r7
 8007ce4:	bd80      	pop	{r7, pc}
 8007ce6:	bf00      	nop
 8007ce8:	e000ed04 	.word	0xe000ed04

08007cec <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8007cec:	b580      	push	{r7, lr}
 8007cee:	b086      	sub	sp, #24
 8007cf0:	af00      	add	r7, sp, #0
 8007cf2:	60f8      	str	r0, [r7, #12]
 8007cf4:	60b9      	str	r1, [r7, #8]
 8007cf6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8007cf8:	2300      	movs	r3, #0
 8007cfa:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d00:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	d10d      	bne.n	8007d26 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d14d      	bne.n	8007dae <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	689b      	ldr	r3, [r3, #8]
 8007d16:	4618      	mov	r0, r3
 8007d18:	f000 ff88 	bl	8008c2c <xTaskPriorityDisinherit>
 8007d1c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	2200      	movs	r2, #0
 8007d22:	609a      	str	r2, [r3, #8]
 8007d24:	e043      	b.n	8007dae <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	d119      	bne.n	8007d60 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	6858      	ldr	r0, [r3, #4]
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d34:	461a      	mov	r2, r3
 8007d36:	68b9      	ldr	r1, [r7, #8]
 8007d38:	f002 f99b 	bl	800a072 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	685a      	ldr	r2, [r3, #4]
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d44:	441a      	add	r2, r3
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	685a      	ldr	r2, [r3, #4]
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	689b      	ldr	r3, [r3, #8]
 8007d52:	429a      	cmp	r2, r3
 8007d54:	d32b      	bcc.n	8007dae <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	681a      	ldr	r2, [r3, #0]
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	605a      	str	r2, [r3, #4]
 8007d5e:	e026      	b.n	8007dae <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	68d8      	ldr	r0, [r3, #12]
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d68:	461a      	mov	r2, r3
 8007d6a:	68b9      	ldr	r1, [r7, #8]
 8007d6c:	f002 f981 	bl	800a072 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	68da      	ldr	r2, [r3, #12]
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d78:	425b      	negs	r3, r3
 8007d7a:	441a      	add	r2, r3
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	68da      	ldr	r2, [r3, #12]
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	429a      	cmp	r2, r3
 8007d8a:	d207      	bcs.n	8007d9c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	689a      	ldr	r2, [r3, #8]
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d94:	425b      	negs	r3, r3
 8007d96:	441a      	add	r2, r3
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	2b02      	cmp	r3, #2
 8007da0:	d105      	bne.n	8007dae <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007da2:	693b      	ldr	r3, [r7, #16]
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d002      	beq.n	8007dae <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8007da8:	693b      	ldr	r3, [r7, #16]
 8007daa:	3b01      	subs	r3, #1
 8007dac:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007dae:	693b      	ldr	r3, [r7, #16]
 8007db0:	1c5a      	adds	r2, r3, #1
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8007db6:	697b      	ldr	r3, [r7, #20]
}
 8007db8:	4618      	mov	r0, r3
 8007dba:	3718      	adds	r7, #24
 8007dbc:	46bd      	mov	sp, r7
 8007dbe:	bd80      	pop	{r7, pc}

08007dc0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8007dc0:	b580      	push	{r7, lr}
 8007dc2:	b082      	sub	sp, #8
 8007dc4:	af00      	add	r7, sp, #0
 8007dc6:	6078      	str	r0, [r7, #4]
 8007dc8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d018      	beq.n	8007e04 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	68da      	ldr	r2, [r3, #12]
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007dda:	441a      	add	r2, r3
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	68da      	ldr	r2, [r3, #12]
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	689b      	ldr	r3, [r3, #8]
 8007de8:	429a      	cmp	r2, r3
 8007dea:	d303      	bcc.n	8007df4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	681a      	ldr	r2, [r3, #0]
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	68d9      	ldr	r1, [r3, #12]
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007dfc:	461a      	mov	r2, r3
 8007dfe:	6838      	ldr	r0, [r7, #0]
 8007e00:	f002 f937 	bl	800a072 <memcpy>
	}
}
 8007e04:	bf00      	nop
 8007e06:	3708      	adds	r7, #8
 8007e08:	46bd      	mov	sp, r7
 8007e0a:	bd80      	pop	{r7, pc}

08007e0c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8007e0c:	b580      	push	{r7, lr}
 8007e0e:	b084      	sub	sp, #16
 8007e10:	af00      	add	r7, sp, #0
 8007e12:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8007e14:	f001 fcfe 	bl	8009814 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007e1e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007e20:	e011      	b.n	8007e46 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d012      	beq.n	8007e50 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	3324      	adds	r3, #36	; 0x24
 8007e2e:	4618      	mov	r0, r3
 8007e30:	f000 fd1c 	bl	800886c <xTaskRemoveFromEventList>
 8007e34:	4603      	mov	r3, r0
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	d001      	beq.n	8007e3e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8007e3a:	f000 fdf3 	bl	8008a24 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8007e3e:	7bfb      	ldrb	r3, [r7, #15]
 8007e40:	3b01      	subs	r3, #1
 8007e42:	b2db      	uxtb	r3, r3
 8007e44:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007e46:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	dce9      	bgt.n	8007e22 <prvUnlockQueue+0x16>
 8007e4e:	e000      	b.n	8007e52 <prvUnlockQueue+0x46>
					break;
 8007e50:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	22ff      	movs	r2, #255	; 0xff
 8007e56:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8007e5a:	f001 fd0b 	bl	8009874 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8007e5e:	f001 fcd9 	bl	8009814 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007e68:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007e6a:	e011      	b.n	8007e90 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	691b      	ldr	r3, [r3, #16]
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	d012      	beq.n	8007e9a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	3310      	adds	r3, #16
 8007e78:	4618      	mov	r0, r3
 8007e7a:	f000 fcf7 	bl	800886c <xTaskRemoveFromEventList>
 8007e7e:	4603      	mov	r3, r0
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	d001      	beq.n	8007e88 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8007e84:	f000 fdce 	bl	8008a24 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8007e88:	7bbb      	ldrb	r3, [r7, #14]
 8007e8a:	3b01      	subs	r3, #1
 8007e8c:	b2db      	uxtb	r3, r3
 8007e8e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007e90:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	dce9      	bgt.n	8007e6c <prvUnlockQueue+0x60>
 8007e98:	e000      	b.n	8007e9c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8007e9a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	22ff      	movs	r2, #255	; 0xff
 8007ea0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8007ea4:	f001 fce6 	bl	8009874 <vPortExitCritical>
}
 8007ea8:	bf00      	nop
 8007eaa:	3710      	adds	r7, #16
 8007eac:	46bd      	mov	sp, r7
 8007eae:	bd80      	pop	{r7, pc}

08007eb0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007eb0:	b580      	push	{r7, lr}
 8007eb2:	b084      	sub	sp, #16
 8007eb4:	af00      	add	r7, sp, #0
 8007eb6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007eb8:	f001 fcac 	bl	8009814 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	d102      	bne.n	8007eca <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8007ec4:	2301      	movs	r3, #1
 8007ec6:	60fb      	str	r3, [r7, #12]
 8007ec8:	e001      	b.n	8007ece <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8007eca:	2300      	movs	r3, #0
 8007ecc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007ece:	f001 fcd1 	bl	8009874 <vPortExitCritical>

	return xReturn;
 8007ed2:	68fb      	ldr	r3, [r7, #12]
}
 8007ed4:	4618      	mov	r0, r3
 8007ed6:	3710      	adds	r7, #16
 8007ed8:	46bd      	mov	sp, r7
 8007eda:	bd80      	pop	{r7, pc}

08007edc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8007edc:	b580      	push	{r7, lr}
 8007ede:	b084      	sub	sp, #16
 8007ee0:	af00      	add	r7, sp, #0
 8007ee2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007ee4:	f001 fc96 	bl	8009814 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007ef0:	429a      	cmp	r2, r3
 8007ef2:	d102      	bne.n	8007efa <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8007ef4:	2301      	movs	r3, #1
 8007ef6:	60fb      	str	r3, [r7, #12]
 8007ef8:	e001      	b.n	8007efe <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8007efa:	2300      	movs	r3, #0
 8007efc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007efe:	f001 fcb9 	bl	8009874 <vPortExitCritical>

	return xReturn;
 8007f02:	68fb      	ldr	r3, [r7, #12]
}
 8007f04:	4618      	mov	r0, r3
 8007f06:	3710      	adds	r7, #16
 8007f08:	46bd      	mov	sp, r7
 8007f0a:	bd80      	pop	{r7, pc}

08007f0c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8007f0c:	b480      	push	{r7}
 8007f0e:	b085      	sub	sp, #20
 8007f10:	af00      	add	r7, sp, #0
 8007f12:	6078      	str	r0, [r7, #4]
 8007f14:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007f16:	2300      	movs	r3, #0
 8007f18:	60fb      	str	r3, [r7, #12]
 8007f1a:	e014      	b.n	8007f46 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8007f1c:	4a0f      	ldr	r2, [pc, #60]	; (8007f5c <vQueueAddToRegistry+0x50>)
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	d10b      	bne.n	8007f40 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8007f28:	490c      	ldr	r1, [pc, #48]	; (8007f5c <vQueueAddToRegistry+0x50>)
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	683a      	ldr	r2, [r7, #0]
 8007f2e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8007f32:	4a0a      	ldr	r2, [pc, #40]	; (8007f5c <vQueueAddToRegistry+0x50>)
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	00db      	lsls	r3, r3, #3
 8007f38:	4413      	add	r3, r2
 8007f3a:	687a      	ldr	r2, [r7, #4]
 8007f3c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8007f3e:	e006      	b.n	8007f4e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	3301      	adds	r3, #1
 8007f44:	60fb      	str	r3, [r7, #12]
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	2b07      	cmp	r3, #7
 8007f4a:	d9e7      	bls.n	8007f1c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8007f4c:	bf00      	nop
 8007f4e:	bf00      	nop
 8007f50:	3714      	adds	r7, #20
 8007f52:	46bd      	mov	sp, r7
 8007f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f58:	4770      	bx	lr
 8007f5a:	bf00      	nop
 8007f5c:	20001fb0 	.word	0x20001fb0

08007f60 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007f60:	b580      	push	{r7, lr}
 8007f62:	b086      	sub	sp, #24
 8007f64:	af00      	add	r7, sp, #0
 8007f66:	60f8      	str	r0, [r7, #12]
 8007f68:	60b9      	str	r1, [r7, #8]
 8007f6a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8007f70:	f001 fc50 	bl	8009814 <vPortEnterCritical>
 8007f74:	697b      	ldr	r3, [r7, #20]
 8007f76:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007f7a:	b25b      	sxtb	r3, r3
 8007f7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f80:	d103      	bne.n	8007f8a <vQueueWaitForMessageRestricted+0x2a>
 8007f82:	697b      	ldr	r3, [r7, #20]
 8007f84:	2200      	movs	r2, #0
 8007f86:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007f8a:	697b      	ldr	r3, [r7, #20]
 8007f8c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007f90:	b25b      	sxtb	r3, r3
 8007f92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f96:	d103      	bne.n	8007fa0 <vQueueWaitForMessageRestricted+0x40>
 8007f98:	697b      	ldr	r3, [r7, #20]
 8007f9a:	2200      	movs	r2, #0
 8007f9c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007fa0:	f001 fc68 	bl	8009874 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8007fa4:	697b      	ldr	r3, [r7, #20]
 8007fa6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d106      	bne.n	8007fba <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8007fac:	697b      	ldr	r3, [r7, #20]
 8007fae:	3324      	adds	r3, #36	; 0x24
 8007fb0:	687a      	ldr	r2, [r7, #4]
 8007fb2:	68b9      	ldr	r1, [r7, #8]
 8007fb4:	4618      	mov	r0, r3
 8007fb6:	f000 fc2d 	bl	8008814 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8007fba:	6978      	ldr	r0, [r7, #20]
 8007fbc:	f7ff ff26 	bl	8007e0c <prvUnlockQueue>
	}
 8007fc0:	bf00      	nop
 8007fc2:	3718      	adds	r7, #24
 8007fc4:	46bd      	mov	sp, r7
 8007fc6:	bd80      	pop	{r7, pc}

08007fc8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007fc8:	b580      	push	{r7, lr}
 8007fca:	b08e      	sub	sp, #56	; 0x38
 8007fcc:	af04      	add	r7, sp, #16
 8007fce:	60f8      	str	r0, [r7, #12]
 8007fd0:	60b9      	str	r1, [r7, #8]
 8007fd2:	607a      	str	r2, [r7, #4]
 8007fd4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8007fd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	d10a      	bne.n	8007ff2 <xTaskCreateStatic+0x2a>
	__asm volatile
 8007fdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fe0:	f383 8811 	msr	BASEPRI, r3
 8007fe4:	f3bf 8f6f 	isb	sy
 8007fe8:	f3bf 8f4f 	dsb	sy
 8007fec:	623b      	str	r3, [r7, #32]
}
 8007fee:	bf00      	nop
 8007ff0:	e7fe      	b.n	8007ff0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8007ff2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	d10a      	bne.n	800800e <xTaskCreateStatic+0x46>
	__asm volatile
 8007ff8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ffc:	f383 8811 	msr	BASEPRI, r3
 8008000:	f3bf 8f6f 	isb	sy
 8008004:	f3bf 8f4f 	dsb	sy
 8008008:	61fb      	str	r3, [r7, #28]
}
 800800a:	bf00      	nop
 800800c:	e7fe      	b.n	800800c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800800e:	23bc      	movs	r3, #188	; 0xbc
 8008010:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8008012:	693b      	ldr	r3, [r7, #16]
 8008014:	2bbc      	cmp	r3, #188	; 0xbc
 8008016:	d00a      	beq.n	800802e <xTaskCreateStatic+0x66>
	__asm volatile
 8008018:	f04f 0350 	mov.w	r3, #80	; 0x50
 800801c:	f383 8811 	msr	BASEPRI, r3
 8008020:	f3bf 8f6f 	isb	sy
 8008024:	f3bf 8f4f 	dsb	sy
 8008028:	61bb      	str	r3, [r7, #24]
}
 800802a:	bf00      	nop
 800802c:	e7fe      	b.n	800802c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800802e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8008030:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008032:	2b00      	cmp	r3, #0
 8008034:	d01e      	beq.n	8008074 <xTaskCreateStatic+0xac>
 8008036:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008038:	2b00      	cmp	r3, #0
 800803a:	d01b      	beq.n	8008074 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800803c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800803e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008040:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008042:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008044:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8008046:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008048:	2202      	movs	r2, #2
 800804a:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800804e:	2300      	movs	r3, #0
 8008050:	9303      	str	r3, [sp, #12]
 8008052:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008054:	9302      	str	r3, [sp, #8]
 8008056:	f107 0314 	add.w	r3, r7, #20
 800805a:	9301      	str	r3, [sp, #4]
 800805c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800805e:	9300      	str	r3, [sp, #0]
 8008060:	683b      	ldr	r3, [r7, #0]
 8008062:	687a      	ldr	r2, [r7, #4]
 8008064:	68b9      	ldr	r1, [r7, #8]
 8008066:	68f8      	ldr	r0, [r7, #12]
 8008068:	f000 f850 	bl	800810c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800806c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800806e:	f000 f8f3 	bl	8008258 <prvAddNewTaskToReadyList>
 8008072:	e001      	b.n	8008078 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8008074:	2300      	movs	r3, #0
 8008076:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8008078:	697b      	ldr	r3, [r7, #20]
	}
 800807a:	4618      	mov	r0, r3
 800807c:	3728      	adds	r7, #40	; 0x28
 800807e:	46bd      	mov	sp, r7
 8008080:	bd80      	pop	{r7, pc}

08008082 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8008082:	b580      	push	{r7, lr}
 8008084:	b08c      	sub	sp, #48	; 0x30
 8008086:	af04      	add	r7, sp, #16
 8008088:	60f8      	str	r0, [r7, #12]
 800808a:	60b9      	str	r1, [r7, #8]
 800808c:	603b      	str	r3, [r7, #0]
 800808e:	4613      	mov	r3, r2
 8008090:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8008092:	88fb      	ldrh	r3, [r7, #6]
 8008094:	009b      	lsls	r3, r3, #2
 8008096:	4618      	mov	r0, r3
 8008098:	f001 fcde 	bl	8009a58 <pvPortMalloc>
 800809c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800809e:	697b      	ldr	r3, [r7, #20]
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	d00e      	beq.n	80080c2 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80080a4:	20bc      	movs	r0, #188	; 0xbc
 80080a6:	f001 fcd7 	bl	8009a58 <pvPortMalloc>
 80080aa:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80080ac:	69fb      	ldr	r3, [r7, #28]
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d003      	beq.n	80080ba <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80080b2:	69fb      	ldr	r3, [r7, #28]
 80080b4:	697a      	ldr	r2, [r7, #20]
 80080b6:	631a      	str	r2, [r3, #48]	; 0x30
 80080b8:	e005      	b.n	80080c6 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80080ba:	6978      	ldr	r0, [r7, #20]
 80080bc:	f001 fd98 	bl	8009bf0 <vPortFree>
 80080c0:	e001      	b.n	80080c6 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80080c2:	2300      	movs	r3, #0
 80080c4:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80080c6:	69fb      	ldr	r3, [r7, #28]
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	d017      	beq.n	80080fc <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80080cc:	69fb      	ldr	r3, [r7, #28]
 80080ce:	2200      	movs	r2, #0
 80080d0:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80080d4:	88fa      	ldrh	r2, [r7, #6]
 80080d6:	2300      	movs	r3, #0
 80080d8:	9303      	str	r3, [sp, #12]
 80080da:	69fb      	ldr	r3, [r7, #28]
 80080dc:	9302      	str	r3, [sp, #8]
 80080de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080e0:	9301      	str	r3, [sp, #4]
 80080e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080e4:	9300      	str	r3, [sp, #0]
 80080e6:	683b      	ldr	r3, [r7, #0]
 80080e8:	68b9      	ldr	r1, [r7, #8]
 80080ea:	68f8      	ldr	r0, [r7, #12]
 80080ec:	f000 f80e 	bl	800810c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80080f0:	69f8      	ldr	r0, [r7, #28]
 80080f2:	f000 f8b1 	bl	8008258 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80080f6:	2301      	movs	r3, #1
 80080f8:	61bb      	str	r3, [r7, #24]
 80080fa:	e002      	b.n	8008102 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80080fc:	f04f 33ff 	mov.w	r3, #4294967295
 8008100:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8008102:	69bb      	ldr	r3, [r7, #24]
	}
 8008104:	4618      	mov	r0, r3
 8008106:	3720      	adds	r7, #32
 8008108:	46bd      	mov	sp, r7
 800810a:	bd80      	pop	{r7, pc}

0800810c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800810c:	b580      	push	{r7, lr}
 800810e:	b088      	sub	sp, #32
 8008110:	af00      	add	r7, sp, #0
 8008112:	60f8      	str	r0, [r7, #12]
 8008114:	60b9      	str	r1, [r7, #8]
 8008116:	607a      	str	r2, [r7, #4]
 8008118:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800811a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800811c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	009b      	lsls	r3, r3, #2
 8008122:	461a      	mov	r2, r3
 8008124:	21a5      	movs	r1, #165	; 0xa5
 8008126:	f001 ffb2 	bl	800a08e <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800812a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800812c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8008134:	3b01      	subs	r3, #1
 8008136:	009b      	lsls	r3, r3, #2
 8008138:	4413      	add	r3, r2
 800813a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800813c:	69bb      	ldr	r3, [r7, #24]
 800813e:	f023 0307 	bic.w	r3, r3, #7
 8008142:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008144:	69bb      	ldr	r3, [r7, #24]
 8008146:	f003 0307 	and.w	r3, r3, #7
 800814a:	2b00      	cmp	r3, #0
 800814c:	d00a      	beq.n	8008164 <prvInitialiseNewTask+0x58>
	__asm volatile
 800814e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008152:	f383 8811 	msr	BASEPRI, r3
 8008156:	f3bf 8f6f 	isb	sy
 800815a:	f3bf 8f4f 	dsb	sy
 800815e:	617b      	str	r3, [r7, #20]
}
 8008160:	bf00      	nop
 8008162:	e7fe      	b.n	8008162 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8008164:	68bb      	ldr	r3, [r7, #8]
 8008166:	2b00      	cmp	r3, #0
 8008168:	d01f      	beq.n	80081aa <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800816a:	2300      	movs	r3, #0
 800816c:	61fb      	str	r3, [r7, #28]
 800816e:	e012      	b.n	8008196 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008170:	68ba      	ldr	r2, [r7, #8]
 8008172:	69fb      	ldr	r3, [r7, #28]
 8008174:	4413      	add	r3, r2
 8008176:	7819      	ldrb	r1, [r3, #0]
 8008178:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800817a:	69fb      	ldr	r3, [r7, #28]
 800817c:	4413      	add	r3, r2
 800817e:	3334      	adds	r3, #52	; 0x34
 8008180:	460a      	mov	r2, r1
 8008182:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8008184:	68ba      	ldr	r2, [r7, #8]
 8008186:	69fb      	ldr	r3, [r7, #28]
 8008188:	4413      	add	r3, r2
 800818a:	781b      	ldrb	r3, [r3, #0]
 800818c:	2b00      	cmp	r3, #0
 800818e:	d006      	beq.n	800819e <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008190:	69fb      	ldr	r3, [r7, #28]
 8008192:	3301      	adds	r3, #1
 8008194:	61fb      	str	r3, [r7, #28]
 8008196:	69fb      	ldr	r3, [r7, #28]
 8008198:	2b0f      	cmp	r3, #15
 800819a:	d9e9      	bls.n	8008170 <prvInitialiseNewTask+0x64>
 800819c:	e000      	b.n	80081a0 <prvInitialiseNewTask+0x94>
			{
				break;
 800819e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80081a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081a2:	2200      	movs	r2, #0
 80081a4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80081a8:	e003      	b.n	80081b2 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80081aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081ac:	2200      	movs	r2, #0
 80081ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80081b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081b4:	2b37      	cmp	r3, #55	; 0x37
 80081b6:	d901      	bls.n	80081bc <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80081b8:	2337      	movs	r3, #55	; 0x37
 80081ba:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80081bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081be:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80081c0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80081c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081c4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80081c6:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80081c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081ca:	2200      	movs	r2, #0
 80081cc:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80081ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081d0:	3304      	adds	r3, #4
 80081d2:	4618      	mov	r0, r3
 80081d4:	f7ff f978 	bl	80074c8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80081d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081da:	3318      	adds	r3, #24
 80081dc:	4618      	mov	r0, r3
 80081de:	f7ff f973 	bl	80074c8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80081e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80081e6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80081e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081ea:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80081ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081f0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80081f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80081f6:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80081f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081fa:	2200      	movs	r2, #0
 80081fc:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008200:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008202:	2200      	movs	r2, #0
 8008204:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8008208:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800820a:	3354      	adds	r3, #84	; 0x54
 800820c:	2260      	movs	r2, #96	; 0x60
 800820e:	2100      	movs	r1, #0
 8008210:	4618      	mov	r0, r3
 8008212:	f001 ff3c 	bl	800a08e <memset>
 8008216:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008218:	4a0c      	ldr	r2, [pc, #48]	; (800824c <prvInitialiseNewTask+0x140>)
 800821a:	659a      	str	r2, [r3, #88]	; 0x58
 800821c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800821e:	4a0c      	ldr	r2, [pc, #48]	; (8008250 <prvInitialiseNewTask+0x144>)
 8008220:	65da      	str	r2, [r3, #92]	; 0x5c
 8008222:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008224:	4a0b      	ldr	r2, [pc, #44]	; (8008254 <prvInitialiseNewTask+0x148>)
 8008226:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008228:	683a      	ldr	r2, [r7, #0]
 800822a:	68f9      	ldr	r1, [r7, #12]
 800822c:	69b8      	ldr	r0, [r7, #24]
 800822e:	f001 f9c7 	bl	80095c0 <pxPortInitialiseStack>
 8008232:	4602      	mov	r2, r0
 8008234:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008236:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8008238:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800823a:	2b00      	cmp	r3, #0
 800823c:	d002      	beq.n	8008244 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800823e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008240:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008242:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008244:	bf00      	nop
 8008246:	3720      	adds	r7, #32
 8008248:	46bd      	mov	sp, r7
 800824a:	bd80      	pop	{r7, pc}
 800824c:	0800c0d8 	.word	0x0800c0d8
 8008250:	0800c0f8 	.word	0x0800c0f8
 8008254:	0800c0b8 	.word	0x0800c0b8

08008258 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008258:	b580      	push	{r7, lr}
 800825a:	b082      	sub	sp, #8
 800825c:	af00      	add	r7, sp, #0
 800825e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008260:	f001 fad8 	bl	8009814 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008264:	4b2d      	ldr	r3, [pc, #180]	; (800831c <prvAddNewTaskToReadyList+0xc4>)
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	3301      	adds	r3, #1
 800826a:	4a2c      	ldr	r2, [pc, #176]	; (800831c <prvAddNewTaskToReadyList+0xc4>)
 800826c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800826e:	4b2c      	ldr	r3, [pc, #176]	; (8008320 <prvAddNewTaskToReadyList+0xc8>)
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	2b00      	cmp	r3, #0
 8008274:	d109      	bne.n	800828a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8008276:	4a2a      	ldr	r2, [pc, #168]	; (8008320 <prvAddNewTaskToReadyList+0xc8>)
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800827c:	4b27      	ldr	r3, [pc, #156]	; (800831c <prvAddNewTaskToReadyList+0xc4>)
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	2b01      	cmp	r3, #1
 8008282:	d110      	bne.n	80082a6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008284:	f000 fbf2 	bl	8008a6c <prvInitialiseTaskLists>
 8008288:	e00d      	b.n	80082a6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800828a:	4b26      	ldr	r3, [pc, #152]	; (8008324 <prvAddNewTaskToReadyList+0xcc>)
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	2b00      	cmp	r3, #0
 8008290:	d109      	bne.n	80082a6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008292:	4b23      	ldr	r3, [pc, #140]	; (8008320 <prvAddNewTaskToReadyList+0xc8>)
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800829c:	429a      	cmp	r2, r3
 800829e:	d802      	bhi.n	80082a6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80082a0:	4a1f      	ldr	r2, [pc, #124]	; (8008320 <prvAddNewTaskToReadyList+0xc8>)
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80082a6:	4b20      	ldr	r3, [pc, #128]	; (8008328 <prvAddNewTaskToReadyList+0xd0>)
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	3301      	adds	r3, #1
 80082ac:	4a1e      	ldr	r2, [pc, #120]	; (8008328 <prvAddNewTaskToReadyList+0xd0>)
 80082ae:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80082b0:	4b1d      	ldr	r3, [pc, #116]	; (8008328 <prvAddNewTaskToReadyList+0xd0>)
 80082b2:	681a      	ldr	r2, [r3, #0]
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80082bc:	4b1b      	ldr	r3, [pc, #108]	; (800832c <prvAddNewTaskToReadyList+0xd4>)
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	429a      	cmp	r2, r3
 80082c2:	d903      	bls.n	80082cc <prvAddNewTaskToReadyList+0x74>
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082c8:	4a18      	ldr	r2, [pc, #96]	; (800832c <prvAddNewTaskToReadyList+0xd4>)
 80082ca:	6013      	str	r3, [r2, #0]
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80082d0:	4613      	mov	r3, r2
 80082d2:	009b      	lsls	r3, r3, #2
 80082d4:	4413      	add	r3, r2
 80082d6:	009b      	lsls	r3, r3, #2
 80082d8:	4a15      	ldr	r2, [pc, #84]	; (8008330 <prvAddNewTaskToReadyList+0xd8>)
 80082da:	441a      	add	r2, r3
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	3304      	adds	r3, #4
 80082e0:	4619      	mov	r1, r3
 80082e2:	4610      	mov	r0, r2
 80082e4:	f7ff f8fd 	bl	80074e2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80082e8:	f001 fac4 	bl	8009874 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80082ec:	4b0d      	ldr	r3, [pc, #52]	; (8008324 <prvAddNewTaskToReadyList+0xcc>)
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	d00e      	beq.n	8008312 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80082f4:	4b0a      	ldr	r3, [pc, #40]	; (8008320 <prvAddNewTaskToReadyList+0xc8>)
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082fe:	429a      	cmp	r2, r3
 8008300:	d207      	bcs.n	8008312 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8008302:	4b0c      	ldr	r3, [pc, #48]	; (8008334 <prvAddNewTaskToReadyList+0xdc>)
 8008304:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008308:	601a      	str	r2, [r3, #0]
 800830a:	f3bf 8f4f 	dsb	sy
 800830e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008312:	bf00      	nop
 8008314:	3708      	adds	r7, #8
 8008316:	46bd      	mov	sp, r7
 8008318:	bd80      	pop	{r7, pc}
 800831a:	bf00      	nop
 800831c:	200024c4 	.word	0x200024c4
 8008320:	20001ff0 	.word	0x20001ff0
 8008324:	200024d0 	.word	0x200024d0
 8008328:	200024e0 	.word	0x200024e0
 800832c:	200024cc 	.word	0x200024cc
 8008330:	20001ff4 	.word	0x20001ff4
 8008334:	e000ed04 	.word	0xe000ed04

08008338 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008338:	b580      	push	{r7, lr}
 800833a:	b08a      	sub	sp, #40	; 0x28
 800833c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800833e:	2300      	movs	r3, #0
 8008340:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8008342:	2300      	movs	r3, #0
 8008344:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8008346:	463a      	mov	r2, r7
 8008348:	1d39      	adds	r1, r7, #4
 800834a:	f107 0308 	add.w	r3, r7, #8
 800834e:	4618      	mov	r0, r3
 8008350:	f7ff f866 	bl	8007420 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008354:	6839      	ldr	r1, [r7, #0]
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	68ba      	ldr	r2, [r7, #8]
 800835a:	9202      	str	r2, [sp, #8]
 800835c:	9301      	str	r3, [sp, #4]
 800835e:	2300      	movs	r3, #0
 8008360:	9300      	str	r3, [sp, #0]
 8008362:	2300      	movs	r3, #0
 8008364:	460a      	mov	r2, r1
 8008366:	4924      	ldr	r1, [pc, #144]	; (80083f8 <vTaskStartScheduler+0xc0>)
 8008368:	4824      	ldr	r0, [pc, #144]	; (80083fc <vTaskStartScheduler+0xc4>)
 800836a:	f7ff fe2d 	bl	8007fc8 <xTaskCreateStatic>
 800836e:	4603      	mov	r3, r0
 8008370:	4a23      	ldr	r2, [pc, #140]	; (8008400 <vTaskStartScheduler+0xc8>)
 8008372:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8008374:	4b22      	ldr	r3, [pc, #136]	; (8008400 <vTaskStartScheduler+0xc8>)
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	2b00      	cmp	r3, #0
 800837a:	d002      	beq.n	8008382 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800837c:	2301      	movs	r3, #1
 800837e:	617b      	str	r3, [r7, #20]
 8008380:	e001      	b.n	8008386 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8008382:	2300      	movs	r3, #0
 8008384:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8008386:	697b      	ldr	r3, [r7, #20]
 8008388:	2b01      	cmp	r3, #1
 800838a:	d102      	bne.n	8008392 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800838c:	f000 fd10 	bl	8008db0 <xTimerCreateTimerTask>
 8008390:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8008392:	697b      	ldr	r3, [r7, #20]
 8008394:	2b01      	cmp	r3, #1
 8008396:	d11b      	bne.n	80083d0 <vTaskStartScheduler+0x98>
	__asm volatile
 8008398:	f04f 0350 	mov.w	r3, #80	; 0x50
 800839c:	f383 8811 	msr	BASEPRI, r3
 80083a0:	f3bf 8f6f 	isb	sy
 80083a4:	f3bf 8f4f 	dsb	sy
 80083a8:	613b      	str	r3, [r7, #16]
}
 80083aa:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80083ac:	4b15      	ldr	r3, [pc, #84]	; (8008404 <vTaskStartScheduler+0xcc>)
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	3354      	adds	r3, #84	; 0x54
 80083b2:	4a15      	ldr	r2, [pc, #84]	; (8008408 <vTaskStartScheduler+0xd0>)
 80083b4:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80083b6:	4b15      	ldr	r3, [pc, #84]	; (800840c <vTaskStartScheduler+0xd4>)
 80083b8:	f04f 32ff 	mov.w	r2, #4294967295
 80083bc:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80083be:	4b14      	ldr	r3, [pc, #80]	; (8008410 <vTaskStartScheduler+0xd8>)
 80083c0:	2201      	movs	r2, #1
 80083c2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80083c4:	4b13      	ldr	r3, [pc, #76]	; (8008414 <vTaskStartScheduler+0xdc>)
 80083c6:	2200      	movs	r2, #0
 80083c8:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80083ca:	f001 f981 	bl	80096d0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80083ce:	e00e      	b.n	80083ee <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80083d0:	697b      	ldr	r3, [r7, #20]
 80083d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80083d6:	d10a      	bne.n	80083ee <vTaskStartScheduler+0xb6>
	__asm volatile
 80083d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083dc:	f383 8811 	msr	BASEPRI, r3
 80083e0:	f3bf 8f6f 	isb	sy
 80083e4:	f3bf 8f4f 	dsb	sy
 80083e8:	60fb      	str	r3, [r7, #12]
}
 80083ea:	bf00      	nop
 80083ec:	e7fe      	b.n	80083ec <vTaskStartScheduler+0xb4>
}
 80083ee:	bf00      	nop
 80083f0:	3718      	adds	r7, #24
 80083f2:	46bd      	mov	sp, r7
 80083f4:	bd80      	pop	{r7, pc}
 80083f6:	bf00      	nop
 80083f8:	0800c024 	.word	0x0800c024
 80083fc:	08008a3d 	.word	0x08008a3d
 8008400:	200024e8 	.word	0x200024e8
 8008404:	20001ff0 	.word	0x20001ff0
 8008408:	20000010 	.word	0x20000010
 800840c:	200024e4 	.word	0x200024e4
 8008410:	200024d0 	.word	0x200024d0
 8008414:	200024c8 	.word	0x200024c8

08008418 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008418:	b480      	push	{r7}
 800841a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800841c:	4b04      	ldr	r3, [pc, #16]	; (8008430 <vTaskSuspendAll+0x18>)
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	3301      	adds	r3, #1
 8008422:	4a03      	ldr	r2, [pc, #12]	; (8008430 <vTaskSuspendAll+0x18>)
 8008424:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8008426:	bf00      	nop
 8008428:	46bd      	mov	sp, r7
 800842a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800842e:	4770      	bx	lr
 8008430:	200024ec 	.word	0x200024ec

08008434 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008434:	b580      	push	{r7, lr}
 8008436:	b084      	sub	sp, #16
 8008438:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800843a:	2300      	movs	r3, #0
 800843c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800843e:	2300      	movs	r3, #0
 8008440:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8008442:	4b42      	ldr	r3, [pc, #264]	; (800854c <xTaskResumeAll+0x118>)
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	2b00      	cmp	r3, #0
 8008448:	d10a      	bne.n	8008460 <xTaskResumeAll+0x2c>
	__asm volatile
 800844a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800844e:	f383 8811 	msr	BASEPRI, r3
 8008452:	f3bf 8f6f 	isb	sy
 8008456:	f3bf 8f4f 	dsb	sy
 800845a:	603b      	str	r3, [r7, #0]
}
 800845c:	bf00      	nop
 800845e:	e7fe      	b.n	800845e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008460:	f001 f9d8 	bl	8009814 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8008464:	4b39      	ldr	r3, [pc, #228]	; (800854c <xTaskResumeAll+0x118>)
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	3b01      	subs	r3, #1
 800846a:	4a38      	ldr	r2, [pc, #224]	; (800854c <xTaskResumeAll+0x118>)
 800846c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800846e:	4b37      	ldr	r3, [pc, #220]	; (800854c <xTaskResumeAll+0x118>)
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	2b00      	cmp	r3, #0
 8008474:	d162      	bne.n	800853c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008476:	4b36      	ldr	r3, [pc, #216]	; (8008550 <xTaskResumeAll+0x11c>)
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	2b00      	cmp	r3, #0
 800847c:	d05e      	beq.n	800853c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800847e:	e02f      	b.n	80084e0 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008480:	4b34      	ldr	r3, [pc, #208]	; (8008554 <xTaskResumeAll+0x120>)
 8008482:	68db      	ldr	r3, [r3, #12]
 8008484:	68db      	ldr	r3, [r3, #12]
 8008486:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008488:	68fb      	ldr	r3, [r7, #12]
 800848a:	3318      	adds	r3, #24
 800848c:	4618      	mov	r0, r3
 800848e:	f7ff f885 	bl	800759c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008492:	68fb      	ldr	r3, [r7, #12]
 8008494:	3304      	adds	r3, #4
 8008496:	4618      	mov	r0, r3
 8008498:	f7ff f880 	bl	800759c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800849c:	68fb      	ldr	r3, [r7, #12]
 800849e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80084a0:	4b2d      	ldr	r3, [pc, #180]	; (8008558 <xTaskResumeAll+0x124>)
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	429a      	cmp	r2, r3
 80084a6:	d903      	bls.n	80084b0 <xTaskResumeAll+0x7c>
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084ac:	4a2a      	ldr	r2, [pc, #168]	; (8008558 <xTaskResumeAll+0x124>)
 80084ae:	6013      	str	r3, [r2, #0]
 80084b0:	68fb      	ldr	r3, [r7, #12]
 80084b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80084b4:	4613      	mov	r3, r2
 80084b6:	009b      	lsls	r3, r3, #2
 80084b8:	4413      	add	r3, r2
 80084ba:	009b      	lsls	r3, r3, #2
 80084bc:	4a27      	ldr	r2, [pc, #156]	; (800855c <xTaskResumeAll+0x128>)
 80084be:	441a      	add	r2, r3
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	3304      	adds	r3, #4
 80084c4:	4619      	mov	r1, r3
 80084c6:	4610      	mov	r0, r2
 80084c8:	f7ff f80b 	bl	80074e2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80084cc:	68fb      	ldr	r3, [r7, #12]
 80084ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80084d0:	4b23      	ldr	r3, [pc, #140]	; (8008560 <xTaskResumeAll+0x12c>)
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084d6:	429a      	cmp	r2, r3
 80084d8:	d302      	bcc.n	80084e0 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80084da:	4b22      	ldr	r3, [pc, #136]	; (8008564 <xTaskResumeAll+0x130>)
 80084dc:	2201      	movs	r2, #1
 80084de:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80084e0:	4b1c      	ldr	r3, [pc, #112]	; (8008554 <xTaskResumeAll+0x120>)
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	d1cb      	bne.n	8008480 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80084e8:	68fb      	ldr	r3, [r7, #12]
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	d001      	beq.n	80084f2 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80084ee:	f000 fb5f 	bl	8008bb0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80084f2:	4b1d      	ldr	r3, [pc, #116]	; (8008568 <xTaskResumeAll+0x134>)
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	d010      	beq.n	8008520 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80084fe:	f000 f847 	bl	8008590 <xTaskIncrementTick>
 8008502:	4603      	mov	r3, r0
 8008504:	2b00      	cmp	r3, #0
 8008506:	d002      	beq.n	800850e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8008508:	4b16      	ldr	r3, [pc, #88]	; (8008564 <xTaskResumeAll+0x130>)
 800850a:	2201      	movs	r2, #1
 800850c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	3b01      	subs	r3, #1
 8008512:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	2b00      	cmp	r3, #0
 8008518:	d1f1      	bne.n	80084fe <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800851a:	4b13      	ldr	r3, [pc, #76]	; (8008568 <xTaskResumeAll+0x134>)
 800851c:	2200      	movs	r2, #0
 800851e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008520:	4b10      	ldr	r3, [pc, #64]	; (8008564 <xTaskResumeAll+0x130>)
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	2b00      	cmp	r3, #0
 8008526:	d009      	beq.n	800853c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8008528:	2301      	movs	r3, #1
 800852a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800852c:	4b0f      	ldr	r3, [pc, #60]	; (800856c <xTaskResumeAll+0x138>)
 800852e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008532:	601a      	str	r2, [r3, #0]
 8008534:	f3bf 8f4f 	dsb	sy
 8008538:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800853c:	f001 f99a 	bl	8009874 <vPortExitCritical>

	return xAlreadyYielded;
 8008540:	68bb      	ldr	r3, [r7, #8]
}
 8008542:	4618      	mov	r0, r3
 8008544:	3710      	adds	r7, #16
 8008546:	46bd      	mov	sp, r7
 8008548:	bd80      	pop	{r7, pc}
 800854a:	bf00      	nop
 800854c:	200024ec 	.word	0x200024ec
 8008550:	200024c4 	.word	0x200024c4
 8008554:	20002484 	.word	0x20002484
 8008558:	200024cc 	.word	0x200024cc
 800855c:	20001ff4 	.word	0x20001ff4
 8008560:	20001ff0 	.word	0x20001ff0
 8008564:	200024d8 	.word	0x200024d8
 8008568:	200024d4 	.word	0x200024d4
 800856c:	e000ed04 	.word	0xe000ed04

08008570 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8008570:	b480      	push	{r7}
 8008572:	b083      	sub	sp, #12
 8008574:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8008576:	4b05      	ldr	r3, [pc, #20]	; (800858c <xTaskGetTickCount+0x1c>)
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800857c:	687b      	ldr	r3, [r7, #4]
}
 800857e:	4618      	mov	r0, r3
 8008580:	370c      	adds	r7, #12
 8008582:	46bd      	mov	sp, r7
 8008584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008588:	4770      	bx	lr
 800858a:	bf00      	nop
 800858c:	200024c8 	.word	0x200024c8

08008590 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008590:	b580      	push	{r7, lr}
 8008592:	b086      	sub	sp, #24
 8008594:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8008596:	2300      	movs	r3, #0
 8008598:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800859a:	4b4f      	ldr	r3, [pc, #316]	; (80086d8 <xTaskIncrementTick+0x148>)
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	2b00      	cmp	r3, #0
 80085a0:	f040 808f 	bne.w	80086c2 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80085a4:	4b4d      	ldr	r3, [pc, #308]	; (80086dc <xTaskIncrementTick+0x14c>)
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	3301      	adds	r3, #1
 80085aa:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80085ac:	4a4b      	ldr	r2, [pc, #300]	; (80086dc <xTaskIncrementTick+0x14c>)
 80085ae:	693b      	ldr	r3, [r7, #16]
 80085b0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80085b2:	693b      	ldr	r3, [r7, #16]
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	d120      	bne.n	80085fa <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80085b8:	4b49      	ldr	r3, [pc, #292]	; (80086e0 <xTaskIncrementTick+0x150>)
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	2b00      	cmp	r3, #0
 80085c0:	d00a      	beq.n	80085d8 <xTaskIncrementTick+0x48>
	__asm volatile
 80085c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085c6:	f383 8811 	msr	BASEPRI, r3
 80085ca:	f3bf 8f6f 	isb	sy
 80085ce:	f3bf 8f4f 	dsb	sy
 80085d2:	603b      	str	r3, [r7, #0]
}
 80085d4:	bf00      	nop
 80085d6:	e7fe      	b.n	80085d6 <xTaskIncrementTick+0x46>
 80085d8:	4b41      	ldr	r3, [pc, #260]	; (80086e0 <xTaskIncrementTick+0x150>)
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	60fb      	str	r3, [r7, #12]
 80085de:	4b41      	ldr	r3, [pc, #260]	; (80086e4 <xTaskIncrementTick+0x154>)
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	4a3f      	ldr	r2, [pc, #252]	; (80086e0 <xTaskIncrementTick+0x150>)
 80085e4:	6013      	str	r3, [r2, #0]
 80085e6:	4a3f      	ldr	r2, [pc, #252]	; (80086e4 <xTaskIncrementTick+0x154>)
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	6013      	str	r3, [r2, #0]
 80085ec:	4b3e      	ldr	r3, [pc, #248]	; (80086e8 <xTaskIncrementTick+0x158>)
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	3301      	adds	r3, #1
 80085f2:	4a3d      	ldr	r2, [pc, #244]	; (80086e8 <xTaskIncrementTick+0x158>)
 80085f4:	6013      	str	r3, [r2, #0]
 80085f6:	f000 fadb 	bl	8008bb0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80085fa:	4b3c      	ldr	r3, [pc, #240]	; (80086ec <xTaskIncrementTick+0x15c>)
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	693a      	ldr	r2, [r7, #16]
 8008600:	429a      	cmp	r2, r3
 8008602:	d349      	bcc.n	8008698 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008604:	4b36      	ldr	r3, [pc, #216]	; (80086e0 <xTaskIncrementTick+0x150>)
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	2b00      	cmp	r3, #0
 800860c:	d104      	bne.n	8008618 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800860e:	4b37      	ldr	r3, [pc, #220]	; (80086ec <xTaskIncrementTick+0x15c>)
 8008610:	f04f 32ff 	mov.w	r2, #4294967295
 8008614:	601a      	str	r2, [r3, #0]
					break;
 8008616:	e03f      	b.n	8008698 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008618:	4b31      	ldr	r3, [pc, #196]	; (80086e0 <xTaskIncrementTick+0x150>)
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	68db      	ldr	r3, [r3, #12]
 800861e:	68db      	ldr	r3, [r3, #12]
 8008620:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008622:	68bb      	ldr	r3, [r7, #8]
 8008624:	685b      	ldr	r3, [r3, #4]
 8008626:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008628:	693a      	ldr	r2, [r7, #16]
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	429a      	cmp	r2, r3
 800862e:	d203      	bcs.n	8008638 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008630:	4a2e      	ldr	r2, [pc, #184]	; (80086ec <xTaskIncrementTick+0x15c>)
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8008636:	e02f      	b.n	8008698 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008638:	68bb      	ldr	r3, [r7, #8]
 800863a:	3304      	adds	r3, #4
 800863c:	4618      	mov	r0, r3
 800863e:	f7fe ffad 	bl	800759c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008642:	68bb      	ldr	r3, [r7, #8]
 8008644:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008646:	2b00      	cmp	r3, #0
 8008648:	d004      	beq.n	8008654 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800864a:	68bb      	ldr	r3, [r7, #8]
 800864c:	3318      	adds	r3, #24
 800864e:	4618      	mov	r0, r3
 8008650:	f7fe ffa4 	bl	800759c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008654:	68bb      	ldr	r3, [r7, #8]
 8008656:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008658:	4b25      	ldr	r3, [pc, #148]	; (80086f0 <xTaskIncrementTick+0x160>)
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	429a      	cmp	r2, r3
 800865e:	d903      	bls.n	8008668 <xTaskIncrementTick+0xd8>
 8008660:	68bb      	ldr	r3, [r7, #8]
 8008662:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008664:	4a22      	ldr	r2, [pc, #136]	; (80086f0 <xTaskIncrementTick+0x160>)
 8008666:	6013      	str	r3, [r2, #0]
 8008668:	68bb      	ldr	r3, [r7, #8]
 800866a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800866c:	4613      	mov	r3, r2
 800866e:	009b      	lsls	r3, r3, #2
 8008670:	4413      	add	r3, r2
 8008672:	009b      	lsls	r3, r3, #2
 8008674:	4a1f      	ldr	r2, [pc, #124]	; (80086f4 <xTaskIncrementTick+0x164>)
 8008676:	441a      	add	r2, r3
 8008678:	68bb      	ldr	r3, [r7, #8]
 800867a:	3304      	adds	r3, #4
 800867c:	4619      	mov	r1, r3
 800867e:	4610      	mov	r0, r2
 8008680:	f7fe ff2f 	bl	80074e2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008684:	68bb      	ldr	r3, [r7, #8]
 8008686:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008688:	4b1b      	ldr	r3, [pc, #108]	; (80086f8 <xTaskIncrementTick+0x168>)
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800868e:	429a      	cmp	r2, r3
 8008690:	d3b8      	bcc.n	8008604 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8008692:	2301      	movs	r3, #1
 8008694:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008696:	e7b5      	b.n	8008604 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008698:	4b17      	ldr	r3, [pc, #92]	; (80086f8 <xTaskIncrementTick+0x168>)
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800869e:	4915      	ldr	r1, [pc, #84]	; (80086f4 <xTaskIncrementTick+0x164>)
 80086a0:	4613      	mov	r3, r2
 80086a2:	009b      	lsls	r3, r3, #2
 80086a4:	4413      	add	r3, r2
 80086a6:	009b      	lsls	r3, r3, #2
 80086a8:	440b      	add	r3, r1
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	2b01      	cmp	r3, #1
 80086ae:	d901      	bls.n	80086b4 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80086b0:	2301      	movs	r3, #1
 80086b2:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80086b4:	4b11      	ldr	r3, [pc, #68]	; (80086fc <xTaskIncrementTick+0x16c>)
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	2b00      	cmp	r3, #0
 80086ba:	d007      	beq.n	80086cc <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80086bc:	2301      	movs	r3, #1
 80086be:	617b      	str	r3, [r7, #20]
 80086c0:	e004      	b.n	80086cc <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80086c2:	4b0f      	ldr	r3, [pc, #60]	; (8008700 <xTaskIncrementTick+0x170>)
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	3301      	adds	r3, #1
 80086c8:	4a0d      	ldr	r2, [pc, #52]	; (8008700 <xTaskIncrementTick+0x170>)
 80086ca:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80086cc:	697b      	ldr	r3, [r7, #20]
}
 80086ce:	4618      	mov	r0, r3
 80086d0:	3718      	adds	r7, #24
 80086d2:	46bd      	mov	sp, r7
 80086d4:	bd80      	pop	{r7, pc}
 80086d6:	bf00      	nop
 80086d8:	200024ec 	.word	0x200024ec
 80086dc:	200024c8 	.word	0x200024c8
 80086e0:	2000247c 	.word	0x2000247c
 80086e4:	20002480 	.word	0x20002480
 80086e8:	200024dc 	.word	0x200024dc
 80086ec:	200024e4 	.word	0x200024e4
 80086f0:	200024cc 	.word	0x200024cc
 80086f4:	20001ff4 	.word	0x20001ff4
 80086f8:	20001ff0 	.word	0x20001ff0
 80086fc:	200024d8 	.word	0x200024d8
 8008700:	200024d4 	.word	0x200024d4

08008704 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008704:	b480      	push	{r7}
 8008706:	b085      	sub	sp, #20
 8008708:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800870a:	4b2a      	ldr	r3, [pc, #168]	; (80087b4 <vTaskSwitchContext+0xb0>)
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	2b00      	cmp	r3, #0
 8008710:	d003      	beq.n	800871a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8008712:	4b29      	ldr	r3, [pc, #164]	; (80087b8 <vTaskSwitchContext+0xb4>)
 8008714:	2201      	movs	r2, #1
 8008716:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008718:	e046      	b.n	80087a8 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800871a:	4b27      	ldr	r3, [pc, #156]	; (80087b8 <vTaskSwitchContext+0xb4>)
 800871c:	2200      	movs	r2, #0
 800871e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008720:	4b26      	ldr	r3, [pc, #152]	; (80087bc <vTaskSwitchContext+0xb8>)
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	60fb      	str	r3, [r7, #12]
 8008726:	e010      	b.n	800874a <vTaskSwitchContext+0x46>
 8008728:	68fb      	ldr	r3, [r7, #12]
 800872a:	2b00      	cmp	r3, #0
 800872c:	d10a      	bne.n	8008744 <vTaskSwitchContext+0x40>
	__asm volatile
 800872e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008732:	f383 8811 	msr	BASEPRI, r3
 8008736:	f3bf 8f6f 	isb	sy
 800873a:	f3bf 8f4f 	dsb	sy
 800873e:	607b      	str	r3, [r7, #4]
}
 8008740:	bf00      	nop
 8008742:	e7fe      	b.n	8008742 <vTaskSwitchContext+0x3e>
 8008744:	68fb      	ldr	r3, [r7, #12]
 8008746:	3b01      	subs	r3, #1
 8008748:	60fb      	str	r3, [r7, #12]
 800874a:	491d      	ldr	r1, [pc, #116]	; (80087c0 <vTaskSwitchContext+0xbc>)
 800874c:	68fa      	ldr	r2, [r7, #12]
 800874e:	4613      	mov	r3, r2
 8008750:	009b      	lsls	r3, r3, #2
 8008752:	4413      	add	r3, r2
 8008754:	009b      	lsls	r3, r3, #2
 8008756:	440b      	add	r3, r1
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	2b00      	cmp	r3, #0
 800875c:	d0e4      	beq.n	8008728 <vTaskSwitchContext+0x24>
 800875e:	68fa      	ldr	r2, [r7, #12]
 8008760:	4613      	mov	r3, r2
 8008762:	009b      	lsls	r3, r3, #2
 8008764:	4413      	add	r3, r2
 8008766:	009b      	lsls	r3, r3, #2
 8008768:	4a15      	ldr	r2, [pc, #84]	; (80087c0 <vTaskSwitchContext+0xbc>)
 800876a:	4413      	add	r3, r2
 800876c:	60bb      	str	r3, [r7, #8]
 800876e:	68bb      	ldr	r3, [r7, #8]
 8008770:	685b      	ldr	r3, [r3, #4]
 8008772:	685a      	ldr	r2, [r3, #4]
 8008774:	68bb      	ldr	r3, [r7, #8]
 8008776:	605a      	str	r2, [r3, #4]
 8008778:	68bb      	ldr	r3, [r7, #8]
 800877a:	685a      	ldr	r2, [r3, #4]
 800877c:	68bb      	ldr	r3, [r7, #8]
 800877e:	3308      	adds	r3, #8
 8008780:	429a      	cmp	r2, r3
 8008782:	d104      	bne.n	800878e <vTaskSwitchContext+0x8a>
 8008784:	68bb      	ldr	r3, [r7, #8]
 8008786:	685b      	ldr	r3, [r3, #4]
 8008788:	685a      	ldr	r2, [r3, #4]
 800878a:	68bb      	ldr	r3, [r7, #8]
 800878c:	605a      	str	r2, [r3, #4]
 800878e:	68bb      	ldr	r3, [r7, #8]
 8008790:	685b      	ldr	r3, [r3, #4]
 8008792:	68db      	ldr	r3, [r3, #12]
 8008794:	4a0b      	ldr	r2, [pc, #44]	; (80087c4 <vTaskSwitchContext+0xc0>)
 8008796:	6013      	str	r3, [r2, #0]
 8008798:	4a08      	ldr	r2, [pc, #32]	; (80087bc <vTaskSwitchContext+0xb8>)
 800879a:	68fb      	ldr	r3, [r7, #12]
 800879c:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800879e:	4b09      	ldr	r3, [pc, #36]	; (80087c4 <vTaskSwitchContext+0xc0>)
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	3354      	adds	r3, #84	; 0x54
 80087a4:	4a08      	ldr	r2, [pc, #32]	; (80087c8 <vTaskSwitchContext+0xc4>)
 80087a6:	6013      	str	r3, [r2, #0]
}
 80087a8:	bf00      	nop
 80087aa:	3714      	adds	r7, #20
 80087ac:	46bd      	mov	sp, r7
 80087ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087b2:	4770      	bx	lr
 80087b4:	200024ec 	.word	0x200024ec
 80087b8:	200024d8 	.word	0x200024d8
 80087bc:	200024cc 	.word	0x200024cc
 80087c0:	20001ff4 	.word	0x20001ff4
 80087c4:	20001ff0 	.word	0x20001ff0
 80087c8:	20000010 	.word	0x20000010

080087cc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80087cc:	b580      	push	{r7, lr}
 80087ce:	b084      	sub	sp, #16
 80087d0:	af00      	add	r7, sp, #0
 80087d2:	6078      	str	r0, [r7, #4]
 80087d4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	2b00      	cmp	r3, #0
 80087da:	d10a      	bne.n	80087f2 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80087dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087e0:	f383 8811 	msr	BASEPRI, r3
 80087e4:	f3bf 8f6f 	isb	sy
 80087e8:	f3bf 8f4f 	dsb	sy
 80087ec:	60fb      	str	r3, [r7, #12]
}
 80087ee:	bf00      	nop
 80087f0:	e7fe      	b.n	80087f0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80087f2:	4b07      	ldr	r3, [pc, #28]	; (8008810 <vTaskPlaceOnEventList+0x44>)
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	3318      	adds	r3, #24
 80087f8:	4619      	mov	r1, r3
 80087fa:	6878      	ldr	r0, [r7, #4]
 80087fc:	f7fe fe95 	bl	800752a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008800:	2101      	movs	r1, #1
 8008802:	6838      	ldr	r0, [r7, #0]
 8008804:	f000 fa80 	bl	8008d08 <prvAddCurrentTaskToDelayedList>
}
 8008808:	bf00      	nop
 800880a:	3710      	adds	r7, #16
 800880c:	46bd      	mov	sp, r7
 800880e:	bd80      	pop	{r7, pc}
 8008810:	20001ff0 	.word	0x20001ff0

08008814 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008814:	b580      	push	{r7, lr}
 8008816:	b086      	sub	sp, #24
 8008818:	af00      	add	r7, sp, #0
 800881a:	60f8      	str	r0, [r7, #12]
 800881c:	60b9      	str	r1, [r7, #8]
 800881e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	2b00      	cmp	r3, #0
 8008824:	d10a      	bne.n	800883c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8008826:	f04f 0350 	mov.w	r3, #80	; 0x50
 800882a:	f383 8811 	msr	BASEPRI, r3
 800882e:	f3bf 8f6f 	isb	sy
 8008832:	f3bf 8f4f 	dsb	sy
 8008836:	617b      	str	r3, [r7, #20]
}
 8008838:	bf00      	nop
 800883a:	e7fe      	b.n	800883a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800883c:	4b0a      	ldr	r3, [pc, #40]	; (8008868 <vTaskPlaceOnEventListRestricted+0x54>)
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	3318      	adds	r3, #24
 8008842:	4619      	mov	r1, r3
 8008844:	68f8      	ldr	r0, [r7, #12]
 8008846:	f7fe fe4c 	bl	80074e2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	2b00      	cmp	r3, #0
 800884e:	d002      	beq.n	8008856 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8008850:	f04f 33ff 	mov.w	r3, #4294967295
 8008854:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8008856:	6879      	ldr	r1, [r7, #4]
 8008858:	68b8      	ldr	r0, [r7, #8]
 800885a:	f000 fa55 	bl	8008d08 <prvAddCurrentTaskToDelayedList>
	}
 800885e:	bf00      	nop
 8008860:	3718      	adds	r7, #24
 8008862:	46bd      	mov	sp, r7
 8008864:	bd80      	pop	{r7, pc}
 8008866:	bf00      	nop
 8008868:	20001ff0 	.word	0x20001ff0

0800886c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800886c:	b580      	push	{r7, lr}
 800886e:	b086      	sub	sp, #24
 8008870:	af00      	add	r7, sp, #0
 8008872:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	68db      	ldr	r3, [r3, #12]
 8008878:	68db      	ldr	r3, [r3, #12]
 800887a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800887c:	693b      	ldr	r3, [r7, #16]
 800887e:	2b00      	cmp	r3, #0
 8008880:	d10a      	bne.n	8008898 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8008882:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008886:	f383 8811 	msr	BASEPRI, r3
 800888a:	f3bf 8f6f 	isb	sy
 800888e:	f3bf 8f4f 	dsb	sy
 8008892:	60fb      	str	r3, [r7, #12]
}
 8008894:	bf00      	nop
 8008896:	e7fe      	b.n	8008896 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8008898:	693b      	ldr	r3, [r7, #16]
 800889a:	3318      	adds	r3, #24
 800889c:	4618      	mov	r0, r3
 800889e:	f7fe fe7d 	bl	800759c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80088a2:	4b1e      	ldr	r3, [pc, #120]	; (800891c <xTaskRemoveFromEventList+0xb0>)
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	2b00      	cmp	r3, #0
 80088a8:	d11d      	bne.n	80088e6 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80088aa:	693b      	ldr	r3, [r7, #16]
 80088ac:	3304      	adds	r3, #4
 80088ae:	4618      	mov	r0, r3
 80088b0:	f7fe fe74 	bl	800759c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80088b4:	693b      	ldr	r3, [r7, #16]
 80088b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80088b8:	4b19      	ldr	r3, [pc, #100]	; (8008920 <xTaskRemoveFromEventList+0xb4>)
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	429a      	cmp	r2, r3
 80088be:	d903      	bls.n	80088c8 <xTaskRemoveFromEventList+0x5c>
 80088c0:	693b      	ldr	r3, [r7, #16]
 80088c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088c4:	4a16      	ldr	r2, [pc, #88]	; (8008920 <xTaskRemoveFromEventList+0xb4>)
 80088c6:	6013      	str	r3, [r2, #0]
 80088c8:	693b      	ldr	r3, [r7, #16]
 80088ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80088cc:	4613      	mov	r3, r2
 80088ce:	009b      	lsls	r3, r3, #2
 80088d0:	4413      	add	r3, r2
 80088d2:	009b      	lsls	r3, r3, #2
 80088d4:	4a13      	ldr	r2, [pc, #76]	; (8008924 <xTaskRemoveFromEventList+0xb8>)
 80088d6:	441a      	add	r2, r3
 80088d8:	693b      	ldr	r3, [r7, #16]
 80088da:	3304      	adds	r3, #4
 80088dc:	4619      	mov	r1, r3
 80088de:	4610      	mov	r0, r2
 80088e0:	f7fe fdff 	bl	80074e2 <vListInsertEnd>
 80088e4:	e005      	b.n	80088f2 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80088e6:	693b      	ldr	r3, [r7, #16]
 80088e8:	3318      	adds	r3, #24
 80088ea:	4619      	mov	r1, r3
 80088ec:	480e      	ldr	r0, [pc, #56]	; (8008928 <xTaskRemoveFromEventList+0xbc>)
 80088ee:	f7fe fdf8 	bl	80074e2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80088f2:	693b      	ldr	r3, [r7, #16]
 80088f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80088f6:	4b0d      	ldr	r3, [pc, #52]	; (800892c <xTaskRemoveFromEventList+0xc0>)
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088fc:	429a      	cmp	r2, r3
 80088fe:	d905      	bls.n	800890c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8008900:	2301      	movs	r3, #1
 8008902:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8008904:	4b0a      	ldr	r3, [pc, #40]	; (8008930 <xTaskRemoveFromEventList+0xc4>)
 8008906:	2201      	movs	r2, #1
 8008908:	601a      	str	r2, [r3, #0]
 800890a:	e001      	b.n	8008910 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800890c:	2300      	movs	r3, #0
 800890e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8008910:	697b      	ldr	r3, [r7, #20]
}
 8008912:	4618      	mov	r0, r3
 8008914:	3718      	adds	r7, #24
 8008916:	46bd      	mov	sp, r7
 8008918:	bd80      	pop	{r7, pc}
 800891a:	bf00      	nop
 800891c:	200024ec 	.word	0x200024ec
 8008920:	200024cc 	.word	0x200024cc
 8008924:	20001ff4 	.word	0x20001ff4
 8008928:	20002484 	.word	0x20002484
 800892c:	20001ff0 	.word	0x20001ff0
 8008930:	200024d8 	.word	0x200024d8

08008934 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008934:	b480      	push	{r7}
 8008936:	b083      	sub	sp, #12
 8008938:	af00      	add	r7, sp, #0
 800893a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800893c:	4b06      	ldr	r3, [pc, #24]	; (8008958 <vTaskInternalSetTimeOutState+0x24>)
 800893e:	681a      	ldr	r2, [r3, #0]
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008944:	4b05      	ldr	r3, [pc, #20]	; (800895c <vTaskInternalSetTimeOutState+0x28>)
 8008946:	681a      	ldr	r2, [r3, #0]
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	605a      	str	r2, [r3, #4]
}
 800894c:	bf00      	nop
 800894e:	370c      	adds	r7, #12
 8008950:	46bd      	mov	sp, r7
 8008952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008956:	4770      	bx	lr
 8008958:	200024dc 	.word	0x200024dc
 800895c:	200024c8 	.word	0x200024c8

08008960 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8008960:	b580      	push	{r7, lr}
 8008962:	b088      	sub	sp, #32
 8008964:	af00      	add	r7, sp, #0
 8008966:	6078      	str	r0, [r7, #4]
 8008968:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	2b00      	cmp	r3, #0
 800896e:	d10a      	bne.n	8008986 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8008970:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008974:	f383 8811 	msr	BASEPRI, r3
 8008978:	f3bf 8f6f 	isb	sy
 800897c:	f3bf 8f4f 	dsb	sy
 8008980:	613b      	str	r3, [r7, #16]
}
 8008982:	bf00      	nop
 8008984:	e7fe      	b.n	8008984 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8008986:	683b      	ldr	r3, [r7, #0]
 8008988:	2b00      	cmp	r3, #0
 800898a:	d10a      	bne.n	80089a2 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800898c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008990:	f383 8811 	msr	BASEPRI, r3
 8008994:	f3bf 8f6f 	isb	sy
 8008998:	f3bf 8f4f 	dsb	sy
 800899c:	60fb      	str	r3, [r7, #12]
}
 800899e:	bf00      	nop
 80089a0:	e7fe      	b.n	80089a0 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80089a2:	f000 ff37 	bl	8009814 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80089a6:	4b1d      	ldr	r3, [pc, #116]	; (8008a1c <xTaskCheckForTimeOut+0xbc>)
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	685b      	ldr	r3, [r3, #4]
 80089b0:	69ba      	ldr	r2, [r7, #24]
 80089b2:	1ad3      	subs	r3, r2, r3
 80089b4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80089b6:	683b      	ldr	r3, [r7, #0]
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80089be:	d102      	bne.n	80089c6 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80089c0:	2300      	movs	r3, #0
 80089c2:	61fb      	str	r3, [r7, #28]
 80089c4:	e023      	b.n	8008a0e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	681a      	ldr	r2, [r3, #0]
 80089ca:	4b15      	ldr	r3, [pc, #84]	; (8008a20 <xTaskCheckForTimeOut+0xc0>)
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	429a      	cmp	r2, r3
 80089d0:	d007      	beq.n	80089e2 <xTaskCheckForTimeOut+0x82>
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	685b      	ldr	r3, [r3, #4]
 80089d6:	69ba      	ldr	r2, [r7, #24]
 80089d8:	429a      	cmp	r2, r3
 80089da:	d302      	bcc.n	80089e2 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80089dc:	2301      	movs	r3, #1
 80089de:	61fb      	str	r3, [r7, #28]
 80089e0:	e015      	b.n	8008a0e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80089e2:	683b      	ldr	r3, [r7, #0]
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	697a      	ldr	r2, [r7, #20]
 80089e8:	429a      	cmp	r2, r3
 80089ea:	d20b      	bcs.n	8008a04 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80089ec:	683b      	ldr	r3, [r7, #0]
 80089ee:	681a      	ldr	r2, [r3, #0]
 80089f0:	697b      	ldr	r3, [r7, #20]
 80089f2:	1ad2      	subs	r2, r2, r3
 80089f4:	683b      	ldr	r3, [r7, #0]
 80089f6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80089f8:	6878      	ldr	r0, [r7, #4]
 80089fa:	f7ff ff9b 	bl	8008934 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80089fe:	2300      	movs	r3, #0
 8008a00:	61fb      	str	r3, [r7, #28]
 8008a02:	e004      	b.n	8008a0e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8008a04:	683b      	ldr	r3, [r7, #0]
 8008a06:	2200      	movs	r2, #0
 8008a08:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8008a0a:	2301      	movs	r3, #1
 8008a0c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8008a0e:	f000 ff31 	bl	8009874 <vPortExitCritical>

	return xReturn;
 8008a12:	69fb      	ldr	r3, [r7, #28]
}
 8008a14:	4618      	mov	r0, r3
 8008a16:	3720      	adds	r7, #32
 8008a18:	46bd      	mov	sp, r7
 8008a1a:	bd80      	pop	{r7, pc}
 8008a1c:	200024c8 	.word	0x200024c8
 8008a20:	200024dc 	.word	0x200024dc

08008a24 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8008a24:	b480      	push	{r7}
 8008a26:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8008a28:	4b03      	ldr	r3, [pc, #12]	; (8008a38 <vTaskMissedYield+0x14>)
 8008a2a:	2201      	movs	r2, #1
 8008a2c:	601a      	str	r2, [r3, #0]
}
 8008a2e:	bf00      	nop
 8008a30:	46bd      	mov	sp, r7
 8008a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a36:	4770      	bx	lr
 8008a38:	200024d8 	.word	0x200024d8

08008a3c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008a3c:	b580      	push	{r7, lr}
 8008a3e:	b082      	sub	sp, #8
 8008a40:	af00      	add	r7, sp, #0
 8008a42:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008a44:	f000 f852 	bl	8008aec <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008a48:	4b06      	ldr	r3, [pc, #24]	; (8008a64 <prvIdleTask+0x28>)
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	2b01      	cmp	r3, #1
 8008a4e:	d9f9      	bls.n	8008a44 <prvIdleTask+0x8>
			{
				taskYIELD();
 8008a50:	4b05      	ldr	r3, [pc, #20]	; (8008a68 <prvIdleTask+0x2c>)
 8008a52:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008a56:	601a      	str	r2, [r3, #0]
 8008a58:	f3bf 8f4f 	dsb	sy
 8008a5c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008a60:	e7f0      	b.n	8008a44 <prvIdleTask+0x8>
 8008a62:	bf00      	nop
 8008a64:	20001ff4 	.word	0x20001ff4
 8008a68:	e000ed04 	.word	0xe000ed04

08008a6c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008a6c:	b580      	push	{r7, lr}
 8008a6e:	b082      	sub	sp, #8
 8008a70:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008a72:	2300      	movs	r3, #0
 8008a74:	607b      	str	r3, [r7, #4]
 8008a76:	e00c      	b.n	8008a92 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008a78:	687a      	ldr	r2, [r7, #4]
 8008a7a:	4613      	mov	r3, r2
 8008a7c:	009b      	lsls	r3, r3, #2
 8008a7e:	4413      	add	r3, r2
 8008a80:	009b      	lsls	r3, r3, #2
 8008a82:	4a12      	ldr	r2, [pc, #72]	; (8008acc <prvInitialiseTaskLists+0x60>)
 8008a84:	4413      	add	r3, r2
 8008a86:	4618      	mov	r0, r3
 8008a88:	f7fe fcfe 	bl	8007488 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	3301      	adds	r3, #1
 8008a90:	607b      	str	r3, [r7, #4]
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	2b37      	cmp	r3, #55	; 0x37
 8008a96:	d9ef      	bls.n	8008a78 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008a98:	480d      	ldr	r0, [pc, #52]	; (8008ad0 <prvInitialiseTaskLists+0x64>)
 8008a9a:	f7fe fcf5 	bl	8007488 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008a9e:	480d      	ldr	r0, [pc, #52]	; (8008ad4 <prvInitialiseTaskLists+0x68>)
 8008aa0:	f7fe fcf2 	bl	8007488 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008aa4:	480c      	ldr	r0, [pc, #48]	; (8008ad8 <prvInitialiseTaskLists+0x6c>)
 8008aa6:	f7fe fcef 	bl	8007488 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8008aaa:	480c      	ldr	r0, [pc, #48]	; (8008adc <prvInitialiseTaskLists+0x70>)
 8008aac:	f7fe fcec 	bl	8007488 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008ab0:	480b      	ldr	r0, [pc, #44]	; (8008ae0 <prvInitialiseTaskLists+0x74>)
 8008ab2:	f7fe fce9 	bl	8007488 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8008ab6:	4b0b      	ldr	r3, [pc, #44]	; (8008ae4 <prvInitialiseTaskLists+0x78>)
 8008ab8:	4a05      	ldr	r2, [pc, #20]	; (8008ad0 <prvInitialiseTaskLists+0x64>)
 8008aba:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008abc:	4b0a      	ldr	r3, [pc, #40]	; (8008ae8 <prvInitialiseTaskLists+0x7c>)
 8008abe:	4a05      	ldr	r2, [pc, #20]	; (8008ad4 <prvInitialiseTaskLists+0x68>)
 8008ac0:	601a      	str	r2, [r3, #0]
}
 8008ac2:	bf00      	nop
 8008ac4:	3708      	adds	r7, #8
 8008ac6:	46bd      	mov	sp, r7
 8008ac8:	bd80      	pop	{r7, pc}
 8008aca:	bf00      	nop
 8008acc:	20001ff4 	.word	0x20001ff4
 8008ad0:	20002454 	.word	0x20002454
 8008ad4:	20002468 	.word	0x20002468
 8008ad8:	20002484 	.word	0x20002484
 8008adc:	20002498 	.word	0x20002498
 8008ae0:	200024b0 	.word	0x200024b0
 8008ae4:	2000247c 	.word	0x2000247c
 8008ae8:	20002480 	.word	0x20002480

08008aec <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008aec:	b580      	push	{r7, lr}
 8008aee:	b082      	sub	sp, #8
 8008af0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008af2:	e019      	b.n	8008b28 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008af4:	f000 fe8e 	bl	8009814 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008af8:	4b10      	ldr	r3, [pc, #64]	; (8008b3c <prvCheckTasksWaitingTermination+0x50>)
 8008afa:	68db      	ldr	r3, [r3, #12]
 8008afc:	68db      	ldr	r3, [r3, #12]
 8008afe:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	3304      	adds	r3, #4
 8008b04:	4618      	mov	r0, r3
 8008b06:	f7fe fd49 	bl	800759c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008b0a:	4b0d      	ldr	r3, [pc, #52]	; (8008b40 <prvCheckTasksWaitingTermination+0x54>)
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	3b01      	subs	r3, #1
 8008b10:	4a0b      	ldr	r2, [pc, #44]	; (8008b40 <prvCheckTasksWaitingTermination+0x54>)
 8008b12:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008b14:	4b0b      	ldr	r3, [pc, #44]	; (8008b44 <prvCheckTasksWaitingTermination+0x58>)
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	3b01      	subs	r3, #1
 8008b1a:	4a0a      	ldr	r2, [pc, #40]	; (8008b44 <prvCheckTasksWaitingTermination+0x58>)
 8008b1c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8008b1e:	f000 fea9 	bl	8009874 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8008b22:	6878      	ldr	r0, [r7, #4]
 8008b24:	f000 f810 	bl	8008b48 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008b28:	4b06      	ldr	r3, [pc, #24]	; (8008b44 <prvCheckTasksWaitingTermination+0x58>)
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	2b00      	cmp	r3, #0
 8008b2e:	d1e1      	bne.n	8008af4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008b30:	bf00      	nop
 8008b32:	bf00      	nop
 8008b34:	3708      	adds	r7, #8
 8008b36:	46bd      	mov	sp, r7
 8008b38:	bd80      	pop	{r7, pc}
 8008b3a:	bf00      	nop
 8008b3c:	20002498 	.word	0x20002498
 8008b40:	200024c4 	.word	0x200024c4
 8008b44:	200024ac 	.word	0x200024ac

08008b48 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008b48:	b580      	push	{r7, lr}
 8008b4a:	b084      	sub	sp, #16
 8008b4c:	af00      	add	r7, sp, #0
 8008b4e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	3354      	adds	r3, #84	; 0x54
 8008b54:	4618      	mov	r0, r3
 8008b56:	f001 fbd3 	bl	800a300 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8008b60:	2b00      	cmp	r3, #0
 8008b62:	d108      	bne.n	8008b76 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b68:	4618      	mov	r0, r3
 8008b6a:	f001 f841 	bl	8009bf0 <vPortFree>
				vPortFree( pxTCB );
 8008b6e:	6878      	ldr	r0, [r7, #4]
 8008b70:	f001 f83e 	bl	8009bf0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008b74:	e018      	b.n	8008ba8 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8008b7c:	2b01      	cmp	r3, #1
 8008b7e:	d103      	bne.n	8008b88 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8008b80:	6878      	ldr	r0, [r7, #4]
 8008b82:	f001 f835 	bl	8009bf0 <vPortFree>
	}
 8008b86:	e00f      	b.n	8008ba8 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8008b8e:	2b02      	cmp	r3, #2
 8008b90:	d00a      	beq.n	8008ba8 <prvDeleteTCB+0x60>
	__asm volatile
 8008b92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b96:	f383 8811 	msr	BASEPRI, r3
 8008b9a:	f3bf 8f6f 	isb	sy
 8008b9e:	f3bf 8f4f 	dsb	sy
 8008ba2:	60fb      	str	r3, [r7, #12]
}
 8008ba4:	bf00      	nop
 8008ba6:	e7fe      	b.n	8008ba6 <prvDeleteTCB+0x5e>
	}
 8008ba8:	bf00      	nop
 8008baa:	3710      	adds	r7, #16
 8008bac:	46bd      	mov	sp, r7
 8008bae:	bd80      	pop	{r7, pc}

08008bb0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008bb0:	b480      	push	{r7}
 8008bb2:	b083      	sub	sp, #12
 8008bb4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008bb6:	4b0c      	ldr	r3, [pc, #48]	; (8008be8 <prvResetNextTaskUnblockTime+0x38>)
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	2b00      	cmp	r3, #0
 8008bbe:	d104      	bne.n	8008bca <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008bc0:	4b0a      	ldr	r3, [pc, #40]	; (8008bec <prvResetNextTaskUnblockTime+0x3c>)
 8008bc2:	f04f 32ff 	mov.w	r2, #4294967295
 8008bc6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008bc8:	e008      	b.n	8008bdc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008bca:	4b07      	ldr	r3, [pc, #28]	; (8008be8 <prvResetNextTaskUnblockTime+0x38>)
 8008bcc:	681b      	ldr	r3, [r3, #0]
 8008bce:	68db      	ldr	r3, [r3, #12]
 8008bd0:	68db      	ldr	r3, [r3, #12]
 8008bd2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	685b      	ldr	r3, [r3, #4]
 8008bd8:	4a04      	ldr	r2, [pc, #16]	; (8008bec <prvResetNextTaskUnblockTime+0x3c>)
 8008bda:	6013      	str	r3, [r2, #0]
}
 8008bdc:	bf00      	nop
 8008bde:	370c      	adds	r7, #12
 8008be0:	46bd      	mov	sp, r7
 8008be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008be6:	4770      	bx	lr
 8008be8:	2000247c 	.word	0x2000247c
 8008bec:	200024e4 	.word	0x200024e4

08008bf0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008bf0:	b480      	push	{r7}
 8008bf2:	b083      	sub	sp, #12
 8008bf4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8008bf6:	4b0b      	ldr	r3, [pc, #44]	; (8008c24 <xTaskGetSchedulerState+0x34>)
 8008bf8:	681b      	ldr	r3, [r3, #0]
 8008bfa:	2b00      	cmp	r3, #0
 8008bfc:	d102      	bne.n	8008c04 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8008bfe:	2301      	movs	r3, #1
 8008c00:	607b      	str	r3, [r7, #4]
 8008c02:	e008      	b.n	8008c16 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008c04:	4b08      	ldr	r3, [pc, #32]	; (8008c28 <xTaskGetSchedulerState+0x38>)
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	2b00      	cmp	r3, #0
 8008c0a:	d102      	bne.n	8008c12 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8008c0c:	2302      	movs	r3, #2
 8008c0e:	607b      	str	r3, [r7, #4]
 8008c10:	e001      	b.n	8008c16 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8008c12:	2300      	movs	r3, #0
 8008c14:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8008c16:	687b      	ldr	r3, [r7, #4]
	}
 8008c18:	4618      	mov	r0, r3
 8008c1a:	370c      	adds	r7, #12
 8008c1c:	46bd      	mov	sp, r7
 8008c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c22:	4770      	bx	lr
 8008c24:	200024d0 	.word	0x200024d0
 8008c28:	200024ec 	.word	0x200024ec

08008c2c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8008c2c:	b580      	push	{r7, lr}
 8008c2e:	b086      	sub	sp, #24
 8008c30:	af00      	add	r7, sp, #0
 8008c32:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8008c38:	2300      	movs	r3, #0
 8008c3a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	d056      	beq.n	8008cf0 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8008c42:	4b2e      	ldr	r3, [pc, #184]	; (8008cfc <xTaskPriorityDisinherit+0xd0>)
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	693a      	ldr	r2, [r7, #16]
 8008c48:	429a      	cmp	r2, r3
 8008c4a:	d00a      	beq.n	8008c62 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8008c4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c50:	f383 8811 	msr	BASEPRI, r3
 8008c54:	f3bf 8f6f 	isb	sy
 8008c58:	f3bf 8f4f 	dsb	sy
 8008c5c:	60fb      	str	r3, [r7, #12]
}
 8008c5e:	bf00      	nop
 8008c60:	e7fe      	b.n	8008c60 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8008c62:	693b      	ldr	r3, [r7, #16]
 8008c64:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008c66:	2b00      	cmp	r3, #0
 8008c68:	d10a      	bne.n	8008c80 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8008c6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c6e:	f383 8811 	msr	BASEPRI, r3
 8008c72:	f3bf 8f6f 	isb	sy
 8008c76:	f3bf 8f4f 	dsb	sy
 8008c7a:	60bb      	str	r3, [r7, #8]
}
 8008c7c:	bf00      	nop
 8008c7e:	e7fe      	b.n	8008c7e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8008c80:	693b      	ldr	r3, [r7, #16]
 8008c82:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008c84:	1e5a      	subs	r2, r3, #1
 8008c86:	693b      	ldr	r3, [r7, #16]
 8008c88:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8008c8a:	693b      	ldr	r3, [r7, #16]
 8008c8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008c8e:	693b      	ldr	r3, [r7, #16]
 8008c90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008c92:	429a      	cmp	r2, r3
 8008c94:	d02c      	beq.n	8008cf0 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8008c96:	693b      	ldr	r3, [r7, #16]
 8008c98:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008c9a:	2b00      	cmp	r3, #0
 8008c9c:	d128      	bne.n	8008cf0 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008c9e:	693b      	ldr	r3, [r7, #16]
 8008ca0:	3304      	adds	r3, #4
 8008ca2:	4618      	mov	r0, r3
 8008ca4:	f7fe fc7a 	bl	800759c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008ca8:	693b      	ldr	r3, [r7, #16]
 8008caa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008cac:	693b      	ldr	r3, [r7, #16]
 8008cae:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008cb0:	693b      	ldr	r3, [r7, #16]
 8008cb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cb4:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008cb8:	693b      	ldr	r3, [r7, #16]
 8008cba:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8008cbc:	693b      	ldr	r3, [r7, #16]
 8008cbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008cc0:	4b0f      	ldr	r3, [pc, #60]	; (8008d00 <xTaskPriorityDisinherit+0xd4>)
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	429a      	cmp	r2, r3
 8008cc6:	d903      	bls.n	8008cd0 <xTaskPriorityDisinherit+0xa4>
 8008cc8:	693b      	ldr	r3, [r7, #16]
 8008cca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ccc:	4a0c      	ldr	r2, [pc, #48]	; (8008d00 <xTaskPriorityDisinherit+0xd4>)
 8008cce:	6013      	str	r3, [r2, #0]
 8008cd0:	693b      	ldr	r3, [r7, #16]
 8008cd2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008cd4:	4613      	mov	r3, r2
 8008cd6:	009b      	lsls	r3, r3, #2
 8008cd8:	4413      	add	r3, r2
 8008cda:	009b      	lsls	r3, r3, #2
 8008cdc:	4a09      	ldr	r2, [pc, #36]	; (8008d04 <xTaskPriorityDisinherit+0xd8>)
 8008cde:	441a      	add	r2, r3
 8008ce0:	693b      	ldr	r3, [r7, #16]
 8008ce2:	3304      	adds	r3, #4
 8008ce4:	4619      	mov	r1, r3
 8008ce6:	4610      	mov	r0, r2
 8008ce8:	f7fe fbfb 	bl	80074e2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8008cec:	2301      	movs	r3, #1
 8008cee:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008cf0:	697b      	ldr	r3, [r7, #20]
	}
 8008cf2:	4618      	mov	r0, r3
 8008cf4:	3718      	adds	r7, #24
 8008cf6:	46bd      	mov	sp, r7
 8008cf8:	bd80      	pop	{r7, pc}
 8008cfa:	bf00      	nop
 8008cfc:	20001ff0 	.word	0x20001ff0
 8008d00:	200024cc 	.word	0x200024cc
 8008d04:	20001ff4 	.word	0x20001ff4

08008d08 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008d08:	b580      	push	{r7, lr}
 8008d0a:	b084      	sub	sp, #16
 8008d0c:	af00      	add	r7, sp, #0
 8008d0e:	6078      	str	r0, [r7, #4]
 8008d10:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008d12:	4b21      	ldr	r3, [pc, #132]	; (8008d98 <prvAddCurrentTaskToDelayedList+0x90>)
 8008d14:	681b      	ldr	r3, [r3, #0]
 8008d16:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008d18:	4b20      	ldr	r3, [pc, #128]	; (8008d9c <prvAddCurrentTaskToDelayedList+0x94>)
 8008d1a:	681b      	ldr	r3, [r3, #0]
 8008d1c:	3304      	adds	r3, #4
 8008d1e:	4618      	mov	r0, r3
 8008d20:	f7fe fc3c 	bl	800759c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d2a:	d10a      	bne.n	8008d42 <prvAddCurrentTaskToDelayedList+0x3a>
 8008d2c:	683b      	ldr	r3, [r7, #0]
 8008d2e:	2b00      	cmp	r3, #0
 8008d30:	d007      	beq.n	8008d42 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008d32:	4b1a      	ldr	r3, [pc, #104]	; (8008d9c <prvAddCurrentTaskToDelayedList+0x94>)
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	3304      	adds	r3, #4
 8008d38:	4619      	mov	r1, r3
 8008d3a:	4819      	ldr	r0, [pc, #100]	; (8008da0 <prvAddCurrentTaskToDelayedList+0x98>)
 8008d3c:	f7fe fbd1 	bl	80074e2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008d40:	e026      	b.n	8008d90 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008d42:	68fa      	ldr	r2, [r7, #12]
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	4413      	add	r3, r2
 8008d48:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008d4a:	4b14      	ldr	r3, [pc, #80]	; (8008d9c <prvAddCurrentTaskToDelayedList+0x94>)
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	68ba      	ldr	r2, [r7, #8]
 8008d50:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008d52:	68ba      	ldr	r2, [r7, #8]
 8008d54:	68fb      	ldr	r3, [r7, #12]
 8008d56:	429a      	cmp	r2, r3
 8008d58:	d209      	bcs.n	8008d6e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008d5a:	4b12      	ldr	r3, [pc, #72]	; (8008da4 <prvAddCurrentTaskToDelayedList+0x9c>)
 8008d5c:	681a      	ldr	r2, [r3, #0]
 8008d5e:	4b0f      	ldr	r3, [pc, #60]	; (8008d9c <prvAddCurrentTaskToDelayedList+0x94>)
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	3304      	adds	r3, #4
 8008d64:	4619      	mov	r1, r3
 8008d66:	4610      	mov	r0, r2
 8008d68:	f7fe fbdf 	bl	800752a <vListInsert>
}
 8008d6c:	e010      	b.n	8008d90 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008d6e:	4b0e      	ldr	r3, [pc, #56]	; (8008da8 <prvAddCurrentTaskToDelayedList+0xa0>)
 8008d70:	681a      	ldr	r2, [r3, #0]
 8008d72:	4b0a      	ldr	r3, [pc, #40]	; (8008d9c <prvAddCurrentTaskToDelayedList+0x94>)
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	3304      	adds	r3, #4
 8008d78:	4619      	mov	r1, r3
 8008d7a:	4610      	mov	r0, r2
 8008d7c:	f7fe fbd5 	bl	800752a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008d80:	4b0a      	ldr	r3, [pc, #40]	; (8008dac <prvAddCurrentTaskToDelayedList+0xa4>)
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	68ba      	ldr	r2, [r7, #8]
 8008d86:	429a      	cmp	r2, r3
 8008d88:	d202      	bcs.n	8008d90 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8008d8a:	4a08      	ldr	r2, [pc, #32]	; (8008dac <prvAddCurrentTaskToDelayedList+0xa4>)
 8008d8c:	68bb      	ldr	r3, [r7, #8]
 8008d8e:	6013      	str	r3, [r2, #0]
}
 8008d90:	bf00      	nop
 8008d92:	3710      	adds	r7, #16
 8008d94:	46bd      	mov	sp, r7
 8008d96:	bd80      	pop	{r7, pc}
 8008d98:	200024c8 	.word	0x200024c8
 8008d9c:	20001ff0 	.word	0x20001ff0
 8008da0:	200024b0 	.word	0x200024b0
 8008da4:	20002480 	.word	0x20002480
 8008da8:	2000247c 	.word	0x2000247c
 8008dac:	200024e4 	.word	0x200024e4

08008db0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8008db0:	b580      	push	{r7, lr}
 8008db2:	b08a      	sub	sp, #40	; 0x28
 8008db4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8008db6:	2300      	movs	r3, #0
 8008db8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8008dba:	f000 fba1 	bl	8009500 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8008dbe:	4b1c      	ldr	r3, [pc, #112]	; (8008e30 <xTimerCreateTimerTask+0x80>)
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	2b00      	cmp	r3, #0
 8008dc4:	d021      	beq.n	8008e0a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8008dc6:	2300      	movs	r3, #0
 8008dc8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8008dca:	2300      	movs	r3, #0
 8008dcc:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8008dce:	1d3a      	adds	r2, r7, #4
 8008dd0:	f107 0108 	add.w	r1, r7, #8
 8008dd4:	f107 030c 	add.w	r3, r7, #12
 8008dd8:	4618      	mov	r0, r3
 8008dda:	f7fe fb3b 	bl	8007454 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8008dde:	6879      	ldr	r1, [r7, #4]
 8008de0:	68bb      	ldr	r3, [r7, #8]
 8008de2:	68fa      	ldr	r2, [r7, #12]
 8008de4:	9202      	str	r2, [sp, #8]
 8008de6:	9301      	str	r3, [sp, #4]
 8008de8:	2302      	movs	r3, #2
 8008dea:	9300      	str	r3, [sp, #0]
 8008dec:	2300      	movs	r3, #0
 8008dee:	460a      	mov	r2, r1
 8008df0:	4910      	ldr	r1, [pc, #64]	; (8008e34 <xTimerCreateTimerTask+0x84>)
 8008df2:	4811      	ldr	r0, [pc, #68]	; (8008e38 <xTimerCreateTimerTask+0x88>)
 8008df4:	f7ff f8e8 	bl	8007fc8 <xTaskCreateStatic>
 8008df8:	4603      	mov	r3, r0
 8008dfa:	4a10      	ldr	r2, [pc, #64]	; (8008e3c <xTimerCreateTimerTask+0x8c>)
 8008dfc:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8008dfe:	4b0f      	ldr	r3, [pc, #60]	; (8008e3c <xTimerCreateTimerTask+0x8c>)
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	2b00      	cmp	r3, #0
 8008e04:	d001      	beq.n	8008e0a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8008e06:	2301      	movs	r3, #1
 8008e08:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8008e0a:	697b      	ldr	r3, [r7, #20]
 8008e0c:	2b00      	cmp	r3, #0
 8008e0e:	d10a      	bne.n	8008e26 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8008e10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e14:	f383 8811 	msr	BASEPRI, r3
 8008e18:	f3bf 8f6f 	isb	sy
 8008e1c:	f3bf 8f4f 	dsb	sy
 8008e20:	613b      	str	r3, [r7, #16]
}
 8008e22:	bf00      	nop
 8008e24:	e7fe      	b.n	8008e24 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8008e26:	697b      	ldr	r3, [r7, #20]
}
 8008e28:	4618      	mov	r0, r3
 8008e2a:	3718      	adds	r7, #24
 8008e2c:	46bd      	mov	sp, r7
 8008e2e:	bd80      	pop	{r7, pc}
 8008e30:	20002520 	.word	0x20002520
 8008e34:	0800c02c 	.word	0x0800c02c
 8008e38:	080090a9 	.word	0x080090a9
 8008e3c:	20002524 	.word	0x20002524

08008e40 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 8008e40:	b580      	push	{r7, lr}
 8008e42:	b088      	sub	sp, #32
 8008e44:	af02      	add	r7, sp, #8
 8008e46:	60f8      	str	r0, [r7, #12]
 8008e48:	60b9      	str	r1, [r7, #8]
 8008e4a:	607a      	str	r2, [r7, #4]
 8008e4c:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 8008e4e:	202c      	movs	r0, #44	; 0x2c
 8008e50:	f000 fe02 	bl	8009a58 <pvPortMalloc>
 8008e54:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 8008e56:	697b      	ldr	r3, [r7, #20]
 8008e58:	2b00      	cmp	r3, #0
 8008e5a:	d00d      	beq.n	8008e78 <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The auto-reload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 8008e5c:	697b      	ldr	r3, [r7, #20]
 8008e5e:	2200      	movs	r2, #0
 8008e60:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8008e64:	697b      	ldr	r3, [r7, #20]
 8008e66:	9301      	str	r3, [sp, #4]
 8008e68:	6a3b      	ldr	r3, [r7, #32]
 8008e6a:	9300      	str	r3, [sp, #0]
 8008e6c:	683b      	ldr	r3, [r7, #0]
 8008e6e:	687a      	ldr	r2, [r7, #4]
 8008e70:	68b9      	ldr	r1, [r7, #8]
 8008e72:	68f8      	ldr	r0, [r7, #12]
 8008e74:	f000 f843 	bl	8008efe <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 8008e78:	697b      	ldr	r3, [r7, #20]
	}
 8008e7a:	4618      	mov	r0, r3
 8008e7c:	3718      	adds	r7, #24
 8008e7e:	46bd      	mov	sp, r7
 8008e80:	bd80      	pop	{r7, pc}

08008e82 <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 8008e82:	b580      	push	{r7, lr}
 8008e84:	b08a      	sub	sp, #40	; 0x28
 8008e86:	af02      	add	r7, sp, #8
 8008e88:	60f8      	str	r0, [r7, #12]
 8008e8a:	60b9      	str	r1, [r7, #8]
 8008e8c:	607a      	str	r2, [r7, #4]
 8008e8e:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 8008e90:	232c      	movs	r3, #44	; 0x2c
 8008e92:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 8008e94:	693b      	ldr	r3, [r7, #16]
 8008e96:	2b2c      	cmp	r3, #44	; 0x2c
 8008e98:	d00a      	beq.n	8008eb0 <xTimerCreateStatic+0x2e>
	__asm volatile
 8008e9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e9e:	f383 8811 	msr	BASEPRI, r3
 8008ea2:	f3bf 8f6f 	isb	sy
 8008ea6:	f3bf 8f4f 	dsb	sy
 8008eaa:	61bb      	str	r3, [r7, #24]
}
 8008eac:	bf00      	nop
 8008eae:	e7fe      	b.n	8008eae <xTimerCreateStatic+0x2c>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8008eb0:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 8008eb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008eb4:	2b00      	cmp	r3, #0
 8008eb6:	d10a      	bne.n	8008ece <xTimerCreateStatic+0x4c>
	__asm volatile
 8008eb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ebc:	f383 8811 	msr	BASEPRI, r3
 8008ec0:	f3bf 8f6f 	isb	sy
 8008ec4:	f3bf 8f4f 	dsb	sy
 8008ec8:	617b      	str	r3, [r7, #20]
}
 8008eca:	bf00      	nop
 8008ecc:	e7fe      	b.n	8008ecc <xTimerCreateStatic+0x4a>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 !e9087 StaticTimer_t is a pointer to a Timer_t, so guaranteed to be aligned and sized correctly (checked by an assert()), so this is safe. */
 8008ece:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ed0:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 8008ed2:	69fb      	ldr	r3, [r7, #28]
 8008ed4:	2b00      	cmp	r3, #0
 8008ed6:	d00d      	beq.n	8008ef4 <xTimerCreateStatic+0x72>
		{
			/* Timers can be created statically or dynamically so note this
			timer was created statically in case it is later deleted.  The
			auto-reload bit may get set in prvInitialiseNewTimer(). */
			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 8008ed8:	69fb      	ldr	r3, [r7, #28]
 8008eda:	2202      	movs	r2, #2
 8008edc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8008ee0:	69fb      	ldr	r3, [r7, #28]
 8008ee2:	9301      	str	r3, [sp, #4]
 8008ee4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ee6:	9300      	str	r3, [sp, #0]
 8008ee8:	683b      	ldr	r3, [r7, #0]
 8008eea:	687a      	ldr	r2, [r7, #4]
 8008eec:	68b9      	ldr	r1, [r7, #8]
 8008eee:	68f8      	ldr	r0, [r7, #12]
 8008ef0:	f000 f805 	bl	8008efe <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 8008ef4:	69fb      	ldr	r3, [r7, #28]
	}
 8008ef6:	4618      	mov	r0, r3
 8008ef8:	3720      	adds	r7, #32
 8008efa:	46bd      	mov	sp, r7
 8008efc:	bd80      	pop	{r7, pc}

08008efe <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 8008efe:	b580      	push	{r7, lr}
 8008f00:	b086      	sub	sp, #24
 8008f02:	af00      	add	r7, sp, #0
 8008f04:	60f8      	str	r0, [r7, #12]
 8008f06:	60b9      	str	r1, [r7, #8]
 8008f08:	607a      	str	r2, [r7, #4]
 8008f0a:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8008f0c:	68bb      	ldr	r3, [r7, #8]
 8008f0e:	2b00      	cmp	r3, #0
 8008f10:	d10a      	bne.n	8008f28 <prvInitialiseNewTimer+0x2a>
	__asm volatile
 8008f12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f16:	f383 8811 	msr	BASEPRI, r3
 8008f1a:	f3bf 8f6f 	isb	sy
 8008f1e:	f3bf 8f4f 	dsb	sy
 8008f22:	617b      	str	r3, [r7, #20]
}
 8008f24:	bf00      	nop
 8008f26:	e7fe      	b.n	8008f26 <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 8008f28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f2a:	2b00      	cmp	r3, #0
 8008f2c:	d01e      	beq.n	8008f6c <prvInitialiseNewTimer+0x6e>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 8008f2e:	f000 fae7 	bl	8009500 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 8008f32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f34:	68fa      	ldr	r2, [r7, #12]
 8008f36:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 8008f38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f3a:	68ba      	ldr	r2, [r7, #8]
 8008f3c:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 8008f3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f40:	683a      	ldr	r2, [r7, #0]
 8008f42:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8008f44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f46:	6a3a      	ldr	r2, [r7, #32]
 8008f48:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8008f4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f4c:	3304      	adds	r3, #4
 8008f4e:	4618      	mov	r0, r3
 8008f50:	f7fe faba 	bl	80074c8 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	d008      	beq.n	8008f6c <prvInitialiseNewTimer+0x6e>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 8008f5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f5c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008f60:	f043 0304 	orr.w	r3, r3, #4
 8008f64:	b2da      	uxtb	r2, r3
 8008f66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f68:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 8008f6c:	bf00      	nop
 8008f6e:	3718      	adds	r7, #24
 8008f70:	46bd      	mov	sp, r7
 8008f72:	bd80      	pop	{r7, pc}

08008f74 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8008f74:	b580      	push	{r7, lr}
 8008f76:	b08a      	sub	sp, #40	; 0x28
 8008f78:	af00      	add	r7, sp, #0
 8008f7a:	60f8      	str	r0, [r7, #12]
 8008f7c:	60b9      	str	r1, [r7, #8]
 8008f7e:	607a      	str	r2, [r7, #4]
 8008f80:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8008f82:	2300      	movs	r3, #0
 8008f84:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8008f86:	68fb      	ldr	r3, [r7, #12]
 8008f88:	2b00      	cmp	r3, #0
 8008f8a:	d10a      	bne.n	8008fa2 <xTimerGenericCommand+0x2e>
	__asm volatile
 8008f8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f90:	f383 8811 	msr	BASEPRI, r3
 8008f94:	f3bf 8f6f 	isb	sy
 8008f98:	f3bf 8f4f 	dsb	sy
 8008f9c:	623b      	str	r3, [r7, #32]
}
 8008f9e:	bf00      	nop
 8008fa0:	e7fe      	b.n	8008fa0 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8008fa2:	4b1a      	ldr	r3, [pc, #104]	; (800900c <xTimerGenericCommand+0x98>)
 8008fa4:	681b      	ldr	r3, [r3, #0]
 8008fa6:	2b00      	cmp	r3, #0
 8008fa8:	d02a      	beq.n	8009000 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8008faa:	68bb      	ldr	r3, [r7, #8]
 8008fac:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8008fb2:	68fb      	ldr	r3, [r7, #12]
 8008fb4:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8008fb6:	68bb      	ldr	r3, [r7, #8]
 8008fb8:	2b05      	cmp	r3, #5
 8008fba:	dc18      	bgt.n	8008fee <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8008fbc:	f7ff fe18 	bl	8008bf0 <xTaskGetSchedulerState>
 8008fc0:	4603      	mov	r3, r0
 8008fc2:	2b02      	cmp	r3, #2
 8008fc4:	d109      	bne.n	8008fda <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8008fc6:	4b11      	ldr	r3, [pc, #68]	; (800900c <xTimerGenericCommand+0x98>)
 8008fc8:	6818      	ldr	r0, [r3, #0]
 8008fca:	f107 0110 	add.w	r1, r7, #16
 8008fce:	2300      	movs	r3, #0
 8008fd0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008fd2:	f7fe fc11 	bl	80077f8 <xQueueGenericSend>
 8008fd6:	6278      	str	r0, [r7, #36]	; 0x24
 8008fd8:	e012      	b.n	8009000 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8008fda:	4b0c      	ldr	r3, [pc, #48]	; (800900c <xTimerGenericCommand+0x98>)
 8008fdc:	6818      	ldr	r0, [r3, #0]
 8008fde:	f107 0110 	add.w	r1, r7, #16
 8008fe2:	2300      	movs	r3, #0
 8008fe4:	2200      	movs	r2, #0
 8008fe6:	f7fe fc07 	bl	80077f8 <xQueueGenericSend>
 8008fea:	6278      	str	r0, [r7, #36]	; 0x24
 8008fec:	e008      	b.n	8009000 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8008fee:	4b07      	ldr	r3, [pc, #28]	; (800900c <xTimerGenericCommand+0x98>)
 8008ff0:	6818      	ldr	r0, [r3, #0]
 8008ff2:	f107 0110 	add.w	r1, r7, #16
 8008ff6:	2300      	movs	r3, #0
 8008ff8:	683a      	ldr	r2, [r7, #0]
 8008ffa:	f7fe fcfb 	bl	80079f4 <xQueueGenericSendFromISR>
 8008ffe:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8009000:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009002:	4618      	mov	r0, r3
 8009004:	3728      	adds	r7, #40	; 0x28
 8009006:	46bd      	mov	sp, r7
 8009008:	bd80      	pop	{r7, pc}
 800900a:	bf00      	nop
 800900c:	20002520 	.word	0x20002520

08009010 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8009010:	b580      	push	{r7, lr}
 8009012:	b088      	sub	sp, #32
 8009014:	af02      	add	r7, sp, #8
 8009016:	6078      	str	r0, [r7, #4]
 8009018:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800901a:	4b22      	ldr	r3, [pc, #136]	; (80090a4 <prvProcessExpiredTimer+0x94>)
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	68db      	ldr	r3, [r3, #12]
 8009020:	68db      	ldr	r3, [r3, #12]
 8009022:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009024:	697b      	ldr	r3, [r7, #20]
 8009026:	3304      	adds	r3, #4
 8009028:	4618      	mov	r0, r3
 800902a:	f7fe fab7 	bl	800759c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800902e:	697b      	ldr	r3, [r7, #20]
 8009030:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009034:	f003 0304 	and.w	r3, r3, #4
 8009038:	2b00      	cmp	r3, #0
 800903a:	d022      	beq.n	8009082 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800903c:	697b      	ldr	r3, [r7, #20]
 800903e:	699a      	ldr	r2, [r3, #24]
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	18d1      	adds	r1, r2, r3
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	683a      	ldr	r2, [r7, #0]
 8009048:	6978      	ldr	r0, [r7, #20]
 800904a:	f000 f8d1 	bl	80091f0 <prvInsertTimerInActiveList>
 800904e:	4603      	mov	r3, r0
 8009050:	2b00      	cmp	r3, #0
 8009052:	d01f      	beq.n	8009094 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009054:	2300      	movs	r3, #0
 8009056:	9300      	str	r3, [sp, #0]
 8009058:	2300      	movs	r3, #0
 800905a:	687a      	ldr	r2, [r7, #4]
 800905c:	2100      	movs	r1, #0
 800905e:	6978      	ldr	r0, [r7, #20]
 8009060:	f7ff ff88 	bl	8008f74 <xTimerGenericCommand>
 8009064:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8009066:	693b      	ldr	r3, [r7, #16]
 8009068:	2b00      	cmp	r3, #0
 800906a:	d113      	bne.n	8009094 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800906c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009070:	f383 8811 	msr	BASEPRI, r3
 8009074:	f3bf 8f6f 	isb	sy
 8009078:	f3bf 8f4f 	dsb	sy
 800907c:	60fb      	str	r3, [r7, #12]
}
 800907e:	bf00      	nop
 8009080:	e7fe      	b.n	8009080 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009082:	697b      	ldr	r3, [r7, #20]
 8009084:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009088:	f023 0301 	bic.w	r3, r3, #1
 800908c:	b2da      	uxtb	r2, r3
 800908e:	697b      	ldr	r3, [r7, #20]
 8009090:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009094:	697b      	ldr	r3, [r7, #20]
 8009096:	6a1b      	ldr	r3, [r3, #32]
 8009098:	6978      	ldr	r0, [r7, #20]
 800909a:	4798      	blx	r3
}
 800909c:	bf00      	nop
 800909e:	3718      	adds	r7, #24
 80090a0:	46bd      	mov	sp, r7
 80090a2:	bd80      	pop	{r7, pc}
 80090a4:	20002518 	.word	0x20002518

080090a8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80090a8:	b580      	push	{r7, lr}
 80090aa:	b084      	sub	sp, #16
 80090ac:	af00      	add	r7, sp, #0
 80090ae:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80090b0:	f107 0308 	add.w	r3, r7, #8
 80090b4:	4618      	mov	r0, r3
 80090b6:	f000 f857 	bl	8009168 <prvGetNextExpireTime>
 80090ba:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80090bc:	68bb      	ldr	r3, [r7, #8]
 80090be:	4619      	mov	r1, r3
 80090c0:	68f8      	ldr	r0, [r7, #12]
 80090c2:	f000 f803 	bl	80090cc <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80090c6:	f000 f8d5 	bl	8009274 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80090ca:	e7f1      	b.n	80090b0 <prvTimerTask+0x8>

080090cc <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80090cc:	b580      	push	{r7, lr}
 80090ce:	b084      	sub	sp, #16
 80090d0:	af00      	add	r7, sp, #0
 80090d2:	6078      	str	r0, [r7, #4]
 80090d4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80090d6:	f7ff f99f 	bl	8008418 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80090da:	f107 0308 	add.w	r3, r7, #8
 80090de:	4618      	mov	r0, r3
 80090e0:	f000 f866 	bl	80091b0 <prvSampleTimeNow>
 80090e4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80090e6:	68bb      	ldr	r3, [r7, #8]
 80090e8:	2b00      	cmp	r3, #0
 80090ea:	d130      	bne.n	800914e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80090ec:	683b      	ldr	r3, [r7, #0]
 80090ee:	2b00      	cmp	r3, #0
 80090f0:	d10a      	bne.n	8009108 <prvProcessTimerOrBlockTask+0x3c>
 80090f2:	687a      	ldr	r2, [r7, #4]
 80090f4:	68fb      	ldr	r3, [r7, #12]
 80090f6:	429a      	cmp	r2, r3
 80090f8:	d806      	bhi.n	8009108 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80090fa:	f7ff f99b 	bl	8008434 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80090fe:	68f9      	ldr	r1, [r7, #12]
 8009100:	6878      	ldr	r0, [r7, #4]
 8009102:	f7ff ff85 	bl	8009010 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8009106:	e024      	b.n	8009152 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8009108:	683b      	ldr	r3, [r7, #0]
 800910a:	2b00      	cmp	r3, #0
 800910c:	d008      	beq.n	8009120 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800910e:	4b13      	ldr	r3, [pc, #76]	; (800915c <prvProcessTimerOrBlockTask+0x90>)
 8009110:	681b      	ldr	r3, [r3, #0]
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	2b00      	cmp	r3, #0
 8009116:	d101      	bne.n	800911c <prvProcessTimerOrBlockTask+0x50>
 8009118:	2301      	movs	r3, #1
 800911a:	e000      	b.n	800911e <prvProcessTimerOrBlockTask+0x52>
 800911c:	2300      	movs	r3, #0
 800911e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8009120:	4b0f      	ldr	r3, [pc, #60]	; (8009160 <prvProcessTimerOrBlockTask+0x94>)
 8009122:	6818      	ldr	r0, [r3, #0]
 8009124:	687a      	ldr	r2, [r7, #4]
 8009126:	68fb      	ldr	r3, [r7, #12]
 8009128:	1ad3      	subs	r3, r2, r3
 800912a:	683a      	ldr	r2, [r7, #0]
 800912c:	4619      	mov	r1, r3
 800912e:	f7fe ff17 	bl	8007f60 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8009132:	f7ff f97f 	bl	8008434 <xTaskResumeAll>
 8009136:	4603      	mov	r3, r0
 8009138:	2b00      	cmp	r3, #0
 800913a:	d10a      	bne.n	8009152 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800913c:	4b09      	ldr	r3, [pc, #36]	; (8009164 <prvProcessTimerOrBlockTask+0x98>)
 800913e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009142:	601a      	str	r2, [r3, #0]
 8009144:	f3bf 8f4f 	dsb	sy
 8009148:	f3bf 8f6f 	isb	sy
}
 800914c:	e001      	b.n	8009152 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800914e:	f7ff f971 	bl	8008434 <xTaskResumeAll>
}
 8009152:	bf00      	nop
 8009154:	3710      	adds	r7, #16
 8009156:	46bd      	mov	sp, r7
 8009158:	bd80      	pop	{r7, pc}
 800915a:	bf00      	nop
 800915c:	2000251c 	.word	0x2000251c
 8009160:	20002520 	.word	0x20002520
 8009164:	e000ed04 	.word	0xe000ed04

08009168 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8009168:	b480      	push	{r7}
 800916a:	b085      	sub	sp, #20
 800916c:	af00      	add	r7, sp, #0
 800916e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8009170:	4b0e      	ldr	r3, [pc, #56]	; (80091ac <prvGetNextExpireTime+0x44>)
 8009172:	681b      	ldr	r3, [r3, #0]
 8009174:	681b      	ldr	r3, [r3, #0]
 8009176:	2b00      	cmp	r3, #0
 8009178:	d101      	bne.n	800917e <prvGetNextExpireTime+0x16>
 800917a:	2201      	movs	r2, #1
 800917c:	e000      	b.n	8009180 <prvGetNextExpireTime+0x18>
 800917e:	2200      	movs	r2, #0
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	681b      	ldr	r3, [r3, #0]
 8009188:	2b00      	cmp	r3, #0
 800918a:	d105      	bne.n	8009198 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800918c:	4b07      	ldr	r3, [pc, #28]	; (80091ac <prvGetNextExpireTime+0x44>)
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	68db      	ldr	r3, [r3, #12]
 8009192:	681b      	ldr	r3, [r3, #0]
 8009194:	60fb      	str	r3, [r7, #12]
 8009196:	e001      	b.n	800919c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8009198:	2300      	movs	r3, #0
 800919a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800919c:	68fb      	ldr	r3, [r7, #12]
}
 800919e:	4618      	mov	r0, r3
 80091a0:	3714      	adds	r7, #20
 80091a2:	46bd      	mov	sp, r7
 80091a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091a8:	4770      	bx	lr
 80091aa:	bf00      	nop
 80091ac:	20002518 	.word	0x20002518

080091b0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80091b0:	b580      	push	{r7, lr}
 80091b2:	b084      	sub	sp, #16
 80091b4:	af00      	add	r7, sp, #0
 80091b6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80091b8:	f7ff f9da 	bl	8008570 <xTaskGetTickCount>
 80091bc:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80091be:	4b0b      	ldr	r3, [pc, #44]	; (80091ec <prvSampleTimeNow+0x3c>)
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	68fa      	ldr	r2, [r7, #12]
 80091c4:	429a      	cmp	r2, r3
 80091c6:	d205      	bcs.n	80091d4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80091c8:	f000 f936 	bl	8009438 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	2201      	movs	r2, #1
 80091d0:	601a      	str	r2, [r3, #0]
 80091d2:	e002      	b.n	80091da <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	2200      	movs	r2, #0
 80091d8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80091da:	4a04      	ldr	r2, [pc, #16]	; (80091ec <prvSampleTimeNow+0x3c>)
 80091dc:	68fb      	ldr	r3, [r7, #12]
 80091de:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80091e0:	68fb      	ldr	r3, [r7, #12]
}
 80091e2:	4618      	mov	r0, r3
 80091e4:	3710      	adds	r7, #16
 80091e6:	46bd      	mov	sp, r7
 80091e8:	bd80      	pop	{r7, pc}
 80091ea:	bf00      	nop
 80091ec:	20002528 	.word	0x20002528

080091f0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80091f0:	b580      	push	{r7, lr}
 80091f2:	b086      	sub	sp, #24
 80091f4:	af00      	add	r7, sp, #0
 80091f6:	60f8      	str	r0, [r7, #12]
 80091f8:	60b9      	str	r1, [r7, #8]
 80091fa:	607a      	str	r2, [r7, #4]
 80091fc:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80091fe:	2300      	movs	r3, #0
 8009200:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8009202:	68fb      	ldr	r3, [r7, #12]
 8009204:	68ba      	ldr	r2, [r7, #8]
 8009206:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009208:	68fb      	ldr	r3, [r7, #12]
 800920a:	68fa      	ldr	r2, [r7, #12]
 800920c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800920e:	68ba      	ldr	r2, [r7, #8]
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	429a      	cmp	r2, r3
 8009214:	d812      	bhi.n	800923c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009216:	687a      	ldr	r2, [r7, #4]
 8009218:	683b      	ldr	r3, [r7, #0]
 800921a:	1ad2      	subs	r2, r2, r3
 800921c:	68fb      	ldr	r3, [r7, #12]
 800921e:	699b      	ldr	r3, [r3, #24]
 8009220:	429a      	cmp	r2, r3
 8009222:	d302      	bcc.n	800922a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8009224:	2301      	movs	r3, #1
 8009226:	617b      	str	r3, [r7, #20]
 8009228:	e01b      	b.n	8009262 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800922a:	4b10      	ldr	r3, [pc, #64]	; (800926c <prvInsertTimerInActiveList+0x7c>)
 800922c:	681a      	ldr	r2, [r3, #0]
 800922e:	68fb      	ldr	r3, [r7, #12]
 8009230:	3304      	adds	r3, #4
 8009232:	4619      	mov	r1, r3
 8009234:	4610      	mov	r0, r2
 8009236:	f7fe f978 	bl	800752a <vListInsert>
 800923a:	e012      	b.n	8009262 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800923c:	687a      	ldr	r2, [r7, #4]
 800923e:	683b      	ldr	r3, [r7, #0]
 8009240:	429a      	cmp	r2, r3
 8009242:	d206      	bcs.n	8009252 <prvInsertTimerInActiveList+0x62>
 8009244:	68ba      	ldr	r2, [r7, #8]
 8009246:	683b      	ldr	r3, [r7, #0]
 8009248:	429a      	cmp	r2, r3
 800924a:	d302      	bcc.n	8009252 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800924c:	2301      	movs	r3, #1
 800924e:	617b      	str	r3, [r7, #20]
 8009250:	e007      	b.n	8009262 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009252:	4b07      	ldr	r3, [pc, #28]	; (8009270 <prvInsertTimerInActiveList+0x80>)
 8009254:	681a      	ldr	r2, [r3, #0]
 8009256:	68fb      	ldr	r3, [r7, #12]
 8009258:	3304      	adds	r3, #4
 800925a:	4619      	mov	r1, r3
 800925c:	4610      	mov	r0, r2
 800925e:	f7fe f964 	bl	800752a <vListInsert>
		}
	}

	return xProcessTimerNow;
 8009262:	697b      	ldr	r3, [r7, #20]
}
 8009264:	4618      	mov	r0, r3
 8009266:	3718      	adds	r7, #24
 8009268:	46bd      	mov	sp, r7
 800926a:	bd80      	pop	{r7, pc}
 800926c:	2000251c 	.word	0x2000251c
 8009270:	20002518 	.word	0x20002518

08009274 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8009274:	b580      	push	{r7, lr}
 8009276:	b08e      	sub	sp, #56	; 0x38
 8009278:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800927a:	e0ca      	b.n	8009412 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	2b00      	cmp	r3, #0
 8009280:	da18      	bge.n	80092b4 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8009282:	1d3b      	adds	r3, r7, #4
 8009284:	3304      	adds	r3, #4
 8009286:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8009288:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800928a:	2b00      	cmp	r3, #0
 800928c:	d10a      	bne.n	80092a4 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800928e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009292:	f383 8811 	msr	BASEPRI, r3
 8009296:	f3bf 8f6f 	isb	sy
 800929a:	f3bf 8f4f 	dsb	sy
 800929e:	61fb      	str	r3, [r7, #28]
}
 80092a0:	bf00      	nop
 80092a2:	e7fe      	b.n	80092a2 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80092a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092a6:	681b      	ldr	r3, [r3, #0]
 80092a8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80092aa:	6850      	ldr	r0, [r2, #4]
 80092ac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80092ae:	6892      	ldr	r2, [r2, #8]
 80092b0:	4611      	mov	r1, r2
 80092b2:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	2b00      	cmp	r3, #0
 80092b8:	f2c0 80aa 	blt.w	8009410 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80092bc:	68fb      	ldr	r3, [r7, #12]
 80092be:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80092c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092c2:	695b      	ldr	r3, [r3, #20]
 80092c4:	2b00      	cmp	r3, #0
 80092c6:	d004      	beq.n	80092d2 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80092c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092ca:	3304      	adds	r3, #4
 80092cc:	4618      	mov	r0, r3
 80092ce:	f7fe f965 	bl	800759c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80092d2:	463b      	mov	r3, r7
 80092d4:	4618      	mov	r0, r3
 80092d6:	f7ff ff6b 	bl	80091b0 <prvSampleTimeNow>
 80092da:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	2b09      	cmp	r3, #9
 80092e0:	f200 8097 	bhi.w	8009412 <prvProcessReceivedCommands+0x19e>
 80092e4:	a201      	add	r2, pc, #4	; (adr r2, 80092ec <prvProcessReceivedCommands+0x78>)
 80092e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80092ea:	bf00      	nop
 80092ec:	08009315 	.word	0x08009315
 80092f0:	08009315 	.word	0x08009315
 80092f4:	08009315 	.word	0x08009315
 80092f8:	08009389 	.word	0x08009389
 80092fc:	0800939d 	.word	0x0800939d
 8009300:	080093e7 	.word	0x080093e7
 8009304:	08009315 	.word	0x08009315
 8009308:	08009315 	.word	0x08009315
 800930c:	08009389 	.word	0x08009389
 8009310:	0800939d 	.word	0x0800939d
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009314:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009316:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800931a:	f043 0301 	orr.w	r3, r3, #1
 800931e:	b2da      	uxtb	r2, r3
 8009320:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009322:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8009326:	68ba      	ldr	r2, [r7, #8]
 8009328:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800932a:	699b      	ldr	r3, [r3, #24]
 800932c:	18d1      	adds	r1, r2, r3
 800932e:	68bb      	ldr	r3, [r7, #8]
 8009330:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009332:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009334:	f7ff ff5c 	bl	80091f0 <prvInsertTimerInActiveList>
 8009338:	4603      	mov	r3, r0
 800933a:	2b00      	cmp	r3, #0
 800933c:	d069      	beq.n	8009412 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800933e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009340:	6a1b      	ldr	r3, [r3, #32]
 8009342:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009344:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009346:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009348:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800934c:	f003 0304 	and.w	r3, r3, #4
 8009350:	2b00      	cmp	r3, #0
 8009352:	d05e      	beq.n	8009412 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8009354:	68ba      	ldr	r2, [r7, #8]
 8009356:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009358:	699b      	ldr	r3, [r3, #24]
 800935a:	441a      	add	r2, r3
 800935c:	2300      	movs	r3, #0
 800935e:	9300      	str	r3, [sp, #0]
 8009360:	2300      	movs	r3, #0
 8009362:	2100      	movs	r1, #0
 8009364:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009366:	f7ff fe05 	bl	8008f74 <xTimerGenericCommand>
 800936a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800936c:	6a3b      	ldr	r3, [r7, #32]
 800936e:	2b00      	cmp	r3, #0
 8009370:	d14f      	bne.n	8009412 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8009372:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009376:	f383 8811 	msr	BASEPRI, r3
 800937a:	f3bf 8f6f 	isb	sy
 800937e:	f3bf 8f4f 	dsb	sy
 8009382:	61bb      	str	r3, [r7, #24]
}
 8009384:	bf00      	nop
 8009386:	e7fe      	b.n	8009386 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009388:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800938a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800938e:	f023 0301 	bic.w	r3, r3, #1
 8009392:	b2da      	uxtb	r2, r3
 8009394:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009396:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800939a:	e03a      	b.n	8009412 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800939c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800939e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80093a2:	f043 0301 	orr.w	r3, r3, #1
 80093a6:	b2da      	uxtb	r2, r3
 80093a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093aa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80093ae:	68ba      	ldr	r2, [r7, #8]
 80093b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093b2:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80093b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093b6:	699b      	ldr	r3, [r3, #24]
 80093b8:	2b00      	cmp	r3, #0
 80093ba:	d10a      	bne.n	80093d2 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 80093bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093c0:	f383 8811 	msr	BASEPRI, r3
 80093c4:	f3bf 8f6f 	isb	sy
 80093c8:	f3bf 8f4f 	dsb	sy
 80093cc:	617b      	str	r3, [r7, #20]
}
 80093ce:	bf00      	nop
 80093d0:	e7fe      	b.n	80093d0 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80093d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093d4:	699a      	ldr	r2, [r3, #24]
 80093d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093d8:	18d1      	adds	r1, r2, r3
 80093da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80093de:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80093e0:	f7ff ff06 	bl	80091f0 <prvInsertTimerInActiveList>
					break;
 80093e4:	e015      	b.n	8009412 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80093e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093e8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80093ec:	f003 0302 	and.w	r3, r3, #2
 80093f0:	2b00      	cmp	r3, #0
 80093f2:	d103      	bne.n	80093fc <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 80093f4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80093f6:	f000 fbfb 	bl	8009bf0 <vPortFree>
 80093fa:	e00a      	b.n	8009412 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80093fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093fe:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009402:	f023 0301 	bic.w	r3, r3, #1
 8009406:	b2da      	uxtb	r2, r3
 8009408:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800940a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800940e:	e000      	b.n	8009412 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8009410:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009412:	4b08      	ldr	r3, [pc, #32]	; (8009434 <prvProcessReceivedCommands+0x1c0>)
 8009414:	681b      	ldr	r3, [r3, #0]
 8009416:	1d39      	adds	r1, r7, #4
 8009418:	2200      	movs	r2, #0
 800941a:	4618      	mov	r0, r3
 800941c:	f7fe fb86 	bl	8007b2c <xQueueReceive>
 8009420:	4603      	mov	r3, r0
 8009422:	2b00      	cmp	r3, #0
 8009424:	f47f af2a 	bne.w	800927c <prvProcessReceivedCommands+0x8>
	}
}
 8009428:	bf00      	nop
 800942a:	bf00      	nop
 800942c:	3730      	adds	r7, #48	; 0x30
 800942e:	46bd      	mov	sp, r7
 8009430:	bd80      	pop	{r7, pc}
 8009432:	bf00      	nop
 8009434:	20002520 	.word	0x20002520

08009438 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8009438:	b580      	push	{r7, lr}
 800943a:	b088      	sub	sp, #32
 800943c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800943e:	e048      	b.n	80094d2 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009440:	4b2d      	ldr	r3, [pc, #180]	; (80094f8 <prvSwitchTimerLists+0xc0>)
 8009442:	681b      	ldr	r3, [r3, #0]
 8009444:	68db      	ldr	r3, [r3, #12]
 8009446:	681b      	ldr	r3, [r3, #0]
 8009448:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800944a:	4b2b      	ldr	r3, [pc, #172]	; (80094f8 <prvSwitchTimerLists+0xc0>)
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	68db      	ldr	r3, [r3, #12]
 8009450:	68db      	ldr	r3, [r3, #12]
 8009452:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009454:	68fb      	ldr	r3, [r7, #12]
 8009456:	3304      	adds	r3, #4
 8009458:	4618      	mov	r0, r3
 800945a:	f7fe f89f 	bl	800759c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800945e:	68fb      	ldr	r3, [r7, #12]
 8009460:	6a1b      	ldr	r3, [r3, #32]
 8009462:	68f8      	ldr	r0, [r7, #12]
 8009464:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009466:	68fb      	ldr	r3, [r7, #12]
 8009468:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800946c:	f003 0304 	and.w	r3, r3, #4
 8009470:	2b00      	cmp	r3, #0
 8009472:	d02e      	beq.n	80094d2 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8009474:	68fb      	ldr	r3, [r7, #12]
 8009476:	699b      	ldr	r3, [r3, #24]
 8009478:	693a      	ldr	r2, [r7, #16]
 800947a:	4413      	add	r3, r2
 800947c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800947e:	68ba      	ldr	r2, [r7, #8]
 8009480:	693b      	ldr	r3, [r7, #16]
 8009482:	429a      	cmp	r2, r3
 8009484:	d90e      	bls.n	80094a4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8009486:	68fb      	ldr	r3, [r7, #12]
 8009488:	68ba      	ldr	r2, [r7, #8]
 800948a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800948c:	68fb      	ldr	r3, [r7, #12]
 800948e:	68fa      	ldr	r2, [r7, #12]
 8009490:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009492:	4b19      	ldr	r3, [pc, #100]	; (80094f8 <prvSwitchTimerLists+0xc0>)
 8009494:	681a      	ldr	r2, [r3, #0]
 8009496:	68fb      	ldr	r3, [r7, #12]
 8009498:	3304      	adds	r3, #4
 800949a:	4619      	mov	r1, r3
 800949c:	4610      	mov	r0, r2
 800949e:	f7fe f844 	bl	800752a <vListInsert>
 80094a2:	e016      	b.n	80094d2 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80094a4:	2300      	movs	r3, #0
 80094a6:	9300      	str	r3, [sp, #0]
 80094a8:	2300      	movs	r3, #0
 80094aa:	693a      	ldr	r2, [r7, #16]
 80094ac:	2100      	movs	r1, #0
 80094ae:	68f8      	ldr	r0, [r7, #12]
 80094b0:	f7ff fd60 	bl	8008f74 <xTimerGenericCommand>
 80094b4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	2b00      	cmp	r3, #0
 80094ba:	d10a      	bne.n	80094d2 <prvSwitchTimerLists+0x9a>
	__asm volatile
 80094bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094c0:	f383 8811 	msr	BASEPRI, r3
 80094c4:	f3bf 8f6f 	isb	sy
 80094c8:	f3bf 8f4f 	dsb	sy
 80094cc:	603b      	str	r3, [r7, #0]
}
 80094ce:	bf00      	nop
 80094d0:	e7fe      	b.n	80094d0 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80094d2:	4b09      	ldr	r3, [pc, #36]	; (80094f8 <prvSwitchTimerLists+0xc0>)
 80094d4:	681b      	ldr	r3, [r3, #0]
 80094d6:	681b      	ldr	r3, [r3, #0]
 80094d8:	2b00      	cmp	r3, #0
 80094da:	d1b1      	bne.n	8009440 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80094dc:	4b06      	ldr	r3, [pc, #24]	; (80094f8 <prvSwitchTimerLists+0xc0>)
 80094de:	681b      	ldr	r3, [r3, #0]
 80094e0:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80094e2:	4b06      	ldr	r3, [pc, #24]	; (80094fc <prvSwitchTimerLists+0xc4>)
 80094e4:	681b      	ldr	r3, [r3, #0]
 80094e6:	4a04      	ldr	r2, [pc, #16]	; (80094f8 <prvSwitchTimerLists+0xc0>)
 80094e8:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80094ea:	4a04      	ldr	r2, [pc, #16]	; (80094fc <prvSwitchTimerLists+0xc4>)
 80094ec:	697b      	ldr	r3, [r7, #20]
 80094ee:	6013      	str	r3, [r2, #0]
}
 80094f0:	bf00      	nop
 80094f2:	3718      	adds	r7, #24
 80094f4:	46bd      	mov	sp, r7
 80094f6:	bd80      	pop	{r7, pc}
 80094f8:	20002518 	.word	0x20002518
 80094fc:	2000251c 	.word	0x2000251c

08009500 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8009500:	b580      	push	{r7, lr}
 8009502:	b082      	sub	sp, #8
 8009504:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8009506:	f000 f985 	bl	8009814 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800950a:	4b15      	ldr	r3, [pc, #84]	; (8009560 <prvCheckForValidListAndQueue+0x60>)
 800950c:	681b      	ldr	r3, [r3, #0]
 800950e:	2b00      	cmp	r3, #0
 8009510:	d120      	bne.n	8009554 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8009512:	4814      	ldr	r0, [pc, #80]	; (8009564 <prvCheckForValidListAndQueue+0x64>)
 8009514:	f7fd ffb8 	bl	8007488 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8009518:	4813      	ldr	r0, [pc, #76]	; (8009568 <prvCheckForValidListAndQueue+0x68>)
 800951a:	f7fd ffb5 	bl	8007488 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800951e:	4b13      	ldr	r3, [pc, #76]	; (800956c <prvCheckForValidListAndQueue+0x6c>)
 8009520:	4a10      	ldr	r2, [pc, #64]	; (8009564 <prvCheckForValidListAndQueue+0x64>)
 8009522:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8009524:	4b12      	ldr	r3, [pc, #72]	; (8009570 <prvCheckForValidListAndQueue+0x70>)
 8009526:	4a10      	ldr	r2, [pc, #64]	; (8009568 <prvCheckForValidListAndQueue+0x68>)
 8009528:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800952a:	2300      	movs	r3, #0
 800952c:	9300      	str	r3, [sp, #0]
 800952e:	4b11      	ldr	r3, [pc, #68]	; (8009574 <prvCheckForValidListAndQueue+0x74>)
 8009530:	4a11      	ldr	r2, [pc, #68]	; (8009578 <prvCheckForValidListAndQueue+0x78>)
 8009532:	2110      	movs	r1, #16
 8009534:	200a      	movs	r0, #10
 8009536:	f7fe f8c3 	bl	80076c0 <xQueueGenericCreateStatic>
 800953a:	4603      	mov	r3, r0
 800953c:	4a08      	ldr	r2, [pc, #32]	; (8009560 <prvCheckForValidListAndQueue+0x60>)
 800953e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8009540:	4b07      	ldr	r3, [pc, #28]	; (8009560 <prvCheckForValidListAndQueue+0x60>)
 8009542:	681b      	ldr	r3, [r3, #0]
 8009544:	2b00      	cmp	r3, #0
 8009546:	d005      	beq.n	8009554 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8009548:	4b05      	ldr	r3, [pc, #20]	; (8009560 <prvCheckForValidListAndQueue+0x60>)
 800954a:	681b      	ldr	r3, [r3, #0]
 800954c:	490b      	ldr	r1, [pc, #44]	; (800957c <prvCheckForValidListAndQueue+0x7c>)
 800954e:	4618      	mov	r0, r3
 8009550:	f7fe fcdc 	bl	8007f0c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009554:	f000 f98e 	bl	8009874 <vPortExitCritical>
}
 8009558:	bf00      	nop
 800955a:	46bd      	mov	sp, r7
 800955c:	bd80      	pop	{r7, pc}
 800955e:	bf00      	nop
 8009560:	20002520 	.word	0x20002520
 8009564:	200024f0 	.word	0x200024f0
 8009568:	20002504 	.word	0x20002504
 800956c:	20002518 	.word	0x20002518
 8009570:	2000251c 	.word	0x2000251c
 8009574:	200025cc 	.word	0x200025cc
 8009578:	2000252c 	.word	0x2000252c
 800957c:	0800c034 	.word	0x0800c034

08009580 <pvTimerGetTimerID>:
	return xReturn;
} /*lint !e818 Can't be pointer to const due to the typedef. */
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 8009580:	b580      	push	{r7, lr}
 8009582:	b086      	sub	sp, #24
 8009584:	af00      	add	r7, sp, #0
 8009586:	6078      	str	r0, [r7, #4]
Timer_t * const pxTimer = xTimer;
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	617b      	str	r3, [r7, #20]
void *pvReturn;

	configASSERT( xTimer );
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	2b00      	cmp	r3, #0
 8009590:	d10a      	bne.n	80095a8 <pvTimerGetTimerID+0x28>
	__asm volatile
 8009592:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009596:	f383 8811 	msr	BASEPRI, r3
 800959a:	f3bf 8f6f 	isb	sy
 800959e:	f3bf 8f4f 	dsb	sy
 80095a2:	60fb      	str	r3, [r7, #12]
}
 80095a4:	bf00      	nop
 80095a6:	e7fe      	b.n	80095a6 <pvTimerGetTimerID+0x26>

	taskENTER_CRITICAL();
 80095a8:	f000 f934 	bl	8009814 <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 80095ac:	697b      	ldr	r3, [r7, #20]
 80095ae:	69db      	ldr	r3, [r3, #28]
 80095b0:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 80095b2:	f000 f95f 	bl	8009874 <vPortExitCritical>

	return pvReturn;
 80095b6:	693b      	ldr	r3, [r7, #16]
}
 80095b8:	4618      	mov	r0, r3
 80095ba:	3718      	adds	r7, #24
 80095bc:	46bd      	mov	sp, r7
 80095be:	bd80      	pop	{r7, pc}

080095c0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80095c0:	b480      	push	{r7}
 80095c2:	b085      	sub	sp, #20
 80095c4:	af00      	add	r7, sp, #0
 80095c6:	60f8      	str	r0, [r7, #12]
 80095c8:	60b9      	str	r1, [r7, #8]
 80095ca:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80095cc:	68fb      	ldr	r3, [r7, #12]
 80095ce:	3b04      	subs	r3, #4
 80095d0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80095d2:	68fb      	ldr	r3, [r7, #12]
 80095d4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80095d8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80095da:	68fb      	ldr	r3, [r7, #12]
 80095dc:	3b04      	subs	r3, #4
 80095de:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80095e0:	68bb      	ldr	r3, [r7, #8]
 80095e2:	f023 0201 	bic.w	r2, r3, #1
 80095e6:	68fb      	ldr	r3, [r7, #12]
 80095e8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80095ea:	68fb      	ldr	r3, [r7, #12]
 80095ec:	3b04      	subs	r3, #4
 80095ee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80095f0:	4a0c      	ldr	r2, [pc, #48]	; (8009624 <pxPortInitialiseStack+0x64>)
 80095f2:	68fb      	ldr	r3, [r7, #12]
 80095f4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80095f6:	68fb      	ldr	r3, [r7, #12]
 80095f8:	3b14      	subs	r3, #20
 80095fa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80095fc:	687a      	ldr	r2, [r7, #4]
 80095fe:	68fb      	ldr	r3, [r7, #12]
 8009600:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8009602:	68fb      	ldr	r3, [r7, #12]
 8009604:	3b04      	subs	r3, #4
 8009606:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8009608:	68fb      	ldr	r3, [r7, #12]
 800960a:	f06f 0202 	mvn.w	r2, #2
 800960e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8009610:	68fb      	ldr	r3, [r7, #12]
 8009612:	3b20      	subs	r3, #32
 8009614:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8009616:	68fb      	ldr	r3, [r7, #12]
}
 8009618:	4618      	mov	r0, r3
 800961a:	3714      	adds	r7, #20
 800961c:	46bd      	mov	sp, r7
 800961e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009622:	4770      	bx	lr
 8009624:	08009629 	.word	0x08009629

08009628 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009628:	b480      	push	{r7}
 800962a:	b085      	sub	sp, #20
 800962c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800962e:	2300      	movs	r3, #0
 8009630:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8009632:	4b12      	ldr	r3, [pc, #72]	; (800967c <prvTaskExitError+0x54>)
 8009634:	681b      	ldr	r3, [r3, #0]
 8009636:	f1b3 3fff 	cmp.w	r3, #4294967295
 800963a:	d00a      	beq.n	8009652 <prvTaskExitError+0x2a>
	__asm volatile
 800963c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009640:	f383 8811 	msr	BASEPRI, r3
 8009644:	f3bf 8f6f 	isb	sy
 8009648:	f3bf 8f4f 	dsb	sy
 800964c:	60fb      	str	r3, [r7, #12]
}
 800964e:	bf00      	nop
 8009650:	e7fe      	b.n	8009650 <prvTaskExitError+0x28>
	__asm volatile
 8009652:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009656:	f383 8811 	msr	BASEPRI, r3
 800965a:	f3bf 8f6f 	isb	sy
 800965e:	f3bf 8f4f 	dsb	sy
 8009662:	60bb      	str	r3, [r7, #8]
}
 8009664:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8009666:	bf00      	nop
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	2b00      	cmp	r3, #0
 800966c:	d0fc      	beq.n	8009668 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800966e:	bf00      	nop
 8009670:	bf00      	nop
 8009672:	3714      	adds	r7, #20
 8009674:	46bd      	mov	sp, r7
 8009676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800967a:	4770      	bx	lr
 800967c:	2000000c 	.word	0x2000000c

08009680 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009680:	4b07      	ldr	r3, [pc, #28]	; (80096a0 <pxCurrentTCBConst2>)
 8009682:	6819      	ldr	r1, [r3, #0]
 8009684:	6808      	ldr	r0, [r1, #0]
 8009686:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800968a:	f380 8809 	msr	PSP, r0
 800968e:	f3bf 8f6f 	isb	sy
 8009692:	f04f 0000 	mov.w	r0, #0
 8009696:	f380 8811 	msr	BASEPRI, r0
 800969a:	4770      	bx	lr
 800969c:	f3af 8000 	nop.w

080096a0 <pxCurrentTCBConst2>:
 80096a0:	20001ff0 	.word	0x20001ff0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80096a4:	bf00      	nop
 80096a6:	bf00      	nop

080096a8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80096a8:	4808      	ldr	r0, [pc, #32]	; (80096cc <prvPortStartFirstTask+0x24>)
 80096aa:	6800      	ldr	r0, [r0, #0]
 80096ac:	6800      	ldr	r0, [r0, #0]
 80096ae:	f380 8808 	msr	MSP, r0
 80096b2:	f04f 0000 	mov.w	r0, #0
 80096b6:	f380 8814 	msr	CONTROL, r0
 80096ba:	b662      	cpsie	i
 80096bc:	b661      	cpsie	f
 80096be:	f3bf 8f4f 	dsb	sy
 80096c2:	f3bf 8f6f 	isb	sy
 80096c6:	df00      	svc	0
 80096c8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80096ca:	bf00      	nop
 80096cc:	e000ed08 	.word	0xe000ed08

080096d0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80096d0:	b580      	push	{r7, lr}
 80096d2:	b086      	sub	sp, #24
 80096d4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80096d6:	4b46      	ldr	r3, [pc, #280]	; (80097f0 <xPortStartScheduler+0x120>)
 80096d8:	681b      	ldr	r3, [r3, #0]
 80096da:	4a46      	ldr	r2, [pc, #280]	; (80097f4 <xPortStartScheduler+0x124>)
 80096dc:	4293      	cmp	r3, r2
 80096de:	d10a      	bne.n	80096f6 <xPortStartScheduler+0x26>
	__asm volatile
 80096e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096e4:	f383 8811 	msr	BASEPRI, r3
 80096e8:	f3bf 8f6f 	isb	sy
 80096ec:	f3bf 8f4f 	dsb	sy
 80096f0:	613b      	str	r3, [r7, #16]
}
 80096f2:	bf00      	nop
 80096f4:	e7fe      	b.n	80096f4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80096f6:	4b3e      	ldr	r3, [pc, #248]	; (80097f0 <xPortStartScheduler+0x120>)
 80096f8:	681b      	ldr	r3, [r3, #0]
 80096fa:	4a3f      	ldr	r2, [pc, #252]	; (80097f8 <xPortStartScheduler+0x128>)
 80096fc:	4293      	cmp	r3, r2
 80096fe:	d10a      	bne.n	8009716 <xPortStartScheduler+0x46>
	__asm volatile
 8009700:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009704:	f383 8811 	msr	BASEPRI, r3
 8009708:	f3bf 8f6f 	isb	sy
 800970c:	f3bf 8f4f 	dsb	sy
 8009710:	60fb      	str	r3, [r7, #12]
}
 8009712:	bf00      	nop
 8009714:	e7fe      	b.n	8009714 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8009716:	4b39      	ldr	r3, [pc, #228]	; (80097fc <xPortStartScheduler+0x12c>)
 8009718:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800971a:	697b      	ldr	r3, [r7, #20]
 800971c:	781b      	ldrb	r3, [r3, #0]
 800971e:	b2db      	uxtb	r3, r3
 8009720:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009722:	697b      	ldr	r3, [r7, #20]
 8009724:	22ff      	movs	r2, #255	; 0xff
 8009726:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009728:	697b      	ldr	r3, [r7, #20]
 800972a:	781b      	ldrb	r3, [r3, #0]
 800972c:	b2db      	uxtb	r3, r3
 800972e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009730:	78fb      	ldrb	r3, [r7, #3]
 8009732:	b2db      	uxtb	r3, r3
 8009734:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8009738:	b2da      	uxtb	r2, r3
 800973a:	4b31      	ldr	r3, [pc, #196]	; (8009800 <xPortStartScheduler+0x130>)
 800973c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800973e:	4b31      	ldr	r3, [pc, #196]	; (8009804 <xPortStartScheduler+0x134>)
 8009740:	2207      	movs	r2, #7
 8009742:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009744:	e009      	b.n	800975a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8009746:	4b2f      	ldr	r3, [pc, #188]	; (8009804 <xPortStartScheduler+0x134>)
 8009748:	681b      	ldr	r3, [r3, #0]
 800974a:	3b01      	subs	r3, #1
 800974c:	4a2d      	ldr	r2, [pc, #180]	; (8009804 <xPortStartScheduler+0x134>)
 800974e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009750:	78fb      	ldrb	r3, [r7, #3]
 8009752:	b2db      	uxtb	r3, r3
 8009754:	005b      	lsls	r3, r3, #1
 8009756:	b2db      	uxtb	r3, r3
 8009758:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800975a:	78fb      	ldrb	r3, [r7, #3]
 800975c:	b2db      	uxtb	r3, r3
 800975e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009762:	2b80      	cmp	r3, #128	; 0x80
 8009764:	d0ef      	beq.n	8009746 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8009766:	4b27      	ldr	r3, [pc, #156]	; (8009804 <xPortStartScheduler+0x134>)
 8009768:	681b      	ldr	r3, [r3, #0]
 800976a:	f1c3 0307 	rsb	r3, r3, #7
 800976e:	2b04      	cmp	r3, #4
 8009770:	d00a      	beq.n	8009788 <xPortStartScheduler+0xb8>
	__asm volatile
 8009772:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009776:	f383 8811 	msr	BASEPRI, r3
 800977a:	f3bf 8f6f 	isb	sy
 800977e:	f3bf 8f4f 	dsb	sy
 8009782:	60bb      	str	r3, [r7, #8]
}
 8009784:	bf00      	nop
 8009786:	e7fe      	b.n	8009786 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8009788:	4b1e      	ldr	r3, [pc, #120]	; (8009804 <xPortStartScheduler+0x134>)
 800978a:	681b      	ldr	r3, [r3, #0]
 800978c:	021b      	lsls	r3, r3, #8
 800978e:	4a1d      	ldr	r2, [pc, #116]	; (8009804 <xPortStartScheduler+0x134>)
 8009790:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009792:	4b1c      	ldr	r3, [pc, #112]	; (8009804 <xPortStartScheduler+0x134>)
 8009794:	681b      	ldr	r3, [r3, #0]
 8009796:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800979a:	4a1a      	ldr	r2, [pc, #104]	; (8009804 <xPortStartScheduler+0x134>)
 800979c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	b2da      	uxtb	r2, r3
 80097a2:	697b      	ldr	r3, [r7, #20]
 80097a4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80097a6:	4b18      	ldr	r3, [pc, #96]	; (8009808 <xPortStartScheduler+0x138>)
 80097a8:	681b      	ldr	r3, [r3, #0]
 80097aa:	4a17      	ldr	r2, [pc, #92]	; (8009808 <xPortStartScheduler+0x138>)
 80097ac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80097b0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80097b2:	4b15      	ldr	r3, [pc, #84]	; (8009808 <xPortStartScheduler+0x138>)
 80097b4:	681b      	ldr	r3, [r3, #0]
 80097b6:	4a14      	ldr	r2, [pc, #80]	; (8009808 <xPortStartScheduler+0x138>)
 80097b8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80097bc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80097be:	f000 f8dd 	bl	800997c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80097c2:	4b12      	ldr	r3, [pc, #72]	; (800980c <xPortStartScheduler+0x13c>)
 80097c4:	2200      	movs	r2, #0
 80097c6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80097c8:	f000 f8fc 	bl	80099c4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80097cc:	4b10      	ldr	r3, [pc, #64]	; (8009810 <xPortStartScheduler+0x140>)
 80097ce:	681b      	ldr	r3, [r3, #0]
 80097d0:	4a0f      	ldr	r2, [pc, #60]	; (8009810 <xPortStartScheduler+0x140>)
 80097d2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80097d6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80097d8:	f7ff ff66 	bl	80096a8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80097dc:	f7fe ff92 	bl	8008704 <vTaskSwitchContext>
	prvTaskExitError();
 80097e0:	f7ff ff22 	bl	8009628 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80097e4:	2300      	movs	r3, #0
}
 80097e6:	4618      	mov	r0, r3
 80097e8:	3718      	adds	r7, #24
 80097ea:	46bd      	mov	sp, r7
 80097ec:	bd80      	pop	{r7, pc}
 80097ee:	bf00      	nop
 80097f0:	e000ed00 	.word	0xe000ed00
 80097f4:	410fc271 	.word	0x410fc271
 80097f8:	410fc270 	.word	0x410fc270
 80097fc:	e000e400 	.word	0xe000e400
 8009800:	2000261c 	.word	0x2000261c
 8009804:	20002620 	.word	0x20002620
 8009808:	e000ed20 	.word	0xe000ed20
 800980c:	2000000c 	.word	0x2000000c
 8009810:	e000ef34 	.word	0xe000ef34

08009814 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009814:	b480      	push	{r7}
 8009816:	b083      	sub	sp, #12
 8009818:	af00      	add	r7, sp, #0
	__asm volatile
 800981a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800981e:	f383 8811 	msr	BASEPRI, r3
 8009822:	f3bf 8f6f 	isb	sy
 8009826:	f3bf 8f4f 	dsb	sy
 800982a:	607b      	str	r3, [r7, #4]
}
 800982c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800982e:	4b0f      	ldr	r3, [pc, #60]	; (800986c <vPortEnterCritical+0x58>)
 8009830:	681b      	ldr	r3, [r3, #0]
 8009832:	3301      	adds	r3, #1
 8009834:	4a0d      	ldr	r2, [pc, #52]	; (800986c <vPortEnterCritical+0x58>)
 8009836:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8009838:	4b0c      	ldr	r3, [pc, #48]	; (800986c <vPortEnterCritical+0x58>)
 800983a:	681b      	ldr	r3, [r3, #0]
 800983c:	2b01      	cmp	r3, #1
 800983e:	d10f      	bne.n	8009860 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009840:	4b0b      	ldr	r3, [pc, #44]	; (8009870 <vPortEnterCritical+0x5c>)
 8009842:	681b      	ldr	r3, [r3, #0]
 8009844:	b2db      	uxtb	r3, r3
 8009846:	2b00      	cmp	r3, #0
 8009848:	d00a      	beq.n	8009860 <vPortEnterCritical+0x4c>
	__asm volatile
 800984a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800984e:	f383 8811 	msr	BASEPRI, r3
 8009852:	f3bf 8f6f 	isb	sy
 8009856:	f3bf 8f4f 	dsb	sy
 800985a:	603b      	str	r3, [r7, #0]
}
 800985c:	bf00      	nop
 800985e:	e7fe      	b.n	800985e <vPortEnterCritical+0x4a>
	}
}
 8009860:	bf00      	nop
 8009862:	370c      	adds	r7, #12
 8009864:	46bd      	mov	sp, r7
 8009866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800986a:	4770      	bx	lr
 800986c:	2000000c 	.word	0x2000000c
 8009870:	e000ed04 	.word	0xe000ed04

08009874 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009874:	b480      	push	{r7}
 8009876:	b083      	sub	sp, #12
 8009878:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800987a:	4b12      	ldr	r3, [pc, #72]	; (80098c4 <vPortExitCritical+0x50>)
 800987c:	681b      	ldr	r3, [r3, #0]
 800987e:	2b00      	cmp	r3, #0
 8009880:	d10a      	bne.n	8009898 <vPortExitCritical+0x24>
	__asm volatile
 8009882:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009886:	f383 8811 	msr	BASEPRI, r3
 800988a:	f3bf 8f6f 	isb	sy
 800988e:	f3bf 8f4f 	dsb	sy
 8009892:	607b      	str	r3, [r7, #4]
}
 8009894:	bf00      	nop
 8009896:	e7fe      	b.n	8009896 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8009898:	4b0a      	ldr	r3, [pc, #40]	; (80098c4 <vPortExitCritical+0x50>)
 800989a:	681b      	ldr	r3, [r3, #0]
 800989c:	3b01      	subs	r3, #1
 800989e:	4a09      	ldr	r2, [pc, #36]	; (80098c4 <vPortExitCritical+0x50>)
 80098a0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80098a2:	4b08      	ldr	r3, [pc, #32]	; (80098c4 <vPortExitCritical+0x50>)
 80098a4:	681b      	ldr	r3, [r3, #0]
 80098a6:	2b00      	cmp	r3, #0
 80098a8:	d105      	bne.n	80098b6 <vPortExitCritical+0x42>
 80098aa:	2300      	movs	r3, #0
 80098ac:	603b      	str	r3, [r7, #0]
	__asm volatile
 80098ae:	683b      	ldr	r3, [r7, #0]
 80098b0:	f383 8811 	msr	BASEPRI, r3
}
 80098b4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80098b6:	bf00      	nop
 80098b8:	370c      	adds	r7, #12
 80098ba:	46bd      	mov	sp, r7
 80098bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098c0:	4770      	bx	lr
 80098c2:	bf00      	nop
 80098c4:	2000000c 	.word	0x2000000c
	...

080098d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80098d0:	f3ef 8009 	mrs	r0, PSP
 80098d4:	f3bf 8f6f 	isb	sy
 80098d8:	4b15      	ldr	r3, [pc, #84]	; (8009930 <pxCurrentTCBConst>)
 80098da:	681a      	ldr	r2, [r3, #0]
 80098dc:	f01e 0f10 	tst.w	lr, #16
 80098e0:	bf08      	it	eq
 80098e2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80098e6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80098ea:	6010      	str	r0, [r2, #0]
 80098ec:	e92d 0009 	stmdb	sp!, {r0, r3}
 80098f0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80098f4:	f380 8811 	msr	BASEPRI, r0
 80098f8:	f3bf 8f4f 	dsb	sy
 80098fc:	f3bf 8f6f 	isb	sy
 8009900:	f7fe ff00 	bl	8008704 <vTaskSwitchContext>
 8009904:	f04f 0000 	mov.w	r0, #0
 8009908:	f380 8811 	msr	BASEPRI, r0
 800990c:	bc09      	pop	{r0, r3}
 800990e:	6819      	ldr	r1, [r3, #0]
 8009910:	6808      	ldr	r0, [r1, #0]
 8009912:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009916:	f01e 0f10 	tst.w	lr, #16
 800991a:	bf08      	it	eq
 800991c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009920:	f380 8809 	msr	PSP, r0
 8009924:	f3bf 8f6f 	isb	sy
 8009928:	4770      	bx	lr
 800992a:	bf00      	nop
 800992c:	f3af 8000 	nop.w

08009930 <pxCurrentTCBConst>:
 8009930:	20001ff0 	.word	0x20001ff0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009934:	bf00      	nop
 8009936:	bf00      	nop

08009938 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009938:	b580      	push	{r7, lr}
 800993a:	b082      	sub	sp, #8
 800993c:	af00      	add	r7, sp, #0
	__asm volatile
 800993e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009942:	f383 8811 	msr	BASEPRI, r3
 8009946:	f3bf 8f6f 	isb	sy
 800994a:	f3bf 8f4f 	dsb	sy
 800994e:	607b      	str	r3, [r7, #4]
}
 8009950:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009952:	f7fe fe1d 	bl	8008590 <xTaskIncrementTick>
 8009956:	4603      	mov	r3, r0
 8009958:	2b00      	cmp	r3, #0
 800995a:	d003      	beq.n	8009964 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800995c:	4b06      	ldr	r3, [pc, #24]	; (8009978 <xPortSysTickHandler+0x40>)
 800995e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009962:	601a      	str	r2, [r3, #0]
 8009964:	2300      	movs	r3, #0
 8009966:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009968:	683b      	ldr	r3, [r7, #0]
 800996a:	f383 8811 	msr	BASEPRI, r3
}
 800996e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009970:	bf00      	nop
 8009972:	3708      	adds	r7, #8
 8009974:	46bd      	mov	sp, r7
 8009976:	bd80      	pop	{r7, pc}
 8009978:	e000ed04 	.word	0xe000ed04

0800997c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800997c:	b480      	push	{r7}
 800997e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009980:	4b0b      	ldr	r3, [pc, #44]	; (80099b0 <vPortSetupTimerInterrupt+0x34>)
 8009982:	2200      	movs	r2, #0
 8009984:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009986:	4b0b      	ldr	r3, [pc, #44]	; (80099b4 <vPortSetupTimerInterrupt+0x38>)
 8009988:	2200      	movs	r2, #0
 800998a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800998c:	4b0a      	ldr	r3, [pc, #40]	; (80099b8 <vPortSetupTimerInterrupt+0x3c>)
 800998e:	681b      	ldr	r3, [r3, #0]
 8009990:	4a0a      	ldr	r2, [pc, #40]	; (80099bc <vPortSetupTimerInterrupt+0x40>)
 8009992:	fba2 2303 	umull	r2, r3, r2, r3
 8009996:	099b      	lsrs	r3, r3, #6
 8009998:	4a09      	ldr	r2, [pc, #36]	; (80099c0 <vPortSetupTimerInterrupt+0x44>)
 800999a:	3b01      	subs	r3, #1
 800999c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800999e:	4b04      	ldr	r3, [pc, #16]	; (80099b0 <vPortSetupTimerInterrupt+0x34>)
 80099a0:	2207      	movs	r2, #7
 80099a2:	601a      	str	r2, [r3, #0]
}
 80099a4:	bf00      	nop
 80099a6:	46bd      	mov	sp, r7
 80099a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099ac:	4770      	bx	lr
 80099ae:	bf00      	nop
 80099b0:	e000e010 	.word	0xe000e010
 80099b4:	e000e018 	.word	0xe000e018
 80099b8:	20000000 	.word	0x20000000
 80099bc:	10624dd3 	.word	0x10624dd3
 80099c0:	e000e014 	.word	0xe000e014

080099c4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80099c4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80099d4 <vPortEnableVFP+0x10>
 80099c8:	6801      	ldr	r1, [r0, #0]
 80099ca:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80099ce:	6001      	str	r1, [r0, #0]
 80099d0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80099d2:	bf00      	nop
 80099d4:	e000ed88 	.word	0xe000ed88

080099d8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80099d8:	b480      	push	{r7}
 80099da:	b085      	sub	sp, #20
 80099dc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80099de:	f3ef 8305 	mrs	r3, IPSR
 80099e2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80099e4:	68fb      	ldr	r3, [r7, #12]
 80099e6:	2b0f      	cmp	r3, #15
 80099e8:	d914      	bls.n	8009a14 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80099ea:	4a17      	ldr	r2, [pc, #92]	; (8009a48 <vPortValidateInterruptPriority+0x70>)
 80099ec:	68fb      	ldr	r3, [r7, #12]
 80099ee:	4413      	add	r3, r2
 80099f0:	781b      	ldrb	r3, [r3, #0]
 80099f2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80099f4:	4b15      	ldr	r3, [pc, #84]	; (8009a4c <vPortValidateInterruptPriority+0x74>)
 80099f6:	781b      	ldrb	r3, [r3, #0]
 80099f8:	7afa      	ldrb	r2, [r7, #11]
 80099fa:	429a      	cmp	r2, r3
 80099fc:	d20a      	bcs.n	8009a14 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80099fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a02:	f383 8811 	msr	BASEPRI, r3
 8009a06:	f3bf 8f6f 	isb	sy
 8009a0a:	f3bf 8f4f 	dsb	sy
 8009a0e:	607b      	str	r3, [r7, #4]
}
 8009a10:	bf00      	nop
 8009a12:	e7fe      	b.n	8009a12 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8009a14:	4b0e      	ldr	r3, [pc, #56]	; (8009a50 <vPortValidateInterruptPriority+0x78>)
 8009a16:	681b      	ldr	r3, [r3, #0]
 8009a18:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8009a1c:	4b0d      	ldr	r3, [pc, #52]	; (8009a54 <vPortValidateInterruptPriority+0x7c>)
 8009a1e:	681b      	ldr	r3, [r3, #0]
 8009a20:	429a      	cmp	r2, r3
 8009a22:	d90a      	bls.n	8009a3a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8009a24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a28:	f383 8811 	msr	BASEPRI, r3
 8009a2c:	f3bf 8f6f 	isb	sy
 8009a30:	f3bf 8f4f 	dsb	sy
 8009a34:	603b      	str	r3, [r7, #0]
}
 8009a36:	bf00      	nop
 8009a38:	e7fe      	b.n	8009a38 <vPortValidateInterruptPriority+0x60>
	}
 8009a3a:	bf00      	nop
 8009a3c:	3714      	adds	r7, #20
 8009a3e:	46bd      	mov	sp, r7
 8009a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a44:	4770      	bx	lr
 8009a46:	bf00      	nop
 8009a48:	e000e3f0 	.word	0xe000e3f0
 8009a4c:	2000261c 	.word	0x2000261c
 8009a50:	e000ed0c 	.word	0xe000ed0c
 8009a54:	20002620 	.word	0x20002620

08009a58 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8009a58:	b580      	push	{r7, lr}
 8009a5a:	b08a      	sub	sp, #40	; 0x28
 8009a5c:	af00      	add	r7, sp, #0
 8009a5e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009a60:	2300      	movs	r3, #0
 8009a62:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009a64:	f7fe fcd8 	bl	8008418 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8009a68:	4b5b      	ldr	r3, [pc, #364]	; (8009bd8 <pvPortMalloc+0x180>)
 8009a6a:	681b      	ldr	r3, [r3, #0]
 8009a6c:	2b00      	cmp	r3, #0
 8009a6e:	d101      	bne.n	8009a74 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009a70:	f000 f920 	bl	8009cb4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009a74:	4b59      	ldr	r3, [pc, #356]	; (8009bdc <pvPortMalloc+0x184>)
 8009a76:	681a      	ldr	r2, [r3, #0]
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	4013      	ands	r3, r2
 8009a7c:	2b00      	cmp	r3, #0
 8009a7e:	f040 8093 	bne.w	8009ba8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	2b00      	cmp	r3, #0
 8009a86:	d01d      	beq.n	8009ac4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8009a88:	2208      	movs	r2, #8
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	4413      	add	r3, r2
 8009a8e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	f003 0307 	and.w	r3, r3, #7
 8009a96:	2b00      	cmp	r3, #0
 8009a98:	d014      	beq.n	8009ac4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	f023 0307 	bic.w	r3, r3, #7
 8009aa0:	3308      	adds	r3, #8
 8009aa2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	f003 0307 	and.w	r3, r3, #7
 8009aaa:	2b00      	cmp	r3, #0
 8009aac:	d00a      	beq.n	8009ac4 <pvPortMalloc+0x6c>
	__asm volatile
 8009aae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ab2:	f383 8811 	msr	BASEPRI, r3
 8009ab6:	f3bf 8f6f 	isb	sy
 8009aba:	f3bf 8f4f 	dsb	sy
 8009abe:	617b      	str	r3, [r7, #20]
}
 8009ac0:	bf00      	nop
 8009ac2:	e7fe      	b.n	8009ac2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	2b00      	cmp	r3, #0
 8009ac8:	d06e      	beq.n	8009ba8 <pvPortMalloc+0x150>
 8009aca:	4b45      	ldr	r3, [pc, #276]	; (8009be0 <pvPortMalloc+0x188>)
 8009acc:	681b      	ldr	r3, [r3, #0]
 8009ace:	687a      	ldr	r2, [r7, #4]
 8009ad0:	429a      	cmp	r2, r3
 8009ad2:	d869      	bhi.n	8009ba8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8009ad4:	4b43      	ldr	r3, [pc, #268]	; (8009be4 <pvPortMalloc+0x18c>)
 8009ad6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8009ad8:	4b42      	ldr	r3, [pc, #264]	; (8009be4 <pvPortMalloc+0x18c>)
 8009ada:	681b      	ldr	r3, [r3, #0]
 8009adc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009ade:	e004      	b.n	8009aea <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8009ae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ae2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8009ae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ae6:	681b      	ldr	r3, [r3, #0]
 8009ae8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009aea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009aec:	685b      	ldr	r3, [r3, #4]
 8009aee:	687a      	ldr	r2, [r7, #4]
 8009af0:	429a      	cmp	r2, r3
 8009af2:	d903      	bls.n	8009afc <pvPortMalloc+0xa4>
 8009af4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009af6:	681b      	ldr	r3, [r3, #0]
 8009af8:	2b00      	cmp	r3, #0
 8009afa:	d1f1      	bne.n	8009ae0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8009afc:	4b36      	ldr	r3, [pc, #216]	; (8009bd8 <pvPortMalloc+0x180>)
 8009afe:	681b      	ldr	r3, [r3, #0]
 8009b00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009b02:	429a      	cmp	r2, r3
 8009b04:	d050      	beq.n	8009ba8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009b06:	6a3b      	ldr	r3, [r7, #32]
 8009b08:	681b      	ldr	r3, [r3, #0]
 8009b0a:	2208      	movs	r2, #8
 8009b0c:	4413      	add	r3, r2
 8009b0e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009b10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b12:	681a      	ldr	r2, [r3, #0]
 8009b14:	6a3b      	ldr	r3, [r7, #32]
 8009b16:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009b18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b1a:	685a      	ldr	r2, [r3, #4]
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	1ad2      	subs	r2, r2, r3
 8009b20:	2308      	movs	r3, #8
 8009b22:	005b      	lsls	r3, r3, #1
 8009b24:	429a      	cmp	r2, r3
 8009b26:	d91f      	bls.n	8009b68 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8009b28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	4413      	add	r3, r2
 8009b2e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009b30:	69bb      	ldr	r3, [r7, #24]
 8009b32:	f003 0307 	and.w	r3, r3, #7
 8009b36:	2b00      	cmp	r3, #0
 8009b38:	d00a      	beq.n	8009b50 <pvPortMalloc+0xf8>
	__asm volatile
 8009b3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b3e:	f383 8811 	msr	BASEPRI, r3
 8009b42:	f3bf 8f6f 	isb	sy
 8009b46:	f3bf 8f4f 	dsb	sy
 8009b4a:	613b      	str	r3, [r7, #16]
}
 8009b4c:	bf00      	nop
 8009b4e:	e7fe      	b.n	8009b4e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009b50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b52:	685a      	ldr	r2, [r3, #4]
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	1ad2      	subs	r2, r2, r3
 8009b58:	69bb      	ldr	r3, [r7, #24]
 8009b5a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8009b5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b5e:	687a      	ldr	r2, [r7, #4]
 8009b60:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8009b62:	69b8      	ldr	r0, [r7, #24]
 8009b64:	f000 f908 	bl	8009d78 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009b68:	4b1d      	ldr	r3, [pc, #116]	; (8009be0 <pvPortMalloc+0x188>)
 8009b6a:	681a      	ldr	r2, [r3, #0]
 8009b6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b6e:	685b      	ldr	r3, [r3, #4]
 8009b70:	1ad3      	subs	r3, r2, r3
 8009b72:	4a1b      	ldr	r2, [pc, #108]	; (8009be0 <pvPortMalloc+0x188>)
 8009b74:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009b76:	4b1a      	ldr	r3, [pc, #104]	; (8009be0 <pvPortMalloc+0x188>)
 8009b78:	681a      	ldr	r2, [r3, #0]
 8009b7a:	4b1b      	ldr	r3, [pc, #108]	; (8009be8 <pvPortMalloc+0x190>)
 8009b7c:	681b      	ldr	r3, [r3, #0]
 8009b7e:	429a      	cmp	r2, r3
 8009b80:	d203      	bcs.n	8009b8a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009b82:	4b17      	ldr	r3, [pc, #92]	; (8009be0 <pvPortMalloc+0x188>)
 8009b84:	681b      	ldr	r3, [r3, #0]
 8009b86:	4a18      	ldr	r2, [pc, #96]	; (8009be8 <pvPortMalloc+0x190>)
 8009b88:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8009b8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b8c:	685a      	ldr	r2, [r3, #4]
 8009b8e:	4b13      	ldr	r3, [pc, #76]	; (8009bdc <pvPortMalloc+0x184>)
 8009b90:	681b      	ldr	r3, [r3, #0]
 8009b92:	431a      	orrs	r2, r3
 8009b94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b96:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009b98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b9a:	2200      	movs	r2, #0
 8009b9c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8009b9e:	4b13      	ldr	r3, [pc, #76]	; (8009bec <pvPortMalloc+0x194>)
 8009ba0:	681b      	ldr	r3, [r3, #0]
 8009ba2:	3301      	adds	r3, #1
 8009ba4:	4a11      	ldr	r2, [pc, #68]	; (8009bec <pvPortMalloc+0x194>)
 8009ba6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009ba8:	f7fe fc44 	bl	8008434 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8009bac:	69fb      	ldr	r3, [r7, #28]
 8009bae:	f003 0307 	and.w	r3, r3, #7
 8009bb2:	2b00      	cmp	r3, #0
 8009bb4:	d00a      	beq.n	8009bcc <pvPortMalloc+0x174>
	__asm volatile
 8009bb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bba:	f383 8811 	msr	BASEPRI, r3
 8009bbe:	f3bf 8f6f 	isb	sy
 8009bc2:	f3bf 8f4f 	dsb	sy
 8009bc6:	60fb      	str	r3, [r7, #12]
}
 8009bc8:	bf00      	nop
 8009bca:	e7fe      	b.n	8009bca <pvPortMalloc+0x172>
	return pvReturn;
 8009bcc:	69fb      	ldr	r3, [r7, #28]
}
 8009bce:	4618      	mov	r0, r3
 8009bd0:	3728      	adds	r7, #40	; 0x28
 8009bd2:	46bd      	mov	sp, r7
 8009bd4:	bd80      	pop	{r7, pc}
 8009bd6:	bf00      	nop
 8009bd8:	20004d3c 	.word	0x20004d3c
 8009bdc:	20004d50 	.word	0x20004d50
 8009be0:	20004d40 	.word	0x20004d40
 8009be4:	20004d34 	.word	0x20004d34
 8009be8:	20004d44 	.word	0x20004d44
 8009bec:	20004d48 	.word	0x20004d48

08009bf0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009bf0:	b580      	push	{r7, lr}
 8009bf2:	b086      	sub	sp, #24
 8009bf4:	af00      	add	r7, sp, #0
 8009bf6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	2b00      	cmp	r3, #0
 8009c00:	d04d      	beq.n	8009c9e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8009c02:	2308      	movs	r3, #8
 8009c04:	425b      	negs	r3, r3
 8009c06:	697a      	ldr	r2, [r7, #20]
 8009c08:	4413      	add	r3, r2
 8009c0a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8009c0c:	697b      	ldr	r3, [r7, #20]
 8009c0e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009c10:	693b      	ldr	r3, [r7, #16]
 8009c12:	685a      	ldr	r2, [r3, #4]
 8009c14:	4b24      	ldr	r3, [pc, #144]	; (8009ca8 <vPortFree+0xb8>)
 8009c16:	681b      	ldr	r3, [r3, #0]
 8009c18:	4013      	ands	r3, r2
 8009c1a:	2b00      	cmp	r3, #0
 8009c1c:	d10a      	bne.n	8009c34 <vPortFree+0x44>
	__asm volatile
 8009c1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c22:	f383 8811 	msr	BASEPRI, r3
 8009c26:	f3bf 8f6f 	isb	sy
 8009c2a:	f3bf 8f4f 	dsb	sy
 8009c2e:	60fb      	str	r3, [r7, #12]
}
 8009c30:	bf00      	nop
 8009c32:	e7fe      	b.n	8009c32 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009c34:	693b      	ldr	r3, [r7, #16]
 8009c36:	681b      	ldr	r3, [r3, #0]
 8009c38:	2b00      	cmp	r3, #0
 8009c3a:	d00a      	beq.n	8009c52 <vPortFree+0x62>
	__asm volatile
 8009c3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c40:	f383 8811 	msr	BASEPRI, r3
 8009c44:	f3bf 8f6f 	isb	sy
 8009c48:	f3bf 8f4f 	dsb	sy
 8009c4c:	60bb      	str	r3, [r7, #8]
}
 8009c4e:	bf00      	nop
 8009c50:	e7fe      	b.n	8009c50 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009c52:	693b      	ldr	r3, [r7, #16]
 8009c54:	685a      	ldr	r2, [r3, #4]
 8009c56:	4b14      	ldr	r3, [pc, #80]	; (8009ca8 <vPortFree+0xb8>)
 8009c58:	681b      	ldr	r3, [r3, #0]
 8009c5a:	4013      	ands	r3, r2
 8009c5c:	2b00      	cmp	r3, #0
 8009c5e:	d01e      	beq.n	8009c9e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009c60:	693b      	ldr	r3, [r7, #16]
 8009c62:	681b      	ldr	r3, [r3, #0]
 8009c64:	2b00      	cmp	r3, #0
 8009c66:	d11a      	bne.n	8009c9e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009c68:	693b      	ldr	r3, [r7, #16]
 8009c6a:	685a      	ldr	r2, [r3, #4]
 8009c6c:	4b0e      	ldr	r3, [pc, #56]	; (8009ca8 <vPortFree+0xb8>)
 8009c6e:	681b      	ldr	r3, [r3, #0]
 8009c70:	43db      	mvns	r3, r3
 8009c72:	401a      	ands	r2, r3
 8009c74:	693b      	ldr	r3, [r7, #16]
 8009c76:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009c78:	f7fe fbce 	bl	8008418 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8009c7c:	693b      	ldr	r3, [r7, #16]
 8009c7e:	685a      	ldr	r2, [r3, #4]
 8009c80:	4b0a      	ldr	r3, [pc, #40]	; (8009cac <vPortFree+0xbc>)
 8009c82:	681b      	ldr	r3, [r3, #0]
 8009c84:	4413      	add	r3, r2
 8009c86:	4a09      	ldr	r2, [pc, #36]	; (8009cac <vPortFree+0xbc>)
 8009c88:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8009c8a:	6938      	ldr	r0, [r7, #16]
 8009c8c:	f000 f874 	bl	8009d78 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8009c90:	4b07      	ldr	r3, [pc, #28]	; (8009cb0 <vPortFree+0xc0>)
 8009c92:	681b      	ldr	r3, [r3, #0]
 8009c94:	3301      	adds	r3, #1
 8009c96:	4a06      	ldr	r2, [pc, #24]	; (8009cb0 <vPortFree+0xc0>)
 8009c98:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8009c9a:	f7fe fbcb 	bl	8008434 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8009c9e:	bf00      	nop
 8009ca0:	3718      	adds	r7, #24
 8009ca2:	46bd      	mov	sp, r7
 8009ca4:	bd80      	pop	{r7, pc}
 8009ca6:	bf00      	nop
 8009ca8:	20004d50 	.word	0x20004d50
 8009cac:	20004d40 	.word	0x20004d40
 8009cb0:	20004d4c 	.word	0x20004d4c

08009cb4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009cb4:	b480      	push	{r7}
 8009cb6:	b085      	sub	sp, #20
 8009cb8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8009cba:	f242 7310 	movw	r3, #10000	; 0x2710
 8009cbe:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009cc0:	4b27      	ldr	r3, [pc, #156]	; (8009d60 <prvHeapInit+0xac>)
 8009cc2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009cc4:	68fb      	ldr	r3, [r7, #12]
 8009cc6:	f003 0307 	and.w	r3, r3, #7
 8009cca:	2b00      	cmp	r3, #0
 8009ccc:	d00c      	beq.n	8009ce8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8009cce:	68fb      	ldr	r3, [r7, #12]
 8009cd0:	3307      	adds	r3, #7
 8009cd2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009cd4:	68fb      	ldr	r3, [r7, #12]
 8009cd6:	f023 0307 	bic.w	r3, r3, #7
 8009cda:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8009cdc:	68ba      	ldr	r2, [r7, #8]
 8009cde:	68fb      	ldr	r3, [r7, #12]
 8009ce0:	1ad3      	subs	r3, r2, r3
 8009ce2:	4a1f      	ldr	r2, [pc, #124]	; (8009d60 <prvHeapInit+0xac>)
 8009ce4:	4413      	add	r3, r2
 8009ce6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009ce8:	68fb      	ldr	r3, [r7, #12]
 8009cea:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8009cec:	4a1d      	ldr	r2, [pc, #116]	; (8009d64 <prvHeapInit+0xb0>)
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009cf2:	4b1c      	ldr	r3, [pc, #112]	; (8009d64 <prvHeapInit+0xb0>)
 8009cf4:	2200      	movs	r2, #0
 8009cf6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	68ba      	ldr	r2, [r7, #8]
 8009cfc:	4413      	add	r3, r2
 8009cfe:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009d00:	2208      	movs	r2, #8
 8009d02:	68fb      	ldr	r3, [r7, #12]
 8009d04:	1a9b      	subs	r3, r3, r2
 8009d06:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009d08:	68fb      	ldr	r3, [r7, #12]
 8009d0a:	f023 0307 	bic.w	r3, r3, #7
 8009d0e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009d10:	68fb      	ldr	r3, [r7, #12]
 8009d12:	4a15      	ldr	r2, [pc, #84]	; (8009d68 <prvHeapInit+0xb4>)
 8009d14:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009d16:	4b14      	ldr	r3, [pc, #80]	; (8009d68 <prvHeapInit+0xb4>)
 8009d18:	681b      	ldr	r3, [r3, #0]
 8009d1a:	2200      	movs	r2, #0
 8009d1c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8009d1e:	4b12      	ldr	r3, [pc, #72]	; (8009d68 <prvHeapInit+0xb4>)
 8009d20:	681b      	ldr	r3, [r3, #0]
 8009d22:	2200      	movs	r2, #0
 8009d24:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8009d2a:	683b      	ldr	r3, [r7, #0]
 8009d2c:	68fa      	ldr	r2, [r7, #12]
 8009d2e:	1ad2      	subs	r2, r2, r3
 8009d30:	683b      	ldr	r3, [r7, #0]
 8009d32:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009d34:	4b0c      	ldr	r3, [pc, #48]	; (8009d68 <prvHeapInit+0xb4>)
 8009d36:	681a      	ldr	r2, [r3, #0]
 8009d38:	683b      	ldr	r3, [r7, #0]
 8009d3a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009d3c:	683b      	ldr	r3, [r7, #0]
 8009d3e:	685b      	ldr	r3, [r3, #4]
 8009d40:	4a0a      	ldr	r2, [pc, #40]	; (8009d6c <prvHeapInit+0xb8>)
 8009d42:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009d44:	683b      	ldr	r3, [r7, #0]
 8009d46:	685b      	ldr	r3, [r3, #4]
 8009d48:	4a09      	ldr	r2, [pc, #36]	; (8009d70 <prvHeapInit+0xbc>)
 8009d4a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8009d4c:	4b09      	ldr	r3, [pc, #36]	; (8009d74 <prvHeapInit+0xc0>)
 8009d4e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8009d52:	601a      	str	r2, [r3, #0]
}
 8009d54:	bf00      	nop
 8009d56:	3714      	adds	r7, #20
 8009d58:	46bd      	mov	sp, r7
 8009d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d5e:	4770      	bx	lr
 8009d60:	20002624 	.word	0x20002624
 8009d64:	20004d34 	.word	0x20004d34
 8009d68:	20004d3c 	.word	0x20004d3c
 8009d6c:	20004d44 	.word	0x20004d44
 8009d70:	20004d40 	.word	0x20004d40
 8009d74:	20004d50 	.word	0x20004d50

08009d78 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009d78:	b480      	push	{r7}
 8009d7a:	b085      	sub	sp, #20
 8009d7c:	af00      	add	r7, sp, #0
 8009d7e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009d80:	4b28      	ldr	r3, [pc, #160]	; (8009e24 <prvInsertBlockIntoFreeList+0xac>)
 8009d82:	60fb      	str	r3, [r7, #12]
 8009d84:	e002      	b.n	8009d8c <prvInsertBlockIntoFreeList+0x14>
 8009d86:	68fb      	ldr	r3, [r7, #12]
 8009d88:	681b      	ldr	r3, [r3, #0]
 8009d8a:	60fb      	str	r3, [r7, #12]
 8009d8c:	68fb      	ldr	r3, [r7, #12]
 8009d8e:	681b      	ldr	r3, [r3, #0]
 8009d90:	687a      	ldr	r2, [r7, #4]
 8009d92:	429a      	cmp	r2, r3
 8009d94:	d8f7      	bhi.n	8009d86 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009d96:	68fb      	ldr	r3, [r7, #12]
 8009d98:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8009d9a:	68fb      	ldr	r3, [r7, #12]
 8009d9c:	685b      	ldr	r3, [r3, #4]
 8009d9e:	68ba      	ldr	r2, [r7, #8]
 8009da0:	4413      	add	r3, r2
 8009da2:	687a      	ldr	r2, [r7, #4]
 8009da4:	429a      	cmp	r2, r3
 8009da6:	d108      	bne.n	8009dba <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009da8:	68fb      	ldr	r3, [r7, #12]
 8009daa:	685a      	ldr	r2, [r3, #4]
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	685b      	ldr	r3, [r3, #4]
 8009db0:	441a      	add	r2, r3
 8009db2:	68fb      	ldr	r3, [r7, #12]
 8009db4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009db6:	68fb      	ldr	r3, [r7, #12]
 8009db8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	685b      	ldr	r3, [r3, #4]
 8009dc2:	68ba      	ldr	r2, [r7, #8]
 8009dc4:	441a      	add	r2, r3
 8009dc6:	68fb      	ldr	r3, [r7, #12]
 8009dc8:	681b      	ldr	r3, [r3, #0]
 8009dca:	429a      	cmp	r2, r3
 8009dcc:	d118      	bne.n	8009e00 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8009dce:	68fb      	ldr	r3, [r7, #12]
 8009dd0:	681a      	ldr	r2, [r3, #0]
 8009dd2:	4b15      	ldr	r3, [pc, #84]	; (8009e28 <prvInsertBlockIntoFreeList+0xb0>)
 8009dd4:	681b      	ldr	r3, [r3, #0]
 8009dd6:	429a      	cmp	r2, r3
 8009dd8:	d00d      	beq.n	8009df6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	685a      	ldr	r2, [r3, #4]
 8009dde:	68fb      	ldr	r3, [r7, #12]
 8009de0:	681b      	ldr	r3, [r3, #0]
 8009de2:	685b      	ldr	r3, [r3, #4]
 8009de4:	441a      	add	r2, r3
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8009dea:	68fb      	ldr	r3, [r7, #12]
 8009dec:	681b      	ldr	r3, [r3, #0]
 8009dee:	681a      	ldr	r2, [r3, #0]
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	601a      	str	r2, [r3, #0]
 8009df4:	e008      	b.n	8009e08 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009df6:	4b0c      	ldr	r3, [pc, #48]	; (8009e28 <prvInsertBlockIntoFreeList+0xb0>)
 8009df8:	681a      	ldr	r2, [r3, #0]
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	601a      	str	r2, [r3, #0]
 8009dfe:	e003      	b.n	8009e08 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009e00:	68fb      	ldr	r3, [r7, #12]
 8009e02:	681a      	ldr	r2, [r3, #0]
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009e08:	68fa      	ldr	r2, [r7, #12]
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	429a      	cmp	r2, r3
 8009e0e:	d002      	beq.n	8009e16 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009e10:	68fb      	ldr	r3, [r7, #12]
 8009e12:	687a      	ldr	r2, [r7, #4]
 8009e14:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009e16:	bf00      	nop
 8009e18:	3714      	adds	r7, #20
 8009e1a:	46bd      	mov	sp, r7
 8009e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e20:	4770      	bx	lr
 8009e22:	bf00      	nop
 8009e24:	20004d34 	.word	0x20004d34
 8009e28:	20004d3c 	.word	0x20004d3c

08009e2c <__errno>:
 8009e2c:	4b01      	ldr	r3, [pc, #4]	; (8009e34 <__errno+0x8>)
 8009e2e:	6818      	ldr	r0, [r3, #0]
 8009e30:	4770      	bx	lr
 8009e32:	bf00      	nop
 8009e34:	20000010 	.word	0x20000010

08009e38 <std>:
 8009e38:	2300      	movs	r3, #0
 8009e3a:	b510      	push	{r4, lr}
 8009e3c:	4604      	mov	r4, r0
 8009e3e:	e9c0 3300 	strd	r3, r3, [r0]
 8009e42:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009e46:	6083      	str	r3, [r0, #8]
 8009e48:	8181      	strh	r1, [r0, #12]
 8009e4a:	6643      	str	r3, [r0, #100]	; 0x64
 8009e4c:	81c2      	strh	r2, [r0, #14]
 8009e4e:	6183      	str	r3, [r0, #24]
 8009e50:	4619      	mov	r1, r3
 8009e52:	2208      	movs	r2, #8
 8009e54:	305c      	adds	r0, #92	; 0x5c
 8009e56:	f000 f91a 	bl	800a08e <memset>
 8009e5a:	4b05      	ldr	r3, [pc, #20]	; (8009e70 <std+0x38>)
 8009e5c:	6263      	str	r3, [r4, #36]	; 0x24
 8009e5e:	4b05      	ldr	r3, [pc, #20]	; (8009e74 <std+0x3c>)
 8009e60:	62a3      	str	r3, [r4, #40]	; 0x28
 8009e62:	4b05      	ldr	r3, [pc, #20]	; (8009e78 <std+0x40>)
 8009e64:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009e66:	4b05      	ldr	r3, [pc, #20]	; (8009e7c <std+0x44>)
 8009e68:	6224      	str	r4, [r4, #32]
 8009e6a:	6323      	str	r3, [r4, #48]	; 0x30
 8009e6c:	bd10      	pop	{r4, pc}
 8009e6e:	bf00      	nop
 8009e70:	0800a565 	.word	0x0800a565
 8009e74:	0800a587 	.word	0x0800a587
 8009e78:	0800a5bf 	.word	0x0800a5bf
 8009e7c:	0800a5e3 	.word	0x0800a5e3

08009e80 <_cleanup_r>:
 8009e80:	4901      	ldr	r1, [pc, #4]	; (8009e88 <_cleanup_r+0x8>)
 8009e82:	f000 b8af 	b.w	8009fe4 <_fwalk_reent>
 8009e86:	bf00      	nop
 8009e88:	0800a8bd 	.word	0x0800a8bd

08009e8c <__sfmoreglue>:
 8009e8c:	b570      	push	{r4, r5, r6, lr}
 8009e8e:	2268      	movs	r2, #104	; 0x68
 8009e90:	1e4d      	subs	r5, r1, #1
 8009e92:	4355      	muls	r5, r2
 8009e94:	460e      	mov	r6, r1
 8009e96:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8009e9a:	f000 f921 	bl	800a0e0 <_malloc_r>
 8009e9e:	4604      	mov	r4, r0
 8009ea0:	b140      	cbz	r0, 8009eb4 <__sfmoreglue+0x28>
 8009ea2:	2100      	movs	r1, #0
 8009ea4:	e9c0 1600 	strd	r1, r6, [r0]
 8009ea8:	300c      	adds	r0, #12
 8009eaa:	60a0      	str	r0, [r4, #8]
 8009eac:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009eb0:	f000 f8ed 	bl	800a08e <memset>
 8009eb4:	4620      	mov	r0, r4
 8009eb6:	bd70      	pop	{r4, r5, r6, pc}

08009eb8 <__sfp_lock_acquire>:
 8009eb8:	4801      	ldr	r0, [pc, #4]	; (8009ec0 <__sfp_lock_acquire+0x8>)
 8009eba:	f000 b8d8 	b.w	800a06e <__retarget_lock_acquire_recursive>
 8009ebe:	bf00      	nop
 8009ec0:	20004d55 	.word	0x20004d55

08009ec4 <__sfp_lock_release>:
 8009ec4:	4801      	ldr	r0, [pc, #4]	; (8009ecc <__sfp_lock_release+0x8>)
 8009ec6:	f000 b8d3 	b.w	800a070 <__retarget_lock_release_recursive>
 8009eca:	bf00      	nop
 8009ecc:	20004d55 	.word	0x20004d55

08009ed0 <__sinit_lock_acquire>:
 8009ed0:	4801      	ldr	r0, [pc, #4]	; (8009ed8 <__sinit_lock_acquire+0x8>)
 8009ed2:	f000 b8cc 	b.w	800a06e <__retarget_lock_acquire_recursive>
 8009ed6:	bf00      	nop
 8009ed8:	20004d56 	.word	0x20004d56

08009edc <__sinit_lock_release>:
 8009edc:	4801      	ldr	r0, [pc, #4]	; (8009ee4 <__sinit_lock_release+0x8>)
 8009ede:	f000 b8c7 	b.w	800a070 <__retarget_lock_release_recursive>
 8009ee2:	bf00      	nop
 8009ee4:	20004d56 	.word	0x20004d56

08009ee8 <__sinit>:
 8009ee8:	b510      	push	{r4, lr}
 8009eea:	4604      	mov	r4, r0
 8009eec:	f7ff fff0 	bl	8009ed0 <__sinit_lock_acquire>
 8009ef0:	69a3      	ldr	r3, [r4, #24]
 8009ef2:	b11b      	cbz	r3, 8009efc <__sinit+0x14>
 8009ef4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009ef8:	f7ff bff0 	b.w	8009edc <__sinit_lock_release>
 8009efc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009f00:	6523      	str	r3, [r4, #80]	; 0x50
 8009f02:	4b13      	ldr	r3, [pc, #76]	; (8009f50 <__sinit+0x68>)
 8009f04:	4a13      	ldr	r2, [pc, #76]	; (8009f54 <__sinit+0x6c>)
 8009f06:	681b      	ldr	r3, [r3, #0]
 8009f08:	62a2      	str	r2, [r4, #40]	; 0x28
 8009f0a:	42a3      	cmp	r3, r4
 8009f0c:	bf04      	itt	eq
 8009f0e:	2301      	moveq	r3, #1
 8009f10:	61a3      	streq	r3, [r4, #24]
 8009f12:	4620      	mov	r0, r4
 8009f14:	f000 f820 	bl	8009f58 <__sfp>
 8009f18:	6060      	str	r0, [r4, #4]
 8009f1a:	4620      	mov	r0, r4
 8009f1c:	f000 f81c 	bl	8009f58 <__sfp>
 8009f20:	60a0      	str	r0, [r4, #8]
 8009f22:	4620      	mov	r0, r4
 8009f24:	f000 f818 	bl	8009f58 <__sfp>
 8009f28:	2200      	movs	r2, #0
 8009f2a:	60e0      	str	r0, [r4, #12]
 8009f2c:	2104      	movs	r1, #4
 8009f2e:	6860      	ldr	r0, [r4, #4]
 8009f30:	f7ff ff82 	bl	8009e38 <std>
 8009f34:	68a0      	ldr	r0, [r4, #8]
 8009f36:	2201      	movs	r2, #1
 8009f38:	2109      	movs	r1, #9
 8009f3a:	f7ff ff7d 	bl	8009e38 <std>
 8009f3e:	68e0      	ldr	r0, [r4, #12]
 8009f40:	2202      	movs	r2, #2
 8009f42:	2112      	movs	r1, #18
 8009f44:	f7ff ff78 	bl	8009e38 <std>
 8009f48:	2301      	movs	r3, #1
 8009f4a:	61a3      	str	r3, [r4, #24]
 8009f4c:	e7d2      	b.n	8009ef4 <__sinit+0xc>
 8009f4e:	bf00      	nop
 8009f50:	0800c118 	.word	0x0800c118
 8009f54:	08009e81 	.word	0x08009e81

08009f58 <__sfp>:
 8009f58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f5a:	4607      	mov	r7, r0
 8009f5c:	f7ff ffac 	bl	8009eb8 <__sfp_lock_acquire>
 8009f60:	4b1e      	ldr	r3, [pc, #120]	; (8009fdc <__sfp+0x84>)
 8009f62:	681e      	ldr	r6, [r3, #0]
 8009f64:	69b3      	ldr	r3, [r6, #24]
 8009f66:	b913      	cbnz	r3, 8009f6e <__sfp+0x16>
 8009f68:	4630      	mov	r0, r6
 8009f6a:	f7ff ffbd 	bl	8009ee8 <__sinit>
 8009f6e:	3648      	adds	r6, #72	; 0x48
 8009f70:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009f74:	3b01      	subs	r3, #1
 8009f76:	d503      	bpl.n	8009f80 <__sfp+0x28>
 8009f78:	6833      	ldr	r3, [r6, #0]
 8009f7a:	b30b      	cbz	r3, 8009fc0 <__sfp+0x68>
 8009f7c:	6836      	ldr	r6, [r6, #0]
 8009f7e:	e7f7      	b.n	8009f70 <__sfp+0x18>
 8009f80:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009f84:	b9d5      	cbnz	r5, 8009fbc <__sfp+0x64>
 8009f86:	4b16      	ldr	r3, [pc, #88]	; (8009fe0 <__sfp+0x88>)
 8009f88:	60e3      	str	r3, [r4, #12]
 8009f8a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009f8e:	6665      	str	r5, [r4, #100]	; 0x64
 8009f90:	f000 f86c 	bl	800a06c <__retarget_lock_init_recursive>
 8009f94:	f7ff ff96 	bl	8009ec4 <__sfp_lock_release>
 8009f98:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009f9c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009fa0:	6025      	str	r5, [r4, #0]
 8009fa2:	61a5      	str	r5, [r4, #24]
 8009fa4:	2208      	movs	r2, #8
 8009fa6:	4629      	mov	r1, r5
 8009fa8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009fac:	f000 f86f 	bl	800a08e <memset>
 8009fb0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009fb4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009fb8:	4620      	mov	r0, r4
 8009fba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009fbc:	3468      	adds	r4, #104	; 0x68
 8009fbe:	e7d9      	b.n	8009f74 <__sfp+0x1c>
 8009fc0:	2104      	movs	r1, #4
 8009fc2:	4638      	mov	r0, r7
 8009fc4:	f7ff ff62 	bl	8009e8c <__sfmoreglue>
 8009fc8:	4604      	mov	r4, r0
 8009fca:	6030      	str	r0, [r6, #0]
 8009fcc:	2800      	cmp	r0, #0
 8009fce:	d1d5      	bne.n	8009f7c <__sfp+0x24>
 8009fd0:	f7ff ff78 	bl	8009ec4 <__sfp_lock_release>
 8009fd4:	230c      	movs	r3, #12
 8009fd6:	603b      	str	r3, [r7, #0]
 8009fd8:	e7ee      	b.n	8009fb8 <__sfp+0x60>
 8009fda:	bf00      	nop
 8009fdc:	0800c118 	.word	0x0800c118
 8009fe0:	ffff0001 	.word	0xffff0001

08009fe4 <_fwalk_reent>:
 8009fe4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009fe8:	4606      	mov	r6, r0
 8009fea:	4688      	mov	r8, r1
 8009fec:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009ff0:	2700      	movs	r7, #0
 8009ff2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009ff6:	f1b9 0901 	subs.w	r9, r9, #1
 8009ffa:	d505      	bpl.n	800a008 <_fwalk_reent+0x24>
 8009ffc:	6824      	ldr	r4, [r4, #0]
 8009ffe:	2c00      	cmp	r4, #0
 800a000:	d1f7      	bne.n	8009ff2 <_fwalk_reent+0xe>
 800a002:	4638      	mov	r0, r7
 800a004:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a008:	89ab      	ldrh	r3, [r5, #12]
 800a00a:	2b01      	cmp	r3, #1
 800a00c:	d907      	bls.n	800a01e <_fwalk_reent+0x3a>
 800a00e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a012:	3301      	adds	r3, #1
 800a014:	d003      	beq.n	800a01e <_fwalk_reent+0x3a>
 800a016:	4629      	mov	r1, r5
 800a018:	4630      	mov	r0, r6
 800a01a:	47c0      	blx	r8
 800a01c:	4307      	orrs	r7, r0
 800a01e:	3568      	adds	r5, #104	; 0x68
 800a020:	e7e9      	b.n	8009ff6 <_fwalk_reent+0x12>
	...

0800a024 <__libc_init_array>:
 800a024:	b570      	push	{r4, r5, r6, lr}
 800a026:	4d0d      	ldr	r5, [pc, #52]	; (800a05c <__libc_init_array+0x38>)
 800a028:	4c0d      	ldr	r4, [pc, #52]	; (800a060 <__libc_init_array+0x3c>)
 800a02a:	1b64      	subs	r4, r4, r5
 800a02c:	10a4      	asrs	r4, r4, #2
 800a02e:	2600      	movs	r6, #0
 800a030:	42a6      	cmp	r6, r4
 800a032:	d109      	bne.n	800a048 <__libc_init_array+0x24>
 800a034:	4d0b      	ldr	r5, [pc, #44]	; (800a064 <__libc_init_array+0x40>)
 800a036:	4c0c      	ldr	r4, [pc, #48]	; (800a068 <__libc_init_array+0x44>)
 800a038:	f001 ff90 	bl	800bf5c <_init>
 800a03c:	1b64      	subs	r4, r4, r5
 800a03e:	10a4      	asrs	r4, r4, #2
 800a040:	2600      	movs	r6, #0
 800a042:	42a6      	cmp	r6, r4
 800a044:	d105      	bne.n	800a052 <__libc_init_array+0x2e>
 800a046:	bd70      	pop	{r4, r5, r6, pc}
 800a048:	f855 3b04 	ldr.w	r3, [r5], #4
 800a04c:	4798      	blx	r3
 800a04e:	3601      	adds	r6, #1
 800a050:	e7ee      	b.n	800a030 <__libc_init_array+0xc>
 800a052:	f855 3b04 	ldr.w	r3, [r5], #4
 800a056:	4798      	blx	r3
 800a058:	3601      	adds	r6, #1
 800a05a:	e7f2      	b.n	800a042 <__libc_init_array+0x1e>
 800a05c:	0800c188 	.word	0x0800c188
 800a060:	0800c188 	.word	0x0800c188
 800a064:	0800c188 	.word	0x0800c188
 800a068:	0800c18c 	.word	0x0800c18c

0800a06c <__retarget_lock_init_recursive>:
 800a06c:	4770      	bx	lr

0800a06e <__retarget_lock_acquire_recursive>:
 800a06e:	4770      	bx	lr

0800a070 <__retarget_lock_release_recursive>:
 800a070:	4770      	bx	lr

0800a072 <memcpy>:
 800a072:	440a      	add	r2, r1
 800a074:	4291      	cmp	r1, r2
 800a076:	f100 33ff 	add.w	r3, r0, #4294967295
 800a07a:	d100      	bne.n	800a07e <memcpy+0xc>
 800a07c:	4770      	bx	lr
 800a07e:	b510      	push	{r4, lr}
 800a080:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a084:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a088:	4291      	cmp	r1, r2
 800a08a:	d1f9      	bne.n	800a080 <memcpy+0xe>
 800a08c:	bd10      	pop	{r4, pc}

0800a08e <memset>:
 800a08e:	4402      	add	r2, r0
 800a090:	4603      	mov	r3, r0
 800a092:	4293      	cmp	r3, r2
 800a094:	d100      	bne.n	800a098 <memset+0xa>
 800a096:	4770      	bx	lr
 800a098:	f803 1b01 	strb.w	r1, [r3], #1
 800a09c:	e7f9      	b.n	800a092 <memset+0x4>
	...

0800a0a0 <sbrk_aligned>:
 800a0a0:	b570      	push	{r4, r5, r6, lr}
 800a0a2:	4e0e      	ldr	r6, [pc, #56]	; (800a0dc <sbrk_aligned+0x3c>)
 800a0a4:	460c      	mov	r4, r1
 800a0a6:	6831      	ldr	r1, [r6, #0]
 800a0a8:	4605      	mov	r5, r0
 800a0aa:	b911      	cbnz	r1, 800a0b2 <sbrk_aligned+0x12>
 800a0ac:	f000 f984 	bl	800a3b8 <_sbrk_r>
 800a0b0:	6030      	str	r0, [r6, #0]
 800a0b2:	4621      	mov	r1, r4
 800a0b4:	4628      	mov	r0, r5
 800a0b6:	f000 f97f 	bl	800a3b8 <_sbrk_r>
 800a0ba:	1c43      	adds	r3, r0, #1
 800a0bc:	d00a      	beq.n	800a0d4 <sbrk_aligned+0x34>
 800a0be:	1cc4      	adds	r4, r0, #3
 800a0c0:	f024 0403 	bic.w	r4, r4, #3
 800a0c4:	42a0      	cmp	r0, r4
 800a0c6:	d007      	beq.n	800a0d8 <sbrk_aligned+0x38>
 800a0c8:	1a21      	subs	r1, r4, r0
 800a0ca:	4628      	mov	r0, r5
 800a0cc:	f000 f974 	bl	800a3b8 <_sbrk_r>
 800a0d0:	3001      	adds	r0, #1
 800a0d2:	d101      	bne.n	800a0d8 <sbrk_aligned+0x38>
 800a0d4:	f04f 34ff 	mov.w	r4, #4294967295
 800a0d8:	4620      	mov	r0, r4
 800a0da:	bd70      	pop	{r4, r5, r6, pc}
 800a0dc:	20004d5c 	.word	0x20004d5c

0800a0e0 <_malloc_r>:
 800a0e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a0e4:	1ccd      	adds	r5, r1, #3
 800a0e6:	f025 0503 	bic.w	r5, r5, #3
 800a0ea:	3508      	adds	r5, #8
 800a0ec:	2d0c      	cmp	r5, #12
 800a0ee:	bf38      	it	cc
 800a0f0:	250c      	movcc	r5, #12
 800a0f2:	2d00      	cmp	r5, #0
 800a0f4:	4607      	mov	r7, r0
 800a0f6:	db01      	blt.n	800a0fc <_malloc_r+0x1c>
 800a0f8:	42a9      	cmp	r1, r5
 800a0fa:	d905      	bls.n	800a108 <_malloc_r+0x28>
 800a0fc:	230c      	movs	r3, #12
 800a0fe:	603b      	str	r3, [r7, #0]
 800a100:	2600      	movs	r6, #0
 800a102:	4630      	mov	r0, r6
 800a104:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a108:	4e2e      	ldr	r6, [pc, #184]	; (800a1c4 <_malloc_r+0xe4>)
 800a10a:	f000 fc93 	bl	800aa34 <__malloc_lock>
 800a10e:	6833      	ldr	r3, [r6, #0]
 800a110:	461c      	mov	r4, r3
 800a112:	bb34      	cbnz	r4, 800a162 <_malloc_r+0x82>
 800a114:	4629      	mov	r1, r5
 800a116:	4638      	mov	r0, r7
 800a118:	f7ff ffc2 	bl	800a0a0 <sbrk_aligned>
 800a11c:	1c43      	adds	r3, r0, #1
 800a11e:	4604      	mov	r4, r0
 800a120:	d14d      	bne.n	800a1be <_malloc_r+0xde>
 800a122:	6834      	ldr	r4, [r6, #0]
 800a124:	4626      	mov	r6, r4
 800a126:	2e00      	cmp	r6, #0
 800a128:	d140      	bne.n	800a1ac <_malloc_r+0xcc>
 800a12a:	6823      	ldr	r3, [r4, #0]
 800a12c:	4631      	mov	r1, r6
 800a12e:	4638      	mov	r0, r7
 800a130:	eb04 0803 	add.w	r8, r4, r3
 800a134:	f000 f940 	bl	800a3b8 <_sbrk_r>
 800a138:	4580      	cmp	r8, r0
 800a13a:	d13a      	bne.n	800a1b2 <_malloc_r+0xd2>
 800a13c:	6821      	ldr	r1, [r4, #0]
 800a13e:	3503      	adds	r5, #3
 800a140:	1a6d      	subs	r5, r5, r1
 800a142:	f025 0503 	bic.w	r5, r5, #3
 800a146:	3508      	adds	r5, #8
 800a148:	2d0c      	cmp	r5, #12
 800a14a:	bf38      	it	cc
 800a14c:	250c      	movcc	r5, #12
 800a14e:	4629      	mov	r1, r5
 800a150:	4638      	mov	r0, r7
 800a152:	f7ff ffa5 	bl	800a0a0 <sbrk_aligned>
 800a156:	3001      	adds	r0, #1
 800a158:	d02b      	beq.n	800a1b2 <_malloc_r+0xd2>
 800a15a:	6823      	ldr	r3, [r4, #0]
 800a15c:	442b      	add	r3, r5
 800a15e:	6023      	str	r3, [r4, #0]
 800a160:	e00e      	b.n	800a180 <_malloc_r+0xa0>
 800a162:	6822      	ldr	r2, [r4, #0]
 800a164:	1b52      	subs	r2, r2, r5
 800a166:	d41e      	bmi.n	800a1a6 <_malloc_r+0xc6>
 800a168:	2a0b      	cmp	r2, #11
 800a16a:	d916      	bls.n	800a19a <_malloc_r+0xba>
 800a16c:	1961      	adds	r1, r4, r5
 800a16e:	42a3      	cmp	r3, r4
 800a170:	6025      	str	r5, [r4, #0]
 800a172:	bf18      	it	ne
 800a174:	6059      	strne	r1, [r3, #4]
 800a176:	6863      	ldr	r3, [r4, #4]
 800a178:	bf08      	it	eq
 800a17a:	6031      	streq	r1, [r6, #0]
 800a17c:	5162      	str	r2, [r4, r5]
 800a17e:	604b      	str	r3, [r1, #4]
 800a180:	4638      	mov	r0, r7
 800a182:	f104 060b 	add.w	r6, r4, #11
 800a186:	f000 fc5b 	bl	800aa40 <__malloc_unlock>
 800a18a:	f026 0607 	bic.w	r6, r6, #7
 800a18e:	1d23      	adds	r3, r4, #4
 800a190:	1af2      	subs	r2, r6, r3
 800a192:	d0b6      	beq.n	800a102 <_malloc_r+0x22>
 800a194:	1b9b      	subs	r3, r3, r6
 800a196:	50a3      	str	r3, [r4, r2]
 800a198:	e7b3      	b.n	800a102 <_malloc_r+0x22>
 800a19a:	6862      	ldr	r2, [r4, #4]
 800a19c:	42a3      	cmp	r3, r4
 800a19e:	bf0c      	ite	eq
 800a1a0:	6032      	streq	r2, [r6, #0]
 800a1a2:	605a      	strne	r2, [r3, #4]
 800a1a4:	e7ec      	b.n	800a180 <_malloc_r+0xa0>
 800a1a6:	4623      	mov	r3, r4
 800a1a8:	6864      	ldr	r4, [r4, #4]
 800a1aa:	e7b2      	b.n	800a112 <_malloc_r+0x32>
 800a1ac:	4634      	mov	r4, r6
 800a1ae:	6876      	ldr	r6, [r6, #4]
 800a1b0:	e7b9      	b.n	800a126 <_malloc_r+0x46>
 800a1b2:	230c      	movs	r3, #12
 800a1b4:	603b      	str	r3, [r7, #0]
 800a1b6:	4638      	mov	r0, r7
 800a1b8:	f000 fc42 	bl	800aa40 <__malloc_unlock>
 800a1bc:	e7a1      	b.n	800a102 <_malloc_r+0x22>
 800a1be:	6025      	str	r5, [r4, #0]
 800a1c0:	e7de      	b.n	800a180 <_malloc_r+0xa0>
 800a1c2:	bf00      	nop
 800a1c4:	20004d58 	.word	0x20004d58

0800a1c8 <iprintf>:
 800a1c8:	b40f      	push	{r0, r1, r2, r3}
 800a1ca:	4b0a      	ldr	r3, [pc, #40]	; (800a1f4 <iprintf+0x2c>)
 800a1cc:	b513      	push	{r0, r1, r4, lr}
 800a1ce:	681c      	ldr	r4, [r3, #0]
 800a1d0:	b124      	cbz	r4, 800a1dc <iprintf+0x14>
 800a1d2:	69a3      	ldr	r3, [r4, #24]
 800a1d4:	b913      	cbnz	r3, 800a1dc <iprintf+0x14>
 800a1d6:	4620      	mov	r0, r4
 800a1d8:	f7ff fe86 	bl	8009ee8 <__sinit>
 800a1dc:	ab05      	add	r3, sp, #20
 800a1de:	9a04      	ldr	r2, [sp, #16]
 800a1e0:	68a1      	ldr	r1, [r4, #8]
 800a1e2:	9301      	str	r3, [sp, #4]
 800a1e4:	4620      	mov	r0, r4
 800a1e6:	f000 fca7 	bl	800ab38 <_vfiprintf_r>
 800a1ea:	b002      	add	sp, #8
 800a1ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a1f0:	b004      	add	sp, #16
 800a1f2:	4770      	bx	lr
 800a1f4:	20000010 	.word	0x20000010

0800a1f8 <_puts_r>:
 800a1f8:	b570      	push	{r4, r5, r6, lr}
 800a1fa:	460e      	mov	r6, r1
 800a1fc:	4605      	mov	r5, r0
 800a1fe:	b118      	cbz	r0, 800a208 <_puts_r+0x10>
 800a200:	6983      	ldr	r3, [r0, #24]
 800a202:	b90b      	cbnz	r3, 800a208 <_puts_r+0x10>
 800a204:	f7ff fe70 	bl	8009ee8 <__sinit>
 800a208:	69ab      	ldr	r3, [r5, #24]
 800a20a:	68ac      	ldr	r4, [r5, #8]
 800a20c:	b913      	cbnz	r3, 800a214 <_puts_r+0x1c>
 800a20e:	4628      	mov	r0, r5
 800a210:	f7ff fe6a 	bl	8009ee8 <__sinit>
 800a214:	4b2c      	ldr	r3, [pc, #176]	; (800a2c8 <_puts_r+0xd0>)
 800a216:	429c      	cmp	r4, r3
 800a218:	d120      	bne.n	800a25c <_puts_r+0x64>
 800a21a:	686c      	ldr	r4, [r5, #4]
 800a21c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a21e:	07db      	lsls	r3, r3, #31
 800a220:	d405      	bmi.n	800a22e <_puts_r+0x36>
 800a222:	89a3      	ldrh	r3, [r4, #12]
 800a224:	0598      	lsls	r0, r3, #22
 800a226:	d402      	bmi.n	800a22e <_puts_r+0x36>
 800a228:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a22a:	f7ff ff20 	bl	800a06e <__retarget_lock_acquire_recursive>
 800a22e:	89a3      	ldrh	r3, [r4, #12]
 800a230:	0719      	lsls	r1, r3, #28
 800a232:	d51d      	bpl.n	800a270 <_puts_r+0x78>
 800a234:	6923      	ldr	r3, [r4, #16]
 800a236:	b1db      	cbz	r3, 800a270 <_puts_r+0x78>
 800a238:	3e01      	subs	r6, #1
 800a23a:	68a3      	ldr	r3, [r4, #8]
 800a23c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800a240:	3b01      	subs	r3, #1
 800a242:	60a3      	str	r3, [r4, #8]
 800a244:	bb39      	cbnz	r1, 800a296 <_puts_r+0x9e>
 800a246:	2b00      	cmp	r3, #0
 800a248:	da38      	bge.n	800a2bc <_puts_r+0xc4>
 800a24a:	4622      	mov	r2, r4
 800a24c:	210a      	movs	r1, #10
 800a24e:	4628      	mov	r0, r5
 800a250:	f000 f9cc 	bl	800a5ec <__swbuf_r>
 800a254:	3001      	adds	r0, #1
 800a256:	d011      	beq.n	800a27c <_puts_r+0x84>
 800a258:	250a      	movs	r5, #10
 800a25a:	e011      	b.n	800a280 <_puts_r+0x88>
 800a25c:	4b1b      	ldr	r3, [pc, #108]	; (800a2cc <_puts_r+0xd4>)
 800a25e:	429c      	cmp	r4, r3
 800a260:	d101      	bne.n	800a266 <_puts_r+0x6e>
 800a262:	68ac      	ldr	r4, [r5, #8]
 800a264:	e7da      	b.n	800a21c <_puts_r+0x24>
 800a266:	4b1a      	ldr	r3, [pc, #104]	; (800a2d0 <_puts_r+0xd8>)
 800a268:	429c      	cmp	r4, r3
 800a26a:	bf08      	it	eq
 800a26c:	68ec      	ldreq	r4, [r5, #12]
 800a26e:	e7d5      	b.n	800a21c <_puts_r+0x24>
 800a270:	4621      	mov	r1, r4
 800a272:	4628      	mov	r0, r5
 800a274:	f000 fa1e 	bl	800a6b4 <__swsetup_r>
 800a278:	2800      	cmp	r0, #0
 800a27a:	d0dd      	beq.n	800a238 <_puts_r+0x40>
 800a27c:	f04f 35ff 	mov.w	r5, #4294967295
 800a280:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a282:	07da      	lsls	r2, r3, #31
 800a284:	d405      	bmi.n	800a292 <_puts_r+0x9a>
 800a286:	89a3      	ldrh	r3, [r4, #12]
 800a288:	059b      	lsls	r3, r3, #22
 800a28a:	d402      	bmi.n	800a292 <_puts_r+0x9a>
 800a28c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a28e:	f7ff feef 	bl	800a070 <__retarget_lock_release_recursive>
 800a292:	4628      	mov	r0, r5
 800a294:	bd70      	pop	{r4, r5, r6, pc}
 800a296:	2b00      	cmp	r3, #0
 800a298:	da04      	bge.n	800a2a4 <_puts_r+0xac>
 800a29a:	69a2      	ldr	r2, [r4, #24]
 800a29c:	429a      	cmp	r2, r3
 800a29e:	dc06      	bgt.n	800a2ae <_puts_r+0xb6>
 800a2a0:	290a      	cmp	r1, #10
 800a2a2:	d004      	beq.n	800a2ae <_puts_r+0xb6>
 800a2a4:	6823      	ldr	r3, [r4, #0]
 800a2a6:	1c5a      	adds	r2, r3, #1
 800a2a8:	6022      	str	r2, [r4, #0]
 800a2aa:	7019      	strb	r1, [r3, #0]
 800a2ac:	e7c5      	b.n	800a23a <_puts_r+0x42>
 800a2ae:	4622      	mov	r2, r4
 800a2b0:	4628      	mov	r0, r5
 800a2b2:	f000 f99b 	bl	800a5ec <__swbuf_r>
 800a2b6:	3001      	adds	r0, #1
 800a2b8:	d1bf      	bne.n	800a23a <_puts_r+0x42>
 800a2ba:	e7df      	b.n	800a27c <_puts_r+0x84>
 800a2bc:	6823      	ldr	r3, [r4, #0]
 800a2be:	250a      	movs	r5, #10
 800a2c0:	1c5a      	adds	r2, r3, #1
 800a2c2:	6022      	str	r2, [r4, #0]
 800a2c4:	701d      	strb	r5, [r3, #0]
 800a2c6:	e7db      	b.n	800a280 <_puts_r+0x88>
 800a2c8:	0800c0d8 	.word	0x0800c0d8
 800a2cc:	0800c0f8 	.word	0x0800c0f8
 800a2d0:	0800c0b8 	.word	0x0800c0b8

0800a2d4 <puts>:
 800a2d4:	4b02      	ldr	r3, [pc, #8]	; (800a2e0 <puts+0xc>)
 800a2d6:	4601      	mov	r1, r0
 800a2d8:	6818      	ldr	r0, [r3, #0]
 800a2da:	f7ff bf8d 	b.w	800a1f8 <_puts_r>
 800a2de:	bf00      	nop
 800a2e0:	20000010 	.word	0x20000010

0800a2e4 <cleanup_glue>:
 800a2e4:	b538      	push	{r3, r4, r5, lr}
 800a2e6:	460c      	mov	r4, r1
 800a2e8:	6809      	ldr	r1, [r1, #0]
 800a2ea:	4605      	mov	r5, r0
 800a2ec:	b109      	cbz	r1, 800a2f2 <cleanup_glue+0xe>
 800a2ee:	f7ff fff9 	bl	800a2e4 <cleanup_glue>
 800a2f2:	4621      	mov	r1, r4
 800a2f4:	4628      	mov	r0, r5
 800a2f6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a2fa:	f000 bba7 	b.w	800aa4c <_free_r>
	...

0800a300 <_reclaim_reent>:
 800a300:	4b2c      	ldr	r3, [pc, #176]	; (800a3b4 <_reclaim_reent+0xb4>)
 800a302:	681b      	ldr	r3, [r3, #0]
 800a304:	4283      	cmp	r3, r0
 800a306:	b570      	push	{r4, r5, r6, lr}
 800a308:	4604      	mov	r4, r0
 800a30a:	d051      	beq.n	800a3b0 <_reclaim_reent+0xb0>
 800a30c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800a30e:	b143      	cbz	r3, 800a322 <_reclaim_reent+0x22>
 800a310:	68db      	ldr	r3, [r3, #12]
 800a312:	2b00      	cmp	r3, #0
 800a314:	d14a      	bne.n	800a3ac <_reclaim_reent+0xac>
 800a316:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a318:	6819      	ldr	r1, [r3, #0]
 800a31a:	b111      	cbz	r1, 800a322 <_reclaim_reent+0x22>
 800a31c:	4620      	mov	r0, r4
 800a31e:	f000 fb95 	bl	800aa4c <_free_r>
 800a322:	6961      	ldr	r1, [r4, #20]
 800a324:	b111      	cbz	r1, 800a32c <_reclaim_reent+0x2c>
 800a326:	4620      	mov	r0, r4
 800a328:	f000 fb90 	bl	800aa4c <_free_r>
 800a32c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800a32e:	b111      	cbz	r1, 800a336 <_reclaim_reent+0x36>
 800a330:	4620      	mov	r0, r4
 800a332:	f000 fb8b 	bl	800aa4c <_free_r>
 800a336:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800a338:	b111      	cbz	r1, 800a340 <_reclaim_reent+0x40>
 800a33a:	4620      	mov	r0, r4
 800a33c:	f000 fb86 	bl	800aa4c <_free_r>
 800a340:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800a342:	b111      	cbz	r1, 800a34a <_reclaim_reent+0x4a>
 800a344:	4620      	mov	r0, r4
 800a346:	f000 fb81 	bl	800aa4c <_free_r>
 800a34a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800a34c:	b111      	cbz	r1, 800a354 <_reclaim_reent+0x54>
 800a34e:	4620      	mov	r0, r4
 800a350:	f000 fb7c 	bl	800aa4c <_free_r>
 800a354:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800a356:	b111      	cbz	r1, 800a35e <_reclaim_reent+0x5e>
 800a358:	4620      	mov	r0, r4
 800a35a:	f000 fb77 	bl	800aa4c <_free_r>
 800a35e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800a360:	b111      	cbz	r1, 800a368 <_reclaim_reent+0x68>
 800a362:	4620      	mov	r0, r4
 800a364:	f000 fb72 	bl	800aa4c <_free_r>
 800a368:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a36a:	b111      	cbz	r1, 800a372 <_reclaim_reent+0x72>
 800a36c:	4620      	mov	r0, r4
 800a36e:	f000 fb6d 	bl	800aa4c <_free_r>
 800a372:	69a3      	ldr	r3, [r4, #24]
 800a374:	b1e3      	cbz	r3, 800a3b0 <_reclaim_reent+0xb0>
 800a376:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800a378:	4620      	mov	r0, r4
 800a37a:	4798      	blx	r3
 800a37c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800a37e:	b1b9      	cbz	r1, 800a3b0 <_reclaim_reent+0xb0>
 800a380:	4620      	mov	r0, r4
 800a382:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800a386:	f7ff bfad 	b.w	800a2e4 <cleanup_glue>
 800a38a:	5949      	ldr	r1, [r1, r5]
 800a38c:	b941      	cbnz	r1, 800a3a0 <_reclaim_reent+0xa0>
 800a38e:	3504      	adds	r5, #4
 800a390:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a392:	2d80      	cmp	r5, #128	; 0x80
 800a394:	68d9      	ldr	r1, [r3, #12]
 800a396:	d1f8      	bne.n	800a38a <_reclaim_reent+0x8a>
 800a398:	4620      	mov	r0, r4
 800a39a:	f000 fb57 	bl	800aa4c <_free_r>
 800a39e:	e7ba      	b.n	800a316 <_reclaim_reent+0x16>
 800a3a0:	680e      	ldr	r6, [r1, #0]
 800a3a2:	4620      	mov	r0, r4
 800a3a4:	f000 fb52 	bl	800aa4c <_free_r>
 800a3a8:	4631      	mov	r1, r6
 800a3aa:	e7ef      	b.n	800a38c <_reclaim_reent+0x8c>
 800a3ac:	2500      	movs	r5, #0
 800a3ae:	e7ef      	b.n	800a390 <_reclaim_reent+0x90>
 800a3b0:	bd70      	pop	{r4, r5, r6, pc}
 800a3b2:	bf00      	nop
 800a3b4:	20000010 	.word	0x20000010

0800a3b8 <_sbrk_r>:
 800a3b8:	b538      	push	{r3, r4, r5, lr}
 800a3ba:	4d06      	ldr	r5, [pc, #24]	; (800a3d4 <_sbrk_r+0x1c>)
 800a3bc:	2300      	movs	r3, #0
 800a3be:	4604      	mov	r4, r0
 800a3c0:	4608      	mov	r0, r1
 800a3c2:	602b      	str	r3, [r5, #0]
 800a3c4:	f7f8 faec 	bl	80029a0 <_sbrk>
 800a3c8:	1c43      	adds	r3, r0, #1
 800a3ca:	d102      	bne.n	800a3d2 <_sbrk_r+0x1a>
 800a3cc:	682b      	ldr	r3, [r5, #0]
 800a3ce:	b103      	cbz	r3, 800a3d2 <_sbrk_r+0x1a>
 800a3d0:	6023      	str	r3, [r4, #0]
 800a3d2:	bd38      	pop	{r3, r4, r5, pc}
 800a3d4:	20004d60 	.word	0x20004d60

0800a3d8 <setvbuf>:
 800a3d8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a3dc:	461d      	mov	r5, r3
 800a3de:	4b5d      	ldr	r3, [pc, #372]	; (800a554 <setvbuf+0x17c>)
 800a3e0:	681f      	ldr	r7, [r3, #0]
 800a3e2:	4604      	mov	r4, r0
 800a3e4:	460e      	mov	r6, r1
 800a3e6:	4690      	mov	r8, r2
 800a3e8:	b127      	cbz	r7, 800a3f4 <setvbuf+0x1c>
 800a3ea:	69bb      	ldr	r3, [r7, #24]
 800a3ec:	b913      	cbnz	r3, 800a3f4 <setvbuf+0x1c>
 800a3ee:	4638      	mov	r0, r7
 800a3f0:	f7ff fd7a 	bl	8009ee8 <__sinit>
 800a3f4:	4b58      	ldr	r3, [pc, #352]	; (800a558 <setvbuf+0x180>)
 800a3f6:	429c      	cmp	r4, r3
 800a3f8:	d167      	bne.n	800a4ca <setvbuf+0xf2>
 800a3fa:	687c      	ldr	r4, [r7, #4]
 800a3fc:	f1b8 0f02 	cmp.w	r8, #2
 800a400:	d006      	beq.n	800a410 <setvbuf+0x38>
 800a402:	f1b8 0f01 	cmp.w	r8, #1
 800a406:	f200 809f 	bhi.w	800a548 <setvbuf+0x170>
 800a40a:	2d00      	cmp	r5, #0
 800a40c:	f2c0 809c 	blt.w	800a548 <setvbuf+0x170>
 800a410:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a412:	07db      	lsls	r3, r3, #31
 800a414:	d405      	bmi.n	800a422 <setvbuf+0x4a>
 800a416:	89a3      	ldrh	r3, [r4, #12]
 800a418:	0598      	lsls	r0, r3, #22
 800a41a:	d402      	bmi.n	800a422 <setvbuf+0x4a>
 800a41c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a41e:	f7ff fe26 	bl	800a06e <__retarget_lock_acquire_recursive>
 800a422:	4621      	mov	r1, r4
 800a424:	4638      	mov	r0, r7
 800a426:	f000 fa49 	bl	800a8bc <_fflush_r>
 800a42a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a42c:	b141      	cbz	r1, 800a440 <setvbuf+0x68>
 800a42e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a432:	4299      	cmp	r1, r3
 800a434:	d002      	beq.n	800a43c <setvbuf+0x64>
 800a436:	4638      	mov	r0, r7
 800a438:	f000 fb08 	bl	800aa4c <_free_r>
 800a43c:	2300      	movs	r3, #0
 800a43e:	6363      	str	r3, [r4, #52]	; 0x34
 800a440:	2300      	movs	r3, #0
 800a442:	61a3      	str	r3, [r4, #24]
 800a444:	6063      	str	r3, [r4, #4]
 800a446:	89a3      	ldrh	r3, [r4, #12]
 800a448:	0619      	lsls	r1, r3, #24
 800a44a:	d503      	bpl.n	800a454 <setvbuf+0x7c>
 800a44c:	6921      	ldr	r1, [r4, #16]
 800a44e:	4638      	mov	r0, r7
 800a450:	f000 fafc 	bl	800aa4c <_free_r>
 800a454:	89a3      	ldrh	r3, [r4, #12]
 800a456:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 800a45a:	f023 0303 	bic.w	r3, r3, #3
 800a45e:	f1b8 0f02 	cmp.w	r8, #2
 800a462:	81a3      	strh	r3, [r4, #12]
 800a464:	d06c      	beq.n	800a540 <setvbuf+0x168>
 800a466:	ab01      	add	r3, sp, #4
 800a468:	466a      	mov	r2, sp
 800a46a:	4621      	mov	r1, r4
 800a46c:	4638      	mov	r0, r7
 800a46e:	f000 fa73 	bl	800a958 <__swhatbuf_r>
 800a472:	89a3      	ldrh	r3, [r4, #12]
 800a474:	4318      	orrs	r0, r3
 800a476:	81a0      	strh	r0, [r4, #12]
 800a478:	2d00      	cmp	r5, #0
 800a47a:	d130      	bne.n	800a4de <setvbuf+0x106>
 800a47c:	9d00      	ldr	r5, [sp, #0]
 800a47e:	4628      	mov	r0, r5
 800a480:	f000 fad0 	bl	800aa24 <malloc>
 800a484:	4606      	mov	r6, r0
 800a486:	2800      	cmp	r0, #0
 800a488:	d155      	bne.n	800a536 <setvbuf+0x15e>
 800a48a:	f8dd 9000 	ldr.w	r9, [sp]
 800a48e:	45a9      	cmp	r9, r5
 800a490:	d14a      	bne.n	800a528 <setvbuf+0x150>
 800a492:	f04f 35ff 	mov.w	r5, #4294967295
 800a496:	2200      	movs	r2, #0
 800a498:	60a2      	str	r2, [r4, #8]
 800a49a:	f104 0247 	add.w	r2, r4, #71	; 0x47
 800a49e:	6022      	str	r2, [r4, #0]
 800a4a0:	6122      	str	r2, [r4, #16]
 800a4a2:	2201      	movs	r2, #1
 800a4a4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a4a8:	6162      	str	r2, [r4, #20]
 800a4aa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a4ac:	f043 0302 	orr.w	r3, r3, #2
 800a4b0:	07d2      	lsls	r2, r2, #31
 800a4b2:	81a3      	strh	r3, [r4, #12]
 800a4b4:	d405      	bmi.n	800a4c2 <setvbuf+0xea>
 800a4b6:	f413 7f00 	tst.w	r3, #512	; 0x200
 800a4ba:	d102      	bne.n	800a4c2 <setvbuf+0xea>
 800a4bc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a4be:	f7ff fdd7 	bl	800a070 <__retarget_lock_release_recursive>
 800a4c2:	4628      	mov	r0, r5
 800a4c4:	b003      	add	sp, #12
 800a4c6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a4ca:	4b24      	ldr	r3, [pc, #144]	; (800a55c <setvbuf+0x184>)
 800a4cc:	429c      	cmp	r4, r3
 800a4ce:	d101      	bne.n	800a4d4 <setvbuf+0xfc>
 800a4d0:	68bc      	ldr	r4, [r7, #8]
 800a4d2:	e793      	b.n	800a3fc <setvbuf+0x24>
 800a4d4:	4b22      	ldr	r3, [pc, #136]	; (800a560 <setvbuf+0x188>)
 800a4d6:	429c      	cmp	r4, r3
 800a4d8:	bf08      	it	eq
 800a4da:	68fc      	ldreq	r4, [r7, #12]
 800a4dc:	e78e      	b.n	800a3fc <setvbuf+0x24>
 800a4de:	2e00      	cmp	r6, #0
 800a4e0:	d0cd      	beq.n	800a47e <setvbuf+0xa6>
 800a4e2:	69bb      	ldr	r3, [r7, #24]
 800a4e4:	b913      	cbnz	r3, 800a4ec <setvbuf+0x114>
 800a4e6:	4638      	mov	r0, r7
 800a4e8:	f7ff fcfe 	bl	8009ee8 <__sinit>
 800a4ec:	f1b8 0f01 	cmp.w	r8, #1
 800a4f0:	bf08      	it	eq
 800a4f2:	89a3      	ldrheq	r3, [r4, #12]
 800a4f4:	6026      	str	r6, [r4, #0]
 800a4f6:	bf04      	itt	eq
 800a4f8:	f043 0301 	orreq.w	r3, r3, #1
 800a4fc:	81a3      	strheq	r3, [r4, #12]
 800a4fe:	89a2      	ldrh	r2, [r4, #12]
 800a500:	f012 0308 	ands.w	r3, r2, #8
 800a504:	e9c4 6504 	strd	r6, r5, [r4, #16]
 800a508:	d01c      	beq.n	800a544 <setvbuf+0x16c>
 800a50a:	07d3      	lsls	r3, r2, #31
 800a50c:	bf41      	itttt	mi
 800a50e:	2300      	movmi	r3, #0
 800a510:	426d      	negmi	r5, r5
 800a512:	60a3      	strmi	r3, [r4, #8]
 800a514:	61a5      	strmi	r5, [r4, #24]
 800a516:	bf58      	it	pl
 800a518:	60a5      	strpl	r5, [r4, #8]
 800a51a:	6e65      	ldr	r5, [r4, #100]	; 0x64
 800a51c:	f015 0501 	ands.w	r5, r5, #1
 800a520:	d115      	bne.n	800a54e <setvbuf+0x176>
 800a522:	f412 7f00 	tst.w	r2, #512	; 0x200
 800a526:	e7c8      	b.n	800a4ba <setvbuf+0xe2>
 800a528:	4648      	mov	r0, r9
 800a52a:	f000 fa7b 	bl	800aa24 <malloc>
 800a52e:	4606      	mov	r6, r0
 800a530:	2800      	cmp	r0, #0
 800a532:	d0ae      	beq.n	800a492 <setvbuf+0xba>
 800a534:	464d      	mov	r5, r9
 800a536:	89a3      	ldrh	r3, [r4, #12]
 800a538:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a53c:	81a3      	strh	r3, [r4, #12]
 800a53e:	e7d0      	b.n	800a4e2 <setvbuf+0x10a>
 800a540:	2500      	movs	r5, #0
 800a542:	e7a8      	b.n	800a496 <setvbuf+0xbe>
 800a544:	60a3      	str	r3, [r4, #8]
 800a546:	e7e8      	b.n	800a51a <setvbuf+0x142>
 800a548:	f04f 35ff 	mov.w	r5, #4294967295
 800a54c:	e7b9      	b.n	800a4c2 <setvbuf+0xea>
 800a54e:	2500      	movs	r5, #0
 800a550:	e7b7      	b.n	800a4c2 <setvbuf+0xea>
 800a552:	bf00      	nop
 800a554:	20000010 	.word	0x20000010
 800a558:	0800c0d8 	.word	0x0800c0d8
 800a55c:	0800c0f8 	.word	0x0800c0f8
 800a560:	0800c0b8 	.word	0x0800c0b8

0800a564 <__sread>:
 800a564:	b510      	push	{r4, lr}
 800a566:	460c      	mov	r4, r1
 800a568:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a56c:	f000 fda8 	bl	800b0c0 <_read_r>
 800a570:	2800      	cmp	r0, #0
 800a572:	bfab      	itete	ge
 800a574:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a576:	89a3      	ldrhlt	r3, [r4, #12]
 800a578:	181b      	addge	r3, r3, r0
 800a57a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a57e:	bfac      	ite	ge
 800a580:	6563      	strge	r3, [r4, #84]	; 0x54
 800a582:	81a3      	strhlt	r3, [r4, #12]
 800a584:	bd10      	pop	{r4, pc}

0800a586 <__swrite>:
 800a586:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a58a:	461f      	mov	r7, r3
 800a58c:	898b      	ldrh	r3, [r1, #12]
 800a58e:	05db      	lsls	r3, r3, #23
 800a590:	4605      	mov	r5, r0
 800a592:	460c      	mov	r4, r1
 800a594:	4616      	mov	r6, r2
 800a596:	d505      	bpl.n	800a5a4 <__swrite+0x1e>
 800a598:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a59c:	2302      	movs	r3, #2
 800a59e:	2200      	movs	r2, #0
 800a5a0:	f000 f9c8 	bl	800a934 <_lseek_r>
 800a5a4:	89a3      	ldrh	r3, [r4, #12]
 800a5a6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a5aa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a5ae:	81a3      	strh	r3, [r4, #12]
 800a5b0:	4632      	mov	r2, r6
 800a5b2:	463b      	mov	r3, r7
 800a5b4:	4628      	mov	r0, r5
 800a5b6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a5ba:	f000 b869 	b.w	800a690 <_write_r>

0800a5be <__sseek>:
 800a5be:	b510      	push	{r4, lr}
 800a5c0:	460c      	mov	r4, r1
 800a5c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a5c6:	f000 f9b5 	bl	800a934 <_lseek_r>
 800a5ca:	1c43      	adds	r3, r0, #1
 800a5cc:	89a3      	ldrh	r3, [r4, #12]
 800a5ce:	bf15      	itete	ne
 800a5d0:	6560      	strne	r0, [r4, #84]	; 0x54
 800a5d2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a5d6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a5da:	81a3      	strheq	r3, [r4, #12]
 800a5dc:	bf18      	it	ne
 800a5de:	81a3      	strhne	r3, [r4, #12]
 800a5e0:	bd10      	pop	{r4, pc}

0800a5e2 <__sclose>:
 800a5e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a5e6:	f000 b8d3 	b.w	800a790 <_close_r>
	...

0800a5ec <__swbuf_r>:
 800a5ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a5ee:	460e      	mov	r6, r1
 800a5f0:	4614      	mov	r4, r2
 800a5f2:	4605      	mov	r5, r0
 800a5f4:	b118      	cbz	r0, 800a5fe <__swbuf_r+0x12>
 800a5f6:	6983      	ldr	r3, [r0, #24]
 800a5f8:	b90b      	cbnz	r3, 800a5fe <__swbuf_r+0x12>
 800a5fa:	f7ff fc75 	bl	8009ee8 <__sinit>
 800a5fe:	4b21      	ldr	r3, [pc, #132]	; (800a684 <__swbuf_r+0x98>)
 800a600:	429c      	cmp	r4, r3
 800a602:	d12b      	bne.n	800a65c <__swbuf_r+0x70>
 800a604:	686c      	ldr	r4, [r5, #4]
 800a606:	69a3      	ldr	r3, [r4, #24]
 800a608:	60a3      	str	r3, [r4, #8]
 800a60a:	89a3      	ldrh	r3, [r4, #12]
 800a60c:	071a      	lsls	r2, r3, #28
 800a60e:	d52f      	bpl.n	800a670 <__swbuf_r+0x84>
 800a610:	6923      	ldr	r3, [r4, #16]
 800a612:	b36b      	cbz	r3, 800a670 <__swbuf_r+0x84>
 800a614:	6923      	ldr	r3, [r4, #16]
 800a616:	6820      	ldr	r0, [r4, #0]
 800a618:	1ac0      	subs	r0, r0, r3
 800a61a:	6963      	ldr	r3, [r4, #20]
 800a61c:	b2f6      	uxtb	r6, r6
 800a61e:	4283      	cmp	r3, r0
 800a620:	4637      	mov	r7, r6
 800a622:	dc04      	bgt.n	800a62e <__swbuf_r+0x42>
 800a624:	4621      	mov	r1, r4
 800a626:	4628      	mov	r0, r5
 800a628:	f000 f948 	bl	800a8bc <_fflush_r>
 800a62c:	bb30      	cbnz	r0, 800a67c <__swbuf_r+0x90>
 800a62e:	68a3      	ldr	r3, [r4, #8]
 800a630:	3b01      	subs	r3, #1
 800a632:	60a3      	str	r3, [r4, #8]
 800a634:	6823      	ldr	r3, [r4, #0]
 800a636:	1c5a      	adds	r2, r3, #1
 800a638:	6022      	str	r2, [r4, #0]
 800a63a:	701e      	strb	r6, [r3, #0]
 800a63c:	6963      	ldr	r3, [r4, #20]
 800a63e:	3001      	adds	r0, #1
 800a640:	4283      	cmp	r3, r0
 800a642:	d004      	beq.n	800a64e <__swbuf_r+0x62>
 800a644:	89a3      	ldrh	r3, [r4, #12]
 800a646:	07db      	lsls	r3, r3, #31
 800a648:	d506      	bpl.n	800a658 <__swbuf_r+0x6c>
 800a64a:	2e0a      	cmp	r6, #10
 800a64c:	d104      	bne.n	800a658 <__swbuf_r+0x6c>
 800a64e:	4621      	mov	r1, r4
 800a650:	4628      	mov	r0, r5
 800a652:	f000 f933 	bl	800a8bc <_fflush_r>
 800a656:	b988      	cbnz	r0, 800a67c <__swbuf_r+0x90>
 800a658:	4638      	mov	r0, r7
 800a65a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a65c:	4b0a      	ldr	r3, [pc, #40]	; (800a688 <__swbuf_r+0x9c>)
 800a65e:	429c      	cmp	r4, r3
 800a660:	d101      	bne.n	800a666 <__swbuf_r+0x7a>
 800a662:	68ac      	ldr	r4, [r5, #8]
 800a664:	e7cf      	b.n	800a606 <__swbuf_r+0x1a>
 800a666:	4b09      	ldr	r3, [pc, #36]	; (800a68c <__swbuf_r+0xa0>)
 800a668:	429c      	cmp	r4, r3
 800a66a:	bf08      	it	eq
 800a66c:	68ec      	ldreq	r4, [r5, #12]
 800a66e:	e7ca      	b.n	800a606 <__swbuf_r+0x1a>
 800a670:	4621      	mov	r1, r4
 800a672:	4628      	mov	r0, r5
 800a674:	f000 f81e 	bl	800a6b4 <__swsetup_r>
 800a678:	2800      	cmp	r0, #0
 800a67a:	d0cb      	beq.n	800a614 <__swbuf_r+0x28>
 800a67c:	f04f 37ff 	mov.w	r7, #4294967295
 800a680:	e7ea      	b.n	800a658 <__swbuf_r+0x6c>
 800a682:	bf00      	nop
 800a684:	0800c0d8 	.word	0x0800c0d8
 800a688:	0800c0f8 	.word	0x0800c0f8
 800a68c:	0800c0b8 	.word	0x0800c0b8

0800a690 <_write_r>:
 800a690:	b538      	push	{r3, r4, r5, lr}
 800a692:	4d07      	ldr	r5, [pc, #28]	; (800a6b0 <_write_r+0x20>)
 800a694:	4604      	mov	r4, r0
 800a696:	4608      	mov	r0, r1
 800a698:	4611      	mov	r1, r2
 800a69a:	2200      	movs	r2, #0
 800a69c:	602a      	str	r2, [r5, #0]
 800a69e:	461a      	mov	r2, r3
 800a6a0:	f7f6 fee6 	bl	8001470 <_write>
 800a6a4:	1c43      	adds	r3, r0, #1
 800a6a6:	d102      	bne.n	800a6ae <_write_r+0x1e>
 800a6a8:	682b      	ldr	r3, [r5, #0]
 800a6aa:	b103      	cbz	r3, 800a6ae <_write_r+0x1e>
 800a6ac:	6023      	str	r3, [r4, #0]
 800a6ae:	bd38      	pop	{r3, r4, r5, pc}
 800a6b0:	20004d60 	.word	0x20004d60

0800a6b4 <__swsetup_r>:
 800a6b4:	4b32      	ldr	r3, [pc, #200]	; (800a780 <__swsetup_r+0xcc>)
 800a6b6:	b570      	push	{r4, r5, r6, lr}
 800a6b8:	681d      	ldr	r5, [r3, #0]
 800a6ba:	4606      	mov	r6, r0
 800a6bc:	460c      	mov	r4, r1
 800a6be:	b125      	cbz	r5, 800a6ca <__swsetup_r+0x16>
 800a6c0:	69ab      	ldr	r3, [r5, #24]
 800a6c2:	b913      	cbnz	r3, 800a6ca <__swsetup_r+0x16>
 800a6c4:	4628      	mov	r0, r5
 800a6c6:	f7ff fc0f 	bl	8009ee8 <__sinit>
 800a6ca:	4b2e      	ldr	r3, [pc, #184]	; (800a784 <__swsetup_r+0xd0>)
 800a6cc:	429c      	cmp	r4, r3
 800a6ce:	d10f      	bne.n	800a6f0 <__swsetup_r+0x3c>
 800a6d0:	686c      	ldr	r4, [r5, #4]
 800a6d2:	89a3      	ldrh	r3, [r4, #12]
 800a6d4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a6d8:	0719      	lsls	r1, r3, #28
 800a6da:	d42c      	bmi.n	800a736 <__swsetup_r+0x82>
 800a6dc:	06dd      	lsls	r5, r3, #27
 800a6de:	d411      	bmi.n	800a704 <__swsetup_r+0x50>
 800a6e0:	2309      	movs	r3, #9
 800a6e2:	6033      	str	r3, [r6, #0]
 800a6e4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a6e8:	81a3      	strh	r3, [r4, #12]
 800a6ea:	f04f 30ff 	mov.w	r0, #4294967295
 800a6ee:	e03e      	b.n	800a76e <__swsetup_r+0xba>
 800a6f0:	4b25      	ldr	r3, [pc, #148]	; (800a788 <__swsetup_r+0xd4>)
 800a6f2:	429c      	cmp	r4, r3
 800a6f4:	d101      	bne.n	800a6fa <__swsetup_r+0x46>
 800a6f6:	68ac      	ldr	r4, [r5, #8]
 800a6f8:	e7eb      	b.n	800a6d2 <__swsetup_r+0x1e>
 800a6fa:	4b24      	ldr	r3, [pc, #144]	; (800a78c <__swsetup_r+0xd8>)
 800a6fc:	429c      	cmp	r4, r3
 800a6fe:	bf08      	it	eq
 800a700:	68ec      	ldreq	r4, [r5, #12]
 800a702:	e7e6      	b.n	800a6d2 <__swsetup_r+0x1e>
 800a704:	0758      	lsls	r0, r3, #29
 800a706:	d512      	bpl.n	800a72e <__swsetup_r+0x7a>
 800a708:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a70a:	b141      	cbz	r1, 800a71e <__swsetup_r+0x6a>
 800a70c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a710:	4299      	cmp	r1, r3
 800a712:	d002      	beq.n	800a71a <__swsetup_r+0x66>
 800a714:	4630      	mov	r0, r6
 800a716:	f000 f999 	bl	800aa4c <_free_r>
 800a71a:	2300      	movs	r3, #0
 800a71c:	6363      	str	r3, [r4, #52]	; 0x34
 800a71e:	89a3      	ldrh	r3, [r4, #12]
 800a720:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a724:	81a3      	strh	r3, [r4, #12]
 800a726:	2300      	movs	r3, #0
 800a728:	6063      	str	r3, [r4, #4]
 800a72a:	6923      	ldr	r3, [r4, #16]
 800a72c:	6023      	str	r3, [r4, #0]
 800a72e:	89a3      	ldrh	r3, [r4, #12]
 800a730:	f043 0308 	orr.w	r3, r3, #8
 800a734:	81a3      	strh	r3, [r4, #12]
 800a736:	6923      	ldr	r3, [r4, #16]
 800a738:	b94b      	cbnz	r3, 800a74e <__swsetup_r+0x9a>
 800a73a:	89a3      	ldrh	r3, [r4, #12]
 800a73c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a740:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a744:	d003      	beq.n	800a74e <__swsetup_r+0x9a>
 800a746:	4621      	mov	r1, r4
 800a748:	4630      	mov	r0, r6
 800a74a:	f000 f92b 	bl	800a9a4 <__smakebuf_r>
 800a74e:	89a0      	ldrh	r0, [r4, #12]
 800a750:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a754:	f010 0301 	ands.w	r3, r0, #1
 800a758:	d00a      	beq.n	800a770 <__swsetup_r+0xbc>
 800a75a:	2300      	movs	r3, #0
 800a75c:	60a3      	str	r3, [r4, #8]
 800a75e:	6963      	ldr	r3, [r4, #20]
 800a760:	425b      	negs	r3, r3
 800a762:	61a3      	str	r3, [r4, #24]
 800a764:	6923      	ldr	r3, [r4, #16]
 800a766:	b943      	cbnz	r3, 800a77a <__swsetup_r+0xc6>
 800a768:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a76c:	d1ba      	bne.n	800a6e4 <__swsetup_r+0x30>
 800a76e:	bd70      	pop	{r4, r5, r6, pc}
 800a770:	0781      	lsls	r1, r0, #30
 800a772:	bf58      	it	pl
 800a774:	6963      	ldrpl	r3, [r4, #20]
 800a776:	60a3      	str	r3, [r4, #8]
 800a778:	e7f4      	b.n	800a764 <__swsetup_r+0xb0>
 800a77a:	2000      	movs	r0, #0
 800a77c:	e7f7      	b.n	800a76e <__swsetup_r+0xba>
 800a77e:	bf00      	nop
 800a780:	20000010 	.word	0x20000010
 800a784:	0800c0d8 	.word	0x0800c0d8
 800a788:	0800c0f8 	.word	0x0800c0f8
 800a78c:	0800c0b8 	.word	0x0800c0b8

0800a790 <_close_r>:
 800a790:	b538      	push	{r3, r4, r5, lr}
 800a792:	4d06      	ldr	r5, [pc, #24]	; (800a7ac <_close_r+0x1c>)
 800a794:	2300      	movs	r3, #0
 800a796:	4604      	mov	r4, r0
 800a798:	4608      	mov	r0, r1
 800a79a:	602b      	str	r3, [r5, #0]
 800a79c:	f7f6 fe94 	bl	80014c8 <_close>
 800a7a0:	1c43      	adds	r3, r0, #1
 800a7a2:	d102      	bne.n	800a7aa <_close_r+0x1a>
 800a7a4:	682b      	ldr	r3, [r5, #0]
 800a7a6:	b103      	cbz	r3, 800a7aa <_close_r+0x1a>
 800a7a8:	6023      	str	r3, [r4, #0]
 800a7aa:	bd38      	pop	{r3, r4, r5, pc}
 800a7ac:	20004d60 	.word	0x20004d60

0800a7b0 <__sflush_r>:
 800a7b0:	898a      	ldrh	r2, [r1, #12]
 800a7b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a7b6:	4605      	mov	r5, r0
 800a7b8:	0710      	lsls	r0, r2, #28
 800a7ba:	460c      	mov	r4, r1
 800a7bc:	d458      	bmi.n	800a870 <__sflush_r+0xc0>
 800a7be:	684b      	ldr	r3, [r1, #4]
 800a7c0:	2b00      	cmp	r3, #0
 800a7c2:	dc05      	bgt.n	800a7d0 <__sflush_r+0x20>
 800a7c4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a7c6:	2b00      	cmp	r3, #0
 800a7c8:	dc02      	bgt.n	800a7d0 <__sflush_r+0x20>
 800a7ca:	2000      	movs	r0, #0
 800a7cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a7d0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a7d2:	2e00      	cmp	r6, #0
 800a7d4:	d0f9      	beq.n	800a7ca <__sflush_r+0x1a>
 800a7d6:	2300      	movs	r3, #0
 800a7d8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a7dc:	682f      	ldr	r7, [r5, #0]
 800a7de:	602b      	str	r3, [r5, #0]
 800a7e0:	d032      	beq.n	800a848 <__sflush_r+0x98>
 800a7e2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a7e4:	89a3      	ldrh	r3, [r4, #12]
 800a7e6:	075a      	lsls	r2, r3, #29
 800a7e8:	d505      	bpl.n	800a7f6 <__sflush_r+0x46>
 800a7ea:	6863      	ldr	r3, [r4, #4]
 800a7ec:	1ac0      	subs	r0, r0, r3
 800a7ee:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a7f0:	b10b      	cbz	r3, 800a7f6 <__sflush_r+0x46>
 800a7f2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a7f4:	1ac0      	subs	r0, r0, r3
 800a7f6:	2300      	movs	r3, #0
 800a7f8:	4602      	mov	r2, r0
 800a7fa:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a7fc:	6a21      	ldr	r1, [r4, #32]
 800a7fe:	4628      	mov	r0, r5
 800a800:	47b0      	blx	r6
 800a802:	1c43      	adds	r3, r0, #1
 800a804:	89a3      	ldrh	r3, [r4, #12]
 800a806:	d106      	bne.n	800a816 <__sflush_r+0x66>
 800a808:	6829      	ldr	r1, [r5, #0]
 800a80a:	291d      	cmp	r1, #29
 800a80c:	d82c      	bhi.n	800a868 <__sflush_r+0xb8>
 800a80e:	4a2a      	ldr	r2, [pc, #168]	; (800a8b8 <__sflush_r+0x108>)
 800a810:	40ca      	lsrs	r2, r1
 800a812:	07d6      	lsls	r6, r2, #31
 800a814:	d528      	bpl.n	800a868 <__sflush_r+0xb8>
 800a816:	2200      	movs	r2, #0
 800a818:	6062      	str	r2, [r4, #4]
 800a81a:	04d9      	lsls	r1, r3, #19
 800a81c:	6922      	ldr	r2, [r4, #16]
 800a81e:	6022      	str	r2, [r4, #0]
 800a820:	d504      	bpl.n	800a82c <__sflush_r+0x7c>
 800a822:	1c42      	adds	r2, r0, #1
 800a824:	d101      	bne.n	800a82a <__sflush_r+0x7a>
 800a826:	682b      	ldr	r3, [r5, #0]
 800a828:	b903      	cbnz	r3, 800a82c <__sflush_r+0x7c>
 800a82a:	6560      	str	r0, [r4, #84]	; 0x54
 800a82c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a82e:	602f      	str	r7, [r5, #0]
 800a830:	2900      	cmp	r1, #0
 800a832:	d0ca      	beq.n	800a7ca <__sflush_r+0x1a>
 800a834:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a838:	4299      	cmp	r1, r3
 800a83a:	d002      	beq.n	800a842 <__sflush_r+0x92>
 800a83c:	4628      	mov	r0, r5
 800a83e:	f000 f905 	bl	800aa4c <_free_r>
 800a842:	2000      	movs	r0, #0
 800a844:	6360      	str	r0, [r4, #52]	; 0x34
 800a846:	e7c1      	b.n	800a7cc <__sflush_r+0x1c>
 800a848:	6a21      	ldr	r1, [r4, #32]
 800a84a:	2301      	movs	r3, #1
 800a84c:	4628      	mov	r0, r5
 800a84e:	47b0      	blx	r6
 800a850:	1c41      	adds	r1, r0, #1
 800a852:	d1c7      	bne.n	800a7e4 <__sflush_r+0x34>
 800a854:	682b      	ldr	r3, [r5, #0]
 800a856:	2b00      	cmp	r3, #0
 800a858:	d0c4      	beq.n	800a7e4 <__sflush_r+0x34>
 800a85a:	2b1d      	cmp	r3, #29
 800a85c:	d001      	beq.n	800a862 <__sflush_r+0xb2>
 800a85e:	2b16      	cmp	r3, #22
 800a860:	d101      	bne.n	800a866 <__sflush_r+0xb6>
 800a862:	602f      	str	r7, [r5, #0]
 800a864:	e7b1      	b.n	800a7ca <__sflush_r+0x1a>
 800a866:	89a3      	ldrh	r3, [r4, #12]
 800a868:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a86c:	81a3      	strh	r3, [r4, #12]
 800a86e:	e7ad      	b.n	800a7cc <__sflush_r+0x1c>
 800a870:	690f      	ldr	r7, [r1, #16]
 800a872:	2f00      	cmp	r7, #0
 800a874:	d0a9      	beq.n	800a7ca <__sflush_r+0x1a>
 800a876:	0793      	lsls	r3, r2, #30
 800a878:	680e      	ldr	r6, [r1, #0]
 800a87a:	bf08      	it	eq
 800a87c:	694b      	ldreq	r3, [r1, #20]
 800a87e:	600f      	str	r7, [r1, #0]
 800a880:	bf18      	it	ne
 800a882:	2300      	movne	r3, #0
 800a884:	eba6 0807 	sub.w	r8, r6, r7
 800a888:	608b      	str	r3, [r1, #8]
 800a88a:	f1b8 0f00 	cmp.w	r8, #0
 800a88e:	dd9c      	ble.n	800a7ca <__sflush_r+0x1a>
 800a890:	6a21      	ldr	r1, [r4, #32]
 800a892:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a894:	4643      	mov	r3, r8
 800a896:	463a      	mov	r2, r7
 800a898:	4628      	mov	r0, r5
 800a89a:	47b0      	blx	r6
 800a89c:	2800      	cmp	r0, #0
 800a89e:	dc06      	bgt.n	800a8ae <__sflush_r+0xfe>
 800a8a0:	89a3      	ldrh	r3, [r4, #12]
 800a8a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a8a6:	81a3      	strh	r3, [r4, #12]
 800a8a8:	f04f 30ff 	mov.w	r0, #4294967295
 800a8ac:	e78e      	b.n	800a7cc <__sflush_r+0x1c>
 800a8ae:	4407      	add	r7, r0
 800a8b0:	eba8 0800 	sub.w	r8, r8, r0
 800a8b4:	e7e9      	b.n	800a88a <__sflush_r+0xda>
 800a8b6:	bf00      	nop
 800a8b8:	20400001 	.word	0x20400001

0800a8bc <_fflush_r>:
 800a8bc:	b538      	push	{r3, r4, r5, lr}
 800a8be:	690b      	ldr	r3, [r1, #16]
 800a8c0:	4605      	mov	r5, r0
 800a8c2:	460c      	mov	r4, r1
 800a8c4:	b913      	cbnz	r3, 800a8cc <_fflush_r+0x10>
 800a8c6:	2500      	movs	r5, #0
 800a8c8:	4628      	mov	r0, r5
 800a8ca:	bd38      	pop	{r3, r4, r5, pc}
 800a8cc:	b118      	cbz	r0, 800a8d6 <_fflush_r+0x1a>
 800a8ce:	6983      	ldr	r3, [r0, #24]
 800a8d0:	b90b      	cbnz	r3, 800a8d6 <_fflush_r+0x1a>
 800a8d2:	f7ff fb09 	bl	8009ee8 <__sinit>
 800a8d6:	4b14      	ldr	r3, [pc, #80]	; (800a928 <_fflush_r+0x6c>)
 800a8d8:	429c      	cmp	r4, r3
 800a8da:	d11b      	bne.n	800a914 <_fflush_r+0x58>
 800a8dc:	686c      	ldr	r4, [r5, #4]
 800a8de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a8e2:	2b00      	cmp	r3, #0
 800a8e4:	d0ef      	beq.n	800a8c6 <_fflush_r+0xa>
 800a8e6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a8e8:	07d0      	lsls	r0, r2, #31
 800a8ea:	d404      	bmi.n	800a8f6 <_fflush_r+0x3a>
 800a8ec:	0599      	lsls	r1, r3, #22
 800a8ee:	d402      	bmi.n	800a8f6 <_fflush_r+0x3a>
 800a8f0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a8f2:	f7ff fbbc 	bl	800a06e <__retarget_lock_acquire_recursive>
 800a8f6:	4628      	mov	r0, r5
 800a8f8:	4621      	mov	r1, r4
 800a8fa:	f7ff ff59 	bl	800a7b0 <__sflush_r>
 800a8fe:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a900:	07da      	lsls	r2, r3, #31
 800a902:	4605      	mov	r5, r0
 800a904:	d4e0      	bmi.n	800a8c8 <_fflush_r+0xc>
 800a906:	89a3      	ldrh	r3, [r4, #12]
 800a908:	059b      	lsls	r3, r3, #22
 800a90a:	d4dd      	bmi.n	800a8c8 <_fflush_r+0xc>
 800a90c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a90e:	f7ff fbaf 	bl	800a070 <__retarget_lock_release_recursive>
 800a912:	e7d9      	b.n	800a8c8 <_fflush_r+0xc>
 800a914:	4b05      	ldr	r3, [pc, #20]	; (800a92c <_fflush_r+0x70>)
 800a916:	429c      	cmp	r4, r3
 800a918:	d101      	bne.n	800a91e <_fflush_r+0x62>
 800a91a:	68ac      	ldr	r4, [r5, #8]
 800a91c:	e7df      	b.n	800a8de <_fflush_r+0x22>
 800a91e:	4b04      	ldr	r3, [pc, #16]	; (800a930 <_fflush_r+0x74>)
 800a920:	429c      	cmp	r4, r3
 800a922:	bf08      	it	eq
 800a924:	68ec      	ldreq	r4, [r5, #12]
 800a926:	e7da      	b.n	800a8de <_fflush_r+0x22>
 800a928:	0800c0d8 	.word	0x0800c0d8
 800a92c:	0800c0f8 	.word	0x0800c0f8
 800a930:	0800c0b8 	.word	0x0800c0b8

0800a934 <_lseek_r>:
 800a934:	b538      	push	{r3, r4, r5, lr}
 800a936:	4d07      	ldr	r5, [pc, #28]	; (800a954 <_lseek_r+0x20>)
 800a938:	4604      	mov	r4, r0
 800a93a:	4608      	mov	r0, r1
 800a93c:	4611      	mov	r1, r2
 800a93e:	2200      	movs	r2, #0
 800a940:	602a      	str	r2, [r5, #0]
 800a942:	461a      	mov	r2, r3
 800a944:	f7f6 fdd7 	bl	80014f6 <_lseek>
 800a948:	1c43      	adds	r3, r0, #1
 800a94a:	d102      	bne.n	800a952 <_lseek_r+0x1e>
 800a94c:	682b      	ldr	r3, [r5, #0]
 800a94e:	b103      	cbz	r3, 800a952 <_lseek_r+0x1e>
 800a950:	6023      	str	r3, [r4, #0]
 800a952:	bd38      	pop	{r3, r4, r5, pc}
 800a954:	20004d60 	.word	0x20004d60

0800a958 <__swhatbuf_r>:
 800a958:	b570      	push	{r4, r5, r6, lr}
 800a95a:	460e      	mov	r6, r1
 800a95c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a960:	2900      	cmp	r1, #0
 800a962:	b096      	sub	sp, #88	; 0x58
 800a964:	4614      	mov	r4, r2
 800a966:	461d      	mov	r5, r3
 800a968:	da08      	bge.n	800a97c <__swhatbuf_r+0x24>
 800a96a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800a96e:	2200      	movs	r2, #0
 800a970:	602a      	str	r2, [r5, #0]
 800a972:	061a      	lsls	r2, r3, #24
 800a974:	d410      	bmi.n	800a998 <__swhatbuf_r+0x40>
 800a976:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a97a:	e00e      	b.n	800a99a <__swhatbuf_r+0x42>
 800a97c:	466a      	mov	r2, sp
 800a97e:	f000 fbb1 	bl	800b0e4 <_fstat_r>
 800a982:	2800      	cmp	r0, #0
 800a984:	dbf1      	blt.n	800a96a <__swhatbuf_r+0x12>
 800a986:	9a01      	ldr	r2, [sp, #4]
 800a988:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a98c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a990:	425a      	negs	r2, r3
 800a992:	415a      	adcs	r2, r3
 800a994:	602a      	str	r2, [r5, #0]
 800a996:	e7ee      	b.n	800a976 <__swhatbuf_r+0x1e>
 800a998:	2340      	movs	r3, #64	; 0x40
 800a99a:	2000      	movs	r0, #0
 800a99c:	6023      	str	r3, [r4, #0]
 800a99e:	b016      	add	sp, #88	; 0x58
 800a9a0:	bd70      	pop	{r4, r5, r6, pc}
	...

0800a9a4 <__smakebuf_r>:
 800a9a4:	898b      	ldrh	r3, [r1, #12]
 800a9a6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a9a8:	079d      	lsls	r5, r3, #30
 800a9aa:	4606      	mov	r6, r0
 800a9ac:	460c      	mov	r4, r1
 800a9ae:	d507      	bpl.n	800a9c0 <__smakebuf_r+0x1c>
 800a9b0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a9b4:	6023      	str	r3, [r4, #0]
 800a9b6:	6123      	str	r3, [r4, #16]
 800a9b8:	2301      	movs	r3, #1
 800a9ba:	6163      	str	r3, [r4, #20]
 800a9bc:	b002      	add	sp, #8
 800a9be:	bd70      	pop	{r4, r5, r6, pc}
 800a9c0:	ab01      	add	r3, sp, #4
 800a9c2:	466a      	mov	r2, sp
 800a9c4:	f7ff ffc8 	bl	800a958 <__swhatbuf_r>
 800a9c8:	9900      	ldr	r1, [sp, #0]
 800a9ca:	4605      	mov	r5, r0
 800a9cc:	4630      	mov	r0, r6
 800a9ce:	f7ff fb87 	bl	800a0e0 <_malloc_r>
 800a9d2:	b948      	cbnz	r0, 800a9e8 <__smakebuf_r+0x44>
 800a9d4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a9d8:	059a      	lsls	r2, r3, #22
 800a9da:	d4ef      	bmi.n	800a9bc <__smakebuf_r+0x18>
 800a9dc:	f023 0303 	bic.w	r3, r3, #3
 800a9e0:	f043 0302 	orr.w	r3, r3, #2
 800a9e4:	81a3      	strh	r3, [r4, #12]
 800a9e6:	e7e3      	b.n	800a9b0 <__smakebuf_r+0xc>
 800a9e8:	4b0d      	ldr	r3, [pc, #52]	; (800aa20 <__smakebuf_r+0x7c>)
 800a9ea:	62b3      	str	r3, [r6, #40]	; 0x28
 800a9ec:	89a3      	ldrh	r3, [r4, #12]
 800a9ee:	6020      	str	r0, [r4, #0]
 800a9f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a9f4:	81a3      	strh	r3, [r4, #12]
 800a9f6:	9b00      	ldr	r3, [sp, #0]
 800a9f8:	6163      	str	r3, [r4, #20]
 800a9fa:	9b01      	ldr	r3, [sp, #4]
 800a9fc:	6120      	str	r0, [r4, #16]
 800a9fe:	b15b      	cbz	r3, 800aa18 <__smakebuf_r+0x74>
 800aa00:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800aa04:	4630      	mov	r0, r6
 800aa06:	f000 fb7f 	bl	800b108 <_isatty_r>
 800aa0a:	b128      	cbz	r0, 800aa18 <__smakebuf_r+0x74>
 800aa0c:	89a3      	ldrh	r3, [r4, #12]
 800aa0e:	f023 0303 	bic.w	r3, r3, #3
 800aa12:	f043 0301 	orr.w	r3, r3, #1
 800aa16:	81a3      	strh	r3, [r4, #12]
 800aa18:	89a0      	ldrh	r0, [r4, #12]
 800aa1a:	4305      	orrs	r5, r0
 800aa1c:	81a5      	strh	r5, [r4, #12]
 800aa1e:	e7cd      	b.n	800a9bc <__smakebuf_r+0x18>
 800aa20:	08009e81 	.word	0x08009e81

0800aa24 <malloc>:
 800aa24:	4b02      	ldr	r3, [pc, #8]	; (800aa30 <malloc+0xc>)
 800aa26:	4601      	mov	r1, r0
 800aa28:	6818      	ldr	r0, [r3, #0]
 800aa2a:	f7ff bb59 	b.w	800a0e0 <_malloc_r>
 800aa2e:	bf00      	nop
 800aa30:	20000010 	.word	0x20000010

0800aa34 <__malloc_lock>:
 800aa34:	4801      	ldr	r0, [pc, #4]	; (800aa3c <__malloc_lock+0x8>)
 800aa36:	f7ff bb1a 	b.w	800a06e <__retarget_lock_acquire_recursive>
 800aa3a:	bf00      	nop
 800aa3c:	20004d54 	.word	0x20004d54

0800aa40 <__malloc_unlock>:
 800aa40:	4801      	ldr	r0, [pc, #4]	; (800aa48 <__malloc_unlock+0x8>)
 800aa42:	f7ff bb15 	b.w	800a070 <__retarget_lock_release_recursive>
 800aa46:	bf00      	nop
 800aa48:	20004d54 	.word	0x20004d54

0800aa4c <_free_r>:
 800aa4c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800aa4e:	2900      	cmp	r1, #0
 800aa50:	d044      	beq.n	800aadc <_free_r+0x90>
 800aa52:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800aa56:	9001      	str	r0, [sp, #4]
 800aa58:	2b00      	cmp	r3, #0
 800aa5a:	f1a1 0404 	sub.w	r4, r1, #4
 800aa5e:	bfb8      	it	lt
 800aa60:	18e4      	addlt	r4, r4, r3
 800aa62:	f7ff ffe7 	bl	800aa34 <__malloc_lock>
 800aa66:	4a1e      	ldr	r2, [pc, #120]	; (800aae0 <_free_r+0x94>)
 800aa68:	9801      	ldr	r0, [sp, #4]
 800aa6a:	6813      	ldr	r3, [r2, #0]
 800aa6c:	b933      	cbnz	r3, 800aa7c <_free_r+0x30>
 800aa6e:	6063      	str	r3, [r4, #4]
 800aa70:	6014      	str	r4, [r2, #0]
 800aa72:	b003      	add	sp, #12
 800aa74:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800aa78:	f7ff bfe2 	b.w	800aa40 <__malloc_unlock>
 800aa7c:	42a3      	cmp	r3, r4
 800aa7e:	d908      	bls.n	800aa92 <_free_r+0x46>
 800aa80:	6825      	ldr	r5, [r4, #0]
 800aa82:	1961      	adds	r1, r4, r5
 800aa84:	428b      	cmp	r3, r1
 800aa86:	bf01      	itttt	eq
 800aa88:	6819      	ldreq	r1, [r3, #0]
 800aa8a:	685b      	ldreq	r3, [r3, #4]
 800aa8c:	1949      	addeq	r1, r1, r5
 800aa8e:	6021      	streq	r1, [r4, #0]
 800aa90:	e7ed      	b.n	800aa6e <_free_r+0x22>
 800aa92:	461a      	mov	r2, r3
 800aa94:	685b      	ldr	r3, [r3, #4]
 800aa96:	b10b      	cbz	r3, 800aa9c <_free_r+0x50>
 800aa98:	42a3      	cmp	r3, r4
 800aa9a:	d9fa      	bls.n	800aa92 <_free_r+0x46>
 800aa9c:	6811      	ldr	r1, [r2, #0]
 800aa9e:	1855      	adds	r5, r2, r1
 800aaa0:	42a5      	cmp	r5, r4
 800aaa2:	d10b      	bne.n	800aabc <_free_r+0x70>
 800aaa4:	6824      	ldr	r4, [r4, #0]
 800aaa6:	4421      	add	r1, r4
 800aaa8:	1854      	adds	r4, r2, r1
 800aaaa:	42a3      	cmp	r3, r4
 800aaac:	6011      	str	r1, [r2, #0]
 800aaae:	d1e0      	bne.n	800aa72 <_free_r+0x26>
 800aab0:	681c      	ldr	r4, [r3, #0]
 800aab2:	685b      	ldr	r3, [r3, #4]
 800aab4:	6053      	str	r3, [r2, #4]
 800aab6:	4421      	add	r1, r4
 800aab8:	6011      	str	r1, [r2, #0]
 800aaba:	e7da      	b.n	800aa72 <_free_r+0x26>
 800aabc:	d902      	bls.n	800aac4 <_free_r+0x78>
 800aabe:	230c      	movs	r3, #12
 800aac0:	6003      	str	r3, [r0, #0]
 800aac2:	e7d6      	b.n	800aa72 <_free_r+0x26>
 800aac4:	6825      	ldr	r5, [r4, #0]
 800aac6:	1961      	adds	r1, r4, r5
 800aac8:	428b      	cmp	r3, r1
 800aaca:	bf04      	itt	eq
 800aacc:	6819      	ldreq	r1, [r3, #0]
 800aace:	685b      	ldreq	r3, [r3, #4]
 800aad0:	6063      	str	r3, [r4, #4]
 800aad2:	bf04      	itt	eq
 800aad4:	1949      	addeq	r1, r1, r5
 800aad6:	6021      	streq	r1, [r4, #0]
 800aad8:	6054      	str	r4, [r2, #4]
 800aada:	e7ca      	b.n	800aa72 <_free_r+0x26>
 800aadc:	b003      	add	sp, #12
 800aade:	bd30      	pop	{r4, r5, pc}
 800aae0:	20004d58 	.word	0x20004d58

0800aae4 <__sfputc_r>:
 800aae4:	6893      	ldr	r3, [r2, #8]
 800aae6:	3b01      	subs	r3, #1
 800aae8:	2b00      	cmp	r3, #0
 800aaea:	b410      	push	{r4}
 800aaec:	6093      	str	r3, [r2, #8]
 800aaee:	da08      	bge.n	800ab02 <__sfputc_r+0x1e>
 800aaf0:	6994      	ldr	r4, [r2, #24]
 800aaf2:	42a3      	cmp	r3, r4
 800aaf4:	db01      	blt.n	800aafa <__sfputc_r+0x16>
 800aaf6:	290a      	cmp	r1, #10
 800aaf8:	d103      	bne.n	800ab02 <__sfputc_r+0x1e>
 800aafa:	f85d 4b04 	ldr.w	r4, [sp], #4
 800aafe:	f7ff bd75 	b.w	800a5ec <__swbuf_r>
 800ab02:	6813      	ldr	r3, [r2, #0]
 800ab04:	1c58      	adds	r0, r3, #1
 800ab06:	6010      	str	r0, [r2, #0]
 800ab08:	7019      	strb	r1, [r3, #0]
 800ab0a:	4608      	mov	r0, r1
 800ab0c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ab10:	4770      	bx	lr

0800ab12 <__sfputs_r>:
 800ab12:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab14:	4606      	mov	r6, r0
 800ab16:	460f      	mov	r7, r1
 800ab18:	4614      	mov	r4, r2
 800ab1a:	18d5      	adds	r5, r2, r3
 800ab1c:	42ac      	cmp	r4, r5
 800ab1e:	d101      	bne.n	800ab24 <__sfputs_r+0x12>
 800ab20:	2000      	movs	r0, #0
 800ab22:	e007      	b.n	800ab34 <__sfputs_r+0x22>
 800ab24:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ab28:	463a      	mov	r2, r7
 800ab2a:	4630      	mov	r0, r6
 800ab2c:	f7ff ffda 	bl	800aae4 <__sfputc_r>
 800ab30:	1c43      	adds	r3, r0, #1
 800ab32:	d1f3      	bne.n	800ab1c <__sfputs_r+0xa>
 800ab34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800ab38 <_vfiprintf_r>:
 800ab38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab3c:	460d      	mov	r5, r1
 800ab3e:	b09d      	sub	sp, #116	; 0x74
 800ab40:	4614      	mov	r4, r2
 800ab42:	4698      	mov	r8, r3
 800ab44:	4606      	mov	r6, r0
 800ab46:	b118      	cbz	r0, 800ab50 <_vfiprintf_r+0x18>
 800ab48:	6983      	ldr	r3, [r0, #24]
 800ab4a:	b90b      	cbnz	r3, 800ab50 <_vfiprintf_r+0x18>
 800ab4c:	f7ff f9cc 	bl	8009ee8 <__sinit>
 800ab50:	4b89      	ldr	r3, [pc, #548]	; (800ad78 <_vfiprintf_r+0x240>)
 800ab52:	429d      	cmp	r5, r3
 800ab54:	d11b      	bne.n	800ab8e <_vfiprintf_r+0x56>
 800ab56:	6875      	ldr	r5, [r6, #4]
 800ab58:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ab5a:	07d9      	lsls	r1, r3, #31
 800ab5c:	d405      	bmi.n	800ab6a <_vfiprintf_r+0x32>
 800ab5e:	89ab      	ldrh	r3, [r5, #12]
 800ab60:	059a      	lsls	r2, r3, #22
 800ab62:	d402      	bmi.n	800ab6a <_vfiprintf_r+0x32>
 800ab64:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ab66:	f7ff fa82 	bl	800a06e <__retarget_lock_acquire_recursive>
 800ab6a:	89ab      	ldrh	r3, [r5, #12]
 800ab6c:	071b      	lsls	r3, r3, #28
 800ab6e:	d501      	bpl.n	800ab74 <_vfiprintf_r+0x3c>
 800ab70:	692b      	ldr	r3, [r5, #16]
 800ab72:	b9eb      	cbnz	r3, 800abb0 <_vfiprintf_r+0x78>
 800ab74:	4629      	mov	r1, r5
 800ab76:	4630      	mov	r0, r6
 800ab78:	f7ff fd9c 	bl	800a6b4 <__swsetup_r>
 800ab7c:	b1c0      	cbz	r0, 800abb0 <_vfiprintf_r+0x78>
 800ab7e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ab80:	07dc      	lsls	r4, r3, #31
 800ab82:	d50e      	bpl.n	800aba2 <_vfiprintf_r+0x6a>
 800ab84:	f04f 30ff 	mov.w	r0, #4294967295
 800ab88:	b01d      	add	sp, #116	; 0x74
 800ab8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ab8e:	4b7b      	ldr	r3, [pc, #492]	; (800ad7c <_vfiprintf_r+0x244>)
 800ab90:	429d      	cmp	r5, r3
 800ab92:	d101      	bne.n	800ab98 <_vfiprintf_r+0x60>
 800ab94:	68b5      	ldr	r5, [r6, #8]
 800ab96:	e7df      	b.n	800ab58 <_vfiprintf_r+0x20>
 800ab98:	4b79      	ldr	r3, [pc, #484]	; (800ad80 <_vfiprintf_r+0x248>)
 800ab9a:	429d      	cmp	r5, r3
 800ab9c:	bf08      	it	eq
 800ab9e:	68f5      	ldreq	r5, [r6, #12]
 800aba0:	e7da      	b.n	800ab58 <_vfiprintf_r+0x20>
 800aba2:	89ab      	ldrh	r3, [r5, #12]
 800aba4:	0598      	lsls	r0, r3, #22
 800aba6:	d4ed      	bmi.n	800ab84 <_vfiprintf_r+0x4c>
 800aba8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800abaa:	f7ff fa61 	bl	800a070 <__retarget_lock_release_recursive>
 800abae:	e7e9      	b.n	800ab84 <_vfiprintf_r+0x4c>
 800abb0:	2300      	movs	r3, #0
 800abb2:	9309      	str	r3, [sp, #36]	; 0x24
 800abb4:	2320      	movs	r3, #32
 800abb6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800abba:	f8cd 800c 	str.w	r8, [sp, #12]
 800abbe:	2330      	movs	r3, #48	; 0x30
 800abc0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800ad84 <_vfiprintf_r+0x24c>
 800abc4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800abc8:	f04f 0901 	mov.w	r9, #1
 800abcc:	4623      	mov	r3, r4
 800abce:	469a      	mov	sl, r3
 800abd0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800abd4:	b10a      	cbz	r2, 800abda <_vfiprintf_r+0xa2>
 800abd6:	2a25      	cmp	r2, #37	; 0x25
 800abd8:	d1f9      	bne.n	800abce <_vfiprintf_r+0x96>
 800abda:	ebba 0b04 	subs.w	fp, sl, r4
 800abde:	d00b      	beq.n	800abf8 <_vfiprintf_r+0xc0>
 800abe0:	465b      	mov	r3, fp
 800abe2:	4622      	mov	r2, r4
 800abe4:	4629      	mov	r1, r5
 800abe6:	4630      	mov	r0, r6
 800abe8:	f7ff ff93 	bl	800ab12 <__sfputs_r>
 800abec:	3001      	adds	r0, #1
 800abee:	f000 80aa 	beq.w	800ad46 <_vfiprintf_r+0x20e>
 800abf2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800abf4:	445a      	add	r2, fp
 800abf6:	9209      	str	r2, [sp, #36]	; 0x24
 800abf8:	f89a 3000 	ldrb.w	r3, [sl]
 800abfc:	2b00      	cmp	r3, #0
 800abfe:	f000 80a2 	beq.w	800ad46 <_vfiprintf_r+0x20e>
 800ac02:	2300      	movs	r3, #0
 800ac04:	f04f 32ff 	mov.w	r2, #4294967295
 800ac08:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ac0c:	f10a 0a01 	add.w	sl, sl, #1
 800ac10:	9304      	str	r3, [sp, #16]
 800ac12:	9307      	str	r3, [sp, #28]
 800ac14:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ac18:	931a      	str	r3, [sp, #104]	; 0x68
 800ac1a:	4654      	mov	r4, sl
 800ac1c:	2205      	movs	r2, #5
 800ac1e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ac22:	4858      	ldr	r0, [pc, #352]	; (800ad84 <_vfiprintf_r+0x24c>)
 800ac24:	f7f5 fad4 	bl	80001d0 <memchr>
 800ac28:	9a04      	ldr	r2, [sp, #16]
 800ac2a:	b9d8      	cbnz	r0, 800ac64 <_vfiprintf_r+0x12c>
 800ac2c:	06d1      	lsls	r1, r2, #27
 800ac2e:	bf44      	itt	mi
 800ac30:	2320      	movmi	r3, #32
 800ac32:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ac36:	0713      	lsls	r3, r2, #28
 800ac38:	bf44      	itt	mi
 800ac3a:	232b      	movmi	r3, #43	; 0x2b
 800ac3c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ac40:	f89a 3000 	ldrb.w	r3, [sl]
 800ac44:	2b2a      	cmp	r3, #42	; 0x2a
 800ac46:	d015      	beq.n	800ac74 <_vfiprintf_r+0x13c>
 800ac48:	9a07      	ldr	r2, [sp, #28]
 800ac4a:	4654      	mov	r4, sl
 800ac4c:	2000      	movs	r0, #0
 800ac4e:	f04f 0c0a 	mov.w	ip, #10
 800ac52:	4621      	mov	r1, r4
 800ac54:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ac58:	3b30      	subs	r3, #48	; 0x30
 800ac5a:	2b09      	cmp	r3, #9
 800ac5c:	d94e      	bls.n	800acfc <_vfiprintf_r+0x1c4>
 800ac5e:	b1b0      	cbz	r0, 800ac8e <_vfiprintf_r+0x156>
 800ac60:	9207      	str	r2, [sp, #28]
 800ac62:	e014      	b.n	800ac8e <_vfiprintf_r+0x156>
 800ac64:	eba0 0308 	sub.w	r3, r0, r8
 800ac68:	fa09 f303 	lsl.w	r3, r9, r3
 800ac6c:	4313      	orrs	r3, r2
 800ac6e:	9304      	str	r3, [sp, #16]
 800ac70:	46a2      	mov	sl, r4
 800ac72:	e7d2      	b.n	800ac1a <_vfiprintf_r+0xe2>
 800ac74:	9b03      	ldr	r3, [sp, #12]
 800ac76:	1d19      	adds	r1, r3, #4
 800ac78:	681b      	ldr	r3, [r3, #0]
 800ac7a:	9103      	str	r1, [sp, #12]
 800ac7c:	2b00      	cmp	r3, #0
 800ac7e:	bfbb      	ittet	lt
 800ac80:	425b      	neglt	r3, r3
 800ac82:	f042 0202 	orrlt.w	r2, r2, #2
 800ac86:	9307      	strge	r3, [sp, #28]
 800ac88:	9307      	strlt	r3, [sp, #28]
 800ac8a:	bfb8      	it	lt
 800ac8c:	9204      	strlt	r2, [sp, #16]
 800ac8e:	7823      	ldrb	r3, [r4, #0]
 800ac90:	2b2e      	cmp	r3, #46	; 0x2e
 800ac92:	d10c      	bne.n	800acae <_vfiprintf_r+0x176>
 800ac94:	7863      	ldrb	r3, [r4, #1]
 800ac96:	2b2a      	cmp	r3, #42	; 0x2a
 800ac98:	d135      	bne.n	800ad06 <_vfiprintf_r+0x1ce>
 800ac9a:	9b03      	ldr	r3, [sp, #12]
 800ac9c:	1d1a      	adds	r2, r3, #4
 800ac9e:	681b      	ldr	r3, [r3, #0]
 800aca0:	9203      	str	r2, [sp, #12]
 800aca2:	2b00      	cmp	r3, #0
 800aca4:	bfb8      	it	lt
 800aca6:	f04f 33ff 	movlt.w	r3, #4294967295
 800acaa:	3402      	adds	r4, #2
 800acac:	9305      	str	r3, [sp, #20]
 800acae:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800ad94 <_vfiprintf_r+0x25c>
 800acb2:	7821      	ldrb	r1, [r4, #0]
 800acb4:	2203      	movs	r2, #3
 800acb6:	4650      	mov	r0, sl
 800acb8:	f7f5 fa8a 	bl	80001d0 <memchr>
 800acbc:	b140      	cbz	r0, 800acd0 <_vfiprintf_r+0x198>
 800acbe:	2340      	movs	r3, #64	; 0x40
 800acc0:	eba0 000a 	sub.w	r0, r0, sl
 800acc4:	fa03 f000 	lsl.w	r0, r3, r0
 800acc8:	9b04      	ldr	r3, [sp, #16]
 800acca:	4303      	orrs	r3, r0
 800accc:	3401      	adds	r4, #1
 800acce:	9304      	str	r3, [sp, #16]
 800acd0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800acd4:	482c      	ldr	r0, [pc, #176]	; (800ad88 <_vfiprintf_r+0x250>)
 800acd6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800acda:	2206      	movs	r2, #6
 800acdc:	f7f5 fa78 	bl	80001d0 <memchr>
 800ace0:	2800      	cmp	r0, #0
 800ace2:	d03f      	beq.n	800ad64 <_vfiprintf_r+0x22c>
 800ace4:	4b29      	ldr	r3, [pc, #164]	; (800ad8c <_vfiprintf_r+0x254>)
 800ace6:	bb1b      	cbnz	r3, 800ad30 <_vfiprintf_r+0x1f8>
 800ace8:	9b03      	ldr	r3, [sp, #12]
 800acea:	3307      	adds	r3, #7
 800acec:	f023 0307 	bic.w	r3, r3, #7
 800acf0:	3308      	adds	r3, #8
 800acf2:	9303      	str	r3, [sp, #12]
 800acf4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800acf6:	443b      	add	r3, r7
 800acf8:	9309      	str	r3, [sp, #36]	; 0x24
 800acfa:	e767      	b.n	800abcc <_vfiprintf_r+0x94>
 800acfc:	fb0c 3202 	mla	r2, ip, r2, r3
 800ad00:	460c      	mov	r4, r1
 800ad02:	2001      	movs	r0, #1
 800ad04:	e7a5      	b.n	800ac52 <_vfiprintf_r+0x11a>
 800ad06:	2300      	movs	r3, #0
 800ad08:	3401      	adds	r4, #1
 800ad0a:	9305      	str	r3, [sp, #20]
 800ad0c:	4619      	mov	r1, r3
 800ad0e:	f04f 0c0a 	mov.w	ip, #10
 800ad12:	4620      	mov	r0, r4
 800ad14:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ad18:	3a30      	subs	r2, #48	; 0x30
 800ad1a:	2a09      	cmp	r2, #9
 800ad1c:	d903      	bls.n	800ad26 <_vfiprintf_r+0x1ee>
 800ad1e:	2b00      	cmp	r3, #0
 800ad20:	d0c5      	beq.n	800acae <_vfiprintf_r+0x176>
 800ad22:	9105      	str	r1, [sp, #20]
 800ad24:	e7c3      	b.n	800acae <_vfiprintf_r+0x176>
 800ad26:	fb0c 2101 	mla	r1, ip, r1, r2
 800ad2a:	4604      	mov	r4, r0
 800ad2c:	2301      	movs	r3, #1
 800ad2e:	e7f0      	b.n	800ad12 <_vfiprintf_r+0x1da>
 800ad30:	ab03      	add	r3, sp, #12
 800ad32:	9300      	str	r3, [sp, #0]
 800ad34:	462a      	mov	r2, r5
 800ad36:	4b16      	ldr	r3, [pc, #88]	; (800ad90 <_vfiprintf_r+0x258>)
 800ad38:	a904      	add	r1, sp, #16
 800ad3a:	4630      	mov	r0, r6
 800ad3c:	f3af 8000 	nop.w
 800ad40:	4607      	mov	r7, r0
 800ad42:	1c78      	adds	r0, r7, #1
 800ad44:	d1d6      	bne.n	800acf4 <_vfiprintf_r+0x1bc>
 800ad46:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ad48:	07d9      	lsls	r1, r3, #31
 800ad4a:	d405      	bmi.n	800ad58 <_vfiprintf_r+0x220>
 800ad4c:	89ab      	ldrh	r3, [r5, #12]
 800ad4e:	059a      	lsls	r2, r3, #22
 800ad50:	d402      	bmi.n	800ad58 <_vfiprintf_r+0x220>
 800ad52:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ad54:	f7ff f98c 	bl	800a070 <__retarget_lock_release_recursive>
 800ad58:	89ab      	ldrh	r3, [r5, #12]
 800ad5a:	065b      	lsls	r3, r3, #25
 800ad5c:	f53f af12 	bmi.w	800ab84 <_vfiprintf_r+0x4c>
 800ad60:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ad62:	e711      	b.n	800ab88 <_vfiprintf_r+0x50>
 800ad64:	ab03      	add	r3, sp, #12
 800ad66:	9300      	str	r3, [sp, #0]
 800ad68:	462a      	mov	r2, r5
 800ad6a:	4b09      	ldr	r3, [pc, #36]	; (800ad90 <_vfiprintf_r+0x258>)
 800ad6c:	a904      	add	r1, sp, #16
 800ad6e:	4630      	mov	r0, r6
 800ad70:	f000 f880 	bl	800ae74 <_printf_i>
 800ad74:	e7e4      	b.n	800ad40 <_vfiprintf_r+0x208>
 800ad76:	bf00      	nop
 800ad78:	0800c0d8 	.word	0x0800c0d8
 800ad7c:	0800c0f8 	.word	0x0800c0f8
 800ad80:	0800c0b8 	.word	0x0800c0b8
 800ad84:	0800c11c 	.word	0x0800c11c
 800ad88:	0800c126 	.word	0x0800c126
 800ad8c:	00000000 	.word	0x00000000
 800ad90:	0800ab13 	.word	0x0800ab13
 800ad94:	0800c122 	.word	0x0800c122

0800ad98 <_printf_common>:
 800ad98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ad9c:	4616      	mov	r6, r2
 800ad9e:	4699      	mov	r9, r3
 800ada0:	688a      	ldr	r2, [r1, #8]
 800ada2:	690b      	ldr	r3, [r1, #16]
 800ada4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800ada8:	4293      	cmp	r3, r2
 800adaa:	bfb8      	it	lt
 800adac:	4613      	movlt	r3, r2
 800adae:	6033      	str	r3, [r6, #0]
 800adb0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800adb4:	4607      	mov	r7, r0
 800adb6:	460c      	mov	r4, r1
 800adb8:	b10a      	cbz	r2, 800adbe <_printf_common+0x26>
 800adba:	3301      	adds	r3, #1
 800adbc:	6033      	str	r3, [r6, #0]
 800adbe:	6823      	ldr	r3, [r4, #0]
 800adc0:	0699      	lsls	r1, r3, #26
 800adc2:	bf42      	ittt	mi
 800adc4:	6833      	ldrmi	r3, [r6, #0]
 800adc6:	3302      	addmi	r3, #2
 800adc8:	6033      	strmi	r3, [r6, #0]
 800adca:	6825      	ldr	r5, [r4, #0]
 800adcc:	f015 0506 	ands.w	r5, r5, #6
 800add0:	d106      	bne.n	800ade0 <_printf_common+0x48>
 800add2:	f104 0a19 	add.w	sl, r4, #25
 800add6:	68e3      	ldr	r3, [r4, #12]
 800add8:	6832      	ldr	r2, [r6, #0]
 800adda:	1a9b      	subs	r3, r3, r2
 800addc:	42ab      	cmp	r3, r5
 800adde:	dc26      	bgt.n	800ae2e <_printf_common+0x96>
 800ade0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800ade4:	1e13      	subs	r3, r2, #0
 800ade6:	6822      	ldr	r2, [r4, #0]
 800ade8:	bf18      	it	ne
 800adea:	2301      	movne	r3, #1
 800adec:	0692      	lsls	r2, r2, #26
 800adee:	d42b      	bmi.n	800ae48 <_printf_common+0xb0>
 800adf0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800adf4:	4649      	mov	r1, r9
 800adf6:	4638      	mov	r0, r7
 800adf8:	47c0      	blx	r8
 800adfa:	3001      	adds	r0, #1
 800adfc:	d01e      	beq.n	800ae3c <_printf_common+0xa4>
 800adfe:	6823      	ldr	r3, [r4, #0]
 800ae00:	68e5      	ldr	r5, [r4, #12]
 800ae02:	6832      	ldr	r2, [r6, #0]
 800ae04:	f003 0306 	and.w	r3, r3, #6
 800ae08:	2b04      	cmp	r3, #4
 800ae0a:	bf08      	it	eq
 800ae0c:	1aad      	subeq	r5, r5, r2
 800ae0e:	68a3      	ldr	r3, [r4, #8]
 800ae10:	6922      	ldr	r2, [r4, #16]
 800ae12:	bf0c      	ite	eq
 800ae14:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ae18:	2500      	movne	r5, #0
 800ae1a:	4293      	cmp	r3, r2
 800ae1c:	bfc4      	itt	gt
 800ae1e:	1a9b      	subgt	r3, r3, r2
 800ae20:	18ed      	addgt	r5, r5, r3
 800ae22:	2600      	movs	r6, #0
 800ae24:	341a      	adds	r4, #26
 800ae26:	42b5      	cmp	r5, r6
 800ae28:	d11a      	bne.n	800ae60 <_printf_common+0xc8>
 800ae2a:	2000      	movs	r0, #0
 800ae2c:	e008      	b.n	800ae40 <_printf_common+0xa8>
 800ae2e:	2301      	movs	r3, #1
 800ae30:	4652      	mov	r2, sl
 800ae32:	4649      	mov	r1, r9
 800ae34:	4638      	mov	r0, r7
 800ae36:	47c0      	blx	r8
 800ae38:	3001      	adds	r0, #1
 800ae3a:	d103      	bne.n	800ae44 <_printf_common+0xac>
 800ae3c:	f04f 30ff 	mov.w	r0, #4294967295
 800ae40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ae44:	3501      	adds	r5, #1
 800ae46:	e7c6      	b.n	800add6 <_printf_common+0x3e>
 800ae48:	18e1      	adds	r1, r4, r3
 800ae4a:	1c5a      	adds	r2, r3, #1
 800ae4c:	2030      	movs	r0, #48	; 0x30
 800ae4e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800ae52:	4422      	add	r2, r4
 800ae54:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800ae58:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800ae5c:	3302      	adds	r3, #2
 800ae5e:	e7c7      	b.n	800adf0 <_printf_common+0x58>
 800ae60:	2301      	movs	r3, #1
 800ae62:	4622      	mov	r2, r4
 800ae64:	4649      	mov	r1, r9
 800ae66:	4638      	mov	r0, r7
 800ae68:	47c0      	blx	r8
 800ae6a:	3001      	adds	r0, #1
 800ae6c:	d0e6      	beq.n	800ae3c <_printf_common+0xa4>
 800ae6e:	3601      	adds	r6, #1
 800ae70:	e7d9      	b.n	800ae26 <_printf_common+0x8e>
	...

0800ae74 <_printf_i>:
 800ae74:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ae78:	7e0f      	ldrb	r7, [r1, #24]
 800ae7a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800ae7c:	2f78      	cmp	r7, #120	; 0x78
 800ae7e:	4691      	mov	r9, r2
 800ae80:	4680      	mov	r8, r0
 800ae82:	460c      	mov	r4, r1
 800ae84:	469a      	mov	sl, r3
 800ae86:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800ae8a:	d807      	bhi.n	800ae9c <_printf_i+0x28>
 800ae8c:	2f62      	cmp	r7, #98	; 0x62
 800ae8e:	d80a      	bhi.n	800aea6 <_printf_i+0x32>
 800ae90:	2f00      	cmp	r7, #0
 800ae92:	f000 80d8 	beq.w	800b046 <_printf_i+0x1d2>
 800ae96:	2f58      	cmp	r7, #88	; 0x58
 800ae98:	f000 80a3 	beq.w	800afe2 <_printf_i+0x16e>
 800ae9c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800aea0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800aea4:	e03a      	b.n	800af1c <_printf_i+0xa8>
 800aea6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800aeaa:	2b15      	cmp	r3, #21
 800aeac:	d8f6      	bhi.n	800ae9c <_printf_i+0x28>
 800aeae:	a101      	add	r1, pc, #4	; (adr r1, 800aeb4 <_printf_i+0x40>)
 800aeb0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800aeb4:	0800af0d 	.word	0x0800af0d
 800aeb8:	0800af21 	.word	0x0800af21
 800aebc:	0800ae9d 	.word	0x0800ae9d
 800aec0:	0800ae9d 	.word	0x0800ae9d
 800aec4:	0800ae9d 	.word	0x0800ae9d
 800aec8:	0800ae9d 	.word	0x0800ae9d
 800aecc:	0800af21 	.word	0x0800af21
 800aed0:	0800ae9d 	.word	0x0800ae9d
 800aed4:	0800ae9d 	.word	0x0800ae9d
 800aed8:	0800ae9d 	.word	0x0800ae9d
 800aedc:	0800ae9d 	.word	0x0800ae9d
 800aee0:	0800b02d 	.word	0x0800b02d
 800aee4:	0800af51 	.word	0x0800af51
 800aee8:	0800b00f 	.word	0x0800b00f
 800aeec:	0800ae9d 	.word	0x0800ae9d
 800aef0:	0800ae9d 	.word	0x0800ae9d
 800aef4:	0800b04f 	.word	0x0800b04f
 800aef8:	0800ae9d 	.word	0x0800ae9d
 800aefc:	0800af51 	.word	0x0800af51
 800af00:	0800ae9d 	.word	0x0800ae9d
 800af04:	0800ae9d 	.word	0x0800ae9d
 800af08:	0800b017 	.word	0x0800b017
 800af0c:	682b      	ldr	r3, [r5, #0]
 800af0e:	1d1a      	adds	r2, r3, #4
 800af10:	681b      	ldr	r3, [r3, #0]
 800af12:	602a      	str	r2, [r5, #0]
 800af14:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800af18:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800af1c:	2301      	movs	r3, #1
 800af1e:	e0a3      	b.n	800b068 <_printf_i+0x1f4>
 800af20:	6820      	ldr	r0, [r4, #0]
 800af22:	6829      	ldr	r1, [r5, #0]
 800af24:	0606      	lsls	r6, r0, #24
 800af26:	f101 0304 	add.w	r3, r1, #4
 800af2a:	d50a      	bpl.n	800af42 <_printf_i+0xce>
 800af2c:	680e      	ldr	r6, [r1, #0]
 800af2e:	602b      	str	r3, [r5, #0]
 800af30:	2e00      	cmp	r6, #0
 800af32:	da03      	bge.n	800af3c <_printf_i+0xc8>
 800af34:	232d      	movs	r3, #45	; 0x2d
 800af36:	4276      	negs	r6, r6
 800af38:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800af3c:	485e      	ldr	r0, [pc, #376]	; (800b0b8 <_printf_i+0x244>)
 800af3e:	230a      	movs	r3, #10
 800af40:	e019      	b.n	800af76 <_printf_i+0x102>
 800af42:	680e      	ldr	r6, [r1, #0]
 800af44:	602b      	str	r3, [r5, #0]
 800af46:	f010 0f40 	tst.w	r0, #64	; 0x40
 800af4a:	bf18      	it	ne
 800af4c:	b236      	sxthne	r6, r6
 800af4e:	e7ef      	b.n	800af30 <_printf_i+0xbc>
 800af50:	682b      	ldr	r3, [r5, #0]
 800af52:	6820      	ldr	r0, [r4, #0]
 800af54:	1d19      	adds	r1, r3, #4
 800af56:	6029      	str	r1, [r5, #0]
 800af58:	0601      	lsls	r1, r0, #24
 800af5a:	d501      	bpl.n	800af60 <_printf_i+0xec>
 800af5c:	681e      	ldr	r6, [r3, #0]
 800af5e:	e002      	b.n	800af66 <_printf_i+0xf2>
 800af60:	0646      	lsls	r6, r0, #25
 800af62:	d5fb      	bpl.n	800af5c <_printf_i+0xe8>
 800af64:	881e      	ldrh	r6, [r3, #0]
 800af66:	4854      	ldr	r0, [pc, #336]	; (800b0b8 <_printf_i+0x244>)
 800af68:	2f6f      	cmp	r7, #111	; 0x6f
 800af6a:	bf0c      	ite	eq
 800af6c:	2308      	moveq	r3, #8
 800af6e:	230a      	movne	r3, #10
 800af70:	2100      	movs	r1, #0
 800af72:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800af76:	6865      	ldr	r5, [r4, #4]
 800af78:	60a5      	str	r5, [r4, #8]
 800af7a:	2d00      	cmp	r5, #0
 800af7c:	bfa2      	ittt	ge
 800af7e:	6821      	ldrge	r1, [r4, #0]
 800af80:	f021 0104 	bicge.w	r1, r1, #4
 800af84:	6021      	strge	r1, [r4, #0]
 800af86:	b90e      	cbnz	r6, 800af8c <_printf_i+0x118>
 800af88:	2d00      	cmp	r5, #0
 800af8a:	d04d      	beq.n	800b028 <_printf_i+0x1b4>
 800af8c:	4615      	mov	r5, r2
 800af8e:	fbb6 f1f3 	udiv	r1, r6, r3
 800af92:	fb03 6711 	mls	r7, r3, r1, r6
 800af96:	5dc7      	ldrb	r7, [r0, r7]
 800af98:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800af9c:	4637      	mov	r7, r6
 800af9e:	42bb      	cmp	r3, r7
 800afa0:	460e      	mov	r6, r1
 800afa2:	d9f4      	bls.n	800af8e <_printf_i+0x11a>
 800afa4:	2b08      	cmp	r3, #8
 800afa6:	d10b      	bne.n	800afc0 <_printf_i+0x14c>
 800afa8:	6823      	ldr	r3, [r4, #0]
 800afaa:	07de      	lsls	r6, r3, #31
 800afac:	d508      	bpl.n	800afc0 <_printf_i+0x14c>
 800afae:	6923      	ldr	r3, [r4, #16]
 800afb0:	6861      	ldr	r1, [r4, #4]
 800afb2:	4299      	cmp	r1, r3
 800afb4:	bfde      	ittt	le
 800afb6:	2330      	movle	r3, #48	; 0x30
 800afb8:	f805 3c01 	strble.w	r3, [r5, #-1]
 800afbc:	f105 35ff 	addle.w	r5, r5, #4294967295
 800afc0:	1b52      	subs	r2, r2, r5
 800afc2:	6122      	str	r2, [r4, #16]
 800afc4:	f8cd a000 	str.w	sl, [sp]
 800afc8:	464b      	mov	r3, r9
 800afca:	aa03      	add	r2, sp, #12
 800afcc:	4621      	mov	r1, r4
 800afce:	4640      	mov	r0, r8
 800afd0:	f7ff fee2 	bl	800ad98 <_printf_common>
 800afd4:	3001      	adds	r0, #1
 800afd6:	d14c      	bne.n	800b072 <_printf_i+0x1fe>
 800afd8:	f04f 30ff 	mov.w	r0, #4294967295
 800afdc:	b004      	add	sp, #16
 800afde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800afe2:	4835      	ldr	r0, [pc, #212]	; (800b0b8 <_printf_i+0x244>)
 800afe4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800afe8:	6829      	ldr	r1, [r5, #0]
 800afea:	6823      	ldr	r3, [r4, #0]
 800afec:	f851 6b04 	ldr.w	r6, [r1], #4
 800aff0:	6029      	str	r1, [r5, #0]
 800aff2:	061d      	lsls	r5, r3, #24
 800aff4:	d514      	bpl.n	800b020 <_printf_i+0x1ac>
 800aff6:	07df      	lsls	r7, r3, #31
 800aff8:	bf44      	itt	mi
 800affa:	f043 0320 	orrmi.w	r3, r3, #32
 800affe:	6023      	strmi	r3, [r4, #0]
 800b000:	b91e      	cbnz	r6, 800b00a <_printf_i+0x196>
 800b002:	6823      	ldr	r3, [r4, #0]
 800b004:	f023 0320 	bic.w	r3, r3, #32
 800b008:	6023      	str	r3, [r4, #0]
 800b00a:	2310      	movs	r3, #16
 800b00c:	e7b0      	b.n	800af70 <_printf_i+0xfc>
 800b00e:	6823      	ldr	r3, [r4, #0]
 800b010:	f043 0320 	orr.w	r3, r3, #32
 800b014:	6023      	str	r3, [r4, #0]
 800b016:	2378      	movs	r3, #120	; 0x78
 800b018:	4828      	ldr	r0, [pc, #160]	; (800b0bc <_printf_i+0x248>)
 800b01a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b01e:	e7e3      	b.n	800afe8 <_printf_i+0x174>
 800b020:	0659      	lsls	r1, r3, #25
 800b022:	bf48      	it	mi
 800b024:	b2b6      	uxthmi	r6, r6
 800b026:	e7e6      	b.n	800aff6 <_printf_i+0x182>
 800b028:	4615      	mov	r5, r2
 800b02a:	e7bb      	b.n	800afa4 <_printf_i+0x130>
 800b02c:	682b      	ldr	r3, [r5, #0]
 800b02e:	6826      	ldr	r6, [r4, #0]
 800b030:	6961      	ldr	r1, [r4, #20]
 800b032:	1d18      	adds	r0, r3, #4
 800b034:	6028      	str	r0, [r5, #0]
 800b036:	0635      	lsls	r5, r6, #24
 800b038:	681b      	ldr	r3, [r3, #0]
 800b03a:	d501      	bpl.n	800b040 <_printf_i+0x1cc>
 800b03c:	6019      	str	r1, [r3, #0]
 800b03e:	e002      	b.n	800b046 <_printf_i+0x1d2>
 800b040:	0670      	lsls	r0, r6, #25
 800b042:	d5fb      	bpl.n	800b03c <_printf_i+0x1c8>
 800b044:	8019      	strh	r1, [r3, #0]
 800b046:	2300      	movs	r3, #0
 800b048:	6123      	str	r3, [r4, #16]
 800b04a:	4615      	mov	r5, r2
 800b04c:	e7ba      	b.n	800afc4 <_printf_i+0x150>
 800b04e:	682b      	ldr	r3, [r5, #0]
 800b050:	1d1a      	adds	r2, r3, #4
 800b052:	602a      	str	r2, [r5, #0]
 800b054:	681d      	ldr	r5, [r3, #0]
 800b056:	6862      	ldr	r2, [r4, #4]
 800b058:	2100      	movs	r1, #0
 800b05a:	4628      	mov	r0, r5
 800b05c:	f7f5 f8b8 	bl	80001d0 <memchr>
 800b060:	b108      	cbz	r0, 800b066 <_printf_i+0x1f2>
 800b062:	1b40      	subs	r0, r0, r5
 800b064:	6060      	str	r0, [r4, #4]
 800b066:	6863      	ldr	r3, [r4, #4]
 800b068:	6123      	str	r3, [r4, #16]
 800b06a:	2300      	movs	r3, #0
 800b06c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b070:	e7a8      	b.n	800afc4 <_printf_i+0x150>
 800b072:	6923      	ldr	r3, [r4, #16]
 800b074:	462a      	mov	r2, r5
 800b076:	4649      	mov	r1, r9
 800b078:	4640      	mov	r0, r8
 800b07a:	47d0      	blx	sl
 800b07c:	3001      	adds	r0, #1
 800b07e:	d0ab      	beq.n	800afd8 <_printf_i+0x164>
 800b080:	6823      	ldr	r3, [r4, #0]
 800b082:	079b      	lsls	r3, r3, #30
 800b084:	d413      	bmi.n	800b0ae <_printf_i+0x23a>
 800b086:	68e0      	ldr	r0, [r4, #12]
 800b088:	9b03      	ldr	r3, [sp, #12]
 800b08a:	4298      	cmp	r0, r3
 800b08c:	bfb8      	it	lt
 800b08e:	4618      	movlt	r0, r3
 800b090:	e7a4      	b.n	800afdc <_printf_i+0x168>
 800b092:	2301      	movs	r3, #1
 800b094:	4632      	mov	r2, r6
 800b096:	4649      	mov	r1, r9
 800b098:	4640      	mov	r0, r8
 800b09a:	47d0      	blx	sl
 800b09c:	3001      	adds	r0, #1
 800b09e:	d09b      	beq.n	800afd8 <_printf_i+0x164>
 800b0a0:	3501      	adds	r5, #1
 800b0a2:	68e3      	ldr	r3, [r4, #12]
 800b0a4:	9903      	ldr	r1, [sp, #12]
 800b0a6:	1a5b      	subs	r3, r3, r1
 800b0a8:	42ab      	cmp	r3, r5
 800b0aa:	dcf2      	bgt.n	800b092 <_printf_i+0x21e>
 800b0ac:	e7eb      	b.n	800b086 <_printf_i+0x212>
 800b0ae:	2500      	movs	r5, #0
 800b0b0:	f104 0619 	add.w	r6, r4, #25
 800b0b4:	e7f5      	b.n	800b0a2 <_printf_i+0x22e>
 800b0b6:	bf00      	nop
 800b0b8:	0800c12d 	.word	0x0800c12d
 800b0bc:	0800c13e 	.word	0x0800c13e

0800b0c0 <_read_r>:
 800b0c0:	b538      	push	{r3, r4, r5, lr}
 800b0c2:	4d07      	ldr	r5, [pc, #28]	; (800b0e0 <_read_r+0x20>)
 800b0c4:	4604      	mov	r4, r0
 800b0c6:	4608      	mov	r0, r1
 800b0c8:	4611      	mov	r1, r2
 800b0ca:	2200      	movs	r2, #0
 800b0cc:	602a      	str	r2, [r5, #0]
 800b0ce:	461a      	mov	r2, r3
 800b0d0:	f7f6 fa22 	bl	8001518 <_read>
 800b0d4:	1c43      	adds	r3, r0, #1
 800b0d6:	d102      	bne.n	800b0de <_read_r+0x1e>
 800b0d8:	682b      	ldr	r3, [r5, #0]
 800b0da:	b103      	cbz	r3, 800b0de <_read_r+0x1e>
 800b0dc:	6023      	str	r3, [r4, #0]
 800b0de:	bd38      	pop	{r3, r4, r5, pc}
 800b0e0:	20004d60 	.word	0x20004d60

0800b0e4 <_fstat_r>:
 800b0e4:	b538      	push	{r3, r4, r5, lr}
 800b0e6:	4d07      	ldr	r5, [pc, #28]	; (800b104 <_fstat_r+0x20>)
 800b0e8:	2300      	movs	r3, #0
 800b0ea:	4604      	mov	r4, r0
 800b0ec:	4608      	mov	r0, r1
 800b0ee:	4611      	mov	r1, r2
 800b0f0:	602b      	str	r3, [r5, #0]
 800b0f2:	f7f6 fa39 	bl	8001568 <_fstat>
 800b0f6:	1c43      	adds	r3, r0, #1
 800b0f8:	d102      	bne.n	800b100 <_fstat_r+0x1c>
 800b0fa:	682b      	ldr	r3, [r5, #0]
 800b0fc:	b103      	cbz	r3, 800b100 <_fstat_r+0x1c>
 800b0fe:	6023      	str	r3, [r4, #0]
 800b100:	bd38      	pop	{r3, r4, r5, pc}
 800b102:	bf00      	nop
 800b104:	20004d60 	.word	0x20004d60

0800b108 <_isatty_r>:
 800b108:	b538      	push	{r3, r4, r5, lr}
 800b10a:	4d06      	ldr	r5, [pc, #24]	; (800b124 <_isatty_r+0x1c>)
 800b10c:	2300      	movs	r3, #0
 800b10e:	4604      	mov	r4, r0
 800b110:	4608      	mov	r0, r1
 800b112:	602b      	str	r3, [r5, #0]
 800b114:	f7f6 f996 	bl	8001444 <_isatty>
 800b118:	1c43      	adds	r3, r0, #1
 800b11a:	d102      	bne.n	800b122 <_isatty_r+0x1a>
 800b11c:	682b      	ldr	r3, [r5, #0]
 800b11e:	b103      	cbz	r3, 800b122 <_isatty_r+0x1a>
 800b120:	6023      	str	r3, [r4, #0]
 800b122:	bd38      	pop	{r3, r4, r5, pc}
 800b124:	20004d60 	.word	0x20004d60

0800b128 <pow>:
 800b128:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b12a:	ed2d 8b02 	vpush	{d8}
 800b12e:	eeb0 8a40 	vmov.f32	s16, s0
 800b132:	eef0 8a60 	vmov.f32	s17, s1
 800b136:	ec55 4b11 	vmov	r4, r5, d1
 800b13a:	f000 f865 	bl	800b208 <__ieee754_pow>
 800b13e:	4622      	mov	r2, r4
 800b140:	462b      	mov	r3, r5
 800b142:	4620      	mov	r0, r4
 800b144:	4629      	mov	r1, r5
 800b146:	ec57 6b10 	vmov	r6, r7, d0
 800b14a:	f7f5 fce7 	bl	8000b1c <__aeabi_dcmpun>
 800b14e:	2800      	cmp	r0, #0
 800b150:	d13b      	bne.n	800b1ca <pow+0xa2>
 800b152:	ec51 0b18 	vmov	r0, r1, d8
 800b156:	2200      	movs	r2, #0
 800b158:	2300      	movs	r3, #0
 800b15a:	f7f5 fcad 	bl	8000ab8 <__aeabi_dcmpeq>
 800b15e:	b1b8      	cbz	r0, 800b190 <pow+0x68>
 800b160:	2200      	movs	r2, #0
 800b162:	2300      	movs	r3, #0
 800b164:	4620      	mov	r0, r4
 800b166:	4629      	mov	r1, r5
 800b168:	f7f5 fca6 	bl	8000ab8 <__aeabi_dcmpeq>
 800b16c:	2800      	cmp	r0, #0
 800b16e:	d146      	bne.n	800b1fe <pow+0xd6>
 800b170:	ec45 4b10 	vmov	d0, r4, r5
 800b174:	f000 fe61 	bl	800be3a <finite>
 800b178:	b338      	cbz	r0, 800b1ca <pow+0xa2>
 800b17a:	2200      	movs	r2, #0
 800b17c:	2300      	movs	r3, #0
 800b17e:	4620      	mov	r0, r4
 800b180:	4629      	mov	r1, r5
 800b182:	f7f5 fca3 	bl	8000acc <__aeabi_dcmplt>
 800b186:	b300      	cbz	r0, 800b1ca <pow+0xa2>
 800b188:	f7fe fe50 	bl	8009e2c <__errno>
 800b18c:	2322      	movs	r3, #34	; 0x22
 800b18e:	e01b      	b.n	800b1c8 <pow+0xa0>
 800b190:	ec47 6b10 	vmov	d0, r6, r7
 800b194:	f000 fe51 	bl	800be3a <finite>
 800b198:	b9e0      	cbnz	r0, 800b1d4 <pow+0xac>
 800b19a:	eeb0 0a48 	vmov.f32	s0, s16
 800b19e:	eef0 0a68 	vmov.f32	s1, s17
 800b1a2:	f000 fe4a 	bl	800be3a <finite>
 800b1a6:	b1a8      	cbz	r0, 800b1d4 <pow+0xac>
 800b1a8:	ec45 4b10 	vmov	d0, r4, r5
 800b1ac:	f000 fe45 	bl	800be3a <finite>
 800b1b0:	b180      	cbz	r0, 800b1d4 <pow+0xac>
 800b1b2:	4632      	mov	r2, r6
 800b1b4:	463b      	mov	r3, r7
 800b1b6:	4630      	mov	r0, r6
 800b1b8:	4639      	mov	r1, r7
 800b1ba:	f7f5 fcaf 	bl	8000b1c <__aeabi_dcmpun>
 800b1be:	2800      	cmp	r0, #0
 800b1c0:	d0e2      	beq.n	800b188 <pow+0x60>
 800b1c2:	f7fe fe33 	bl	8009e2c <__errno>
 800b1c6:	2321      	movs	r3, #33	; 0x21
 800b1c8:	6003      	str	r3, [r0, #0]
 800b1ca:	ecbd 8b02 	vpop	{d8}
 800b1ce:	ec47 6b10 	vmov	d0, r6, r7
 800b1d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b1d4:	2200      	movs	r2, #0
 800b1d6:	2300      	movs	r3, #0
 800b1d8:	4630      	mov	r0, r6
 800b1da:	4639      	mov	r1, r7
 800b1dc:	f7f5 fc6c 	bl	8000ab8 <__aeabi_dcmpeq>
 800b1e0:	2800      	cmp	r0, #0
 800b1e2:	d0f2      	beq.n	800b1ca <pow+0xa2>
 800b1e4:	eeb0 0a48 	vmov.f32	s0, s16
 800b1e8:	eef0 0a68 	vmov.f32	s1, s17
 800b1ec:	f000 fe25 	bl	800be3a <finite>
 800b1f0:	2800      	cmp	r0, #0
 800b1f2:	d0ea      	beq.n	800b1ca <pow+0xa2>
 800b1f4:	ec45 4b10 	vmov	d0, r4, r5
 800b1f8:	f000 fe1f 	bl	800be3a <finite>
 800b1fc:	e7c3      	b.n	800b186 <pow+0x5e>
 800b1fe:	4f01      	ldr	r7, [pc, #4]	; (800b204 <pow+0xdc>)
 800b200:	2600      	movs	r6, #0
 800b202:	e7e2      	b.n	800b1ca <pow+0xa2>
 800b204:	3ff00000 	.word	0x3ff00000

0800b208 <__ieee754_pow>:
 800b208:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b20c:	ed2d 8b06 	vpush	{d8-d10}
 800b210:	b089      	sub	sp, #36	; 0x24
 800b212:	ed8d 1b00 	vstr	d1, [sp]
 800b216:	e9dd 2900 	ldrd	r2, r9, [sp]
 800b21a:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 800b21e:	ea58 0102 	orrs.w	r1, r8, r2
 800b222:	ec57 6b10 	vmov	r6, r7, d0
 800b226:	d115      	bne.n	800b254 <__ieee754_pow+0x4c>
 800b228:	19b3      	adds	r3, r6, r6
 800b22a:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 800b22e:	4152      	adcs	r2, r2
 800b230:	4299      	cmp	r1, r3
 800b232:	4b89      	ldr	r3, [pc, #548]	; (800b458 <__ieee754_pow+0x250>)
 800b234:	4193      	sbcs	r3, r2
 800b236:	f080 84d2 	bcs.w	800bbde <__ieee754_pow+0x9d6>
 800b23a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b23e:	4630      	mov	r0, r6
 800b240:	4639      	mov	r1, r7
 800b242:	f7f5 f81b 	bl	800027c <__adddf3>
 800b246:	ec41 0b10 	vmov	d0, r0, r1
 800b24a:	b009      	add	sp, #36	; 0x24
 800b24c:	ecbd 8b06 	vpop	{d8-d10}
 800b250:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b254:	4b81      	ldr	r3, [pc, #516]	; (800b45c <__ieee754_pow+0x254>)
 800b256:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 800b25a:	429c      	cmp	r4, r3
 800b25c:	ee10 aa10 	vmov	sl, s0
 800b260:	463d      	mov	r5, r7
 800b262:	dc06      	bgt.n	800b272 <__ieee754_pow+0x6a>
 800b264:	d101      	bne.n	800b26a <__ieee754_pow+0x62>
 800b266:	2e00      	cmp	r6, #0
 800b268:	d1e7      	bne.n	800b23a <__ieee754_pow+0x32>
 800b26a:	4598      	cmp	r8, r3
 800b26c:	dc01      	bgt.n	800b272 <__ieee754_pow+0x6a>
 800b26e:	d10f      	bne.n	800b290 <__ieee754_pow+0x88>
 800b270:	b172      	cbz	r2, 800b290 <__ieee754_pow+0x88>
 800b272:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 800b276:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 800b27a:	ea55 050a 	orrs.w	r5, r5, sl
 800b27e:	d1dc      	bne.n	800b23a <__ieee754_pow+0x32>
 800b280:	e9dd 3200 	ldrd	r3, r2, [sp]
 800b284:	18db      	adds	r3, r3, r3
 800b286:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 800b28a:	4152      	adcs	r2, r2
 800b28c:	429d      	cmp	r5, r3
 800b28e:	e7d0      	b.n	800b232 <__ieee754_pow+0x2a>
 800b290:	2d00      	cmp	r5, #0
 800b292:	da3b      	bge.n	800b30c <__ieee754_pow+0x104>
 800b294:	4b72      	ldr	r3, [pc, #456]	; (800b460 <__ieee754_pow+0x258>)
 800b296:	4598      	cmp	r8, r3
 800b298:	dc51      	bgt.n	800b33e <__ieee754_pow+0x136>
 800b29a:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800b29e:	4598      	cmp	r8, r3
 800b2a0:	f340 84ac 	ble.w	800bbfc <__ieee754_pow+0x9f4>
 800b2a4:	ea4f 5328 	mov.w	r3, r8, asr #20
 800b2a8:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800b2ac:	2b14      	cmp	r3, #20
 800b2ae:	dd0f      	ble.n	800b2d0 <__ieee754_pow+0xc8>
 800b2b0:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800b2b4:	fa22 f103 	lsr.w	r1, r2, r3
 800b2b8:	fa01 f303 	lsl.w	r3, r1, r3
 800b2bc:	4293      	cmp	r3, r2
 800b2be:	f040 849d 	bne.w	800bbfc <__ieee754_pow+0x9f4>
 800b2c2:	f001 0101 	and.w	r1, r1, #1
 800b2c6:	f1c1 0302 	rsb	r3, r1, #2
 800b2ca:	9304      	str	r3, [sp, #16]
 800b2cc:	b182      	cbz	r2, 800b2f0 <__ieee754_pow+0xe8>
 800b2ce:	e05f      	b.n	800b390 <__ieee754_pow+0x188>
 800b2d0:	2a00      	cmp	r2, #0
 800b2d2:	d15b      	bne.n	800b38c <__ieee754_pow+0x184>
 800b2d4:	f1c3 0314 	rsb	r3, r3, #20
 800b2d8:	fa48 f103 	asr.w	r1, r8, r3
 800b2dc:	fa01 f303 	lsl.w	r3, r1, r3
 800b2e0:	4543      	cmp	r3, r8
 800b2e2:	f040 8488 	bne.w	800bbf6 <__ieee754_pow+0x9ee>
 800b2e6:	f001 0101 	and.w	r1, r1, #1
 800b2ea:	f1c1 0302 	rsb	r3, r1, #2
 800b2ee:	9304      	str	r3, [sp, #16]
 800b2f0:	4b5c      	ldr	r3, [pc, #368]	; (800b464 <__ieee754_pow+0x25c>)
 800b2f2:	4598      	cmp	r8, r3
 800b2f4:	d132      	bne.n	800b35c <__ieee754_pow+0x154>
 800b2f6:	f1b9 0f00 	cmp.w	r9, #0
 800b2fa:	f280 8478 	bge.w	800bbee <__ieee754_pow+0x9e6>
 800b2fe:	4959      	ldr	r1, [pc, #356]	; (800b464 <__ieee754_pow+0x25c>)
 800b300:	4632      	mov	r2, r6
 800b302:	463b      	mov	r3, r7
 800b304:	2000      	movs	r0, #0
 800b306:	f7f5 fa99 	bl	800083c <__aeabi_ddiv>
 800b30a:	e79c      	b.n	800b246 <__ieee754_pow+0x3e>
 800b30c:	2300      	movs	r3, #0
 800b30e:	9304      	str	r3, [sp, #16]
 800b310:	2a00      	cmp	r2, #0
 800b312:	d13d      	bne.n	800b390 <__ieee754_pow+0x188>
 800b314:	4b51      	ldr	r3, [pc, #324]	; (800b45c <__ieee754_pow+0x254>)
 800b316:	4598      	cmp	r8, r3
 800b318:	d1ea      	bne.n	800b2f0 <__ieee754_pow+0xe8>
 800b31a:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800b31e:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800b322:	ea53 030a 	orrs.w	r3, r3, sl
 800b326:	f000 845a 	beq.w	800bbde <__ieee754_pow+0x9d6>
 800b32a:	4b4f      	ldr	r3, [pc, #316]	; (800b468 <__ieee754_pow+0x260>)
 800b32c:	429c      	cmp	r4, r3
 800b32e:	dd08      	ble.n	800b342 <__ieee754_pow+0x13a>
 800b330:	f1b9 0f00 	cmp.w	r9, #0
 800b334:	f2c0 8457 	blt.w	800bbe6 <__ieee754_pow+0x9de>
 800b338:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b33c:	e783      	b.n	800b246 <__ieee754_pow+0x3e>
 800b33e:	2302      	movs	r3, #2
 800b340:	e7e5      	b.n	800b30e <__ieee754_pow+0x106>
 800b342:	f1b9 0f00 	cmp.w	r9, #0
 800b346:	f04f 0000 	mov.w	r0, #0
 800b34a:	f04f 0100 	mov.w	r1, #0
 800b34e:	f6bf af7a 	bge.w	800b246 <__ieee754_pow+0x3e>
 800b352:	e9dd 0300 	ldrd	r0, r3, [sp]
 800b356:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800b35a:	e774      	b.n	800b246 <__ieee754_pow+0x3e>
 800b35c:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 800b360:	d106      	bne.n	800b370 <__ieee754_pow+0x168>
 800b362:	4632      	mov	r2, r6
 800b364:	463b      	mov	r3, r7
 800b366:	4630      	mov	r0, r6
 800b368:	4639      	mov	r1, r7
 800b36a:	f7f5 f93d 	bl	80005e8 <__aeabi_dmul>
 800b36e:	e76a      	b.n	800b246 <__ieee754_pow+0x3e>
 800b370:	4b3e      	ldr	r3, [pc, #248]	; (800b46c <__ieee754_pow+0x264>)
 800b372:	4599      	cmp	r9, r3
 800b374:	d10c      	bne.n	800b390 <__ieee754_pow+0x188>
 800b376:	2d00      	cmp	r5, #0
 800b378:	db0a      	blt.n	800b390 <__ieee754_pow+0x188>
 800b37a:	ec47 6b10 	vmov	d0, r6, r7
 800b37e:	b009      	add	sp, #36	; 0x24
 800b380:	ecbd 8b06 	vpop	{d8-d10}
 800b384:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b388:	f000 bc6c 	b.w	800bc64 <__ieee754_sqrt>
 800b38c:	2300      	movs	r3, #0
 800b38e:	9304      	str	r3, [sp, #16]
 800b390:	ec47 6b10 	vmov	d0, r6, r7
 800b394:	f000 fd48 	bl	800be28 <fabs>
 800b398:	ec51 0b10 	vmov	r0, r1, d0
 800b39c:	f1ba 0f00 	cmp.w	sl, #0
 800b3a0:	d129      	bne.n	800b3f6 <__ieee754_pow+0x1ee>
 800b3a2:	b124      	cbz	r4, 800b3ae <__ieee754_pow+0x1a6>
 800b3a4:	4b2f      	ldr	r3, [pc, #188]	; (800b464 <__ieee754_pow+0x25c>)
 800b3a6:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800b3aa:	429a      	cmp	r2, r3
 800b3ac:	d123      	bne.n	800b3f6 <__ieee754_pow+0x1ee>
 800b3ae:	f1b9 0f00 	cmp.w	r9, #0
 800b3b2:	da05      	bge.n	800b3c0 <__ieee754_pow+0x1b8>
 800b3b4:	4602      	mov	r2, r0
 800b3b6:	460b      	mov	r3, r1
 800b3b8:	2000      	movs	r0, #0
 800b3ba:	492a      	ldr	r1, [pc, #168]	; (800b464 <__ieee754_pow+0x25c>)
 800b3bc:	f7f5 fa3e 	bl	800083c <__aeabi_ddiv>
 800b3c0:	2d00      	cmp	r5, #0
 800b3c2:	f6bf af40 	bge.w	800b246 <__ieee754_pow+0x3e>
 800b3c6:	9b04      	ldr	r3, [sp, #16]
 800b3c8:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800b3cc:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800b3d0:	4323      	orrs	r3, r4
 800b3d2:	d108      	bne.n	800b3e6 <__ieee754_pow+0x1de>
 800b3d4:	4602      	mov	r2, r0
 800b3d6:	460b      	mov	r3, r1
 800b3d8:	4610      	mov	r0, r2
 800b3da:	4619      	mov	r1, r3
 800b3dc:	f7f4 ff4c 	bl	8000278 <__aeabi_dsub>
 800b3e0:	4602      	mov	r2, r0
 800b3e2:	460b      	mov	r3, r1
 800b3e4:	e78f      	b.n	800b306 <__ieee754_pow+0xfe>
 800b3e6:	9b04      	ldr	r3, [sp, #16]
 800b3e8:	2b01      	cmp	r3, #1
 800b3ea:	f47f af2c 	bne.w	800b246 <__ieee754_pow+0x3e>
 800b3ee:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b3f2:	4619      	mov	r1, r3
 800b3f4:	e727      	b.n	800b246 <__ieee754_pow+0x3e>
 800b3f6:	0feb      	lsrs	r3, r5, #31
 800b3f8:	3b01      	subs	r3, #1
 800b3fa:	9306      	str	r3, [sp, #24]
 800b3fc:	9a06      	ldr	r2, [sp, #24]
 800b3fe:	9b04      	ldr	r3, [sp, #16]
 800b400:	4313      	orrs	r3, r2
 800b402:	d102      	bne.n	800b40a <__ieee754_pow+0x202>
 800b404:	4632      	mov	r2, r6
 800b406:	463b      	mov	r3, r7
 800b408:	e7e6      	b.n	800b3d8 <__ieee754_pow+0x1d0>
 800b40a:	4b19      	ldr	r3, [pc, #100]	; (800b470 <__ieee754_pow+0x268>)
 800b40c:	4598      	cmp	r8, r3
 800b40e:	f340 80fb 	ble.w	800b608 <__ieee754_pow+0x400>
 800b412:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800b416:	4598      	cmp	r8, r3
 800b418:	4b13      	ldr	r3, [pc, #76]	; (800b468 <__ieee754_pow+0x260>)
 800b41a:	dd0c      	ble.n	800b436 <__ieee754_pow+0x22e>
 800b41c:	429c      	cmp	r4, r3
 800b41e:	dc0f      	bgt.n	800b440 <__ieee754_pow+0x238>
 800b420:	f1b9 0f00 	cmp.w	r9, #0
 800b424:	da0f      	bge.n	800b446 <__ieee754_pow+0x23e>
 800b426:	2000      	movs	r0, #0
 800b428:	b009      	add	sp, #36	; 0x24
 800b42a:	ecbd 8b06 	vpop	{d8-d10}
 800b42e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b432:	f000 bcf0 	b.w	800be16 <__math_oflow>
 800b436:	429c      	cmp	r4, r3
 800b438:	dbf2      	blt.n	800b420 <__ieee754_pow+0x218>
 800b43a:	4b0a      	ldr	r3, [pc, #40]	; (800b464 <__ieee754_pow+0x25c>)
 800b43c:	429c      	cmp	r4, r3
 800b43e:	dd19      	ble.n	800b474 <__ieee754_pow+0x26c>
 800b440:	f1b9 0f00 	cmp.w	r9, #0
 800b444:	dcef      	bgt.n	800b426 <__ieee754_pow+0x21e>
 800b446:	2000      	movs	r0, #0
 800b448:	b009      	add	sp, #36	; 0x24
 800b44a:	ecbd 8b06 	vpop	{d8-d10}
 800b44e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b452:	f000 bcd7 	b.w	800be04 <__math_uflow>
 800b456:	bf00      	nop
 800b458:	fff00000 	.word	0xfff00000
 800b45c:	7ff00000 	.word	0x7ff00000
 800b460:	433fffff 	.word	0x433fffff
 800b464:	3ff00000 	.word	0x3ff00000
 800b468:	3fefffff 	.word	0x3fefffff
 800b46c:	3fe00000 	.word	0x3fe00000
 800b470:	41e00000 	.word	0x41e00000
 800b474:	4b60      	ldr	r3, [pc, #384]	; (800b5f8 <__ieee754_pow+0x3f0>)
 800b476:	2200      	movs	r2, #0
 800b478:	f7f4 fefe 	bl	8000278 <__aeabi_dsub>
 800b47c:	a354      	add	r3, pc, #336	; (adr r3, 800b5d0 <__ieee754_pow+0x3c8>)
 800b47e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b482:	4604      	mov	r4, r0
 800b484:	460d      	mov	r5, r1
 800b486:	f7f5 f8af 	bl	80005e8 <__aeabi_dmul>
 800b48a:	a353      	add	r3, pc, #332	; (adr r3, 800b5d8 <__ieee754_pow+0x3d0>)
 800b48c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b490:	4606      	mov	r6, r0
 800b492:	460f      	mov	r7, r1
 800b494:	4620      	mov	r0, r4
 800b496:	4629      	mov	r1, r5
 800b498:	f7f5 f8a6 	bl	80005e8 <__aeabi_dmul>
 800b49c:	4b57      	ldr	r3, [pc, #348]	; (800b5fc <__ieee754_pow+0x3f4>)
 800b49e:	4682      	mov	sl, r0
 800b4a0:	468b      	mov	fp, r1
 800b4a2:	2200      	movs	r2, #0
 800b4a4:	4620      	mov	r0, r4
 800b4a6:	4629      	mov	r1, r5
 800b4a8:	f7f5 f89e 	bl	80005e8 <__aeabi_dmul>
 800b4ac:	4602      	mov	r2, r0
 800b4ae:	460b      	mov	r3, r1
 800b4b0:	a14b      	add	r1, pc, #300	; (adr r1, 800b5e0 <__ieee754_pow+0x3d8>)
 800b4b2:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b4b6:	f7f4 fedf 	bl	8000278 <__aeabi_dsub>
 800b4ba:	4622      	mov	r2, r4
 800b4bc:	462b      	mov	r3, r5
 800b4be:	f7f5 f893 	bl	80005e8 <__aeabi_dmul>
 800b4c2:	4602      	mov	r2, r0
 800b4c4:	460b      	mov	r3, r1
 800b4c6:	2000      	movs	r0, #0
 800b4c8:	494d      	ldr	r1, [pc, #308]	; (800b600 <__ieee754_pow+0x3f8>)
 800b4ca:	f7f4 fed5 	bl	8000278 <__aeabi_dsub>
 800b4ce:	4622      	mov	r2, r4
 800b4d0:	4680      	mov	r8, r0
 800b4d2:	4689      	mov	r9, r1
 800b4d4:	462b      	mov	r3, r5
 800b4d6:	4620      	mov	r0, r4
 800b4d8:	4629      	mov	r1, r5
 800b4da:	f7f5 f885 	bl	80005e8 <__aeabi_dmul>
 800b4de:	4602      	mov	r2, r0
 800b4e0:	460b      	mov	r3, r1
 800b4e2:	4640      	mov	r0, r8
 800b4e4:	4649      	mov	r1, r9
 800b4e6:	f7f5 f87f 	bl	80005e8 <__aeabi_dmul>
 800b4ea:	a33f      	add	r3, pc, #252	; (adr r3, 800b5e8 <__ieee754_pow+0x3e0>)
 800b4ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4f0:	f7f5 f87a 	bl	80005e8 <__aeabi_dmul>
 800b4f4:	4602      	mov	r2, r0
 800b4f6:	460b      	mov	r3, r1
 800b4f8:	4650      	mov	r0, sl
 800b4fa:	4659      	mov	r1, fp
 800b4fc:	f7f4 febc 	bl	8000278 <__aeabi_dsub>
 800b500:	4602      	mov	r2, r0
 800b502:	460b      	mov	r3, r1
 800b504:	4680      	mov	r8, r0
 800b506:	4689      	mov	r9, r1
 800b508:	4630      	mov	r0, r6
 800b50a:	4639      	mov	r1, r7
 800b50c:	f7f4 feb6 	bl	800027c <__adddf3>
 800b510:	2000      	movs	r0, #0
 800b512:	4632      	mov	r2, r6
 800b514:	463b      	mov	r3, r7
 800b516:	4604      	mov	r4, r0
 800b518:	460d      	mov	r5, r1
 800b51a:	f7f4 fead 	bl	8000278 <__aeabi_dsub>
 800b51e:	4602      	mov	r2, r0
 800b520:	460b      	mov	r3, r1
 800b522:	4640      	mov	r0, r8
 800b524:	4649      	mov	r1, r9
 800b526:	f7f4 fea7 	bl	8000278 <__aeabi_dsub>
 800b52a:	9b04      	ldr	r3, [sp, #16]
 800b52c:	9a06      	ldr	r2, [sp, #24]
 800b52e:	3b01      	subs	r3, #1
 800b530:	4313      	orrs	r3, r2
 800b532:	4682      	mov	sl, r0
 800b534:	468b      	mov	fp, r1
 800b536:	f040 81e7 	bne.w	800b908 <__ieee754_pow+0x700>
 800b53a:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 800b5f0 <__ieee754_pow+0x3e8>
 800b53e:	eeb0 8a47 	vmov.f32	s16, s14
 800b542:	eef0 8a67 	vmov.f32	s17, s15
 800b546:	e9dd 6700 	ldrd	r6, r7, [sp]
 800b54a:	2600      	movs	r6, #0
 800b54c:	4632      	mov	r2, r6
 800b54e:	463b      	mov	r3, r7
 800b550:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b554:	f7f4 fe90 	bl	8000278 <__aeabi_dsub>
 800b558:	4622      	mov	r2, r4
 800b55a:	462b      	mov	r3, r5
 800b55c:	f7f5 f844 	bl	80005e8 <__aeabi_dmul>
 800b560:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b564:	4680      	mov	r8, r0
 800b566:	4689      	mov	r9, r1
 800b568:	4650      	mov	r0, sl
 800b56a:	4659      	mov	r1, fp
 800b56c:	f7f5 f83c 	bl	80005e8 <__aeabi_dmul>
 800b570:	4602      	mov	r2, r0
 800b572:	460b      	mov	r3, r1
 800b574:	4640      	mov	r0, r8
 800b576:	4649      	mov	r1, r9
 800b578:	f7f4 fe80 	bl	800027c <__adddf3>
 800b57c:	4632      	mov	r2, r6
 800b57e:	463b      	mov	r3, r7
 800b580:	4680      	mov	r8, r0
 800b582:	4689      	mov	r9, r1
 800b584:	4620      	mov	r0, r4
 800b586:	4629      	mov	r1, r5
 800b588:	f7f5 f82e 	bl	80005e8 <__aeabi_dmul>
 800b58c:	460b      	mov	r3, r1
 800b58e:	4604      	mov	r4, r0
 800b590:	460d      	mov	r5, r1
 800b592:	4602      	mov	r2, r0
 800b594:	4649      	mov	r1, r9
 800b596:	4640      	mov	r0, r8
 800b598:	f7f4 fe70 	bl	800027c <__adddf3>
 800b59c:	4b19      	ldr	r3, [pc, #100]	; (800b604 <__ieee754_pow+0x3fc>)
 800b59e:	4299      	cmp	r1, r3
 800b5a0:	ec45 4b19 	vmov	d9, r4, r5
 800b5a4:	4606      	mov	r6, r0
 800b5a6:	460f      	mov	r7, r1
 800b5a8:	468b      	mov	fp, r1
 800b5aa:	f340 82f1 	ble.w	800bb90 <__ieee754_pow+0x988>
 800b5ae:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800b5b2:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800b5b6:	4303      	orrs	r3, r0
 800b5b8:	f000 81e4 	beq.w	800b984 <__ieee754_pow+0x77c>
 800b5bc:	ec51 0b18 	vmov	r0, r1, d8
 800b5c0:	2200      	movs	r2, #0
 800b5c2:	2300      	movs	r3, #0
 800b5c4:	f7f5 fa82 	bl	8000acc <__aeabi_dcmplt>
 800b5c8:	3800      	subs	r0, #0
 800b5ca:	bf18      	it	ne
 800b5cc:	2001      	movne	r0, #1
 800b5ce:	e72b      	b.n	800b428 <__ieee754_pow+0x220>
 800b5d0:	60000000 	.word	0x60000000
 800b5d4:	3ff71547 	.word	0x3ff71547
 800b5d8:	f85ddf44 	.word	0xf85ddf44
 800b5dc:	3e54ae0b 	.word	0x3e54ae0b
 800b5e0:	55555555 	.word	0x55555555
 800b5e4:	3fd55555 	.word	0x3fd55555
 800b5e8:	652b82fe 	.word	0x652b82fe
 800b5ec:	3ff71547 	.word	0x3ff71547
 800b5f0:	00000000 	.word	0x00000000
 800b5f4:	bff00000 	.word	0xbff00000
 800b5f8:	3ff00000 	.word	0x3ff00000
 800b5fc:	3fd00000 	.word	0x3fd00000
 800b600:	3fe00000 	.word	0x3fe00000
 800b604:	408fffff 	.word	0x408fffff
 800b608:	4bd5      	ldr	r3, [pc, #852]	; (800b960 <__ieee754_pow+0x758>)
 800b60a:	402b      	ands	r3, r5
 800b60c:	2200      	movs	r2, #0
 800b60e:	b92b      	cbnz	r3, 800b61c <__ieee754_pow+0x414>
 800b610:	4bd4      	ldr	r3, [pc, #848]	; (800b964 <__ieee754_pow+0x75c>)
 800b612:	f7f4 ffe9 	bl	80005e8 <__aeabi_dmul>
 800b616:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800b61a:	460c      	mov	r4, r1
 800b61c:	1523      	asrs	r3, r4, #20
 800b61e:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800b622:	4413      	add	r3, r2
 800b624:	9305      	str	r3, [sp, #20]
 800b626:	4bd0      	ldr	r3, [pc, #832]	; (800b968 <__ieee754_pow+0x760>)
 800b628:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800b62c:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800b630:	429c      	cmp	r4, r3
 800b632:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800b636:	dd08      	ble.n	800b64a <__ieee754_pow+0x442>
 800b638:	4bcc      	ldr	r3, [pc, #816]	; (800b96c <__ieee754_pow+0x764>)
 800b63a:	429c      	cmp	r4, r3
 800b63c:	f340 8162 	ble.w	800b904 <__ieee754_pow+0x6fc>
 800b640:	9b05      	ldr	r3, [sp, #20]
 800b642:	3301      	adds	r3, #1
 800b644:	9305      	str	r3, [sp, #20]
 800b646:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800b64a:	2400      	movs	r4, #0
 800b64c:	00e3      	lsls	r3, r4, #3
 800b64e:	9307      	str	r3, [sp, #28]
 800b650:	4bc7      	ldr	r3, [pc, #796]	; (800b970 <__ieee754_pow+0x768>)
 800b652:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800b656:	ed93 7b00 	vldr	d7, [r3]
 800b65a:	4629      	mov	r1, r5
 800b65c:	ec53 2b17 	vmov	r2, r3, d7
 800b660:	eeb0 9a47 	vmov.f32	s18, s14
 800b664:	eef0 9a67 	vmov.f32	s19, s15
 800b668:	4682      	mov	sl, r0
 800b66a:	f7f4 fe05 	bl	8000278 <__aeabi_dsub>
 800b66e:	4652      	mov	r2, sl
 800b670:	4606      	mov	r6, r0
 800b672:	460f      	mov	r7, r1
 800b674:	462b      	mov	r3, r5
 800b676:	ec51 0b19 	vmov	r0, r1, d9
 800b67a:	f7f4 fdff 	bl	800027c <__adddf3>
 800b67e:	4602      	mov	r2, r0
 800b680:	460b      	mov	r3, r1
 800b682:	2000      	movs	r0, #0
 800b684:	49bb      	ldr	r1, [pc, #748]	; (800b974 <__ieee754_pow+0x76c>)
 800b686:	f7f5 f8d9 	bl	800083c <__aeabi_ddiv>
 800b68a:	ec41 0b1a 	vmov	d10, r0, r1
 800b68e:	4602      	mov	r2, r0
 800b690:	460b      	mov	r3, r1
 800b692:	4630      	mov	r0, r6
 800b694:	4639      	mov	r1, r7
 800b696:	f7f4 ffa7 	bl	80005e8 <__aeabi_dmul>
 800b69a:	2300      	movs	r3, #0
 800b69c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b6a0:	9302      	str	r3, [sp, #8]
 800b6a2:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800b6a6:	46ab      	mov	fp, r5
 800b6a8:	106d      	asrs	r5, r5, #1
 800b6aa:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800b6ae:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800b6b2:	ec41 0b18 	vmov	d8, r0, r1
 800b6b6:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 800b6ba:	2200      	movs	r2, #0
 800b6bc:	4640      	mov	r0, r8
 800b6be:	4649      	mov	r1, r9
 800b6c0:	4614      	mov	r4, r2
 800b6c2:	461d      	mov	r5, r3
 800b6c4:	f7f4 ff90 	bl	80005e8 <__aeabi_dmul>
 800b6c8:	4602      	mov	r2, r0
 800b6ca:	460b      	mov	r3, r1
 800b6cc:	4630      	mov	r0, r6
 800b6ce:	4639      	mov	r1, r7
 800b6d0:	f7f4 fdd2 	bl	8000278 <__aeabi_dsub>
 800b6d4:	ec53 2b19 	vmov	r2, r3, d9
 800b6d8:	4606      	mov	r6, r0
 800b6da:	460f      	mov	r7, r1
 800b6dc:	4620      	mov	r0, r4
 800b6de:	4629      	mov	r1, r5
 800b6e0:	f7f4 fdca 	bl	8000278 <__aeabi_dsub>
 800b6e4:	4602      	mov	r2, r0
 800b6e6:	460b      	mov	r3, r1
 800b6e8:	4650      	mov	r0, sl
 800b6ea:	4659      	mov	r1, fp
 800b6ec:	f7f4 fdc4 	bl	8000278 <__aeabi_dsub>
 800b6f0:	4642      	mov	r2, r8
 800b6f2:	464b      	mov	r3, r9
 800b6f4:	f7f4 ff78 	bl	80005e8 <__aeabi_dmul>
 800b6f8:	4602      	mov	r2, r0
 800b6fa:	460b      	mov	r3, r1
 800b6fc:	4630      	mov	r0, r6
 800b6fe:	4639      	mov	r1, r7
 800b700:	f7f4 fdba 	bl	8000278 <__aeabi_dsub>
 800b704:	ec53 2b1a 	vmov	r2, r3, d10
 800b708:	f7f4 ff6e 	bl	80005e8 <__aeabi_dmul>
 800b70c:	ec53 2b18 	vmov	r2, r3, d8
 800b710:	ec41 0b19 	vmov	d9, r0, r1
 800b714:	ec51 0b18 	vmov	r0, r1, d8
 800b718:	f7f4 ff66 	bl	80005e8 <__aeabi_dmul>
 800b71c:	a37c      	add	r3, pc, #496	; (adr r3, 800b910 <__ieee754_pow+0x708>)
 800b71e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b722:	4604      	mov	r4, r0
 800b724:	460d      	mov	r5, r1
 800b726:	f7f4 ff5f 	bl	80005e8 <__aeabi_dmul>
 800b72a:	a37b      	add	r3, pc, #492	; (adr r3, 800b918 <__ieee754_pow+0x710>)
 800b72c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b730:	f7f4 fda4 	bl	800027c <__adddf3>
 800b734:	4622      	mov	r2, r4
 800b736:	462b      	mov	r3, r5
 800b738:	f7f4 ff56 	bl	80005e8 <__aeabi_dmul>
 800b73c:	a378      	add	r3, pc, #480	; (adr r3, 800b920 <__ieee754_pow+0x718>)
 800b73e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b742:	f7f4 fd9b 	bl	800027c <__adddf3>
 800b746:	4622      	mov	r2, r4
 800b748:	462b      	mov	r3, r5
 800b74a:	f7f4 ff4d 	bl	80005e8 <__aeabi_dmul>
 800b74e:	a376      	add	r3, pc, #472	; (adr r3, 800b928 <__ieee754_pow+0x720>)
 800b750:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b754:	f7f4 fd92 	bl	800027c <__adddf3>
 800b758:	4622      	mov	r2, r4
 800b75a:	462b      	mov	r3, r5
 800b75c:	f7f4 ff44 	bl	80005e8 <__aeabi_dmul>
 800b760:	a373      	add	r3, pc, #460	; (adr r3, 800b930 <__ieee754_pow+0x728>)
 800b762:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b766:	f7f4 fd89 	bl	800027c <__adddf3>
 800b76a:	4622      	mov	r2, r4
 800b76c:	462b      	mov	r3, r5
 800b76e:	f7f4 ff3b 	bl	80005e8 <__aeabi_dmul>
 800b772:	a371      	add	r3, pc, #452	; (adr r3, 800b938 <__ieee754_pow+0x730>)
 800b774:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b778:	f7f4 fd80 	bl	800027c <__adddf3>
 800b77c:	4622      	mov	r2, r4
 800b77e:	4606      	mov	r6, r0
 800b780:	460f      	mov	r7, r1
 800b782:	462b      	mov	r3, r5
 800b784:	4620      	mov	r0, r4
 800b786:	4629      	mov	r1, r5
 800b788:	f7f4 ff2e 	bl	80005e8 <__aeabi_dmul>
 800b78c:	4602      	mov	r2, r0
 800b78e:	460b      	mov	r3, r1
 800b790:	4630      	mov	r0, r6
 800b792:	4639      	mov	r1, r7
 800b794:	f7f4 ff28 	bl	80005e8 <__aeabi_dmul>
 800b798:	4642      	mov	r2, r8
 800b79a:	4604      	mov	r4, r0
 800b79c:	460d      	mov	r5, r1
 800b79e:	464b      	mov	r3, r9
 800b7a0:	ec51 0b18 	vmov	r0, r1, d8
 800b7a4:	f7f4 fd6a 	bl	800027c <__adddf3>
 800b7a8:	ec53 2b19 	vmov	r2, r3, d9
 800b7ac:	f7f4 ff1c 	bl	80005e8 <__aeabi_dmul>
 800b7b0:	4622      	mov	r2, r4
 800b7b2:	462b      	mov	r3, r5
 800b7b4:	f7f4 fd62 	bl	800027c <__adddf3>
 800b7b8:	4642      	mov	r2, r8
 800b7ba:	4682      	mov	sl, r0
 800b7bc:	468b      	mov	fp, r1
 800b7be:	464b      	mov	r3, r9
 800b7c0:	4640      	mov	r0, r8
 800b7c2:	4649      	mov	r1, r9
 800b7c4:	f7f4 ff10 	bl	80005e8 <__aeabi_dmul>
 800b7c8:	4b6b      	ldr	r3, [pc, #428]	; (800b978 <__ieee754_pow+0x770>)
 800b7ca:	2200      	movs	r2, #0
 800b7cc:	4606      	mov	r6, r0
 800b7ce:	460f      	mov	r7, r1
 800b7d0:	f7f4 fd54 	bl	800027c <__adddf3>
 800b7d4:	4652      	mov	r2, sl
 800b7d6:	465b      	mov	r3, fp
 800b7d8:	f7f4 fd50 	bl	800027c <__adddf3>
 800b7dc:	2000      	movs	r0, #0
 800b7de:	4604      	mov	r4, r0
 800b7e0:	460d      	mov	r5, r1
 800b7e2:	4602      	mov	r2, r0
 800b7e4:	460b      	mov	r3, r1
 800b7e6:	4640      	mov	r0, r8
 800b7e8:	4649      	mov	r1, r9
 800b7ea:	f7f4 fefd 	bl	80005e8 <__aeabi_dmul>
 800b7ee:	4b62      	ldr	r3, [pc, #392]	; (800b978 <__ieee754_pow+0x770>)
 800b7f0:	4680      	mov	r8, r0
 800b7f2:	4689      	mov	r9, r1
 800b7f4:	2200      	movs	r2, #0
 800b7f6:	4620      	mov	r0, r4
 800b7f8:	4629      	mov	r1, r5
 800b7fa:	f7f4 fd3d 	bl	8000278 <__aeabi_dsub>
 800b7fe:	4632      	mov	r2, r6
 800b800:	463b      	mov	r3, r7
 800b802:	f7f4 fd39 	bl	8000278 <__aeabi_dsub>
 800b806:	4602      	mov	r2, r0
 800b808:	460b      	mov	r3, r1
 800b80a:	4650      	mov	r0, sl
 800b80c:	4659      	mov	r1, fp
 800b80e:	f7f4 fd33 	bl	8000278 <__aeabi_dsub>
 800b812:	ec53 2b18 	vmov	r2, r3, d8
 800b816:	f7f4 fee7 	bl	80005e8 <__aeabi_dmul>
 800b81a:	4622      	mov	r2, r4
 800b81c:	4606      	mov	r6, r0
 800b81e:	460f      	mov	r7, r1
 800b820:	462b      	mov	r3, r5
 800b822:	ec51 0b19 	vmov	r0, r1, d9
 800b826:	f7f4 fedf 	bl	80005e8 <__aeabi_dmul>
 800b82a:	4602      	mov	r2, r0
 800b82c:	460b      	mov	r3, r1
 800b82e:	4630      	mov	r0, r6
 800b830:	4639      	mov	r1, r7
 800b832:	f7f4 fd23 	bl	800027c <__adddf3>
 800b836:	4606      	mov	r6, r0
 800b838:	460f      	mov	r7, r1
 800b83a:	4602      	mov	r2, r0
 800b83c:	460b      	mov	r3, r1
 800b83e:	4640      	mov	r0, r8
 800b840:	4649      	mov	r1, r9
 800b842:	f7f4 fd1b 	bl	800027c <__adddf3>
 800b846:	a33e      	add	r3, pc, #248	; (adr r3, 800b940 <__ieee754_pow+0x738>)
 800b848:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b84c:	2000      	movs	r0, #0
 800b84e:	4604      	mov	r4, r0
 800b850:	460d      	mov	r5, r1
 800b852:	f7f4 fec9 	bl	80005e8 <__aeabi_dmul>
 800b856:	4642      	mov	r2, r8
 800b858:	ec41 0b18 	vmov	d8, r0, r1
 800b85c:	464b      	mov	r3, r9
 800b85e:	4620      	mov	r0, r4
 800b860:	4629      	mov	r1, r5
 800b862:	f7f4 fd09 	bl	8000278 <__aeabi_dsub>
 800b866:	4602      	mov	r2, r0
 800b868:	460b      	mov	r3, r1
 800b86a:	4630      	mov	r0, r6
 800b86c:	4639      	mov	r1, r7
 800b86e:	f7f4 fd03 	bl	8000278 <__aeabi_dsub>
 800b872:	a335      	add	r3, pc, #212	; (adr r3, 800b948 <__ieee754_pow+0x740>)
 800b874:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b878:	f7f4 feb6 	bl	80005e8 <__aeabi_dmul>
 800b87c:	a334      	add	r3, pc, #208	; (adr r3, 800b950 <__ieee754_pow+0x748>)
 800b87e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b882:	4606      	mov	r6, r0
 800b884:	460f      	mov	r7, r1
 800b886:	4620      	mov	r0, r4
 800b888:	4629      	mov	r1, r5
 800b88a:	f7f4 fead 	bl	80005e8 <__aeabi_dmul>
 800b88e:	4602      	mov	r2, r0
 800b890:	460b      	mov	r3, r1
 800b892:	4630      	mov	r0, r6
 800b894:	4639      	mov	r1, r7
 800b896:	f7f4 fcf1 	bl	800027c <__adddf3>
 800b89a:	9a07      	ldr	r2, [sp, #28]
 800b89c:	4b37      	ldr	r3, [pc, #220]	; (800b97c <__ieee754_pow+0x774>)
 800b89e:	4413      	add	r3, r2
 800b8a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8a4:	f7f4 fcea 	bl	800027c <__adddf3>
 800b8a8:	4682      	mov	sl, r0
 800b8aa:	9805      	ldr	r0, [sp, #20]
 800b8ac:	468b      	mov	fp, r1
 800b8ae:	f7f4 fe31 	bl	8000514 <__aeabi_i2d>
 800b8b2:	9a07      	ldr	r2, [sp, #28]
 800b8b4:	4b32      	ldr	r3, [pc, #200]	; (800b980 <__ieee754_pow+0x778>)
 800b8b6:	4413      	add	r3, r2
 800b8b8:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b8bc:	4606      	mov	r6, r0
 800b8be:	460f      	mov	r7, r1
 800b8c0:	4652      	mov	r2, sl
 800b8c2:	465b      	mov	r3, fp
 800b8c4:	ec51 0b18 	vmov	r0, r1, d8
 800b8c8:	f7f4 fcd8 	bl	800027c <__adddf3>
 800b8cc:	4642      	mov	r2, r8
 800b8ce:	464b      	mov	r3, r9
 800b8d0:	f7f4 fcd4 	bl	800027c <__adddf3>
 800b8d4:	4632      	mov	r2, r6
 800b8d6:	463b      	mov	r3, r7
 800b8d8:	f7f4 fcd0 	bl	800027c <__adddf3>
 800b8dc:	2000      	movs	r0, #0
 800b8de:	4632      	mov	r2, r6
 800b8e0:	463b      	mov	r3, r7
 800b8e2:	4604      	mov	r4, r0
 800b8e4:	460d      	mov	r5, r1
 800b8e6:	f7f4 fcc7 	bl	8000278 <__aeabi_dsub>
 800b8ea:	4642      	mov	r2, r8
 800b8ec:	464b      	mov	r3, r9
 800b8ee:	f7f4 fcc3 	bl	8000278 <__aeabi_dsub>
 800b8f2:	ec53 2b18 	vmov	r2, r3, d8
 800b8f6:	f7f4 fcbf 	bl	8000278 <__aeabi_dsub>
 800b8fa:	4602      	mov	r2, r0
 800b8fc:	460b      	mov	r3, r1
 800b8fe:	4650      	mov	r0, sl
 800b900:	4659      	mov	r1, fp
 800b902:	e610      	b.n	800b526 <__ieee754_pow+0x31e>
 800b904:	2401      	movs	r4, #1
 800b906:	e6a1      	b.n	800b64c <__ieee754_pow+0x444>
 800b908:	ed9f 7b13 	vldr	d7, [pc, #76]	; 800b958 <__ieee754_pow+0x750>
 800b90c:	e617      	b.n	800b53e <__ieee754_pow+0x336>
 800b90e:	bf00      	nop
 800b910:	4a454eef 	.word	0x4a454eef
 800b914:	3fca7e28 	.word	0x3fca7e28
 800b918:	93c9db65 	.word	0x93c9db65
 800b91c:	3fcd864a 	.word	0x3fcd864a
 800b920:	a91d4101 	.word	0xa91d4101
 800b924:	3fd17460 	.word	0x3fd17460
 800b928:	518f264d 	.word	0x518f264d
 800b92c:	3fd55555 	.word	0x3fd55555
 800b930:	db6fabff 	.word	0xdb6fabff
 800b934:	3fdb6db6 	.word	0x3fdb6db6
 800b938:	33333303 	.word	0x33333303
 800b93c:	3fe33333 	.word	0x3fe33333
 800b940:	e0000000 	.word	0xe0000000
 800b944:	3feec709 	.word	0x3feec709
 800b948:	dc3a03fd 	.word	0xdc3a03fd
 800b94c:	3feec709 	.word	0x3feec709
 800b950:	145b01f5 	.word	0x145b01f5
 800b954:	be3e2fe0 	.word	0xbe3e2fe0
 800b958:	00000000 	.word	0x00000000
 800b95c:	3ff00000 	.word	0x3ff00000
 800b960:	7ff00000 	.word	0x7ff00000
 800b964:	43400000 	.word	0x43400000
 800b968:	0003988e 	.word	0x0003988e
 800b96c:	000bb679 	.word	0x000bb679
 800b970:	0800c150 	.word	0x0800c150
 800b974:	3ff00000 	.word	0x3ff00000
 800b978:	40080000 	.word	0x40080000
 800b97c:	0800c170 	.word	0x0800c170
 800b980:	0800c160 	.word	0x0800c160
 800b984:	a3b5      	add	r3, pc, #724	; (adr r3, 800bc5c <__ieee754_pow+0xa54>)
 800b986:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b98a:	4640      	mov	r0, r8
 800b98c:	4649      	mov	r1, r9
 800b98e:	f7f4 fc75 	bl	800027c <__adddf3>
 800b992:	4622      	mov	r2, r4
 800b994:	ec41 0b1a 	vmov	d10, r0, r1
 800b998:	462b      	mov	r3, r5
 800b99a:	4630      	mov	r0, r6
 800b99c:	4639      	mov	r1, r7
 800b99e:	f7f4 fc6b 	bl	8000278 <__aeabi_dsub>
 800b9a2:	4602      	mov	r2, r0
 800b9a4:	460b      	mov	r3, r1
 800b9a6:	ec51 0b1a 	vmov	r0, r1, d10
 800b9aa:	f7f5 f8ad 	bl	8000b08 <__aeabi_dcmpgt>
 800b9ae:	2800      	cmp	r0, #0
 800b9b0:	f47f ae04 	bne.w	800b5bc <__ieee754_pow+0x3b4>
 800b9b4:	4aa4      	ldr	r2, [pc, #656]	; (800bc48 <__ieee754_pow+0xa40>)
 800b9b6:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800b9ba:	4293      	cmp	r3, r2
 800b9bc:	f340 8108 	ble.w	800bbd0 <__ieee754_pow+0x9c8>
 800b9c0:	151b      	asrs	r3, r3, #20
 800b9c2:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800b9c6:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800b9ca:	fa4a f303 	asr.w	r3, sl, r3
 800b9ce:	445b      	add	r3, fp
 800b9d0:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800b9d4:	4e9d      	ldr	r6, [pc, #628]	; (800bc4c <__ieee754_pow+0xa44>)
 800b9d6:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800b9da:	4116      	asrs	r6, r2
 800b9dc:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800b9e0:	2000      	movs	r0, #0
 800b9e2:	ea23 0106 	bic.w	r1, r3, r6
 800b9e6:	f1c2 0214 	rsb	r2, r2, #20
 800b9ea:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800b9ee:	fa4a fa02 	asr.w	sl, sl, r2
 800b9f2:	f1bb 0f00 	cmp.w	fp, #0
 800b9f6:	4602      	mov	r2, r0
 800b9f8:	460b      	mov	r3, r1
 800b9fa:	4620      	mov	r0, r4
 800b9fc:	4629      	mov	r1, r5
 800b9fe:	bfb8      	it	lt
 800ba00:	f1ca 0a00 	rsblt	sl, sl, #0
 800ba04:	f7f4 fc38 	bl	8000278 <__aeabi_dsub>
 800ba08:	ec41 0b19 	vmov	d9, r0, r1
 800ba0c:	4642      	mov	r2, r8
 800ba0e:	464b      	mov	r3, r9
 800ba10:	ec51 0b19 	vmov	r0, r1, d9
 800ba14:	f7f4 fc32 	bl	800027c <__adddf3>
 800ba18:	a37b      	add	r3, pc, #492	; (adr r3, 800bc08 <__ieee754_pow+0xa00>)
 800ba1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba1e:	2000      	movs	r0, #0
 800ba20:	4604      	mov	r4, r0
 800ba22:	460d      	mov	r5, r1
 800ba24:	f7f4 fde0 	bl	80005e8 <__aeabi_dmul>
 800ba28:	ec53 2b19 	vmov	r2, r3, d9
 800ba2c:	4606      	mov	r6, r0
 800ba2e:	460f      	mov	r7, r1
 800ba30:	4620      	mov	r0, r4
 800ba32:	4629      	mov	r1, r5
 800ba34:	f7f4 fc20 	bl	8000278 <__aeabi_dsub>
 800ba38:	4602      	mov	r2, r0
 800ba3a:	460b      	mov	r3, r1
 800ba3c:	4640      	mov	r0, r8
 800ba3e:	4649      	mov	r1, r9
 800ba40:	f7f4 fc1a 	bl	8000278 <__aeabi_dsub>
 800ba44:	a372      	add	r3, pc, #456	; (adr r3, 800bc10 <__ieee754_pow+0xa08>)
 800ba46:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba4a:	f7f4 fdcd 	bl	80005e8 <__aeabi_dmul>
 800ba4e:	a372      	add	r3, pc, #456	; (adr r3, 800bc18 <__ieee754_pow+0xa10>)
 800ba50:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba54:	4680      	mov	r8, r0
 800ba56:	4689      	mov	r9, r1
 800ba58:	4620      	mov	r0, r4
 800ba5a:	4629      	mov	r1, r5
 800ba5c:	f7f4 fdc4 	bl	80005e8 <__aeabi_dmul>
 800ba60:	4602      	mov	r2, r0
 800ba62:	460b      	mov	r3, r1
 800ba64:	4640      	mov	r0, r8
 800ba66:	4649      	mov	r1, r9
 800ba68:	f7f4 fc08 	bl	800027c <__adddf3>
 800ba6c:	4604      	mov	r4, r0
 800ba6e:	460d      	mov	r5, r1
 800ba70:	4602      	mov	r2, r0
 800ba72:	460b      	mov	r3, r1
 800ba74:	4630      	mov	r0, r6
 800ba76:	4639      	mov	r1, r7
 800ba78:	f7f4 fc00 	bl	800027c <__adddf3>
 800ba7c:	4632      	mov	r2, r6
 800ba7e:	463b      	mov	r3, r7
 800ba80:	4680      	mov	r8, r0
 800ba82:	4689      	mov	r9, r1
 800ba84:	f7f4 fbf8 	bl	8000278 <__aeabi_dsub>
 800ba88:	4602      	mov	r2, r0
 800ba8a:	460b      	mov	r3, r1
 800ba8c:	4620      	mov	r0, r4
 800ba8e:	4629      	mov	r1, r5
 800ba90:	f7f4 fbf2 	bl	8000278 <__aeabi_dsub>
 800ba94:	4642      	mov	r2, r8
 800ba96:	4606      	mov	r6, r0
 800ba98:	460f      	mov	r7, r1
 800ba9a:	464b      	mov	r3, r9
 800ba9c:	4640      	mov	r0, r8
 800ba9e:	4649      	mov	r1, r9
 800baa0:	f7f4 fda2 	bl	80005e8 <__aeabi_dmul>
 800baa4:	a35e      	add	r3, pc, #376	; (adr r3, 800bc20 <__ieee754_pow+0xa18>)
 800baa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800baaa:	4604      	mov	r4, r0
 800baac:	460d      	mov	r5, r1
 800baae:	f7f4 fd9b 	bl	80005e8 <__aeabi_dmul>
 800bab2:	a35d      	add	r3, pc, #372	; (adr r3, 800bc28 <__ieee754_pow+0xa20>)
 800bab4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bab8:	f7f4 fbde 	bl	8000278 <__aeabi_dsub>
 800babc:	4622      	mov	r2, r4
 800babe:	462b      	mov	r3, r5
 800bac0:	f7f4 fd92 	bl	80005e8 <__aeabi_dmul>
 800bac4:	a35a      	add	r3, pc, #360	; (adr r3, 800bc30 <__ieee754_pow+0xa28>)
 800bac6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800baca:	f7f4 fbd7 	bl	800027c <__adddf3>
 800bace:	4622      	mov	r2, r4
 800bad0:	462b      	mov	r3, r5
 800bad2:	f7f4 fd89 	bl	80005e8 <__aeabi_dmul>
 800bad6:	a358      	add	r3, pc, #352	; (adr r3, 800bc38 <__ieee754_pow+0xa30>)
 800bad8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800badc:	f7f4 fbcc 	bl	8000278 <__aeabi_dsub>
 800bae0:	4622      	mov	r2, r4
 800bae2:	462b      	mov	r3, r5
 800bae4:	f7f4 fd80 	bl	80005e8 <__aeabi_dmul>
 800bae8:	a355      	add	r3, pc, #340	; (adr r3, 800bc40 <__ieee754_pow+0xa38>)
 800baea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800baee:	f7f4 fbc5 	bl	800027c <__adddf3>
 800baf2:	4622      	mov	r2, r4
 800baf4:	462b      	mov	r3, r5
 800baf6:	f7f4 fd77 	bl	80005e8 <__aeabi_dmul>
 800bafa:	4602      	mov	r2, r0
 800bafc:	460b      	mov	r3, r1
 800bafe:	4640      	mov	r0, r8
 800bb00:	4649      	mov	r1, r9
 800bb02:	f7f4 fbb9 	bl	8000278 <__aeabi_dsub>
 800bb06:	4604      	mov	r4, r0
 800bb08:	460d      	mov	r5, r1
 800bb0a:	4602      	mov	r2, r0
 800bb0c:	460b      	mov	r3, r1
 800bb0e:	4640      	mov	r0, r8
 800bb10:	4649      	mov	r1, r9
 800bb12:	f7f4 fd69 	bl	80005e8 <__aeabi_dmul>
 800bb16:	2200      	movs	r2, #0
 800bb18:	ec41 0b19 	vmov	d9, r0, r1
 800bb1c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800bb20:	4620      	mov	r0, r4
 800bb22:	4629      	mov	r1, r5
 800bb24:	f7f4 fba8 	bl	8000278 <__aeabi_dsub>
 800bb28:	4602      	mov	r2, r0
 800bb2a:	460b      	mov	r3, r1
 800bb2c:	ec51 0b19 	vmov	r0, r1, d9
 800bb30:	f7f4 fe84 	bl	800083c <__aeabi_ddiv>
 800bb34:	4632      	mov	r2, r6
 800bb36:	4604      	mov	r4, r0
 800bb38:	460d      	mov	r5, r1
 800bb3a:	463b      	mov	r3, r7
 800bb3c:	4640      	mov	r0, r8
 800bb3e:	4649      	mov	r1, r9
 800bb40:	f7f4 fd52 	bl	80005e8 <__aeabi_dmul>
 800bb44:	4632      	mov	r2, r6
 800bb46:	463b      	mov	r3, r7
 800bb48:	f7f4 fb98 	bl	800027c <__adddf3>
 800bb4c:	4602      	mov	r2, r0
 800bb4e:	460b      	mov	r3, r1
 800bb50:	4620      	mov	r0, r4
 800bb52:	4629      	mov	r1, r5
 800bb54:	f7f4 fb90 	bl	8000278 <__aeabi_dsub>
 800bb58:	4642      	mov	r2, r8
 800bb5a:	464b      	mov	r3, r9
 800bb5c:	f7f4 fb8c 	bl	8000278 <__aeabi_dsub>
 800bb60:	460b      	mov	r3, r1
 800bb62:	4602      	mov	r2, r0
 800bb64:	493a      	ldr	r1, [pc, #232]	; (800bc50 <__ieee754_pow+0xa48>)
 800bb66:	2000      	movs	r0, #0
 800bb68:	f7f4 fb86 	bl	8000278 <__aeabi_dsub>
 800bb6c:	ec41 0b10 	vmov	d0, r0, r1
 800bb70:	ee10 3a90 	vmov	r3, s1
 800bb74:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800bb78:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800bb7c:	da2b      	bge.n	800bbd6 <__ieee754_pow+0x9ce>
 800bb7e:	4650      	mov	r0, sl
 800bb80:	f000 f966 	bl	800be50 <scalbn>
 800bb84:	ec51 0b10 	vmov	r0, r1, d0
 800bb88:	ec53 2b18 	vmov	r2, r3, d8
 800bb8c:	f7ff bbed 	b.w	800b36a <__ieee754_pow+0x162>
 800bb90:	4b30      	ldr	r3, [pc, #192]	; (800bc54 <__ieee754_pow+0xa4c>)
 800bb92:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800bb96:	429e      	cmp	r6, r3
 800bb98:	f77f af0c 	ble.w	800b9b4 <__ieee754_pow+0x7ac>
 800bb9c:	4b2e      	ldr	r3, [pc, #184]	; (800bc58 <__ieee754_pow+0xa50>)
 800bb9e:	440b      	add	r3, r1
 800bba0:	4303      	orrs	r3, r0
 800bba2:	d009      	beq.n	800bbb8 <__ieee754_pow+0x9b0>
 800bba4:	ec51 0b18 	vmov	r0, r1, d8
 800bba8:	2200      	movs	r2, #0
 800bbaa:	2300      	movs	r3, #0
 800bbac:	f7f4 ff8e 	bl	8000acc <__aeabi_dcmplt>
 800bbb0:	3800      	subs	r0, #0
 800bbb2:	bf18      	it	ne
 800bbb4:	2001      	movne	r0, #1
 800bbb6:	e447      	b.n	800b448 <__ieee754_pow+0x240>
 800bbb8:	4622      	mov	r2, r4
 800bbba:	462b      	mov	r3, r5
 800bbbc:	f7f4 fb5c 	bl	8000278 <__aeabi_dsub>
 800bbc0:	4642      	mov	r2, r8
 800bbc2:	464b      	mov	r3, r9
 800bbc4:	f7f4 ff96 	bl	8000af4 <__aeabi_dcmpge>
 800bbc8:	2800      	cmp	r0, #0
 800bbca:	f43f aef3 	beq.w	800b9b4 <__ieee754_pow+0x7ac>
 800bbce:	e7e9      	b.n	800bba4 <__ieee754_pow+0x99c>
 800bbd0:	f04f 0a00 	mov.w	sl, #0
 800bbd4:	e71a      	b.n	800ba0c <__ieee754_pow+0x804>
 800bbd6:	ec51 0b10 	vmov	r0, r1, d0
 800bbda:	4619      	mov	r1, r3
 800bbdc:	e7d4      	b.n	800bb88 <__ieee754_pow+0x980>
 800bbde:	491c      	ldr	r1, [pc, #112]	; (800bc50 <__ieee754_pow+0xa48>)
 800bbe0:	2000      	movs	r0, #0
 800bbe2:	f7ff bb30 	b.w	800b246 <__ieee754_pow+0x3e>
 800bbe6:	2000      	movs	r0, #0
 800bbe8:	2100      	movs	r1, #0
 800bbea:	f7ff bb2c 	b.w	800b246 <__ieee754_pow+0x3e>
 800bbee:	4630      	mov	r0, r6
 800bbf0:	4639      	mov	r1, r7
 800bbf2:	f7ff bb28 	b.w	800b246 <__ieee754_pow+0x3e>
 800bbf6:	9204      	str	r2, [sp, #16]
 800bbf8:	f7ff bb7a 	b.w	800b2f0 <__ieee754_pow+0xe8>
 800bbfc:	2300      	movs	r3, #0
 800bbfe:	f7ff bb64 	b.w	800b2ca <__ieee754_pow+0xc2>
 800bc02:	bf00      	nop
 800bc04:	f3af 8000 	nop.w
 800bc08:	00000000 	.word	0x00000000
 800bc0c:	3fe62e43 	.word	0x3fe62e43
 800bc10:	fefa39ef 	.word	0xfefa39ef
 800bc14:	3fe62e42 	.word	0x3fe62e42
 800bc18:	0ca86c39 	.word	0x0ca86c39
 800bc1c:	be205c61 	.word	0xbe205c61
 800bc20:	72bea4d0 	.word	0x72bea4d0
 800bc24:	3e663769 	.word	0x3e663769
 800bc28:	c5d26bf1 	.word	0xc5d26bf1
 800bc2c:	3ebbbd41 	.word	0x3ebbbd41
 800bc30:	af25de2c 	.word	0xaf25de2c
 800bc34:	3f11566a 	.word	0x3f11566a
 800bc38:	16bebd93 	.word	0x16bebd93
 800bc3c:	3f66c16c 	.word	0x3f66c16c
 800bc40:	5555553e 	.word	0x5555553e
 800bc44:	3fc55555 	.word	0x3fc55555
 800bc48:	3fe00000 	.word	0x3fe00000
 800bc4c:	000fffff 	.word	0x000fffff
 800bc50:	3ff00000 	.word	0x3ff00000
 800bc54:	4090cbff 	.word	0x4090cbff
 800bc58:	3f6f3400 	.word	0x3f6f3400
 800bc5c:	652b82fe 	.word	0x652b82fe
 800bc60:	3c971547 	.word	0x3c971547

0800bc64 <__ieee754_sqrt>:
 800bc64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bc68:	ec55 4b10 	vmov	r4, r5, d0
 800bc6c:	4e55      	ldr	r6, [pc, #340]	; (800bdc4 <__ieee754_sqrt+0x160>)
 800bc6e:	43ae      	bics	r6, r5
 800bc70:	ee10 0a10 	vmov	r0, s0
 800bc74:	ee10 3a10 	vmov	r3, s0
 800bc78:	462a      	mov	r2, r5
 800bc7a:	4629      	mov	r1, r5
 800bc7c:	d110      	bne.n	800bca0 <__ieee754_sqrt+0x3c>
 800bc7e:	ee10 2a10 	vmov	r2, s0
 800bc82:	462b      	mov	r3, r5
 800bc84:	f7f4 fcb0 	bl	80005e8 <__aeabi_dmul>
 800bc88:	4602      	mov	r2, r0
 800bc8a:	460b      	mov	r3, r1
 800bc8c:	4620      	mov	r0, r4
 800bc8e:	4629      	mov	r1, r5
 800bc90:	f7f4 faf4 	bl	800027c <__adddf3>
 800bc94:	4604      	mov	r4, r0
 800bc96:	460d      	mov	r5, r1
 800bc98:	ec45 4b10 	vmov	d0, r4, r5
 800bc9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bca0:	2d00      	cmp	r5, #0
 800bca2:	dc10      	bgt.n	800bcc6 <__ieee754_sqrt+0x62>
 800bca4:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800bca8:	4330      	orrs	r0, r6
 800bcaa:	d0f5      	beq.n	800bc98 <__ieee754_sqrt+0x34>
 800bcac:	b15d      	cbz	r5, 800bcc6 <__ieee754_sqrt+0x62>
 800bcae:	ee10 2a10 	vmov	r2, s0
 800bcb2:	462b      	mov	r3, r5
 800bcb4:	ee10 0a10 	vmov	r0, s0
 800bcb8:	f7f4 fade 	bl	8000278 <__aeabi_dsub>
 800bcbc:	4602      	mov	r2, r0
 800bcbe:	460b      	mov	r3, r1
 800bcc0:	f7f4 fdbc 	bl	800083c <__aeabi_ddiv>
 800bcc4:	e7e6      	b.n	800bc94 <__ieee754_sqrt+0x30>
 800bcc6:	1512      	asrs	r2, r2, #20
 800bcc8:	d074      	beq.n	800bdb4 <__ieee754_sqrt+0x150>
 800bcca:	07d4      	lsls	r4, r2, #31
 800bccc:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800bcd0:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 800bcd4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800bcd8:	bf5e      	ittt	pl
 800bcda:	0fda      	lsrpl	r2, r3, #31
 800bcdc:	005b      	lslpl	r3, r3, #1
 800bcde:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 800bce2:	2400      	movs	r4, #0
 800bce4:	0fda      	lsrs	r2, r3, #31
 800bce6:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 800bcea:	107f      	asrs	r7, r7, #1
 800bcec:	005b      	lsls	r3, r3, #1
 800bcee:	2516      	movs	r5, #22
 800bcf0:	4620      	mov	r0, r4
 800bcf2:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800bcf6:	1886      	adds	r6, r0, r2
 800bcf8:	428e      	cmp	r6, r1
 800bcfa:	bfde      	ittt	le
 800bcfc:	1b89      	suble	r1, r1, r6
 800bcfe:	18b0      	addle	r0, r6, r2
 800bd00:	18a4      	addle	r4, r4, r2
 800bd02:	0049      	lsls	r1, r1, #1
 800bd04:	3d01      	subs	r5, #1
 800bd06:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 800bd0a:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800bd0e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800bd12:	d1f0      	bne.n	800bcf6 <__ieee754_sqrt+0x92>
 800bd14:	462a      	mov	r2, r5
 800bd16:	f04f 0e20 	mov.w	lr, #32
 800bd1a:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800bd1e:	4281      	cmp	r1, r0
 800bd20:	eb06 0c05 	add.w	ip, r6, r5
 800bd24:	dc02      	bgt.n	800bd2c <__ieee754_sqrt+0xc8>
 800bd26:	d113      	bne.n	800bd50 <__ieee754_sqrt+0xec>
 800bd28:	459c      	cmp	ip, r3
 800bd2a:	d811      	bhi.n	800bd50 <__ieee754_sqrt+0xec>
 800bd2c:	f1bc 0f00 	cmp.w	ip, #0
 800bd30:	eb0c 0506 	add.w	r5, ip, r6
 800bd34:	da43      	bge.n	800bdbe <__ieee754_sqrt+0x15a>
 800bd36:	2d00      	cmp	r5, #0
 800bd38:	db41      	blt.n	800bdbe <__ieee754_sqrt+0x15a>
 800bd3a:	f100 0801 	add.w	r8, r0, #1
 800bd3e:	1a09      	subs	r1, r1, r0
 800bd40:	459c      	cmp	ip, r3
 800bd42:	bf88      	it	hi
 800bd44:	f101 31ff 	addhi.w	r1, r1, #4294967295
 800bd48:	eba3 030c 	sub.w	r3, r3, ip
 800bd4c:	4432      	add	r2, r6
 800bd4e:	4640      	mov	r0, r8
 800bd50:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 800bd54:	f1be 0e01 	subs.w	lr, lr, #1
 800bd58:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 800bd5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800bd60:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800bd64:	d1db      	bne.n	800bd1e <__ieee754_sqrt+0xba>
 800bd66:	430b      	orrs	r3, r1
 800bd68:	d006      	beq.n	800bd78 <__ieee754_sqrt+0x114>
 800bd6a:	1c50      	adds	r0, r2, #1
 800bd6c:	bf13      	iteet	ne
 800bd6e:	3201      	addne	r2, #1
 800bd70:	3401      	addeq	r4, #1
 800bd72:	4672      	moveq	r2, lr
 800bd74:	f022 0201 	bicne.w	r2, r2, #1
 800bd78:	1063      	asrs	r3, r4, #1
 800bd7a:	0852      	lsrs	r2, r2, #1
 800bd7c:	07e1      	lsls	r1, r4, #31
 800bd7e:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800bd82:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800bd86:	bf48      	it	mi
 800bd88:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800bd8c:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 800bd90:	4614      	mov	r4, r2
 800bd92:	e781      	b.n	800bc98 <__ieee754_sqrt+0x34>
 800bd94:	0ad9      	lsrs	r1, r3, #11
 800bd96:	3815      	subs	r0, #21
 800bd98:	055b      	lsls	r3, r3, #21
 800bd9a:	2900      	cmp	r1, #0
 800bd9c:	d0fa      	beq.n	800bd94 <__ieee754_sqrt+0x130>
 800bd9e:	02cd      	lsls	r5, r1, #11
 800bda0:	d50a      	bpl.n	800bdb8 <__ieee754_sqrt+0x154>
 800bda2:	f1c2 0420 	rsb	r4, r2, #32
 800bda6:	fa23 f404 	lsr.w	r4, r3, r4
 800bdaa:	1e55      	subs	r5, r2, #1
 800bdac:	4093      	lsls	r3, r2
 800bdae:	4321      	orrs	r1, r4
 800bdb0:	1b42      	subs	r2, r0, r5
 800bdb2:	e78a      	b.n	800bcca <__ieee754_sqrt+0x66>
 800bdb4:	4610      	mov	r0, r2
 800bdb6:	e7f0      	b.n	800bd9a <__ieee754_sqrt+0x136>
 800bdb8:	0049      	lsls	r1, r1, #1
 800bdba:	3201      	adds	r2, #1
 800bdbc:	e7ef      	b.n	800bd9e <__ieee754_sqrt+0x13a>
 800bdbe:	4680      	mov	r8, r0
 800bdc0:	e7bd      	b.n	800bd3e <__ieee754_sqrt+0xda>
 800bdc2:	bf00      	nop
 800bdc4:	7ff00000 	.word	0x7ff00000

0800bdc8 <with_errno>:
 800bdc8:	b570      	push	{r4, r5, r6, lr}
 800bdca:	4604      	mov	r4, r0
 800bdcc:	460d      	mov	r5, r1
 800bdce:	4616      	mov	r6, r2
 800bdd0:	f7fe f82c 	bl	8009e2c <__errno>
 800bdd4:	4629      	mov	r1, r5
 800bdd6:	6006      	str	r6, [r0, #0]
 800bdd8:	4620      	mov	r0, r4
 800bdda:	bd70      	pop	{r4, r5, r6, pc}

0800bddc <xflow>:
 800bddc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800bdde:	4614      	mov	r4, r2
 800bde0:	461d      	mov	r5, r3
 800bde2:	b108      	cbz	r0, 800bde8 <xflow+0xc>
 800bde4:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800bde8:	e9cd 2300 	strd	r2, r3, [sp]
 800bdec:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bdf0:	4620      	mov	r0, r4
 800bdf2:	4629      	mov	r1, r5
 800bdf4:	f7f4 fbf8 	bl	80005e8 <__aeabi_dmul>
 800bdf8:	2222      	movs	r2, #34	; 0x22
 800bdfa:	b003      	add	sp, #12
 800bdfc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800be00:	f7ff bfe2 	b.w	800bdc8 <with_errno>

0800be04 <__math_uflow>:
 800be04:	b508      	push	{r3, lr}
 800be06:	2200      	movs	r2, #0
 800be08:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800be0c:	f7ff ffe6 	bl	800bddc <xflow>
 800be10:	ec41 0b10 	vmov	d0, r0, r1
 800be14:	bd08      	pop	{r3, pc}

0800be16 <__math_oflow>:
 800be16:	b508      	push	{r3, lr}
 800be18:	2200      	movs	r2, #0
 800be1a:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800be1e:	f7ff ffdd 	bl	800bddc <xflow>
 800be22:	ec41 0b10 	vmov	d0, r0, r1
 800be26:	bd08      	pop	{r3, pc}

0800be28 <fabs>:
 800be28:	ec51 0b10 	vmov	r0, r1, d0
 800be2c:	ee10 2a10 	vmov	r2, s0
 800be30:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800be34:	ec43 2b10 	vmov	d0, r2, r3
 800be38:	4770      	bx	lr

0800be3a <finite>:
 800be3a:	b082      	sub	sp, #8
 800be3c:	ed8d 0b00 	vstr	d0, [sp]
 800be40:	9801      	ldr	r0, [sp, #4]
 800be42:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800be46:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800be4a:	0fc0      	lsrs	r0, r0, #31
 800be4c:	b002      	add	sp, #8
 800be4e:	4770      	bx	lr

0800be50 <scalbn>:
 800be50:	b570      	push	{r4, r5, r6, lr}
 800be52:	ec55 4b10 	vmov	r4, r5, d0
 800be56:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800be5a:	4606      	mov	r6, r0
 800be5c:	462b      	mov	r3, r5
 800be5e:	b99a      	cbnz	r2, 800be88 <scalbn+0x38>
 800be60:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800be64:	4323      	orrs	r3, r4
 800be66:	d036      	beq.n	800bed6 <scalbn+0x86>
 800be68:	4b39      	ldr	r3, [pc, #228]	; (800bf50 <scalbn+0x100>)
 800be6a:	4629      	mov	r1, r5
 800be6c:	ee10 0a10 	vmov	r0, s0
 800be70:	2200      	movs	r2, #0
 800be72:	f7f4 fbb9 	bl	80005e8 <__aeabi_dmul>
 800be76:	4b37      	ldr	r3, [pc, #220]	; (800bf54 <scalbn+0x104>)
 800be78:	429e      	cmp	r6, r3
 800be7a:	4604      	mov	r4, r0
 800be7c:	460d      	mov	r5, r1
 800be7e:	da10      	bge.n	800bea2 <scalbn+0x52>
 800be80:	a32b      	add	r3, pc, #172	; (adr r3, 800bf30 <scalbn+0xe0>)
 800be82:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be86:	e03a      	b.n	800befe <scalbn+0xae>
 800be88:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800be8c:	428a      	cmp	r2, r1
 800be8e:	d10c      	bne.n	800beaa <scalbn+0x5a>
 800be90:	ee10 2a10 	vmov	r2, s0
 800be94:	4620      	mov	r0, r4
 800be96:	4629      	mov	r1, r5
 800be98:	f7f4 f9f0 	bl	800027c <__adddf3>
 800be9c:	4604      	mov	r4, r0
 800be9e:	460d      	mov	r5, r1
 800bea0:	e019      	b.n	800bed6 <scalbn+0x86>
 800bea2:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800bea6:	460b      	mov	r3, r1
 800bea8:	3a36      	subs	r2, #54	; 0x36
 800beaa:	4432      	add	r2, r6
 800beac:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800beb0:	428a      	cmp	r2, r1
 800beb2:	dd08      	ble.n	800bec6 <scalbn+0x76>
 800beb4:	2d00      	cmp	r5, #0
 800beb6:	a120      	add	r1, pc, #128	; (adr r1, 800bf38 <scalbn+0xe8>)
 800beb8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bebc:	da1c      	bge.n	800bef8 <scalbn+0xa8>
 800bebe:	a120      	add	r1, pc, #128	; (adr r1, 800bf40 <scalbn+0xf0>)
 800bec0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bec4:	e018      	b.n	800bef8 <scalbn+0xa8>
 800bec6:	2a00      	cmp	r2, #0
 800bec8:	dd08      	ble.n	800bedc <scalbn+0x8c>
 800beca:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800bece:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800bed2:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800bed6:	ec45 4b10 	vmov	d0, r4, r5
 800beda:	bd70      	pop	{r4, r5, r6, pc}
 800bedc:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800bee0:	da19      	bge.n	800bf16 <scalbn+0xc6>
 800bee2:	f24c 3350 	movw	r3, #50000	; 0xc350
 800bee6:	429e      	cmp	r6, r3
 800bee8:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800beec:	dd0a      	ble.n	800bf04 <scalbn+0xb4>
 800beee:	a112      	add	r1, pc, #72	; (adr r1, 800bf38 <scalbn+0xe8>)
 800bef0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bef4:	2b00      	cmp	r3, #0
 800bef6:	d1e2      	bne.n	800bebe <scalbn+0x6e>
 800bef8:	a30f      	add	r3, pc, #60	; (adr r3, 800bf38 <scalbn+0xe8>)
 800befa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800befe:	f7f4 fb73 	bl	80005e8 <__aeabi_dmul>
 800bf02:	e7cb      	b.n	800be9c <scalbn+0x4c>
 800bf04:	a10a      	add	r1, pc, #40	; (adr r1, 800bf30 <scalbn+0xe0>)
 800bf06:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bf0a:	2b00      	cmp	r3, #0
 800bf0c:	d0b8      	beq.n	800be80 <scalbn+0x30>
 800bf0e:	a10e      	add	r1, pc, #56	; (adr r1, 800bf48 <scalbn+0xf8>)
 800bf10:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bf14:	e7b4      	b.n	800be80 <scalbn+0x30>
 800bf16:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800bf1a:	3236      	adds	r2, #54	; 0x36
 800bf1c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800bf20:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800bf24:	4620      	mov	r0, r4
 800bf26:	4b0c      	ldr	r3, [pc, #48]	; (800bf58 <scalbn+0x108>)
 800bf28:	2200      	movs	r2, #0
 800bf2a:	e7e8      	b.n	800befe <scalbn+0xae>
 800bf2c:	f3af 8000 	nop.w
 800bf30:	c2f8f359 	.word	0xc2f8f359
 800bf34:	01a56e1f 	.word	0x01a56e1f
 800bf38:	8800759c 	.word	0x8800759c
 800bf3c:	7e37e43c 	.word	0x7e37e43c
 800bf40:	8800759c 	.word	0x8800759c
 800bf44:	fe37e43c 	.word	0xfe37e43c
 800bf48:	c2f8f359 	.word	0xc2f8f359
 800bf4c:	81a56e1f 	.word	0x81a56e1f
 800bf50:	43500000 	.word	0x43500000
 800bf54:	ffff3cb0 	.word	0xffff3cb0
 800bf58:	3c900000 	.word	0x3c900000

0800bf5c <_init>:
 800bf5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bf5e:	bf00      	nop
 800bf60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bf62:	bc08      	pop	{r3}
 800bf64:	469e      	mov	lr, r3
 800bf66:	4770      	bx	lr

0800bf68 <_fini>:
 800bf68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bf6a:	bf00      	nop
 800bf6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bf6e:	bc08      	pop	{r3}
 800bf70:	469e      	mov	lr, r3
 800bf72:	4770      	bx	lr
