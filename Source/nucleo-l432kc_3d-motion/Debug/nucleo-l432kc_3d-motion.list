
nucleo-l432kc_3d-motion.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000079d8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000210  08007b68  08007b68  00017b68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007d78  08007d78  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08007d78  08007d78  00017d78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007d80  08007d80  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007d80  08007d80  00017d80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007d84  08007d84  00017d84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08007d88  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002f18  20000074  08007dfc  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20002f8c  08007dfc  00022f8c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00022ca3  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000043ef  00000000  00000000  00042d47  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001b00  00000000  00000000  00047138  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001960  00000000  00000000  00048c38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00005ebc  00000000  00000000  0004a598  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00021589  00000000  00000000  00050454  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000da4de  00000000  00000000  000719dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0014bebb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007654  00000000  00000000  0014bf0c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007b50 	.word	0x08007b50

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	08007b50 	.word	0x08007b50

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <error_handler>:
volatile BOOL EC_DATA_AVAIL = FALSE;	// EC data available for read flag

/*
 * TODO: Insert Doxy here
 */
void error_handler(char *str, UINT16 offset, UINT16 errval) {
 8000584:	b580      	push	{r7, lr}
 8000586:	b096      	sub	sp, #88	; 0x58
 8000588:	af02      	add	r7, sp, #8
 800058a:	60f8      	str	r0, [r7, #12]
 800058c:	60b9      	str	r1, [r7, #8]
 800058e:	607a      	str	r2, [r7, #4]
	char err_buf[64];
	sprintf(err_buf, "***Error in function: %s:%02X errval=0x%X*** \r\n", str, offset, errval);
 8000590:	f107 0010 	add.w	r0, r7, #16
 8000594:	687b      	ldr	r3, [r7, #4]
 8000596:	9300      	str	r3, [sp, #0]
 8000598:	68bb      	ldr	r3, [r7, #8]
 800059a:	68fa      	ldr	r2, [r7, #12]
 800059c:	490b      	ldr	r1, [pc, #44]	; (80005cc <error_handler+0x48>)
 800059e:	f006 ff1d 	bl	80073dc <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*) err_buf, strlen(err_buf), HAL_MAX_DELAY);
 80005a2:	f107 0310 	add.w	r3, r7, #16
 80005a6:	4618      	mov	r0, r3
 80005a8:	f7ff fe12 	bl	80001d0 <strlen>
 80005ac:	4603      	mov	r3, r0
 80005ae:	b29a      	uxth	r2, r3
 80005b0:	f107 0110 	add.w	r1, r7, #16
 80005b4:	f04f 33ff 	mov.w	r3, #4294967295
 80005b8:	4805      	ldr	r0, [pc, #20]	; (80005d0 <error_handler+0x4c>)
 80005ba:	f004 f8c9 	bl	8004750 <HAL_UART_Transmit>
	StopI2CTimer();
 80005be:	f000 f87d 	bl	80006bc <StopI2CTimer>
	// I2C_Stop()
}
 80005c2:	bf00      	nop
 80005c4:	3750      	adds	r7, #80	; 0x50
 80005c6:	46bd      	mov	sp, r7
 80005c8:	bd80      	pop	{r7, pc}
 80005ca:	bf00      	nop
 80005cc:	08007b68 	.word	0x08007b68
 80005d0:	20001094 	.word	0x20001094

080005d4 <i2c_cmd_WrRd>:
 * @param ucData_rd Pointer to data buffer from slave
 * @param bAdjust Use 1st 2 bytes returned as new length (=TRUE)
 * @return I2C_SUCCESS(=0), I2C_BUF_OVRFLO(=0x22)
 */
UINT8 i2c_cmd_WrRd(UINT8 ucCmd, UINT8 ucBytes_wr, UINT8 *ucData_wr, UINT16 usBytes_rd, UINT8 *ucData_rd, BOOL bAdjust)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b086      	sub	sp, #24
 80005d8:	af02      	add	r7, sp, #8
 80005da:	60ba      	str	r2, [r7, #8]
 80005dc:	607b      	str	r3, [r7, #4]
 80005de:	4603      	mov	r3, r0
 80005e0:	73fb      	strb	r3, [r7, #15]
 80005e2:	460b      	mov	r3, r1
 80005e4:	73bb      	strb	r3, [r7, #14]
	if (ucBytes_wr > BUF_150)
 80005e6:	7bbb      	ldrb	r3, [r7, #14]
 80005e8:	2b96      	cmp	r3, #150	; 0x96
 80005ea:	d901      	bls.n	80005f0 <i2c_cmd_WrRd+0x1c>
	{
		return I2C_BUF_OVRFLO;
 80005ec:	2322      	movs	r3, #34	; 0x22
 80005ee:	e05c      	b.n	80006aa <i2c_cmd_WrRd+0xd6>
	}

	StartI2CTimer();
 80005f0:	f000 f870 	bl	80006d4 <StartI2CTimer>

	switch (ucCmd)
 80005f4:	7bfb      	ldrb	r3, [r7, #15]
 80005f6:	2b03      	cmp	r3, #3
 80005f8:	d02a      	beq.n	8000650 <i2c_cmd_WrRd+0x7c>
 80005fa:	2b03      	cmp	r3, #3
 80005fc:	dc4b      	bgt.n	8000696 <i2c_cmd_WrRd+0xc2>
 80005fe:	2b01      	cmp	r3, #1
 8000600:	d002      	beq.n	8000608 <i2c_cmd_WrRd+0x34>
 8000602:	2b02      	cmp	r3, #2
 8000604:	d012      	beq.n	800062c <i2c_cmd_WrRd+0x58>
			}
			break;

		default:
			/* You shall not be here >.< */
			break;
 8000606:	e046      	b.n	8000696 <i2c_cmd_WrRd+0xc2>
			if (HAL_I2C_Master_Transmit(&hi2c1, (uint16_t) SLAVE_ADDR, ucData_wr, ucBytes_wr, 100) != HAL_OK)
 8000608:	7bbb      	ldrb	r3, [r7, #14]
 800060a:	b29b      	uxth	r3, r3
 800060c:	2264      	movs	r2, #100	; 0x64
 800060e:	9200      	str	r2, [sp, #0]
 8000610:	68ba      	ldr	r2, [r7, #8]
 8000612:	2180      	movs	r1, #128	; 0x80
 8000614:	4827      	ldr	r0, [pc, #156]	; (80006b4 <i2c_cmd_WrRd+0xe0>)
 8000616:	f001 fee3 	bl	80023e0 <HAL_I2C_Master_Transmit>
 800061a:	4603      	mov	r3, r0
 800061c:	2b00      	cmp	r3, #0
 800061e:	d03c      	beq.n	800069a <i2c_cmd_WrRd+0xc6>
				error_handler("i2c ", 0, I2C_ERROR);
 8000620:	2221      	movs	r2, #33	; 0x21
 8000622:	2100      	movs	r1, #0
 8000624:	4824      	ldr	r0, [pc, #144]	; (80006b8 <i2c_cmd_WrRd+0xe4>)
 8000626:	f7ff ffad 	bl	8000584 <error_handler>
			break;
 800062a:	e036      	b.n	800069a <i2c_cmd_WrRd+0xc6>
			if (HAL_I2C_Master_Receive(&hi2c1, (uint16_t) SLAVE_ADDR, ucData_rd, usBytes_rd, 100) != HAL_OK)
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	b29b      	uxth	r3, r3
 8000630:	2264      	movs	r2, #100	; 0x64
 8000632:	9200      	str	r2, [sp, #0]
 8000634:	69ba      	ldr	r2, [r7, #24]
 8000636:	2180      	movs	r1, #128	; 0x80
 8000638:	481e      	ldr	r0, [pc, #120]	; (80006b4 <i2c_cmd_WrRd+0xe0>)
 800063a:	f001 ffc5 	bl	80025c8 <HAL_I2C_Master_Receive>
 800063e:	4603      	mov	r3, r0
 8000640:	2b00      	cmp	r3, #0
 8000642:	d02c      	beq.n	800069e <i2c_cmd_WrRd+0xca>
				error_handler("i2c ", 0, I2C_ERROR);
 8000644:	2221      	movs	r2, #33	; 0x21
 8000646:	2100      	movs	r1, #0
 8000648:	481b      	ldr	r0, [pc, #108]	; (80006b8 <i2c_cmd_WrRd+0xe4>)
 800064a:	f7ff ff9b 	bl	8000584 <error_handler>
			break;
 800064e:	e026      	b.n	800069e <i2c_cmd_WrRd+0xca>
			if (HAL_I2C_Master_Transmit(&hi2c1, (uint16_t) SLAVE_ADDR, ucData_wr, ucBytes_wr, 100) != HAL_OK)
 8000650:	7bbb      	ldrb	r3, [r7, #14]
 8000652:	b29b      	uxth	r3, r3
 8000654:	2264      	movs	r2, #100	; 0x64
 8000656:	9200      	str	r2, [sp, #0]
 8000658:	68ba      	ldr	r2, [r7, #8]
 800065a:	2180      	movs	r1, #128	; 0x80
 800065c:	4815      	ldr	r0, [pc, #84]	; (80006b4 <i2c_cmd_WrRd+0xe0>)
 800065e:	f001 febf 	bl	80023e0 <HAL_I2C_Master_Transmit>
 8000662:	4603      	mov	r3, r0
 8000664:	2b00      	cmp	r3, #0
 8000666:	d004      	beq.n	8000672 <i2c_cmd_WrRd+0x9e>
				error_handler("i2c ", 0, I2C_ERROR);
 8000668:	2221      	movs	r2, #33	; 0x21
 800066a:	2100      	movs	r1, #0
 800066c:	4812      	ldr	r0, [pc, #72]	; (80006b8 <i2c_cmd_WrRd+0xe4>)
 800066e:	f7ff ff89 	bl	8000584 <error_handler>
			if (HAL_I2C_Master_Receive(&hi2c1, (uint16_t) SLAVE_ADDR, ucData_rd, usBytes_rd, 100) != HAL_OK)
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	b29b      	uxth	r3, r3
 8000676:	2264      	movs	r2, #100	; 0x64
 8000678:	9200      	str	r2, [sp, #0]
 800067a:	69ba      	ldr	r2, [r7, #24]
 800067c:	2180      	movs	r1, #128	; 0x80
 800067e:	480d      	ldr	r0, [pc, #52]	; (80006b4 <i2c_cmd_WrRd+0xe0>)
 8000680:	f001 ffa2 	bl	80025c8 <HAL_I2C_Master_Receive>
 8000684:	4603      	mov	r3, r0
 8000686:	2b00      	cmp	r3, #0
 8000688:	d00b      	beq.n	80006a2 <i2c_cmd_WrRd+0xce>
				error_handler("i2c ", 0, I2C_ERROR);
 800068a:	2221      	movs	r2, #33	; 0x21
 800068c:	2100      	movs	r1, #0
 800068e:	480a      	ldr	r0, [pc, #40]	; (80006b8 <i2c_cmd_WrRd+0xe4>)
 8000690:	f7ff ff78 	bl	8000584 <error_handler>
			break;
 8000694:	e005      	b.n	80006a2 <i2c_cmd_WrRd+0xce>
			break;
 8000696:	bf00      	nop
 8000698:	e004      	b.n	80006a4 <i2c_cmd_WrRd+0xd0>
			break;
 800069a:	bf00      	nop
 800069c:	e002      	b.n	80006a4 <i2c_cmd_WrRd+0xd0>
			break;
 800069e:	bf00      	nop
 80006a0:	e000      	b.n	80006a4 <i2c_cmd_WrRd+0xd0>
			break;
 80006a2:	bf00      	nop
	}

	/* TODO: Check if timer has already been stopped in error handler */
	StopI2CTimer();
 80006a4:	f000 f80a 	bl	80006bc <StopI2CTimer>

	/* TODO: Where's this defined and what if error occurs? */
	return I2C_SUCCESS;
 80006a8:	2300      	movs	r3, #0
}
 80006aa:	4618      	mov	r0, r3
 80006ac:	3710      	adds	r7, #16
 80006ae:	46bd      	mov	sp, r7
 80006b0:	bd80      	pop	{r7, pc}
 80006b2:	bf00      	nop
 80006b4:	20001040 	.word	0x20001040
 80006b8:	08007b98 	.word	0x08007b98

080006bc <StopI2CTimer>:
 * Within the ISR the Counter Value gets incremented by 50.
 * On 250ms, the i2c connection send an error.
 */

void StopI2CTimer()
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	af00      	add	r7, sp, #0
  osTimerStop(i2cTimerHandle);
 80006c0:	4b03      	ldr	r3, [pc, #12]	; (80006d0 <StopI2CTimer+0x14>)
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	4618      	mov	r0, r3
 80006c6:	f004 fe53 	bl	8005370 <osTimerStop>
}
 80006ca:	bf00      	nop
 80006cc:	bd80      	pop	{r7, pc}
 80006ce:	bf00      	nop
 80006d0:	20001128 	.word	0x20001128

080006d4 <StartI2CTimer>:

void StartI2CTimer()
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	af00      	add	r7, sp, #0
  /* Reset the Counter Value */
	I2C_TIMEOUT_50MS_CNTR = 0;
 80006d8:	4b05      	ldr	r3, [pc, #20]	; (80006f0 <StartI2CTimer+0x1c>)
 80006da:	2200      	movs	r2, #0
 80006dc:	601a      	str	r2, [r3, #0]

  /* Start the Software Timer and set 50ms as Overflow Value */
  osTimerStart(i2cTimerHandle, 50);
 80006de:	4b05      	ldr	r3, [pc, #20]	; (80006f4 <StartI2CTimer+0x20>)
 80006e0:	681b      	ldr	r3, [r3, #0]
 80006e2:	2132      	movs	r1, #50	; 0x32
 80006e4:	4618      	mov	r0, r3
 80006e6:	f004 fe15 	bl	8005314 <osTimerStart>
}
 80006ea:	bf00      	nop
 80006ec:	bd80      	pop	{r7, pc}
 80006ee:	bf00      	nop
 80006f0:	20000094 	.word	0x20000094
 80006f4:	20001128 	.word	0x20001128

080006f8 <hid_i2c_descriptor_handler>:
* @note        Retrieve either the descriptor or report tables from the SSC7150 device Note: call GET_HID_DESC 1st
* @param ucCmd_req command to execute (GET_HID_DESC/GET_RPT_DESC)
* @return completion_status 0=SUCCESS, 0x10=ID_FAIL, 0x11=HID_DESC_FAIL, 0x12=RPT_DESC_FAIL, 0x14=REP_PARS_FAIL
*/
UINT16 hid_i2c_descriptor_handler(UINT8 ucCmd_req)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b090      	sub	sp, #64	; 0x40
 80006fc:	af02      	add	r7, sp, #8
 80006fe:	4603      	mov	r3, r0
 8000700:	71fb      	strb	r3, [r7, #7]
    UINT8 ucRet = FALSE;
 8000702:	2300      	movs	r3, #0
 8000704:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    UINT8 ucTx_data[BUF_40];                                        // buffer for general writes to i2c slave

    
    switch(ucCmd_req)
 8000708:	79fb      	ldrb	r3, [r7, #7]
 800070a:	2b01      	cmp	r3, #1
 800070c:	d003      	beq.n	8000716 <hid_i2c_descriptor_handler+0x1e>
 800070e:	2b02      	cmp	r3, #2
 8000710:	f000 8095 	beq.w	800083e <hid_i2c_descriptor_handler+0x146>
 8000714:	e0ba      	b.n	800088c <hid_i2c_descriptor_handler+0x194>
    {  
        case GET_HID_DESC:                                          //read the HID Config Descriptor from SSC7150
            ucTx_data[0] = HID_DESC_CMD_LSB;                        // HID descriptor table request is 0x00 01
 8000716:	2301      	movs	r3, #1
 8000718:	733b      	strb	r3, [r7, #12]
            ucTx_data[1] = HID_DESC_CMD_MSB;
 800071a:	2300      	movs	r3, #0
 800071c:	737b      	strb	r3, [r7, #13]

            ucRet = i2c_cmd_WrRd ( WR_RD,                           //read the HID Config Descriptor from SSC7150
 800071e:	f107 020c 	add.w	r2, r7, #12
 8000722:	2300      	movs	r3, #0
 8000724:	9301      	str	r3, [sp, #4]
 8000726:	4b5c      	ldr	r3, [pc, #368]	; (8000898 <hid_i2c_descriptor_handler+0x1a0>)
 8000728:	9300      	str	r3, [sp, #0]
 800072a:	231e      	movs	r3, #30
 800072c:	2102      	movs	r1, #2
 800072e:	2003      	movs	r0, #3
 8000730:	f7ff ff50 	bl	80005d4 <i2c_cmd_WrRd>
 8000734:	4603      	mov	r3, r0
 8000736:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
                                DESC_CMD_LEN,                       //num of cmd bytes
                                ucTx_data,                          //cmd buf 
                                HID_CNFG_LEN,                       //num of bytes to read
                                HID_DESC,                           //recv buf
                                FALSE);                             //flag indicating that we specified the number of bytes to read explicitly
            if (ucRet)
 800073a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800073e:	2b00      	cmp	r3, #0
 8000740:	d001      	beq.n	8000746 <hid_i2c_descriptor_handler+0x4e>
                return HID_DESC_FAIL;                               //read HID Config Descriptor failed
 8000742:	2311      	movs	r3, #17
 8000744:	e0a3      	b.n	800088e <hid_i2c_descriptor_handler+0x196>
            
            HID_FIELD.wHIDDescLen = ( (HID_DESC[1] << BYTE_SHIFT) | HID_DESC[0] );  // As an error check, parse out descriptor table length
 8000746:	4b54      	ldr	r3, [pc, #336]	; (8000898 <hid_i2c_descriptor_handler+0x1a0>)
 8000748:	785b      	ldrb	r3, [r3, #1]
 800074a:	021b      	lsls	r3, r3, #8
 800074c:	4a52      	ldr	r2, [pc, #328]	; (8000898 <hid_i2c_descriptor_handler+0x1a0>)
 800074e:	7812      	ldrb	r2, [r2, #0]
 8000750:	4313      	orrs	r3, r2
 8000752:	461a      	mov	r2, r3
 8000754:	4b51      	ldr	r3, [pc, #324]	; (800089c <hid_i2c_descriptor_handler+0x1a4>)
 8000756:	601a      	str	r2, [r3, #0]
                
            if (HID_FIELD.wHIDDescLen != HID_CNFG_LEN)              // If descriptor table length != 30 there is a problem with the transmission
 8000758:	4b50      	ldr	r3, [pc, #320]	; (800089c <hid_i2c_descriptor_handler+0x1a4>)
 800075a:	681b      	ldr	r3, [r3, #0]
 800075c:	2b1e      	cmp	r3, #30
 800075e:	d001      	beq.n	8000764 <hid_i2c_descriptor_handler+0x6c>
                return HID_DESC_FAIL;
 8000760:	2311      	movs	r3, #17
 8000762:	e094      	b.n	800088e <hid_i2c_descriptor_handler+0x196>
                
            HID_FIELD.wRepDescLen = ( (HID_DESC[5] << BYTE_SHIFT) | HID_DESC[4] );  // Parse out report descriptor length and store in appropriate variable
 8000764:	4b4c      	ldr	r3, [pc, #304]	; (8000898 <hid_i2c_descriptor_handler+0x1a0>)
 8000766:	795b      	ldrb	r3, [r3, #5]
 8000768:	021b      	lsls	r3, r3, #8
 800076a:	4a4b      	ldr	r2, [pc, #300]	; (8000898 <hid_i2c_descriptor_handler+0x1a0>)
 800076c:	7912      	ldrb	r2, [r2, #4]
 800076e:	4313      	orrs	r3, r2
 8000770:	461a      	mov	r2, r3
 8000772:	4b4a      	ldr	r3, [pc, #296]	; (800089c <hid_i2c_descriptor_handler+0x1a4>)
 8000774:	605a      	str	r2, [r3, #4]
                
            if ( !HID_FIELD.wRepDescLen || HID_FIELD.wRepDescLen == 0xFFFF || (HID_FIELD.wRepDescLen > HID_RPT_LEN) ) // Check to see if the report descriptor size is valid
 8000776:	4b49      	ldr	r3, [pc, #292]	; (800089c <hid_i2c_descriptor_handler+0x1a4>)
 8000778:	685b      	ldr	r3, [r3, #4]
 800077a:	2b00      	cmp	r3, #0
 800077c:	d00b      	beq.n	8000796 <hid_i2c_descriptor_handler+0x9e>
 800077e:	4b47      	ldr	r3, [pc, #284]	; (800089c <hid_i2c_descriptor_handler+0x1a4>)
 8000780:	685b      	ldr	r3, [r3, #4]
 8000782:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000786:	4293      	cmp	r3, r2
 8000788:	d005      	beq.n	8000796 <hid_i2c_descriptor_handler+0x9e>
 800078a:	4b44      	ldr	r3, [pc, #272]	; (800089c <hid_i2c_descriptor_handler+0x1a4>)
 800078c:	685b      	ldr	r3, [r3, #4]
 800078e:	f640 52ac 	movw	r2, #3500	; 0xdac
 8000792:	4293      	cmp	r3, r2
 8000794:	d901      	bls.n	800079a <hid_i2c_descriptor_handler+0xa2>
                return HID_DESC_FAIL;
 8000796:	2311      	movs	r3, #17
 8000798:	e079      	b.n	800088e <hid_i2c_descriptor_handler+0x196>
                
            HID_FIELD.wRepDescReg = ( (HID_DESC[6] << BYTE_SHIFT) | HID_DESC[7] ); // Parse out report descriptor register and store in appropriate variable
 800079a:	4b3f      	ldr	r3, [pc, #252]	; (8000898 <hid_i2c_descriptor_handler+0x1a0>)
 800079c:	799b      	ldrb	r3, [r3, #6]
 800079e:	021b      	lsls	r3, r3, #8
 80007a0:	4a3d      	ldr	r2, [pc, #244]	; (8000898 <hid_i2c_descriptor_handler+0x1a0>)
 80007a2:	79d2      	ldrb	r2, [r2, #7]
 80007a4:	4313      	orrs	r3, r2
 80007a6:	461a      	mov	r2, r3
 80007a8:	4b3c      	ldr	r3, [pc, #240]	; (800089c <hid_i2c_descriptor_handler+0x1a4>)
 80007aa:	609a      	str	r2, [r3, #8]

            HID_FIELD.wCmdReg = ( (HID_DESC[17] << BYTE_SHIFT) | HID_DESC[16] ); // Parse out command register and store in appropriate variable
 80007ac:	4b3a      	ldr	r3, [pc, #232]	; (8000898 <hid_i2c_descriptor_handler+0x1a0>)
 80007ae:	7c5b      	ldrb	r3, [r3, #17]
 80007b0:	021b      	lsls	r3, r3, #8
 80007b2:	4a39      	ldr	r2, [pc, #228]	; (8000898 <hid_i2c_descriptor_handler+0x1a0>)
 80007b4:	7c12      	ldrb	r2, [r2, #16]
 80007b6:	4313      	orrs	r3, r2
 80007b8:	461a      	mov	r2, r3
 80007ba:	4b38      	ldr	r3, [pc, #224]	; (800089c <hid_i2c_descriptor_handler+0x1a4>)
 80007bc:	611a      	str	r2, [r3, #16]

            HID_FIELD.wDatReg = ( (HID_DESC[19] << BYTE_SHIFT) | HID_DESC[18] ); // Parse out data register and store in appropriate variable
 80007be:	4b36      	ldr	r3, [pc, #216]	; (8000898 <hid_i2c_descriptor_handler+0x1a0>)
 80007c0:	7cdb      	ldrb	r3, [r3, #19]
 80007c2:	021b      	lsls	r3, r3, #8
 80007c4:	4a34      	ldr	r2, [pc, #208]	; (8000898 <hid_i2c_descriptor_handler+0x1a0>)
 80007c6:	7c92      	ldrb	r2, [r2, #18]
 80007c8:	4313      	orrs	r3, r2
 80007ca:	461a      	mov	r2, r3
 80007cc:	4b33      	ldr	r3, [pc, #204]	; (800089c <hid_i2c_descriptor_handler+0x1a4>)
 80007ce:	615a      	str	r2, [r3, #20]

            if ( !( HID_FIELD.wVenID = ( (HID_DESC[21] << BYTE_SHIFT) | HID_DESC[20] )) ) // Parse out vendor ID and store in appropriate variable
 80007d0:	4b31      	ldr	r3, [pc, #196]	; (8000898 <hid_i2c_descriptor_handler+0x1a0>)
 80007d2:	7d5b      	ldrb	r3, [r3, #21]
 80007d4:	021b      	lsls	r3, r3, #8
 80007d6:	4a30      	ldr	r2, [pc, #192]	; (8000898 <hid_i2c_descriptor_handler+0x1a0>)
 80007d8:	7d12      	ldrb	r2, [r2, #20]
 80007da:	4313      	orrs	r3, r2
 80007dc:	461a      	mov	r2, r3
 80007de:	4b2f      	ldr	r3, [pc, #188]	; (800089c <hid_i2c_descriptor_handler+0x1a4>)
 80007e0:	619a      	str	r2, [r3, #24]
 80007e2:	4b2e      	ldr	r3, [pc, #184]	; (800089c <hid_i2c_descriptor_handler+0x1a4>)
 80007e4:	699b      	ldr	r3, [r3, #24]
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d101      	bne.n	80007ee <hid_i2c_descriptor_handler+0xf6>
                return ID_FAIL;
 80007ea:	2310      	movs	r3, #16
 80007ec:	e04f      	b.n	800088e <hid_i2c_descriptor_handler+0x196>

            if ( !( HID_FIELD.wProdID = ( (HID_DESC[23] << BYTE_SHIFT) | HID_DESC[22] )) ) // Parse out product ID and store in appropriate variable
 80007ee:	4b2a      	ldr	r3, [pc, #168]	; (8000898 <hid_i2c_descriptor_handler+0x1a0>)
 80007f0:	7ddb      	ldrb	r3, [r3, #23]
 80007f2:	021b      	lsls	r3, r3, #8
 80007f4:	4a28      	ldr	r2, [pc, #160]	; (8000898 <hid_i2c_descriptor_handler+0x1a0>)
 80007f6:	7d92      	ldrb	r2, [r2, #22]
 80007f8:	4313      	orrs	r3, r2
 80007fa:	461a      	mov	r2, r3
 80007fc:	4b27      	ldr	r3, [pc, #156]	; (800089c <hid_i2c_descriptor_handler+0x1a4>)
 80007fe:	61da      	str	r2, [r3, #28]
 8000800:	4b26      	ldr	r3, [pc, #152]	; (800089c <hid_i2c_descriptor_handler+0x1a4>)
 8000802:	69db      	ldr	r3, [r3, #28]
 8000804:	2b00      	cmp	r3, #0
 8000806:	d101      	bne.n	800080c <hid_i2c_descriptor_handler+0x114>
                return ID_FAIL;
 8000808:	2310      	movs	r3, #16
 800080a:	e040      	b.n	800088e <hid_i2c_descriptor_handler+0x196>
                
            HID_FIELD.wVerID = ( (HID_DESC[25] << BYTE_SHIFT) | HID_DESC[24] ); // Parse out version ID and store in appropriate variable
 800080c:	4b22      	ldr	r3, [pc, #136]	; (8000898 <hid_i2c_descriptor_handler+0x1a0>)
 800080e:	7e5b      	ldrb	r3, [r3, #25]
 8000810:	021b      	lsls	r3, r3, #8
 8000812:	4a21      	ldr	r2, [pc, #132]	; (8000898 <hid_i2c_descriptor_handler+0x1a0>)
 8000814:	7e12      	ldrb	r2, [r2, #24]
 8000816:	4313      	orrs	r3, r2
 8000818:	461a      	mov	r2, r3
 800081a:	4b20      	ldr	r3, [pc, #128]	; (800089c <hid_i2c_descriptor_handler+0x1a4>)
 800081c:	621a      	str	r2, [r3, #32]
             
            _VREGS.IDs.PID = HID_FIELD.wProdID;                      // Update virtual register fields
 800081e:	4b1f      	ldr	r3, [pc, #124]	; (800089c <hid_i2c_descriptor_handler+0x1a4>)
 8000820:	69db      	ldr	r3, [r3, #28]
 8000822:	4a1f      	ldr	r2, [pc, #124]	; (80008a0 <hid_i2c_descriptor_handler+0x1a8>)
 8000824:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
            _VREGS.IDs.VID = HID_FIELD.wVenID;
 8000828:	4b1c      	ldr	r3, [pc, #112]	; (800089c <hid_i2c_descriptor_handler+0x1a4>)
 800082a:	699b      	ldr	r3, [r3, #24]
 800082c:	4a1c      	ldr	r2, [pc, #112]	; (80008a0 <hid_i2c_descriptor_handler+0x1a8>)
 800082e:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
            _VREGS.IDs.DID = HID_FIELD.wVerID;
 8000832:	4b1a      	ldr	r3, [pc, #104]	; (800089c <hid_i2c_descriptor_handler+0x1a4>)
 8000834:	6a1b      	ldr	r3, [r3, #32]
 8000836:	4a1a      	ldr	r2, [pc, #104]	; (80008a0 <hid_i2c_descriptor_handler+0x1a8>)
 8000838:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0

            break;
 800083c:	e026      	b.n	800088c <hid_i2c_descriptor_handler+0x194>

        case GET_RPT_DESC:                                          //read HID Report Descriptor table from SSC7150
            
            ucTx_data[0] = (HID_FIELD.wRepDescReg >> BYTE_SHIFT);   // Report table request is 0x02 00
 800083e:	4b17      	ldr	r3, [pc, #92]	; (800089c <hid_i2c_descriptor_handler+0x1a4>)
 8000840:	689b      	ldr	r3, [r3, #8]
 8000842:	0a1b      	lsrs	r3, r3, #8
 8000844:	b2db      	uxtb	r3, r3
 8000846:	733b      	strb	r3, [r7, #12]
            ucTx_data[1] = HID_FIELD.wRepDescReg;
 8000848:	4b14      	ldr	r3, [pc, #80]	; (800089c <hid_i2c_descriptor_handler+0x1a4>)
 800084a:	689b      	ldr	r3, [r3, #8]
 800084c:	b2db      	uxtb	r3, r3
 800084e:	737b      	strb	r3, [r7, #13]

            ucRet = i2c_cmd_WrRd (WR_RD,                            //read the HID Report Descriptor from SSC7150
 8000850:	4b12      	ldr	r3, [pc, #72]	; (800089c <hid_i2c_descriptor_handler+0x1a4>)
 8000852:	685b      	ldr	r3, [r3, #4]
 8000854:	f107 020c 	add.w	r2, r7, #12
 8000858:	2100      	movs	r1, #0
 800085a:	9101      	str	r1, [sp, #4]
 800085c:	4911      	ldr	r1, [pc, #68]	; (80008a4 <hid_i2c_descriptor_handler+0x1ac>)
 800085e:	9100      	str	r1, [sp, #0]
 8000860:	2102      	movs	r1, #2
 8000862:	2003      	movs	r0, #3
 8000864:	f7ff feb6 	bl	80005d4 <i2c_cmd_WrRd>
 8000868:	4603      	mov	r3, r0
 800086a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
                                DESC_CMD_LEN,                       //num of cmd bytes
                                ucTx_data,                          //cmd buf
                                HID_FIELD.wRepDescLen,              //num of bytes to read
                                RPT_DESC,                           //recv buf
                                FALSE);                             //flag indicating that we specified the number of bytes to read explicitly
            if (ucRet)
 800086e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000872:	2b00      	cmp	r3, #0
 8000874:	d001      	beq.n	800087a <hid_i2c_descriptor_handler+0x182>
                return RPT_DESC_FAIL;                               // Attempt to acquire the report descriptor table from the HID device
 8000876:	2312      	movs	r3, #18
 8000878:	e009      	b.n	800088e <hid_i2c_descriptor_handler+0x196>
            
            if (report_parse(RPT_DESC))                             // Parse the descriptor for sensor information
 800087a:	480a      	ldr	r0, [pc, #40]	; (80008a4 <hid_i2c_descriptor_handler+0x1ac>)
 800087c:	f000 f9e6 	bl	8000c4c <report_parse>
 8000880:	4603      	mov	r3, r0
 8000882:	2b00      	cmp	r3, #0
 8000884:	d001      	beq.n	800088a <hid_i2c_descriptor_handler+0x192>
                return REP_PARS_FAIL;  
 8000886:	2314      	movs	r3, #20
 8000888:	e001      	b.n	800088e <hid_i2c_descriptor_handler+0x196>
            
            break;
 800088a:	bf00      	nop
    }

    return SUCCESS;
 800088c:	2300      	movs	r3, #0
}
 800088e:	4618      	mov	r0, r3
 8000890:	3738      	adds	r7, #56	; 0x38
 8000892:	46bd      	mov	sp, r7
 8000894:	bd80      	pop	{r7, pc}
 8000896:	bf00      	nop
 8000898:	20000164 	.word	0x20000164
 800089c:	20000140 	.word	0x20000140
 80008a0:	20000f34 	.word	0x20000f34
 80008a4:	20000184 	.word	0x20000184

080008a8 <hid_i2c_cmd_process>:
* @param ucCmd_req command 
* @param ucReport_id sensor id 
* @return completion_status 0=SUCCESS, failcode: 0x16=GET_FEAT_FAIL, 0x17=SET_FEAT_FAIL, 0x18=RESET_FAIL, 0x19=SET_RPT_FAIL, 0x1A=POWER_ON_FAIL, 0x1B=SLEEP_CMD_FAIL, 0x1C=HID_GET_RPT_INPT_FAIL, 0x1D=HID_GET_RPT_FEAT_FAIL 
*/
UINT8 hid_i2c_cmd_process(UINT8 *ucCmdDatbuf, UINT8 ucCmd_req, UINT8 ucReport_id)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b092      	sub	sp, #72	; 0x48
 80008ac:	af02      	add	r7, sp, #8
 80008ae:	6078      	str	r0, [r7, #4]
 80008b0:	460b      	mov	r3, r1
 80008b2:	70fb      	strb	r3, [r7, #3]
 80008b4:	4613      	mov	r3, r2
 80008b6:	70bb      	strb	r3, [r7, #2]
    UINT8 ucRetStat;
    UINT8 ucTx_data[BUF_40];                   
    UINT8 ucSensPtr, ucTmpPtr;
    UINT8 ucCmdBufMaxSize = 0;
 80008b8:	2300      	movs	r3, #0
 80008ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    UINT16 usTimeout;                           
    UINT16 *usVREGSptr = (UINT16 *)&_VREGS;                          // Pointer to individual virtual registers; initialized to start of _VREGS struct
 80008be:	4b73      	ldr	r3, [pc, #460]	; (8000a8c <hid_i2c_cmd_process+0x1e4>)
 80008c0:	637b      	str	r3, [r7, #52]	; 0x34

    
    switch(ucCmd_req)
 80008c2:	78fb      	ldrb	r3, [r7, #3]
 80008c4:	3b01      	subs	r3, #1
 80008c6:	2b06      	cmp	r3, #6
 80008c8:	f200 81aa 	bhi.w	8000c20 <hid_i2c_cmd_process+0x378>
 80008cc:	a201      	add	r2, pc, #4	; (adr r2, 80008d4 <hid_i2c_cmd_process+0x2c>)
 80008ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008d2:	bf00      	nop
 80008d4:	080008f1 	.word	0x080008f1
 80008d8:	080009ad 	.word	0x080009ad
 80008dc:	080009f1 	.word	0x080009f1
 80008e0:	08000a35 	.word	0x08000a35
 80008e4:	08000a51 	.word	0x08000a51
 80008e8:	08000c21 	.word	0x08000c21
 80008ec:	08000bed 	.word	0x08000bed
    {
        
        case RESET_DEV_CMD:                                         //HID Reset command                      
            ucTx_data[0] = HID_FIELD.wCmdReg;                       //command field bytes from HID config table                    
 80008f0:	4b67      	ldr	r3, [pc, #412]	; (8000a90 <hid_i2c_cmd_process+0x1e8>)
 80008f2:	691b      	ldr	r3, [r3, #16]
 80008f4:	b2db      	uxtb	r3, r3
 80008f6:	723b      	strb	r3, [r7, #8]
            ucTx_data[1] = (HID_FIELD.wCmdReg >> BYTE_SHIFT);       
 80008f8:	4b65      	ldr	r3, [pc, #404]	; (8000a90 <hid_i2c_cmd_process+0x1e8>)
 80008fa:	691b      	ldr	r3, [r3, #16]
 80008fc:	0a1b      	lsrs	r3, r3, #8
 80008fe:	b2db      	uxtb	r3, r3
 8000900:	727b      	strb	r3, [r7, #9]
            ucTx_data[2] = RESET_CMD_LSB;                           //HID Reset command opcode low byte              
 8000902:	2300      	movs	r3, #0
 8000904:	72bb      	strb	r3, [r7, #10]
            ucTx_data[3] = RESET_CMD_MSB;                           //HID Reset command opcode high byte
 8000906:	2301      	movs	r3, #1
 8000908:	72fb      	strb	r3, [r7, #11]

            // send the reset command to SSC7150
            ucRetStat = i2c_cmd_WrRd (WRITE,                        //WRITE command packet to SSC7150 
 800090a:	f107 0208 	add.w	r2, r7, #8
 800090e:	2300      	movs	r3, #0
 8000910:	9301      	str	r3, [sp, #4]
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	9300      	str	r3, [sp, #0]
 8000916:	2300      	movs	r3, #0
 8000918:	2104      	movs	r1, #4
 800091a:	2001      	movs	r0, #1
 800091c:	f7ff fe5a 	bl	80005d4 <i2c_cmd_WrRd>
 8000920:	4603      	mov	r3, r0
 8000922:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
                                ucTx_data,                          //cmd buf 
                                0,                                  //num of bytes to read             
                                ucCmdDatbuf,                        //recv buf
                                FALSE);                             //flag indicating that we specified the number of bytes to read explicitly
            
            if (ucRetStat != SUCCESS)
 8000926:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 800092a:	2b00      	cmp	r3, #0
 800092c:	d001      	beq.n	8000932 <hid_i2c_cmd_process+0x8a>
                return RESET_FAIL;
 800092e:	2318      	movs	r3, #24
 8000930:	e180      	b.n	8000c34 <hid_i2c_cmd_process+0x38c>

            TIMER_50MS_FLG = 0;                                      // Prepare timer1 for counting
 8000932:	4b58      	ldr	r3, [pc, #352]	; (8000a94 <hid_i2c_cmd_process+0x1ec>)
 8000934:	2200      	movs	r2, #0
 8000936:	701a      	strb	r2, [r3, #0]
            usTimeout = 900000;                               // 5 sec (as per HID spec) timeout for reset command
 8000938:	4b57      	ldr	r3, [pc, #348]	; (8000a98 <hid_i2c_cmd_process+0x1f0>)
 800093a:	63bb      	str	r3, [r7, #56]	; 0x38
            while (usTimeout > 10)                                       // wait up to API spec timeout to respond with EC_DATA avail interrupt
 800093c:	e007      	b.n	800094e <hid_i2c_cmd_process+0xa6>
            {    
                if (EC_DATA_AVAIL)                                  // EC interrupt asserted (data is available)
 800093e:	4b57      	ldr	r3, [pc, #348]	; (8000a9c <hid_i2c_cmd_process+0x1f4>)
 8000940:	781b      	ldrb	r3, [r3, #0]
 8000942:	b2db      	uxtb	r3, r3
 8000944:	2b00      	cmp	r3, #0
 8000946:	d106      	bne.n	8000956 <hid_i2c_cmd_process+0xae>
                    break; 
                --usTimeout;
 8000948:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800094a:	3b01      	subs	r3, #1
 800094c:	63bb      	str	r3, [r7, #56]	; 0x38
            while (usTimeout > 10)                                       // wait up to API spec timeout to respond with EC_DATA avail interrupt
 800094e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000950:	2b0a      	cmp	r3, #10
 8000952:	d8f4      	bhi.n	800093e <hid_i2c_cmd_process+0x96>
 8000954:	e000      	b.n	8000958 <hid_i2c_cmd_process+0xb0>
                    break; 
 8000956:	bf00      	nop
                    usTimeout = usTimeout - 50;                                    // 1 msec expired, reduce counter
                }
                */
            }

            if (usTimeout <= 10)
 8000958:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800095a:	2b0a      	cmp	r3, #10
 800095c:	d801      	bhi.n	8000962 <hid_i2c_cmd_process+0xba>
                return RESET_FAIL;                                  // timeout occured without device responding with interrupt
 800095e:	2318      	movs	r3, #24
 8000960:	e168      	b.n	8000c34 <hid_i2c_cmd_process+0x38c>
                
            ucRetStat = i2c_cmd_WrRd (READ,                         // EC_DATA_AVAIL flag was set indicating SSC7150 has data available to be read in response to the RESET CMD
 8000962:	f107 0208 	add.w	r2, r7, #8
 8000966:	2300      	movs	r3, #0
 8000968:	9301      	str	r3, [sp, #4]
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	9300      	str	r3, [sp, #0]
 800096e:	2302      	movs	r3, #2
 8000970:	2100      	movs	r1, #0
 8000972:	2002      	movs	r0, #2
 8000974:	f7ff fe2e 	bl	80005d4 <i2c_cmd_WrRd>
 8000978:	4603      	mov	r3, r0
 800097a:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
                                    ucTx_data,                      //cmd buf
                                    2,                              //num of bytes to read
                                    ucCmdDatbuf,                    //recv buf 
                                    FALSE);                         //flag indicating that we specified the number of bytes to read explicitly
                
            if (ucRetStat != SUCCESS)
 800097e:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8000982:	2b00      	cmp	r3, #0
 8000984:	d001      	beq.n	800098a <hid_i2c_cmd_process+0xe2>
                return RESET_FAIL; 
 8000986:	2318      	movs	r3, #24
 8000988:	e154      	b.n	8000c34 <hid_i2c_cmd_process+0x38c>
            
            if (ucCmdDatbuf[0] != 0 && ucCmdDatbuf[1] != 0)         // expect 1st two bytes of data packet from SSC7150 in response to RESET command to be "00 00"
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	781b      	ldrb	r3, [r3, #0]
 800098e:	2b00      	cmp	r3, #0
 8000990:	d006      	beq.n	80009a0 <hid_i2c_cmd_process+0xf8>
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	3301      	adds	r3, #1
 8000996:	781b      	ldrb	r3, [r3, #0]
 8000998:	2b00      	cmp	r3, #0
 800099a:	d001      	beq.n	80009a0 <hid_i2c_cmd_process+0xf8>
                return RESET_FAIL;                                  // invalid data found
 800099c:	2318      	movs	r3, #24
 800099e:	e149      	b.n	8000c34 <hid_i2c_cmd_process+0x38c>
 
            _VREGS.SHC.reset = VREG_RESET_SUCCESS;                   // Clear the reset VREG to indicate successful 
 80009a0:	4a3a      	ldr	r2, [pc, #232]	; (8000a8c <hid_i2c_cmd_process+0x1e4>)
 80009a2:	7813      	ldrb	r3, [r2, #0]
 80009a4:	f36f 03c3 	bfc	r3, #3, #1
 80009a8:	7013      	strb	r3, [r2, #0]
                   
            break;
 80009aa:	e142      	b.n	8000c32 <hid_i2c_cmd_process+0x38a>


        case POWER_ON:      
            ucTx_data[0] = HID_FIELD.wCmdReg;                       //command field bytes from HID config table 
 80009ac:	4b38      	ldr	r3, [pc, #224]	; (8000a90 <hid_i2c_cmd_process+0x1e8>)
 80009ae:	691b      	ldr	r3, [r3, #16]
 80009b0:	b2db      	uxtb	r3, r3
 80009b2:	723b      	strb	r3, [r7, #8]
            ucTx_data[1] = (HID_FIELD.wCmdReg >> BYTE_SHIFT);                              
 80009b4:	4b36      	ldr	r3, [pc, #216]	; (8000a90 <hid_i2c_cmd_process+0x1e8>)
 80009b6:	691b      	ldr	r3, [r3, #16]
 80009b8:	0a1b      	lsrs	r3, r3, #8
 80009ba:	b2db      	uxtb	r3, r3
 80009bc:	727b      	strb	r3, [r7, #9]
            ucTx_data[2] = POWER_CMD_LSB;                           //HID Power command opcode low  byte for POWER Device ON
 80009be:	2300      	movs	r3, #0
 80009c0:	72bb      	strb	r3, [r7, #10]
            ucTx_data[3] = POWER_CMD_MSB;                           //HID Power command opcode high byte
 80009c2:	2308      	movs	r3, #8
 80009c4:	72fb      	strb	r3, [r7, #11]

            ucRetStat = i2c_cmd_WrRd (WRITE,                        // Issue power on command to SSC7150
 80009c6:	f107 0208 	add.w	r2, r7, #8
 80009ca:	2300      	movs	r3, #0
 80009cc:	9301      	str	r3, [sp, #4]
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	9300      	str	r3, [sp, #0]
 80009d2:	2300      	movs	r3, #0
 80009d4:	2104      	movs	r1, #4
 80009d6:	2001      	movs	r0, #1
 80009d8:	f7ff fdfc 	bl	80005d4 <i2c_cmd_WrRd>
 80009dc:	4603      	mov	r3, r0
 80009de:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
                                ucTx_data,                          //cmd buf
                                0,                                  //num of bytes to read
                                ucCmdDatbuf,                        //recv buf
                                FALSE);                             //flag indicating that we specified the number of bytes to read explicitly

            if (ucRetStat != SUCCESS)
 80009e2:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	f000 811c 	beq.w	8000c24 <hid_i2c_cmd_process+0x37c>
                return POWER_ON_FAIL;                               // command failed
 80009ec:	231a      	movs	r3, #26
 80009ee:	e121      	b.n	8000c34 <hid_i2c_cmd_process+0x38c>
            break;


        case SLEEP:         

            ucTx_data[0] = HID_FIELD.wCmdReg;                       //command field bytes from HID config table
 80009f0:	4b27      	ldr	r3, [pc, #156]	; (8000a90 <hid_i2c_cmd_process+0x1e8>)
 80009f2:	691b      	ldr	r3, [r3, #16]
 80009f4:	b2db      	uxtb	r3, r3
 80009f6:	723b      	strb	r3, [r7, #8]
            ucTx_data[1] = (HID_FIELD.wCmdReg >> BYTE_SHIFT);            
 80009f8:	4b25      	ldr	r3, [pc, #148]	; (8000a90 <hid_i2c_cmd_process+0x1e8>)
 80009fa:	691b      	ldr	r3, [r3, #16]
 80009fc:	0a1b      	lsrs	r3, r3, #8
 80009fe:	b2db      	uxtb	r3, r3
 8000a00:	727b      	strb	r3, [r7, #9]
            ucTx_data[2] = SLEEP_ON_LSB;                            //HID Power command opcode low byte for Device SLEEP
 8000a02:	2301      	movs	r3, #1
 8000a04:	72bb      	strb	r3, [r7, #10]
            ucTx_data[3] = POWER_CMD_MSB;                           //HID Power command opcode high byte
 8000a06:	2308      	movs	r3, #8
 8000a08:	72fb      	strb	r3, [r7, #11]

            ucRetStat = i2c_cmd_WrRd (WRITE,                        // Issue sleep command to SSC7150
 8000a0a:	f107 0208 	add.w	r2, r7, #8
 8000a0e:	2300      	movs	r3, #0
 8000a10:	9301      	str	r3, [sp, #4]
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	9300      	str	r3, [sp, #0]
 8000a16:	2300      	movs	r3, #0
 8000a18:	2104      	movs	r1, #4
 8000a1a:	2001      	movs	r0, #1
 8000a1c:	f7ff fdda 	bl	80005d4 <i2c_cmd_WrRd>
 8000a20:	4603      	mov	r3, r0
 8000a22:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
                                ucTx_data,                          //cmd buf 
                                0,                                  //num of bytes to read
                                ucCmdDatbuf,                        //recv buf
                                FALSE);                             //flag indicating that we specified the number of bytes to read explicitly

            if (ucRetStat != SUCCESS)
 8000a26:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	f000 80fc 	beq.w	8000c28 <hid_i2c_cmd_process+0x380>
                return SLEEP_CMD_FAIL;                              // command failed         
 8000a30:	231b      	movs	r3, #27
 8000a32:	e0ff      	b.n	8000c34 <hid_i2c_cmd_process+0x38c>
            
            break;

        case HID_GET_RPT_INPT:
                        
            ucCmdDatbuf[0] = ucReport_id;                           //the HOST_SF_LIB_HID_Get_Report expects the sensor id in byte[0] of passed buffer
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	78ba      	ldrb	r2, [r7, #2]
 8000a38:	701a      	strb	r2, [r3, #0]
                        
            if ( HOST_SF_LIB_HID_Get_Report(GET_RRT_INPT, ucCmdDatbuf, 0) )
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	6879      	ldr	r1, [r7, #4]
 8000a3e:	2010      	movs	r0, #16
 8000a40:	f000 fc3c 	bl	80012bc <HOST_SF_LIB_HID_Get_Report>
 8000a44:	4603      	mov	r3, r0
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	f000 80f0 	beq.w	8000c2c <hid_i2c_cmd_process+0x384>
                return HID_GET_RPT_FEAT_FAIL;                       // command failed
 8000a4c:	231d      	movs	r3, #29
 8000a4e:	e0f1      	b.n	8000c34 <hid_i2c_cmd_process+0x38c>
            break;


        case HID_GET_RPT_FEAT:

            ucCmdDatbuf[0] = ucReport_id;                           //the HOST_SF_LIB_HID_Get_Report expects the sensor id in byte[0] of passed buffer
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	78ba      	ldrb	r2, [r7, #2]
 8000a54:	701a      	strb	r2, [r3, #0]
                        
            if ( HOST_SF_LIB_HID_Get_Report(GET_RPT_FEAT, ucCmdDatbuf, 0) )
 8000a56:	2200      	movs	r2, #0
 8000a58:	6879      	ldr	r1, [r7, #4]
 8000a5a:	2030      	movs	r0, #48	; 0x30
 8000a5c:	f000 fc2e 	bl	80012bc <HOST_SF_LIB_HID_Get_Report>
 8000a60:	4603      	mov	r3, r0
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	d001      	beq.n	8000a6a <hid_i2c_cmd_process+0x1c2>
                return HID_GET_RPT_FEAT_FAIL;                       // command failed
 8000a66:	231d      	movs	r3, #29
 8000a68:	e0e4      	b.n	8000c34 <hid_i2c_cmd_process+0x38c>

            if ((ucCmdDatbuf[2] == 0) || (ucCmdDatbuf[2] > NUM_SENS) ) // check for valid ID range in feature report
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	3302      	adds	r3, #2
 8000a6e:	781b      	ldrb	r3, [r3, #0]
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d004      	beq.n	8000a7e <hid_i2c_cmd_process+0x1d6>
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	3302      	adds	r3, #2
 8000a78:	781b      	ldrb	r3, [r3, #0]
 8000a7a:	2b0c      	cmp	r3, #12
 8000a7c:	d901      	bls.n	8000a82 <hid_i2c_cmd_process+0x1da>
                return HID_GET_RPT_FEAT_FAIL;                       // invalid reportID
 8000a7e:	231d      	movs	r3, #29
 8000a80:	e0d8      	b.n	8000c34 <hid_i2c_cmd_process+0x38c>
                       
            //now parse the parameters in returned report feature based on offsets derived earlier from parsing the HID Report Descriptor
            for (ucSensPtr = 0; ucSensPtr < NUM_SENS; ucSensPtr++)  // traverse through the sensor list looking for matching sesnor id
 8000a82:	2300      	movs	r3, #0
 8000a84:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8000a88:	e0a8      	b.n	8000bdc <hid_i2c_cmd_process+0x334>
 8000a8a:	bf00      	nop
 8000a8c:	20000f34 	.word	0x20000f34
 8000a90:	20000140 	.word	0x20000140
 8000a94:	20000090 	.word	0x20000090
 8000a98:	000dbba0 	.word	0x000dbba0
 8000a9c:	20000091 	.word	0x20000091
            {          
                if (SENSOR[ucSensPtr].id == ucReport_id)
 8000aa0:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8000aa4:	4965      	ldr	r1, [pc, #404]	; (8000c3c <hid_i2c_cmd_process+0x394>)
 8000aa6:	4613      	mov	r3, r2
 8000aa8:	00db      	lsls	r3, r3, #3
 8000aaa:	1a9b      	subs	r3, r3, r2
 8000aac:	440b      	add	r3, r1
 8000aae:	781b      	ldrb	r3, [r3, #0]
 8000ab0:	78ba      	ldrb	r2, [r7, #2]
 8000ab2:	429a      	cmp	r2, r3
 8000ab4:	f040 808d 	bne.w	8000bd2 <hid_i2c_cmd_process+0x32a>
                {        
                    usVREGSptr = &_VREGS.sensitivity.ACSEN + ucSensPtr; // Set pointer to appropriate sensitivity register (as offset from accelerometer sensitivity VREG02)
 8000ab8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8000abc:	009b      	lsls	r3, r3, #2
 8000abe:	4a60      	ldr	r2, [pc, #384]	; (8000c40 <hid_i2c_cmd_process+0x398>)
 8000ac0:	4413      	add	r3, r2
 8000ac2:	637b      	str	r3, [r7, #52]	; 0x34
                    
                    //retrieve offset pointer to sensitivty parameters for this sensor device (from the Report Descriptor table). Add offset to initial pointer for the actual desired "ACSEN" data within the feature report packet and store this value in VREG register 
                    *usVREGSptr = ( (ucCmdDatbuf[SENSOR[ucSensPtr].SensOffset + GF_SENS_OFFSET_MSB] << BYTE_SHIFT) | ucCmdDatbuf[SENSOR[ucSensPtr].SensOffset + GF_SENS_OFFSET_LSB]); // Use info about offsets to set _VREGS to appropriate data
 8000ac4:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8000ac8:	495c      	ldr	r1, [pc, #368]	; (8000c3c <hid_i2c_cmd_process+0x394>)
 8000aca:	4613      	mov	r3, r2
 8000acc:	00db      	lsls	r3, r3, #3
 8000ace:	1a9b      	subs	r3, r3, r2
 8000ad0:	440b      	add	r3, r1
 8000ad2:	3303      	adds	r3, #3
 8000ad4:	781b      	ldrb	r3, [r3, #0]
 8000ad6:	3307      	adds	r3, #7
 8000ad8:	687a      	ldr	r2, [r7, #4]
 8000ada:	4413      	add	r3, r2
 8000adc:	781b      	ldrb	r3, [r3, #0]
 8000ade:	0219      	lsls	r1, r3, #8
 8000ae0:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8000ae4:	4855      	ldr	r0, [pc, #340]	; (8000c3c <hid_i2c_cmd_process+0x394>)
 8000ae6:	4613      	mov	r3, r2
 8000ae8:	00db      	lsls	r3, r3, #3
 8000aea:	1a9b      	subs	r3, r3, r2
 8000aec:	4403      	add	r3, r0
 8000aee:	3303      	adds	r3, #3
 8000af0:	781b      	ldrb	r3, [r3, #0]
 8000af2:	3306      	adds	r3, #6
 8000af4:	687a      	ldr	r2, [r7, #4]
 8000af6:	4413      	add	r3, r2
 8000af8:	781b      	ldrb	r3, [r3, #0]
 8000afa:	430b      	orrs	r3, r1
 8000afc:	461a      	mov	r2, r3
 8000afe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000b00:	601a      	str	r2, [r3, #0]
                    
                    usVREGSptr = &_VREGS.data_rt.ACDXR + ucSensPtr;  // Set pointer to appropriate data rate register
 8000b02:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8000b06:	009b      	lsls	r3, r3, #2
 8000b08:	4a4e      	ldr	r2, [pc, #312]	; (8000c44 <hid_i2c_cmd_process+0x39c>)
 8000b0a:	4413      	add	r3, r2
 8000b0c:	637b      	str	r3, [r7, #52]	; 0x34
                    
                    *usVREGSptr = ((ucCmdDatbuf[SENSOR[ucSensPtr].DatRtOffset + GF_DATR_OFFSET_MSB] << BYTE_SHIFT) | ucCmdDatbuf[SENSOR[ucSensPtr].DatRtOffset + GF_DATR_OFFSET_LSB]); //point to appropriate data fields within the feature report and store in VREG reg
 8000b0e:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8000b12:	494a      	ldr	r1, [pc, #296]	; (8000c3c <hid_i2c_cmd_process+0x394>)
 8000b14:	4613      	mov	r3, r2
 8000b16:	00db      	lsls	r3, r3, #3
 8000b18:	1a9b      	subs	r3, r3, r2
 8000b1a:	440b      	add	r3, r1
 8000b1c:	3302      	adds	r3, #2
 8000b1e:	781b      	ldrb	r3, [r3, #0]
 8000b20:	3304      	adds	r3, #4
 8000b22:	687a      	ldr	r2, [r7, #4]
 8000b24:	4413      	add	r3, r2
 8000b26:	781b      	ldrb	r3, [r3, #0]
 8000b28:	0219      	lsls	r1, r3, #8
 8000b2a:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8000b2e:	4843      	ldr	r0, [pc, #268]	; (8000c3c <hid_i2c_cmd_process+0x394>)
 8000b30:	4613      	mov	r3, r2
 8000b32:	00db      	lsls	r3, r3, #3
 8000b34:	1a9b      	subs	r3, r3, r2
 8000b36:	4403      	add	r3, r0
 8000b38:	3302      	adds	r3, #2
 8000b3a:	781b      	ldrb	r3, [r3, #0]
 8000b3c:	3303      	adds	r3, #3
 8000b3e:	687a      	ldr	r2, [r7, #4]
 8000b40:	4413      	add	r3, r2
 8000b42:	781b      	ldrb	r3, [r3, #0]
 8000b44:	430b      	orrs	r3, r1
 8000b46:	461a      	mov	r2, r3
 8000b48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000b4a:	601a      	str	r2, [r3, #0]

                    usVREGSptr = (UINT16 *)&(_VREGS.expo.exp1);      //point to appropriate data fields within the feature report and store in VREG reg  NOTE: each exponent VREG holds 4 devices' 4bit exponent value fields
 8000b4c:	4b3e      	ldr	r3, [pc, #248]	; (8000c48 <hid_i2c_cmd_process+0x3a0>)
 8000b4e:	637b      	str	r3, [r7, #52]	; 0x34
                    if (ucSensPtr > 3)                              // sensor indexes from 4 to 7 = sensors that have unit exponents in the 2nd exponent register (VREG37)
 8000b50:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8000b54:	2b03      	cmp	r3, #3
 8000b56:	d902      	bls.n	8000b5e <hid_i2c_cmd_process+0x2b6>
                        usVREGSptr++;                               // Increment ptr to VREG exponent register to be searched
 8000b58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000b5a:	3304      	adds	r3, #4
 8000b5c:	637b      	str	r3, [r7, #52]	; 0x34

                    if (ucSensPtr > 7)                              // sensor indexes > 7 = sensors that have unit exponents in the 3rd exponent register (VREG38)
 8000b5e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8000b62:	2b07      	cmp	r3, #7
 8000b64:	d902      	bls.n	8000b6c <hid_i2c_cmd_process+0x2c4>
                        usVREGSptr++;                               // Increment ptr to VREG exponent register to be searched
 8000b66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000b68:	3304      	adds	r3, #4
 8000b6a:	637b      	str	r3, [r7, #52]	; 0x34

                    ucTmpPtr= ucSensPtr % 4;                        // Find the appropriate offset for this sensor's unit exponent
 8000b6c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8000b70:	f003 0303 	and.w	r3, r3, #3
 8000b74:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32

                    *usVREGSptr &= ~(0xF << (4*ucTmpPtr));          // Clear unit exponent data   
 8000b78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	f897 2032 	ldrb.w	r2, [r7, #50]	; 0x32
 8000b80:	0092      	lsls	r2, r2, #2
 8000b82:	210f      	movs	r1, #15
 8000b84:	fa01 f202 	lsl.w	r2, r1, r2
 8000b88:	43d2      	mvns	r2, r2
 8000b8a:	401a      	ands	r2, r3
 8000b8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000b8e:	601a      	str	r2, [r3, #0]

                    if (SENSOR[ucSensPtr].DatExp)
 8000b90:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8000b94:	4929      	ldr	r1, [pc, #164]	; (8000c3c <hid_i2c_cmd_process+0x394>)
 8000b96:	4613      	mov	r3, r2
 8000b98:	00db      	lsls	r3, r3, #3
 8000b9a:	1a9b      	subs	r3, r3, r2
 8000b9c:	440b      	add	r3, r1
 8000b9e:	3306      	adds	r3, #6
 8000ba0:	781b      	ldrb	r3, [r3, #0]
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d020      	beq.n	8000be8 <hid_i2c_cmd_process+0x340>
                    {
                       *usVREGSptr |= (SENSOR[ucSensPtr].DatExp << (4*ucTmpPtr));  // Set the unit exponent data to the appropriate VREG  
 8000ba6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000ba8:	6819      	ldr	r1, [r3, #0]
 8000baa:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8000bae:	4823      	ldr	r0, [pc, #140]	; (8000c3c <hid_i2c_cmd_process+0x394>)
 8000bb0:	4613      	mov	r3, r2
 8000bb2:	00db      	lsls	r3, r3, #3
 8000bb4:	1a9b      	subs	r3, r3, r2
 8000bb6:	4403      	add	r3, r0
 8000bb8:	3306      	adds	r3, #6
 8000bba:	781b      	ldrb	r3, [r3, #0]
 8000bbc:	461a      	mov	r2, r3
 8000bbe:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8000bc2:	009b      	lsls	r3, r3, #2
 8000bc4:	fa02 f303 	lsl.w	r3, r2, r3
 8000bc8:	ea41 0203 	orr.w	r2, r1, r3
 8000bcc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000bce:	601a      	str	r2, [r3, #0]
                    }

                    break;              
 8000bd0:	e00a      	b.n	8000be8 <hid_i2c_cmd_process+0x340>
            for (ucSensPtr = 0; ucSensPtr < NUM_SENS; ucSensPtr++)  // traverse through the sensor list looking for matching sesnor id
 8000bd2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8000bd6:	3301      	adds	r3, #1
 8000bd8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8000bdc:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8000be0:	2b0b      	cmp	r3, #11
 8000be2:	f67f af5d 	bls.w	8000aa0 <hid_i2c_cmd_process+0x1f8>
                }   
            }                        

            break;
 8000be6:	e024      	b.n	8000c32 <hid_i2c_cmd_process+0x38a>
                    break;              
 8000be8:	bf00      	nop
            break;
 8000bea:	e022      	b.n	8000c32 <hid_i2c_cmd_process+0x38a>
     
        case HID_SET_RPT_FEAT:
            //for non-Vendor commands, the sensor id is NOT passed in byte[0] to 'HOST_SF_LIB_HID_Set_Report'
            ucCmdBufMaxSize = ucCmdDatbuf[RPT_SIZE_LSB];            //get size of GetReportFeature Packet
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	781b      	ldrb	r3, [r3, #0]
 8000bf0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            
            if ((ucCmdBufMaxSize == 0) || (ucCmdBufMaxSize == 0xFF)) //is the size reasonable?
 8000bf4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d003      	beq.n	8000c04 <hid_i2c_cmd_process+0x35c>
 8000bfc:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000c00:	2bff      	cmp	r3, #255	; 0xff
 8000c02:	d101      	bne.n	8000c08 <hid_i2c_cmd_process+0x360>
                return SET_FEAT_FAIL;
 8000c04:	2317      	movs	r3, #23
 8000c06:	e015      	b.n	8000c34 <hid_i2c_cmd_process+0x38c>
                                        
            if ( HOST_SF_LIB_HID_Set_Report(SET_RPT_FEAT, ucCmdDatbuf, ucCmdBufMaxSize) )
 8000c08:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000c0c:	461a      	mov	r2, r3
 8000c0e:	6879      	ldr	r1, [r7, #4]
 8000c10:	2030      	movs	r0, #48	; 0x30
 8000c12:	f000 fad3 	bl	80011bc <HOST_SF_LIB_HID_Set_Report>
 8000c16:	4603      	mov	r3, r0
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d009      	beq.n	8000c30 <hid_i2c_cmd_process+0x388>
                return SET_FEAT_FAIL;                               // command failed
 8000c1c:	2317      	movs	r3, #23
 8000c1e:	e009      	b.n	8000c34 <hid_i2c_cmd_process+0x38c>

            break;

        default:
            break;
 8000c20:	bf00      	nop
 8000c22:	e006      	b.n	8000c32 <hid_i2c_cmd_process+0x38a>
            break;
 8000c24:	bf00      	nop
 8000c26:	e004      	b.n	8000c32 <hid_i2c_cmd_process+0x38a>
            break;
 8000c28:	bf00      	nop
 8000c2a:	e002      	b.n	8000c32 <hid_i2c_cmd_process+0x38a>
            break;
 8000c2c:	bf00      	nop
 8000c2e:	e000      	b.n	8000c32 <hid_i2c_cmd_process+0x38a>
            break;
 8000c30:	bf00      	nop
    }

    return SUCCESS;
 8000c32:	2300      	movs	r3, #0
}
 8000c34:	4618      	mov	r0, r3
 8000c36:	3740      	adds	r7, #64	; 0x40
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	bd80      	pop	{r7, pc}
 8000c3c:	20000098 	.word	0x20000098
 8000c40:	20000f3c 	.word	0x20000f3c
 8000c44:	20000f64 	.word	0x20000f64
 8000c48:	20001018 	.word	0x20001018

08000c4c <report_parse>:
* @note        Parse data retrieved from SSC7150 HID Report Descriptor, calls and populate required local structs
* @param *ucBuf Buffer holding the report descriptor table
* @return completion_status 0=SUCCESS, failcodes: 0x14=REP_PARS_FAIL, 0x15=NO_EOC_FAIL 
*/
UINT8 report_parse(UINT8 *ucBuf)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b086      	sub	sp, #24
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	6078      	str	r0, [r7, #4]
    UINT8 *ucBptr = ucBuf;                                          // HID Descriptor byte pointer
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	617b      	str	r3, [r7, #20]
    UINT8 *ucStrt = ucBptr;                                         // Pointer to hold start address for later reference
 8000c58:	697b      	ldr	r3, [r7, #20]
 8000c5a:	60fb      	str	r3, [r7, #12]
    UINT8 ucSensptr = 0;                                            // sensor number variable for struct array traverse
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	74fb      	strb	r3, [r7, #19]
    UINT8 ucUsageOffset;                                            // offset of desired HID_USAGE_SENSOR_PROERTY field in report descriptor for later use in finding parameters within the GetReportFeature data
    BOOL bFlag = FALSE;                                             // Flag variable to notify that desired fields have been reached
 8000c60:	2300      	movs	r3, #0
 8000c62:	747b      	strb	r3, [r7, #17]

   

    memset(TEMP_SF, 0xFF, sizeof(TEMP_SF));                         // Set all of the structs in the TEMP array to 0xFF so we can know if a sensor wasn't found in the report
 8000c64:	2254      	movs	r2, #84	; 0x54
 8000c66:	21ff      	movs	r1, #255	; 0xff
 8000c68:	489a      	ldr	r0, [pc, #616]	; (8000ed4 <report_parse+0x288>)
 8000c6a:	f006 fb0b 	bl	8007284 <memset>
    
    while( (ucBptr - ucStrt) <= HID_FIELD.wRepDescLen )             // Continue looping until end of report
 8000c6e:	e196      	b.n	8000f9e <report_parse+0x352>
    {
        if ( *ucBptr == HID_COLLECTION )                            // Look for HID_COLLECTION(Physical) which should be start of REPORT ID (sensor device) info in report descriptor table  
 8000c70:	697b      	ldr	r3, [r7, #20]
 8000c72:	781b      	ldrb	r3, [r3, #0]
 8000c74:	2ba1      	cmp	r3, #161	; 0xa1
 8000c76:	d12e      	bne.n	8000cd6 <report_parse+0x8a>
        {
            ucBptr++;                                               // Increment the pointer to look at the next byte
 8000c78:	697b      	ldr	r3, [r7, #20]
 8000c7a:	3301      	adds	r3, #1
 8000c7c:	617b      	str	r3, [r7, #20]
            
            if ( *(ucBptr++) == HID_PHYSICAL && *(ucBptr++) == HID_REPORT_ID ) // Check if the next two bytes meet the next required identifier needs   
 8000c7e:	697b      	ldr	r3, [r7, #20]
 8000c80:	1c5a      	adds	r2, r3, #1
 8000c82:	617a      	str	r2, [r7, #20]
 8000c84:	781b      	ldrb	r3, [r3, #0]
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d125      	bne.n	8000cd6 <report_parse+0x8a>
 8000c8a:	697b      	ldr	r3, [r7, #20]
 8000c8c:	1c5a      	adds	r2, r3, #1
 8000c8e:	617a      	str	r2, [r7, #20]
 8000c90:	781b      	ldrb	r3, [r3, #0]
 8000c92:	2b85      	cmp	r3, #133	; 0x85
 8000c94:	d11f      	bne.n	8000cd6 <report_parse+0x8a>
            {
                ucUsageOffset = 0;                                  // clear offset of desired HID_USAGE_SENSOR_PROERTY field in report descriptor for later use in finding parameters within the GetReportFeature data                                    
 8000c96:	2300      	movs	r3, #0
 8000c98:	74bb      	strb	r3, [r7, #18]
                TEMP_SF[ucSensptr].id = *ucBptr;                    // Store first sensor device ID number in out temp struct
 8000c9a:	7cfa      	ldrb	r2, [r7, #19]
 8000c9c:	697b      	ldr	r3, [r7, #20]
 8000c9e:	7818      	ldrb	r0, [r3, #0]
 8000ca0:	498c      	ldr	r1, [pc, #560]	; (8000ed4 <report_parse+0x288>)
 8000ca2:	4613      	mov	r3, r2
 8000ca4:	00db      	lsls	r3, r3, #3
 8000ca6:	1a9b      	subs	r3, r3, r2
 8000ca8:	440b      	add	r3, r1
 8000caa:	4602      	mov	r2, r0
 8000cac:	701a      	strb	r2, [r3, #0]
                
                while(*(ucBptr++) != HID_USAGE_SENSOR_TYPE);        // Parse until sensor type indicator found  (in HID table: HID_USAGE_SENSOR_TYPE_MOTION_ACCELEROMETER_3D)
 8000cae:	bf00      	nop
 8000cb0:	697b      	ldr	r3, [r7, #20]
 8000cb2:	1c5a      	adds	r2, r3, #1
 8000cb4:	617a      	str	r2, [r7, #20]
 8000cb6:	781b      	ldrb	r3, [r3, #0]
 8000cb8:	2b09      	cmp	r3, #9
 8000cba:	d1f9      	bne.n	8000cb0 <report_parse+0x64>
                
                TEMP_SF[ucSensptr].type = *ucBptr;                  // Store sensor type in struct      
 8000cbc:	7cfa      	ldrb	r2, [r7, #19]
 8000cbe:	697b      	ldr	r3, [r7, #20]
 8000cc0:	7818      	ldrb	r0, [r3, #0]
 8000cc2:	4984      	ldr	r1, [pc, #528]	; (8000ed4 <report_parse+0x288>)
 8000cc4:	4613      	mov	r3, r2
 8000cc6:	00db      	lsls	r3, r3, #3
 8000cc8:	1a9b      	subs	r3, r3, r2
 8000cca:	440b      	add	r3, r1
 8000ccc:	3301      	adds	r3, #1
 8000cce:	4602      	mov	r2, r0
 8000cd0:	701a      	strb	r2, [r3, #0]
                bFlag = TRUE;                                       // Set the flag to show we are in a field of data that we desire
 8000cd2:	2301      	movs	r3, #1
 8000cd4:	747b      	strb	r3, [r7, #17]
            }
        }
        
        if ( *ucBptr == HID_END_COLLECTION )                        // Look for end of this sensor's collection 
 8000cd6:	697b      	ldr	r3, [r7, #20]
 8000cd8:	781b      	ldrb	r3, [r3, #0]
 8000cda:	2bc0      	cmp	r3, #192	; 0xc0
 8000cdc:	d12f      	bne.n	8000d3e <report_parse+0xf2>
        {
            ucBptr++;
 8000cde:	697b      	ldr	r3, [r7, #20]
 8000ce0:	3301      	adds	r3, #1
 8000ce2:	617b      	str	r3, [r7, #20]
            
            if( *ucBptr == HID_END_COLLECTION ) 
 8000ce4:	697b      	ldr	r3, [r7, #20]
 8000ce6:	781b      	ldrb	r3, [r3, #0]
 8000ce8:	2bc0      	cmp	r3, #192	; 0xc0
 8000cea:	f000 8162 	beq.w	8000fb2 <report_parse+0x366>
                break;                                              // end of the report has occurred
            
            else if(*(ucBptr++) == HID_REPORT_ID)                   // Next report ID has been found
 8000cee:	697b      	ldr	r3, [r7, #20]
 8000cf0:	1c5a      	adds	r2, r3, #1
 8000cf2:	617a      	str	r2, [r7, #20]
 8000cf4:	781b      	ldrb	r3, [r3, #0]
 8000cf6:	2b85      	cmp	r3, #133	; 0x85
 8000cf8:	d121      	bne.n	8000d3e <report_parse+0xf2>
            {   
                ucUsageOffset = 0;                                  // clear offset of desired HID_USAGE_SENSOR_PROERTY field in report descriptor for later use in finding parameters within the GetReportFeature data
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	74bb      	strb	r3, [r7, #18]
                TEMP_SF[ucSensptr].id = *ucBptr;                    // Store location of sensor ID within the HID Report in struct
 8000cfe:	7cfa      	ldrb	r2, [r7, #19]
 8000d00:	697b      	ldr	r3, [r7, #20]
 8000d02:	7818      	ldrb	r0, [r3, #0]
 8000d04:	4973      	ldr	r1, [pc, #460]	; (8000ed4 <report_parse+0x288>)
 8000d06:	4613      	mov	r3, r2
 8000d08:	00db      	lsls	r3, r3, #3
 8000d0a:	1a9b      	subs	r3, r3, r2
 8000d0c:	440b      	add	r3, r1
 8000d0e:	4602      	mov	r2, r0
 8000d10:	701a      	strb	r2, [r3, #0]
                
                while(*(ucBptr++) != HID_USAGE_SENSOR_TYPE);        // Look for sensor type identifier (ie HID_USAGE_SENSOR_TYPE_MOTION_ACCELEROMETER_3D)
 8000d12:	bf00      	nop
 8000d14:	697b      	ldr	r3, [r7, #20]
 8000d16:	1c5a      	adds	r2, r3, #1
 8000d18:	617a      	str	r2, [r7, #20]
 8000d1a:	781b      	ldrb	r3, [r3, #0]
 8000d1c:	2b09      	cmp	r3, #9
 8000d1e:	d1f9      	bne.n	8000d14 <report_parse+0xc8>
                
                TEMP_SF[ucSensptr].type = *(ucBptr++);              // Store location of sensor type within the HID Report in struct   
 8000d20:	697b      	ldr	r3, [r7, #20]
 8000d22:	1c5a      	adds	r2, r3, #1
 8000d24:	617a      	str	r2, [r7, #20]
 8000d26:	7cfa      	ldrb	r2, [r7, #19]
 8000d28:	7818      	ldrb	r0, [r3, #0]
 8000d2a:	496a      	ldr	r1, [pc, #424]	; (8000ed4 <report_parse+0x288>)
 8000d2c:	4613      	mov	r3, r2
 8000d2e:	00db      	lsls	r3, r3, #3
 8000d30:	1a9b      	subs	r3, r3, r2
 8000d32:	440b      	add	r3, r1
 8000d34:	3301      	adds	r3, #1
 8000d36:	4602      	mov	r2, r0
 8000d38:	701a      	strb	r2, [r3, #0]
                bFlag = TRUE;                                       // Set the flag to show we are in a field of data that we desire
 8000d3a:	2301      	movs	r3, #1
 8000d3c:	747b      	strb	r3, [r7, #17]
            }
        }

        if (bFlag)                                                  // Check if we should proceed parsing within the HID_USAGE_SENSOR_Properties or simply continue incrementing until a new ID is found
 8000d3e:	7c7b      	ldrb	r3, [r7, #17]
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	f000 8129 	beq.w	8000f98 <report_parse+0x34c>
        {
            while((ucBptr - ucStrt) <= HID_FIELD.wRepDescLen)       // Search for relevant features HID_USAGE_SENSOR_Properties
 8000d46:	e0b8      	b.n	8000eba <report_parse+0x26e>
            {
                if (*ucBptr == HID_USAGE_SENSOR_PROPERTY)             
 8000d48:	697b      	ldr	r3, [r7, #20]
 8000d4a:	781b      	ldrb	r3, [r3, #0]
 8000d4c:	2b0a      	cmp	r3, #10
 8000d4e:	f040 80b1 	bne.w	8000eb4 <report_parse+0x268>
                {
                    ucBptr++;
 8000d52:	697b      	ldr	r3, [r7, #20]
 8000d54:	3301      	adds	r3, #1
 8000d56:	617b      	str	r3, [r7, #20]
                    if (*ucBptr == HID_USAGE_SENSOR_PROPERTY_CONN_TYPE) // Seach for sensor connection type and increment offset variable because this field is undesired  (in HID table:HID_USAGE_SENSOR_PROPERTY_SENSOR_CONNECTION_TYPE)
 8000d58:	697b      	ldr	r3, [r7, #20]
 8000d5a:	781b      	ldrb	r3, [r3, #0]
 8000d5c:	2b09      	cmp	r3, #9
 8000d5e:	d10b      	bne.n	8000d78 <report_parse+0x12c>
                    {
                        ucBptr++;
 8000d60:	697b      	ldr	r3, [r7, #20]
 8000d62:	3301      	adds	r3, #1
 8000d64:	617b      	str	r3, [r7, #20]
                        if (*(ucBptr++) == 0x03)                    // last parameter of HID_USAGE_SENSOR_PROPERTY_SENSOR_CONNECTION_TYPE (0x0A,0x09,0x03) 
 8000d66:	697b      	ldr	r3, [r7, #20]
 8000d68:	1c5a      	adds	r2, r3, #1
 8000d6a:	617a      	str	r2, [r7, #20]
 8000d6c:	781b      	ldrb	r3, [r3, #0]
 8000d6e:	2b03      	cmp	r3, #3
 8000d70:	d102      	bne.n	8000d78 <report_parse+0x12c>
                            ucUsageOffset++;                        //increment HID_USAGE_SENSOR_PROPERTY_... offset "pointer" (for later use in finding parameters within the GetReportFeature data)
 8000d72:	7cbb      	ldrb	r3, [r7, #18]
 8000d74:	3301      	adds	r3, #1
 8000d76:	74bb      	strb	r3, [r7, #18]
                    }
                    
                    if (*ucBptr == HID_USAGE_SENSOR_PROPERTY_RPT_STATE)  // Search for reporting state and increment offset variable because this field is undesired  (in HID table:HID_USAGE_SENSOR_PROPERTY_REPORTING_STATE)
 8000d78:	697b      	ldr	r3, [r7, #20]
 8000d7a:	781b      	ldrb	r3, [r3, #0]
 8000d7c:	2b16      	cmp	r3, #22
 8000d7e:	d10b      	bne.n	8000d98 <report_parse+0x14c>
                    {
                        ucBptr++;
 8000d80:	697b      	ldr	r3, [r7, #20]
 8000d82:	3301      	adds	r3, #1
 8000d84:	617b      	str	r3, [r7, #20]
                        if (*(ucBptr++) == 0x03)                    // last parameter of HID_USAGE_SENSOR_PROPERTY_REPORT_INTERVAL (0x0A,0x0E,0x03) 
 8000d86:	697b      	ldr	r3, [r7, #20]
 8000d88:	1c5a      	adds	r2, r3, #1
 8000d8a:	617a      	str	r2, [r7, #20]
 8000d8c:	781b      	ldrb	r3, [r3, #0]
 8000d8e:	2b03      	cmp	r3, #3
 8000d90:	d102      	bne.n	8000d98 <report_parse+0x14c>
                            ucUsageOffset++;                        //increment HID_USAGE_SENSOR_PROPERTY_... offset "pointer" (for later use in finding parameters within the GetReportFeature data)
 8000d92:	7cbb      	ldrb	r3, [r7, #18]
 8000d94:	3301      	adds	r3, #1
 8000d96:	74bb      	strb	r3, [r7, #18]
                    }

                    if (*ucBptr == HID_USAGE_SENSOR_PROPERTY_PWR_STATE)  // Search for power state and increment offset variable because this field is undesired  (in HID table : HID_USAGE_SENSOR_PROPERTY_POWER_STATE)
 8000d98:	697b      	ldr	r3, [r7, #20]
 8000d9a:	781b      	ldrb	r3, [r3, #0]
 8000d9c:	2b19      	cmp	r3, #25
 8000d9e:	d10b      	bne.n	8000db8 <report_parse+0x16c>
                    {
                        ucBptr++;
 8000da0:	697b      	ldr	r3, [r7, #20]
 8000da2:	3301      	adds	r3, #1
 8000da4:	617b      	str	r3, [r7, #20]
                        if (*(ucBptr++) == 0x03)                    // last parameter of HID_USAGE_SENSOR_PROPERTY_POWER_STATE (0x0A,0x19,0x03) 
 8000da6:	697b      	ldr	r3, [r7, #20]
 8000da8:	1c5a      	adds	r2, r3, #1
 8000daa:	617a      	str	r2, [r7, #20]
 8000dac:	781b      	ldrb	r3, [r3, #0]
 8000dae:	2b03      	cmp	r3, #3
 8000db0:	d102      	bne.n	8000db8 <report_parse+0x16c>
                            ucUsageOffset++;                        //increment HID_USAGE_SENSOR_PROPERTY_... offset "pointer" (for later use in finding parameters within the GetReportFeature data)
 8000db2:	7cbb      	ldrb	r3, [r7, #18]
 8000db4:	3301      	adds	r3, #1
 8000db6:	74bb      	strb	r3, [r7, #18]
                     }

                    if (*ucBptr == HID_USAGE_SENSOR_STATE_1)        // Search for sensor state and increment offset variable because this field is undesired  (in HID table:HID_USAGE_SENSOR_STATE)
 8000db8:	697b      	ldr	r3, [r7, #20]
 8000dba:	781b      	ldrb	r3, [r3, #0]
 8000dbc:	2b01      	cmp	r3, #1
 8000dbe:	d10b      	bne.n	8000dd8 <report_parse+0x18c>
                    {
                        ucBptr++;
 8000dc0:	697b      	ldr	r3, [r7, #20]
 8000dc2:	3301      	adds	r3, #1
 8000dc4:	617b      	str	r3, [r7, #20]
                        if (*(ucBptr++) == 0x02)                    // last parameter of HID_USAGE_SENSOR_STATE (0x0A,0x01,0x02) 
 8000dc6:	697b      	ldr	r3, [r7, #20]
 8000dc8:	1c5a      	adds	r2, r3, #1
 8000dca:	617a      	str	r2, [r7, #20]
 8000dcc:	781b      	ldrb	r3, [r3, #0]
 8000dce:	2b02      	cmp	r3, #2
 8000dd0:	d102      	bne.n	8000dd8 <report_parse+0x18c>
                            ucUsageOffset++;                        //increment HID_USAGE_SENSOR_PROPERTY_... offset "pointer" (for later use in finding parameters within the GetReportFeature data)
 8000dd2:	7cbb      	ldrb	r3, [r7, #18]
 8000dd4:	3301      	adds	r3, #1
 8000dd6:	74bb      	strb	r3, [r7, #18]
                     }

                    if (*ucBptr == HID_USAGE_SENSOR_PROPERTY_RPT_INT)  // Search for reporting interval. We desire this value so store it in our struct and then increment the offset  (in HID table:HID_USAGE_SENSOR_PROPERTY_REPORT_INTERVAL)
 8000dd8:	697b      	ldr	r3, [r7, #20]
 8000dda:	781b      	ldrb	r3, [r3, #0]
 8000ddc:	2b0e      	cmp	r3, #14
 8000dde:	d113      	bne.n	8000e08 <report_parse+0x1bc>
                    {
                        ucBptr++;
 8000de0:	697b      	ldr	r3, [r7, #20]
 8000de2:	3301      	adds	r3, #1
 8000de4:	617b      	str	r3, [r7, #20]
                        if (*(ucBptr++) == 0x03)                    // last parameter of HID_USAGE_SENSOR_PROPERTY_REPORT_INTERVAL (0x0A,0x0E,0x03)
 8000de6:	697b      	ldr	r3, [r7, #20]
 8000de8:	1c5a      	adds	r2, r3, #1
 8000dea:	617a      	str	r2, [r7, #20]
 8000dec:	781b      	ldrb	r3, [r3, #0]
 8000dee:	2b03      	cmp	r3, #3
 8000df0:	d10a      	bne.n	8000e08 <report_parse+0x1bc>
                            TEMP_SF[ucSensptr].DatRtOffset = ucUsageOffset++; //save & increment HID_USAGE_SENSOR_PROPERTY_... offset "pointer" (for later use in finding parameters within the GetReportFeature data)
 8000df2:	7cba      	ldrb	r2, [r7, #18]
 8000df4:	1c53      	adds	r3, r2, #1
 8000df6:	74bb      	strb	r3, [r7, #18]
 8000df8:	7cf9      	ldrb	r1, [r7, #19]
 8000dfa:	4836      	ldr	r0, [pc, #216]	; (8000ed4 <report_parse+0x288>)
 8000dfc:	460b      	mov	r3, r1
 8000dfe:	00db      	lsls	r3, r3, #3
 8000e00:	1a5b      	subs	r3, r3, r1
 8000e02:	4403      	add	r3, r0
 8000e04:	3302      	adds	r3, #2
 8000e06:	701a      	strb	r2, [r3, #0]
                    }

                    ucBptr++;                                       //increment position ptr
 8000e08:	697b      	ldr	r3, [r7, #20]
 8000e0a:	3301      	adds	r3, #1
 8000e0c:	617b      	str	r3, [r7, #20]

                    // NOTE: There is a different identifier for RAW data and that is why two identifiers are checked for here
                    if ( (*ucBptr == HID_USAGE_SENSOR_DATA_ACCU) || (*ucBptr == HID_USAGE_SENSOR_DATA_RAW_ACCU) )  // Search for sensor accuracy & increment offset variable because this field is undesired (in HID table:HID_USAGE_SENSOR_DATA(HID_USAGE_SENSOR_DATA_MOTION_ACCELERATION,HID_USAGE_SENSOR_DATA_MOD_ACCURACY))
 8000e0e:	697b      	ldr	r3, [r7, #20]
 8000e10:	781b      	ldrb	r3, [r3, #0]
 8000e12:	2b44      	cmp	r3, #68	; 0x44
 8000e14:	d003      	beq.n	8000e1e <report_parse+0x1d2>
 8000e16:	697b      	ldr	r3, [r7, #20]
 8000e18:	781b      	ldrb	r3, [r3, #0]
 8000e1a:	2b45      	cmp	r3, #69	; 0x45
 8000e1c:	d102      	bne.n	8000e24 <report_parse+0x1d8>
                        ucUsageOffset++;                            //increment HID_USAGE_SENSOR_PROPERTY_... offset "pointer" (for later use in finding parameters within the GetReportFeature data)
 8000e1e:	7cbb      	ldrb	r3, [r7, #18]
 8000e20:	3301      	adds	r3, #1
 8000e22:	74bb      	strb	r3, [r7, #18]

                    if ( (*ucBptr == HID_USAGE_SENSOR_DATA_RES) || (*ucBptr == HID_USAGE_SENSOR_DATA_RAW_RES) )    // Search for sensor resolution and increment offset variable because this field is undesired (in HID table: HID_USAGE_SENSOR_DATA(HID_USAGE_SENSOR_DATA_MOTION_ACCELERATION,HID_USAGE_SENSOR_DATA_MOD_RESOLUTION))
 8000e24:	697b      	ldr	r3, [r7, #20]
 8000e26:	781b      	ldrb	r3, [r3, #0]
 8000e28:	2b54      	cmp	r3, #84	; 0x54
 8000e2a:	d003      	beq.n	8000e34 <report_parse+0x1e8>
 8000e2c:	697b      	ldr	r3, [r7, #20]
 8000e2e:	781b      	ldrb	r3, [r3, #0]
 8000e30:	2b55      	cmp	r3, #85	; 0x55
 8000e32:	d102      	bne.n	8000e3a <report_parse+0x1ee>
                        ucUsageOffset++;                            //increment HID_USAGE_SENSOR_PROPERTY_... offset "pointer" (for later use in finding parameters within the GetReportFeature data)
 8000e34:	7cbb      	ldrb	r3, [r7, #18]
 8000e36:	3301      	adds	r3, #1
 8000e38:	74bb      	strb	r3, [r7, #18]

                    if ( (*ucBptr == HID_USAGE_SENSOR_DATA_MOD_SENS) || (*ucBptr == HID_USAGE_SENSOR_DATA_RAW_MOD_SENS) )  // Search for sensor sensitivity (HID_USAGE_SENSOR_DATA(HID_USAGE_SENSOR_DATA_MOTION_ACCELERATION,HID_USAGE_SENSOR_DATA_MOD_CHANGE_SENSITIVITY_ABS))
 8000e3a:	697b      	ldr	r3, [r7, #20]
 8000e3c:	781b      	ldrb	r3, [r3, #0]
 8000e3e:	2b14      	cmp	r3, #20
 8000e40:	d003      	beq.n	8000e4a <report_parse+0x1fe>
 8000e42:	697b      	ldr	r3, [r7, #20]
 8000e44:	781b      	ldrb	r3, [r3, #0]
 8000e46:	2b15      	cmp	r3, #21
 8000e48:	d11d      	bne.n	8000e86 <report_parse+0x23a>
                    {
                        TEMP_SF[ucSensptr].SensOffset = ucUsageOffset++; //save & increment HID_USAGE_SENSOR_PROPERTY_... offset "pointer" (for later use in finding parameters within the GetReportFeature data)                         
 8000e4a:	7cba      	ldrb	r2, [r7, #18]
 8000e4c:	1c53      	adds	r3, r2, #1
 8000e4e:	74bb      	strb	r3, [r7, #18]
 8000e50:	7cf9      	ldrb	r1, [r7, #19]
 8000e52:	4820      	ldr	r0, [pc, #128]	; (8000ed4 <report_parse+0x288>)
 8000e54:	460b      	mov	r3, r1
 8000e56:	00db      	lsls	r3, r3, #3
 8000e58:	1a5b      	subs	r3, r3, r1
 8000e5a:	4403      	add	r3, r0
 8000e5c:	3303      	adds	r3, #3
 8000e5e:	701a      	strb	r2, [r3, #0]
                        
                        while(*(ucBptr++) != HID_UNIT_EXP);         // Increment until exponent value of the data is found
 8000e60:	bf00      	nop
 8000e62:	697b      	ldr	r3, [r7, #20]
 8000e64:	1c5a      	adds	r2, r3, #1
 8000e66:	617a      	str	r2, [r7, #20]
 8000e68:	781b      	ldrb	r3, [r3, #0]
 8000e6a:	2b55      	cmp	r3, #85	; 0x55
 8000e6c:	d1f9      	bne.n	8000e62 <report_parse+0x216>
                        
                        TEMP_SF[ucSensptr].SensExp = *ucBptr;       // Store this value in the temp struct
 8000e6e:	7cfa      	ldrb	r2, [r7, #19]
 8000e70:	697b      	ldr	r3, [r7, #20]
 8000e72:	7818      	ldrb	r0, [r3, #0]
 8000e74:	4917      	ldr	r1, [pc, #92]	; (8000ed4 <report_parse+0x288>)
 8000e76:	4613      	mov	r3, r2
 8000e78:	00db      	lsls	r3, r3, #3
 8000e7a:	1a9b      	subs	r3, r3, r2
 8000e7c:	440b      	add	r3, r1
 8000e7e:	3304      	adds	r3, #4
 8000e80:	4602      	mov	r2, r0
 8000e82:	701a      	strb	r2, [r3, #0]
                            break;
 8000e84:	e022      	b.n	8000ecc <report_parse+0x280>
                    }

                    if ( (*ucBptr == HID_USAGE_SENSOR_DATA_MOD_MAX) || (*ucBptr == HID_USAGE_SENSOR_DATA_RAW_MOD_MAX) )   // Search for sensor MAX val and increment offset variable because this field is undesired HID_USAGE_SENSOR_DATA(HID_USAGE_SENSOR_DATA_MOTION_ACCELERATION,HID_USAGE_SENSOR_DATA_MOD_MAX)
 8000e86:	697b      	ldr	r3, [r7, #20]
 8000e88:	781b      	ldrb	r3, [r3, #0]
 8000e8a:	2b24      	cmp	r3, #36	; 0x24
 8000e8c:	d003      	beq.n	8000e96 <report_parse+0x24a>
 8000e8e:	697b      	ldr	r3, [r7, #20]
 8000e90:	781b      	ldrb	r3, [r3, #0]
 8000e92:	2b25      	cmp	r3, #37	; 0x25
 8000e94:	d102      	bne.n	8000e9c <report_parse+0x250>
                        ucUsageOffset++;                            //increment HID_USAGE_SENSOR_PROPERTY_... offset "pointer" (for later use in finding parameters within the GetReportFeature data)
 8000e96:	7cbb      	ldrb	r3, [r7, #18]
 8000e98:	3301      	adds	r3, #1
 8000e9a:	74bb      	strb	r3, [r7, #18]
                    
                    if ( (*ucBptr == HID_USAGE_SENSOR_DATA_MOD_MIN)  || (*ucBptr == HID_USAGE_SENSOR_DATA_RAW_MOD_MIN) )  // Search for sensor MIN val and increment offset variable because this field is undesired HID_USAGE_SENSOR_DATA(HID_USAGE_SENSOR_DATA_MOTION_ACCELERATION,HID_USAGE_SENSOR_DATA_MOD_MIN)
 8000e9c:	697b      	ldr	r3, [r7, #20]
 8000e9e:	781b      	ldrb	r3, [r3, #0]
 8000ea0:	2b34      	cmp	r3, #52	; 0x34
 8000ea2:	d003      	beq.n	8000eac <report_parse+0x260>
 8000ea4:	697b      	ldr	r3, [r7, #20]
 8000ea6:	781b      	ldrb	r3, [r3, #0]
 8000ea8:	2b35      	cmp	r3, #53	; 0x35
 8000eaa:	d106      	bne.n	8000eba <report_parse+0x26e>
                        ucUsageOffset++;                            //increment HID_USAGE_SENSOR_PROPERTY_... offset "pointer" (for later use in finding parameters within the GetReportFeature data)
 8000eac:	7cbb      	ldrb	r3, [r7, #18]
 8000eae:	3301      	adds	r3, #1
 8000eb0:	74bb      	strb	r3, [r7, #18]
 8000eb2:	e002      	b.n	8000eba <report_parse+0x26e>
                }
                
                else ucBptr++;                                      // If a new identifier has not yet been reached, continue traversing report descriptor 
 8000eb4:	697b      	ldr	r3, [r7, #20]
 8000eb6:	3301      	adds	r3, #1
 8000eb8:	617b      	str	r3, [r7, #20]
            while((ucBptr - ucStrt) <= HID_FIELD.wRepDescLen)       // Search for relevant features HID_USAGE_SENSOR_Properties
 8000eba:	697a      	ldr	r2, [r7, #20]
 8000ebc:	68fb      	ldr	r3, [r7, #12]
 8000ebe:	1ad3      	subs	r3, r2, r3
 8000ec0:	461a      	mov	r2, r3
 8000ec2:	4b05      	ldr	r3, [pc, #20]	; (8000ed8 <report_parse+0x28c>)
 8000ec4:	685b      	ldr	r3, [r3, #4]
 8000ec6:	429a      	cmp	r2, r3
 8000ec8:	f67f af3e 	bls.w	8000d48 <report_parse+0xfc>
            }
            
            ucUsageOffset = 0;                                      //reset HID_USAGE_SENSOR_PROPERTY_... offset "pointer" (for later use in finding parameters within the GetReportFeature data)
 8000ecc:	2300      	movs	r3, #0
 8000ece:	74bb      	strb	r3, [r7, #18]
            
            while((ucBptr - ucStrt) <= HID_FIELD.wRepDescLen)       // Search for relevant input features
 8000ed0:	e054      	b.n	8000f7c <report_parse+0x330>
 8000ed2:	bf00      	nop
 8000ed4:	200000ec 	.word	0x200000ec
 8000ed8:	20000140 	.word	0x20000140
            {
                if(*ucBptr == HID_USAGE_SENSOR_)                         
 8000edc:	697b      	ldr	r3, [r7, #20]
 8000ede:	781b      	ldrb	r3, [r3, #0]
 8000ee0:	2b0a      	cmp	r3, #10
 8000ee2:	d148      	bne.n	8000f76 <report_parse+0x32a>
                {
                    ucBptr++;                                       // Continue to next byte
 8000ee4:	697b      	ldr	r3, [r7, #20]
 8000ee6:	3301      	adds	r3, #1
 8000ee8:	617b      	str	r3, [r7, #20]
                    
                    if (*ucBptr == HID_USAGE_SENSOR_STATE_1)                  
 8000eea:	697b      	ldr	r3, [r7, #20]
 8000eec:	781b      	ldrb	r3, [r3, #0]
 8000eee:	2b01      	cmp	r3, #1
 8000ef0:	d10b      	bne.n	8000f0a <report_parse+0x2be>
                    {
                        ucBptr++;
 8000ef2:	697b      	ldr	r3, [r7, #20]
 8000ef4:	3301      	adds	r3, #1
 8000ef6:	617b      	str	r3, [r7, #20]
                        if(*(ucBptr++) == HID_USAGE_SENSOR_STATE_2) // Search for HID usage sensor state and increment offset variable because this field is undesired
 8000ef8:	697b      	ldr	r3, [r7, #20]
 8000efa:	1c5a      	adds	r2, r3, #1
 8000efc:	617a      	str	r2, [r7, #20]
 8000efe:	781b      	ldrb	r3, [r3, #0]
 8000f00:	2b02      	cmp	r3, #2
 8000f02:	d102      	bne.n	8000f0a <report_parse+0x2be>
                            ucUsageOffset++;                        //increment HID_USAGE_SENSOR_PROPERTY_... offset "pointer" (for later use in finding parameters within the GetReportFeature data)
 8000f04:	7cbb      	ldrb	r3, [r7, #18]
 8000f06:	3301      	adds	r3, #1
 8000f08:	74bb      	strb	r3, [r7, #18]
                    }

                    if (*ucBptr == HID_USAGE_SENSOR_EVENT_1)               
 8000f0a:	697b      	ldr	r3, [r7, #20]
 8000f0c:	781b      	ldrb	r3, [r3, #0]
 8000f0e:	2b02      	cmp	r3, #2
 8000f10:	d134      	bne.n	8000f7c <report_parse+0x330>
                    {
                        ucBptr++;                                   // Continue to next byte
 8000f12:	697b      	ldr	r3, [r7, #20]
 8000f14:	3301      	adds	r3, #1
 8000f16:	617b      	str	r3, [r7, #20]
                        if (*(ucBptr++) == HID_USAGE_SENSOR_EVENT_2)   // Search for HID usage sensor event and increment the offset variable
 8000f18:	697b      	ldr	r3, [r7, #20]
 8000f1a:	1c5a      	adds	r2, r3, #1
 8000f1c:	617a      	str	r2, [r7, #20]
 8000f1e:	781b      	ldrb	r3, [r3, #0]
 8000f20:	2b02      	cmp	r3, #2
 8000f22:	d12b      	bne.n	8000f7c <report_parse+0x330>
                        {    
                            ucUsageOffset++;                        //increment HID_USAGE_SENSOR_PROPERTY_... offset "pointer" (for later use in finding parameters within the GetReportFeature data)
 8000f24:	7cbb      	ldrb	r3, [r7, #18]
 8000f26:	3301      	adds	r3, #1
 8000f28:	74bb      	strb	r3, [r7, #18]
                            while(*(ucBptr++) != HID_END_COLLECTION); // end of the sensor event field signifies the start of desired input data
 8000f2a:	bf00      	nop
 8000f2c:	697b      	ldr	r3, [r7, #20]
 8000f2e:	1c5a      	adds	r2, r3, #1
 8000f30:	617a      	str	r2, [r7, #20]
 8000f32:	781b      	ldrb	r3, [r3, #0]
 8000f34:	2bc0      	cmp	r3, #192	; 0xc0
 8000f36:	d1f9      	bne.n	8000f2c <report_parse+0x2e0>
                            
                            TEMP_SF[ucSensptr].DatOffset = ucUsageOffset + 3; //save HID_USAGE_SENSOR_PROPERTY_... offset "pointer" (for later use in finding parameters within the GetReportFeature data) NOTE: offset an additional 3 for extra data received on GPIO interrupt
 8000f38:	7cfa      	ldrb	r2, [r7, #19]
 8000f3a:	7cbb      	ldrb	r3, [r7, #18]
 8000f3c:	3303      	adds	r3, #3
 8000f3e:	b2d8      	uxtb	r0, r3
 8000f40:	4999      	ldr	r1, [pc, #612]	; (80011a8 <report_parse+0x55c>)
 8000f42:	4613      	mov	r3, r2
 8000f44:	00db      	lsls	r3, r3, #3
 8000f46:	1a9b      	subs	r3, r3, r2
 8000f48:	440b      	add	r3, r1
 8000f4a:	3305      	adds	r3, #5
 8000f4c:	4602      	mov	r2, r0
 8000f4e:	701a      	strb	r2, [r3, #0]
                            
                            while(*(ucBptr++) != HID_UNIT_EXP);     // Search for, and store, the unit exponent value for the input data
 8000f50:	bf00      	nop
 8000f52:	697b      	ldr	r3, [r7, #20]
 8000f54:	1c5a      	adds	r2, r3, #1
 8000f56:	617a      	str	r2, [r7, #20]
 8000f58:	781b      	ldrb	r3, [r3, #0]
 8000f5a:	2b55      	cmp	r3, #85	; 0x55
 8000f5c:	d1f9      	bne.n	8000f52 <report_parse+0x306>
                            
                            TEMP_SF[ucSensptr].DatExp = *ucBptr;
 8000f5e:	7cfa      	ldrb	r2, [r7, #19]
 8000f60:	697b      	ldr	r3, [r7, #20]
 8000f62:	7818      	ldrb	r0, [r3, #0]
 8000f64:	4990      	ldr	r1, [pc, #576]	; (80011a8 <report_parse+0x55c>)
 8000f66:	4613      	mov	r3, r2
 8000f68:	00db      	lsls	r3, r3, #3
 8000f6a:	1a9b      	subs	r3, r3, r2
 8000f6c:	440b      	add	r3, r1
 8000f6e:	3306      	adds	r3, #6
 8000f70:	4602      	mov	r2, r0
 8000f72:	701a      	strb	r2, [r3, #0]
                            
                            break;
 8000f74:	e00a      	b.n	8000f8c <report_parse+0x340>
                        }
                    }
                }
                else ucBptr++;                                      // If desired identifiers haven't been reached, continue traversing HID Report Descriptor
 8000f76:	697b      	ldr	r3, [r7, #20]
 8000f78:	3301      	adds	r3, #1
 8000f7a:	617b      	str	r3, [r7, #20]
            while((ucBptr - ucStrt) <= HID_FIELD.wRepDescLen)       // Search for relevant input features
 8000f7c:	697a      	ldr	r2, [r7, #20]
 8000f7e:	68fb      	ldr	r3, [r7, #12]
 8000f80:	1ad3      	subs	r3, r2, r3
 8000f82:	461a      	mov	r2, r3
 8000f84:	4b89      	ldr	r3, [pc, #548]	; (80011ac <report_parse+0x560>)
 8000f86:	685b      	ldr	r3, [r3, #4]
 8000f88:	429a      	cmp	r2, r3
 8000f8a:	d9a7      	bls.n	8000edc <report_parse+0x290>
            }
            
            bFlag = FALSE;                                          // Reset the flag to 0 to show that we are done with descriptor data from this report ID
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	747b      	strb	r3, [r7, #17]
            ucSensptr++;                                            // Increment to the next sensor in the struct array of sensors
 8000f90:	7cfb      	ldrb	r3, [r7, #19]
 8000f92:	3301      	adds	r3, #1
 8000f94:	74fb      	strb	r3, [r7, #19]
 8000f96:	e002      	b.n	8000f9e <report_parse+0x352>
        }

        else ucBptr++;                                              // If desired identifiers haven't been reached, continue traversing HID Report Descriptor
 8000f98:	697b      	ldr	r3, [r7, #20]
 8000f9a:	3301      	adds	r3, #1
 8000f9c:	617b      	str	r3, [r7, #20]
    while( (ucBptr - ucStrt) <= HID_FIELD.wRepDescLen )             // Continue looping until end of report
 8000f9e:	697a      	ldr	r2, [r7, #20]
 8000fa0:	68fb      	ldr	r3, [r7, #12]
 8000fa2:	1ad3      	subs	r3, r2, r3
 8000fa4:	461a      	mov	r2, r3
 8000fa6:	4b81      	ldr	r3, [pc, #516]	; (80011ac <report_parse+0x560>)
 8000fa8:	685b      	ldr	r3, [r3, #4]
 8000faa:	429a      	cmp	r2, r3
 8000fac:	f67f ae60 	bls.w	8000c70 <report_parse+0x24>
 8000fb0:	e000      	b.n	8000fb4 <report_parse+0x368>
                break;                                              // end of the report has occurred
 8000fb2:	bf00      	nop
    }

    if ((ucBptr - ucStrt) > (HID_FIELD.wRepDescLen + 1))            // Sanity check to ensure the loop exited at the end of the report descriptor
 8000fb4:	697a      	ldr	r2, [r7, #20]
 8000fb6:	68fb      	ldr	r3, [r7, #12]
 8000fb8:	1ad3      	subs	r3, r2, r3
 8000fba:	461a      	mov	r2, r3
 8000fbc:	4b7b      	ldr	r3, [pc, #492]	; (80011ac <report_parse+0x560>)
 8000fbe:	685b      	ldr	r3, [r3, #4]
 8000fc0:	3301      	adds	r3, #1
 8000fc2:	429a      	cmp	r2, r3
 8000fc4:	d901      	bls.n	8000fca <report_parse+0x37e>
        return NO_EOC_FAIL;
 8000fc6:	2315      	movs	r3, #21
 8000fc8:	e0e9      	b.n	800119e <report_parse+0x552>

    for(ucSensptr = 0; ucSensptr < NUM_SENS; ucSensptr++)           // Sanity check to see if the desired fields were parsed correctly
 8000fca:	2300      	movs	r3, #0
 8000fcc:	74fb      	strb	r3, [r7, #19]
 8000fce:	e01a      	b.n	8001006 <report_parse+0x3ba>
    {
        if (TEMP_SF[ucSensptr].id == 0xFF)                          // If the ID == 0xFF it means that the sensor isn't present in the device
 8000fd0:	7cfa      	ldrb	r2, [r7, #19]
 8000fd2:	4975      	ldr	r1, [pc, #468]	; (80011a8 <report_parse+0x55c>)
 8000fd4:	4613      	mov	r3, r2
 8000fd6:	00db      	lsls	r3, r3, #3
 8000fd8:	1a9b      	subs	r3, r3, r2
 8000fda:	440b      	add	r3, r1
 8000fdc:	781b      	ldrb	r3, [r3, #0]
 8000fde:	2bff      	cmp	r3, #255	; 0xff
 8000fe0:	d00d      	beq.n	8000ffe <report_parse+0x3b2>
            continue;
        if (TEMP_SF[ucSensptr].id != (ucSensptr+1))                 // Make sure every filled struct has a valid sensor ID
 8000fe2:	7cfa      	ldrb	r2, [r7, #19]
 8000fe4:	4970      	ldr	r1, [pc, #448]	; (80011a8 <report_parse+0x55c>)
 8000fe6:	4613      	mov	r3, r2
 8000fe8:	00db      	lsls	r3, r3, #3
 8000fea:	1a9b      	subs	r3, r3, r2
 8000fec:	440b      	add	r3, r1
 8000fee:	781b      	ldrb	r3, [r3, #0]
 8000ff0:	461a      	mov	r2, r3
 8000ff2:	7cfb      	ldrb	r3, [r7, #19]
 8000ff4:	3301      	adds	r3, #1
 8000ff6:	429a      	cmp	r2, r3
 8000ff8:	d002      	beq.n	8001000 <report_parse+0x3b4>
             return REP_PARS_FAIL; 
 8000ffa:	2314      	movs	r3, #20
 8000ffc:	e0cf      	b.n	800119e <report_parse+0x552>
            continue;
 8000ffe:	bf00      	nop
    for(ucSensptr = 0; ucSensptr < NUM_SENS; ucSensptr++)           // Sanity check to see if the desired fields were parsed correctly
 8001000:	7cfb      	ldrb	r3, [r7, #19]
 8001002:	3301      	adds	r3, #1
 8001004:	74fb      	strb	r3, [r7, #19]
 8001006:	7cfb      	ldrb	r3, [r7, #19]
 8001008:	2b0b      	cmp	r3, #11
 800100a:	d9e1      	bls.n	8000fd0 <report_parse+0x384>
    }

    memset(&SENSOR, 0xFF, sizeof(SENSOR));                          // Init & Rearrange structs into order compatible with _VREGS structure            
 800100c:	2254      	movs	r2, #84	; 0x54
 800100e:	21ff      	movs	r1, #255	; 0xff
 8001010:	4867      	ldr	r0, [pc, #412]	; (80011b0 <report_parse+0x564>)
 8001012:	f006 f937 	bl	8007284 <memset>

    for (ucSensptr = 0; ucSensptr < NUM_SENS; ucSensptr++)          // go through the entire sensor list looking for sensor types
 8001016:	2300      	movs	r3, #0
 8001018:	74fb      	strb	r3, [r7, #19]
 800101a:	e0bb      	b.n	8001194 <report_parse+0x548>
    {
        if (TEMP_SF[ucSensptr].type == ACCEL_SENSOR_TYPE)           // Sensor type identifier for accelerometer
 800101c:	7cfa      	ldrb	r2, [r7, #19]
 800101e:	4962      	ldr	r1, [pc, #392]	; (80011a8 <report_parse+0x55c>)
 8001020:	4613      	mov	r3, r2
 8001022:	00db      	lsls	r3, r3, #3
 8001024:	1a9b      	subs	r3, r3, r2
 8001026:	440b      	add	r3, r1
 8001028:	3301      	adds	r3, #1
 800102a:	781b      	ldrb	r3, [r3, #0]
 800102c:	2b73      	cmp	r3, #115	; 0x73
 800102e:	d112      	bne.n	8001056 <report_parse+0x40a>
        {
            SENSOR[ACCEL_VREG_OFFSET] = TEMP_SF[ucSensptr];         // Store this struct as the first in the new order
 8001030:	7cfa      	ldrb	r2, [r7, #19]
 8001032:	485f      	ldr	r0, [pc, #380]	; (80011b0 <report_parse+0x564>)
 8001034:	495c      	ldr	r1, [pc, #368]	; (80011a8 <report_parse+0x55c>)
 8001036:	4613      	mov	r3, r2
 8001038:	00db      	lsls	r3, r3, #3
 800103a:	1a9b      	subs	r3, r3, r2
 800103c:	18ca      	adds	r2, r1, r3
 800103e:	4603      	mov	r3, r0
 8001040:	6810      	ldr	r0, [r2, #0]
 8001042:	6018      	str	r0, [r3, #0]
 8001044:	8891      	ldrh	r1, [r2, #4]
 8001046:	7992      	ldrb	r2, [r2, #6]
 8001048:	8099      	strh	r1, [r3, #4]
 800104a:	719a      	strb	r2, [r3, #6]
            _VREGS.SL.accel = TRUE;                                  // VREG01 accelerometer available bit(0) set
 800104c:	4a59      	ldr	r2, [pc, #356]	; (80011b4 <report_parse+0x568>)
 800104e:	7913      	ldrb	r3, [r2, #4]
 8001050:	f043 0301 	orr.w	r3, r3, #1
 8001054:	7113      	strb	r3, [r2, #4]
        }
        
        if (TEMP_SF[ucSensptr].type == GYRO_SENSOR_TYPE)            // Sensor type identifier for gyrometer
 8001056:	7cfa      	ldrb	r2, [r7, #19]
 8001058:	4953      	ldr	r1, [pc, #332]	; (80011a8 <report_parse+0x55c>)
 800105a:	4613      	mov	r3, r2
 800105c:	00db      	lsls	r3, r3, #3
 800105e:	1a9b      	subs	r3, r3, r2
 8001060:	440b      	add	r3, r1
 8001062:	3301      	adds	r3, #1
 8001064:	781b      	ldrb	r3, [r3, #0]
 8001066:	2b76      	cmp	r3, #118	; 0x76
 8001068:	d112      	bne.n	8001090 <report_parse+0x444>
        {
            SENSOR[GYRO_VREG_OFFSET] = TEMP_SF[ucSensptr];          // Store this struct as the second in the new order
 800106a:	7cfa      	ldrb	r2, [r7, #19]
 800106c:	4950      	ldr	r1, [pc, #320]	; (80011b0 <report_parse+0x564>)
 800106e:	484e      	ldr	r0, [pc, #312]	; (80011a8 <report_parse+0x55c>)
 8001070:	4613      	mov	r3, r2
 8001072:	00db      	lsls	r3, r3, #3
 8001074:	1a9b      	subs	r3, r3, r2
 8001076:	18c2      	adds	r2, r0, r3
 8001078:	1dcb      	adds	r3, r1, #7
 800107a:	6811      	ldr	r1, [r2, #0]
 800107c:	6019      	str	r1, [r3, #0]
 800107e:	8891      	ldrh	r1, [r2, #4]
 8001080:	7992      	ldrb	r2, [r2, #6]
 8001082:	8099      	strh	r1, [r3, #4]
 8001084:	719a      	strb	r2, [r3, #6]
            _VREGS.SL.gyro = TRUE;                                   // VREG01 gyrometer available bit(1) set
 8001086:	4a4b      	ldr	r2, [pc, #300]	; (80011b4 <report_parse+0x568>)
 8001088:	7913      	ldrb	r3, [r2, #4]
 800108a:	f043 0302 	orr.w	r3, r3, #2
 800108e:	7113      	strb	r3, [r2, #4]
        }
        
        if (TEMP_SF[ucSensptr].type == CMP_SENSOR_TYPE)             // Sensor type identifier for compass
 8001090:	7cfa      	ldrb	r2, [r7, #19]
 8001092:	4945      	ldr	r1, [pc, #276]	; (80011a8 <report_parse+0x55c>)
 8001094:	4613      	mov	r3, r2
 8001096:	00db      	lsls	r3, r3, #3
 8001098:	1a9b      	subs	r3, r3, r2
 800109a:	440b      	add	r3, r1
 800109c:	3301      	adds	r3, #1
 800109e:	781b      	ldrb	r3, [r3, #0]
 80010a0:	2b83      	cmp	r3, #131	; 0x83
 80010a2:	d113      	bne.n	80010cc <report_parse+0x480>
        {
            SENSOR[CMP_VREG_OFFSET] = TEMP_SF[ucSensptr];           // Store this struct as the third in the new order
 80010a4:	7cfa      	ldrb	r2, [r7, #19]
 80010a6:	4942      	ldr	r1, [pc, #264]	; (80011b0 <report_parse+0x564>)
 80010a8:	483f      	ldr	r0, [pc, #252]	; (80011a8 <report_parse+0x55c>)
 80010aa:	4613      	mov	r3, r2
 80010ac:	00db      	lsls	r3, r3, #3
 80010ae:	1a9b      	subs	r3, r3, r2
 80010b0:	18c2      	adds	r2, r0, r3
 80010b2:	f101 030e 	add.w	r3, r1, #14
 80010b6:	6811      	ldr	r1, [r2, #0]
 80010b8:	6019      	str	r1, [r3, #0]
 80010ba:	8891      	ldrh	r1, [r2, #4]
 80010bc:	7992      	ldrb	r2, [r2, #6]
 80010be:	8099      	strh	r1, [r3, #4]
 80010c0:	719a      	strb	r2, [r3, #6]
            _VREGS.SL.cmp = TRUE;                                    // VREG01 compass available bit(2) set
 80010c2:	4a3c      	ldr	r2, [pc, #240]	; (80011b4 <report_parse+0x568>)
 80010c4:	7913      	ldrb	r3, [r2, #4]
 80010c6:	f043 0304 	orr.w	r3, r3, #4
 80010ca:	7113      	strb	r3, [r2, #4]
        }
        
        if (TEMP_SF[ucSensptr].type == ORI_SENSOR_TYPE)             // Sensor type identifier for orientation sensor
 80010cc:	7cfa      	ldrb	r2, [r7, #19]
 80010ce:	4936      	ldr	r1, [pc, #216]	; (80011a8 <report_parse+0x55c>)
 80010d0:	4613      	mov	r3, r2
 80010d2:	00db      	lsls	r3, r3, #3
 80010d4:	1a9b      	subs	r3, r3, r2
 80010d6:	440b      	add	r3, r1
 80010d8:	3301      	adds	r3, #1
 80010da:	781b      	ldrb	r3, [r3, #0]
 80010dc:	2b8a      	cmp	r3, #138	; 0x8a
 80010de:	d113      	bne.n	8001108 <report_parse+0x4bc>
        {
            SENSOR[ORI_VREG_OFFSET] = TEMP_SF[ucSensptr];           // Store this struct as the fourth in the new order
 80010e0:	7cfa      	ldrb	r2, [r7, #19]
 80010e2:	4933      	ldr	r1, [pc, #204]	; (80011b0 <report_parse+0x564>)
 80010e4:	4830      	ldr	r0, [pc, #192]	; (80011a8 <report_parse+0x55c>)
 80010e6:	4613      	mov	r3, r2
 80010e8:	00db      	lsls	r3, r3, #3
 80010ea:	1a9b      	subs	r3, r3, r2
 80010ec:	18c2      	adds	r2, r0, r3
 80010ee:	f101 0315 	add.w	r3, r1, #21
 80010f2:	6811      	ldr	r1, [r2, #0]
 80010f4:	6019      	str	r1, [r3, #0]
 80010f6:	8891      	ldrh	r1, [r2, #4]
 80010f8:	7992      	ldrb	r2, [r2, #6]
 80010fa:	8099      	strh	r1, [r3, #4]
 80010fc:	719a      	strb	r2, [r3, #6]
            _VREGS.SL.ori = TRUE;                                    // VREG01 orientation available bit(3) set
 80010fe:	4a2d      	ldr	r2, [pc, #180]	; (80011b4 <report_parse+0x568>)
 8001100:	7913      	ldrb	r3, [r2, #4]
 8001102:	f043 0308 	orr.w	r3, r3, #8
 8001106:	7113      	strb	r3, [r2, #4]
        }
        
        if (TEMP_SF[ucSensptr].type == INCL_SENSOR_TYPE)            // Sensor type identifier for inclinometer
 8001108:	7cfa      	ldrb	r2, [r7, #19]
 800110a:	4927      	ldr	r1, [pc, #156]	; (80011a8 <report_parse+0x55c>)
 800110c:	4613      	mov	r3, r2
 800110e:	00db      	lsls	r3, r3, #3
 8001110:	1a9b      	subs	r3, r3, r2
 8001112:	440b      	add	r3, r1
 8001114:	3301      	adds	r3, #1
 8001116:	781b      	ldrb	r3, [r3, #0]
 8001118:	2b86      	cmp	r3, #134	; 0x86
 800111a:	d113      	bne.n	8001144 <report_parse+0x4f8>
        {
            SENSOR[INCL_VREG_OFFSET] = TEMP_SF[ucSensptr];          // Store this struct as the fifth in the new order
 800111c:	7cfa      	ldrb	r2, [r7, #19]
 800111e:	4924      	ldr	r1, [pc, #144]	; (80011b0 <report_parse+0x564>)
 8001120:	4821      	ldr	r0, [pc, #132]	; (80011a8 <report_parse+0x55c>)
 8001122:	4613      	mov	r3, r2
 8001124:	00db      	lsls	r3, r3, #3
 8001126:	1a9b      	subs	r3, r3, r2
 8001128:	18c2      	adds	r2, r0, r3
 800112a:	f101 031c 	add.w	r3, r1, #28
 800112e:	6810      	ldr	r0, [r2, #0]
 8001130:	6018      	str	r0, [r3, #0]
 8001132:	8891      	ldrh	r1, [r2, #4]
 8001134:	7992      	ldrb	r2, [r2, #6]
 8001136:	8099      	strh	r1, [r3, #4]
 8001138:	719a      	strb	r2, [r3, #6]
            _VREGS.SL.incl = TRUE;                                   // VREG01 gyrometer available bit(4) set
 800113a:	4a1e      	ldr	r2, [pc, #120]	; (80011b4 <report_parse+0x568>)
 800113c:	7913      	ldrb	r3, [r2, #4]
 800113e:	f043 0310 	orr.w	r3, r3, #16
 8001142:	7113      	strb	r3, [r2, #4]
        }
        
        if (TEMP_SF[ucSensptr].type == RAW_SENSOR_TYPE)             // Sensor type identifier for raw data
 8001144:	7cfa      	ldrb	r2, [r7, #19]
 8001146:	4918      	ldr	r1, [pc, #96]	; (80011a8 <report_parse+0x55c>)
 8001148:	4613      	mov	r3, r2
 800114a:	00db      	lsls	r3, r3, #3
 800114c:	1a9b      	subs	r3, r3, r2
 800114e:	440b      	add	r3, r1
 8001150:	3301      	adds	r3, #1
 8001152:	781b      	ldrb	r3, [r3, #0]
 8001154:	2be1      	cmp	r3, #225	; 0xe1
 8001156:	d11a      	bne.n	800118e <report_parse+0x542>
        {                                                           // NOTE: there is no VREG01 bit for raw sensors available 
            SENSOR[RAW_VREG_OFFSET+RAW_SENSOR_CNT] = TEMP_SF[ucSensptr]; // Store this struct as the 8th/9th/10th in the new order
 8001158:	7cfa      	ldrb	r2, [r7, #19]
 800115a:	4b17      	ldr	r3, [pc, #92]	; (80011b8 <report_parse+0x56c>)
 800115c:	781b      	ldrb	r3, [r3, #0]
 800115e:	1dd9      	adds	r1, r3, #7
 8001160:	4813      	ldr	r0, [pc, #76]	; (80011b0 <report_parse+0x564>)
 8001162:	460b      	mov	r3, r1
 8001164:	00db      	lsls	r3, r3, #3
 8001166:	1a5b      	subs	r3, r3, r1
 8001168:	4418      	add	r0, r3
 800116a:	490f      	ldr	r1, [pc, #60]	; (80011a8 <report_parse+0x55c>)
 800116c:	4613      	mov	r3, r2
 800116e:	00db      	lsls	r3, r3, #3
 8001170:	1a9b      	subs	r3, r3, r2
 8001172:	18ca      	adds	r2, r1, r3
 8001174:	4603      	mov	r3, r0
 8001176:	6811      	ldr	r1, [r2, #0]
 8001178:	6019      	str	r1, [r3, #0]
 800117a:	8891      	ldrh	r1, [r2, #4]
 800117c:	7992      	ldrb	r2, [r2, #6]
 800117e:	8099      	strh	r1, [r3, #4]
 8001180:	719a      	strb	r2, [r3, #6]
            RAW_SENSOR_CNT++;                                       // NOTE: pre-production SSC7150 F/W only enumerates 1 RAW sensor, so keep running count
 8001182:	4b0d      	ldr	r3, [pc, #52]	; (80011b8 <report_parse+0x56c>)
 8001184:	781b      	ldrb	r3, [r3, #0]
 8001186:	3301      	adds	r3, #1
 8001188:	b2da      	uxtb	r2, r3
 800118a:	4b0b      	ldr	r3, [pc, #44]	; (80011b8 <report_parse+0x56c>)
 800118c:	701a      	strb	r2, [r3, #0]
    for (ucSensptr = 0; ucSensptr < NUM_SENS; ucSensptr++)          // go through the entire sensor list looking for sensor types
 800118e:	7cfb      	ldrb	r3, [r7, #19]
 8001190:	3301      	adds	r3, #1
 8001192:	74fb      	strb	r3, [r7, #19]
 8001194:	7cfb      	ldrb	r3, [r7, #19]
 8001196:	2b0b      	cmp	r3, #11
 8001198:	f67f af40 	bls.w	800101c <report_parse+0x3d0>
        }     
    }
    
    return SUCCESS;
 800119c:	2300      	movs	r3, #0
}
 800119e:	4618      	mov	r0, r3
 80011a0:	3718      	adds	r7, #24
 80011a2:	46bd      	mov	sp, r7
 80011a4:	bd80      	pop	{r7, pc}
 80011a6:	bf00      	nop
 80011a8:	200000ec 	.word	0x200000ec
 80011ac:	20000140 	.word	0x20000140
 80011b0:	20000098 	.word	0x20000098
 80011b4:	20000f34 	.word	0x20000f34
 80011b8:	20000f30 	.word	0x20000f30

080011bc <HOST_SF_LIB_HID_Set_Report>:
* @param ReportBuffer pointer to data that needs to be sent to the device
* @param size specifies the size, in bytes,of the report buffer 
* @return completion_status 0=SUCCESS, failcode: 0x19=SET_RPT_FAIL
*/
UINT8 HOST_SF_LIB_HID_Set_Report(UINT8 type, UINT8 *ReportBuffer, UINT8 size)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b0ac      	sub	sp, #176	; 0xb0
 80011c0:	af02      	add	r7, sp, #8
 80011c2:	4603      	mov	r3, r0
 80011c4:	6039      	str	r1, [r7, #0]
 80011c6:	71fb      	strb	r3, [r7, #7]
 80011c8:	4613      	mov	r3, r2
 80011ca:	71bb      	strb	r3, [r7, #6]
    UINT8 ucTx_data[BUF_150];
    UINT8 ucRetStat;
    UINT8 ucCmdBytePtr;
    BOOL bVendorCmd = FALSE;
 80011cc:	2300      	movs	r3, #0
 80011ce:	f887 30a6 	strb.w	r3, [r7, #166]	; 0xa6

    if (size <= 0 || size >= (BUF_150 - RPT_LEN))
 80011d2:	79bb      	ldrb	r3, [r7, #6]
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d002      	beq.n	80011de <HOST_SF_LIB_HID_Set_Report+0x22>
 80011d8:	79bb      	ldrb	r3, [r7, #6]
 80011da:	2b8f      	cmp	r3, #143	; 0x8f
 80011dc:	d901      	bls.n	80011e2 <HOST_SF_LIB_HID_Set_Report+0x26>
        return SET_RPT_FAIL;
 80011de:	2319      	movs	r3, #25
 80011e0:	e066      	b.n	80012b0 <HOST_SF_LIB_HID_Set_Report+0xf4>
    
    if (ReportBuffer[0] == FLASH_UPDATE_RPT_ID)                     // the flash update (Vendor) commands have a different format
 80011e2:	683b      	ldr	r3, [r7, #0]
 80011e4:	781b      	ldrb	r3, [r3, #0]
 80011e6:	2b0e      	cmp	r3, #14
 80011e8:	d102      	bne.n	80011f0 <HOST_SF_LIB_HID_Set_Report+0x34>
        bVendorCmd = TRUE;
 80011ea:	2301      	movs	r3, #1
 80011ec:	f887 30a6 	strb.w	r3, [r7, #166]	; 0xa6
    
    ucTx_data[0] = HID_FIELD.wCmdReg;                               //command field bytes from HID config table
 80011f0:	4b31      	ldr	r3, [pc, #196]	; (80012b8 <HOST_SF_LIB_HID_Set_Report+0xfc>)
 80011f2:	691b      	ldr	r3, [r3, #16]
 80011f4:	b2db      	uxtb	r3, r3
 80011f6:	733b      	strb	r3, [r7, #12]
    ucTx_data[1] = (HID_FIELD.wCmdReg >> BYTE_SHIFT);               // Command register MSB
 80011f8:	4b2f      	ldr	r3, [pc, #188]	; (80012b8 <HOST_SF_LIB_HID_Set_Report+0xfc>)
 80011fa:	691b      	ldr	r3, [r3, #16]
 80011fc:	0a1b      	lsrs	r3, r3, #8
 80011fe:	b2db      	uxtb	r3, r3
 8001200:	737b      	strb	r3, [r7, #13]
    if (bVendorCmd)
 8001202:	f897 30a6 	ldrb.w	r3, [r7, #166]	; 0xa6
 8001206:	2b00      	cmp	r3, #0
 8001208:	d006      	beq.n	8001218 <HOST_SF_LIB_HID_Set_Report+0x5c>
        ucTx_data[2] = type | ReportBuffer[0];                      // HID Set command opcode low byte which includes the sensor's ReportID, high byte report type
 800120a:	683b      	ldr	r3, [r7, #0]
 800120c:	781a      	ldrb	r2, [r3, #0]
 800120e:	79fb      	ldrb	r3, [r7, #7]
 8001210:	4313      	orrs	r3, r2
 8001212:	b2db      	uxtb	r3, r3
 8001214:	73bb      	strb	r3, [r7, #14]
 8001216:	e006      	b.n	8001226 <HOST_SF_LIB_HID_Set_Report+0x6a>
    else
        ucTx_data[2] = type | ReportBuffer[2];
 8001218:	683b      	ldr	r3, [r7, #0]
 800121a:	3302      	adds	r3, #2
 800121c:	781a      	ldrb	r2, [r3, #0]
 800121e:	79fb      	ldrb	r3, [r7, #7]
 8001220:	4313      	orrs	r3, r2
 8001222:	b2db      	uxtb	r3, r3
 8001224:	73bb      	strb	r3, [r7, #14]
    ucTx_data[3] = SET_OPCODE;                                      // HID SetReport command opcode high byte
 8001226:	2303      	movs	r3, #3
 8001228:	73fb      	strb	r3, [r7, #15]
    ucTx_data[4] = HID_FIELD.wDatReg;                               //data field bytes from HID config table
 800122a:	4b23      	ldr	r3, [pc, #140]	; (80012b8 <HOST_SF_LIB_HID_Set_Report+0xfc>)
 800122c:	695b      	ldr	r3, [r3, #20]
 800122e:	b2db      	uxtb	r3, r3
 8001230:	743b      	strb	r3, [r7, #16]
    ucTx_data[5] = (HID_FIELD.wDatReg >> BYTE_SHIFT);
 8001232:	4b21      	ldr	r3, [pc, #132]	; (80012b8 <HOST_SF_LIB_HID_Set_Report+0xfc>)
 8001234:	695b      	ldr	r3, [r3, #20]
 8001236:	0a1b      	lsrs	r3, r3, #8
 8001238:	b2db      	uxtb	r3, r3
 800123a:	747b      	strb	r3, [r7, #17]

    ucCmdBytePtr = RPT_LEN;
 800123c:	2306      	movs	r3, #6
 800123e:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
    
    if (bVendorCmd)                                                 // flash update (vendor) commands have a different format
 8001242:	f897 30a6 	ldrb.w	r3, [r7, #166]	; 0xa6
 8001246:	2b00      	cmp	r3, #0
 8001248:	d003      	beq.n	8001252 <HOST_SF_LIB_HID_Set_Report+0x96>
        ReportBuffer++;                                             //skips 1st byte of input buffer
 800124a:	683b      	ldr	r3, [r7, #0]
 800124c:	3301      	adds	r3, #1
 800124e:	603b      	str	r3, [r7, #0]
 8001250:	e012      	b.n	8001278 <HOST_SF_LIB_HID_Set_Report+0xbc>
    else size++;
 8001252:	79bb      	ldrb	r3, [r7, #6]
 8001254:	3301      	adds	r3, #1
 8001256:	71bb      	strb	r3, [r7, #6]

    while (size--)
 8001258:	e00e      	b.n	8001278 <HOST_SF_LIB_HID_Set_Report+0xbc>
    {
        ucTx_data[ucCmdBytePtr++] = *(ReportBuffer++);              // Append input to the command
 800125a:	683b      	ldr	r3, [r7, #0]
 800125c:	1c5a      	adds	r2, r3, #1
 800125e:	603a      	str	r2, [r7, #0]
 8001260:	f897 20a7 	ldrb.w	r2, [r7, #167]	; 0xa7
 8001264:	1c51      	adds	r1, r2, #1
 8001266:	f887 10a7 	strb.w	r1, [r7, #167]	; 0xa7
 800126a:	4611      	mov	r1, r2
 800126c:	781a      	ldrb	r2, [r3, #0]
 800126e:	f101 03a8 	add.w	r3, r1, #168	; 0xa8
 8001272:	443b      	add	r3, r7
 8001274:	f803 2c9c 	strb.w	r2, [r3, #-156]
    while (size--)
 8001278:	79bb      	ldrb	r3, [r7, #6]
 800127a:	1e5a      	subs	r2, r3, #1
 800127c:	71ba      	strb	r2, [r7, #6]
 800127e:	2b00      	cmp	r3, #0
 8001280:	d1eb      	bne.n	800125a <HOST_SF_LIB_HID_Set_Report+0x9e>
    }

    ucRetStat = i2c_cmd_WrRd (WRITE,                                //issue SetReportOutput command to SSC7150
 8001282:	f107 020c 	add.w	r2, r7, #12
 8001286:	f897 10a7 	ldrb.w	r1, [r7, #167]	; 0xa7
 800128a:	2300      	movs	r3, #0
 800128c:	9301      	str	r3, [sp, #4]
 800128e:	2300      	movs	r3, #0
 8001290:	9300      	str	r3, [sp, #0]
 8001292:	2300      	movs	r3, #0
 8001294:	2001      	movs	r0, #1
 8001296:	f7ff f99d 	bl	80005d4 <i2c_cmd_WrRd>
 800129a:	4603      	mov	r3, r0
 800129c:	f887 30a5 	strb.w	r3, [r7, #165]	; 0xa5
                        ucTx_data,                                  //cmd buf
                        0,                                          //num of bytes to read initially
                        0,                                          //recv buf
                        FALSE);                                     //actual # of bytes SSC7150 returns is in 1st two bytes of read packet, this flag(=TRUE) means "use the 1st two bytes as the actual read packet length"

    if (ucRetStat != SUCCESS)
 80012a0:	f897 30a5 	ldrb.w	r3, [r7, #165]	; 0xa5
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d001      	beq.n	80012ac <HOST_SF_LIB_HID_Set_Report+0xf0>
    {
        return SET_RPT_FAIL;
 80012a8:	2319      	movs	r3, #25
 80012aa:	e001      	b.n	80012b0 <HOST_SF_LIB_HID_Set_Report+0xf4>
    }

    return ucRetStat;
 80012ac:	f897 30a5 	ldrb.w	r3, [r7, #165]	; 0xa5
}
 80012b0:	4618      	mov	r0, r3
 80012b2:	37a8      	adds	r7, #168	; 0xa8
 80012b4:	46bd      	mov	sp, r7
 80012b6:	bd80      	pop	{r7, pc}
 80012b8:	20000140 	.word	0x20000140

080012bc <HOST_SF_LIB_HID_Get_Report>:
* @param ReportBuffer pointer towhich the feature report data is read into 
* @param size specifies the size, in bytes, of the report buffer 
* @return completion_status 0=I2C_SUCCESS, failcode: 0x1C=HID_GET_RPT_INPT_FAIL,0x1D=HID_GET_RPT_FEAT_FAIL
*/
UINT8 HOST_SF_LIB_HID_Get_Report(UINT8 type, UINT8* ReportBuffer, UINT8 size)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b0aa      	sub	sp, #168	; 0xa8
 80012c0:	af02      	add	r7, sp, #8
 80012c2:	4603      	mov	r3, r0
 80012c4:	6039      	str	r1, [r7, #0]
 80012c6:	71fb      	strb	r3, [r7, #7]
 80012c8:	4613      	mov	r3, r2
 80012ca:	71bb      	strb	r3, [r7, #6]
    UINT8 ucTx_data[BUF_150];
    UINT8 ucRetStat;
    UINT8 ucCmdBytePtr;

    ucTx_data[0] = HID_FIELD.wCmdReg;                               //command field bytes from HID config table
 80012cc:	4b1e      	ldr	r3, [pc, #120]	; (8001348 <HOST_SF_LIB_HID_Get_Report+0x8c>)
 80012ce:	691b      	ldr	r3, [r3, #16]
 80012d0:	b2db      	uxtb	r3, r3
 80012d2:	723b      	strb	r3, [r7, #8]
    ucTx_data[1] = (HID_FIELD.wCmdReg >> BYTE_SHIFT);               // Command register MSB
 80012d4:	4b1c      	ldr	r3, [pc, #112]	; (8001348 <HOST_SF_LIB_HID_Get_Report+0x8c>)
 80012d6:	691b      	ldr	r3, [r3, #16]
 80012d8:	0a1b      	lsrs	r3, r3, #8
 80012da:	b2db      	uxtb	r3, r3
 80012dc:	727b      	strb	r3, [r7, #9]
    ucTx_data[2] = type | ReportBuffer[0];                          // HID Get command opcode low byte which includes the sensor's ReportID, high byte report type
 80012de:	683b      	ldr	r3, [r7, #0]
 80012e0:	781a      	ldrb	r2, [r3, #0]
 80012e2:	79fb      	ldrb	r3, [r7, #7]
 80012e4:	4313      	orrs	r3, r2
 80012e6:	b2db      	uxtb	r3, r3
 80012e8:	72bb      	strb	r3, [r7, #10]
    ucTx_data[3] = GET_RPT_CMD_MSB;                                 // HID GetReport command opcode high byte
 80012ea:	2302      	movs	r3, #2
 80012ec:	72fb      	strb	r3, [r7, #11]
    ucTx_data[4] = HID_FIELD.wDatReg;                               //data field bytes from HID config table
 80012ee:	4b16      	ldr	r3, [pc, #88]	; (8001348 <HOST_SF_LIB_HID_Get_Report+0x8c>)
 80012f0:	695b      	ldr	r3, [r3, #20]
 80012f2:	b2db      	uxtb	r3, r3
 80012f4:	733b      	strb	r3, [r7, #12]
    ucTx_data[5] = (HID_FIELD.wDatReg >> BYTE_SHIFT);
 80012f6:	4b14      	ldr	r3, [pc, #80]	; (8001348 <HOST_SF_LIB_HID_Get_Report+0x8c>)
 80012f8:	695b      	ldr	r3, [r3, #20]
 80012fa:	0a1b      	lsrs	r3, r3, #8
 80012fc:	b2db      	uxtb	r3, r3
 80012fe:	737b      	strb	r3, [r7, #13]

    ucCmdBytePtr = RPT_LEN;
 8001300:	2306      	movs	r3, #6
 8001302:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f

    ucRetStat = i2c_cmd_WrRd (WR_RD,                                 //issue SetReportOutput command to SSC7150
 8001306:	f107 0208 	add.w	r2, r7, #8
 800130a:	f897 109f 	ldrb.w	r1, [r7, #159]	; 0x9f
 800130e:	2301      	movs	r3, #1
 8001310:	9301      	str	r3, [sp, #4]
 8001312:	683b      	ldr	r3, [r7, #0]
 8001314:	9300      	str	r3, [sp, #0]
 8001316:	2303      	movs	r3, #3
 8001318:	2003      	movs	r0, #3
 800131a:	f7ff f95b 	bl	80005d4 <i2c_cmd_WrRd>
 800131e:	4603      	mov	r3, r0
 8001320:	f887 309e 	strb.w	r3, [r7, #158]	; 0x9e
                        ucTx_data,                                  //cmd buf
                        BYTE_ADJ_VAL,                               //num of bytes to read initially
                        ReportBuffer,                               //recv buf
                        TRUE);                                      //actual # of bytes SSC7150 returns is in 1st two bytes of read packet, this flag(=TRUE) means "use the 1st two bytes as the actual read packet length"

    if (ucRetStat != SUCCESS)
 8001324:	f897 309e 	ldrb.w	r3, [r7, #158]	; 0x9e
 8001328:	2b00      	cmp	r3, #0
 800132a:	d006      	beq.n	800133a <HOST_SF_LIB_HID_Get_Report+0x7e>
    {
        if (type == GET_RPT_FEAT)
 800132c:	79fb      	ldrb	r3, [r7, #7]
 800132e:	2b30      	cmp	r3, #48	; 0x30
 8001330:	d101      	bne.n	8001336 <HOST_SF_LIB_HID_Get_Report+0x7a>
            return HID_GET_RPT_FEAT_FAIL;
 8001332:	231d      	movs	r3, #29
 8001334:	e003      	b.n	800133e <HOST_SF_LIB_HID_Get_Report+0x82>
        else
            return HID_GET_RPT_INPT_FAIL;
 8001336:	231c      	movs	r3, #28
 8001338:	e001      	b.n	800133e <HOST_SF_LIB_HID_Get_Report+0x82>
    }

    return ucRetStat;
 800133a:	f897 309e 	ldrb.w	r3, [r7, #158]	; 0x9e
}
 800133e:	4618      	mov	r0, r3
 8001340:	37a0      	adds	r7, #160	; 0xa0
 8001342:	46bd      	mov	sp, r7
 8001344:	bd80      	pop	{r7, pc}
 8001346:	bf00      	nop
 8001348:	20000140 	.word	0x20000140

0800134c <Wake_signal>:
* @note        assert wake signal on RE9, wait 1 ms, deassert
* @param
* @return
*/
void Wake_signal()
{
 800134c:	b580      	push	{r7, lr}
 800134e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET); //assert wake signal
 8001350:	2200      	movs	r2, #0
 8001352:	2101      	movs	r1, #1
 8001354:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001358:	f000 ff82 	bl	8002260 <HAL_GPIO_WritePin>
    osDelay(2000); //spec says 3�s assertion, let's use ms delay and wait ~2 ms
 800135c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001360:	f003 ff2c 	bl	80051bc <osDelay>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET);  //de-assert wake signal
 8001364:	2201      	movs	r2, #1
 8001366:	2101      	movs	r1, #1
 8001368:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800136c:	f000 ff78 	bl	8002260 <HAL_GPIO_WritePin>
}
 8001370:	bf00      	nop
 8001372:	bd80      	pop	{r7, pc}

08001374 <VREG_init>:
* @note        Inits VREG registers, get HID config & report descriptor tables, retrieves all device features
* @param 
* @return error status 0=SUCCESS, failcodes: 0x11=HID_DESC_FAIL, 0x12=RPT_DESC_FAIL, 0x18=RESET_FAIL 
*/ 
UINT8 VREG_init() 
{
 8001374:	b580      	push	{r7, lr}
 8001376:	b08c      	sub	sp, #48	; 0x30
 8001378:	af00      	add	r7, sp, #0
    UINT8 ucBuf[BUF_40];                                           
    UINT8 ucSensor_num;
    
        
    memset(&_VREGS, 0x00, sizeof(_VREGS));                            // Initialize VREG registers 
 800137a:	f44f 7286 	mov.w	r2, #268	; 0x10c
 800137e:	2100      	movs	r1, #0
 8001380:	4841      	ldr	r0, [pc, #260]	; (8001488 <VREG_init+0x114>)
 8001382:	f005 ff7f 	bl	8007284 <memset>

    
    if ( hid_i2c_descriptor_handler(GET_HID_DESC) )                 // get HID descriptor from SSC7150
 8001386:	2001      	movs	r0, #1
 8001388:	f7ff f9b6 	bl	80006f8 <hid_i2c_descriptor_handler>
 800138c:	4603      	mov	r3, r0
 800138e:	2b00      	cmp	r3, #0
 8001390:	d008      	beq.n	80013a4 <VREG_init+0x30>
    {
        _VREGS.stat.stat4.SHStartStatus = VREG_SHSTART_FAIL;         // update status register (VREG 0x3F) for failure to get HID descriptor
 8001392:	4a3d      	ldr	r2, [pc, #244]	; (8001488 <VREG_init+0x114>)
 8001394:	f892 3108 	ldrb.w	r3, [r2, #264]	; 0x108
 8001398:	f043 0318 	orr.w	r3, r3, #24
 800139c:	f882 3108 	strb.w	r3, [r2, #264]	; 0x108
        return HID_DESC_FAIL;
 80013a0:	2311      	movs	r3, #17
 80013a2:	e06c      	b.n	800147e <VREG_init+0x10a>
    }        
    
    hid_i2c_cmd_process(ucBuf, POWER_ON, ARB_ID);                   // Issue HID Power ON command to SSC7150 (NOTE: 'ucBuf' and 'ARB_ID' are don't cares for POWER_ON command)
 80013a4:	1d3b      	adds	r3, r7, #4
 80013a6:	2201      	movs	r2, #1
 80013a8:	2102      	movs	r1, #2
 80013aa:	4618      	mov	r0, r3
 80013ac:	f7ff fa7c 	bl	80008a8 <hid_i2c_cmd_process>
    
    _VREGS.SHC.reset = VREG_RESET_INIT;                              //set the SHC reset bit to indicate this operation has not yet completed successfully
 80013b0:	4a35      	ldr	r2, [pc, #212]	; (8001488 <VREG_init+0x114>)
 80013b2:	7813      	ldrb	r3, [r2, #0]
 80013b4:	f043 0308 	orr.w	r3, r3, #8
 80013b8:	7013      	strb	r3, [r2, #0]
    if ( hid_i2c_cmd_process (ucBuf, RESET_DEV_CMD, ARB_ID) )       // Issue HID Reset command  (NOTE: 'ucBuf' and 'ARB_ID' are don't cares for RESET_REG command)
 80013ba:	1d3b      	adds	r3, r7, #4
 80013bc:	2201      	movs	r2, #1
 80013be:	2101      	movs	r1, #1
 80013c0:	4618      	mov	r0, r3
 80013c2:	f7ff fa71 	bl	80008a8 <hid_i2c_cmd_process>
 80013c6:	4603      	mov	r3, r0
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d008      	beq.n	80013de <VREG_init+0x6a>
    {
        _VREGS.stat.stat4.SHStartStatus = VREG_SHSTART_FAIL;         // If HID Reset fails, update status register (VREG 0x3F)
 80013cc:	4a2e      	ldr	r2, [pc, #184]	; (8001488 <VREG_init+0x114>)
 80013ce:	f892 3108 	ldrb.w	r3, [r2, #264]	; 0x108
 80013d2:	f043 0318 	orr.w	r3, r3, #24
 80013d6:	f882 3108 	strb.w	r3, [r2, #264]	; 0x108
        return RESET_FAIL;
 80013da:	2318      	movs	r3, #24
 80013dc:	e04f      	b.n	800147e <VREG_init+0x10a>
    }    
    
    if ( hid_i2c_descriptor_handler(GET_RPT_DESC) )                 // Get HID Report descriptor from SSC7150 
 80013de:	2002      	movs	r0, #2
 80013e0:	f7ff f98a 	bl	80006f8 <hid_i2c_descriptor_handler>
 80013e4:	4603      	mov	r3, r0
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d008      	beq.n	80013fc <VREG_init+0x88>
    {
        _VREGS.stat.stat4.SHStartStatus = VREG_SHSTART_FAIL;         // HID report descriptor error, update status register (VREG 0x3F)
 80013ea:	4a27      	ldr	r2, [pc, #156]	; (8001488 <VREG_init+0x114>)
 80013ec:	f892 3108 	ldrb.w	r3, [r2, #264]	; 0x108
 80013f0:	f043 0318 	orr.w	r3, r3, #24
 80013f4:	f882 3108 	strb.w	r3, [r2, #264]	; 0x108
        return RPT_DESC_FAIL;
 80013f8:	2312      	movs	r3, #18
 80013fa:	e040      	b.n	800147e <VREG_init+0x10a>
    }       
    
    for (ucSensor_num = 0; ucSensor_num <= NUM_SENS; ucSensor_num++) //go through the sensor list but only GetFeatureReport for valid ids   
 80013fc:	2300      	movs	r3, #0
 80013fe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8001402:	e025      	b.n	8001450 <VREG_init+0xdc>
    {
        if (SENSOR[ucSensor_num].id != 0xFF && SENSOR[ucSensor_num].id != 0)
 8001404:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8001408:	4920      	ldr	r1, [pc, #128]	; (800148c <VREG_init+0x118>)
 800140a:	4613      	mov	r3, r2
 800140c:	00db      	lsls	r3, r3, #3
 800140e:	1a9b      	subs	r3, r3, r2
 8001410:	440b      	add	r3, r1
 8001412:	781b      	ldrb	r3, [r3, #0]
 8001414:	2bff      	cmp	r3, #255	; 0xff
 8001416:	d016      	beq.n	8001446 <VREG_init+0xd2>
 8001418:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800141c:	491b      	ldr	r1, [pc, #108]	; (800148c <VREG_init+0x118>)
 800141e:	4613      	mov	r3, r2
 8001420:	00db      	lsls	r3, r3, #3
 8001422:	1a9b      	subs	r3, r3, r2
 8001424:	440b      	add	r3, r1
 8001426:	781b      	ldrb	r3, [r3, #0]
 8001428:	2b00      	cmp	r3, #0
 800142a:	d00c      	beq.n	8001446 <VREG_init+0xd2>
        {
            hid_i2c_cmd_process(ucBuf, HID_GET_RPT_FEAT, SENSOR[ucSensor_num].id);  // Get feature report for all valid sensors and update _VREGS register
 800142c:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8001430:	4916      	ldr	r1, [pc, #88]	; (800148c <VREG_init+0x118>)
 8001432:	4613      	mov	r3, r2
 8001434:	00db      	lsls	r3, r3, #3
 8001436:	1a9b      	subs	r3, r3, r2
 8001438:	440b      	add	r3, r1
 800143a:	781a      	ldrb	r2, [r3, #0]
 800143c:	1d3b      	adds	r3, r7, #4
 800143e:	2105      	movs	r1, #5
 8001440:	4618      	mov	r0, r3
 8001442:	f7ff fa31 	bl	80008a8 <hid_i2c_cmd_process>
    for (ucSensor_num = 0; ucSensor_num <= NUM_SENS; ucSensor_num++) //go through the sensor list but only GetFeatureReport for valid ids   
 8001446:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800144a:	3301      	adds	r3, #1
 800144c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8001450:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001454:	2b0c      	cmp	r3, #12
 8001456:	d9d5      	bls.n	8001404 <VREG_init+0x90>
        }
    }

    
    _VREGS.stat.stat4.SHStartStatus = VREG_SHSTART_SUCCESS;          // HID startup successful, update status register (VREG 0x3F) 
 8001458:	4a0b      	ldr	r2, [pc, #44]	; (8001488 <VREG_init+0x114>)
 800145a:	f892 3108 	ldrb.w	r3, [r2, #264]	; 0x108
 800145e:	2101      	movs	r1, #1
 8001460:	f361 03c4 	bfi	r3, r1, #3, #2
 8001464:	f882 3108 	strb.w	r3, [r2, #264]	; 0x108

    _VREGS.SHC.SHwake = TRUE;                                        // HID device is now awake and ready for operation
 8001468:	4a07      	ldr	r2, [pc, #28]	; (8001488 <VREG_init+0x114>)
 800146a:	7813      	ldrb	r3, [r2, #0]
 800146c:	f043 0301 	orr.w	r3, r3, #1
 8001470:	7013      	strb	r3, [r2, #0]
    _VREGS.SHC.SHstart = TRUE;
 8001472:	4a05      	ldr	r2, [pc, #20]	; (8001488 <VREG_init+0x114>)
 8001474:	7813      	ldrb	r3, [r2, #0]
 8001476:	f043 0304 	orr.w	r3, r3, #4
 800147a:	7013      	strb	r3, [r2, #0]

    return SUCCESS;
 800147c:	2300      	movs	r3, #0
}
 800147e:	4618      	mov	r0, r3
 8001480:	3730      	adds	r7, #48	; 0x30
 8001482:	46bd      	mov	sp, r7
 8001484:	bd80      	pop	{r7, pc}
 8001486:	bf00      	nop
 8001488:	20000f34 	.word	0x20000f34
 800148c:	20000098 	.word	0x20000098

08001490 <main>:

const osTimerAttr_t fiftyMsTimer_attributes = { .name = "fiftyMsTimer" };

/* *********************** Main *********************** */

int main(void) {
 8001490:	b580      	push	{r7, lr}
 8001492:	af00      	add	r7, sp, #0
	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8001494:	f000 fc47 	bl	8001d26 <HAL_Init>

	/* Configure the system clock */
	SystemClock_Config();
 8001498:	f000 f8f8 	bl	800168c <SystemClock_Config>

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800149c:	f000 f9c8 	bl	8001830 <MX_GPIO_Init>
	MX_USART2_UART_Init();
 80014a0:	f000 f996 	bl	80017d0 <MX_USART2_UART_Init>
	MX_I2C1_Init();
 80014a4:	f000 f954 	bl	8001750 <MX_I2C1_Init>

	/* Init scheduler */
	osKernelInitialize();
 80014a8:	f003 fdd2 	bl	8005050 <osKernelInitialize>

	/* Create the timer(s) */
	getNewDataTimerHandle = osTimerNew(getNewDataCallback, osTimerPeriodic,
 80014ac:	4b1e      	ldr	r3, [pc, #120]	; (8001528 <main+0x98>)
 80014ae:	2200      	movs	r2, #0
 80014b0:	2101      	movs	r1, #1
 80014b2:	481e      	ldr	r0, [pc, #120]	; (800152c <main+0x9c>)
 80014b4:	f003 feb2 	bl	800521c <osTimerNew>
 80014b8:	4603      	mov	r3, r0
 80014ba:	4a1d      	ldr	r2, [pc, #116]	; (8001530 <main+0xa0>)
 80014bc:	6013      	str	r3, [r2, #0]
			NULL, &getNewDataTimer_attributes);
	i2cTimerHandle = osTimerNew(i2cTimerCallback, osTimerPeriodic, NULL,
 80014be:	4b1d      	ldr	r3, [pc, #116]	; (8001534 <main+0xa4>)
 80014c0:	2200      	movs	r2, #0
 80014c2:	2101      	movs	r1, #1
 80014c4:	481c      	ldr	r0, [pc, #112]	; (8001538 <main+0xa8>)
 80014c6:	f003 fea9 	bl	800521c <osTimerNew>
 80014ca:	4603      	mov	r3, r0
 80014cc:	4a1b      	ldr	r2, [pc, #108]	; (800153c <main+0xac>)
 80014ce:	6013      	str	r3, [r2, #0]
			&i2cTimer_attributes);
	fiftyMsTimerHandle = osTimerNew(fiftyMsTimerCallback, osTimerPeriodic, NULL,
 80014d0:	4b1b      	ldr	r3, [pc, #108]	; (8001540 <main+0xb0>)
 80014d2:	2200      	movs	r2, #0
 80014d4:	2101      	movs	r1, #1
 80014d6:	481b      	ldr	r0, [pc, #108]	; (8001544 <main+0xb4>)
 80014d8:	f003 fea0 	bl	800521c <osTimerNew>
 80014dc:	4603      	mov	r3, r0
 80014de:	4a1a      	ldr	r2, [pc, #104]	; (8001548 <main+0xb8>)
 80014e0:	6013      	str	r3, [r2, #0]
			&fiftyMsTimer_attributes);

	/* Create the thread(s) */
	inputTaskHandle = osThreadNew(StartInputTask, NULL, &inputTask_attributes);
 80014e2:	4a1a      	ldr	r2, [pc, #104]	; (800154c <main+0xbc>)
 80014e4:	2100      	movs	r1, #0
 80014e6:	481a      	ldr	r0, [pc, #104]	; (8001550 <main+0xc0>)
 80014e8:	f003 fdd6 	bl	8005098 <osThreadNew>
 80014ec:	4603      	mov	r3, r0
 80014ee:	4a19      	ldr	r2, [pc, #100]	; (8001554 <main+0xc4>)
 80014f0:	6013      	str	r3, [r2, #0]
	processTaskHandle = osThreadNew(StartProcessTask, NULL,
 80014f2:	4a19      	ldr	r2, [pc, #100]	; (8001558 <main+0xc8>)
 80014f4:	2100      	movs	r1, #0
 80014f6:	4819      	ldr	r0, [pc, #100]	; (800155c <main+0xcc>)
 80014f8:	f003 fdce 	bl	8005098 <osThreadNew>
 80014fc:	4603      	mov	r3, r0
 80014fe:	4a18      	ldr	r2, [pc, #96]	; (8001560 <main+0xd0>)
 8001500:	6013      	str	r3, [r2, #0]
			&processTask_attributes);
	outputTaskHandle = osThreadNew(StartOutputTask, NULL,
 8001502:	4a18      	ldr	r2, [pc, #96]	; (8001564 <main+0xd4>)
 8001504:	2100      	movs	r1, #0
 8001506:	4818      	ldr	r0, [pc, #96]	; (8001568 <main+0xd8>)
 8001508:	f003 fdc6 	bl	8005098 <osThreadNew>
 800150c:	4603      	mov	r3, r0
 800150e:	4a17      	ldr	r2, [pc, #92]	; (800156c <main+0xdc>)
 8001510:	6013      	str	r3, [r2, #0]
	//osTimerStart(getNewDataTimerHandle, DATA_REFRESH_CYCLE_IN_MS);

	/* Start scheduler */
	//osKernelStart();

	Wake_signal();
 8001512:	f7ff ff1b 	bl	800134c <Wake_signal>
	VREG_init();
 8001516:	f7ff ff2d 	bl	8001374 <VREG_init>

	while (1) {

		/* We should never get here */
		for (;;) {
			Wake_signal();
 800151a:	f7ff ff17 	bl	800134c <Wake_signal>
			//_rawGyro();  // Note: array has 7 elements, not 8
			osDelay(3000);
 800151e:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8001522:	f003 fe4b 	bl	80051bc <osDelay>
			Wake_signal();
 8001526:	e7f8      	b.n	800151a <main+0x8a>
 8001528:	08007c6c 	.word	0x08007c6c
 800152c:	080015a9 	.word	0x080015a9
 8001530:	20001124 	.word	0x20001124
 8001534:	08007c7c 	.word	0x08007c7c
 8001538:	080015bd 	.word	0x080015bd
 800153c:	20001128 	.word	0x20001128
 8001540:	08007c8c 	.word	0x08007c8c
 8001544:	080015e5 	.word	0x080015e5
 8001548:	2000112c 	.word	0x2000112c
 800154c:	08007c00 	.word	0x08007c00
 8001550:	08001571 	.word	0x08001571
 8001554:	20001118 	.word	0x20001118
 8001558:	08007c24 	.word	0x08007c24
 800155c:	08001585 	.word	0x08001585
 8001560:	2000111c 	.word	0x2000111c
 8001564:	08007c48 	.word	0x08007c48
 8001568:	08001597 	.word	0x08001597
 800156c:	20001120 	.word	0x20001120

08001570 <StartInputTask>:



/* *********************** Task Functions *********************** */

void StartInputTask(void *argument) {
 8001570:	b480      	push	{r7}
 8001572:	b083      	sub	sp, #12
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]


}
 8001578:	bf00      	nop
 800157a:	370c      	adds	r7, #12
 800157c:	46bd      	mov	sp, r7
 800157e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001582:	4770      	bx	lr

08001584 <StartProcessTask>:

void StartProcessTask(void *argument) {
 8001584:	b580      	push	{r7, lr}
 8001586:	b082      	sub	sp, #8
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
	for (;;) {
		osDelay(1000);
 800158c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001590:	f003 fe14 	bl	80051bc <osDelay>
 8001594:	e7fa      	b.n	800158c <StartProcessTask+0x8>

08001596 <StartOutputTask>:
	}
}

void StartOutputTask(void *argument) {
 8001596:	b580      	push	{r7, lr}
 8001598:	b082      	sub	sp, #8
 800159a:	af00      	add	r7, sp, #0
 800159c:	6078      	str	r0, [r7, #4]
	for (;;) {
		osDelay(1000);
 800159e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80015a2:	f003 fe0b 	bl	80051bc <osDelay>
 80015a6:	e7fa      	b.n	800159e <StartOutputTask+0x8>

080015a8 <getNewDataCallback>:
}


/* *********************** Callbacks & ISRs *********************** */

void getNewDataCallback(void *argument) {
 80015a8:	b480      	push	{r7}
 80015aa:	b083      	sub	sp, #12
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]

}
 80015b0:	bf00      	nop
 80015b2:	370c      	adds	r7, #12
 80015b4:	46bd      	mov	sp, r7
 80015b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ba:	4770      	bx	lr

080015bc <i2cTimerCallback>:

void i2cTimerCallback(void *argument) {
 80015bc:	b480      	push	{r7}
 80015be:	b083      	sub	sp, #12
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
	I2C_TIMEOUT_50MS_CNTR = I2C_TIMEOUT_50MS_CNTR;
 80015c4:	4b06      	ldr	r3, [pc, #24]	; (80015e0 <i2cTimerCallback+0x24>)
 80015c6:	781b      	ldrb	r3, [r3, #0]
 80015c8:	b2da      	uxtb	r2, r3
 80015ca:	4b05      	ldr	r3, [pc, #20]	; (80015e0 <i2cTimerCallback+0x24>)
 80015cc:	701a      	strb	r2, [r3, #0]
	if (I2C_TIMEOUT_50MS_CNTR >= I2_TIMEOUT_PERIOD) { // looks like i2c taking too long
 80015ce:	4b04      	ldr	r3, [pc, #16]	; (80015e0 <i2cTimerCallback+0x24>)
 80015d0:	781b      	ldrb	r3, [r3, #0]
		StopI2CTimer();                                        // turn off timer
		error_handler("i2c ", 0, I2C_TIMEOUT_ERR); // displays to LCD and uart **does not return***
	}
}
 80015d2:	bf00      	nop
 80015d4:	370c      	adds	r7, #12
 80015d6:	46bd      	mov	sp, r7
 80015d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015dc:	4770      	bx	lr
 80015de:	bf00      	nop
 80015e0:	20000094 	.word	0x20000094

080015e4 <fiftyMsTimerCallback>:

void fiftyMsTimerCallback(void *argument) {
 80015e4:	b480      	push	{r7}
 80015e6:	b083      	sub	sp, #12
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
	TIMER_50MS_FLG = TRUE;
 80015ec:	4b04      	ldr	r3, [pc, #16]	; (8001600 <fiftyMsTimerCallback+0x1c>)
 80015ee:	2201      	movs	r2, #1
 80015f0:	701a      	strb	r2, [r3, #0]
}
 80015f2:	bf00      	nop
 80015f4:	370c      	adds	r7, #12
 80015f6:	46bd      	mov	sp, r7
 80015f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fc:	4770      	bx	lr
 80015fe:	bf00      	nop
 8001600:	20000090 	.word	0x20000090

08001604 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8001604:	b580      	push	{r7, lr}
 8001606:	b084      	sub	sp, #16
 8001608:	af00      	add	r7, sp, #0
 800160a:	4603      	mov	r3, r0
 800160c:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == GPIO_PIN_3) {
 800160e:	88fb      	ldrh	r3, [r7, #6]
 8001610:	2b08      	cmp	r3, #8
 8001612:	d11c      	bne.n	800164e <HAL_GPIO_EXTI_Callback+0x4a>

		GPIO_PinState PinState = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_3);
 8001614:	2108      	movs	r1, #8
 8001616:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800161a:	f000 fe09 	bl	8002230 <HAL_GPIO_ReadPin>
 800161e:	4603      	mov	r3, r0
 8001620:	73fb      	strb	r3, [r7, #15]

		if (PinState == GPIO_PIN_SET) {
 8001622:	7bfb      	ldrb	r3, [r7, #15]
 8001624:	2b01      	cmp	r3, #1
 8001626:	d109      	bne.n	800163c <HAL_GPIO_EXTI_Callback+0x38>
			// If the pin is set, the interrupt was caused by a rising edge
			EC_DATA_AVAIL = TRUE;
 8001628:	4b0b      	ldr	r3, [pc, #44]	; (8001658 <HAL_GPIO_EXTI_Callback+0x54>)
 800162a:	2201      	movs	r2, #1
 800162c:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 1);
 800162e:	2201      	movs	r2, #1
 8001630:	2120      	movs	r1, #32
 8001632:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001636:	f000 fe13 	bl	8002260 <HAL_GPIO_WritePin>
			EC_DATA_AVAIL = FALSE;
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 1);
		}

	}
}
 800163a:	e008      	b.n	800164e <HAL_GPIO_EXTI_Callback+0x4a>
			EC_DATA_AVAIL = FALSE;
 800163c:	4b06      	ldr	r3, [pc, #24]	; (8001658 <HAL_GPIO_EXTI_Callback+0x54>)
 800163e:	2200      	movs	r2, #0
 8001640:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 1);
 8001642:	2201      	movs	r2, #1
 8001644:	2120      	movs	r1, #32
 8001646:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800164a:	f000 fe09 	bl	8002260 <HAL_GPIO_WritePin>
}
 800164e:	bf00      	nop
 8001650:	3710      	adds	r7, #16
 8001652:	46bd      	mov	sp, r7
 8001654:	bd80      	pop	{r7, pc}
 8001656:	bf00      	nop
 8001658:	20000091 	.word	0x20000091

0800165c <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 800165c:	b580      	push	{r7, lr}
 800165e:	b082      	sub	sp, #8
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM16) {
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	4a04      	ldr	r2, [pc, #16]	; (800167c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800166a:	4293      	cmp	r3, r2
 800166c:	d101      	bne.n	8001672 <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 800166e:	f000 fb73 	bl	8001d58 <HAL_IncTick>
	}
}
 8001672:	bf00      	nop
 8001674:	3708      	adds	r7, #8
 8001676:	46bd      	mov	sp, r7
 8001678:	bd80      	pop	{r7, pc}
 800167a:	bf00      	nop
 800167c:	40014400 	.word	0x40014400

08001680 <Error_Handler>:


/* *********************** Error Handler STuff *********************** */

void Error_Handler(void) {
 8001680:	b480      	push	{r7}
 8001682:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001684:	b672      	cpsid	i
}
 8001686:	bf00      	nop
	__disable_irq();
	while (1) {
 8001688:	e7fe      	b.n	8001688 <Error_Handler+0x8>
	...

0800168c <SystemClock_Config>:
	}
}


/* *********************** CUBE INIT STUFF *********************** */
void SystemClock_Config(void) {
 800168c:	b580      	push	{r7, lr}
 800168e:	b096      	sub	sp, #88	; 0x58
 8001690:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8001692:	f107 0314 	add.w	r3, r7, #20
 8001696:	2244      	movs	r2, #68	; 0x44
 8001698:	2100      	movs	r1, #0
 800169a:	4618      	mov	r0, r3
 800169c:	f005 fdf2 	bl	8007284 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80016a0:	463b      	mov	r3, r7
 80016a2:	2200      	movs	r2, #0
 80016a4:	601a      	str	r2, [r3, #0]
 80016a6:	605a      	str	r2, [r3, #4]
 80016a8:	609a      	str	r2, [r3, #8]
 80016aa:	60da      	str	r2, [r3, #12]
 80016ac:	611a      	str	r2, [r3, #16]

	if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1)
 80016ae:	f44f 7000 	mov.w	r0, #512	; 0x200
 80016b2:	f001 fbc7 	bl	8002e44 <HAL_PWREx_ControlVoltageScaling>
 80016b6:	4603      	mov	r3, r0
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d001      	beq.n	80016c0 <SystemClock_Config+0x34>
			!= HAL_OK) {
		Error_Handler();
 80016bc:	f7ff ffe0 	bl	8001680 <Error_Handler>
	}

	HAL_PWR_EnableBkUpAccess();
 80016c0:	f001 fba2 	bl	8002e08 <HAL_PWR_EnableBkUpAccess>
	__HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80016c4:	4b21      	ldr	r3, [pc, #132]	; (800174c <SystemClock_Config+0xc0>)
 80016c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80016ca:	4a20      	ldr	r2, [pc, #128]	; (800174c <SystemClock_Config+0xc0>)
 80016cc:	f023 0318 	bic.w	r3, r3, #24
 80016d0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE
 80016d4:	2314      	movs	r3, #20
 80016d6:	617b      	str	r3, [r7, #20]
			| RCC_OSCILLATORTYPE_MSI;
	RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80016d8:	2301      	movs	r3, #1
 80016da:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80016dc:	2301      	movs	r3, #1
 80016de:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.MSICalibrationValue = 0;
 80016e0:	2300      	movs	r3, #0
 80016e2:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80016e4:	2360      	movs	r3, #96	; 0x60
 80016e6:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80016e8:	2302      	movs	r3, #2
 80016ea:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80016ec:	2301      	movs	r3, #1
 80016ee:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLM = 1;
 80016f0:	2301      	movs	r3, #1
 80016f2:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLN = 40;
 80016f4:	2328      	movs	r3, #40	; 0x28
 80016f6:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80016f8:	2307      	movs	r3, #7
 80016fa:	64fb      	str	r3, [r7, #76]	; 0x4c
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80016fc:	2302      	movs	r3, #2
 80016fe:	653b      	str	r3, [r7, #80]	; 0x50
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001700:	2302      	movs	r3, #2
 8001702:	657b      	str	r3, [r7, #84]	; 0x54
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8001704:	f107 0314 	add.w	r3, r7, #20
 8001708:	4618      	mov	r0, r3
 800170a:	f001 fbf1 	bl	8002ef0 <HAL_RCC_OscConfig>
 800170e:	4603      	mov	r3, r0
 8001710:	2b00      	cmp	r3, #0
 8001712:	d001      	beq.n	8001718 <SystemClock_Config+0x8c>
		Error_Handler();
 8001714:	f7ff ffb4 	bl	8001680 <Error_Handler>
	}
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8001718:	230f      	movs	r3, #15
 800171a:	603b      	str	r3, [r7, #0]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800171c:	2303      	movs	r3, #3
 800171e:	607b      	str	r3, [r7, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001720:	2300      	movs	r3, #0
 8001722:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001724:	2300      	movs	r3, #0
 8001726:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001728:	2300      	movs	r3, #0
 800172a:	613b      	str	r3, [r7, #16]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK) {
 800172c:	463b      	mov	r3, r7
 800172e:	2104      	movs	r1, #4
 8001730:	4618      	mov	r0, r3
 8001732:	f001 fff1 	bl	8003718 <HAL_RCC_ClockConfig>
 8001736:	4603      	mov	r3, r0
 8001738:	2b00      	cmp	r3, #0
 800173a:	d001      	beq.n	8001740 <SystemClock_Config+0xb4>
		Error_Handler();
 800173c:	f7ff ffa0 	bl	8001680 <Error_Handler>
	}
	HAL_RCCEx_EnableMSIPLLMode();
 8001740:	f002 fc36 	bl	8003fb0 <HAL_RCCEx_EnableMSIPLLMode>
}
 8001744:	bf00      	nop
 8001746:	3758      	adds	r7, #88	; 0x58
 8001748:	46bd      	mov	sp, r7
 800174a:	bd80      	pop	{r7, pc}
 800174c:	40021000 	.word	0x40021000

08001750 <MX_I2C1_Init>:

static void MX_I2C1_Init(void) {
 8001750:	b580      	push	{r7, lr}
 8001752:	af00      	add	r7, sp, #0
	hi2c1.Instance = I2C1;
 8001754:	4b1b      	ldr	r3, [pc, #108]	; (80017c4 <MX_I2C1_Init+0x74>)
 8001756:	4a1c      	ldr	r2, [pc, #112]	; (80017c8 <MX_I2C1_Init+0x78>)
 8001758:	601a      	str	r2, [r3, #0]
	hi2c1.Init.Timing = 0x00702991;
 800175a:	4b1a      	ldr	r3, [pc, #104]	; (80017c4 <MX_I2C1_Init+0x74>)
 800175c:	4a1b      	ldr	r2, [pc, #108]	; (80017cc <MX_I2C1_Init+0x7c>)
 800175e:	605a      	str	r2, [r3, #4]
	hi2c1.Init.OwnAddress1 = 0;
 8001760:	4b18      	ldr	r3, [pc, #96]	; (80017c4 <MX_I2C1_Init+0x74>)
 8001762:	2200      	movs	r2, #0
 8001764:	609a      	str	r2, [r3, #8]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001766:	4b17      	ldr	r3, [pc, #92]	; (80017c4 <MX_I2C1_Init+0x74>)
 8001768:	2201      	movs	r2, #1
 800176a:	60da      	str	r2, [r3, #12]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800176c:	4b15      	ldr	r3, [pc, #84]	; (80017c4 <MX_I2C1_Init+0x74>)
 800176e:	2200      	movs	r2, #0
 8001770:	611a      	str	r2, [r3, #16]
	hi2c1.Init.OwnAddress2 = 0;
 8001772:	4b14      	ldr	r3, [pc, #80]	; (80017c4 <MX_I2C1_Init+0x74>)
 8001774:	2200      	movs	r2, #0
 8001776:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001778:	4b12      	ldr	r3, [pc, #72]	; (80017c4 <MX_I2C1_Init+0x74>)
 800177a:	2200      	movs	r2, #0
 800177c:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800177e:	4b11      	ldr	r3, [pc, #68]	; (80017c4 <MX_I2C1_Init+0x74>)
 8001780:	2200      	movs	r2, #0
 8001782:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001784:	4b0f      	ldr	r3, [pc, #60]	; (80017c4 <MX_I2C1_Init+0x74>)
 8001786:	2200      	movs	r2, #0
 8001788:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 800178a:	480e      	ldr	r0, [pc, #56]	; (80017c4 <MX_I2C1_Init+0x74>)
 800178c:	f000 fd98 	bl	80022c0 <HAL_I2C_Init>
 8001790:	4603      	mov	r3, r0
 8001792:	2b00      	cmp	r3, #0
 8001794:	d001      	beq.n	800179a <MX_I2C1_Init+0x4a>
		Error_Handler();
 8001796:	f7ff ff73 	bl	8001680 <Error_Handler>
	}
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE)
 800179a:	2100      	movs	r1, #0
 800179c:	4809      	ldr	r0, [pc, #36]	; (80017c4 <MX_I2C1_Init+0x74>)
 800179e:	f001 fa9b 	bl	8002cd8 <HAL_I2CEx_ConfigAnalogFilter>
 80017a2:	4603      	mov	r3, r0
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d001      	beq.n	80017ac <MX_I2C1_Init+0x5c>
			!= HAL_OK) {
		Error_Handler();
 80017a8:	f7ff ff6a 	bl	8001680 <Error_Handler>
	}
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK) {
 80017ac:	2100      	movs	r1, #0
 80017ae:	4805      	ldr	r0, [pc, #20]	; (80017c4 <MX_I2C1_Init+0x74>)
 80017b0:	f001 fadd 	bl	8002d6e <HAL_I2CEx_ConfigDigitalFilter>
 80017b4:	4603      	mov	r3, r0
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d001      	beq.n	80017be <MX_I2C1_Init+0x6e>
		Error_Handler();
 80017ba:	f7ff ff61 	bl	8001680 <Error_Handler>
	}
}
 80017be:	bf00      	nop
 80017c0:	bd80      	pop	{r7, pc}
 80017c2:	bf00      	nop
 80017c4:	20001040 	.word	0x20001040
 80017c8:	40005400 	.word	0x40005400
 80017cc:	00702991 	.word	0x00702991

080017d0 <MX_USART2_UART_Init>:

static void MX_USART2_UART_Init(void) {
 80017d0:	b580      	push	{r7, lr}
 80017d2:	af00      	add	r7, sp, #0
	huart2.Instance = USART2;
 80017d4:	4b14      	ldr	r3, [pc, #80]	; (8001828 <MX_USART2_UART_Init+0x58>)
 80017d6:	4a15      	ldr	r2, [pc, #84]	; (800182c <MX_USART2_UART_Init+0x5c>)
 80017d8:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 80017da:	4b13      	ldr	r3, [pc, #76]	; (8001828 <MX_USART2_UART_Init+0x58>)
 80017dc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80017e0:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80017e2:	4b11      	ldr	r3, [pc, #68]	; (8001828 <MX_USART2_UART_Init+0x58>)
 80017e4:	2200      	movs	r2, #0
 80017e6:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 80017e8:	4b0f      	ldr	r3, [pc, #60]	; (8001828 <MX_USART2_UART_Init+0x58>)
 80017ea:	2200      	movs	r2, #0
 80017ec:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 80017ee:	4b0e      	ldr	r3, [pc, #56]	; (8001828 <MX_USART2_UART_Init+0x58>)
 80017f0:	2200      	movs	r2, #0
 80017f2:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 80017f4:	4b0c      	ldr	r3, [pc, #48]	; (8001828 <MX_USART2_UART_Init+0x58>)
 80017f6:	220c      	movs	r2, #12
 80017f8:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80017fa:	4b0b      	ldr	r3, [pc, #44]	; (8001828 <MX_USART2_UART_Init+0x58>)
 80017fc:	2200      	movs	r2, #0
 80017fe:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001800:	4b09      	ldr	r3, [pc, #36]	; (8001828 <MX_USART2_UART_Init+0x58>)
 8001802:	2200      	movs	r2, #0
 8001804:	61da      	str	r2, [r3, #28]
	huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001806:	4b08      	ldr	r3, [pc, #32]	; (8001828 <MX_USART2_UART_Init+0x58>)
 8001808:	2200      	movs	r2, #0
 800180a:	621a      	str	r2, [r3, #32]
	huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800180c:	4b06      	ldr	r3, [pc, #24]	; (8001828 <MX_USART2_UART_Init+0x58>)
 800180e:	2200      	movs	r2, #0
 8001810:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 8001812:	4805      	ldr	r0, [pc, #20]	; (8001828 <MX_USART2_UART_Init+0x58>)
 8001814:	f002 ff4e 	bl	80046b4 <HAL_UART_Init>
 8001818:	4603      	mov	r3, r0
 800181a:	2b00      	cmp	r3, #0
 800181c:	d001      	beq.n	8001822 <MX_USART2_UART_Init+0x52>
		Error_Handler();
 800181e:	f7ff ff2f 	bl	8001680 <Error_Handler>
	}
}
 8001822:	bf00      	nop
 8001824:	bd80      	pop	{r7, pc}
 8001826:	bf00      	nop
 8001828:	20001094 	.word	0x20001094
 800182c:	40004400 	.word	0x40004400

08001830 <MX_GPIO_Init>:

static void MX_GPIO_Init(void) {
 8001830:	b580      	push	{r7, lr}
 8001832:	b088      	sub	sp, #32
 8001834:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8001836:	f107 030c 	add.w	r3, r7, #12
 800183a:	2200      	movs	r2, #0
 800183c:	601a      	str	r2, [r3, #0]
 800183e:	605a      	str	r2, [r3, #4]
 8001840:	609a      	str	r2, [r3, #8]
 8001842:	60da      	str	r2, [r3, #12]
 8001844:	611a      	str	r2, [r3, #16]

	__HAL_RCC_GPIOC_CLK_ENABLE();
 8001846:	4b34      	ldr	r3, [pc, #208]	; (8001918 <MX_GPIO_Init+0xe8>)
 8001848:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800184a:	4a33      	ldr	r2, [pc, #204]	; (8001918 <MX_GPIO_Init+0xe8>)
 800184c:	f043 0304 	orr.w	r3, r3, #4
 8001850:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001852:	4b31      	ldr	r3, [pc, #196]	; (8001918 <MX_GPIO_Init+0xe8>)
 8001854:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001856:	f003 0304 	and.w	r3, r3, #4
 800185a:	60bb      	str	r3, [r7, #8]
 800185c:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800185e:	4b2e      	ldr	r3, [pc, #184]	; (8001918 <MX_GPIO_Init+0xe8>)
 8001860:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001862:	4a2d      	ldr	r2, [pc, #180]	; (8001918 <MX_GPIO_Init+0xe8>)
 8001864:	f043 0301 	orr.w	r3, r3, #1
 8001868:	64d3      	str	r3, [r2, #76]	; 0x4c
 800186a:	4b2b      	ldr	r3, [pc, #172]	; (8001918 <MX_GPIO_Init+0xe8>)
 800186c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800186e:	f003 0301 	and.w	r3, r3, #1
 8001872:	607b      	str	r3, [r7, #4]
 8001874:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001876:	4b28      	ldr	r3, [pc, #160]	; (8001918 <MX_GPIO_Init+0xe8>)
 8001878:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800187a:	4a27      	ldr	r2, [pc, #156]	; (8001918 <MX_GPIO_Init+0xe8>)
 800187c:	f043 0302 	orr.w	r3, r3, #2
 8001880:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001882:	4b25      	ldr	r3, [pc, #148]	; (8001918 <MX_GPIO_Init+0xe8>)
 8001884:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001886:	f003 0302 	and.w	r3, r3, #2
 800188a:	603b      	str	r3, [r7, #0]
 800188c:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, MOTION_CLICK_WAKE_Pin | RGB_LED_GREEN_Pin,
 800188e:	2200      	movs	r2, #0
 8001890:	f240 1101 	movw	r1, #257	; 0x101
 8001894:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001898:	f000 fce2 	bl	8002260 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 800189c:	2200      	movs	r2, #0
 800189e:	2108      	movs	r1, #8
 80018a0:	481e      	ldr	r0, [pc, #120]	; (800191c <MX_GPIO_Init+0xec>)
 80018a2:	f000 fcdd 	bl	8002260 <HAL_GPIO_WritePin>

	/*Configure GPIO pins : MOTION_CLICK_WAKE_Pin RGB_LED_GREEN_Pin */
	GPIO_InitStruct.Pin = MOTION_CLICK_WAKE_Pin | RGB_LED_GREEN_Pin;
 80018a6:	f240 1301 	movw	r3, #257	; 0x101
 80018aa:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018ac:	2301      	movs	r3, #1
 80018ae:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018b0:	2300      	movs	r3, #0
 80018b2:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018b4:	2300      	movs	r3, #0
 80018b6:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018b8:	f107 030c 	add.w	r3, r7, #12
 80018bc:	4619      	mov	r1, r3
 80018be:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80018c2:	f000 fb4b 	bl	8001f5c <HAL_GPIO_Init>

	/*Configure GPIO pin : MOTION_CLICK_INTERRUPT_Pin */
	GPIO_InitStruct.Pin = MOTION_CLICK_INTERRUPT_Pin;
 80018c6:	2308      	movs	r3, #8
 80018c8:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80018ca:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 80018ce:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 80018d0:	2301      	movs	r3, #1
 80018d2:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(MOTION_CLICK_INTERRUPT_GPIO_Port, &GPIO_InitStruct);
 80018d4:	f107 030c 	add.w	r3, r7, #12
 80018d8:	4619      	mov	r1, r3
 80018da:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80018de:	f000 fb3d 	bl	8001f5c <HAL_GPIO_Init>

	/*Configure GPIO pin : LD3_Pin */
	GPIO_InitStruct.Pin = LD3_Pin;
 80018e2:	2308      	movs	r3, #8
 80018e4:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018e6:	2301      	movs	r3, #1
 80018e8:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ea:	2300      	movs	r3, #0
 80018ec:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018ee:	2300      	movs	r3, #0
 80018f0:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 80018f2:	f107 030c 	add.w	r3, r7, #12
 80018f6:	4619      	mov	r1, r3
 80018f8:	4808      	ldr	r0, [pc, #32]	; (800191c <MX_GPIO_Init+0xec>)
 80018fa:	f000 fb2f 	bl	8001f5c <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI3_IRQn, 5, 0);
 80018fe:	2200      	movs	r2, #0
 8001900:	2105      	movs	r1, #5
 8001902:	2009      	movs	r0, #9
 8001904:	f000 fb00 	bl	8001f08 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8001908:	2009      	movs	r0, #9
 800190a:	f000 fb19 	bl	8001f40 <HAL_NVIC_EnableIRQ>
}
 800190e:	bf00      	nop
 8001910:	3720      	adds	r7, #32
 8001912:	46bd      	mov	sp, r7
 8001914:	bd80      	pop	{r7, pc}
 8001916:	bf00      	nop
 8001918:	40021000 	.word	0x40021000
 800191c:	48000400 	.word	0x48000400

08001920 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	b082      	sub	sp, #8
 8001924:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001926:	4b11      	ldr	r3, [pc, #68]	; (800196c <HAL_MspInit+0x4c>)
 8001928:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800192a:	4a10      	ldr	r2, [pc, #64]	; (800196c <HAL_MspInit+0x4c>)
 800192c:	f043 0301 	orr.w	r3, r3, #1
 8001930:	6613      	str	r3, [r2, #96]	; 0x60
 8001932:	4b0e      	ldr	r3, [pc, #56]	; (800196c <HAL_MspInit+0x4c>)
 8001934:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001936:	f003 0301 	and.w	r3, r3, #1
 800193a:	607b      	str	r3, [r7, #4]
 800193c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800193e:	4b0b      	ldr	r3, [pc, #44]	; (800196c <HAL_MspInit+0x4c>)
 8001940:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001942:	4a0a      	ldr	r2, [pc, #40]	; (800196c <HAL_MspInit+0x4c>)
 8001944:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001948:	6593      	str	r3, [r2, #88]	; 0x58
 800194a:	4b08      	ldr	r3, [pc, #32]	; (800196c <HAL_MspInit+0x4c>)
 800194c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800194e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001952:	603b      	str	r3, [r7, #0]
 8001954:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001956:	2200      	movs	r2, #0
 8001958:	210f      	movs	r1, #15
 800195a:	f06f 0001 	mvn.w	r0, #1
 800195e:	f000 fad3 	bl	8001f08 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001962:	bf00      	nop
 8001964:	3708      	adds	r7, #8
 8001966:	46bd      	mov	sp, r7
 8001968:	bd80      	pop	{r7, pc}
 800196a:	bf00      	nop
 800196c:	40021000 	.word	0x40021000

08001970 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	b09e      	sub	sp, #120	; 0x78
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001978:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800197c:	2200      	movs	r2, #0
 800197e:	601a      	str	r2, [r3, #0]
 8001980:	605a      	str	r2, [r3, #4]
 8001982:	609a      	str	r2, [r3, #8]
 8001984:	60da      	str	r2, [r3, #12]
 8001986:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001988:	f107 0310 	add.w	r3, r7, #16
 800198c:	2254      	movs	r2, #84	; 0x54
 800198e:	2100      	movs	r1, #0
 8001990:	4618      	mov	r0, r3
 8001992:	f005 fc77 	bl	8007284 <memset>
  if(hi2c->Instance==I2C1)
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	4a22      	ldr	r2, [pc, #136]	; (8001a24 <HAL_I2C_MspInit+0xb4>)
 800199c:	4293      	cmp	r3, r2
 800199e:	d13d      	bne.n	8001a1c <HAL_I2C_MspInit+0xac>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80019a0:	2340      	movs	r3, #64	; 0x40
 80019a2:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80019a4:	2300      	movs	r3, #0
 80019a6:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80019a8:	f107 0310 	add.w	r3, r7, #16
 80019ac:	4618      	mov	r0, r3
 80019ae:	f002 f909 	bl	8003bc4 <HAL_RCCEx_PeriphCLKConfig>
 80019b2:	4603      	mov	r3, r0
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d001      	beq.n	80019bc <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80019b8:	f7ff fe62 	bl	8001680 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019bc:	4b1a      	ldr	r3, [pc, #104]	; (8001a28 <HAL_I2C_MspInit+0xb8>)
 80019be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019c0:	4a19      	ldr	r2, [pc, #100]	; (8001a28 <HAL_I2C_MspInit+0xb8>)
 80019c2:	f043 0302 	orr.w	r3, r3, #2
 80019c6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80019c8:	4b17      	ldr	r3, [pc, #92]	; (8001a28 <HAL_I2C_MspInit+0xb8>)
 80019ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019cc:	f003 0302 	and.w	r3, r3, #2
 80019d0:	60fb      	str	r3, [r7, #12]
 80019d2:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80019d4:	23c0      	movs	r3, #192	; 0xc0
 80019d6:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80019d8:	2312      	movs	r3, #18
 80019da:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019dc:	2300      	movs	r3, #0
 80019de:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019e0:	2303      	movs	r3, #3
 80019e2:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80019e4:	2304      	movs	r3, #4
 80019e6:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019e8:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80019ec:	4619      	mov	r1, r3
 80019ee:	480f      	ldr	r0, [pc, #60]	; (8001a2c <HAL_I2C_MspInit+0xbc>)
 80019f0:	f000 fab4 	bl	8001f5c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80019f4:	4b0c      	ldr	r3, [pc, #48]	; (8001a28 <HAL_I2C_MspInit+0xb8>)
 80019f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019f8:	4a0b      	ldr	r2, [pc, #44]	; (8001a28 <HAL_I2C_MspInit+0xb8>)
 80019fa:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80019fe:	6593      	str	r3, [r2, #88]	; 0x58
 8001a00:	4b09      	ldr	r3, [pc, #36]	; (8001a28 <HAL_I2C_MspInit+0xb8>)
 8001a02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a04:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a08:	60bb      	str	r3, [r7, #8]
 8001a0a:	68bb      	ldr	r3, [r7, #8]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	2105      	movs	r1, #5
 8001a10:	201f      	movs	r0, #31
 8001a12:	f000 fa79 	bl	8001f08 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001a16:	201f      	movs	r0, #31
 8001a18:	f000 fa92 	bl	8001f40 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001a1c:	bf00      	nop
 8001a1e:	3778      	adds	r7, #120	; 0x78
 8001a20:	46bd      	mov	sp, r7
 8001a22:	bd80      	pop	{r7, pc}
 8001a24:	40005400 	.word	0x40005400
 8001a28:	40021000 	.word	0x40021000
 8001a2c:	48000400 	.word	0x48000400

08001a30 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b09e      	sub	sp, #120	; 0x78
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a38:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	601a      	str	r2, [r3, #0]
 8001a40:	605a      	str	r2, [r3, #4]
 8001a42:	609a      	str	r2, [r3, #8]
 8001a44:	60da      	str	r2, [r3, #12]
 8001a46:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001a48:	f107 0310 	add.w	r3, r7, #16
 8001a4c:	2254      	movs	r2, #84	; 0x54
 8001a4e:	2100      	movs	r1, #0
 8001a50:	4618      	mov	r0, r3
 8001a52:	f005 fc17 	bl	8007284 <memset>
  if(huart->Instance==USART2)
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	4a28      	ldr	r2, [pc, #160]	; (8001afc <HAL_UART_MspInit+0xcc>)
 8001a5c:	4293      	cmp	r3, r2
 8001a5e:	d148      	bne.n	8001af2 <HAL_UART_MspInit+0xc2>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001a60:	2302      	movs	r3, #2
 8001a62:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001a64:	2300      	movs	r3, #0
 8001a66:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001a68:	f107 0310 	add.w	r3, r7, #16
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	f002 f8a9 	bl	8003bc4 <HAL_RCCEx_PeriphCLKConfig>
 8001a72:	4603      	mov	r3, r0
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d001      	beq.n	8001a7c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001a78:	f7ff fe02 	bl	8001680 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001a7c:	4b20      	ldr	r3, [pc, #128]	; (8001b00 <HAL_UART_MspInit+0xd0>)
 8001a7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a80:	4a1f      	ldr	r2, [pc, #124]	; (8001b00 <HAL_UART_MspInit+0xd0>)
 8001a82:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a86:	6593      	str	r3, [r2, #88]	; 0x58
 8001a88:	4b1d      	ldr	r3, [pc, #116]	; (8001b00 <HAL_UART_MspInit+0xd0>)
 8001a8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a90:	60fb      	str	r3, [r7, #12]
 8001a92:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a94:	4b1a      	ldr	r3, [pc, #104]	; (8001b00 <HAL_UART_MspInit+0xd0>)
 8001a96:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a98:	4a19      	ldr	r2, [pc, #100]	; (8001b00 <HAL_UART_MspInit+0xd0>)
 8001a9a:	f043 0301 	orr.w	r3, r3, #1
 8001a9e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001aa0:	4b17      	ldr	r3, [pc, #92]	; (8001b00 <HAL_UART_MspInit+0xd0>)
 8001aa2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001aa4:	f003 0301 	and.w	r3, r3, #1
 8001aa8:	60bb      	str	r3, [r7, #8]
 8001aaa:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8001aac:	2304      	movs	r3, #4
 8001aae:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ab0:	2302      	movs	r3, #2
 8001ab2:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ab8:	2303      	movs	r3, #3
 8001aba:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001abc:	2307      	movs	r3, #7
 8001abe:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8001ac0:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001ac4:	4619      	mov	r1, r3
 8001ac6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001aca:	f000 fa47 	bl	8001f5c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8001ace:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001ad2:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ad4:	2302      	movs	r3, #2
 8001ad6:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ad8:	2300      	movs	r3, #0
 8001ada:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001adc:	2303      	movs	r3, #3
 8001ade:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8001ae0:	2303      	movs	r3, #3
 8001ae2:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8001ae4:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001ae8:	4619      	mov	r1, r3
 8001aea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001aee:	f000 fa35 	bl	8001f5c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001af2:	bf00      	nop
 8001af4:	3778      	adds	r7, #120	; 0x78
 8001af6:	46bd      	mov	sp, r7
 8001af8:	bd80      	pop	{r7, pc}
 8001afa:	bf00      	nop
 8001afc:	40004400 	.word	0x40004400
 8001b00:	40021000 	.word	0x40021000

08001b04 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b08c      	sub	sp, #48	; 0x30
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Enable TIM16 clock */
  __HAL_RCC_TIM16_CLK_ENABLE();
 8001b12:	4b2e      	ldr	r3, [pc, #184]	; (8001bcc <HAL_InitTick+0xc8>)
 8001b14:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b16:	4a2d      	ldr	r2, [pc, #180]	; (8001bcc <HAL_InitTick+0xc8>)
 8001b18:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b1c:	6613      	str	r3, [r2, #96]	; 0x60
 8001b1e:	4b2b      	ldr	r3, [pc, #172]	; (8001bcc <HAL_InitTick+0xc8>)
 8001b20:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b26:	60bb      	str	r3, [r7, #8]
 8001b28:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001b2a:	f107 020c 	add.w	r2, r7, #12
 8001b2e:	f107 0310 	add.w	r3, r7, #16
 8001b32:	4611      	mov	r1, r2
 8001b34:	4618      	mov	r0, r3
 8001b36:	f001 ffb3 	bl	8003aa0 <HAL_RCC_GetClockConfig>

  /* Compute TIM16 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001b3a:	f001 ff9b 	bl	8003a74 <HAL_RCC_GetPCLK2Freq>
 8001b3e:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM16 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001b40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b42:	4a23      	ldr	r2, [pc, #140]	; (8001bd0 <HAL_InitTick+0xcc>)
 8001b44:	fba2 2303 	umull	r2, r3, r2, r3
 8001b48:	0c9b      	lsrs	r3, r3, #18
 8001b4a:	3b01      	subs	r3, #1
 8001b4c:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM16 */
  htim16.Instance = TIM16;
 8001b4e:	4b21      	ldr	r3, [pc, #132]	; (8001bd4 <HAL_InitTick+0xd0>)
 8001b50:	4a21      	ldr	r2, [pc, #132]	; (8001bd8 <HAL_InitTick+0xd4>)
 8001b52:	601a      	str	r2, [r3, #0]
  + Period = [(TIM16CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim16.Init.Period = (1000000U / 1000U) - 1U;
 8001b54:	4b1f      	ldr	r3, [pc, #124]	; (8001bd4 <HAL_InitTick+0xd0>)
 8001b56:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001b5a:	60da      	str	r2, [r3, #12]
  htim16.Init.Prescaler = uwPrescalerValue;
 8001b5c:	4a1d      	ldr	r2, [pc, #116]	; (8001bd4 <HAL_InitTick+0xd0>)
 8001b5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b60:	6053      	str	r3, [r2, #4]
  htim16.Init.ClockDivision = 0;
 8001b62:	4b1c      	ldr	r3, [pc, #112]	; (8001bd4 <HAL_InitTick+0xd0>)
 8001b64:	2200      	movs	r2, #0
 8001b66:	611a      	str	r2, [r3, #16]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b68:	4b1a      	ldr	r3, [pc, #104]	; (8001bd4 <HAL_InitTick+0xd0>)
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	609a      	str	r2, [r3, #8]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b6e:	4b19      	ldr	r3, [pc, #100]	; (8001bd4 <HAL_InitTick+0xd0>)
 8001b70:	2200      	movs	r2, #0
 8001b72:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim16);
 8001b74:	4817      	ldr	r0, [pc, #92]	; (8001bd4 <HAL_InitTick+0xd0>)
 8001b76:	f002 fb1d 	bl	80041b4 <HAL_TIM_Base_Init>
 8001b7a:	4603      	mov	r3, r0
 8001b7c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8001b80:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d11b      	bne.n	8001bc0 <HAL_InitTick+0xbc>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim16);
 8001b88:	4812      	ldr	r0, [pc, #72]	; (8001bd4 <HAL_InitTick+0xd0>)
 8001b8a:	f002 fb75 	bl	8004278 <HAL_TIM_Base_Start_IT>
 8001b8e:	4603      	mov	r3, r0
 8001b90:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8001b94:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d111      	bne.n	8001bc0 <HAL_InitTick+0xbc>
    {
    /* Enable the TIM16 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8001b9c:	2019      	movs	r0, #25
 8001b9e:	f000 f9cf 	bl	8001f40 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	2b0f      	cmp	r3, #15
 8001ba6:	d808      	bhi.n	8001bba <HAL_InitTick+0xb6>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority, 0U);
 8001ba8:	2200      	movs	r2, #0
 8001baa:	6879      	ldr	r1, [r7, #4]
 8001bac:	2019      	movs	r0, #25
 8001bae:	f000 f9ab 	bl	8001f08 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001bb2:	4a0a      	ldr	r2, [pc, #40]	; (8001bdc <HAL_InitTick+0xd8>)
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	6013      	str	r3, [r2, #0]
 8001bb8:	e002      	b.n	8001bc0 <HAL_InitTick+0xbc>
      }
      else
      {
        status = HAL_ERROR;
 8001bba:	2301      	movs	r3, #1
 8001bbc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8001bc0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	3730      	adds	r7, #48	; 0x30
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	bd80      	pop	{r7, pc}
 8001bcc:	40021000 	.word	0x40021000
 8001bd0:	431bde83 	.word	0x431bde83
 8001bd4:	20001130 	.word	0x20001130
 8001bd8:	40014400 	.word	0x40014400
 8001bdc:	20000004 	.word	0x20000004

08001be0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001be0:	b480      	push	{r7}
 8001be2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001be4:	e7fe      	b.n	8001be4 <NMI_Handler+0x4>

08001be6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001be6:	b480      	push	{r7}
 8001be8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001bea:	e7fe      	b.n	8001bea <HardFault_Handler+0x4>

08001bec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001bec:	b480      	push	{r7}
 8001bee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001bf0:	e7fe      	b.n	8001bf0 <MemManage_Handler+0x4>

08001bf2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001bf2:	b480      	push	{r7}
 8001bf4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001bf6:	e7fe      	b.n	8001bf6 <BusFault_Handler+0x4>

08001bf8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001bf8:	b480      	push	{r7}
 8001bfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001bfc:	e7fe      	b.n	8001bfc <UsageFault_Handler+0x4>

08001bfe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001bfe:	b480      	push	{r7}
 8001c00:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c02:	bf00      	nop
 8001c04:	46bd      	mov	sp, r7
 8001c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0a:	4770      	bx	lr

08001c0c <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(MOTION_CLICK_INTERRUPT_Pin);
 8001c10:	2008      	movs	r0, #8
 8001c12:	f000 fb3d 	bl	8002290 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8001c16:	bf00      	nop
 8001c18:	bd80      	pop	{r7, pc}
	...

08001c1c <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8001c20:	4802      	ldr	r0, [pc, #8]	; (8001c2c <TIM1_UP_TIM16_IRQHandler+0x10>)
 8001c22:	f002 fb7d 	bl	8004320 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8001c26:	bf00      	nop
 8001c28:	bd80      	pop	{r7, pc}
 8001c2a:	bf00      	nop
 8001c2c:	20001130 	.word	0x20001130

08001c30 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001c34:	4802      	ldr	r0, [pc, #8]	; (8001c40 <I2C1_EV_IRQHandler+0x10>)
 8001c36:	f000 fdbd 	bl	80027b4 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8001c3a:	bf00      	nop
 8001c3c:	bd80      	pop	{r7, pc}
 8001c3e:	bf00      	nop
 8001c40:	20001040 	.word	0x20001040

08001c44 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b086      	sub	sp, #24
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001c4c:	4a14      	ldr	r2, [pc, #80]	; (8001ca0 <_sbrk+0x5c>)
 8001c4e:	4b15      	ldr	r3, [pc, #84]	; (8001ca4 <_sbrk+0x60>)
 8001c50:	1ad3      	subs	r3, r2, r3
 8001c52:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001c54:	697b      	ldr	r3, [r7, #20]
 8001c56:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001c58:	4b13      	ldr	r3, [pc, #76]	; (8001ca8 <_sbrk+0x64>)
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d102      	bne.n	8001c66 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001c60:	4b11      	ldr	r3, [pc, #68]	; (8001ca8 <_sbrk+0x64>)
 8001c62:	4a12      	ldr	r2, [pc, #72]	; (8001cac <_sbrk+0x68>)
 8001c64:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001c66:	4b10      	ldr	r3, [pc, #64]	; (8001ca8 <_sbrk+0x64>)
 8001c68:	681a      	ldr	r2, [r3, #0]
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	4413      	add	r3, r2
 8001c6e:	693a      	ldr	r2, [r7, #16]
 8001c70:	429a      	cmp	r2, r3
 8001c72:	d207      	bcs.n	8001c84 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001c74:	f005 facc 	bl	8007210 <__errno>
 8001c78:	4603      	mov	r3, r0
 8001c7a:	220c      	movs	r2, #12
 8001c7c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001c7e:	f04f 33ff 	mov.w	r3, #4294967295
 8001c82:	e009      	b.n	8001c98 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001c84:	4b08      	ldr	r3, [pc, #32]	; (8001ca8 <_sbrk+0x64>)
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001c8a:	4b07      	ldr	r3, [pc, #28]	; (8001ca8 <_sbrk+0x64>)
 8001c8c:	681a      	ldr	r2, [r3, #0]
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	4413      	add	r3, r2
 8001c92:	4a05      	ldr	r2, [pc, #20]	; (8001ca8 <_sbrk+0x64>)
 8001c94:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001c96:	68fb      	ldr	r3, [r7, #12]
}
 8001c98:	4618      	mov	r0, r3
 8001c9a:	3718      	adds	r7, #24
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	bd80      	pop	{r7, pc}
 8001ca0:	20010000 	.word	0x20010000
 8001ca4:	00000400 	.word	0x00000400
 8001ca8:	2000117c 	.word	0x2000117c
 8001cac:	20002f90 	.word	0x20002f90

08001cb0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001cb0:	b480      	push	{r7}
 8001cb2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001cb4:	4b06      	ldr	r3, [pc, #24]	; (8001cd0 <SystemInit+0x20>)
 8001cb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001cba:	4a05      	ldr	r2, [pc, #20]	; (8001cd0 <SystemInit+0x20>)
 8001cbc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001cc0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001cc4:	bf00      	nop
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ccc:	4770      	bx	lr
 8001cce:	bf00      	nop
 8001cd0:	e000ed00 	.word	0xe000ed00

08001cd4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001cd4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001d0c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001cd8:	f7ff ffea 	bl	8001cb0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001cdc:	480c      	ldr	r0, [pc, #48]	; (8001d10 <LoopForever+0x6>)
  ldr r1, =_edata
 8001cde:	490d      	ldr	r1, [pc, #52]	; (8001d14 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001ce0:	4a0d      	ldr	r2, [pc, #52]	; (8001d18 <LoopForever+0xe>)
  movs r3, #0
 8001ce2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ce4:	e002      	b.n	8001cec <LoopCopyDataInit>

08001ce6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001ce6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ce8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001cea:	3304      	adds	r3, #4

08001cec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001cec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001cee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001cf0:	d3f9      	bcc.n	8001ce6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001cf2:	4a0a      	ldr	r2, [pc, #40]	; (8001d1c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001cf4:	4c0a      	ldr	r4, [pc, #40]	; (8001d20 <LoopForever+0x16>)
  movs r3, #0
 8001cf6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001cf8:	e001      	b.n	8001cfe <LoopFillZerobss>

08001cfa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001cfa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001cfc:	3204      	adds	r2, #4

08001cfe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001cfe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d00:	d3fb      	bcc.n	8001cfa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001d02:	f005 fa8b 	bl	800721c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001d06:	f7ff fbc3 	bl	8001490 <main>

08001d0a <LoopForever>:

LoopForever:
    b LoopForever
 8001d0a:	e7fe      	b.n	8001d0a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001d0c:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001d10:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d14:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8001d18:	08007d88 	.word	0x08007d88
  ldr r2, =_sbss
 8001d1c:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8001d20:	20002f8c 	.word	0x20002f8c

08001d24 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001d24:	e7fe      	b.n	8001d24 <ADC1_IRQHandler>

08001d26 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d26:	b580      	push	{r7, lr}
 8001d28:	b082      	sub	sp, #8
 8001d2a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001d2c:	2300      	movs	r3, #0
 8001d2e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d30:	2003      	movs	r0, #3
 8001d32:	f000 f8de 	bl	8001ef2 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001d36:	200f      	movs	r0, #15
 8001d38:	f7ff fee4 	bl	8001b04 <HAL_InitTick>
 8001d3c:	4603      	mov	r3, r0
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d002      	beq.n	8001d48 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001d42:	2301      	movs	r3, #1
 8001d44:	71fb      	strb	r3, [r7, #7]
 8001d46:	e001      	b.n	8001d4c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001d48:	f7ff fdea 	bl	8001920 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001d4c:	79fb      	ldrb	r3, [r7, #7]
}
 8001d4e:	4618      	mov	r0, r3
 8001d50:	3708      	adds	r7, #8
 8001d52:	46bd      	mov	sp, r7
 8001d54:	bd80      	pop	{r7, pc}
	...

08001d58 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d58:	b480      	push	{r7}
 8001d5a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001d5c:	4b06      	ldr	r3, [pc, #24]	; (8001d78 <HAL_IncTick+0x20>)
 8001d5e:	781b      	ldrb	r3, [r3, #0]
 8001d60:	461a      	mov	r2, r3
 8001d62:	4b06      	ldr	r3, [pc, #24]	; (8001d7c <HAL_IncTick+0x24>)
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	4413      	add	r3, r2
 8001d68:	4a04      	ldr	r2, [pc, #16]	; (8001d7c <HAL_IncTick+0x24>)
 8001d6a:	6013      	str	r3, [r2, #0]
}
 8001d6c:	bf00      	nop
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d74:	4770      	bx	lr
 8001d76:	bf00      	nop
 8001d78:	20000008 	.word	0x20000008
 8001d7c:	20001180 	.word	0x20001180

08001d80 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d80:	b480      	push	{r7}
 8001d82:	af00      	add	r7, sp, #0
  return uwTick;
 8001d84:	4b03      	ldr	r3, [pc, #12]	; (8001d94 <HAL_GetTick+0x14>)
 8001d86:	681b      	ldr	r3, [r3, #0]
}
 8001d88:	4618      	mov	r0, r3
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d90:	4770      	bx	lr
 8001d92:	bf00      	nop
 8001d94:	20001180 	.word	0x20001180

08001d98 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d98:	b480      	push	{r7}
 8001d9a:	b085      	sub	sp, #20
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	f003 0307 	and.w	r3, r3, #7
 8001da6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001da8:	4b0c      	ldr	r3, [pc, #48]	; (8001ddc <__NVIC_SetPriorityGrouping+0x44>)
 8001daa:	68db      	ldr	r3, [r3, #12]
 8001dac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001dae:	68ba      	ldr	r2, [r7, #8]
 8001db0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001db4:	4013      	ands	r3, r2
 8001db6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001dbc:	68bb      	ldr	r3, [r7, #8]
 8001dbe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001dc0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001dc4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001dc8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001dca:	4a04      	ldr	r2, [pc, #16]	; (8001ddc <__NVIC_SetPriorityGrouping+0x44>)
 8001dcc:	68bb      	ldr	r3, [r7, #8]
 8001dce:	60d3      	str	r3, [r2, #12]
}
 8001dd0:	bf00      	nop
 8001dd2:	3714      	adds	r7, #20
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dda:	4770      	bx	lr
 8001ddc:	e000ed00 	.word	0xe000ed00

08001de0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001de0:	b480      	push	{r7}
 8001de2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001de4:	4b04      	ldr	r3, [pc, #16]	; (8001df8 <__NVIC_GetPriorityGrouping+0x18>)
 8001de6:	68db      	ldr	r3, [r3, #12]
 8001de8:	0a1b      	lsrs	r3, r3, #8
 8001dea:	f003 0307 	and.w	r3, r3, #7
}
 8001dee:	4618      	mov	r0, r3
 8001df0:	46bd      	mov	sp, r7
 8001df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df6:	4770      	bx	lr
 8001df8:	e000ed00 	.word	0xe000ed00

08001dfc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001dfc:	b480      	push	{r7}
 8001dfe:	b083      	sub	sp, #12
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	4603      	mov	r3, r0
 8001e04:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	db0b      	blt.n	8001e26 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e0e:	79fb      	ldrb	r3, [r7, #7]
 8001e10:	f003 021f 	and.w	r2, r3, #31
 8001e14:	4907      	ldr	r1, [pc, #28]	; (8001e34 <__NVIC_EnableIRQ+0x38>)
 8001e16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e1a:	095b      	lsrs	r3, r3, #5
 8001e1c:	2001      	movs	r0, #1
 8001e1e:	fa00 f202 	lsl.w	r2, r0, r2
 8001e22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001e26:	bf00      	nop
 8001e28:	370c      	adds	r7, #12
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e30:	4770      	bx	lr
 8001e32:	bf00      	nop
 8001e34:	e000e100 	.word	0xe000e100

08001e38 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e38:	b480      	push	{r7}
 8001e3a:	b083      	sub	sp, #12
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	4603      	mov	r3, r0
 8001e40:	6039      	str	r1, [r7, #0]
 8001e42:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	db0a      	blt.n	8001e62 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e4c:	683b      	ldr	r3, [r7, #0]
 8001e4e:	b2da      	uxtb	r2, r3
 8001e50:	490c      	ldr	r1, [pc, #48]	; (8001e84 <__NVIC_SetPriority+0x4c>)
 8001e52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e56:	0112      	lsls	r2, r2, #4
 8001e58:	b2d2      	uxtb	r2, r2
 8001e5a:	440b      	add	r3, r1
 8001e5c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e60:	e00a      	b.n	8001e78 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e62:	683b      	ldr	r3, [r7, #0]
 8001e64:	b2da      	uxtb	r2, r3
 8001e66:	4908      	ldr	r1, [pc, #32]	; (8001e88 <__NVIC_SetPriority+0x50>)
 8001e68:	79fb      	ldrb	r3, [r7, #7]
 8001e6a:	f003 030f 	and.w	r3, r3, #15
 8001e6e:	3b04      	subs	r3, #4
 8001e70:	0112      	lsls	r2, r2, #4
 8001e72:	b2d2      	uxtb	r2, r2
 8001e74:	440b      	add	r3, r1
 8001e76:	761a      	strb	r2, [r3, #24]
}
 8001e78:	bf00      	nop
 8001e7a:	370c      	adds	r7, #12
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e82:	4770      	bx	lr
 8001e84:	e000e100 	.word	0xe000e100
 8001e88:	e000ed00 	.word	0xe000ed00

08001e8c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e8c:	b480      	push	{r7}
 8001e8e:	b089      	sub	sp, #36	; 0x24
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	60f8      	str	r0, [r7, #12]
 8001e94:	60b9      	str	r1, [r7, #8]
 8001e96:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	f003 0307 	and.w	r3, r3, #7
 8001e9e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ea0:	69fb      	ldr	r3, [r7, #28]
 8001ea2:	f1c3 0307 	rsb	r3, r3, #7
 8001ea6:	2b04      	cmp	r3, #4
 8001ea8:	bf28      	it	cs
 8001eaa:	2304      	movcs	r3, #4
 8001eac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001eae:	69fb      	ldr	r3, [r7, #28]
 8001eb0:	3304      	adds	r3, #4
 8001eb2:	2b06      	cmp	r3, #6
 8001eb4:	d902      	bls.n	8001ebc <NVIC_EncodePriority+0x30>
 8001eb6:	69fb      	ldr	r3, [r7, #28]
 8001eb8:	3b03      	subs	r3, #3
 8001eba:	e000      	b.n	8001ebe <NVIC_EncodePriority+0x32>
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ec0:	f04f 32ff 	mov.w	r2, #4294967295
 8001ec4:	69bb      	ldr	r3, [r7, #24]
 8001ec6:	fa02 f303 	lsl.w	r3, r2, r3
 8001eca:	43da      	mvns	r2, r3
 8001ecc:	68bb      	ldr	r3, [r7, #8]
 8001ece:	401a      	ands	r2, r3
 8001ed0:	697b      	ldr	r3, [r7, #20]
 8001ed2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ed4:	f04f 31ff 	mov.w	r1, #4294967295
 8001ed8:	697b      	ldr	r3, [r7, #20]
 8001eda:	fa01 f303 	lsl.w	r3, r1, r3
 8001ede:	43d9      	mvns	r1, r3
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ee4:	4313      	orrs	r3, r2
         );
}
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	3724      	adds	r7, #36	; 0x24
 8001eea:	46bd      	mov	sp, r7
 8001eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef0:	4770      	bx	lr

08001ef2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ef2:	b580      	push	{r7, lr}
 8001ef4:	b082      	sub	sp, #8
 8001ef6:	af00      	add	r7, sp, #0
 8001ef8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001efa:	6878      	ldr	r0, [r7, #4]
 8001efc:	f7ff ff4c 	bl	8001d98 <__NVIC_SetPriorityGrouping>
}
 8001f00:	bf00      	nop
 8001f02:	3708      	adds	r7, #8
 8001f04:	46bd      	mov	sp, r7
 8001f06:	bd80      	pop	{r7, pc}

08001f08 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b086      	sub	sp, #24
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	4603      	mov	r3, r0
 8001f10:	60b9      	str	r1, [r7, #8]
 8001f12:	607a      	str	r2, [r7, #4]
 8001f14:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001f16:	2300      	movs	r3, #0
 8001f18:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001f1a:	f7ff ff61 	bl	8001de0 <__NVIC_GetPriorityGrouping>
 8001f1e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f20:	687a      	ldr	r2, [r7, #4]
 8001f22:	68b9      	ldr	r1, [r7, #8]
 8001f24:	6978      	ldr	r0, [r7, #20]
 8001f26:	f7ff ffb1 	bl	8001e8c <NVIC_EncodePriority>
 8001f2a:	4602      	mov	r2, r0
 8001f2c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f30:	4611      	mov	r1, r2
 8001f32:	4618      	mov	r0, r3
 8001f34:	f7ff ff80 	bl	8001e38 <__NVIC_SetPriority>
}
 8001f38:	bf00      	nop
 8001f3a:	3718      	adds	r7, #24
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	bd80      	pop	{r7, pc}

08001f40 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b082      	sub	sp, #8
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	4603      	mov	r3, r0
 8001f48:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f4e:	4618      	mov	r0, r3
 8001f50:	f7ff ff54 	bl	8001dfc <__NVIC_EnableIRQ>
}
 8001f54:	bf00      	nop
 8001f56:	3708      	adds	r7, #8
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	bd80      	pop	{r7, pc}

08001f5c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f5c:	b480      	push	{r7}
 8001f5e:	b087      	sub	sp, #28
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]
 8001f64:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001f66:	2300      	movs	r3, #0
 8001f68:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f6a:	e148      	b.n	80021fe <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001f6c:	683b      	ldr	r3, [r7, #0]
 8001f6e:	681a      	ldr	r2, [r3, #0]
 8001f70:	2101      	movs	r1, #1
 8001f72:	697b      	ldr	r3, [r7, #20]
 8001f74:	fa01 f303 	lsl.w	r3, r1, r3
 8001f78:	4013      	ands	r3, r2
 8001f7a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	f000 813a 	beq.w	80021f8 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001f84:	683b      	ldr	r3, [r7, #0]
 8001f86:	685b      	ldr	r3, [r3, #4]
 8001f88:	f003 0303 	and.w	r3, r3, #3
 8001f8c:	2b01      	cmp	r3, #1
 8001f8e:	d005      	beq.n	8001f9c <HAL_GPIO_Init+0x40>
 8001f90:	683b      	ldr	r3, [r7, #0]
 8001f92:	685b      	ldr	r3, [r3, #4]
 8001f94:	f003 0303 	and.w	r3, r3, #3
 8001f98:	2b02      	cmp	r3, #2
 8001f9a:	d130      	bne.n	8001ffe <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	689b      	ldr	r3, [r3, #8]
 8001fa0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001fa2:	697b      	ldr	r3, [r7, #20]
 8001fa4:	005b      	lsls	r3, r3, #1
 8001fa6:	2203      	movs	r2, #3
 8001fa8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fac:	43db      	mvns	r3, r3
 8001fae:	693a      	ldr	r2, [r7, #16]
 8001fb0:	4013      	ands	r3, r2
 8001fb2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001fb4:	683b      	ldr	r3, [r7, #0]
 8001fb6:	68da      	ldr	r2, [r3, #12]
 8001fb8:	697b      	ldr	r3, [r7, #20]
 8001fba:	005b      	lsls	r3, r3, #1
 8001fbc:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc0:	693a      	ldr	r2, [r7, #16]
 8001fc2:	4313      	orrs	r3, r2
 8001fc4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	693a      	ldr	r2, [r7, #16]
 8001fca:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	685b      	ldr	r3, [r3, #4]
 8001fd0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001fd2:	2201      	movs	r2, #1
 8001fd4:	697b      	ldr	r3, [r7, #20]
 8001fd6:	fa02 f303 	lsl.w	r3, r2, r3
 8001fda:	43db      	mvns	r3, r3
 8001fdc:	693a      	ldr	r2, [r7, #16]
 8001fde:	4013      	ands	r3, r2
 8001fe0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001fe2:	683b      	ldr	r3, [r7, #0]
 8001fe4:	685b      	ldr	r3, [r3, #4]
 8001fe6:	091b      	lsrs	r3, r3, #4
 8001fe8:	f003 0201 	and.w	r2, r3, #1
 8001fec:	697b      	ldr	r3, [r7, #20]
 8001fee:	fa02 f303 	lsl.w	r3, r2, r3
 8001ff2:	693a      	ldr	r2, [r7, #16]
 8001ff4:	4313      	orrs	r3, r2
 8001ff6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	693a      	ldr	r2, [r7, #16]
 8001ffc:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001ffe:	683b      	ldr	r3, [r7, #0]
 8002000:	685b      	ldr	r3, [r3, #4]
 8002002:	f003 0303 	and.w	r3, r3, #3
 8002006:	2b03      	cmp	r3, #3
 8002008:	d017      	beq.n	800203a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	68db      	ldr	r3, [r3, #12]
 800200e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002010:	697b      	ldr	r3, [r7, #20]
 8002012:	005b      	lsls	r3, r3, #1
 8002014:	2203      	movs	r2, #3
 8002016:	fa02 f303 	lsl.w	r3, r2, r3
 800201a:	43db      	mvns	r3, r3
 800201c:	693a      	ldr	r2, [r7, #16]
 800201e:	4013      	ands	r3, r2
 8002020:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002022:	683b      	ldr	r3, [r7, #0]
 8002024:	689a      	ldr	r2, [r3, #8]
 8002026:	697b      	ldr	r3, [r7, #20]
 8002028:	005b      	lsls	r3, r3, #1
 800202a:	fa02 f303 	lsl.w	r3, r2, r3
 800202e:	693a      	ldr	r2, [r7, #16]
 8002030:	4313      	orrs	r3, r2
 8002032:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	693a      	ldr	r2, [r7, #16]
 8002038:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800203a:	683b      	ldr	r3, [r7, #0]
 800203c:	685b      	ldr	r3, [r3, #4]
 800203e:	f003 0303 	and.w	r3, r3, #3
 8002042:	2b02      	cmp	r3, #2
 8002044:	d123      	bne.n	800208e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002046:	697b      	ldr	r3, [r7, #20]
 8002048:	08da      	lsrs	r2, r3, #3
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	3208      	adds	r2, #8
 800204e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002052:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002054:	697b      	ldr	r3, [r7, #20]
 8002056:	f003 0307 	and.w	r3, r3, #7
 800205a:	009b      	lsls	r3, r3, #2
 800205c:	220f      	movs	r2, #15
 800205e:	fa02 f303 	lsl.w	r3, r2, r3
 8002062:	43db      	mvns	r3, r3
 8002064:	693a      	ldr	r2, [r7, #16]
 8002066:	4013      	ands	r3, r2
 8002068:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800206a:	683b      	ldr	r3, [r7, #0]
 800206c:	691a      	ldr	r2, [r3, #16]
 800206e:	697b      	ldr	r3, [r7, #20]
 8002070:	f003 0307 	and.w	r3, r3, #7
 8002074:	009b      	lsls	r3, r3, #2
 8002076:	fa02 f303 	lsl.w	r3, r2, r3
 800207a:	693a      	ldr	r2, [r7, #16]
 800207c:	4313      	orrs	r3, r2
 800207e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002080:	697b      	ldr	r3, [r7, #20]
 8002082:	08da      	lsrs	r2, r3, #3
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	3208      	adds	r2, #8
 8002088:	6939      	ldr	r1, [r7, #16]
 800208a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002094:	697b      	ldr	r3, [r7, #20]
 8002096:	005b      	lsls	r3, r3, #1
 8002098:	2203      	movs	r2, #3
 800209a:	fa02 f303 	lsl.w	r3, r2, r3
 800209e:	43db      	mvns	r3, r3
 80020a0:	693a      	ldr	r2, [r7, #16]
 80020a2:	4013      	ands	r3, r2
 80020a4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80020a6:	683b      	ldr	r3, [r7, #0]
 80020a8:	685b      	ldr	r3, [r3, #4]
 80020aa:	f003 0203 	and.w	r2, r3, #3
 80020ae:	697b      	ldr	r3, [r7, #20]
 80020b0:	005b      	lsls	r3, r3, #1
 80020b2:	fa02 f303 	lsl.w	r3, r2, r3
 80020b6:	693a      	ldr	r2, [r7, #16]
 80020b8:	4313      	orrs	r3, r2
 80020ba:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	693a      	ldr	r2, [r7, #16]
 80020c0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80020c2:	683b      	ldr	r3, [r7, #0]
 80020c4:	685b      	ldr	r3, [r3, #4]
 80020c6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	f000 8094 	beq.w	80021f8 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020d0:	4b52      	ldr	r3, [pc, #328]	; (800221c <HAL_GPIO_Init+0x2c0>)
 80020d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80020d4:	4a51      	ldr	r2, [pc, #324]	; (800221c <HAL_GPIO_Init+0x2c0>)
 80020d6:	f043 0301 	orr.w	r3, r3, #1
 80020da:	6613      	str	r3, [r2, #96]	; 0x60
 80020dc:	4b4f      	ldr	r3, [pc, #316]	; (800221c <HAL_GPIO_Init+0x2c0>)
 80020de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80020e0:	f003 0301 	and.w	r3, r3, #1
 80020e4:	60bb      	str	r3, [r7, #8]
 80020e6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80020e8:	4a4d      	ldr	r2, [pc, #308]	; (8002220 <HAL_GPIO_Init+0x2c4>)
 80020ea:	697b      	ldr	r3, [r7, #20]
 80020ec:	089b      	lsrs	r3, r3, #2
 80020ee:	3302      	adds	r3, #2
 80020f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020f4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80020f6:	697b      	ldr	r3, [r7, #20]
 80020f8:	f003 0303 	and.w	r3, r3, #3
 80020fc:	009b      	lsls	r3, r3, #2
 80020fe:	220f      	movs	r2, #15
 8002100:	fa02 f303 	lsl.w	r3, r2, r3
 8002104:	43db      	mvns	r3, r3
 8002106:	693a      	ldr	r2, [r7, #16]
 8002108:	4013      	ands	r3, r2
 800210a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002112:	d00d      	beq.n	8002130 <HAL_GPIO_Init+0x1d4>
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	4a43      	ldr	r2, [pc, #268]	; (8002224 <HAL_GPIO_Init+0x2c8>)
 8002118:	4293      	cmp	r3, r2
 800211a:	d007      	beq.n	800212c <HAL_GPIO_Init+0x1d0>
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	4a42      	ldr	r2, [pc, #264]	; (8002228 <HAL_GPIO_Init+0x2cc>)
 8002120:	4293      	cmp	r3, r2
 8002122:	d101      	bne.n	8002128 <HAL_GPIO_Init+0x1cc>
 8002124:	2302      	movs	r3, #2
 8002126:	e004      	b.n	8002132 <HAL_GPIO_Init+0x1d6>
 8002128:	2307      	movs	r3, #7
 800212a:	e002      	b.n	8002132 <HAL_GPIO_Init+0x1d6>
 800212c:	2301      	movs	r3, #1
 800212e:	e000      	b.n	8002132 <HAL_GPIO_Init+0x1d6>
 8002130:	2300      	movs	r3, #0
 8002132:	697a      	ldr	r2, [r7, #20]
 8002134:	f002 0203 	and.w	r2, r2, #3
 8002138:	0092      	lsls	r2, r2, #2
 800213a:	4093      	lsls	r3, r2
 800213c:	693a      	ldr	r2, [r7, #16]
 800213e:	4313      	orrs	r3, r2
 8002140:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002142:	4937      	ldr	r1, [pc, #220]	; (8002220 <HAL_GPIO_Init+0x2c4>)
 8002144:	697b      	ldr	r3, [r7, #20]
 8002146:	089b      	lsrs	r3, r3, #2
 8002148:	3302      	adds	r3, #2
 800214a:	693a      	ldr	r2, [r7, #16]
 800214c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002150:	4b36      	ldr	r3, [pc, #216]	; (800222c <HAL_GPIO_Init+0x2d0>)
 8002152:	689b      	ldr	r3, [r3, #8]
 8002154:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	43db      	mvns	r3, r3
 800215a:	693a      	ldr	r2, [r7, #16]
 800215c:	4013      	ands	r3, r2
 800215e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002160:	683b      	ldr	r3, [r7, #0]
 8002162:	685b      	ldr	r3, [r3, #4]
 8002164:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002168:	2b00      	cmp	r3, #0
 800216a:	d003      	beq.n	8002174 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 800216c:	693a      	ldr	r2, [r7, #16]
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	4313      	orrs	r3, r2
 8002172:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002174:	4a2d      	ldr	r2, [pc, #180]	; (800222c <HAL_GPIO_Init+0x2d0>)
 8002176:	693b      	ldr	r3, [r7, #16]
 8002178:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800217a:	4b2c      	ldr	r3, [pc, #176]	; (800222c <HAL_GPIO_Init+0x2d0>)
 800217c:	68db      	ldr	r3, [r3, #12]
 800217e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	43db      	mvns	r3, r3
 8002184:	693a      	ldr	r2, [r7, #16]
 8002186:	4013      	ands	r3, r2
 8002188:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800218a:	683b      	ldr	r3, [r7, #0]
 800218c:	685b      	ldr	r3, [r3, #4]
 800218e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002192:	2b00      	cmp	r3, #0
 8002194:	d003      	beq.n	800219e <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8002196:	693a      	ldr	r2, [r7, #16]
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	4313      	orrs	r3, r2
 800219c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800219e:	4a23      	ldr	r2, [pc, #140]	; (800222c <HAL_GPIO_Init+0x2d0>)
 80021a0:	693b      	ldr	r3, [r7, #16]
 80021a2:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80021a4:	4b21      	ldr	r3, [pc, #132]	; (800222c <HAL_GPIO_Init+0x2d0>)
 80021a6:	685b      	ldr	r3, [r3, #4]
 80021a8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	43db      	mvns	r3, r3
 80021ae:	693a      	ldr	r2, [r7, #16]
 80021b0:	4013      	ands	r3, r2
 80021b2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80021b4:	683b      	ldr	r3, [r7, #0]
 80021b6:	685b      	ldr	r3, [r3, #4]
 80021b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d003      	beq.n	80021c8 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 80021c0:	693a      	ldr	r2, [r7, #16]
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	4313      	orrs	r3, r2
 80021c6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80021c8:	4a18      	ldr	r2, [pc, #96]	; (800222c <HAL_GPIO_Init+0x2d0>)
 80021ca:	693b      	ldr	r3, [r7, #16]
 80021cc:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80021ce:	4b17      	ldr	r3, [pc, #92]	; (800222c <HAL_GPIO_Init+0x2d0>)
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	43db      	mvns	r3, r3
 80021d8:	693a      	ldr	r2, [r7, #16]
 80021da:	4013      	ands	r3, r2
 80021dc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80021de:	683b      	ldr	r3, [r7, #0]
 80021e0:	685b      	ldr	r3, [r3, #4]
 80021e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d003      	beq.n	80021f2 <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 80021ea:	693a      	ldr	r2, [r7, #16]
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	4313      	orrs	r3, r2
 80021f0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80021f2:	4a0e      	ldr	r2, [pc, #56]	; (800222c <HAL_GPIO_Init+0x2d0>)
 80021f4:	693b      	ldr	r3, [r7, #16]
 80021f6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80021f8:	697b      	ldr	r3, [r7, #20]
 80021fa:	3301      	adds	r3, #1
 80021fc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80021fe:	683b      	ldr	r3, [r7, #0]
 8002200:	681a      	ldr	r2, [r3, #0]
 8002202:	697b      	ldr	r3, [r7, #20]
 8002204:	fa22 f303 	lsr.w	r3, r2, r3
 8002208:	2b00      	cmp	r3, #0
 800220a:	f47f aeaf 	bne.w	8001f6c <HAL_GPIO_Init+0x10>
  }
}
 800220e:	bf00      	nop
 8002210:	bf00      	nop
 8002212:	371c      	adds	r7, #28
 8002214:	46bd      	mov	sp, r7
 8002216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221a:	4770      	bx	lr
 800221c:	40021000 	.word	0x40021000
 8002220:	40010000 	.word	0x40010000
 8002224:	48000400 	.word	0x48000400
 8002228:	48000800 	.word	0x48000800
 800222c:	40010400 	.word	0x40010400

08002230 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002230:	b480      	push	{r7}
 8002232:	b085      	sub	sp, #20
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
 8002238:	460b      	mov	r3, r1
 800223a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	691a      	ldr	r2, [r3, #16]
 8002240:	887b      	ldrh	r3, [r7, #2]
 8002242:	4013      	ands	r3, r2
 8002244:	2b00      	cmp	r3, #0
 8002246:	d002      	beq.n	800224e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002248:	2301      	movs	r3, #1
 800224a:	73fb      	strb	r3, [r7, #15]
 800224c:	e001      	b.n	8002252 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800224e:	2300      	movs	r3, #0
 8002250:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002252:	7bfb      	ldrb	r3, [r7, #15]
}
 8002254:	4618      	mov	r0, r3
 8002256:	3714      	adds	r7, #20
 8002258:	46bd      	mov	sp, r7
 800225a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225e:	4770      	bx	lr

08002260 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002260:	b480      	push	{r7}
 8002262:	b083      	sub	sp, #12
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
 8002268:	460b      	mov	r3, r1
 800226a:	807b      	strh	r3, [r7, #2]
 800226c:	4613      	mov	r3, r2
 800226e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002270:	787b      	ldrb	r3, [r7, #1]
 8002272:	2b00      	cmp	r3, #0
 8002274:	d003      	beq.n	800227e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002276:	887a      	ldrh	r2, [r7, #2]
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800227c:	e002      	b.n	8002284 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800227e:	887a      	ldrh	r2, [r7, #2]
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002284:	bf00      	nop
 8002286:	370c      	adds	r7, #12
 8002288:	46bd      	mov	sp, r7
 800228a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228e:	4770      	bx	lr

08002290 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002290:	b580      	push	{r7, lr}
 8002292:	b082      	sub	sp, #8
 8002294:	af00      	add	r7, sp, #0
 8002296:	4603      	mov	r3, r0
 8002298:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800229a:	4b08      	ldr	r3, [pc, #32]	; (80022bc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800229c:	695a      	ldr	r2, [r3, #20]
 800229e:	88fb      	ldrh	r3, [r7, #6]
 80022a0:	4013      	ands	r3, r2
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d006      	beq.n	80022b4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80022a6:	4a05      	ldr	r2, [pc, #20]	; (80022bc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80022a8:	88fb      	ldrh	r3, [r7, #6]
 80022aa:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80022ac:	88fb      	ldrh	r3, [r7, #6]
 80022ae:	4618      	mov	r0, r3
 80022b0:	f7ff f9a8 	bl	8001604 <HAL_GPIO_EXTI_Callback>
  }
}
 80022b4:	bf00      	nop
 80022b6:	3708      	adds	r7, #8
 80022b8:	46bd      	mov	sp, r7
 80022ba:	bd80      	pop	{r7, pc}
 80022bc:	40010400 	.word	0x40010400

080022c0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	b082      	sub	sp, #8
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d101      	bne.n	80022d2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80022ce:	2301      	movs	r3, #1
 80022d0:	e081      	b.n	80023d6 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80022d8:	b2db      	uxtb	r3, r3
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d106      	bne.n	80022ec <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	2200      	movs	r2, #0
 80022e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80022e6:	6878      	ldr	r0, [r7, #4]
 80022e8:	f7ff fb42 	bl	8001970 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	2224      	movs	r2, #36	; 0x24
 80022f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	681a      	ldr	r2, [r3, #0]
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f022 0201 	bic.w	r2, r2, #1
 8002302:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	685a      	ldr	r2, [r3, #4]
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002310:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	689a      	ldr	r2, [r3, #8]
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002320:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	68db      	ldr	r3, [r3, #12]
 8002326:	2b01      	cmp	r3, #1
 8002328:	d107      	bne.n	800233a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	689a      	ldr	r2, [r3, #8]
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002336:	609a      	str	r2, [r3, #8]
 8002338:	e006      	b.n	8002348 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	689a      	ldr	r2, [r3, #8]
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002346:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	68db      	ldr	r3, [r3, #12]
 800234c:	2b02      	cmp	r3, #2
 800234e:	d104      	bne.n	800235a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002358:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	685b      	ldr	r3, [r3, #4]
 8002360:	687a      	ldr	r2, [r7, #4]
 8002362:	6812      	ldr	r2, [r2, #0]
 8002364:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002368:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800236c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	68da      	ldr	r2, [r3, #12]
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800237c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	691a      	ldr	r2, [r3, #16]
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	695b      	ldr	r3, [r3, #20]
 8002386:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	699b      	ldr	r3, [r3, #24]
 800238e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	430a      	orrs	r2, r1
 8002396:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	69d9      	ldr	r1, [r3, #28]
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	6a1a      	ldr	r2, [r3, #32]
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	430a      	orrs	r2, r1
 80023a6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	681a      	ldr	r2, [r3, #0]
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f042 0201 	orr.w	r2, r2, #1
 80023b6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	2200      	movs	r2, #0
 80023bc:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	2220      	movs	r2, #32
 80023c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	2200      	movs	r2, #0
 80023ca:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	2200      	movs	r2, #0
 80023d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80023d4:	2300      	movs	r3, #0
}
 80023d6:	4618      	mov	r0, r3
 80023d8:	3708      	adds	r7, #8
 80023da:	46bd      	mov	sp, r7
 80023dc:	bd80      	pop	{r7, pc}
	...

080023e0 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b088      	sub	sp, #32
 80023e4:	af02      	add	r7, sp, #8
 80023e6:	60f8      	str	r0, [r7, #12]
 80023e8:	607a      	str	r2, [r7, #4]
 80023ea:	461a      	mov	r2, r3
 80023ec:	460b      	mov	r3, r1
 80023ee:	817b      	strh	r3, [r7, #10]
 80023f0:	4613      	mov	r3, r2
 80023f2:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80023fa:	b2db      	uxtb	r3, r3
 80023fc:	2b20      	cmp	r3, #32
 80023fe:	f040 80da 	bne.w	80025b6 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002408:	2b01      	cmp	r3, #1
 800240a:	d101      	bne.n	8002410 <HAL_I2C_Master_Transmit+0x30>
 800240c:	2302      	movs	r3, #2
 800240e:	e0d3      	b.n	80025b8 <HAL_I2C_Master_Transmit+0x1d8>
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	2201      	movs	r2, #1
 8002414:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002418:	f7ff fcb2 	bl	8001d80 <HAL_GetTick>
 800241c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800241e:	697b      	ldr	r3, [r7, #20]
 8002420:	9300      	str	r3, [sp, #0]
 8002422:	2319      	movs	r3, #25
 8002424:	2201      	movs	r2, #1
 8002426:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800242a:	68f8      	ldr	r0, [r7, #12]
 800242c:	f000 fa00 	bl	8002830 <I2C_WaitOnFlagUntilTimeout>
 8002430:	4603      	mov	r3, r0
 8002432:	2b00      	cmp	r3, #0
 8002434:	d001      	beq.n	800243a <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8002436:	2301      	movs	r3, #1
 8002438:	e0be      	b.n	80025b8 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	2221      	movs	r2, #33	; 0x21
 800243e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	2210      	movs	r2, #16
 8002446:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	2200      	movs	r2, #0
 800244e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	687a      	ldr	r2, [r7, #4]
 8002454:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	893a      	ldrh	r2, [r7, #8]
 800245a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	2200      	movs	r2, #0
 8002460:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002466:	b29b      	uxth	r3, r3
 8002468:	2bff      	cmp	r3, #255	; 0xff
 800246a:	d90e      	bls.n	800248a <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	22ff      	movs	r2, #255	; 0xff
 8002470:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002476:	b2da      	uxtb	r2, r3
 8002478:	8979      	ldrh	r1, [r7, #10]
 800247a:	4b51      	ldr	r3, [pc, #324]	; (80025c0 <HAL_I2C_Master_Transmit+0x1e0>)
 800247c:	9300      	str	r3, [sp, #0]
 800247e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002482:	68f8      	ldr	r0, [r7, #12]
 8002484:	f000 fbf6 	bl	8002c74 <I2C_TransferConfig>
 8002488:	e06c      	b.n	8002564 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800248e:	b29a      	uxth	r2, r3
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002498:	b2da      	uxtb	r2, r3
 800249a:	8979      	ldrh	r1, [r7, #10]
 800249c:	4b48      	ldr	r3, [pc, #288]	; (80025c0 <HAL_I2C_Master_Transmit+0x1e0>)
 800249e:	9300      	str	r3, [sp, #0]
 80024a0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80024a4:	68f8      	ldr	r0, [r7, #12]
 80024a6:	f000 fbe5 	bl	8002c74 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80024aa:	e05b      	b.n	8002564 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80024ac:	697a      	ldr	r2, [r7, #20]
 80024ae:	6a39      	ldr	r1, [r7, #32]
 80024b0:	68f8      	ldr	r0, [r7, #12]
 80024b2:	f000 f9fd 	bl	80028b0 <I2C_WaitOnTXISFlagUntilTimeout>
 80024b6:	4603      	mov	r3, r0
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d001      	beq.n	80024c0 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 80024bc:	2301      	movs	r3, #1
 80024be:	e07b      	b.n	80025b8 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024c4:	781a      	ldrb	r2, [r3, #0]
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024d0:	1c5a      	adds	r2, r3, #1
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024da:	b29b      	uxth	r3, r3
 80024dc:	3b01      	subs	r3, #1
 80024de:	b29a      	uxth	r2, r3
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024e8:	3b01      	subs	r3, #1
 80024ea:	b29a      	uxth	r2, r3
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024f4:	b29b      	uxth	r3, r3
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d034      	beq.n	8002564 <HAL_I2C_Master_Transmit+0x184>
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d130      	bne.n	8002564 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002502:	697b      	ldr	r3, [r7, #20]
 8002504:	9300      	str	r3, [sp, #0]
 8002506:	6a3b      	ldr	r3, [r7, #32]
 8002508:	2200      	movs	r2, #0
 800250a:	2180      	movs	r1, #128	; 0x80
 800250c:	68f8      	ldr	r0, [r7, #12]
 800250e:	f000 f98f 	bl	8002830 <I2C_WaitOnFlagUntilTimeout>
 8002512:	4603      	mov	r3, r0
 8002514:	2b00      	cmp	r3, #0
 8002516:	d001      	beq.n	800251c <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8002518:	2301      	movs	r3, #1
 800251a:	e04d      	b.n	80025b8 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002520:	b29b      	uxth	r3, r3
 8002522:	2bff      	cmp	r3, #255	; 0xff
 8002524:	d90e      	bls.n	8002544 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	22ff      	movs	r2, #255	; 0xff
 800252a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002530:	b2da      	uxtb	r2, r3
 8002532:	8979      	ldrh	r1, [r7, #10]
 8002534:	2300      	movs	r3, #0
 8002536:	9300      	str	r3, [sp, #0]
 8002538:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800253c:	68f8      	ldr	r0, [r7, #12]
 800253e:	f000 fb99 	bl	8002c74 <I2C_TransferConfig>
 8002542:	e00f      	b.n	8002564 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002548:	b29a      	uxth	r2, r3
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002552:	b2da      	uxtb	r2, r3
 8002554:	8979      	ldrh	r1, [r7, #10]
 8002556:	2300      	movs	r3, #0
 8002558:	9300      	str	r3, [sp, #0]
 800255a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800255e:	68f8      	ldr	r0, [r7, #12]
 8002560:	f000 fb88 	bl	8002c74 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002568:	b29b      	uxth	r3, r3
 800256a:	2b00      	cmp	r3, #0
 800256c:	d19e      	bne.n	80024ac <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800256e:	697a      	ldr	r2, [r7, #20]
 8002570:	6a39      	ldr	r1, [r7, #32]
 8002572:	68f8      	ldr	r0, [r7, #12]
 8002574:	f000 f9dc 	bl	8002930 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002578:	4603      	mov	r3, r0
 800257a:	2b00      	cmp	r3, #0
 800257c:	d001      	beq.n	8002582 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 800257e:	2301      	movs	r3, #1
 8002580:	e01a      	b.n	80025b8 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	2220      	movs	r2, #32
 8002588:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	6859      	ldr	r1, [r3, #4]
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	681a      	ldr	r2, [r3, #0]
 8002594:	4b0b      	ldr	r3, [pc, #44]	; (80025c4 <HAL_I2C_Master_Transmit+0x1e4>)
 8002596:	400b      	ands	r3, r1
 8002598:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	2220      	movs	r2, #32
 800259e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	2200      	movs	r2, #0
 80025a6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	2200      	movs	r2, #0
 80025ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80025b2:	2300      	movs	r3, #0
 80025b4:	e000      	b.n	80025b8 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 80025b6:	2302      	movs	r3, #2
  }
}
 80025b8:	4618      	mov	r0, r3
 80025ba:	3718      	adds	r7, #24
 80025bc:	46bd      	mov	sp, r7
 80025be:	bd80      	pop	{r7, pc}
 80025c0:	80002000 	.word	0x80002000
 80025c4:	fe00e800 	.word	0xfe00e800

080025c8 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	b088      	sub	sp, #32
 80025cc:	af02      	add	r7, sp, #8
 80025ce:	60f8      	str	r0, [r7, #12]
 80025d0:	607a      	str	r2, [r7, #4]
 80025d2:	461a      	mov	r2, r3
 80025d4:	460b      	mov	r3, r1
 80025d6:	817b      	strh	r3, [r7, #10]
 80025d8:	4613      	mov	r3, r2
 80025da:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80025e2:	b2db      	uxtb	r3, r3
 80025e4:	2b20      	cmp	r3, #32
 80025e6:	f040 80db 	bne.w	80027a0 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80025f0:	2b01      	cmp	r3, #1
 80025f2:	d101      	bne.n	80025f8 <HAL_I2C_Master_Receive+0x30>
 80025f4:	2302      	movs	r3, #2
 80025f6:	e0d4      	b.n	80027a2 <HAL_I2C_Master_Receive+0x1da>
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	2201      	movs	r2, #1
 80025fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002600:	f7ff fbbe 	bl	8001d80 <HAL_GetTick>
 8002604:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002606:	697b      	ldr	r3, [r7, #20]
 8002608:	9300      	str	r3, [sp, #0]
 800260a:	2319      	movs	r3, #25
 800260c:	2201      	movs	r2, #1
 800260e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002612:	68f8      	ldr	r0, [r7, #12]
 8002614:	f000 f90c 	bl	8002830 <I2C_WaitOnFlagUntilTimeout>
 8002618:	4603      	mov	r3, r0
 800261a:	2b00      	cmp	r3, #0
 800261c:	d001      	beq.n	8002622 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 800261e:	2301      	movs	r3, #1
 8002620:	e0bf      	b.n	80027a2 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	2222      	movs	r2, #34	; 0x22
 8002626:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	2210      	movs	r2, #16
 800262e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	2200      	movs	r2, #0
 8002636:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	687a      	ldr	r2, [r7, #4]
 800263c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	893a      	ldrh	r2, [r7, #8]
 8002642:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	2200      	movs	r2, #0
 8002648:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800264e:	b29b      	uxth	r3, r3
 8002650:	2bff      	cmp	r3, #255	; 0xff
 8002652:	d90e      	bls.n	8002672 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	22ff      	movs	r2, #255	; 0xff
 8002658:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800265e:	b2da      	uxtb	r2, r3
 8002660:	8979      	ldrh	r1, [r7, #10]
 8002662:	4b52      	ldr	r3, [pc, #328]	; (80027ac <HAL_I2C_Master_Receive+0x1e4>)
 8002664:	9300      	str	r3, [sp, #0]
 8002666:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800266a:	68f8      	ldr	r0, [r7, #12]
 800266c:	f000 fb02 	bl	8002c74 <I2C_TransferConfig>
 8002670:	e06d      	b.n	800274e <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002676:	b29a      	uxth	r2, r3
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002680:	b2da      	uxtb	r2, r3
 8002682:	8979      	ldrh	r1, [r7, #10]
 8002684:	4b49      	ldr	r3, [pc, #292]	; (80027ac <HAL_I2C_Master_Receive+0x1e4>)
 8002686:	9300      	str	r3, [sp, #0]
 8002688:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800268c:	68f8      	ldr	r0, [r7, #12]
 800268e:	f000 faf1 	bl	8002c74 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8002692:	e05c      	b.n	800274e <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002694:	697a      	ldr	r2, [r7, #20]
 8002696:	6a39      	ldr	r1, [r7, #32]
 8002698:	68f8      	ldr	r0, [r7, #12]
 800269a:	f000 f985 	bl	80029a8 <I2C_WaitOnRXNEFlagUntilTimeout>
 800269e:	4603      	mov	r3, r0
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d001      	beq.n	80026a8 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 80026a4:	2301      	movs	r3, #1
 80026a6:	e07c      	b.n	80027a2 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026b2:	b2d2      	uxtb	r2, r2
 80026b4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026ba:	1c5a      	adds	r2, r3, #1
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026c4:	3b01      	subs	r3, #1
 80026c6:	b29a      	uxth	r2, r3
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026d0:	b29b      	uxth	r3, r3
 80026d2:	3b01      	subs	r3, #1
 80026d4:	b29a      	uxth	r2, r3
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026de:	b29b      	uxth	r3, r3
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d034      	beq.n	800274e <HAL_I2C_Master_Receive+0x186>
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d130      	bne.n	800274e <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80026ec:	697b      	ldr	r3, [r7, #20]
 80026ee:	9300      	str	r3, [sp, #0]
 80026f0:	6a3b      	ldr	r3, [r7, #32]
 80026f2:	2200      	movs	r2, #0
 80026f4:	2180      	movs	r1, #128	; 0x80
 80026f6:	68f8      	ldr	r0, [r7, #12]
 80026f8:	f000 f89a 	bl	8002830 <I2C_WaitOnFlagUntilTimeout>
 80026fc:	4603      	mov	r3, r0
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d001      	beq.n	8002706 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8002702:	2301      	movs	r3, #1
 8002704:	e04d      	b.n	80027a2 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800270a:	b29b      	uxth	r3, r3
 800270c:	2bff      	cmp	r3, #255	; 0xff
 800270e:	d90e      	bls.n	800272e <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	22ff      	movs	r2, #255	; 0xff
 8002714:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800271a:	b2da      	uxtb	r2, r3
 800271c:	8979      	ldrh	r1, [r7, #10]
 800271e:	2300      	movs	r3, #0
 8002720:	9300      	str	r3, [sp, #0]
 8002722:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002726:	68f8      	ldr	r0, [r7, #12]
 8002728:	f000 faa4 	bl	8002c74 <I2C_TransferConfig>
 800272c:	e00f      	b.n	800274e <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002732:	b29a      	uxth	r2, r3
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800273c:	b2da      	uxtb	r2, r3
 800273e:	8979      	ldrh	r1, [r7, #10]
 8002740:	2300      	movs	r3, #0
 8002742:	9300      	str	r3, [sp, #0]
 8002744:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002748:	68f8      	ldr	r0, [r7, #12]
 800274a:	f000 fa93 	bl	8002c74 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002752:	b29b      	uxth	r3, r3
 8002754:	2b00      	cmp	r3, #0
 8002756:	d19d      	bne.n	8002694 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002758:	697a      	ldr	r2, [r7, #20]
 800275a:	6a39      	ldr	r1, [r7, #32]
 800275c:	68f8      	ldr	r0, [r7, #12]
 800275e:	f000 f8e7 	bl	8002930 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002762:	4603      	mov	r3, r0
 8002764:	2b00      	cmp	r3, #0
 8002766:	d001      	beq.n	800276c <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8002768:	2301      	movs	r3, #1
 800276a:	e01a      	b.n	80027a2 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	2220      	movs	r2, #32
 8002772:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	6859      	ldr	r1, [r3, #4]
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	681a      	ldr	r2, [r3, #0]
 800277e:	4b0c      	ldr	r3, [pc, #48]	; (80027b0 <HAL_I2C_Master_Receive+0x1e8>)
 8002780:	400b      	ands	r3, r1
 8002782:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	2220      	movs	r2, #32
 8002788:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	2200      	movs	r2, #0
 8002790:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	2200      	movs	r2, #0
 8002798:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800279c:	2300      	movs	r3, #0
 800279e:	e000      	b.n	80027a2 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 80027a0:	2302      	movs	r3, #2
  }
}
 80027a2:	4618      	mov	r0, r3
 80027a4:	3718      	adds	r7, #24
 80027a6:	46bd      	mov	sp, r7
 80027a8:	bd80      	pop	{r7, pc}
 80027aa:	bf00      	nop
 80027ac:	80002400 	.word	0x80002400
 80027b0:	fe00e800 	.word	0xfe00e800

080027b4 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80027b4:	b580      	push	{r7, lr}
 80027b6:	b084      	sub	sp, #16
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	699b      	ldr	r3, [r3, #24]
 80027c2:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d005      	beq.n	80027e0 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027d8:	68ba      	ldr	r2, [r7, #8]
 80027da:	68f9      	ldr	r1, [r7, #12]
 80027dc:	6878      	ldr	r0, [r7, #4]
 80027de:	4798      	blx	r3
  }
}
 80027e0:	bf00      	nop
 80027e2:	3710      	adds	r7, #16
 80027e4:	46bd      	mov	sp, r7
 80027e6:	bd80      	pop	{r7, pc}

080027e8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80027e8:	b480      	push	{r7}
 80027ea:	b083      	sub	sp, #12
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	699b      	ldr	r3, [r3, #24]
 80027f6:	f003 0302 	and.w	r3, r3, #2
 80027fa:	2b02      	cmp	r3, #2
 80027fc:	d103      	bne.n	8002806 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	2200      	movs	r2, #0
 8002804:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	699b      	ldr	r3, [r3, #24]
 800280c:	f003 0301 	and.w	r3, r3, #1
 8002810:	2b01      	cmp	r3, #1
 8002812:	d007      	beq.n	8002824 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	699a      	ldr	r2, [r3, #24]
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f042 0201 	orr.w	r2, r2, #1
 8002822:	619a      	str	r2, [r3, #24]
  }
}
 8002824:	bf00      	nop
 8002826:	370c      	adds	r7, #12
 8002828:	46bd      	mov	sp, r7
 800282a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800282e:	4770      	bx	lr

08002830 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002830:	b580      	push	{r7, lr}
 8002832:	b084      	sub	sp, #16
 8002834:	af00      	add	r7, sp, #0
 8002836:	60f8      	str	r0, [r7, #12]
 8002838:	60b9      	str	r1, [r7, #8]
 800283a:	603b      	str	r3, [r7, #0]
 800283c:	4613      	mov	r3, r2
 800283e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002840:	e022      	b.n	8002888 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002842:	683b      	ldr	r3, [r7, #0]
 8002844:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002848:	d01e      	beq.n	8002888 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800284a:	f7ff fa99 	bl	8001d80 <HAL_GetTick>
 800284e:	4602      	mov	r2, r0
 8002850:	69bb      	ldr	r3, [r7, #24]
 8002852:	1ad3      	subs	r3, r2, r3
 8002854:	683a      	ldr	r2, [r7, #0]
 8002856:	429a      	cmp	r2, r3
 8002858:	d302      	bcc.n	8002860 <I2C_WaitOnFlagUntilTimeout+0x30>
 800285a:	683b      	ldr	r3, [r7, #0]
 800285c:	2b00      	cmp	r3, #0
 800285e:	d113      	bne.n	8002888 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002864:	f043 0220 	orr.w	r2, r3, #32
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	2220      	movs	r2, #32
 8002870:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	2200      	movs	r2, #0
 8002878:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	2200      	movs	r2, #0
 8002880:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8002884:	2301      	movs	r3, #1
 8002886:	e00f      	b.n	80028a8 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	699a      	ldr	r2, [r3, #24]
 800288e:	68bb      	ldr	r3, [r7, #8]
 8002890:	4013      	ands	r3, r2
 8002892:	68ba      	ldr	r2, [r7, #8]
 8002894:	429a      	cmp	r2, r3
 8002896:	bf0c      	ite	eq
 8002898:	2301      	moveq	r3, #1
 800289a:	2300      	movne	r3, #0
 800289c:	b2db      	uxtb	r3, r3
 800289e:	461a      	mov	r2, r3
 80028a0:	79fb      	ldrb	r3, [r7, #7]
 80028a2:	429a      	cmp	r2, r3
 80028a4:	d0cd      	beq.n	8002842 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80028a6:	2300      	movs	r3, #0
}
 80028a8:	4618      	mov	r0, r3
 80028aa:	3710      	adds	r7, #16
 80028ac:	46bd      	mov	sp, r7
 80028ae:	bd80      	pop	{r7, pc}

080028b0 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80028b0:	b580      	push	{r7, lr}
 80028b2:	b084      	sub	sp, #16
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	60f8      	str	r0, [r7, #12]
 80028b8:	60b9      	str	r1, [r7, #8]
 80028ba:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80028bc:	e02c      	b.n	8002918 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80028be:	687a      	ldr	r2, [r7, #4]
 80028c0:	68b9      	ldr	r1, [r7, #8]
 80028c2:	68f8      	ldr	r0, [r7, #12]
 80028c4:	f000 f8ea 	bl	8002a9c <I2C_IsErrorOccurred>
 80028c8:	4603      	mov	r3, r0
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d001      	beq.n	80028d2 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80028ce:	2301      	movs	r3, #1
 80028d0:	e02a      	b.n	8002928 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80028d2:	68bb      	ldr	r3, [r7, #8]
 80028d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028d8:	d01e      	beq.n	8002918 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80028da:	f7ff fa51 	bl	8001d80 <HAL_GetTick>
 80028de:	4602      	mov	r2, r0
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	1ad3      	subs	r3, r2, r3
 80028e4:	68ba      	ldr	r2, [r7, #8]
 80028e6:	429a      	cmp	r2, r3
 80028e8:	d302      	bcc.n	80028f0 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80028ea:	68bb      	ldr	r3, [r7, #8]
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d113      	bne.n	8002918 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028f4:	f043 0220 	orr.w	r2, r3, #32
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	2220      	movs	r2, #32
 8002900:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	2200      	movs	r2, #0
 8002908:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	2200      	movs	r2, #0
 8002910:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002914:	2301      	movs	r3, #1
 8002916:	e007      	b.n	8002928 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	699b      	ldr	r3, [r3, #24]
 800291e:	f003 0302 	and.w	r3, r3, #2
 8002922:	2b02      	cmp	r3, #2
 8002924:	d1cb      	bne.n	80028be <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002926:	2300      	movs	r3, #0
}
 8002928:	4618      	mov	r0, r3
 800292a:	3710      	adds	r7, #16
 800292c:	46bd      	mov	sp, r7
 800292e:	bd80      	pop	{r7, pc}

08002930 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002930:	b580      	push	{r7, lr}
 8002932:	b084      	sub	sp, #16
 8002934:	af00      	add	r7, sp, #0
 8002936:	60f8      	str	r0, [r7, #12]
 8002938:	60b9      	str	r1, [r7, #8]
 800293a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800293c:	e028      	b.n	8002990 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800293e:	687a      	ldr	r2, [r7, #4]
 8002940:	68b9      	ldr	r1, [r7, #8]
 8002942:	68f8      	ldr	r0, [r7, #12]
 8002944:	f000 f8aa 	bl	8002a9c <I2C_IsErrorOccurred>
 8002948:	4603      	mov	r3, r0
 800294a:	2b00      	cmp	r3, #0
 800294c:	d001      	beq.n	8002952 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800294e:	2301      	movs	r3, #1
 8002950:	e026      	b.n	80029a0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002952:	f7ff fa15 	bl	8001d80 <HAL_GetTick>
 8002956:	4602      	mov	r2, r0
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	1ad3      	subs	r3, r2, r3
 800295c:	68ba      	ldr	r2, [r7, #8]
 800295e:	429a      	cmp	r2, r3
 8002960:	d302      	bcc.n	8002968 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002962:	68bb      	ldr	r3, [r7, #8]
 8002964:	2b00      	cmp	r3, #0
 8002966:	d113      	bne.n	8002990 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800296c:	f043 0220 	orr.w	r2, r3, #32
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	2220      	movs	r2, #32
 8002978:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	2200      	movs	r2, #0
 8002980:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	2200      	movs	r2, #0
 8002988:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800298c:	2301      	movs	r3, #1
 800298e:	e007      	b.n	80029a0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	699b      	ldr	r3, [r3, #24]
 8002996:	f003 0320 	and.w	r3, r3, #32
 800299a:	2b20      	cmp	r3, #32
 800299c:	d1cf      	bne.n	800293e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800299e:	2300      	movs	r3, #0
}
 80029a0:	4618      	mov	r0, r3
 80029a2:	3710      	adds	r7, #16
 80029a4:	46bd      	mov	sp, r7
 80029a6:	bd80      	pop	{r7, pc}

080029a8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80029a8:	b580      	push	{r7, lr}
 80029aa:	b084      	sub	sp, #16
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	60f8      	str	r0, [r7, #12]
 80029b0:	60b9      	str	r1, [r7, #8]
 80029b2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80029b4:	e064      	b.n	8002a80 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80029b6:	687a      	ldr	r2, [r7, #4]
 80029b8:	68b9      	ldr	r1, [r7, #8]
 80029ba:	68f8      	ldr	r0, [r7, #12]
 80029bc:	f000 f86e 	bl	8002a9c <I2C_IsErrorOccurred>
 80029c0:	4603      	mov	r3, r0
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d001      	beq.n	80029ca <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80029c6:	2301      	movs	r3, #1
 80029c8:	e062      	b.n	8002a90 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	699b      	ldr	r3, [r3, #24]
 80029d0:	f003 0320 	and.w	r3, r3, #32
 80029d4:	2b20      	cmp	r3, #32
 80029d6:	d138      	bne.n	8002a4a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	699b      	ldr	r3, [r3, #24]
 80029de:	f003 0304 	and.w	r3, r3, #4
 80029e2:	2b04      	cmp	r3, #4
 80029e4:	d105      	bne.n	80029f2 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d001      	beq.n	80029f2 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 80029ee:	2300      	movs	r3, #0
 80029f0:	e04e      	b.n	8002a90 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	699b      	ldr	r3, [r3, #24]
 80029f8:	f003 0310 	and.w	r3, r3, #16
 80029fc:	2b10      	cmp	r3, #16
 80029fe:	d107      	bne.n	8002a10 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	2210      	movs	r2, #16
 8002a06:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	2204      	movs	r2, #4
 8002a0c:	645a      	str	r2, [r3, #68]	; 0x44
 8002a0e:	e002      	b.n	8002a16 <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	2200      	movs	r2, #0
 8002a14:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	2220      	movs	r2, #32
 8002a1c:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	6859      	ldr	r1, [r3, #4]
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	681a      	ldr	r2, [r3, #0]
 8002a28:	4b1b      	ldr	r3, [pc, #108]	; (8002a98 <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 8002a2a:	400b      	ands	r3, r1
 8002a2c:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	2220      	movs	r2, #32
 8002a32:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	2200      	movs	r2, #0
 8002a3a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	2200      	movs	r2, #0
 8002a42:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002a46:	2301      	movs	r3, #1
 8002a48:	e022      	b.n	8002a90 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a4a:	f7ff f999 	bl	8001d80 <HAL_GetTick>
 8002a4e:	4602      	mov	r2, r0
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	1ad3      	subs	r3, r2, r3
 8002a54:	68ba      	ldr	r2, [r7, #8]
 8002a56:	429a      	cmp	r2, r3
 8002a58:	d302      	bcc.n	8002a60 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 8002a5a:	68bb      	ldr	r3, [r7, #8]
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d10f      	bne.n	8002a80 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a64:	f043 0220 	orr.w	r2, r3, #32
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	2220      	movs	r2, #32
 8002a70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	2200      	movs	r2, #0
 8002a78:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8002a7c:	2301      	movs	r3, #1
 8002a7e:	e007      	b.n	8002a90 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	699b      	ldr	r3, [r3, #24]
 8002a86:	f003 0304 	and.w	r3, r3, #4
 8002a8a:	2b04      	cmp	r3, #4
 8002a8c:	d193      	bne.n	80029b6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002a8e:	2300      	movs	r3, #0
}
 8002a90:	4618      	mov	r0, r3
 8002a92:	3710      	adds	r7, #16
 8002a94:	46bd      	mov	sp, r7
 8002a96:	bd80      	pop	{r7, pc}
 8002a98:	fe00e800 	.word	0xfe00e800

08002a9c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002a9c:	b580      	push	{r7, lr}
 8002a9e:	b08a      	sub	sp, #40	; 0x28
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	60f8      	str	r0, [r7, #12]
 8002aa4:	60b9      	str	r1, [r7, #8]
 8002aa6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002aa8:	2300      	movs	r3, #0
 8002aaa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	699b      	ldr	r3, [r3, #24]
 8002ab4:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002ab6:	2300      	movs	r3, #0
 8002ab8:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002abe:	69bb      	ldr	r3, [r7, #24]
 8002ac0:	f003 0310 	and.w	r3, r3, #16
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d075      	beq.n	8002bb4 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	2210      	movs	r2, #16
 8002ace:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002ad0:	e056      	b.n	8002b80 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002ad2:	68bb      	ldr	r3, [r7, #8]
 8002ad4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ad8:	d052      	beq.n	8002b80 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002ada:	f7ff f951 	bl	8001d80 <HAL_GetTick>
 8002ade:	4602      	mov	r2, r0
 8002ae0:	69fb      	ldr	r3, [r7, #28]
 8002ae2:	1ad3      	subs	r3, r2, r3
 8002ae4:	68ba      	ldr	r2, [r7, #8]
 8002ae6:	429a      	cmp	r2, r3
 8002ae8:	d302      	bcc.n	8002af0 <I2C_IsErrorOccurred+0x54>
 8002aea:	68bb      	ldr	r3, [r7, #8]
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d147      	bne.n	8002b80 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	685b      	ldr	r3, [r3, #4]
 8002af6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002afa:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002b02:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	699b      	ldr	r3, [r3, #24]
 8002b0a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002b0e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002b12:	d12e      	bne.n	8002b72 <I2C_IsErrorOccurred+0xd6>
 8002b14:	697b      	ldr	r3, [r7, #20]
 8002b16:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002b1a:	d02a      	beq.n	8002b72 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8002b1c:	7cfb      	ldrb	r3, [r7, #19]
 8002b1e:	2b20      	cmp	r3, #32
 8002b20:	d027      	beq.n	8002b72 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	685a      	ldr	r2, [r3, #4]
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002b30:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002b32:	f7ff f925 	bl	8001d80 <HAL_GetTick>
 8002b36:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002b38:	e01b      	b.n	8002b72 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002b3a:	f7ff f921 	bl	8001d80 <HAL_GetTick>
 8002b3e:	4602      	mov	r2, r0
 8002b40:	69fb      	ldr	r3, [r7, #28]
 8002b42:	1ad3      	subs	r3, r2, r3
 8002b44:	2b19      	cmp	r3, #25
 8002b46:	d914      	bls.n	8002b72 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b4c:	f043 0220 	orr.w	r2, r3, #32
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	2220      	movs	r2, #32
 8002b58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	2200      	movs	r2, #0
 8002b60:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	2200      	movs	r2, #0
 8002b68:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 8002b6c:	2301      	movs	r3, #1
 8002b6e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	699b      	ldr	r3, [r3, #24]
 8002b78:	f003 0320 	and.w	r3, r3, #32
 8002b7c:	2b20      	cmp	r3, #32
 8002b7e:	d1dc      	bne.n	8002b3a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	699b      	ldr	r3, [r3, #24]
 8002b86:	f003 0320 	and.w	r3, r3, #32
 8002b8a:	2b20      	cmp	r3, #32
 8002b8c:	d003      	beq.n	8002b96 <I2C_IsErrorOccurred+0xfa>
 8002b8e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d09d      	beq.n	8002ad2 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002b96:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d103      	bne.n	8002ba6 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	2220      	movs	r2, #32
 8002ba4:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002ba6:	6a3b      	ldr	r3, [r7, #32]
 8002ba8:	f043 0304 	orr.w	r3, r3, #4
 8002bac:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002bae:	2301      	movs	r3, #1
 8002bb0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	699b      	ldr	r3, [r3, #24]
 8002bba:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002bbc:	69bb      	ldr	r3, [r7, #24]
 8002bbe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d00b      	beq.n	8002bde <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002bc6:	6a3b      	ldr	r3, [r7, #32]
 8002bc8:	f043 0301 	orr.w	r3, r3, #1
 8002bcc:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002bd6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002bd8:	2301      	movs	r3, #1
 8002bda:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002bde:	69bb      	ldr	r3, [r7, #24]
 8002be0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d00b      	beq.n	8002c00 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002be8:	6a3b      	ldr	r3, [r7, #32]
 8002bea:	f043 0308 	orr.w	r3, r3, #8
 8002bee:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002bf8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002bfa:	2301      	movs	r3, #1
 8002bfc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002c00:	69bb      	ldr	r3, [r7, #24]
 8002c02:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d00b      	beq.n	8002c22 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002c0a:	6a3b      	ldr	r3, [r7, #32]
 8002c0c:	f043 0302 	orr.w	r3, r3, #2
 8002c10:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002c1a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002c1c:	2301      	movs	r3, #1
 8002c1e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8002c22:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d01c      	beq.n	8002c64 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002c2a:	68f8      	ldr	r0, [r7, #12]
 8002c2c:	f7ff fddc 	bl	80027e8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	6859      	ldr	r1, [r3, #4]
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	681a      	ldr	r2, [r3, #0]
 8002c3a:	4b0d      	ldr	r3, [pc, #52]	; (8002c70 <I2C_IsErrorOccurred+0x1d4>)
 8002c3c:	400b      	ands	r3, r1
 8002c3e:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002c44:	6a3b      	ldr	r3, [r7, #32]
 8002c46:	431a      	orrs	r2, r3
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	2220      	movs	r2, #32
 8002c50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	2200      	movs	r2, #0
 8002c58:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	2200      	movs	r2, #0
 8002c60:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8002c64:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8002c68:	4618      	mov	r0, r3
 8002c6a:	3728      	adds	r7, #40	; 0x28
 8002c6c:	46bd      	mov	sp, r7
 8002c6e:	bd80      	pop	{r7, pc}
 8002c70:	fe00e800 	.word	0xfe00e800

08002c74 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002c74:	b480      	push	{r7}
 8002c76:	b087      	sub	sp, #28
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	60f8      	str	r0, [r7, #12]
 8002c7c:	607b      	str	r3, [r7, #4]
 8002c7e:	460b      	mov	r3, r1
 8002c80:	817b      	strh	r3, [r7, #10]
 8002c82:	4613      	mov	r3, r2
 8002c84:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002c86:	897b      	ldrh	r3, [r7, #10]
 8002c88:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002c8c:	7a7b      	ldrb	r3, [r7, #9]
 8002c8e:	041b      	lsls	r3, r3, #16
 8002c90:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002c94:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002c9a:	6a3b      	ldr	r3, [r7, #32]
 8002c9c:	4313      	orrs	r3, r2
 8002c9e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002ca2:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	685a      	ldr	r2, [r3, #4]
 8002caa:	6a3b      	ldr	r3, [r7, #32]
 8002cac:	0d5b      	lsrs	r3, r3, #21
 8002cae:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8002cb2:	4b08      	ldr	r3, [pc, #32]	; (8002cd4 <I2C_TransferConfig+0x60>)
 8002cb4:	430b      	orrs	r3, r1
 8002cb6:	43db      	mvns	r3, r3
 8002cb8:	ea02 0103 	and.w	r1, r2, r3
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	697a      	ldr	r2, [r7, #20]
 8002cc2:	430a      	orrs	r2, r1
 8002cc4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002cc6:	bf00      	nop
 8002cc8:	371c      	adds	r7, #28
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd0:	4770      	bx	lr
 8002cd2:	bf00      	nop
 8002cd4:	03ff63ff 	.word	0x03ff63ff

08002cd8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002cd8:	b480      	push	{r7}
 8002cda:	b083      	sub	sp, #12
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	6078      	str	r0, [r7, #4]
 8002ce0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002ce8:	b2db      	uxtb	r3, r3
 8002cea:	2b20      	cmp	r3, #32
 8002cec:	d138      	bne.n	8002d60 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002cf4:	2b01      	cmp	r3, #1
 8002cf6:	d101      	bne.n	8002cfc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002cf8:	2302      	movs	r3, #2
 8002cfa:	e032      	b.n	8002d62 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	2201      	movs	r2, #1
 8002d00:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	2224      	movs	r2, #36	; 0x24
 8002d08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	681a      	ldr	r2, [r3, #0]
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f022 0201 	bic.w	r2, r2, #1
 8002d1a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	681a      	ldr	r2, [r3, #0]
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002d2a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	6819      	ldr	r1, [r3, #0]
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	683a      	ldr	r2, [r7, #0]
 8002d38:	430a      	orrs	r2, r1
 8002d3a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	681a      	ldr	r2, [r3, #0]
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f042 0201 	orr.w	r2, r2, #1
 8002d4a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	2220      	movs	r2, #32
 8002d50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	2200      	movs	r2, #0
 8002d58:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002d5c:	2300      	movs	r3, #0
 8002d5e:	e000      	b.n	8002d62 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002d60:	2302      	movs	r3, #2
  }
}
 8002d62:	4618      	mov	r0, r3
 8002d64:	370c      	adds	r7, #12
 8002d66:	46bd      	mov	sp, r7
 8002d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6c:	4770      	bx	lr

08002d6e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002d6e:	b480      	push	{r7}
 8002d70:	b085      	sub	sp, #20
 8002d72:	af00      	add	r7, sp, #0
 8002d74:	6078      	str	r0, [r7, #4]
 8002d76:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002d7e:	b2db      	uxtb	r3, r3
 8002d80:	2b20      	cmp	r3, #32
 8002d82:	d139      	bne.n	8002df8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002d8a:	2b01      	cmp	r3, #1
 8002d8c:	d101      	bne.n	8002d92 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002d8e:	2302      	movs	r3, #2
 8002d90:	e033      	b.n	8002dfa <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	2201      	movs	r2, #1
 8002d96:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	2224      	movs	r2, #36	; 0x24
 8002d9e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	681a      	ldr	r2, [r3, #0]
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f022 0201 	bic.w	r2, r2, #1
 8002db0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002dc0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002dc2:	683b      	ldr	r3, [r7, #0]
 8002dc4:	021b      	lsls	r3, r3, #8
 8002dc6:	68fa      	ldr	r2, [r7, #12]
 8002dc8:	4313      	orrs	r3, r2
 8002dca:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	68fa      	ldr	r2, [r7, #12]
 8002dd2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	681a      	ldr	r2, [r3, #0]
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f042 0201 	orr.w	r2, r2, #1
 8002de2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	2220      	movs	r2, #32
 8002de8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	2200      	movs	r2, #0
 8002df0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002df4:	2300      	movs	r3, #0
 8002df6:	e000      	b.n	8002dfa <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002df8:	2302      	movs	r3, #2
  }
}
 8002dfa:	4618      	mov	r0, r3
 8002dfc:	3714      	adds	r7, #20
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e04:	4770      	bx	lr
	...

08002e08 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002e08:	b480      	push	{r7}
 8002e0a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002e0c:	4b05      	ldr	r3, [pc, #20]	; (8002e24 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	4a04      	ldr	r2, [pc, #16]	; (8002e24 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002e12:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e16:	6013      	str	r3, [r2, #0]
}
 8002e18:	bf00      	nop
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e20:	4770      	bx	lr
 8002e22:	bf00      	nop
 8002e24:	40007000 	.word	0x40007000

08002e28 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002e28:	b480      	push	{r7}
 8002e2a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002e2c:	4b04      	ldr	r3, [pc, #16]	; (8002e40 <HAL_PWREx_GetVoltageRange+0x18>)
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002e34:	4618      	mov	r0, r3
 8002e36:	46bd      	mov	sp, r7
 8002e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3c:	4770      	bx	lr
 8002e3e:	bf00      	nop
 8002e40:	40007000 	.word	0x40007000

08002e44 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002e44:	b480      	push	{r7}
 8002e46:	b085      	sub	sp, #20
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002e52:	d130      	bne.n	8002eb6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002e54:	4b23      	ldr	r3, [pc, #140]	; (8002ee4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002e5c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002e60:	d038      	beq.n	8002ed4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002e62:	4b20      	ldr	r3, [pc, #128]	; (8002ee4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002e6a:	4a1e      	ldr	r2, [pc, #120]	; (8002ee4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002e6c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002e70:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002e72:	4b1d      	ldr	r3, [pc, #116]	; (8002ee8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	2232      	movs	r2, #50	; 0x32
 8002e78:	fb02 f303 	mul.w	r3, r2, r3
 8002e7c:	4a1b      	ldr	r2, [pc, #108]	; (8002eec <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002e7e:	fba2 2303 	umull	r2, r3, r2, r3
 8002e82:	0c9b      	lsrs	r3, r3, #18
 8002e84:	3301      	adds	r3, #1
 8002e86:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002e88:	e002      	b.n	8002e90 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	3b01      	subs	r3, #1
 8002e8e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002e90:	4b14      	ldr	r3, [pc, #80]	; (8002ee4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002e92:	695b      	ldr	r3, [r3, #20]
 8002e94:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e98:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e9c:	d102      	bne.n	8002ea4 <HAL_PWREx_ControlVoltageScaling+0x60>
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d1f2      	bne.n	8002e8a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002ea4:	4b0f      	ldr	r3, [pc, #60]	; (8002ee4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002ea6:	695b      	ldr	r3, [r3, #20]
 8002ea8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002eac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002eb0:	d110      	bne.n	8002ed4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002eb2:	2303      	movs	r3, #3
 8002eb4:	e00f      	b.n	8002ed6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002eb6:	4b0b      	ldr	r3, [pc, #44]	; (8002ee4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002ebe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ec2:	d007      	beq.n	8002ed4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002ec4:	4b07      	ldr	r3, [pc, #28]	; (8002ee4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002ecc:	4a05      	ldr	r2, [pc, #20]	; (8002ee4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002ece:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002ed2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002ed4:	2300      	movs	r3, #0
}
 8002ed6:	4618      	mov	r0, r3
 8002ed8:	3714      	adds	r7, #20
 8002eda:	46bd      	mov	sp, r7
 8002edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee0:	4770      	bx	lr
 8002ee2:	bf00      	nop
 8002ee4:	40007000 	.word	0x40007000
 8002ee8:	20000000 	.word	0x20000000
 8002eec:	431bde83 	.word	0x431bde83

08002ef0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ef0:	b580      	push	{r7, lr}
 8002ef2:	b088      	sub	sp, #32
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d102      	bne.n	8002f04 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002efe:	2301      	movs	r3, #1
 8002f00:	f000 bc02 	b.w	8003708 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002f04:	4b96      	ldr	r3, [pc, #600]	; (8003160 <HAL_RCC_OscConfig+0x270>)
 8002f06:	689b      	ldr	r3, [r3, #8]
 8002f08:	f003 030c 	and.w	r3, r3, #12
 8002f0c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002f0e:	4b94      	ldr	r3, [pc, #592]	; (8003160 <HAL_RCC_OscConfig+0x270>)
 8002f10:	68db      	ldr	r3, [r3, #12]
 8002f12:	f003 0303 	and.w	r3, r3, #3
 8002f16:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f003 0310 	and.w	r3, r3, #16
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	f000 80e4 	beq.w	80030ee <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002f26:	69bb      	ldr	r3, [r7, #24]
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d007      	beq.n	8002f3c <HAL_RCC_OscConfig+0x4c>
 8002f2c:	69bb      	ldr	r3, [r7, #24]
 8002f2e:	2b0c      	cmp	r3, #12
 8002f30:	f040 808b 	bne.w	800304a <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002f34:	697b      	ldr	r3, [r7, #20]
 8002f36:	2b01      	cmp	r3, #1
 8002f38:	f040 8087 	bne.w	800304a <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002f3c:	4b88      	ldr	r3, [pc, #544]	; (8003160 <HAL_RCC_OscConfig+0x270>)
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f003 0302 	and.w	r3, r3, #2
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d005      	beq.n	8002f54 <HAL_RCC_OscConfig+0x64>
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	699b      	ldr	r3, [r3, #24]
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d101      	bne.n	8002f54 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8002f50:	2301      	movs	r3, #1
 8002f52:	e3d9      	b.n	8003708 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	6a1a      	ldr	r2, [r3, #32]
 8002f58:	4b81      	ldr	r3, [pc, #516]	; (8003160 <HAL_RCC_OscConfig+0x270>)
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f003 0308 	and.w	r3, r3, #8
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d004      	beq.n	8002f6e <HAL_RCC_OscConfig+0x7e>
 8002f64:	4b7e      	ldr	r3, [pc, #504]	; (8003160 <HAL_RCC_OscConfig+0x270>)
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002f6c:	e005      	b.n	8002f7a <HAL_RCC_OscConfig+0x8a>
 8002f6e:	4b7c      	ldr	r3, [pc, #496]	; (8003160 <HAL_RCC_OscConfig+0x270>)
 8002f70:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f74:	091b      	lsrs	r3, r3, #4
 8002f76:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002f7a:	4293      	cmp	r3, r2
 8002f7c:	d223      	bcs.n	8002fc6 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	6a1b      	ldr	r3, [r3, #32]
 8002f82:	4618      	mov	r0, r3
 8002f84:	f000 fdbe 	bl	8003b04 <RCC_SetFlashLatencyFromMSIRange>
 8002f88:	4603      	mov	r3, r0
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d001      	beq.n	8002f92 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8002f8e:	2301      	movs	r3, #1
 8002f90:	e3ba      	b.n	8003708 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002f92:	4b73      	ldr	r3, [pc, #460]	; (8003160 <HAL_RCC_OscConfig+0x270>)
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	4a72      	ldr	r2, [pc, #456]	; (8003160 <HAL_RCC_OscConfig+0x270>)
 8002f98:	f043 0308 	orr.w	r3, r3, #8
 8002f9c:	6013      	str	r3, [r2, #0]
 8002f9e:	4b70      	ldr	r3, [pc, #448]	; (8003160 <HAL_RCC_OscConfig+0x270>)
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	6a1b      	ldr	r3, [r3, #32]
 8002faa:	496d      	ldr	r1, [pc, #436]	; (8003160 <HAL_RCC_OscConfig+0x270>)
 8002fac:	4313      	orrs	r3, r2
 8002fae:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002fb0:	4b6b      	ldr	r3, [pc, #428]	; (8003160 <HAL_RCC_OscConfig+0x270>)
 8002fb2:	685b      	ldr	r3, [r3, #4]
 8002fb4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	69db      	ldr	r3, [r3, #28]
 8002fbc:	021b      	lsls	r3, r3, #8
 8002fbe:	4968      	ldr	r1, [pc, #416]	; (8003160 <HAL_RCC_OscConfig+0x270>)
 8002fc0:	4313      	orrs	r3, r2
 8002fc2:	604b      	str	r3, [r1, #4]
 8002fc4:	e025      	b.n	8003012 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002fc6:	4b66      	ldr	r3, [pc, #408]	; (8003160 <HAL_RCC_OscConfig+0x270>)
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	4a65      	ldr	r2, [pc, #404]	; (8003160 <HAL_RCC_OscConfig+0x270>)
 8002fcc:	f043 0308 	orr.w	r3, r3, #8
 8002fd0:	6013      	str	r3, [r2, #0]
 8002fd2:	4b63      	ldr	r3, [pc, #396]	; (8003160 <HAL_RCC_OscConfig+0x270>)
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	6a1b      	ldr	r3, [r3, #32]
 8002fde:	4960      	ldr	r1, [pc, #384]	; (8003160 <HAL_RCC_OscConfig+0x270>)
 8002fe0:	4313      	orrs	r3, r2
 8002fe2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002fe4:	4b5e      	ldr	r3, [pc, #376]	; (8003160 <HAL_RCC_OscConfig+0x270>)
 8002fe6:	685b      	ldr	r3, [r3, #4]
 8002fe8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	69db      	ldr	r3, [r3, #28]
 8002ff0:	021b      	lsls	r3, r3, #8
 8002ff2:	495b      	ldr	r1, [pc, #364]	; (8003160 <HAL_RCC_OscConfig+0x270>)
 8002ff4:	4313      	orrs	r3, r2
 8002ff6:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002ff8:	69bb      	ldr	r3, [r7, #24]
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d109      	bne.n	8003012 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	6a1b      	ldr	r3, [r3, #32]
 8003002:	4618      	mov	r0, r3
 8003004:	f000 fd7e 	bl	8003b04 <RCC_SetFlashLatencyFromMSIRange>
 8003008:	4603      	mov	r3, r0
 800300a:	2b00      	cmp	r3, #0
 800300c:	d001      	beq.n	8003012 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800300e:	2301      	movs	r3, #1
 8003010:	e37a      	b.n	8003708 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003012:	f000 fc81 	bl	8003918 <HAL_RCC_GetSysClockFreq>
 8003016:	4602      	mov	r2, r0
 8003018:	4b51      	ldr	r3, [pc, #324]	; (8003160 <HAL_RCC_OscConfig+0x270>)
 800301a:	689b      	ldr	r3, [r3, #8]
 800301c:	091b      	lsrs	r3, r3, #4
 800301e:	f003 030f 	and.w	r3, r3, #15
 8003022:	4950      	ldr	r1, [pc, #320]	; (8003164 <HAL_RCC_OscConfig+0x274>)
 8003024:	5ccb      	ldrb	r3, [r1, r3]
 8003026:	f003 031f 	and.w	r3, r3, #31
 800302a:	fa22 f303 	lsr.w	r3, r2, r3
 800302e:	4a4e      	ldr	r2, [pc, #312]	; (8003168 <HAL_RCC_OscConfig+0x278>)
 8003030:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003032:	4b4e      	ldr	r3, [pc, #312]	; (800316c <HAL_RCC_OscConfig+0x27c>)
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	4618      	mov	r0, r3
 8003038:	f7fe fd64 	bl	8001b04 <HAL_InitTick>
 800303c:	4603      	mov	r3, r0
 800303e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003040:	7bfb      	ldrb	r3, [r7, #15]
 8003042:	2b00      	cmp	r3, #0
 8003044:	d052      	beq.n	80030ec <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8003046:	7bfb      	ldrb	r3, [r7, #15]
 8003048:	e35e      	b.n	8003708 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	699b      	ldr	r3, [r3, #24]
 800304e:	2b00      	cmp	r3, #0
 8003050:	d032      	beq.n	80030b8 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003052:	4b43      	ldr	r3, [pc, #268]	; (8003160 <HAL_RCC_OscConfig+0x270>)
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	4a42      	ldr	r2, [pc, #264]	; (8003160 <HAL_RCC_OscConfig+0x270>)
 8003058:	f043 0301 	orr.w	r3, r3, #1
 800305c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800305e:	f7fe fe8f 	bl	8001d80 <HAL_GetTick>
 8003062:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003064:	e008      	b.n	8003078 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003066:	f7fe fe8b 	bl	8001d80 <HAL_GetTick>
 800306a:	4602      	mov	r2, r0
 800306c:	693b      	ldr	r3, [r7, #16]
 800306e:	1ad3      	subs	r3, r2, r3
 8003070:	2b02      	cmp	r3, #2
 8003072:	d901      	bls.n	8003078 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8003074:	2303      	movs	r3, #3
 8003076:	e347      	b.n	8003708 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003078:	4b39      	ldr	r3, [pc, #228]	; (8003160 <HAL_RCC_OscConfig+0x270>)
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f003 0302 	and.w	r3, r3, #2
 8003080:	2b00      	cmp	r3, #0
 8003082:	d0f0      	beq.n	8003066 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003084:	4b36      	ldr	r3, [pc, #216]	; (8003160 <HAL_RCC_OscConfig+0x270>)
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	4a35      	ldr	r2, [pc, #212]	; (8003160 <HAL_RCC_OscConfig+0x270>)
 800308a:	f043 0308 	orr.w	r3, r3, #8
 800308e:	6013      	str	r3, [r2, #0]
 8003090:	4b33      	ldr	r3, [pc, #204]	; (8003160 <HAL_RCC_OscConfig+0x270>)
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	6a1b      	ldr	r3, [r3, #32]
 800309c:	4930      	ldr	r1, [pc, #192]	; (8003160 <HAL_RCC_OscConfig+0x270>)
 800309e:	4313      	orrs	r3, r2
 80030a0:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80030a2:	4b2f      	ldr	r3, [pc, #188]	; (8003160 <HAL_RCC_OscConfig+0x270>)
 80030a4:	685b      	ldr	r3, [r3, #4]
 80030a6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	69db      	ldr	r3, [r3, #28]
 80030ae:	021b      	lsls	r3, r3, #8
 80030b0:	492b      	ldr	r1, [pc, #172]	; (8003160 <HAL_RCC_OscConfig+0x270>)
 80030b2:	4313      	orrs	r3, r2
 80030b4:	604b      	str	r3, [r1, #4]
 80030b6:	e01a      	b.n	80030ee <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80030b8:	4b29      	ldr	r3, [pc, #164]	; (8003160 <HAL_RCC_OscConfig+0x270>)
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	4a28      	ldr	r2, [pc, #160]	; (8003160 <HAL_RCC_OscConfig+0x270>)
 80030be:	f023 0301 	bic.w	r3, r3, #1
 80030c2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80030c4:	f7fe fe5c 	bl	8001d80 <HAL_GetTick>
 80030c8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80030ca:	e008      	b.n	80030de <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80030cc:	f7fe fe58 	bl	8001d80 <HAL_GetTick>
 80030d0:	4602      	mov	r2, r0
 80030d2:	693b      	ldr	r3, [r7, #16]
 80030d4:	1ad3      	subs	r3, r2, r3
 80030d6:	2b02      	cmp	r3, #2
 80030d8:	d901      	bls.n	80030de <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80030da:	2303      	movs	r3, #3
 80030dc:	e314      	b.n	8003708 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80030de:	4b20      	ldr	r3, [pc, #128]	; (8003160 <HAL_RCC_OscConfig+0x270>)
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f003 0302 	and.w	r3, r3, #2
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d1f0      	bne.n	80030cc <HAL_RCC_OscConfig+0x1dc>
 80030ea:	e000      	b.n	80030ee <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80030ec:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f003 0301 	and.w	r3, r3, #1
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d073      	beq.n	80031e2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80030fa:	69bb      	ldr	r3, [r7, #24]
 80030fc:	2b08      	cmp	r3, #8
 80030fe:	d005      	beq.n	800310c <HAL_RCC_OscConfig+0x21c>
 8003100:	69bb      	ldr	r3, [r7, #24]
 8003102:	2b0c      	cmp	r3, #12
 8003104:	d10e      	bne.n	8003124 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003106:	697b      	ldr	r3, [r7, #20]
 8003108:	2b03      	cmp	r3, #3
 800310a:	d10b      	bne.n	8003124 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800310c:	4b14      	ldr	r3, [pc, #80]	; (8003160 <HAL_RCC_OscConfig+0x270>)
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003114:	2b00      	cmp	r3, #0
 8003116:	d063      	beq.n	80031e0 <HAL_RCC_OscConfig+0x2f0>
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	685b      	ldr	r3, [r3, #4]
 800311c:	2b00      	cmp	r3, #0
 800311e:	d15f      	bne.n	80031e0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003120:	2301      	movs	r3, #1
 8003122:	e2f1      	b.n	8003708 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	685b      	ldr	r3, [r3, #4]
 8003128:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800312c:	d106      	bne.n	800313c <HAL_RCC_OscConfig+0x24c>
 800312e:	4b0c      	ldr	r3, [pc, #48]	; (8003160 <HAL_RCC_OscConfig+0x270>)
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	4a0b      	ldr	r2, [pc, #44]	; (8003160 <HAL_RCC_OscConfig+0x270>)
 8003134:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003138:	6013      	str	r3, [r2, #0]
 800313a:	e025      	b.n	8003188 <HAL_RCC_OscConfig+0x298>
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	685b      	ldr	r3, [r3, #4]
 8003140:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003144:	d114      	bne.n	8003170 <HAL_RCC_OscConfig+0x280>
 8003146:	4b06      	ldr	r3, [pc, #24]	; (8003160 <HAL_RCC_OscConfig+0x270>)
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	4a05      	ldr	r2, [pc, #20]	; (8003160 <HAL_RCC_OscConfig+0x270>)
 800314c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003150:	6013      	str	r3, [r2, #0]
 8003152:	4b03      	ldr	r3, [pc, #12]	; (8003160 <HAL_RCC_OscConfig+0x270>)
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	4a02      	ldr	r2, [pc, #8]	; (8003160 <HAL_RCC_OscConfig+0x270>)
 8003158:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800315c:	6013      	str	r3, [r2, #0]
 800315e:	e013      	b.n	8003188 <HAL_RCC_OscConfig+0x298>
 8003160:	40021000 	.word	0x40021000
 8003164:	08007c9c 	.word	0x08007c9c
 8003168:	20000000 	.word	0x20000000
 800316c:	20000004 	.word	0x20000004
 8003170:	4ba0      	ldr	r3, [pc, #640]	; (80033f4 <HAL_RCC_OscConfig+0x504>)
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	4a9f      	ldr	r2, [pc, #636]	; (80033f4 <HAL_RCC_OscConfig+0x504>)
 8003176:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800317a:	6013      	str	r3, [r2, #0]
 800317c:	4b9d      	ldr	r3, [pc, #628]	; (80033f4 <HAL_RCC_OscConfig+0x504>)
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	4a9c      	ldr	r2, [pc, #624]	; (80033f4 <HAL_RCC_OscConfig+0x504>)
 8003182:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003186:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	685b      	ldr	r3, [r3, #4]
 800318c:	2b00      	cmp	r3, #0
 800318e:	d013      	beq.n	80031b8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003190:	f7fe fdf6 	bl	8001d80 <HAL_GetTick>
 8003194:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003196:	e008      	b.n	80031aa <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003198:	f7fe fdf2 	bl	8001d80 <HAL_GetTick>
 800319c:	4602      	mov	r2, r0
 800319e:	693b      	ldr	r3, [r7, #16]
 80031a0:	1ad3      	subs	r3, r2, r3
 80031a2:	2b64      	cmp	r3, #100	; 0x64
 80031a4:	d901      	bls.n	80031aa <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80031a6:	2303      	movs	r3, #3
 80031a8:	e2ae      	b.n	8003708 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80031aa:	4b92      	ldr	r3, [pc, #584]	; (80033f4 <HAL_RCC_OscConfig+0x504>)
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d0f0      	beq.n	8003198 <HAL_RCC_OscConfig+0x2a8>
 80031b6:	e014      	b.n	80031e2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031b8:	f7fe fde2 	bl	8001d80 <HAL_GetTick>
 80031bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80031be:	e008      	b.n	80031d2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80031c0:	f7fe fdde 	bl	8001d80 <HAL_GetTick>
 80031c4:	4602      	mov	r2, r0
 80031c6:	693b      	ldr	r3, [r7, #16]
 80031c8:	1ad3      	subs	r3, r2, r3
 80031ca:	2b64      	cmp	r3, #100	; 0x64
 80031cc:	d901      	bls.n	80031d2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80031ce:	2303      	movs	r3, #3
 80031d0:	e29a      	b.n	8003708 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80031d2:	4b88      	ldr	r3, [pc, #544]	; (80033f4 <HAL_RCC_OscConfig+0x504>)
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d1f0      	bne.n	80031c0 <HAL_RCC_OscConfig+0x2d0>
 80031de:	e000      	b.n	80031e2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f003 0302 	and.w	r3, r3, #2
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d060      	beq.n	80032b0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80031ee:	69bb      	ldr	r3, [r7, #24]
 80031f0:	2b04      	cmp	r3, #4
 80031f2:	d005      	beq.n	8003200 <HAL_RCC_OscConfig+0x310>
 80031f4:	69bb      	ldr	r3, [r7, #24]
 80031f6:	2b0c      	cmp	r3, #12
 80031f8:	d119      	bne.n	800322e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80031fa:	697b      	ldr	r3, [r7, #20]
 80031fc:	2b02      	cmp	r3, #2
 80031fe:	d116      	bne.n	800322e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003200:	4b7c      	ldr	r3, [pc, #496]	; (80033f4 <HAL_RCC_OscConfig+0x504>)
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003208:	2b00      	cmp	r3, #0
 800320a:	d005      	beq.n	8003218 <HAL_RCC_OscConfig+0x328>
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	68db      	ldr	r3, [r3, #12]
 8003210:	2b00      	cmp	r3, #0
 8003212:	d101      	bne.n	8003218 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003214:	2301      	movs	r3, #1
 8003216:	e277      	b.n	8003708 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003218:	4b76      	ldr	r3, [pc, #472]	; (80033f4 <HAL_RCC_OscConfig+0x504>)
 800321a:	685b      	ldr	r3, [r3, #4]
 800321c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	691b      	ldr	r3, [r3, #16]
 8003224:	061b      	lsls	r3, r3, #24
 8003226:	4973      	ldr	r1, [pc, #460]	; (80033f4 <HAL_RCC_OscConfig+0x504>)
 8003228:	4313      	orrs	r3, r2
 800322a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800322c:	e040      	b.n	80032b0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	68db      	ldr	r3, [r3, #12]
 8003232:	2b00      	cmp	r3, #0
 8003234:	d023      	beq.n	800327e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003236:	4b6f      	ldr	r3, [pc, #444]	; (80033f4 <HAL_RCC_OscConfig+0x504>)
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	4a6e      	ldr	r2, [pc, #440]	; (80033f4 <HAL_RCC_OscConfig+0x504>)
 800323c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003240:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003242:	f7fe fd9d 	bl	8001d80 <HAL_GetTick>
 8003246:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003248:	e008      	b.n	800325c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800324a:	f7fe fd99 	bl	8001d80 <HAL_GetTick>
 800324e:	4602      	mov	r2, r0
 8003250:	693b      	ldr	r3, [r7, #16]
 8003252:	1ad3      	subs	r3, r2, r3
 8003254:	2b02      	cmp	r3, #2
 8003256:	d901      	bls.n	800325c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003258:	2303      	movs	r3, #3
 800325a:	e255      	b.n	8003708 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800325c:	4b65      	ldr	r3, [pc, #404]	; (80033f4 <HAL_RCC_OscConfig+0x504>)
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003264:	2b00      	cmp	r3, #0
 8003266:	d0f0      	beq.n	800324a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003268:	4b62      	ldr	r3, [pc, #392]	; (80033f4 <HAL_RCC_OscConfig+0x504>)
 800326a:	685b      	ldr	r3, [r3, #4]
 800326c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	691b      	ldr	r3, [r3, #16]
 8003274:	061b      	lsls	r3, r3, #24
 8003276:	495f      	ldr	r1, [pc, #380]	; (80033f4 <HAL_RCC_OscConfig+0x504>)
 8003278:	4313      	orrs	r3, r2
 800327a:	604b      	str	r3, [r1, #4]
 800327c:	e018      	b.n	80032b0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800327e:	4b5d      	ldr	r3, [pc, #372]	; (80033f4 <HAL_RCC_OscConfig+0x504>)
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	4a5c      	ldr	r2, [pc, #368]	; (80033f4 <HAL_RCC_OscConfig+0x504>)
 8003284:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003288:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800328a:	f7fe fd79 	bl	8001d80 <HAL_GetTick>
 800328e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003290:	e008      	b.n	80032a4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003292:	f7fe fd75 	bl	8001d80 <HAL_GetTick>
 8003296:	4602      	mov	r2, r0
 8003298:	693b      	ldr	r3, [r7, #16]
 800329a:	1ad3      	subs	r3, r2, r3
 800329c:	2b02      	cmp	r3, #2
 800329e:	d901      	bls.n	80032a4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80032a0:	2303      	movs	r3, #3
 80032a2:	e231      	b.n	8003708 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80032a4:	4b53      	ldr	r3, [pc, #332]	; (80033f4 <HAL_RCC_OscConfig+0x504>)
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d1f0      	bne.n	8003292 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f003 0308 	and.w	r3, r3, #8
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d03c      	beq.n	8003336 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	695b      	ldr	r3, [r3, #20]
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d01c      	beq.n	80032fe <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80032c4:	4b4b      	ldr	r3, [pc, #300]	; (80033f4 <HAL_RCC_OscConfig+0x504>)
 80032c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80032ca:	4a4a      	ldr	r2, [pc, #296]	; (80033f4 <HAL_RCC_OscConfig+0x504>)
 80032cc:	f043 0301 	orr.w	r3, r3, #1
 80032d0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032d4:	f7fe fd54 	bl	8001d80 <HAL_GetTick>
 80032d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80032da:	e008      	b.n	80032ee <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80032dc:	f7fe fd50 	bl	8001d80 <HAL_GetTick>
 80032e0:	4602      	mov	r2, r0
 80032e2:	693b      	ldr	r3, [r7, #16]
 80032e4:	1ad3      	subs	r3, r2, r3
 80032e6:	2b02      	cmp	r3, #2
 80032e8:	d901      	bls.n	80032ee <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80032ea:	2303      	movs	r3, #3
 80032ec:	e20c      	b.n	8003708 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80032ee:	4b41      	ldr	r3, [pc, #260]	; (80033f4 <HAL_RCC_OscConfig+0x504>)
 80032f0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80032f4:	f003 0302 	and.w	r3, r3, #2
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d0ef      	beq.n	80032dc <HAL_RCC_OscConfig+0x3ec>
 80032fc:	e01b      	b.n	8003336 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80032fe:	4b3d      	ldr	r3, [pc, #244]	; (80033f4 <HAL_RCC_OscConfig+0x504>)
 8003300:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003304:	4a3b      	ldr	r2, [pc, #236]	; (80033f4 <HAL_RCC_OscConfig+0x504>)
 8003306:	f023 0301 	bic.w	r3, r3, #1
 800330a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800330e:	f7fe fd37 	bl	8001d80 <HAL_GetTick>
 8003312:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003314:	e008      	b.n	8003328 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003316:	f7fe fd33 	bl	8001d80 <HAL_GetTick>
 800331a:	4602      	mov	r2, r0
 800331c:	693b      	ldr	r3, [r7, #16]
 800331e:	1ad3      	subs	r3, r2, r3
 8003320:	2b02      	cmp	r3, #2
 8003322:	d901      	bls.n	8003328 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003324:	2303      	movs	r3, #3
 8003326:	e1ef      	b.n	8003708 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003328:	4b32      	ldr	r3, [pc, #200]	; (80033f4 <HAL_RCC_OscConfig+0x504>)
 800332a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800332e:	f003 0302 	and.w	r3, r3, #2
 8003332:	2b00      	cmp	r3, #0
 8003334:	d1ef      	bne.n	8003316 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f003 0304 	and.w	r3, r3, #4
 800333e:	2b00      	cmp	r3, #0
 8003340:	f000 80a6 	beq.w	8003490 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003344:	2300      	movs	r3, #0
 8003346:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003348:	4b2a      	ldr	r3, [pc, #168]	; (80033f4 <HAL_RCC_OscConfig+0x504>)
 800334a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800334c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003350:	2b00      	cmp	r3, #0
 8003352:	d10d      	bne.n	8003370 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003354:	4b27      	ldr	r3, [pc, #156]	; (80033f4 <HAL_RCC_OscConfig+0x504>)
 8003356:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003358:	4a26      	ldr	r2, [pc, #152]	; (80033f4 <HAL_RCC_OscConfig+0x504>)
 800335a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800335e:	6593      	str	r3, [r2, #88]	; 0x58
 8003360:	4b24      	ldr	r3, [pc, #144]	; (80033f4 <HAL_RCC_OscConfig+0x504>)
 8003362:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003364:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003368:	60bb      	str	r3, [r7, #8]
 800336a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800336c:	2301      	movs	r3, #1
 800336e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003370:	4b21      	ldr	r3, [pc, #132]	; (80033f8 <HAL_RCC_OscConfig+0x508>)
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003378:	2b00      	cmp	r3, #0
 800337a:	d118      	bne.n	80033ae <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800337c:	4b1e      	ldr	r3, [pc, #120]	; (80033f8 <HAL_RCC_OscConfig+0x508>)
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	4a1d      	ldr	r2, [pc, #116]	; (80033f8 <HAL_RCC_OscConfig+0x508>)
 8003382:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003386:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003388:	f7fe fcfa 	bl	8001d80 <HAL_GetTick>
 800338c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800338e:	e008      	b.n	80033a2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003390:	f7fe fcf6 	bl	8001d80 <HAL_GetTick>
 8003394:	4602      	mov	r2, r0
 8003396:	693b      	ldr	r3, [r7, #16]
 8003398:	1ad3      	subs	r3, r2, r3
 800339a:	2b02      	cmp	r3, #2
 800339c:	d901      	bls.n	80033a2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800339e:	2303      	movs	r3, #3
 80033a0:	e1b2      	b.n	8003708 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80033a2:	4b15      	ldr	r3, [pc, #84]	; (80033f8 <HAL_RCC_OscConfig+0x508>)
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d0f0      	beq.n	8003390 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	689b      	ldr	r3, [r3, #8]
 80033b2:	2b01      	cmp	r3, #1
 80033b4:	d108      	bne.n	80033c8 <HAL_RCC_OscConfig+0x4d8>
 80033b6:	4b0f      	ldr	r3, [pc, #60]	; (80033f4 <HAL_RCC_OscConfig+0x504>)
 80033b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033bc:	4a0d      	ldr	r2, [pc, #52]	; (80033f4 <HAL_RCC_OscConfig+0x504>)
 80033be:	f043 0301 	orr.w	r3, r3, #1
 80033c2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80033c6:	e029      	b.n	800341c <HAL_RCC_OscConfig+0x52c>
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	689b      	ldr	r3, [r3, #8]
 80033cc:	2b05      	cmp	r3, #5
 80033ce:	d115      	bne.n	80033fc <HAL_RCC_OscConfig+0x50c>
 80033d0:	4b08      	ldr	r3, [pc, #32]	; (80033f4 <HAL_RCC_OscConfig+0x504>)
 80033d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033d6:	4a07      	ldr	r2, [pc, #28]	; (80033f4 <HAL_RCC_OscConfig+0x504>)
 80033d8:	f043 0304 	orr.w	r3, r3, #4
 80033dc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80033e0:	4b04      	ldr	r3, [pc, #16]	; (80033f4 <HAL_RCC_OscConfig+0x504>)
 80033e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033e6:	4a03      	ldr	r2, [pc, #12]	; (80033f4 <HAL_RCC_OscConfig+0x504>)
 80033e8:	f043 0301 	orr.w	r3, r3, #1
 80033ec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80033f0:	e014      	b.n	800341c <HAL_RCC_OscConfig+0x52c>
 80033f2:	bf00      	nop
 80033f4:	40021000 	.word	0x40021000
 80033f8:	40007000 	.word	0x40007000
 80033fc:	4b9a      	ldr	r3, [pc, #616]	; (8003668 <HAL_RCC_OscConfig+0x778>)
 80033fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003402:	4a99      	ldr	r2, [pc, #612]	; (8003668 <HAL_RCC_OscConfig+0x778>)
 8003404:	f023 0301 	bic.w	r3, r3, #1
 8003408:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800340c:	4b96      	ldr	r3, [pc, #600]	; (8003668 <HAL_RCC_OscConfig+0x778>)
 800340e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003412:	4a95      	ldr	r2, [pc, #596]	; (8003668 <HAL_RCC_OscConfig+0x778>)
 8003414:	f023 0304 	bic.w	r3, r3, #4
 8003418:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	689b      	ldr	r3, [r3, #8]
 8003420:	2b00      	cmp	r3, #0
 8003422:	d016      	beq.n	8003452 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003424:	f7fe fcac 	bl	8001d80 <HAL_GetTick>
 8003428:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800342a:	e00a      	b.n	8003442 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800342c:	f7fe fca8 	bl	8001d80 <HAL_GetTick>
 8003430:	4602      	mov	r2, r0
 8003432:	693b      	ldr	r3, [r7, #16]
 8003434:	1ad3      	subs	r3, r2, r3
 8003436:	f241 3288 	movw	r2, #5000	; 0x1388
 800343a:	4293      	cmp	r3, r2
 800343c:	d901      	bls.n	8003442 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800343e:	2303      	movs	r3, #3
 8003440:	e162      	b.n	8003708 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003442:	4b89      	ldr	r3, [pc, #548]	; (8003668 <HAL_RCC_OscConfig+0x778>)
 8003444:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003448:	f003 0302 	and.w	r3, r3, #2
 800344c:	2b00      	cmp	r3, #0
 800344e:	d0ed      	beq.n	800342c <HAL_RCC_OscConfig+0x53c>
 8003450:	e015      	b.n	800347e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003452:	f7fe fc95 	bl	8001d80 <HAL_GetTick>
 8003456:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003458:	e00a      	b.n	8003470 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800345a:	f7fe fc91 	bl	8001d80 <HAL_GetTick>
 800345e:	4602      	mov	r2, r0
 8003460:	693b      	ldr	r3, [r7, #16]
 8003462:	1ad3      	subs	r3, r2, r3
 8003464:	f241 3288 	movw	r2, #5000	; 0x1388
 8003468:	4293      	cmp	r3, r2
 800346a:	d901      	bls.n	8003470 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800346c:	2303      	movs	r3, #3
 800346e:	e14b      	b.n	8003708 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003470:	4b7d      	ldr	r3, [pc, #500]	; (8003668 <HAL_RCC_OscConfig+0x778>)
 8003472:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003476:	f003 0302 	and.w	r3, r3, #2
 800347a:	2b00      	cmp	r3, #0
 800347c:	d1ed      	bne.n	800345a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800347e:	7ffb      	ldrb	r3, [r7, #31]
 8003480:	2b01      	cmp	r3, #1
 8003482:	d105      	bne.n	8003490 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003484:	4b78      	ldr	r3, [pc, #480]	; (8003668 <HAL_RCC_OscConfig+0x778>)
 8003486:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003488:	4a77      	ldr	r2, [pc, #476]	; (8003668 <HAL_RCC_OscConfig+0x778>)
 800348a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800348e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f003 0320 	and.w	r3, r3, #32
 8003498:	2b00      	cmp	r3, #0
 800349a:	d03c      	beq.n	8003516 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d01c      	beq.n	80034de <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80034a4:	4b70      	ldr	r3, [pc, #448]	; (8003668 <HAL_RCC_OscConfig+0x778>)
 80034a6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80034aa:	4a6f      	ldr	r2, [pc, #444]	; (8003668 <HAL_RCC_OscConfig+0x778>)
 80034ac:	f043 0301 	orr.w	r3, r3, #1
 80034b0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034b4:	f7fe fc64 	bl	8001d80 <HAL_GetTick>
 80034b8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80034ba:	e008      	b.n	80034ce <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80034bc:	f7fe fc60 	bl	8001d80 <HAL_GetTick>
 80034c0:	4602      	mov	r2, r0
 80034c2:	693b      	ldr	r3, [r7, #16]
 80034c4:	1ad3      	subs	r3, r2, r3
 80034c6:	2b02      	cmp	r3, #2
 80034c8:	d901      	bls.n	80034ce <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80034ca:	2303      	movs	r3, #3
 80034cc:	e11c      	b.n	8003708 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80034ce:	4b66      	ldr	r3, [pc, #408]	; (8003668 <HAL_RCC_OscConfig+0x778>)
 80034d0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80034d4:	f003 0302 	and.w	r3, r3, #2
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d0ef      	beq.n	80034bc <HAL_RCC_OscConfig+0x5cc>
 80034dc:	e01b      	b.n	8003516 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80034de:	4b62      	ldr	r3, [pc, #392]	; (8003668 <HAL_RCC_OscConfig+0x778>)
 80034e0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80034e4:	4a60      	ldr	r2, [pc, #384]	; (8003668 <HAL_RCC_OscConfig+0x778>)
 80034e6:	f023 0301 	bic.w	r3, r3, #1
 80034ea:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034ee:	f7fe fc47 	bl	8001d80 <HAL_GetTick>
 80034f2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80034f4:	e008      	b.n	8003508 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80034f6:	f7fe fc43 	bl	8001d80 <HAL_GetTick>
 80034fa:	4602      	mov	r2, r0
 80034fc:	693b      	ldr	r3, [r7, #16]
 80034fe:	1ad3      	subs	r3, r2, r3
 8003500:	2b02      	cmp	r3, #2
 8003502:	d901      	bls.n	8003508 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8003504:	2303      	movs	r3, #3
 8003506:	e0ff      	b.n	8003708 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003508:	4b57      	ldr	r3, [pc, #348]	; (8003668 <HAL_RCC_OscConfig+0x778>)
 800350a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800350e:	f003 0302 	and.w	r3, r3, #2
 8003512:	2b00      	cmp	r3, #0
 8003514:	d1ef      	bne.n	80034f6 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800351a:	2b00      	cmp	r3, #0
 800351c:	f000 80f3 	beq.w	8003706 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003524:	2b02      	cmp	r3, #2
 8003526:	f040 80c9 	bne.w	80036bc <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800352a:	4b4f      	ldr	r3, [pc, #316]	; (8003668 <HAL_RCC_OscConfig+0x778>)
 800352c:	68db      	ldr	r3, [r3, #12]
 800352e:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003530:	697b      	ldr	r3, [r7, #20]
 8003532:	f003 0203 	and.w	r2, r3, #3
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800353a:	429a      	cmp	r2, r3
 800353c:	d12c      	bne.n	8003598 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800353e:	697b      	ldr	r3, [r7, #20]
 8003540:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003548:	3b01      	subs	r3, #1
 800354a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800354c:	429a      	cmp	r2, r3
 800354e:	d123      	bne.n	8003598 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003550:	697b      	ldr	r3, [r7, #20]
 8003552:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800355a:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800355c:	429a      	cmp	r2, r3
 800355e:	d11b      	bne.n	8003598 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003560:	697b      	ldr	r3, [r7, #20]
 8003562:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800356a:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800356c:	429a      	cmp	r2, r3
 800356e:	d113      	bne.n	8003598 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003570:	697b      	ldr	r3, [r7, #20]
 8003572:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800357a:	085b      	lsrs	r3, r3, #1
 800357c:	3b01      	subs	r3, #1
 800357e:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003580:	429a      	cmp	r2, r3
 8003582:	d109      	bne.n	8003598 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003584:	697b      	ldr	r3, [r7, #20]
 8003586:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800358e:	085b      	lsrs	r3, r3, #1
 8003590:	3b01      	subs	r3, #1
 8003592:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003594:	429a      	cmp	r2, r3
 8003596:	d06b      	beq.n	8003670 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003598:	69bb      	ldr	r3, [r7, #24]
 800359a:	2b0c      	cmp	r3, #12
 800359c:	d062      	beq.n	8003664 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800359e:	4b32      	ldr	r3, [pc, #200]	; (8003668 <HAL_RCC_OscConfig+0x778>)
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d001      	beq.n	80035ae <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 80035aa:	2301      	movs	r3, #1
 80035ac:	e0ac      	b.n	8003708 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80035ae:	4b2e      	ldr	r3, [pc, #184]	; (8003668 <HAL_RCC_OscConfig+0x778>)
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	4a2d      	ldr	r2, [pc, #180]	; (8003668 <HAL_RCC_OscConfig+0x778>)
 80035b4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80035b8:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80035ba:	f7fe fbe1 	bl	8001d80 <HAL_GetTick>
 80035be:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80035c0:	e008      	b.n	80035d4 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035c2:	f7fe fbdd 	bl	8001d80 <HAL_GetTick>
 80035c6:	4602      	mov	r2, r0
 80035c8:	693b      	ldr	r3, [r7, #16]
 80035ca:	1ad3      	subs	r3, r2, r3
 80035cc:	2b02      	cmp	r3, #2
 80035ce:	d901      	bls.n	80035d4 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 80035d0:	2303      	movs	r3, #3
 80035d2:	e099      	b.n	8003708 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80035d4:	4b24      	ldr	r3, [pc, #144]	; (8003668 <HAL_RCC_OscConfig+0x778>)
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d1f0      	bne.n	80035c2 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80035e0:	4b21      	ldr	r3, [pc, #132]	; (8003668 <HAL_RCC_OscConfig+0x778>)
 80035e2:	68da      	ldr	r2, [r3, #12]
 80035e4:	4b21      	ldr	r3, [pc, #132]	; (800366c <HAL_RCC_OscConfig+0x77c>)
 80035e6:	4013      	ands	r3, r2
 80035e8:	687a      	ldr	r2, [r7, #4]
 80035ea:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80035ec:	687a      	ldr	r2, [r7, #4]
 80035ee:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80035f0:	3a01      	subs	r2, #1
 80035f2:	0112      	lsls	r2, r2, #4
 80035f4:	4311      	orrs	r1, r2
 80035f6:	687a      	ldr	r2, [r7, #4]
 80035f8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80035fa:	0212      	lsls	r2, r2, #8
 80035fc:	4311      	orrs	r1, r2
 80035fe:	687a      	ldr	r2, [r7, #4]
 8003600:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003602:	0852      	lsrs	r2, r2, #1
 8003604:	3a01      	subs	r2, #1
 8003606:	0552      	lsls	r2, r2, #21
 8003608:	4311      	orrs	r1, r2
 800360a:	687a      	ldr	r2, [r7, #4]
 800360c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800360e:	0852      	lsrs	r2, r2, #1
 8003610:	3a01      	subs	r2, #1
 8003612:	0652      	lsls	r2, r2, #25
 8003614:	4311      	orrs	r1, r2
 8003616:	687a      	ldr	r2, [r7, #4]
 8003618:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800361a:	06d2      	lsls	r2, r2, #27
 800361c:	430a      	orrs	r2, r1
 800361e:	4912      	ldr	r1, [pc, #72]	; (8003668 <HAL_RCC_OscConfig+0x778>)
 8003620:	4313      	orrs	r3, r2
 8003622:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003624:	4b10      	ldr	r3, [pc, #64]	; (8003668 <HAL_RCC_OscConfig+0x778>)
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	4a0f      	ldr	r2, [pc, #60]	; (8003668 <HAL_RCC_OscConfig+0x778>)
 800362a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800362e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003630:	4b0d      	ldr	r3, [pc, #52]	; (8003668 <HAL_RCC_OscConfig+0x778>)
 8003632:	68db      	ldr	r3, [r3, #12]
 8003634:	4a0c      	ldr	r2, [pc, #48]	; (8003668 <HAL_RCC_OscConfig+0x778>)
 8003636:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800363a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800363c:	f7fe fba0 	bl	8001d80 <HAL_GetTick>
 8003640:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003642:	e008      	b.n	8003656 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003644:	f7fe fb9c 	bl	8001d80 <HAL_GetTick>
 8003648:	4602      	mov	r2, r0
 800364a:	693b      	ldr	r3, [r7, #16]
 800364c:	1ad3      	subs	r3, r2, r3
 800364e:	2b02      	cmp	r3, #2
 8003650:	d901      	bls.n	8003656 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8003652:	2303      	movs	r3, #3
 8003654:	e058      	b.n	8003708 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003656:	4b04      	ldr	r3, [pc, #16]	; (8003668 <HAL_RCC_OscConfig+0x778>)
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800365e:	2b00      	cmp	r3, #0
 8003660:	d0f0      	beq.n	8003644 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003662:	e050      	b.n	8003706 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003664:	2301      	movs	r3, #1
 8003666:	e04f      	b.n	8003708 <HAL_RCC_OscConfig+0x818>
 8003668:	40021000 	.word	0x40021000
 800366c:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003670:	4b27      	ldr	r3, [pc, #156]	; (8003710 <HAL_RCC_OscConfig+0x820>)
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003678:	2b00      	cmp	r3, #0
 800367a:	d144      	bne.n	8003706 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800367c:	4b24      	ldr	r3, [pc, #144]	; (8003710 <HAL_RCC_OscConfig+0x820>)
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	4a23      	ldr	r2, [pc, #140]	; (8003710 <HAL_RCC_OscConfig+0x820>)
 8003682:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003686:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003688:	4b21      	ldr	r3, [pc, #132]	; (8003710 <HAL_RCC_OscConfig+0x820>)
 800368a:	68db      	ldr	r3, [r3, #12]
 800368c:	4a20      	ldr	r2, [pc, #128]	; (8003710 <HAL_RCC_OscConfig+0x820>)
 800368e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003692:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003694:	f7fe fb74 	bl	8001d80 <HAL_GetTick>
 8003698:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800369a:	e008      	b.n	80036ae <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800369c:	f7fe fb70 	bl	8001d80 <HAL_GetTick>
 80036a0:	4602      	mov	r2, r0
 80036a2:	693b      	ldr	r3, [r7, #16]
 80036a4:	1ad3      	subs	r3, r2, r3
 80036a6:	2b02      	cmp	r3, #2
 80036a8:	d901      	bls.n	80036ae <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 80036aa:	2303      	movs	r3, #3
 80036ac:	e02c      	b.n	8003708 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80036ae:	4b18      	ldr	r3, [pc, #96]	; (8003710 <HAL_RCC_OscConfig+0x820>)
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d0f0      	beq.n	800369c <HAL_RCC_OscConfig+0x7ac>
 80036ba:	e024      	b.n	8003706 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80036bc:	69bb      	ldr	r3, [r7, #24]
 80036be:	2b0c      	cmp	r3, #12
 80036c0:	d01f      	beq.n	8003702 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80036c2:	4b13      	ldr	r3, [pc, #76]	; (8003710 <HAL_RCC_OscConfig+0x820>)
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	4a12      	ldr	r2, [pc, #72]	; (8003710 <HAL_RCC_OscConfig+0x820>)
 80036c8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80036cc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036ce:	f7fe fb57 	bl	8001d80 <HAL_GetTick>
 80036d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80036d4:	e008      	b.n	80036e8 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036d6:	f7fe fb53 	bl	8001d80 <HAL_GetTick>
 80036da:	4602      	mov	r2, r0
 80036dc:	693b      	ldr	r3, [r7, #16]
 80036de:	1ad3      	subs	r3, r2, r3
 80036e0:	2b02      	cmp	r3, #2
 80036e2:	d901      	bls.n	80036e8 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 80036e4:	2303      	movs	r3, #3
 80036e6:	e00f      	b.n	8003708 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80036e8:	4b09      	ldr	r3, [pc, #36]	; (8003710 <HAL_RCC_OscConfig+0x820>)
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d1f0      	bne.n	80036d6 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 80036f4:	4b06      	ldr	r3, [pc, #24]	; (8003710 <HAL_RCC_OscConfig+0x820>)
 80036f6:	68da      	ldr	r2, [r3, #12]
 80036f8:	4905      	ldr	r1, [pc, #20]	; (8003710 <HAL_RCC_OscConfig+0x820>)
 80036fa:	4b06      	ldr	r3, [pc, #24]	; (8003714 <HAL_RCC_OscConfig+0x824>)
 80036fc:	4013      	ands	r3, r2
 80036fe:	60cb      	str	r3, [r1, #12]
 8003700:	e001      	b.n	8003706 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003702:	2301      	movs	r3, #1
 8003704:	e000      	b.n	8003708 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8003706:	2300      	movs	r3, #0
}
 8003708:	4618      	mov	r0, r3
 800370a:	3720      	adds	r7, #32
 800370c:	46bd      	mov	sp, r7
 800370e:	bd80      	pop	{r7, pc}
 8003710:	40021000 	.word	0x40021000
 8003714:	feeefffc 	.word	0xfeeefffc

08003718 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003718:	b580      	push	{r7, lr}
 800371a:	b084      	sub	sp, #16
 800371c:	af00      	add	r7, sp, #0
 800371e:	6078      	str	r0, [r7, #4]
 8003720:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	2b00      	cmp	r3, #0
 8003726:	d101      	bne.n	800372c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003728:	2301      	movs	r3, #1
 800372a:	e0e7      	b.n	80038fc <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800372c:	4b75      	ldr	r3, [pc, #468]	; (8003904 <HAL_RCC_ClockConfig+0x1ec>)
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f003 0307 	and.w	r3, r3, #7
 8003734:	683a      	ldr	r2, [r7, #0]
 8003736:	429a      	cmp	r2, r3
 8003738:	d910      	bls.n	800375c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800373a:	4b72      	ldr	r3, [pc, #456]	; (8003904 <HAL_RCC_ClockConfig+0x1ec>)
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f023 0207 	bic.w	r2, r3, #7
 8003742:	4970      	ldr	r1, [pc, #448]	; (8003904 <HAL_RCC_ClockConfig+0x1ec>)
 8003744:	683b      	ldr	r3, [r7, #0]
 8003746:	4313      	orrs	r3, r2
 8003748:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800374a:	4b6e      	ldr	r3, [pc, #440]	; (8003904 <HAL_RCC_ClockConfig+0x1ec>)
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f003 0307 	and.w	r3, r3, #7
 8003752:	683a      	ldr	r2, [r7, #0]
 8003754:	429a      	cmp	r2, r3
 8003756:	d001      	beq.n	800375c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003758:	2301      	movs	r3, #1
 800375a:	e0cf      	b.n	80038fc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	f003 0302 	and.w	r3, r3, #2
 8003764:	2b00      	cmp	r3, #0
 8003766:	d010      	beq.n	800378a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	689a      	ldr	r2, [r3, #8]
 800376c:	4b66      	ldr	r3, [pc, #408]	; (8003908 <HAL_RCC_ClockConfig+0x1f0>)
 800376e:	689b      	ldr	r3, [r3, #8]
 8003770:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003774:	429a      	cmp	r2, r3
 8003776:	d908      	bls.n	800378a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003778:	4b63      	ldr	r3, [pc, #396]	; (8003908 <HAL_RCC_ClockConfig+0x1f0>)
 800377a:	689b      	ldr	r3, [r3, #8]
 800377c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	689b      	ldr	r3, [r3, #8]
 8003784:	4960      	ldr	r1, [pc, #384]	; (8003908 <HAL_RCC_ClockConfig+0x1f0>)
 8003786:	4313      	orrs	r3, r2
 8003788:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f003 0301 	and.w	r3, r3, #1
 8003792:	2b00      	cmp	r3, #0
 8003794:	d04c      	beq.n	8003830 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	685b      	ldr	r3, [r3, #4]
 800379a:	2b03      	cmp	r3, #3
 800379c:	d107      	bne.n	80037ae <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800379e:	4b5a      	ldr	r3, [pc, #360]	; (8003908 <HAL_RCC_ClockConfig+0x1f0>)
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d121      	bne.n	80037ee <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80037aa:	2301      	movs	r3, #1
 80037ac:	e0a6      	b.n	80038fc <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	685b      	ldr	r3, [r3, #4]
 80037b2:	2b02      	cmp	r3, #2
 80037b4:	d107      	bne.n	80037c6 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80037b6:	4b54      	ldr	r3, [pc, #336]	; (8003908 <HAL_RCC_ClockConfig+0x1f0>)
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d115      	bne.n	80037ee <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80037c2:	2301      	movs	r3, #1
 80037c4:	e09a      	b.n	80038fc <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	685b      	ldr	r3, [r3, #4]
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d107      	bne.n	80037de <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80037ce:	4b4e      	ldr	r3, [pc, #312]	; (8003908 <HAL_RCC_ClockConfig+0x1f0>)
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f003 0302 	and.w	r3, r3, #2
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d109      	bne.n	80037ee <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80037da:	2301      	movs	r3, #1
 80037dc:	e08e      	b.n	80038fc <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80037de:	4b4a      	ldr	r3, [pc, #296]	; (8003908 <HAL_RCC_ClockConfig+0x1f0>)
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d101      	bne.n	80037ee <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80037ea:	2301      	movs	r3, #1
 80037ec:	e086      	b.n	80038fc <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80037ee:	4b46      	ldr	r3, [pc, #280]	; (8003908 <HAL_RCC_ClockConfig+0x1f0>)
 80037f0:	689b      	ldr	r3, [r3, #8]
 80037f2:	f023 0203 	bic.w	r2, r3, #3
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	685b      	ldr	r3, [r3, #4]
 80037fa:	4943      	ldr	r1, [pc, #268]	; (8003908 <HAL_RCC_ClockConfig+0x1f0>)
 80037fc:	4313      	orrs	r3, r2
 80037fe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003800:	f7fe fabe 	bl	8001d80 <HAL_GetTick>
 8003804:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003806:	e00a      	b.n	800381e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003808:	f7fe faba 	bl	8001d80 <HAL_GetTick>
 800380c:	4602      	mov	r2, r0
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	1ad3      	subs	r3, r2, r3
 8003812:	f241 3288 	movw	r2, #5000	; 0x1388
 8003816:	4293      	cmp	r3, r2
 8003818:	d901      	bls.n	800381e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800381a:	2303      	movs	r3, #3
 800381c:	e06e      	b.n	80038fc <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800381e:	4b3a      	ldr	r3, [pc, #232]	; (8003908 <HAL_RCC_ClockConfig+0x1f0>)
 8003820:	689b      	ldr	r3, [r3, #8]
 8003822:	f003 020c 	and.w	r2, r3, #12
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	685b      	ldr	r3, [r3, #4]
 800382a:	009b      	lsls	r3, r3, #2
 800382c:	429a      	cmp	r2, r3
 800382e:	d1eb      	bne.n	8003808 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f003 0302 	and.w	r3, r3, #2
 8003838:	2b00      	cmp	r3, #0
 800383a:	d010      	beq.n	800385e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	689a      	ldr	r2, [r3, #8]
 8003840:	4b31      	ldr	r3, [pc, #196]	; (8003908 <HAL_RCC_ClockConfig+0x1f0>)
 8003842:	689b      	ldr	r3, [r3, #8]
 8003844:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003848:	429a      	cmp	r2, r3
 800384a:	d208      	bcs.n	800385e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800384c:	4b2e      	ldr	r3, [pc, #184]	; (8003908 <HAL_RCC_ClockConfig+0x1f0>)
 800384e:	689b      	ldr	r3, [r3, #8]
 8003850:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	689b      	ldr	r3, [r3, #8]
 8003858:	492b      	ldr	r1, [pc, #172]	; (8003908 <HAL_RCC_ClockConfig+0x1f0>)
 800385a:	4313      	orrs	r3, r2
 800385c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800385e:	4b29      	ldr	r3, [pc, #164]	; (8003904 <HAL_RCC_ClockConfig+0x1ec>)
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f003 0307 	and.w	r3, r3, #7
 8003866:	683a      	ldr	r2, [r7, #0]
 8003868:	429a      	cmp	r2, r3
 800386a:	d210      	bcs.n	800388e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800386c:	4b25      	ldr	r3, [pc, #148]	; (8003904 <HAL_RCC_ClockConfig+0x1ec>)
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f023 0207 	bic.w	r2, r3, #7
 8003874:	4923      	ldr	r1, [pc, #140]	; (8003904 <HAL_RCC_ClockConfig+0x1ec>)
 8003876:	683b      	ldr	r3, [r7, #0]
 8003878:	4313      	orrs	r3, r2
 800387a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800387c:	4b21      	ldr	r3, [pc, #132]	; (8003904 <HAL_RCC_ClockConfig+0x1ec>)
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	f003 0307 	and.w	r3, r3, #7
 8003884:	683a      	ldr	r2, [r7, #0]
 8003886:	429a      	cmp	r2, r3
 8003888:	d001      	beq.n	800388e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800388a:	2301      	movs	r3, #1
 800388c:	e036      	b.n	80038fc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f003 0304 	and.w	r3, r3, #4
 8003896:	2b00      	cmp	r3, #0
 8003898:	d008      	beq.n	80038ac <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800389a:	4b1b      	ldr	r3, [pc, #108]	; (8003908 <HAL_RCC_ClockConfig+0x1f0>)
 800389c:	689b      	ldr	r3, [r3, #8]
 800389e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	68db      	ldr	r3, [r3, #12]
 80038a6:	4918      	ldr	r1, [pc, #96]	; (8003908 <HAL_RCC_ClockConfig+0x1f0>)
 80038a8:	4313      	orrs	r3, r2
 80038aa:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f003 0308 	and.w	r3, r3, #8
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d009      	beq.n	80038cc <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80038b8:	4b13      	ldr	r3, [pc, #76]	; (8003908 <HAL_RCC_ClockConfig+0x1f0>)
 80038ba:	689b      	ldr	r3, [r3, #8]
 80038bc:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	691b      	ldr	r3, [r3, #16]
 80038c4:	00db      	lsls	r3, r3, #3
 80038c6:	4910      	ldr	r1, [pc, #64]	; (8003908 <HAL_RCC_ClockConfig+0x1f0>)
 80038c8:	4313      	orrs	r3, r2
 80038ca:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80038cc:	f000 f824 	bl	8003918 <HAL_RCC_GetSysClockFreq>
 80038d0:	4602      	mov	r2, r0
 80038d2:	4b0d      	ldr	r3, [pc, #52]	; (8003908 <HAL_RCC_ClockConfig+0x1f0>)
 80038d4:	689b      	ldr	r3, [r3, #8]
 80038d6:	091b      	lsrs	r3, r3, #4
 80038d8:	f003 030f 	and.w	r3, r3, #15
 80038dc:	490b      	ldr	r1, [pc, #44]	; (800390c <HAL_RCC_ClockConfig+0x1f4>)
 80038de:	5ccb      	ldrb	r3, [r1, r3]
 80038e0:	f003 031f 	and.w	r3, r3, #31
 80038e4:	fa22 f303 	lsr.w	r3, r2, r3
 80038e8:	4a09      	ldr	r2, [pc, #36]	; (8003910 <HAL_RCC_ClockConfig+0x1f8>)
 80038ea:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80038ec:	4b09      	ldr	r3, [pc, #36]	; (8003914 <HAL_RCC_ClockConfig+0x1fc>)
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	4618      	mov	r0, r3
 80038f2:	f7fe f907 	bl	8001b04 <HAL_InitTick>
 80038f6:	4603      	mov	r3, r0
 80038f8:	72fb      	strb	r3, [r7, #11]

  return status;
 80038fa:	7afb      	ldrb	r3, [r7, #11]
}
 80038fc:	4618      	mov	r0, r3
 80038fe:	3710      	adds	r7, #16
 8003900:	46bd      	mov	sp, r7
 8003902:	bd80      	pop	{r7, pc}
 8003904:	40022000 	.word	0x40022000
 8003908:	40021000 	.word	0x40021000
 800390c:	08007c9c 	.word	0x08007c9c
 8003910:	20000000 	.word	0x20000000
 8003914:	20000004 	.word	0x20000004

08003918 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003918:	b480      	push	{r7}
 800391a:	b089      	sub	sp, #36	; 0x24
 800391c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800391e:	2300      	movs	r3, #0
 8003920:	61fb      	str	r3, [r7, #28]
 8003922:	2300      	movs	r3, #0
 8003924:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003926:	4b3e      	ldr	r3, [pc, #248]	; (8003a20 <HAL_RCC_GetSysClockFreq+0x108>)
 8003928:	689b      	ldr	r3, [r3, #8]
 800392a:	f003 030c 	and.w	r3, r3, #12
 800392e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003930:	4b3b      	ldr	r3, [pc, #236]	; (8003a20 <HAL_RCC_GetSysClockFreq+0x108>)
 8003932:	68db      	ldr	r3, [r3, #12]
 8003934:	f003 0303 	and.w	r3, r3, #3
 8003938:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800393a:	693b      	ldr	r3, [r7, #16]
 800393c:	2b00      	cmp	r3, #0
 800393e:	d005      	beq.n	800394c <HAL_RCC_GetSysClockFreq+0x34>
 8003940:	693b      	ldr	r3, [r7, #16]
 8003942:	2b0c      	cmp	r3, #12
 8003944:	d121      	bne.n	800398a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	2b01      	cmp	r3, #1
 800394a:	d11e      	bne.n	800398a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800394c:	4b34      	ldr	r3, [pc, #208]	; (8003a20 <HAL_RCC_GetSysClockFreq+0x108>)
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f003 0308 	and.w	r3, r3, #8
 8003954:	2b00      	cmp	r3, #0
 8003956:	d107      	bne.n	8003968 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003958:	4b31      	ldr	r3, [pc, #196]	; (8003a20 <HAL_RCC_GetSysClockFreq+0x108>)
 800395a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800395e:	0a1b      	lsrs	r3, r3, #8
 8003960:	f003 030f 	and.w	r3, r3, #15
 8003964:	61fb      	str	r3, [r7, #28]
 8003966:	e005      	b.n	8003974 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003968:	4b2d      	ldr	r3, [pc, #180]	; (8003a20 <HAL_RCC_GetSysClockFreq+0x108>)
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	091b      	lsrs	r3, r3, #4
 800396e:	f003 030f 	and.w	r3, r3, #15
 8003972:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003974:	4a2b      	ldr	r2, [pc, #172]	; (8003a24 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003976:	69fb      	ldr	r3, [r7, #28]
 8003978:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800397c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800397e:	693b      	ldr	r3, [r7, #16]
 8003980:	2b00      	cmp	r3, #0
 8003982:	d10d      	bne.n	80039a0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003984:	69fb      	ldr	r3, [r7, #28]
 8003986:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003988:	e00a      	b.n	80039a0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800398a:	693b      	ldr	r3, [r7, #16]
 800398c:	2b04      	cmp	r3, #4
 800398e:	d102      	bne.n	8003996 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003990:	4b25      	ldr	r3, [pc, #148]	; (8003a28 <HAL_RCC_GetSysClockFreq+0x110>)
 8003992:	61bb      	str	r3, [r7, #24]
 8003994:	e004      	b.n	80039a0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003996:	693b      	ldr	r3, [r7, #16]
 8003998:	2b08      	cmp	r3, #8
 800399a:	d101      	bne.n	80039a0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800399c:	4b23      	ldr	r3, [pc, #140]	; (8003a2c <HAL_RCC_GetSysClockFreq+0x114>)
 800399e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80039a0:	693b      	ldr	r3, [r7, #16]
 80039a2:	2b0c      	cmp	r3, #12
 80039a4:	d134      	bne.n	8003a10 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80039a6:	4b1e      	ldr	r3, [pc, #120]	; (8003a20 <HAL_RCC_GetSysClockFreq+0x108>)
 80039a8:	68db      	ldr	r3, [r3, #12]
 80039aa:	f003 0303 	and.w	r3, r3, #3
 80039ae:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80039b0:	68bb      	ldr	r3, [r7, #8]
 80039b2:	2b02      	cmp	r3, #2
 80039b4:	d003      	beq.n	80039be <HAL_RCC_GetSysClockFreq+0xa6>
 80039b6:	68bb      	ldr	r3, [r7, #8]
 80039b8:	2b03      	cmp	r3, #3
 80039ba:	d003      	beq.n	80039c4 <HAL_RCC_GetSysClockFreq+0xac>
 80039bc:	e005      	b.n	80039ca <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80039be:	4b1a      	ldr	r3, [pc, #104]	; (8003a28 <HAL_RCC_GetSysClockFreq+0x110>)
 80039c0:	617b      	str	r3, [r7, #20]
      break;
 80039c2:	e005      	b.n	80039d0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80039c4:	4b19      	ldr	r3, [pc, #100]	; (8003a2c <HAL_RCC_GetSysClockFreq+0x114>)
 80039c6:	617b      	str	r3, [r7, #20]
      break;
 80039c8:	e002      	b.n	80039d0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80039ca:	69fb      	ldr	r3, [r7, #28]
 80039cc:	617b      	str	r3, [r7, #20]
      break;
 80039ce:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80039d0:	4b13      	ldr	r3, [pc, #76]	; (8003a20 <HAL_RCC_GetSysClockFreq+0x108>)
 80039d2:	68db      	ldr	r3, [r3, #12]
 80039d4:	091b      	lsrs	r3, r3, #4
 80039d6:	f003 0307 	and.w	r3, r3, #7
 80039da:	3301      	adds	r3, #1
 80039dc:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80039de:	4b10      	ldr	r3, [pc, #64]	; (8003a20 <HAL_RCC_GetSysClockFreq+0x108>)
 80039e0:	68db      	ldr	r3, [r3, #12]
 80039e2:	0a1b      	lsrs	r3, r3, #8
 80039e4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80039e8:	697a      	ldr	r2, [r7, #20]
 80039ea:	fb03 f202 	mul.w	r2, r3, r2
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80039f4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80039f6:	4b0a      	ldr	r3, [pc, #40]	; (8003a20 <HAL_RCC_GetSysClockFreq+0x108>)
 80039f8:	68db      	ldr	r3, [r3, #12]
 80039fa:	0e5b      	lsrs	r3, r3, #25
 80039fc:	f003 0303 	and.w	r3, r3, #3
 8003a00:	3301      	adds	r3, #1
 8003a02:	005b      	lsls	r3, r3, #1
 8003a04:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003a06:	697a      	ldr	r2, [r7, #20]
 8003a08:	683b      	ldr	r3, [r7, #0]
 8003a0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a0e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003a10:	69bb      	ldr	r3, [r7, #24]
}
 8003a12:	4618      	mov	r0, r3
 8003a14:	3724      	adds	r7, #36	; 0x24
 8003a16:	46bd      	mov	sp, r7
 8003a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a1c:	4770      	bx	lr
 8003a1e:	bf00      	nop
 8003a20:	40021000 	.word	0x40021000
 8003a24:	08007cb4 	.word	0x08007cb4
 8003a28:	00f42400 	.word	0x00f42400
 8003a2c:	007a1200 	.word	0x007a1200

08003a30 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003a30:	b480      	push	{r7}
 8003a32:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003a34:	4b03      	ldr	r3, [pc, #12]	; (8003a44 <HAL_RCC_GetHCLKFreq+0x14>)
 8003a36:	681b      	ldr	r3, [r3, #0]
}
 8003a38:	4618      	mov	r0, r3
 8003a3a:	46bd      	mov	sp, r7
 8003a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a40:	4770      	bx	lr
 8003a42:	bf00      	nop
 8003a44:	20000000 	.word	0x20000000

08003a48 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003a48:	b580      	push	{r7, lr}
 8003a4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003a4c:	f7ff fff0 	bl	8003a30 <HAL_RCC_GetHCLKFreq>
 8003a50:	4602      	mov	r2, r0
 8003a52:	4b06      	ldr	r3, [pc, #24]	; (8003a6c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003a54:	689b      	ldr	r3, [r3, #8]
 8003a56:	0a1b      	lsrs	r3, r3, #8
 8003a58:	f003 0307 	and.w	r3, r3, #7
 8003a5c:	4904      	ldr	r1, [pc, #16]	; (8003a70 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003a5e:	5ccb      	ldrb	r3, [r1, r3]
 8003a60:	f003 031f 	and.w	r3, r3, #31
 8003a64:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a68:	4618      	mov	r0, r3
 8003a6a:	bd80      	pop	{r7, pc}
 8003a6c:	40021000 	.word	0x40021000
 8003a70:	08007cac 	.word	0x08007cac

08003a74 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003a74:	b580      	push	{r7, lr}
 8003a76:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003a78:	f7ff ffda 	bl	8003a30 <HAL_RCC_GetHCLKFreq>
 8003a7c:	4602      	mov	r2, r0
 8003a7e:	4b06      	ldr	r3, [pc, #24]	; (8003a98 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003a80:	689b      	ldr	r3, [r3, #8]
 8003a82:	0adb      	lsrs	r3, r3, #11
 8003a84:	f003 0307 	and.w	r3, r3, #7
 8003a88:	4904      	ldr	r1, [pc, #16]	; (8003a9c <HAL_RCC_GetPCLK2Freq+0x28>)
 8003a8a:	5ccb      	ldrb	r3, [r1, r3]
 8003a8c:	f003 031f 	and.w	r3, r3, #31
 8003a90:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a94:	4618      	mov	r0, r3
 8003a96:	bd80      	pop	{r7, pc}
 8003a98:	40021000 	.word	0x40021000
 8003a9c:	08007cac 	.word	0x08007cac

08003aa0 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003aa0:	b480      	push	{r7}
 8003aa2:	b083      	sub	sp, #12
 8003aa4:	af00      	add	r7, sp, #0
 8003aa6:	6078      	str	r0, [r7, #4]
 8003aa8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	220f      	movs	r2, #15
 8003aae:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8003ab0:	4b12      	ldr	r3, [pc, #72]	; (8003afc <HAL_RCC_GetClockConfig+0x5c>)
 8003ab2:	689b      	ldr	r3, [r3, #8]
 8003ab4:	f003 0203 	and.w	r2, r3, #3
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8003abc:	4b0f      	ldr	r3, [pc, #60]	; (8003afc <HAL_RCC_GetClockConfig+0x5c>)
 8003abe:	689b      	ldr	r3, [r3, #8]
 8003ac0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8003ac8:	4b0c      	ldr	r3, [pc, #48]	; (8003afc <HAL_RCC_GetClockConfig+0x5c>)
 8003aca:	689b      	ldr	r3, [r3, #8]
 8003acc:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8003ad4:	4b09      	ldr	r3, [pc, #36]	; (8003afc <HAL_RCC_GetClockConfig+0x5c>)
 8003ad6:	689b      	ldr	r3, [r3, #8]
 8003ad8:	08db      	lsrs	r3, r3, #3
 8003ada:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8003ae2:	4b07      	ldr	r3, [pc, #28]	; (8003b00 <HAL_RCC_GetClockConfig+0x60>)
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f003 0207 	and.w	r2, r3, #7
 8003aea:	683b      	ldr	r3, [r7, #0]
 8003aec:	601a      	str	r2, [r3, #0]
}
 8003aee:	bf00      	nop
 8003af0:	370c      	adds	r7, #12
 8003af2:	46bd      	mov	sp, r7
 8003af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af8:	4770      	bx	lr
 8003afa:	bf00      	nop
 8003afc:	40021000 	.word	0x40021000
 8003b00:	40022000 	.word	0x40022000

08003b04 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003b04:	b580      	push	{r7, lr}
 8003b06:	b086      	sub	sp, #24
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003b0c:	2300      	movs	r3, #0
 8003b0e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003b10:	4b2a      	ldr	r3, [pc, #168]	; (8003bbc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003b12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b14:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d003      	beq.n	8003b24 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003b1c:	f7ff f984 	bl	8002e28 <HAL_PWREx_GetVoltageRange>
 8003b20:	6178      	str	r0, [r7, #20]
 8003b22:	e014      	b.n	8003b4e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003b24:	4b25      	ldr	r3, [pc, #148]	; (8003bbc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003b26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b28:	4a24      	ldr	r2, [pc, #144]	; (8003bbc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003b2a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b2e:	6593      	str	r3, [r2, #88]	; 0x58
 8003b30:	4b22      	ldr	r3, [pc, #136]	; (8003bbc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003b32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b34:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b38:	60fb      	str	r3, [r7, #12]
 8003b3a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003b3c:	f7ff f974 	bl	8002e28 <HAL_PWREx_GetVoltageRange>
 8003b40:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003b42:	4b1e      	ldr	r3, [pc, #120]	; (8003bbc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003b44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b46:	4a1d      	ldr	r2, [pc, #116]	; (8003bbc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003b48:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003b4c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003b4e:	697b      	ldr	r3, [r7, #20]
 8003b50:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003b54:	d10b      	bne.n	8003b6e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	2b80      	cmp	r3, #128	; 0x80
 8003b5a:	d919      	bls.n	8003b90 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	2ba0      	cmp	r3, #160	; 0xa0
 8003b60:	d902      	bls.n	8003b68 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003b62:	2302      	movs	r3, #2
 8003b64:	613b      	str	r3, [r7, #16]
 8003b66:	e013      	b.n	8003b90 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003b68:	2301      	movs	r3, #1
 8003b6a:	613b      	str	r3, [r7, #16]
 8003b6c:	e010      	b.n	8003b90 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	2b80      	cmp	r3, #128	; 0x80
 8003b72:	d902      	bls.n	8003b7a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003b74:	2303      	movs	r3, #3
 8003b76:	613b      	str	r3, [r7, #16]
 8003b78:	e00a      	b.n	8003b90 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	2b80      	cmp	r3, #128	; 0x80
 8003b7e:	d102      	bne.n	8003b86 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003b80:	2302      	movs	r3, #2
 8003b82:	613b      	str	r3, [r7, #16]
 8003b84:	e004      	b.n	8003b90 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	2b70      	cmp	r3, #112	; 0x70
 8003b8a:	d101      	bne.n	8003b90 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003b8c:	2301      	movs	r3, #1
 8003b8e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003b90:	4b0b      	ldr	r3, [pc, #44]	; (8003bc0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f023 0207 	bic.w	r2, r3, #7
 8003b98:	4909      	ldr	r1, [pc, #36]	; (8003bc0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003b9a:	693b      	ldr	r3, [r7, #16]
 8003b9c:	4313      	orrs	r3, r2
 8003b9e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003ba0:	4b07      	ldr	r3, [pc, #28]	; (8003bc0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f003 0307 	and.w	r3, r3, #7
 8003ba8:	693a      	ldr	r2, [r7, #16]
 8003baa:	429a      	cmp	r2, r3
 8003bac:	d001      	beq.n	8003bb2 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003bae:	2301      	movs	r3, #1
 8003bb0:	e000      	b.n	8003bb4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003bb2:	2300      	movs	r3, #0
}
 8003bb4:	4618      	mov	r0, r3
 8003bb6:	3718      	adds	r7, #24
 8003bb8:	46bd      	mov	sp, r7
 8003bba:	bd80      	pop	{r7, pc}
 8003bbc:	40021000 	.word	0x40021000
 8003bc0:	40022000 	.word	0x40022000

08003bc4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003bc4:	b580      	push	{r7, lr}
 8003bc6:	b086      	sub	sp, #24
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003bcc:	2300      	movs	r3, #0
 8003bce:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003bd0:	2300      	movs	r3, #0
 8003bd2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d031      	beq.n	8003c44 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003be4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003be8:	d01a      	beq.n	8003c20 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8003bea:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003bee:	d814      	bhi.n	8003c1a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d009      	beq.n	8003c08 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003bf4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003bf8:	d10f      	bne.n	8003c1a <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8003bfa:	4b5d      	ldr	r3, [pc, #372]	; (8003d70 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003bfc:	68db      	ldr	r3, [r3, #12]
 8003bfe:	4a5c      	ldr	r2, [pc, #368]	; (8003d70 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003c00:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c04:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003c06:	e00c      	b.n	8003c22 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	3304      	adds	r3, #4
 8003c0c:	2100      	movs	r1, #0
 8003c0e:	4618      	mov	r0, r3
 8003c10:	f000 f9de 	bl	8003fd0 <RCCEx_PLLSAI1_Config>
 8003c14:	4603      	mov	r3, r0
 8003c16:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003c18:	e003      	b.n	8003c22 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003c1a:	2301      	movs	r3, #1
 8003c1c:	74fb      	strb	r3, [r7, #19]
      break;
 8003c1e:	e000      	b.n	8003c22 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8003c20:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003c22:	7cfb      	ldrb	r3, [r7, #19]
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d10b      	bne.n	8003c40 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003c28:	4b51      	ldr	r3, [pc, #324]	; (8003d70 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003c2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c2e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c36:	494e      	ldr	r1, [pc, #312]	; (8003d70 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003c38:	4313      	orrs	r3, r2
 8003c3a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003c3e:	e001      	b.n	8003c44 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c40:	7cfb      	ldrb	r3, [r7, #19]
 8003c42:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	f000 809e 	beq.w	8003d8e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003c52:	2300      	movs	r3, #0
 8003c54:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003c56:	4b46      	ldr	r3, [pc, #280]	; (8003d70 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003c58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d101      	bne.n	8003c66 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8003c62:	2301      	movs	r3, #1
 8003c64:	e000      	b.n	8003c68 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8003c66:	2300      	movs	r3, #0
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d00d      	beq.n	8003c88 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003c6c:	4b40      	ldr	r3, [pc, #256]	; (8003d70 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003c6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c70:	4a3f      	ldr	r2, [pc, #252]	; (8003d70 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003c72:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c76:	6593      	str	r3, [r2, #88]	; 0x58
 8003c78:	4b3d      	ldr	r3, [pc, #244]	; (8003d70 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003c7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c7c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c80:	60bb      	str	r3, [r7, #8]
 8003c82:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003c84:	2301      	movs	r3, #1
 8003c86:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003c88:	4b3a      	ldr	r3, [pc, #232]	; (8003d74 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	4a39      	ldr	r2, [pc, #228]	; (8003d74 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8003c8e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c92:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003c94:	f7fe f874 	bl	8001d80 <HAL_GetTick>
 8003c98:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003c9a:	e009      	b.n	8003cb0 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c9c:	f7fe f870 	bl	8001d80 <HAL_GetTick>
 8003ca0:	4602      	mov	r2, r0
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	1ad3      	subs	r3, r2, r3
 8003ca6:	2b02      	cmp	r3, #2
 8003ca8:	d902      	bls.n	8003cb0 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8003caa:	2303      	movs	r3, #3
 8003cac:	74fb      	strb	r3, [r7, #19]
        break;
 8003cae:	e005      	b.n	8003cbc <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003cb0:	4b30      	ldr	r3, [pc, #192]	; (8003d74 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d0ef      	beq.n	8003c9c <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8003cbc:	7cfb      	ldrb	r3, [r7, #19]
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d15a      	bne.n	8003d78 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003cc2:	4b2b      	ldr	r3, [pc, #172]	; (8003d70 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003cc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cc8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ccc:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003cce:	697b      	ldr	r3, [r7, #20]
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d01e      	beq.n	8003d12 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003cd8:	697a      	ldr	r2, [r7, #20]
 8003cda:	429a      	cmp	r2, r3
 8003cdc:	d019      	beq.n	8003d12 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003cde:	4b24      	ldr	r3, [pc, #144]	; (8003d70 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003ce0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ce4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ce8:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003cea:	4b21      	ldr	r3, [pc, #132]	; (8003d70 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003cec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cf0:	4a1f      	ldr	r2, [pc, #124]	; (8003d70 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003cf2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003cf6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003cfa:	4b1d      	ldr	r3, [pc, #116]	; (8003d70 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003cfc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d00:	4a1b      	ldr	r2, [pc, #108]	; (8003d70 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003d02:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d06:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003d0a:	4a19      	ldr	r2, [pc, #100]	; (8003d70 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003d0c:	697b      	ldr	r3, [r7, #20]
 8003d0e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003d12:	697b      	ldr	r3, [r7, #20]
 8003d14:	f003 0301 	and.w	r3, r3, #1
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d016      	beq.n	8003d4a <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d1c:	f7fe f830 	bl	8001d80 <HAL_GetTick>
 8003d20:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003d22:	e00b      	b.n	8003d3c <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d24:	f7fe f82c 	bl	8001d80 <HAL_GetTick>
 8003d28:	4602      	mov	r2, r0
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	1ad3      	subs	r3, r2, r3
 8003d2e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d32:	4293      	cmp	r3, r2
 8003d34:	d902      	bls.n	8003d3c <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8003d36:	2303      	movs	r3, #3
 8003d38:	74fb      	strb	r3, [r7, #19]
            break;
 8003d3a:	e006      	b.n	8003d4a <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003d3c:	4b0c      	ldr	r3, [pc, #48]	; (8003d70 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003d3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d42:	f003 0302 	and.w	r3, r3, #2
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d0ec      	beq.n	8003d24 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8003d4a:	7cfb      	ldrb	r3, [r7, #19]
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d10b      	bne.n	8003d68 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003d50:	4b07      	ldr	r3, [pc, #28]	; (8003d70 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003d52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d56:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d5e:	4904      	ldr	r1, [pc, #16]	; (8003d70 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003d60:	4313      	orrs	r3, r2
 8003d62:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003d66:	e009      	b.n	8003d7c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003d68:	7cfb      	ldrb	r3, [r7, #19]
 8003d6a:	74bb      	strb	r3, [r7, #18]
 8003d6c:	e006      	b.n	8003d7c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8003d6e:	bf00      	nop
 8003d70:	40021000 	.word	0x40021000
 8003d74:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d78:	7cfb      	ldrb	r3, [r7, #19]
 8003d7a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003d7c:	7c7b      	ldrb	r3, [r7, #17]
 8003d7e:	2b01      	cmp	r3, #1
 8003d80:	d105      	bne.n	8003d8e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d82:	4b8a      	ldr	r3, [pc, #552]	; (8003fac <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003d84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d86:	4a89      	ldr	r2, [pc, #548]	; (8003fac <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003d88:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003d8c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f003 0301 	and.w	r3, r3, #1
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d00a      	beq.n	8003db0 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003d9a:	4b84      	ldr	r3, [pc, #528]	; (8003fac <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003d9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003da0:	f023 0203 	bic.w	r2, r3, #3
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	6a1b      	ldr	r3, [r3, #32]
 8003da8:	4980      	ldr	r1, [pc, #512]	; (8003fac <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003daa:	4313      	orrs	r3, r2
 8003dac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f003 0302 	and.w	r3, r3, #2
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d00a      	beq.n	8003dd2 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003dbc:	4b7b      	ldr	r3, [pc, #492]	; (8003fac <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003dbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003dc2:	f023 020c 	bic.w	r2, r3, #12
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dca:	4978      	ldr	r1, [pc, #480]	; (8003fac <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003dcc:	4313      	orrs	r3, r2
 8003dce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f003 0320 	and.w	r3, r3, #32
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d00a      	beq.n	8003df4 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003dde:	4b73      	ldr	r3, [pc, #460]	; (8003fac <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003de0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003de4:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dec:	496f      	ldr	r1, [pc, #444]	; (8003fac <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003dee:	4313      	orrs	r3, r2
 8003df0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d00a      	beq.n	8003e16 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003e00:	4b6a      	ldr	r3, [pc, #424]	; (8003fac <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003e02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e06:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e0e:	4967      	ldr	r1, [pc, #412]	; (8003fac <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003e10:	4313      	orrs	r3, r2
 8003e12:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d00a      	beq.n	8003e38 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003e22:	4b62      	ldr	r3, [pc, #392]	; (8003fac <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003e24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e28:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e30:	495e      	ldr	r1, [pc, #376]	; (8003fac <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003e32:	4313      	orrs	r3, r2
 8003e34:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d00a      	beq.n	8003e5a <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003e44:	4b59      	ldr	r3, [pc, #356]	; (8003fac <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003e46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e4a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e52:	4956      	ldr	r1, [pc, #344]	; (8003fac <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003e54:	4313      	orrs	r3, r2
 8003e56:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d00a      	beq.n	8003e7c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003e66:	4b51      	ldr	r3, [pc, #324]	; (8003fac <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003e68:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e6c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e74:	494d      	ldr	r1, [pc, #308]	; (8003fac <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003e76:	4313      	orrs	r3, r2
 8003e78:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d028      	beq.n	8003eda <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003e88:	4b48      	ldr	r3, [pc, #288]	; (8003fac <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003e8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e8e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e96:	4945      	ldr	r1, [pc, #276]	; (8003fac <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003e98:	4313      	orrs	r3, r2
 8003e9a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ea2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003ea6:	d106      	bne.n	8003eb6 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003ea8:	4b40      	ldr	r3, [pc, #256]	; (8003fac <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003eaa:	68db      	ldr	r3, [r3, #12]
 8003eac:	4a3f      	ldr	r2, [pc, #252]	; (8003fac <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003eae:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003eb2:	60d3      	str	r3, [r2, #12]
 8003eb4:	e011      	b.n	8003eda <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eba:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003ebe:	d10c      	bne.n	8003eda <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	3304      	adds	r3, #4
 8003ec4:	2101      	movs	r1, #1
 8003ec6:	4618      	mov	r0, r3
 8003ec8:	f000 f882 	bl	8003fd0 <RCCEx_PLLSAI1_Config>
 8003ecc:	4603      	mov	r3, r0
 8003ece:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003ed0:	7cfb      	ldrb	r3, [r7, #19]
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d001      	beq.n	8003eda <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 8003ed6:	7cfb      	ldrb	r3, [r7, #19]
 8003ed8:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d028      	beq.n	8003f38 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003ee6:	4b31      	ldr	r3, [pc, #196]	; (8003fac <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003ee8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003eec:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ef4:	492d      	ldr	r1, [pc, #180]	; (8003fac <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003ef6:	4313      	orrs	r3, r2
 8003ef8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f00:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003f04:	d106      	bne.n	8003f14 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003f06:	4b29      	ldr	r3, [pc, #164]	; (8003fac <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003f08:	68db      	ldr	r3, [r3, #12]
 8003f0a:	4a28      	ldr	r2, [pc, #160]	; (8003fac <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003f0c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003f10:	60d3      	str	r3, [r2, #12]
 8003f12:	e011      	b.n	8003f38 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f18:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003f1c:	d10c      	bne.n	8003f38 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	3304      	adds	r3, #4
 8003f22:	2101      	movs	r1, #1
 8003f24:	4618      	mov	r0, r3
 8003f26:	f000 f853 	bl	8003fd0 <RCCEx_PLLSAI1_Config>
 8003f2a:	4603      	mov	r3, r0
 8003f2c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003f2e:	7cfb      	ldrb	r3, [r7, #19]
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d001      	beq.n	8003f38 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 8003f34:	7cfb      	ldrb	r3, [r7, #19]
 8003f36:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d01c      	beq.n	8003f7e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003f44:	4b19      	ldr	r3, [pc, #100]	; (8003fac <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003f46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f4a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f52:	4916      	ldr	r1, [pc, #88]	; (8003fac <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003f54:	4313      	orrs	r3, r2
 8003f56:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f5e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003f62:	d10c      	bne.n	8003f7e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	3304      	adds	r3, #4
 8003f68:	2102      	movs	r1, #2
 8003f6a:	4618      	mov	r0, r3
 8003f6c:	f000 f830 	bl	8003fd0 <RCCEx_PLLSAI1_Config>
 8003f70:	4603      	mov	r3, r0
 8003f72:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003f74:	7cfb      	ldrb	r3, [r7, #19]
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d001      	beq.n	8003f7e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 8003f7a:	7cfb      	ldrb	r3, [r7, #19]
 8003f7c:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d00a      	beq.n	8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003f8a:	4b08      	ldr	r3, [pc, #32]	; (8003fac <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003f8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f90:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f98:	4904      	ldr	r1, [pc, #16]	; (8003fac <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003f9a:	4313      	orrs	r3, r2
 8003f9c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003fa0:	7cbb      	ldrb	r3, [r7, #18]
}
 8003fa2:	4618      	mov	r0, r3
 8003fa4:	3718      	adds	r7, #24
 8003fa6:	46bd      	mov	sp, r7
 8003fa8:	bd80      	pop	{r7, pc}
 8003faa:	bf00      	nop
 8003fac:	40021000 	.word	0x40021000

08003fb0 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8003fb0:	b480      	push	{r7}
 8003fb2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8003fb4:	4b05      	ldr	r3, [pc, #20]	; (8003fcc <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	4a04      	ldr	r2, [pc, #16]	; (8003fcc <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8003fba:	f043 0304 	orr.w	r3, r3, #4
 8003fbe:	6013      	str	r3, [r2, #0]
}
 8003fc0:	bf00      	nop
 8003fc2:	46bd      	mov	sp, r7
 8003fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc8:	4770      	bx	lr
 8003fca:	bf00      	nop
 8003fcc:	40021000 	.word	0x40021000

08003fd0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003fd0:	b580      	push	{r7, lr}
 8003fd2:	b084      	sub	sp, #16
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	6078      	str	r0, [r7, #4]
 8003fd8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003fda:	2300      	movs	r3, #0
 8003fdc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003fde:	4b74      	ldr	r3, [pc, #464]	; (80041b0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003fe0:	68db      	ldr	r3, [r3, #12]
 8003fe2:	f003 0303 	and.w	r3, r3, #3
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d018      	beq.n	800401c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003fea:	4b71      	ldr	r3, [pc, #452]	; (80041b0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003fec:	68db      	ldr	r3, [r3, #12]
 8003fee:	f003 0203 	and.w	r2, r3, #3
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	429a      	cmp	r2, r3
 8003ff8:	d10d      	bne.n	8004016 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
       ||
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d009      	beq.n	8004016 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004002:	4b6b      	ldr	r3, [pc, #428]	; (80041b0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004004:	68db      	ldr	r3, [r3, #12]
 8004006:	091b      	lsrs	r3, r3, #4
 8004008:	f003 0307 	and.w	r3, r3, #7
 800400c:	1c5a      	adds	r2, r3, #1
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	685b      	ldr	r3, [r3, #4]
       ||
 8004012:	429a      	cmp	r2, r3
 8004014:	d047      	beq.n	80040a6 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004016:	2301      	movs	r3, #1
 8004018:	73fb      	strb	r3, [r7, #15]
 800401a:	e044      	b.n	80040a6 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	2b03      	cmp	r3, #3
 8004022:	d018      	beq.n	8004056 <RCCEx_PLLSAI1_Config+0x86>
 8004024:	2b03      	cmp	r3, #3
 8004026:	d825      	bhi.n	8004074 <RCCEx_PLLSAI1_Config+0xa4>
 8004028:	2b01      	cmp	r3, #1
 800402a:	d002      	beq.n	8004032 <RCCEx_PLLSAI1_Config+0x62>
 800402c:	2b02      	cmp	r3, #2
 800402e:	d009      	beq.n	8004044 <RCCEx_PLLSAI1_Config+0x74>
 8004030:	e020      	b.n	8004074 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004032:	4b5f      	ldr	r3, [pc, #380]	; (80041b0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	f003 0302 	and.w	r3, r3, #2
 800403a:	2b00      	cmp	r3, #0
 800403c:	d11d      	bne.n	800407a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800403e:	2301      	movs	r3, #1
 8004040:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004042:	e01a      	b.n	800407a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004044:	4b5a      	ldr	r3, [pc, #360]	; (80041b0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800404c:	2b00      	cmp	r3, #0
 800404e:	d116      	bne.n	800407e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004050:	2301      	movs	r3, #1
 8004052:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004054:	e013      	b.n	800407e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004056:	4b56      	ldr	r3, [pc, #344]	; (80041b0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800405e:	2b00      	cmp	r3, #0
 8004060:	d10f      	bne.n	8004082 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004062:	4b53      	ldr	r3, [pc, #332]	; (80041b0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800406a:	2b00      	cmp	r3, #0
 800406c:	d109      	bne.n	8004082 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800406e:	2301      	movs	r3, #1
 8004070:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004072:	e006      	b.n	8004082 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004074:	2301      	movs	r3, #1
 8004076:	73fb      	strb	r3, [r7, #15]
      break;
 8004078:	e004      	b.n	8004084 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800407a:	bf00      	nop
 800407c:	e002      	b.n	8004084 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800407e:	bf00      	nop
 8004080:	e000      	b.n	8004084 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004082:	bf00      	nop
    }

    if(status == HAL_OK)
 8004084:	7bfb      	ldrb	r3, [r7, #15]
 8004086:	2b00      	cmp	r3, #0
 8004088:	d10d      	bne.n	80040a6 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800408a:	4b49      	ldr	r3, [pc, #292]	; (80041b0 <RCCEx_PLLSAI1_Config+0x1e0>)
 800408c:	68db      	ldr	r3, [r3, #12]
 800408e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	6819      	ldr	r1, [r3, #0]
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	685b      	ldr	r3, [r3, #4]
 800409a:	3b01      	subs	r3, #1
 800409c:	011b      	lsls	r3, r3, #4
 800409e:	430b      	orrs	r3, r1
 80040a0:	4943      	ldr	r1, [pc, #268]	; (80041b0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80040a2:	4313      	orrs	r3, r2
 80040a4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80040a6:	7bfb      	ldrb	r3, [r7, #15]
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d17c      	bne.n	80041a6 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80040ac:	4b40      	ldr	r3, [pc, #256]	; (80041b0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	4a3f      	ldr	r2, [pc, #252]	; (80041b0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80040b2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80040b6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80040b8:	f7fd fe62 	bl	8001d80 <HAL_GetTick>
 80040bc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80040be:	e009      	b.n	80040d4 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80040c0:	f7fd fe5e 	bl	8001d80 <HAL_GetTick>
 80040c4:	4602      	mov	r2, r0
 80040c6:	68bb      	ldr	r3, [r7, #8]
 80040c8:	1ad3      	subs	r3, r2, r3
 80040ca:	2b02      	cmp	r3, #2
 80040cc:	d902      	bls.n	80040d4 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80040ce:	2303      	movs	r3, #3
 80040d0:	73fb      	strb	r3, [r7, #15]
        break;
 80040d2:	e005      	b.n	80040e0 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80040d4:	4b36      	ldr	r3, [pc, #216]	; (80041b0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d1ef      	bne.n	80040c0 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80040e0:	7bfb      	ldrb	r3, [r7, #15]
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d15f      	bne.n	80041a6 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80040e6:	683b      	ldr	r3, [r7, #0]
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d110      	bne.n	800410e <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80040ec:	4b30      	ldr	r3, [pc, #192]	; (80041b0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80040ee:	691b      	ldr	r3, [r3, #16]
 80040f0:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 80040f4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80040f8:	687a      	ldr	r2, [r7, #4]
 80040fa:	6892      	ldr	r2, [r2, #8]
 80040fc:	0211      	lsls	r1, r2, #8
 80040fe:	687a      	ldr	r2, [r7, #4]
 8004100:	68d2      	ldr	r2, [r2, #12]
 8004102:	06d2      	lsls	r2, r2, #27
 8004104:	430a      	orrs	r2, r1
 8004106:	492a      	ldr	r1, [pc, #168]	; (80041b0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004108:	4313      	orrs	r3, r2
 800410a:	610b      	str	r3, [r1, #16]
 800410c:	e027      	b.n	800415e <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800410e:	683b      	ldr	r3, [r7, #0]
 8004110:	2b01      	cmp	r3, #1
 8004112:	d112      	bne.n	800413a <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004114:	4b26      	ldr	r3, [pc, #152]	; (80041b0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004116:	691b      	ldr	r3, [r3, #16]
 8004118:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800411c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004120:	687a      	ldr	r2, [r7, #4]
 8004122:	6892      	ldr	r2, [r2, #8]
 8004124:	0211      	lsls	r1, r2, #8
 8004126:	687a      	ldr	r2, [r7, #4]
 8004128:	6912      	ldr	r2, [r2, #16]
 800412a:	0852      	lsrs	r2, r2, #1
 800412c:	3a01      	subs	r2, #1
 800412e:	0552      	lsls	r2, r2, #21
 8004130:	430a      	orrs	r2, r1
 8004132:	491f      	ldr	r1, [pc, #124]	; (80041b0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004134:	4313      	orrs	r3, r2
 8004136:	610b      	str	r3, [r1, #16]
 8004138:	e011      	b.n	800415e <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800413a:	4b1d      	ldr	r3, [pc, #116]	; (80041b0 <RCCEx_PLLSAI1_Config+0x1e0>)
 800413c:	691b      	ldr	r3, [r3, #16]
 800413e:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004142:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004146:	687a      	ldr	r2, [r7, #4]
 8004148:	6892      	ldr	r2, [r2, #8]
 800414a:	0211      	lsls	r1, r2, #8
 800414c:	687a      	ldr	r2, [r7, #4]
 800414e:	6952      	ldr	r2, [r2, #20]
 8004150:	0852      	lsrs	r2, r2, #1
 8004152:	3a01      	subs	r2, #1
 8004154:	0652      	lsls	r2, r2, #25
 8004156:	430a      	orrs	r2, r1
 8004158:	4915      	ldr	r1, [pc, #84]	; (80041b0 <RCCEx_PLLSAI1_Config+0x1e0>)
 800415a:	4313      	orrs	r3, r2
 800415c:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800415e:	4b14      	ldr	r3, [pc, #80]	; (80041b0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	4a13      	ldr	r2, [pc, #76]	; (80041b0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004164:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004168:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800416a:	f7fd fe09 	bl	8001d80 <HAL_GetTick>
 800416e:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004170:	e009      	b.n	8004186 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004172:	f7fd fe05 	bl	8001d80 <HAL_GetTick>
 8004176:	4602      	mov	r2, r0
 8004178:	68bb      	ldr	r3, [r7, #8]
 800417a:	1ad3      	subs	r3, r2, r3
 800417c:	2b02      	cmp	r3, #2
 800417e:	d902      	bls.n	8004186 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8004180:	2303      	movs	r3, #3
 8004182:	73fb      	strb	r3, [r7, #15]
          break;
 8004184:	e005      	b.n	8004192 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004186:	4b0a      	ldr	r3, [pc, #40]	; (80041b0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800418e:	2b00      	cmp	r3, #0
 8004190:	d0ef      	beq.n	8004172 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8004192:	7bfb      	ldrb	r3, [r7, #15]
 8004194:	2b00      	cmp	r3, #0
 8004196:	d106      	bne.n	80041a6 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004198:	4b05      	ldr	r3, [pc, #20]	; (80041b0 <RCCEx_PLLSAI1_Config+0x1e0>)
 800419a:	691a      	ldr	r2, [r3, #16]
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	699b      	ldr	r3, [r3, #24]
 80041a0:	4903      	ldr	r1, [pc, #12]	; (80041b0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80041a2:	4313      	orrs	r3, r2
 80041a4:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80041a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80041a8:	4618      	mov	r0, r3
 80041aa:	3710      	adds	r7, #16
 80041ac:	46bd      	mov	sp, r7
 80041ae:	bd80      	pop	{r7, pc}
 80041b0:	40021000 	.word	0x40021000

080041b4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80041b4:	b580      	push	{r7, lr}
 80041b6:	b082      	sub	sp, #8
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d101      	bne.n	80041c6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80041c2:	2301      	movs	r3, #1
 80041c4:	e049      	b.n	800425a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041cc:	b2db      	uxtb	r3, r3
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d106      	bne.n	80041e0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	2200      	movs	r2, #0
 80041d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80041da:	6878      	ldr	r0, [r7, #4]
 80041dc:	f000 f841 	bl	8004262 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	2202      	movs	r2, #2
 80041e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681a      	ldr	r2, [r3, #0]
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	3304      	adds	r3, #4
 80041f0:	4619      	mov	r1, r3
 80041f2:	4610      	mov	r0, r2
 80041f4:	f000 f9dc 	bl	80045b0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	2201      	movs	r2, #1
 80041fc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	2201      	movs	r2, #1
 8004204:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	2201      	movs	r2, #1
 800420c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	2201      	movs	r2, #1
 8004214:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	2201      	movs	r2, #1
 800421c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	2201      	movs	r2, #1
 8004224:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	2201      	movs	r2, #1
 800422c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	2201      	movs	r2, #1
 8004234:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	2201      	movs	r2, #1
 800423c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	2201      	movs	r2, #1
 8004244:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	2201      	movs	r2, #1
 800424c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	2201      	movs	r2, #1
 8004254:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004258:	2300      	movs	r3, #0
}
 800425a:	4618      	mov	r0, r3
 800425c:	3708      	adds	r7, #8
 800425e:	46bd      	mov	sp, r7
 8004260:	bd80      	pop	{r7, pc}

08004262 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004262:	b480      	push	{r7}
 8004264:	b083      	sub	sp, #12
 8004266:	af00      	add	r7, sp, #0
 8004268:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800426a:	bf00      	nop
 800426c:	370c      	adds	r7, #12
 800426e:	46bd      	mov	sp, r7
 8004270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004274:	4770      	bx	lr
	...

08004278 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004278:	b480      	push	{r7}
 800427a:	b085      	sub	sp, #20
 800427c:	af00      	add	r7, sp, #0
 800427e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004286:	b2db      	uxtb	r3, r3
 8004288:	2b01      	cmp	r3, #1
 800428a:	d001      	beq.n	8004290 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800428c:	2301      	movs	r3, #1
 800428e:	e03b      	b.n	8004308 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	2202      	movs	r2, #2
 8004294:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	68da      	ldr	r2, [r3, #12]
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	f042 0201 	orr.w	r2, r2, #1
 80042a6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	4a19      	ldr	r2, [pc, #100]	; (8004314 <HAL_TIM_Base_Start_IT+0x9c>)
 80042ae:	4293      	cmp	r3, r2
 80042b0:	d009      	beq.n	80042c6 <HAL_TIM_Base_Start_IT+0x4e>
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80042ba:	d004      	beq.n	80042c6 <HAL_TIM_Base_Start_IT+0x4e>
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	4a15      	ldr	r2, [pc, #84]	; (8004318 <HAL_TIM_Base_Start_IT+0xa0>)
 80042c2:	4293      	cmp	r3, r2
 80042c4:	d115      	bne.n	80042f2 <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	689a      	ldr	r2, [r3, #8]
 80042cc:	4b13      	ldr	r3, [pc, #76]	; (800431c <HAL_TIM_Base_Start_IT+0xa4>)
 80042ce:	4013      	ands	r3, r2
 80042d0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	2b06      	cmp	r3, #6
 80042d6:	d015      	beq.n	8004304 <HAL_TIM_Base_Start_IT+0x8c>
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80042de:	d011      	beq.n	8004304 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	681a      	ldr	r2, [r3, #0]
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	f042 0201 	orr.w	r2, r2, #1
 80042ee:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80042f0:	e008      	b.n	8004304 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	681a      	ldr	r2, [r3, #0]
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	f042 0201 	orr.w	r2, r2, #1
 8004300:	601a      	str	r2, [r3, #0]
 8004302:	e000      	b.n	8004306 <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004304:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004306:	2300      	movs	r3, #0
}
 8004308:	4618      	mov	r0, r3
 800430a:	3714      	adds	r7, #20
 800430c:	46bd      	mov	sp, r7
 800430e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004312:	4770      	bx	lr
 8004314:	40012c00 	.word	0x40012c00
 8004318:	40014000 	.word	0x40014000
 800431c:	00010007 	.word	0x00010007

08004320 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004320:	b580      	push	{r7, lr}
 8004322:	b082      	sub	sp, #8
 8004324:	af00      	add	r7, sp, #0
 8004326:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	691b      	ldr	r3, [r3, #16]
 800432e:	f003 0302 	and.w	r3, r3, #2
 8004332:	2b02      	cmp	r3, #2
 8004334:	d122      	bne.n	800437c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	68db      	ldr	r3, [r3, #12]
 800433c:	f003 0302 	and.w	r3, r3, #2
 8004340:	2b02      	cmp	r3, #2
 8004342:	d11b      	bne.n	800437c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	f06f 0202 	mvn.w	r2, #2
 800434c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	2201      	movs	r2, #1
 8004352:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	699b      	ldr	r3, [r3, #24]
 800435a:	f003 0303 	and.w	r3, r3, #3
 800435e:	2b00      	cmp	r3, #0
 8004360:	d003      	beq.n	800436a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004362:	6878      	ldr	r0, [r7, #4]
 8004364:	f000 f905 	bl	8004572 <HAL_TIM_IC_CaptureCallback>
 8004368:	e005      	b.n	8004376 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800436a:	6878      	ldr	r0, [r7, #4]
 800436c:	f000 f8f7 	bl	800455e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004370:	6878      	ldr	r0, [r7, #4]
 8004372:	f000 f908 	bl	8004586 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	2200      	movs	r2, #0
 800437a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	691b      	ldr	r3, [r3, #16]
 8004382:	f003 0304 	and.w	r3, r3, #4
 8004386:	2b04      	cmp	r3, #4
 8004388:	d122      	bne.n	80043d0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	68db      	ldr	r3, [r3, #12]
 8004390:	f003 0304 	and.w	r3, r3, #4
 8004394:	2b04      	cmp	r3, #4
 8004396:	d11b      	bne.n	80043d0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	f06f 0204 	mvn.w	r2, #4
 80043a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	2202      	movs	r2, #2
 80043a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	699b      	ldr	r3, [r3, #24]
 80043ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d003      	beq.n	80043be <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80043b6:	6878      	ldr	r0, [r7, #4]
 80043b8:	f000 f8db 	bl	8004572 <HAL_TIM_IC_CaptureCallback>
 80043bc:	e005      	b.n	80043ca <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80043be:	6878      	ldr	r0, [r7, #4]
 80043c0:	f000 f8cd 	bl	800455e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80043c4:	6878      	ldr	r0, [r7, #4]
 80043c6:	f000 f8de 	bl	8004586 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	2200      	movs	r2, #0
 80043ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	691b      	ldr	r3, [r3, #16]
 80043d6:	f003 0308 	and.w	r3, r3, #8
 80043da:	2b08      	cmp	r3, #8
 80043dc:	d122      	bne.n	8004424 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	68db      	ldr	r3, [r3, #12]
 80043e4:	f003 0308 	and.w	r3, r3, #8
 80043e8:	2b08      	cmp	r3, #8
 80043ea:	d11b      	bne.n	8004424 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	f06f 0208 	mvn.w	r2, #8
 80043f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	2204      	movs	r2, #4
 80043fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	69db      	ldr	r3, [r3, #28]
 8004402:	f003 0303 	and.w	r3, r3, #3
 8004406:	2b00      	cmp	r3, #0
 8004408:	d003      	beq.n	8004412 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800440a:	6878      	ldr	r0, [r7, #4]
 800440c:	f000 f8b1 	bl	8004572 <HAL_TIM_IC_CaptureCallback>
 8004410:	e005      	b.n	800441e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004412:	6878      	ldr	r0, [r7, #4]
 8004414:	f000 f8a3 	bl	800455e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004418:	6878      	ldr	r0, [r7, #4]
 800441a:	f000 f8b4 	bl	8004586 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	2200      	movs	r2, #0
 8004422:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	691b      	ldr	r3, [r3, #16]
 800442a:	f003 0310 	and.w	r3, r3, #16
 800442e:	2b10      	cmp	r3, #16
 8004430:	d122      	bne.n	8004478 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	68db      	ldr	r3, [r3, #12]
 8004438:	f003 0310 	and.w	r3, r3, #16
 800443c:	2b10      	cmp	r3, #16
 800443e:	d11b      	bne.n	8004478 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	f06f 0210 	mvn.w	r2, #16
 8004448:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	2208      	movs	r2, #8
 800444e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	69db      	ldr	r3, [r3, #28]
 8004456:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800445a:	2b00      	cmp	r3, #0
 800445c:	d003      	beq.n	8004466 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800445e:	6878      	ldr	r0, [r7, #4]
 8004460:	f000 f887 	bl	8004572 <HAL_TIM_IC_CaptureCallback>
 8004464:	e005      	b.n	8004472 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004466:	6878      	ldr	r0, [r7, #4]
 8004468:	f000 f879 	bl	800455e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800446c:	6878      	ldr	r0, [r7, #4]
 800446e:	f000 f88a 	bl	8004586 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	2200      	movs	r2, #0
 8004476:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	691b      	ldr	r3, [r3, #16]
 800447e:	f003 0301 	and.w	r3, r3, #1
 8004482:	2b01      	cmp	r3, #1
 8004484:	d10e      	bne.n	80044a4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	68db      	ldr	r3, [r3, #12]
 800448c:	f003 0301 	and.w	r3, r3, #1
 8004490:	2b01      	cmp	r3, #1
 8004492:	d107      	bne.n	80044a4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	f06f 0201 	mvn.w	r2, #1
 800449c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800449e:	6878      	ldr	r0, [r7, #4]
 80044a0:	f7fd f8dc 	bl	800165c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	691b      	ldr	r3, [r3, #16]
 80044aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044ae:	2b80      	cmp	r3, #128	; 0x80
 80044b0:	d10e      	bne.n	80044d0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	68db      	ldr	r3, [r3, #12]
 80044b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044bc:	2b80      	cmp	r3, #128	; 0x80
 80044be:	d107      	bne.n	80044d0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80044c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80044ca:	6878      	ldr	r0, [r7, #4]
 80044cc:	f000 f8de 	bl	800468c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	691b      	ldr	r3, [r3, #16]
 80044d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80044de:	d10e      	bne.n	80044fe <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	68db      	ldr	r3, [r3, #12]
 80044e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044ea:	2b80      	cmp	r3, #128	; 0x80
 80044ec:	d107      	bne.n	80044fe <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80044f6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80044f8:	6878      	ldr	r0, [r7, #4]
 80044fa:	f000 f8d1 	bl	80046a0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	691b      	ldr	r3, [r3, #16]
 8004504:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004508:	2b40      	cmp	r3, #64	; 0x40
 800450a:	d10e      	bne.n	800452a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	68db      	ldr	r3, [r3, #12]
 8004512:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004516:	2b40      	cmp	r3, #64	; 0x40
 8004518:	d107      	bne.n	800452a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004522:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004524:	6878      	ldr	r0, [r7, #4]
 8004526:	f000 f838 	bl	800459a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	691b      	ldr	r3, [r3, #16]
 8004530:	f003 0320 	and.w	r3, r3, #32
 8004534:	2b20      	cmp	r3, #32
 8004536:	d10e      	bne.n	8004556 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	68db      	ldr	r3, [r3, #12]
 800453e:	f003 0320 	and.w	r3, r3, #32
 8004542:	2b20      	cmp	r3, #32
 8004544:	d107      	bne.n	8004556 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	f06f 0220 	mvn.w	r2, #32
 800454e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004550:	6878      	ldr	r0, [r7, #4]
 8004552:	f000 f891 	bl	8004678 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004556:	bf00      	nop
 8004558:	3708      	adds	r7, #8
 800455a:	46bd      	mov	sp, r7
 800455c:	bd80      	pop	{r7, pc}

0800455e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800455e:	b480      	push	{r7}
 8004560:	b083      	sub	sp, #12
 8004562:	af00      	add	r7, sp, #0
 8004564:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004566:	bf00      	nop
 8004568:	370c      	adds	r7, #12
 800456a:	46bd      	mov	sp, r7
 800456c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004570:	4770      	bx	lr

08004572 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004572:	b480      	push	{r7}
 8004574:	b083      	sub	sp, #12
 8004576:	af00      	add	r7, sp, #0
 8004578:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800457a:	bf00      	nop
 800457c:	370c      	adds	r7, #12
 800457e:	46bd      	mov	sp, r7
 8004580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004584:	4770      	bx	lr

08004586 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004586:	b480      	push	{r7}
 8004588:	b083      	sub	sp, #12
 800458a:	af00      	add	r7, sp, #0
 800458c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800458e:	bf00      	nop
 8004590:	370c      	adds	r7, #12
 8004592:	46bd      	mov	sp, r7
 8004594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004598:	4770      	bx	lr

0800459a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800459a:	b480      	push	{r7}
 800459c:	b083      	sub	sp, #12
 800459e:	af00      	add	r7, sp, #0
 80045a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80045a2:	bf00      	nop
 80045a4:	370c      	adds	r7, #12
 80045a6:	46bd      	mov	sp, r7
 80045a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ac:	4770      	bx	lr
	...

080045b0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80045b0:	b480      	push	{r7}
 80045b2:	b085      	sub	sp, #20
 80045b4:	af00      	add	r7, sp, #0
 80045b6:	6078      	str	r0, [r7, #4]
 80045b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	4a2a      	ldr	r2, [pc, #168]	; (800466c <TIM_Base_SetConfig+0xbc>)
 80045c4:	4293      	cmp	r3, r2
 80045c6:	d003      	beq.n	80045d0 <TIM_Base_SetConfig+0x20>
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80045ce:	d108      	bne.n	80045e2 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045d6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80045d8:	683b      	ldr	r3, [r7, #0]
 80045da:	685b      	ldr	r3, [r3, #4]
 80045dc:	68fa      	ldr	r2, [r7, #12]
 80045de:	4313      	orrs	r3, r2
 80045e0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	4a21      	ldr	r2, [pc, #132]	; (800466c <TIM_Base_SetConfig+0xbc>)
 80045e6:	4293      	cmp	r3, r2
 80045e8:	d00b      	beq.n	8004602 <TIM_Base_SetConfig+0x52>
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80045f0:	d007      	beq.n	8004602 <TIM_Base_SetConfig+0x52>
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	4a1e      	ldr	r2, [pc, #120]	; (8004670 <TIM_Base_SetConfig+0xc0>)
 80045f6:	4293      	cmp	r3, r2
 80045f8:	d003      	beq.n	8004602 <TIM_Base_SetConfig+0x52>
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	4a1d      	ldr	r2, [pc, #116]	; (8004674 <TIM_Base_SetConfig+0xc4>)
 80045fe:	4293      	cmp	r3, r2
 8004600:	d108      	bne.n	8004614 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004608:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800460a:	683b      	ldr	r3, [r7, #0]
 800460c:	68db      	ldr	r3, [r3, #12]
 800460e:	68fa      	ldr	r2, [r7, #12]
 8004610:	4313      	orrs	r3, r2
 8004612:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800461a:	683b      	ldr	r3, [r7, #0]
 800461c:	695b      	ldr	r3, [r3, #20]
 800461e:	4313      	orrs	r3, r2
 8004620:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	68fa      	ldr	r2, [r7, #12]
 8004626:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004628:	683b      	ldr	r3, [r7, #0]
 800462a:	689a      	ldr	r2, [r3, #8]
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004630:	683b      	ldr	r3, [r7, #0]
 8004632:	681a      	ldr	r2, [r3, #0]
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	4a0c      	ldr	r2, [pc, #48]	; (800466c <TIM_Base_SetConfig+0xbc>)
 800463c:	4293      	cmp	r3, r2
 800463e:	d007      	beq.n	8004650 <TIM_Base_SetConfig+0xa0>
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	4a0b      	ldr	r2, [pc, #44]	; (8004670 <TIM_Base_SetConfig+0xc0>)
 8004644:	4293      	cmp	r3, r2
 8004646:	d003      	beq.n	8004650 <TIM_Base_SetConfig+0xa0>
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	4a0a      	ldr	r2, [pc, #40]	; (8004674 <TIM_Base_SetConfig+0xc4>)
 800464c:	4293      	cmp	r3, r2
 800464e:	d103      	bne.n	8004658 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004650:	683b      	ldr	r3, [r7, #0]
 8004652:	691a      	ldr	r2, [r3, #16]
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	2201      	movs	r2, #1
 800465c:	615a      	str	r2, [r3, #20]
}
 800465e:	bf00      	nop
 8004660:	3714      	adds	r7, #20
 8004662:	46bd      	mov	sp, r7
 8004664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004668:	4770      	bx	lr
 800466a:	bf00      	nop
 800466c:	40012c00 	.word	0x40012c00
 8004670:	40014000 	.word	0x40014000
 8004674:	40014400 	.word	0x40014400

08004678 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004678:	b480      	push	{r7}
 800467a:	b083      	sub	sp, #12
 800467c:	af00      	add	r7, sp, #0
 800467e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004680:	bf00      	nop
 8004682:	370c      	adds	r7, #12
 8004684:	46bd      	mov	sp, r7
 8004686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800468a:	4770      	bx	lr

0800468c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800468c:	b480      	push	{r7}
 800468e:	b083      	sub	sp, #12
 8004690:	af00      	add	r7, sp, #0
 8004692:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004694:	bf00      	nop
 8004696:	370c      	adds	r7, #12
 8004698:	46bd      	mov	sp, r7
 800469a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800469e:	4770      	bx	lr

080046a0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80046a0:	b480      	push	{r7}
 80046a2:	b083      	sub	sp, #12
 80046a4:	af00      	add	r7, sp, #0
 80046a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80046a8:	bf00      	nop
 80046aa:	370c      	adds	r7, #12
 80046ac:	46bd      	mov	sp, r7
 80046ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b2:	4770      	bx	lr

080046b4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80046b4:	b580      	push	{r7, lr}
 80046b6:	b082      	sub	sp, #8
 80046b8:	af00      	add	r7, sp, #0
 80046ba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d101      	bne.n	80046c6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80046c2:	2301      	movs	r3, #1
 80046c4:	e040      	b.n	8004748 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d106      	bne.n	80046dc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	2200      	movs	r2, #0
 80046d2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80046d6:	6878      	ldr	r0, [r7, #4]
 80046d8:	f7fd f9aa 	bl	8001a30 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	2224      	movs	r2, #36	; 0x24
 80046e0:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	681a      	ldr	r2, [r3, #0]
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	f022 0201 	bic.w	r2, r2, #1
 80046f0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80046f2:	6878      	ldr	r0, [r7, #4]
 80046f4:	f000 f8c0 	bl	8004878 <UART_SetConfig>
 80046f8:	4603      	mov	r3, r0
 80046fa:	2b01      	cmp	r3, #1
 80046fc:	d101      	bne.n	8004702 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80046fe:	2301      	movs	r3, #1
 8004700:	e022      	b.n	8004748 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004706:	2b00      	cmp	r3, #0
 8004708:	d002      	beq.n	8004710 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800470a:	6878      	ldr	r0, [r7, #4]
 800470c:	f000 fae0 	bl	8004cd0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	685a      	ldr	r2, [r3, #4]
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800471e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	689a      	ldr	r2, [r3, #8]
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800472e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	681a      	ldr	r2, [r3, #0]
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	f042 0201 	orr.w	r2, r2, #1
 800473e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004740:	6878      	ldr	r0, [r7, #4]
 8004742:	f000 fb67 	bl	8004e14 <UART_CheckIdleState>
 8004746:	4603      	mov	r3, r0
}
 8004748:	4618      	mov	r0, r3
 800474a:	3708      	adds	r7, #8
 800474c:	46bd      	mov	sp, r7
 800474e:	bd80      	pop	{r7, pc}

08004750 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004750:	b580      	push	{r7, lr}
 8004752:	b08a      	sub	sp, #40	; 0x28
 8004754:	af02      	add	r7, sp, #8
 8004756:	60f8      	str	r0, [r7, #12]
 8004758:	60b9      	str	r1, [r7, #8]
 800475a:	603b      	str	r3, [r7, #0]
 800475c:	4613      	mov	r3, r2
 800475e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004764:	2b20      	cmp	r3, #32
 8004766:	f040 8082 	bne.w	800486e <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 800476a:	68bb      	ldr	r3, [r7, #8]
 800476c:	2b00      	cmp	r3, #0
 800476e:	d002      	beq.n	8004776 <HAL_UART_Transmit+0x26>
 8004770:	88fb      	ldrh	r3, [r7, #6]
 8004772:	2b00      	cmp	r3, #0
 8004774:	d101      	bne.n	800477a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8004776:	2301      	movs	r3, #1
 8004778:	e07a      	b.n	8004870 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8004780:	2b01      	cmp	r3, #1
 8004782:	d101      	bne.n	8004788 <HAL_UART_Transmit+0x38>
 8004784:	2302      	movs	r3, #2
 8004786:	e073      	b.n	8004870 <HAL_UART_Transmit+0x120>
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	2201      	movs	r2, #1
 800478c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	2200      	movs	r2, #0
 8004794:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	2221      	movs	r2, #33	; 0x21
 800479c:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800479e:	f7fd faef 	bl	8001d80 <HAL_GetTick>
 80047a2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	88fa      	ldrh	r2, [r7, #6]
 80047a8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	88fa      	ldrh	r2, [r7, #6]
 80047b0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	689b      	ldr	r3, [r3, #8]
 80047b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80047bc:	d108      	bne.n	80047d0 <HAL_UART_Transmit+0x80>
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	691b      	ldr	r3, [r3, #16]
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d104      	bne.n	80047d0 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 80047c6:	2300      	movs	r3, #0
 80047c8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80047ca:	68bb      	ldr	r3, [r7, #8]
 80047cc:	61bb      	str	r3, [r7, #24]
 80047ce:	e003      	b.n	80047d8 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 80047d0:	68bb      	ldr	r3, [r7, #8]
 80047d2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80047d4:	2300      	movs	r3, #0
 80047d6:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	2200      	movs	r2, #0
 80047dc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 80047e0:	e02d      	b.n	800483e <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80047e2:	683b      	ldr	r3, [r7, #0]
 80047e4:	9300      	str	r3, [sp, #0]
 80047e6:	697b      	ldr	r3, [r7, #20]
 80047e8:	2200      	movs	r2, #0
 80047ea:	2180      	movs	r1, #128	; 0x80
 80047ec:	68f8      	ldr	r0, [r7, #12]
 80047ee:	f000 fb5a 	bl	8004ea6 <UART_WaitOnFlagUntilTimeout>
 80047f2:	4603      	mov	r3, r0
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d001      	beq.n	80047fc <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 80047f8:	2303      	movs	r3, #3
 80047fa:	e039      	b.n	8004870 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 80047fc:	69fb      	ldr	r3, [r7, #28]
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d10b      	bne.n	800481a <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004802:	69bb      	ldr	r3, [r7, #24]
 8004804:	881a      	ldrh	r2, [r3, #0]
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800480e:	b292      	uxth	r2, r2
 8004810:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004812:	69bb      	ldr	r3, [r7, #24]
 8004814:	3302      	adds	r3, #2
 8004816:	61bb      	str	r3, [r7, #24]
 8004818:	e008      	b.n	800482c <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800481a:	69fb      	ldr	r3, [r7, #28]
 800481c:	781a      	ldrb	r2, [r3, #0]
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	b292      	uxth	r2, r2
 8004824:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004826:	69fb      	ldr	r3, [r7, #28]
 8004828:	3301      	adds	r3, #1
 800482a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004832:	b29b      	uxth	r3, r3
 8004834:	3b01      	subs	r3, #1
 8004836:	b29a      	uxth	r2, r3
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004844:	b29b      	uxth	r3, r3
 8004846:	2b00      	cmp	r3, #0
 8004848:	d1cb      	bne.n	80047e2 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800484a:	683b      	ldr	r3, [r7, #0]
 800484c:	9300      	str	r3, [sp, #0]
 800484e:	697b      	ldr	r3, [r7, #20]
 8004850:	2200      	movs	r2, #0
 8004852:	2140      	movs	r1, #64	; 0x40
 8004854:	68f8      	ldr	r0, [r7, #12]
 8004856:	f000 fb26 	bl	8004ea6 <UART_WaitOnFlagUntilTimeout>
 800485a:	4603      	mov	r3, r0
 800485c:	2b00      	cmp	r3, #0
 800485e:	d001      	beq.n	8004864 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8004860:	2303      	movs	r3, #3
 8004862:	e005      	b.n	8004870 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	2220      	movs	r2, #32
 8004868:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800486a:	2300      	movs	r3, #0
 800486c:	e000      	b.n	8004870 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 800486e:	2302      	movs	r3, #2
  }
}
 8004870:	4618      	mov	r0, r3
 8004872:	3720      	adds	r7, #32
 8004874:	46bd      	mov	sp, r7
 8004876:	bd80      	pop	{r7, pc}

08004878 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004878:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800487c:	b08a      	sub	sp, #40	; 0x28
 800487e:	af00      	add	r7, sp, #0
 8004880:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004882:	2300      	movs	r3, #0
 8004884:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	689a      	ldr	r2, [r3, #8]
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	691b      	ldr	r3, [r3, #16]
 8004890:	431a      	orrs	r2, r3
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	695b      	ldr	r3, [r3, #20]
 8004896:	431a      	orrs	r2, r3
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	69db      	ldr	r3, [r3, #28]
 800489c:	4313      	orrs	r3, r2
 800489e:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	681a      	ldr	r2, [r3, #0]
 80048a6:	4bb4      	ldr	r3, [pc, #720]	; (8004b78 <UART_SetConfig+0x300>)
 80048a8:	4013      	ands	r3, r2
 80048aa:	68fa      	ldr	r2, [r7, #12]
 80048ac:	6812      	ldr	r2, [r2, #0]
 80048ae:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80048b0:	430b      	orrs	r3, r1
 80048b2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	685b      	ldr	r3, [r3, #4]
 80048ba:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	68da      	ldr	r2, [r3, #12]
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	430a      	orrs	r2, r1
 80048c8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	699b      	ldr	r3, [r3, #24]
 80048ce:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	4aa9      	ldr	r2, [pc, #676]	; (8004b7c <UART_SetConfig+0x304>)
 80048d6:	4293      	cmp	r3, r2
 80048d8:	d004      	beq.n	80048e4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	6a1b      	ldr	r3, [r3, #32]
 80048de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80048e0:	4313      	orrs	r3, r2
 80048e2:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	689b      	ldr	r3, [r3, #8]
 80048ea:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80048f4:	430a      	orrs	r2, r1
 80048f6:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	4aa0      	ldr	r2, [pc, #640]	; (8004b80 <UART_SetConfig+0x308>)
 80048fe:	4293      	cmp	r3, r2
 8004900:	d126      	bne.n	8004950 <UART_SetConfig+0xd8>
 8004902:	4ba0      	ldr	r3, [pc, #640]	; (8004b84 <UART_SetConfig+0x30c>)
 8004904:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004908:	f003 0303 	and.w	r3, r3, #3
 800490c:	2b03      	cmp	r3, #3
 800490e:	d81b      	bhi.n	8004948 <UART_SetConfig+0xd0>
 8004910:	a201      	add	r2, pc, #4	; (adr r2, 8004918 <UART_SetConfig+0xa0>)
 8004912:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004916:	bf00      	nop
 8004918:	08004929 	.word	0x08004929
 800491c:	08004939 	.word	0x08004939
 8004920:	08004931 	.word	0x08004931
 8004924:	08004941 	.word	0x08004941
 8004928:	2301      	movs	r3, #1
 800492a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800492e:	e080      	b.n	8004a32 <UART_SetConfig+0x1ba>
 8004930:	2302      	movs	r3, #2
 8004932:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004936:	e07c      	b.n	8004a32 <UART_SetConfig+0x1ba>
 8004938:	2304      	movs	r3, #4
 800493a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800493e:	e078      	b.n	8004a32 <UART_SetConfig+0x1ba>
 8004940:	2308      	movs	r3, #8
 8004942:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004946:	e074      	b.n	8004a32 <UART_SetConfig+0x1ba>
 8004948:	2310      	movs	r3, #16
 800494a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800494e:	e070      	b.n	8004a32 <UART_SetConfig+0x1ba>
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	4a8c      	ldr	r2, [pc, #560]	; (8004b88 <UART_SetConfig+0x310>)
 8004956:	4293      	cmp	r3, r2
 8004958:	d138      	bne.n	80049cc <UART_SetConfig+0x154>
 800495a:	4b8a      	ldr	r3, [pc, #552]	; (8004b84 <UART_SetConfig+0x30c>)
 800495c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004960:	f003 030c 	and.w	r3, r3, #12
 8004964:	2b0c      	cmp	r3, #12
 8004966:	d82d      	bhi.n	80049c4 <UART_SetConfig+0x14c>
 8004968:	a201      	add	r2, pc, #4	; (adr r2, 8004970 <UART_SetConfig+0xf8>)
 800496a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800496e:	bf00      	nop
 8004970:	080049a5 	.word	0x080049a5
 8004974:	080049c5 	.word	0x080049c5
 8004978:	080049c5 	.word	0x080049c5
 800497c:	080049c5 	.word	0x080049c5
 8004980:	080049b5 	.word	0x080049b5
 8004984:	080049c5 	.word	0x080049c5
 8004988:	080049c5 	.word	0x080049c5
 800498c:	080049c5 	.word	0x080049c5
 8004990:	080049ad 	.word	0x080049ad
 8004994:	080049c5 	.word	0x080049c5
 8004998:	080049c5 	.word	0x080049c5
 800499c:	080049c5 	.word	0x080049c5
 80049a0:	080049bd 	.word	0x080049bd
 80049a4:	2300      	movs	r3, #0
 80049a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80049aa:	e042      	b.n	8004a32 <UART_SetConfig+0x1ba>
 80049ac:	2302      	movs	r3, #2
 80049ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80049b2:	e03e      	b.n	8004a32 <UART_SetConfig+0x1ba>
 80049b4:	2304      	movs	r3, #4
 80049b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80049ba:	e03a      	b.n	8004a32 <UART_SetConfig+0x1ba>
 80049bc:	2308      	movs	r3, #8
 80049be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80049c2:	e036      	b.n	8004a32 <UART_SetConfig+0x1ba>
 80049c4:	2310      	movs	r3, #16
 80049c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80049ca:	e032      	b.n	8004a32 <UART_SetConfig+0x1ba>
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	4a6a      	ldr	r2, [pc, #424]	; (8004b7c <UART_SetConfig+0x304>)
 80049d2:	4293      	cmp	r3, r2
 80049d4:	d12a      	bne.n	8004a2c <UART_SetConfig+0x1b4>
 80049d6:	4b6b      	ldr	r3, [pc, #428]	; (8004b84 <UART_SetConfig+0x30c>)
 80049d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049dc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80049e0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80049e4:	d01a      	beq.n	8004a1c <UART_SetConfig+0x1a4>
 80049e6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80049ea:	d81b      	bhi.n	8004a24 <UART_SetConfig+0x1ac>
 80049ec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80049f0:	d00c      	beq.n	8004a0c <UART_SetConfig+0x194>
 80049f2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80049f6:	d815      	bhi.n	8004a24 <UART_SetConfig+0x1ac>
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d003      	beq.n	8004a04 <UART_SetConfig+0x18c>
 80049fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a00:	d008      	beq.n	8004a14 <UART_SetConfig+0x19c>
 8004a02:	e00f      	b.n	8004a24 <UART_SetConfig+0x1ac>
 8004a04:	2300      	movs	r3, #0
 8004a06:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004a0a:	e012      	b.n	8004a32 <UART_SetConfig+0x1ba>
 8004a0c:	2302      	movs	r3, #2
 8004a0e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004a12:	e00e      	b.n	8004a32 <UART_SetConfig+0x1ba>
 8004a14:	2304      	movs	r3, #4
 8004a16:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004a1a:	e00a      	b.n	8004a32 <UART_SetConfig+0x1ba>
 8004a1c:	2308      	movs	r3, #8
 8004a1e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004a22:	e006      	b.n	8004a32 <UART_SetConfig+0x1ba>
 8004a24:	2310      	movs	r3, #16
 8004a26:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004a2a:	e002      	b.n	8004a32 <UART_SetConfig+0x1ba>
 8004a2c:	2310      	movs	r3, #16
 8004a2e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	4a51      	ldr	r2, [pc, #324]	; (8004b7c <UART_SetConfig+0x304>)
 8004a38:	4293      	cmp	r3, r2
 8004a3a:	d17a      	bne.n	8004b32 <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004a3c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004a40:	2b08      	cmp	r3, #8
 8004a42:	d824      	bhi.n	8004a8e <UART_SetConfig+0x216>
 8004a44:	a201      	add	r2, pc, #4	; (adr r2, 8004a4c <UART_SetConfig+0x1d4>)
 8004a46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a4a:	bf00      	nop
 8004a4c:	08004a71 	.word	0x08004a71
 8004a50:	08004a8f 	.word	0x08004a8f
 8004a54:	08004a79 	.word	0x08004a79
 8004a58:	08004a8f 	.word	0x08004a8f
 8004a5c:	08004a7f 	.word	0x08004a7f
 8004a60:	08004a8f 	.word	0x08004a8f
 8004a64:	08004a8f 	.word	0x08004a8f
 8004a68:	08004a8f 	.word	0x08004a8f
 8004a6c:	08004a87 	.word	0x08004a87
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004a70:	f7fe ffea 	bl	8003a48 <HAL_RCC_GetPCLK1Freq>
 8004a74:	61f8      	str	r0, [r7, #28]
        break;
 8004a76:	e010      	b.n	8004a9a <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004a78:	4b44      	ldr	r3, [pc, #272]	; (8004b8c <UART_SetConfig+0x314>)
 8004a7a:	61fb      	str	r3, [r7, #28]
        break;
 8004a7c:	e00d      	b.n	8004a9a <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004a7e:	f7fe ff4b 	bl	8003918 <HAL_RCC_GetSysClockFreq>
 8004a82:	61f8      	str	r0, [r7, #28]
        break;
 8004a84:	e009      	b.n	8004a9a <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004a86:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004a8a:	61fb      	str	r3, [r7, #28]
        break;
 8004a8c:	e005      	b.n	8004a9a <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 8004a8e:	2300      	movs	r3, #0
 8004a90:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004a92:	2301      	movs	r3, #1
 8004a94:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004a98:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004a9a:	69fb      	ldr	r3, [r7, #28]
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	f000 8107 	beq.w	8004cb0 <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	685a      	ldr	r2, [r3, #4]
 8004aa6:	4613      	mov	r3, r2
 8004aa8:	005b      	lsls	r3, r3, #1
 8004aaa:	4413      	add	r3, r2
 8004aac:	69fa      	ldr	r2, [r7, #28]
 8004aae:	429a      	cmp	r2, r3
 8004ab0:	d305      	bcc.n	8004abe <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	685b      	ldr	r3, [r3, #4]
 8004ab6:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004ab8:	69fa      	ldr	r2, [r7, #28]
 8004aba:	429a      	cmp	r2, r3
 8004abc:	d903      	bls.n	8004ac6 <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 8004abe:	2301      	movs	r3, #1
 8004ac0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004ac4:	e0f4      	b.n	8004cb0 <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004ac6:	69fb      	ldr	r3, [r7, #28]
 8004ac8:	2200      	movs	r2, #0
 8004aca:	461c      	mov	r4, r3
 8004acc:	4615      	mov	r5, r2
 8004ace:	f04f 0200 	mov.w	r2, #0
 8004ad2:	f04f 0300 	mov.w	r3, #0
 8004ad6:	022b      	lsls	r3, r5, #8
 8004ad8:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8004adc:	0222      	lsls	r2, r4, #8
 8004ade:	68f9      	ldr	r1, [r7, #12]
 8004ae0:	6849      	ldr	r1, [r1, #4]
 8004ae2:	0849      	lsrs	r1, r1, #1
 8004ae4:	2000      	movs	r0, #0
 8004ae6:	4688      	mov	r8, r1
 8004ae8:	4681      	mov	r9, r0
 8004aea:	eb12 0a08 	adds.w	sl, r2, r8
 8004aee:	eb43 0b09 	adc.w	fp, r3, r9
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	685b      	ldr	r3, [r3, #4]
 8004af6:	2200      	movs	r2, #0
 8004af8:	603b      	str	r3, [r7, #0]
 8004afa:	607a      	str	r2, [r7, #4]
 8004afc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004b00:	4650      	mov	r0, sl
 8004b02:	4659      	mov	r1, fp
 8004b04:	f7fb fbbc 	bl	8000280 <__aeabi_uldivmod>
 8004b08:	4602      	mov	r2, r0
 8004b0a:	460b      	mov	r3, r1
 8004b0c:	4613      	mov	r3, r2
 8004b0e:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004b10:	69bb      	ldr	r3, [r7, #24]
 8004b12:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004b16:	d308      	bcc.n	8004b2a <UART_SetConfig+0x2b2>
 8004b18:	69bb      	ldr	r3, [r7, #24]
 8004b1a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004b1e:	d204      	bcs.n	8004b2a <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	69ba      	ldr	r2, [r7, #24]
 8004b26:	60da      	str	r2, [r3, #12]
 8004b28:	e0c2      	b.n	8004cb0 <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 8004b2a:	2301      	movs	r3, #1
 8004b2c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004b30:	e0be      	b.n	8004cb0 <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	69db      	ldr	r3, [r3, #28]
 8004b36:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004b3a:	d16a      	bne.n	8004c12 <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 8004b3c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004b40:	2b08      	cmp	r3, #8
 8004b42:	d834      	bhi.n	8004bae <UART_SetConfig+0x336>
 8004b44:	a201      	add	r2, pc, #4	; (adr r2, 8004b4c <UART_SetConfig+0x2d4>)
 8004b46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b4a:	bf00      	nop
 8004b4c:	08004b71 	.word	0x08004b71
 8004b50:	08004b91 	.word	0x08004b91
 8004b54:	08004b99 	.word	0x08004b99
 8004b58:	08004baf 	.word	0x08004baf
 8004b5c:	08004b9f 	.word	0x08004b9f
 8004b60:	08004baf 	.word	0x08004baf
 8004b64:	08004baf 	.word	0x08004baf
 8004b68:	08004baf 	.word	0x08004baf
 8004b6c:	08004ba7 	.word	0x08004ba7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004b70:	f7fe ff6a 	bl	8003a48 <HAL_RCC_GetPCLK1Freq>
 8004b74:	61f8      	str	r0, [r7, #28]
        break;
 8004b76:	e020      	b.n	8004bba <UART_SetConfig+0x342>
 8004b78:	efff69f3 	.word	0xefff69f3
 8004b7c:	40008000 	.word	0x40008000
 8004b80:	40013800 	.word	0x40013800
 8004b84:	40021000 	.word	0x40021000
 8004b88:	40004400 	.word	0x40004400
 8004b8c:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004b90:	f7fe ff70 	bl	8003a74 <HAL_RCC_GetPCLK2Freq>
 8004b94:	61f8      	str	r0, [r7, #28]
        break;
 8004b96:	e010      	b.n	8004bba <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004b98:	4b4c      	ldr	r3, [pc, #304]	; (8004ccc <UART_SetConfig+0x454>)
 8004b9a:	61fb      	str	r3, [r7, #28]
        break;
 8004b9c:	e00d      	b.n	8004bba <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004b9e:	f7fe febb 	bl	8003918 <HAL_RCC_GetSysClockFreq>
 8004ba2:	61f8      	str	r0, [r7, #28]
        break;
 8004ba4:	e009      	b.n	8004bba <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004ba6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004baa:	61fb      	str	r3, [r7, #28]
        break;
 8004bac:	e005      	b.n	8004bba <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 8004bae:	2300      	movs	r3, #0
 8004bb0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004bb2:	2301      	movs	r3, #1
 8004bb4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004bb8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004bba:	69fb      	ldr	r3, [r7, #28]
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d077      	beq.n	8004cb0 <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004bc0:	69fb      	ldr	r3, [r7, #28]
 8004bc2:	005a      	lsls	r2, r3, #1
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	685b      	ldr	r3, [r3, #4]
 8004bc8:	085b      	lsrs	r3, r3, #1
 8004bca:	441a      	add	r2, r3
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	685b      	ldr	r3, [r3, #4]
 8004bd0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bd4:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004bd6:	69bb      	ldr	r3, [r7, #24]
 8004bd8:	2b0f      	cmp	r3, #15
 8004bda:	d916      	bls.n	8004c0a <UART_SetConfig+0x392>
 8004bdc:	69bb      	ldr	r3, [r7, #24]
 8004bde:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004be2:	d212      	bcs.n	8004c0a <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004be4:	69bb      	ldr	r3, [r7, #24]
 8004be6:	b29b      	uxth	r3, r3
 8004be8:	f023 030f 	bic.w	r3, r3, #15
 8004bec:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004bee:	69bb      	ldr	r3, [r7, #24]
 8004bf0:	085b      	lsrs	r3, r3, #1
 8004bf2:	b29b      	uxth	r3, r3
 8004bf4:	f003 0307 	and.w	r3, r3, #7
 8004bf8:	b29a      	uxth	r2, r3
 8004bfa:	8afb      	ldrh	r3, [r7, #22]
 8004bfc:	4313      	orrs	r3, r2
 8004bfe:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	8afa      	ldrh	r2, [r7, #22]
 8004c06:	60da      	str	r2, [r3, #12]
 8004c08:	e052      	b.n	8004cb0 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8004c0a:	2301      	movs	r3, #1
 8004c0c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004c10:	e04e      	b.n	8004cb0 <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004c12:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004c16:	2b08      	cmp	r3, #8
 8004c18:	d827      	bhi.n	8004c6a <UART_SetConfig+0x3f2>
 8004c1a:	a201      	add	r2, pc, #4	; (adr r2, 8004c20 <UART_SetConfig+0x3a8>)
 8004c1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c20:	08004c45 	.word	0x08004c45
 8004c24:	08004c4d 	.word	0x08004c4d
 8004c28:	08004c55 	.word	0x08004c55
 8004c2c:	08004c6b 	.word	0x08004c6b
 8004c30:	08004c5b 	.word	0x08004c5b
 8004c34:	08004c6b 	.word	0x08004c6b
 8004c38:	08004c6b 	.word	0x08004c6b
 8004c3c:	08004c6b 	.word	0x08004c6b
 8004c40:	08004c63 	.word	0x08004c63
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004c44:	f7fe ff00 	bl	8003a48 <HAL_RCC_GetPCLK1Freq>
 8004c48:	61f8      	str	r0, [r7, #28]
        break;
 8004c4a:	e014      	b.n	8004c76 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004c4c:	f7fe ff12 	bl	8003a74 <HAL_RCC_GetPCLK2Freq>
 8004c50:	61f8      	str	r0, [r7, #28]
        break;
 8004c52:	e010      	b.n	8004c76 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004c54:	4b1d      	ldr	r3, [pc, #116]	; (8004ccc <UART_SetConfig+0x454>)
 8004c56:	61fb      	str	r3, [r7, #28]
        break;
 8004c58:	e00d      	b.n	8004c76 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004c5a:	f7fe fe5d 	bl	8003918 <HAL_RCC_GetSysClockFreq>
 8004c5e:	61f8      	str	r0, [r7, #28]
        break;
 8004c60:	e009      	b.n	8004c76 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004c62:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004c66:	61fb      	str	r3, [r7, #28]
        break;
 8004c68:	e005      	b.n	8004c76 <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 8004c6a:	2300      	movs	r3, #0
 8004c6c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004c6e:	2301      	movs	r3, #1
 8004c70:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004c74:	bf00      	nop
    }

    if (pclk != 0U)
 8004c76:	69fb      	ldr	r3, [r7, #28]
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d019      	beq.n	8004cb0 <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	685b      	ldr	r3, [r3, #4]
 8004c80:	085a      	lsrs	r2, r3, #1
 8004c82:	69fb      	ldr	r3, [r7, #28]
 8004c84:	441a      	add	r2, r3
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	685b      	ldr	r3, [r3, #4]
 8004c8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c8e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004c90:	69bb      	ldr	r3, [r7, #24]
 8004c92:	2b0f      	cmp	r3, #15
 8004c94:	d909      	bls.n	8004caa <UART_SetConfig+0x432>
 8004c96:	69bb      	ldr	r3, [r7, #24]
 8004c98:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c9c:	d205      	bcs.n	8004caa <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004c9e:	69bb      	ldr	r3, [r7, #24]
 8004ca0:	b29a      	uxth	r2, r3
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	60da      	str	r2, [r3, #12]
 8004ca8:	e002      	b.n	8004cb0 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8004caa:	2301      	movs	r3, #1
 8004cac:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	2200      	movs	r2, #0
 8004cb4:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	2200      	movs	r2, #0
 8004cba:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004cbc:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8004cc0:	4618      	mov	r0, r3
 8004cc2:	3728      	adds	r7, #40	; 0x28
 8004cc4:	46bd      	mov	sp, r7
 8004cc6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004cca:	bf00      	nop
 8004ccc:	00f42400 	.word	0x00f42400

08004cd0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004cd0:	b480      	push	{r7}
 8004cd2:	b083      	sub	sp, #12
 8004cd4:	af00      	add	r7, sp, #0
 8004cd6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cdc:	f003 0301 	and.w	r3, r3, #1
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d00a      	beq.n	8004cfa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	685b      	ldr	r3, [r3, #4]
 8004cea:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	430a      	orrs	r2, r1
 8004cf8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cfe:	f003 0302 	and.w	r3, r3, #2
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d00a      	beq.n	8004d1c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	685b      	ldr	r3, [r3, #4]
 8004d0c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	430a      	orrs	r2, r1
 8004d1a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d20:	f003 0304 	and.w	r3, r3, #4
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d00a      	beq.n	8004d3e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	685b      	ldr	r3, [r3, #4]
 8004d2e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	430a      	orrs	r2, r1
 8004d3c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d42:	f003 0308 	and.w	r3, r3, #8
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d00a      	beq.n	8004d60 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	685b      	ldr	r3, [r3, #4]
 8004d50:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	430a      	orrs	r2, r1
 8004d5e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d64:	f003 0310 	and.w	r3, r3, #16
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d00a      	beq.n	8004d82 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	689b      	ldr	r3, [r3, #8]
 8004d72:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	430a      	orrs	r2, r1
 8004d80:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d86:	f003 0320 	and.w	r3, r3, #32
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d00a      	beq.n	8004da4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	689b      	ldr	r3, [r3, #8]
 8004d94:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	430a      	orrs	r2, r1
 8004da2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004da8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d01a      	beq.n	8004de6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	685b      	ldr	r3, [r3, #4]
 8004db6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	430a      	orrs	r2, r1
 8004dc4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004dce:	d10a      	bne.n	8004de6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	685b      	ldr	r3, [r3, #4]
 8004dd6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	430a      	orrs	r2, r1
 8004de4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d00a      	beq.n	8004e08 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	685b      	ldr	r3, [r3, #4]
 8004df8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	430a      	orrs	r2, r1
 8004e06:	605a      	str	r2, [r3, #4]
  }
}
 8004e08:	bf00      	nop
 8004e0a:	370c      	adds	r7, #12
 8004e0c:	46bd      	mov	sp, r7
 8004e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e12:	4770      	bx	lr

08004e14 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004e14:	b580      	push	{r7, lr}
 8004e16:	b086      	sub	sp, #24
 8004e18:	af02      	add	r7, sp, #8
 8004e1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	2200      	movs	r2, #0
 8004e20:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004e24:	f7fc ffac 	bl	8001d80 <HAL_GetTick>
 8004e28:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	f003 0308 	and.w	r3, r3, #8
 8004e34:	2b08      	cmp	r3, #8
 8004e36:	d10e      	bne.n	8004e56 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004e38:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004e3c:	9300      	str	r3, [sp, #0]
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	2200      	movs	r2, #0
 8004e42:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004e46:	6878      	ldr	r0, [r7, #4]
 8004e48:	f000 f82d 	bl	8004ea6 <UART_WaitOnFlagUntilTimeout>
 8004e4c:	4603      	mov	r3, r0
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d001      	beq.n	8004e56 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004e52:	2303      	movs	r3, #3
 8004e54:	e023      	b.n	8004e9e <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	f003 0304 	and.w	r3, r3, #4
 8004e60:	2b04      	cmp	r3, #4
 8004e62:	d10e      	bne.n	8004e82 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004e64:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004e68:	9300      	str	r3, [sp, #0]
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	2200      	movs	r2, #0
 8004e6e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004e72:	6878      	ldr	r0, [r7, #4]
 8004e74:	f000 f817 	bl	8004ea6 <UART_WaitOnFlagUntilTimeout>
 8004e78:	4603      	mov	r3, r0
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d001      	beq.n	8004e82 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004e7e:	2303      	movs	r3, #3
 8004e80:	e00d      	b.n	8004e9e <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	2220      	movs	r2, #32
 8004e86:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	2220      	movs	r2, #32
 8004e8c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	2200      	movs	r2, #0
 8004e92:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	2200      	movs	r2, #0
 8004e98:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8004e9c:	2300      	movs	r3, #0
}
 8004e9e:	4618      	mov	r0, r3
 8004ea0:	3710      	adds	r7, #16
 8004ea2:	46bd      	mov	sp, r7
 8004ea4:	bd80      	pop	{r7, pc}

08004ea6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004ea6:	b580      	push	{r7, lr}
 8004ea8:	b09c      	sub	sp, #112	; 0x70
 8004eaa:	af00      	add	r7, sp, #0
 8004eac:	60f8      	str	r0, [r7, #12]
 8004eae:	60b9      	str	r1, [r7, #8]
 8004eb0:	603b      	str	r3, [r7, #0]
 8004eb2:	4613      	mov	r3, r2
 8004eb4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004eb6:	e0a5      	b.n	8005004 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004eb8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004eba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ebe:	f000 80a1 	beq.w	8005004 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ec2:	f7fc ff5d 	bl	8001d80 <HAL_GetTick>
 8004ec6:	4602      	mov	r2, r0
 8004ec8:	683b      	ldr	r3, [r7, #0]
 8004eca:	1ad3      	subs	r3, r2, r3
 8004ecc:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004ece:	429a      	cmp	r2, r3
 8004ed0:	d302      	bcc.n	8004ed8 <UART_WaitOnFlagUntilTimeout+0x32>
 8004ed2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d13e      	bne.n	8004f56 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ede:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004ee0:	e853 3f00 	ldrex	r3, [r3]
 8004ee4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004ee6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004ee8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004eec:	667b      	str	r3, [r7, #100]	; 0x64
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	461a      	mov	r2, r3
 8004ef4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004ef6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004ef8:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004efa:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004efc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004efe:	e841 2300 	strex	r3, r2, [r1]
 8004f02:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004f04:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d1e6      	bne.n	8004ed8 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	3308      	adds	r3, #8
 8004f10:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f12:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004f14:	e853 3f00 	ldrex	r3, [r3]
 8004f18:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004f1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f1c:	f023 0301 	bic.w	r3, r3, #1
 8004f20:	663b      	str	r3, [r7, #96]	; 0x60
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	3308      	adds	r3, #8
 8004f28:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004f2a:	64ba      	str	r2, [r7, #72]	; 0x48
 8004f2c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f2e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004f30:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004f32:	e841 2300 	strex	r3, r2, [r1]
 8004f36:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004f38:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d1e5      	bne.n	8004f0a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	2220      	movs	r2, #32
 8004f42:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	2220      	movs	r2, #32
 8004f48:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	2200      	movs	r2, #0
 8004f4e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8004f52:	2303      	movs	r3, #3
 8004f54:	e067      	b.n	8005026 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	f003 0304 	and.w	r3, r3, #4
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d04f      	beq.n	8005004 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	69db      	ldr	r3, [r3, #28]
 8004f6a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004f6e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004f72:	d147      	bne.n	8005004 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004f7c:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f86:	e853 3f00 	ldrex	r3, [r3]
 8004f8a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004f8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f8e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004f92:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	461a      	mov	r2, r3
 8004f9a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f9c:	637b      	str	r3, [r7, #52]	; 0x34
 8004f9e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fa0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004fa2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004fa4:	e841 2300 	strex	r3, r2, [r1]
 8004fa8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004faa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d1e6      	bne.n	8004f7e <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	3308      	adds	r3, #8
 8004fb6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fb8:	697b      	ldr	r3, [r7, #20]
 8004fba:	e853 3f00 	ldrex	r3, [r3]
 8004fbe:	613b      	str	r3, [r7, #16]
   return(result);
 8004fc0:	693b      	ldr	r3, [r7, #16]
 8004fc2:	f023 0301 	bic.w	r3, r3, #1
 8004fc6:	66bb      	str	r3, [r7, #104]	; 0x68
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	3308      	adds	r3, #8
 8004fce:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004fd0:	623a      	str	r2, [r7, #32]
 8004fd2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fd4:	69f9      	ldr	r1, [r7, #28]
 8004fd6:	6a3a      	ldr	r2, [r7, #32]
 8004fd8:	e841 2300 	strex	r3, r2, [r1]
 8004fdc:	61bb      	str	r3, [r7, #24]
   return(result);
 8004fde:	69bb      	ldr	r3, [r7, #24]
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d1e5      	bne.n	8004fb0 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	2220      	movs	r2, #32
 8004fe8:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	2220      	movs	r2, #32
 8004fee:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	2220      	movs	r2, #32
 8004ff4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	2200      	movs	r2, #0
 8004ffc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8005000:	2303      	movs	r3, #3
 8005002:	e010      	b.n	8005026 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	69da      	ldr	r2, [r3, #28]
 800500a:	68bb      	ldr	r3, [r7, #8]
 800500c:	4013      	ands	r3, r2
 800500e:	68ba      	ldr	r2, [r7, #8]
 8005010:	429a      	cmp	r2, r3
 8005012:	bf0c      	ite	eq
 8005014:	2301      	moveq	r3, #1
 8005016:	2300      	movne	r3, #0
 8005018:	b2db      	uxtb	r3, r3
 800501a:	461a      	mov	r2, r3
 800501c:	79fb      	ldrb	r3, [r7, #7]
 800501e:	429a      	cmp	r2, r3
 8005020:	f43f af4a 	beq.w	8004eb8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005024:	2300      	movs	r3, #0
}
 8005026:	4618      	mov	r0, r3
 8005028:	3770      	adds	r7, #112	; 0x70
 800502a:	46bd      	mov	sp, r7
 800502c:	bd80      	pop	{r7, pc}
	...

08005030 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8005030:	b580      	push	{r7, lr}
 8005032:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8005034:	4b05      	ldr	r3, [pc, #20]	; (800504c <SysTick_Handler+0x1c>)
 8005036:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8005038:	f001 fb44 	bl	80066c4 <xTaskGetSchedulerState>
 800503c:	4603      	mov	r3, r0
 800503e:	2b01      	cmp	r3, #1
 8005040:	d001      	beq.n	8005046 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8005042:	f001 fe99 	bl	8006d78 <xPortSysTickHandler>
  }
}
 8005046:	bf00      	nop
 8005048:	bd80      	pop	{r7, pc}
 800504a:	bf00      	nop
 800504c:	e000e010 	.word	0xe000e010

08005050 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8005050:	b480      	push	{r7}
 8005052:	b083      	sub	sp, #12
 8005054:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005056:	f3ef 8305 	mrs	r3, IPSR
 800505a:	603b      	str	r3, [r7, #0]
  return(result);
 800505c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800505e:	2b00      	cmp	r3, #0
 8005060:	d003      	beq.n	800506a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8005062:	f06f 0305 	mvn.w	r3, #5
 8005066:	607b      	str	r3, [r7, #4]
 8005068:	e00c      	b.n	8005084 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800506a:	4b0a      	ldr	r3, [pc, #40]	; (8005094 <osKernelInitialize+0x44>)
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	2b00      	cmp	r3, #0
 8005070:	d105      	bne.n	800507e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8005072:	4b08      	ldr	r3, [pc, #32]	; (8005094 <osKernelInitialize+0x44>)
 8005074:	2201      	movs	r2, #1
 8005076:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8005078:	2300      	movs	r3, #0
 800507a:	607b      	str	r3, [r7, #4]
 800507c:	e002      	b.n	8005084 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800507e:	f04f 33ff 	mov.w	r3, #4294967295
 8005082:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005084:	687b      	ldr	r3, [r7, #4]
}
 8005086:	4618      	mov	r0, r3
 8005088:	370c      	adds	r7, #12
 800508a:	46bd      	mov	sp, r7
 800508c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005090:	4770      	bx	lr
 8005092:	bf00      	nop
 8005094:	20001184 	.word	0x20001184

08005098 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8005098:	b580      	push	{r7, lr}
 800509a:	b08e      	sub	sp, #56	; 0x38
 800509c:	af04      	add	r7, sp, #16
 800509e:	60f8      	str	r0, [r7, #12]
 80050a0:	60b9      	str	r1, [r7, #8]
 80050a2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80050a4:	2300      	movs	r3, #0
 80050a6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80050a8:	f3ef 8305 	mrs	r3, IPSR
 80050ac:	617b      	str	r3, [r7, #20]
  return(result);
 80050ae:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d17e      	bne.n	80051b2 <osThreadNew+0x11a>
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d07b      	beq.n	80051b2 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80050ba:	2380      	movs	r3, #128	; 0x80
 80050bc:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80050be:	2318      	movs	r3, #24
 80050c0:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80050c2:	2300      	movs	r3, #0
 80050c4:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 80050c6:	f04f 33ff 	mov.w	r3, #4294967295
 80050ca:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d045      	beq.n	800515e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d002      	beq.n	80050e0 <osThreadNew+0x48>
        name = attr->name;
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	699b      	ldr	r3, [r3, #24]
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d002      	beq.n	80050ee <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	699b      	ldr	r3, [r3, #24]
 80050ec:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80050ee:	69fb      	ldr	r3, [r7, #28]
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d008      	beq.n	8005106 <osThreadNew+0x6e>
 80050f4:	69fb      	ldr	r3, [r7, #28]
 80050f6:	2b38      	cmp	r3, #56	; 0x38
 80050f8:	d805      	bhi.n	8005106 <osThreadNew+0x6e>
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	685b      	ldr	r3, [r3, #4]
 80050fe:	f003 0301 	and.w	r3, r3, #1
 8005102:	2b00      	cmp	r3, #0
 8005104:	d001      	beq.n	800510a <osThreadNew+0x72>
        return (NULL);
 8005106:	2300      	movs	r3, #0
 8005108:	e054      	b.n	80051b4 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	695b      	ldr	r3, [r3, #20]
 800510e:	2b00      	cmp	r3, #0
 8005110:	d003      	beq.n	800511a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	695b      	ldr	r3, [r3, #20]
 8005116:	089b      	lsrs	r3, r3, #2
 8005118:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	689b      	ldr	r3, [r3, #8]
 800511e:	2b00      	cmp	r3, #0
 8005120:	d00e      	beq.n	8005140 <osThreadNew+0xa8>
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	68db      	ldr	r3, [r3, #12]
 8005126:	2bbb      	cmp	r3, #187	; 0xbb
 8005128:	d90a      	bls.n	8005140 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800512e:	2b00      	cmp	r3, #0
 8005130:	d006      	beq.n	8005140 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	695b      	ldr	r3, [r3, #20]
 8005136:	2b00      	cmp	r3, #0
 8005138:	d002      	beq.n	8005140 <osThreadNew+0xa8>
        mem = 1;
 800513a:	2301      	movs	r3, #1
 800513c:	61bb      	str	r3, [r7, #24]
 800513e:	e010      	b.n	8005162 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	689b      	ldr	r3, [r3, #8]
 8005144:	2b00      	cmp	r3, #0
 8005146:	d10c      	bne.n	8005162 <osThreadNew+0xca>
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	68db      	ldr	r3, [r3, #12]
 800514c:	2b00      	cmp	r3, #0
 800514e:	d108      	bne.n	8005162 <osThreadNew+0xca>
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	691b      	ldr	r3, [r3, #16]
 8005154:	2b00      	cmp	r3, #0
 8005156:	d104      	bne.n	8005162 <osThreadNew+0xca>
          mem = 0;
 8005158:	2300      	movs	r3, #0
 800515a:	61bb      	str	r3, [r7, #24]
 800515c:	e001      	b.n	8005162 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800515e:	2300      	movs	r3, #0
 8005160:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8005162:	69bb      	ldr	r3, [r7, #24]
 8005164:	2b01      	cmp	r3, #1
 8005166:	d110      	bne.n	800518a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800516c:	687a      	ldr	r2, [r7, #4]
 800516e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005170:	9202      	str	r2, [sp, #8]
 8005172:	9301      	str	r3, [sp, #4]
 8005174:	69fb      	ldr	r3, [r7, #28]
 8005176:	9300      	str	r3, [sp, #0]
 8005178:	68bb      	ldr	r3, [r7, #8]
 800517a:	6a3a      	ldr	r2, [r7, #32]
 800517c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800517e:	68f8      	ldr	r0, [r7, #12]
 8005180:	f000 fd7e 	bl	8005c80 <xTaskCreateStatic>
 8005184:	4603      	mov	r3, r0
 8005186:	613b      	str	r3, [r7, #16]
 8005188:	e013      	b.n	80051b2 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800518a:	69bb      	ldr	r3, [r7, #24]
 800518c:	2b00      	cmp	r3, #0
 800518e:	d110      	bne.n	80051b2 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8005190:	6a3b      	ldr	r3, [r7, #32]
 8005192:	b29a      	uxth	r2, r3
 8005194:	f107 0310 	add.w	r3, r7, #16
 8005198:	9301      	str	r3, [sp, #4]
 800519a:	69fb      	ldr	r3, [r7, #28]
 800519c:	9300      	str	r3, [sp, #0]
 800519e:	68bb      	ldr	r3, [r7, #8]
 80051a0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80051a2:	68f8      	ldr	r0, [r7, #12]
 80051a4:	f000 fdc9 	bl	8005d3a <xTaskCreate>
 80051a8:	4603      	mov	r3, r0
 80051aa:	2b01      	cmp	r3, #1
 80051ac:	d001      	beq.n	80051b2 <osThreadNew+0x11a>
            hTask = NULL;
 80051ae:	2300      	movs	r3, #0
 80051b0:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80051b2:	693b      	ldr	r3, [r7, #16]
}
 80051b4:	4618      	mov	r0, r3
 80051b6:	3728      	adds	r7, #40	; 0x28
 80051b8:	46bd      	mov	sp, r7
 80051ba:	bd80      	pop	{r7, pc}

080051bc <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80051bc:	b580      	push	{r7, lr}
 80051be:	b084      	sub	sp, #16
 80051c0:	af00      	add	r7, sp, #0
 80051c2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80051c4:	f3ef 8305 	mrs	r3, IPSR
 80051c8:	60bb      	str	r3, [r7, #8]
  return(result);
 80051ca:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d003      	beq.n	80051d8 <osDelay+0x1c>
    stat = osErrorISR;
 80051d0:	f06f 0305 	mvn.w	r3, #5
 80051d4:	60fb      	str	r3, [r7, #12]
 80051d6:	e007      	b.n	80051e8 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80051d8:	2300      	movs	r3, #0
 80051da:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d002      	beq.n	80051e8 <osDelay+0x2c>
      vTaskDelay(ticks);
 80051e2:	6878      	ldr	r0, [r7, #4]
 80051e4:	f000 ff04 	bl	8005ff0 <vTaskDelay>
    }
  }

  return (stat);
 80051e8:	68fb      	ldr	r3, [r7, #12]
}
 80051ea:	4618      	mov	r0, r3
 80051ec:	3710      	adds	r7, #16
 80051ee:	46bd      	mov	sp, r7
 80051f0:	bd80      	pop	{r7, pc}

080051f2 <TimerCallback>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_TIMER == 1)

static void TimerCallback (TimerHandle_t hTimer) {
 80051f2:	b580      	push	{r7, lr}
 80051f4:	b084      	sub	sp, #16
 80051f6:	af00      	add	r7, sp, #0
 80051f8:	6078      	str	r0, [r7, #4]
  TimerCallback_t *callb;

  callb = (TimerCallback_t *)pvTimerGetTimerID (hTimer);
 80051fa:	6878      	ldr	r0, [r7, #4]
 80051fc:	f001 fc93 	bl	8006b26 <pvTimerGetTimerID>
 8005200:	60f8      	str	r0, [r7, #12]

  if (callb != NULL) {
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	2b00      	cmp	r3, #0
 8005206:	d005      	beq.n	8005214 <TimerCallback+0x22>
    callb->func (callb->arg);
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	68fa      	ldr	r2, [r7, #12]
 800520e:	6852      	ldr	r2, [r2, #4]
 8005210:	4610      	mov	r0, r2
 8005212:	4798      	blx	r3
  }
}
 8005214:	bf00      	nop
 8005216:	3710      	adds	r7, #16
 8005218:	46bd      	mov	sp, r7
 800521a:	bd80      	pop	{r7, pc}

0800521c <osTimerNew>:

osTimerId_t osTimerNew (osTimerFunc_t func, osTimerType_t type, void *argument, const osTimerAttr_t *attr) {
 800521c:	b580      	push	{r7, lr}
 800521e:	b08c      	sub	sp, #48	; 0x30
 8005220:	af02      	add	r7, sp, #8
 8005222:	60f8      	str	r0, [r7, #12]
 8005224:	607a      	str	r2, [r7, #4]
 8005226:	603b      	str	r3, [r7, #0]
 8005228:	460b      	mov	r3, r1
 800522a:	72fb      	strb	r3, [r7, #11]
  TimerHandle_t hTimer;
  TimerCallback_t *callb;
  UBaseType_t reload;
  int32_t mem;

  hTimer = NULL;
 800522c:	2300      	movs	r3, #0
 800522e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005230:	f3ef 8305 	mrs	r3, IPSR
 8005234:	613b      	str	r3, [r7, #16]
  return(result);
 8005236:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (func != NULL)) {
 8005238:	2b00      	cmp	r3, #0
 800523a:	d163      	bne.n	8005304 <osTimerNew+0xe8>
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	2b00      	cmp	r3, #0
 8005240:	d060      	beq.n	8005304 <osTimerNew+0xe8>
    /* Allocate memory to store callback function and argument */
    callb = pvPortMalloc (sizeof(TimerCallback_t));
 8005242:	2008      	movs	r0, #8
 8005244:	f001 fdfa 	bl	8006e3c <pvPortMalloc>
 8005248:	6178      	str	r0, [r7, #20]

    if (callb != NULL) {
 800524a:	697b      	ldr	r3, [r7, #20]
 800524c:	2b00      	cmp	r3, #0
 800524e:	d059      	beq.n	8005304 <osTimerNew+0xe8>
      callb->func = func;
 8005250:	697b      	ldr	r3, [r7, #20]
 8005252:	68fa      	ldr	r2, [r7, #12]
 8005254:	601a      	str	r2, [r3, #0]
      callb->arg  = argument;
 8005256:	697b      	ldr	r3, [r7, #20]
 8005258:	687a      	ldr	r2, [r7, #4]
 800525a:	605a      	str	r2, [r3, #4]

      if (type == osTimerOnce) {
 800525c:	7afb      	ldrb	r3, [r7, #11]
 800525e:	2b00      	cmp	r3, #0
 8005260:	d102      	bne.n	8005268 <osTimerNew+0x4c>
        reload = pdFALSE;
 8005262:	2300      	movs	r3, #0
 8005264:	61fb      	str	r3, [r7, #28]
 8005266:	e001      	b.n	800526c <osTimerNew+0x50>
      } else {
        reload = pdTRUE;
 8005268:	2301      	movs	r3, #1
 800526a:	61fb      	str	r3, [r7, #28]
      }

      mem  = -1;
 800526c:	f04f 33ff 	mov.w	r3, #4294967295
 8005270:	61bb      	str	r3, [r7, #24]
      name = NULL;
 8005272:	2300      	movs	r3, #0
 8005274:	627b      	str	r3, [r7, #36]	; 0x24

      if (attr != NULL) {
 8005276:	683b      	ldr	r3, [r7, #0]
 8005278:	2b00      	cmp	r3, #0
 800527a:	d01c      	beq.n	80052b6 <osTimerNew+0x9a>
        if (attr->name != NULL) {
 800527c:	683b      	ldr	r3, [r7, #0]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	2b00      	cmp	r3, #0
 8005282:	d002      	beq.n	800528a <osTimerNew+0x6e>
          name = attr->name;
 8005284:	683b      	ldr	r3, [r7, #0]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	627b      	str	r3, [r7, #36]	; 0x24
        }

        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticTimer_t))) {
 800528a:	683b      	ldr	r3, [r7, #0]
 800528c:	689b      	ldr	r3, [r3, #8]
 800528e:	2b00      	cmp	r3, #0
 8005290:	d006      	beq.n	80052a0 <osTimerNew+0x84>
 8005292:	683b      	ldr	r3, [r7, #0]
 8005294:	68db      	ldr	r3, [r3, #12]
 8005296:	2b2b      	cmp	r3, #43	; 0x2b
 8005298:	d902      	bls.n	80052a0 <osTimerNew+0x84>
          mem = 1;
 800529a:	2301      	movs	r3, #1
 800529c:	61bb      	str	r3, [r7, #24]
 800529e:	e00c      	b.n	80052ba <osTimerNew+0x9e>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80052a0:	683b      	ldr	r3, [r7, #0]
 80052a2:	689b      	ldr	r3, [r3, #8]
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d108      	bne.n	80052ba <osTimerNew+0x9e>
 80052a8:	683b      	ldr	r3, [r7, #0]
 80052aa:	68db      	ldr	r3, [r3, #12]
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d104      	bne.n	80052ba <osTimerNew+0x9e>
            mem = 0;
 80052b0:	2300      	movs	r3, #0
 80052b2:	61bb      	str	r3, [r7, #24]
 80052b4:	e001      	b.n	80052ba <osTimerNew+0x9e>
          }
        }
      }
      else {
        mem = 0;
 80052b6:	2300      	movs	r3, #0
 80052b8:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 80052ba:	69bb      	ldr	r3, [r7, #24]
 80052bc:	2b01      	cmp	r3, #1
 80052be:	d10c      	bne.n	80052da <osTimerNew+0xbe>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          hTimer = xTimerCreateStatic (name, 1, reload, callb, TimerCallback, (StaticTimer_t *)attr->cb_mem);
 80052c0:	683b      	ldr	r3, [r7, #0]
 80052c2:	689b      	ldr	r3, [r3, #8]
 80052c4:	9301      	str	r3, [sp, #4]
 80052c6:	4b12      	ldr	r3, [pc, #72]	; (8005310 <osTimerNew+0xf4>)
 80052c8:	9300      	str	r3, [sp, #0]
 80052ca:	697b      	ldr	r3, [r7, #20]
 80052cc:	69fa      	ldr	r2, [r7, #28]
 80052ce:	2101      	movs	r1, #1
 80052d0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80052d2:	f001 faf8 	bl	80068c6 <xTimerCreateStatic>
 80052d6:	6238      	str	r0, [r7, #32]
 80052d8:	e00b      	b.n	80052f2 <osTimerNew+0xd6>
        #endif
      }
      else {
        if (mem == 0) {
 80052da:	69bb      	ldr	r3, [r7, #24]
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d108      	bne.n	80052f2 <osTimerNew+0xd6>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hTimer = xTimerCreate (name, 1, reload, callb, TimerCallback);
 80052e0:	4b0b      	ldr	r3, [pc, #44]	; (8005310 <osTimerNew+0xf4>)
 80052e2:	9300      	str	r3, [sp, #0]
 80052e4:	697b      	ldr	r3, [r7, #20]
 80052e6:	69fa      	ldr	r2, [r7, #28]
 80052e8:	2101      	movs	r1, #1
 80052ea:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80052ec:	f001 faca 	bl	8006884 <xTimerCreate>
 80052f0:	6238      	str	r0, [r7, #32]
          #endif
        }
      }

      if ((hTimer == NULL) && (callb != NULL)) {
 80052f2:	6a3b      	ldr	r3, [r7, #32]
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d105      	bne.n	8005304 <osTimerNew+0xe8>
 80052f8:	697b      	ldr	r3, [r7, #20]
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d002      	beq.n	8005304 <osTimerNew+0xe8>
        vPortFree (callb);
 80052fe:	6978      	ldr	r0, [r7, #20]
 8005300:	f001 fe68 	bl	8006fd4 <vPortFree>
      }
    }
  }

  return ((osTimerId_t)hTimer);
 8005304:	6a3b      	ldr	r3, [r7, #32]
}
 8005306:	4618      	mov	r0, r3
 8005308:	3728      	adds	r7, #40	; 0x28
 800530a:	46bd      	mov	sp, r7
 800530c:	bd80      	pop	{r7, pc}
 800530e:	bf00      	nop
 8005310:	080051f3 	.word	0x080051f3

08005314 <osTimerStart>:
  }

  return (p);
}

osStatus_t osTimerStart (osTimerId_t timer_id, uint32_t ticks) {
 8005314:	b580      	push	{r7, lr}
 8005316:	b088      	sub	sp, #32
 8005318:	af02      	add	r7, sp, #8
 800531a:	6078      	str	r0, [r7, #4]
 800531c:	6039      	str	r1, [r7, #0]
  TimerHandle_t hTimer = (TimerHandle_t)timer_id;
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005322:	f3ef 8305 	mrs	r3, IPSR
 8005326:	60fb      	str	r3, [r7, #12]
  return(result);
 8005328:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 800532a:	2b00      	cmp	r3, #0
 800532c:	d003      	beq.n	8005336 <osTimerStart+0x22>
    stat = osErrorISR;
 800532e:	f06f 0305 	mvn.w	r3, #5
 8005332:	617b      	str	r3, [r7, #20]
 8005334:	e017      	b.n	8005366 <osTimerStart+0x52>
  }
  else if (hTimer == NULL) {
 8005336:	693b      	ldr	r3, [r7, #16]
 8005338:	2b00      	cmp	r3, #0
 800533a:	d103      	bne.n	8005344 <osTimerStart+0x30>
    stat = osErrorParameter;
 800533c:	f06f 0303 	mvn.w	r3, #3
 8005340:	617b      	str	r3, [r7, #20]
 8005342:	e010      	b.n	8005366 <osTimerStart+0x52>
  }
  else {
    if (xTimerChangePeriod (hTimer, ticks, 0) == pdPASS) {
 8005344:	2300      	movs	r3, #0
 8005346:	9300      	str	r3, [sp, #0]
 8005348:	2300      	movs	r3, #0
 800534a:	683a      	ldr	r2, [r7, #0]
 800534c:	2104      	movs	r1, #4
 800534e:	6938      	ldr	r0, [r7, #16]
 8005350:	f001 fb32 	bl	80069b8 <xTimerGenericCommand>
 8005354:	4603      	mov	r3, r0
 8005356:	2b01      	cmp	r3, #1
 8005358:	d102      	bne.n	8005360 <osTimerStart+0x4c>
      stat = osOK;
 800535a:	2300      	movs	r3, #0
 800535c:	617b      	str	r3, [r7, #20]
 800535e:	e002      	b.n	8005366 <osTimerStart+0x52>
    } else {
      stat = osErrorResource;
 8005360:	f06f 0302 	mvn.w	r3, #2
 8005364:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8005366:	697b      	ldr	r3, [r7, #20]
}
 8005368:	4618      	mov	r0, r3
 800536a:	3718      	adds	r7, #24
 800536c:	46bd      	mov	sp, r7
 800536e:	bd80      	pop	{r7, pc}

08005370 <osTimerStop>:

osStatus_t osTimerStop (osTimerId_t timer_id) {
 8005370:	b580      	push	{r7, lr}
 8005372:	b088      	sub	sp, #32
 8005374:	af02      	add	r7, sp, #8
 8005376:	6078      	str	r0, [r7, #4]
  TimerHandle_t hTimer = (TimerHandle_t)timer_id;
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800537c:	f3ef 8305 	mrs	r3, IPSR
 8005380:	60fb      	str	r3, [r7, #12]
  return(result);
 8005382:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005384:	2b00      	cmp	r3, #0
 8005386:	d003      	beq.n	8005390 <osTimerStop+0x20>
    stat = osErrorISR;
 8005388:	f06f 0305 	mvn.w	r3, #5
 800538c:	617b      	str	r3, [r7, #20]
 800538e:	e021      	b.n	80053d4 <osTimerStop+0x64>
  }
  else if (hTimer == NULL) {
 8005390:	693b      	ldr	r3, [r7, #16]
 8005392:	2b00      	cmp	r3, #0
 8005394:	d103      	bne.n	800539e <osTimerStop+0x2e>
    stat = osErrorParameter;
 8005396:	f06f 0303 	mvn.w	r3, #3
 800539a:	617b      	str	r3, [r7, #20]
 800539c:	e01a      	b.n	80053d4 <osTimerStop+0x64>
  }
  else {
    if (xTimerIsTimerActive (hTimer) == pdFALSE) {
 800539e:	6938      	ldr	r0, [r7, #16]
 80053a0:	f001 fb98 	bl	8006ad4 <xTimerIsTimerActive>
 80053a4:	4603      	mov	r3, r0
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d103      	bne.n	80053b2 <osTimerStop+0x42>
      stat = osErrorResource;
 80053aa:	f06f 0302 	mvn.w	r3, #2
 80053ae:	617b      	str	r3, [r7, #20]
 80053b0:	e010      	b.n	80053d4 <osTimerStop+0x64>
    }
    else {
      if (xTimerStop (hTimer, 0) == pdPASS) {
 80053b2:	2300      	movs	r3, #0
 80053b4:	9300      	str	r3, [sp, #0]
 80053b6:	2300      	movs	r3, #0
 80053b8:	2200      	movs	r2, #0
 80053ba:	2103      	movs	r1, #3
 80053bc:	6938      	ldr	r0, [r7, #16]
 80053be:	f001 fafb 	bl	80069b8 <xTimerGenericCommand>
 80053c2:	4603      	mov	r3, r0
 80053c4:	2b01      	cmp	r3, #1
 80053c6:	d102      	bne.n	80053ce <osTimerStop+0x5e>
        stat = osOK;
 80053c8:	2300      	movs	r3, #0
 80053ca:	617b      	str	r3, [r7, #20]
 80053cc:	e002      	b.n	80053d4 <osTimerStop+0x64>
      } else {
        stat = osError;
 80053ce:	f04f 33ff 	mov.w	r3, #4294967295
 80053d2:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 80053d4:	697b      	ldr	r3, [r7, #20]
}
 80053d6:	4618      	mov	r0, r3
 80053d8:	3718      	adds	r7, #24
 80053da:	46bd      	mov	sp, r7
 80053dc:	bd80      	pop	{r7, pc}

080053de <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80053de:	b480      	push	{r7}
 80053e0:	b083      	sub	sp, #12
 80053e2:	af00      	add	r7, sp, #0
 80053e4:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	f103 0208 	add.w	r2, r3, #8
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	f04f 32ff 	mov.w	r2, #4294967295
 80053f6:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	f103 0208 	add.w	r2, r3, #8
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	f103 0208 	add.w	r2, r3, #8
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	2200      	movs	r2, #0
 8005410:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005412:	bf00      	nop
 8005414:	370c      	adds	r7, #12
 8005416:	46bd      	mov	sp, r7
 8005418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800541c:	4770      	bx	lr

0800541e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800541e:	b480      	push	{r7}
 8005420:	b083      	sub	sp, #12
 8005422:	af00      	add	r7, sp, #0
 8005424:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	2200      	movs	r2, #0
 800542a:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800542c:	bf00      	nop
 800542e:	370c      	adds	r7, #12
 8005430:	46bd      	mov	sp, r7
 8005432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005436:	4770      	bx	lr

08005438 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005438:	b480      	push	{r7}
 800543a:	b085      	sub	sp, #20
 800543c:	af00      	add	r7, sp, #0
 800543e:	6078      	str	r0, [r7, #4]
 8005440:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	685b      	ldr	r3, [r3, #4]
 8005446:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005448:	683b      	ldr	r3, [r7, #0]
 800544a:	68fa      	ldr	r2, [r7, #12]
 800544c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	689a      	ldr	r2, [r3, #8]
 8005452:	683b      	ldr	r3, [r7, #0]
 8005454:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	689b      	ldr	r3, [r3, #8]
 800545a:	683a      	ldr	r2, [r7, #0]
 800545c:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	683a      	ldr	r2, [r7, #0]
 8005462:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005464:	683b      	ldr	r3, [r7, #0]
 8005466:	687a      	ldr	r2, [r7, #4]
 8005468:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	1c5a      	adds	r2, r3, #1
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	601a      	str	r2, [r3, #0]
}
 8005474:	bf00      	nop
 8005476:	3714      	adds	r7, #20
 8005478:	46bd      	mov	sp, r7
 800547a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800547e:	4770      	bx	lr

08005480 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005480:	b480      	push	{r7}
 8005482:	b085      	sub	sp, #20
 8005484:	af00      	add	r7, sp, #0
 8005486:	6078      	str	r0, [r7, #4]
 8005488:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800548a:	683b      	ldr	r3, [r7, #0]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005490:	68bb      	ldr	r3, [r7, #8]
 8005492:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005496:	d103      	bne.n	80054a0 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	691b      	ldr	r3, [r3, #16]
 800549c:	60fb      	str	r3, [r7, #12]
 800549e:	e00c      	b.n	80054ba <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	3308      	adds	r3, #8
 80054a4:	60fb      	str	r3, [r7, #12]
 80054a6:	e002      	b.n	80054ae <vListInsert+0x2e>
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	685b      	ldr	r3, [r3, #4]
 80054ac:	60fb      	str	r3, [r7, #12]
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	685b      	ldr	r3, [r3, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	68ba      	ldr	r2, [r7, #8]
 80054b6:	429a      	cmp	r2, r3
 80054b8:	d2f6      	bcs.n	80054a8 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	685a      	ldr	r2, [r3, #4]
 80054be:	683b      	ldr	r3, [r7, #0]
 80054c0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80054c2:	683b      	ldr	r3, [r7, #0]
 80054c4:	685b      	ldr	r3, [r3, #4]
 80054c6:	683a      	ldr	r2, [r7, #0]
 80054c8:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80054ca:	683b      	ldr	r3, [r7, #0]
 80054cc:	68fa      	ldr	r2, [r7, #12]
 80054ce:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	683a      	ldr	r2, [r7, #0]
 80054d4:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80054d6:	683b      	ldr	r3, [r7, #0]
 80054d8:	687a      	ldr	r2, [r7, #4]
 80054da:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	1c5a      	adds	r2, r3, #1
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	601a      	str	r2, [r3, #0]
}
 80054e6:	bf00      	nop
 80054e8:	3714      	adds	r7, #20
 80054ea:	46bd      	mov	sp, r7
 80054ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f0:	4770      	bx	lr

080054f2 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80054f2:	b480      	push	{r7}
 80054f4:	b085      	sub	sp, #20
 80054f6:	af00      	add	r7, sp, #0
 80054f8:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	691b      	ldr	r3, [r3, #16]
 80054fe:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	685b      	ldr	r3, [r3, #4]
 8005504:	687a      	ldr	r2, [r7, #4]
 8005506:	6892      	ldr	r2, [r2, #8]
 8005508:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	689b      	ldr	r3, [r3, #8]
 800550e:	687a      	ldr	r2, [r7, #4]
 8005510:	6852      	ldr	r2, [r2, #4]
 8005512:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	685b      	ldr	r3, [r3, #4]
 8005518:	687a      	ldr	r2, [r7, #4]
 800551a:	429a      	cmp	r2, r3
 800551c:	d103      	bne.n	8005526 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	689a      	ldr	r2, [r3, #8]
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	2200      	movs	r2, #0
 800552a:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	1e5a      	subs	r2, r3, #1
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	681b      	ldr	r3, [r3, #0]
}
 800553a:	4618      	mov	r0, r3
 800553c:	3714      	adds	r7, #20
 800553e:	46bd      	mov	sp, r7
 8005540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005544:	4770      	bx	lr
	...

08005548 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005548:	b580      	push	{r7, lr}
 800554a:	b084      	sub	sp, #16
 800554c:	af00      	add	r7, sp, #0
 800554e:	6078      	str	r0, [r7, #4]
 8005550:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	2b00      	cmp	r3, #0
 800555a:	d10a      	bne.n	8005572 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800555c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005560:	f383 8811 	msr	BASEPRI, r3
 8005564:	f3bf 8f6f 	isb	sy
 8005568:	f3bf 8f4f 	dsb	sy
 800556c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800556e:	bf00      	nop
 8005570:	e7fe      	b.n	8005570 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8005572:	f001 fb71 	bl	8006c58 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	681a      	ldr	r2, [r3, #0]
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800557e:	68f9      	ldr	r1, [r7, #12]
 8005580:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005582:	fb01 f303 	mul.w	r3, r1, r3
 8005586:	441a      	add	r2, r3
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	2200      	movs	r2, #0
 8005590:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	681a      	ldr	r2, [r3, #0]
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	681a      	ldr	r2, [r3, #0]
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055a2:	3b01      	subs	r3, #1
 80055a4:	68f9      	ldr	r1, [r7, #12]
 80055a6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80055a8:	fb01 f303 	mul.w	r3, r1, r3
 80055ac:	441a      	add	r2, r3
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	22ff      	movs	r2, #255	; 0xff
 80055b6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	22ff      	movs	r2, #255	; 0xff
 80055be:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80055c2:	683b      	ldr	r3, [r7, #0]
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d114      	bne.n	80055f2 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	691b      	ldr	r3, [r3, #16]
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d01a      	beq.n	8005606 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	3310      	adds	r3, #16
 80055d4:	4618      	mov	r0, r3
 80055d6:	f000 ff2d 	bl	8006434 <xTaskRemoveFromEventList>
 80055da:	4603      	mov	r3, r0
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d012      	beq.n	8005606 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80055e0:	4b0c      	ldr	r3, [pc, #48]	; (8005614 <xQueueGenericReset+0xcc>)
 80055e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80055e6:	601a      	str	r2, [r3, #0]
 80055e8:	f3bf 8f4f 	dsb	sy
 80055ec:	f3bf 8f6f 	isb	sy
 80055f0:	e009      	b.n	8005606 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	3310      	adds	r3, #16
 80055f6:	4618      	mov	r0, r3
 80055f8:	f7ff fef1 	bl	80053de <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	3324      	adds	r3, #36	; 0x24
 8005600:	4618      	mov	r0, r3
 8005602:	f7ff feec 	bl	80053de <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005606:	f001 fb57 	bl	8006cb8 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800560a:	2301      	movs	r3, #1
}
 800560c:	4618      	mov	r0, r3
 800560e:	3710      	adds	r7, #16
 8005610:	46bd      	mov	sp, r7
 8005612:	bd80      	pop	{r7, pc}
 8005614:	e000ed04 	.word	0xe000ed04

08005618 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005618:	b580      	push	{r7, lr}
 800561a:	b08e      	sub	sp, #56	; 0x38
 800561c:	af02      	add	r7, sp, #8
 800561e:	60f8      	str	r0, [r7, #12]
 8005620:	60b9      	str	r1, [r7, #8]
 8005622:	607a      	str	r2, [r7, #4]
 8005624:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	2b00      	cmp	r3, #0
 800562a:	d10a      	bne.n	8005642 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800562c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005630:	f383 8811 	msr	BASEPRI, r3
 8005634:	f3bf 8f6f 	isb	sy
 8005638:	f3bf 8f4f 	dsb	sy
 800563c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800563e:	bf00      	nop
 8005640:	e7fe      	b.n	8005640 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005642:	683b      	ldr	r3, [r7, #0]
 8005644:	2b00      	cmp	r3, #0
 8005646:	d10a      	bne.n	800565e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8005648:	f04f 0350 	mov.w	r3, #80	; 0x50
 800564c:	f383 8811 	msr	BASEPRI, r3
 8005650:	f3bf 8f6f 	isb	sy
 8005654:	f3bf 8f4f 	dsb	sy
 8005658:	627b      	str	r3, [r7, #36]	; 0x24
}
 800565a:	bf00      	nop
 800565c:	e7fe      	b.n	800565c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	2b00      	cmp	r3, #0
 8005662:	d002      	beq.n	800566a <xQueueGenericCreateStatic+0x52>
 8005664:	68bb      	ldr	r3, [r7, #8]
 8005666:	2b00      	cmp	r3, #0
 8005668:	d001      	beq.n	800566e <xQueueGenericCreateStatic+0x56>
 800566a:	2301      	movs	r3, #1
 800566c:	e000      	b.n	8005670 <xQueueGenericCreateStatic+0x58>
 800566e:	2300      	movs	r3, #0
 8005670:	2b00      	cmp	r3, #0
 8005672:	d10a      	bne.n	800568a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8005674:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005678:	f383 8811 	msr	BASEPRI, r3
 800567c:	f3bf 8f6f 	isb	sy
 8005680:	f3bf 8f4f 	dsb	sy
 8005684:	623b      	str	r3, [r7, #32]
}
 8005686:	bf00      	nop
 8005688:	e7fe      	b.n	8005688 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	2b00      	cmp	r3, #0
 800568e:	d102      	bne.n	8005696 <xQueueGenericCreateStatic+0x7e>
 8005690:	68bb      	ldr	r3, [r7, #8]
 8005692:	2b00      	cmp	r3, #0
 8005694:	d101      	bne.n	800569a <xQueueGenericCreateStatic+0x82>
 8005696:	2301      	movs	r3, #1
 8005698:	e000      	b.n	800569c <xQueueGenericCreateStatic+0x84>
 800569a:	2300      	movs	r3, #0
 800569c:	2b00      	cmp	r3, #0
 800569e:	d10a      	bne.n	80056b6 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80056a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056a4:	f383 8811 	msr	BASEPRI, r3
 80056a8:	f3bf 8f6f 	isb	sy
 80056ac:	f3bf 8f4f 	dsb	sy
 80056b0:	61fb      	str	r3, [r7, #28]
}
 80056b2:	bf00      	nop
 80056b4:	e7fe      	b.n	80056b4 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80056b6:	2350      	movs	r3, #80	; 0x50
 80056b8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80056ba:	697b      	ldr	r3, [r7, #20]
 80056bc:	2b50      	cmp	r3, #80	; 0x50
 80056be:	d00a      	beq.n	80056d6 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80056c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056c4:	f383 8811 	msr	BASEPRI, r3
 80056c8:	f3bf 8f6f 	isb	sy
 80056cc:	f3bf 8f4f 	dsb	sy
 80056d0:	61bb      	str	r3, [r7, #24]
}
 80056d2:	bf00      	nop
 80056d4:	e7fe      	b.n	80056d4 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80056d6:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80056d8:	683b      	ldr	r3, [r7, #0]
 80056da:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80056dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d00d      	beq.n	80056fe <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80056e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056e4:	2201      	movs	r2, #1
 80056e6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80056ea:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80056ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056f0:	9300      	str	r3, [sp, #0]
 80056f2:	4613      	mov	r3, r2
 80056f4:	687a      	ldr	r2, [r7, #4]
 80056f6:	68b9      	ldr	r1, [r7, #8]
 80056f8:	68f8      	ldr	r0, [r7, #12]
 80056fa:	f000 f805 	bl	8005708 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80056fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8005700:	4618      	mov	r0, r3
 8005702:	3730      	adds	r7, #48	; 0x30
 8005704:	46bd      	mov	sp, r7
 8005706:	bd80      	pop	{r7, pc}

08005708 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005708:	b580      	push	{r7, lr}
 800570a:	b084      	sub	sp, #16
 800570c:	af00      	add	r7, sp, #0
 800570e:	60f8      	str	r0, [r7, #12]
 8005710:	60b9      	str	r1, [r7, #8]
 8005712:	607a      	str	r2, [r7, #4]
 8005714:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005716:	68bb      	ldr	r3, [r7, #8]
 8005718:	2b00      	cmp	r3, #0
 800571a:	d103      	bne.n	8005724 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800571c:	69bb      	ldr	r3, [r7, #24]
 800571e:	69ba      	ldr	r2, [r7, #24]
 8005720:	601a      	str	r2, [r3, #0]
 8005722:	e002      	b.n	800572a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005724:	69bb      	ldr	r3, [r7, #24]
 8005726:	687a      	ldr	r2, [r7, #4]
 8005728:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800572a:	69bb      	ldr	r3, [r7, #24]
 800572c:	68fa      	ldr	r2, [r7, #12]
 800572e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005730:	69bb      	ldr	r3, [r7, #24]
 8005732:	68ba      	ldr	r2, [r7, #8]
 8005734:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005736:	2101      	movs	r1, #1
 8005738:	69b8      	ldr	r0, [r7, #24]
 800573a:	f7ff ff05 	bl	8005548 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800573e:	69bb      	ldr	r3, [r7, #24]
 8005740:	78fa      	ldrb	r2, [r7, #3]
 8005742:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005746:	bf00      	nop
 8005748:	3710      	adds	r7, #16
 800574a:	46bd      	mov	sp, r7
 800574c:	bd80      	pop	{r7, pc}
	...

08005750 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005750:	b580      	push	{r7, lr}
 8005752:	b08e      	sub	sp, #56	; 0x38
 8005754:	af00      	add	r7, sp, #0
 8005756:	60f8      	str	r0, [r7, #12]
 8005758:	60b9      	str	r1, [r7, #8]
 800575a:	607a      	str	r2, [r7, #4]
 800575c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800575e:	2300      	movs	r3, #0
 8005760:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005766:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005768:	2b00      	cmp	r3, #0
 800576a:	d10a      	bne.n	8005782 <xQueueGenericSend+0x32>
	__asm volatile
 800576c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005770:	f383 8811 	msr	BASEPRI, r3
 8005774:	f3bf 8f6f 	isb	sy
 8005778:	f3bf 8f4f 	dsb	sy
 800577c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800577e:	bf00      	nop
 8005780:	e7fe      	b.n	8005780 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005782:	68bb      	ldr	r3, [r7, #8]
 8005784:	2b00      	cmp	r3, #0
 8005786:	d103      	bne.n	8005790 <xQueueGenericSend+0x40>
 8005788:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800578a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800578c:	2b00      	cmp	r3, #0
 800578e:	d101      	bne.n	8005794 <xQueueGenericSend+0x44>
 8005790:	2301      	movs	r3, #1
 8005792:	e000      	b.n	8005796 <xQueueGenericSend+0x46>
 8005794:	2300      	movs	r3, #0
 8005796:	2b00      	cmp	r3, #0
 8005798:	d10a      	bne.n	80057b0 <xQueueGenericSend+0x60>
	__asm volatile
 800579a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800579e:	f383 8811 	msr	BASEPRI, r3
 80057a2:	f3bf 8f6f 	isb	sy
 80057a6:	f3bf 8f4f 	dsb	sy
 80057aa:	627b      	str	r3, [r7, #36]	; 0x24
}
 80057ac:	bf00      	nop
 80057ae:	e7fe      	b.n	80057ae <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80057b0:	683b      	ldr	r3, [r7, #0]
 80057b2:	2b02      	cmp	r3, #2
 80057b4:	d103      	bne.n	80057be <xQueueGenericSend+0x6e>
 80057b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057ba:	2b01      	cmp	r3, #1
 80057bc:	d101      	bne.n	80057c2 <xQueueGenericSend+0x72>
 80057be:	2301      	movs	r3, #1
 80057c0:	e000      	b.n	80057c4 <xQueueGenericSend+0x74>
 80057c2:	2300      	movs	r3, #0
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d10a      	bne.n	80057de <xQueueGenericSend+0x8e>
	__asm volatile
 80057c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057cc:	f383 8811 	msr	BASEPRI, r3
 80057d0:	f3bf 8f6f 	isb	sy
 80057d4:	f3bf 8f4f 	dsb	sy
 80057d8:	623b      	str	r3, [r7, #32]
}
 80057da:	bf00      	nop
 80057dc:	e7fe      	b.n	80057dc <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80057de:	f000 ff71 	bl	80066c4 <xTaskGetSchedulerState>
 80057e2:	4603      	mov	r3, r0
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d102      	bne.n	80057ee <xQueueGenericSend+0x9e>
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d101      	bne.n	80057f2 <xQueueGenericSend+0xa2>
 80057ee:	2301      	movs	r3, #1
 80057f0:	e000      	b.n	80057f4 <xQueueGenericSend+0xa4>
 80057f2:	2300      	movs	r3, #0
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d10a      	bne.n	800580e <xQueueGenericSend+0xbe>
	__asm volatile
 80057f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057fc:	f383 8811 	msr	BASEPRI, r3
 8005800:	f3bf 8f6f 	isb	sy
 8005804:	f3bf 8f4f 	dsb	sy
 8005808:	61fb      	str	r3, [r7, #28]
}
 800580a:	bf00      	nop
 800580c:	e7fe      	b.n	800580c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800580e:	f001 fa23 	bl	8006c58 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005812:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005814:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005816:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005818:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800581a:	429a      	cmp	r2, r3
 800581c:	d302      	bcc.n	8005824 <xQueueGenericSend+0xd4>
 800581e:	683b      	ldr	r3, [r7, #0]
 8005820:	2b02      	cmp	r3, #2
 8005822:	d129      	bne.n	8005878 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005824:	683a      	ldr	r2, [r7, #0]
 8005826:	68b9      	ldr	r1, [r7, #8]
 8005828:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800582a:	f000 f92a 	bl	8005a82 <prvCopyDataToQueue>
 800582e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005830:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005832:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005834:	2b00      	cmp	r3, #0
 8005836:	d010      	beq.n	800585a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005838:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800583a:	3324      	adds	r3, #36	; 0x24
 800583c:	4618      	mov	r0, r3
 800583e:	f000 fdf9 	bl	8006434 <xTaskRemoveFromEventList>
 8005842:	4603      	mov	r3, r0
 8005844:	2b00      	cmp	r3, #0
 8005846:	d013      	beq.n	8005870 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005848:	4b3f      	ldr	r3, [pc, #252]	; (8005948 <xQueueGenericSend+0x1f8>)
 800584a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800584e:	601a      	str	r2, [r3, #0]
 8005850:	f3bf 8f4f 	dsb	sy
 8005854:	f3bf 8f6f 	isb	sy
 8005858:	e00a      	b.n	8005870 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800585a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800585c:	2b00      	cmp	r3, #0
 800585e:	d007      	beq.n	8005870 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005860:	4b39      	ldr	r3, [pc, #228]	; (8005948 <xQueueGenericSend+0x1f8>)
 8005862:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005866:	601a      	str	r2, [r3, #0]
 8005868:	f3bf 8f4f 	dsb	sy
 800586c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005870:	f001 fa22 	bl	8006cb8 <vPortExitCritical>
				return pdPASS;
 8005874:	2301      	movs	r3, #1
 8005876:	e063      	b.n	8005940 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	2b00      	cmp	r3, #0
 800587c:	d103      	bne.n	8005886 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800587e:	f001 fa1b 	bl	8006cb8 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005882:	2300      	movs	r3, #0
 8005884:	e05c      	b.n	8005940 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005886:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005888:	2b00      	cmp	r3, #0
 800588a:	d106      	bne.n	800589a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800588c:	f107 0314 	add.w	r3, r7, #20
 8005890:	4618      	mov	r0, r3
 8005892:	f000 fe33 	bl	80064fc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005896:	2301      	movs	r3, #1
 8005898:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800589a:	f001 fa0d 	bl	8006cb8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800589e:	f000 fbdb 	bl	8006058 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80058a2:	f001 f9d9 	bl	8006c58 <vPortEnterCritical>
 80058a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058a8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80058ac:	b25b      	sxtb	r3, r3
 80058ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058b2:	d103      	bne.n	80058bc <xQueueGenericSend+0x16c>
 80058b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058b6:	2200      	movs	r2, #0
 80058b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80058bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058be:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80058c2:	b25b      	sxtb	r3, r3
 80058c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058c8:	d103      	bne.n	80058d2 <xQueueGenericSend+0x182>
 80058ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058cc:	2200      	movs	r2, #0
 80058ce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80058d2:	f001 f9f1 	bl	8006cb8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80058d6:	1d3a      	adds	r2, r7, #4
 80058d8:	f107 0314 	add.w	r3, r7, #20
 80058dc:	4611      	mov	r1, r2
 80058de:	4618      	mov	r0, r3
 80058e0:	f000 fe22 	bl	8006528 <xTaskCheckForTimeOut>
 80058e4:	4603      	mov	r3, r0
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d124      	bne.n	8005934 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80058ea:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80058ec:	f000 f985 	bl	8005bfa <prvIsQueueFull>
 80058f0:	4603      	mov	r3, r0
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d018      	beq.n	8005928 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80058f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058f8:	3310      	adds	r3, #16
 80058fa:	687a      	ldr	r2, [r7, #4]
 80058fc:	4611      	mov	r1, r2
 80058fe:	4618      	mov	r0, r3
 8005900:	f000 fd74 	bl	80063ec <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005904:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005906:	f000 f926 	bl	8005b56 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800590a:	f000 fbb3 	bl	8006074 <xTaskResumeAll>
 800590e:	4603      	mov	r3, r0
 8005910:	2b00      	cmp	r3, #0
 8005912:	f47f af7c 	bne.w	800580e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8005916:	4b0c      	ldr	r3, [pc, #48]	; (8005948 <xQueueGenericSend+0x1f8>)
 8005918:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800591c:	601a      	str	r2, [r3, #0]
 800591e:	f3bf 8f4f 	dsb	sy
 8005922:	f3bf 8f6f 	isb	sy
 8005926:	e772      	b.n	800580e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005928:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800592a:	f000 f914 	bl	8005b56 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800592e:	f000 fba1 	bl	8006074 <xTaskResumeAll>
 8005932:	e76c      	b.n	800580e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005934:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005936:	f000 f90e 	bl	8005b56 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800593a:	f000 fb9b 	bl	8006074 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800593e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8005940:	4618      	mov	r0, r3
 8005942:	3738      	adds	r7, #56	; 0x38
 8005944:	46bd      	mov	sp, r7
 8005946:	bd80      	pop	{r7, pc}
 8005948:	e000ed04 	.word	0xe000ed04

0800594c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800594c:	b580      	push	{r7, lr}
 800594e:	b090      	sub	sp, #64	; 0x40
 8005950:	af00      	add	r7, sp, #0
 8005952:	60f8      	str	r0, [r7, #12]
 8005954:	60b9      	str	r1, [r7, #8]
 8005956:	607a      	str	r2, [r7, #4]
 8005958:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800595e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005960:	2b00      	cmp	r3, #0
 8005962:	d10a      	bne.n	800597a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8005964:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005968:	f383 8811 	msr	BASEPRI, r3
 800596c:	f3bf 8f6f 	isb	sy
 8005970:	f3bf 8f4f 	dsb	sy
 8005974:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005976:	bf00      	nop
 8005978:	e7fe      	b.n	8005978 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800597a:	68bb      	ldr	r3, [r7, #8]
 800597c:	2b00      	cmp	r3, #0
 800597e:	d103      	bne.n	8005988 <xQueueGenericSendFromISR+0x3c>
 8005980:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005982:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005984:	2b00      	cmp	r3, #0
 8005986:	d101      	bne.n	800598c <xQueueGenericSendFromISR+0x40>
 8005988:	2301      	movs	r3, #1
 800598a:	e000      	b.n	800598e <xQueueGenericSendFromISR+0x42>
 800598c:	2300      	movs	r3, #0
 800598e:	2b00      	cmp	r3, #0
 8005990:	d10a      	bne.n	80059a8 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8005992:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005996:	f383 8811 	msr	BASEPRI, r3
 800599a:	f3bf 8f6f 	isb	sy
 800599e:	f3bf 8f4f 	dsb	sy
 80059a2:	627b      	str	r3, [r7, #36]	; 0x24
}
 80059a4:	bf00      	nop
 80059a6:	e7fe      	b.n	80059a6 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80059a8:	683b      	ldr	r3, [r7, #0]
 80059aa:	2b02      	cmp	r3, #2
 80059ac:	d103      	bne.n	80059b6 <xQueueGenericSendFromISR+0x6a>
 80059ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80059b2:	2b01      	cmp	r3, #1
 80059b4:	d101      	bne.n	80059ba <xQueueGenericSendFromISR+0x6e>
 80059b6:	2301      	movs	r3, #1
 80059b8:	e000      	b.n	80059bc <xQueueGenericSendFromISR+0x70>
 80059ba:	2300      	movs	r3, #0
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d10a      	bne.n	80059d6 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80059c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059c4:	f383 8811 	msr	BASEPRI, r3
 80059c8:	f3bf 8f6f 	isb	sy
 80059cc:	f3bf 8f4f 	dsb	sy
 80059d0:	623b      	str	r3, [r7, #32]
}
 80059d2:	bf00      	nop
 80059d4:	e7fe      	b.n	80059d4 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80059d6:	f001 f9f1 	bl	8006dbc <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80059da:	f3ef 8211 	mrs	r2, BASEPRI
 80059de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059e2:	f383 8811 	msr	BASEPRI, r3
 80059e6:	f3bf 8f6f 	isb	sy
 80059ea:	f3bf 8f4f 	dsb	sy
 80059ee:	61fa      	str	r2, [r7, #28]
 80059f0:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80059f2:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80059f4:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80059f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059f8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80059fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80059fe:	429a      	cmp	r2, r3
 8005a00:	d302      	bcc.n	8005a08 <xQueueGenericSendFromISR+0xbc>
 8005a02:	683b      	ldr	r3, [r7, #0]
 8005a04:	2b02      	cmp	r3, #2
 8005a06:	d12f      	bne.n	8005a68 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005a08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a0a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005a0e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005a12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a16:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005a18:	683a      	ldr	r2, [r7, #0]
 8005a1a:	68b9      	ldr	r1, [r7, #8]
 8005a1c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005a1e:	f000 f830 	bl	8005a82 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005a22:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8005a26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a2a:	d112      	bne.n	8005a52 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005a2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d016      	beq.n	8005a62 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005a34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a36:	3324      	adds	r3, #36	; 0x24
 8005a38:	4618      	mov	r0, r3
 8005a3a:	f000 fcfb 	bl	8006434 <xTaskRemoveFromEventList>
 8005a3e:	4603      	mov	r3, r0
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d00e      	beq.n	8005a62 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d00b      	beq.n	8005a62 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	2201      	movs	r2, #1
 8005a4e:	601a      	str	r2, [r3, #0]
 8005a50:	e007      	b.n	8005a62 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005a52:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8005a56:	3301      	adds	r3, #1
 8005a58:	b2db      	uxtb	r3, r3
 8005a5a:	b25a      	sxtb	r2, r3
 8005a5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a5e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8005a62:	2301      	movs	r3, #1
 8005a64:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8005a66:	e001      	b.n	8005a6c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005a68:	2300      	movs	r3, #0
 8005a6a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005a6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a6e:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005a70:	697b      	ldr	r3, [r7, #20]
 8005a72:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005a76:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005a78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8005a7a:	4618      	mov	r0, r3
 8005a7c:	3740      	adds	r7, #64	; 0x40
 8005a7e:	46bd      	mov	sp, r7
 8005a80:	bd80      	pop	{r7, pc}

08005a82 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005a82:	b580      	push	{r7, lr}
 8005a84:	b086      	sub	sp, #24
 8005a86:	af00      	add	r7, sp, #0
 8005a88:	60f8      	str	r0, [r7, #12]
 8005a8a:	60b9      	str	r1, [r7, #8]
 8005a8c:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005a8e:	2300      	movs	r3, #0
 8005a90:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a96:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d10d      	bne.n	8005abc <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d14d      	bne.n	8005b44 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	689b      	ldr	r3, [r3, #8]
 8005aac:	4618      	mov	r0, r3
 8005aae:	f000 fe27 	bl	8006700 <xTaskPriorityDisinherit>
 8005ab2:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	2200      	movs	r2, #0
 8005ab8:	609a      	str	r2, [r3, #8]
 8005aba:	e043      	b.n	8005b44 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d119      	bne.n	8005af6 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	6858      	ldr	r0, [r3, #4]
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005aca:	461a      	mov	r2, r3
 8005acc:	68b9      	ldr	r1, [r7, #8]
 8005ace:	f001 fbcb 	bl	8007268 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	685a      	ldr	r2, [r3, #4]
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ada:	441a      	add	r2, r3
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	685a      	ldr	r2, [r3, #4]
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	689b      	ldr	r3, [r3, #8]
 8005ae8:	429a      	cmp	r2, r3
 8005aea:	d32b      	bcc.n	8005b44 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	681a      	ldr	r2, [r3, #0]
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	605a      	str	r2, [r3, #4]
 8005af4:	e026      	b.n	8005b44 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	68d8      	ldr	r0, [r3, #12]
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005afe:	461a      	mov	r2, r3
 8005b00:	68b9      	ldr	r1, [r7, #8]
 8005b02:	f001 fbb1 	bl	8007268 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	68da      	ldr	r2, [r3, #12]
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b0e:	425b      	negs	r3, r3
 8005b10:	441a      	add	r2, r3
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	68da      	ldr	r2, [r3, #12]
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	429a      	cmp	r2, r3
 8005b20:	d207      	bcs.n	8005b32 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	689a      	ldr	r2, [r3, #8]
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b2a:	425b      	negs	r3, r3
 8005b2c:	441a      	add	r2, r3
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	2b02      	cmp	r3, #2
 8005b36:	d105      	bne.n	8005b44 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005b38:	693b      	ldr	r3, [r7, #16]
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d002      	beq.n	8005b44 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005b3e:	693b      	ldr	r3, [r7, #16]
 8005b40:	3b01      	subs	r3, #1
 8005b42:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005b44:	693b      	ldr	r3, [r7, #16]
 8005b46:	1c5a      	adds	r2, r3, #1
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8005b4c:	697b      	ldr	r3, [r7, #20]
}
 8005b4e:	4618      	mov	r0, r3
 8005b50:	3718      	adds	r7, #24
 8005b52:	46bd      	mov	sp, r7
 8005b54:	bd80      	pop	{r7, pc}

08005b56 <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005b56:	b580      	push	{r7, lr}
 8005b58:	b084      	sub	sp, #16
 8005b5a:	af00      	add	r7, sp, #0
 8005b5c:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005b5e:	f001 f87b 	bl	8006c58 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005b68:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005b6a:	e011      	b.n	8005b90 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d012      	beq.n	8005b9a <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	3324      	adds	r3, #36	; 0x24
 8005b78:	4618      	mov	r0, r3
 8005b7a:	f000 fc5b 	bl	8006434 <xTaskRemoveFromEventList>
 8005b7e:	4603      	mov	r3, r0
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d001      	beq.n	8005b88 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005b84:	f000 fd32 	bl	80065ec <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005b88:	7bfb      	ldrb	r3, [r7, #15]
 8005b8a:	3b01      	subs	r3, #1
 8005b8c:	b2db      	uxtb	r3, r3
 8005b8e:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005b90:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	dce9      	bgt.n	8005b6c <prvUnlockQueue+0x16>
 8005b98:	e000      	b.n	8005b9c <prvUnlockQueue+0x46>
					break;
 8005b9a:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	22ff      	movs	r2, #255	; 0xff
 8005ba0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8005ba4:	f001 f888 	bl	8006cb8 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005ba8:	f001 f856 	bl	8006c58 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005bb2:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005bb4:	e011      	b.n	8005bda <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	691b      	ldr	r3, [r3, #16]
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d012      	beq.n	8005be4 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	3310      	adds	r3, #16
 8005bc2:	4618      	mov	r0, r3
 8005bc4:	f000 fc36 	bl	8006434 <xTaskRemoveFromEventList>
 8005bc8:	4603      	mov	r3, r0
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d001      	beq.n	8005bd2 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005bce:	f000 fd0d 	bl	80065ec <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005bd2:	7bbb      	ldrb	r3, [r7, #14]
 8005bd4:	3b01      	subs	r3, #1
 8005bd6:	b2db      	uxtb	r3, r3
 8005bd8:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005bda:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	dce9      	bgt.n	8005bb6 <prvUnlockQueue+0x60>
 8005be2:	e000      	b.n	8005be6 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005be4:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	22ff      	movs	r2, #255	; 0xff
 8005bea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8005bee:	f001 f863 	bl	8006cb8 <vPortExitCritical>
}
 8005bf2:	bf00      	nop
 8005bf4:	3710      	adds	r7, #16
 8005bf6:	46bd      	mov	sp, r7
 8005bf8:	bd80      	pop	{r7, pc}

08005bfa <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005bfa:	b580      	push	{r7, lr}
 8005bfc:	b084      	sub	sp, #16
 8005bfe:	af00      	add	r7, sp, #0
 8005c00:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005c02:	f001 f829 	bl	8006c58 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c0e:	429a      	cmp	r2, r3
 8005c10:	d102      	bne.n	8005c18 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005c12:	2301      	movs	r3, #1
 8005c14:	60fb      	str	r3, [r7, #12]
 8005c16:	e001      	b.n	8005c1c <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005c18:	2300      	movs	r3, #0
 8005c1a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005c1c:	f001 f84c 	bl	8006cb8 <vPortExitCritical>

	return xReturn;
 8005c20:	68fb      	ldr	r3, [r7, #12]
}
 8005c22:	4618      	mov	r0, r3
 8005c24:	3710      	adds	r7, #16
 8005c26:	46bd      	mov	sp, r7
 8005c28:	bd80      	pop	{r7, pc}
	...

08005c2c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8005c2c:	b480      	push	{r7}
 8005c2e:	b085      	sub	sp, #20
 8005c30:	af00      	add	r7, sp, #0
 8005c32:	6078      	str	r0, [r7, #4]
 8005c34:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005c36:	2300      	movs	r3, #0
 8005c38:	60fb      	str	r3, [r7, #12]
 8005c3a:	e014      	b.n	8005c66 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8005c3c:	4a0f      	ldr	r2, [pc, #60]	; (8005c7c <vQueueAddToRegistry+0x50>)
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d10b      	bne.n	8005c60 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005c48:	490c      	ldr	r1, [pc, #48]	; (8005c7c <vQueueAddToRegistry+0x50>)
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	683a      	ldr	r2, [r7, #0]
 8005c4e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8005c52:	4a0a      	ldr	r2, [pc, #40]	; (8005c7c <vQueueAddToRegistry+0x50>)
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	00db      	lsls	r3, r3, #3
 8005c58:	4413      	add	r3, r2
 8005c5a:	687a      	ldr	r2, [r7, #4]
 8005c5c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8005c5e:	e006      	b.n	8005c6e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	3301      	adds	r3, #1
 8005c64:	60fb      	str	r3, [r7, #12]
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	2b07      	cmp	r3, #7
 8005c6a:	d9e7      	bls.n	8005c3c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8005c6c:	bf00      	nop
 8005c6e:	bf00      	nop
 8005c70:	3714      	adds	r7, #20
 8005c72:	46bd      	mov	sp, r7
 8005c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c78:	4770      	bx	lr
 8005c7a:	bf00      	nop
 8005c7c:	20001188 	.word	0x20001188

08005c80 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005c80:	b580      	push	{r7, lr}
 8005c82:	b08e      	sub	sp, #56	; 0x38
 8005c84:	af04      	add	r7, sp, #16
 8005c86:	60f8      	str	r0, [r7, #12]
 8005c88:	60b9      	str	r1, [r7, #8]
 8005c8a:	607a      	str	r2, [r7, #4]
 8005c8c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005c8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d10a      	bne.n	8005caa <xTaskCreateStatic+0x2a>
	__asm volatile
 8005c94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c98:	f383 8811 	msr	BASEPRI, r3
 8005c9c:	f3bf 8f6f 	isb	sy
 8005ca0:	f3bf 8f4f 	dsb	sy
 8005ca4:	623b      	str	r3, [r7, #32]
}
 8005ca6:	bf00      	nop
 8005ca8:	e7fe      	b.n	8005ca8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8005caa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d10a      	bne.n	8005cc6 <xTaskCreateStatic+0x46>
	__asm volatile
 8005cb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cb4:	f383 8811 	msr	BASEPRI, r3
 8005cb8:	f3bf 8f6f 	isb	sy
 8005cbc:	f3bf 8f4f 	dsb	sy
 8005cc0:	61fb      	str	r3, [r7, #28]
}
 8005cc2:	bf00      	nop
 8005cc4:	e7fe      	b.n	8005cc4 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005cc6:	23bc      	movs	r3, #188	; 0xbc
 8005cc8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005cca:	693b      	ldr	r3, [r7, #16]
 8005ccc:	2bbc      	cmp	r3, #188	; 0xbc
 8005cce:	d00a      	beq.n	8005ce6 <xTaskCreateStatic+0x66>
	__asm volatile
 8005cd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cd4:	f383 8811 	msr	BASEPRI, r3
 8005cd8:	f3bf 8f6f 	isb	sy
 8005cdc:	f3bf 8f4f 	dsb	sy
 8005ce0:	61bb      	str	r3, [r7, #24]
}
 8005ce2:	bf00      	nop
 8005ce4:	e7fe      	b.n	8005ce4 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005ce6:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005ce8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d01e      	beq.n	8005d2c <xTaskCreateStatic+0xac>
 8005cee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d01b      	beq.n	8005d2c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005cf4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cf6:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005cf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cfa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005cfc:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005cfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d00:	2202      	movs	r2, #2
 8005d02:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005d06:	2300      	movs	r3, #0
 8005d08:	9303      	str	r3, [sp, #12]
 8005d0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d0c:	9302      	str	r3, [sp, #8]
 8005d0e:	f107 0314 	add.w	r3, r7, #20
 8005d12:	9301      	str	r3, [sp, #4]
 8005d14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d16:	9300      	str	r3, [sp, #0]
 8005d18:	683b      	ldr	r3, [r7, #0]
 8005d1a:	687a      	ldr	r2, [r7, #4]
 8005d1c:	68b9      	ldr	r1, [r7, #8]
 8005d1e:	68f8      	ldr	r0, [r7, #12]
 8005d20:	f000 f850 	bl	8005dc4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005d24:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005d26:	f000 f8f3 	bl	8005f10 <prvAddNewTaskToReadyList>
 8005d2a:	e001      	b.n	8005d30 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8005d2c:	2300      	movs	r3, #0
 8005d2e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005d30:	697b      	ldr	r3, [r7, #20]
	}
 8005d32:	4618      	mov	r0, r3
 8005d34:	3728      	adds	r7, #40	; 0x28
 8005d36:	46bd      	mov	sp, r7
 8005d38:	bd80      	pop	{r7, pc}

08005d3a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005d3a:	b580      	push	{r7, lr}
 8005d3c:	b08c      	sub	sp, #48	; 0x30
 8005d3e:	af04      	add	r7, sp, #16
 8005d40:	60f8      	str	r0, [r7, #12]
 8005d42:	60b9      	str	r1, [r7, #8]
 8005d44:	603b      	str	r3, [r7, #0]
 8005d46:	4613      	mov	r3, r2
 8005d48:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005d4a:	88fb      	ldrh	r3, [r7, #6]
 8005d4c:	009b      	lsls	r3, r3, #2
 8005d4e:	4618      	mov	r0, r3
 8005d50:	f001 f874 	bl	8006e3c <pvPortMalloc>
 8005d54:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005d56:	697b      	ldr	r3, [r7, #20]
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d00e      	beq.n	8005d7a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005d5c:	20bc      	movs	r0, #188	; 0xbc
 8005d5e:	f001 f86d 	bl	8006e3c <pvPortMalloc>
 8005d62:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005d64:	69fb      	ldr	r3, [r7, #28]
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d003      	beq.n	8005d72 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005d6a:	69fb      	ldr	r3, [r7, #28]
 8005d6c:	697a      	ldr	r2, [r7, #20]
 8005d6e:	631a      	str	r2, [r3, #48]	; 0x30
 8005d70:	e005      	b.n	8005d7e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005d72:	6978      	ldr	r0, [r7, #20]
 8005d74:	f001 f92e 	bl	8006fd4 <vPortFree>
 8005d78:	e001      	b.n	8005d7e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005d7a:	2300      	movs	r3, #0
 8005d7c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005d7e:	69fb      	ldr	r3, [r7, #28]
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d017      	beq.n	8005db4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005d84:	69fb      	ldr	r3, [r7, #28]
 8005d86:	2200      	movs	r2, #0
 8005d88:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005d8c:	88fa      	ldrh	r2, [r7, #6]
 8005d8e:	2300      	movs	r3, #0
 8005d90:	9303      	str	r3, [sp, #12]
 8005d92:	69fb      	ldr	r3, [r7, #28]
 8005d94:	9302      	str	r3, [sp, #8]
 8005d96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d98:	9301      	str	r3, [sp, #4]
 8005d9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d9c:	9300      	str	r3, [sp, #0]
 8005d9e:	683b      	ldr	r3, [r7, #0]
 8005da0:	68b9      	ldr	r1, [r7, #8]
 8005da2:	68f8      	ldr	r0, [r7, #12]
 8005da4:	f000 f80e 	bl	8005dc4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005da8:	69f8      	ldr	r0, [r7, #28]
 8005daa:	f000 f8b1 	bl	8005f10 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005dae:	2301      	movs	r3, #1
 8005db0:	61bb      	str	r3, [r7, #24]
 8005db2:	e002      	b.n	8005dba <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005db4:	f04f 33ff 	mov.w	r3, #4294967295
 8005db8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005dba:	69bb      	ldr	r3, [r7, #24]
	}
 8005dbc:	4618      	mov	r0, r3
 8005dbe:	3720      	adds	r7, #32
 8005dc0:	46bd      	mov	sp, r7
 8005dc2:	bd80      	pop	{r7, pc}

08005dc4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005dc4:	b580      	push	{r7, lr}
 8005dc6:	b088      	sub	sp, #32
 8005dc8:	af00      	add	r7, sp, #0
 8005dca:	60f8      	str	r0, [r7, #12]
 8005dcc:	60b9      	str	r1, [r7, #8]
 8005dce:	607a      	str	r2, [r7, #4]
 8005dd0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8005dd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dd4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	009b      	lsls	r3, r3, #2
 8005dda:	461a      	mov	r2, r3
 8005ddc:	21a5      	movs	r1, #165	; 0xa5
 8005dde:	f001 fa51 	bl	8007284 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005de2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005de4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005dec:	3b01      	subs	r3, #1
 8005dee:	009b      	lsls	r3, r3, #2
 8005df0:	4413      	add	r3, r2
 8005df2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005df4:	69bb      	ldr	r3, [r7, #24]
 8005df6:	f023 0307 	bic.w	r3, r3, #7
 8005dfa:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005dfc:	69bb      	ldr	r3, [r7, #24]
 8005dfe:	f003 0307 	and.w	r3, r3, #7
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d00a      	beq.n	8005e1c <prvInitialiseNewTask+0x58>
	__asm volatile
 8005e06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e0a:	f383 8811 	msr	BASEPRI, r3
 8005e0e:	f3bf 8f6f 	isb	sy
 8005e12:	f3bf 8f4f 	dsb	sy
 8005e16:	617b      	str	r3, [r7, #20]
}
 8005e18:	bf00      	nop
 8005e1a:	e7fe      	b.n	8005e1a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005e1c:	68bb      	ldr	r3, [r7, #8]
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d01f      	beq.n	8005e62 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005e22:	2300      	movs	r3, #0
 8005e24:	61fb      	str	r3, [r7, #28]
 8005e26:	e012      	b.n	8005e4e <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005e28:	68ba      	ldr	r2, [r7, #8]
 8005e2a:	69fb      	ldr	r3, [r7, #28]
 8005e2c:	4413      	add	r3, r2
 8005e2e:	7819      	ldrb	r1, [r3, #0]
 8005e30:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005e32:	69fb      	ldr	r3, [r7, #28]
 8005e34:	4413      	add	r3, r2
 8005e36:	3334      	adds	r3, #52	; 0x34
 8005e38:	460a      	mov	r2, r1
 8005e3a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005e3c:	68ba      	ldr	r2, [r7, #8]
 8005e3e:	69fb      	ldr	r3, [r7, #28]
 8005e40:	4413      	add	r3, r2
 8005e42:	781b      	ldrb	r3, [r3, #0]
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d006      	beq.n	8005e56 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005e48:	69fb      	ldr	r3, [r7, #28]
 8005e4a:	3301      	adds	r3, #1
 8005e4c:	61fb      	str	r3, [r7, #28]
 8005e4e:	69fb      	ldr	r3, [r7, #28]
 8005e50:	2b0f      	cmp	r3, #15
 8005e52:	d9e9      	bls.n	8005e28 <prvInitialiseNewTask+0x64>
 8005e54:	e000      	b.n	8005e58 <prvInitialiseNewTask+0x94>
			{
				break;
 8005e56:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005e58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e5a:	2200      	movs	r2, #0
 8005e5c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005e60:	e003      	b.n	8005e6a <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005e62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e64:	2200      	movs	r2, #0
 8005e66:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005e6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e6c:	2b37      	cmp	r3, #55	; 0x37
 8005e6e:	d901      	bls.n	8005e74 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005e70:	2337      	movs	r3, #55	; 0x37
 8005e72:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005e74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e76:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005e78:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005e7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e7c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005e7e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8005e80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e82:	2200      	movs	r2, #0
 8005e84:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005e86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e88:	3304      	adds	r3, #4
 8005e8a:	4618      	mov	r0, r3
 8005e8c:	f7ff fac7 	bl	800541e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005e90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e92:	3318      	adds	r3, #24
 8005e94:	4618      	mov	r0, r3
 8005e96:	f7ff fac2 	bl	800541e <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005e9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e9c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005e9e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005ea0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ea2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005ea6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ea8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005eaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005eac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005eae:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005eb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005eb2:	2200      	movs	r2, #0
 8005eb4:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005eb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005eba:	2200      	movs	r2, #0
 8005ebc:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8005ec0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ec2:	3354      	adds	r3, #84	; 0x54
 8005ec4:	2260      	movs	r2, #96	; 0x60
 8005ec6:	2100      	movs	r1, #0
 8005ec8:	4618      	mov	r0, r3
 8005eca:	f001 f9db 	bl	8007284 <memset>
 8005ece:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ed0:	4a0c      	ldr	r2, [pc, #48]	; (8005f04 <prvInitialiseNewTask+0x140>)
 8005ed2:	659a      	str	r2, [r3, #88]	; 0x58
 8005ed4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ed6:	4a0c      	ldr	r2, [pc, #48]	; (8005f08 <prvInitialiseNewTask+0x144>)
 8005ed8:	65da      	str	r2, [r3, #92]	; 0x5c
 8005eda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005edc:	4a0b      	ldr	r2, [pc, #44]	; (8005f0c <prvInitialiseNewTask+0x148>)
 8005ede:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005ee0:	683a      	ldr	r2, [r7, #0]
 8005ee2:	68f9      	ldr	r1, [r7, #12]
 8005ee4:	69b8      	ldr	r0, [r7, #24]
 8005ee6:	f000 fe3f 	bl	8006b68 <pxPortInitialiseStack>
 8005eea:	4602      	mov	r2, r0
 8005eec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005eee:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8005ef0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d002      	beq.n	8005efc <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005ef6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ef8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005efa:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005efc:	bf00      	nop
 8005efe:	3720      	adds	r7, #32
 8005f00:	46bd      	mov	sp, r7
 8005f02:	bd80      	pop	{r7, pc}
 8005f04:	08007d04 	.word	0x08007d04
 8005f08:	08007d24 	.word	0x08007d24
 8005f0c:	08007ce4 	.word	0x08007ce4

08005f10 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005f10:	b580      	push	{r7, lr}
 8005f12:	b082      	sub	sp, #8
 8005f14:	af00      	add	r7, sp, #0
 8005f16:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005f18:	f000 fe9e 	bl	8006c58 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005f1c:	4b2d      	ldr	r3, [pc, #180]	; (8005fd4 <prvAddNewTaskToReadyList+0xc4>)
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	3301      	adds	r3, #1
 8005f22:	4a2c      	ldr	r2, [pc, #176]	; (8005fd4 <prvAddNewTaskToReadyList+0xc4>)
 8005f24:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005f26:	4b2c      	ldr	r3, [pc, #176]	; (8005fd8 <prvAddNewTaskToReadyList+0xc8>)
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d109      	bne.n	8005f42 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005f2e:	4a2a      	ldr	r2, [pc, #168]	; (8005fd8 <prvAddNewTaskToReadyList+0xc8>)
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005f34:	4b27      	ldr	r3, [pc, #156]	; (8005fd4 <prvAddNewTaskToReadyList+0xc4>)
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	2b01      	cmp	r3, #1
 8005f3a:	d110      	bne.n	8005f5e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005f3c:	f000 fb62 	bl	8006604 <prvInitialiseTaskLists>
 8005f40:	e00d      	b.n	8005f5e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005f42:	4b26      	ldr	r3, [pc, #152]	; (8005fdc <prvAddNewTaskToReadyList+0xcc>)
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d109      	bne.n	8005f5e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005f4a:	4b23      	ldr	r3, [pc, #140]	; (8005fd8 <prvAddNewTaskToReadyList+0xc8>)
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f54:	429a      	cmp	r2, r3
 8005f56:	d802      	bhi.n	8005f5e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005f58:	4a1f      	ldr	r2, [pc, #124]	; (8005fd8 <prvAddNewTaskToReadyList+0xc8>)
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005f5e:	4b20      	ldr	r3, [pc, #128]	; (8005fe0 <prvAddNewTaskToReadyList+0xd0>)
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	3301      	adds	r3, #1
 8005f64:	4a1e      	ldr	r2, [pc, #120]	; (8005fe0 <prvAddNewTaskToReadyList+0xd0>)
 8005f66:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005f68:	4b1d      	ldr	r3, [pc, #116]	; (8005fe0 <prvAddNewTaskToReadyList+0xd0>)
 8005f6a:	681a      	ldr	r2, [r3, #0]
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f74:	4b1b      	ldr	r3, [pc, #108]	; (8005fe4 <prvAddNewTaskToReadyList+0xd4>)
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	429a      	cmp	r2, r3
 8005f7a:	d903      	bls.n	8005f84 <prvAddNewTaskToReadyList+0x74>
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f80:	4a18      	ldr	r2, [pc, #96]	; (8005fe4 <prvAddNewTaskToReadyList+0xd4>)
 8005f82:	6013      	str	r3, [r2, #0]
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f88:	4613      	mov	r3, r2
 8005f8a:	009b      	lsls	r3, r3, #2
 8005f8c:	4413      	add	r3, r2
 8005f8e:	009b      	lsls	r3, r3, #2
 8005f90:	4a15      	ldr	r2, [pc, #84]	; (8005fe8 <prvAddNewTaskToReadyList+0xd8>)
 8005f92:	441a      	add	r2, r3
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	3304      	adds	r3, #4
 8005f98:	4619      	mov	r1, r3
 8005f9a:	4610      	mov	r0, r2
 8005f9c:	f7ff fa4c 	bl	8005438 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005fa0:	f000 fe8a 	bl	8006cb8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005fa4:	4b0d      	ldr	r3, [pc, #52]	; (8005fdc <prvAddNewTaskToReadyList+0xcc>)
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d00e      	beq.n	8005fca <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005fac:	4b0a      	ldr	r3, [pc, #40]	; (8005fd8 <prvAddNewTaskToReadyList+0xc8>)
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fb6:	429a      	cmp	r2, r3
 8005fb8:	d207      	bcs.n	8005fca <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005fba:	4b0c      	ldr	r3, [pc, #48]	; (8005fec <prvAddNewTaskToReadyList+0xdc>)
 8005fbc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005fc0:	601a      	str	r2, [r3, #0]
 8005fc2:	f3bf 8f4f 	dsb	sy
 8005fc6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005fca:	bf00      	nop
 8005fcc:	3708      	adds	r7, #8
 8005fce:	46bd      	mov	sp, r7
 8005fd0:	bd80      	pop	{r7, pc}
 8005fd2:	bf00      	nop
 8005fd4:	20001698 	.word	0x20001698
 8005fd8:	200011c8 	.word	0x200011c8
 8005fdc:	200016a4 	.word	0x200016a4
 8005fe0:	200016b4 	.word	0x200016b4
 8005fe4:	200016a0 	.word	0x200016a0
 8005fe8:	200011cc 	.word	0x200011cc
 8005fec:	e000ed04 	.word	0xe000ed04

08005ff0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005ff0:	b580      	push	{r7, lr}
 8005ff2:	b084      	sub	sp, #16
 8005ff4:	af00      	add	r7, sp, #0
 8005ff6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005ff8:	2300      	movs	r3, #0
 8005ffa:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d017      	beq.n	8006032 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006002:	4b13      	ldr	r3, [pc, #76]	; (8006050 <vTaskDelay+0x60>)
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	2b00      	cmp	r3, #0
 8006008:	d00a      	beq.n	8006020 <vTaskDelay+0x30>
	__asm volatile
 800600a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800600e:	f383 8811 	msr	BASEPRI, r3
 8006012:	f3bf 8f6f 	isb	sy
 8006016:	f3bf 8f4f 	dsb	sy
 800601a:	60bb      	str	r3, [r7, #8]
}
 800601c:	bf00      	nop
 800601e:	e7fe      	b.n	800601e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8006020:	f000 f81a 	bl	8006058 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006024:	2100      	movs	r1, #0
 8006026:	6878      	ldr	r0, [r7, #4]
 8006028:	f000 fbd8 	bl	80067dc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800602c:	f000 f822 	bl	8006074 <xTaskResumeAll>
 8006030:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	2b00      	cmp	r3, #0
 8006036:	d107      	bne.n	8006048 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8006038:	4b06      	ldr	r3, [pc, #24]	; (8006054 <vTaskDelay+0x64>)
 800603a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800603e:	601a      	str	r2, [r3, #0]
 8006040:	f3bf 8f4f 	dsb	sy
 8006044:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006048:	bf00      	nop
 800604a:	3710      	adds	r7, #16
 800604c:	46bd      	mov	sp, r7
 800604e:	bd80      	pop	{r7, pc}
 8006050:	200016bc 	.word	0x200016bc
 8006054:	e000ed04 	.word	0xe000ed04

08006058 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006058:	b480      	push	{r7}
 800605a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800605c:	4b04      	ldr	r3, [pc, #16]	; (8006070 <vTaskSuspendAll+0x18>)
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	3301      	adds	r3, #1
 8006062:	4a03      	ldr	r2, [pc, #12]	; (8006070 <vTaskSuspendAll+0x18>)
 8006064:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8006066:	bf00      	nop
 8006068:	46bd      	mov	sp, r7
 800606a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800606e:	4770      	bx	lr
 8006070:	200016bc 	.word	0x200016bc

08006074 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006074:	b580      	push	{r7, lr}
 8006076:	b084      	sub	sp, #16
 8006078:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800607a:	2300      	movs	r3, #0
 800607c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800607e:	2300      	movs	r3, #0
 8006080:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006082:	4b42      	ldr	r3, [pc, #264]	; (800618c <xTaskResumeAll+0x118>)
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	2b00      	cmp	r3, #0
 8006088:	d10a      	bne.n	80060a0 <xTaskResumeAll+0x2c>
	__asm volatile
 800608a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800608e:	f383 8811 	msr	BASEPRI, r3
 8006092:	f3bf 8f6f 	isb	sy
 8006096:	f3bf 8f4f 	dsb	sy
 800609a:	603b      	str	r3, [r7, #0]
}
 800609c:	bf00      	nop
 800609e:	e7fe      	b.n	800609e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80060a0:	f000 fdda 	bl	8006c58 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80060a4:	4b39      	ldr	r3, [pc, #228]	; (800618c <xTaskResumeAll+0x118>)
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	3b01      	subs	r3, #1
 80060aa:	4a38      	ldr	r2, [pc, #224]	; (800618c <xTaskResumeAll+0x118>)
 80060ac:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80060ae:	4b37      	ldr	r3, [pc, #220]	; (800618c <xTaskResumeAll+0x118>)
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d162      	bne.n	800617c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80060b6:	4b36      	ldr	r3, [pc, #216]	; (8006190 <xTaskResumeAll+0x11c>)
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d05e      	beq.n	800617c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80060be:	e02f      	b.n	8006120 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80060c0:	4b34      	ldr	r3, [pc, #208]	; (8006194 <xTaskResumeAll+0x120>)
 80060c2:	68db      	ldr	r3, [r3, #12]
 80060c4:	68db      	ldr	r3, [r3, #12]
 80060c6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	3318      	adds	r3, #24
 80060cc:	4618      	mov	r0, r3
 80060ce:	f7ff fa10 	bl	80054f2 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	3304      	adds	r3, #4
 80060d6:	4618      	mov	r0, r3
 80060d8:	f7ff fa0b 	bl	80054f2 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80060e0:	4b2d      	ldr	r3, [pc, #180]	; (8006198 <xTaskResumeAll+0x124>)
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	429a      	cmp	r2, r3
 80060e6:	d903      	bls.n	80060f0 <xTaskResumeAll+0x7c>
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060ec:	4a2a      	ldr	r2, [pc, #168]	; (8006198 <xTaskResumeAll+0x124>)
 80060ee:	6013      	str	r3, [r2, #0]
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80060f4:	4613      	mov	r3, r2
 80060f6:	009b      	lsls	r3, r3, #2
 80060f8:	4413      	add	r3, r2
 80060fa:	009b      	lsls	r3, r3, #2
 80060fc:	4a27      	ldr	r2, [pc, #156]	; (800619c <xTaskResumeAll+0x128>)
 80060fe:	441a      	add	r2, r3
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	3304      	adds	r3, #4
 8006104:	4619      	mov	r1, r3
 8006106:	4610      	mov	r0, r2
 8006108:	f7ff f996 	bl	8005438 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006110:	4b23      	ldr	r3, [pc, #140]	; (80061a0 <xTaskResumeAll+0x12c>)
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006116:	429a      	cmp	r2, r3
 8006118:	d302      	bcc.n	8006120 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800611a:	4b22      	ldr	r3, [pc, #136]	; (80061a4 <xTaskResumeAll+0x130>)
 800611c:	2201      	movs	r2, #1
 800611e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006120:	4b1c      	ldr	r3, [pc, #112]	; (8006194 <xTaskResumeAll+0x120>)
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	2b00      	cmp	r3, #0
 8006126:	d1cb      	bne.n	80060c0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	2b00      	cmp	r3, #0
 800612c:	d001      	beq.n	8006132 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800612e:	f000 faa9 	bl	8006684 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8006132:	4b1d      	ldr	r3, [pc, #116]	; (80061a8 <xTaskResumeAll+0x134>)
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	2b00      	cmp	r3, #0
 800613c:	d010      	beq.n	8006160 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800613e:	f000 f837 	bl	80061b0 <xTaskIncrementTick>
 8006142:	4603      	mov	r3, r0
 8006144:	2b00      	cmp	r3, #0
 8006146:	d002      	beq.n	800614e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8006148:	4b16      	ldr	r3, [pc, #88]	; (80061a4 <xTaskResumeAll+0x130>)
 800614a:	2201      	movs	r2, #1
 800614c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	3b01      	subs	r3, #1
 8006152:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	2b00      	cmp	r3, #0
 8006158:	d1f1      	bne.n	800613e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800615a:	4b13      	ldr	r3, [pc, #76]	; (80061a8 <xTaskResumeAll+0x134>)
 800615c:	2200      	movs	r2, #0
 800615e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006160:	4b10      	ldr	r3, [pc, #64]	; (80061a4 <xTaskResumeAll+0x130>)
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	2b00      	cmp	r3, #0
 8006166:	d009      	beq.n	800617c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006168:	2301      	movs	r3, #1
 800616a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800616c:	4b0f      	ldr	r3, [pc, #60]	; (80061ac <xTaskResumeAll+0x138>)
 800616e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006172:	601a      	str	r2, [r3, #0]
 8006174:	f3bf 8f4f 	dsb	sy
 8006178:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800617c:	f000 fd9c 	bl	8006cb8 <vPortExitCritical>

	return xAlreadyYielded;
 8006180:	68bb      	ldr	r3, [r7, #8]
}
 8006182:	4618      	mov	r0, r3
 8006184:	3710      	adds	r7, #16
 8006186:	46bd      	mov	sp, r7
 8006188:	bd80      	pop	{r7, pc}
 800618a:	bf00      	nop
 800618c:	200016bc 	.word	0x200016bc
 8006190:	20001698 	.word	0x20001698
 8006194:	2000165c 	.word	0x2000165c
 8006198:	200016a0 	.word	0x200016a0
 800619c:	200011cc 	.word	0x200011cc
 80061a0:	200011c8 	.word	0x200011c8
 80061a4:	200016ac 	.word	0x200016ac
 80061a8:	200016a8 	.word	0x200016a8
 80061ac:	e000ed04 	.word	0xe000ed04

080061b0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80061b0:	b580      	push	{r7, lr}
 80061b2:	b086      	sub	sp, #24
 80061b4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80061b6:	2300      	movs	r3, #0
 80061b8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80061ba:	4b4f      	ldr	r3, [pc, #316]	; (80062f8 <xTaskIncrementTick+0x148>)
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	2b00      	cmp	r3, #0
 80061c0:	f040 808f 	bne.w	80062e2 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80061c4:	4b4d      	ldr	r3, [pc, #308]	; (80062fc <xTaskIncrementTick+0x14c>)
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	3301      	adds	r3, #1
 80061ca:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80061cc:	4a4b      	ldr	r2, [pc, #300]	; (80062fc <xTaskIncrementTick+0x14c>)
 80061ce:	693b      	ldr	r3, [r7, #16]
 80061d0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80061d2:	693b      	ldr	r3, [r7, #16]
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d120      	bne.n	800621a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80061d8:	4b49      	ldr	r3, [pc, #292]	; (8006300 <xTaskIncrementTick+0x150>)
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d00a      	beq.n	80061f8 <xTaskIncrementTick+0x48>
	__asm volatile
 80061e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061e6:	f383 8811 	msr	BASEPRI, r3
 80061ea:	f3bf 8f6f 	isb	sy
 80061ee:	f3bf 8f4f 	dsb	sy
 80061f2:	603b      	str	r3, [r7, #0]
}
 80061f4:	bf00      	nop
 80061f6:	e7fe      	b.n	80061f6 <xTaskIncrementTick+0x46>
 80061f8:	4b41      	ldr	r3, [pc, #260]	; (8006300 <xTaskIncrementTick+0x150>)
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	60fb      	str	r3, [r7, #12]
 80061fe:	4b41      	ldr	r3, [pc, #260]	; (8006304 <xTaskIncrementTick+0x154>)
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	4a3f      	ldr	r2, [pc, #252]	; (8006300 <xTaskIncrementTick+0x150>)
 8006204:	6013      	str	r3, [r2, #0]
 8006206:	4a3f      	ldr	r2, [pc, #252]	; (8006304 <xTaskIncrementTick+0x154>)
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	6013      	str	r3, [r2, #0]
 800620c:	4b3e      	ldr	r3, [pc, #248]	; (8006308 <xTaskIncrementTick+0x158>)
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	3301      	adds	r3, #1
 8006212:	4a3d      	ldr	r2, [pc, #244]	; (8006308 <xTaskIncrementTick+0x158>)
 8006214:	6013      	str	r3, [r2, #0]
 8006216:	f000 fa35 	bl	8006684 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800621a:	4b3c      	ldr	r3, [pc, #240]	; (800630c <xTaskIncrementTick+0x15c>)
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	693a      	ldr	r2, [r7, #16]
 8006220:	429a      	cmp	r2, r3
 8006222:	d349      	bcc.n	80062b8 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006224:	4b36      	ldr	r3, [pc, #216]	; (8006300 <xTaskIncrementTick+0x150>)
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	2b00      	cmp	r3, #0
 800622c:	d104      	bne.n	8006238 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800622e:	4b37      	ldr	r3, [pc, #220]	; (800630c <xTaskIncrementTick+0x15c>)
 8006230:	f04f 32ff 	mov.w	r2, #4294967295
 8006234:	601a      	str	r2, [r3, #0]
					break;
 8006236:	e03f      	b.n	80062b8 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006238:	4b31      	ldr	r3, [pc, #196]	; (8006300 <xTaskIncrementTick+0x150>)
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	68db      	ldr	r3, [r3, #12]
 800623e:	68db      	ldr	r3, [r3, #12]
 8006240:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006242:	68bb      	ldr	r3, [r7, #8]
 8006244:	685b      	ldr	r3, [r3, #4]
 8006246:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006248:	693a      	ldr	r2, [r7, #16]
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	429a      	cmp	r2, r3
 800624e:	d203      	bcs.n	8006258 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006250:	4a2e      	ldr	r2, [pc, #184]	; (800630c <xTaskIncrementTick+0x15c>)
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006256:	e02f      	b.n	80062b8 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006258:	68bb      	ldr	r3, [r7, #8]
 800625a:	3304      	adds	r3, #4
 800625c:	4618      	mov	r0, r3
 800625e:	f7ff f948 	bl	80054f2 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006262:	68bb      	ldr	r3, [r7, #8]
 8006264:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006266:	2b00      	cmp	r3, #0
 8006268:	d004      	beq.n	8006274 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800626a:	68bb      	ldr	r3, [r7, #8]
 800626c:	3318      	adds	r3, #24
 800626e:	4618      	mov	r0, r3
 8006270:	f7ff f93f 	bl	80054f2 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006274:	68bb      	ldr	r3, [r7, #8]
 8006276:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006278:	4b25      	ldr	r3, [pc, #148]	; (8006310 <xTaskIncrementTick+0x160>)
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	429a      	cmp	r2, r3
 800627e:	d903      	bls.n	8006288 <xTaskIncrementTick+0xd8>
 8006280:	68bb      	ldr	r3, [r7, #8]
 8006282:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006284:	4a22      	ldr	r2, [pc, #136]	; (8006310 <xTaskIncrementTick+0x160>)
 8006286:	6013      	str	r3, [r2, #0]
 8006288:	68bb      	ldr	r3, [r7, #8]
 800628a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800628c:	4613      	mov	r3, r2
 800628e:	009b      	lsls	r3, r3, #2
 8006290:	4413      	add	r3, r2
 8006292:	009b      	lsls	r3, r3, #2
 8006294:	4a1f      	ldr	r2, [pc, #124]	; (8006314 <xTaskIncrementTick+0x164>)
 8006296:	441a      	add	r2, r3
 8006298:	68bb      	ldr	r3, [r7, #8]
 800629a:	3304      	adds	r3, #4
 800629c:	4619      	mov	r1, r3
 800629e:	4610      	mov	r0, r2
 80062a0:	f7ff f8ca 	bl	8005438 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80062a4:	68bb      	ldr	r3, [r7, #8]
 80062a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80062a8:	4b1b      	ldr	r3, [pc, #108]	; (8006318 <xTaskIncrementTick+0x168>)
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062ae:	429a      	cmp	r2, r3
 80062b0:	d3b8      	bcc.n	8006224 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80062b2:	2301      	movs	r3, #1
 80062b4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80062b6:	e7b5      	b.n	8006224 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80062b8:	4b17      	ldr	r3, [pc, #92]	; (8006318 <xTaskIncrementTick+0x168>)
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80062be:	4915      	ldr	r1, [pc, #84]	; (8006314 <xTaskIncrementTick+0x164>)
 80062c0:	4613      	mov	r3, r2
 80062c2:	009b      	lsls	r3, r3, #2
 80062c4:	4413      	add	r3, r2
 80062c6:	009b      	lsls	r3, r3, #2
 80062c8:	440b      	add	r3, r1
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	2b01      	cmp	r3, #1
 80062ce:	d901      	bls.n	80062d4 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80062d0:	2301      	movs	r3, #1
 80062d2:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80062d4:	4b11      	ldr	r3, [pc, #68]	; (800631c <xTaskIncrementTick+0x16c>)
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d007      	beq.n	80062ec <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80062dc:	2301      	movs	r3, #1
 80062de:	617b      	str	r3, [r7, #20]
 80062e0:	e004      	b.n	80062ec <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80062e2:	4b0f      	ldr	r3, [pc, #60]	; (8006320 <xTaskIncrementTick+0x170>)
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	3301      	adds	r3, #1
 80062e8:	4a0d      	ldr	r2, [pc, #52]	; (8006320 <xTaskIncrementTick+0x170>)
 80062ea:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80062ec:	697b      	ldr	r3, [r7, #20]
}
 80062ee:	4618      	mov	r0, r3
 80062f0:	3718      	adds	r7, #24
 80062f2:	46bd      	mov	sp, r7
 80062f4:	bd80      	pop	{r7, pc}
 80062f6:	bf00      	nop
 80062f8:	200016bc 	.word	0x200016bc
 80062fc:	2000169c 	.word	0x2000169c
 8006300:	20001654 	.word	0x20001654
 8006304:	20001658 	.word	0x20001658
 8006308:	200016b0 	.word	0x200016b0
 800630c:	200016b8 	.word	0x200016b8
 8006310:	200016a0 	.word	0x200016a0
 8006314:	200011cc 	.word	0x200011cc
 8006318:	200011c8 	.word	0x200011c8
 800631c:	200016ac 	.word	0x200016ac
 8006320:	200016a8 	.word	0x200016a8

08006324 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006324:	b480      	push	{r7}
 8006326:	b085      	sub	sp, #20
 8006328:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800632a:	4b2a      	ldr	r3, [pc, #168]	; (80063d4 <vTaskSwitchContext+0xb0>)
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	2b00      	cmp	r3, #0
 8006330:	d003      	beq.n	800633a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006332:	4b29      	ldr	r3, [pc, #164]	; (80063d8 <vTaskSwitchContext+0xb4>)
 8006334:	2201      	movs	r2, #1
 8006336:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006338:	e046      	b.n	80063c8 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800633a:	4b27      	ldr	r3, [pc, #156]	; (80063d8 <vTaskSwitchContext+0xb4>)
 800633c:	2200      	movs	r2, #0
 800633e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006340:	4b26      	ldr	r3, [pc, #152]	; (80063dc <vTaskSwitchContext+0xb8>)
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	60fb      	str	r3, [r7, #12]
 8006346:	e010      	b.n	800636a <vTaskSwitchContext+0x46>
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	2b00      	cmp	r3, #0
 800634c:	d10a      	bne.n	8006364 <vTaskSwitchContext+0x40>
	__asm volatile
 800634e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006352:	f383 8811 	msr	BASEPRI, r3
 8006356:	f3bf 8f6f 	isb	sy
 800635a:	f3bf 8f4f 	dsb	sy
 800635e:	607b      	str	r3, [r7, #4]
}
 8006360:	bf00      	nop
 8006362:	e7fe      	b.n	8006362 <vTaskSwitchContext+0x3e>
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	3b01      	subs	r3, #1
 8006368:	60fb      	str	r3, [r7, #12]
 800636a:	491d      	ldr	r1, [pc, #116]	; (80063e0 <vTaskSwitchContext+0xbc>)
 800636c:	68fa      	ldr	r2, [r7, #12]
 800636e:	4613      	mov	r3, r2
 8006370:	009b      	lsls	r3, r3, #2
 8006372:	4413      	add	r3, r2
 8006374:	009b      	lsls	r3, r3, #2
 8006376:	440b      	add	r3, r1
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	2b00      	cmp	r3, #0
 800637c:	d0e4      	beq.n	8006348 <vTaskSwitchContext+0x24>
 800637e:	68fa      	ldr	r2, [r7, #12]
 8006380:	4613      	mov	r3, r2
 8006382:	009b      	lsls	r3, r3, #2
 8006384:	4413      	add	r3, r2
 8006386:	009b      	lsls	r3, r3, #2
 8006388:	4a15      	ldr	r2, [pc, #84]	; (80063e0 <vTaskSwitchContext+0xbc>)
 800638a:	4413      	add	r3, r2
 800638c:	60bb      	str	r3, [r7, #8]
 800638e:	68bb      	ldr	r3, [r7, #8]
 8006390:	685b      	ldr	r3, [r3, #4]
 8006392:	685a      	ldr	r2, [r3, #4]
 8006394:	68bb      	ldr	r3, [r7, #8]
 8006396:	605a      	str	r2, [r3, #4]
 8006398:	68bb      	ldr	r3, [r7, #8]
 800639a:	685a      	ldr	r2, [r3, #4]
 800639c:	68bb      	ldr	r3, [r7, #8]
 800639e:	3308      	adds	r3, #8
 80063a0:	429a      	cmp	r2, r3
 80063a2:	d104      	bne.n	80063ae <vTaskSwitchContext+0x8a>
 80063a4:	68bb      	ldr	r3, [r7, #8]
 80063a6:	685b      	ldr	r3, [r3, #4]
 80063a8:	685a      	ldr	r2, [r3, #4]
 80063aa:	68bb      	ldr	r3, [r7, #8]
 80063ac:	605a      	str	r2, [r3, #4]
 80063ae:	68bb      	ldr	r3, [r7, #8]
 80063b0:	685b      	ldr	r3, [r3, #4]
 80063b2:	68db      	ldr	r3, [r3, #12]
 80063b4:	4a0b      	ldr	r2, [pc, #44]	; (80063e4 <vTaskSwitchContext+0xc0>)
 80063b6:	6013      	str	r3, [r2, #0]
 80063b8:	4a08      	ldr	r2, [pc, #32]	; (80063dc <vTaskSwitchContext+0xb8>)
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80063be:	4b09      	ldr	r3, [pc, #36]	; (80063e4 <vTaskSwitchContext+0xc0>)
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	3354      	adds	r3, #84	; 0x54
 80063c4:	4a08      	ldr	r2, [pc, #32]	; (80063e8 <vTaskSwitchContext+0xc4>)
 80063c6:	6013      	str	r3, [r2, #0]
}
 80063c8:	bf00      	nop
 80063ca:	3714      	adds	r7, #20
 80063cc:	46bd      	mov	sp, r7
 80063ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d2:	4770      	bx	lr
 80063d4:	200016bc 	.word	0x200016bc
 80063d8:	200016ac 	.word	0x200016ac
 80063dc:	200016a0 	.word	0x200016a0
 80063e0:	200011cc 	.word	0x200011cc
 80063e4:	200011c8 	.word	0x200011c8
 80063e8:	20000010 	.word	0x20000010

080063ec <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80063ec:	b580      	push	{r7, lr}
 80063ee:	b084      	sub	sp, #16
 80063f0:	af00      	add	r7, sp, #0
 80063f2:	6078      	str	r0, [r7, #4]
 80063f4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d10a      	bne.n	8006412 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80063fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006400:	f383 8811 	msr	BASEPRI, r3
 8006404:	f3bf 8f6f 	isb	sy
 8006408:	f3bf 8f4f 	dsb	sy
 800640c:	60fb      	str	r3, [r7, #12]
}
 800640e:	bf00      	nop
 8006410:	e7fe      	b.n	8006410 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006412:	4b07      	ldr	r3, [pc, #28]	; (8006430 <vTaskPlaceOnEventList+0x44>)
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	3318      	adds	r3, #24
 8006418:	4619      	mov	r1, r3
 800641a:	6878      	ldr	r0, [r7, #4]
 800641c:	f7ff f830 	bl	8005480 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006420:	2101      	movs	r1, #1
 8006422:	6838      	ldr	r0, [r7, #0]
 8006424:	f000 f9da 	bl	80067dc <prvAddCurrentTaskToDelayedList>
}
 8006428:	bf00      	nop
 800642a:	3710      	adds	r7, #16
 800642c:	46bd      	mov	sp, r7
 800642e:	bd80      	pop	{r7, pc}
 8006430:	200011c8 	.word	0x200011c8

08006434 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006434:	b580      	push	{r7, lr}
 8006436:	b086      	sub	sp, #24
 8006438:	af00      	add	r7, sp, #0
 800643a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	68db      	ldr	r3, [r3, #12]
 8006440:	68db      	ldr	r3, [r3, #12]
 8006442:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006444:	693b      	ldr	r3, [r7, #16]
 8006446:	2b00      	cmp	r3, #0
 8006448:	d10a      	bne.n	8006460 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800644a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800644e:	f383 8811 	msr	BASEPRI, r3
 8006452:	f3bf 8f6f 	isb	sy
 8006456:	f3bf 8f4f 	dsb	sy
 800645a:	60fb      	str	r3, [r7, #12]
}
 800645c:	bf00      	nop
 800645e:	e7fe      	b.n	800645e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006460:	693b      	ldr	r3, [r7, #16]
 8006462:	3318      	adds	r3, #24
 8006464:	4618      	mov	r0, r3
 8006466:	f7ff f844 	bl	80054f2 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800646a:	4b1e      	ldr	r3, [pc, #120]	; (80064e4 <xTaskRemoveFromEventList+0xb0>)
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	2b00      	cmp	r3, #0
 8006470:	d11d      	bne.n	80064ae <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006472:	693b      	ldr	r3, [r7, #16]
 8006474:	3304      	adds	r3, #4
 8006476:	4618      	mov	r0, r3
 8006478:	f7ff f83b 	bl	80054f2 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800647c:	693b      	ldr	r3, [r7, #16]
 800647e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006480:	4b19      	ldr	r3, [pc, #100]	; (80064e8 <xTaskRemoveFromEventList+0xb4>)
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	429a      	cmp	r2, r3
 8006486:	d903      	bls.n	8006490 <xTaskRemoveFromEventList+0x5c>
 8006488:	693b      	ldr	r3, [r7, #16]
 800648a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800648c:	4a16      	ldr	r2, [pc, #88]	; (80064e8 <xTaskRemoveFromEventList+0xb4>)
 800648e:	6013      	str	r3, [r2, #0]
 8006490:	693b      	ldr	r3, [r7, #16]
 8006492:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006494:	4613      	mov	r3, r2
 8006496:	009b      	lsls	r3, r3, #2
 8006498:	4413      	add	r3, r2
 800649a:	009b      	lsls	r3, r3, #2
 800649c:	4a13      	ldr	r2, [pc, #76]	; (80064ec <xTaskRemoveFromEventList+0xb8>)
 800649e:	441a      	add	r2, r3
 80064a0:	693b      	ldr	r3, [r7, #16]
 80064a2:	3304      	adds	r3, #4
 80064a4:	4619      	mov	r1, r3
 80064a6:	4610      	mov	r0, r2
 80064a8:	f7fe ffc6 	bl	8005438 <vListInsertEnd>
 80064ac:	e005      	b.n	80064ba <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80064ae:	693b      	ldr	r3, [r7, #16]
 80064b0:	3318      	adds	r3, #24
 80064b2:	4619      	mov	r1, r3
 80064b4:	480e      	ldr	r0, [pc, #56]	; (80064f0 <xTaskRemoveFromEventList+0xbc>)
 80064b6:	f7fe ffbf 	bl	8005438 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80064ba:	693b      	ldr	r3, [r7, #16]
 80064bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80064be:	4b0d      	ldr	r3, [pc, #52]	; (80064f4 <xTaskRemoveFromEventList+0xc0>)
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064c4:	429a      	cmp	r2, r3
 80064c6:	d905      	bls.n	80064d4 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80064c8:	2301      	movs	r3, #1
 80064ca:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80064cc:	4b0a      	ldr	r3, [pc, #40]	; (80064f8 <xTaskRemoveFromEventList+0xc4>)
 80064ce:	2201      	movs	r2, #1
 80064d0:	601a      	str	r2, [r3, #0]
 80064d2:	e001      	b.n	80064d8 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80064d4:	2300      	movs	r3, #0
 80064d6:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80064d8:	697b      	ldr	r3, [r7, #20]
}
 80064da:	4618      	mov	r0, r3
 80064dc:	3718      	adds	r7, #24
 80064de:	46bd      	mov	sp, r7
 80064e0:	bd80      	pop	{r7, pc}
 80064e2:	bf00      	nop
 80064e4:	200016bc 	.word	0x200016bc
 80064e8:	200016a0 	.word	0x200016a0
 80064ec:	200011cc 	.word	0x200011cc
 80064f0:	2000165c 	.word	0x2000165c
 80064f4:	200011c8 	.word	0x200011c8
 80064f8:	200016ac 	.word	0x200016ac

080064fc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80064fc:	b480      	push	{r7}
 80064fe:	b083      	sub	sp, #12
 8006500:	af00      	add	r7, sp, #0
 8006502:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006504:	4b06      	ldr	r3, [pc, #24]	; (8006520 <vTaskInternalSetTimeOutState+0x24>)
 8006506:	681a      	ldr	r2, [r3, #0]
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800650c:	4b05      	ldr	r3, [pc, #20]	; (8006524 <vTaskInternalSetTimeOutState+0x28>)
 800650e:	681a      	ldr	r2, [r3, #0]
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	605a      	str	r2, [r3, #4]
}
 8006514:	bf00      	nop
 8006516:	370c      	adds	r7, #12
 8006518:	46bd      	mov	sp, r7
 800651a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800651e:	4770      	bx	lr
 8006520:	200016b0 	.word	0x200016b0
 8006524:	2000169c 	.word	0x2000169c

08006528 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006528:	b580      	push	{r7, lr}
 800652a:	b088      	sub	sp, #32
 800652c:	af00      	add	r7, sp, #0
 800652e:	6078      	str	r0, [r7, #4]
 8006530:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	2b00      	cmp	r3, #0
 8006536:	d10a      	bne.n	800654e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8006538:	f04f 0350 	mov.w	r3, #80	; 0x50
 800653c:	f383 8811 	msr	BASEPRI, r3
 8006540:	f3bf 8f6f 	isb	sy
 8006544:	f3bf 8f4f 	dsb	sy
 8006548:	613b      	str	r3, [r7, #16]
}
 800654a:	bf00      	nop
 800654c:	e7fe      	b.n	800654c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800654e:	683b      	ldr	r3, [r7, #0]
 8006550:	2b00      	cmp	r3, #0
 8006552:	d10a      	bne.n	800656a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8006554:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006558:	f383 8811 	msr	BASEPRI, r3
 800655c:	f3bf 8f6f 	isb	sy
 8006560:	f3bf 8f4f 	dsb	sy
 8006564:	60fb      	str	r3, [r7, #12]
}
 8006566:	bf00      	nop
 8006568:	e7fe      	b.n	8006568 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800656a:	f000 fb75 	bl	8006c58 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800656e:	4b1d      	ldr	r3, [pc, #116]	; (80065e4 <xTaskCheckForTimeOut+0xbc>)
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	685b      	ldr	r3, [r3, #4]
 8006578:	69ba      	ldr	r2, [r7, #24]
 800657a:	1ad3      	subs	r3, r2, r3
 800657c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800657e:	683b      	ldr	r3, [r7, #0]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006586:	d102      	bne.n	800658e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006588:	2300      	movs	r3, #0
 800658a:	61fb      	str	r3, [r7, #28]
 800658c:	e023      	b.n	80065d6 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	681a      	ldr	r2, [r3, #0]
 8006592:	4b15      	ldr	r3, [pc, #84]	; (80065e8 <xTaskCheckForTimeOut+0xc0>)
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	429a      	cmp	r2, r3
 8006598:	d007      	beq.n	80065aa <xTaskCheckForTimeOut+0x82>
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	685b      	ldr	r3, [r3, #4]
 800659e:	69ba      	ldr	r2, [r7, #24]
 80065a0:	429a      	cmp	r2, r3
 80065a2:	d302      	bcc.n	80065aa <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80065a4:	2301      	movs	r3, #1
 80065a6:	61fb      	str	r3, [r7, #28]
 80065a8:	e015      	b.n	80065d6 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80065aa:	683b      	ldr	r3, [r7, #0]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	697a      	ldr	r2, [r7, #20]
 80065b0:	429a      	cmp	r2, r3
 80065b2:	d20b      	bcs.n	80065cc <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80065b4:	683b      	ldr	r3, [r7, #0]
 80065b6:	681a      	ldr	r2, [r3, #0]
 80065b8:	697b      	ldr	r3, [r7, #20]
 80065ba:	1ad2      	subs	r2, r2, r3
 80065bc:	683b      	ldr	r3, [r7, #0]
 80065be:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80065c0:	6878      	ldr	r0, [r7, #4]
 80065c2:	f7ff ff9b 	bl	80064fc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80065c6:	2300      	movs	r3, #0
 80065c8:	61fb      	str	r3, [r7, #28]
 80065ca:	e004      	b.n	80065d6 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80065cc:	683b      	ldr	r3, [r7, #0]
 80065ce:	2200      	movs	r2, #0
 80065d0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80065d2:	2301      	movs	r3, #1
 80065d4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80065d6:	f000 fb6f 	bl	8006cb8 <vPortExitCritical>

	return xReturn;
 80065da:	69fb      	ldr	r3, [r7, #28]
}
 80065dc:	4618      	mov	r0, r3
 80065de:	3720      	adds	r7, #32
 80065e0:	46bd      	mov	sp, r7
 80065e2:	bd80      	pop	{r7, pc}
 80065e4:	2000169c 	.word	0x2000169c
 80065e8:	200016b0 	.word	0x200016b0

080065ec <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80065ec:	b480      	push	{r7}
 80065ee:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80065f0:	4b03      	ldr	r3, [pc, #12]	; (8006600 <vTaskMissedYield+0x14>)
 80065f2:	2201      	movs	r2, #1
 80065f4:	601a      	str	r2, [r3, #0]
}
 80065f6:	bf00      	nop
 80065f8:	46bd      	mov	sp, r7
 80065fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065fe:	4770      	bx	lr
 8006600:	200016ac 	.word	0x200016ac

08006604 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006604:	b580      	push	{r7, lr}
 8006606:	b082      	sub	sp, #8
 8006608:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800660a:	2300      	movs	r3, #0
 800660c:	607b      	str	r3, [r7, #4]
 800660e:	e00c      	b.n	800662a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006610:	687a      	ldr	r2, [r7, #4]
 8006612:	4613      	mov	r3, r2
 8006614:	009b      	lsls	r3, r3, #2
 8006616:	4413      	add	r3, r2
 8006618:	009b      	lsls	r3, r3, #2
 800661a:	4a12      	ldr	r2, [pc, #72]	; (8006664 <prvInitialiseTaskLists+0x60>)
 800661c:	4413      	add	r3, r2
 800661e:	4618      	mov	r0, r3
 8006620:	f7fe fedd 	bl	80053de <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	3301      	adds	r3, #1
 8006628:	607b      	str	r3, [r7, #4]
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	2b37      	cmp	r3, #55	; 0x37
 800662e:	d9ef      	bls.n	8006610 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006630:	480d      	ldr	r0, [pc, #52]	; (8006668 <prvInitialiseTaskLists+0x64>)
 8006632:	f7fe fed4 	bl	80053de <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006636:	480d      	ldr	r0, [pc, #52]	; (800666c <prvInitialiseTaskLists+0x68>)
 8006638:	f7fe fed1 	bl	80053de <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800663c:	480c      	ldr	r0, [pc, #48]	; (8006670 <prvInitialiseTaskLists+0x6c>)
 800663e:	f7fe fece 	bl	80053de <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006642:	480c      	ldr	r0, [pc, #48]	; (8006674 <prvInitialiseTaskLists+0x70>)
 8006644:	f7fe fecb 	bl	80053de <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006648:	480b      	ldr	r0, [pc, #44]	; (8006678 <prvInitialiseTaskLists+0x74>)
 800664a:	f7fe fec8 	bl	80053de <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800664e:	4b0b      	ldr	r3, [pc, #44]	; (800667c <prvInitialiseTaskLists+0x78>)
 8006650:	4a05      	ldr	r2, [pc, #20]	; (8006668 <prvInitialiseTaskLists+0x64>)
 8006652:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006654:	4b0a      	ldr	r3, [pc, #40]	; (8006680 <prvInitialiseTaskLists+0x7c>)
 8006656:	4a05      	ldr	r2, [pc, #20]	; (800666c <prvInitialiseTaskLists+0x68>)
 8006658:	601a      	str	r2, [r3, #0]
}
 800665a:	bf00      	nop
 800665c:	3708      	adds	r7, #8
 800665e:	46bd      	mov	sp, r7
 8006660:	bd80      	pop	{r7, pc}
 8006662:	bf00      	nop
 8006664:	200011cc 	.word	0x200011cc
 8006668:	2000162c 	.word	0x2000162c
 800666c:	20001640 	.word	0x20001640
 8006670:	2000165c 	.word	0x2000165c
 8006674:	20001670 	.word	0x20001670
 8006678:	20001684 	.word	0x20001684
 800667c:	20001654 	.word	0x20001654
 8006680:	20001658 	.word	0x20001658

08006684 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006684:	b480      	push	{r7}
 8006686:	b083      	sub	sp, #12
 8006688:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800668a:	4b0c      	ldr	r3, [pc, #48]	; (80066bc <prvResetNextTaskUnblockTime+0x38>)
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	2b00      	cmp	r3, #0
 8006692:	d104      	bne.n	800669e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006694:	4b0a      	ldr	r3, [pc, #40]	; (80066c0 <prvResetNextTaskUnblockTime+0x3c>)
 8006696:	f04f 32ff 	mov.w	r2, #4294967295
 800669a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800669c:	e008      	b.n	80066b0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800669e:	4b07      	ldr	r3, [pc, #28]	; (80066bc <prvResetNextTaskUnblockTime+0x38>)
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	68db      	ldr	r3, [r3, #12]
 80066a4:	68db      	ldr	r3, [r3, #12]
 80066a6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	685b      	ldr	r3, [r3, #4]
 80066ac:	4a04      	ldr	r2, [pc, #16]	; (80066c0 <prvResetNextTaskUnblockTime+0x3c>)
 80066ae:	6013      	str	r3, [r2, #0]
}
 80066b0:	bf00      	nop
 80066b2:	370c      	adds	r7, #12
 80066b4:	46bd      	mov	sp, r7
 80066b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ba:	4770      	bx	lr
 80066bc:	20001654 	.word	0x20001654
 80066c0:	200016b8 	.word	0x200016b8

080066c4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80066c4:	b480      	push	{r7}
 80066c6:	b083      	sub	sp, #12
 80066c8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80066ca:	4b0b      	ldr	r3, [pc, #44]	; (80066f8 <xTaskGetSchedulerState+0x34>)
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d102      	bne.n	80066d8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80066d2:	2301      	movs	r3, #1
 80066d4:	607b      	str	r3, [r7, #4]
 80066d6:	e008      	b.n	80066ea <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80066d8:	4b08      	ldr	r3, [pc, #32]	; (80066fc <xTaskGetSchedulerState+0x38>)
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d102      	bne.n	80066e6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80066e0:	2302      	movs	r3, #2
 80066e2:	607b      	str	r3, [r7, #4]
 80066e4:	e001      	b.n	80066ea <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80066e6:	2300      	movs	r3, #0
 80066e8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80066ea:	687b      	ldr	r3, [r7, #4]
	}
 80066ec:	4618      	mov	r0, r3
 80066ee:	370c      	adds	r7, #12
 80066f0:	46bd      	mov	sp, r7
 80066f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f6:	4770      	bx	lr
 80066f8:	200016a4 	.word	0x200016a4
 80066fc:	200016bc 	.word	0x200016bc

08006700 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006700:	b580      	push	{r7, lr}
 8006702:	b086      	sub	sp, #24
 8006704:	af00      	add	r7, sp, #0
 8006706:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800670c:	2300      	movs	r3, #0
 800670e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	2b00      	cmp	r3, #0
 8006714:	d056      	beq.n	80067c4 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006716:	4b2e      	ldr	r3, [pc, #184]	; (80067d0 <xTaskPriorityDisinherit+0xd0>)
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	693a      	ldr	r2, [r7, #16]
 800671c:	429a      	cmp	r2, r3
 800671e:	d00a      	beq.n	8006736 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8006720:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006724:	f383 8811 	msr	BASEPRI, r3
 8006728:	f3bf 8f6f 	isb	sy
 800672c:	f3bf 8f4f 	dsb	sy
 8006730:	60fb      	str	r3, [r7, #12]
}
 8006732:	bf00      	nop
 8006734:	e7fe      	b.n	8006734 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8006736:	693b      	ldr	r3, [r7, #16]
 8006738:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800673a:	2b00      	cmp	r3, #0
 800673c:	d10a      	bne.n	8006754 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800673e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006742:	f383 8811 	msr	BASEPRI, r3
 8006746:	f3bf 8f6f 	isb	sy
 800674a:	f3bf 8f4f 	dsb	sy
 800674e:	60bb      	str	r3, [r7, #8]
}
 8006750:	bf00      	nop
 8006752:	e7fe      	b.n	8006752 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8006754:	693b      	ldr	r3, [r7, #16]
 8006756:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006758:	1e5a      	subs	r2, r3, #1
 800675a:	693b      	ldr	r3, [r7, #16]
 800675c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800675e:	693b      	ldr	r3, [r7, #16]
 8006760:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006762:	693b      	ldr	r3, [r7, #16]
 8006764:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006766:	429a      	cmp	r2, r3
 8006768:	d02c      	beq.n	80067c4 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800676a:	693b      	ldr	r3, [r7, #16]
 800676c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800676e:	2b00      	cmp	r3, #0
 8006770:	d128      	bne.n	80067c4 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006772:	693b      	ldr	r3, [r7, #16]
 8006774:	3304      	adds	r3, #4
 8006776:	4618      	mov	r0, r3
 8006778:	f7fe febb 	bl	80054f2 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800677c:	693b      	ldr	r3, [r7, #16]
 800677e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006780:	693b      	ldr	r3, [r7, #16]
 8006782:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006784:	693b      	ldr	r3, [r7, #16]
 8006786:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006788:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800678c:	693b      	ldr	r3, [r7, #16]
 800678e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006790:	693b      	ldr	r3, [r7, #16]
 8006792:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006794:	4b0f      	ldr	r3, [pc, #60]	; (80067d4 <xTaskPriorityDisinherit+0xd4>)
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	429a      	cmp	r2, r3
 800679a:	d903      	bls.n	80067a4 <xTaskPriorityDisinherit+0xa4>
 800679c:	693b      	ldr	r3, [r7, #16]
 800679e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067a0:	4a0c      	ldr	r2, [pc, #48]	; (80067d4 <xTaskPriorityDisinherit+0xd4>)
 80067a2:	6013      	str	r3, [r2, #0]
 80067a4:	693b      	ldr	r3, [r7, #16]
 80067a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80067a8:	4613      	mov	r3, r2
 80067aa:	009b      	lsls	r3, r3, #2
 80067ac:	4413      	add	r3, r2
 80067ae:	009b      	lsls	r3, r3, #2
 80067b0:	4a09      	ldr	r2, [pc, #36]	; (80067d8 <xTaskPriorityDisinherit+0xd8>)
 80067b2:	441a      	add	r2, r3
 80067b4:	693b      	ldr	r3, [r7, #16]
 80067b6:	3304      	adds	r3, #4
 80067b8:	4619      	mov	r1, r3
 80067ba:	4610      	mov	r0, r2
 80067bc:	f7fe fe3c 	bl	8005438 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80067c0:	2301      	movs	r3, #1
 80067c2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80067c4:	697b      	ldr	r3, [r7, #20]
	}
 80067c6:	4618      	mov	r0, r3
 80067c8:	3718      	adds	r7, #24
 80067ca:	46bd      	mov	sp, r7
 80067cc:	bd80      	pop	{r7, pc}
 80067ce:	bf00      	nop
 80067d0:	200011c8 	.word	0x200011c8
 80067d4:	200016a0 	.word	0x200016a0
 80067d8:	200011cc 	.word	0x200011cc

080067dc <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80067dc:	b580      	push	{r7, lr}
 80067de:	b084      	sub	sp, #16
 80067e0:	af00      	add	r7, sp, #0
 80067e2:	6078      	str	r0, [r7, #4]
 80067e4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80067e6:	4b21      	ldr	r3, [pc, #132]	; (800686c <prvAddCurrentTaskToDelayedList+0x90>)
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80067ec:	4b20      	ldr	r3, [pc, #128]	; (8006870 <prvAddCurrentTaskToDelayedList+0x94>)
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	3304      	adds	r3, #4
 80067f2:	4618      	mov	r0, r3
 80067f4:	f7fe fe7d 	bl	80054f2 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067fe:	d10a      	bne.n	8006816 <prvAddCurrentTaskToDelayedList+0x3a>
 8006800:	683b      	ldr	r3, [r7, #0]
 8006802:	2b00      	cmp	r3, #0
 8006804:	d007      	beq.n	8006816 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006806:	4b1a      	ldr	r3, [pc, #104]	; (8006870 <prvAddCurrentTaskToDelayedList+0x94>)
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	3304      	adds	r3, #4
 800680c:	4619      	mov	r1, r3
 800680e:	4819      	ldr	r0, [pc, #100]	; (8006874 <prvAddCurrentTaskToDelayedList+0x98>)
 8006810:	f7fe fe12 	bl	8005438 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006814:	e026      	b.n	8006864 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006816:	68fa      	ldr	r2, [r7, #12]
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	4413      	add	r3, r2
 800681c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800681e:	4b14      	ldr	r3, [pc, #80]	; (8006870 <prvAddCurrentTaskToDelayedList+0x94>)
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	68ba      	ldr	r2, [r7, #8]
 8006824:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006826:	68ba      	ldr	r2, [r7, #8]
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	429a      	cmp	r2, r3
 800682c:	d209      	bcs.n	8006842 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800682e:	4b12      	ldr	r3, [pc, #72]	; (8006878 <prvAddCurrentTaskToDelayedList+0x9c>)
 8006830:	681a      	ldr	r2, [r3, #0]
 8006832:	4b0f      	ldr	r3, [pc, #60]	; (8006870 <prvAddCurrentTaskToDelayedList+0x94>)
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	3304      	adds	r3, #4
 8006838:	4619      	mov	r1, r3
 800683a:	4610      	mov	r0, r2
 800683c:	f7fe fe20 	bl	8005480 <vListInsert>
}
 8006840:	e010      	b.n	8006864 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006842:	4b0e      	ldr	r3, [pc, #56]	; (800687c <prvAddCurrentTaskToDelayedList+0xa0>)
 8006844:	681a      	ldr	r2, [r3, #0]
 8006846:	4b0a      	ldr	r3, [pc, #40]	; (8006870 <prvAddCurrentTaskToDelayedList+0x94>)
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	3304      	adds	r3, #4
 800684c:	4619      	mov	r1, r3
 800684e:	4610      	mov	r0, r2
 8006850:	f7fe fe16 	bl	8005480 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006854:	4b0a      	ldr	r3, [pc, #40]	; (8006880 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	68ba      	ldr	r2, [r7, #8]
 800685a:	429a      	cmp	r2, r3
 800685c:	d202      	bcs.n	8006864 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800685e:	4a08      	ldr	r2, [pc, #32]	; (8006880 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006860:	68bb      	ldr	r3, [r7, #8]
 8006862:	6013      	str	r3, [r2, #0]
}
 8006864:	bf00      	nop
 8006866:	3710      	adds	r7, #16
 8006868:	46bd      	mov	sp, r7
 800686a:	bd80      	pop	{r7, pc}
 800686c:	2000169c 	.word	0x2000169c
 8006870:	200011c8 	.word	0x200011c8
 8006874:	20001684 	.word	0x20001684
 8006878:	20001658 	.word	0x20001658
 800687c:	20001654 	.word	0x20001654
 8006880:	200016b8 	.word	0x200016b8

08006884 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 8006884:	b580      	push	{r7, lr}
 8006886:	b088      	sub	sp, #32
 8006888:	af02      	add	r7, sp, #8
 800688a:	60f8      	str	r0, [r7, #12]
 800688c:	60b9      	str	r1, [r7, #8]
 800688e:	607a      	str	r2, [r7, #4]
 8006890:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 8006892:	202c      	movs	r0, #44	; 0x2c
 8006894:	f000 fad2 	bl	8006e3c <pvPortMalloc>
 8006898:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 800689a:	697b      	ldr	r3, [r7, #20]
 800689c:	2b00      	cmp	r3, #0
 800689e:	d00d      	beq.n	80068bc <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The auto-reload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 80068a0:	697b      	ldr	r3, [r7, #20]
 80068a2:	2200      	movs	r2, #0
 80068a4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 80068a8:	697b      	ldr	r3, [r7, #20]
 80068aa:	9301      	str	r3, [sp, #4]
 80068ac:	6a3b      	ldr	r3, [r7, #32]
 80068ae:	9300      	str	r3, [sp, #0]
 80068b0:	683b      	ldr	r3, [r7, #0]
 80068b2:	687a      	ldr	r2, [r7, #4]
 80068b4:	68b9      	ldr	r1, [r7, #8]
 80068b6:	68f8      	ldr	r0, [r7, #12]
 80068b8:	f000 f843 	bl	8006942 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 80068bc:	697b      	ldr	r3, [r7, #20]
	}
 80068be:	4618      	mov	r0, r3
 80068c0:	3718      	adds	r7, #24
 80068c2:	46bd      	mov	sp, r7
 80068c4:	bd80      	pop	{r7, pc}

080068c6 <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 80068c6:	b580      	push	{r7, lr}
 80068c8:	b08a      	sub	sp, #40	; 0x28
 80068ca:	af02      	add	r7, sp, #8
 80068cc:	60f8      	str	r0, [r7, #12]
 80068ce:	60b9      	str	r1, [r7, #8]
 80068d0:	607a      	str	r2, [r7, #4]
 80068d2:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 80068d4:	232c      	movs	r3, #44	; 0x2c
 80068d6:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 80068d8:	693b      	ldr	r3, [r7, #16]
 80068da:	2b2c      	cmp	r3, #44	; 0x2c
 80068dc:	d00a      	beq.n	80068f4 <xTimerCreateStatic+0x2e>
	__asm volatile
 80068de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068e2:	f383 8811 	msr	BASEPRI, r3
 80068e6:	f3bf 8f6f 	isb	sy
 80068ea:	f3bf 8f4f 	dsb	sy
 80068ee:	61bb      	str	r3, [r7, #24]
}
 80068f0:	bf00      	nop
 80068f2:	e7fe      	b.n	80068f2 <xTimerCreateStatic+0x2c>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80068f4:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 80068f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d10a      	bne.n	8006912 <xTimerCreateStatic+0x4c>
	__asm volatile
 80068fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006900:	f383 8811 	msr	BASEPRI, r3
 8006904:	f3bf 8f6f 	isb	sy
 8006908:	f3bf 8f4f 	dsb	sy
 800690c:	617b      	str	r3, [r7, #20]
}
 800690e:	bf00      	nop
 8006910:	e7fe      	b.n	8006910 <xTimerCreateStatic+0x4a>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 !e9087 StaticTimer_t is a pointer to a Timer_t, so guaranteed to be aligned and sized correctly (checked by an assert()), so this is safe. */
 8006912:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006914:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 8006916:	69fb      	ldr	r3, [r7, #28]
 8006918:	2b00      	cmp	r3, #0
 800691a:	d00d      	beq.n	8006938 <xTimerCreateStatic+0x72>
		{
			/* Timers can be created statically or dynamically so note this
			timer was created statically in case it is later deleted.  The
			auto-reload bit may get set in prvInitialiseNewTimer(). */
			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 800691c:	69fb      	ldr	r3, [r7, #28]
 800691e:	2202      	movs	r2, #2
 8006920:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8006924:	69fb      	ldr	r3, [r7, #28]
 8006926:	9301      	str	r3, [sp, #4]
 8006928:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800692a:	9300      	str	r3, [sp, #0]
 800692c:	683b      	ldr	r3, [r7, #0]
 800692e:	687a      	ldr	r2, [r7, #4]
 8006930:	68b9      	ldr	r1, [r7, #8]
 8006932:	68f8      	ldr	r0, [r7, #12]
 8006934:	f000 f805 	bl	8006942 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 8006938:	69fb      	ldr	r3, [r7, #28]
	}
 800693a:	4618      	mov	r0, r3
 800693c:	3720      	adds	r7, #32
 800693e:	46bd      	mov	sp, r7
 8006940:	bd80      	pop	{r7, pc}

08006942 <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 8006942:	b580      	push	{r7, lr}
 8006944:	b086      	sub	sp, #24
 8006946:	af00      	add	r7, sp, #0
 8006948:	60f8      	str	r0, [r7, #12]
 800694a:	60b9      	str	r1, [r7, #8]
 800694c:	607a      	str	r2, [r7, #4]
 800694e:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8006950:	68bb      	ldr	r3, [r7, #8]
 8006952:	2b00      	cmp	r3, #0
 8006954:	d10a      	bne.n	800696c <prvInitialiseNewTimer+0x2a>
	__asm volatile
 8006956:	f04f 0350 	mov.w	r3, #80	; 0x50
 800695a:	f383 8811 	msr	BASEPRI, r3
 800695e:	f3bf 8f6f 	isb	sy
 8006962:	f3bf 8f4f 	dsb	sy
 8006966:	617b      	str	r3, [r7, #20]
}
 8006968:	bf00      	nop
 800696a:	e7fe      	b.n	800696a <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 800696c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800696e:	2b00      	cmp	r3, #0
 8006970:	d01e      	beq.n	80069b0 <prvInitialiseNewTimer+0x6e>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 8006972:	f000 f86f 	bl	8006a54 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 8006976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006978:	68fa      	ldr	r2, [r7, #12]
 800697a:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 800697c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800697e:	68ba      	ldr	r2, [r7, #8]
 8006980:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 8006982:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006984:	683a      	ldr	r2, [r7, #0]
 8006986:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8006988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800698a:	6a3a      	ldr	r2, [r7, #32]
 800698c:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 800698e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006990:	3304      	adds	r3, #4
 8006992:	4618      	mov	r0, r3
 8006994:	f7fe fd43 	bl	800541e <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	2b00      	cmp	r3, #0
 800699c:	d008      	beq.n	80069b0 <prvInitialiseNewTimer+0x6e>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 800699e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069a0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80069a4:	f043 0304 	orr.w	r3, r3, #4
 80069a8:	b2da      	uxtb	r2, r3
 80069aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069ac:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 80069b0:	bf00      	nop
 80069b2:	3718      	adds	r7, #24
 80069b4:	46bd      	mov	sp, r7
 80069b6:	bd80      	pop	{r7, pc}

080069b8 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80069b8:	b580      	push	{r7, lr}
 80069ba:	b08a      	sub	sp, #40	; 0x28
 80069bc:	af00      	add	r7, sp, #0
 80069be:	60f8      	str	r0, [r7, #12]
 80069c0:	60b9      	str	r1, [r7, #8]
 80069c2:	607a      	str	r2, [r7, #4]
 80069c4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80069c6:	2300      	movs	r3, #0
 80069c8:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d10a      	bne.n	80069e6 <xTimerGenericCommand+0x2e>
	__asm volatile
 80069d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069d4:	f383 8811 	msr	BASEPRI, r3
 80069d8:	f3bf 8f6f 	isb	sy
 80069dc:	f3bf 8f4f 	dsb	sy
 80069e0:	623b      	str	r3, [r7, #32]
}
 80069e2:	bf00      	nop
 80069e4:	e7fe      	b.n	80069e4 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80069e6:	4b1a      	ldr	r3, [pc, #104]	; (8006a50 <xTimerGenericCommand+0x98>)
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d02a      	beq.n	8006a44 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80069ee:	68bb      	ldr	r3, [r7, #8]
 80069f0:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80069fa:	68bb      	ldr	r3, [r7, #8]
 80069fc:	2b05      	cmp	r3, #5
 80069fe:	dc18      	bgt.n	8006a32 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006a00:	f7ff fe60 	bl	80066c4 <xTaskGetSchedulerState>
 8006a04:	4603      	mov	r3, r0
 8006a06:	2b02      	cmp	r3, #2
 8006a08:	d109      	bne.n	8006a1e <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8006a0a:	4b11      	ldr	r3, [pc, #68]	; (8006a50 <xTimerGenericCommand+0x98>)
 8006a0c:	6818      	ldr	r0, [r3, #0]
 8006a0e:	f107 0110 	add.w	r1, r7, #16
 8006a12:	2300      	movs	r3, #0
 8006a14:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006a16:	f7fe fe9b 	bl	8005750 <xQueueGenericSend>
 8006a1a:	6278      	str	r0, [r7, #36]	; 0x24
 8006a1c:	e012      	b.n	8006a44 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8006a1e:	4b0c      	ldr	r3, [pc, #48]	; (8006a50 <xTimerGenericCommand+0x98>)
 8006a20:	6818      	ldr	r0, [r3, #0]
 8006a22:	f107 0110 	add.w	r1, r7, #16
 8006a26:	2300      	movs	r3, #0
 8006a28:	2200      	movs	r2, #0
 8006a2a:	f7fe fe91 	bl	8005750 <xQueueGenericSend>
 8006a2e:	6278      	str	r0, [r7, #36]	; 0x24
 8006a30:	e008      	b.n	8006a44 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8006a32:	4b07      	ldr	r3, [pc, #28]	; (8006a50 <xTimerGenericCommand+0x98>)
 8006a34:	6818      	ldr	r0, [r3, #0]
 8006a36:	f107 0110 	add.w	r1, r7, #16
 8006a3a:	2300      	movs	r3, #0
 8006a3c:	683a      	ldr	r2, [r7, #0]
 8006a3e:	f7fe ff85 	bl	800594c <xQueueGenericSendFromISR>
 8006a42:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8006a44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006a46:	4618      	mov	r0, r3
 8006a48:	3728      	adds	r7, #40	; 0x28
 8006a4a:	46bd      	mov	sp, r7
 8006a4c:	bd80      	pop	{r7, pc}
 8006a4e:	bf00      	nop
 8006a50:	200016f0 	.word	0x200016f0

08006a54 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8006a54:	b580      	push	{r7, lr}
 8006a56:	b082      	sub	sp, #8
 8006a58:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8006a5a:	f000 f8fd 	bl	8006c58 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8006a5e:	4b15      	ldr	r3, [pc, #84]	; (8006ab4 <prvCheckForValidListAndQueue+0x60>)
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d120      	bne.n	8006aa8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8006a66:	4814      	ldr	r0, [pc, #80]	; (8006ab8 <prvCheckForValidListAndQueue+0x64>)
 8006a68:	f7fe fcb9 	bl	80053de <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8006a6c:	4813      	ldr	r0, [pc, #76]	; (8006abc <prvCheckForValidListAndQueue+0x68>)
 8006a6e:	f7fe fcb6 	bl	80053de <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8006a72:	4b13      	ldr	r3, [pc, #76]	; (8006ac0 <prvCheckForValidListAndQueue+0x6c>)
 8006a74:	4a10      	ldr	r2, [pc, #64]	; (8006ab8 <prvCheckForValidListAndQueue+0x64>)
 8006a76:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8006a78:	4b12      	ldr	r3, [pc, #72]	; (8006ac4 <prvCheckForValidListAndQueue+0x70>)
 8006a7a:	4a10      	ldr	r2, [pc, #64]	; (8006abc <prvCheckForValidListAndQueue+0x68>)
 8006a7c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8006a7e:	2300      	movs	r3, #0
 8006a80:	9300      	str	r3, [sp, #0]
 8006a82:	4b11      	ldr	r3, [pc, #68]	; (8006ac8 <prvCheckForValidListAndQueue+0x74>)
 8006a84:	4a11      	ldr	r2, [pc, #68]	; (8006acc <prvCheckForValidListAndQueue+0x78>)
 8006a86:	2110      	movs	r1, #16
 8006a88:	200a      	movs	r0, #10
 8006a8a:	f7fe fdc5 	bl	8005618 <xQueueGenericCreateStatic>
 8006a8e:	4603      	mov	r3, r0
 8006a90:	4a08      	ldr	r2, [pc, #32]	; (8006ab4 <prvCheckForValidListAndQueue+0x60>)
 8006a92:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8006a94:	4b07      	ldr	r3, [pc, #28]	; (8006ab4 <prvCheckForValidListAndQueue+0x60>)
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d005      	beq.n	8006aa8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006a9c:	4b05      	ldr	r3, [pc, #20]	; (8006ab4 <prvCheckForValidListAndQueue+0x60>)
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	490b      	ldr	r1, [pc, #44]	; (8006ad0 <prvCheckForValidListAndQueue+0x7c>)
 8006aa2:	4618      	mov	r0, r3
 8006aa4:	f7ff f8c2 	bl	8005c2c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006aa8:	f000 f906 	bl	8006cb8 <vPortExitCritical>
}
 8006aac:	bf00      	nop
 8006aae:	46bd      	mov	sp, r7
 8006ab0:	bd80      	pop	{r7, pc}
 8006ab2:	bf00      	nop
 8006ab4:	200016f0 	.word	0x200016f0
 8006ab8:	200016c0 	.word	0x200016c0
 8006abc:	200016d4 	.word	0x200016d4
 8006ac0:	200016e8 	.word	0x200016e8
 8006ac4:	200016ec 	.word	0x200016ec
 8006ac8:	20001794 	.word	0x20001794
 8006acc:	200016f4 	.word	0x200016f4
 8006ad0:	08007bf8 	.word	0x08007bf8

08006ad4 <xTimerIsTimerActive>:
/*-----------------------------------------------------------*/

BaseType_t xTimerIsTimerActive( TimerHandle_t xTimer )
{
 8006ad4:	b580      	push	{r7, lr}
 8006ad6:	b086      	sub	sp, #24
 8006ad8:	af00      	add	r7, sp, #0
 8006ada:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;
Timer_t *pxTimer = xTimer;
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	613b      	str	r3, [r7, #16]

	configASSERT( xTimer );
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d10a      	bne.n	8006afc <xTimerIsTimerActive+0x28>
	__asm volatile
 8006ae6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006aea:	f383 8811 	msr	BASEPRI, r3
 8006aee:	f3bf 8f6f 	isb	sy
 8006af2:	f3bf 8f4f 	dsb	sy
 8006af6:	60fb      	str	r3, [r7, #12]
}
 8006af8:	bf00      	nop
 8006afa:	e7fe      	b.n	8006afa <xTimerIsTimerActive+0x26>

	/* Is the timer in the list of active timers? */
	taskENTER_CRITICAL();
 8006afc:	f000 f8ac 	bl	8006c58 <vPortEnterCritical>
	{
		if( ( pxTimer->ucStatus & tmrSTATUS_IS_ACTIVE ) == 0 )
 8006b00:	693b      	ldr	r3, [r7, #16]
 8006b02:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006b06:	f003 0301 	and.w	r3, r3, #1
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d102      	bne.n	8006b14 <xTimerIsTimerActive+0x40>
		{
			xReturn = pdFALSE;
 8006b0e:	2300      	movs	r3, #0
 8006b10:	617b      	str	r3, [r7, #20]
 8006b12:	e001      	b.n	8006b18 <xTimerIsTimerActive+0x44>
		}
		else
		{
			xReturn = pdTRUE;
 8006b14:	2301      	movs	r3, #1
 8006b16:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
 8006b18:	f000 f8ce 	bl	8006cb8 <vPortExitCritical>

	return xReturn;
 8006b1c:	697b      	ldr	r3, [r7, #20]
} /*lint !e818 Can't be pointer to const due to the typedef. */
 8006b1e:	4618      	mov	r0, r3
 8006b20:	3718      	adds	r7, #24
 8006b22:	46bd      	mov	sp, r7
 8006b24:	bd80      	pop	{r7, pc}

08006b26 <pvTimerGetTimerID>:
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 8006b26:	b580      	push	{r7, lr}
 8006b28:	b086      	sub	sp, #24
 8006b2a:	af00      	add	r7, sp, #0
 8006b2c:	6078      	str	r0, [r7, #4]
Timer_t * const pxTimer = xTimer;
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	617b      	str	r3, [r7, #20]
void *pvReturn;

	configASSERT( xTimer );
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d10a      	bne.n	8006b4e <pvTimerGetTimerID+0x28>
	__asm volatile
 8006b38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b3c:	f383 8811 	msr	BASEPRI, r3
 8006b40:	f3bf 8f6f 	isb	sy
 8006b44:	f3bf 8f4f 	dsb	sy
 8006b48:	60fb      	str	r3, [r7, #12]
}
 8006b4a:	bf00      	nop
 8006b4c:	e7fe      	b.n	8006b4c <pvTimerGetTimerID+0x26>

	taskENTER_CRITICAL();
 8006b4e:	f000 f883 	bl	8006c58 <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 8006b52:	697b      	ldr	r3, [r7, #20]
 8006b54:	69db      	ldr	r3, [r3, #28]
 8006b56:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 8006b58:	f000 f8ae 	bl	8006cb8 <vPortExitCritical>

	return pvReturn;
 8006b5c:	693b      	ldr	r3, [r7, #16]
}
 8006b5e:	4618      	mov	r0, r3
 8006b60:	3718      	adds	r7, #24
 8006b62:	46bd      	mov	sp, r7
 8006b64:	bd80      	pop	{r7, pc}
	...

08006b68 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006b68:	b480      	push	{r7}
 8006b6a:	b085      	sub	sp, #20
 8006b6c:	af00      	add	r7, sp, #0
 8006b6e:	60f8      	str	r0, [r7, #12]
 8006b70:	60b9      	str	r1, [r7, #8]
 8006b72:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	3b04      	subs	r3, #4
 8006b78:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006b80:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	3b04      	subs	r3, #4
 8006b86:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006b88:	68bb      	ldr	r3, [r7, #8]
 8006b8a:	f023 0201 	bic.w	r2, r3, #1
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	3b04      	subs	r3, #4
 8006b96:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006b98:	4a0c      	ldr	r2, [pc, #48]	; (8006bcc <pxPortInitialiseStack+0x64>)
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	3b14      	subs	r3, #20
 8006ba2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006ba4:	687a      	ldr	r2, [r7, #4]
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	3b04      	subs	r3, #4
 8006bae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	f06f 0202 	mvn.w	r2, #2
 8006bb6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	3b20      	subs	r3, #32
 8006bbc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006bbe:	68fb      	ldr	r3, [r7, #12]
}
 8006bc0:	4618      	mov	r0, r3
 8006bc2:	3714      	adds	r7, #20
 8006bc4:	46bd      	mov	sp, r7
 8006bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bca:	4770      	bx	lr
 8006bcc:	08006bd1 	.word	0x08006bd1

08006bd0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006bd0:	b480      	push	{r7}
 8006bd2:	b085      	sub	sp, #20
 8006bd4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8006bd6:	2300      	movs	r3, #0
 8006bd8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006bda:	4b12      	ldr	r3, [pc, #72]	; (8006c24 <prvTaskExitError+0x54>)
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006be2:	d00a      	beq.n	8006bfa <prvTaskExitError+0x2a>
	__asm volatile
 8006be4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006be8:	f383 8811 	msr	BASEPRI, r3
 8006bec:	f3bf 8f6f 	isb	sy
 8006bf0:	f3bf 8f4f 	dsb	sy
 8006bf4:	60fb      	str	r3, [r7, #12]
}
 8006bf6:	bf00      	nop
 8006bf8:	e7fe      	b.n	8006bf8 <prvTaskExitError+0x28>
	__asm volatile
 8006bfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bfe:	f383 8811 	msr	BASEPRI, r3
 8006c02:	f3bf 8f6f 	isb	sy
 8006c06:	f3bf 8f4f 	dsb	sy
 8006c0a:	60bb      	str	r3, [r7, #8]
}
 8006c0c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006c0e:	bf00      	nop
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d0fc      	beq.n	8006c10 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006c16:	bf00      	nop
 8006c18:	bf00      	nop
 8006c1a:	3714      	adds	r7, #20
 8006c1c:	46bd      	mov	sp, r7
 8006c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c22:	4770      	bx	lr
 8006c24:	2000000c 	.word	0x2000000c
	...

08006c30 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006c30:	4b07      	ldr	r3, [pc, #28]	; (8006c50 <pxCurrentTCBConst2>)
 8006c32:	6819      	ldr	r1, [r3, #0]
 8006c34:	6808      	ldr	r0, [r1, #0]
 8006c36:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c3a:	f380 8809 	msr	PSP, r0
 8006c3e:	f3bf 8f6f 	isb	sy
 8006c42:	f04f 0000 	mov.w	r0, #0
 8006c46:	f380 8811 	msr	BASEPRI, r0
 8006c4a:	4770      	bx	lr
 8006c4c:	f3af 8000 	nop.w

08006c50 <pxCurrentTCBConst2>:
 8006c50:	200011c8 	.word	0x200011c8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006c54:	bf00      	nop
 8006c56:	bf00      	nop

08006c58 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006c58:	b480      	push	{r7}
 8006c5a:	b083      	sub	sp, #12
 8006c5c:	af00      	add	r7, sp, #0
	__asm volatile
 8006c5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c62:	f383 8811 	msr	BASEPRI, r3
 8006c66:	f3bf 8f6f 	isb	sy
 8006c6a:	f3bf 8f4f 	dsb	sy
 8006c6e:	607b      	str	r3, [r7, #4]
}
 8006c70:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006c72:	4b0f      	ldr	r3, [pc, #60]	; (8006cb0 <vPortEnterCritical+0x58>)
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	3301      	adds	r3, #1
 8006c78:	4a0d      	ldr	r2, [pc, #52]	; (8006cb0 <vPortEnterCritical+0x58>)
 8006c7a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006c7c:	4b0c      	ldr	r3, [pc, #48]	; (8006cb0 <vPortEnterCritical+0x58>)
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	2b01      	cmp	r3, #1
 8006c82:	d10f      	bne.n	8006ca4 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006c84:	4b0b      	ldr	r3, [pc, #44]	; (8006cb4 <vPortEnterCritical+0x5c>)
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	b2db      	uxtb	r3, r3
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d00a      	beq.n	8006ca4 <vPortEnterCritical+0x4c>
	__asm volatile
 8006c8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c92:	f383 8811 	msr	BASEPRI, r3
 8006c96:	f3bf 8f6f 	isb	sy
 8006c9a:	f3bf 8f4f 	dsb	sy
 8006c9e:	603b      	str	r3, [r7, #0]
}
 8006ca0:	bf00      	nop
 8006ca2:	e7fe      	b.n	8006ca2 <vPortEnterCritical+0x4a>
	}
}
 8006ca4:	bf00      	nop
 8006ca6:	370c      	adds	r7, #12
 8006ca8:	46bd      	mov	sp, r7
 8006caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cae:	4770      	bx	lr
 8006cb0:	2000000c 	.word	0x2000000c
 8006cb4:	e000ed04 	.word	0xe000ed04

08006cb8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006cb8:	b480      	push	{r7}
 8006cba:	b083      	sub	sp, #12
 8006cbc:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006cbe:	4b12      	ldr	r3, [pc, #72]	; (8006d08 <vPortExitCritical+0x50>)
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d10a      	bne.n	8006cdc <vPortExitCritical+0x24>
	__asm volatile
 8006cc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cca:	f383 8811 	msr	BASEPRI, r3
 8006cce:	f3bf 8f6f 	isb	sy
 8006cd2:	f3bf 8f4f 	dsb	sy
 8006cd6:	607b      	str	r3, [r7, #4]
}
 8006cd8:	bf00      	nop
 8006cda:	e7fe      	b.n	8006cda <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006cdc:	4b0a      	ldr	r3, [pc, #40]	; (8006d08 <vPortExitCritical+0x50>)
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	3b01      	subs	r3, #1
 8006ce2:	4a09      	ldr	r2, [pc, #36]	; (8006d08 <vPortExitCritical+0x50>)
 8006ce4:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006ce6:	4b08      	ldr	r3, [pc, #32]	; (8006d08 <vPortExitCritical+0x50>)
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d105      	bne.n	8006cfa <vPortExitCritical+0x42>
 8006cee:	2300      	movs	r3, #0
 8006cf0:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006cf2:	683b      	ldr	r3, [r7, #0]
 8006cf4:	f383 8811 	msr	BASEPRI, r3
}
 8006cf8:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006cfa:	bf00      	nop
 8006cfc:	370c      	adds	r7, #12
 8006cfe:	46bd      	mov	sp, r7
 8006d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d04:	4770      	bx	lr
 8006d06:	bf00      	nop
 8006d08:	2000000c 	.word	0x2000000c
 8006d0c:	00000000 	.word	0x00000000

08006d10 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006d10:	f3ef 8009 	mrs	r0, PSP
 8006d14:	f3bf 8f6f 	isb	sy
 8006d18:	4b15      	ldr	r3, [pc, #84]	; (8006d70 <pxCurrentTCBConst>)
 8006d1a:	681a      	ldr	r2, [r3, #0]
 8006d1c:	f01e 0f10 	tst.w	lr, #16
 8006d20:	bf08      	it	eq
 8006d22:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006d26:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d2a:	6010      	str	r0, [r2, #0]
 8006d2c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006d30:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006d34:	f380 8811 	msr	BASEPRI, r0
 8006d38:	f3bf 8f4f 	dsb	sy
 8006d3c:	f3bf 8f6f 	isb	sy
 8006d40:	f7ff faf0 	bl	8006324 <vTaskSwitchContext>
 8006d44:	f04f 0000 	mov.w	r0, #0
 8006d48:	f380 8811 	msr	BASEPRI, r0
 8006d4c:	bc09      	pop	{r0, r3}
 8006d4e:	6819      	ldr	r1, [r3, #0]
 8006d50:	6808      	ldr	r0, [r1, #0]
 8006d52:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d56:	f01e 0f10 	tst.w	lr, #16
 8006d5a:	bf08      	it	eq
 8006d5c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006d60:	f380 8809 	msr	PSP, r0
 8006d64:	f3bf 8f6f 	isb	sy
 8006d68:	4770      	bx	lr
 8006d6a:	bf00      	nop
 8006d6c:	f3af 8000 	nop.w

08006d70 <pxCurrentTCBConst>:
 8006d70:	200011c8 	.word	0x200011c8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006d74:	bf00      	nop
 8006d76:	bf00      	nop

08006d78 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006d78:	b580      	push	{r7, lr}
 8006d7a:	b082      	sub	sp, #8
 8006d7c:	af00      	add	r7, sp, #0
	__asm volatile
 8006d7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d82:	f383 8811 	msr	BASEPRI, r3
 8006d86:	f3bf 8f6f 	isb	sy
 8006d8a:	f3bf 8f4f 	dsb	sy
 8006d8e:	607b      	str	r3, [r7, #4]
}
 8006d90:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006d92:	f7ff fa0d 	bl	80061b0 <xTaskIncrementTick>
 8006d96:	4603      	mov	r3, r0
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d003      	beq.n	8006da4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006d9c:	4b06      	ldr	r3, [pc, #24]	; (8006db8 <xPortSysTickHandler+0x40>)
 8006d9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006da2:	601a      	str	r2, [r3, #0]
 8006da4:	2300      	movs	r3, #0
 8006da6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006da8:	683b      	ldr	r3, [r7, #0]
 8006daa:	f383 8811 	msr	BASEPRI, r3
}
 8006dae:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006db0:	bf00      	nop
 8006db2:	3708      	adds	r7, #8
 8006db4:	46bd      	mov	sp, r7
 8006db6:	bd80      	pop	{r7, pc}
 8006db8:	e000ed04 	.word	0xe000ed04

08006dbc <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006dbc:	b480      	push	{r7}
 8006dbe:	b085      	sub	sp, #20
 8006dc0:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8006dc2:	f3ef 8305 	mrs	r3, IPSR
 8006dc6:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	2b0f      	cmp	r3, #15
 8006dcc:	d914      	bls.n	8006df8 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8006dce:	4a17      	ldr	r2, [pc, #92]	; (8006e2c <vPortValidateInterruptPriority+0x70>)
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	4413      	add	r3, r2
 8006dd4:	781b      	ldrb	r3, [r3, #0]
 8006dd6:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006dd8:	4b15      	ldr	r3, [pc, #84]	; (8006e30 <vPortValidateInterruptPriority+0x74>)
 8006dda:	781b      	ldrb	r3, [r3, #0]
 8006ddc:	7afa      	ldrb	r2, [r7, #11]
 8006dde:	429a      	cmp	r2, r3
 8006de0:	d20a      	bcs.n	8006df8 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8006de2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006de6:	f383 8811 	msr	BASEPRI, r3
 8006dea:	f3bf 8f6f 	isb	sy
 8006dee:	f3bf 8f4f 	dsb	sy
 8006df2:	607b      	str	r3, [r7, #4]
}
 8006df4:	bf00      	nop
 8006df6:	e7fe      	b.n	8006df6 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006df8:	4b0e      	ldr	r3, [pc, #56]	; (8006e34 <vPortValidateInterruptPriority+0x78>)
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8006e00:	4b0d      	ldr	r3, [pc, #52]	; (8006e38 <vPortValidateInterruptPriority+0x7c>)
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	429a      	cmp	r2, r3
 8006e06:	d90a      	bls.n	8006e1e <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8006e08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e0c:	f383 8811 	msr	BASEPRI, r3
 8006e10:	f3bf 8f6f 	isb	sy
 8006e14:	f3bf 8f4f 	dsb	sy
 8006e18:	603b      	str	r3, [r7, #0]
}
 8006e1a:	bf00      	nop
 8006e1c:	e7fe      	b.n	8006e1c <vPortValidateInterruptPriority+0x60>
	}
 8006e1e:	bf00      	nop
 8006e20:	3714      	adds	r7, #20
 8006e22:	46bd      	mov	sp, r7
 8006e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e28:	4770      	bx	lr
 8006e2a:	bf00      	nop
 8006e2c:	e000e3f0 	.word	0xe000e3f0
 8006e30:	200017e4 	.word	0x200017e4
 8006e34:	e000ed0c 	.word	0xe000ed0c
 8006e38:	200017e8 	.word	0x200017e8

08006e3c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006e3c:	b580      	push	{r7, lr}
 8006e3e:	b08a      	sub	sp, #40	; 0x28
 8006e40:	af00      	add	r7, sp, #0
 8006e42:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006e44:	2300      	movs	r3, #0
 8006e46:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006e48:	f7ff f906 	bl	8006058 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006e4c:	4b5b      	ldr	r3, [pc, #364]	; (8006fbc <pvPortMalloc+0x180>)
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d101      	bne.n	8006e58 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006e54:	f000 f920 	bl	8007098 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006e58:	4b59      	ldr	r3, [pc, #356]	; (8006fc0 <pvPortMalloc+0x184>)
 8006e5a:	681a      	ldr	r2, [r3, #0]
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	4013      	ands	r3, r2
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	f040 8093 	bne.w	8006f8c <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d01d      	beq.n	8006ea8 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8006e6c:	2208      	movs	r2, #8
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	4413      	add	r3, r2
 8006e72:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	f003 0307 	and.w	r3, r3, #7
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d014      	beq.n	8006ea8 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	f023 0307 	bic.w	r3, r3, #7
 8006e84:	3308      	adds	r3, #8
 8006e86:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	f003 0307 	and.w	r3, r3, #7
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d00a      	beq.n	8006ea8 <pvPortMalloc+0x6c>
	__asm volatile
 8006e92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e96:	f383 8811 	msr	BASEPRI, r3
 8006e9a:	f3bf 8f6f 	isb	sy
 8006e9e:	f3bf 8f4f 	dsb	sy
 8006ea2:	617b      	str	r3, [r7, #20]
}
 8006ea4:	bf00      	nop
 8006ea6:	e7fe      	b.n	8006ea6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d06e      	beq.n	8006f8c <pvPortMalloc+0x150>
 8006eae:	4b45      	ldr	r3, [pc, #276]	; (8006fc4 <pvPortMalloc+0x188>)
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	687a      	ldr	r2, [r7, #4]
 8006eb4:	429a      	cmp	r2, r3
 8006eb6:	d869      	bhi.n	8006f8c <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006eb8:	4b43      	ldr	r3, [pc, #268]	; (8006fc8 <pvPortMalloc+0x18c>)
 8006eba:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006ebc:	4b42      	ldr	r3, [pc, #264]	; (8006fc8 <pvPortMalloc+0x18c>)
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006ec2:	e004      	b.n	8006ece <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8006ec4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ec6:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006ec8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006ece:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ed0:	685b      	ldr	r3, [r3, #4]
 8006ed2:	687a      	ldr	r2, [r7, #4]
 8006ed4:	429a      	cmp	r2, r3
 8006ed6:	d903      	bls.n	8006ee0 <pvPortMalloc+0xa4>
 8006ed8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d1f1      	bne.n	8006ec4 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006ee0:	4b36      	ldr	r3, [pc, #216]	; (8006fbc <pvPortMalloc+0x180>)
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006ee6:	429a      	cmp	r2, r3
 8006ee8:	d050      	beq.n	8006f8c <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006eea:	6a3b      	ldr	r3, [r7, #32]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	2208      	movs	r2, #8
 8006ef0:	4413      	add	r3, r2
 8006ef2:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006ef4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ef6:	681a      	ldr	r2, [r3, #0]
 8006ef8:	6a3b      	ldr	r3, [r7, #32]
 8006efa:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006efc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006efe:	685a      	ldr	r2, [r3, #4]
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	1ad2      	subs	r2, r2, r3
 8006f04:	2308      	movs	r3, #8
 8006f06:	005b      	lsls	r3, r3, #1
 8006f08:	429a      	cmp	r2, r3
 8006f0a:	d91f      	bls.n	8006f4c <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006f0c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	4413      	add	r3, r2
 8006f12:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006f14:	69bb      	ldr	r3, [r7, #24]
 8006f16:	f003 0307 	and.w	r3, r3, #7
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d00a      	beq.n	8006f34 <pvPortMalloc+0xf8>
	__asm volatile
 8006f1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f22:	f383 8811 	msr	BASEPRI, r3
 8006f26:	f3bf 8f6f 	isb	sy
 8006f2a:	f3bf 8f4f 	dsb	sy
 8006f2e:	613b      	str	r3, [r7, #16]
}
 8006f30:	bf00      	nop
 8006f32:	e7fe      	b.n	8006f32 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006f34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f36:	685a      	ldr	r2, [r3, #4]
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	1ad2      	subs	r2, r2, r3
 8006f3c:	69bb      	ldr	r3, [r7, #24]
 8006f3e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006f40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f42:	687a      	ldr	r2, [r7, #4]
 8006f44:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006f46:	69b8      	ldr	r0, [r7, #24]
 8006f48:	f000 f908 	bl	800715c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006f4c:	4b1d      	ldr	r3, [pc, #116]	; (8006fc4 <pvPortMalloc+0x188>)
 8006f4e:	681a      	ldr	r2, [r3, #0]
 8006f50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f52:	685b      	ldr	r3, [r3, #4]
 8006f54:	1ad3      	subs	r3, r2, r3
 8006f56:	4a1b      	ldr	r2, [pc, #108]	; (8006fc4 <pvPortMalloc+0x188>)
 8006f58:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006f5a:	4b1a      	ldr	r3, [pc, #104]	; (8006fc4 <pvPortMalloc+0x188>)
 8006f5c:	681a      	ldr	r2, [r3, #0]
 8006f5e:	4b1b      	ldr	r3, [pc, #108]	; (8006fcc <pvPortMalloc+0x190>)
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	429a      	cmp	r2, r3
 8006f64:	d203      	bcs.n	8006f6e <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006f66:	4b17      	ldr	r3, [pc, #92]	; (8006fc4 <pvPortMalloc+0x188>)
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	4a18      	ldr	r2, [pc, #96]	; (8006fcc <pvPortMalloc+0x190>)
 8006f6c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006f6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f70:	685a      	ldr	r2, [r3, #4]
 8006f72:	4b13      	ldr	r3, [pc, #76]	; (8006fc0 <pvPortMalloc+0x184>)
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	431a      	orrs	r2, r3
 8006f78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f7a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006f7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f7e:	2200      	movs	r2, #0
 8006f80:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8006f82:	4b13      	ldr	r3, [pc, #76]	; (8006fd0 <pvPortMalloc+0x194>)
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	3301      	adds	r3, #1
 8006f88:	4a11      	ldr	r2, [pc, #68]	; (8006fd0 <pvPortMalloc+0x194>)
 8006f8a:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006f8c:	f7ff f872 	bl	8006074 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006f90:	69fb      	ldr	r3, [r7, #28]
 8006f92:	f003 0307 	and.w	r3, r3, #7
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d00a      	beq.n	8006fb0 <pvPortMalloc+0x174>
	__asm volatile
 8006f9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f9e:	f383 8811 	msr	BASEPRI, r3
 8006fa2:	f3bf 8f6f 	isb	sy
 8006fa6:	f3bf 8f4f 	dsb	sy
 8006faa:	60fb      	str	r3, [r7, #12]
}
 8006fac:	bf00      	nop
 8006fae:	e7fe      	b.n	8006fae <pvPortMalloc+0x172>
	return pvReturn;
 8006fb0:	69fb      	ldr	r3, [r7, #28]
}
 8006fb2:	4618      	mov	r0, r3
 8006fb4:	3728      	adds	r7, #40	; 0x28
 8006fb6:	46bd      	mov	sp, r7
 8006fb8:	bd80      	pop	{r7, pc}
 8006fba:	bf00      	nop
 8006fbc:	20002f64 	.word	0x20002f64
 8006fc0:	20002f78 	.word	0x20002f78
 8006fc4:	20002f68 	.word	0x20002f68
 8006fc8:	20002f5c 	.word	0x20002f5c
 8006fcc:	20002f6c 	.word	0x20002f6c
 8006fd0:	20002f70 	.word	0x20002f70

08006fd4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006fd4:	b580      	push	{r7, lr}
 8006fd6:	b086      	sub	sp, #24
 8006fd8:	af00      	add	r7, sp, #0
 8006fda:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d04d      	beq.n	8007082 <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006fe6:	2308      	movs	r3, #8
 8006fe8:	425b      	negs	r3, r3
 8006fea:	697a      	ldr	r2, [r7, #20]
 8006fec:	4413      	add	r3, r2
 8006fee:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006ff0:	697b      	ldr	r3, [r7, #20]
 8006ff2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006ff4:	693b      	ldr	r3, [r7, #16]
 8006ff6:	685a      	ldr	r2, [r3, #4]
 8006ff8:	4b24      	ldr	r3, [pc, #144]	; (800708c <vPortFree+0xb8>)
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	4013      	ands	r3, r2
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d10a      	bne.n	8007018 <vPortFree+0x44>
	__asm volatile
 8007002:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007006:	f383 8811 	msr	BASEPRI, r3
 800700a:	f3bf 8f6f 	isb	sy
 800700e:	f3bf 8f4f 	dsb	sy
 8007012:	60fb      	str	r3, [r7, #12]
}
 8007014:	bf00      	nop
 8007016:	e7fe      	b.n	8007016 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007018:	693b      	ldr	r3, [r7, #16]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	2b00      	cmp	r3, #0
 800701e:	d00a      	beq.n	8007036 <vPortFree+0x62>
	__asm volatile
 8007020:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007024:	f383 8811 	msr	BASEPRI, r3
 8007028:	f3bf 8f6f 	isb	sy
 800702c:	f3bf 8f4f 	dsb	sy
 8007030:	60bb      	str	r3, [r7, #8]
}
 8007032:	bf00      	nop
 8007034:	e7fe      	b.n	8007034 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007036:	693b      	ldr	r3, [r7, #16]
 8007038:	685a      	ldr	r2, [r3, #4]
 800703a:	4b14      	ldr	r3, [pc, #80]	; (800708c <vPortFree+0xb8>)
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	4013      	ands	r3, r2
 8007040:	2b00      	cmp	r3, #0
 8007042:	d01e      	beq.n	8007082 <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007044:	693b      	ldr	r3, [r7, #16]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	2b00      	cmp	r3, #0
 800704a:	d11a      	bne.n	8007082 <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800704c:	693b      	ldr	r3, [r7, #16]
 800704e:	685a      	ldr	r2, [r3, #4]
 8007050:	4b0e      	ldr	r3, [pc, #56]	; (800708c <vPortFree+0xb8>)
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	43db      	mvns	r3, r3
 8007056:	401a      	ands	r2, r3
 8007058:	693b      	ldr	r3, [r7, #16]
 800705a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800705c:	f7fe fffc 	bl	8006058 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007060:	693b      	ldr	r3, [r7, #16]
 8007062:	685a      	ldr	r2, [r3, #4]
 8007064:	4b0a      	ldr	r3, [pc, #40]	; (8007090 <vPortFree+0xbc>)
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	4413      	add	r3, r2
 800706a:	4a09      	ldr	r2, [pc, #36]	; (8007090 <vPortFree+0xbc>)
 800706c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800706e:	6938      	ldr	r0, [r7, #16]
 8007070:	f000 f874 	bl	800715c <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8007074:	4b07      	ldr	r3, [pc, #28]	; (8007094 <vPortFree+0xc0>)
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	3301      	adds	r3, #1
 800707a:	4a06      	ldr	r2, [pc, #24]	; (8007094 <vPortFree+0xc0>)
 800707c:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800707e:	f7fe fff9 	bl	8006074 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007082:	bf00      	nop
 8007084:	3718      	adds	r7, #24
 8007086:	46bd      	mov	sp, r7
 8007088:	bd80      	pop	{r7, pc}
 800708a:	bf00      	nop
 800708c:	20002f78 	.word	0x20002f78
 8007090:	20002f68 	.word	0x20002f68
 8007094:	20002f74 	.word	0x20002f74

08007098 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007098:	b480      	push	{r7}
 800709a:	b085      	sub	sp, #20
 800709c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800709e:	f241 7370 	movw	r3, #6000	; 0x1770
 80070a2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80070a4:	4b27      	ldr	r3, [pc, #156]	; (8007144 <prvHeapInit+0xac>)
 80070a6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	f003 0307 	and.w	r3, r3, #7
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d00c      	beq.n	80070cc <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	3307      	adds	r3, #7
 80070b6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	f023 0307 	bic.w	r3, r3, #7
 80070be:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80070c0:	68ba      	ldr	r2, [r7, #8]
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	1ad3      	subs	r3, r2, r3
 80070c6:	4a1f      	ldr	r2, [pc, #124]	; (8007144 <prvHeapInit+0xac>)
 80070c8:	4413      	add	r3, r2
 80070ca:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80070d0:	4a1d      	ldr	r2, [pc, #116]	; (8007148 <prvHeapInit+0xb0>)
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80070d6:	4b1c      	ldr	r3, [pc, #112]	; (8007148 <prvHeapInit+0xb0>)
 80070d8:	2200      	movs	r2, #0
 80070da:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	68ba      	ldr	r2, [r7, #8]
 80070e0:	4413      	add	r3, r2
 80070e2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80070e4:	2208      	movs	r2, #8
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	1a9b      	subs	r3, r3, r2
 80070ea:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	f023 0307 	bic.w	r3, r3, #7
 80070f2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	4a15      	ldr	r2, [pc, #84]	; (800714c <prvHeapInit+0xb4>)
 80070f8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80070fa:	4b14      	ldr	r3, [pc, #80]	; (800714c <prvHeapInit+0xb4>)
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	2200      	movs	r2, #0
 8007100:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007102:	4b12      	ldr	r3, [pc, #72]	; (800714c <prvHeapInit+0xb4>)
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	2200      	movs	r2, #0
 8007108:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800710e:	683b      	ldr	r3, [r7, #0]
 8007110:	68fa      	ldr	r2, [r7, #12]
 8007112:	1ad2      	subs	r2, r2, r3
 8007114:	683b      	ldr	r3, [r7, #0]
 8007116:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007118:	4b0c      	ldr	r3, [pc, #48]	; (800714c <prvHeapInit+0xb4>)
 800711a:	681a      	ldr	r2, [r3, #0]
 800711c:	683b      	ldr	r3, [r7, #0]
 800711e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007120:	683b      	ldr	r3, [r7, #0]
 8007122:	685b      	ldr	r3, [r3, #4]
 8007124:	4a0a      	ldr	r2, [pc, #40]	; (8007150 <prvHeapInit+0xb8>)
 8007126:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007128:	683b      	ldr	r3, [r7, #0]
 800712a:	685b      	ldr	r3, [r3, #4]
 800712c:	4a09      	ldr	r2, [pc, #36]	; (8007154 <prvHeapInit+0xbc>)
 800712e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007130:	4b09      	ldr	r3, [pc, #36]	; (8007158 <prvHeapInit+0xc0>)
 8007132:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007136:	601a      	str	r2, [r3, #0]
}
 8007138:	bf00      	nop
 800713a:	3714      	adds	r7, #20
 800713c:	46bd      	mov	sp, r7
 800713e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007142:	4770      	bx	lr
 8007144:	200017ec 	.word	0x200017ec
 8007148:	20002f5c 	.word	0x20002f5c
 800714c:	20002f64 	.word	0x20002f64
 8007150:	20002f6c 	.word	0x20002f6c
 8007154:	20002f68 	.word	0x20002f68
 8007158:	20002f78 	.word	0x20002f78

0800715c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800715c:	b480      	push	{r7}
 800715e:	b085      	sub	sp, #20
 8007160:	af00      	add	r7, sp, #0
 8007162:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007164:	4b28      	ldr	r3, [pc, #160]	; (8007208 <prvInsertBlockIntoFreeList+0xac>)
 8007166:	60fb      	str	r3, [r7, #12]
 8007168:	e002      	b.n	8007170 <prvInsertBlockIntoFreeList+0x14>
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	60fb      	str	r3, [r7, #12]
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	687a      	ldr	r2, [r7, #4]
 8007176:	429a      	cmp	r2, r3
 8007178:	d8f7      	bhi.n	800716a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	685b      	ldr	r3, [r3, #4]
 8007182:	68ba      	ldr	r2, [r7, #8]
 8007184:	4413      	add	r3, r2
 8007186:	687a      	ldr	r2, [r7, #4]
 8007188:	429a      	cmp	r2, r3
 800718a:	d108      	bne.n	800719e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	685a      	ldr	r2, [r3, #4]
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	685b      	ldr	r3, [r3, #4]
 8007194:	441a      	add	r2, r3
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	685b      	ldr	r3, [r3, #4]
 80071a6:	68ba      	ldr	r2, [r7, #8]
 80071a8:	441a      	add	r2, r3
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	429a      	cmp	r2, r3
 80071b0:	d118      	bne.n	80071e4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	681a      	ldr	r2, [r3, #0]
 80071b6:	4b15      	ldr	r3, [pc, #84]	; (800720c <prvInsertBlockIntoFreeList+0xb0>)
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	429a      	cmp	r2, r3
 80071bc:	d00d      	beq.n	80071da <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	685a      	ldr	r2, [r3, #4]
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	685b      	ldr	r3, [r3, #4]
 80071c8:	441a      	add	r2, r3
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	681a      	ldr	r2, [r3, #0]
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	601a      	str	r2, [r3, #0]
 80071d8:	e008      	b.n	80071ec <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80071da:	4b0c      	ldr	r3, [pc, #48]	; (800720c <prvInsertBlockIntoFreeList+0xb0>)
 80071dc:	681a      	ldr	r2, [r3, #0]
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	601a      	str	r2, [r3, #0]
 80071e2:	e003      	b.n	80071ec <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	681a      	ldr	r2, [r3, #0]
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80071ec:	68fa      	ldr	r2, [r7, #12]
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	429a      	cmp	r2, r3
 80071f2:	d002      	beq.n	80071fa <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	687a      	ldr	r2, [r7, #4]
 80071f8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80071fa:	bf00      	nop
 80071fc:	3714      	adds	r7, #20
 80071fe:	46bd      	mov	sp, r7
 8007200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007204:	4770      	bx	lr
 8007206:	bf00      	nop
 8007208:	20002f5c 	.word	0x20002f5c
 800720c:	20002f64 	.word	0x20002f64

08007210 <__errno>:
 8007210:	4b01      	ldr	r3, [pc, #4]	; (8007218 <__errno+0x8>)
 8007212:	6818      	ldr	r0, [r3, #0]
 8007214:	4770      	bx	lr
 8007216:	bf00      	nop
 8007218:	20000010 	.word	0x20000010

0800721c <__libc_init_array>:
 800721c:	b570      	push	{r4, r5, r6, lr}
 800721e:	4d0d      	ldr	r5, [pc, #52]	; (8007254 <__libc_init_array+0x38>)
 8007220:	4c0d      	ldr	r4, [pc, #52]	; (8007258 <__libc_init_array+0x3c>)
 8007222:	1b64      	subs	r4, r4, r5
 8007224:	10a4      	asrs	r4, r4, #2
 8007226:	2600      	movs	r6, #0
 8007228:	42a6      	cmp	r6, r4
 800722a:	d109      	bne.n	8007240 <__libc_init_array+0x24>
 800722c:	4d0b      	ldr	r5, [pc, #44]	; (800725c <__libc_init_array+0x40>)
 800722e:	4c0c      	ldr	r4, [pc, #48]	; (8007260 <__libc_init_array+0x44>)
 8007230:	f000 fc8e 	bl	8007b50 <_init>
 8007234:	1b64      	subs	r4, r4, r5
 8007236:	10a4      	asrs	r4, r4, #2
 8007238:	2600      	movs	r6, #0
 800723a:	42a6      	cmp	r6, r4
 800723c:	d105      	bne.n	800724a <__libc_init_array+0x2e>
 800723e:	bd70      	pop	{r4, r5, r6, pc}
 8007240:	f855 3b04 	ldr.w	r3, [r5], #4
 8007244:	4798      	blx	r3
 8007246:	3601      	adds	r6, #1
 8007248:	e7ee      	b.n	8007228 <__libc_init_array+0xc>
 800724a:	f855 3b04 	ldr.w	r3, [r5], #4
 800724e:	4798      	blx	r3
 8007250:	3601      	adds	r6, #1
 8007252:	e7f2      	b.n	800723a <__libc_init_array+0x1e>
 8007254:	08007d80 	.word	0x08007d80
 8007258:	08007d80 	.word	0x08007d80
 800725c:	08007d80 	.word	0x08007d80
 8007260:	08007d84 	.word	0x08007d84

08007264 <__retarget_lock_acquire_recursive>:
 8007264:	4770      	bx	lr

08007266 <__retarget_lock_release_recursive>:
 8007266:	4770      	bx	lr

08007268 <memcpy>:
 8007268:	440a      	add	r2, r1
 800726a:	4291      	cmp	r1, r2
 800726c:	f100 33ff 	add.w	r3, r0, #4294967295
 8007270:	d100      	bne.n	8007274 <memcpy+0xc>
 8007272:	4770      	bx	lr
 8007274:	b510      	push	{r4, lr}
 8007276:	f811 4b01 	ldrb.w	r4, [r1], #1
 800727a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800727e:	4291      	cmp	r1, r2
 8007280:	d1f9      	bne.n	8007276 <memcpy+0xe>
 8007282:	bd10      	pop	{r4, pc}

08007284 <memset>:
 8007284:	4402      	add	r2, r0
 8007286:	4603      	mov	r3, r0
 8007288:	4293      	cmp	r3, r2
 800728a:	d100      	bne.n	800728e <memset+0xa>
 800728c:	4770      	bx	lr
 800728e:	f803 1b01 	strb.w	r1, [r3], #1
 8007292:	e7f9      	b.n	8007288 <memset+0x4>

08007294 <sbrk_aligned>:
 8007294:	b570      	push	{r4, r5, r6, lr}
 8007296:	4e0e      	ldr	r6, [pc, #56]	; (80072d0 <sbrk_aligned+0x3c>)
 8007298:	460c      	mov	r4, r1
 800729a:	6831      	ldr	r1, [r6, #0]
 800729c:	4605      	mov	r5, r0
 800729e:	b911      	cbnz	r1, 80072a6 <sbrk_aligned+0x12>
 80072a0:	f000 f88c 	bl	80073bc <_sbrk_r>
 80072a4:	6030      	str	r0, [r6, #0]
 80072a6:	4621      	mov	r1, r4
 80072a8:	4628      	mov	r0, r5
 80072aa:	f000 f887 	bl	80073bc <_sbrk_r>
 80072ae:	1c43      	adds	r3, r0, #1
 80072b0:	d00a      	beq.n	80072c8 <sbrk_aligned+0x34>
 80072b2:	1cc4      	adds	r4, r0, #3
 80072b4:	f024 0403 	bic.w	r4, r4, #3
 80072b8:	42a0      	cmp	r0, r4
 80072ba:	d007      	beq.n	80072cc <sbrk_aligned+0x38>
 80072bc:	1a21      	subs	r1, r4, r0
 80072be:	4628      	mov	r0, r5
 80072c0:	f000 f87c 	bl	80073bc <_sbrk_r>
 80072c4:	3001      	adds	r0, #1
 80072c6:	d101      	bne.n	80072cc <sbrk_aligned+0x38>
 80072c8:	f04f 34ff 	mov.w	r4, #4294967295
 80072cc:	4620      	mov	r0, r4
 80072ce:	bd70      	pop	{r4, r5, r6, pc}
 80072d0:	20002f84 	.word	0x20002f84

080072d4 <_malloc_r>:
 80072d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80072d8:	1ccd      	adds	r5, r1, #3
 80072da:	f025 0503 	bic.w	r5, r5, #3
 80072de:	3508      	adds	r5, #8
 80072e0:	2d0c      	cmp	r5, #12
 80072e2:	bf38      	it	cc
 80072e4:	250c      	movcc	r5, #12
 80072e6:	2d00      	cmp	r5, #0
 80072e8:	4607      	mov	r7, r0
 80072ea:	db01      	blt.n	80072f0 <_malloc_r+0x1c>
 80072ec:	42a9      	cmp	r1, r5
 80072ee:	d905      	bls.n	80072fc <_malloc_r+0x28>
 80072f0:	230c      	movs	r3, #12
 80072f2:	603b      	str	r3, [r7, #0]
 80072f4:	2600      	movs	r6, #0
 80072f6:	4630      	mov	r0, r6
 80072f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80072fc:	4e2e      	ldr	r6, [pc, #184]	; (80073b8 <_malloc_r+0xe4>)
 80072fe:	f000 f88d 	bl	800741c <__malloc_lock>
 8007302:	6833      	ldr	r3, [r6, #0]
 8007304:	461c      	mov	r4, r3
 8007306:	bb34      	cbnz	r4, 8007356 <_malloc_r+0x82>
 8007308:	4629      	mov	r1, r5
 800730a:	4638      	mov	r0, r7
 800730c:	f7ff ffc2 	bl	8007294 <sbrk_aligned>
 8007310:	1c43      	adds	r3, r0, #1
 8007312:	4604      	mov	r4, r0
 8007314:	d14d      	bne.n	80073b2 <_malloc_r+0xde>
 8007316:	6834      	ldr	r4, [r6, #0]
 8007318:	4626      	mov	r6, r4
 800731a:	2e00      	cmp	r6, #0
 800731c:	d140      	bne.n	80073a0 <_malloc_r+0xcc>
 800731e:	6823      	ldr	r3, [r4, #0]
 8007320:	4631      	mov	r1, r6
 8007322:	4638      	mov	r0, r7
 8007324:	eb04 0803 	add.w	r8, r4, r3
 8007328:	f000 f848 	bl	80073bc <_sbrk_r>
 800732c:	4580      	cmp	r8, r0
 800732e:	d13a      	bne.n	80073a6 <_malloc_r+0xd2>
 8007330:	6821      	ldr	r1, [r4, #0]
 8007332:	3503      	adds	r5, #3
 8007334:	1a6d      	subs	r5, r5, r1
 8007336:	f025 0503 	bic.w	r5, r5, #3
 800733a:	3508      	adds	r5, #8
 800733c:	2d0c      	cmp	r5, #12
 800733e:	bf38      	it	cc
 8007340:	250c      	movcc	r5, #12
 8007342:	4629      	mov	r1, r5
 8007344:	4638      	mov	r0, r7
 8007346:	f7ff ffa5 	bl	8007294 <sbrk_aligned>
 800734a:	3001      	adds	r0, #1
 800734c:	d02b      	beq.n	80073a6 <_malloc_r+0xd2>
 800734e:	6823      	ldr	r3, [r4, #0]
 8007350:	442b      	add	r3, r5
 8007352:	6023      	str	r3, [r4, #0]
 8007354:	e00e      	b.n	8007374 <_malloc_r+0xa0>
 8007356:	6822      	ldr	r2, [r4, #0]
 8007358:	1b52      	subs	r2, r2, r5
 800735a:	d41e      	bmi.n	800739a <_malloc_r+0xc6>
 800735c:	2a0b      	cmp	r2, #11
 800735e:	d916      	bls.n	800738e <_malloc_r+0xba>
 8007360:	1961      	adds	r1, r4, r5
 8007362:	42a3      	cmp	r3, r4
 8007364:	6025      	str	r5, [r4, #0]
 8007366:	bf18      	it	ne
 8007368:	6059      	strne	r1, [r3, #4]
 800736a:	6863      	ldr	r3, [r4, #4]
 800736c:	bf08      	it	eq
 800736e:	6031      	streq	r1, [r6, #0]
 8007370:	5162      	str	r2, [r4, r5]
 8007372:	604b      	str	r3, [r1, #4]
 8007374:	4638      	mov	r0, r7
 8007376:	f104 060b 	add.w	r6, r4, #11
 800737a:	f000 f855 	bl	8007428 <__malloc_unlock>
 800737e:	f026 0607 	bic.w	r6, r6, #7
 8007382:	1d23      	adds	r3, r4, #4
 8007384:	1af2      	subs	r2, r6, r3
 8007386:	d0b6      	beq.n	80072f6 <_malloc_r+0x22>
 8007388:	1b9b      	subs	r3, r3, r6
 800738a:	50a3      	str	r3, [r4, r2]
 800738c:	e7b3      	b.n	80072f6 <_malloc_r+0x22>
 800738e:	6862      	ldr	r2, [r4, #4]
 8007390:	42a3      	cmp	r3, r4
 8007392:	bf0c      	ite	eq
 8007394:	6032      	streq	r2, [r6, #0]
 8007396:	605a      	strne	r2, [r3, #4]
 8007398:	e7ec      	b.n	8007374 <_malloc_r+0xa0>
 800739a:	4623      	mov	r3, r4
 800739c:	6864      	ldr	r4, [r4, #4]
 800739e:	e7b2      	b.n	8007306 <_malloc_r+0x32>
 80073a0:	4634      	mov	r4, r6
 80073a2:	6876      	ldr	r6, [r6, #4]
 80073a4:	e7b9      	b.n	800731a <_malloc_r+0x46>
 80073a6:	230c      	movs	r3, #12
 80073a8:	603b      	str	r3, [r7, #0]
 80073aa:	4638      	mov	r0, r7
 80073ac:	f000 f83c 	bl	8007428 <__malloc_unlock>
 80073b0:	e7a1      	b.n	80072f6 <_malloc_r+0x22>
 80073b2:	6025      	str	r5, [r4, #0]
 80073b4:	e7de      	b.n	8007374 <_malloc_r+0xa0>
 80073b6:	bf00      	nop
 80073b8:	20002f80 	.word	0x20002f80

080073bc <_sbrk_r>:
 80073bc:	b538      	push	{r3, r4, r5, lr}
 80073be:	4d06      	ldr	r5, [pc, #24]	; (80073d8 <_sbrk_r+0x1c>)
 80073c0:	2300      	movs	r3, #0
 80073c2:	4604      	mov	r4, r0
 80073c4:	4608      	mov	r0, r1
 80073c6:	602b      	str	r3, [r5, #0]
 80073c8:	f7fa fc3c 	bl	8001c44 <_sbrk>
 80073cc:	1c43      	adds	r3, r0, #1
 80073ce:	d102      	bne.n	80073d6 <_sbrk_r+0x1a>
 80073d0:	682b      	ldr	r3, [r5, #0]
 80073d2:	b103      	cbz	r3, 80073d6 <_sbrk_r+0x1a>
 80073d4:	6023      	str	r3, [r4, #0]
 80073d6:	bd38      	pop	{r3, r4, r5, pc}
 80073d8:	20002f88 	.word	0x20002f88

080073dc <siprintf>:
 80073dc:	b40e      	push	{r1, r2, r3}
 80073de:	b500      	push	{lr}
 80073e0:	b09c      	sub	sp, #112	; 0x70
 80073e2:	ab1d      	add	r3, sp, #116	; 0x74
 80073e4:	9002      	str	r0, [sp, #8]
 80073e6:	9006      	str	r0, [sp, #24]
 80073e8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80073ec:	4809      	ldr	r0, [pc, #36]	; (8007414 <siprintf+0x38>)
 80073ee:	9107      	str	r1, [sp, #28]
 80073f0:	9104      	str	r1, [sp, #16]
 80073f2:	4909      	ldr	r1, [pc, #36]	; (8007418 <siprintf+0x3c>)
 80073f4:	f853 2b04 	ldr.w	r2, [r3], #4
 80073f8:	9105      	str	r1, [sp, #20]
 80073fa:	6800      	ldr	r0, [r0, #0]
 80073fc:	9301      	str	r3, [sp, #4]
 80073fe:	a902      	add	r1, sp, #8
 8007400:	f000 f8c0 	bl	8007584 <_svfiprintf_r>
 8007404:	9b02      	ldr	r3, [sp, #8]
 8007406:	2200      	movs	r2, #0
 8007408:	701a      	strb	r2, [r3, #0]
 800740a:	b01c      	add	sp, #112	; 0x70
 800740c:	f85d eb04 	ldr.w	lr, [sp], #4
 8007410:	b003      	add	sp, #12
 8007412:	4770      	bx	lr
 8007414:	20000010 	.word	0x20000010
 8007418:	ffff0208 	.word	0xffff0208

0800741c <__malloc_lock>:
 800741c:	4801      	ldr	r0, [pc, #4]	; (8007424 <__malloc_lock+0x8>)
 800741e:	f7ff bf21 	b.w	8007264 <__retarget_lock_acquire_recursive>
 8007422:	bf00      	nop
 8007424:	20002f7c 	.word	0x20002f7c

08007428 <__malloc_unlock>:
 8007428:	4801      	ldr	r0, [pc, #4]	; (8007430 <__malloc_unlock+0x8>)
 800742a:	f7ff bf1c 	b.w	8007266 <__retarget_lock_release_recursive>
 800742e:	bf00      	nop
 8007430:	20002f7c 	.word	0x20002f7c

08007434 <_free_r>:
 8007434:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007436:	2900      	cmp	r1, #0
 8007438:	d044      	beq.n	80074c4 <_free_r+0x90>
 800743a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800743e:	9001      	str	r0, [sp, #4]
 8007440:	2b00      	cmp	r3, #0
 8007442:	f1a1 0404 	sub.w	r4, r1, #4
 8007446:	bfb8      	it	lt
 8007448:	18e4      	addlt	r4, r4, r3
 800744a:	f7ff ffe7 	bl	800741c <__malloc_lock>
 800744e:	4a1e      	ldr	r2, [pc, #120]	; (80074c8 <_free_r+0x94>)
 8007450:	9801      	ldr	r0, [sp, #4]
 8007452:	6813      	ldr	r3, [r2, #0]
 8007454:	b933      	cbnz	r3, 8007464 <_free_r+0x30>
 8007456:	6063      	str	r3, [r4, #4]
 8007458:	6014      	str	r4, [r2, #0]
 800745a:	b003      	add	sp, #12
 800745c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007460:	f7ff bfe2 	b.w	8007428 <__malloc_unlock>
 8007464:	42a3      	cmp	r3, r4
 8007466:	d908      	bls.n	800747a <_free_r+0x46>
 8007468:	6825      	ldr	r5, [r4, #0]
 800746a:	1961      	adds	r1, r4, r5
 800746c:	428b      	cmp	r3, r1
 800746e:	bf01      	itttt	eq
 8007470:	6819      	ldreq	r1, [r3, #0]
 8007472:	685b      	ldreq	r3, [r3, #4]
 8007474:	1949      	addeq	r1, r1, r5
 8007476:	6021      	streq	r1, [r4, #0]
 8007478:	e7ed      	b.n	8007456 <_free_r+0x22>
 800747a:	461a      	mov	r2, r3
 800747c:	685b      	ldr	r3, [r3, #4]
 800747e:	b10b      	cbz	r3, 8007484 <_free_r+0x50>
 8007480:	42a3      	cmp	r3, r4
 8007482:	d9fa      	bls.n	800747a <_free_r+0x46>
 8007484:	6811      	ldr	r1, [r2, #0]
 8007486:	1855      	adds	r5, r2, r1
 8007488:	42a5      	cmp	r5, r4
 800748a:	d10b      	bne.n	80074a4 <_free_r+0x70>
 800748c:	6824      	ldr	r4, [r4, #0]
 800748e:	4421      	add	r1, r4
 8007490:	1854      	adds	r4, r2, r1
 8007492:	42a3      	cmp	r3, r4
 8007494:	6011      	str	r1, [r2, #0]
 8007496:	d1e0      	bne.n	800745a <_free_r+0x26>
 8007498:	681c      	ldr	r4, [r3, #0]
 800749a:	685b      	ldr	r3, [r3, #4]
 800749c:	6053      	str	r3, [r2, #4]
 800749e:	4421      	add	r1, r4
 80074a0:	6011      	str	r1, [r2, #0]
 80074a2:	e7da      	b.n	800745a <_free_r+0x26>
 80074a4:	d902      	bls.n	80074ac <_free_r+0x78>
 80074a6:	230c      	movs	r3, #12
 80074a8:	6003      	str	r3, [r0, #0]
 80074aa:	e7d6      	b.n	800745a <_free_r+0x26>
 80074ac:	6825      	ldr	r5, [r4, #0]
 80074ae:	1961      	adds	r1, r4, r5
 80074b0:	428b      	cmp	r3, r1
 80074b2:	bf04      	itt	eq
 80074b4:	6819      	ldreq	r1, [r3, #0]
 80074b6:	685b      	ldreq	r3, [r3, #4]
 80074b8:	6063      	str	r3, [r4, #4]
 80074ba:	bf04      	itt	eq
 80074bc:	1949      	addeq	r1, r1, r5
 80074be:	6021      	streq	r1, [r4, #0]
 80074c0:	6054      	str	r4, [r2, #4]
 80074c2:	e7ca      	b.n	800745a <_free_r+0x26>
 80074c4:	b003      	add	sp, #12
 80074c6:	bd30      	pop	{r4, r5, pc}
 80074c8:	20002f80 	.word	0x20002f80

080074cc <__ssputs_r>:
 80074cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80074d0:	688e      	ldr	r6, [r1, #8]
 80074d2:	429e      	cmp	r6, r3
 80074d4:	4682      	mov	sl, r0
 80074d6:	460c      	mov	r4, r1
 80074d8:	4690      	mov	r8, r2
 80074da:	461f      	mov	r7, r3
 80074dc:	d838      	bhi.n	8007550 <__ssputs_r+0x84>
 80074de:	898a      	ldrh	r2, [r1, #12]
 80074e0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80074e4:	d032      	beq.n	800754c <__ssputs_r+0x80>
 80074e6:	6825      	ldr	r5, [r4, #0]
 80074e8:	6909      	ldr	r1, [r1, #16]
 80074ea:	eba5 0901 	sub.w	r9, r5, r1
 80074ee:	6965      	ldr	r5, [r4, #20]
 80074f0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80074f4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80074f8:	3301      	adds	r3, #1
 80074fa:	444b      	add	r3, r9
 80074fc:	106d      	asrs	r5, r5, #1
 80074fe:	429d      	cmp	r5, r3
 8007500:	bf38      	it	cc
 8007502:	461d      	movcc	r5, r3
 8007504:	0553      	lsls	r3, r2, #21
 8007506:	d531      	bpl.n	800756c <__ssputs_r+0xa0>
 8007508:	4629      	mov	r1, r5
 800750a:	f7ff fee3 	bl	80072d4 <_malloc_r>
 800750e:	4606      	mov	r6, r0
 8007510:	b950      	cbnz	r0, 8007528 <__ssputs_r+0x5c>
 8007512:	230c      	movs	r3, #12
 8007514:	f8ca 3000 	str.w	r3, [sl]
 8007518:	89a3      	ldrh	r3, [r4, #12]
 800751a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800751e:	81a3      	strh	r3, [r4, #12]
 8007520:	f04f 30ff 	mov.w	r0, #4294967295
 8007524:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007528:	6921      	ldr	r1, [r4, #16]
 800752a:	464a      	mov	r2, r9
 800752c:	f7ff fe9c 	bl	8007268 <memcpy>
 8007530:	89a3      	ldrh	r3, [r4, #12]
 8007532:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007536:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800753a:	81a3      	strh	r3, [r4, #12]
 800753c:	6126      	str	r6, [r4, #16]
 800753e:	6165      	str	r5, [r4, #20]
 8007540:	444e      	add	r6, r9
 8007542:	eba5 0509 	sub.w	r5, r5, r9
 8007546:	6026      	str	r6, [r4, #0]
 8007548:	60a5      	str	r5, [r4, #8]
 800754a:	463e      	mov	r6, r7
 800754c:	42be      	cmp	r6, r7
 800754e:	d900      	bls.n	8007552 <__ssputs_r+0x86>
 8007550:	463e      	mov	r6, r7
 8007552:	6820      	ldr	r0, [r4, #0]
 8007554:	4632      	mov	r2, r6
 8007556:	4641      	mov	r1, r8
 8007558:	f000 faa8 	bl	8007aac <memmove>
 800755c:	68a3      	ldr	r3, [r4, #8]
 800755e:	1b9b      	subs	r3, r3, r6
 8007560:	60a3      	str	r3, [r4, #8]
 8007562:	6823      	ldr	r3, [r4, #0]
 8007564:	4433      	add	r3, r6
 8007566:	6023      	str	r3, [r4, #0]
 8007568:	2000      	movs	r0, #0
 800756a:	e7db      	b.n	8007524 <__ssputs_r+0x58>
 800756c:	462a      	mov	r2, r5
 800756e:	f000 fab7 	bl	8007ae0 <_realloc_r>
 8007572:	4606      	mov	r6, r0
 8007574:	2800      	cmp	r0, #0
 8007576:	d1e1      	bne.n	800753c <__ssputs_r+0x70>
 8007578:	6921      	ldr	r1, [r4, #16]
 800757a:	4650      	mov	r0, sl
 800757c:	f7ff ff5a 	bl	8007434 <_free_r>
 8007580:	e7c7      	b.n	8007512 <__ssputs_r+0x46>
	...

08007584 <_svfiprintf_r>:
 8007584:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007588:	4698      	mov	r8, r3
 800758a:	898b      	ldrh	r3, [r1, #12]
 800758c:	061b      	lsls	r3, r3, #24
 800758e:	b09d      	sub	sp, #116	; 0x74
 8007590:	4607      	mov	r7, r0
 8007592:	460d      	mov	r5, r1
 8007594:	4614      	mov	r4, r2
 8007596:	d50e      	bpl.n	80075b6 <_svfiprintf_r+0x32>
 8007598:	690b      	ldr	r3, [r1, #16]
 800759a:	b963      	cbnz	r3, 80075b6 <_svfiprintf_r+0x32>
 800759c:	2140      	movs	r1, #64	; 0x40
 800759e:	f7ff fe99 	bl	80072d4 <_malloc_r>
 80075a2:	6028      	str	r0, [r5, #0]
 80075a4:	6128      	str	r0, [r5, #16]
 80075a6:	b920      	cbnz	r0, 80075b2 <_svfiprintf_r+0x2e>
 80075a8:	230c      	movs	r3, #12
 80075aa:	603b      	str	r3, [r7, #0]
 80075ac:	f04f 30ff 	mov.w	r0, #4294967295
 80075b0:	e0d1      	b.n	8007756 <_svfiprintf_r+0x1d2>
 80075b2:	2340      	movs	r3, #64	; 0x40
 80075b4:	616b      	str	r3, [r5, #20]
 80075b6:	2300      	movs	r3, #0
 80075b8:	9309      	str	r3, [sp, #36]	; 0x24
 80075ba:	2320      	movs	r3, #32
 80075bc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80075c0:	f8cd 800c 	str.w	r8, [sp, #12]
 80075c4:	2330      	movs	r3, #48	; 0x30
 80075c6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8007770 <_svfiprintf_r+0x1ec>
 80075ca:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80075ce:	f04f 0901 	mov.w	r9, #1
 80075d2:	4623      	mov	r3, r4
 80075d4:	469a      	mov	sl, r3
 80075d6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80075da:	b10a      	cbz	r2, 80075e0 <_svfiprintf_r+0x5c>
 80075dc:	2a25      	cmp	r2, #37	; 0x25
 80075de:	d1f9      	bne.n	80075d4 <_svfiprintf_r+0x50>
 80075e0:	ebba 0b04 	subs.w	fp, sl, r4
 80075e4:	d00b      	beq.n	80075fe <_svfiprintf_r+0x7a>
 80075e6:	465b      	mov	r3, fp
 80075e8:	4622      	mov	r2, r4
 80075ea:	4629      	mov	r1, r5
 80075ec:	4638      	mov	r0, r7
 80075ee:	f7ff ff6d 	bl	80074cc <__ssputs_r>
 80075f2:	3001      	adds	r0, #1
 80075f4:	f000 80aa 	beq.w	800774c <_svfiprintf_r+0x1c8>
 80075f8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80075fa:	445a      	add	r2, fp
 80075fc:	9209      	str	r2, [sp, #36]	; 0x24
 80075fe:	f89a 3000 	ldrb.w	r3, [sl]
 8007602:	2b00      	cmp	r3, #0
 8007604:	f000 80a2 	beq.w	800774c <_svfiprintf_r+0x1c8>
 8007608:	2300      	movs	r3, #0
 800760a:	f04f 32ff 	mov.w	r2, #4294967295
 800760e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007612:	f10a 0a01 	add.w	sl, sl, #1
 8007616:	9304      	str	r3, [sp, #16]
 8007618:	9307      	str	r3, [sp, #28]
 800761a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800761e:	931a      	str	r3, [sp, #104]	; 0x68
 8007620:	4654      	mov	r4, sl
 8007622:	2205      	movs	r2, #5
 8007624:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007628:	4851      	ldr	r0, [pc, #324]	; (8007770 <_svfiprintf_r+0x1ec>)
 800762a:	f7f8 fdd9 	bl	80001e0 <memchr>
 800762e:	9a04      	ldr	r2, [sp, #16]
 8007630:	b9d8      	cbnz	r0, 800766a <_svfiprintf_r+0xe6>
 8007632:	06d0      	lsls	r0, r2, #27
 8007634:	bf44      	itt	mi
 8007636:	2320      	movmi	r3, #32
 8007638:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800763c:	0711      	lsls	r1, r2, #28
 800763e:	bf44      	itt	mi
 8007640:	232b      	movmi	r3, #43	; 0x2b
 8007642:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007646:	f89a 3000 	ldrb.w	r3, [sl]
 800764a:	2b2a      	cmp	r3, #42	; 0x2a
 800764c:	d015      	beq.n	800767a <_svfiprintf_r+0xf6>
 800764e:	9a07      	ldr	r2, [sp, #28]
 8007650:	4654      	mov	r4, sl
 8007652:	2000      	movs	r0, #0
 8007654:	f04f 0c0a 	mov.w	ip, #10
 8007658:	4621      	mov	r1, r4
 800765a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800765e:	3b30      	subs	r3, #48	; 0x30
 8007660:	2b09      	cmp	r3, #9
 8007662:	d94e      	bls.n	8007702 <_svfiprintf_r+0x17e>
 8007664:	b1b0      	cbz	r0, 8007694 <_svfiprintf_r+0x110>
 8007666:	9207      	str	r2, [sp, #28]
 8007668:	e014      	b.n	8007694 <_svfiprintf_r+0x110>
 800766a:	eba0 0308 	sub.w	r3, r0, r8
 800766e:	fa09 f303 	lsl.w	r3, r9, r3
 8007672:	4313      	orrs	r3, r2
 8007674:	9304      	str	r3, [sp, #16]
 8007676:	46a2      	mov	sl, r4
 8007678:	e7d2      	b.n	8007620 <_svfiprintf_r+0x9c>
 800767a:	9b03      	ldr	r3, [sp, #12]
 800767c:	1d19      	adds	r1, r3, #4
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	9103      	str	r1, [sp, #12]
 8007682:	2b00      	cmp	r3, #0
 8007684:	bfbb      	ittet	lt
 8007686:	425b      	neglt	r3, r3
 8007688:	f042 0202 	orrlt.w	r2, r2, #2
 800768c:	9307      	strge	r3, [sp, #28]
 800768e:	9307      	strlt	r3, [sp, #28]
 8007690:	bfb8      	it	lt
 8007692:	9204      	strlt	r2, [sp, #16]
 8007694:	7823      	ldrb	r3, [r4, #0]
 8007696:	2b2e      	cmp	r3, #46	; 0x2e
 8007698:	d10c      	bne.n	80076b4 <_svfiprintf_r+0x130>
 800769a:	7863      	ldrb	r3, [r4, #1]
 800769c:	2b2a      	cmp	r3, #42	; 0x2a
 800769e:	d135      	bne.n	800770c <_svfiprintf_r+0x188>
 80076a0:	9b03      	ldr	r3, [sp, #12]
 80076a2:	1d1a      	adds	r2, r3, #4
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	9203      	str	r2, [sp, #12]
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	bfb8      	it	lt
 80076ac:	f04f 33ff 	movlt.w	r3, #4294967295
 80076b0:	3402      	adds	r4, #2
 80076b2:	9305      	str	r3, [sp, #20]
 80076b4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8007780 <_svfiprintf_r+0x1fc>
 80076b8:	7821      	ldrb	r1, [r4, #0]
 80076ba:	2203      	movs	r2, #3
 80076bc:	4650      	mov	r0, sl
 80076be:	f7f8 fd8f 	bl	80001e0 <memchr>
 80076c2:	b140      	cbz	r0, 80076d6 <_svfiprintf_r+0x152>
 80076c4:	2340      	movs	r3, #64	; 0x40
 80076c6:	eba0 000a 	sub.w	r0, r0, sl
 80076ca:	fa03 f000 	lsl.w	r0, r3, r0
 80076ce:	9b04      	ldr	r3, [sp, #16]
 80076d0:	4303      	orrs	r3, r0
 80076d2:	3401      	adds	r4, #1
 80076d4:	9304      	str	r3, [sp, #16]
 80076d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80076da:	4826      	ldr	r0, [pc, #152]	; (8007774 <_svfiprintf_r+0x1f0>)
 80076dc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80076e0:	2206      	movs	r2, #6
 80076e2:	f7f8 fd7d 	bl	80001e0 <memchr>
 80076e6:	2800      	cmp	r0, #0
 80076e8:	d038      	beq.n	800775c <_svfiprintf_r+0x1d8>
 80076ea:	4b23      	ldr	r3, [pc, #140]	; (8007778 <_svfiprintf_r+0x1f4>)
 80076ec:	bb1b      	cbnz	r3, 8007736 <_svfiprintf_r+0x1b2>
 80076ee:	9b03      	ldr	r3, [sp, #12]
 80076f0:	3307      	adds	r3, #7
 80076f2:	f023 0307 	bic.w	r3, r3, #7
 80076f6:	3308      	adds	r3, #8
 80076f8:	9303      	str	r3, [sp, #12]
 80076fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80076fc:	4433      	add	r3, r6
 80076fe:	9309      	str	r3, [sp, #36]	; 0x24
 8007700:	e767      	b.n	80075d2 <_svfiprintf_r+0x4e>
 8007702:	fb0c 3202 	mla	r2, ip, r2, r3
 8007706:	460c      	mov	r4, r1
 8007708:	2001      	movs	r0, #1
 800770a:	e7a5      	b.n	8007658 <_svfiprintf_r+0xd4>
 800770c:	2300      	movs	r3, #0
 800770e:	3401      	adds	r4, #1
 8007710:	9305      	str	r3, [sp, #20]
 8007712:	4619      	mov	r1, r3
 8007714:	f04f 0c0a 	mov.w	ip, #10
 8007718:	4620      	mov	r0, r4
 800771a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800771e:	3a30      	subs	r2, #48	; 0x30
 8007720:	2a09      	cmp	r2, #9
 8007722:	d903      	bls.n	800772c <_svfiprintf_r+0x1a8>
 8007724:	2b00      	cmp	r3, #0
 8007726:	d0c5      	beq.n	80076b4 <_svfiprintf_r+0x130>
 8007728:	9105      	str	r1, [sp, #20]
 800772a:	e7c3      	b.n	80076b4 <_svfiprintf_r+0x130>
 800772c:	fb0c 2101 	mla	r1, ip, r1, r2
 8007730:	4604      	mov	r4, r0
 8007732:	2301      	movs	r3, #1
 8007734:	e7f0      	b.n	8007718 <_svfiprintf_r+0x194>
 8007736:	ab03      	add	r3, sp, #12
 8007738:	9300      	str	r3, [sp, #0]
 800773a:	462a      	mov	r2, r5
 800773c:	4b0f      	ldr	r3, [pc, #60]	; (800777c <_svfiprintf_r+0x1f8>)
 800773e:	a904      	add	r1, sp, #16
 8007740:	4638      	mov	r0, r7
 8007742:	f3af 8000 	nop.w
 8007746:	1c42      	adds	r2, r0, #1
 8007748:	4606      	mov	r6, r0
 800774a:	d1d6      	bne.n	80076fa <_svfiprintf_r+0x176>
 800774c:	89ab      	ldrh	r3, [r5, #12]
 800774e:	065b      	lsls	r3, r3, #25
 8007750:	f53f af2c 	bmi.w	80075ac <_svfiprintf_r+0x28>
 8007754:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007756:	b01d      	add	sp, #116	; 0x74
 8007758:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800775c:	ab03      	add	r3, sp, #12
 800775e:	9300      	str	r3, [sp, #0]
 8007760:	462a      	mov	r2, r5
 8007762:	4b06      	ldr	r3, [pc, #24]	; (800777c <_svfiprintf_r+0x1f8>)
 8007764:	a904      	add	r1, sp, #16
 8007766:	4638      	mov	r0, r7
 8007768:	f000 f87a 	bl	8007860 <_printf_i>
 800776c:	e7eb      	b.n	8007746 <_svfiprintf_r+0x1c2>
 800776e:	bf00      	nop
 8007770:	08007d44 	.word	0x08007d44
 8007774:	08007d4e 	.word	0x08007d4e
 8007778:	00000000 	.word	0x00000000
 800777c:	080074cd 	.word	0x080074cd
 8007780:	08007d4a 	.word	0x08007d4a

08007784 <_printf_common>:
 8007784:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007788:	4616      	mov	r6, r2
 800778a:	4699      	mov	r9, r3
 800778c:	688a      	ldr	r2, [r1, #8]
 800778e:	690b      	ldr	r3, [r1, #16]
 8007790:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007794:	4293      	cmp	r3, r2
 8007796:	bfb8      	it	lt
 8007798:	4613      	movlt	r3, r2
 800779a:	6033      	str	r3, [r6, #0]
 800779c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80077a0:	4607      	mov	r7, r0
 80077a2:	460c      	mov	r4, r1
 80077a4:	b10a      	cbz	r2, 80077aa <_printf_common+0x26>
 80077a6:	3301      	adds	r3, #1
 80077a8:	6033      	str	r3, [r6, #0]
 80077aa:	6823      	ldr	r3, [r4, #0]
 80077ac:	0699      	lsls	r1, r3, #26
 80077ae:	bf42      	ittt	mi
 80077b0:	6833      	ldrmi	r3, [r6, #0]
 80077b2:	3302      	addmi	r3, #2
 80077b4:	6033      	strmi	r3, [r6, #0]
 80077b6:	6825      	ldr	r5, [r4, #0]
 80077b8:	f015 0506 	ands.w	r5, r5, #6
 80077bc:	d106      	bne.n	80077cc <_printf_common+0x48>
 80077be:	f104 0a19 	add.w	sl, r4, #25
 80077c2:	68e3      	ldr	r3, [r4, #12]
 80077c4:	6832      	ldr	r2, [r6, #0]
 80077c6:	1a9b      	subs	r3, r3, r2
 80077c8:	42ab      	cmp	r3, r5
 80077ca:	dc26      	bgt.n	800781a <_printf_common+0x96>
 80077cc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80077d0:	1e13      	subs	r3, r2, #0
 80077d2:	6822      	ldr	r2, [r4, #0]
 80077d4:	bf18      	it	ne
 80077d6:	2301      	movne	r3, #1
 80077d8:	0692      	lsls	r2, r2, #26
 80077da:	d42b      	bmi.n	8007834 <_printf_common+0xb0>
 80077dc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80077e0:	4649      	mov	r1, r9
 80077e2:	4638      	mov	r0, r7
 80077e4:	47c0      	blx	r8
 80077e6:	3001      	adds	r0, #1
 80077e8:	d01e      	beq.n	8007828 <_printf_common+0xa4>
 80077ea:	6823      	ldr	r3, [r4, #0]
 80077ec:	68e5      	ldr	r5, [r4, #12]
 80077ee:	6832      	ldr	r2, [r6, #0]
 80077f0:	f003 0306 	and.w	r3, r3, #6
 80077f4:	2b04      	cmp	r3, #4
 80077f6:	bf08      	it	eq
 80077f8:	1aad      	subeq	r5, r5, r2
 80077fa:	68a3      	ldr	r3, [r4, #8]
 80077fc:	6922      	ldr	r2, [r4, #16]
 80077fe:	bf0c      	ite	eq
 8007800:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007804:	2500      	movne	r5, #0
 8007806:	4293      	cmp	r3, r2
 8007808:	bfc4      	itt	gt
 800780a:	1a9b      	subgt	r3, r3, r2
 800780c:	18ed      	addgt	r5, r5, r3
 800780e:	2600      	movs	r6, #0
 8007810:	341a      	adds	r4, #26
 8007812:	42b5      	cmp	r5, r6
 8007814:	d11a      	bne.n	800784c <_printf_common+0xc8>
 8007816:	2000      	movs	r0, #0
 8007818:	e008      	b.n	800782c <_printf_common+0xa8>
 800781a:	2301      	movs	r3, #1
 800781c:	4652      	mov	r2, sl
 800781e:	4649      	mov	r1, r9
 8007820:	4638      	mov	r0, r7
 8007822:	47c0      	blx	r8
 8007824:	3001      	adds	r0, #1
 8007826:	d103      	bne.n	8007830 <_printf_common+0xac>
 8007828:	f04f 30ff 	mov.w	r0, #4294967295
 800782c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007830:	3501      	adds	r5, #1
 8007832:	e7c6      	b.n	80077c2 <_printf_common+0x3e>
 8007834:	18e1      	adds	r1, r4, r3
 8007836:	1c5a      	adds	r2, r3, #1
 8007838:	2030      	movs	r0, #48	; 0x30
 800783a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800783e:	4422      	add	r2, r4
 8007840:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007844:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007848:	3302      	adds	r3, #2
 800784a:	e7c7      	b.n	80077dc <_printf_common+0x58>
 800784c:	2301      	movs	r3, #1
 800784e:	4622      	mov	r2, r4
 8007850:	4649      	mov	r1, r9
 8007852:	4638      	mov	r0, r7
 8007854:	47c0      	blx	r8
 8007856:	3001      	adds	r0, #1
 8007858:	d0e6      	beq.n	8007828 <_printf_common+0xa4>
 800785a:	3601      	adds	r6, #1
 800785c:	e7d9      	b.n	8007812 <_printf_common+0x8e>
	...

08007860 <_printf_i>:
 8007860:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007864:	7e0f      	ldrb	r7, [r1, #24]
 8007866:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007868:	2f78      	cmp	r7, #120	; 0x78
 800786a:	4691      	mov	r9, r2
 800786c:	4680      	mov	r8, r0
 800786e:	460c      	mov	r4, r1
 8007870:	469a      	mov	sl, r3
 8007872:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007876:	d807      	bhi.n	8007888 <_printf_i+0x28>
 8007878:	2f62      	cmp	r7, #98	; 0x62
 800787a:	d80a      	bhi.n	8007892 <_printf_i+0x32>
 800787c:	2f00      	cmp	r7, #0
 800787e:	f000 80d8 	beq.w	8007a32 <_printf_i+0x1d2>
 8007882:	2f58      	cmp	r7, #88	; 0x58
 8007884:	f000 80a3 	beq.w	80079ce <_printf_i+0x16e>
 8007888:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800788c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007890:	e03a      	b.n	8007908 <_printf_i+0xa8>
 8007892:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007896:	2b15      	cmp	r3, #21
 8007898:	d8f6      	bhi.n	8007888 <_printf_i+0x28>
 800789a:	a101      	add	r1, pc, #4	; (adr r1, 80078a0 <_printf_i+0x40>)
 800789c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80078a0:	080078f9 	.word	0x080078f9
 80078a4:	0800790d 	.word	0x0800790d
 80078a8:	08007889 	.word	0x08007889
 80078ac:	08007889 	.word	0x08007889
 80078b0:	08007889 	.word	0x08007889
 80078b4:	08007889 	.word	0x08007889
 80078b8:	0800790d 	.word	0x0800790d
 80078bc:	08007889 	.word	0x08007889
 80078c0:	08007889 	.word	0x08007889
 80078c4:	08007889 	.word	0x08007889
 80078c8:	08007889 	.word	0x08007889
 80078cc:	08007a19 	.word	0x08007a19
 80078d0:	0800793d 	.word	0x0800793d
 80078d4:	080079fb 	.word	0x080079fb
 80078d8:	08007889 	.word	0x08007889
 80078dc:	08007889 	.word	0x08007889
 80078e0:	08007a3b 	.word	0x08007a3b
 80078e4:	08007889 	.word	0x08007889
 80078e8:	0800793d 	.word	0x0800793d
 80078ec:	08007889 	.word	0x08007889
 80078f0:	08007889 	.word	0x08007889
 80078f4:	08007a03 	.word	0x08007a03
 80078f8:	682b      	ldr	r3, [r5, #0]
 80078fa:	1d1a      	adds	r2, r3, #4
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	602a      	str	r2, [r5, #0]
 8007900:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007904:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007908:	2301      	movs	r3, #1
 800790a:	e0a3      	b.n	8007a54 <_printf_i+0x1f4>
 800790c:	6820      	ldr	r0, [r4, #0]
 800790e:	6829      	ldr	r1, [r5, #0]
 8007910:	0606      	lsls	r6, r0, #24
 8007912:	f101 0304 	add.w	r3, r1, #4
 8007916:	d50a      	bpl.n	800792e <_printf_i+0xce>
 8007918:	680e      	ldr	r6, [r1, #0]
 800791a:	602b      	str	r3, [r5, #0]
 800791c:	2e00      	cmp	r6, #0
 800791e:	da03      	bge.n	8007928 <_printf_i+0xc8>
 8007920:	232d      	movs	r3, #45	; 0x2d
 8007922:	4276      	negs	r6, r6
 8007924:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007928:	485e      	ldr	r0, [pc, #376]	; (8007aa4 <_printf_i+0x244>)
 800792a:	230a      	movs	r3, #10
 800792c:	e019      	b.n	8007962 <_printf_i+0x102>
 800792e:	680e      	ldr	r6, [r1, #0]
 8007930:	602b      	str	r3, [r5, #0]
 8007932:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007936:	bf18      	it	ne
 8007938:	b236      	sxthne	r6, r6
 800793a:	e7ef      	b.n	800791c <_printf_i+0xbc>
 800793c:	682b      	ldr	r3, [r5, #0]
 800793e:	6820      	ldr	r0, [r4, #0]
 8007940:	1d19      	adds	r1, r3, #4
 8007942:	6029      	str	r1, [r5, #0]
 8007944:	0601      	lsls	r1, r0, #24
 8007946:	d501      	bpl.n	800794c <_printf_i+0xec>
 8007948:	681e      	ldr	r6, [r3, #0]
 800794a:	e002      	b.n	8007952 <_printf_i+0xf2>
 800794c:	0646      	lsls	r6, r0, #25
 800794e:	d5fb      	bpl.n	8007948 <_printf_i+0xe8>
 8007950:	881e      	ldrh	r6, [r3, #0]
 8007952:	4854      	ldr	r0, [pc, #336]	; (8007aa4 <_printf_i+0x244>)
 8007954:	2f6f      	cmp	r7, #111	; 0x6f
 8007956:	bf0c      	ite	eq
 8007958:	2308      	moveq	r3, #8
 800795a:	230a      	movne	r3, #10
 800795c:	2100      	movs	r1, #0
 800795e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007962:	6865      	ldr	r5, [r4, #4]
 8007964:	60a5      	str	r5, [r4, #8]
 8007966:	2d00      	cmp	r5, #0
 8007968:	bfa2      	ittt	ge
 800796a:	6821      	ldrge	r1, [r4, #0]
 800796c:	f021 0104 	bicge.w	r1, r1, #4
 8007970:	6021      	strge	r1, [r4, #0]
 8007972:	b90e      	cbnz	r6, 8007978 <_printf_i+0x118>
 8007974:	2d00      	cmp	r5, #0
 8007976:	d04d      	beq.n	8007a14 <_printf_i+0x1b4>
 8007978:	4615      	mov	r5, r2
 800797a:	fbb6 f1f3 	udiv	r1, r6, r3
 800797e:	fb03 6711 	mls	r7, r3, r1, r6
 8007982:	5dc7      	ldrb	r7, [r0, r7]
 8007984:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007988:	4637      	mov	r7, r6
 800798a:	42bb      	cmp	r3, r7
 800798c:	460e      	mov	r6, r1
 800798e:	d9f4      	bls.n	800797a <_printf_i+0x11a>
 8007990:	2b08      	cmp	r3, #8
 8007992:	d10b      	bne.n	80079ac <_printf_i+0x14c>
 8007994:	6823      	ldr	r3, [r4, #0]
 8007996:	07de      	lsls	r6, r3, #31
 8007998:	d508      	bpl.n	80079ac <_printf_i+0x14c>
 800799a:	6923      	ldr	r3, [r4, #16]
 800799c:	6861      	ldr	r1, [r4, #4]
 800799e:	4299      	cmp	r1, r3
 80079a0:	bfde      	ittt	le
 80079a2:	2330      	movle	r3, #48	; 0x30
 80079a4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80079a8:	f105 35ff 	addle.w	r5, r5, #4294967295
 80079ac:	1b52      	subs	r2, r2, r5
 80079ae:	6122      	str	r2, [r4, #16]
 80079b0:	f8cd a000 	str.w	sl, [sp]
 80079b4:	464b      	mov	r3, r9
 80079b6:	aa03      	add	r2, sp, #12
 80079b8:	4621      	mov	r1, r4
 80079ba:	4640      	mov	r0, r8
 80079bc:	f7ff fee2 	bl	8007784 <_printf_common>
 80079c0:	3001      	adds	r0, #1
 80079c2:	d14c      	bne.n	8007a5e <_printf_i+0x1fe>
 80079c4:	f04f 30ff 	mov.w	r0, #4294967295
 80079c8:	b004      	add	sp, #16
 80079ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80079ce:	4835      	ldr	r0, [pc, #212]	; (8007aa4 <_printf_i+0x244>)
 80079d0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80079d4:	6829      	ldr	r1, [r5, #0]
 80079d6:	6823      	ldr	r3, [r4, #0]
 80079d8:	f851 6b04 	ldr.w	r6, [r1], #4
 80079dc:	6029      	str	r1, [r5, #0]
 80079de:	061d      	lsls	r5, r3, #24
 80079e0:	d514      	bpl.n	8007a0c <_printf_i+0x1ac>
 80079e2:	07df      	lsls	r7, r3, #31
 80079e4:	bf44      	itt	mi
 80079e6:	f043 0320 	orrmi.w	r3, r3, #32
 80079ea:	6023      	strmi	r3, [r4, #0]
 80079ec:	b91e      	cbnz	r6, 80079f6 <_printf_i+0x196>
 80079ee:	6823      	ldr	r3, [r4, #0]
 80079f0:	f023 0320 	bic.w	r3, r3, #32
 80079f4:	6023      	str	r3, [r4, #0]
 80079f6:	2310      	movs	r3, #16
 80079f8:	e7b0      	b.n	800795c <_printf_i+0xfc>
 80079fa:	6823      	ldr	r3, [r4, #0]
 80079fc:	f043 0320 	orr.w	r3, r3, #32
 8007a00:	6023      	str	r3, [r4, #0]
 8007a02:	2378      	movs	r3, #120	; 0x78
 8007a04:	4828      	ldr	r0, [pc, #160]	; (8007aa8 <_printf_i+0x248>)
 8007a06:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007a0a:	e7e3      	b.n	80079d4 <_printf_i+0x174>
 8007a0c:	0659      	lsls	r1, r3, #25
 8007a0e:	bf48      	it	mi
 8007a10:	b2b6      	uxthmi	r6, r6
 8007a12:	e7e6      	b.n	80079e2 <_printf_i+0x182>
 8007a14:	4615      	mov	r5, r2
 8007a16:	e7bb      	b.n	8007990 <_printf_i+0x130>
 8007a18:	682b      	ldr	r3, [r5, #0]
 8007a1a:	6826      	ldr	r6, [r4, #0]
 8007a1c:	6961      	ldr	r1, [r4, #20]
 8007a1e:	1d18      	adds	r0, r3, #4
 8007a20:	6028      	str	r0, [r5, #0]
 8007a22:	0635      	lsls	r5, r6, #24
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	d501      	bpl.n	8007a2c <_printf_i+0x1cc>
 8007a28:	6019      	str	r1, [r3, #0]
 8007a2a:	e002      	b.n	8007a32 <_printf_i+0x1d2>
 8007a2c:	0670      	lsls	r0, r6, #25
 8007a2e:	d5fb      	bpl.n	8007a28 <_printf_i+0x1c8>
 8007a30:	8019      	strh	r1, [r3, #0]
 8007a32:	2300      	movs	r3, #0
 8007a34:	6123      	str	r3, [r4, #16]
 8007a36:	4615      	mov	r5, r2
 8007a38:	e7ba      	b.n	80079b0 <_printf_i+0x150>
 8007a3a:	682b      	ldr	r3, [r5, #0]
 8007a3c:	1d1a      	adds	r2, r3, #4
 8007a3e:	602a      	str	r2, [r5, #0]
 8007a40:	681d      	ldr	r5, [r3, #0]
 8007a42:	6862      	ldr	r2, [r4, #4]
 8007a44:	2100      	movs	r1, #0
 8007a46:	4628      	mov	r0, r5
 8007a48:	f7f8 fbca 	bl	80001e0 <memchr>
 8007a4c:	b108      	cbz	r0, 8007a52 <_printf_i+0x1f2>
 8007a4e:	1b40      	subs	r0, r0, r5
 8007a50:	6060      	str	r0, [r4, #4]
 8007a52:	6863      	ldr	r3, [r4, #4]
 8007a54:	6123      	str	r3, [r4, #16]
 8007a56:	2300      	movs	r3, #0
 8007a58:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007a5c:	e7a8      	b.n	80079b0 <_printf_i+0x150>
 8007a5e:	6923      	ldr	r3, [r4, #16]
 8007a60:	462a      	mov	r2, r5
 8007a62:	4649      	mov	r1, r9
 8007a64:	4640      	mov	r0, r8
 8007a66:	47d0      	blx	sl
 8007a68:	3001      	adds	r0, #1
 8007a6a:	d0ab      	beq.n	80079c4 <_printf_i+0x164>
 8007a6c:	6823      	ldr	r3, [r4, #0]
 8007a6e:	079b      	lsls	r3, r3, #30
 8007a70:	d413      	bmi.n	8007a9a <_printf_i+0x23a>
 8007a72:	68e0      	ldr	r0, [r4, #12]
 8007a74:	9b03      	ldr	r3, [sp, #12]
 8007a76:	4298      	cmp	r0, r3
 8007a78:	bfb8      	it	lt
 8007a7a:	4618      	movlt	r0, r3
 8007a7c:	e7a4      	b.n	80079c8 <_printf_i+0x168>
 8007a7e:	2301      	movs	r3, #1
 8007a80:	4632      	mov	r2, r6
 8007a82:	4649      	mov	r1, r9
 8007a84:	4640      	mov	r0, r8
 8007a86:	47d0      	blx	sl
 8007a88:	3001      	adds	r0, #1
 8007a8a:	d09b      	beq.n	80079c4 <_printf_i+0x164>
 8007a8c:	3501      	adds	r5, #1
 8007a8e:	68e3      	ldr	r3, [r4, #12]
 8007a90:	9903      	ldr	r1, [sp, #12]
 8007a92:	1a5b      	subs	r3, r3, r1
 8007a94:	42ab      	cmp	r3, r5
 8007a96:	dcf2      	bgt.n	8007a7e <_printf_i+0x21e>
 8007a98:	e7eb      	b.n	8007a72 <_printf_i+0x212>
 8007a9a:	2500      	movs	r5, #0
 8007a9c:	f104 0619 	add.w	r6, r4, #25
 8007aa0:	e7f5      	b.n	8007a8e <_printf_i+0x22e>
 8007aa2:	bf00      	nop
 8007aa4:	08007d55 	.word	0x08007d55
 8007aa8:	08007d66 	.word	0x08007d66

08007aac <memmove>:
 8007aac:	4288      	cmp	r0, r1
 8007aae:	b510      	push	{r4, lr}
 8007ab0:	eb01 0402 	add.w	r4, r1, r2
 8007ab4:	d902      	bls.n	8007abc <memmove+0x10>
 8007ab6:	4284      	cmp	r4, r0
 8007ab8:	4623      	mov	r3, r4
 8007aba:	d807      	bhi.n	8007acc <memmove+0x20>
 8007abc:	1e43      	subs	r3, r0, #1
 8007abe:	42a1      	cmp	r1, r4
 8007ac0:	d008      	beq.n	8007ad4 <memmove+0x28>
 8007ac2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007ac6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007aca:	e7f8      	b.n	8007abe <memmove+0x12>
 8007acc:	4402      	add	r2, r0
 8007ace:	4601      	mov	r1, r0
 8007ad0:	428a      	cmp	r2, r1
 8007ad2:	d100      	bne.n	8007ad6 <memmove+0x2a>
 8007ad4:	bd10      	pop	{r4, pc}
 8007ad6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007ada:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007ade:	e7f7      	b.n	8007ad0 <memmove+0x24>

08007ae0 <_realloc_r>:
 8007ae0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007ae4:	4680      	mov	r8, r0
 8007ae6:	4614      	mov	r4, r2
 8007ae8:	460e      	mov	r6, r1
 8007aea:	b921      	cbnz	r1, 8007af6 <_realloc_r+0x16>
 8007aec:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007af0:	4611      	mov	r1, r2
 8007af2:	f7ff bbef 	b.w	80072d4 <_malloc_r>
 8007af6:	b92a      	cbnz	r2, 8007b04 <_realloc_r+0x24>
 8007af8:	f7ff fc9c 	bl	8007434 <_free_r>
 8007afc:	4625      	mov	r5, r4
 8007afe:	4628      	mov	r0, r5
 8007b00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007b04:	f000 f81b 	bl	8007b3e <_malloc_usable_size_r>
 8007b08:	4284      	cmp	r4, r0
 8007b0a:	4607      	mov	r7, r0
 8007b0c:	d802      	bhi.n	8007b14 <_realloc_r+0x34>
 8007b0e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007b12:	d812      	bhi.n	8007b3a <_realloc_r+0x5a>
 8007b14:	4621      	mov	r1, r4
 8007b16:	4640      	mov	r0, r8
 8007b18:	f7ff fbdc 	bl	80072d4 <_malloc_r>
 8007b1c:	4605      	mov	r5, r0
 8007b1e:	2800      	cmp	r0, #0
 8007b20:	d0ed      	beq.n	8007afe <_realloc_r+0x1e>
 8007b22:	42bc      	cmp	r4, r7
 8007b24:	4622      	mov	r2, r4
 8007b26:	4631      	mov	r1, r6
 8007b28:	bf28      	it	cs
 8007b2a:	463a      	movcs	r2, r7
 8007b2c:	f7ff fb9c 	bl	8007268 <memcpy>
 8007b30:	4631      	mov	r1, r6
 8007b32:	4640      	mov	r0, r8
 8007b34:	f7ff fc7e 	bl	8007434 <_free_r>
 8007b38:	e7e1      	b.n	8007afe <_realloc_r+0x1e>
 8007b3a:	4635      	mov	r5, r6
 8007b3c:	e7df      	b.n	8007afe <_realloc_r+0x1e>

08007b3e <_malloc_usable_size_r>:
 8007b3e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007b42:	1f18      	subs	r0, r3, #4
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	bfbc      	itt	lt
 8007b48:	580b      	ldrlt	r3, [r1, r0]
 8007b4a:	18c0      	addlt	r0, r0, r3
 8007b4c:	4770      	bx	lr
	...

08007b50 <_init>:
 8007b50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b52:	bf00      	nop
 8007b54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007b56:	bc08      	pop	{r3}
 8007b58:	469e      	mov	lr, r3
 8007b5a:	4770      	bx	lr

08007b5c <_fini>:
 8007b5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b5e:	bf00      	nop
 8007b60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007b62:	bc08      	pop	{r3}
 8007b64:	469e      	mov	lr, r3
 8007b66:	4770      	bx	lr
