
nucleo-l432kc_9dof-imu-click.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bf4c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000408  0800c0e0  0800c0e0  0001c0e0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c4e8  0800c4e8  0002007c  2**0
                  CONTENTS
  4 .ARM          00000008  0800c4e8  0800c4e8  0001c4e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c4f0  0800c4f0  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c4f0  0800c4f0  0001c4f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c4f4  0800c4f4  0001c4f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  0800c4f8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005e04  2000007c  0800c574  0002007c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20005e80  0800c574  00025e80  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00026370  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000518a  00000000  00000000  0004641c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001db8  00000000  00000000  0004b5a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001bf0  00000000  00000000  0004d360  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002851b  00000000  00000000  0004ef50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00026254  00000000  00000000  0007746b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000dd490  00000000  00000000  0009d6bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0017ab4f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008824  00000000  00000000  0017aba0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000007c 	.word	0x2000007c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800c0c4 	.word	0x0800c0c4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000080 	.word	0x20000080
 80001cc:	0800c0c4 	.word	0x0800c0c4

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	; 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	3c01      	subs	r4, #1
 80003ac:	bf28      	it	cs
 80003ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003b2:	d2e9      	bcs.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_dmul>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005f6:	bf1d      	ittte	ne
 80005f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005fc:	ea94 0f0c 	teqne	r4, ip
 8000600:	ea95 0f0c 	teqne	r5, ip
 8000604:	f000 f8de 	bleq	80007c4 <__aeabi_dmul+0x1dc>
 8000608:	442c      	add	r4, r5
 800060a:	ea81 0603 	eor.w	r6, r1, r3
 800060e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000612:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000616:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800061a:	bf18      	it	ne
 800061c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000624:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000628:	d038      	beq.n	800069c <__aeabi_dmul+0xb4>
 800062a:	fba0 ce02 	umull	ip, lr, r0, r2
 800062e:	f04f 0500 	mov.w	r5, #0
 8000632:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000636:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800063a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800063e:	f04f 0600 	mov.w	r6, #0
 8000642:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000646:	f09c 0f00 	teq	ip, #0
 800064a:	bf18      	it	ne
 800064c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000650:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000654:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000658:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800065c:	d204      	bcs.n	8000668 <__aeabi_dmul+0x80>
 800065e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000662:	416d      	adcs	r5, r5
 8000664:	eb46 0606 	adc.w	r6, r6, r6
 8000668:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800066c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000670:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000674:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000678:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800067c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000680:	bf88      	it	hi
 8000682:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000686:	d81e      	bhi.n	80006c6 <__aeabi_dmul+0xde>
 8000688:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800068c:	bf08      	it	eq
 800068e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000692:	f150 0000 	adcs.w	r0, r0, #0
 8000696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006a0:	ea46 0101 	orr.w	r1, r6, r1
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	ea81 0103 	eor.w	r1, r1, r3
 80006ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b0:	bfc2      	ittt	gt
 80006b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	popgt	{r4, r5, r6, pc}
 80006bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006c0:	f04f 0e00 	mov.w	lr, #0
 80006c4:	3c01      	subs	r4, #1
 80006c6:	f300 80ab 	bgt.w	8000820 <__aeabi_dmul+0x238>
 80006ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ce:	bfde      	ittt	le
 80006d0:	2000      	movle	r0, #0
 80006d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006d6:	bd70      	pople	{r4, r5, r6, pc}
 80006d8:	f1c4 0400 	rsb	r4, r4, #0
 80006dc:	3c20      	subs	r4, #32
 80006de:	da35      	bge.n	800074c <__aeabi_dmul+0x164>
 80006e0:	340c      	adds	r4, #12
 80006e2:	dc1b      	bgt.n	800071c <__aeabi_dmul+0x134>
 80006e4:	f104 0414 	add.w	r4, r4, #20
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f305 	lsl.w	r3, r0, r5
 80006f0:	fa20 f004 	lsr.w	r0, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000700:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000708:	fa21 f604 	lsr.w	r6, r1, r4
 800070c:	eb42 0106 	adc.w	r1, r2, r6
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 040c 	rsb	r4, r4, #12
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f304 	lsl.w	r3, r0, r4
 8000728:	fa20 f005 	lsr.w	r0, r0, r5
 800072c:	fa01 f204 	lsl.w	r2, r1, r4
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800073c:	f141 0100 	adc.w	r1, r1, #0
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f205 	lsl.w	r2, r0, r5
 8000754:	ea4e 0e02 	orr.w	lr, lr, r2
 8000758:	fa20 f304 	lsr.w	r3, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea43 0302 	orr.w	r3, r3, r2
 8000764:	fa21 f004 	lsr.w	r0, r1, r4
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800076c:	fa21 f204 	lsr.w	r2, r1, r4
 8000770:	ea20 0002 	bic.w	r0, r0, r2
 8000774:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f094 0f00 	teq	r4, #0
 8000788:	d10f      	bne.n	80007aa <__aeabi_dmul+0x1c2>
 800078a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800078e:	0040      	lsls	r0, r0, #1
 8000790:	eb41 0101 	adc.w	r1, r1, r1
 8000794:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000798:	bf08      	it	eq
 800079a:	3c01      	subeq	r4, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1a6>
 800079e:	ea41 0106 	orr.w	r1, r1, r6
 80007a2:	f095 0f00 	teq	r5, #0
 80007a6:	bf18      	it	ne
 80007a8:	4770      	bxne	lr
 80007aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ae:	0052      	lsls	r2, r2, #1
 80007b0:	eb43 0303 	adc.w	r3, r3, r3
 80007b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3d01      	subeq	r5, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1c6>
 80007be:	ea43 0306 	orr.w	r3, r3, r6
 80007c2:	4770      	bx	lr
 80007c4:	ea94 0f0c 	teq	r4, ip
 80007c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007cc:	bf18      	it	ne
 80007ce:	ea95 0f0c 	teqne	r5, ip
 80007d2:	d00c      	beq.n	80007ee <__aeabi_dmul+0x206>
 80007d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d8:	bf18      	it	ne
 80007da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007de:	d1d1      	bne.n	8000784 <__aeabi_dmul+0x19c>
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e8:	f04f 0000 	mov.w	r0, #0
 80007ec:	bd70      	pop	{r4, r5, r6, pc}
 80007ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f2:	bf06      	itte	eq
 80007f4:	4610      	moveq	r0, r2
 80007f6:	4619      	moveq	r1, r3
 80007f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fc:	d019      	beq.n	8000832 <__aeabi_dmul+0x24a>
 80007fe:	ea94 0f0c 	teq	r4, ip
 8000802:	d102      	bne.n	800080a <__aeabi_dmul+0x222>
 8000804:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000808:	d113      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800080a:	ea95 0f0c 	teq	r5, ip
 800080e:	d105      	bne.n	800081c <__aeabi_dmul+0x234>
 8000810:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000814:	bf1c      	itt	ne
 8000816:	4610      	movne	r0, r2
 8000818:	4619      	movne	r1, r3
 800081a:	d10a      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800081c:	ea81 0103 	eor.w	r1, r1, r3
 8000820:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000824:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000828:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000836:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800083a:	bd70      	pop	{r4, r5, r6, pc}

0800083c <__aeabi_ddiv>:
 800083c:	b570      	push	{r4, r5, r6, lr}
 800083e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000842:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000846:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800084a:	bf1d      	ittte	ne
 800084c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000850:	ea94 0f0c 	teqne	r4, ip
 8000854:	ea95 0f0c 	teqne	r5, ip
 8000858:	f000 f8a7 	bleq	80009aa <__aeabi_ddiv+0x16e>
 800085c:	eba4 0405 	sub.w	r4, r4, r5
 8000860:	ea81 0e03 	eor.w	lr, r1, r3
 8000864:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000868:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800086c:	f000 8088 	beq.w	8000980 <__aeabi_ddiv+0x144>
 8000870:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000874:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000878:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800087c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000880:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000884:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000888:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800088c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000890:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000894:	429d      	cmp	r5, r3
 8000896:	bf08      	it	eq
 8000898:	4296      	cmpeq	r6, r2
 800089a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800089e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008a2:	d202      	bcs.n	80008aa <__aeabi_ddiv+0x6e>
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	1ab6      	subs	r6, r6, r2
 80008ac:	eb65 0503 	sbc.w	r5, r5, r3
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000918:	ea55 0e06 	orrs.w	lr, r5, r6
 800091c:	d018      	beq.n	8000950 <__aeabi_ddiv+0x114>
 800091e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000922:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000926:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800092a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800092e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000932:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000936:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800093a:	d1c0      	bne.n	80008be <__aeabi_ddiv+0x82>
 800093c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000940:	d10b      	bne.n	800095a <__aeabi_ddiv+0x11e>
 8000942:	ea41 0100 	orr.w	r1, r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800094e:	e7b6      	b.n	80008be <__aeabi_ddiv+0x82>
 8000950:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000954:	bf04      	itt	eq
 8000956:	4301      	orreq	r1, r0
 8000958:	2000      	moveq	r0, #0
 800095a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800095e:	bf88      	it	hi
 8000960:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000964:	f63f aeaf 	bhi.w	80006c6 <__aeabi_dmul+0xde>
 8000968:	ebb5 0c03 	subs.w	ip, r5, r3
 800096c:	bf04      	itt	eq
 800096e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000972:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000976:	f150 0000 	adcs.w	r0, r0, #0
 800097a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000984:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000988:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800098c:	bfc2      	ittt	gt
 800098e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000992:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000996:	bd70      	popgt	{r4, r5, r6, pc}
 8000998:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800099c:	f04f 0e00 	mov.w	lr, #0
 80009a0:	3c01      	subs	r4, #1
 80009a2:	e690      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009a4:	ea45 0e06 	orr.w	lr, r5, r6
 80009a8:	e68d      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ae:	ea94 0f0c 	teq	r4, ip
 80009b2:	bf08      	it	eq
 80009b4:	ea95 0f0c 	teqeq	r5, ip
 80009b8:	f43f af3b 	beq.w	8000832 <__aeabi_dmul+0x24a>
 80009bc:	ea94 0f0c 	teq	r4, ip
 80009c0:	d10a      	bne.n	80009d8 <__aeabi_ddiv+0x19c>
 80009c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009c6:	f47f af34 	bne.w	8000832 <__aeabi_dmul+0x24a>
 80009ca:	ea95 0f0c 	teq	r5, ip
 80009ce:	f47f af25 	bne.w	800081c <__aeabi_dmul+0x234>
 80009d2:	4610      	mov	r0, r2
 80009d4:	4619      	mov	r1, r3
 80009d6:	e72c      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009d8:	ea95 0f0c 	teq	r5, ip
 80009dc:	d106      	bne.n	80009ec <__aeabi_ddiv+0x1b0>
 80009de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009e2:	f43f aefd 	beq.w	80007e0 <__aeabi_dmul+0x1f8>
 80009e6:	4610      	mov	r0, r2
 80009e8:	4619      	mov	r1, r3
 80009ea:	e722      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009f6:	f47f aec5 	bne.w	8000784 <__aeabi_dmul+0x19c>
 80009fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009fe:	f47f af0d 	bne.w	800081c <__aeabi_dmul+0x234>
 8000a02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a06:	f47f aeeb 	bne.w	80007e0 <__aeabi_dmul+0x1f8>
 8000a0a:	e712      	b.n	8000832 <__aeabi_dmul+0x24a>

08000a0c <__gedf2>:
 8000a0c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a10:	e006      	b.n	8000a20 <__cmpdf2+0x4>
 8000a12:	bf00      	nop

08000a14 <__ledf2>:
 8000a14:	f04f 0c01 	mov.w	ip, #1
 8000a18:	e002      	b.n	8000a20 <__cmpdf2+0x4>
 8000a1a:	bf00      	nop

08000a1c <__cmpdf2>:
 8000a1c:	f04f 0c01 	mov.w	ip, #1
 8000a20:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a24:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a28:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a36:	d01b      	beq.n	8000a70 <__cmpdf2+0x54>
 8000a38:	b001      	add	sp, #4
 8000a3a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a3e:	bf0c      	ite	eq
 8000a40:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a44:	ea91 0f03 	teqne	r1, r3
 8000a48:	bf02      	ittt	eq
 8000a4a:	ea90 0f02 	teqeq	r0, r2
 8000a4e:	2000      	moveq	r0, #0
 8000a50:	4770      	bxeq	lr
 8000a52:	f110 0f00 	cmn.w	r0, #0
 8000a56:	ea91 0f03 	teq	r1, r3
 8000a5a:	bf58      	it	pl
 8000a5c:	4299      	cmppl	r1, r3
 8000a5e:	bf08      	it	eq
 8000a60:	4290      	cmpeq	r0, r2
 8000a62:	bf2c      	ite	cs
 8000a64:	17d8      	asrcs	r0, r3, #31
 8000a66:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a6a:	f040 0001 	orr.w	r0, r0, #1
 8000a6e:	4770      	bx	lr
 8000a70:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a74:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a78:	d102      	bne.n	8000a80 <__cmpdf2+0x64>
 8000a7a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a7e:	d107      	bne.n	8000a90 <__cmpdf2+0x74>
 8000a80:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d1d6      	bne.n	8000a38 <__cmpdf2+0x1c>
 8000a8a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a8e:	d0d3      	beq.n	8000a38 <__cmpdf2+0x1c>
 8000a90:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop

08000a98 <__aeabi_cdrcmple>:
 8000a98:	4684      	mov	ip, r0
 8000a9a:	4610      	mov	r0, r2
 8000a9c:	4662      	mov	r2, ip
 8000a9e:	468c      	mov	ip, r1
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	4663      	mov	r3, ip
 8000aa4:	e000      	b.n	8000aa8 <__aeabi_cdcmpeq>
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdcmpeq>:
 8000aa8:	b501      	push	{r0, lr}
 8000aaa:	f7ff ffb7 	bl	8000a1c <__cmpdf2>
 8000aae:	2800      	cmp	r0, #0
 8000ab0:	bf48      	it	mi
 8000ab2:	f110 0f00 	cmnmi.w	r0, #0
 8000ab6:	bd01      	pop	{r0, pc}

08000ab8 <__aeabi_dcmpeq>:
 8000ab8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000abc:	f7ff fff4 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ac0:	bf0c      	ite	eq
 8000ac2:	2001      	moveq	r0, #1
 8000ac4:	2000      	movne	r0, #0
 8000ac6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aca:	bf00      	nop

08000acc <__aeabi_dcmplt>:
 8000acc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad0:	f7ff ffea 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ad4:	bf34      	ite	cc
 8000ad6:	2001      	movcc	r0, #1
 8000ad8:	2000      	movcs	r0, #0
 8000ada:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ade:	bf00      	nop

08000ae0 <__aeabi_dcmple>:
 8000ae0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae4:	f7ff ffe0 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ae8:	bf94      	ite	ls
 8000aea:	2001      	movls	r0, #1
 8000aec:	2000      	movhi	r0, #0
 8000aee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000af2:	bf00      	nop

08000af4 <__aeabi_dcmpge>:
 8000af4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af8:	f7ff ffce 	bl	8000a98 <__aeabi_cdrcmple>
 8000afc:	bf94      	ite	ls
 8000afe:	2001      	movls	r0, #1
 8000b00:	2000      	movhi	r0, #0
 8000b02:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b06:	bf00      	nop

08000b08 <__aeabi_dcmpgt>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff ffc4 	bl	8000a98 <__aeabi_cdrcmple>
 8000b10:	bf34      	ite	cc
 8000b12:	2001      	movcc	r0, #1
 8000b14:	2000      	movcs	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_ldivmod>:
 8000b1c:	b97b      	cbnz	r3, 8000b3e <__aeabi_ldivmod+0x22>
 8000b1e:	b972      	cbnz	r2, 8000b3e <__aeabi_ldivmod+0x22>
 8000b20:	2900      	cmp	r1, #0
 8000b22:	bfbe      	ittt	lt
 8000b24:	2000      	movlt	r0, #0
 8000b26:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000b2a:	e006      	blt.n	8000b3a <__aeabi_ldivmod+0x1e>
 8000b2c:	bf08      	it	eq
 8000b2e:	2800      	cmpeq	r0, #0
 8000b30:	bf1c      	itt	ne
 8000b32:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000b36:	f04f 30ff 	movne.w	r0, #4294967295
 8000b3a:	f000 b9f5 	b.w	8000f28 <__aeabi_idiv0>
 8000b3e:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b42:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b46:	2900      	cmp	r1, #0
 8000b48:	db09      	blt.n	8000b5e <__aeabi_ldivmod+0x42>
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	db1a      	blt.n	8000b84 <__aeabi_ldivmod+0x68>
 8000b4e:	f000 f883 	bl	8000c58 <__udivmoddi4>
 8000b52:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b56:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b5a:	b004      	add	sp, #16
 8000b5c:	4770      	bx	lr
 8000b5e:	4240      	negs	r0, r0
 8000b60:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	db1b      	blt.n	8000ba0 <__aeabi_ldivmod+0x84>
 8000b68:	f000 f876 	bl	8000c58 <__udivmoddi4>
 8000b6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b74:	b004      	add	sp, #16
 8000b76:	4240      	negs	r0, r0
 8000b78:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b7c:	4252      	negs	r2, r2
 8000b7e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000b82:	4770      	bx	lr
 8000b84:	4252      	negs	r2, r2
 8000b86:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000b8a:	f000 f865 	bl	8000c58 <__udivmoddi4>
 8000b8e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b92:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b96:	b004      	add	sp, #16
 8000b98:	4240      	negs	r0, r0
 8000b9a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b9e:	4770      	bx	lr
 8000ba0:	4252      	negs	r2, r2
 8000ba2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000ba6:	f000 f857 	bl	8000c58 <__udivmoddi4>
 8000baa:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bae:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bb2:	b004      	add	sp, #16
 8000bb4:	4252      	negs	r2, r2
 8000bb6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000bba:	4770      	bx	lr

08000bbc <__aeabi_uldivmod>:
 8000bbc:	b953      	cbnz	r3, 8000bd4 <__aeabi_uldivmod+0x18>
 8000bbe:	b94a      	cbnz	r2, 8000bd4 <__aeabi_uldivmod+0x18>
 8000bc0:	2900      	cmp	r1, #0
 8000bc2:	bf08      	it	eq
 8000bc4:	2800      	cmpeq	r0, #0
 8000bc6:	bf1c      	itt	ne
 8000bc8:	f04f 31ff 	movne.w	r1, #4294967295
 8000bcc:	f04f 30ff 	movne.w	r0, #4294967295
 8000bd0:	f000 b9aa 	b.w	8000f28 <__aeabi_idiv0>
 8000bd4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bd8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bdc:	f000 f83c 	bl	8000c58 <__udivmoddi4>
 8000be0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be8:	b004      	add	sp, #16
 8000bea:	4770      	bx	lr

08000bec <__aeabi_d2lz>:
 8000bec:	b538      	push	{r3, r4, r5, lr}
 8000bee:	2200      	movs	r2, #0
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	4604      	mov	r4, r0
 8000bf4:	460d      	mov	r5, r1
 8000bf6:	f7ff ff69 	bl	8000acc <__aeabi_dcmplt>
 8000bfa:	b928      	cbnz	r0, 8000c08 <__aeabi_d2lz+0x1c>
 8000bfc:	4620      	mov	r0, r4
 8000bfe:	4629      	mov	r1, r5
 8000c00:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000c04:	f000 b80a 	b.w	8000c1c <__aeabi_d2ulz>
 8000c08:	4620      	mov	r0, r4
 8000c0a:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000c0e:	f000 f805 	bl	8000c1c <__aeabi_d2ulz>
 8000c12:	4240      	negs	r0, r0
 8000c14:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c18:	bd38      	pop	{r3, r4, r5, pc}
 8000c1a:	bf00      	nop

08000c1c <__aeabi_d2ulz>:
 8000c1c:	b5d0      	push	{r4, r6, r7, lr}
 8000c1e:	4b0c      	ldr	r3, [pc, #48]	; (8000c50 <__aeabi_d2ulz+0x34>)
 8000c20:	2200      	movs	r2, #0
 8000c22:	4606      	mov	r6, r0
 8000c24:	460f      	mov	r7, r1
 8000c26:	f7ff fcdf 	bl	80005e8 <__aeabi_dmul>
 8000c2a:	f000 f97f 	bl	8000f2c <__aeabi_d2uiz>
 8000c2e:	4604      	mov	r4, r0
 8000c30:	f7ff fc60 	bl	80004f4 <__aeabi_ui2d>
 8000c34:	4b07      	ldr	r3, [pc, #28]	; (8000c54 <__aeabi_d2ulz+0x38>)
 8000c36:	2200      	movs	r2, #0
 8000c38:	f7ff fcd6 	bl	80005e8 <__aeabi_dmul>
 8000c3c:	4602      	mov	r2, r0
 8000c3e:	460b      	mov	r3, r1
 8000c40:	4630      	mov	r0, r6
 8000c42:	4639      	mov	r1, r7
 8000c44:	f7ff fb18 	bl	8000278 <__aeabi_dsub>
 8000c48:	f000 f970 	bl	8000f2c <__aeabi_d2uiz>
 8000c4c:	4621      	mov	r1, r4
 8000c4e:	bdd0      	pop	{r4, r6, r7, pc}
 8000c50:	3df00000 	.word	0x3df00000
 8000c54:	41f00000 	.word	0x41f00000

08000c58 <__udivmoddi4>:
 8000c58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c5c:	9d08      	ldr	r5, [sp, #32]
 8000c5e:	4604      	mov	r4, r0
 8000c60:	468e      	mov	lr, r1
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d14d      	bne.n	8000d02 <__udivmoddi4+0xaa>
 8000c66:	428a      	cmp	r2, r1
 8000c68:	4694      	mov	ip, r2
 8000c6a:	d969      	bls.n	8000d40 <__udivmoddi4+0xe8>
 8000c6c:	fab2 f282 	clz	r2, r2
 8000c70:	b152      	cbz	r2, 8000c88 <__udivmoddi4+0x30>
 8000c72:	fa01 f302 	lsl.w	r3, r1, r2
 8000c76:	f1c2 0120 	rsb	r1, r2, #32
 8000c7a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c7e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c82:	ea41 0e03 	orr.w	lr, r1, r3
 8000c86:	4094      	lsls	r4, r2
 8000c88:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c8c:	0c21      	lsrs	r1, r4, #16
 8000c8e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c92:	fa1f f78c 	uxth.w	r7, ip
 8000c96:	fb08 e316 	mls	r3, r8, r6, lr
 8000c9a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c9e:	fb06 f107 	mul.w	r1, r6, r7
 8000ca2:	4299      	cmp	r1, r3
 8000ca4:	d90a      	bls.n	8000cbc <__udivmoddi4+0x64>
 8000ca6:	eb1c 0303 	adds.w	r3, ip, r3
 8000caa:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cae:	f080 811f 	bcs.w	8000ef0 <__udivmoddi4+0x298>
 8000cb2:	4299      	cmp	r1, r3
 8000cb4:	f240 811c 	bls.w	8000ef0 <__udivmoddi4+0x298>
 8000cb8:	3e02      	subs	r6, #2
 8000cba:	4463      	add	r3, ip
 8000cbc:	1a5b      	subs	r3, r3, r1
 8000cbe:	b2a4      	uxth	r4, r4
 8000cc0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cc4:	fb08 3310 	mls	r3, r8, r0, r3
 8000cc8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ccc:	fb00 f707 	mul.w	r7, r0, r7
 8000cd0:	42a7      	cmp	r7, r4
 8000cd2:	d90a      	bls.n	8000cea <__udivmoddi4+0x92>
 8000cd4:	eb1c 0404 	adds.w	r4, ip, r4
 8000cd8:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cdc:	f080 810a 	bcs.w	8000ef4 <__udivmoddi4+0x29c>
 8000ce0:	42a7      	cmp	r7, r4
 8000ce2:	f240 8107 	bls.w	8000ef4 <__udivmoddi4+0x29c>
 8000ce6:	4464      	add	r4, ip
 8000ce8:	3802      	subs	r0, #2
 8000cea:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cee:	1be4      	subs	r4, r4, r7
 8000cf0:	2600      	movs	r6, #0
 8000cf2:	b11d      	cbz	r5, 8000cfc <__udivmoddi4+0xa4>
 8000cf4:	40d4      	lsrs	r4, r2
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	e9c5 4300 	strd	r4, r3, [r5]
 8000cfc:	4631      	mov	r1, r6
 8000cfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d02:	428b      	cmp	r3, r1
 8000d04:	d909      	bls.n	8000d1a <__udivmoddi4+0xc2>
 8000d06:	2d00      	cmp	r5, #0
 8000d08:	f000 80ef 	beq.w	8000eea <__udivmoddi4+0x292>
 8000d0c:	2600      	movs	r6, #0
 8000d0e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d12:	4630      	mov	r0, r6
 8000d14:	4631      	mov	r1, r6
 8000d16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d1a:	fab3 f683 	clz	r6, r3
 8000d1e:	2e00      	cmp	r6, #0
 8000d20:	d14a      	bne.n	8000db8 <__udivmoddi4+0x160>
 8000d22:	428b      	cmp	r3, r1
 8000d24:	d302      	bcc.n	8000d2c <__udivmoddi4+0xd4>
 8000d26:	4282      	cmp	r2, r0
 8000d28:	f200 80f9 	bhi.w	8000f1e <__udivmoddi4+0x2c6>
 8000d2c:	1a84      	subs	r4, r0, r2
 8000d2e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d32:	2001      	movs	r0, #1
 8000d34:	469e      	mov	lr, r3
 8000d36:	2d00      	cmp	r5, #0
 8000d38:	d0e0      	beq.n	8000cfc <__udivmoddi4+0xa4>
 8000d3a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d3e:	e7dd      	b.n	8000cfc <__udivmoddi4+0xa4>
 8000d40:	b902      	cbnz	r2, 8000d44 <__udivmoddi4+0xec>
 8000d42:	deff      	udf	#255	; 0xff
 8000d44:	fab2 f282 	clz	r2, r2
 8000d48:	2a00      	cmp	r2, #0
 8000d4a:	f040 8092 	bne.w	8000e72 <__udivmoddi4+0x21a>
 8000d4e:	eba1 010c 	sub.w	r1, r1, ip
 8000d52:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d56:	fa1f fe8c 	uxth.w	lr, ip
 8000d5a:	2601      	movs	r6, #1
 8000d5c:	0c20      	lsrs	r0, r4, #16
 8000d5e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d62:	fb07 1113 	mls	r1, r7, r3, r1
 8000d66:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d6a:	fb0e f003 	mul.w	r0, lr, r3
 8000d6e:	4288      	cmp	r0, r1
 8000d70:	d908      	bls.n	8000d84 <__udivmoddi4+0x12c>
 8000d72:	eb1c 0101 	adds.w	r1, ip, r1
 8000d76:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d7a:	d202      	bcs.n	8000d82 <__udivmoddi4+0x12a>
 8000d7c:	4288      	cmp	r0, r1
 8000d7e:	f200 80cb 	bhi.w	8000f18 <__udivmoddi4+0x2c0>
 8000d82:	4643      	mov	r3, r8
 8000d84:	1a09      	subs	r1, r1, r0
 8000d86:	b2a4      	uxth	r4, r4
 8000d88:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d8c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d90:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d94:	fb0e fe00 	mul.w	lr, lr, r0
 8000d98:	45a6      	cmp	lr, r4
 8000d9a:	d908      	bls.n	8000dae <__udivmoddi4+0x156>
 8000d9c:	eb1c 0404 	adds.w	r4, ip, r4
 8000da0:	f100 31ff 	add.w	r1, r0, #4294967295
 8000da4:	d202      	bcs.n	8000dac <__udivmoddi4+0x154>
 8000da6:	45a6      	cmp	lr, r4
 8000da8:	f200 80bb 	bhi.w	8000f22 <__udivmoddi4+0x2ca>
 8000dac:	4608      	mov	r0, r1
 8000dae:	eba4 040e 	sub.w	r4, r4, lr
 8000db2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000db6:	e79c      	b.n	8000cf2 <__udivmoddi4+0x9a>
 8000db8:	f1c6 0720 	rsb	r7, r6, #32
 8000dbc:	40b3      	lsls	r3, r6
 8000dbe:	fa22 fc07 	lsr.w	ip, r2, r7
 8000dc2:	ea4c 0c03 	orr.w	ip, ip, r3
 8000dc6:	fa20 f407 	lsr.w	r4, r0, r7
 8000dca:	fa01 f306 	lsl.w	r3, r1, r6
 8000dce:	431c      	orrs	r4, r3
 8000dd0:	40f9      	lsrs	r1, r7
 8000dd2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000dd6:	fa00 f306 	lsl.w	r3, r0, r6
 8000dda:	fbb1 f8f9 	udiv	r8, r1, r9
 8000dde:	0c20      	lsrs	r0, r4, #16
 8000de0:	fa1f fe8c 	uxth.w	lr, ip
 8000de4:	fb09 1118 	mls	r1, r9, r8, r1
 8000de8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dec:	fb08 f00e 	mul.w	r0, r8, lr
 8000df0:	4288      	cmp	r0, r1
 8000df2:	fa02 f206 	lsl.w	r2, r2, r6
 8000df6:	d90b      	bls.n	8000e10 <__udivmoddi4+0x1b8>
 8000df8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dfc:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e00:	f080 8088 	bcs.w	8000f14 <__udivmoddi4+0x2bc>
 8000e04:	4288      	cmp	r0, r1
 8000e06:	f240 8085 	bls.w	8000f14 <__udivmoddi4+0x2bc>
 8000e0a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e0e:	4461      	add	r1, ip
 8000e10:	1a09      	subs	r1, r1, r0
 8000e12:	b2a4      	uxth	r4, r4
 8000e14:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e18:	fb09 1110 	mls	r1, r9, r0, r1
 8000e1c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e20:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e24:	458e      	cmp	lr, r1
 8000e26:	d908      	bls.n	8000e3a <__udivmoddi4+0x1e2>
 8000e28:	eb1c 0101 	adds.w	r1, ip, r1
 8000e2c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e30:	d26c      	bcs.n	8000f0c <__udivmoddi4+0x2b4>
 8000e32:	458e      	cmp	lr, r1
 8000e34:	d96a      	bls.n	8000f0c <__udivmoddi4+0x2b4>
 8000e36:	3802      	subs	r0, #2
 8000e38:	4461      	add	r1, ip
 8000e3a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e3e:	fba0 9402 	umull	r9, r4, r0, r2
 8000e42:	eba1 010e 	sub.w	r1, r1, lr
 8000e46:	42a1      	cmp	r1, r4
 8000e48:	46c8      	mov	r8, r9
 8000e4a:	46a6      	mov	lr, r4
 8000e4c:	d356      	bcc.n	8000efc <__udivmoddi4+0x2a4>
 8000e4e:	d053      	beq.n	8000ef8 <__udivmoddi4+0x2a0>
 8000e50:	b15d      	cbz	r5, 8000e6a <__udivmoddi4+0x212>
 8000e52:	ebb3 0208 	subs.w	r2, r3, r8
 8000e56:	eb61 010e 	sbc.w	r1, r1, lr
 8000e5a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e5e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e62:	40f1      	lsrs	r1, r6
 8000e64:	431f      	orrs	r7, r3
 8000e66:	e9c5 7100 	strd	r7, r1, [r5]
 8000e6a:	2600      	movs	r6, #0
 8000e6c:	4631      	mov	r1, r6
 8000e6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e72:	f1c2 0320 	rsb	r3, r2, #32
 8000e76:	40d8      	lsrs	r0, r3
 8000e78:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e7c:	fa21 f303 	lsr.w	r3, r1, r3
 8000e80:	4091      	lsls	r1, r2
 8000e82:	4301      	orrs	r1, r0
 8000e84:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e88:	fa1f fe8c 	uxth.w	lr, ip
 8000e8c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e90:	fb07 3610 	mls	r6, r7, r0, r3
 8000e94:	0c0b      	lsrs	r3, r1, #16
 8000e96:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e9a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e9e:	429e      	cmp	r6, r3
 8000ea0:	fa04 f402 	lsl.w	r4, r4, r2
 8000ea4:	d908      	bls.n	8000eb8 <__udivmoddi4+0x260>
 8000ea6:	eb1c 0303 	adds.w	r3, ip, r3
 8000eaa:	f100 38ff 	add.w	r8, r0, #4294967295
 8000eae:	d22f      	bcs.n	8000f10 <__udivmoddi4+0x2b8>
 8000eb0:	429e      	cmp	r6, r3
 8000eb2:	d92d      	bls.n	8000f10 <__udivmoddi4+0x2b8>
 8000eb4:	3802      	subs	r0, #2
 8000eb6:	4463      	add	r3, ip
 8000eb8:	1b9b      	subs	r3, r3, r6
 8000eba:	b289      	uxth	r1, r1
 8000ebc:	fbb3 f6f7 	udiv	r6, r3, r7
 8000ec0:	fb07 3316 	mls	r3, r7, r6, r3
 8000ec4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ec8:	fb06 f30e 	mul.w	r3, r6, lr
 8000ecc:	428b      	cmp	r3, r1
 8000ece:	d908      	bls.n	8000ee2 <__udivmoddi4+0x28a>
 8000ed0:	eb1c 0101 	adds.w	r1, ip, r1
 8000ed4:	f106 38ff 	add.w	r8, r6, #4294967295
 8000ed8:	d216      	bcs.n	8000f08 <__udivmoddi4+0x2b0>
 8000eda:	428b      	cmp	r3, r1
 8000edc:	d914      	bls.n	8000f08 <__udivmoddi4+0x2b0>
 8000ede:	3e02      	subs	r6, #2
 8000ee0:	4461      	add	r1, ip
 8000ee2:	1ac9      	subs	r1, r1, r3
 8000ee4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000ee8:	e738      	b.n	8000d5c <__udivmoddi4+0x104>
 8000eea:	462e      	mov	r6, r5
 8000eec:	4628      	mov	r0, r5
 8000eee:	e705      	b.n	8000cfc <__udivmoddi4+0xa4>
 8000ef0:	4606      	mov	r6, r0
 8000ef2:	e6e3      	b.n	8000cbc <__udivmoddi4+0x64>
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	e6f8      	b.n	8000cea <__udivmoddi4+0x92>
 8000ef8:	454b      	cmp	r3, r9
 8000efa:	d2a9      	bcs.n	8000e50 <__udivmoddi4+0x1f8>
 8000efc:	ebb9 0802 	subs.w	r8, r9, r2
 8000f00:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f04:	3801      	subs	r0, #1
 8000f06:	e7a3      	b.n	8000e50 <__udivmoddi4+0x1f8>
 8000f08:	4646      	mov	r6, r8
 8000f0a:	e7ea      	b.n	8000ee2 <__udivmoddi4+0x28a>
 8000f0c:	4620      	mov	r0, r4
 8000f0e:	e794      	b.n	8000e3a <__udivmoddi4+0x1e2>
 8000f10:	4640      	mov	r0, r8
 8000f12:	e7d1      	b.n	8000eb8 <__udivmoddi4+0x260>
 8000f14:	46d0      	mov	r8, sl
 8000f16:	e77b      	b.n	8000e10 <__udivmoddi4+0x1b8>
 8000f18:	3b02      	subs	r3, #2
 8000f1a:	4461      	add	r1, ip
 8000f1c:	e732      	b.n	8000d84 <__udivmoddi4+0x12c>
 8000f1e:	4630      	mov	r0, r6
 8000f20:	e709      	b.n	8000d36 <__udivmoddi4+0xde>
 8000f22:	4464      	add	r4, ip
 8000f24:	3802      	subs	r0, #2
 8000f26:	e742      	b.n	8000dae <__udivmoddi4+0x156>

08000f28 <__aeabi_idiv0>:
 8000f28:	4770      	bx	lr
 8000f2a:	bf00      	nop

08000f2c <__aeabi_d2uiz>:
 8000f2c:	004a      	lsls	r2, r1, #1
 8000f2e:	d211      	bcs.n	8000f54 <__aeabi_d2uiz+0x28>
 8000f30:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000f34:	d211      	bcs.n	8000f5a <__aeabi_d2uiz+0x2e>
 8000f36:	d50d      	bpl.n	8000f54 <__aeabi_d2uiz+0x28>
 8000f38:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000f3c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000f40:	d40e      	bmi.n	8000f60 <__aeabi_d2uiz+0x34>
 8000f42:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000f46:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000f4a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000f4e:	fa23 f002 	lsr.w	r0, r3, r2
 8000f52:	4770      	bx	lr
 8000f54:	f04f 0000 	mov.w	r0, #0
 8000f58:	4770      	bx	lr
 8000f5a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000f5e:	d102      	bne.n	8000f66 <__aeabi_d2uiz+0x3a>
 8000f60:	f04f 30ff 	mov.w	r0, #4294967295
 8000f64:	4770      	bx	lr
 8000f66:	f04f 0000 	mov.w	r0, #0
 8000f6a:	4770      	bx	lr

08000f6c <at_set_command>:
		tx(buffer, length);
	}
	return length;
}

int at_set_command(char *buffer, transmit_t tx, char *cmd, const char* param_format, ...) {
 8000f6c:	b408      	push	{r3}
 8000f6e:	b580      	push	{r7, lr}
 8000f70:	b089      	sub	sp, #36	; 0x24
 8000f72:	af00      	add	r7, sp, #0
 8000f74:	60f8      	str	r0, [r7, #12]
 8000f76:	60b9      	str	r1, [r7, #8]
 8000f78:	607a      	str	r2, [r7, #4]

	va_list parameters;
	int length = 0;
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	61fb      	str	r3, [r7, #28]
	int tmp = 0;
 8000f7e:	2300      	movs	r3, #0
 8000f80:	61bb      	str	r3, [r7, #24]
	if((tmp = sprintf_(buffer, "%s=", cmd)) < 0) {
 8000f82:	687a      	ldr	r2, [r7, #4]
 8000f84:	4924      	ldr	r1, [pc, #144]	; (8001018 <at_set_command+0xac>)
 8000f86:	68f8      	ldr	r0, [r7, #12]
 8000f88:	f001 fd3e 	bl	8002a08 <sprintf_>
 8000f8c:	61b8      	str	r0, [r7, #24]
 8000f8e:	69bb      	ldr	r3, [r7, #24]
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	da02      	bge.n	8000f9a <at_set_command+0x2e>
		return AT_CMD_ERROR;
 8000f94:	f04f 33ff 	mov.w	r3, #4294967295
 8000f98:	e037      	b.n	800100a <at_set_command+0x9e>
	}
	length += tmp;
 8000f9a:	69fa      	ldr	r2, [r7, #28]
 8000f9c:	69bb      	ldr	r3, [r7, #24]
 8000f9e:	4413      	add	r3, r2
 8000fa0:	61fb      	str	r3, [r7, #28]
	tmp = 0;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	61bb      	str	r3, [r7, #24]
	va_start(parameters, param_format);
 8000fa6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000faa:	617b      	str	r3, [r7, #20]
	if((tmp = vsprintf_(buffer+length, param_format, parameters)) < 0) {
 8000fac:	69fb      	ldr	r3, [r7, #28]
 8000fae:	68fa      	ldr	r2, [r7, #12]
 8000fb0:	4413      	add	r3, r2
 8000fb2:	697a      	ldr	r2, [r7, #20]
 8000fb4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	f001 fd14 	bl	80029e4 <vsprintf_>
 8000fbc:	61b8      	str	r0, [r7, #24]
 8000fbe:	69bb      	ldr	r3, [r7, #24]
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	da02      	bge.n	8000fca <at_set_command+0x5e>
		return AT_CMD_ERROR;
 8000fc4:	f04f 33ff 	mov.w	r3, #4294967295
 8000fc8:	e01f      	b.n	800100a <at_set_command+0x9e>
	}
	va_end(parameters);
	length += tmp;
 8000fca:	69fa      	ldr	r2, [r7, #28]
 8000fcc:	69bb      	ldr	r3, [r7, #24]
 8000fce:	4413      	add	r3, r2
 8000fd0:	61fb      	str	r3, [r7, #28]
	tmp = 0;
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	61bb      	str	r3, [r7, #24]
	if((tmp = sprintf_(buffer+length, "\r\n")) < 0) {
 8000fd6:	69fb      	ldr	r3, [r7, #28]
 8000fd8:	68fa      	ldr	r2, [r7, #12]
 8000fda:	4413      	add	r3, r2
 8000fdc:	490f      	ldr	r1, [pc, #60]	; (800101c <at_set_command+0xb0>)
 8000fde:	4618      	mov	r0, r3
 8000fe0:	f001 fd12 	bl	8002a08 <sprintf_>
 8000fe4:	61b8      	str	r0, [r7, #24]
 8000fe6:	69bb      	ldr	r3, [r7, #24]
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	da02      	bge.n	8000ff2 <at_set_command+0x86>
		return AT_CMD_ERROR;
 8000fec:	f04f 33ff 	mov.w	r3, #4294967295
 8000ff0:	e00b      	b.n	800100a <at_set_command+0x9e>
	}
	length += tmp;
 8000ff2:	69fa      	ldr	r2, [r7, #28]
 8000ff4:	69bb      	ldr	r3, [r7, #24]
 8000ff6:	4413      	add	r3, r2
 8000ff8:	61fb      	str	r3, [r7, #28]
	if(tx != NULL) {
 8000ffa:	68bb      	ldr	r3, [r7, #8]
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d003      	beq.n	8001008 <at_set_command+0x9c>
		tx(buffer, length);
 8001000:	68bb      	ldr	r3, [r7, #8]
 8001002:	69f9      	ldr	r1, [r7, #28]
 8001004:	68f8      	ldr	r0, [r7, #12]
 8001006:	4798      	blx	r3
	}
	return length;
 8001008:	69fb      	ldr	r3, [r7, #28]
}
 800100a:	4618      	mov	r0, r3
 800100c:	3724      	adds	r7, #36	; 0x24
 800100e:	46bd      	mov	sp, r7
 8001010:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001014:	b001      	add	sp, #4
 8001016:	4770      	bx	lr
 8001018:	0800c0f0 	.word	0x0800c0f0
 800101c:	0800c0f4 	.word	0x0800c0f4

08001020 <at_execute_command>:
	}
	return length;
}


int at_execute_command(char *buffer, transmit_t tx, char *cmd) {
 8001020:	b580      	push	{r7, lr}
 8001022:	b086      	sub	sp, #24
 8001024:	af00      	add	r7, sp, #0
 8001026:	60f8      	str	r0, [r7, #12]
 8001028:	60b9      	str	r1, [r7, #8]
 800102a:	607a      	str	r2, [r7, #4]
	int length;
	if((length = sprintf_(buffer, "%s\r\n", cmd)) < 0) {
 800102c:	687a      	ldr	r2, [r7, #4]
 800102e:	490b      	ldr	r1, [pc, #44]	; (800105c <at_execute_command+0x3c>)
 8001030:	68f8      	ldr	r0, [r7, #12]
 8001032:	f001 fce9 	bl	8002a08 <sprintf_>
 8001036:	6178      	str	r0, [r7, #20]
 8001038:	697b      	ldr	r3, [r7, #20]
 800103a:	2b00      	cmp	r3, #0
 800103c:	da02      	bge.n	8001044 <at_execute_command+0x24>
		return AT_CMD_ERROR;
 800103e:	f04f 33ff 	mov.w	r3, #4294967295
 8001042:	e007      	b.n	8001054 <at_execute_command+0x34>
	}
	if(tx != NULL) {
 8001044:	68bb      	ldr	r3, [r7, #8]
 8001046:	2b00      	cmp	r3, #0
 8001048:	d003      	beq.n	8001052 <at_execute_command+0x32>
		tx(buffer, length);
 800104a:	68bb      	ldr	r3, [r7, #8]
 800104c:	6979      	ldr	r1, [r7, #20]
 800104e:	68f8      	ldr	r0, [r7, #12]
 8001050:	4798      	blx	r3
	}
	return length;
 8001052:	697b      	ldr	r3, [r7, #20]
}
 8001054:	4618      	mov	r0, r3
 8001056:	3718      	adds	r7, #24
 8001058:	46bd      	mov	sp, r7
 800105a:	bd80      	pop	{r7, pc}
 800105c:	0800c0f8 	.word	0x0800c0f8

08001060 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b082      	sub	sp, #8
 8001064:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001066:	4b0c      	ldr	r3, [pc, #48]	; (8001098 <MX_DMA_Init+0x38>)
 8001068:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800106a:	4a0b      	ldr	r2, [pc, #44]	; (8001098 <MX_DMA_Init+0x38>)
 800106c:	f043 0301 	orr.w	r3, r3, #1
 8001070:	6493      	str	r3, [r2, #72]	; 0x48
 8001072:	4b09      	ldr	r3, [pc, #36]	; (8001098 <MX_DMA_Init+0x38>)
 8001074:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001076:	f003 0301 	and.w	r3, r3, #1
 800107a:	607b      	str	r3, [r7, #4]
 800107c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 5, 0);
 800107e:	2200      	movs	r2, #0
 8001080:	2105      	movs	r1, #5
 8001082:	200f      	movs	r0, #15
 8001084:	f002 fb20 	bl	80036c8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8001088:	200f      	movs	r0, #15
 800108a:	f002 fb39 	bl	8003700 <HAL_NVIC_EnableIRQ>

}
 800108e:	bf00      	nop
 8001090:	3708      	adds	r7, #8
 8001092:	46bd      	mov	sp, r7
 8001094:	bd80      	pop	{r7, pc}
 8001096:	bf00      	nop
 8001098:	40021000 	.word	0x40021000

0800109c <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 800109c:	b580      	push	{r7, lr}
 800109e:	af00      	add	r7, sp, #0
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of reportDataQueue */
  reportDataQueueHandle = osMessageQueueNew (64, sizeof(uint16_t), &reportDataQueue_attributes);
 80010a0:	4a0c      	ldr	r2, [pc, #48]	; (80010d4 <MX_FREERTOS_Init+0x38>)
 80010a2:	2102      	movs	r1, #2
 80010a4:	2040      	movs	r0, #64	; 0x40
 80010a6:	f006 fcfa 	bl	8007a9e <osMessageQueueNew>
 80010aa:	4603      	mov	r3, r0
 80010ac:	4a0a      	ldr	r2, [pc, #40]	; (80010d8 <MX_FREERTOS_Init+0x3c>)
 80010ae:	6013      	str	r3, [r2, #0]
  /* Create the thread(s) */
  /* creation of readDataTask */
  //readDataTaskHandle = osThreadNew(StartReadDataTask, NULL, &readDataTask_attributes);

  /* creation of sendDataTask */
  sendDataTaskHandle = osThreadNew(startSendDataTask, NULL, &sendDataTask_attributes);
 80010b0:	4a0a      	ldr	r2, [pc, #40]	; (80010dc <MX_FREERTOS_Init+0x40>)
 80010b2:	2100      	movs	r1, #0
 80010b4:	480a      	ldr	r0, [pc, #40]	; (80010e0 <MX_FREERTOS_Init+0x44>)
 80010b6:	f006 fc1d 	bl	80078f4 <osThreadNew>
 80010ba:	4603      	mov	r3, r0
 80010bc:	4a09      	ldr	r2, [pc, #36]	; (80010e4 <MX_FREERTOS_Init+0x48>)
 80010be:	6013      	str	r3, [r2, #0]

  /* creation of startWifiClickT */
  startWifiClickTHandle = osThreadNew(_startWifiClickTask, NULL, &startWifiClickT_attributes);
 80010c0:	4a09      	ldr	r2, [pc, #36]	; (80010e8 <MX_FREERTOS_Init+0x4c>)
 80010c2:	2100      	movs	r1, #0
 80010c4:	4809      	ldr	r0, [pc, #36]	; (80010ec <MX_FREERTOS_Init+0x50>)
 80010c6:	f006 fc15 	bl	80078f4 <osThreadNew>
 80010ca:	4603      	mov	r3, r0
 80010cc:	4a08      	ldr	r2, [pc, #32]	; (80010f0 <MX_FREERTOS_Init+0x54>)
 80010ce:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 80010d0:	bf00      	nop
 80010d2:	bd80      	pop	{r7, pc}
 80010d4:	0800c360 	.word	0x0800c360
 80010d8:	200000a4 	.word	0x200000a4
 80010dc:	0800c318 	.word	0x0800c318
 80010e0:	080010f5 	.word	0x080010f5
 80010e4:	2000009c 	.word	0x2000009c
 80010e8:	0800c33c 	.word	0x0800c33c
 80010ec:	080011dd 	.word	0x080011dd
 80010f0:	200000a0 	.word	0x200000a0

080010f4 <startSendDataTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_startSendDataTask */
void startSendDataTask(void *argument)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b0ae      	sub	sp, #184	; 0xb8
 80010f8:	af02      	add	r7, sp, #8
 80010fa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN startSendDataTask */
	char at_cmd_buffer[AT_CMD_BUFFER_SIZE] = {0};
 80010fc:	2300      	movs	r3, #0
 80010fe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001100:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001104:	227c      	movs	r2, #124	; 0x7c
 8001106:	2100      	movs	r1, #0
 8001108:	4618      	mov	r0, r3
 800110a:	f009 fdc0 	bl	800ac8e <memset>
	char msg[25] = {0};
 800110e:	2300      	movs	r3, #0
 8001110:	613b      	str	r3, [r7, #16]
 8001112:	f107 0314 	add.w	r3, r7, #20
 8001116:	2200      	movs	r2, #0
 8001118:	601a      	str	r2, [r3, #0]
 800111a:	605a      	str	r2, [r3, #4]
 800111c:	609a      	str	r2, [r3, #8]
 800111e:	60da      	str	r2, [r3, #12]
 8001120:	611a      	str	r2, [r3, #16]
 8001122:	751a      	strb	r2, [r3, #20]
	/* transfer interval in ms */
	/* if transfer interval is smaller than sensor data rate, the que is blocking */
#ifdef NDEBUG
	const uint8_t RAW_DATA = 1;
 8001124:	2301      	movs	r3, #1
 8001126:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
	const uint8_t OFFSET_VALUES = 2;
 800112a:	2302      	movs	r3, #2
 800112c:	f887 30ae 	strb.w	r3, [r7, #174]	; 0xae
	const uint8_t CALIBRATED_VALUES = 3;
 8001130:	2303      	movs	r3, #3
 8001132:	f887 30ad 	strb.w	r3, [r7, #173]	; 0xad
	const uint8_t PROCESSED_DATA = 4;
 8001136:	2304      	movs	r3, #4
 8001138:	73fb      	strb	r3, [r7, #15]
#endif

	const uint8_t TRANSFER_INTERVAL = 100;
 800113a:	2364      	movs	r3, #100	; 0x64
 800113c:	f887 30ac 	strb.w	r3, [r7, #172]	; 0xac

	ReportData data;

	while (!wifiIsReady){
 8001140:	e001      	b.n	8001146 <startSendDataTask+0x52>
		osThreadYield();
 8001142:	f006 fc6b 	bl	8007a1c <osThreadYield>
	while (!wifiIsReady){
 8001146:	4b1f      	ldr	r3, [pc, #124]	; (80011c4 <startSendDataTask+0xd0>)
 8001148:	781b      	ldrb	r3, [r3, #0]
 800114a:	f083 0301 	eor.w	r3, r3, #1
 800114e:	b2db      	uxtb	r3, r3
 8001150:	2b00      	cmp	r3, #0
 8001152:	d1f6      	bne.n	8001142 <startSendDataTask+0x4e>
	}

  for(;;)
  {
	if(osMessageQueueGet(reportDataQueueHandle, &data, 0U, 0U) == osOK || true)
 8001154:	4b1c      	ldr	r3, [pc, #112]	; (80011c8 <startSendDataTask+0xd4>)
 8001156:	6818      	ldr	r0, [r3, #0]
 8001158:	f107 0108 	add.w	r1, r7, #8
 800115c:	2300      	movs	r3, #0
 800115e:	2200      	movs	r2, #0
 8001160:	f006 fd10 	bl	8007b84 <osMessageQueueGet>
	{
		sprintf(msg,"%d,%d,%d\n\r",data.roll, data.pitch, data.shake);
 8001164:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8001168:	461a      	mov	r2, r3
 800116a:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800116e:	4619      	mov	r1, r3
 8001170:	7b3b      	ldrb	r3, [r7, #12]
 8001172:	f107 0010 	add.w	r0, r7, #16
 8001176:	9300      	str	r3, [sp, #0]
 8001178:	460b      	mov	r3, r1
 800117a:	4914      	ldr	r1, [pc, #80]	; (80011cc <startSendDataTask+0xd8>)
 800117c:	f009 fff2 	bl	800b164 <siprintf>
		at_set_command(at_cmd_buffer, SendATCommand, AT_IP_Send, "0,%u", sizeof(msg), 80);
 8001180:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 8001184:	2350      	movs	r3, #80	; 0x50
 8001186:	9301      	str	r3, [sp, #4]
 8001188:	2319      	movs	r3, #25
 800118a:	9300      	str	r3, [sp, #0]
 800118c:	4b10      	ldr	r3, [pc, #64]	; (80011d0 <startSendDataTask+0xdc>)
 800118e:	4a11      	ldr	r2, [pc, #68]	; (80011d4 <startSendDataTask+0xe0>)
 8001190:	4911      	ldr	r1, [pc, #68]	; (80011d8 <startSendDataTask+0xe4>)
 8001192:	f7ff feeb 	bl	8000f6c <at_set_command>
		osDelay(10);
 8001196:	200a      	movs	r0, #10
 8001198:	f006 fc66 	bl	8007a68 <osDelay>
		SendATCommand(msg,sizeof(msg));
 800119c:	f107 0310 	add.w	r3, r7, #16
 80011a0:	2119      	movs	r1, #25
 80011a2:	4618      	mov	r0, r3
 80011a4:	f002 f95e 	bl	8003464 <SendATCommand>
		osDelay(10);
 80011a8:	200a      	movs	r0, #10
 80011aa:	f006 fc5d 	bl	8007a68 <osDelay>

#ifdef NDEBUG
	  /* delete logging for final version */
	  mpu9dof_log_data(&PROCESSED_DATA);
 80011ae:	f107 030f 	add.w	r3, r7, #15
 80011b2:	4618      	mov	r0, r3
 80011b4:	f000 f97a 	bl	80014ac <mpu9dof_log_data>

	} else {
		osThreadYield();
	}

    osDelay(TRANSFER_INTERVAL);
 80011b8:	f897 30ac 	ldrb.w	r3, [r7, #172]	; 0xac
 80011bc:	4618      	mov	r0, r3
 80011be:	f006 fc53 	bl	8007a68 <osDelay>
	if(osMessageQueueGet(reportDataQueueHandle, &data, 0U, 0U) == osOK || true)
 80011c2:	e7c7      	b.n	8001154 <startSendDataTask+0x60>
 80011c4:	20000098 	.word	0x20000098
 80011c8:	200000a4 	.word	0x200000a4
 80011cc:	0800c174 	.word	0x0800c174
 80011d0:	0800c180 	.word	0x0800c180
 80011d4:	0800c188 	.word	0x0800c188
 80011d8:	08003465 	.word	0x08003465

080011dc <_startWifiClickTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header__startWifiClickTask */
void _startWifiClickTask(void *argument)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b082      	sub	sp, #8
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN _startWifiClickTask */
	StartWifiClick(argument);
 80011e4:	6878      	ldr	r0, [r7, #4]
 80011e6:	f001 ffd3 	bl	8003190 <StartWifiClick>
	wifiIsReady = true;
 80011ea:	4b02      	ldr	r3, [pc, #8]	; (80011f4 <_startWifiClickTask+0x18>)
 80011ec:	2201      	movs	r2, #1
 80011ee:	701a      	strb	r2, [r3, #0]
	osThreadExit();
 80011f0:	f006 fc34 	bl	8007a5c <osThreadExit>
 80011f4:	20000098 	.word	0x20000098

080011f8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80011f8:	b480      	push	{r7}
 80011fa:	b085      	sub	sp, #20
 80011fc:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80011fe:	4b15      	ldr	r3, [pc, #84]	; (8001254 <MX_GPIO_Init+0x5c>)
 8001200:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001202:	4a14      	ldr	r2, [pc, #80]	; (8001254 <MX_GPIO_Init+0x5c>)
 8001204:	f043 0304 	orr.w	r3, r3, #4
 8001208:	64d3      	str	r3, [r2, #76]	; 0x4c
 800120a:	4b12      	ldr	r3, [pc, #72]	; (8001254 <MX_GPIO_Init+0x5c>)
 800120c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800120e:	f003 0304 	and.w	r3, r3, #4
 8001212:	60fb      	str	r3, [r7, #12]
 8001214:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001216:	4b0f      	ldr	r3, [pc, #60]	; (8001254 <MX_GPIO_Init+0x5c>)
 8001218:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800121a:	4a0e      	ldr	r2, [pc, #56]	; (8001254 <MX_GPIO_Init+0x5c>)
 800121c:	f043 0301 	orr.w	r3, r3, #1
 8001220:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001222:	4b0c      	ldr	r3, [pc, #48]	; (8001254 <MX_GPIO_Init+0x5c>)
 8001224:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001226:	f003 0301 	and.w	r3, r3, #1
 800122a:	60bb      	str	r3, [r7, #8]
 800122c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800122e:	4b09      	ldr	r3, [pc, #36]	; (8001254 <MX_GPIO_Init+0x5c>)
 8001230:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001232:	4a08      	ldr	r2, [pc, #32]	; (8001254 <MX_GPIO_Init+0x5c>)
 8001234:	f043 0302 	orr.w	r3, r3, #2
 8001238:	64d3      	str	r3, [r2, #76]	; 0x4c
 800123a:	4b06      	ldr	r3, [pc, #24]	; (8001254 <MX_GPIO_Init+0x5c>)
 800123c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800123e:	f003 0302 	and.w	r3, r3, #2
 8001242:	607b      	str	r3, [r7, #4]
 8001244:	687b      	ldr	r3, [r7, #4]

}
 8001246:	bf00      	nop
 8001248:	3714      	adds	r7, #20
 800124a:	46bd      	mov	sp, r7
 800124c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001250:	4770      	bx	lr
 8001252:	bf00      	nop
 8001254:	40021000 	.word	0x40021000

08001258 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800125c:	4b1b      	ldr	r3, [pc, #108]	; (80012cc <MX_I2C1_Init+0x74>)
 800125e:	4a1c      	ldr	r2, [pc, #112]	; (80012d0 <MX_I2C1_Init+0x78>)
 8001260:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00702681;
 8001262:	4b1a      	ldr	r3, [pc, #104]	; (80012cc <MX_I2C1_Init+0x74>)
 8001264:	4a1b      	ldr	r2, [pc, #108]	; (80012d4 <MX_I2C1_Init+0x7c>)
 8001266:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001268:	4b18      	ldr	r3, [pc, #96]	; (80012cc <MX_I2C1_Init+0x74>)
 800126a:	2200      	movs	r2, #0
 800126c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800126e:	4b17      	ldr	r3, [pc, #92]	; (80012cc <MX_I2C1_Init+0x74>)
 8001270:	2201      	movs	r2, #1
 8001272:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001274:	4b15      	ldr	r3, [pc, #84]	; (80012cc <MX_I2C1_Init+0x74>)
 8001276:	2200      	movs	r2, #0
 8001278:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800127a:	4b14      	ldr	r3, [pc, #80]	; (80012cc <MX_I2C1_Init+0x74>)
 800127c:	2200      	movs	r2, #0
 800127e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001280:	4b12      	ldr	r3, [pc, #72]	; (80012cc <MX_I2C1_Init+0x74>)
 8001282:	2200      	movs	r2, #0
 8001284:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001286:	4b11      	ldr	r3, [pc, #68]	; (80012cc <MX_I2C1_Init+0x74>)
 8001288:	2200      	movs	r2, #0
 800128a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800128c:	4b0f      	ldr	r3, [pc, #60]	; (80012cc <MX_I2C1_Init+0x74>)
 800128e:	2200      	movs	r2, #0
 8001290:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001292:	480e      	ldr	r0, [pc, #56]	; (80012cc <MX_I2C1_Init+0x74>)
 8001294:	f002 fe22 	bl	8003edc <HAL_I2C_Init>
 8001298:	4603      	mov	r3, r0
 800129a:	2b00      	cmp	r3, #0
 800129c:	d001      	beq.n	80012a2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800129e:	f000 f8ff 	bl	80014a0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80012a2:	2100      	movs	r1, #0
 80012a4:	4809      	ldr	r0, [pc, #36]	; (80012cc <MX_I2C1_Init+0x74>)
 80012a6:	f002 fea8 	bl	8003ffa <HAL_I2CEx_ConfigAnalogFilter>
 80012aa:	4603      	mov	r3, r0
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d001      	beq.n	80012b4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80012b0:	f000 f8f6 	bl	80014a0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80012b4:	2100      	movs	r1, #0
 80012b6:	4805      	ldr	r0, [pc, #20]	; (80012cc <MX_I2C1_Init+0x74>)
 80012b8:	f002 feea 	bl	8004090 <HAL_I2CEx_ConfigDigitalFilter>
 80012bc:	4603      	mov	r3, r0
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d001      	beq.n	80012c6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80012c2:	f000 f8ed 	bl	80014a0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80012c6:	bf00      	nop
 80012c8:	bd80      	pop	{r7, pc}
 80012ca:	bf00      	nop
 80012cc:	200000a8 	.word	0x200000a8
 80012d0:	40005400 	.word	0x40005400
 80012d4:	00702681 	.word	0x00702681

080012d8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b09e      	sub	sp, #120	; 0x78
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012e0:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80012e4:	2200      	movs	r2, #0
 80012e6:	601a      	str	r2, [r3, #0]
 80012e8:	605a      	str	r2, [r3, #4]
 80012ea:	609a      	str	r2, [r3, #8]
 80012ec:	60da      	str	r2, [r3, #12]
 80012ee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80012f0:	f107 0310 	add.w	r3, r7, #16
 80012f4:	2254      	movs	r2, #84	; 0x54
 80012f6:	2100      	movs	r1, #0
 80012f8:	4618      	mov	r0, r3
 80012fa:	f009 fcc8 	bl	800ac8e <memset>
  if(i2cHandle->Instance==I2C1)
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	4a1e      	ldr	r2, [pc, #120]	; (800137c <HAL_I2C_MspInit+0xa4>)
 8001304:	4293      	cmp	r3, r2
 8001306:	d135      	bne.n	8001374 <HAL_I2C_MspInit+0x9c>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001308:	2340      	movs	r3, #64	; 0x40
 800130a:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800130c:	2300      	movs	r3, #0
 800130e:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001310:	f107 0310 	add.w	r3, r7, #16
 8001314:	4618      	mov	r0, r3
 8001316:	f003 fde5 	bl	8004ee4 <HAL_RCCEx_PeriphCLKConfig>
 800131a:	4603      	mov	r3, r0
 800131c:	2b00      	cmp	r3, #0
 800131e:	d001      	beq.n	8001324 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001320:	f000 f8be 	bl	80014a0 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001324:	4b16      	ldr	r3, [pc, #88]	; (8001380 <HAL_I2C_MspInit+0xa8>)
 8001326:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001328:	4a15      	ldr	r2, [pc, #84]	; (8001380 <HAL_I2C_MspInit+0xa8>)
 800132a:	f043 0302 	orr.w	r3, r3, #2
 800132e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001330:	4b13      	ldr	r3, [pc, #76]	; (8001380 <HAL_I2C_MspInit+0xa8>)
 8001332:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001334:	f003 0302 	and.w	r3, r3, #2
 8001338:	60fb      	str	r3, [r7, #12]
 800133a:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800133c:	23c0      	movs	r3, #192	; 0xc0
 800133e:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001340:	2312      	movs	r3, #18
 8001342:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001344:	2300      	movs	r3, #0
 8001346:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001348:	2303      	movs	r3, #3
 800134a:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800134c:	2304      	movs	r3, #4
 800134e:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001350:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001354:	4619      	mov	r1, r3
 8001356:	480b      	ldr	r0, [pc, #44]	; (8001384 <HAL_I2C_MspInit+0xac>)
 8001358:	f002 fc56 	bl	8003c08 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800135c:	4b08      	ldr	r3, [pc, #32]	; (8001380 <HAL_I2C_MspInit+0xa8>)
 800135e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001360:	4a07      	ldr	r2, [pc, #28]	; (8001380 <HAL_I2C_MspInit+0xa8>)
 8001362:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001366:	6593      	str	r3, [r2, #88]	; 0x58
 8001368:	4b05      	ldr	r3, [pc, #20]	; (8001380 <HAL_I2C_MspInit+0xa8>)
 800136a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800136c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001370:	60bb      	str	r3, [r7, #8]
 8001372:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001374:	bf00      	nop
 8001376:	3778      	adds	r7, #120	; 0x78
 8001378:	46bd      	mov	sp, r7
 800137a:	bd80      	pop	{r7, pc}
 800137c:	40005400 	.word	0x40005400
 8001380:	40021000 	.word	0x40021000
 8001384:	48000400 	.word	0x48000400

08001388 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800138c:	f002 f8ab 	bl	80034e6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001390:	f000 f812 	bl	80013b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001394:	f7ff ff30 	bl	80011f8 <MX_GPIO_Init>
  MX_DMA_Init();
 8001398:	f7ff fe62 	bl	8001060 <MX_DMA_Init>
  MX_USART2_UART_Init();
 800139c:	f001 fdbe 	bl	8002f1c <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80013a0:	f7ff ff5a 	bl	8001258 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 80013a4:	f001 fd8a 	bl	8002ebc <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 80013a8:	f006 fa5a 	bl	8007860 <osKernelInitialize>
  MX_FREERTOS_Init();
 80013ac:	f7ff fe76 	bl	800109c <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 80013b0:	f006 fa7a 	bl	80078a8 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80013b4:	e7fe      	b.n	80013b4 <main+0x2c>
	...

080013b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b096      	sub	sp, #88	; 0x58
 80013bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013be:	f107 0314 	add.w	r3, r7, #20
 80013c2:	2244      	movs	r2, #68	; 0x44
 80013c4:	2100      	movs	r1, #0
 80013c6:	4618      	mov	r0, r3
 80013c8:	f009 fc61 	bl	800ac8e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80013cc:	463b      	mov	r3, r7
 80013ce:	2200      	movs	r2, #0
 80013d0:	601a      	str	r2, [r3, #0]
 80013d2:	605a      	str	r2, [r3, #4]
 80013d4:	609a      	str	r2, [r3, #8]
 80013d6:	60da      	str	r2, [r3, #12]
 80013d8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80013da:	f44f 7000 	mov.w	r0, #512	; 0x200
 80013de:	f002 fec1 	bl	8004164 <HAL_PWREx_ControlVoltageScaling>
 80013e2:	4603      	mov	r3, r0
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d001      	beq.n	80013ec <SystemClock_Config+0x34>
  {
    Error_Handler();
 80013e8:	f000 f85a 	bl	80014a0 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80013ec:	f002 fe9c 	bl	8004128 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80013f0:	4b21      	ldr	r3, [pc, #132]	; (8001478 <SystemClock_Config+0xc0>)
 80013f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80013f6:	4a20      	ldr	r2, [pc, #128]	; (8001478 <SystemClock_Config+0xc0>)
 80013f8:	f023 0318 	bic.w	r3, r3, #24
 80013fc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8001400:	2314      	movs	r3, #20
 8001402:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001404:	2301      	movs	r3, #1
 8001406:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001408:	2301      	movs	r3, #1
 800140a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800140c:	2300      	movs	r3, #0
 800140e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001410:	2360      	movs	r3, #96	; 0x60
 8001412:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001414:	2302      	movs	r3, #2
 8001416:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8001418:	2301      	movs	r3, #1
 800141a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800141c:	2301      	movs	r3, #1
 800141e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 36;
 8001420:	2324      	movs	r3, #36	; 0x24
 8001422:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001424:	2307      	movs	r3, #7
 8001426:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001428:	2302      	movs	r3, #2
 800142a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800142c:	2302      	movs	r3, #2
 800142e:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001430:	f107 0314 	add.w	r3, r7, #20
 8001434:	4618      	mov	r0, r3
 8001436:	f002 feeb 	bl	8004210 <HAL_RCC_OscConfig>
 800143a:	4603      	mov	r3, r0
 800143c:	2b00      	cmp	r3, #0
 800143e:	d001      	beq.n	8001444 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8001440:	f000 f82e 	bl	80014a0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001444:	230f      	movs	r3, #15
 8001446:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001448:	2303      	movs	r3, #3
 800144a:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800144c:	2300      	movs	r3, #0
 800144e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001450:	2300      	movs	r3, #0
 8001452:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001454:	2300      	movs	r3, #0
 8001456:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001458:	463b      	mov	r3, r7
 800145a:	2104      	movs	r1, #4
 800145c:	4618      	mov	r0, r3
 800145e:	f003 faeb 	bl	8004a38 <HAL_RCC_ClockConfig>
 8001462:	4603      	mov	r3, r0
 8001464:	2b00      	cmp	r3, #0
 8001466:	d001      	beq.n	800146c <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8001468:	f000 f81a 	bl	80014a0 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 800146c:	f003 ff30 	bl	80052d0 <HAL_RCCEx_EnableMSIPLLMode>
}
 8001470:	bf00      	nop
 8001472:	3758      	adds	r7, #88	; 0x58
 8001474:	46bd      	mov	sp, r7
 8001476:	bd80      	pop	{r7, pc}
 8001478:	40021000 	.word	0x40021000

0800147c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	b082      	sub	sp, #8
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM16) {
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	4a04      	ldr	r2, [pc, #16]	; (800149c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800148a:	4293      	cmp	r3, r2
 800148c:	d101      	bne.n	8001492 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800148e:	f002 f843 	bl	8003518 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001492:	bf00      	nop
 8001494:	3708      	adds	r7, #8
 8001496:	46bd      	mov	sp, r7
 8001498:	bd80      	pop	{r7, pc}
 800149a:	bf00      	nop
 800149c:	40014400 	.word	0x40014400

080014a0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80014a0:	b480      	push	{r7}
 80014a2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80014a4:	b672      	cpsid	i
}
 80014a6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80014a8:	e7fe      	b.n	80014a8 <Error_Handler+0x8>
	...

080014ac <mpu9dof_log_data>:
 * @brief:
 * @param:
 * @return:
 */
void mpu9dof_log_data(const uint8_t *data )
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b082      	sub	sp, #8
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
	switch(*data)
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	781b      	ldrb	r3, [r3, #0]
 80014b8:	3b01      	subs	r3, #1
 80014ba:	2b03      	cmp	r3, #3
 80014bc:	d844      	bhi.n	8001548 <mpu9dof_log_data+0x9c>
 80014be:	a201      	add	r2, pc, #4	; (adr r2, 80014c4 <mpu9dof_log_data+0x18>)
 80014c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014c4:	080014d5 	.word	0x080014d5
 80014c8:	0800150f 	.word	0x0800150f
 80014cc:	08001551 	.word	0x08001551
 80014d0:	0800152d 	.word	0x0800152d
	{
		/* log the raw data */
		case 1:
			 printf("raw-acc: x=%d, y=%d, z=%d\r\n", rawData.acc[0], rawData.acc[1], rawData.acc[2]);
 80014d4:	4b21      	ldr	r3, [pc, #132]	; (800155c <mpu9dof_log_data+0xb0>)
 80014d6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014da:	4619      	mov	r1, r3
 80014dc:	4b1f      	ldr	r3, [pc, #124]	; (800155c <mpu9dof_log_data+0xb0>)
 80014de:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80014e2:	461a      	mov	r2, r3
 80014e4:	4b1d      	ldr	r3, [pc, #116]	; (800155c <mpu9dof_log_data+0xb0>)
 80014e6:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80014ea:	481d      	ldr	r0, [pc, #116]	; (8001560 <mpu9dof_log_data+0xb4>)
 80014ec:	f009 fc6c 	bl	800adc8 <iprintf>
			 printf("raw-gyr: x=%d, y=%d, z=%d\r\n", rawData.gyro[0], rawData.gyro[1], rawData.gyro[2]);
 80014f0:	4b1a      	ldr	r3, [pc, #104]	; (800155c <mpu9dof_log_data+0xb0>)
 80014f2:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80014f6:	4619      	mov	r1, r3
 80014f8:	4b18      	ldr	r3, [pc, #96]	; (800155c <mpu9dof_log_data+0xb0>)
 80014fa:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80014fe:	461a      	mov	r2, r3
 8001500:	4b16      	ldr	r3, [pc, #88]	; (800155c <mpu9dof_log_data+0xb0>)
 8001502:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001506:	4817      	ldr	r0, [pc, #92]	; (8001564 <mpu9dof_log_data+0xb8>)
 8001508:	f009 fc5e 	bl	800adc8 <iprintf>
			break;
 800150c:	e021      	b.n	8001552 <mpu9dof_log_data+0xa6>

		/* log the calibration offset */
		case 2:
			 printf("offset-gyro: x=%d, y=%d, z=%d\r\n", offsetValues.gyro_offset[0], offsetValues.gyro_offset[1], offsetValues.gyro_offset[2]);
 800150e:	4b16      	ldr	r3, [pc, #88]	; (8001568 <mpu9dof_log_data+0xbc>)
 8001510:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001514:	4619      	mov	r1, r3
 8001516:	4b14      	ldr	r3, [pc, #80]	; (8001568 <mpu9dof_log_data+0xbc>)
 8001518:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800151c:	461a      	mov	r2, r3
 800151e:	4b12      	ldr	r3, [pc, #72]	; (8001568 <mpu9dof_log_data+0xbc>)
 8001520:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001524:	4811      	ldr	r0, [pc, #68]	; (800156c <mpu9dof_log_data+0xc0>)
 8001526:	f009 fc4f 	bl	800adc8 <iprintf>
			break;
 800152a:	e012      	b.n	8001552 <mpu9dof_log_data+0xa6>
			/* TODO */
			break;

		/* log the processed final data */
		case 4:
			printf("final: roll=%d, pitch=%d, shake=%d\r\n", processedData.roll, processedData.pitch, processedData.shake);
 800152c:	4b10      	ldr	r3, [pc, #64]	; (8001570 <mpu9dof_log_data+0xc4>)
 800152e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001532:	4619      	mov	r1, r3
 8001534:	4b0e      	ldr	r3, [pc, #56]	; (8001570 <mpu9dof_log_data+0xc4>)
 8001536:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800153a:	461a      	mov	r2, r3
 800153c:	4b0c      	ldr	r3, [pc, #48]	; (8001570 <mpu9dof_log_data+0xc4>)
 800153e:	791b      	ldrb	r3, [r3, #4]
 8001540:	480c      	ldr	r0, [pc, #48]	; (8001574 <mpu9dof_log_data+0xc8>)
 8001542:	f009 fc41 	bl	800adc8 <iprintf>
			break;
 8001546:	e004      	b.n	8001552 <mpu9dof_log_data+0xa6>

		default:
			printf("** ERROR: Passed Wrong Values! **\r\n");
 8001548:	480b      	ldr	r0, [pc, #44]	; (8001578 <mpu9dof_log_data+0xcc>)
 800154a:	f009 fcc3 	bl	800aed4 <puts>
	}
}
 800154e:	e000      	b.n	8001552 <mpu9dof_log_data+0xa6>
			break;
 8001550:	bf00      	nop
}
 8001552:	bf00      	nop
 8001554:	3708      	adds	r7, #8
 8001556:	46bd      	mov	sp, r7
 8001558:	bd80      	pop	{r7, pc}
 800155a:	bf00      	nop
 800155c:	200000fc 	.word	0x200000fc
 8001560:	0800c1b8 	.word	0x0800c1b8
 8001564:	0800c1d4 	.word	0x0800c1d4
 8001568:	20000110 	.word	0x20000110
 800156c:	0800c1f0 	.word	0x0800c1f0
 8001570:	20000108 	.word	0x20000108
 8001574:	0800c210 	.word	0x0800c210
 8001578:	0800c238 	.word	0x0800c238

0800157c <get_bit_access>:
// but:
// 1. Some compilers are finicky about this;
// 2. Some people may want to convert this to C89;
// 3. If you try to use it as C++, only C++20 supports compound literals
static inline double_with_bit_access get_bit_access(double x)
{
 800157c:	b480      	push	{r7}
 800157e:	b087      	sub	sp, #28
 8001580:	af00      	add	r7, sp, #0
 8001582:	60f8      	str	r0, [r7, #12]
 8001584:	e9c7 2300 	strd	r2, r3, [r7]
  double_with_bit_access dwba;
  dwba.F = x;
 8001588:	e9d7 2300 	ldrd	r2, r3, [r7]
 800158c:	e9c7 2304 	strd	r2, r3, [r7, #16]
  return dwba;
 8001590:	68f9      	ldr	r1, [r7, #12]
 8001592:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001596:	e9c1 2300 	strd	r2, r3, [r1]
}
 800159a:	68f8      	ldr	r0, [r7, #12]
 800159c:	371c      	adds	r7, #28
 800159e:	46bd      	mov	sp, r7
 80015a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a4:	4770      	bx	lr

080015a6 <get_sign_bit>:

static inline int get_sign_bit(double x)
{
 80015a6:	b580      	push	{r7, lr}
 80015a8:	b084      	sub	sp, #16
 80015aa:	af00      	add	r7, sp, #0
 80015ac:	e9c7 0100 	strd	r0, r1, [r7]
  // The sign is stored in the highest bit
  return (int) (get_bit_access(x).U >> (DOUBLE_SIZE_IN_BITS - 1));
 80015b0:	f107 0108 	add.w	r1, r7, #8
 80015b4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80015b8:	4608      	mov	r0, r1
 80015ba:	f7ff ffdf 	bl	800157c <get_bit_access>
 80015be:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80015c2:	f04f 0200 	mov.w	r2, #0
 80015c6:	f04f 0300 	mov.w	r3, #0
 80015ca:	0fca      	lsrs	r2, r1, #31
 80015cc:	2300      	movs	r3, #0
 80015ce:	4613      	mov	r3, r2
}
 80015d0:	4618      	mov	r0, r3
 80015d2:	3710      	adds	r7, #16
 80015d4:	46bd      	mov	sp, r7
 80015d6:	bd80      	pop	{r7, pc}

080015d8 <putchar_via_gadget>:
// Note: This function currently assumes it is not passed a '\0' c,
// or alternatively, that '\0' can be passed to the function in the output
// gadget. The former assumption holds within the printf library. It also
// assumes that the output gadget has been properly initialized.
static inline void putchar_via_gadget(output_gadget_t* gadget, char c)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	b084      	sub	sp, #16
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
 80015e0:	460b      	mov	r3, r1
 80015e2:	70fb      	strb	r3, [r7, #3]
  printf_size_t write_pos = gadget->pos++;
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	68db      	ldr	r3, [r3, #12]
 80015e8:	1c59      	adds	r1, r3, #1
 80015ea:	687a      	ldr	r2, [r7, #4]
 80015ec:	60d1      	str	r1, [r2, #12]
 80015ee:	60fb      	str	r3, [r7, #12]
    // We're _always_ increasing pos, so as to count how may characters
    // _would_ have been written if not for the max_chars limitation
  if (write_pos >= gadget->max_chars) {
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	691b      	ldr	r3, [r3, #16]
 80015f4:	68fa      	ldr	r2, [r7, #12]
 80015f6:	429a      	cmp	r2, r3
 80015f8:	d212      	bcs.n	8001620 <putchar_via_gadget+0x48>
    return;
  }
  if (gadget->function != NULL) {
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d007      	beq.n	8001612 <putchar_via_gadget+0x3a>
    // No check for c == '\0' .
    gadget->function(c, gadget->extra_function_arg);
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	687a      	ldr	r2, [r7, #4]
 8001608:	6851      	ldr	r1, [r2, #4]
 800160a:	78fa      	ldrb	r2, [r7, #3]
 800160c:	4610      	mov	r0, r2
 800160e:	4798      	blx	r3
 8001610:	e007      	b.n	8001622 <putchar_via_gadget+0x4a>
  }
  else {
    // it must be the case that gadget->buffer != NULL , due to the constraint
    // on output_gadget_t ; and note we're relying on write_pos being non-negative.
    gadget->buffer[write_pos] = c;
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	689a      	ldr	r2, [r3, #8]
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	4413      	add	r3, r2
 800161a:	78fa      	ldrb	r2, [r7, #3]
 800161c:	701a      	strb	r2, [r3, #0]
 800161e:	e000      	b.n	8001622 <putchar_via_gadget+0x4a>
    return;
 8001620:	bf00      	nop
  }
}
 8001622:	3710      	adds	r7, #16
 8001624:	46bd      	mov	sp, r7
 8001626:	bd80      	pop	{r7, pc}

08001628 <append_termination_with_gadget>:

// Possibly-write the string-terminating '\0' character
static inline void append_termination_with_gadget(output_gadget_t* gadget)
{
 8001628:	b480      	push	{r7}
 800162a:	b085      	sub	sp, #20
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
  if (gadget->function != NULL || gadget->max_chars == 0) {
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	2b00      	cmp	r3, #0
 8001636:	d11b      	bne.n	8001670 <append_termination_with_gadget+0x48>
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	691b      	ldr	r3, [r3, #16]
 800163c:	2b00      	cmp	r3, #0
 800163e:	d017      	beq.n	8001670 <append_termination_with_gadget+0x48>
    return;
  }
  if (gadget->buffer == NULL) {
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	689b      	ldr	r3, [r3, #8]
 8001644:	2b00      	cmp	r3, #0
 8001646:	d015      	beq.n	8001674 <append_termination_with_gadget+0x4c>
    return;
  }
  printf_size_t null_char_pos = gadget->pos < gadget->max_chars ? gadget->pos : gadget->max_chars - 1;
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	68da      	ldr	r2, [r3, #12]
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	691b      	ldr	r3, [r3, #16]
 8001650:	429a      	cmp	r2, r3
 8001652:	d202      	bcs.n	800165a <append_termination_with_gadget+0x32>
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	68db      	ldr	r3, [r3, #12]
 8001658:	e002      	b.n	8001660 <append_termination_with_gadget+0x38>
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	691b      	ldr	r3, [r3, #16]
 800165e:	3b01      	subs	r3, #1
 8001660:	60fb      	str	r3, [r7, #12]
  gadget->buffer[null_char_pos] = '\0';
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	689a      	ldr	r2, [r3, #8]
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	4413      	add	r3, r2
 800166a:	2200      	movs	r2, #0
 800166c:	701a      	strb	r2, [r3, #0]
 800166e:	e002      	b.n	8001676 <append_termination_with_gadget+0x4e>
    return;
 8001670:	bf00      	nop
 8001672:	e000      	b.n	8001676 <append_termination_with_gadget+0x4e>
    return;
 8001674:	bf00      	nop
}
 8001676:	3714      	adds	r7, #20
 8001678:	46bd      	mov	sp, r7
 800167a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167e:	4770      	bx	lr

08001680 <discarding_gadget>:
  (void) unused;
  putchar_(c);
}

static inline output_gadget_t discarding_gadget(void)
{
 8001680:	b4b0      	push	{r4, r5, r7}
 8001682:	b089      	sub	sp, #36	; 0x24
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]
  output_gadget_t gadget;
  gadget.function = NULL;
 8001688:	2300      	movs	r3, #0
 800168a:	60fb      	str	r3, [r7, #12]
  gadget.extra_function_arg = NULL;
 800168c:	2300      	movs	r3, #0
 800168e:	613b      	str	r3, [r7, #16]
  gadget.buffer = NULL;
 8001690:	2300      	movs	r3, #0
 8001692:	617b      	str	r3, [r7, #20]
  gadget.pos = 0;
 8001694:	2300      	movs	r3, #0
 8001696:	61bb      	str	r3, [r7, #24]
  gadget.max_chars = 0;
 8001698:	2300      	movs	r3, #0
 800169a:	61fb      	str	r3, [r7, #28]
  return gadget;
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	461d      	mov	r5, r3
 80016a0:	f107 040c 	add.w	r4, r7, #12
 80016a4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80016a6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80016a8:	6823      	ldr	r3, [r4, #0]
 80016aa:	602b      	str	r3, [r5, #0]
}
 80016ac:	6878      	ldr	r0, [r7, #4]
 80016ae:	3724      	adds	r7, #36	; 0x24
 80016b0:	46bd      	mov	sp, r7
 80016b2:	bcb0      	pop	{r4, r5, r7}
 80016b4:	4770      	bx	lr

080016b6 <buffer_gadget>:

static inline output_gadget_t buffer_gadget(char* buffer, size_t buffer_size)
{
 80016b6:	b5b0      	push	{r4, r5, r7, lr}
 80016b8:	b08a      	sub	sp, #40	; 0x28
 80016ba:	af00      	add	r7, sp, #0
 80016bc:	60f8      	str	r0, [r7, #12]
 80016be:	60b9      	str	r1, [r7, #8]
 80016c0:	607a      	str	r2, [r7, #4]
  printf_size_t usable_buffer_size = (buffer_size > PRINTF_MAX_POSSIBLE_BUFFER_SIZE) ?
 80016c2:	687b      	ldr	r3, [r7, #4]
    PRINTF_MAX_POSSIBLE_BUFFER_SIZE : (printf_size_t) buffer_size;
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	db01      	blt.n	80016cc <buffer_gadget+0x16>
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	e001      	b.n	80016d0 <buffer_gadget+0x1a>
 80016cc:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
  printf_size_t usable_buffer_size = (buffer_size > PRINTF_MAX_POSSIBLE_BUFFER_SIZE) ?
 80016d0:	627b      	str	r3, [r7, #36]	; 0x24
  output_gadget_t result = discarding_gadget();
 80016d2:	f107 0310 	add.w	r3, r7, #16
 80016d6:	4618      	mov	r0, r3
 80016d8:	f7ff ffd2 	bl	8001680 <discarding_gadget>
  if (buffer != NULL) {
 80016dc:	68bb      	ldr	r3, [r7, #8]
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d003      	beq.n	80016ea <buffer_gadget+0x34>
    result.buffer = buffer;
 80016e2:	68bb      	ldr	r3, [r7, #8]
 80016e4:	61bb      	str	r3, [r7, #24]
    result.max_chars = usable_buffer_size;
 80016e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016e8:	623b      	str	r3, [r7, #32]
  }
  return result;
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	461d      	mov	r5, r3
 80016ee:	f107 0410 	add.w	r4, r7, #16
 80016f2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80016f4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80016f6:	6823      	ldr	r3, [r4, #0]
 80016f8:	602b      	str	r3, [r5, #0]
}
 80016fa:	68f8      	ldr	r0, [r7, #12]
 80016fc:	3728      	adds	r7, #40	; 0x28
 80016fe:	46bd      	mov	sp, r7
 8001700:	bdb0      	pop	{r4, r5, r7, pc}

08001702 <strnlen_s_>:
// internal secure strlen
// @return The length of the string (excluding the terminating 0) limited by 'maxsize'
// @note strlen uses size_t, but wes only use this function with printf_size_t
// variables - hence the signature.
static inline printf_size_t strnlen_s_(const char* str, printf_size_t maxsize)
{
 8001702:	b480      	push	{r7}
 8001704:	b085      	sub	sp, #20
 8001706:	af00      	add	r7, sp, #0
 8001708:	6078      	str	r0, [r7, #4]
 800170a:	6039      	str	r1, [r7, #0]
  const char* s;
  for (s = str; *s && maxsize--; ++s);
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	60fb      	str	r3, [r7, #12]
 8001710:	e002      	b.n	8001718 <strnlen_s_+0x16>
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	3301      	adds	r3, #1
 8001716:	60fb      	str	r3, [r7, #12]
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	781b      	ldrb	r3, [r3, #0]
 800171c:	2b00      	cmp	r3, #0
 800171e:	d004      	beq.n	800172a <strnlen_s_+0x28>
 8001720:	683b      	ldr	r3, [r7, #0]
 8001722:	1e5a      	subs	r2, r3, #1
 8001724:	603a      	str	r2, [r7, #0]
 8001726:	2b00      	cmp	r3, #0
 8001728:	d1f3      	bne.n	8001712 <strnlen_s_+0x10>
  return (printf_size_t)(s - str);
 800172a:	68fa      	ldr	r2, [r7, #12]
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	1ad3      	subs	r3, r2, r3
}
 8001730:	4618      	mov	r0, r3
 8001732:	3714      	adds	r7, #20
 8001734:	46bd      	mov	sp, r7
 8001736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173a:	4770      	bx	lr

0800173c <is_digit_>:


// internal test if char is a digit (0-9)
// @return true if char is a digit
static inline bool is_digit_(char ch)
{
 800173c:	b480      	push	{r7}
 800173e:	b083      	sub	sp, #12
 8001740:	af00      	add	r7, sp, #0
 8001742:	4603      	mov	r3, r0
 8001744:	71fb      	strb	r3, [r7, #7]
  return (ch >= '0') && (ch <= '9');
 8001746:	79fb      	ldrb	r3, [r7, #7]
 8001748:	2b2f      	cmp	r3, #47	; 0x2f
 800174a:	d904      	bls.n	8001756 <is_digit_+0x1a>
 800174c:	79fb      	ldrb	r3, [r7, #7]
 800174e:	2b39      	cmp	r3, #57	; 0x39
 8001750:	d801      	bhi.n	8001756 <is_digit_+0x1a>
 8001752:	2301      	movs	r3, #1
 8001754:	e000      	b.n	8001758 <is_digit_+0x1c>
 8001756:	2300      	movs	r3, #0
 8001758:	f003 0301 	and.w	r3, r3, #1
 800175c:	b2db      	uxtb	r3, r3
}
 800175e:	4618      	mov	r0, r3
 8001760:	370c      	adds	r7, #12
 8001762:	46bd      	mov	sp, r7
 8001764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001768:	4770      	bx	lr

0800176a <atou_>:


// internal ASCII string to printf_size_t conversion
static printf_size_t atou_(const char** str)
{
 800176a:	b580      	push	{r7, lr}
 800176c:	b084      	sub	sp, #16
 800176e:	af00      	add	r7, sp, #0
 8001770:	6078      	str	r0, [r7, #4]
  printf_size_t i = 0U;
 8001772:	2300      	movs	r3, #0
 8001774:	60fb      	str	r3, [r7, #12]
  while (is_digit_(**str)) {
 8001776:	e00e      	b.n	8001796 <atou_+0x2c>
    i = i * 10U + (printf_size_t)(*((*str)++) - '0');
 8001778:	68fa      	ldr	r2, [r7, #12]
 800177a:	4613      	mov	r3, r2
 800177c:	009b      	lsls	r3, r3, #2
 800177e:	4413      	add	r3, r2
 8001780:	005b      	lsls	r3, r3, #1
 8001782:	4618      	mov	r0, r3
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	1c59      	adds	r1, r3, #1
 800178a:	687a      	ldr	r2, [r7, #4]
 800178c:	6011      	str	r1, [r2, #0]
 800178e:	781b      	ldrb	r3, [r3, #0]
 8001790:	4403      	add	r3, r0
 8001792:	3b30      	subs	r3, #48	; 0x30
 8001794:	60fb      	str	r3, [r7, #12]
  while (is_digit_(**str)) {
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	781b      	ldrb	r3, [r3, #0]
 800179c:	4618      	mov	r0, r3
 800179e:	f7ff ffcd 	bl	800173c <is_digit_>
 80017a2:	4603      	mov	r3, r0
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d1e7      	bne.n	8001778 <atou_+0xe>
  }
  return i;
 80017a8:	68fb      	ldr	r3, [r7, #12]
}
 80017aa:	4618      	mov	r0, r3
 80017ac:	3710      	adds	r7, #16
 80017ae:	46bd      	mov	sp, r7
 80017b0:	bd80      	pop	{r7, pc}

080017b2 <out_rev_>:


// output the specified string in reverse, taking care of any zero-padding
static void out_rev_(output_gadget_t* output, const char* buf, printf_size_t len, printf_size_t width, printf_flags_t flags)
{
 80017b2:	b580      	push	{r7, lr}
 80017b4:	b086      	sub	sp, #24
 80017b6:	af00      	add	r7, sp, #0
 80017b8:	60f8      	str	r0, [r7, #12]
 80017ba:	60b9      	str	r1, [r7, #8]
 80017bc:	607a      	str	r2, [r7, #4]
 80017be:	603b      	str	r3, [r7, #0]
  const printf_size_t start_pos = output->pos;
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	68db      	ldr	r3, [r3, #12]
 80017c4:	613b      	str	r3, [r7, #16]

  // pad spaces up to given width
  if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
 80017c6:	6a3b      	ldr	r3, [r7, #32]
 80017c8:	f003 0302 	and.w	r3, r3, #2
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d11e      	bne.n	800180e <out_rev_+0x5c>
 80017d0:	6a3b      	ldr	r3, [r7, #32]
 80017d2:	f003 0301 	and.w	r3, r3, #1
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d119      	bne.n	800180e <out_rev_+0x5c>
    for (printf_size_t i = len; i < width; i++) {
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	617b      	str	r3, [r7, #20]
 80017de:	e006      	b.n	80017ee <out_rev_+0x3c>
      putchar_via_gadget(output, ' ');
 80017e0:	2120      	movs	r1, #32
 80017e2:	68f8      	ldr	r0, [r7, #12]
 80017e4:	f7ff fef8 	bl	80015d8 <putchar_via_gadget>
    for (printf_size_t i = len; i < width; i++) {
 80017e8:	697b      	ldr	r3, [r7, #20]
 80017ea:	3301      	adds	r3, #1
 80017ec:	617b      	str	r3, [r7, #20]
 80017ee:	697a      	ldr	r2, [r7, #20]
 80017f0:	683b      	ldr	r3, [r7, #0]
 80017f2:	429a      	cmp	r2, r3
 80017f4:	d3f4      	bcc.n	80017e0 <out_rev_+0x2e>
    }
  }

  // reverse string
  while (len) {
 80017f6:	e00a      	b.n	800180e <out_rev_+0x5c>
    putchar_via_gadget(output, buf[--len]);
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	3b01      	subs	r3, #1
 80017fc:	607b      	str	r3, [r7, #4]
 80017fe:	68ba      	ldr	r2, [r7, #8]
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	4413      	add	r3, r2
 8001804:	781b      	ldrb	r3, [r3, #0]
 8001806:	4619      	mov	r1, r3
 8001808:	68f8      	ldr	r0, [r7, #12]
 800180a:	f7ff fee5 	bl	80015d8 <putchar_via_gadget>
  while (len) {
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	2b00      	cmp	r3, #0
 8001812:	d1f1      	bne.n	80017f8 <out_rev_+0x46>
  }

  // append pad spaces up to given width
  if (flags & FLAGS_LEFT) {
 8001814:	6a3b      	ldr	r3, [r7, #32]
 8001816:	f003 0302 	and.w	r3, r3, #2
 800181a:	2b00      	cmp	r3, #0
 800181c:	d00b      	beq.n	8001836 <out_rev_+0x84>
    while (output->pos - start_pos < width) {
 800181e:	e003      	b.n	8001828 <out_rev_+0x76>
      putchar_via_gadget(output, ' ');
 8001820:	2120      	movs	r1, #32
 8001822:	68f8      	ldr	r0, [r7, #12]
 8001824:	f7ff fed8 	bl	80015d8 <putchar_via_gadget>
    while (output->pos - start_pos < width) {
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	68da      	ldr	r2, [r3, #12]
 800182c:	693b      	ldr	r3, [r7, #16]
 800182e:	1ad3      	subs	r3, r2, r3
 8001830:	683a      	ldr	r2, [r7, #0]
 8001832:	429a      	cmp	r2, r3
 8001834:	d8f4      	bhi.n	8001820 <out_rev_+0x6e>
    }
  }
}
 8001836:	bf00      	nop
 8001838:	3718      	adds	r7, #24
 800183a:	46bd      	mov	sp, r7
 800183c:	bd80      	pop	{r7, pc}

0800183e <print_integer_finalization>:


// Invoked by print_integer after the actual number has been printed, performing necessary
// work on the number's prefix (as the number is initially printed in reverse order)
static void print_integer_finalization(output_gadget_t* output, char* buf, printf_size_t len, bool negative, numeric_base_t base, printf_size_t precision, printf_size_t width, printf_flags_t flags)
{
 800183e:	b580      	push	{r7, lr}
 8001840:	b088      	sub	sp, #32
 8001842:	af02      	add	r7, sp, #8
 8001844:	60f8      	str	r0, [r7, #12]
 8001846:	60b9      	str	r1, [r7, #8]
 8001848:	607a      	str	r2, [r7, #4]
 800184a:	70fb      	strb	r3, [r7, #3]
  printf_size_t unpadded_len = len;
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	617b      	str	r3, [r7, #20]

  // pad with leading zeros
  {
    if (!(flags & FLAGS_LEFT)) {
 8001850:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001852:	f003 0302 	and.w	r3, r3, #2
 8001856:	2b00      	cmp	r3, #0
 8001858:	d12e      	bne.n	80018b8 <print_integer_finalization+0x7a>
      if (width && (flags & FLAGS_ZEROPAD) && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
 800185a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800185c:	2b00      	cmp	r3, #0
 800185e:	d017      	beq.n	8001890 <print_integer_finalization+0x52>
 8001860:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001862:	f003 0301 	and.w	r3, r3, #1
 8001866:	2b00      	cmp	r3, #0
 8001868:	d012      	beq.n	8001890 <print_integer_finalization+0x52>
 800186a:	78fb      	ldrb	r3, [r7, #3]
 800186c:	2b00      	cmp	r3, #0
 800186e:	d104      	bne.n	800187a <print_integer_finalization+0x3c>
 8001870:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001872:	f003 030c 	and.w	r3, r3, #12
 8001876:	2b00      	cmp	r3, #0
 8001878:	d00a      	beq.n	8001890 <print_integer_finalization+0x52>
        width--;
 800187a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800187c:	3b01      	subs	r3, #1
 800187e:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_INTEGER_BUFFER_SIZE)) {
 8001880:	e006      	b.n	8001890 <print_integer_finalization+0x52>
        buf[len++] = '0';
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	1c5a      	adds	r2, r3, #1
 8001886:	607a      	str	r2, [r7, #4]
 8001888:	68ba      	ldr	r2, [r7, #8]
 800188a:	4413      	add	r3, r2
 800188c:	2230      	movs	r2, #48	; 0x30
 800188e:	701a      	strb	r2, [r3, #0]
      while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_INTEGER_BUFFER_SIZE)) {
 8001890:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001892:	f003 0301 	and.w	r3, r3, #1
 8001896:	2b00      	cmp	r3, #0
 8001898:	d00e      	beq.n	80018b8 <print_integer_finalization+0x7a>
 800189a:	687a      	ldr	r2, [r7, #4]
 800189c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800189e:	429a      	cmp	r2, r3
 80018a0:	d20a      	bcs.n	80018b8 <print_integer_finalization+0x7a>
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	2b1f      	cmp	r3, #31
 80018a6:	d9ec      	bls.n	8001882 <print_integer_finalization+0x44>
      }
    }

    while ((len < precision) && (len < PRINTF_INTEGER_BUFFER_SIZE)) {
 80018a8:	e006      	b.n	80018b8 <print_integer_finalization+0x7a>
      buf[len++] = '0';
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	1c5a      	adds	r2, r3, #1
 80018ae:	607a      	str	r2, [r7, #4]
 80018b0:	68ba      	ldr	r2, [r7, #8]
 80018b2:	4413      	add	r3, r2
 80018b4:	2230      	movs	r2, #48	; 0x30
 80018b6:	701a      	strb	r2, [r3, #0]
    while ((len < precision) && (len < PRINTF_INTEGER_BUFFER_SIZE)) {
 80018b8:	687a      	ldr	r2, [r7, #4]
 80018ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018bc:	429a      	cmp	r2, r3
 80018be:	d202      	bcs.n	80018c6 <print_integer_finalization+0x88>
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	2b1f      	cmp	r3, #31
 80018c4:	d9f1      	bls.n	80018aa <print_integer_finalization+0x6c>
    }

    if (base == BASE_OCTAL && (len > unpadded_len)) {
 80018c6:	f897 3020 	ldrb.w	r3, [r7, #32]
 80018ca:	2b08      	cmp	r3, #8
 80018cc:	d107      	bne.n	80018de <print_integer_finalization+0xa0>
 80018ce:	687a      	ldr	r2, [r7, #4]
 80018d0:	697b      	ldr	r3, [r7, #20]
 80018d2:	429a      	cmp	r2, r3
 80018d4:	d903      	bls.n	80018de <print_integer_finalization+0xa0>
      // Since we've written some zeros, we've satisfied the alternative format leading space requirement
      flags &= ~FLAGS_HASH;
 80018d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018d8:	f023 0310 	bic.w	r3, r3, #16
 80018dc:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }

  // handle hash
  if (flags & (FLAGS_HASH | FLAGS_POINTER)) {
 80018de:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80018e0:	f242 0310 	movw	r3, #8208	; 0x2010
 80018e4:	4013      	ands	r3, r2
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d068      	beq.n	80019bc <print_integer_finalization+0x17e>
    if (!(flags & FLAGS_PRECISION) && len && ((len == precision) || (len == width))) {
 80018ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018ec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d123      	bne.n	800193c <print_integer_finalization+0xfe>
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d020      	beq.n	800193c <print_integer_finalization+0xfe>
 80018fa:	687a      	ldr	r2, [r7, #4]
 80018fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018fe:	429a      	cmp	r2, r3
 8001900:	d003      	beq.n	800190a <print_integer_finalization+0xcc>
 8001902:	687a      	ldr	r2, [r7, #4]
 8001904:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001906:	429a      	cmp	r2, r3
 8001908:	d118      	bne.n	800193c <print_integer_finalization+0xfe>
      // Let's take back some padding digits to fit in what will eventually
      // be the format-specific prefix
      if (unpadded_len < len) {
 800190a:	697a      	ldr	r2, [r7, #20]
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	429a      	cmp	r2, r3
 8001910:	d202      	bcs.n	8001918 <print_integer_finalization+0xda>
        len--; // This should suffice for BASE_OCTAL
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	3b01      	subs	r3, #1
 8001916:	607b      	str	r3, [r7, #4]
      }
      if (len && (base == BASE_HEX || base == BASE_BINARY) && (unpadded_len < len)) {
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	2b00      	cmp	r3, #0
 800191c:	d00e      	beq.n	800193c <print_integer_finalization+0xfe>
 800191e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001922:	2b10      	cmp	r3, #16
 8001924:	d003      	beq.n	800192e <print_integer_finalization+0xf0>
 8001926:	f897 3020 	ldrb.w	r3, [r7, #32]
 800192a:	2b02      	cmp	r3, #2
 800192c:	d106      	bne.n	800193c <print_integer_finalization+0xfe>
 800192e:	697a      	ldr	r2, [r7, #20]
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	429a      	cmp	r2, r3
 8001934:	d202      	bcs.n	800193c <print_integer_finalization+0xfe>
        len--; // ... and an extra one for 0x or 0b
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	3b01      	subs	r3, #1
 800193a:	607b      	str	r3, [r7, #4]
      }
    }
    if ((base == BASE_HEX) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_INTEGER_BUFFER_SIZE)) {
 800193c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001940:	2b10      	cmp	r3, #16
 8001942:	d10f      	bne.n	8001964 <print_integer_finalization+0x126>
 8001944:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001946:	f003 0320 	and.w	r3, r3, #32
 800194a:	2b00      	cmp	r3, #0
 800194c:	d10a      	bne.n	8001964 <print_integer_finalization+0x126>
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	2b1f      	cmp	r3, #31
 8001952:	d807      	bhi.n	8001964 <print_integer_finalization+0x126>
      buf[len++] = 'x';
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	1c5a      	adds	r2, r3, #1
 8001958:	607a      	str	r2, [r7, #4]
 800195a:	68ba      	ldr	r2, [r7, #8]
 800195c:	4413      	add	r3, r2
 800195e:	2278      	movs	r2, #120	; 0x78
 8001960:	701a      	strb	r2, [r3, #0]
 8001962:	e021      	b.n	80019a8 <print_integer_finalization+0x16a>
    }
    else if ((base == BASE_HEX) && (flags & FLAGS_UPPERCASE) && (len < PRINTF_INTEGER_BUFFER_SIZE)) {
 8001964:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001968:	2b10      	cmp	r3, #16
 800196a:	d10f      	bne.n	800198c <print_integer_finalization+0x14e>
 800196c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800196e:	f003 0320 	and.w	r3, r3, #32
 8001972:	2b00      	cmp	r3, #0
 8001974:	d00a      	beq.n	800198c <print_integer_finalization+0x14e>
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	2b1f      	cmp	r3, #31
 800197a:	d807      	bhi.n	800198c <print_integer_finalization+0x14e>
      buf[len++] = 'X';
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	1c5a      	adds	r2, r3, #1
 8001980:	607a      	str	r2, [r7, #4]
 8001982:	68ba      	ldr	r2, [r7, #8]
 8001984:	4413      	add	r3, r2
 8001986:	2258      	movs	r2, #88	; 0x58
 8001988:	701a      	strb	r2, [r3, #0]
 800198a:	e00d      	b.n	80019a8 <print_integer_finalization+0x16a>
    }
    else if ((base == BASE_BINARY) && (len < PRINTF_INTEGER_BUFFER_SIZE)) {
 800198c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001990:	2b02      	cmp	r3, #2
 8001992:	d109      	bne.n	80019a8 <print_integer_finalization+0x16a>
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	2b1f      	cmp	r3, #31
 8001998:	d806      	bhi.n	80019a8 <print_integer_finalization+0x16a>
      buf[len++] = 'b';
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	1c5a      	adds	r2, r3, #1
 800199e:	607a      	str	r2, [r7, #4]
 80019a0:	68ba      	ldr	r2, [r7, #8]
 80019a2:	4413      	add	r3, r2
 80019a4:	2262      	movs	r2, #98	; 0x62
 80019a6:	701a      	strb	r2, [r3, #0]
    }
    if (len < PRINTF_INTEGER_BUFFER_SIZE) {
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	2b1f      	cmp	r3, #31
 80019ac:	d806      	bhi.n	80019bc <print_integer_finalization+0x17e>
      buf[len++] = '0';
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	1c5a      	adds	r2, r3, #1
 80019b2:	607a      	str	r2, [r7, #4]
 80019b4:	68ba      	ldr	r2, [r7, #8]
 80019b6:	4413      	add	r3, r2
 80019b8:	2230      	movs	r2, #48	; 0x30
 80019ba:	701a      	strb	r2, [r3, #0]
    }
  }

  if (len < PRINTF_INTEGER_BUFFER_SIZE) {
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	2b1f      	cmp	r3, #31
 80019c0:	d823      	bhi.n	8001a0a <print_integer_finalization+0x1cc>
    if (negative) {
 80019c2:	78fb      	ldrb	r3, [r7, #3]
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d007      	beq.n	80019d8 <print_integer_finalization+0x19a>
      buf[len++] = '-';
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	1c5a      	adds	r2, r3, #1
 80019cc:	607a      	str	r2, [r7, #4]
 80019ce:	68ba      	ldr	r2, [r7, #8]
 80019d0:	4413      	add	r3, r2
 80019d2:	222d      	movs	r2, #45	; 0x2d
 80019d4:	701a      	strb	r2, [r3, #0]
 80019d6:	e018      	b.n	8001a0a <print_integer_finalization+0x1cc>
    }
    else if (flags & FLAGS_PLUS) {
 80019d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80019da:	f003 0304 	and.w	r3, r3, #4
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d007      	beq.n	80019f2 <print_integer_finalization+0x1b4>
      buf[len++] = '+';  // ignore the space if the '+' exists
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	1c5a      	adds	r2, r3, #1
 80019e6:	607a      	str	r2, [r7, #4]
 80019e8:	68ba      	ldr	r2, [r7, #8]
 80019ea:	4413      	add	r3, r2
 80019ec:	222b      	movs	r2, #43	; 0x2b
 80019ee:	701a      	strb	r2, [r3, #0]
 80019f0:	e00b      	b.n	8001a0a <print_integer_finalization+0x1cc>
    }
    else if (flags & FLAGS_SPACE) {
 80019f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80019f4:	f003 0308 	and.w	r3, r3, #8
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d006      	beq.n	8001a0a <print_integer_finalization+0x1cc>
      buf[len++] = ' ';
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	1c5a      	adds	r2, r3, #1
 8001a00:	607a      	str	r2, [r7, #4]
 8001a02:	68ba      	ldr	r2, [r7, #8]
 8001a04:	4413      	add	r3, r2
 8001a06:	2220      	movs	r2, #32
 8001a08:	701a      	strb	r2, [r3, #0]
    }
  }

  out_rev_(output, buf, len, width, flags);
 8001a0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a0c:	9300      	str	r3, [sp, #0]
 8001a0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a10:	687a      	ldr	r2, [r7, #4]
 8001a12:	68b9      	ldr	r1, [r7, #8]
 8001a14:	68f8      	ldr	r0, [r7, #12]
 8001a16:	f7ff fecc 	bl	80017b2 <out_rev_>
}
 8001a1a:	bf00      	nop
 8001a1c:	3718      	adds	r7, #24
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	bd80      	pop	{r7, pc}

08001a22 <print_integer>:

// An internal itoa-like function
static void print_integer(output_gadget_t* output, printf_unsigned_value_t value, bool negative, numeric_base_t base, printf_size_t precision, printf_size_t width, printf_flags_t flags)
{
 8001a22:	b580      	push	{r7, lr}
 8001a24:	b092      	sub	sp, #72	; 0x48
 8001a26:	af04      	add	r7, sp, #16
 8001a28:	60f8      	str	r0, [r7, #12]
 8001a2a:	60b9      	str	r1, [r7, #8]
 8001a2c:	4611      	mov	r1, r2
 8001a2e:	461a      	mov	r2, r3
 8001a30:	460b      	mov	r3, r1
 8001a32:	71fb      	strb	r3, [r7, #7]
 8001a34:	4613      	mov	r3, r2
 8001a36:	71bb      	strb	r3, [r7, #6]
  char buf[PRINTF_INTEGER_BUFFER_SIZE];
  printf_size_t len = 0U;
 8001a38:	2300      	movs	r3, #0
 8001a3a:	637b      	str	r3, [r7, #52]	; 0x34

  if (!value) {
 8001a3c:	68bb      	ldr	r3, [r7, #8]
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d119      	bne.n	8001a76 <print_integer+0x54>
    if ( !(flags & FLAGS_PRECISION) ) {
 8001a42:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001a44:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d10c      	bne.n	8001a66 <print_integer+0x44>
      buf[len++] = '0';
 8001a4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a4e:	1c5a      	adds	r2, r3, #1
 8001a50:	637a      	str	r2, [r7, #52]	; 0x34
 8001a52:	3338      	adds	r3, #56	; 0x38
 8001a54:	443b      	add	r3, r7
 8001a56:	2230      	movs	r2, #48	; 0x30
 8001a58:	f803 2c28 	strb.w	r2, [r3, #-40]
      flags &= ~FLAGS_HASH;
 8001a5c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001a5e:	f023 0310 	bic.w	r3, r3, #16
 8001a62:	64bb      	str	r3, [r7, #72]	; 0x48
 8001a64:	e039      	b.n	8001ada <print_integer+0xb8>
      // We drop this flag this since either the alternative and regular modes of the specifier
      // don't differ on 0 values, or (in the case of octal) we've already provided the special
      // handling for this mode.
    }
    else if (base == BASE_HEX) {
 8001a66:	79bb      	ldrb	r3, [r7, #6]
 8001a68:	2b10      	cmp	r3, #16
 8001a6a:	d136      	bne.n	8001ada <print_integer+0xb8>
      flags &= ~FLAGS_HASH;
 8001a6c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001a6e:	f023 0310 	bic.w	r3, r3, #16
 8001a72:	64bb      	str	r3, [r7, #72]	; 0x48
 8001a74:	e031      	b.n	8001ada <print_integer+0xb8>
      // don't differ on 0 values
    }
  }
  else {
    do {
      const char digit = (char)(value % base);
 8001a76:	79ba      	ldrb	r2, [r7, #6]
 8001a78:	68bb      	ldr	r3, [r7, #8]
 8001a7a:	fbb3 f1f2 	udiv	r1, r3, r2
 8001a7e:	fb01 f202 	mul.w	r2, r1, r2
 8001a82:	1a9b      	subs	r3, r3, r2
 8001a84:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      buf[len++] = (char)(digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10);
 8001a88:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001a8c:	2b09      	cmp	r3, #9
 8001a8e:	d804      	bhi.n	8001a9a <print_integer+0x78>
 8001a90:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001a94:	3330      	adds	r3, #48	; 0x30
 8001a96:	b2da      	uxtb	r2, r3
 8001a98:	e00d      	b.n	8001ab6 <print_integer+0x94>
 8001a9a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001a9c:	f003 0320 	and.w	r3, r3, #32
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d001      	beq.n	8001aa8 <print_integer+0x86>
 8001aa4:	2241      	movs	r2, #65	; 0x41
 8001aa6:	e000      	b.n	8001aaa <print_integer+0x88>
 8001aa8:	2261      	movs	r2, #97	; 0x61
 8001aaa:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001aae:	4413      	add	r3, r2
 8001ab0:	b2db      	uxtb	r3, r3
 8001ab2:	3b0a      	subs	r3, #10
 8001ab4:	b2da      	uxtb	r2, r3
 8001ab6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ab8:	1c59      	adds	r1, r3, #1
 8001aba:	6379      	str	r1, [r7, #52]	; 0x34
 8001abc:	3338      	adds	r3, #56	; 0x38
 8001abe:	443b      	add	r3, r7
 8001ac0:	f803 2c28 	strb.w	r2, [r3, #-40]
      value /= base;
 8001ac4:	79bb      	ldrb	r3, [r7, #6]
 8001ac6:	68ba      	ldr	r2, [r7, #8]
 8001ac8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001acc:	60bb      	str	r3, [r7, #8]
    } while (value && (len < PRINTF_INTEGER_BUFFER_SIZE));
 8001ace:	68bb      	ldr	r3, [r7, #8]
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d002      	beq.n	8001ada <print_integer+0xb8>
 8001ad4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ad6:	2b1f      	cmp	r3, #31
 8001ad8:	d9cd      	bls.n	8001a76 <print_integer+0x54>
  }

  print_integer_finalization(output, buf, len, negative, base, precision, width, flags);
 8001ada:	79fa      	ldrb	r2, [r7, #7]
 8001adc:	f107 0110 	add.w	r1, r7, #16
 8001ae0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001ae2:	9303      	str	r3, [sp, #12]
 8001ae4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001ae6:	9302      	str	r3, [sp, #8]
 8001ae8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001aea:	9301      	str	r3, [sp, #4]
 8001aec:	79bb      	ldrb	r3, [r7, #6]
 8001aee:	9300      	str	r3, [sp, #0]
 8001af0:	4613      	mov	r3, r2
 8001af2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001af4:	68f8      	ldr	r0, [r7, #12]
 8001af6:	f7ff fea2 	bl	800183e <print_integer_finalization>
}
 8001afa:	bf00      	nop
 8001afc:	3738      	adds	r7, #56	; 0x38
 8001afe:	46bd      	mov	sp, r7
 8001b00:	bd80      	pop	{r7, pc}
	...

08001b04 <get_components>:

// Break up a double number - which is known to be a finite non-negative number -
// into its base-10 parts: integral - before the decimal point, and fractional - after it.
// Taken the precision into account, but does not change it even internally.
static struct double_components get_components(double number, printf_size_t precision)
{
 8001b04:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001b08:	b096      	sub	sp, #88	; 0x58
 8001b0a:	af00      	add	r7, sp, #0
 8001b0c:	62f8      	str	r0, [r7, #44]	; 0x2c
 8001b0e:	ed87 0b08 	vstr	d0, [r7, #32]
 8001b12:	62b9      	str	r1, [r7, #40]	; 0x28
  struct double_components number_;
  number_.is_negative = get_sign_bit(number);
 8001b14:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001b18:	f7ff fd45 	bl	80015a6 <get_sign_bit>
 8001b1c:	4603      	mov	r3, r0
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	bf14      	ite	ne
 8001b22:	2301      	movne	r3, #1
 8001b24:	2300      	moveq	r3, #0
 8001b26:	b2db      	uxtb	r3, r3
 8001b28:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
  double abs_number = (number_.is_negative) ? -number : number;
 8001b2c:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d004      	beq.n	8001b3e <get_components+0x3a>
 8001b34:	6a3c      	ldr	r4, [r7, #32]
 8001b36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b38:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8001b3c:	e001      	b.n	8001b42 <get_components+0x3e>
 8001b3e:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8001b42:	e9c7 4514 	strd	r4, r5, [r7, #80]	; 0x50
  number_.integral = (int_fast64_t)abs_number;
 8001b46:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8001b4a:	f7ff f84f 	bl	8000bec <__aeabi_d2lz>
 8001b4e:	4602      	mov	r2, r0
 8001b50:	460b      	mov	r3, r1
 8001b52:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
  double remainder = (abs_number - (double) number_.integral) * powers_of_10[precision];
 8001b56:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001b5a:	4610      	mov	r0, r2
 8001b5c:	4619      	mov	r1, r3
 8001b5e:	f7fe fd15 	bl	800058c <__aeabi_l2d>
 8001b62:	4602      	mov	r2, r0
 8001b64:	460b      	mov	r3, r1
 8001b66:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8001b6a:	f7fe fb85 	bl	8000278 <__aeabi_dsub>
 8001b6e:	4602      	mov	r2, r0
 8001b70:	460b      	mov	r3, r1
 8001b72:	4610      	mov	r0, r2
 8001b74:	4619      	mov	r1, r3
 8001b76:	4a69      	ldr	r2, [pc, #420]	; (8001d1c <get_components+0x218>)
 8001b78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b7a:	00db      	lsls	r3, r3, #3
 8001b7c:	4413      	add	r3, r2
 8001b7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b82:	f7fe fd31 	bl	80005e8 <__aeabi_dmul>
 8001b86:	4602      	mov	r2, r0
 8001b88:	460b      	mov	r3, r1
 8001b8a:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
  number_.fractional = (int_fast64_t)remainder;
 8001b8e:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8001b92:	f7ff f82b 	bl	8000bec <__aeabi_d2lz>
 8001b96:	4602      	mov	r2, r0
 8001b98:	460b      	mov	r3, r1
 8001b9a:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38

  remainder -= (double) number_.fractional;
 8001b9e:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8001ba2:	4610      	mov	r0, r2
 8001ba4:	4619      	mov	r1, r3
 8001ba6:	f7fe fcf1 	bl	800058c <__aeabi_l2d>
 8001baa:	4602      	mov	r2, r0
 8001bac:	460b      	mov	r3, r1
 8001bae:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8001bb2:	f7fe fb61 	bl	8000278 <__aeabi_dsub>
 8001bb6:	4602      	mov	r2, r0
 8001bb8:	460b      	mov	r3, r1
 8001bba:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48

  if (remainder > 0.5) {
 8001bbe:	f04f 0200 	mov.w	r2, #0
 8001bc2:	4b57      	ldr	r3, [pc, #348]	; (8001d20 <get_components+0x21c>)
 8001bc4:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8001bc8:	f7fe ff9e 	bl	8000b08 <__aeabi_dcmpgt>
 8001bcc:	4603      	mov	r3, r0
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d02d      	beq.n	8001c2e <get_components+0x12a>
    ++number_.fractional;
 8001bd2:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8001bd6:	1c51      	adds	r1, r2, #1
 8001bd8:	61b9      	str	r1, [r7, #24]
 8001bda:	f143 0300 	adc.w	r3, r3, #0
 8001bde:	61fb      	str	r3, [r7, #28]
 8001be0:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8001be4:	e9c7 340e 	strd	r3, r4, [r7, #56]	; 0x38
    // handle rollover, e.g. case 0.99 with precision 1 is 1.0
    if ((double) number_.fractional >= powers_of_10[precision]) {
 8001be8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8001bec:	4610      	mov	r0, r2
 8001bee:	4619      	mov	r1, r3
 8001bf0:	f7fe fccc 	bl	800058c <__aeabi_l2d>
 8001bf4:	4a49      	ldr	r2, [pc, #292]	; (8001d1c <get_components+0x218>)
 8001bf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001bf8:	00db      	lsls	r3, r3, #3
 8001bfa:	4413      	add	r3, r2
 8001bfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c00:	f7fe ff78 	bl	8000af4 <__aeabi_dcmpge>
 8001c04:	4603      	mov	r3, r0
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d033      	beq.n	8001c72 <get_components+0x16e>
      number_.fractional = 0;
 8001c0a:	f04f 0200 	mov.w	r2, #0
 8001c0e:	f04f 0300 	mov.w	r3, #0
 8001c12:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
      ++number_.integral;
 8001c16:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001c1a:	1c51      	adds	r1, r2, #1
 8001c1c:	6139      	str	r1, [r7, #16]
 8001c1e:	f143 0300 	adc.w	r3, r3, #0
 8001c22:	617b      	str	r3, [r7, #20]
 8001c24:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8001c28:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
 8001c2c:	e021      	b.n	8001c72 <get_components+0x16e>
    }
  }
  else if ((remainder == 0.5) && ((number_.fractional == 0U) || (number_.fractional & 1U))) {
 8001c2e:	f04f 0200 	mov.w	r2, #0
 8001c32:	4b3b      	ldr	r3, [pc, #236]	; (8001d20 <get_components+0x21c>)
 8001c34:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8001c38:	f7fe ff3e 	bl	8000ab8 <__aeabi_dcmpeq>
 8001c3c:	4603      	mov	r3, r0
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d017      	beq.n	8001c72 <get_components+0x16e>
 8001c42:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8001c46:	4313      	orrs	r3, r2
 8001c48:	d008      	beq.n	8001c5c <get_components+0x158>
 8001c4a:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8001c4e:	f002 0a01 	and.w	sl, r2, #1
 8001c52:	f04f 0b00 	mov.w	fp, #0
 8001c56:	ea5a 030b 	orrs.w	r3, sl, fp
 8001c5a:	d00a      	beq.n	8001c72 <get_components+0x16e>
    // if halfway, round up if odd OR if last digit is 0
    ++number_.fractional;
 8001c5c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8001c60:	1c51      	adds	r1, r2, #1
 8001c62:	60b9      	str	r1, [r7, #8]
 8001c64:	f143 0300 	adc.w	r3, r3, #0
 8001c68:	60fb      	str	r3, [r7, #12]
 8001c6a:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8001c6e:	e9c7 340e 	strd	r3, r4, [r7, #56]	; 0x38
  }

  if (precision == 0U) {
 8001c72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d141      	bne.n	8001cfc <get_components+0x1f8>
    remainder = abs_number - (double) number_.integral;
 8001c78:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001c7c:	4610      	mov	r0, r2
 8001c7e:	4619      	mov	r1, r3
 8001c80:	f7fe fc84 	bl	800058c <__aeabi_l2d>
 8001c84:	4602      	mov	r2, r0
 8001c86:	460b      	mov	r3, r1
 8001c88:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8001c8c:	f7fe faf4 	bl	8000278 <__aeabi_dsub>
 8001c90:	4602      	mov	r2, r0
 8001c92:	460b      	mov	r3, r1
 8001c94:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
    if ((!(remainder < 0.5) || (remainder > 0.5)) && (number_.integral & 1)) {
 8001c98:	2301      	movs	r3, #1
 8001c9a:	461c      	mov	r4, r3
 8001c9c:	f04f 0200 	mov.w	r2, #0
 8001ca0:	4b1f      	ldr	r3, [pc, #124]	; (8001d20 <get_components+0x21c>)
 8001ca2:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8001ca6:	f7fe ff11 	bl	8000acc <__aeabi_dcmplt>
 8001caa:	4603      	mov	r3, r0
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d101      	bne.n	8001cb4 <get_components+0x1b0>
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	461c      	mov	r4, r3
 8001cb4:	b2e3      	uxtb	r3, r4
 8001cb6:	f083 0301 	eor.w	r3, r3, #1
 8001cba:	b2db      	uxtb	r3, r3
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d109      	bne.n	8001cd4 <get_components+0x1d0>
 8001cc0:	f04f 0200 	mov.w	r2, #0
 8001cc4:	4b16      	ldr	r3, [pc, #88]	; (8001d20 <get_components+0x21c>)
 8001cc6:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8001cca:	f7fe ff1d 	bl	8000b08 <__aeabi_dcmpgt>
 8001cce:	4603      	mov	r3, r0
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d013      	beq.n	8001cfc <get_components+0x1f8>
 8001cd4:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001cd8:	f002 0801 	and.w	r8, r2, #1
 8001cdc:	f04f 0900 	mov.w	r9, #0
 8001ce0:	ea58 0309 	orrs.w	r3, r8, r9
 8001ce4:	d00a      	beq.n	8001cfc <get_components+0x1f8>
      // exactly 0.5 and ODD, then round up
      // 1.5 -> 2, but 2.5 -> 2
      ++number_.integral;
 8001ce6:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001cea:	1c51      	adds	r1, r2, #1
 8001cec:	6039      	str	r1, [r7, #0]
 8001cee:	f143 0300 	adc.w	r3, r3, #0
 8001cf2:	607b      	str	r3, [r7, #4]
 8001cf4:	e9d7 3400 	ldrd	r3, r4, [r7]
 8001cf8:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
    }
  }
  return number_;
 8001cfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001cfe:	461d      	mov	r5, r3
 8001d00:	f107 0430 	add.w	r4, r7, #48	; 0x30
 8001d04:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001d06:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001d08:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001d0c:	e885 0003 	stmia.w	r5, {r0, r1}
}
 8001d10:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001d12:	3758      	adds	r7, #88	; 0x58
 8001d14:	46bd      	mov	sp, r7
 8001d16:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001d1a:	bf00      	nop
 8001d1c:	0800c378 	.word	0x0800c378
 8001d20:	3fe00000 	.word	0x3fe00000

08001d24 <print_broken_up_decimal>:
#endif // PRINTF_SUPPORT_EXPONENTIAL_SPECIFIERS

static void print_broken_up_decimal(
  struct double_components number_, output_gadget_t* output, printf_size_t precision,
  printf_size_t width, printf_flags_t flags, char *buf, printf_size_t len)
{
 8001d24:	b084      	sub	sp, #16
 8001d26:	b580      	push	{r7, lr}
 8001d28:	b086      	sub	sp, #24
 8001d2a:	af02      	add	r7, sp, #8
 8001d2c:	f107 0c18 	add.w	ip, r7, #24
 8001d30:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
  if (precision != 0U) {
 8001d34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	f000 8087 	beq.w	8001e4a <print_broken_up_decimal+0x126>
    // do fractional part, as an unsigned number

    printf_size_t count = precision;
 8001d3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d3e:	60fb      	str	r3, [r7, #12]

    // %g/%G mandates we skip the trailing 0 digits...
    if ((flags & FLAGS_ADAPT_EXP) && !(flags & FLAGS_HASH) && (number_.fractional > 0)) {
 8001d40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001d42:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d029      	beq.n	8001d9e <print_broken_up_decimal+0x7a>
 8001d4a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001d4c:	f003 0310 	and.w	r3, r3, #16
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d124      	bne.n	8001d9e <print_broken_up_decimal+0x7a>
 8001d54:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001d58:	2a01      	cmp	r2, #1
 8001d5a:	f173 0300 	sbcs.w	r3, r3, #0
 8001d5e:	db1e      	blt.n	8001d9e <print_broken_up_decimal+0x7a>
      while(true) {
        int_fast64_t digit = number_.fractional % 10U;
 8001d60:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001d64:	f04f 020a 	mov.w	r2, #10
 8001d68:	f04f 0300 	mov.w	r3, #0
 8001d6c:	f7fe fed6 	bl	8000b1c <__aeabi_ldivmod>
 8001d70:	e9c7 2300 	strd	r2, r3, [r7]
        if (digit != 0) {
 8001d74:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001d78:	4313      	orrs	r3, r2
 8001d7a:	d10f      	bne.n	8001d9c <print_broken_up_decimal+0x78>
          break;
        }
        --count;
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	3b01      	subs	r3, #1
 8001d80:	60fb      	str	r3, [r7, #12]
        number_.fractional /= 10U;
 8001d82:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001d86:	f04f 020a 	mov.w	r2, #10
 8001d8a:	f04f 0300 	mov.w	r3, #0
 8001d8e:	f7fe fec5 	bl	8000b1c <__aeabi_ldivmod>
 8001d92:	4602      	mov	r2, r0
 8001d94:	460b      	mov	r3, r1
 8001d96:	e9c7 2308 	strd	r2, r3, [r7, #32]
      while(true) {
 8001d9a:	e7e1      	b.n	8001d60 <print_broken_up_decimal+0x3c>
          break;
 8001d9c:	bf00      	nop
      }
      // ... and even the decimal point if there are no
      // non-zero fractional part digits (see below)
    }

    if (number_.fractional > 0 || !(flags & FLAGS_ADAPT_EXP) || (flags & FLAGS_HASH) ) {
 8001d9e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001da2:	2a01      	cmp	r2, #1
 8001da4:	f173 0300 	sbcs.w	r3, r3, #0
 8001da8:	da2e      	bge.n	8001e08 <print_broken_up_decimal+0xe4>
 8001daa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001dac:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d029      	beq.n	8001e08 <print_broken_up_decimal+0xe4>
 8001db4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001db6:	f003 0310 	and.w	r3, r3, #16
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d076      	beq.n	8001eac <print_broken_up_decimal+0x188>
      while (len < PRINTF_DECIMAL_BUFFER_SIZE) {
 8001dbe:	e023      	b.n	8001e08 <print_broken_up_decimal+0xe4>
        --count;
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	3b01      	subs	r3, #1
 8001dc4:	60fb      	str	r3, [r7, #12]
        buf[len++] = (char)('0' + number_.fractional % 10U);
 8001dc6:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001dca:	f04f 020a 	mov.w	r2, #10
 8001dce:	f04f 0300 	mov.w	r3, #0
 8001dd2:	f7fe fea3 	bl	8000b1c <__aeabi_ldivmod>
 8001dd6:	b2d2      	uxtb	r2, r2
 8001dd8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001dda:	1c59      	adds	r1, r3, #1
 8001ddc:	6479      	str	r1, [r7, #68]	; 0x44
 8001dde:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8001de0:	440b      	add	r3, r1
 8001de2:	3230      	adds	r2, #48	; 0x30
 8001de4:	b2d2      	uxtb	r2, r2
 8001de6:	701a      	strb	r2, [r3, #0]
        if (!(number_.fractional /= 10U)) {
 8001de8:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001dec:	f04f 020a 	mov.w	r2, #10
 8001df0:	f04f 0300 	mov.w	r3, #0
 8001df4:	f7fe fe92 	bl	8000b1c <__aeabi_ldivmod>
 8001df8:	4602      	mov	r2, r0
 8001dfa:	460b      	mov	r3, r1
 8001dfc:	e9c7 2308 	strd	r2, r3, [r7, #32]
 8001e00:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001e04:	4313      	orrs	r3, r2
 8001e06:	d003      	beq.n	8001e10 <print_broken_up_decimal+0xec>
      while (len < PRINTF_DECIMAL_BUFFER_SIZE) {
 8001e08:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001e0a:	2b1f      	cmp	r3, #31
 8001e0c:	d9d8      	bls.n	8001dc0 <print_broken_up_decimal+0x9c>
 8001e0e:	e00b      	b.n	8001e28 <print_broken_up_decimal+0x104>
          break;
 8001e10:	bf00      	nop
        }
      }
      // add extra 0s
      while ((len < PRINTF_DECIMAL_BUFFER_SIZE) && (count > 0U)) {
 8001e12:	e009      	b.n	8001e28 <print_broken_up_decimal+0x104>
        buf[len++] = '0';
 8001e14:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001e16:	1c5a      	adds	r2, r3, #1
 8001e18:	647a      	str	r2, [r7, #68]	; 0x44
 8001e1a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001e1c:	4413      	add	r3, r2
 8001e1e:	2230      	movs	r2, #48	; 0x30
 8001e20:	701a      	strb	r2, [r3, #0]
        --count;
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	3b01      	subs	r3, #1
 8001e26:	60fb      	str	r3, [r7, #12]
      while ((len < PRINTF_DECIMAL_BUFFER_SIZE) && (count > 0U)) {
 8001e28:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001e2a:	2b1f      	cmp	r3, #31
 8001e2c:	d802      	bhi.n	8001e34 <print_broken_up_decimal+0x110>
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d1ef      	bne.n	8001e14 <print_broken_up_decimal+0xf0>
      }
      if (len < PRINTF_DECIMAL_BUFFER_SIZE) {
 8001e34:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001e36:	2b1f      	cmp	r3, #31
 8001e38:	d838      	bhi.n	8001eac <print_broken_up_decimal+0x188>
        buf[len++] = '.';
 8001e3a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001e3c:	1c5a      	adds	r2, r3, #1
 8001e3e:	647a      	str	r2, [r7, #68]	; 0x44
 8001e40:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001e42:	4413      	add	r3, r2
 8001e44:	222e      	movs	r2, #46	; 0x2e
 8001e46:	701a      	strb	r2, [r3, #0]
 8001e48:	e030      	b.n	8001eac <print_broken_up_decimal+0x188>
      }
    }
  }
  else {
    if ((flags & FLAGS_HASH) && (len < PRINTF_DECIMAL_BUFFER_SIZE)) {
 8001e4a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001e4c:	f003 0310 	and.w	r3, r3, #16
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d02b      	beq.n	8001eac <print_broken_up_decimal+0x188>
 8001e54:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001e56:	2b1f      	cmp	r3, #31
 8001e58:	d828      	bhi.n	8001eac <print_broken_up_decimal+0x188>
      buf[len++] = '.';
 8001e5a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001e5c:	1c5a      	adds	r2, r3, #1
 8001e5e:	647a      	str	r2, [r7, #68]	; 0x44
 8001e60:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001e62:	4413      	add	r3, r2
 8001e64:	222e      	movs	r2, #46	; 0x2e
 8001e66:	701a      	strb	r2, [r3, #0]
    }
  }

  // Write the integer part of the number (it comes after the fractional
  // since the character order is reversed)
  while (len < PRINTF_DECIMAL_BUFFER_SIZE) {
 8001e68:	e020      	b.n	8001eac <print_broken_up_decimal+0x188>
    buf[len++] = (char)('0' + (number_.integral % 10));
 8001e6a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001e6e:	f04f 020a 	mov.w	r2, #10
 8001e72:	f04f 0300 	mov.w	r3, #0
 8001e76:	f7fe fe51 	bl	8000b1c <__aeabi_ldivmod>
 8001e7a:	b2d2      	uxtb	r2, r2
 8001e7c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001e7e:	1c59      	adds	r1, r3, #1
 8001e80:	6479      	str	r1, [r7, #68]	; 0x44
 8001e82:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8001e84:	440b      	add	r3, r1
 8001e86:	3230      	adds	r2, #48	; 0x30
 8001e88:	b2d2      	uxtb	r2, r2
 8001e8a:	701a      	strb	r2, [r3, #0]
    if (!(number_.integral /= 10)) {
 8001e8c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001e90:	f04f 020a 	mov.w	r2, #10
 8001e94:	f04f 0300 	mov.w	r3, #0
 8001e98:	f7fe fe40 	bl	8000b1c <__aeabi_ldivmod>
 8001e9c:	4602      	mov	r2, r0
 8001e9e:	460b      	mov	r3, r1
 8001ea0:	e9c7 2306 	strd	r2, r3, [r7, #24]
 8001ea4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001ea8:	4313      	orrs	r3, r2
 8001eaa:	d003      	beq.n	8001eb4 <print_broken_up_decimal+0x190>
  while (len < PRINTF_DECIMAL_BUFFER_SIZE) {
 8001eac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001eae:	2b1f      	cmp	r3, #31
 8001eb0:	d9db      	bls.n	8001e6a <print_broken_up_decimal+0x146>
 8001eb2:	e000      	b.n	8001eb6 <print_broken_up_decimal+0x192>
      break;
 8001eb4:	bf00      	nop
    }
  }

  // pad leading zeros
  if (!(flags & FLAGS_LEFT) && (flags & FLAGS_ZEROPAD)) {
 8001eb6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001eb8:	f003 0302 	and.w	r3, r3, #2
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d122      	bne.n	8001f06 <print_broken_up_decimal+0x1e2>
 8001ec0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001ec2:	f003 0301 	and.w	r3, r3, #1
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d01d      	beq.n	8001f06 <print_broken_up_decimal+0x1e2>
    if (width && (number_.is_negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
 8001eca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d013      	beq.n	8001ef8 <print_broken_up_decimal+0x1d4>
 8001ed0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d104      	bne.n	8001ee2 <print_broken_up_decimal+0x1be>
 8001ed8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001eda:	f003 030c 	and.w	r3, r3, #12
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d00a      	beq.n	8001ef8 <print_broken_up_decimal+0x1d4>
      width--;
 8001ee2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001ee4:	3b01      	subs	r3, #1
 8001ee6:	63bb      	str	r3, [r7, #56]	; 0x38
    }
    while ((len < width) && (len < PRINTF_DECIMAL_BUFFER_SIZE)) {
 8001ee8:	e006      	b.n	8001ef8 <print_broken_up_decimal+0x1d4>
      buf[len++] = '0';
 8001eea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001eec:	1c5a      	adds	r2, r3, #1
 8001eee:	647a      	str	r2, [r7, #68]	; 0x44
 8001ef0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001ef2:	4413      	add	r3, r2
 8001ef4:	2230      	movs	r2, #48	; 0x30
 8001ef6:	701a      	strb	r2, [r3, #0]
    while ((len < width) && (len < PRINTF_DECIMAL_BUFFER_SIZE)) {
 8001ef8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001efa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001efc:	429a      	cmp	r2, r3
 8001efe:	d202      	bcs.n	8001f06 <print_broken_up_decimal+0x1e2>
 8001f00:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001f02:	2b1f      	cmp	r3, #31
 8001f04:	d9f1      	bls.n	8001eea <print_broken_up_decimal+0x1c6>
    }
  }

  if (len < PRINTF_DECIMAL_BUFFER_SIZE) {
 8001f06:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001f08:	2b1f      	cmp	r3, #31
 8001f0a:	d824      	bhi.n	8001f56 <print_broken_up_decimal+0x232>
    if (number_.is_negative) {
 8001f0c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d007      	beq.n	8001f24 <print_broken_up_decimal+0x200>
      buf[len++] = '-';
 8001f14:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001f16:	1c5a      	adds	r2, r3, #1
 8001f18:	647a      	str	r2, [r7, #68]	; 0x44
 8001f1a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001f1c:	4413      	add	r3, r2
 8001f1e:	222d      	movs	r2, #45	; 0x2d
 8001f20:	701a      	strb	r2, [r3, #0]
 8001f22:	e018      	b.n	8001f56 <print_broken_up_decimal+0x232>
    }
    else if (flags & FLAGS_PLUS) {
 8001f24:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001f26:	f003 0304 	and.w	r3, r3, #4
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d007      	beq.n	8001f3e <print_broken_up_decimal+0x21a>
      buf[len++] = '+';  // ignore the space if the '+' exists
 8001f2e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001f30:	1c5a      	adds	r2, r3, #1
 8001f32:	647a      	str	r2, [r7, #68]	; 0x44
 8001f34:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001f36:	4413      	add	r3, r2
 8001f38:	222b      	movs	r2, #43	; 0x2b
 8001f3a:	701a      	strb	r2, [r3, #0]
 8001f3c:	e00b      	b.n	8001f56 <print_broken_up_decimal+0x232>
    }
    else if (flags & FLAGS_SPACE) {
 8001f3e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001f40:	f003 0308 	and.w	r3, r3, #8
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d006      	beq.n	8001f56 <print_broken_up_decimal+0x232>
      buf[len++] = ' ';
 8001f48:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001f4a:	1c5a      	adds	r2, r3, #1
 8001f4c:	647a      	str	r2, [r7, #68]	; 0x44
 8001f4e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001f50:	4413      	add	r3, r2
 8001f52:	2220      	movs	r2, #32
 8001f54:	701a      	strb	r2, [r3, #0]
    }
  }

  out_rev_(output, buf, len, width, flags);
 8001f56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001f58:	9300      	str	r3, [sp, #0]
 8001f5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f5c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001f5e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8001f60:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001f62:	f7ff fc26 	bl	80017b2 <out_rev_>
}
 8001f66:	bf00      	nop
 8001f68:	3710      	adds	r7, #16
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001f70:	b004      	add	sp, #16
 8001f72:	4770      	bx	lr

08001f74 <print_decimal_number>:

      // internal ftoa for fixed decimal floating point
static void print_decimal_number(output_gadget_t* output, double number, printf_size_t precision, printf_size_t width, printf_flags_t flags, char* buf, printf_size_t len)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b094      	sub	sp, #80	; 0x50
 8001f78:	af08      	add	r7, sp, #32
 8001f7a:	6178      	str	r0, [r7, #20]
 8001f7c:	ed87 0b02 	vstr	d0, [r7, #8]
 8001f80:	6139      	str	r1, [r7, #16]
 8001f82:	607a      	str	r2, [r7, #4]
 8001f84:	603b      	str	r3, [r7, #0]
  struct double_components value_ = get_components(number, precision);
 8001f86:	f107 0318 	add.w	r3, r7, #24
 8001f8a:	6939      	ldr	r1, [r7, #16]
 8001f8c:	ed97 0b02 	vldr	d0, [r7, #8]
 8001f90:	4618      	mov	r0, r3
 8001f92:	f7ff fdb7 	bl	8001b04 <get_components>
  print_broken_up_decimal(value_, output, precision, width, flags, buf, len);
 8001f96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001f98:	9307      	str	r3, [sp, #28]
 8001f9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f9c:	9306      	str	r3, [sp, #24]
 8001f9e:	683b      	ldr	r3, [r7, #0]
 8001fa0:	9305      	str	r3, [sp, #20]
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	9304      	str	r3, [sp, #16]
 8001fa6:	693b      	ldr	r3, [r7, #16]
 8001fa8:	9303      	str	r3, [sp, #12]
 8001faa:	697b      	ldr	r3, [r7, #20]
 8001fac:	9302      	str	r3, [sp, #8]
 8001fae:	466a      	mov	r2, sp
 8001fb0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001fb4:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001fb8:	e882 0003 	stmia.w	r2, {r0, r1}
 8001fbc:	f107 0318 	add.w	r3, r7, #24
 8001fc0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001fc2:	f7ff feaf 	bl	8001d24 <print_broken_up_decimal>
}
 8001fc6:	bf00      	nop
 8001fc8:	3730      	adds	r7, #48	; 0x30
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	bd80      	pop	{r7, pc}
	...

08001fd0 <print_floating_point>:
  }
}
#endif  // PRINTF_SUPPORT_EXPONENTIAL_SPECIFIERS

static void print_floating_point(output_gadget_t* output, double value, printf_size_t precision, printf_size_t width, printf_flags_t flags, bool prefer_exponential)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b092      	sub	sp, #72	; 0x48
 8001fd4:	af02      	add	r7, sp, #8
 8001fd6:	6178      	str	r0, [r7, #20]
 8001fd8:	ed87 0b02 	vstr	d0, [r7, #8]
 8001fdc:	6139      	str	r1, [r7, #16]
 8001fde:	607a      	str	r2, [r7, #4]
 8001fe0:	603b      	str	r3, [r7, #0]
  char buf[PRINTF_DECIMAL_BUFFER_SIZE];
  printf_size_t len = 0U;
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	63fb      	str	r3, [r7, #60]	; 0x3c

  // test for special values
  if (value != value) {
 8001fe6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001fea:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001fee:	f7fe fd63 	bl	8000ab8 <__aeabi_dcmpeq>
 8001ff2:	4603      	mov	r3, r0
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d108      	bne.n	800200a <print_floating_point+0x3a>
    out_rev_(output, "nan", 3, width, flags);
 8001ff8:	683b      	ldr	r3, [r7, #0]
 8001ffa:	9300      	str	r3, [sp, #0]
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	2203      	movs	r2, #3
 8002000:	4943      	ldr	r1, [pc, #268]	; (8002110 <print_floating_point+0x140>)
 8002002:	6978      	ldr	r0, [r7, #20]
 8002004:	f7ff fbd5 	bl	80017b2 <out_rev_>
    return;
 8002008:	e077      	b.n	80020fa <print_floating_point+0x12a>
  }
  if (value < -DBL_MAX) {
 800200a:	f04f 32ff 	mov.w	r2, #4294967295
 800200e:	f46f 1380 	mvn.w	r3, #1048576	; 0x100000
 8002012:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002016:	f7fe fd59 	bl	8000acc <__aeabi_dcmplt>
 800201a:	4603      	mov	r3, r0
 800201c:	2b00      	cmp	r3, #0
 800201e:	d008      	beq.n	8002032 <print_floating_point+0x62>
    out_rev_(output, "fni-", 4, width, flags);
 8002020:	683b      	ldr	r3, [r7, #0]
 8002022:	9300      	str	r3, [sp, #0]
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	2204      	movs	r2, #4
 8002028:	493a      	ldr	r1, [pc, #232]	; (8002114 <print_floating_point+0x144>)
 800202a:	6978      	ldr	r0, [r7, #20]
 800202c:	f7ff fbc1 	bl	80017b2 <out_rev_>
    return;
 8002030:	e063      	b.n	80020fa <print_floating_point+0x12a>
  }
  if (value > DBL_MAX) {
 8002032:	f04f 32ff 	mov.w	r2, #4294967295
 8002036:	4b38      	ldr	r3, [pc, #224]	; (8002118 <print_floating_point+0x148>)
 8002038:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800203c:	f7fe fd64 	bl	8000b08 <__aeabi_dcmpgt>
 8002040:	4603      	mov	r3, r0
 8002042:	2b00      	cmp	r3, #0
 8002044:	d016      	beq.n	8002074 <print_floating_point+0xa4>
    out_rev_(output, (flags & FLAGS_PLUS) ? "fni+" : "fni", (flags & FLAGS_PLUS) ? 4U : 3U, width, flags);
 8002046:	683b      	ldr	r3, [r7, #0]
 8002048:	f003 0304 	and.w	r3, r3, #4
 800204c:	2b00      	cmp	r3, #0
 800204e:	d001      	beq.n	8002054 <print_floating_point+0x84>
 8002050:	4932      	ldr	r1, [pc, #200]	; (800211c <print_floating_point+0x14c>)
 8002052:	e000      	b.n	8002056 <print_floating_point+0x86>
 8002054:	4932      	ldr	r1, [pc, #200]	; (8002120 <print_floating_point+0x150>)
 8002056:	683b      	ldr	r3, [r7, #0]
 8002058:	f003 0304 	and.w	r3, r3, #4
 800205c:	2b00      	cmp	r3, #0
 800205e:	d001      	beq.n	8002064 <print_floating_point+0x94>
 8002060:	2204      	movs	r2, #4
 8002062:	e000      	b.n	8002066 <print_floating_point+0x96>
 8002064:	2203      	movs	r2, #3
 8002066:	683b      	ldr	r3, [r7, #0]
 8002068:	9300      	str	r3, [sp, #0]
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	6978      	ldr	r0, [r7, #20]
 800206e:	f7ff fba0 	bl	80017b2 <out_rev_>
    return;
 8002072:	e042      	b.n	80020fa <print_floating_point+0x12a>
  }

  if (!prefer_exponential &&
 8002074:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8002078:	f083 0301 	eor.w	r3, r3, #1
 800207c:	b2db      	uxtb	r3, r3
 800207e:	2b00      	cmp	r3, #0
 8002080:	d013      	beq.n	80020aa <print_floating_point+0xda>
 8002082:	a31f      	add	r3, pc, #124	; (adr r3, 8002100 <print_floating_point+0x130>)
 8002084:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002088:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800208c:	f7fe fd3c 	bl	8000b08 <__aeabi_dcmpgt>
 8002090:	4603      	mov	r3, r0
 8002092:	2b00      	cmp	r3, #0
 8002094:	d130      	bne.n	80020f8 <print_floating_point+0x128>
      ((value > PRINTF_FLOAT_NOTATION_THRESHOLD) || (value < -PRINTF_FLOAT_NOTATION_THRESHOLD))) {
 8002096:	a31c      	add	r3, pc, #112	; (adr r3, 8002108 <print_floating_point+0x138>)
 8002098:	e9d3 2300 	ldrd	r2, r3, [r3]
 800209c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80020a0:	f7fe fd14 	bl	8000acc <__aeabi_dcmplt>
 80020a4:	4603      	mov	r3, r0
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d126      	bne.n	80020f8 <print_floating_point+0x128>
#endif
    return;
  }

  // set default precision, if not set explicitly
  if (!(flags & FLAGS_PRECISION)) {
 80020aa:	683b      	ldr	r3, [r7, #0]
 80020ac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d10d      	bne.n	80020d0 <print_floating_point+0x100>
    precision = PRINTF_DEFAULT_FLOAT_PRECISION;
 80020b4:	2306      	movs	r3, #6
 80020b6:	613b      	str	r3, [r7, #16]
  }

  // limit precision so that our integer holding the fractional part does not overflow
  while ((len < PRINTF_DECIMAL_BUFFER_SIZE) && (precision > PRINTF_MAX_SUPPORTED_PRECISION)) {
 80020b8:	e00a      	b.n	80020d0 <print_floating_point+0x100>
    buf[len++] = '0'; // This respects the precision in terms of result length only
 80020ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80020bc:	1c5a      	adds	r2, r3, #1
 80020be:	63fa      	str	r2, [r7, #60]	; 0x3c
 80020c0:	3340      	adds	r3, #64	; 0x40
 80020c2:	443b      	add	r3, r7
 80020c4:	2230      	movs	r2, #48	; 0x30
 80020c6:	f803 2c24 	strb.w	r2, [r3, #-36]
    precision--;
 80020ca:	693b      	ldr	r3, [r7, #16]
 80020cc:	3b01      	subs	r3, #1
 80020ce:	613b      	str	r3, [r7, #16]
  while ((len < PRINTF_DECIMAL_BUFFER_SIZE) && (precision > PRINTF_MAX_SUPPORTED_PRECISION)) {
 80020d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80020d2:	2b1f      	cmp	r3, #31
 80020d4:	d802      	bhi.n	80020dc <print_floating_point+0x10c>
 80020d6:	693b      	ldr	r3, [r7, #16]
 80020d8:	2b11      	cmp	r3, #17
 80020da:	d8ee      	bhi.n	80020ba <print_floating_point+0xea>
#if PRINTF_SUPPORT_EXPONENTIAL_SPECIFIERS
  if (prefer_exponential)
    print_exponential_number(output, value, precision, width, flags, buf, len);
  else
#endif
    print_decimal_number(output, value, precision, width, flags, buf, len);
 80020dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80020de:	9301      	str	r3, [sp, #4]
 80020e0:	f107 031c 	add.w	r3, r7, #28
 80020e4:	9300      	str	r3, [sp, #0]
 80020e6:	683b      	ldr	r3, [r7, #0]
 80020e8:	687a      	ldr	r2, [r7, #4]
 80020ea:	6939      	ldr	r1, [r7, #16]
 80020ec:	ed97 0b02 	vldr	d0, [r7, #8]
 80020f0:	6978      	ldr	r0, [r7, #20]
 80020f2:	f7ff ff3f 	bl	8001f74 <print_decimal_number>
 80020f6:	e000      	b.n	80020fa <print_floating_point+0x12a>
    return;
 80020f8:	bf00      	nop
}
 80020fa:	3740      	adds	r7, #64	; 0x40
 80020fc:	46bd      	mov	sp, r7
 80020fe:	bd80      	pop	{r7, pc}
 8002100:	00000000 	.word	0x00000000
 8002104:	41cdcd65 	.word	0x41cdcd65
 8002108:	00000000 	.word	0x00000000
 800210c:	c1cdcd65 	.word	0xc1cdcd65
 8002110:	0800c25c 	.word	0x0800c25c
 8002114:	0800c260 	.word	0x0800c260
 8002118:	7fefffff 	.word	0x7fefffff
 800211c:	0800c268 	.word	0x0800c268
 8002120:	0800c270 	.word	0x0800c270

08002124 <parse_flags>:
#endif  // (PRINTF_SUPPORT_DECIMAL_SPECIFIERS || PRINTF_SUPPORT_EXPONENTIAL_SPECIFIERS)

// Advances the format pointer past the flags, and returns the parsed flags
// due to the characters passed
static printf_flags_t parse_flags(const char** format)
{
 8002124:	b480      	push	{r7}
 8002126:	b085      	sub	sp, #20
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
  printf_flags_t flags = 0U;
 800212c:	2300      	movs	r3, #0
 800212e:	60fb      	str	r3, [r7, #12]
  do {
    switch (**format) {
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	781b      	ldrb	r3, [r3, #0]
 8002136:	3b20      	subs	r3, #32
 8002138:	2b10      	cmp	r3, #16
 800213a:	d857      	bhi.n	80021ec <parse_flags+0xc8>
 800213c:	a201      	add	r2, pc, #4	; (adr r2, 8002144 <parse_flags+0x20>)
 800213e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002142:	bf00      	nop
 8002144:	080021c5 	.word	0x080021c5
 8002148:	080021ed 	.word	0x080021ed
 800214c:	080021ed 	.word	0x080021ed
 8002150:	080021d9 	.word	0x080021d9
 8002154:	080021ed 	.word	0x080021ed
 8002158:	080021ed 	.word	0x080021ed
 800215c:	080021ed 	.word	0x080021ed
 8002160:	080021ed 	.word	0x080021ed
 8002164:	080021ed 	.word	0x080021ed
 8002168:	080021ed 	.word	0x080021ed
 800216c:	080021ed 	.word	0x080021ed
 8002170:	080021b1 	.word	0x080021b1
 8002174:	080021ed 	.word	0x080021ed
 8002178:	0800219d 	.word	0x0800219d
 800217c:	080021ed 	.word	0x080021ed
 8002180:	080021ed 	.word	0x080021ed
 8002184:	08002189 	.word	0x08002189
      case '0': flags |= FLAGS_ZEROPAD; (*format)++; break;
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	f043 0301 	orr.w	r3, r3, #1
 800218e:	60fb      	str	r3, [r7, #12]
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	1c5a      	adds	r2, r3, #1
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	601a      	str	r2, [r3, #0]
 800219a:	e029      	b.n	80021f0 <parse_flags+0xcc>
      case '-': flags |= FLAGS_LEFT;    (*format)++; break;
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	f043 0302 	orr.w	r3, r3, #2
 80021a2:	60fb      	str	r3, [r7, #12]
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	1c5a      	adds	r2, r3, #1
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	601a      	str	r2, [r3, #0]
 80021ae:	e01f      	b.n	80021f0 <parse_flags+0xcc>
      case '+': flags |= FLAGS_PLUS;    (*format)++; break;
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	f043 0304 	orr.w	r3, r3, #4
 80021b6:	60fb      	str	r3, [r7, #12]
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	1c5a      	adds	r2, r3, #1
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	601a      	str	r2, [r3, #0]
 80021c2:	e015      	b.n	80021f0 <parse_flags+0xcc>
      case ' ': flags |= FLAGS_SPACE;   (*format)++; break;
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	f043 0308 	orr.w	r3, r3, #8
 80021ca:	60fb      	str	r3, [r7, #12]
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	1c5a      	adds	r2, r3, #1
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	601a      	str	r2, [r3, #0]
 80021d6:	e00b      	b.n	80021f0 <parse_flags+0xcc>
      case '#': flags |= FLAGS_HASH;    (*format)++; break;
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	f043 0310 	orr.w	r3, r3, #16
 80021de:	60fb      	str	r3, [r7, #12]
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	1c5a      	adds	r2, r3, #1
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	601a      	str	r2, [r3, #0]
 80021ea:	e001      	b.n	80021f0 <parse_flags+0xcc>
      default : return flags;
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	e000      	b.n	80021f2 <parse_flags+0xce>
    switch (**format) {
 80021f0:	e79e      	b.n	8002130 <parse_flags+0xc>
    }
  } while (true);
}
 80021f2:	4618      	mov	r0, r3
 80021f4:	3714      	adds	r7, #20
 80021f6:	46bd      	mov	sp, r7
 80021f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fc:	4770      	bx	lr
 80021fe:	bf00      	nop

08002200 <format_string_loop>:

static inline void format_string_loop(output_gadget_t* output, const char* format, va_list args)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	b096      	sub	sp, #88	; 0x58
 8002204:	af04      	add	r7, sp, #16
 8002206:	60f8      	str	r0, [r7, #12]
 8002208:	60b9      	str	r1, [r7, #8]
 800220a:	607a      	str	r2, [r7, #4]
#else
#define ADVANCE_IN_FORMAT_STRING(cptr_) (cptr_)++
#endif


  while (*format)
 800220c:	e3a1      	b.n	8002952 <format_string_loop+0x752>
  {
    if (*format != '%') {
 800220e:	68bb      	ldr	r3, [r7, #8]
 8002210:	781b      	ldrb	r3, [r3, #0]
 8002212:	2b25      	cmp	r3, #37	; 0x25
 8002214:	d009      	beq.n	800222a <format_string_loop+0x2a>
      // A regular content character
      putchar_via_gadget(output, *format);
 8002216:	68bb      	ldr	r3, [r7, #8]
 8002218:	781b      	ldrb	r3, [r3, #0]
 800221a:	4619      	mov	r1, r3
 800221c:	68f8      	ldr	r0, [r7, #12]
 800221e:	f7ff f9db 	bl	80015d8 <putchar_via_gadget>
      format++;
 8002222:	68bb      	ldr	r3, [r7, #8]
 8002224:	3301      	adds	r3, #1
 8002226:	60bb      	str	r3, [r7, #8]
      continue;
 8002228:	e393      	b.n	8002952 <format_string_loop+0x752>
    }
    // We're parsing a format specifier: %[flags][width][.precision][length]
    ADVANCE_IN_FORMAT_STRING(format);
 800222a:	68bb      	ldr	r3, [r7, #8]
 800222c:	3301      	adds	r3, #1
 800222e:	60bb      	str	r3, [r7, #8]
 8002230:	68bb      	ldr	r3, [r7, #8]
 8002232:	781b      	ldrb	r3, [r3, #0]
 8002234:	2b00      	cmp	r3, #0
 8002236:	f000 8392 	beq.w	800295e <format_string_loop+0x75e>

    printf_flags_t flags = parse_flags(&format);
 800223a:	f107 0308 	add.w	r3, r7, #8
 800223e:	4618      	mov	r0, r3
 8002240:	f7ff ff70 	bl	8002124 <parse_flags>
 8002244:	6478      	str	r0, [r7, #68]	; 0x44

    // evaluate width field
    printf_size_t width = 0U;
 8002246:	2300      	movs	r3, #0
 8002248:	643b      	str	r3, [r7, #64]	; 0x40
    if (is_digit_(*format)) {
 800224a:	68bb      	ldr	r3, [r7, #8]
 800224c:	781b      	ldrb	r3, [r3, #0]
 800224e:	4618      	mov	r0, r3
 8002250:	f7ff fa74 	bl	800173c <is_digit_>
 8002254:	4603      	mov	r3, r0
 8002256:	2b00      	cmp	r3, #0
 8002258:	d006      	beq.n	8002268 <format_string_loop+0x68>
      width = (printf_size_t) atou_(&format);
 800225a:	f107 0308 	add.w	r3, r7, #8
 800225e:	4618      	mov	r0, r3
 8002260:	f7ff fa83 	bl	800176a <atou_>
 8002264:	6438      	str	r0, [r7, #64]	; 0x40
 8002266:	e01d      	b.n	80022a4 <format_string_loop+0xa4>
    }
    else if (*format == '*') {
 8002268:	68bb      	ldr	r3, [r7, #8]
 800226a:	781b      	ldrb	r3, [r3, #0]
 800226c:	2b2a      	cmp	r3, #42	; 0x2a
 800226e:	d119      	bne.n	80022a4 <format_string_loop+0xa4>
      const int w = va_arg(args, int);
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	1d1a      	adds	r2, r3, #4
 8002274:	607a      	str	r2, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	62bb      	str	r3, [r7, #40]	; 0x28
      if (w < 0) {
 800227a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800227c:	2b00      	cmp	r3, #0
 800227e:	da07      	bge.n	8002290 <format_string_loop+0x90>
        flags |= FLAGS_LEFT;    // reverse padding
 8002280:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002282:	f043 0302 	orr.w	r3, r3, #2
 8002286:	647b      	str	r3, [r7, #68]	; 0x44
        width = (printf_size_t)-w;
 8002288:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800228a:	425b      	negs	r3, r3
 800228c:	643b      	str	r3, [r7, #64]	; 0x40
 800228e:	e001      	b.n	8002294 <format_string_loop+0x94>
      }
      else {
        width = (printf_size_t)w;
 8002290:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002292:	643b      	str	r3, [r7, #64]	; 0x40
      }
      ADVANCE_IN_FORMAT_STRING(format);
 8002294:	68bb      	ldr	r3, [r7, #8]
 8002296:	3301      	adds	r3, #1
 8002298:	60bb      	str	r3, [r7, #8]
 800229a:	68bb      	ldr	r3, [r7, #8]
 800229c:	781b      	ldrb	r3, [r3, #0]
 800229e:	2b00      	cmp	r3, #0
 80022a0:	f000 835f 	beq.w	8002962 <format_string_loop+0x762>
    }

    // evaluate precision field
    printf_size_t precision = 0U;
 80022a4:	2300      	movs	r3, #0
 80022a6:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (*format == '.') {
 80022a8:	68bb      	ldr	r3, [r7, #8]
 80022aa:	781b      	ldrb	r3, [r3, #0]
 80022ac:	2b2e      	cmp	r3, #46	; 0x2e
 80022ae:	d12f      	bne.n	8002310 <format_string_loop+0x110>
      flags |= FLAGS_PRECISION;
 80022b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80022b2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80022b6:	647b      	str	r3, [r7, #68]	; 0x44
      ADVANCE_IN_FORMAT_STRING(format);
 80022b8:	68bb      	ldr	r3, [r7, #8]
 80022ba:	3301      	adds	r3, #1
 80022bc:	60bb      	str	r3, [r7, #8]
 80022be:	68bb      	ldr	r3, [r7, #8]
 80022c0:	781b      	ldrb	r3, [r3, #0]
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	f000 834f 	beq.w	8002966 <format_string_loop+0x766>
      if (is_digit_(*format)) {
 80022c8:	68bb      	ldr	r3, [r7, #8]
 80022ca:	781b      	ldrb	r3, [r3, #0]
 80022cc:	4618      	mov	r0, r3
 80022ce:	f7ff fa35 	bl	800173c <is_digit_>
 80022d2:	4603      	mov	r3, r0
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d006      	beq.n	80022e6 <format_string_loop+0xe6>
        precision = (printf_size_t) atou_(&format);
 80022d8:	f107 0308 	add.w	r3, r7, #8
 80022dc:	4618      	mov	r0, r3
 80022de:	f7ff fa44 	bl	800176a <atou_>
 80022e2:	63f8      	str	r0, [r7, #60]	; 0x3c
 80022e4:	e014      	b.n	8002310 <format_string_loop+0x110>
      }
      else if (*format == '*') {
 80022e6:	68bb      	ldr	r3, [r7, #8]
 80022e8:	781b      	ldrb	r3, [r3, #0]
 80022ea:	2b2a      	cmp	r3, #42	; 0x2a
 80022ec:	d110      	bne.n	8002310 <format_string_loop+0x110>
        const int precision_ = va_arg(args, int);
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	1d1a      	adds	r2, r3, #4
 80022f2:	607a      	str	r2, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	627b      	str	r3, [r7, #36]	; 0x24
        precision = precision_ > 0 ? (printf_size_t) precision_ : 0U;
 80022f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022fa:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80022fe:	63fb      	str	r3, [r7, #60]	; 0x3c
        ADVANCE_IN_FORMAT_STRING(format);
 8002300:	68bb      	ldr	r3, [r7, #8]
 8002302:	3301      	adds	r3, #1
 8002304:	60bb      	str	r3, [r7, #8]
 8002306:	68bb      	ldr	r3, [r7, #8]
 8002308:	781b      	ldrb	r3, [r3, #0]
 800230a:	2b00      	cmp	r3, #0
 800230c:	f000 832d 	beq.w	800296a <format_string_loop+0x76a>
      }
    }

    // evaluate length field
    switch (*format) {
 8002310:	68bb      	ldr	r3, [r7, #8]
 8002312:	781b      	ldrb	r3, [r3, #0]
 8002314:	3b68      	subs	r3, #104	; 0x68
 8002316:	2b12      	cmp	r3, #18
 8002318:	f200 8087 	bhi.w	800242a <format_string_loop+0x22a>
 800231c:	a201      	add	r2, pc, #4	; (adr r2, 8002324 <format_string_loop+0x124>)
 800231e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002322:	bf00      	nop
 8002324:	080023a9 	.word	0x080023a9
 8002328:	0800242b 	.word	0x0800242b
 800232c:	080023f9 	.word	0x080023f9
 8002330:	0800242b 	.word	0x0800242b
 8002334:	08002371 	.word	0x08002371
 8002338:	0800242b 	.word	0x0800242b
 800233c:	0800242b 	.word	0x0800242b
 8002340:	0800242b 	.word	0x0800242b
 8002344:	0800242b 	.word	0x0800242b
 8002348:	0800242b 	.word	0x0800242b
 800234c:	0800242b 	.word	0x0800242b
 8002350:	0800242b 	.word	0x0800242b
 8002354:	080023e1 	.word	0x080023e1
 8002358:	0800242b 	.word	0x0800242b
 800235c:	0800242b 	.word	0x0800242b
 8002360:	0800242b 	.word	0x0800242b
 8002364:	0800242b 	.word	0x0800242b
 8002368:	0800242b 	.word	0x0800242b
 800236c:	08002411 	.word	0x08002411
        }
        break;
      }
#endif
      case 'l' :
        flags |= FLAGS_LONG;
 8002370:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002372:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002376:	647b      	str	r3, [r7, #68]	; 0x44
        ADVANCE_IN_FORMAT_STRING(format);
 8002378:	68bb      	ldr	r3, [r7, #8]
 800237a:	3301      	adds	r3, #1
 800237c:	60bb      	str	r3, [r7, #8]
 800237e:	68bb      	ldr	r3, [r7, #8]
 8002380:	781b      	ldrb	r3, [r3, #0]
 8002382:	2b00      	cmp	r3, #0
 8002384:	f000 82f3 	beq.w	800296e <format_string_loop+0x76e>
        if (*format == 'l') {
 8002388:	68bb      	ldr	r3, [r7, #8]
 800238a:	781b      	ldrb	r3, [r3, #0]
 800238c:	2b6c      	cmp	r3, #108	; 0x6c
 800238e:	d14e      	bne.n	800242e <format_string_loop+0x22e>
          flags |= FLAGS_LONG_LONG;
 8002390:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002392:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002396:	647b      	str	r3, [r7, #68]	; 0x44
          ADVANCE_IN_FORMAT_STRING(format);
 8002398:	68bb      	ldr	r3, [r7, #8]
 800239a:	3301      	adds	r3, #1
 800239c:	60bb      	str	r3, [r7, #8]
 800239e:	68bb      	ldr	r3, [r7, #8]
 80023a0:	781b      	ldrb	r3, [r3, #0]
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d143      	bne.n	800242e <format_string_loop+0x22e>
 80023a6:	e2e7      	b.n	8002978 <format_string_loop+0x778>
        }
        break;
      case 'h' :
        flags |= FLAGS_SHORT;
 80023a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80023aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80023ae:	647b      	str	r3, [r7, #68]	; 0x44
        ADVANCE_IN_FORMAT_STRING(format);
 80023b0:	68bb      	ldr	r3, [r7, #8]
 80023b2:	3301      	adds	r3, #1
 80023b4:	60bb      	str	r3, [r7, #8]
 80023b6:	68bb      	ldr	r3, [r7, #8]
 80023b8:	781b      	ldrb	r3, [r3, #0]
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	f000 82d9 	beq.w	8002972 <format_string_loop+0x772>
        if (*format == 'h') {
 80023c0:	68bb      	ldr	r3, [r7, #8]
 80023c2:	781b      	ldrb	r3, [r3, #0]
 80023c4:	2b68      	cmp	r3, #104	; 0x68
 80023c6:	d134      	bne.n	8002432 <format_string_loop+0x232>
          flags |= FLAGS_CHAR;
 80023c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80023ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80023ce:	647b      	str	r3, [r7, #68]	; 0x44
          ADVANCE_IN_FORMAT_STRING(format);
 80023d0:	68bb      	ldr	r3, [r7, #8]
 80023d2:	3301      	adds	r3, #1
 80023d4:	60bb      	str	r3, [r7, #8]
 80023d6:	68bb      	ldr	r3, [r7, #8]
 80023d8:	781b      	ldrb	r3, [r3, #0]
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d129      	bne.n	8002432 <format_string_loop+0x232>
 80023de:	e2cb      	b.n	8002978 <format_string_loop+0x778>
        }
        break;
      case 't' :
        flags |= (sizeof(ptrdiff_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 80023e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80023e2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80023e6:	647b      	str	r3, [r7, #68]	; 0x44
        ADVANCE_IN_FORMAT_STRING(format);
 80023e8:	68bb      	ldr	r3, [r7, #8]
 80023ea:	3301      	adds	r3, #1
 80023ec:	60bb      	str	r3, [r7, #8]
 80023ee:	68bb      	ldr	r3, [r7, #8]
 80023f0:	781b      	ldrb	r3, [r3, #0]
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d11f      	bne.n	8002436 <format_string_loop+0x236>
 80023f6:	e2bf      	b.n	8002978 <format_string_loop+0x778>
        break;
      case 'j' :
        flags |= (sizeof(intmax_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 80023f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80023fa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80023fe:	647b      	str	r3, [r7, #68]	; 0x44
        ADVANCE_IN_FORMAT_STRING(format);
 8002400:	68bb      	ldr	r3, [r7, #8]
 8002402:	3301      	adds	r3, #1
 8002404:	60bb      	str	r3, [r7, #8]
 8002406:	68bb      	ldr	r3, [r7, #8]
 8002408:	781b      	ldrb	r3, [r3, #0]
 800240a:	2b00      	cmp	r3, #0
 800240c:	d115      	bne.n	800243a <format_string_loop+0x23a>
 800240e:	e2b3      	b.n	8002978 <format_string_loop+0x778>
        break;
      case 'z' :
        flags |= (sizeof(size_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 8002410:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002412:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002416:	647b      	str	r3, [r7, #68]	; 0x44
        ADVANCE_IN_FORMAT_STRING(format);
 8002418:	68bb      	ldr	r3, [r7, #8]
 800241a:	3301      	adds	r3, #1
 800241c:	60bb      	str	r3, [r7, #8]
 800241e:	68bb      	ldr	r3, [r7, #8]
 8002420:	781b      	ldrb	r3, [r3, #0]
 8002422:	2b00      	cmp	r3, #0
 8002424:	f000 82a7 	beq.w	8002976 <format_string_loop+0x776>
        break;
 8002428:	e008      	b.n	800243c <format_string_loop+0x23c>
      default:
        break;
 800242a:	bf00      	nop
 800242c:	e006      	b.n	800243c <format_string_loop+0x23c>
        break;
 800242e:	bf00      	nop
 8002430:	e004      	b.n	800243c <format_string_loop+0x23c>
        break;
 8002432:	bf00      	nop
 8002434:	e002      	b.n	800243c <format_string_loop+0x23c>
        break;
 8002436:	bf00      	nop
 8002438:	e000      	b.n	800243c <format_string_loop+0x23c>
        break;
 800243a:	bf00      	nop
    }

    // evaluate specifier
    switch (*format) {
 800243c:	68bb      	ldr	r3, [r7, #8]
 800243e:	781b      	ldrb	r3, [r3, #0]
 8002440:	3b25      	subs	r3, #37	; 0x25
 8002442:	2b53      	cmp	r3, #83	; 0x53
 8002444:	f200 827b 	bhi.w	800293e <format_string_loop+0x73e>
 8002448:	a201      	add	r2, pc, #4	; (adr r2, 8002450 <format_string_loop+0x250>)
 800244a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800244e:	bf00      	nop
 8002450:	0800292f 	.word	0x0800292f
 8002454:	0800293f 	.word	0x0800293f
 8002458:	0800293f 	.word	0x0800293f
 800245c:	0800293f 	.word	0x0800293f
 8002460:	0800293f 	.word	0x0800293f
 8002464:	0800293f 	.word	0x0800293f
 8002468:	0800293f 	.word	0x0800293f
 800246c:	0800293f 	.word	0x0800293f
 8002470:	0800293f 	.word	0x0800293f
 8002474:	0800293f 	.word	0x0800293f
 8002478:	0800293f 	.word	0x0800293f
 800247c:	0800293f 	.word	0x0800293f
 8002480:	0800293f 	.word	0x0800293f
 8002484:	0800293f 	.word	0x0800293f
 8002488:	0800293f 	.word	0x0800293f
 800248c:	0800293f 	.word	0x0800293f
 8002490:	0800293f 	.word	0x0800293f
 8002494:	0800293f 	.word	0x0800293f
 8002498:	0800293f 	.word	0x0800293f
 800249c:	0800293f 	.word	0x0800293f
 80024a0:	0800293f 	.word	0x0800293f
 80024a4:	0800293f 	.word	0x0800293f
 80024a8:	0800293f 	.word	0x0800293f
 80024ac:	0800293f 	.word	0x0800293f
 80024b0:	0800293f 	.word	0x0800293f
 80024b4:	0800293f 	.word	0x0800293f
 80024b8:	0800293f 	.word	0x0800293f
 80024bc:	0800293f 	.word	0x0800293f
 80024c0:	0800293f 	.word	0x0800293f
 80024c4:	0800293f 	.word	0x0800293f
 80024c8:	0800293f 	.word	0x0800293f
 80024cc:	0800293f 	.word	0x0800293f
 80024d0:	0800293f 	.word	0x0800293f
 80024d4:	08002775 	.word	0x08002775
 80024d8:	0800293f 	.word	0x0800293f
 80024dc:	0800293f 	.word	0x0800293f
 80024e0:	0800293f 	.word	0x0800293f
 80024e4:	0800293f 	.word	0x0800293f
 80024e8:	0800293f 	.word	0x0800293f
 80024ec:	0800293f 	.word	0x0800293f
 80024f0:	0800293f 	.word	0x0800293f
 80024f4:	0800293f 	.word	0x0800293f
 80024f8:	0800293f 	.word	0x0800293f
 80024fc:	0800293f 	.word	0x0800293f
 8002500:	0800293f 	.word	0x0800293f
 8002504:	0800293f 	.word	0x0800293f
 8002508:	0800293f 	.word	0x0800293f
 800250c:	0800293f 	.word	0x0800293f
 8002510:	0800293f 	.word	0x0800293f
 8002514:	0800293f 	.word	0x0800293f
 8002518:	0800293f 	.word	0x0800293f
 800251c:	080025a1 	.word	0x080025a1
 8002520:	0800293f 	.word	0x0800293f
 8002524:	0800293f 	.word	0x0800293f
 8002528:	0800293f 	.word	0x0800293f
 800252c:	0800293f 	.word	0x0800293f
 8002530:	0800293f 	.word	0x0800293f
 8002534:	0800293f 	.word	0x0800293f
 8002538:	0800293f 	.word	0x0800293f
 800253c:	0800293f 	.word	0x0800293f
 8002540:	0800293f 	.word	0x0800293f
 8002544:	080025a1 	.word	0x080025a1
 8002548:	080027b7 	.word	0x080027b7
 800254c:	080025a1 	.word	0x080025a1
 8002550:	0800293f 	.word	0x0800293f
 8002554:	08002775 	.word	0x08002775
 8002558:	0800293f 	.word	0x0800293f
 800255c:	0800293f 	.word	0x0800293f
 8002560:	080025a1 	.word	0x080025a1
 8002564:	0800293f 	.word	0x0800293f
 8002568:	0800293f 	.word	0x0800293f
 800256c:	0800293f 	.word	0x0800293f
 8002570:	0800293f 	.word	0x0800293f
 8002574:	0800293f 	.word	0x0800293f
 8002578:	080025a1 	.word	0x080025a1
 800257c:	080028dd 	.word	0x080028dd
 8002580:	0800293f 	.word	0x0800293f
 8002584:	0800293f 	.word	0x0800293f
 8002588:	08002815 	.word	0x08002815
 800258c:	0800293f 	.word	0x0800293f
 8002590:	080025a1 	.word	0x080025a1
 8002594:	0800293f 	.word	0x0800293f
 8002598:	0800293f 	.word	0x0800293f
 800259c:	080025a1 	.word	0x080025a1
      case 'x' :
      case 'X' :
      case 'o' :
      case 'b' : {

        if (*format == 'd' || *format == 'i') {
 80025a0:	68bb      	ldr	r3, [r7, #8]
 80025a2:	781b      	ldrb	r3, [r3, #0]
 80025a4:	2b64      	cmp	r3, #100	; 0x64
 80025a6:	d003      	beq.n	80025b0 <format_string_loop+0x3b0>
 80025a8:	68bb      	ldr	r3, [r7, #8]
 80025aa:	781b      	ldrb	r3, [r3, #0]
 80025ac:	2b69      	cmp	r3, #105	; 0x69
 80025ae:	d103      	bne.n	80025b8 <format_string_loop+0x3b8>
          flags |= FLAGS_SIGNED;
 80025b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80025b2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80025b6:	647b      	str	r3, [r7, #68]	; 0x44
        }

        numeric_base_t base;
        if (*format == 'x' || *format == 'X') {
 80025b8:	68bb      	ldr	r3, [r7, #8]
 80025ba:	781b      	ldrb	r3, [r3, #0]
 80025bc:	2b78      	cmp	r3, #120	; 0x78
 80025be:	d003      	beq.n	80025c8 <format_string_loop+0x3c8>
 80025c0:	68bb      	ldr	r3, [r7, #8]
 80025c2:	781b      	ldrb	r3, [r3, #0]
 80025c4:	2b58      	cmp	r3, #88	; 0x58
 80025c6:	d103      	bne.n	80025d0 <format_string_loop+0x3d0>
          base = BASE_HEX;
 80025c8:	2310      	movs	r3, #16
 80025ca:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80025ce:	e016      	b.n	80025fe <format_string_loop+0x3fe>
        }
        else if (*format == 'o') {
 80025d0:	68bb      	ldr	r3, [r7, #8]
 80025d2:	781b      	ldrb	r3, [r3, #0]
 80025d4:	2b6f      	cmp	r3, #111	; 0x6f
 80025d6:	d103      	bne.n	80025e0 <format_string_loop+0x3e0>
          base =  BASE_OCTAL;
 80025d8:	2308      	movs	r3, #8
 80025da:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80025de:	e00e      	b.n	80025fe <format_string_loop+0x3fe>
        }
        else if (*format == 'b') {
 80025e0:	68bb      	ldr	r3, [r7, #8]
 80025e2:	781b      	ldrb	r3, [r3, #0]
 80025e4:	2b62      	cmp	r3, #98	; 0x62
 80025e6:	d103      	bne.n	80025f0 <format_string_loop+0x3f0>
          base =  BASE_BINARY;
 80025e8:	2302      	movs	r3, #2
 80025ea:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80025ee:	e006      	b.n	80025fe <format_string_loop+0x3fe>
        }
        else {
          base = BASE_DECIMAL;
 80025f0:	230a      	movs	r3, #10
 80025f2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
          flags &= ~FLAGS_HASH; // decimal integers have no alternative presentation
 80025f6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80025f8:	f023 0310 	bic.w	r3, r3, #16
 80025fc:	647b      	str	r3, [r7, #68]	; 0x44
        }

        if (*format == 'X') {
 80025fe:	68bb      	ldr	r3, [r7, #8]
 8002600:	781b      	ldrb	r3, [r3, #0]
 8002602:	2b58      	cmp	r3, #88	; 0x58
 8002604:	d103      	bne.n	800260e <format_string_loop+0x40e>
          flags |= FLAGS_UPPERCASE;
 8002606:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002608:	f043 0320 	orr.w	r3, r3, #32
 800260c:	647b      	str	r3, [r7, #68]	; 0x44
        }

        format++;
 800260e:	68bb      	ldr	r3, [r7, #8]
 8002610:	3301      	adds	r3, #1
 8002612:	60bb      	str	r3, [r7, #8]
        // ignore '0' flag when precision is given
        if (flags & FLAGS_PRECISION) {
 8002614:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002616:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800261a:	2b00      	cmp	r3, #0
 800261c:	d003      	beq.n	8002626 <format_string_loop+0x426>
          flags &= ~FLAGS_ZEROPAD;
 800261e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002620:	f023 0301 	bic.w	r3, r3, #1
 8002624:	647b      	str	r3, [r7, #68]	; 0x44
        }

        if (flags & FLAGS_SIGNED) {
 8002626:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002628:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800262c:	2b00      	cmp	r3, #0
 800262e:	d056      	beq.n	80026de <format_string_loop+0x4de>
          // A signed specifier: d, i or possibly I + bit size if enabled

          if (flags & FLAGS_LONG_LONG) {
 8002630:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002632:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002636:	2b00      	cmp	r3, #0
 8002638:	f040 818b 	bne.w	8002952 <format_string_loop+0x752>
#if PRINTF_SUPPORT_LONG_LONG
            const long long value = va_arg(args, long long);
            print_integer(output, ABS_FOR_PRINTING(value), value < 0, base, precision, width, flags);
#endif
          }
          else if (flags & FLAGS_LONG) {
 800263c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800263e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002642:	2b00      	cmp	r3, #0
 8002644:	d01a      	beq.n	800267c <format_string_loop+0x47c>
            const long value = va_arg(args, long);
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	1d1a      	adds	r2, r3, #4
 800264a:	607a      	str	r2, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	617b      	str	r3, [r7, #20]
            print_integer(output, ABS_FOR_PRINTING(value), value < 0, base, precision, width, flags);
 8002650:	697b      	ldr	r3, [r7, #20]
 8002652:	2b00      	cmp	r3, #0
 8002654:	bfb8      	it	lt
 8002656:	425b      	neglt	r3, r3
 8002658:	4618      	mov	r0, r3
 800265a:	697b      	ldr	r3, [r7, #20]
 800265c:	0fdb      	lsrs	r3, r3, #31
 800265e:	b2da      	uxtb	r2, r3
 8002660:	f897 103b 	ldrb.w	r1, [r7, #59]	; 0x3b
 8002664:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002666:	9302      	str	r3, [sp, #8]
 8002668:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800266a:	9301      	str	r3, [sp, #4]
 800266c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800266e:	9300      	str	r3, [sp, #0]
 8002670:	460b      	mov	r3, r1
 8002672:	4601      	mov	r1, r0
 8002674:	68f8      	ldr	r0, [r7, #12]
 8002676:	f7ff f9d4 	bl	8001a22 <print_integer>
 800267a:	e16a      	b.n	8002952 <format_string_loop+0x752>
            // We never try to interpret the argument as something potentially-smaller than int,
            // due to integer promotion rules: Even if the user passed a short int, short unsigned
            // etc. - these will come in after promotion, as int's (or unsigned for the case of
            // short unsigned when it has the same size as int)
            const int value =
              (flags & FLAGS_CHAR) ? (signed char) va_arg(args, int) :
 800267c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800267e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002682:	2b00      	cmp	r3, #0
 8002684:	d005      	beq.n	8002692 <format_string_loop+0x492>
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	1d1a      	adds	r2, r3, #4
 800268a:	607a      	str	r2, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	b25b      	sxtb	r3, r3
 8002690:	e00e      	b.n	80026b0 <format_string_loop+0x4b0>
              (flags & FLAGS_SHORT) ? (short int) va_arg(args, int) :
 8002692:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002694:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002698:	2b00      	cmp	r3, #0
 800269a:	d005      	beq.n	80026a8 <format_string_loop+0x4a8>
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	1d1a      	adds	r2, r3, #4
 80026a0:	607a      	str	r2, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	b21b      	sxth	r3, r3
 80026a6:	e003      	b.n	80026b0 <format_string_loop+0x4b0>
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	1d1a      	adds	r2, r3, #4
 80026ac:	607a      	str	r2, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
            const int value =
 80026b0:	61bb      	str	r3, [r7, #24]
              va_arg(args, int);
            print_integer(output, ABS_FOR_PRINTING(value), value < 0, base, precision, width, flags);
 80026b2:	69bb      	ldr	r3, [r7, #24]
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	bfb8      	it	lt
 80026b8:	425b      	neglt	r3, r3
 80026ba:	4618      	mov	r0, r3
 80026bc:	69bb      	ldr	r3, [r7, #24]
 80026be:	0fdb      	lsrs	r3, r3, #31
 80026c0:	b2da      	uxtb	r2, r3
 80026c2:	f897 103b 	ldrb.w	r1, [r7, #59]	; 0x3b
 80026c6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80026c8:	9302      	str	r3, [sp, #8]
 80026ca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80026cc:	9301      	str	r3, [sp, #4]
 80026ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80026d0:	9300      	str	r3, [sp, #0]
 80026d2:	460b      	mov	r3, r1
 80026d4:	4601      	mov	r1, r0
 80026d6:	68f8      	ldr	r0, [r7, #12]
 80026d8:	f7ff f9a3 	bl	8001a22 <print_integer>
 80026dc:	e139      	b.n	8002952 <format_string_loop+0x752>
          }
        }
        else {
          // An unsigned specifier: u, x, X, o, b

          flags &= ~(FLAGS_PLUS | FLAGS_SPACE);
 80026de:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80026e0:	f023 030c 	bic.w	r3, r3, #12
 80026e4:	647b      	str	r3, [r7, #68]	; 0x44

          if (flags & FLAGS_LONG_LONG) {
 80026e6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80026e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	f040 8130 	bne.w	8002952 <format_string_loop+0x752>
#if PRINTF_SUPPORT_LONG_LONG
            print_integer(output, (printf_unsigned_value_t) va_arg(args, unsigned long long), false, base, precision, width, flags);
#endif
          }
          else if (flags & FLAGS_LONG) {
 80026f2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80026f4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d011      	beq.n	8002720 <format_string_loop+0x520>
            print_integer(output, (printf_unsigned_value_t) va_arg(args, unsigned long), false, base, precision, width, flags);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	1d1a      	adds	r2, r3, #4
 8002700:	607a      	str	r2, [r7, #4]
 8002702:	6819      	ldr	r1, [r3, #0]
 8002704:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 8002708:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800270a:	9302      	str	r3, [sp, #8]
 800270c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800270e:	9301      	str	r3, [sp, #4]
 8002710:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002712:	9300      	str	r3, [sp, #0]
 8002714:	4613      	mov	r3, r2
 8002716:	2200      	movs	r2, #0
 8002718:	68f8      	ldr	r0, [r7, #12]
 800271a:	f7ff f982 	bl	8001a22 <print_integer>
 800271e:	e118      	b.n	8002952 <format_string_loop+0x752>
          }
          else {
            const unsigned int value =
              (flags & FLAGS_CHAR) ? (unsigned char)va_arg(args, unsigned int) :
 8002720:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002722:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002726:	2b00      	cmp	r3, #0
 8002728:	d005      	beq.n	8002736 <format_string_loop+0x536>
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	1d1a      	adds	r2, r3, #4
 800272e:	607a      	str	r2, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	b2db      	uxtb	r3, r3
 8002734:	e00e      	b.n	8002754 <format_string_loop+0x554>
              (flags & FLAGS_SHORT) ? (unsigned short int)va_arg(args, unsigned int) :
 8002736:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002738:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800273c:	2b00      	cmp	r3, #0
 800273e:	d005      	beq.n	800274c <format_string_loop+0x54c>
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	1d1a      	adds	r2, r3, #4
 8002744:	607a      	str	r2, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	b29b      	uxth	r3, r3
 800274a:	e003      	b.n	8002754 <format_string_loop+0x554>
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	1d1a      	adds	r2, r3, #4
 8002750:	607a      	str	r2, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
            const unsigned int value =
 8002754:	61fb      	str	r3, [r7, #28]
              va_arg(args, unsigned int);
            print_integer(output, (printf_unsigned_value_t) value, false, base, precision, width, flags);
 8002756:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 800275a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800275c:	9302      	str	r3, [sp, #8]
 800275e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002760:	9301      	str	r3, [sp, #4]
 8002762:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002764:	9300      	str	r3, [sp, #0]
 8002766:	4613      	mov	r3, r2
 8002768:	2200      	movs	r2, #0
 800276a:	69f9      	ldr	r1, [r7, #28]
 800276c:	68f8      	ldr	r0, [r7, #12]
 800276e:	f7ff f958 	bl	8001a22 <print_integer>
          }
        }
        break;
 8002772:	e0ee      	b.n	8002952 <format_string_loop+0x752>
      }
#if PRINTF_SUPPORT_DECIMAL_SPECIFIERS
      case 'f' :
      case 'F' :
        if (*format == 'F') flags |= FLAGS_UPPERCASE;
 8002774:	68bb      	ldr	r3, [r7, #8]
 8002776:	781b      	ldrb	r3, [r3, #0]
 8002778:	2b46      	cmp	r3, #70	; 0x46
 800277a:	d103      	bne.n	8002784 <format_string_loop+0x584>
 800277c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800277e:	f043 0320 	orr.w	r3, r3, #32
 8002782:	647b      	str	r3, [r7, #68]	; 0x44
        print_floating_point(output, va_arg(args, double), precision, width, flags, PRINTF_PREFER_DECIMAL);
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	3307      	adds	r3, #7
 8002788:	f023 0307 	bic.w	r3, r3, #7
 800278c:	f103 0208 	add.w	r2, r3, #8
 8002790:	607a      	str	r2, [r7, #4]
 8002792:	ed93 7b00 	vldr	d7, [r3]
 8002796:	2300      	movs	r3, #0
 8002798:	9300      	str	r3, [sp, #0]
 800279a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800279c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800279e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80027a0:	eeb0 0a47 	vmov.f32	s0, s14
 80027a4:	eef0 0a67 	vmov.f32	s1, s15
 80027a8:	68f8      	ldr	r0, [r7, #12]
 80027aa:	f7ff fc11 	bl	8001fd0 <print_floating_point>
        format++;
 80027ae:	68bb      	ldr	r3, [r7, #8]
 80027b0:	3301      	adds	r3, #1
 80027b2:	60bb      	str	r3, [r7, #8]
        break;
 80027b4:	e0cd      	b.n	8002952 <format_string_loop+0x752>
        print_floating_point(output, va_arg(args, double), precision, width, flags, PRINTF_PREFER_EXPONENTIAL);
        format++;
        break;
#endif  // PRINTF_SUPPORT_EXPONENTIAL_SPECIFIERS
      case 'c' : {
        printf_size_t l = 1U;
 80027b6:	2301      	movs	r3, #1
 80027b8:	637b      	str	r3, [r7, #52]	; 0x34
        // pre padding
        if (!(flags & FLAGS_LEFT)) {
 80027ba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80027bc:	f003 0302 	and.w	r3, r3, #2
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d10a      	bne.n	80027da <format_string_loop+0x5da>
          while (l++ < width) {
 80027c4:	e003      	b.n	80027ce <format_string_loop+0x5ce>
            putchar_via_gadget(output, ' ');
 80027c6:	2120      	movs	r1, #32
 80027c8:	68f8      	ldr	r0, [r7, #12]
 80027ca:	f7fe ff05 	bl	80015d8 <putchar_via_gadget>
          while (l++ < width) {
 80027ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80027d0:	1c5a      	adds	r2, r3, #1
 80027d2:	637a      	str	r2, [r7, #52]	; 0x34
 80027d4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80027d6:	429a      	cmp	r2, r3
 80027d8:	d8f5      	bhi.n	80027c6 <format_string_loop+0x5c6>
          }
        }
        // char output
        putchar_via_gadget(output, (char) va_arg(args, int) );
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	1d1a      	adds	r2, r3, #4
 80027de:	607a      	str	r2, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	b2db      	uxtb	r3, r3
 80027e4:	4619      	mov	r1, r3
 80027e6:	68f8      	ldr	r0, [r7, #12]
 80027e8:	f7fe fef6 	bl	80015d8 <putchar_via_gadget>
        // post padding
        if (flags & FLAGS_LEFT) {
 80027ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80027ee:	f003 0302 	and.w	r3, r3, #2
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d00a      	beq.n	800280c <format_string_loop+0x60c>
          while (l++ < width) {
 80027f6:	e003      	b.n	8002800 <format_string_loop+0x600>
            putchar_via_gadget(output, ' ');
 80027f8:	2120      	movs	r1, #32
 80027fa:	68f8      	ldr	r0, [r7, #12]
 80027fc:	f7fe feec 	bl	80015d8 <putchar_via_gadget>
          while (l++ < width) {
 8002800:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002802:	1c5a      	adds	r2, r3, #1
 8002804:	637a      	str	r2, [r7, #52]	; 0x34
 8002806:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002808:	429a      	cmp	r2, r3
 800280a:	d8f5      	bhi.n	80027f8 <format_string_loop+0x5f8>
          }
        }
        format++;
 800280c:	68bb      	ldr	r3, [r7, #8]
 800280e:	3301      	adds	r3, #1
 8002810:	60bb      	str	r3, [r7, #8]
        break;
 8002812:	e09e      	b.n	8002952 <format_string_loop+0x752>
      }

      case 's' : {
        const char* p = va_arg(args, char*);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	1d1a      	adds	r2, r3, #4
 8002818:	607a      	str	r2, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	633b      	str	r3, [r7, #48]	; 0x30
        if (p == NULL) {
 800281e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002820:	2b00      	cmp	r3, #0
 8002822:	d108      	bne.n	8002836 <format_string_loop+0x636>
          out_rev_(output, ")llun(", 6, width, flags);
 8002824:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002826:	9300      	str	r3, [sp, #0]
 8002828:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800282a:	2206      	movs	r2, #6
 800282c:	4954      	ldr	r1, [pc, #336]	; (8002980 <format_string_loop+0x780>)
 800282e:	68f8      	ldr	r0, [r7, #12]
 8002830:	f7fe ffbf 	bl	80017b2 <out_rev_>
 8002834:	e04e      	b.n	80028d4 <format_string_loop+0x6d4>
        }
        else {
          printf_size_t l = strnlen_s_(p, precision ? precision : PRINTF_MAX_POSSIBLE_BUFFER_SIZE);
 8002836:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002838:	2b00      	cmp	r3, #0
 800283a:	d001      	beq.n	8002840 <format_string_loop+0x640>
 800283c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800283e:	e001      	b.n	8002844 <format_string_loop+0x644>
 8002840:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8002844:	4619      	mov	r1, r3
 8002846:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002848:	f7fe ff5b 	bl	8001702 <strnlen_s_>
 800284c:	62f8      	str	r0, [r7, #44]	; 0x2c
          // pre padding
          if (flags & FLAGS_PRECISION) {
 800284e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002850:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002854:	2b00      	cmp	r3, #0
 8002856:	d005      	beq.n	8002864 <format_string_loop+0x664>
            l = (l < precision ? l : precision);
 8002858:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800285a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800285c:	4293      	cmp	r3, r2
 800285e:	bf28      	it	cs
 8002860:	4613      	movcs	r3, r2
 8002862:	62fb      	str	r3, [r7, #44]	; 0x2c
          }
          if (!(flags & FLAGS_LEFT)) {
 8002864:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002866:	f003 0302 	and.w	r3, r3, #2
 800286a:	2b00      	cmp	r3, #0
 800286c:	d116      	bne.n	800289c <format_string_loop+0x69c>
            while (l++ < width) {
 800286e:	e003      	b.n	8002878 <format_string_loop+0x678>
              putchar_via_gadget(output, ' ');
 8002870:	2120      	movs	r1, #32
 8002872:	68f8      	ldr	r0, [r7, #12]
 8002874:	f7fe feb0 	bl	80015d8 <putchar_via_gadget>
            while (l++ < width) {
 8002878:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800287a:	1c5a      	adds	r2, r3, #1
 800287c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800287e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002880:	429a      	cmp	r2, r3
 8002882:	d8f5      	bhi.n	8002870 <format_string_loop+0x670>
            }
          }
          // string output
          while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision)) {
 8002884:	e00a      	b.n	800289c <format_string_loop+0x69c>
            putchar_via_gadget(output, *(p++));
 8002886:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002888:	1c5a      	adds	r2, r3, #1
 800288a:	633a      	str	r2, [r7, #48]	; 0x30
 800288c:	781b      	ldrb	r3, [r3, #0]
 800288e:	4619      	mov	r1, r3
 8002890:	68f8      	ldr	r0, [r7, #12]
 8002892:	f7fe fea1 	bl	80015d8 <putchar_via_gadget>
            --precision;
 8002896:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002898:	3b01      	subs	r3, #1
 800289a:	63fb      	str	r3, [r7, #60]	; 0x3c
          while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision)) {
 800289c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800289e:	781b      	ldrb	r3, [r3, #0]
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d007      	beq.n	80028b4 <format_string_loop+0x6b4>
 80028a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80028a6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d0eb      	beq.n	8002886 <format_string_loop+0x686>
 80028ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d1e8      	bne.n	8002886 <format_string_loop+0x686>
          }
          // post padding
          if (flags & FLAGS_LEFT) {
 80028b4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80028b6:	f003 0302 	and.w	r3, r3, #2
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d00a      	beq.n	80028d4 <format_string_loop+0x6d4>
            while (l++ < width) {
 80028be:	e003      	b.n	80028c8 <format_string_loop+0x6c8>
              putchar_via_gadget(output, ' ');
 80028c0:	2120      	movs	r1, #32
 80028c2:	68f8      	ldr	r0, [r7, #12]
 80028c4:	f7fe fe88 	bl	80015d8 <putchar_via_gadget>
            while (l++ < width) {
 80028c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028ca:	1c5a      	adds	r2, r3, #1
 80028cc:	62fa      	str	r2, [r7, #44]	; 0x2c
 80028ce:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80028d0:	429a      	cmp	r2, r3
 80028d2:	d8f5      	bhi.n	80028c0 <format_string_loop+0x6c0>
            }
          }
        }
        format++;
 80028d4:	68bb      	ldr	r3, [r7, #8]
 80028d6:	3301      	adds	r3, #1
 80028d8:	60bb      	str	r3, [r7, #8]
        break;
 80028da:	e03a      	b.n	8002952 <format_string_loop+0x752>
      }

      case 'p' : {
        width = sizeof(void*) * 2U + 2; // 2 hex chars per byte + the "0x" prefix
 80028dc:	230a      	movs	r3, #10
 80028de:	643b      	str	r3, [r7, #64]	; 0x40
        flags |= FLAGS_ZEROPAD | FLAGS_POINTER;
 80028e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80028e2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80028e6:	f043 0301 	orr.w	r3, r3, #1
 80028ea:	647b      	str	r3, [r7, #68]	; 0x44
        uintptr_t value = (uintptr_t)va_arg(args, void*);
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	1d1a      	adds	r2, r3, #4
 80028f0:	607a      	str	r2, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	623b      	str	r3, [r7, #32]
        (value == (uintptr_t) NULL) ?
          out_rev_(output, ")lin(", 5, width, flags) :
 80028f6:	6a3b      	ldr	r3, [r7, #32]
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d108      	bne.n	800290e <format_string_loop+0x70e>
 80028fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80028fe:	9300      	str	r3, [sp, #0]
 8002900:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002902:	2205      	movs	r2, #5
 8002904:	491f      	ldr	r1, [pc, #124]	; (8002984 <format_string_loop+0x784>)
 8002906:	68f8      	ldr	r0, [r7, #12]
 8002908:	f7fe ff53 	bl	80017b2 <out_rev_>
 800290c:	e00b      	b.n	8002926 <format_string_loop+0x726>
          print_integer(output, (printf_unsigned_value_t) value, false, BASE_HEX, precision, width, flags);
 800290e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002910:	9302      	str	r3, [sp, #8]
 8002912:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002914:	9301      	str	r3, [sp, #4]
 8002916:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002918:	9300      	str	r3, [sp, #0]
 800291a:	2310      	movs	r3, #16
 800291c:	2200      	movs	r2, #0
 800291e:	6a39      	ldr	r1, [r7, #32]
 8002920:	68f8      	ldr	r0, [r7, #12]
 8002922:	f7ff f87e 	bl	8001a22 <print_integer>
        format++;
 8002926:	68bb      	ldr	r3, [r7, #8]
 8002928:	3301      	adds	r3, #1
 800292a:	60bb      	str	r3, [r7, #8]
        break;
 800292c:	e011      	b.n	8002952 <format_string_loop+0x752>
      }

      case '%' :
        putchar_via_gadget(output, '%');
 800292e:	2125      	movs	r1, #37	; 0x25
 8002930:	68f8      	ldr	r0, [r7, #12]
 8002932:	f7fe fe51 	bl	80015d8 <putchar_via_gadget>
        format++;
 8002936:	68bb      	ldr	r3, [r7, #8]
 8002938:	3301      	adds	r3, #1
 800293a:	60bb      	str	r3, [r7, #8]
        break;
 800293c:	e009      	b.n	8002952 <format_string_loop+0x752>
        break;
      }
#endif // PRINTF_SUPPORT_WRITEBACK_SPECIFIER

      default :
        putchar_via_gadget(output, *format);
 800293e:	68bb      	ldr	r3, [r7, #8]
 8002940:	781b      	ldrb	r3, [r3, #0]
 8002942:	4619      	mov	r1, r3
 8002944:	68f8      	ldr	r0, [r7, #12]
 8002946:	f7fe fe47 	bl	80015d8 <putchar_via_gadget>
        format++;
 800294a:	68bb      	ldr	r3, [r7, #8]
 800294c:	3301      	adds	r3, #1
 800294e:	60bb      	str	r3, [r7, #8]
        break;
 8002950:	bf00      	nop
  while (*format)
 8002952:	68bb      	ldr	r3, [r7, #8]
 8002954:	781b      	ldrb	r3, [r3, #0]
 8002956:	2b00      	cmp	r3, #0
 8002958:	f47f ac59 	bne.w	800220e <format_string_loop+0xe>
 800295c:	e00c      	b.n	8002978 <format_string_loop+0x778>
    ADVANCE_IN_FORMAT_STRING(format);
 800295e:	bf00      	nop
 8002960:	e00a      	b.n	8002978 <format_string_loop+0x778>
      ADVANCE_IN_FORMAT_STRING(format);
 8002962:	bf00      	nop
 8002964:	e008      	b.n	8002978 <format_string_loop+0x778>
      ADVANCE_IN_FORMAT_STRING(format);
 8002966:	bf00      	nop
 8002968:	e006      	b.n	8002978 <format_string_loop+0x778>
        ADVANCE_IN_FORMAT_STRING(format);
 800296a:	bf00      	nop
 800296c:	e004      	b.n	8002978 <format_string_loop+0x778>
        ADVANCE_IN_FORMAT_STRING(format);
 800296e:	bf00      	nop
 8002970:	e002      	b.n	8002978 <format_string_loop+0x778>
        ADVANCE_IN_FORMAT_STRING(format);
 8002972:	bf00      	nop
 8002974:	e000      	b.n	8002978 <format_string_loop+0x778>
        ADVANCE_IN_FORMAT_STRING(format);
 8002976:	bf00      	nop
    }
  }
}
 8002978:	3748      	adds	r7, #72	; 0x48
 800297a:	46bd      	mov	sp, r7
 800297c:	bd80      	pop	{r7, pc}
 800297e:	bf00      	nop
 8002980:	0800c274 	.word	0x0800c274
 8002984:	0800c27c 	.word	0x0800c27c

08002988 <vsnprintf_impl>:

// internal vsnprintf - used for implementing _all library functions
static int vsnprintf_impl(output_gadget_t* output, const char* format, va_list args)
{
 8002988:	b580      	push	{r7, lr}
 800298a:	b084      	sub	sp, #16
 800298c:	af00      	add	r7, sp, #0
 800298e:	60f8      	str	r0, [r7, #12]
 8002990:	60b9      	str	r1, [r7, #8]
 8002992:	607a      	str	r2, [r7, #4]
  // Note: The library only calls vsnprintf_impl() with output->pos being 0. However, it is
  // possible to call this function with a non-zero pos value for some "remedial printing".
  format_string_loop(output, format, args);
 8002994:	687a      	ldr	r2, [r7, #4]
 8002996:	68b9      	ldr	r1, [r7, #8]
 8002998:	68f8      	ldr	r0, [r7, #12]
 800299a:	f7ff fc31 	bl	8002200 <format_string_loop>

  // termination
  append_termination_with_gadget(output);
 800299e:	68f8      	ldr	r0, [r7, #12]
 80029a0:	f7fe fe42 	bl	8001628 <append_termination_with_gadget>

  // return written chars without terminating \0
  return (int)output->pos;
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	68db      	ldr	r3, [r3, #12]
}
 80029a8:	4618      	mov	r0, r3
 80029aa:	3710      	adds	r7, #16
 80029ac:	46bd      	mov	sp, r7
 80029ae:	bd80      	pop	{r7, pc}

080029b0 <vsnprintf_>:
  output_gadget_t gadget = extern_putchar_gadget();
  return vsnprintf_impl(&gadget, format, arg);
}

int vsnprintf_(char* s, size_t n, const char* format, va_list arg)
{
 80029b0:	b580      	push	{r7, lr}
 80029b2:	b08a      	sub	sp, #40	; 0x28
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	60f8      	str	r0, [r7, #12]
 80029b8:	60b9      	str	r1, [r7, #8]
 80029ba:	607a      	str	r2, [r7, #4]
 80029bc:	603b      	str	r3, [r7, #0]
  output_gadget_t gadget = buffer_gadget(s, n);
 80029be:	f107 0314 	add.w	r3, r7, #20
 80029c2:	68ba      	ldr	r2, [r7, #8]
 80029c4:	68f9      	ldr	r1, [r7, #12]
 80029c6:	4618      	mov	r0, r3
 80029c8:	f7fe fe75 	bl	80016b6 <buffer_gadget>
  return vsnprintf_impl(&gadget, format, arg);
 80029cc:	f107 0314 	add.w	r3, r7, #20
 80029d0:	683a      	ldr	r2, [r7, #0]
 80029d2:	6879      	ldr	r1, [r7, #4]
 80029d4:	4618      	mov	r0, r3
 80029d6:	f7ff ffd7 	bl	8002988 <vsnprintf_impl>
 80029da:	4603      	mov	r3, r0
}
 80029dc:	4618      	mov	r0, r3
 80029de:	3728      	adds	r7, #40	; 0x28
 80029e0:	46bd      	mov	sp, r7
 80029e2:	bd80      	pop	{r7, pc}

080029e4 <vsprintf_>:

int vsprintf_(char* s, const char* format, va_list arg)
{
 80029e4:	b580      	push	{r7, lr}
 80029e6:	b084      	sub	sp, #16
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	60f8      	str	r0, [r7, #12]
 80029ec:	60b9      	str	r1, [r7, #8]
 80029ee:	607a      	str	r2, [r7, #4]
  return vsnprintf_(s, PRINTF_MAX_POSSIBLE_BUFFER_SIZE, format, arg);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	68ba      	ldr	r2, [r7, #8]
 80029f4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80029f8:	68f8      	ldr	r0, [r7, #12]
 80029fa:	f7ff ffd9 	bl	80029b0 <vsnprintf_>
 80029fe:	4603      	mov	r3, r0
}
 8002a00:	4618      	mov	r0, r3
 8002a02:	3710      	adds	r7, #16
 8002a04:	46bd      	mov	sp, r7
 8002a06:	bd80      	pop	{r7, pc}

08002a08 <sprintf_>:
  va_end(args);
  return ret;
}

int sprintf_(char* s, const char* format, ...)
{
 8002a08:	b40e      	push	{r1, r2, r3}
 8002a0a:	b580      	push	{r7, lr}
 8002a0c:	b085      	sub	sp, #20
 8002a0e:	af00      	add	r7, sp, #0
 8002a10:	6078      	str	r0, [r7, #4]
  va_list args;
  va_start(args, format);
 8002a12:	f107 0320 	add.w	r3, r7, #32
 8002a16:	60bb      	str	r3, [r7, #8]
  const int ret = vsprintf_(s, format, args);
 8002a18:	68ba      	ldr	r2, [r7, #8]
 8002a1a:	69f9      	ldr	r1, [r7, #28]
 8002a1c:	6878      	ldr	r0, [r7, #4]
 8002a1e:	f7ff ffe1 	bl	80029e4 <vsprintf_>
 8002a22:	60f8      	str	r0, [r7, #12]
  va_end(args);
  return ret;
 8002a24:	68fb      	ldr	r3, [r7, #12]
}
 8002a26:	4618      	mov	r0, r3
 8002a28:	3714      	adds	r7, #20
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002a30:	b003      	add	sp, #12
 8002a32:	4770      	bx	lr

08002a34 <RetargetInit>:
#define STDOUT_FILENO 1
#define STDERR_FILENO 2

UART_HandleTypeDef *gHuart;

void RetargetInit(UART_HandleTypeDef *huart) {
 8002a34:	b580      	push	{r7, lr}
 8002a36:	b082      	sub	sp, #8
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	6078      	str	r0, [r7, #4]
  gHuart = huart;
 8002a3c:	4a07      	ldr	r2, [pc, #28]	; (8002a5c <RetargetInit+0x28>)
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	6013      	str	r3, [r2, #0]

  /* Disable I/O buffering for STDOUT stream, so that
   * chars are sent out as soon as they are printed. */
  setvbuf(stdout, NULL, _IONBF, 0);
 8002a42:	4b07      	ldr	r3, [pc, #28]	; (8002a60 <RetargetInit+0x2c>)
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	6898      	ldr	r0, [r3, #8]
 8002a48:	2300      	movs	r3, #0
 8002a4a:	2202      	movs	r2, #2
 8002a4c:	2100      	movs	r1, #0
 8002a4e:	f008 fac3 	bl	800afd8 <setvbuf>
}
 8002a52:	bf00      	nop
 8002a54:	3708      	adds	r7, #8
 8002a56:	46bd      	mov	sp, r7
 8002a58:	bd80      	pop	{r7, pc}
 8002a5a:	bf00      	nop
 8002a5c:	2000011c 	.word	0x2000011c
 8002a60:	20000018 	.word	0x20000018

08002a64 <_isatty>:

int _isatty(int fd) {
 8002a64:	b580      	push	{r7, lr}
 8002a66:	b082      	sub	sp, #8
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	db04      	blt.n	8002a7c <_isatty+0x18>
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	2b02      	cmp	r3, #2
 8002a76:	dc01      	bgt.n	8002a7c <_isatty+0x18>
    return 1;
 8002a78:	2301      	movs	r3, #1
 8002a7a:	e005      	b.n	8002a88 <_isatty+0x24>

  errno = EBADF;
 8002a7c:	f007 ffd6 	bl	800aa2c <__errno>
 8002a80:	4603      	mov	r3, r0
 8002a82:	2209      	movs	r2, #9
 8002a84:	601a      	str	r2, [r3, #0]
  return 0;
 8002a86:	2300      	movs	r3, #0
}
 8002a88:	4618      	mov	r0, r3
 8002a8a:	3708      	adds	r7, #8
 8002a8c:	46bd      	mov	sp, r7
 8002a8e:	bd80      	pop	{r7, pc}

08002a90 <_write>:

int _write(int fd, char* ptr, int len) {
 8002a90:	b580      	push	{r7, lr}
 8002a92:	b086      	sub	sp, #24
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	60f8      	str	r0, [r7, #12]
 8002a98:	60b9      	str	r1, [r7, #8]
 8002a9a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDOUT_FILENO || fd == STDERR_FILENO) {
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	2b01      	cmp	r3, #1
 8002aa0:	d002      	beq.n	8002aa8 <_write+0x18>
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	2b02      	cmp	r3, #2
 8002aa6:	d111      	bne.n	8002acc <_write+0x3c>
    hstatus = HAL_UART_Transmit(gHuart, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 8002aa8:	4b0e      	ldr	r3, [pc, #56]	; (8002ae4 <_write+0x54>)
 8002aaa:	6818      	ldr	r0, [r3, #0]
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	b29a      	uxth	r2, r3
 8002ab0:	f04f 33ff 	mov.w	r3, #4294967295
 8002ab4:	68b9      	ldr	r1, [r7, #8]
 8002ab6:	f002 ffdb 	bl	8005a70 <HAL_UART_Transmit>
 8002aba:	4603      	mov	r3, r0
 8002abc:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 8002abe:	7dfb      	ldrb	r3, [r7, #23]
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d101      	bne.n	8002ac8 <_write+0x38>
      return len;
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	e008      	b.n	8002ada <_write+0x4a>
    else
      return EIO;
 8002ac8:	2305      	movs	r3, #5
 8002aca:	e006      	b.n	8002ada <_write+0x4a>
  }
  errno = EBADF;
 8002acc:	f007 ffae 	bl	800aa2c <__errno>
 8002ad0:	4603      	mov	r3, r0
 8002ad2:	2209      	movs	r2, #9
 8002ad4:	601a      	str	r2, [r3, #0]
  return -1;
 8002ad6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002ada:	4618      	mov	r0, r3
 8002adc:	3718      	adds	r7, #24
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	bd80      	pop	{r7, pc}
 8002ae2:	bf00      	nop
 8002ae4:	2000011c 	.word	0x2000011c

08002ae8 <_close>:

int _close(int fd) {
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	b082      	sub	sp, #8
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	db04      	blt.n	8002b00 <_close+0x18>
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	2b02      	cmp	r3, #2
 8002afa:	dc01      	bgt.n	8002b00 <_close+0x18>
    return 0;
 8002afc:	2300      	movs	r3, #0
 8002afe:	e006      	b.n	8002b0e <_close+0x26>

  errno = EBADF;
 8002b00:	f007 ff94 	bl	800aa2c <__errno>
 8002b04:	4603      	mov	r3, r0
 8002b06:	2209      	movs	r2, #9
 8002b08:	601a      	str	r2, [r3, #0]
  return -1;
 8002b0a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002b0e:	4618      	mov	r0, r3
 8002b10:	3708      	adds	r7, #8
 8002b12:	46bd      	mov	sp, r7
 8002b14:	bd80      	pop	{r7, pc}

08002b16 <_lseek>:

int _lseek(int fd, int ptr, int dir) {
 8002b16:	b580      	push	{r7, lr}
 8002b18:	b084      	sub	sp, #16
 8002b1a:	af00      	add	r7, sp, #0
 8002b1c:	60f8      	str	r0, [r7, #12]
 8002b1e:	60b9      	str	r1, [r7, #8]
 8002b20:	607a      	str	r2, [r7, #4]
  (void) fd;
  (void) ptr;
  (void) dir;

  errno = EBADF;
 8002b22:	f007 ff83 	bl	800aa2c <__errno>
 8002b26:	4603      	mov	r3, r0
 8002b28:	2209      	movs	r2, #9
 8002b2a:	601a      	str	r2, [r3, #0]
  return -1;
 8002b2c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002b30:	4618      	mov	r0, r3
 8002b32:	3710      	adds	r7, #16
 8002b34:	46bd      	mov	sp, r7
 8002b36:	bd80      	pop	{r7, pc}

08002b38 <_read>:

int _read(int fd, char* ptr, int len) {
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	b086      	sub	sp, #24
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	60f8      	str	r0, [r7, #12]
 8002b40:	60b9      	str	r1, [r7, #8]
 8002b42:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDIN_FILENO) {
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d110      	bne.n	8002b6c <_read+0x34>
    hstatus = HAL_UART_Receive(gHuart, (uint8_t *) ptr, 1, HAL_MAX_DELAY);
 8002b4a:	4b0e      	ldr	r3, [pc, #56]	; (8002b84 <_read+0x4c>)
 8002b4c:	6818      	ldr	r0, [r3, #0]
 8002b4e:	f04f 33ff 	mov.w	r3, #4294967295
 8002b52:	2201      	movs	r2, #1
 8002b54:	68b9      	ldr	r1, [r7, #8]
 8002b56:	f003 f81f 	bl	8005b98 <HAL_UART_Receive>
 8002b5a:	4603      	mov	r3, r0
 8002b5c:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 8002b5e:	7dfb      	ldrb	r3, [r7, #23]
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d101      	bne.n	8002b68 <_read+0x30>
      return 1;
 8002b64:	2301      	movs	r3, #1
 8002b66:	e008      	b.n	8002b7a <_read+0x42>
    else
      return EIO;
 8002b68:	2305      	movs	r3, #5
 8002b6a:	e006      	b.n	8002b7a <_read+0x42>
  }
  errno = EBADF;
 8002b6c:	f007 ff5e 	bl	800aa2c <__errno>
 8002b70:	4603      	mov	r3, r0
 8002b72:	2209      	movs	r2, #9
 8002b74:	601a      	str	r2, [r3, #0]
  return -1;
 8002b76:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	3718      	adds	r7, #24
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	bd80      	pop	{r7, pc}
 8002b82:	bf00      	nop
 8002b84:	2000011c 	.word	0x2000011c

08002b88 <_fstat>:

int _fstat(int fd, struct stat* st) {
 8002b88:	b580      	push	{r7, lr}
 8002b8a:	b082      	sub	sp, #8
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	6078      	str	r0, [r7, #4]
 8002b90:	6039      	str	r1, [r7, #0]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO) {
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	db08      	blt.n	8002baa <_fstat+0x22>
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	2b02      	cmp	r3, #2
 8002b9c:	dc05      	bgt.n	8002baa <_fstat+0x22>
    st->st_mode = S_IFCHR;
 8002b9e:	683b      	ldr	r3, [r7, #0]
 8002ba0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002ba4:	605a      	str	r2, [r3, #4]
    return 0;
 8002ba6:	2300      	movs	r3, #0
 8002ba8:	e005      	b.n	8002bb6 <_fstat+0x2e>
  }

  errno = EBADF;
 8002baa:	f007 ff3f 	bl	800aa2c <__errno>
 8002bae:	4603      	mov	r3, r0
 8002bb0:	2209      	movs	r2, #9
 8002bb2:	601a      	str	r2, [r3, #0]
  return 0;
 8002bb4:	2300      	movs	r3, #0
}
 8002bb6:	4618      	mov	r0, r3
 8002bb8:	3708      	adds	r7, #8
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	bd80      	pop	{r7, pc}
	...

08002bc0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002bc0:	b580      	push	{r7, lr}
 8002bc2:	b082      	sub	sp, #8
 8002bc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002bc6:	4b11      	ldr	r3, [pc, #68]	; (8002c0c <HAL_MspInit+0x4c>)
 8002bc8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002bca:	4a10      	ldr	r2, [pc, #64]	; (8002c0c <HAL_MspInit+0x4c>)
 8002bcc:	f043 0301 	orr.w	r3, r3, #1
 8002bd0:	6613      	str	r3, [r2, #96]	; 0x60
 8002bd2:	4b0e      	ldr	r3, [pc, #56]	; (8002c0c <HAL_MspInit+0x4c>)
 8002bd4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002bd6:	f003 0301 	and.w	r3, r3, #1
 8002bda:	607b      	str	r3, [r7, #4]
 8002bdc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002bde:	4b0b      	ldr	r3, [pc, #44]	; (8002c0c <HAL_MspInit+0x4c>)
 8002be0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002be2:	4a0a      	ldr	r2, [pc, #40]	; (8002c0c <HAL_MspInit+0x4c>)
 8002be4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002be8:	6593      	str	r3, [r2, #88]	; 0x58
 8002bea:	4b08      	ldr	r3, [pc, #32]	; (8002c0c <HAL_MspInit+0x4c>)
 8002bec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bf2:	603b      	str	r3, [r7, #0]
 8002bf4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002bf6:	2200      	movs	r2, #0
 8002bf8:	210f      	movs	r1, #15
 8002bfa:	f06f 0001 	mvn.w	r0, #1
 8002bfe:	f000 fd63 	bl	80036c8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002c02:	bf00      	nop
 8002c04:	3708      	adds	r7, #8
 8002c06:	46bd      	mov	sp, r7
 8002c08:	bd80      	pop	{r7, pc}
 8002c0a:	bf00      	nop
 8002c0c:	40021000 	.word	0x40021000

08002c10 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002c10:	b580      	push	{r7, lr}
 8002c12:	b08c      	sub	sp, #48	; 0x30
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8002c18:	2300      	movs	r3, #0
 8002c1a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Enable TIM16 clock */
  __HAL_RCC_TIM16_CLK_ENABLE();
 8002c1e:	4b2e      	ldr	r3, [pc, #184]	; (8002cd8 <HAL_InitTick+0xc8>)
 8002c20:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c22:	4a2d      	ldr	r2, [pc, #180]	; (8002cd8 <HAL_InitTick+0xc8>)
 8002c24:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002c28:	6613      	str	r3, [r2, #96]	; 0x60
 8002c2a:	4b2b      	ldr	r3, [pc, #172]	; (8002cd8 <HAL_InitTick+0xc8>)
 8002c2c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c32:	60bb      	str	r3, [r7, #8]
 8002c34:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002c36:	f107 020c 	add.w	r2, r7, #12
 8002c3a:	f107 0310 	add.w	r3, r7, #16
 8002c3e:	4611      	mov	r1, r2
 8002c40:	4618      	mov	r0, r3
 8002c42:	f002 f8bd 	bl	8004dc0 <HAL_RCC_GetClockConfig>

  /* Compute TIM16 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8002c46:	f002 f8a5 	bl	8004d94 <HAL_RCC_GetPCLK2Freq>
 8002c4a:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM16 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002c4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c4e:	4a23      	ldr	r2, [pc, #140]	; (8002cdc <HAL_InitTick+0xcc>)
 8002c50:	fba2 2303 	umull	r2, r3, r2, r3
 8002c54:	0c9b      	lsrs	r3, r3, #18
 8002c56:	3b01      	subs	r3, #1
 8002c58:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM16 */
  htim16.Instance = TIM16;
 8002c5a:	4b21      	ldr	r3, [pc, #132]	; (8002ce0 <HAL_InitTick+0xd0>)
 8002c5c:	4a21      	ldr	r2, [pc, #132]	; (8002ce4 <HAL_InitTick+0xd4>)
 8002c5e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM16CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim16.Init.Period = (1000000U / 1000U) - 1U;
 8002c60:	4b1f      	ldr	r3, [pc, #124]	; (8002ce0 <HAL_InitTick+0xd0>)
 8002c62:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002c66:	60da      	str	r2, [r3, #12]
  htim16.Init.Prescaler = uwPrescalerValue;
 8002c68:	4a1d      	ldr	r2, [pc, #116]	; (8002ce0 <HAL_InitTick+0xd0>)
 8002c6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c6c:	6053      	str	r3, [r2, #4]
  htim16.Init.ClockDivision = 0;
 8002c6e:	4b1c      	ldr	r3, [pc, #112]	; (8002ce0 <HAL_InitTick+0xd0>)
 8002c70:	2200      	movs	r2, #0
 8002c72:	611a      	str	r2, [r3, #16]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002c74:	4b1a      	ldr	r3, [pc, #104]	; (8002ce0 <HAL_InitTick+0xd0>)
 8002c76:	2200      	movs	r2, #0
 8002c78:	609a      	str	r2, [r3, #8]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002c7a:	4b19      	ldr	r3, [pc, #100]	; (8002ce0 <HAL_InitTick+0xd0>)
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim16);
 8002c80:	4817      	ldr	r0, [pc, #92]	; (8002ce0 <HAL_InitTick+0xd0>)
 8002c82:	f002 fc27 	bl	80054d4 <HAL_TIM_Base_Init>
 8002c86:	4603      	mov	r3, r0
 8002c88:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8002c8c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d11b      	bne.n	8002ccc <HAL_InitTick+0xbc>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim16);
 8002c94:	4812      	ldr	r0, [pc, #72]	; (8002ce0 <HAL_InitTick+0xd0>)
 8002c96:	f002 fc7f 	bl	8005598 <HAL_TIM_Base_Start_IT>
 8002c9a:	4603      	mov	r3, r0
 8002c9c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8002ca0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d111      	bne.n	8002ccc <HAL_InitTick+0xbc>
    {
    /* Enable the TIM16 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8002ca8:	2019      	movs	r0, #25
 8002caa:	f000 fd29 	bl	8003700 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	2b0f      	cmp	r3, #15
 8002cb2:	d808      	bhi.n	8002cc6 <HAL_InitTick+0xb6>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority, 0U);
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	6879      	ldr	r1, [r7, #4]
 8002cb8:	2019      	movs	r0, #25
 8002cba:	f000 fd05 	bl	80036c8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002cbe:	4a0a      	ldr	r2, [pc, #40]	; (8002ce8 <HAL_InitTick+0xd8>)
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	6013      	str	r3, [r2, #0]
 8002cc4:	e002      	b.n	8002ccc <HAL_InitTick+0xbc>
      }
      else
      {
        status = HAL_ERROR;
 8002cc6:	2301      	movs	r3, #1
 8002cc8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8002ccc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8002cd0:	4618      	mov	r0, r3
 8002cd2:	3730      	adds	r7, #48	; 0x30
 8002cd4:	46bd      	mov	sp, r7
 8002cd6:	bd80      	pop	{r7, pc}
 8002cd8:	40021000 	.word	0x40021000
 8002cdc:	431bde83 	.word	0x431bde83
 8002ce0:	20000120 	.word	0x20000120
 8002ce4:	40014400 	.word	0x40014400
 8002ce8:	2000000c 	.word	0x2000000c

08002cec <LL_USART_IsActiveFlag_IDLE>:
  * @rmtoll ISR          IDLE          LL_USART_IsActiveFlag_IDLE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_IDLE(const USART_TypeDef *USARTx)
{
 8002cec:	b480      	push	{r7}
 8002cee:	b083      	sub	sp, #12
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_IDLE) == (USART_ISR_IDLE)) ? 1UL : 0UL);
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	69db      	ldr	r3, [r3, #28]
 8002cf8:	f003 0310 	and.w	r3, r3, #16
 8002cfc:	2b10      	cmp	r3, #16
 8002cfe:	d101      	bne.n	8002d04 <LL_USART_IsActiveFlag_IDLE+0x18>
 8002d00:	2301      	movs	r3, #1
 8002d02:	e000      	b.n	8002d06 <LL_USART_IsActiveFlag_IDLE+0x1a>
 8002d04:	2300      	movs	r3, #0
}
 8002d06:	4618      	mov	r0, r3
 8002d08:	370c      	adds	r7, #12
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d10:	4770      	bx	lr

08002d12 <LL_USART_ClearFlag_IDLE>:
  * @rmtoll ICR          IDLECF        LL_USART_ClearFlag_IDLE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ClearFlag_IDLE(USART_TypeDef *USARTx)
{
 8002d12:	b480      	push	{r7}
 8002d14:	b083      	sub	sp, #12
 8002d16:	af00      	add	r7, sp, #0
 8002d18:	6078      	str	r0, [r7, #4]
  WRITE_REG(USARTx->ICR, USART_ICR_IDLECF);
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	2210      	movs	r2, #16
 8002d1e:	621a      	str	r2, [r3, #32]
}
 8002d20:	bf00      	nop
 8002d22:	370c      	adds	r7, #12
 8002d24:	46bd      	mov	sp, r7
 8002d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2a:	4770      	bx	lr

08002d2c <LL_USART_IsEnabledIT_IDLE>:
  * @rmtoll CR1          IDLEIE        LL_USART_IsEnabledIT_IDLE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsEnabledIT_IDLE(const USART_TypeDef *USARTx)
{
 8002d2c:	b480      	push	{r7}
 8002d2e:	b083      	sub	sp, #12
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_IDLEIE) == (USART_CR1_IDLEIE)) ? 1UL : 0UL);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f003 0310 	and.w	r3, r3, #16
 8002d3c:	2b10      	cmp	r3, #16
 8002d3e:	d101      	bne.n	8002d44 <LL_USART_IsEnabledIT_IDLE+0x18>
 8002d40:	2301      	movs	r3, #1
 8002d42:	e000      	b.n	8002d46 <LL_USART_IsEnabledIT_IDLE+0x1a>
 8002d44:	2300      	movs	r3, #0
}
 8002d46:	4618      	mov	r0, r3
 8002d48:	370c      	adds	r7, #12
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d50:	4770      	bx	lr

08002d52 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002d52:	b480      	push	{r7}
 8002d54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002d56:	e7fe      	b.n	8002d56 <NMI_Handler+0x4>

08002d58 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002d58:	b480      	push	{r7}
 8002d5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002d5c:	e7fe      	b.n	8002d5c <HardFault_Handler+0x4>

08002d5e <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002d5e:	b480      	push	{r7}
 8002d60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002d62:	e7fe      	b.n	8002d62 <MemManage_Handler+0x4>

08002d64 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002d64:	b480      	push	{r7}
 8002d66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002d68:	e7fe      	b.n	8002d68 <BusFault_Handler+0x4>

08002d6a <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002d6a:	b480      	push	{r7}
 8002d6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002d6e:	e7fe      	b.n	8002d6e <UsageFault_Handler+0x4>

08002d70 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002d70:	b480      	push	{r7}
 8002d72:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002d74:	bf00      	nop
 8002d76:	46bd      	mov	sp, r7
 8002d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7c:	4770      	bx	lr
	...

08002d80 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8002d80:	b580      	push	{r7, lr}
 8002d82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8002d84:	4802      	ldr	r0, [pc, #8]	; (8002d90 <DMA1_Channel5_IRQHandler+0x10>)
 8002d86:	f000 fe60 	bl	8003a4a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8002d8a:	bf00      	nop
 8002d8c:	bd80      	pop	{r7, pc}
 8002d8e:	bf00      	nop
 8002d90:	20000278 	.word	0x20000278

08002d94 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8002d94:	b580      	push	{r7, lr}
 8002d96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8002d98:	4802      	ldr	r0, [pc, #8]	; (8002da4 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8002d9a:	f002 fc51 	bl	8005640 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8002d9e:	bf00      	nop
 8002da0:	bd80      	pop	{r7, pc}
 8002da2:	bf00      	nop
 8002da4:	20000120 	.word	0x20000120

08002da8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002da8:	b580      	push	{r7, lr}
 8002daa:	b084      	sub	sp, #16
 8002dac:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002dae:	4816      	ldr	r0, [pc, #88]	; (8002e08 <USART1_IRQHandler+0x60>)
 8002db0:	f003 f8de 	bl	8005f70 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */
	  if(LL_USART_IsEnabledIT_IDLE(USART1) && LL_USART_IsActiveFlag_IDLE(USART1))
 8002db4:	4815      	ldr	r0, [pc, #84]	; (8002e0c <USART1_IRQHandler+0x64>)
 8002db6:	f7ff ffb9 	bl	8002d2c <LL_USART_IsEnabledIT_IDLE>
 8002dba:	4603      	mov	r3, r0
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d01e      	beq.n	8002dfe <USART1_IRQHandler+0x56>
 8002dc0:	4812      	ldr	r0, [pc, #72]	; (8002e0c <USART1_IRQHandler+0x64>)
 8002dc2:	f7ff ff93 	bl	8002cec <LL_USART_IsActiveFlag_IDLE>
 8002dc6:	4603      	mov	r3, r0
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d018      	beq.n	8002dfe <USART1_IRQHandler+0x56>
	  {
		  LL_USART_ClearFlag_IDLE(USART1);        /* Clear IDLE line flag */
 8002dcc:	480f      	ldr	r0, [pc, #60]	; (8002e0c <USART1_IRQHandler+0x64>)
 8002dce:	f7ff ffa0 	bl	8002d12 <LL_USART_ClearFlag_IDLE>
		  // Give a task notification to the UART2 Task
		  BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8002dd2:	2300      	movs	r3, #0
 8002dd4:	607b      	str	r3, [r7, #4]
		  xTaskNotifyFromISR(xUartTaskHandle, UART1_IDLE_EVENT, eSetBits, &xHigherPriorityTaskWoken);
 8002dd6:	4b0e      	ldr	r3, [pc, #56]	; (8002e10 <USART1_IRQHandler+0x68>)
 8002dd8:	6818      	ldr	r0, [r3, #0]
 8002dda:	1d3b      	adds	r3, r7, #4
 8002ddc:	9300      	str	r3, [sp, #0]
 8002dde:	2300      	movs	r3, #0
 8002de0:	2201      	movs	r2, #1
 8002de2:	2101      	movs	r1, #1
 8002de4:	f006 fd60 	bl	80098a8 <xTaskGenericNotifyFromISR>
		  portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d007      	beq.n	8002dfe <USART1_IRQHandler+0x56>
 8002dee:	4b09      	ldr	r3, [pc, #36]	; (8002e14 <USART1_IRQHandler+0x6c>)
 8002df0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002df4:	601a      	str	r2, [r3, #0]
 8002df6:	f3bf 8f4f 	dsb	sy
 8002dfa:	f3bf 8f6f 	isb	sy
	  }
  /* USER CODE END USART1_IRQn 1 */
}
 8002dfe:	bf00      	nop
 8002e00:	3708      	adds	r7, #8
 8002e02:	46bd      	mov	sp, r7
 8002e04:	bd80      	pop	{r7, pc}
 8002e06:	bf00      	nop
 8002e08:	20000170 	.word	0x20000170
 8002e0c:	40013800 	.word	0x40013800
 8002e10:	200022c4 	.word	0x200022c4
 8002e14:	e000ed04 	.word	0xe000ed04

08002e18 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002e1c:	4802      	ldr	r0, [pc, #8]	; (8002e28 <USART2_IRQHandler+0x10>)
 8002e1e:	f003 f8a7 	bl	8005f70 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002e22:	bf00      	nop
 8002e24:	bd80      	pop	{r7, pc}
 8002e26:	bf00      	nop
 8002e28:	200001f4 	.word	0x200001f4

08002e2c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	b086      	sub	sp, #24
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002e34:	4a14      	ldr	r2, [pc, #80]	; (8002e88 <_sbrk+0x5c>)
 8002e36:	4b15      	ldr	r3, [pc, #84]	; (8002e8c <_sbrk+0x60>)
 8002e38:	1ad3      	subs	r3, r2, r3
 8002e3a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002e3c:	697b      	ldr	r3, [r7, #20]
 8002e3e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002e40:	4b13      	ldr	r3, [pc, #76]	; (8002e90 <_sbrk+0x64>)
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d102      	bne.n	8002e4e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002e48:	4b11      	ldr	r3, [pc, #68]	; (8002e90 <_sbrk+0x64>)
 8002e4a:	4a12      	ldr	r2, [pc, #72]	; (8002e94 <_sbrk+0x68>)
 8002e4c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002e4e:	4b10      	ldr	r3, [pc, #64]	; (8002e90 <_sbrk+0x64>)
 8002e50:	681a      	ldr	r2, [r3, #0]
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	4413      	add	r3, r2
 8002e56:	693a      	ldr	r2, [r7, #16]
 8002e58:	429a      	cmp	r2, r3
 8002e5a:	d207      	bcs.n	8002e6c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002e5c:	f007 fde6 	bl	800aa2c <__errno>
 8002e60:	4603      	mov	r3, r0
 8002e62:	220c      	movs	r2, #12
 8002e64:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002e66:	f04f 33ff 	mov.w	r3, #4294967295
 8002e6a:	e009      	b.n	8002e80 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002e6c:	4b08      	ldr	r3, [pc, #32]	; (8002e90 <_sbrk+0x64>)
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002e72:	4b07      	ldr	r3, [pc, #28]	; (8002e90 <_sbrk+0x64>)
 8002e74:	681a      	ldr	r2, [r3, #0]
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	4413      	add	r3, r2
 8002e7a:	4a05      	ldr	r2, [pc, #20]	; (8002e90 <_sbrk+0x64>)
 8002e7c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002e7e:	68fb      	ldr	r3, [r7, #12]
}
 8002e80:	4618      	mov	r0, r3
 8002e82:	3718      	adds	r7, #24
 8002e84:	46bd      	mov	sp, r7
 8002e86:	bd80      	pop	{r7, pc}
 8002e88:	20010000 	.word	0x20010000
 8002e8c:	00000400 	.word	0x00000400
 8002e90:	2000016c 	.word	0x2000016c
 8002e94:	20005e80 	.word	0x20005e80

08002e98 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002e98:	b480      	push	{r7}
 8002e9a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002e9c:	4b06      	ldr	r3, [pc, #24]	; (8002eb8 <SystemInit+0x20>)
 8002e9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ea2:	4a05      	ldr	r2, [pc, #20]	; (8002eb8 <SystemInit+0x20>)
 8002ea4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002ea8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8002eac:	bf00      	nop
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb4:	4770      	bx	lr
 8002eb6:	bf00      	nop
 8002eb8:	e000ed00 	.word	0xe000ed00

08002ebc <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_rx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002ec0:	4b14      	ldr	r3, [pc, #80]	; (8002f14 <MX_USART1_UART_Init+0x58>)
 8002ec2:	4a15      	ldr	r2, [pc, #84]	; (8002f18 <MX_USART1_UART_Init+0x5c>)
 8002ec4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002ec6:	4b13      	ldr	r3, [pc, #76]	; (8002f14 <MX_USART1_UART_Init+0x58>)
 8002ec8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002ecc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002ece:	4b11      	ldr	r3, [pc, #68]	; (8002f14 <MX_USART1_UART_Init+0x58>)
 8002ed0:	2200      	movs	r2, #0
 8002ed2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002ed4:	4b0f      	ldr	r3, [pc, #60]	; (8002f14 <MX_USART1_UART_Init+0x58>)
 8002ed6:	2200      	movs	r2, #0
 8002ed8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002eda:	4b0e      	ldr	r3, [pc, #56]	; (8002f14 <MX_USART1_UART_Init+0x58>)
 8002edc:	2200      	movs	r2, #0
 8002ede:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002ee0:	4b0c      	ldr	r3, [pc, #48]	; (8002f14 <MX_USART1_UART_Init+0x58>)
 8002ee2:	220c      	movs	r2, #12
 8002ee4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002ee6:	4b0b      	ldr	r3, [pc, #44]	; (8002f14 <MX_USART1_UART_Init+0x58>)
 8002ee8:	2200      	movs	r2, #0
 8002eea:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002eec:	4b09      	ldr	r3, [pc, #36]	; (8002f14 <MX_USART1_UART_Init+0x58>)
 8002eee:	2200      	movs	r2, #0
 8002ef0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002ef2:	4b08      	ldr	r3, [pc, #32]	; (8002f14 <MX_USART1_UART_Init+0x58>)
 8002ef4:	2200      	movs	r2, #0
 8002ef6:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002ef8:	4b06      	ldr	r3, [pc, #24]	; (8002f14 <MX_USART1_UART_Init+0x58>)
 8002efa:	2200      	movs	r2, #0
 8002efc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002efe:	4805      	ldr	r0, [pc, #20]	; (8002f14 <MX_USART1_UART_Init+0x58>)
 8002f00:	f002 fd68 	bl	80059d4 <HAL_UART_Init>
 8002f04:	4603      	mov	r3, r0
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d001      	beq.n	8002f0e <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8002f0a:	f7fe fac9 	bl	80014a0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002f0e:	bf00      	nop
 8002f10:	bd80      	pop	{r7, pc}
 8002f12:	bf00      	nop
 8002f14:	20000170 	.word	0x20000170
 8002f18:	40013800 	.word	0x40013800

08002f1c <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002f20:	4b15      	ldr	r3, [pc, #84]	; (8002f78 <MX_USART2_UART_Init+0x5c>)
 8002f22:	4a16      	ldr	r2, [pc, #88]	; (8002f7c <MX_USART2_UART_Init+0x60>)
 8002f24:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002f26:	4b14      	ldr	r3, [pc, #80]	; (8002f78 <MX_USART2_UART_Init+0x5c>)
 8002f28:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002f2c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002f2e:	4b12      	ldr	r3, [pc, #72]	; (8002f78 <MX_USART2_UART_Init+0x5c>)
 8002f30:	2200      	movs	r2, #0
 8002f32:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002f34:	4b10      	ldr	r3, [pc, #64]	; (8002f78 <MX_USART2_UART_Init+0x5c>)
 8002f36:	2200      	movs	r2, #0
 8002f38:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002f3a:	4b0f      	ldr	r3, [pc, #60]	; (8002f78 <MX_USART2_UART_Init+0x5c>)
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002f40:	4b0d      	ldr	r3, [pc, #52]	; (8002f78 <MX_USART2_UART_Init+0x5c>)
 8002f42:	220c      	movs	r2, #12
 8002f44:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002f46:	4b0c      	ldr	r3, [pc, #48]	; (8002f78 <MX_USART2_UART_Init+0x5c>)
 8002f48:	2200      	movs	r2, #0
 8002f4a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002f4c:	4b0a      	ldr	r3, [pc, #40]	; (8002f78 <MX_USART2_UART_Init+0x5c>)
 8002f4e:	2200      	movs	r2, #0
 8002f50:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002f52:	4b09      	ldr	r3, [pc, #36]	; (8002f78 <MX_USART2_UART_Init+0x5c>)
 8002f54:	2200      	movs	r2, #0
 8002f56:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002f58:	4b07      	ldr	r3, [pc, #28]	; (8002f78 <MX_USART2_UART_Init+0x5c>)
 8002f5a:	2200      	movs	r2, #0
 8002f5c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002f5e:	4806      	ldr	r0, [pc, #24]	; (8002f78 <MX_USART2_UART_Init+0x5c>)
 8002f60:	f002 fd38 	bl	80059d4 <HAL_UART_Init>
 8002f64:	4603      	mov	r3, r0
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d001      	beq.n	8002f6e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8002f6a:	f7fe fa99 	bl	80014a0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */
  RetargetInit(&huart2);
 8002f6e:	4802      	ldr	r0, [pc, #8]	; (8002f78 <MX_USART2_UART_Init+0x5c>)
 8002f70:	f7ff fd60 	bl	8002a34 <RetargetInit>
  /* USER CODE END USART2_Init 2 */

}
 8002f74:	bf00      	nop
 8002f76:	bd80      	pop	{r7, pc}
 8002f78:	200001f4 	.word	0x200001f4
 8002f7c:	40004400 	.word	0x40004400

08002f80 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002f80:	b580      	push	{r7, lr}
 8002f82:	b0a0      	sub	sp, #128	; 0x80
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f88:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	601a      	str	r2, [r3, #0]
 8002f90:	605a      	str	r2, [r3, #4]
 8002f92:	609a      	str	r2, [r3, #8]
 8002f94:	60da      	str	r2, [r3, #12]
 8002f96:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002f98:	f107 0318 	add.w	r3, r7, #24
 8002f9c:	2254      	movs	r2, #84	; 0x54
 8002f9e:	2100      	movs	r1, #0
 8002fa0:	4618      	mov	r0, r3
 8002fa2:	f007 fe74 	bl	800ac8e <memset>
  if(uartHandle->Instance==USART1)
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	4a63      	ldr	r2, [pc, #396]	; (8003138 <HAL_UART_MspInit+0x1b8>)
 8002fac:	4293      	cmp	r3, r2
 8002fae:	d169      	bne.n	8003084 <HAL_UART_MspInit+0x104>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002fb0:	2301      	movs	r3, #1
 8002fb2:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002fb4:	2300      	movs	r3, #0
 8002fb6:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002fb8:	f107 0318 	add.w	r3, r7, #24
 8002fbc:	4618      	mov	r0, r3
 8002fbe:	f001 ff91 	bl	8004ee4 <HAL_RCCEx_PeriphCLKConfig>
 8002fc2:	4603      	mov	r3, r0
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d001      	beq.n	8002fcc <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002fc8:	f7fe fa6a 	bl	80014a0 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002fcc:	4b5b      	ldr	r3, [pc, #364]	; (800313c <HAL_UART_MspInit+0x1bc>)
 8002fce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002fd0:	4a5a      	ldr	r2, [pc, #360]	; (800313c <HAL_UART_MspInit+0x1bc>)
 8002fd2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002fd6:	6613      	str	r3, [r2, #96]	; 0x60
 8002fd8:	4b58      	ldr	r3, [pc, #352]	; (800313c <HAL_UART_MspInit+0x1bc>)
 8002fda:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002fdc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002fe0:	617b      	str	r3, [r7, #20]
 8002fe2:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002fe4:	4b55      	ldr	r3, [pc, #340]	; (800313c <HAL_UART_MspInit+0x1bc>)
 8002fe6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002fe8:	4a54      	ldr	r2, [pc, #336]	; (800313c <HAL_UART_MspInit+0x1bc>)
 8002fea:	f043 0301 	orr.w	r3, r3, #1
 8002fee:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002ff0:	4b52      	ldr	r3, [pc, #328]	; (800313c <HAL_UART_MspInit+0x1bc>)
 8002ff2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ff4:	f003 0301 	and.w	r3, r3, #1
 8002ff8:	613b      	str	r3, [r7, #16]
 8002ffa:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002ffc:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8003000:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003002:	2302      	movs	r3, #2
 8003004:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003006:	2300      	movs	r3, #0
 8003008:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800300a:	2303      	movs	r3, #3
 800300c:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800300e:	2307      	movs	r3, #7
 8003010:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003012:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8003016:	4619      	mov	r1, r3
 8003018:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800301c:	f000 fdf4 	bl	8003c08 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8003020:	4b47      	ldr	r3, [pc, #284]	; (8003140 <HAL_UART_MspInit+0x1c0>)
 8003022:	4a48      	ldr	r2, [pc, #288]	; (8003144 <HAL_UART_MspInit+0x1c4>)
 8003024:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_2;
 8003026:	4b46      	ldr	r3, [pc, #280]	; (8003140 <HAL_UART_MspInit+0x1c0>)
 8003028:	2202      	movs	r2, #2
 800302a:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800302c:	4b44      	ldr	r3, [pc, #272]	; (8003140 <HAL_UART_MspInit+0x1c0>)
 800302e:	2200      	movs	r2, #0
 8003030:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003032:	4b43      	ldr	r3, [pc, #268]	; (8003140 <HAL_UART_MspInit+0x1c0>)
 8003034:	2200      	movs	r2, #0
 8003036:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003038:	4b41      	ldr	r3, [pc, #260]	; (8003140 <HAL_UART_MspInit+0x1c0>)
 800303a:	2280      	movs	r2, #128	; 0x80
 800303c:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800303e:	4b40      	ldr	r3, [pc, #256]	; (8003140 <HAL_UART_MspInit+0x1c0>)
 8003040:	2200      	movs	r2, #0
 8003042:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003044:	4b3e      	ldr	r3, [pc, #248]	; (8003140 <HAL_UART_MspInit+0x1c0>)
 8003046:	2200      	movs	r2, #0
 8003048:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 800304a:	4b3d      	ldr	r3, [pc, #244]	; (8003140 <HAL_UART_MspInit+0x1c0>)
 800304c:	2220      	movs	r2, #32
 800304e:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003050:	4b3b      	ldr	r3, [pc, #236]	; (8003140 <HAL_UART_MspInit+0x1c0>)
 8003052:	2200      	movs	r2, #0
 8003054:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8003056:	483a      	ldr	r0, [pc, #232]	; (8003140 <HAL_UART_MspInit+0x1c0>)
 8003058:	f000 fb60 	bl	800371c <HAL_DMA_Init>
 800305c:	4603      	mov	r3, r0
 800305e:	2b00      	cmp	r3, #0
 8003060:	d001      	beq.n	8003066 <HAL_UART_MspInit+0xe6>
    {
      Error_Handler();
 8003062:	f7fe fa1d 	bl	80014a0 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	4a35      	ldr	r2, [pc, #212]	; (8003140 <HAL_UART_MspInit+0x1c0>)
 800306a:	671a      	str	r2, [r3, #112]	; 0x70
 800306c:	4a34      	ldr	r2, [pc, #208]	; (8003140 <HAL_UART_MspInit+0x1c0>)
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8003072:	2200      	movs	r2, #0
 8003074:	2105      	movs	r1, #5
 8003076:	2025      	movs	r0, #37	; 0x25
 8003078:	f000 fb26 	bl	80036c8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800307c:	2025      	movs	r0, #37	; 0x25
 800307e:	f000 fb3f 	bl	8003700 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8003082:	e055      	b.n	8003130 <HAL_UART_MspInit+0x1b0>
  else if(uartHandle->Instance==USART2)
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	4a2f      	ldr	r2, [pc, #188]	; (8003148 <HAL_UART_MspInit+0x1c8>)
 800308a:	4293      	cmp	r3, r2
 800308c:	d150      	bne.n	8003130 <HAL_UART_MspInit+0x1b0>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800308e:	2302      	movs	r3, #2
 8003090:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8003092:	2300      	movs	r3, #0
 8003094:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003096:	f107 0318 	add.w	r3, r7, #24
 800309a:	4618      	mov	r0, r3
 800309c:	f001 ff22 	bl	8004ee4 <HAL_RCCEx_PeriphCLKConfig>
 80030a0:	4603      	mov	r3, r0
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d001      	beq.n	80030aa <HAL_UART_MspInit+0x12a>
      Error_Handler();
 80030a6:	f7fe f9fb 	bl	80014a0 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 80030aa:	4b24      	ldr	r3, [pc, #144]	; (800313c <HAL_UART_MspInit+0x1bc>)
 80030ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030ae:	4a23      	ldr	r2, [pc, #140]	; (800313c <HAL_UART_MspInit+0x1bc>)
 80030b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80030b4:	6593      	str	r3, [r2, #88]	; 0x58
 80030b6:	4b21      	ldr	r3, [pc, #132]	; (800313c <HAL_UART_MspInit+0x1bc>)
 80030b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030be:	60fb      	str	r3, [r7, #12]
 80030c0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80030c2:	4b1e      	ldr	r3, [pc, #120]	; (800313c <HAL_UART_MspInit+0x1bc>)
 80030c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030c6:	4a1d      	ldr	r2, [pc, #116]	; (800313c <HAL_UART_MspInit+0x1bc>)
 80030c8:	f043 0301 	orr.w	r3, r3, #1
 80030cc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80030ce:	4b1b      	ldr	r3, [pc, #108]	; (800313c <HAL_UART_MspInit+0x1bc>)
 80030d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030d2:	f003 0301 	and.w	r3, r3, #1
 80030d6:	60bb      	str	r3, [r7, #8]
 80030d8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 80030da:	2304      	movs	r3, #4
 80030dc:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030de:	2302      	movs	r3, #2
 80030e0:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030e2:	2300      	movs	r3, #0
 80030e4:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80030e6:	2303      	movs	r3, #3
 80030e8:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80030ea:	2307      	movs	r3, #7
 80030ec:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 80030ee:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80030f2:	4619      	mov	r1, r3
 80030f4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80030f8:	f000 fd86 	bl	8003c08 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 80030fc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003100:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003102:	2302      	movs	r3, #2
 8003104:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003106:	2300      	movs	r3, #0
 8003108:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800310a:	2303      	movs	r3, #3
 800310c:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 800310e:	2303      	movs	r3, #3
 8003110:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8003112:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8003116:	4619      	mov	r1, r3
 8003118:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800311c:	f000 fd74 	bl	8003c08 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8003120:	2200      	movs	r2, #0
 8003122:	2105      	movs	r1, #5
 8003124:	2026      	movs	r0, #38	; 0x26
 8003126:	f000 facf 	bl	80036c8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800312a:	2026      	movs	r0, #38	; 0x26
 800312c:	f000 fae8 	bl	8003700 <HAL_NVIC_EnableIRQ>
}
 8003130:	bf00      	nop
 8003132:	3780      	adds	r7, #128	; 0x80
 8003134:	46bd      	mov	sp, r7
 8003136:	bd80      	pop	{r7, pc}
 8003138:	40013800 	.word	0x40013800
 800313c:	40021000 	.word	0x40021000
 8003140:	20000278 	.word	0x20000278
 8003144:	40020058 	.word	0x40020058
 8003148:	40004400 	.word	0x40004400

0800314c <LL_USART_EnableIT_IDLE>:
{
 800314c:	b480      	push	{r7}
 800314e:	b089      	sub	sp, #36	; 0x24
 8003150:	af00      	add	r7, sp, #0
 8003152:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_IDLEIE);
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	60fb      	str	r3, [r7, #12]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	e853 3f00 	ldrex	r3, [r3]
 800315e:	60bb      	str	r3, [r7, #8]
   return(result);
 8003160:	68bb      	ldr	r3, [r7, #8]
 8003162:	f043 0310 	orr.w	r3, r3, #16
 8003166:	61fb      	str	r3, [r7, #28]
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	69fa      	ldr	r2, [r7, #28]
 800316c:	61ba      	str	r2, [r7, #24]
 800316e:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003170:	6979      	ldr	r1, [r7, #20]
 8003172:	69ba      	ldr	r2, [r7, #24]
 8003174:	e841 2300 	strex	r3, r2, [r1]
 8003178:	613b      	str	r3, [r7, #16]
   return(result);
 800317a:	693b      	ldr	r3, [r7, #16]
 800317c:	2b00      	cmp	r3, #0
 800317e:	d1e9      	bne.n	8003154 <LL_USART_EnableIT_IDLE+0x8>
}
 8003180:	bf00      	nop
 8003182:	bf00      	nop
 8003184:	3724      	adds	r7, #36	; 0x24
 8003186:	46bd      	mov	sp, r7
 8003188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800318c:	4770      	bx	lr
	...

08003190 <StartWifiClick>:
// Task handles
TaskHandle_t xUartTaskHandle = NULL;

char at_cmd_buffer[AT_CMD_BUFFER_SIZE] = {0};

void StartWifiClick(void *argument) {
 8003190:	b580      	push	{r7, lr}
 8003192:	b084      	sub	sp, #16
 8003194:	af02      	add	r7, sp, #8
 8003196:	6078      	str	r0, [r7, #4]
	// Create tasks
	//xTaskCreate(uart2Task, "Uart1Task", 128, NULL, osPriorityLow, NULL);
	xTaskCreate(UartHandlerTask, xUartHandlerTaskName, 256, NULL, osPriorityNormal1, &xUartTaskHandle);
 8003198:	4b2a      	ldr	r3, [pc, #168]	; (8003244 <StartWifiClick+0xb4>)
 800319a:	6819      	ldr	r1, [r3, #0]
 800319c:	4b2a      	ldr	r3, [pc, #168]	; (8003248 <StartWifiClick+0xb8>)
 800319e:	9301      	str	r3, [sp, #4]
 80031a0:	2319      	movs	r3, #25
 80031a2:	9300      	str	r3, [sp, #0]
 80031a4:	2300      	movs	r3, #0
 80031a6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80031aa:	4828      	ldr	r0, [pc, #160]	; (800324c <StartWifiClick+0xbc>)
 80031ac:	f005 fc33 	bl	8008a16 <xTaskCreate>

	// Activate UART interrupts and reception
	LL_USART_EnableIT_IDLE(USART1); // Enable idle line detection (interrupt) for uart1
 80031b0:	4827      	ldr	r0, [pc, #156]	; (8003250 <StartWifiClick+0xc0>)
 80031b2:	f7ff ffcb 	bl	800314c <LL_USART_EnableIT_IDLE>
	HAL_UART_Receive_DMA(&huart1, uart1Buffer, BUFFER_SIZE);
 80031b6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80031ba:	4926      	ldr	r1, [pc, #152]	; (8003254 <StartWifiClick+0xc4>)
 80031bc:	4826      	ldr	r0, [pc, #152]	; (8003258 <StartWifiClick+0xc8>)
 80031be:	f002 fe81 	bl	8005ec4 <HAL_UART_Receive_DMA>

	// Configure Station Mode
	at_set_command(at_cmd_buffer, SendATCommand, AT_WIFI_Set_Mode, "%u", AT_WIFI_Station_Mode);
 80031c2:	2301      	movs	r3, #1
 80031c4:	9300      	str	r3, [sp, #0]
 80031c6:	4b25      	ldr	r3, [pc, #148]	; (800325c <StartWifiClick+0xcc>)
 80031c8:	4a25      	ldr	r2, [pc, #148]	; (8003260 <StartWifiClick+0xd0>)
 80031ca:	4926      	ldr	r1, [pc, #152]	; (8003264 <StartWifiClick+0xd4>)
 80031cc:	4826      	ldr	r0, [pc, #152]	; (8003268 <StartWifiClick+0xd8>)
 80031ce:	f7fd fecd 	bl	8000f6c <at_set_command>
	osDelay(10);
 80031d2:	200a      	movs	r0, #10
 80031d4:	f004 fc48 	bl	8007a68 <osDelay>
	// Allow multiple connections
	at_set_command(at_cmd_buffer, SendATCommand, AT_IP_Set_MultiConnectionMode, "%u", AT_IP_ConnectionMode_Multiple);
 80031d8:	2301      	movs	r3, #1
 80031da:	9300      	str	r3, [sp, #0]
 80031dc:	4b1f      	ldr	r3, [pc, #124]	; (800325c <StartWifiClick+0xcc>)
 80031de:	4a23      	ldr	r2, [pc, #140]	; (800326c <StartWifiClick+0xdc>)
 80031e0:	4920      	ldr	r1, [pc, #128]	; (8003264 <StartWifiClick+0xd4>)
 80031e2:	4821      	ldr	r0, [pc, #132]	; (8003268 <StartWifiClick+0xd8>)
 80031e4:	f7fd fec2 	bl	8000f6c <at_set_command>
	osDelay(10);
 80031e8:	200a      	movs	r0, #10
 80031ea:	f004 fc3d 	bl	8007a68 <osDelay>
	// Start TCP server on Port 80
	at_set_command(at_cmd_buffer, SendATCommand, AT_IP_Server, "%u,%u", AT_IP_Server_Create, 80);
 80031ee:	2350      	movs	r3, #80	; 0x50
 80031f0:	9301      	str	r3, [sp, #4]
 80031f2:	2301      	movs	r3, #1
 80031f4:	9300      	str	r3, [sp, #0]
 80031f6:	4b1e      	ldr	r3, [pc, #120]	; (8003270 <StartWifiClick+0xe0>)
 80031f8:	4a1e      	ldr	r2, [pc, #120]	; (8003274 <StartWifiClick+0xe4>)
 80031fa:	491a      	ldr	r1, [pc, #104]	; (8003264 <StartWifiClick+0xd4>)
 80031fc:	481a      	ldr	r0, [pc, #104]	; (8003268 <StartWifiClick+0xd8>)
 80031fe:	f7fd feb5 	bl	8000f6c <at_set_command>
	osDelay(10);
 8003202:	200a      	movs	r0, #10
 8003204:	f004 fc30 	bl	8007a68 <osDelay>
	// CONNECT to wifi
	at_set_command(at_cmd_buffer, SendATCommand, AT_WIFI_Connect, "\"%s\",\"%s\"", "UPC54C3A83", "2jRddrfzdxaj");
 8003208:	4b1b      	ldr	r3, [pc, #108]	; (8003278 <StartWifiClick+0xe8>)
 800320a:	9301      	str	r3, [sp, #4]
 800320c:	4b1b      	ldr	r3, [pc, #108]	; (800327c <StartWifiClick+0xec>)
 800320e:	9300      	str	r3, [sp, #0]
 8003210:	4b1b      	ldr	r3, [pc, #108]	; (8003280 <StartWifiClick+0xf0>)
 8003212:	4a1c      	ldr	r2, [pc, #112]	; (8003284 <StartWifiClick+0xf4>)
 8003214:	4913      	ldr	r1, [pc, #76]	; (8003264 <StartWifiClick+0xd4>)
 8003216:	4814      	ldr	r0, [pc, #80]	; (8003268 <StartWifiClick+0xd8>)
 8003218:	f7fd fea8 	bl	8000f6c <at_set_command>
	osDelay(10);
 800321c:	200a      	movs	r0, #10
 800321e:	f004 fc23 	bl	8007a68 <osDelay>
	at_execute_command(at_cmd_buffer, SendATCommand, AT_Startup);
 8003222:	4a19      	ldr	r2, [pc, #100]	; (8003288 <StartWifiClick+0xf8>)
 8003224:	490f      	ldr	r1, [pc, #60]	; (8003264 <StartWifiClick+0xd4>)
 8003226:	4810      	ldr	r0, [pc, #64]	; (8003268 <StartWifiClick+0xd8>)
 8003228:	f7fd fefa 	bl	8001020 <at_execute_command>
	osDelay(10);
 800322c:	200a      	movs	r0, #10
 800322e:	f004 fc1b 	bl	8007a68 <osDelay>

	HAL_UART_Receive_IT(&huart2, &uart2_rx_char, 1);
 8003232:	2201      	movs	r2, #1
 8003234:	4915      	ldr	r1, [pc, #84]	; (800328c <StartWifiClick+0xfc>)
 8003236:	4816      	ldr	r0, [pc, #88]	; (8003290 <StartWifiClick+0x100>)
 8003238:	f002 fdee 	bl	8005e18 <HAL_UART_Receive_IT>
}
 800323c:	bf00      	nop
 800323e:	3708      	adds	r7, #8
 8003240:	46bd      	mov	sp, r7
 8003242:	bd80      	pop	{r7, pc}
 8003244:	20000004 	.word	0x20000004
 8003248:	200022c4 	.word	0x200022c4
 800324c:	08003295 	.word	0x08003295
 8003250:	40013800 	.word	0x40013800
 8003254:	200002c0 	.word	0x200002c0
 8003258:	20000170 	.word	0x20000170
 800325c:	0800c294 	.word	0x0800c294
 8003260:	0800c298 	.word	0x0800c298
 8003264:	08003465 	.word	0x08003465
 8003268:	200022c8 	.word	0x200022c8
 800326c:	0800c2a4 	.word	0x0800c2a4
 8003270:	0800c2b0 	.word	0x0800c2b0
 8003274:	0800c2b8 	.word	0x0800c2b8
 8003278:	0800c2e0 	.word	0x0800c2e0
 800327c:	0800c2f0 	.word	0x0800c2f0
 8003280:	0800c2c8 	.word	0x0800c2c8
 8003284:	0800c2d4 	.word	0x0800c2d4
 8003288:	0800c2fc 	.word	0x0800c2fc
 800328c:	200022c2 	.word	0x200022c2
 8003290:	200001f4 	.word	0x200001f4

08003294 <UartHandlerTask>:

void UartHandlerTask(void *argument) {
 8003294:	b580      	push	{r7, lr}
 8003296:	b088      	sub	sp, #32
 8003298:	af00      	add	r7, sp, #0
 800329a:	6078      	str	r0, [r7, #4]
	uint32_t ulNotificationValue;
	static size_t old_pos = 0;  // Track the position of last character processed
    int counter = 0;
 800329c:	2300      	movs	r3, #0
 800329e:	61fb      	str	r3, [r7, #28]
	while(1)
	{
		counter = counter+1;
 80032a0:	69fb      	ldr	r3, [r7, #28]
 80032a2:	3301      	adds	r3, #1
 80032a4:	61fb      	str	r3, [r7, #28]
		// Wait for a task notification indicating an uart event
		if(xTaskNotifyWait(0x00, UINT32_MAX, &ulNotificationValue, portMAX_DELAY) == pdPASS) {
 80032a6:	f107 0210 	add.w	r2, r7, #16
 80032aa:	f04f 33ff 	mov.w	r3, #4294967295
 80032ae:	f04f 31ff 	mov.w	r1, #4294967295
 80032b2:	2000      	movs	r0, #0
 80032b4:	f006 fa98 	bl	80097e8 <xTaskNotifyWait>
 80032b8:	4603      	mov	r3, r0
 80032ba:	2b01      	cmp	r3, #1
 80032bc:	d1f0      	bne.n	80032a0 <UartHandlerTask+0xc>

			if(ulNotificationValue & UART1_IDLE_EVENT) // Received message from UART1
 80032be:	693b      	ldr	r3, [r7, #16]
 80032c0:	f003 0301 	and.w	r3, r3, #1
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d03e      	beq.n	8003346 <UartHandlerTask+0xb2>
			{
				size_t new_pos = BUFFER_SIZE - huart1.hdmarx->Instance->CNDTR;  // Compute the new position in the buffer
 80032c8:	4b44      	ldr	r3, [pc, #272]	; (80033dc <UartHandlerTask+0x148>)
 80032ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	685b      	ldr	r3, [r3, #4]
 80032d0:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
 80032d4:	61bb      	str	r3, [r7, #24]
				size_t length;

				if(new_pos != old_pos)  // Check if any new data is received
 80032d6:	4b42      	ldr	r3, [pc, #264]	; (80033e0 <UartHandlerTask+0x14c>)
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	69ba      	ldr	r2, [r7, #24]
 80032dc:	429a      	cmp	r2, r3
 80032de:	d032      	beq.n	8003346 <UartHandlerTask+0xb2>
				{
					if (new_pos > old_pos)  // If data does not wrap around the buffer
 80032e0:	4b3f      	ldr	r3, [pc, #252]	; (80033e0 <UartHandlerTask+0x14c>)
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	69ba      	ldr	r2, [r7, #24]
 80032e6:	429a      	cmp	r2, r3
 80032e8:	d910      	bls.n	800330c <UartHandlerTask+0x78>
					{
						length = new_pos - old_pos;
 80032ea:	4b3d      	ldr	r3, [pc, #244]	; (80033e0 <UartHandlerTask+0x14c>)
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	69ba      	ldr	r2, [r7, #24]
 80032f0:	1ad3      	subs	r3, r2, r3
 80032f2:	617b      	str	r3, [r7, #20]

						/*
						 * Process here (Not used, but still kept to keep the wifiCode pretty similar to the other clicks)
						 * */
						HAL_UART_Transmit(&huart2, &uart1Buffer[old_pos], length, HAL_MAX_DELAY);
 80032f4:	4b3a      	ldr	r3, [pc, #232]	; (80033e0 <UartHandlerTask+0x14c>)
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	4a3a      	ldr	r2, [pc, #232]	; (80033e4 <UartHandlerTask+0x150>)
 80032fa:	1899      	adds	r1, r3, r2
 80032fc:	697b      	ldr	r3, [r7, #20]
 80032fe:	b29a      	uxth	r2, r3
 8003300:	f04f 33ff 	mov.w	r3, #4294967295
 8003304:	4838      	ldr	r0, [pc, #224]	; (80033e8 <UartHandlerTask+0x154>)
 8003306:	f002 fbb3 	bl	8005a70 <HAL_UART_Transmit>
 800330a:	e019      	b.n	8003340 <UartHandlerTask+0xac>
					{
						/*
						 * Process here --> keep in mind, that the data has to be composed, as it wraps around the buffer
						 * */

						length = BUFFER_SIZE - old_pos;
 800330c:	4b34      	ldr	r3, [pc, #208]	; (80033e0 <UartHandlerTask+0x14c>)
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
 8003314:	617b      	str	r3, [r7, #20]
						HAL_UART_Transmit(&huart2, &uart1Buffer[old_pos], length, HAL_MAX_DELAY);
 8003316:	4b32      	ldr	r3, [pc, #200]	; (80033e0 <UartHandlerTask+0x14c>)
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	4a32      	ldr	r2, [pc, #200]	; (80033e4 <UartHandlerTask+0x150>)
 800331c:	1899      	adds	r1, r3, r2
 800331e:	697b      	ldr	r3, [r7, #20]
 8003320:	b29a      	uxth	r2, r3
 8003322:	f04f 33ff 	mov.w	r3, #4294967295
 8003326:	4830      	ldr	r0, [pc, #192]	; (80033e8 <UartHandlerTask+0x154>)
 8003328:	f002 fba2 	bl	8005a70 <HAL_UART_Transmit>

						length = new_pos;
 800332c:	69bb      	ldr	r3, [r7, #24]
 800332e:	617b      	str	r3, [r7, #20]
						HAL_UART_Transmit(&huart2, uart1Buffer, length, HAL_MAX_DELAY);
 8003330:	697b      	ldr	r3, [r7, #20]
 8003332:	b29a      	uxth	r2, r3
 8003334:	f04f 33ff 	mov.w	r3, #4294967295
 8003338:	492a      	ldr	r1, [pc, #168]	; (80033e4 <UartHandlerTask+0x150>)
 800333a:	482b      	ldr	r0, [pc, #172]	; (80033e8 <UartHandlerTask+0x154>)
 800333c:	f002 fb98 	bl	8005a70 <HAL_UART_Transmit>
					}

					old_pos = new_pos;  // Update the position of the last character processed
 8003340:	4a27      	ldr	r2, [pc, #156]	; (80033e0 <UartHandlerTask+0x14c>)
 8003342:	69bb      	ldr	r3, [r7, #24]
 8003344:	6013      	str	r3, [r2, #0]
				}
			}
			if(ulNotificationValue & UART2_EVENT) // Received CHARACTER from UART2
 8003346:	693b      	ldr	r3, [r7, #16]
 8003348:	f003 0302 	and.w	r3, r3, #2
 800334c:	2b00      	cmp	r3, #0
 800334e:	d0a7      	beq.n	80032a0 <UartHandlerTask+0xc>
			{
				char c = (char)uart2_rx_char;
 8003350:	4b26      	ldr	r3, [pc, #152]	; (80033ec <UartHandlerTask+0x158>)
 8003352:	781b      	ldrb	r3, [r3, #0]
 8003354:	73fb      	strb	r3, [r7, #15]

				// Echo back the character to the terminal
				HAL_UART_Transmit_IT(&huart2, (uint8_t*)&c, 1);
 8003356:	f107 030f 	add.w	r3, r7, #15
 800335a:	2201      	movs	r2, #1
 800335c:	4619      	mov	r1, r3
 800335e:	4822      	ldr	r0, [pc, #136]	; (80033e8 <UartHandlerTask+0x154>)
 8003360:	f002 fcec 	bl	8005d3c <HAL_UART_Transmit_IT>

				// If newline, forward the buffer to UART1 and reset buffer
				if(c == '\r')
 8003364:	7bfb      	ldrb	r3, [r7, #15]
 8003366:	2b0d      	cmp	r3, #13
 8003368:	d12c      	bne.n	80033c4 <UartHandlerTask+0x130>
				{
					uart2Buffer[uart2BufferIndex++] = '\r';
 800336a:	4b21      	ldr	r3, [pc, #132]	; (80033f0 <UartHandlerTask+0x15c>)
 800336c:	881b      	ldrh	r3, [r3, #0]
 800336e:	1c5a      	adds	r2, r3, #1
 8003370:	b291      	uxth	r1, r2
 8003372:	4a1f      	ldr	r2, [pc, #124]	; (80033f0 <UartHandlerTask+0x15c>)
 8003374:	8011      	strh	r1, [r2, #0]
 8003376:	461a      	mov	r2, r3
 8003378:	4b1e      	ldr	r3, [pc, #120]	; (80033f4 <UartHandlerTask+0x160>)
 800337a:	210d      	movs	r1, #13
 800337c:	5499      	strb	r1, [r3, r2]
					uart2Buffer[uart2BufferIndex++] = '\n';
 800337e:	4b1c      	ldr	r3, [pc, #112]	; (80033f0 <UartHandlerTask+0x15c>)
 8003380:	881b      	ldrh	r3, [r3, #0]
 8003382:	1c5a      	adds	r2, r3, #1
 8003384:	b291      	uxth	r1, r2
 8003386:	4a1a      	ldr	r2, [pc, #104]	; (80033f0 <UartHandlerTask+0x15c>)
 8003388:	8011      	strh	r1, [r2, #0]
 800338a:	461a      	mov	r2, r3
 800338c:	4b19      	ldr	r3, [pc, #100]	; (80033f4 <UartHandlerTask+0x160>)
 800338e:	210a      	movs	r1, #10
 8003390:	5499      	strb	r1, [r3, r2]
					HAL_UART_Transmit_IT(&huart2, (uint8_t*)newLine, 2);
 8003392:	4b19      	ldr	r3, [pc, #100]	; (80033f8 <UartHandlerTask+0x164>)
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	2202      	movs	r2, #2
 8003398:	4619      	mov	r1, r3
 800339a:	4813      	ldr	r0, [pc, #76]	; (80033e8 <UartHandlerTask+0x154>)
 800339c:	f002 fcce 	bl	8005d3c <HAL_UART_Transmit_IT>
					HAL_UART_Transmit(&huart1, uart2Buffer, uart2BufferIndex, HAL_MAX_DELAY);
 80033a0:	4b13      	ldr	r3, [pc, #76]	; (80033f0 <UartHandlerTask+0x15c>)
 80033a2:	881a      	ldrh	r2, [r3, #0]
 80033a4:	f04f 33ff 	mov.w	r3, #4294967295
 80033a8:	4912      	ldr	r1, [pc, #72]	; (80033f4 <UartHandlerTask+0x160>)
 80033aa:	480c      	ldr	r0, [pc, #48]	; (80033dc <UartHandlerTask+0x148>)
 80033ac:	f002 fb60 	bl	8005a70 <HAL_UART_Transmit>
					memset(uart2Buffer, 0, BUFFER_SIZE);
 80033b0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80033b4:	2100      	movs	r1, #0
 80033b6:	480f      	ldr	r0, [pc, #60]	; (80033f4 <UartHandlerTask+0x160>)
 80033b8:	f007 fc69 	bl	800ac8e <memset>
					uart2BufferIndex = 0;
 80033bc:	4b0c      	ldr	r3, [pc, #48]	; (80033f0 <UartHandlerTask+0x15c>)
 80033be:	2200      	movs	r2, #0
 80033c0:	801a      	strh	r2, [r3, #0]
 80033c2:	e76d      	b.n	80032a0 <UartHandlerTask+0xc>
				}
				else
				{
					uart2Buffer[uart2BufferIndex++] = c;
 80033c4:	4b0a      	ldr	r3, [pc, #40]	; (80033f0 <UartHandlerTask+0x15c>)
 80033c6:	881b      	ldrh	r3, [r3, #0]
 80033c8:	1c5a      	adds	r2, r3, #1
 80033ca:	b291      	uxth	r1, r2
 80033cc:	4a08      	ldr	r2, [pc, #32]	; (80033f0 <UartHandlerTask+0x15c>)
 80033ce:	8011      	strh	r1, [r2, #0]
 80033d0:	461a      	mov	r2, r3
 80033d2:	7bf9      	ldrb	r1, [r7, #15]
 80033d4:	4b07      	ldr	r3, [pc, #28]	; (80033f4 <UartHandlerTask+0x160>)
 80033d6:	5499      	strb	r1, [r3, r2]
		counter = counter+1;
 80033d8:	e762      	b.n	80032a0 <UartHandlerTask+0xc>
 80033da:	bf00      	nop
 80033dc:	20000170 	.word	0x20000170
 80033e0:	20002348 	.word	0x20002348
 80033e4:	200002c0 	.word	0x200002c0
 80033e8:	200001f4 	.word	0x200001f4
 80033ec:	200022c2 	.word	0x200022c2
 80033f0:	200022c0 	.word	0x200022c0
 80033f4:	200012c0 	.word	0x200012c0
 80033f8:	20000008 	.word	0x20000008

080033fc <HAL_UART_RxCpltCallback>:
	}
}

// Interrupt callback routine for UART
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80033fc:	b580      	push	{r7, lr}
 80033fe:	b086      	sub	sp, #24
 8003400:	af02      	add	r7, sp, #8
 8003402:	6078      	str	r0, [r7, #4]
  if(huart->Instance == USART2) {
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	4a11      	ldr	r2, [pc, #68]	; (8003450 <HAL_UART_RxCpltCallback+0x54>)
 800340a:	4293      	cmp	r3, r2
 800340c:	d11b      	bne.n	8003446 <HAL_UART_RxCpltCallback+0x4a>
	  BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 800340e:	2300      	movs	r3, #0
 8003410:	60fb      	str	r3, [r7, #12]
	  xTaskNotifyFromISR(xUartTaskHandle, UART2_EVENT, eSetBits, &xHigherPriorityTaskWoken);
 8003412:	4b10      	ldr	r3, [pc, #64]	; (8003454 <HAL_UART_RxCpltCallback+0x58>)
 8003414:	6818      	ldr	r0, [r3, #0]
 8003416:	f107 030c 	add.w	r3, r7, #12
 800341a:	9300      	str	r3, [sp, #0]
 800341c:	2300      	movs	r3, #0
 800341e:	2201      	movs	r2, #1
 8003420:	2102      	movs	r1, #2
 8003422:	f006 fa41 	bl	80098a8 <xTaskGenericNotifyFromISR>
	  portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	2b00      	cmp	r3, #0
 800342a:	d007      	beq.n	800343c <HAL_UART_RxCpltCallback+0x40>
 800342c:	4b0a      	ldr	r3, [pc, #40]	; (8003458 <HAL_UART_RxCpltCallback+0x5c>)
 800342e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003432:	601a      	str	r2, [r3, #0]
 8003434:	f3bf 8f4f 	dsb	sy
 8003438:	f3bf 8f6f 	isb	sy

	  HAL_UART_Receive_IT(&huart2, &uart2_rx_char, 1);
 800343c:	2201      	movs	r2, #1
 800343e:	4907      	ldr	r1, [pc, #28]	; (800345c <HAL_UART_RxCpltCallback+0x60>)
 8003440:	4807      	ldr	r0, [pc, #28]	; (8003460 <HAL_UART_RxCpltCallback+0x64>)
 8003442:	f002 fce9 	bl	8005e18 <HAL_UART_Receive_IT>
  }
}
 8003446:	bf00      	nop
 8003448:	3710      	adds	r7, #16
 800344a:	46bd      	mov	sp, r7
 800344c:	bd80      	pop	{r7, pc}
 800344e:	bf00      	nop
 8003450:	40004400 	.word	0x40004400
 8003454:	200022c4 	.word	0x200022c4
 8003458:	e000ed04 	.word	0xe000ed04
 800345c:	200022c2 	.word	0x200022c2
 8003460:	200001f4 	.word	0x200001f4

08003464 <SendATCommand>:

void SendATCommand(char *command, int length) {
 8003464:	b580      	push	{r7, lr}
 8003466:	b082      	sub	sp, #8
 8003468:	af00      	add	r7, sp, #0
 800346a:	6078      	str	r0, [r7, #4]
 800346c:	6039      	str	r1, [r7, #0]
	taskENTER_CRITICAL();
 800346e:	f006 ffd1 	bl	800a414 <vPortEnterCritical>
	HAL_UART_Transmit(&huart1, (uint8_t*)command, length, HAL_MAX_DELAY);
 8003472:	683b      	ldr	r3, [r7, #0]
 8003474:	b29a      	uxth	r2, r3
 8003476:	f04f 33ff 	mov.w	r3, #4294967295
 800347a:	6879      	ldr	r1, [r7, #4]
 800347c:	4804      	ldr	r0, [pc, #16]	; (8003490 <SendATCommand+0x2c>)
 800347e:	f002 faf7 	bl	8005a70 <HAL_UART_Transmit>
	taskEXIT_CRITICAL();
 8003482:	f006 fff7 	bl	800a474 <vPortExitCritical>
}
 8003486:	bf00      	nop
 8003488:	3708      	adds	r7, #8
 800348a:	46bd      	mov	sp, r7
 800348c:	bd80      	pop	{r7, pc}
 800348e:	bf00      	nop
 8003490:	20000170 	.word	0x20000170

08003494 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8003494:	f8df d034 	ldr.w	sp, [pc, #52]	; 80034cc <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8003498:	f7ff fcfe 	bl	8002e98 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800349c:	480c      	ldr	r0, [pc, #48]	; (80034d0 <LoopForever+0x6>)
  ldr r1, =_edata
 800349e:	490d      	ldr	r1, [pc, #52]	; (80034d4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80034a0:	4a0d      	ldr	r2, [pc, #52]	; (80034d8 <LoopForever+0xe>)
  movs r3, #0
 80034a2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80034a4:	e002      	b.n	80034ac <LoopCopyDataInit>

080034a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80034a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80034a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80034aa:	3304      	adds	r3, #4

080034ac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80034ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80034ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80034b0:	d3f9      	bcc.n	80034a6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80034b2:	4a0a      	ldr	r2, [pc, #40]	; (80034dc <LoopForever+0x12>)
  ldr r4, =_ebss
 80034b4:	4c0a      	ldr	r4, [pc, #40]	; (80034e0 <LoopForever+0x16>)
  movs r3, #0
 80034b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80034b8:	e001      	b.n	80034be <LoopFillZerobss>

080034ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80034ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80034bc:	3204      	adds	r2, #4

080034be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80034be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80034c0:	d3fb      	bcc.n	80034ba <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80034c2:	f007 fbaf 	bl	800ac24 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80034c6:	f7fd ff5f 	bl	8001388 <main>

080034ca <LoopForever>:

LoopForever:
    b LoopForever
 80034ca:	e7fe      	b.n	80034ca <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80034cc:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80034d0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80034d4:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 80034d8:	0800c4f8 	.word	0x0800c4f8
  ldr r2, =_sbss
 80034dc:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 80034e0:	20005e80 	.word	0x20005e80

080034e4 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80034e4:	e7fe      	b.n	80034e4 <ADC1_IRQHandler>

080034e6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80034e6:	b580      	push	{r7, lr}
 80034e8:	b082      	sub	sp, #8
 80034ea:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80034ec:	2300      	movs	r3, #0
 80034ee:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80034f0:	2003      	movs	r0, #3
 80034f2:	f000 f8de 	bl	80036b2 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80034f6:	200f      	movs	r0, #15
 80034f8:	f7ff fb8a 	bl	8002c10 <HAL_InitTick>
 80034fc:	4603      	mov	r3, r0
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d002      	beq.n	8003508 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8003502:	2301      	movs	r3, #1
 8003504:	71fb      	strb	r3, [r7, #7]
 8003506:	e001      	b.n	800350c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003508:	f7ff fb5a 	bl	8002bc0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800350c:	79fb      	ldrb	r3, [r7, #7]
}
 800350e:	4618      	mov	r0, r3
 8003510:	3708      	adds	r7, #8
 8003512:	46bd      	mov	sp, r7
 8003514:	bd80      	pop	{r7, pc}
	...

08003518 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003518:	b480      	push	{r7}
 800351a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800351c:	4b06      	ldr	r3, [pc, #24]	; (8003538 <HAL_IncTick+0x20>)
 800351e:	781b      	ldrb	r3, [r3, #0]
 8003520:	461a      	mov	r2, r3
 8003522:	4b06      	ldr	r3, [pc, #24]	; (800353c <HAL_IncTick+0x24>)
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	4413      	add	r3, r2
 8003528:	4a04      	ldr	r2, [pc, #16]	; (800353c <HAL_IncTick+0x24>)
 800352a:	6013      	str	r3, [r2, #0]
}
 800352c:	bf00      	nop
 800352e:	46bd      	mov	sp, r7
 8003530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003534:	4770      	bx	lr
 8003536:	bf00      	nop
 8003538:	20000010 	.word	0x20000010
 800353c:	2000234c 	.word	0x2000234c

08003540 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003540:	b480      	push	{r7}
 8003542:	af00      	add	r7, sp, #0
  return uwTick;
 8003544:	4b03      	ldr	r3, [pc, #12]	; (8003554 <HAL_GetTick+0x14>)
 8003546:	681b      	ldr	r3, [r3, #0]
}
 8003548:	4618      	mov	r0, r3
 800354a:	46bd      	mov	sp, r7
 800354c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003550:	4770      	bx	lr
 8003552:	bf00      	nop
 8003554:	2000234c 	.word	0x2000234c

08003558 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003558:	b480      	push	{r7}
 800355a:	b085      	sub	sp, #20
 800355c:	af00      	add	r7, sp, #0
 800355e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	f003 0307 	and.w	r3, r3, #7
 8003566:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003568:	4b0c      	ldr	r3, [pc, #48]	; (800359c <__NVIC_SetPriorityGrouping+0x44>)
 800356a:	68db      	ldr	r3, [r3, #12]
 800356c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800356e:	68ba      	ldr	r2, [r7, #8]
 8003570:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003574:	4013      	ands	r3, r2
 8003576:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800357c:	68bb      	ldr	r3, [r7, #8]
 800357e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003580:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003584:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003588:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800358a:	4a04      	ldr	r2, [pc, #16]	; (800359c <__NVIC_SetPriorityGrouping+0x44>)
 800358c:	68bb      	ldr	r3, [r7, #8]
 800358e:	60d3      	str	r3, [r2, #12]
}
 8003590:	bf00      	nop
 8003592:	3714      	adds	r7, #20
 8003594:	46bd      	mov	sp, r7
 8003596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800359a:	4770      	bx	lr
 800359c:	e000ed00 	.word	0xe000ed00

080035a0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80035a0:	b480      	push	{r7}
 80035a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80035a4:	4b04      	ldr	r3, [pc, #16]	; (80035b8 <__NVIC_GetPriorityGrouping+0x18>)
 80035a6:	68db      	ldr	r3, [r3, #12]
 80035a8:	0a1b      	lsrs	r3, r3, #8
 80035aa:	f003 0307 	and.w	r3, r3, #7
}
 80035ae:	4618      	mov	r0, r3
 80035b0:	46bd      	mov	sp, r7
 80035b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b6:	4770      	bx	lr
 80035b8:	e000ed00 	.word	0xe000ed00

080035bc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80035bc:	b480      	push	{r7}
 80035be:	b083      	sub	sp, #12
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	4603      	mov	r3, r0
 80035c4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80035c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	db0b      	blt.n	80035e6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80035ce:	79fb      	ldrb	r3, [r7, #7]
 80035d0:	f003 021f 	and.w	r2, r3, #31
 80035d4:	4907      	ldr	r1, [pc, #28]	; (80035f4 <__NVIC_EnableIRQ+0x38>)
 80035d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035da:	095b      	lsrs	r3, r3, #5
 80035dc:	2001      	movs	r0, #1
 80035de:	fa00 f202 	lsl.w	r2, r0, r2
 80035e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80035e6:	bf00      	nop
 80035e8:	370c      	adds	r7, #12
 80035ea:	46bd      	mov	sp, r7
 80035ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f0:	4770      	bx	lr
 80035f2:	bf00      	nop
 80035f4:	e000e100 	.word	0xe000e100

080035f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80035f8:	b480      	push	{r7}
 80035fa:	b083      	sub	sp, #12
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	4603      	mov	r3, r0
 8003600:	6039      	str	r1, [r7, #0]
 8003602:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003604:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003608:	2b00      	cmp	r3, #0
 800360a:	db0a      	blt.n	8003622 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800360c:	683b      	ldr	r3, [r7, #0]
 800360e:	b2da      	uxtb	r2, r3
 8003610:	490c      	ldr	r1, [pc, #48]	; (8003644 <__NVIC_SetPriority+0x4c>)
 8003612:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003616:	0112      	lsls	r2, r2, #4
 8003618:	b2d2      	uxtb	r2, r2
 800361a:	440b      	add	r3, r1
 800361c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003620:	e00a      	b.n	8003638 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003622:	683b      	ldr	r3, [r7, #0]
 8003624:	b2da      	uxtb	r2, r3
 8003626:	4908      	ldr	r1, [pc, #32]	; (8003648 <__NVIC_SetPriority+0x50>)
 8003628:	79fb      	ldrb	r3, [r7, #7]
 800362a:	f003 030f 	and.w	r3, r3, #15
 800362e:	3b04      	subs	r3, #4
 8003630:	0112      	lsls	r2, r2, #4
 8003632:	b2d2      	uxtb	r2, r2
 8003634:	440b      	add	r3, r1
 8003636:	761a      	strb	r2, [r3, #24]
}
 8003638:	bf00      	nop
 800363a:	370c      	adds	r7, #12
 800363c:	46bd      	mov	sp, r7
 800363e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003642:	4770      	bx	lr
 8003644:	e000e100 	.word	0xe000e100
 8003648:	e000ed00 	.word	0xe000ed00

0800364c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800364c:	b480      	push	{r7}
 800364e:	b089      	sub	sp, #36	; 0x24
 8003650:	af00      	add	r7, sp, #0
 8003652:	60f8      	str	r0, [r7, #12]
 8003654:	60b9      	str	r1, [r7, #8]
 8003656:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	f003 0307 	and.w	r3, r3, #7
 800365e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003660:	69fb      	ldr	r3, [r7, #28]
 8003662:	f1c3 0307 	rsb	r3, r3, #7
 8003666:	2b04      	cmp	r3, #4
 8003668:	bf28      	it	cs
 800366a:	2304      	movcs	r3, #4
 800366c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800366e:	69fb      	ldr	r3, [r7, #28]
 8003670:	3304      	adds	r3, #4
 8003672:	2b06      	cmp	r3, #6
 8003674:	d902      	bls.n	800367c <NVIC_EncodePriority+0x30>
 8003676:	69fb      	ldr	r3, [r7, #28]
 8003678:	3b03      	subs	r3, #3
 800367a:	e000      	b.n	800367e <NVIC_EncodePriority+0x32>
 800367c:	2300      	movs	r3, #0
 800367e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003680:	f04f 32ff 	mov.w	r2, #4294967295
 8003684:	69bb      	ldr	r3, [r7, #24]
 8003686:	fa02 f303 	lsl.w	r3, r2, r3
 800368a:	43da      	mvns	r2, r3
 800368c:	68bb      	ldr	r3, [r7, #8]
 800368e:	401a      	ands	r2, r3
 8003690:	697b      	ldr	r3, [r7, #20]
 8003692:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003694:	f04f 31ff 	mov.w	r1, #4294967295
 8003698:	697b      	ldr	r3, [r7, #20]
 800369a:	fa01 f303 	lsl.w	r3, r1, r3
 800369e:	43d9      	mvns	r1, r3
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80036a4:	4313      	orrs	r3, r2
         );
}
 80036a6:	4618      	mov	r0, r3
 80036a8:	3724      	adds	r7, #36	; 0x24
 80036aa:	46bd      	mov	sp, r7
 80036ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b0:	4770      	bx	lr

080036b2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80036b2:	b580      	push	{r7, lr}
 80036b4:	b082      	sub	sp, #8
 80036b6:	af00      	add	r7, sp, #0
 80036b8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80036ba:	6878      	ldr	r0, [r7, #4]
 80036bc:	f7ff ff4c 	bl	8003558 <__NVIC_SetPriorityGrouping>
}
 80036c0:	bf00      	nop
 80036c2:	3708      	adds	r7, #8
 80036c4:	46bd      	mov	sp, r7
 80036c6:	bd80      	pop	{r7, pc}

080036c8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80036c8:	b580      	push	{r7, lr}
 80036ca:	b086      	sub	sp, #24
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	4603      	mov	r3, r0
 80036d0:	60b9      	str	r1, [r7, #8]
 80036d2:	607a      	str	r2, [r7, #4]
 80036d4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80036d6:	2300      	movs	r3, #0
 80036d8:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80036da:	f7ff ff61 	bl	80035a0 <__NVIC_GetPriorityGrouping>
 80036de:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80036e0:	687a      	ldr	r2, [r7, #4]
 80036e2:	68b9      	ldr	r1, [r7, #8]
 80036e4:	6978      	ldr	r0, [r7, #20]
 80036e6:	f7ff ffb1 	bl	800364c <NVIC_EncodePriority>
 80036ea:	4602      	mov	r2, r0
 80036ec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80036f0:	4611      	mov	r1, r2
 80036f2:	4618      	mov	r0, r3
 80036f4:	f7ff ff80 	bl	80035f8 <__NVIC_SetPriority>
}
 80036f8:	bf00      	nop
 80036fa:	3718      	adds	r7, #24
 80036fc:	46bd      	mov	sp, r7
 80036fe:	bd80      	pop	{r7, pc}

08003700 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003700:	b580      	push	{r7, lr}
 8003702:	b082      	sub	sp, #8
 8003704:	af00      	add	r7, sp, #0
 8003706:	4603      	mov	r3, r0
 8003708:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800370a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800370e:	4618      	mov	r0, r3
 8003710:	f7ff ff54 	bl	80035bc <__NVIC_EnableIRQ>
}
 8003714:	bf00      	nop
 8003716:	3708      	adds	r7, #8
 8003718:	46bd      	mov	sp, r7
 800371a:	bd80      	pop	{r7, pc}

0800371c <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800371c:	b480      	push	{r7}
 800371e:	b085      	sub	sp, #20
 8003720:	af00      	add	r7, sp, #0
 8003722:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	2b00      	cmp	r3, #0
 8003728:	d101      	bne.n	800372e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800372a:	2301      	movs	r3, #1
 800372c:	e098      	b.n	8003860 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	461a      	mov	r2, r3
 8003734:	4b4d      	ldr	r3, [pc, #308]	; (800386c <HAL_DMA_Init+0x150>)
 8003736:	429a      	cmp	r2, r3
 8003738:	d80f      	bhi.n	800375a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	461a      	mov	r2, r3
 8003740:	4b4b      	ldr	r3, [pc, #300]	; (8003870 <HAL_DMA_Init+0x154>)
 8003742:	4413      	add	r3, r2
 8003744:	4a4b      	ldr	r2, [pc, #300]	; (8003874 <HAL_DMA_Init+0x158>)
 8003746:	fba2 2303 	umull	r2, r3, r2, r3
 800374a:	091b      	lsrs	r3, r3, #4
 800374c:	009a      	lsls	r2, r3, #2
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	4a48      	ldr	r2, [pc, #288]	; (8003878 <HAL_DMA_Init+0x15c>)
 8003756:	641a      	str	r2, [r3, #64]	; 0x40
 8003758:	e00e      	b.n	8003778 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	461a      	mov	r2, r3
 8003760:	4b46      	ldr	r3, [pc, #280]	; (800387c <HAL_DMA_Init+0x160>)
 8003762:	4413      	add	r3, r2
 8003764:	4a43      	ldr	r2, [pc, #268]	; (8003874 <HAL_DMA_Init+0x158>)
 8003766:	fba2 2303 	umull	r2, r3, r2, r3
 800376a:	091b      	lsrs	r3, r3, #4
 800376c:	009a      	lsls	r2, r3, #2
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	4a42      	ldr	r2, [pc, #264]	; (8003880 <HAL_DMA_Init+0x164>)
 8003776:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	2202      	movs	r2, #2
 800377c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800378e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003792:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800379c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	691b      	ldr	r3, [r3, #16]
 80037a2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80037a8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	699b      	ldr	r3, [r3, #24]
 80037ae:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80037b4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	6a1b      	ldr	r3, [r3, #32]
 80037ba:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80037bc:	68fa      	ldr	r2, [r7, #12]
 80037be:	4313      	orrs	r3, r2
 80037c0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	68fa      	ldr	r2, [r7, #12]
 80037c8:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	689b      	ldr	r3, [r3, #8]
 80037ce:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80037d2:	d039      	beq.n	8003848 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037d8:	4a27      	ldr	r2, [pc, #156]	; (8003878 <HAL_DMA_Init+0x15c>)
 80037da:	4293      	cmp	r3, r2
 80037dc:	d11a      	bne.n	8003814 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80037de:	4b29      	ldr	r3, [pc, #164]	; (8003884 <HAL_DMA_Init+0x168>)
 80037e0:	681a      	ldr	r2, [r3, #0]
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037e6:	f003 031c 	and.w	r3, r3, #28
 80037ea:	210f      	movs	r1, #15
 80037ec:	fa01 f303 	lsl.w	r3, r1, r3
 80037f0:	43db      	mvns	r3, r3
 80037f2:	4924      	ldr	r1, [pc, #144]	; (8003884 <HAL_DMA_Init+0x168>)
 80037f4:	4013      	ands	r3, r2
 80037f6:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80037f8:	4b22      	ldr	r3, [pc, #136]	; (8003884 <HAL_DMA_Init+0x168>)
 80037fa:	681a      	ldr	r2, [r3, #0]
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	6859      	ldr	r1, [r3, #4]
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003804:	f003 031c 	and.w	r3, r3, #28
 8003808:	fa01 f303 	lsl.w	r3, r1, r3
 800380c:	491d      	ldr	r1, [pc, #116]	; (8003884 <HAL_DMA_Init+0x168>)
 800380e:	4313      	orrs	r3, r2
 8003810:	600b      	str	r3, [r1, #0]
 8003812:	e019      	b.n	8003848 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8003814:	4b1c      	ldr	r3, [pc, #112]	; (8003888 <HAL_DMA_Init+0x16c>)
 8003816:	681a      	ldr	r2, [r3, #0]
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800381c:	f003 031c 	and.w	r3, r3, #28
 8003820:	210f      	movs	r1, #15
 8003822:	fa01 f303 	lsl.w	r3, r1, r3
 8003826:	43db      	mvns	r3, r3
 8003828:	4917      	ldr	r1, [pc, #92]	; (8003888 <HAL_DMA_Init+0x16c>)
 800382a:	4013      	ands	r3, r2
 800382c:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800382e:	4b16      	ldr	r3, [pc, #88]	; (8003888 <HAL_DMA_Init+0x16c>)
 8003830:	681a      	ldr	r2, [r3, #0]
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	6859      	ldr	r1, [r3, #4]
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800383a:	f003 031c 	and.w	r3, r3, #28
 800383e:	fa01 f303 	lsl.w	r3, r1, r3
 8003842:	4911      	ldr	r1, [pc, #68]	; (8003888 <HAL_DMA_Init+0x16c>)
 8003844:	4313      	orrs	r3, r2
 8003846:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	2200      	movs	r2, #0
 800384c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	2201      	movs	r2, #1
 8003852:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	2200      	movs	r2, #0
 800385a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800385e:	2300      	movs	r3, #0
}
 8003860:	4618      	mov	r0, r3
 8003862:	3714      	adds	r7, #20
 8003864:	46bd      	mov	sp, r7
 8003866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800386a:	4770      	bx	lr
 800386c:	40020407 	.word	0x40020407
 8003870:	bffdfff8 	.word	0xbffdfff8
 8003874:	cccccccd 	.word	0xcccccccd
 8003878:	40020000 	.word	0x40020000
 800387c:	bffdfbf8 	.word	0xbffdfbf8
 8003880:	40020400 	.word	0x40020400
 8003884:	400200a8 	.word	0x400200a8
 8003888:	400204a8 	.word	0x400204a8

0800388c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800388c:	b580      	push	{r7, lr}
 800388e:	b086      	sub	sp, #24
 8003890:	af00      	add	r7, sp, #0
 8003892:	60f8      	str	r0, [r7, #12]
 8003894:	60b9      	str	r1, [r7, #8]
 8003896:	607a      	str	r2, [r7, #4]
 8003898:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800389a:	2300      	movs	r3, #0
 800389c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80038a4:	2b01      	cmp	r3, #1
 80038a6:	d101      	bne.n	80038ac <HAL_DMA_Start_IT+0x20>
 80038a8:	2302      	movs	r3, #2
 80038aa:	e04b      	b.n	8003944 <HAL_DMA_Start_IT+0xb8>
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	2201      	movs	r2, #1
 80038b0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80038ba:	b2db      	uxtb	r3, r3
 80038bc:	2b01      	cmp	r3, #1
 80038be:	d13a      	bne.n	8003936 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	2202      	movs	r2, #2
 80038c4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	2200      	movs	r2, #0
 80038cc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	681a      	ldr	r2, [r3, #0]
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f022 0201 	bic.w	r2, r2, #1
 80038dc:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80038de:	683b      	ldr	r3, [r7, #0]
 80038e0:	687a      	ldr	r2, [r7, #4]
 80038e2:	68b9      	ldr	r1, [r7, #8]
 80038e4:	68f8      	ldr	r0, [r7, #12]
 80038e6:	f000 f95f 	bl	8003ba8 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d008      	beq.n	8003904 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	681a      	ldr	r2, [r3, #0]
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f042 020e 	orr.w	r2, r2, #14
 8003900:	601a      	str	r2, [r3, #0]
 8003902:	e00f      	b.n	8003924 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	681a      	ldr	r2, [r3, #0]
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f022 0204 	bic.w	r2, r2, #4
 8003912:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	681a      	ldr	r2, [r3, #0]
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f042 020a 	orr.w	r2, r2, #10
 8003922:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	681a      	ldr	r2, [r3, #0]
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f042 0201 	orr.w	r2, r2, #1
 8003932:	601a      	str	r2, [r3, #0]
 8003934:	e005      	b.n	8003942 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	2200      	movs	r2, #0
 800393a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800393e:	2302      	movs	r3, #2
 8003940:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8003942:	7dfb      	ldrb	r3, [r7, #23]
}
 8003944:	4618      	mov	r0, r3
 8003946:	3718      	adds	r7, #24
 8003948:	46bd      	mov	sp, r7
 800394a:	bd80      	pop	{r7, pc}

0800394c <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800394c:	b480      	push	{r7}
 800394e:	b085      	sub	sp, #20
 8003950:	af00      	add	r7, sp, #0
 8003952:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003954:	2300      	movs	r3, #0
 8003956:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800395e:	b2db      	uxtb	r3, r3
 8003960:	2b02      	cmp	r3, #2
 8003962:	d008      	beq.n	8003976 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	2204      	movs	r2, #4
 8003968:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	2200      	movs	r2, #0
 800396e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003972:	2301      	movs	r3, #1
 8003974:	e022      	b.n	80039bc <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	681a      	ldr	r2, [r3, #0]
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f022 020e 	bic.w	r2, r2, #14
 8003984:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	681a      	ldr	r2, [r3, #0]
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f022 0201 	bic.w	r2, r2, #1
 8003994:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800399a:	f003 021c 	and.w	r2, r3, #28
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039a2:	2101      	movs	r1, #1
 80039a4:	fa01 f202 	lsl.w	r2, r1, r2
 80039a8:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	2201      	movs	r2, #1
 80039ae:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	2200      	movs	r2, #0
 80039b6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 80039ba:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80039bc:	4618      	mov	r0, r3
 80039be:	3714      	adds	r7, #20
 80039c0:	46bd      	mov	sp, r7
 80039c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c6:	4770      	bx	lr

080039c8 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80039c8:	b580      	push	{r7, lr}
 80039ca:	b084      	sub	sp, #16
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80039d0:	2300      	movs	r3, #0
 80039d2:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80039da:	b2db      	uxtb	r3, r3
 80039dc:	2b02      	cmp	r3, #2
 80039de:	d005      	beq.n	80039ec <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	2204      	movs	r2, #4
 80039e4:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80039e6:	2301      	movs	r3, #1
 80039e8:	73fb      	strb	r3, [r7, #15]
 80039ea:	e029      	b.n	8003a40 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	681a      	ldr	r2, [r3, #0]
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f022 020e 	bic.w	r2, r2, #14
 80039fa:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	681a      	ldr	r2, [r3, #0]
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f022 0201 	bic.w	r2, r2, #1
 8003a0a:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a10:	f003 021c 	and.w	r2, r3, #28
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a18:	2101      	movs	r1, #1
 8003a1a:	fa01 f202 	lsl.w	r2, r1, r2
 8003a1e:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	2201      	movs	r2, #1
 8003a24:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	2200      	movs	r2, #0
 8003a2c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d003      	beq.n	8003a40 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a3c:	6878      	ldr	r0, [r7, #4]
 8003a3e:	4798      	blx	r3
    }
  }
  return status;
 8003a40:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a42:	4618      	mov	r0, r3
 8003a44:	3710      	adds	r7, #16
 8003a46:	46bd      	mov	sp, r7
 8003a48:	bd80      	pop	{r7, pc}

08003a4a <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003a4a:	b580      	push	{r7, lr}
 8003a4c:	b084      	sub	sp, #16
 8003a4e:	af00      	add	r7, sp, #0
 8003a50:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a66:	f003 031c 	and.w	r3, r3, #28
 8003a6a:	2204      	movs	r2, #4
 8003a6c:	409a      	lsls	r2, r3
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	4013      	ands	r3, r2
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d026      	beq.n	8003ac4 <HAL_DMA_IRQHandler+0x7a>
 8003a76:	68bb      	ldr	r3, [r7, #8]
 8003a78:	f003 0304 	and.w	r3, r3, #4
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d021      	beq.n	8003ac4 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	f003 0320 	and.w	r3, r3, #32
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d107      	bne.n	8003a9e <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	681a      	ldr	r2, [r3, #0]
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f022 0204 	bic.w	r2, r2, #4
 8003a9c:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003aa2:	f003 021c 	and.w	r2, r3, #28
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aaa:	2104      	movs	r1, #4
 8003aac:	fa01 f202 	lsl.w	r2, r1, r2
 8003ab0:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d071      	beq.n	8003b9e <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003abe:	6878      	ldr	r0, [r7, #4]
 8003ac0:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8003ac2:	e06c      	b.n	8003b9e <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ac8:	f003 031c 	and.w	r3, r3, #28
 8003acc:	2202      	movs	r2, #2
 8003ace:	409a      	lsls	r2, r3
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	4013      	ands	r3, r2
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d02e      	beq.n	8003b36 <HAL_DMA_IRQHandler+0xec>
 8003ad8:	68bb      	ldr	r3, [r7, #8]
 8003ada:	f003 0302 	and.w	r3, r3, #2
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d029      	beq.n	8003b36 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	f003 0320 	and.w	r3, r3, #32
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d10b      	bne.n	8003b08 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	681a      	ldr	r2, [r3, #0]
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f022 020a 	bic.w	r2, r2, #10
 8003afe:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	2201      	movs	r2, #1
 8003b04:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b0c:	f003 021c 	and.w	r2, r3, #28
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b14:	2102      	movs	r1, #2
 8003b16:	fa01 f202 	lsl.w	r2, r1, r2
 8003b1a:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	2200      	movs	r2, #0
 8003b20:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d038      	beq.n	8003b9e <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b30:	6878      	ldr	r0, [r7, #4]
 8003b32:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8003b34:	e033      	b.n	8003b9e <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b3a:	f003 031c 	and.w	r3, r3, #28
 8003b3e:	2208      	movs	r2, #8
 8003b40:	409a      	lsls	r2, r3
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	4013      	ands	r3, r2
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d02a      	beq.n	8003ba0 <HAL_DMA_IRQHandler+0x156>
 8003b4a:	68bb      	ldr	r3, [r7, #8]
 8003b4c:	f003 0308 	and.w	r3, r3, #8
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d025      	beq.n	8003ba0 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	681a      	ldr	r2, [r3, #0]
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f022 020e 	bic.w	r2, r2, #14
 8003b62:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b68:	f003 021c 	and.w	r2, r3, #28
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b70:	2101      	movs	r1, #1
 8003b72:	fa01 f202 	lsl.w	r2, r1, r2
 8003b76:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	2201      	movs	r2, #1
 8003b7c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	2201      	movs	r2, #1
 8003b82:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	2200      	movs	r2, #0
 8003b8a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d004      	beq.n	8003ba0 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b9a:	6878      	ldr	r0, [r7, #4]
 8003b9c:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003b9e:	bf00      	nop
 8003ba0:	bf00      	nop
}
 8003ba2:	3710      	adds	r7, #16
 8003ba4:	46bd      	mov	sp, r7
 8003ba6:	bd80      	pop	{r7, pc}

08003ba8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003ba8:	b480      	push	{r7}
 8003baa:	b085      	sub	sp, #20
 8003bac:	af00      	add	r7, sp, #0
 8003bae:	60f8      	str	r0, [r7, #12]
 8003bb0:	60b9      	str	r1, [r7, #8]
 8003bb2:	607a      	str	r2, [r7, #4]
 8003bb4:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bba:	f003 021c 	and.w	r2, r3, #28
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bc2:	2101      	movs	r1, #1
 8003bc4:	fa01 f202 	lsl.w	r2, r1, r2
 8003bc8:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	683a      	ldr	r2, [r7, #0]
 8003bd0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	689b      	ldr	r3, [r3, #8]
 8003bd6:	2b10      	cmp	r3, #16
 8003bd8:	d108      	bne.n	8003bec <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	687a      	ldr	r2, [r7, #4]
 8003be0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	68ba      	ldr	r2, [r7, #8]
 8003be8:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003bea:	e007      	b.n	8003bfc <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	68ba      	ldr	r2, [r7, #8]
 8003bf2:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	687a      	ldr	r2, [r7, #4]
 8003bfa:	60da      	str	r2, [r3, #12]
}
 8003bfc:	bf00      	nop
 8003bfe:	3714      	adds	r7, #20
 8003c00:	46bd      	mov	sp, r7
 8003c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c06:	4770      	bx	lr

08003c08 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003c08:	b480      	push	{r7}
 8003c0a:	b087      	sub	sp, #28
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	6078      	str	r0, [r7, #4]
 8003c10:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003c12:	2300      	movs	r3, #0
 8003c14:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003c16:	e148      	b.n	8003eaa <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003c18:	683b      	ldr	r3, [r7, #0]
 8003c1a:	681a      	ldr	r2, [r3, #0]
 8003c1c:	2101      	movs	r1, #1
 8003c1e:	697b      	ldr	r3, [r7, #20]
 8003c20:	fa01 f303 	lsl.w	r3, r1, r3
 8003c24:	4013      	ands	r3, r2
 8003c26:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	f000 813a 	beq.w	8003ea4 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003c30:	683b      	ldr	r3, [r7, #0]
 8003c32:	685b      	ldr	r3, [r3, #4]
 8003c34:	f003 0303 	and.w	r3, r3, #3
 8003c38:	2b01      	cmp	r3, #1
 8003c3a:	d005      	beq.n	8003c48 <HAL_GPIO_Init+0x40>
 8003c3c:	683b      	ldr	r3, [r7, #0]
 8003c3e:	685b      	ldr	r3, [r3, #4]
 8003c40:	f003 0303 	and.w	r3, r3, #3
 8003c44:	2b02      	cmp	r3, #2
 8003c46:	d130      	bne.n	8003caa <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	689b      	ldr	r3, [r3, #8]
 8003c4c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003c4e:	697b      	ldr	r3, [r7, #20]
 8003c50:	005b      	lsls	r3, r3, #1
 8003c52:	2203      	movs	r2, #3
 8003c54:	fa02 f303 	lsl.w	r3, r2, r3
 8003c58:	43db      	mvns	r3, r3
 8003c5a:	693a      	ldr	r2, [r7, #16]
 8003c5c:	4013      	ands	r3, r2
 8003c5e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003c60:	683b      	ldr	r3, [r7, #0]
 8003c62:	68da      	ldr	r2, [r3, #12]
 8003c64:	697b      	ldr	r3, [r7, #20]
 8003c66:	005b      	lsls	r3, r3, #1
 8003c68:	fa02 f303 	lsl.w	r3, r2, r3
 8003c6c:	693a      	ldr	r2, [r7, #16]
 8003c6e:	4313      	orrs	r3, r2
 8003c70:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	693a      	ldr	r2, [r7, #16]
 8003c76:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	685b      	ldr	r3, [r3, #4]
 8003c7c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003c7e:	2201      	movs	r2, #1
 8003c80:	697b      	ldr	r3, [r7, #20]
 8003c82:	fa02 f303 	lsl.w	r3, r2, r3
 8003c86:	43db      	mvns	r3, r3
 8003c88:	693a      	ldr	r2, [r7, #16]
 8003c8a:	4013      	ands	r3, r2
 8003c8c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003c8e:	683b      	ldr	r3, [r7, #0]
 8003c90:	685b      	ldr	r3, [r3, #4]
 8003c92:	091b      	lsrs	r3, r3, #4
 8003c94:	f003 0201 	and.w	r2, r3, #1
 8003c98:	697b      	ldr	r3, [r7, #20]
 8003c9a:	fa02 f303 	lsl.w	r3, r2, r3
 8003c9e:	693a      	ldr	r2, [r7, #16]
 8003ca0:	4313      	orrs	r3, r2
 8003ca2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	693a      	ldr	r2, [r7, #16]
 8003ca8:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003caa:	683b      	ldr	r3, [r7, #0]
 8003cac:	685b      	ldr	r3, [r3, #4]
 8003cae:	f003 0303 	and.w	r3, r3, #3
 8003cb2:	2b03      	cmp	r3, #3
 8003cb4:	d017      	beq.n	8003ce6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	68db      	ldr	r3, [r3, #12]
 8003cba:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003cbc:	697b      	ldr	r3, [r7, #20]
 8003cbe:	005b      	lsls	r3, r3, #1
 8003cc0:	2203      	movs	r2, #3
 8003cc2:	fa02 f303 	lsl.w	r3, r2, r3
 8003cc6:	43db      	mvns	r3, r3
 8003cc8:	693a      	ldr	r2, [r7, #16]
 8003cca:	4013      	ands	r3, r2
 8003ccc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003cce:	683b      	ldr	r3, [r7, #0]
 8003cd0:	689a      	ldr	r2, [r3, #8]
 8003cd2:	697b      	ldr	r3, [r7, #20]
 8003cd4:	005b      	lsls	r3, r3, #1
 8003cd6:	fa02 f303 	lsl.w	r3, r2, r3
 8003cda:	693a      	ldr	r2, [r7, #16]
 8003cdc:	4313      	orrs	r3, r2
 8003cde:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	693a      	ldr	r2, [r7, #16]
 8003ce4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003ce6:	683b      	ldr	r3, [r7, #0]
 8003ce8:	685b      	ldr	r3, [r3, #4]
 8003cea:	f003 0303 	and.w	r3, r3, #3
 8003cee:	2b02      	cmp	r3, #2
 8003cf0:	d123      	bne.n	8003d3a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003cf2:	697b      	ldr	r3, [r7, #20]
 8003cf4:	08da      	lsrs	r2, r3, #3
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	3208      	adds	r2, #8
 8003cfa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003cfe:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003d00:	697b      	ldr	r3, [r7, #20]
 8003d02:	f003 0307 	and.w	r3, r3, #7
 8003d06:	009b      	lsls	r3, r3, #2
 8003d08:	220f      	movs	r2, #15
 8003d0a:	fa02 f303 	lsl.w	r3, r2, r3
 8003d0e:	43db      	mvns	r3, r3
 8003d10:	693a      	ldr	r2, [r7, #16]
 8003d12:	4013      	ands	r3, r2
 8003d14:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003d16:	683b      	ldr	r3, [r7, #0]
 8003d18:	691a      	ldr	r2, [r3, #16]
 8003d1a:	697b      	ldr	r3, [r7, #20]
 8003d1c:	f003 0307 	and.w	r3, r3, #7
 8003d20:	009b      	lsls	r3, r3, #2
 8003d22:	fa02 f303 	lsl.w	r3, r2, r3
 8003d26:	693a      	ldr	r2, [r7, #16]
 8003d28:	4313      	orrs	r3, r2
 8003d2a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003d2c:	697b      	ldr	r3, [r7, #20]
 8003d2e:	08da      	lsrs	r2, r3, #3
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	3208      	adds	r2, #8
 8003d34:	6939      	ldr	r1, [r7, #16]
 8003d36:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003d40:	697b      	ldr	r3, [r7, #20]
 8003d42:	005b      	lsls	r3, r3, #1
 8003d44:	2203      	movs	r2, #3
 8003d46:	fa02 f303 	lsl.w	r3, r2, r3
 8003d4a:	43db      	mvns	r3, r3
 8003d4c:	693a      	ldr	r2, [r7, #16]
 8003d4e:	4013      	ands	r3, r2
 8003d50:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003d52:	683b      	ldr	r3, [r7, #0]
 8003d54:	685b      	ldr	r3, [r3, #4]
 8003d56:	f003 0203 	and.w	r2, r3, #3
 8003d5a:	697b      	ldr	r3, [r7, #20]
 8003d5c:	005b      	lsls	r3, r3, #1
 8003d5e:	fa02 f303 	lsl.w	r3, r2, r3
 8003d62:	693a      	ldr	r2, [r7, #16]
 8003d64:	4313      	orrs	r3, r2
 8003d66:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	693a      	ldr	r2, [r7, #16]
 8003d6c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003d6e:	683b      	ldr	r3, [r7, #0]
 8003d70:	685b      	ldr	r3, [r3, #4]
 8003d72:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	f000 8094 	beq.w	8003ea4 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003d7c:	4b52      	ldr	r3, [pc, #328]	; (8003ec8 <HAL_GPIO_Init+0x2c0>)
 8003d7e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d80:	4a51      	ldr	r2, [pc, #324]	; (8003ec8 <HAL_GPIO_Init+0x2c0>)
 8003d82:	f043 0301 	orr.w	r3, r3, #1
 8003d86:	6613      	str	r3, [r2, #96]	; 0x60
 8003d88:	4b4f      	ldr	r3, [pc, #316]	; (8003ec8 <HAL_GPIO_Init+0x2c0>)
 8003d8a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d8c:	f003 0301 	and.w	r3, r3, #1
 8003d90:	60bb      	str	r3, [r7, #8]
 8003d92:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003d94:	4a4d      	ldr	r2, [pc, #308]	; (8003ecc <HAL_GPIO_Init+0x2c4>)
 8003d96:	697b      	ldr	r3, [r7, #20]
 8003d98:	089b      	lsrs	r3, r3, #2
 8003d9a:	3302      	adds	r3, #2
 8003d9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003da0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003da2:	697b      	ldr	r3, [r7, #20]
 8003da4:	f003 0303 	and.w	r3, r3, #3
 8003da8:	009b      	lsls	r3, r3, #2
 8003daa:	220f      	movs	r2, #15
 8003dac:	fa02 f303 	lsl.w	r3, r2, r3
 8003db0:	43db      	mvns	r3, r3
 8003db2:	693a      	ldr	r2, [r7, #16]
 8003db4:	4013      	ands	r3, r2
 8003db6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003dbe:	d00d      	beq.n	8003ddc <HAL_GPIO_Init+0x1d4>
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	4a43      	ldr	r2, [pc, #268]	; (8003ed0 <HAL_GPIO_Init+0x2c8>)
 8003dc4:	4293      	cmp	r3, r2
 8003dc6:	d007      	beq.n	8003dd8 <HAL_GPIO_Init+0x1d0>
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	4a42      	ldr	r2, [pc, #264]	; (8003ed4 <HAL_GPIO_Init+0x2cc>)
 8003dcc:	4293      	cmp	r3, r2
 8003dce:	d101      	bne.n	8003dd4 <HAL_GPIO_Init+0x1cc>
 8003dd0:	2302      	movs	r3, #2
 8003dd2:	e004      	b.n	8003dde <HAL_GPIO_Init+0x1d6>
 8003dd4:	2307      	movs	r3, #7
 8003dd6:	e002      	b.n	8003dde <HAL_GPIO_Init+0x1d6>
 8003dd8:	2301      	movs	r3, #1
 8003dda:	e000      	b.n	8003dde <HAL_GPIO_Init+0x1d6>
 8003ddc:	2300      	movs	r3, #0
 8003dde:	697a      	ldr	r2, [r7, #20]
 8003de0:	f002 0203 	and.w	r2, r2, #3
 8003de4:	0092      	lsls	r2, r2, #2
 8003de6:	4093      	lsls	r3, r2
 8003de8:	693a      	ldr	r2, [r7, #16]
 8003dea:	4313      	orrs	r3, r2
 8003dec:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003dee:	4937      	ldr	r1, [pc, #220]	; (8003ecc <HAL_GPIO_Init+0x2c4>)
 8003df0:	697b      	ldr	r3, [r7, #20]
 8003df2:	089b      	lsrs	r3, r3, #2
 8003df4:	3302      	adds	r3, #2
 8003df6:	693a      	ldr	r2, [r7, #16]
 8003df8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003dfc:	4b36      	ldr	r3, [pc, #216]	; (8003ed8 <HAL_GPIO_Init+0x2d0>)
 8003dfe:	689b      	ldr	r3, [r3, #8]
 8003e00:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	43db      	mvns	r3, r3
 8003e06:	693a      	ldr	r2, [r7, #16]
 8003e08:	4013      	ands	r3, r2
 8003e0a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003e0c:	683b      	ldr	r3, [r7, #0]
 8003e0e:	685b      	ldr	r3, [r3, #4]
 8003e10:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d003      	beq.n	8003e20 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8003e18:	693a      	ldr	r2, [r7, #16]
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	4313      	orrs	r3, r2
 8003e1e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003e20:	4a2d      	ldr	r2, [pc, #180]	; (8003ed8 <HAL_GPIO_Init+0x2d0>)
 8003e22:	693b      	ldr	r3, [r7, #16]
 8003e24:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003e26:	4b2c      	ldr	r3, [pc, #176]	; (8003ed8 <HAL_GPIO_Init+0x2d0>)
 8003e28:	68db      	ldr	r3, [r3, #12]
 8003e2a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	43db      	mvns	r3, r3
 8003e30:	693a      	ldr	r2, [r7, #16]
 8003e32:	4013      	ands	r3, r2
 8003e34:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003e36:	683b      	ldr	r3, [r7, #0]
 8003e38:	685b      	ldr	r3, [r3, #4]
 8003e3a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d003      	beq.n	8003e4a <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8003e42:	693a      	ldr	r2, [r7, #16]
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	4313      	orrs	r3, r2
 8003e48:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003e4a:	4a23      	ldr	r2, [pc, #140]	; (8003ed8 <HAL_GPIO_Init+0x2d0>)
 8003e4c:	693b      	ldr	r3, [r7, #16]
 8003e4e:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003e50:	4b21      	ldr	r3, [pc, #132]	; (8003ed8 <HAL_GPIO_Init+0x2d0>)
 8003e52:	685b      	ldr	r3, [r3, #4]
 8003e54:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	43db      	mvns	r3, r3
 8003e5a:	693a      	ldr	r2, [r7, #16]
 8003e5c:	4013      	ands	r3, r2
 8003e5e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003e60:	683b      	ldr	r3, [r7, #0]
 8003e62:	685b      	ldr	r3, [r3, #4]
 8003e64:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d003      	beq.n	8003e74 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8003e6c:	693a      	ldr	r2, [r7, #16]
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	4313      	orrs	r3, r2
 8003e72:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003e74:	4a18      	ldr	r2, [pc, #96]	; (8003ed8 <HAL_GPIO_Init+0x2d0>)
 8003e76:	693b      	ldr	r3, [r7, #16]
 8003e78:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8003e7a:	4b17      	ldr	r3, [pc, #92]	; (8003ed8 <HAL_GPIO_Init+0x2d0>)
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	43db      	mvns	r3, r3
 8003e84:	693a      	ldr	r2, [r7, #16]
 8003e86:	4013      	ands	r3, r2
 8003e88:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003e8a:	683b      	ldr	r3, [r7, #0]
 8003e8c:	685b      	ldr	r3, [r3, #4]
 8003e8e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d003      	beq.n	8003e9e <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8003e96:	693a      	ldr	r2, [r7, #16]
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	4313      	orrs	r3, r2
 8003e9c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003e9e:	4a0e      	ldr	r2, [pc, #56]	; (8003ed8 <HAL_GPIO_Init+0x2d0>)
 8003ea0:	693b      	ldr	r3, [r7, #16]
 8003ea2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003ea4:	697b      	ldr	r3, [r7, #20]
 8003ea6:	3301      	adds	r3, #1
 8003ea8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003eaa:	683b      	ldr	r3, [r7, #0]
 8003eac:	681a      	ldr	r2, [r3, #0]
 8003eae:	697b      	ldr	r3, [r7, #20]
 8003eb0:	fa22 f303 	lsr.w	r3, r2, r3
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	f47f aeaf 	bne.w	8003c18 <HAL_GPIO_Init+0x10>
  }
}
 8003eba:	bf00      	nop
 8003ebc:	bf00      	nop
 8003ebe:	371c      	adds	r7, #28
 8003ec0:	46bd      	mov	sp, r7
 8003ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec6:	4770      	bx	lr
 8003ec8:	40021000 	.word	0x40021000
 8003ecc:	40010000 	.word	0x40010000
 8003ed0:	48000400 	.word	0x48000400
 8003ed4:	48000800 	.word	0x48000800
 8003ed8:	40010400 	.word	0x40010400

08003edc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003edc:	b580      	push	{r7, lr}
 8003ede:	b082      	sub	sp, #8
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d101      	bne.n	8003eee <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003eea:	2301      	movs	r3, #1
 8003eec:	e081      	b.n	8003ff2 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003ef4:	b2db      	uxtb	r3, r3
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d106      	bne.n	8003f08 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	2200      	movs	r2, #0
 8003efe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003f02:	6878      	ldr	r0, [r7, #4]
 8003f04:	f7fd f9e8 	bl	80012d8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	2224      	movs	r2, #36	; 0x24
 8003f0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	681a      	ldr	r2, [r3, #0]
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f022 0201 	bic.w	r2, r2, #1
 8003f1e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	685a      	ldr	r2, [r3, #4]
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003f2c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	689a      	ldr	r2, [r3, #8]
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003f3c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	68db      	ldr	r3, [r3, #12]
 8003f42:	2b01      	cmp	r3, #1
 8003f44:	d107      	bne.n	8003f56 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	689a      	ldr	r2, [r3, #8]
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003f52:	609a      	str	r2, [r3, #8]
 8003f54:	e006      	b.n	8003f64 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	689a      	ldr	r2, [r3, #8]
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003f62:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	68db      	ldr	r3, [r3, #12]
 8003f68:	2b02      	cmp	r3, #2
 8003f6a:	d104      	bne.n	8003f76 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003f74:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	685b      	ldr	r3, [r3, #4]
 8003f7c:	687a      	ldr	r2, [r7, #4]
 8003f7e:	6812      	ldr	r2, [r2, #0]
 8003f80:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003f84:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003f88:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	68da      	ldr	r2, [r3, #12]
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003f98:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	691a      	ldr	r2, [r3, #16]
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	695b      	ldr	r3, [r3, #20]
 8003fa2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	699b      	ldr	r3, [r3, #24]
 8003faa:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	430a      	orrs	r2, r1
 8003fb2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	69d9      	ldr	r1, [r3, #28]
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	6a1a      	ldr	r2, [r3, #32]
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	430a      	orrs	r2, r1
 8003fc2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	681a      	ldr	r2, [r3, #0]
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	f042 0201 	orr.w	r2, r2, #1
 8003fd2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	2200      	movs	r2, #0
 8003fd8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	2220      	movs	r2, #32
 8003fde:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	2200      	movs	r2, #0
 8003fe6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	2200      	movs	r2, #0
 8003fec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003ff0:	2300      	movs	r3, #0
}
 8003ff2:	4618      	mov	r0, r3
 8003ff4:	3708      	adds	r7, #8
 8003ff6:	46bd      	mov	sp, r7
 8003ff8:	bd80      	pop	{r7, pc}

08003ffa <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003ffa:	b480      	push	{r7}
 8003ffc:	b083      	sub	sp, #12
 8003ffe:	af00      	add	r7, sp, #0
 8004000:	6078      	str	r0, [r7, #4]
 8004002:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800400a:	b2db      	uxtb	r3, r3
 800400c:	2b20      	cmp	r3, #32
 800400e:	d138      	bne.n	8004082 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004016:	2b01      	cmp	r3, #1
 8004018:	d101      	bne.n	800401e <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800401a:	2302      	movs	r3, #2
 800401c:	e032      	b.n	8004084 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	2201      	movs	r2, #1
 8004022:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	2224      	movs	r2, #36	; 0x24
 800402a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	681a      	ldr	r2, [r3, #0]
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f022 0201 	bic.w	r2, r2, #1
 800403c:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	681a      	ldr	r2, [r3, #0]
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800404c:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	6819      	ldr	r1, [r3, #0]
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	683a      	ldr	r2, [r7, #0]
 800405a:	430a      	orrs	r2, r1
 800405c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	681a      	ldr	r2, [r3, #0]
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f042 0201 	orr.w	r2, r2, #1
 800406c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	2220      	movs	r2, #32
 8004072:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	2200      	movs	r2, #0
 800407a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800407e:	2300      	movs	r3, #0
 8004080:	e000      	b.n	8004084 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004082:	2302      	movs	r3, #2
  }
}
 8004084:	4618      	mov	r0, r3
 8004086:	370c      	adds	r7, #12
 8004088:	46bd      	mov	sp, r7
 800408a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800408e:	4770      	bx	lr

08004090 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004090:	b480      	push	{r7}
 8004092:	b085      	sub	sp, #20
 8004094:	af00      	add	r7, sp, #0
 8004096:	6078      	str	r0, [r7, #4]
 8004098:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80040a0:	b2db      	uxtb	r3, r3
 80040a2:	2b20      	cmp	r3, #32
 80040a4:	d139      	bne.n	800411a <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80040ac:	2b01      	cmp	r3, #1
 80040ae:	d101      	bne.n	80040b4 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80040b0:	2302      	movs	r3, #2
 80040b2:	e033      	b.n	800411c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	2201      	movs	r2, #1
 80040b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	2224      	movs	r2, #36	; 0x24
 80040c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	681a      	ldr	r2, [r3, #0]
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	f022 0201 	bic.w	r2, r2, #1
 80040d2:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80040e2:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80040e4:	683b      	ldr	r3, [r7, #0]
 80040e6:	021b      	lsls	r3, r3, #8
 80040e8:	68fa      	ldr	r2, [r7, #12]
 80040ea:	4313      	orrs	r3, r2
 80040ec:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	68fa      	ldr	r2, [r7, #12]
 80040f4:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	681a      	ldr	r2, [r3, #0]
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f042 0201 	orr.w	r2, r2, #1
 8004104:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	2220      	movs	r2, #32
 800410a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	2200      	movs	r2, #0
 8004112:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004116:	2300      	movs	r3, #0
 8004118:	e000      	b.n	800411c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800411a:	2302      	movs	r3, #2
  }
}
 800411c:	4618      	mov	r0, r3
 800411e:	3714      	adds	r7, #20
 8004120:	46bd      	mov	sp, r7
 8004122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004126:	4770      	bx	lr

08004128 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004128:	b480      	push	{r7}
 800412a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800412c:	4b05      	ldr	r3, [pc, #20]	; (8004144 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	4a04      	ldr	r2, [pc, #16]	; (8004144 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004132:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004136:	6013      	str	r3, [r2, #0]
}
 8004138:	bf00      	nop
 800413a:	46bd      	mov	sp, r7
 800413c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004140:	4770      	bx	lr
 8004142:	bf00      	nop
 8004144:	40007000 	.word	0x40007000

08004148 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004148:	b480      	push	{r7}
 800414a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800414c:	4b04      	ldr	r3, [pc, #16]	; (8004160 <HAL_PWREx_GetVoltageRange+0x18>)
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8004154:	4618      	mov	r0, r3
 8004156:	46bd      	mov	sp, r7
 8004158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800415c:	4770      	bx	lr
 800415e:	bf00      	nop
 8004160:	40007000 	.word	0x40007000

08004164 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004164:	b480      	push	{r7}
 8004166:	b085      	sub	sp, #20
 8004168:	af00      	add	r7, sp, #0
 800416a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004172:	d130      	bne.n	80041d6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8004174:	4b23      	ldr	r3, [pc, #140]	; (8004204 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800417c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004180:	d038      	beq.n	80041f4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004182:	4b20      	ldr	r3, [pc, #128]	; (8004204 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800418a:	4a1e      	ldr	r2, [pc, #120]	; (8004204 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800418c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004190:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004192:	4b1d      	ldr	r3, [pc, #116]	; (8004208 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	2232      	movs	r2, #50	; 0x32
 8004198:	fb02 f303 	mul.w	r3, r2, r3
 800419c:	4a1b      	ldr	r2, [pc, #108]	; (800420c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800419e:	fba2 2303 	umull	r2, r3, r2, r3
 80041a2:	0c9b      	lsrs	r3, r3, #18
 80041a4:	3301      	adds	r3, #1
 80041a6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80041a8:	e002      	b.n	80041b0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	3b01      	subs	r3, #1
 80041ae:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80041b0:	4b14      	ldr	r3, [pc, #80]	; (8004204 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80041b2:	695b      	ldr	r3, [r3, #20]
 80041b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80041b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80041bc:	d102      	bne.n	80041c4 <HAL_PWREx_ControlVoltageScaling+0x60>
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d1f2      	bne.n	80041aa <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80041c4:	4b0f      	ldr	r3, [pc, #60]	; (8004204 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80041c6:	695b      	ldr	r3, [r3, #20]
 80041c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80041cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80041d0:	d110      	bne.n	80041f4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80041d2:	2303      	movs	r3, #3
 80041d4:	e00f      	b.n	80041f6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80041d6:	4b0b      	ldr	r3, [pc, #44]	; (8004204 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80041de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80041e2:	d007      	beq.n	80041f4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80041e4:	4b07      	ldr	r3, [pc, #28]	; (8004204 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80041ec:	4a05      	ldr	r2, [pc, #20]	; (8004204 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80041ee:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80041f2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80041f4:	2300      	movs	r3, #0
}
 80041f6:	4618      	mov	r0, r3
 80041f8:	3714      	adds	r7, #20
 80041fa:	46bd      	mov	sp, r7
 80041fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004200:	4770      	bx	lr
 8004202:	bf00      	nop
 8004204:	40007000 	.word	0x40007000
 8004208:	20000000 	.word	0x20000000
 800420c:	431bde83 	.word	0x431bde83

08004210 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004210:	b580      	push	{r7, lr}
 8004212:	b088      	sub	sp, #32
 8004214:	af00      	add	r7, sp, #0
 8004216:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	2b00      	cmp	r3, #0
 800421c:	d102      	bne.n	8004224 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800421e:	2301      	movs	r3, #1
 8004220:	f000 bc02 	b.w	8004a28 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004224:	4b96      	ldr	r3, [pc, #600]	; (8004480 <HAL_RCC_OscConfig+0x270>)
 8004226:	689b      	ldr	r3, [r3, #8]
 8004228:	f003 030c 	and.w	r3, r3, #12
 800422c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800422e:	4b94      	ldr	r3, [pc, #592]	; (8004480 <HAL_RCC_OscConfig+0x270>)
 8004230:	68db      	ldr	r3, [r3, #12]
 8004232:	f003 0303 	and.w	r3, r3, #3
 8004236:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	f003 0310 	and.w	r3, r3, #16
 8004240:	2b00      	cmp	r3, #0
 8004242:	f000 80e4 	beq.w	800440e <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004246:	69bb      	ldr	r3, [r7, #24]
 8004248:	2b00      	cmp	r3, #0
 800424a:	d007      	beq.n	800425c <HAL_RCC_OscConfig+0x4c>
 800424c:	69bb      	ldr	r3, [r7, #24]
 800424e:	2b0c      	cmp	r3, #12
 8004250:	f040 808b 	bne.w	800436a <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004254:	697b      	ldr	r3, [r7, #20]
 8004256:	2b01      	cmp	r3, #1
 8004258:	f040 8087 	bne.w	800436a <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800425c:	4b88      	ldr	r3, [pc, #544]	; (8004480 <HAL_RCC_OscConfig+0x270>)
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	f003 0302 	and.w	r3, r3, #2
 8004264:	2b00      	cmp	r3, #0
 8004266:	d005      	beq.n	8004274 <HAL_RCC_OscConfig+0x64>
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	699b      	ldr	r3, [r3, #24]
 800426c:	2b00      	cmp	r3, #0
 800426e:	d101      	bne.n	8004274 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8004270:	2301      	movs	r3, #1
 8004272:	e3d9      	b.n	8004a28 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	6a1a      	ldr	r2, [r3, #32]
 8004278:	4b81      	ldr	r3, [pc, #516]	; (8004480 <HAL_RCC_OscConfig+0x270>)
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	f003 0308 	and.w	r3, r3, #8
 8004280:	2b00      	cmp	r3, #0
 8004282:	d004      	beq.n	800428e <HAL_RCC_OscConfig+0x7e>
 8004284:	4b7e      	ldr	r3, [pc, #504]	; (8004480 <HAL_RCC_OscConfig+0x270>)
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800428c:	e005      	b.n	800429a <HAL_RCC_OscConfig+0x8a>
 800428e:	4b7c      	ldr	r3, [pc, #496]	; (8004480 <HAL_RCC_OscConfig+0x270>)
 8004290:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004294:	091b      	lsrs	r3, r3, #4
 8004296:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800429a:	4293      	cmp	r3, r2
 800429c:	d223      	bcs.n	80042e6 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	6a1b      	ldr	r3, [r3, #32]
 80042a2:	4618      	mov	r0, r3
 80042a4:	f000 fdbe 	bl	8004e24 <RCC_SetFlashLatencyFromMSIRange>
 80042a8:	4603      	mov	r3, r0
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d001      	beq.n	80042b2 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80042ae:	2301      	movs	r3, #1
 80042b0:	e3ba      	b.n	8004a28 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80042b2:	4b73      	ldr	r3, [pc, #460]	; (8004480 <HAL_RCC_OscConfig+0x270>)
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	4a72      	ldr	r2, [pc, #456]	; (8004480 <HAL_RCC_OscConfig+0x270>)
 80042b8:	f043 0308 	orr.w	r3, r3, #8
 80042bc:	6013      	str	r3, [r2, #0]
 80042be:	4b70      	ldr	r3, [pc, #448]	; (8004480 <HAL_RCC_OscConfig+0x270>)
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	6a1b      	ldr	r3, [r3, #32]
 80042ca:	496d      	ldr	r1, [pc, #436]	; (8004480 <HAL_RCC_OscConfig+0x270>)
 80042cc:	4313      	orrs	r3, r2
 80042ce:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80042d0:	4b6b      	ldr	r3, [pc, #428]	; (8004480 <HAL_RCC_OscConfig+0x270>)
 80042d2:	685b      	ldr	r3, [r3, #4]
 80042d4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	69db      	ldr	r3, [r3, #28]
 80042dc:	021b      	lsls	r3, r3, #8
 80042de:	4968      	ldr	r1, [pc, #416]	; (8004480 <HAL_RCC_OscConfig+0x270>)
 80042e0:	4313      	orrs	r3, r2
 80042e2:	604b      	str	r3, [r1, #4]
 80042e4:	e025      	b.n	8004332 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80042e6:	4b66      	ldr	r3, [pc, #408]	; (8004480 <HAL_RCC_OscConfig+0x270>)
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	4a65      	ldr	r2, [pc, #404]	; (8004480 <HAL_RCC_OscConfig+0x270>)
 80042ec:	f043 0308 	orr.w	r3, r3, #8
 80042f0:	6013      	str	r3, [r2, #0]
 80042f2:	4b63      	ldr	r3, [pc, #396]	; (8004480 <HAL_RCC_OscConfig+0x270>)
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	6a1b      	ldr	r3, [r3, #32]
 80042fe:	4960      	ldr	r1, [pc, #384]	; (8004480 <HAL_RCC_OscConfig+0x270>)
 8004300:	4313      	orrs	r3, r2
 8004302:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004304:	4b5e      	ldr	r3, [pc, #376]	; (8004480 <HAL_RCC_OscConfig+0x270>)
 8004306:	685b      	ldr	r3, [r3, #4]
 8004308:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	69db      	ldr	r3, [r3, #28]
 8004310:	021b      	lsls	r3, r3, #8
 8004312:	495b      	ldr	r1, [pc, #364]	; (8004480 <HAL_RCC_OscConfig+0x270>)
 8004314:	4313      	orrs	r3, r2
 8004316:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004318:	69bb      	ldr	r3, [r7, #24]
 800431a:	2b00      	cmp	r3, #0
 800431c:	d109      	bne.n	8004332 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	6a1b      	ldr	r3, [r3, #32]
 8004322:	4618      	mov	r0, r3
 8004324:	f000 fd7e 	bl	8004e24 <RCC_SetFlashLatencyFromMSIRange>
 8004328:	4603      	mov	r3, r0
 800432a:	2b00      	cmp	r3, #0
 800432c:	d001      	beq.n	8004332 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800432e:	2301      	movs	r3, #1
 8004330:	e37a      	b.n	8004a28 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004332:	f000 fc81 	bl	8004c38 <HAL_RCC_GetSysClockFreq>
 8004336:	4602      	mov	r2, r0
 8004338:	4b51      	ldr	r3, [pc, #324]	; (8004480 <HAL_RCC_OscConfig+0x270>)
 800433a:	689b      	ldr	r3, [r3, #8]
 800433c:	091b      	lsrs	r3, r3, #4
 800433e:	f003 030f 	and.w	r3, r3, #15
 8004342:	4950      	ldr	r1, [pc, #320]	; (8004484 <HAL_RCC_OscConfig+0x274>)
 8004344:	5ccb      	ldrb	r3, [r1, r3]
 8004346:	f003 031f 	and.w	r3, r3, #31
 800434a:	fa22 f303 	lsr.w	r3, r2, r3
 800434e:	4a4e      	ldr	r2, [pc, #312]	; (8004488 <HAL_RCC_OscConfig+0x278>)
 8004350:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004352:	4b4e      	ldr	r3, [pc, #312]	; (800448c <HAL_RCC_OscConfig+0x27c>)
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	4618      	mov	r0, r3
 8004358:	f7fe fc5a 	bl	8002c10 <HAL_InitTick>
 800435c:	4603      	mov	r3, r0
 800435e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8004360:	7bfb      	ldrb	r3, [r7, #15]
 8004362:	2b00      	cmp	r3, #0
 8004364:	d052      	beq.n	800440c <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8004366:	7bfb      	ldrb	r3, [r7, #15]
 8004368:	e35e      	b.n	8004a28 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	699b      	ldr	r3, [r3, #24]
 800436e:	2b00      	cmp	r3, #0
 8004370:	d032      	beq.n	80043d8 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004372:	4b43      	ldr	r3, [pc, #268]	; (8004480 <HAL_RCC_OscConfig+0x270>)
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	4a42      	ldr	r2, [pc, #264]	; (8004480 <HAL_RCC_OscConfig+0x270>)
 8004378:	f043 0301 	orr.w	r3, r3, #1
 800437c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800437e:	f7ff f8df 	bl	8003540 <HAL_GetTick>
 8004382:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004384:	e008      	b.n	8004398 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004386:	f7ff f8db 	bl	8003540 <HAL_GetTick>
 800438a:	4602      	mov	r2, r0
 800438c:	693b      	ldr	r3, [r7, #16]
 800438e:	1ad3      	subs	r3, r2, r3
 8004390:	2b02      	cmp	r3, #2
 8004392:	d901      	bls.n	8004398 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8004394:	2303      	movs	r3, #3
 8004396:	e347      	b.n	8004a28 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004398:	4b39      	ldr	r3, [pc, #228]	; (8004480 <HAL_RCC_OscConfig+0x270>)
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	f003 0302 	and.w	r3, r3, #2
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d0f0      	beq.n	8004386 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80043a4:	4b36      	ldr	r3, [pc, #216]	; (8004480 <HAL_RCC_OscConfig+0x270>)
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	4a35      	ldr	r2, [pc, #212]	; (8004480 <HAL_RCC_OscConfig+0x270>)
 80043aa:	f043 0308 	orr.w	r3, r3, #8
 80043ae:	6013      	str	r3, [r2, #0]
 80043b0:	4b33      	ldr	r3, [pc, #204]	; (8004480 <HAL_RCC_OscConfig+0x270>)
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	6a1b      	ldr	r3, [r3, #32]
 80043bc:	4930      	ldr	r1, [pc, #192]	; (8004480 <HAL_RCC_OscConfig+0x270>)
 80043be:	4313      	orrs	r3, r2
 80043c0:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80043c2:	4b2f      	ldr	r3, [pc, #188]	; (8004480 <HAL_RCC_OscConfig+0x270>)
 80043c4:	685b      	ldr	r3, [r3, #4]
 80043c6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	69db      	ldr	r3, [r3, #28]
 80043ce:	021b      	lsls	r3, r3, #8
 80043d0:	492b      	ldr	r1, [pc, #172]	; (8004480 <HAL_RCC_OscConfig+0x270>)
 80043d2:	4313      	orrs	r3, r2
 80043d4:	604b      	str	r3, [r1, #4]
 80043d6:	e01a      	b.n	800440e <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80043d8:	4b29      	ldr	r3, [pc, #164]	; (8004480 <HAL_RCC_OscConfig+0x270>)
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	4a28      	ldr	r2, [pc, #160]	; (8004480 <HAL_RCC_OscConfig+0x270>)
 80043de:	f023 0301 	bic.w	r3, r3, #1
 80043e2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80043e4:	f7ff f8ac 	bl	8003540 <HAL_GetTick>
 80043e8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80043ea:	e008      	b.n	80043fe <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80043ec:	f7ff f8a8 	bl	8003540 <HAL_GetTick>
 80043f0:	4602      	mov	r2, r0
 80043f2:	693b      	ldr	r3, [r7, #16]
 80043f4:	1ad3      	subs	r3, r2, r3
 80043f6:	2b02      	cmp	r3, #2
 80043f8:	d901      	bls.n	80043fe <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80043fa:	2303      	movs	r3, #3
 80043fc:	e314      	b.n	8004a28 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80043fe:	4b20      	ldr	r3, [pc, #128]	; (8004480 <HAL_RCC_OscConfig+0x270>)
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	f003 0302 	and.w	r3, r3, #2
 8004406:	2b00      	cmp	r3, #0
 8004408:	d1f0      	bne.n	80043ec <HAL_RCC_OscConfig+0x1dc>
 800440a:	e000      	b.n	800440e <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800440c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	f003 0301 	and.w	r3, r3, #1
 8004416:	2b00      	cmp	r3, #0
 8004418:	d073      	beq.n	8004502 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800441a:	69bb      	ldr	r3, [r7, #24]
 800441c:	2b08      	cmp	r3, #8
 800441e:	d005      	beq.n	800442c <HAL_RCC_OscConfig+0x21c>
 8004420:	69bb      	ldr	r3, [r7, #24]
 8004422:	2b0c      	cmp	r3, #12
 8004424:	d10e      	bne.n	8004444 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004426:	697b      	ldr	r3, [r7, #20]
 8004428:	2b03      	cmp	r3, #3
 800442a:	d10b      	bne.n	8004444 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800442c:	4b14      	ldr	r3, [pc, #80]	; (8004480 <HAL_RCC_OscConfig+0x270>)
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004434:	2b00      	cmp	r3, #0
 8004436:	d063      	beq.n	8004500 <HAL_RCC_OscConfig+0x2f0>
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	685b      	ldr	r3, [r3, #4]
 800443c:	2b00      	cmp	r3, #0
 800443e:	d15f      	bne.n	8004500 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8004440:	2301      	movs	r3, #1
 8004442:	e2f1      	b.n	8004a28 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	685b      	ldr	r3, [r3, #4]
 8004448:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800444c:	d106      	bne.n	800445c <HAL_RCC_OscConfig+0x24c>
 800444e:	4b0c      	ldr	r3, [pc, #48]	; (8004480 <HAL_RCC_OscConfig+0x270>)
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	4a0b      	ldr	r2, [pc, #44]	; (8004480 <HAL_RCC_OscConfig+0x270>)
 8004454:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004458:	6013      	str	r3, [r2, #0]
 800445a:	e025      	b.n	80044a8 <HAL_RCC_OscConfig+0x298>
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	685b      	ldr	r3, [r3, #4]
 8004460:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004464:	d114      	bne.n	8004490 <HAL_RCC_OscConfig+0x280>
 8004466:	4b06      	ldr	r3, [pc, #24]	; (8004480 <HAL_RCC_OscConfig+0x270>)
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	4a05      	ldr	r2, [pc, #20]	; (8004480 <HAL_RCC_OscConfig+0x270>)
 800446c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004470:	6013      	str	r3, [r2, #0]
 8004472:	4b03      	ldr	r3, [pc, #12]	; (8004480 <HAL_RCC_OscConfig+0x270>)
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	4a02      	ldr	r2, [pc, #8]	; (8004480 <HAL_RCC_OscConfig+0x270>)
 8004478:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800447c:	6013      	str	r3, [r2, #0]
 800447e:	e013      	b.n	80044a8 <HAL_RCC_OscConfig+0x298>
 8004480:	40021000 	.word	0x40021000
 8004484:	0800c408 	.word	0x0800c408
 8004488:	20000000 	.word	0x20000000
 800448c:	2000000c 	.word	0x2000000c
 8004490:	4ba0      	ldr	r3, [pc, #640]	; (8004714 <HAL_RCC_OscConfig+0x504>)
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	4a9f      	ldr	r2, [pc, #636]	; (8004714 <HAL_RCC_OscConfig+0x504>)
 8004496:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800449a:	6013      	str	r3, [r2, #0]
 800449c:	4b9d      	ldr	r3, [pc, #628]	; (8004714 <HAL_RCC_OscConfig+0x504>)
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	4a9c      	ldr	r2, [pc, #624]	; (8004714 <HAL_RCC_OscConfig+0x504>)
 80044a2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80044a6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	685b      	ldr	r3, [r3, #4]
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d013      	beq.n	80044d8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044b0:	f7ff f846 	bl	8003540 <HAL_GetTick>
 80044b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80044b6:	e008      	b.n	80044ca <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80044b8:	f7ff f842 	bl	8003540 <HAL_GetTick>
 80044bc:	4602      	mov	r2, r0
 80044be:	693b      	ldr	r3, [r7, #16]
 80044c0:	1ad3      	subs	r3, r2, r3
 80044c2:	2b64      	cmp	r3, #100	; 0x64
 80044c4:	d901      	bls.n	80044ca <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80044c6:	2303      	movs	r3, #3
 80044c8:	e2ae      	b.n	8004a28 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80044ca:	4b92      	ldr	r3, [pc, #584]	; (8004714 <HAL_RCC_OscConfig+0x504>)
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d0f0      	beq.n	80044b8 <HAL_RCC_OscConfig+0x2a8>
 80044d6:	e014      	b.n	8004502 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044d8:	f7ff f832 	bl	8003540 <HAL_GetTick>
 80044dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80044de:	e008      	b.n	80044f2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80044e0:	f7ff f82e 	bl	8003540 <HAL_GetTick>
 80044e4:	4602      	mov	r2, r0
 80044e6:	693b      	ldr	r3, [r7, #16]
 80044e8:	1ad3      	subs	r3, r2, r3
 80044ea:	2b64      	cmp	r3, #100	; 0x64
 80044ec:	d901      	bls.n	80044f2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80044ee:	2303      	movs	r3, #3
 80044f0:	e29a      	b.n	8004a28 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80044f2:	4b88      	ldr	r3, [pc, #544]	; (8004714 <HAL_RCC_OscConfig+0x504>)
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d1f0      	bne.n	80044e0 <HAL_RCC_OscConfig+0x2d0>
 80044fe:	e000      	b.n	8004502 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004500:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	f003 0302 	and.w	r3, r3, #2
 800450a:	2b00      	cmp	r3, #0
 800450c:	d060      	beq.n	80045d0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800450e:	69bb      	ldr	r3, [r7, #24]
 8004510:	2b04      	cmp	r3, #4
 8004512:	d005      	beq.n	8004520 <HAL_RCC_OscConfig+0x310>
 8004514:	69bb      	ldr	r3, [r7, #24]
 8004516:	2b0c      	cmp	r3, #12
 8004518:	d119      	bne.n	800454e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800451a:	697b      	ldr	r3, [r7, #20]
 800451c:	2b02      	cmp	r3, #2
 800451e:	d116      	bne.n	800454e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004520:	4b7c      	ldr	r3, [pc, #496]	; (8004714 <HAL_RCC_OscConfig+0x504>)
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004528:	2b00      	cmp	r3, #0
 800452a:	d005      	beq.n	8004538 <HAL_RCC_OscConfig+0x328>
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	68db      	ldr	r3, [r3, #12]
 8004530:	2b00      	cmp	r3, #0
 8004532:	d101      	bne.n	8004538 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004534:	2301      	movs	r3, #1
 8004536:	e277      	b.n	8004a28 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004538:	4b76      	ldr	r3, [pc, #472]	; (8004714 <HAL_RCC_OscConfig+0x504>)
 800453a:	685b      	ldr	r3, [r3, #4]
 800453c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	691b      	ldr	r3, [r3, #16]
 8004544:	061b      	lsls	r3, r3, #24
 8004546:	4973      	ldr	r1, [pc, #460]	; (8004714 <HAL_RCC_OscConfig+0x504>)
 8004548:	4313      	orrs	r3, r2
 800454a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800454c:	e040      	b.n	80045d0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	68db      	ldr	r3, [r3, #12]
 8004552:	2b00      	cmp	r3, #0
 8004554:	d023      	beq.n	800459e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004556:	4b6f      	ldr	r3, [pc, #444]	; (8004714 <HAL_RCC_OscConfig+0x504>)
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	4a6e      	ldr	r2, [pc, #440]	; (8004714 <HAL_RCC_OscConfig+0x504>)
 800455c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004560:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004562:	f7fe ffed 	bl	8003540 <HAL_GetTick>
 8004566:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004568:	e008      	b.n	800457c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800456a:	f7fe ffe9 	bl	8003540 <HAL_GetTick>
 800456e:	4602      	mov	r2, r0
 8004570:	693b      	ldr	r3, [r7, #16]
 8004572:	1ad3      	subs	r3, r2, r3
 8004574:	2b02      	cmp	r3, #2
 8004576:	d901      	bls.n	800457c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004578:	2303      	movs	r3, #3
 800457a:	e255      	b.n	8004a28 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800457c:	4b65      	ldr	r3, [pc, #404]	; (8004714 <HAL_RCC_OscConfig+0x504>)
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004584:	2b00      	cmp	r3, #0
 8004586:	d0f0      	beq.n	800456a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004588:	4b62      	ldr	r3, [pc, #392]	; (8004714 <HAL_RCC_OscConfig+0x504>)
 800458a:	685b      	ldr	r3, [r3, #4]
 800458c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	691b      	ldr	r3, [r3, #16]
 8004594:	061b      	lsls	r3, r3, #24
 8004596:	495f      	ldr	r1, [pc, #380]	; (8004714 <HAL_RCC_OscConfig+0x504>)
 8004598:	4313      	orrs	r3, r2
 800459a:	604b      	str	r3, [r1, #4]
 800459c:	e018      	b.n	80045d0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800459e:	4b5d      	ldr	r3, [pc, #372]	; (8004714 <HAL_RCC_OscConfig+0x504>)
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	4a5c      	ldr	r2, [pc, #368]	; (8004714 <HAL_RCC_OscConfig+0x504>)
 80045a4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80045a8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045aa:	f7fe ffc9 	bl	8003540 <HAL_GetTick>
 80045ae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80045b0:	e008      	b.n	80045c4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80045b2:	f7fe ffc5 	bl	8003540 <HAL_GetTick>
 80045b6:	4602      	mov	r2, r0
 80045b8:	693b      	ldr	r3, [r7, #16]
 80045ba:	1ad3      	subs	r3, r2, r3
 80045bc:	2b02      	cmp	r3, #2
 80045be:	d901      	bls.n	80045c4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80045c0:	2303      	movs	r3, #3
 80045c2:	e231      	b.n	8004a28 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80045c4:	4b53      	ldr	r3, [pc, #332]	; (8004714 <HAL_RCC_OscConfig+0x504>)
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d1f0      	bne.n	80045b2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	f003 0308 	and.w	r3, r3, #8
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d03c      	beq.n	8004656 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	695b      	ldr	r3, [r3, #20]
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d01c      	beq.n	800461e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80045e4:	4b4b      	ldr	r3, [pc, #300]	; (8004714 <HAL_RCC_OscConfig+0x504>)
 80045e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80045ea:	4a4a      	ldr	r2, [pc, #296]	; (8004714 <HAL_RCC_OscConfig+0x504>)
 80045ec:	f043 0301 	orr.w	r3, r3, #1
 80045f0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045f4:	f7fe ffa4 	bl	8003540 <HAL_GetTick>
 80045f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80045fa:	e008      	b.n	800460e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80045fc:	f7fe ffa0 	bl	8003540 <HAL_GetTick>
 8004600:	4602      	mov	r2, r0
 8004602:	693b      	ldr	r3, [r7, #16]
 8004604:	1ad3      	subs	r3, r2, r3
 8004606:	2b02      	cmp	r3, #2
 8004608:	d901      	bls.n	800460e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800460a:	2303      	movs	r3, #3
 800460c:	e20c      	b.n	8004a28 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800460e:	4b41      	ldr	r3, [pc, #260]	; (8004714 <HAL_RCC_OscConfig+0x504>)
 8004610:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004614:	f003 0302 	and.w	r3, r3, #2
 8004618:	2b00      	cmp	r3, #0
 800461a:	d0ef      	beq.n	80045fc <HAL_RCC_OscConfig+0x3ec>
 800461c:	e01b      	b.n	8004656 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800461e:	4b3d      	ldr	r3, [pc, #244]	; (8004714 <HAL_RCC_OscConfig+0x504>)
 8004620:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004624:	4a3b      	ldr	r2, [pc, #236]	; (8004714 <HAL_RCC_OscConfig+0x504>)
 8004626:	f023 0301 	bic.w	r3, r3, #1
 800462a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800462e:	f7fe ff87 	bl	8003540 <HAL_GetTick>
 8004632:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004634:	e008      	b.n	8004648 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004636:	f7fe ff83 	bl	8003540 <HAL_GetTick>
 800463a:	4602      	mov	r2, r0
 800463c:	693b      	ldr	r3, [r7, #16]
 800463e:	1ad3      	subs	r3, r2, r3
 8004640:	2b02      	cmp	r3, #2
 8004642:	d901      	bls.n	8004648 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004644:	2303      	movs	r3, #3
 8004646:	e1ef      	b.n	8004a28 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004648:	4b32      	ldr	r3, [pc, #200]	; (8004714 <HAL_RCC_OscConfig+0x504>)
 800464a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800464e:	f003 0302 	and.w	r3, r3, #2
 8004652:	2b00      	cmp	r3, #0
 8004654:	d1ef      	bne.n	8004636 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	f003 0304 	and.w	r3, r3, #4
 800465e:	2b00      	cmp	r3, #0
 8004660:	f000 80a6 	beq.w	80047b0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004664:	2300      	movs	r3, #0
 8004666:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004668:	4b2a      	ldr	r3, [pc, #168]	; (8004714 <HAL_RCC_OscConfig+0x504>)
 800466a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800466c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004670:	2b00      	cmp	r3, #0
 8004672:	d10d      	bne.n	8004690 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004674:	4b27      	ldr	r3, [pc, #156]	; (8004714 <HAL_RCC_OscConfig+0x504>)
 8004676:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004678:	4a26      	ldr	r2, [pc, #152]	; (8004714 <HAL_RCC_OscConfig+0x504>)
 800467a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800467e:	6593      	str	r3, [r2, #88]	; 0x58
 8004680:	4b24      	ldr	r3, [pc, #144]	; (8004714 <HAL_RCC_OscConfig+0x504>)
 8004682:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004684:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004688:	60bb      	str	r3, [r7, #8]
 800468a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800468c:	2301      	movs	r3, #1
 800468e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004690:	4b21      	ldr	r3, [pc, #132]	; (8004718 <HAL_RCC_OscConfig+0x508>)
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004698:	2b00      	cmp	r3, #0
 800469a:	d118      	bne.n	80046ce <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800469c:	4b1e      	ldr	r3, [pc, #120]	; (8004718 <HAL_RCC_OscConfig+0x508>)
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	4a1d      	ldr	r2, [pc, #116]	; (8004718 <HAL_RCC_OscConfig+0x508>)
 80046a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80046a6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80046a8:	f7fe ff4a 	bl	8003540 <HAL_GetTick>
 80046ac:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80046ae:	e008      	b.n	80046c2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80046b0:	f7fe ff46 	bl	8003540 <HAL_GetTick>
 80046b4:	4602      	mov	r2, r0
 80046b6:	693b      	ldr	r3, [r7, #16]
 80046b8:	1ad3      	subs	r3, r2, r3
 80046ba:	2b02      	cmp	r3, #2
 80046bc:	d901      	bls.n	80046c2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80046be:	2303      	movs	r3, #3
 80046c0:	e1b2      	b.n	8004a28 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80046c2:	4b15      	ldr	r3, [pc, #84]	; (8004718 <HAL_RCC_OscConfig+0x508>)
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d0f0      	beq.n	80046b0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	689b      	ldr	r3, [r3, #8]
 80046d2:	2b01      	cmp	r3, #1
 80046d4:	d108      	bne.n	80046e8 <HAL_RCC_OscConfig+0x4d8>
 80046d6:	4b0f      	ldr	r3, [pc, #60]	; (8004714 <HAL_RCC_OscConfig+0x504>)
 80046d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046dc:	4a0d      	ldr	r2, [pc, #52]	; (8004714 <HAL_RCC_OscConfig+0x504>)
 80046de:	f043 0301 	orr.w	r3, r3, #1
 80046e2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80046e6:	e029      	b.n	800473c <HAL_RCC_OscConfig+0x52c>
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	689b      	ldr	r3, [r3, #8]
 80046ec:	2b05      	cmp	r3, #5
 80046ee:	d115      	bne.n	800471c <HAL_RCC_OscConfig+0x50c>
 80046f0:	4b08      	ldr	r3, [pc, #32]	; (8004714 <HAL_RCC_OscConfig+0x504>)
 80046f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046f6:	4a07      	ldr	r2, [pc, #28]	; (8004714 <HAL_RCC_OscConfig+0x504>)
 80046f8:	f043 0304 	orr.w	r3, r3, #4
 80046fc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004700:	4b04      	ldr	r3, [pc, #16]	; (8004714 <HAL_RCC_OscConfig+0x504>)
 8004702:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004706:	4a03      	ldr	r2, [pc, #12]	; (8004714 <HAL_RCC_OscConfig+0x504>)
 8004708:	f043 0301 	orr.w	r3, r3, #1
 800470c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004710:	e014      	b.n	800473c <HAL_RCC_OscConfig+0x52c>
 8004712:	bf00      	nop
 8004714:	40021000 	.word	0x40021000
 8004718:	40007000 	.word	0x40007000
 800471c:	4b9a      	ldr	r3, [pc, #616]	; (8004988 <HAL_RCC_OscConfig+0x778>)
 800471e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004722:	4a99      	ldr	r2, [pc, #612]	; (8004988 <HAL_RCC_OscConfig+0x778>)
 8004724:	f023 0301 	bic.w	r3, r3, #1
 8004728:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800472c:	4b96      	ldr	r3, [pc, #600]	; (8004988 <HAL_RCC_OscConfig+0x778>)
 800472e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004732:	4a95      	ldr	r2, [pc, #596]	; (8004988 <HAL_RCC_OscConfig+0x778>)
 8004734:	f023 0304 	bic.w	r3, r3, #4
 8004738:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	689b      	ldr	r3, [r3, #8]
 8004740:	2b00      	cmp	r3, #0
 8004742:	d016      	beq.n	8004772 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004744:	f7fe fefc 	bl	8003540 <HAL_GetTick>
 8004748:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800474a:	e00a      	b.n	8004762 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800474c:	f7fe fef8 	bl	8003540 <HAL_GetTick>
 8004750:	4602      	mov	r2, r0
 8004752:	693b      	ldr	r3, [r7, #16]
 8004754:	1ad3      	subs	r3, r2, r3
 8004756:	f241 3288 	movw	r2, #5000	; 0x1388
 800475a:	4293      	cmp	r3, r2
 800475c:	d901      	bls.n	8004762 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800475e:	2303      	movs	r3, #3
 8004760:	e162      	b.n	8004a28 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004762:	4b89      	ldr	r3, [pc, #548]	; (8004988 <HAL_RCC_OscConfig+0x778>)
 8004764:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004768:	f003 0302 	and.w	r3, r3, #2
 800476c:	2b00      	cmp	r3, #0
 800476e:	d0ed      	beq.n	800474c <HAL_RCC_OscConfig+0x53c>
 8004770:	e015      	b.n	800479e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004772:	f7fe fee5 	bl	8003540 <HAL_GetTick>
 8004776:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004778:	e00a      	b.n	8004790 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800477a:	f7fe fee1 	bl	8003540 <HAL_GetTick>
 800477e:	4602      	mov	r2, r0
 8004780:	693b      	ldr	r3, [r7, #16]
 8004782:	1ad3      	subs	r3, r2, r3
 8004784:	f241 3288 	movw	r2, #5000	; 0x1388
 8004788:	4293      	cmp	r3, r2
 800478a:	d901      	bls.n	8004790 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800478c:	2303      	movs	r3, #3
 800478e:	e14b      	b.n	8004a28 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004790:	4b7d      	ldr	r3, [pc, #500]	; (8004988 <HAL_RCC_OscConfig+0x778>)
 8004792:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004796:	f003 0302 	and.w	r3, r3, #2
 800479a:	2b00      	cmp	r3, #0
 800479c:	d1ed      	bne.n	800477a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800479e:	7ffb      	ldrb	r3, [r7, #31]
 80047a0:	2b01      	cmp	r3, #1
 80047a2:	d105      	bne.n	80047b0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80047a4:	4b78      	ldr	r3, [pc, #480]	; (8004988 <HAL_RCC_OscConfig+0x778>)
 80047a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047a8:	4a77      	ldr	r2, [pc, #476]	; (8004988 <HAL_RCC_OscConfig+0x778>)
 80047aa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80047ae:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	f003 0320 	and.w	r3, r3, #32
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d03c      	beq.n	8004836 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d01c      	beq.n	80047fe <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80047c4:	4b70      	ldr	r3, [pc, #448]	; (8004988 <HAL_RCC_OscConfig+0x778>)
 80047c6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80047ca:	4a6f      	ldr	r2, [pc, #444]	; (8004988 <HAL_RCC_OscConfig+0x778>)
 80047cc:	f043 0301 	orr.w	r3, r3, #1
 80047d0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047d4:	f7fe feb4 	bl	8003540 <HAL_GetTick>
 80047d8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80047da:	e008      	b.n	80047ee <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80047dc:	f7fe feb0 	bl	8003540 <HAL_GetTick>
 80047e0:	4602      	mov	r2, r0
 80047e2:	693b      	ldr	r3, [r7, #16]
 80047e4:	1ad3      	subs	r3, r2, r3
 80047e6:	2b02      	cmp	r3, #2
 80047e8:	d901      	bls.n	80047ee <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80047ea:	2303      	movs	r3, #3
 80047ec:	e11c      	b.n	8004a28 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80047ee:	4b66      	ldr	r3, [pc, #408]	; (8004988 <HAL_RCC_OscConfig+0x778>)
 80047f0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80047f4:	f003 0302 	and.w	r3, r3, #2
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d0ef      	beq.n	80047dc <HAL_RCC_OscConfig+0x5cc>
 80047fc:	e01b      	b.n	8004836 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80047fe:	4b62      	ldr	r3, [pc, #392]	; (8004988 <HAL_RCC_OscConfig+0x778>)
 8004800:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004804:	4a60      	ldr	r2, [pc, #384]	; (8004988 <HAL_RCC_OscConfig+0x778>)
 8004806:	f023 0301 	bic.w	r3, r3, #1
 800480a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800480e:	f7fe fe97 	bl	8003540 <HAL_GetTick>
 8004812:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004814:	e008      	b.n	8004828 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004816:	f7fe fe93 	bl	8003540 <HAL_GetTick>
 800481a:	4602      	mov	r2, r0
 800481c:	693b      	ldr	r3, [r7, #16]
 800481e:	1ad3      	subs	r3, r2, r3
 8004820:	2b02      	cmp	r3, #2
 8004822:	d901      	bls.n	8004828 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8004824:	2303      	movs	r3, #3
 8004826:	e0ff      	b.n	8004a28 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004828:	4b57      	ldr	r3, [pc, #348]	; (8004988 <HAL_RCC_OscConfig+0x778>)
 800482a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800482e:	f003 0302 	and.w	r3, r3, #2
 8004832:	2b00      	cmp	r3, #0
 8004834:	d1ef      	bne.n	8004816 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800483a:	2b00      	cmp	r3, #0
 800483c:	f000 80f3 	beq.w	8004a26 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004844:	2b02      	cmp	r3, #2
 8004846:	f040 80c9 	bne.w	80049dc <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800484a:	4b4f      	ldr	r3, [pc, #316]	; (8004988 <HAL_RCC_OscConfig+0x778>)
 800484c:	68db      	ldr	r3, [r3, #12]
 800484e:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004850:	697b      	ldr	r3, [r7, #20]
 8004852:	f003 0203 	and.w	r2, r3, #3
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800485a:	429a      	cmp	r2, r3
 800485c:	d12c      	bne.n	80048b8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800485e:	697b      	ldr	r3, [r7, #20]
 8004860:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004868:	3b01      	subs	r3, #1
 800486a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800486c:	429a      	cmp	r2, r3
 800486e:	d123      	bne.n	80048b8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004870:	697b      	ldr	r3, [r7, #20]
 8004872:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800487a:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800487c:	429a      	cmp	r2, r3
 800487e:	d11b      	bne.n	80048b8 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004880:	697b      	ldr	r3, [r7, #20]
 8004882:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800488a:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800488c:	429a      	cmp	r2, r3
 800488e:	d113      	bne.n	80048b8 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004890:	697b      	ldr	r3, [r7, #20]
 8004892:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800489a:	085b      	lsrs	r3, r3, #1
 800489c:	3b01      	subs	r3, #1
 800489e:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80048a0:	429a      	cmp	r2, r3
 80048a2:	d109      	bne.n	80048b8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80048a4:	697b      	ldr	r3, [r7, #20]
 80048a6:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048ae:	085b      	lsrs	r3, r3, #1
 80048b0:	3b01      	subs	r3, #1
 80048b2:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80048b4:	429a      	cmp	r2, r3
 80048b6:	d06b      	beq.n	8004990 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80048b8:	69bb      	ldr	r3, [r7, #24]
 80048ba:	2b0c      	cmp	r3, #12
 80048bc:	d062      	beq.n	8004984 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80048be:	4b32      	ldr	r3, [pc, #200]	; (8004988 <HAL_RCC_OscConfig+0x778>)
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d001      	beq.n	80048ce <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 80048ca:	2301      	movs	r3, #1
 80048cc:	e0ac      	b.n	8004a28 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80048ce:	4b2e      	ldr	r3, [pc, #184]	; (8004988 <HAL_RCC_OscConfig+0x778>)
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	4a2d      	ldr	r2, [pc, #180]	; (8004988 <HAL_RCC_OscConfig+0x778>)
 80048d4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80048d8:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80048da:	f7fe fe31 	bl	8003540 <HAL_GetTick>
 80048de:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80048e0:	e008      	b.n	80048f4 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80048e2:	f7fe fe2d 	bl	8003540 <HAL_GetTick>
 80048e6:	4602      	mov	r2, r0
 80048e8:	693b      	ldr	r3, [r7, #16]
 80048ea:	1ad3      	subs	r3, r2, r3
 80048ec:	2b02      	cmp	r3, #2
 80048ee:	d901      	bls.n	80048f4 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 80048f0:	2303      	movs	r3, #3
 80048f2:	e099      	b.n	8004a28 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80048f4:	4b24      	ldr	r3, [pc, #144]	; (8004988 <HAL_RCC_OscConfig+0x778>)
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d1f0      	bne.n	80048e2 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004900:	4b21      	ldr	r3, [pc, #132]	; (8004988 <HAL_RCC_OscConfig+0x778>)
 8004902:	68da      	ldr	r2, [r3, #12]
 8004904:	4b21      	ldr	r3, [pc, #132]	; (800498c <HAL_RCC_OscConfig+0x77c>)
 8004906:	4013      	ands	r3, r2
 8004908:	687a      	ldr	r2, [r7, #4]
 800490a:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800490c:	687a      	ldr	r2, [r7, #4]
 800490e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004910:	3a01      	subs	r2, #1
 8004912:	0112      	lsls	r2, r2, #4
 8004914:	4311      	orrs	r1, r2
 8004916:	687a      	ldr	r2, [r7, #4]
 8004918:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800491a:	0212      	lsls	r2, r2, #8
 800491c:	4311      	orrs	r1, r2
 800491e:	687a      	ldr	r2, [r7, #4]
 8004920:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004922:	0852      	lsrs	r2, r2, #1
 8004924:	3a01      	subs	r2, #1
 8004926:	0552      	lsls	r2, r2, #21
 8004928:	4311      	orrs	r1, r2
 800492a:	687a      	ldr	r2, [r7, #4]
 800492c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800492e:	0852      	lsrs	r2, r2, #1
 8004930:	3a01      	subs	r2, #1
 8004932:	0652      	lsls	r2, r2, #25
 8004934:	4311      	orrs	r1, r2
 8004936:	687a      	ldr	r2, [r7, #4]
 8004938:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800493a:	06d2      	lsls	r2, r2, #27
 800493c:	430a      	orrs	r2, r1
 800493e:	4912      	ldr	r1, [pc, #72]	; (8004988 <HAL_RCC_OscConfig+0x778>)
 8004940:	4313      	orrs	r3, r2
 8004942:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004944:	4b10      	ldr	r3, [pc, #64]	; (8004988 <HAL_RCC_OscConfig+0x778>)
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	4a0f      	ldr	r2, [pc, #60]	; (8004988 <HAL_RCC_OscConfig+0x778>)
 800494a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800494e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004950:	4b0d      	ldr	r3, [pc, #52]	; (8004988 <HAL_RCC_OscConfig+0x778>)
 8004952:	68db      	ldr	r3, [r3, #12]
 8004954:	4a0c      	ldr	r2, [pc, #48]	; (8004988 <HAL_RCC_OscConfig+0x778>)
 8004956:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800495a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800495c:	f7fe fdf0 	bl	8003540 <HAL_GetTick>
 8004960:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004962:	e008      	b.n	8004976 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004964:	f7fe fdec 	bl	8003540 <HAL_GetTick>
 8004968:	4602      	mov	r2, r0
 800496a:	693b      	ldr	r3, [r7, #16]
 800496c:	1ad3      	subs	r3, r2, r3
 800496e:	2b02      	cmp	r3, #2
 8004970:	d901      	bls.n	8004976 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8004972:	2303      	movs	r3, #3
 8004974:	e058      	b.n	8004a28 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004976:	4b04      	ldr	r3, [pc, #16]	; (8004988 <HAL_RCC_OscConfig+0x778>)
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800497e:	2b00      	cmp	r3, #0
 8004980:	d0f0      	beq.n	8004964 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004982:	e050      	b.n	8004a26 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004984:	2301      	movs	r3, #1
 8004986:	e04f      	b.n	8004a28 <HAL_RCC_OscConfig+0x818>
 8004988:	40021000 	.word	0x40021000
 800498c:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004990:	4b27      	ldr	r3, [pc, #156]	; (8004a30 <HAL_RCC_OscConfig+0x820>)
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004998:	2b00      	cmp	r3, #0
 800499a:	d144      	bne.n	8004a26 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800499c:	4b24      	ldr	r3, [pc, #144]	; (8004a30 <HAL_RCC_OscConfig+0x820>)
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	4a23      	ldr	r2, [pc, #140]	; (8004a30 <HAL_RCC_OscConfig+0x820>)
 80049a2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80049a6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80049a8:	4b21      	ldr	r3, [pc, #132]	; (8004a30 <HAL_RCC_OscConfig+0x820>)
 80049aa:	68db      	ldr	r3, [r3, #12]
 80049ac:	4a20      	ldr	r2, [pc, #128]	; (8004a30 <HAL_RCC_OscConfig+0x820>)
 80049ae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80049b2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80049b4:	f7fe fdc4 	bl	8003540 <HAL_GetTick>
 80049b8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80049ba:	e008      	b.n	80049ce <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80049bc:	f7fe fdc0 	bl	8003540 <HAL_GetTick>
 80049c0:	4602      	mov	r2, r0
 80049c2:	693b      	ldr	r3, [r7, #16]
 80049c4:	1ad3      	subs	r3, r2, r3
 80049c6:	2b02      	cmp	r3, #2
 80049c8:	d901      	bls.n	80049ce <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 80049ca:	2303      	movs	r3, #3
 80049cc:	e02c      	b.n	8004a28 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80049ce:	4b18      	ldr	r3, [pc, #96]	; (8004a30 <HAL_RCC_OscConfig+0x820>)
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d0f0      	beq.n	80049bc <HAL_RCC_OscConfig+0x7ac>
 80049da:	e024      	b.n	8004a26 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80049dc:	69bb      	ldr	r3, [r7, #24]
 80049de:	2b0c      	cmp	r3, #12
 80049e0:	d01f      	beq.n	8004a22 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80049e2:	4b13      	ldr	r3, [pc, #76]	; (8004a30 <HAL_RCC_OscConfig+0x820>)
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	4a12      	ldr	r2, [pc, #72]	; (8004a30 <HAL_RCC_OscConfig+0x820>)
 80049e8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80049ec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049ee:	f7fe fda7 	bl	8003540 <HAL_GetTick>
 80049f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80049f4:	e008      	b.n	8004a08 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80049f6:	f7fe fda3 	bl	8003540 <HAL_GetTick>
 80049fa:	4602      	mov	r2, r0
 80049fc:	693b      	ldr	r3, [r7, #16]
 80049fe:	1ad3      	subs	r3, r2, r3
 8004a00:	2b02      	cmp	r3, #2
 8004a02:	d901      	bls.n	8004a08 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8004a04:	2303      	movs	r3, #3
 8004a06:	e00f      	b.n	8004a28 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004a08:	4b09      	ldr	r3, [pc, #36]	; (8004a30 <HAL_RCC_OscConfig+0x820>)
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d1f0      	bne.n	80049f6 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8004a14:	4b06      	ldr	r3, [pc, #24]	; (8004a30 <HAL_RCC_OscConfig+0x820>)
 8004a16:	68da      	ldr	r2, [r3, #12]
 8004a18:	4905      	ldr	r1, [pc, #20]	; (8004a30 <HAL_RCC_OscConfig+0x820>)
 8004a1a:	4b06      	ldr	r3, [pc, #24]	; (8004a34 <HAL_RCC_OscConfig+0x824>)
 8004a1c:	4013      	ands	r3, r2
 8004a1e:	60cb      	str	r3, [r1, #12]
 8004a20:	e001      	b.n	8004a26 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004a22:	2301      	movs	r3, #1
 8004a24:	e000      	b.n	8004a28 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8004a26:	2300      	movs	r3, #0
}
 8004a28:	4618      	mov	r0, r3
 8004a2a:	3720      	adds	r7, #32
 8004a2c:	46bd      	mov	sp, r7
 8004a2e:	bd80      	pop	{r7, pc}
 8004a30:	40021000 	.word	0x40021000
 8004a34:	feeefffc 	.word	0xfeeefffc

08004a38 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004a38:	b580      	push	{r7, lr}
 8004a3a:	b084      	sub	sp, #16
 8004a3c:	af00      	add	r7, sp, #0
 8004a3e:	6078      	str	r0, [r7, #4]
 8004a40:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d101      	bne.n	8004a4c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004a48:	2301      	movs	r3, #1
 8004a4a:	e0e7      	b.n	8004c1c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004a4c:	4b75      	ldr	r3, [pc, #468]	; (8004c24 <HAL_RCC_ClockConfig+0x1ec>)
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	f003 0307 	and.w	r3, r3, #7
 8004a54:	683a      	ldr	r2, [r7, #0]
 8004a56:	429a      	cmp	r2, r3
 8004a58:	d910      	bls.n	8004a7c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a5a:	4b72      	ldr	r3, [pc, #456]	; (8004c24 <HAL_RCC_ClockConfig+0x1ec>)
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	f023 0207 	bic.w	r2, r3, #7
 8004a62:	4970      	ldr	r1, [pc, #448]	; (8004c24 <HAL_RCC_ClockConfig+0x1ec>)
 8004a64:	683b      	ldr	r3, [r7, #0]
 8004a66:	4313      	orrs	r3, r2
 8004a68:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a6a:	4b6e      	ldr	r3, [pc, #440]	; (8004c24 <HAL_RCC_ClockConfig+0x1ec>)
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	f003 0307 	and.w	r3, r3, #7
 8004a72:	683a      	ldr	r2, [r7, #0]
 8004a74:	429a      	cmp	r2, r3
 8004a76:	d001      	beq.n	8004a7c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004a78:	2301      	movs	r3, #1
 8004a7a:	e0cf      	b.n	8004c1c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	f003 0302 	and.w	r3, r3, #2
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d010      	beq.n	8004aaa <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	689a      	ldr	r2, [r3, #8]
 8004a8c:	4b66      	ldr	r3, [pc, #408]	; (8004c28 <HAL_RCC_ClockConfig+0x1f0>)
 8004a8e:	689b      	ldr	r3, [r3, #8]
 8004a90:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004a94:	429a      	cmp	r2, r3
 8004a96:	d908      	bls.n	8004aaa <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004a98:	4b63      	ldr	r3, [pc, #396]	; (8004c28 <HAL_RCC_ClockConfig+0x1f0>)
 8004a9a:	689b      	ldr	r3, [r3, #8]
 8004a9c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	689b      	ldr	r3, [r3, #8]
 8004aa4:	4960      	ldr	r1, [pc, #384]	; (8004c28 <HAL_RCC_ClockConfig+0x1f0>)
 8004aa6:	4313      	orrs	r3, r2
 8004aa8:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	f003 0301 	and.w	r3, r3, #1
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d04c      	beq.n	8004b50 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	685b      	ldr	r3, [r3, #4]
 8004aba:	2b03      	cmp	r3, #3
 8004abc:	d107      	bne.n	8004ace <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004abe:	4b5a      	ldr	r3, [pc, #360]	; (8004c28 <HAL_RCC_ClockConfig+0x1f0>)
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d121      	bne.n	8004b0e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8004aca:	2301      	movs	r3, #1
 8004acc:	e0a6      	b.n	8004c1c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	685b      	ldr	r3, [r3, #4]
 8004ad2:	2b02      	cmp	r3, #2
 8004ad4:	d107      	bne.n	8004ae6 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004ad6:	4b54      	ldr	r3, [pc, #336]	; (8004c28 <HAL_RCC_ClockConfig+0x1f0>)
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d115      	bne.n	8004b0e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004ae2:	2301      	movs	r3, #1
 8004ae4:	e09a      	b.n	8004c1c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	685b      	ldr	r3, [r3, #4]
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d107      	bne.n	8004afe <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004aee:	4b4e      	ldr	r3, [pc, #312]	; (8004c28 <HAL_RCC_ClockConfig+0x1f0>)
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	f003 0302 	and.w	r3, r3, #2
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d109      	bne.n	8004b0e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004afa:	2301      	movs	r3, #1
 8004afc:	e08e      	b.n	8004c1c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004afe:	4b4a      	ldr	r3, [pc, #296]	; (8004c28 <HAL_RCC_ClockConfig+0x1f0>)
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d101      	bne.n	8004b0e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004b0a:	2301      	movs	r3, #1
 8004b0c:	e086      	b.n	8004c1c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004b0e:	4b46      	ldr	r3, [pc, #280]	; (8004c28 <HAL_RCC_ClockConfig+0x1f0>)
 8004b10:	689b      	ldr	r3, [r3, #8]
 8004b12:	f023 0203 	bic.w	r2, r3, #3
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	685b      	ldr	r3, [r3, #4]
 8004b1a:	4943      	ldr	r1, [pc, #268]	; (8004c28 <HAL_RCC_ClockConfig+0x1f0>)
 8004b1c:	4313      	orrs	r3, r2
 8004b1e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004b20:	f7fe fd0e 	bl	8003540 <HAL_GetTick>
 8004b24:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b26:	e00a      	b.n	8004b3e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004b28:	f7fe fd0a 	bl	8003540 <HAL_GetTick>
 8004b2c:	4602      	mov	r2, r0
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	1ad3      	subs	r3, r2, r3
 8004b32:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b36:	4293      	cmp	r3, r2
 8004b38:	d901      	bls.n	8004b3e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8004b3a:	2303      	movs	r3, #3
 8004b3c:	e06e      	b.n	8004c1c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b3e:	4b3a      	ldr	r3, [pc, #232]	; (8004c28 <HAL_RCC_ClockConfig+0x1f0>)
 8004b40:	689b      	ldr	r3, [r3, #8]
 8004b42:	f003 020c 	and.w	r2, r3, #12
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	685b      	ldr	r3, [r3, #4]
 8004b4a:	009b      	lsls	r3, r3, #2
 8004b4c:	429a      	cmp	r2, r3
 8004b4e:	d1eb      	bne.n	8004b28 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	f003 0302 	and.w	r3, r3, #2
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d010      	beq.n	8004b7e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	689a      	ldr	r2, [r3, #8]
 8004b60:	4b31      	ldr	r3, [pc, #196]	; (8004c28 <HAL_RCC_ClockConfig+0x1f0>)
 8004b62:	689b      	ldr	r3, [r3, #8]
 8004b64:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004b68:	429a      	cmp	r2, r3
 8004b6a:	d208      	bcs.n	8004b7e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004b6c:	4b2e      	ldr	r3, [pc, #184]	; (8004c28 <HAL_RCC_ClockConfig+0x1f0>)
 8004b6e:	689b      	ldr	r3, [r3, #8]
 8004b70:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	689b      	ldr	r3, [r3, #8]
 8004b78:	492b      	ldr	r1, [pc, #172]	; (8004c28 <HAL_RCC_ClockConfig+0x1f0>)
 8004b7a:	4313      	orrs	r3, r2
 8004b7c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004b7e:	4b29      	ldr	r3, [pc, #164]	; (8004c24 <HAL_RCC_ClockConfig+0x1ec>)
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	f003 0307 	and.w	r3, r3, #7
 8004b86:	683a      	ldr	r2, [r7, #0]
 8004b88:	429a      	cmp	r2, r3
 8004b8a:	d210      	bcs.n	8004bae <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b8c:	4b25      	ldr	r3, [pc, #148]	; (8004c24 <HAL_RCC_ClockConfig+0x1ec>)
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	f023 0207 	bic.w	r2, r3, #7
 8004b94:	4923      	ldr	r1, [pc, #140]	; (8004c24 <HAL_RCC_ClockConfig+0x1ec>)
 8004b96:	683b      	ldr	r3, [r7, #0]
 8004b98:	4313      	orrs	r3, r2
 8004b9a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b9c:	4b21      	ldr	r3, [pc, #132]	; (8004c24 <HAL_RCC_ClockConfig+0x1ec>)
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	f003 0307 	and.w	r3, r3, #7
 8004ba4:	683a      	ldr	r2, [r7, #0]
 8004ba6:	429a      	cmp	r2, r3
 8004ba8:	d001      	beq.n	8004bae <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8004baa:	2301      	movs	r3, #1
 8004bac:	e036      	b.n	8004c1c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	f003 0304 	and.w	r3, r3, #4
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d008      	beq.n	8004bcc <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004bba:	4b1b      	ldr	r3, [pc, #108]	; (8004c28 <HAL_RCC_ClockConfig+0x1f0>)
 8004bbc:	689b      	ldr	r3, [r3, #8]
 8004bbe:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	68db      	ldr	r3, [r3, #12]
 8004bc6:	4918      	ldr	r1, [pc, #96]	; (8004c28 <HAL_RCC_ClockConfig+0x1f0>)
 8004bc8:	4313      	orrs	r3, r2
 8004bca:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	f003 0308 	and.w	r3, r3, #8
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d009      	beq.n	8004bec <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004bd8:	4b13      	ldr	r3, [pc, #76]	; (8004c28 <HAL_RCC_ClockConfig+0x1f0>)
 8004bda:	689b      	ldr	r3, [r3, #8]
 8004bdc:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	691b      	ldr	r3, [r3, #16]
 8004be4:	00db      	lsls	r3, r3, #3
 8004be6:	4910      	ldr	r1, [pc, #64]	; (8004c28 <HAL_RCC_ClockConfig+0x1f0>)
 8004be8:	4313      	orrs	r3, r2
 8004bea:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004bec:	f000 f824 	bl	8004c38 <HAL_RCC_GetSysClockFreq>
 8004bf0:	4602      	mov	r2, r0
 8004bf2:	4b0d      	ldr	r3, [pc, #52]	; (8004c28 <HAL_RCC_ClockConfig+0x1f0>)
 8004bf4:	689b      	ldr	r3, [r3, #8]
 8004bf6:	091b      	lsrs	r3, r3, #4
 8004bf8:	f003 030f 	and.w	r3, r3, #15
 8004bfc:	490b      	ldr	r1, [pc, #44]	; (8004c2c <HAL_RCC_ClockConfig+0x1f4>)
 8004bfe:	5ccb      	ldrb	r3, [r1, r3]
 8004c00:	f003 031f 	and.w	r3, r3, #31
 8004c04:	fa22 f303 	lsr.w	r3, r2, r3
 8004c08:	4a09      	ldr	r2, [pc, #36]	; (8004c30 <HAL_RCC_ClockConfig+0x1f8>)
 8004c0a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004c0c:	4b09      	ldr	r3, [pc, #36]	; (8004c34 <HAL_RCC_ClockConfig+0x1fc>)
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	4618      	mov	r0, r3
 8004c12:	f7fd fffd 	bl	8002c10 <HAL_InitTick>
 8004c16:	4603      	mov	r3, r0
 8004c18:	72fb      	strb	r3, [r7, #11]

  return status;
 8004c1a:	7afb      	ldrb	r3, [r7, #11]
}
 8004c1c:	4618      	mov	r0, r3
 8004c1e:	3710      	adds	r7, #16
 8004c20:	46bd      	mov	sp, r7
 8004c22:	bd80      	pop	{r7, pc}
 8004c24:	40022000 	.word	0x40022000
 8004c28:	40021000 	.word	0x40021000
 8004c2c:	0800c408 	.word	0x0800c408
 8004c30:	20000000 	.word	0x20000000
 8004c34:	2000000c 	.word	0x2000000c

08004c38 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004c38:	b480      	push	{r7}
 8004c3a:	b089      	sub	sp, #36	; 0x24
 8004c3c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004c3e:	2300      	movs	r3, #0
 8004c40:	61fb      	str	r3, [r7, #28]
 8004c42:	2300      	movs	r3, #0
 8004c44:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004c46:	4b3e      	ldr	r3, [pc, #248]	; (8004d40 <HAL_RCC_GetSysClockFreq+0x108>)
 8004c48:	689b      	ldr	r3, [r3, #8]
 8004c4a:	f003 030c 	and.w	r3, r3, #12
 8004c4e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004c50:	4b3b      	ldr	r3, [pc, #236]	; (8004d40 <HAL_RCC_GetSysClockFreq+0x108>)
 8004c52:	68db      	ldr	r3, [r3, #12]
 8004c54:	f003 0303 	and.w	r3, r3, #3
 8004c58:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004c5a:	693b      	ldr	r3, [r7, #16]
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d005      	beq.n	8004c6c <HAL_RCC_GetSysClockFreq+0x34>
 8004c60:	693b      	ldr	r3, [r7, #16]
 8004c62:	2b0c      	cmp	r3, #12
 8004c64:	d121      	bne.n	8004caa <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	2b01      	cmp	r3, #1
 8004c6a:	d11e      	bne.n	8004caa <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004c6c:	4b34      	ldr	r3, [pc, #208]	; (8004d40 <HAL_RCC_GetSysClockFreq+0x108>)
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	f003 0308 	and.w	r3, r3, #8
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d107      	bne.n	8004c88 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004c78:	4b31      	ldr	r3, [pc, #196]	; (8004d40 <HAL_RCC_GetSysClockFreq+0x108>)
 8004c7a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004c7e:	0a1b      	lsrs	r3, r3, #8
 8004c80:	f003 030f 	and.w	r3, r3, #15
 8004c84:	61fb      	str	r3, [r7, #28]
 8004c86:	e005      	b.n	8004c94 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004c88:	4b2d      	ldr	r3, [pc, #180]	; (8004d40 <HAL_RCC_GetSysClockFreq+0x108>)
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	091b      	lsrs	r3, r3, #4
 8004c8e:	f003 030f 	and.w	r3, r3, #15
 8004c92:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004c94:	4a2b      	ldr	r2, [pc, #172]	; (8004d44 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004c96:	69fb      	ldr	r3, [r7, #28]
 8004c98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004c9c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004c9e:	693b      	ldr	r3, [r7, #16]
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d10d      	bne.n	8004cc0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004ca4:	69fb      	ldr	r3, [r7, #28]
 8004ca6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004ca8:	e00a      	b.n	8004cc0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004caa:	693b      	ldr	r3, [r7, #16]
 8004cac:	2b04      	cmp	r3, #4
 8004cae:	d102      	bne.n	8004cb6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004cb0:	4b25      	ldr	r3, [pc, #148]	; (8004d48 <HAL_RCC_GetSysClockFreq+0x110>)
 8004cb2:	61bb      	str	r3, [r7, #24]
 8004cb4:	e004      	b.n	8004cc0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004cb6:	693b      	ldr	r3, [r7, #16]
 8004cb8:	2b08      	cmp	r3, #8
 8004cba:	d101      	bne.n	8004cc0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004cbc:	4b23      	ldr	r3, [pc, #140]	; (8004d4c <HAL_RCC_GetSysClockFreq+0x114>)
 8004cbe:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004cc0:	693b      	ldr	r3, [r7, #16]
 8004cc2:	2b0c      	cmp	r3, #12
 8004cc4:	d134      	bne.n	8004d30 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004cc6:	4b1e      	ldr	r3, [pc, #120]	; (8004d40 <HAL_RCC_GetSysClockFreq+0x108>)
 8004cc8:	68db      	ldr	r3, [r3, #12]
 8004cca:	f003 0303 	and.w	r3, r3, #3
 8004cce:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004cd0:	68bb      	ldr	r3, [r7, #8]
 8004cd2:	2b02      	cmp	r3, #2
 8004cd4:	d003      	beq.n	8004cde <HAL_RCC_GetSysClockFreq+0xa6>
 8004cd6:	68bb      	ldr	r3, [r7, #8]
 8004cd8:	2b03      	cmp	r3, #3
 8004cda:	d003      	beq.n	8004ce4 <HAL_RCC_GetSysClockFreq+0xac>
 8004cdc:	e005      	b.n	8004cea <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004cde:	4b1a      	ldr	r3, [pc, #104]	; (8004d48 <HAL_RCC_GetSysClockFreq+0x110>)
 8004ce0:	617b      	str	r3, [r7, #20]
      break;
 8004ce2:	e005      	b.n	8004cf0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004ce4:	4b19      	ldr	r3, [pc, #100]	; (8004d4c <HAL_RCC_GetSysClockFreq+0x114>)
 8004ce6:	617b      	str	r3, [r7, #20]
      break;
 8004ce8:	e002      	b.n	8004cf0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004cea:	69fb      	ldr	r3, [r7, #28]
 8004cec:	617b      	str	r3, [r7, #20]
      break;
 8004cee:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004cf0:	4b13      	ldr	r3, [pc, #76]	; (8004d40 <HAL_RCC_GetSysClockFreq+0x108>)
 8004cf2:	68db      	ldr	r3, [r3, #12]
 8004cf4:	091b      	lsrs	r3, r3, #4
 8004cf6:	f003 0307 	and.w	r3, r3, #7
 8004cfa:	3301      	adds	r3, #1
 8004cfc:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004cfe:	4b10      	ldr	r3, [pc, #64]	; (8004d40 <HAL_RCC_GetSysClockFreq+0x108>)
 8004d00:	68db      	ldr	r3, [r3, #12]
 8004d02:	0a1b      	lsrs	r3, r3, #8
 8004d04:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004d08:	697a      	ldr	r2, [r7, #20]
 8004d0a:	fb03 f202 	mul.w	r2, r3, r2
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d14:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004d16:	4b0a      	ldr	r3, [pc, #40]	; (8004d40 <HAL_RCC_GetSysClockFreq+0x108>)
 8004d18:	68db      	ldr	r3, [r3, #12]
 8004d1a:	0e5b      	lsrs	r3, r3, #25
 8004d1c:	f003 0303 	and.w	r3, r3, #3
 8004d20:	3301      	adds	r3, #1
 8004d22:	005b      	lsls	r3, r3, #1
 8004d24:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004d26:	697a      	ldr	r2, [r7, #20]
 8004d28:	683b      	ldr	r3, [r7, #0]
 8004d2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d2e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004d30:	69bb      	ldr	r3, [r7, #24]
}
 8004d32:	4618      	mov	r0, r3
 8004d34:	3724      	adds	r7, #36	; 0x24
 8004d36:	46bd      	mov	sp, r7
 8004d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d3c:	4770      	bx	lr
 8004d3e:	bf00      	nop
 8004d40:	40021000 	.word	0x40021000
 8004d44:	0800c420 	.word	0x0800c420
 8004d48:	00f42400 	.word	0x00f42400
 8004d4c:	007a1200 	.word	0x007a1200

08004d50 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004d50:	b480      	push	{r7}
 8004d52:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004d54:	4b03      	ldr	r3, [pc, #12]	; (8004d64 <HAL_RCC_GetHCLKFreq+0x14>)
 8004d56:	681b      	ldr	r3, [r3, #0]
}
 8004d58:	4618      	mov	r0, r3
 8004d5a:	46bd      	mov	sp, r7
 8004d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d60:	4770      	bx	lr
 8004d62:	bf00      	nop
 8004d64:	20000000 	.word	0x20000000

08004d68 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004d68:	b580      	push	{r7, lr}
 8004d6a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004d6c:	f7ff fff0 	bl	8004d50 <HAL_RCC_GetHCLKFreq>
 8004d70:	4602      	mov	r2, r0
 8004d72:	4b06      	ldr	r3, [pc, #24]	; (8004d8c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004d74:	689b      	ldr	r3, [r3, #8]
 8004d76:	0a1b      	lsrs	r3, r3, #8
 8004d78:	f003 0307 	and.w	r3, r3, #7
 8004d7c:	4904      	ldr	r1, [pc, #16]	; (8004d90 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004d7e:	5ccb      	ldrb	r3, [r1, r3]
 8004d80:	f003 031f 	and.w	r3, r3, #31
 8004d84:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004d88:	4618      	mov	r0, r3
 8004d8a:	bd80      	pop	{r7, pc}
 8004d8c:	40021000 	.word	0x40021000
 8004d90:	0800c418 	.word	0x0800c418

08004d94 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004d94:	b580      	push	{r7, lr}
 8004d96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004d98:	f7ff ffda 	bl	8004d50 <HAL_RCC_GetHCLKFreq>
 8004d9c:	4602      	mov	r2, r0
 8004d9e:	4b06      	ldr	r3, [pc, #24]	; (8004db8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004da0:	689b      	ldr	r3, [r3, #8]
 8004da2:	0adb      	lsrs	r3, r3, #11
 8004da4:	f003 0307 	and.w	r3, r3, #7
 8004da8:	4904      	ldr	r1, [pc, #16]	; (8004dbc <HAL_RCC_GetPCLK2Freq+0x28>)
 8004daa:	5ccb      	ldrb	r3, [r1, r3]
 8004dac:	f003 031f 	and.w	r3, r3, #31
 8004db0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004db4:	4618      	mov	r0, r3
 8004db6:	bd80      	pop	{r7, pc}
 8004db8:	40021000 	.word	0x40021000
 8004dbc:	0800c418 	.word	0x0800c418

08004dc0 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004dc0:	b480      	push	{r7}
 8004dc2:	b083      	sub	sp, #12
 8004dc4:	af00      	add	r7, sp, #0
 8004dc6:	6078      	str	r0, [r7, #4]
 8004dc8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	220f      	movs	r2, #15
 8004dce:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8004dd0:	4b12      	ldr	r3, [pc, #72]	; (8004e1c <HAL_RCC_GetClockConfig+0x5c>)
 8004dd2:	689b      	ldr	r3, [r3, #8]
 8004dd4:	f003 0203 	and.w	r2, r3, #3
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8004ddc:	4b0f      	ldr	r3, [pc, #60]	; (8004e1c <HAL_RCC_GetClockConfig+0x5c>)
 8004dde:	689b      	ldr	r3, [r3, #8]
 8004de0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8004de8:	4b0c      	ldr	r3, [pc, #48]	; (8004e1c <HAL_RCC_GetClockConfig+0x5c>)
 8004dea:	689b      	ldr	r3, [r3, #8]
 8004dec:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8004df4:	4b09      	ldr	r3, [pc, #36]	; (8004e1c <HAL_RCC_GetClockConfig+0x5c>)
 8004df6:	689b      	ldr	r3, [r3, #8]
 8004df8:	08db      	lsrs	r3, r3, #3
 8004dfa:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8004e02:	4b07      	ldr	r3, [pc, #28]	; (8004e20 <HAL_RCC_GetClockConfig+0x60>)
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	f003 0207 	and.w	r2, r3, #7
 8004e0a:	683b      	ldr	r3, [r7, #0]
 8004e0c:	601a      	str	r2, [r3, #0]
}
 8004e0e:	bf00      	nop
 8004e10:	370c      	adds	r7, #12
 8004e12:	46bd      	mov	sp, r7
 8004e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e18:	4770      	bx	lr
 8004e1a:	bf00      	nop
 8004e1c:	40021000 	.word	0x40021000
 8004e20:	40022000 	.word	0x40022000

08004e24 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004e24:	b580      	push	{r7, lr}
 8004e26:	b086      	sub	sp, #24
 8004e28:	af00      	add	r7, sp, #0
 8004e2a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004e2c:	2300      	movs	r3, #0
 8004e2e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004e30:	4b2a      	ldr	r3, [pc, #168]	; (8004edc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004e32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e34:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d003      	beq.n	8004e44 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004e3c:	f7ff f984 	bl	8004148 <HAL_PWREx_GetVoltageRange>
 8004e40:	6178      	str	r0, [r7, #20]
 8004e42:	e014      	b.n	8004e6e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004e44:	4b25      	ldr	r3, [pc, #148]	; (8004edc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004e46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e48:	4a24      	ldr	r2, [pc, #144]	; (8004edc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004e4a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e4e:	6593      	str	r3, [r2, #88]	; 0x58
 8004e50:	4b22      	ldr	r3, [pc, #136]	; (8004edc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004e52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e54:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e58:	60fb      	str	r3, [r7, #12]
 8004e5a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004e5c:	f7ff f974 	bl	8004148 <HAL_PWREx_GetVoltageRange>
 8004e60:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004e62:	4b1e      	ldr	r3, [pc, #120]	; (8004edc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004e64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e66:	4a1d      	ldr	r2, [pc, #116]	; (8004edc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004e68:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004e6c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004e6e:	697b      	ldr	r3, [r7, #20]
 8004e70:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004e74:	d10b      	bne.n	8004e8e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	2b80      	cmp	r3, #128	; 0x80
 8004e7a:	d919      	bls.n	8004eb0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	2ba0      	cmp	r3, #160	; 0xa0
 8004e80:	d902      	bls.n	8004e88 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004e82:	2302      	movs	r3, #2
 8004e84:	613b      	str	r3, [r7, #16]
 8004e86:	e013      	b.n	8004eb0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004e88:	2301      	movs	r3, #1
 8004e8a:	613b      	str	r3, [r7, #16]
 8004e8c:	e010      	b.n	8004eb0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	2b80      	cmp	r3, #128	; 0x80
 8004e92:	d902      	bls.n	8004e9a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004e94:	2303      	movs	r3, #3
 8004e96:	613b      	str	r3, [r7, #16]
 8004e98:	e00a      	b.n	8004eb0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	2b80      	cmp	r3, #128	; 0x80
 8004e9e:	d102      	bne.n	8004ea6 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004ea0:	2302      	movs	r3, #2
 8004ea2:	613b      	str	r3, [r7, #16]
 8004ea4:	e004      	b.n	8004eb0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	2b70      	cmp	r3, #112	; 0x70
 8004eaa:	d101      	bne.n	8004eb0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004eac:	2301      	movs	r3, #1
 8004eae:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004eb0:	4b0b      	ldr	r3, [pc, #44]	; (8004ee0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	f023 0207 	bic.w	r2, r3, #7
 8004eb8:	4909      	ldr	r1, [pc, #36]	; (8004ee0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004eba:	693b      	ldr	r3, [r7, #16]
 8004ebc:	4313      	orrs	r3, r2
 8004ebe:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004ec0:	4b07      	ldr	r3, [pc, #28]	; (8004ee0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	f003 0307 	and.w	r3, r3, #7
 8004ec8:	693a      	ldr	r2, [r7, #16]
 8004eca:	429a      	cmp	r2, r3
 8004ecc:	d001      	beq.n	8004ed2 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8004ece:	2301      	movs	r3, #1
 8004ed0:	e000      	b.n	8004ed4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8004ed2:	2300      	movs	r3, #0
}
 8004ed4:	4618      	mov	r0, r3
 8004ed6:	3718      	adds	r7, #24
 8004ed8:	46bd      	mov	sp, r7
 8004eda:	bd80      	pop	{r7, pc}
 8004edc:	40021000 	.word	0x40021000
 8004ee0:	40022000 	.word	0x40022000

08004ee4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004ee4:	b580      	push	{r7, lr}
 8004ee6:	b086      	sub	sp, #24
 8004ee8:	af00      	add	r7, sp, #0
 8004eea:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004eec:	2300      	movs	r3, #0
 8004eee:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004ef0:	2300      	movs	r3, #0
 8004ef2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d031      	beq.n	8004f64 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f04:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004f08:	d01a      	beq.n	8004f40 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8004f0a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004f0e:	d814      	bhi.n	8004f3a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d009      	beq.n	8004f28 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004f14:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004f18:	d10f      	bne.n	8004f3a <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8004f1a:	4b5d      	ldr	r3, [pc, #372]	; (8005090 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004f1c:	68db      	ldr	r3, [r3, #12]
 8004f1e:	4a5c      	ldr	r2, [pc, #368]	; (8005090 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004f20:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004f24:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004f26:	e00c      	b.n	8004f42 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	3304      	adds	r3, #4
 8004f2c:	2100      	movs	r1, #0
 8004f2e:	4618      	mov	r0, r3
 8004f30:	f000 f9de 	bl	80052f0 <RCCEx_PLLSAI1_Config>
 8004f34:	4603      	mov	r3, r0
 8004f36:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004f38:	e003      	b.n	8004f42 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004f3a:	2301      	movs	r3, #1
 8004f3c:	74fb      	strb	r3, [r7, #19]
      break;
 8004f3e:	e000      	b.n	8004f42 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8004f40:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004f42:	7cfb      	ldrb	r3, [r7, #19]
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d10b      	bne.n	8004f60 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004f48:	4b51      	ldr	r3, [pc, #324]	; (8005090 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004f4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f4e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f56:	494e      	ldr	r1, [pc, #312]	; (8005090 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004f58:	4313      	orrs	r3, r2
 8004f5a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004f5e:	e001      	b.n	8004f64 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f60:	7cfb      	ldrb	r3, [r7, #19]
 8004f62:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	f000 809e 	beq.w	80050ae <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004f72:	2300      	movs	r3, #0
 8004f74:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004f76:	4b46      	ldr	r3, [pc, #280]	; (8005090 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004f78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d101      	bne.n	8004f86 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8004f82:	2301      	movs	r3, #1
 8004f84:	e000      	b.n	8004f88 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8004f86:	2300      	movs	r3, #0
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d00d      	beq.n	8004fa8 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004f8c:	4b40      	ldr	r3, [pc, #256]	; (8005090 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004f8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f90:	4a3f      	ldr	r2, [pc, #252]	; (8005090 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004f92:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f96:	6593      	str	r3, [r2, #88]	; 0x58
 8004f98:	4b3d      	ldr	r3, [pc, #244]	; (8005090 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004f9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f9c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004fa0:	60bb      	str	r3, [r7, #8]
 8004fa2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004fa4:	2301      	movs	r3, #1
 8004fa6:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004fa8:	4b3a      	ldr	r3, [pc, #232]	; (8005094 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	4a39      	ldr	r2, [pc, #228]	; (8005094 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8004fae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004fb2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004fb4:	f7fe fac4 	bl	8003540 <HAL_GetTick>
 8004fb8:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004fba:	e009      	b.n	8004fd0 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004fbc:	f7fe fac0 	bl	8003540 <HAL_GetTick>
 8004fc0:	4602      	mov	r2, r0
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	1ad3      	subs	r3, r2, r3
 8004fc6:	2b02      	cmp	r3, #2
 8004fc8:	d902      	bls.n	8004fd0 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8004fca:	2303      	movs	r3, #3
 8004fcc:	74fb      	strb	r3, [r7, #19]
        break;
 8004fce:	e005      	b.n	8004fdc <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004fd0:	4b30      	ldr	r3, [pc, #192]	; (8005094 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d0ef      	beq.n	8004fbc <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8004fdc:	7cfb      	ldrb	r3, [r7, #19]
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d15a      	bne.n	8005098 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004fe2:	4b2b      	ldr	r3, [pc, #172]	; (8005090 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004fe4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fe8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004fec:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004fee:	697b      	ldr	r3, [r7, #20]
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d01e      	beq.n	8005032 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ff8:	697a      	ldr	r2, [r7, #20]
 8004ffa:	429a      	cmp	r2, r3
 8004ffc:	d019      	beq.n	8005032 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004ffe:	4b24      	ldr	r3, [pc, #144]	; (8005090 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005000:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005004:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005008:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800500a:	4b21      	ldr	r3, [pc, #132]	; (8005090 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800500c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005010:	4a1f      	ldr	r2, [pc, #124]	; (8005090 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005012:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005016:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800501a:	4b1d      	ldr	r3, [pc, #116]	; (8005090 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800501c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005020:	4a1b      	ldr	r2, [pc, #108]	; (8005090 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005022:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005026:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800502a:	4a19      	ldr	r2, [pc, #100]	; (8005090 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800502c:	697b      	ldr	r3, [r7, #20]
 800502e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005032:	697b      	ldr	r3, [r7, #20]
 8005034:	f003 0301 	and.w	r3, r3, #1
 8005038:	2b00      	cmp	r3, #0
 800503a:	d016      	beq.n	800506a <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800503c:	f7fe fa80 	bl	8003540 <HAL_GetTick>
 8005040:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005042:	e00b      	b.n	800505c <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005044:	f7fe fa7c 	bl	8003540 <HAL_GetTick>
 8005048:	4602      	mov	r2, r0
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	1ad3      	subs	r3, r2, r3
 800504e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005052:	4293      	cmp	r3, r2
 8005054:	d902      	bls.n	800505c <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8005056:	2303      	movs	r3, #3
 8005058:	74fb      	strb	r3, [r7, #19]
            break;
 800505a:	e006      	b.n	800506a <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800505c:	4b0c      	ldr	r3, [pc, #48]	; (8005090 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800505e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005062:	f003 0302 	and.w	r3, r3, #2
 8005066:	2b00      	cmp	r3, #0
 8005068:	d0ec      	beq.n	8005044 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 800506a:	7cfb      	ldrb	r3, [r7, #19]
 800506c:	2b00      	cmp	r3, #0
 800506e:	d10b      	bne.n	8005088 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005070:	4b07      	ldr	r3, [pc, #28]	; (8005090 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005072:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005076:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800507e:	4904      	ldr	r1, [pc, #16]	; (8005090 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005080:	4313      	orrs	r3, r2
 8005082:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8005086:	e009      	b.n	800509c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005088:	7cfb      	ldrb	r3, [r7, #19]
 800508a:	74bb      	strb	r3, [r7, #18]
 800508c:	e006      	b.n	800509c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 800508e:	bf00      	nop
 8005090:	40021000 	.word	0x40021000
 8005094:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005098:	7cfb      	ldrb	r3, [r7, #19]
 800509a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800509c:	7c7b      	ldrb	r3, [r7, #17]
 800509e:	2b01      	cmp	r3, #1
 80050a0:	d105      	bne.n	80050ae <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80050a2:	4b8a      	ldr	r3, [pc, #552]	; (80052cc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80050a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050a6:	4a89      	ldr	r2, [pc, #548]	; (80052cc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80050a8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80050ac:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	f003 0301 	and.w	r3, r3, #1
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d00a      	beq.n	80050d0 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80050ba:	4b84      	ldr	r3, [pc, #528]	; (80052cc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80050bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050c0:	f023 0203 	bic.w	r2, r3, #3
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	6a1b      	ldr	r3, [r3, #32]
 80050c8:	4980      	ldr	r1, [pc, #512]	; (80052cc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80050ca:	4313      	orrs	r3, r2
 80050cc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	f003 0302 	and.w	r3, r3, #2
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d00a      	beq.n	80050f2 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80050dc:	4b7b      	ldr	r3, [pc, #492]	; (80052cc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80050de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050e2:	f023 020c 	bic.w	r2, r3, #12
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050ea:	4978      	ldr	r1, [pc, #480]	; (80052cc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80050ec:	4313      	orrs	r3, r2
 80050ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	f003 0320 	and.w	r3, r3, #32
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d00a      	beq.n	8005114 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80050fe:	4b73      	ldr	r3, [pc, #460]	; (80052cc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005100:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005104:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800510c:	496f      	ldr	r1, [pc, #444]	; (80052cc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800510e:	4313      	orrs	r3, r2
 8005110:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800511c:	2b00      	cmp	r3, #0
 800511e:	d00a      	beq.n	8005136 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005120:	4b6a      	ldr	r3, [pc, #424]	; (80052cc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005122:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005126:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800512e:	4967      	ldr	r1, [pc, #412]	; (80052cc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005130:	4313      	orrs	r3, r2
 8005132:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800513e:	2b00      	cmp	r3, #0
 8005140:	d00a      	beq.n	8005158 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005142:	4b62      	ldr	r3, [pc, #392]	; (80052cc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005144:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005148:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005150:	495e      	ldr	r1, [pc, #376]	; (80052cc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005152:	4313      	orrs	r3, r2
 8005154:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005160:	2b00      	cmp	r3, #0
 8005162:	d00a      	beq.n	800517a <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005164:	4b59      	ldr	r3, [pc, #356]	; (80052cc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005166:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800516a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005172:	4956      	ldr	r1, [pc, #344]	; (80052cc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005174:	4313      	orrs	r3, r2
 8005176:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005182:	2b00      	cmp	r3, #0
 8005184:	d00a      	beq.n	800519c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005186:	4b51      	ldr	r3, [pc, #324]	; (80052cc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005188:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800518c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005194:	494d      	ldr	r1, [pc, #308]	; (80052cc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005196:	4313      	orrs	r3, r2
 8005198:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d028      	beq.n	80051fa <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80051a8:	4b48      	ldr	r3, [pc, #288]	; (80052cc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80051aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051ae:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051b6:	4945      	ldr	r1, [pc, #276]	; (80052cc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80051b8:	4313      	orrs	r3, r2
 80051ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051c2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80051c6:	d106      	bne.n	80051d6 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80051c8:	4b40      	ldr	r3, [pc, #256]	; (80052cc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80051ca:	68db      	ldr	r3, [r3, #12]
 80051cc:	4a3f      	ldr	r2, [pc, #252]	; (80052cc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80051ce:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80051d2:	60d3      	str	r3, [r2, #12]
 80051d4:	e011      	b.n	80051fa <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051da:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80051de:	d10c      	bne.n	80051fa <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	3304      	adds	r3, #4
 80051e4:	2101      	movs	r1, #1
 80051e6:	4618      	mov	r0, r3
 80051e8:	f000 f882 	bl	80052f0 <RCCEx_PLLSAI1_Config>
 80051ec:	4603      	mov	r3, r0
 80051ee:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80051f0:	7cfb      	ldrb	r3, [r7, #19]
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d001      	beq.n	80051fa <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 80051f6:	7cfb      	ldrb	r3, [r7, #19]
 80051f8:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005202:	2b00      	cmp	r3, #0
 8005204:	d028      	beq.n	8005258 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005206:	4b31      	ldr	r3, [pc, #196]	; (80052cc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005208:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800520c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005214:	492d      	ldr	r1, [pc, #180]	; (80052cc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005216:	4313      	orrs	r3, r2
 8005218:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005220:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005224:	d106      	bne.n	8005234 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005226:	4b29      	ldr	r3, [pc, #164]	; (80052cc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005228:	68db      	ldr	r3, [r3, #12]
 800522a:	4a28      	ldr	r2, [pc, #160]	; (80052cc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800522c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005230:	60d3      	str	r3, [r2, #12]
 8005232:	e011      	b.n	8005258 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005238:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800523c:	d10c      	bne.n	8005258 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	3304      	adds	r3, #4
 8005242:	2101      	movs	r1, #1
 8005244:	4618      	mov	r0, r3
 8005246:	f000 f853 	bl	80052f0 <RCCEx_PLLSAI1_Config>
 800524a:	4603      	mov	r3, r0
 800524c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800524e:	7cfb      	ldrb	r3, [r7, #19]
 8005250:	2b00      	cmp	r3, #0
 8005252:	d001      	beq.n	8005258 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 8005254:	7cfb      	ldrb	r3, [r7, #19]
 8005256:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005260:	2b00      	cmp	r3, #0
 8005262:	d01c      	beq.n	800529e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005264:	4b19      	ldr	r3, [pc, #100]	; (80052cc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005266:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800526a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005272:	4916      	ldr	r1, [pc, #88]	; (80052cc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005274:	4313      	orrs	r3, r2
 8005276:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800527e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005282:	d10c      	bne.n	800529e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	3304      	adds	r3, #4
 8005288:	2102      	movs	r1, #2
 800528a:	4618      	mov	r0, r3
 800528c:	f000 f830 	bl	80052f0 <RCCEx_PLLSAI1_Config>
 8005290:	4603      	mov	r3, r0
 8005292:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005294:	7cfb      	ldrb	r3, [r7, #19]
 8005296:	2b00      	cmp	r3, #0
 8005298:	d001      	beq.n	800529e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 800529a:	7cfb      	ldrb	r3, [r7, #19]
 800529c:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d00a      	beq.n	80052c0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80052aa:	4b08      	ldr	r3, [pc, #32]	; (80052cc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80052ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052b0:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80052b8:	4904      	ldr	r1, [pc, #16]	; (80052cc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80052ba:	4313      	orrs	r3, r2
 80052bc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80052c0:	7cbb      	ldrb	r3, [r7, #18]
}
 80052c2:	4618      	mov	r0, r3
 80052c4:	3718      	adds	r7, #24
 80052c6:	46bd      	mov	sp, r7
 80052c8:	bd80      	pop	{r7, pc}
 80052ca:	bf00      	nop
 80052cc:	40021000 	.word	0x40021000

080052d0 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 80052d0:	b480      	push	{r7}
 80052d2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 80052d4:	4b05      	ldr	r3, [pc, #20]	; (80052ec <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	4a04      	ldr	r2, [pc, #16]	; (80052ec <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80052da:	f043 0304 	orr.w	r3, r3, #4
 80052de:	6013      	str	r3, [r2, #0]
}
 80052e0:	bf00      	nop
 80052e2:	46bd      	mov	sp, r7
 80052e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e8:	4770      	bx	lr
 80052ea:	bf00      	nop
 80052ec:	40021000 	.word	0x40021000

080052f0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80052f0:	b580      	push	{r7, lr}
 80052f2:	b084      	sub	sp, #16
 80052f4:	af00      	add	r7, sp, #0
 80052f6:	6078      	str	r0, [r7, #4]
 80052f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80052fa:	2300      	movs	r3, #0
 80052fc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80052fe:	4b74      	ldr	r3, [pc, #464]	; (80054d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005300:	68db      	ldr	r3, [r3, #12]
 8005302:	f003 0303 	and.w	r3, r3, #3
 8005306:	2b00      	cmp	r3, #0
 8005308:	d018      	beq.n	800533c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800530a:	4b71      	ldr	r3, [pc, #452]	; (80054d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 800530c:	68db      	ldr	r3, [r3, #12]
 800530e:	f003 0203 	and.w	r2, r3, #3
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	429a      	cmp	r2, r3
 8005318:	d10d      	bne.n	8005336 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
       ||
 800531e:	2b00      	cmp	r3, #0
 8005320:	d009      	beq.n	8005336 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8005322:	4b6b      	ldr	r3, [pc, #428]	; (80054d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005324:	68db      	ldr	r3, [r3, #12]
 8005326:	091b      	lsrs	r3, r3, #4
 8005328:	f003 0307 	and.w	r3, r3, #7
 800532c:	1c5a      	adds	r2, r3, #1
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	685b      	ldr	r3, [r3, #4]
       ||
 8005332:	429a      	cmp	r2, r3
 8005334:	d047      	beq.n	80053c6 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8005336:	2301      	movs	r3, #1
 8005338:	73fb      	strb	r3, [r7, #15]
 800533a:	e044      	b.n	80053c6 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	2b03      	cmp	r3, #3
 8005342:	d018      	beq.n	8005376 <RCCEx_PLLSAI1_Config+0x86>
 8005344:	2b03      	cmp	r3, #3
 8005346:	d825      	bhi.n	8005394 <RCCEx_PLLSAI1_Config+0xa4>
 8005348:	2b01      	cmp	r3, #1
 800534a:	d002      	beq.n	8005352 <RCCEx_PLLSAI1_Config+0x62>
 800534c:	2b02      	cmp	r3, #2
 800534e:	d009      	beq.n	8005364 <RCCEx_PLLSAI1_Config+0x74>
 8005350:	e020      	b.n	8005394 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005352:	4b5f      	ldr	r3, [pc, #380]	; (80054d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	f003 0302 	and.w	r3, r3, #2
 800535a:	2b00      	cmp	r3, #0
 800535c:	d11d      	bne.n	800539a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800535e:	2301      	movs	r3, #1
 8005360:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005362:	e01a      	b.n	800539a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005364:	4b5a      	ldr	r3, [pc, #360]	; (80054d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800536c:	2b00      	cmp	r3, #0
 800536e:	d116      	bne.n	800539e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8005370:	2301      	movs	r3, #1
 8005372:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005374:	e013      	b.n	800539e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005376:	4b56      	ldr	r3, [pc, #344]	; (80054d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800537e:	2b00      	cmp	r3, #0
 8005380:	d10f      	bne.n	80053a2 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005382:	4b53      	ldr	r3, [pc, #332]	; (80054d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800538a:	2b00      	cmp	r3, #0
 800538c:	d109      	bne.n	80053a2 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800538e:	2301      	movs	r3, #1
 8005390:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005392:	e006      	b.n	80053a2 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005394:	2301      	movs	r3, #1
 8005396:	73fb      	strb	r3, [r7, #15]
      break;
 8005398:	e004      	b.n	80053a4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800539a:	bf00      	nop
 800539c:	e002      	b.n	80053a4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800539e:	bf00      	nop
 80053a0:	e000      	b.n	80053a4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80053a2:	bf00      	nop
    }

    if(status == HAL_OK)
 80053a4:	7bfb      	ldrb	r3, [r7, #15]
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d10d      	bne.n	80053c6 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80053aa:	4b49      	ldr	r3, [pc, #292]	; (80054d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80053ac:	68db      	ldr	r3, [r3, #12]
 80053ae:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	6819      	ldr	r1, [r3, #0]
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	685b      	ldr	r3, [r3, #4]
 80053ba:	3b01      	subs	r3, #1
 80053bc:	011b      	lsls	r3, r3, #4
 80053be:	430b      	orrs	r3, r1
 80053c0:	4943      	ldr	r1, [pc, #268]	; (80054d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80053c2:	4313      	orrs	r3, r2
 80053c4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80053c6:	7bfb      	ldrb	r3, [r7, #15]
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d17c      	bne.n	80054c6 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80053cc:	4b40      	ldr	r3, [pc, #256]	; (80054d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	4a3f      	ldr	r2, [pc, #252]	; (80054d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80053d2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80053d6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80053d8:	f7fe f8b2 	bl	8003540 <HAL_GetTick>
 80053dc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80053de:	e009      	b.n	80053f4 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80053e0:	f7fe f8ae 	bl	8003540 <HAL_GetTick>
 80053e4:	4602      	mov	r2, r0
 80053e6:	68bb      	ldr	r3, [r7, #8]
 80053e8:	1ad3      	subs	r3, r2, r3
 80053ea:	2b02      	cmp	r3, #2
 80053ec:	d902      	bls.n	80053f4 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80053ee:	2303      	movs	r3, #3
 80053f0:	73fb      	strb	r3, [r7, #15]
        break;
 80053f2:	e005      	b.n	8005400 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80053f4:	4b36      	ldr	r3, [pc, #216]	; (80054d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d1ef      	bne.n	80053e0 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005400:	7bfb      	ldrb	r3, [r7, #15]
 8005402:	2b00      	cmp	r3, #0
 8005404:	d15f      	bne.n	80054c6 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005406:	683b      	ldr	r3, [r7, #0]
 8005408:	2b00      	cmp	r3, #0
 800540a:	d110      	bne.n	800542e <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800540c:	4b30      	ldr	r3, [pc, #192]	; (80054d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 800540e:	691b      	ldr	r3, [r3, #16]
 8005410:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8005414:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005418:	687a      	ldr	r2, [r7, #4]
 800541a:	6892      	ldr	r2, [r2, #8]
 800541c:	0211      	lsls	r1, r2, #8
 800541e:	687a      	ldr	r2, [r7, #4]
 8005420:	68d2      	ldr	r2, [r2, #12]
 8005422:	06d2      	lsls	r2, r2, #27
 8005424:	430a      	orrs	r2, r1
 8005426:	492a      	ldr	r1, [pc, #168]	; (80054d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005428:	4313      	orrs	r3, r2
 800542a:	610b      	str	r3, [r1, #16]
 800542c:	e027      	b.n	800547e <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800542e:	683b      	ldr	r3, [r7, #0]
 8005430:	2b01      	cmp	r3, #1
 8005432:	d112      	bne.n	800545a <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005434:	4b26      	ldr	r3, [pc, #152]	; (80054d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005436:	691b      	ldr	r3, [r3, #16]
 8005438:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800543c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005440:	687a      	ldr	r2, [r7, #4]
 8005442:	6892      	ldr	r2, [r2, #8]
 8005444:	0211      	lsls	r1, r2, #8
 8005446:	687a      	ldr	r2, [r7, #4]
 8005448:	6912      	ldr	r2, [r2, #16]
 800544a:	0852      	lsrs	r2, r2, #1
 800544c:	3a01      	subs	r2, #1
 800544e:	0552      	lsls	r2, r2, #21
 8005450:	430a      	orrs	r2, r1
 8005452:	491f      	ldr	r1, [pc, #124]	; (80054d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005454:	4313      	orrs	r3, r2
 8005456:	610b      	str	r3, [r1, #16]
 8005458:	e011      	b.n	800547e <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800545a:	4b1d      	ldr	r3, [pc, #116]	; (80054d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 800545c:	691b      	ldr	r3, [r3, #16]
 800545e:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8005462:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005466:	687a      	ldr	r2, [r7, #4]
 8005468:	6892      	ldr	r2, [r2, #8]
 800546a:	0211      	lsls	r1, r2, #8
 800546c:	687a      	ldr	r2, [r7, #4]
 800546e:	6952      	ldr	r2, [r2, #20]
 8005470:	0852      	lsrs	r2, r2, #1
 8005472:	3a01      	subs	r2, #1
 8005474:	0652      	lsls	r2, r2, #25
 8005476:	430a      	orrs	r2, r1
 8005478:	4915      	ldr	r1, [pc, #84]	; (80054d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 800547a:	4313      	orrs	r3, r2
 800547c:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800547e:	4b14      	ldr	r3, [pc, #80]	; (80054d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	4a13      	ldr	r2, [pc, #76]	; (80054d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005484:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005488:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800548a:	f7fe f859 	bl	8003540 <HAL_GetTick>
 800548e:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005490:	e009      	b.n	80054a6 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005492:	f7fe f855 	bl	8003540 <HAL_GetTick>
 8005496:	4602      	mov	r2, r0
 8005498:	68bb      	ldr	r3, [r7, #8]
 800549a:	1ad3      	subs	r3, r2, r3
 800549c:	2b02      	cmp	r3, #2
 800549e:	d902      	bls.n	80054a6 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 80054a0:	2303      	movs	r3, #3
 80054a2:	73fb      	strb	r3, [r7, #15]
          break;
 80054a4:	e005      	b.n	80054b2 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80054a6:	4b0a      	ldr	r3, [pc, #40]	; (80054d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d0ef      	beq.n	8005492 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 80054b2:	7bfb      	ldrb	r3, [r7, #15]
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d106      	bne.n	80054c6 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80054b8:	4b05      	ldr	r3, [pc, #20]	; (80054d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80054ba:	691a      	ldr	r2, [r3, #16]
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	699b      	ldr	r3, [r3, #24]
 80054c0:	4903      	ldr	r1, [pc, #12]	; (80054d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80054c2:	4313      	orrs	r3, r2
 80054c4:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80054c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80054c8:	4618      	mov	r0, r3
 80054ca:	3710      	adds	r7, #16
 80054cc:	46bd      	mov	sp, r7
 80054ce:	bd80      	pop	{r7, pc}
 80054d0:	40021000 	.word	0x40021000

080054d4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80054d4:	b580      	push	{r7, lr}
 80054d6:	b082      	sub	sp, #8
 80054d8:	af00      	add	r7, sp, #0
 80054da:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d101      	bne.n	80054e6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80054e2:	2301      	movs	r3, #1
 80054e4:	e049      	b.n	800557a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80054ec:	b2db      	uxtb	r3, r3
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d106      	bne.n	8005500 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	2200      	movs	r2, #0
 80054f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80054fa:	6878      	ldr	r0, [r7, #4]
 80054fc:	f000 f841 	bl	8005582 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	2202      	movs	r2, #2
 8005504:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681a      	ldr	r2, [r3, #0]
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	3304      	adds	r3, #4
 8005510:	4619      	mov	r1, r3
 8005512:	4610      	mov	r0, r2
 8005514:	f000 f9dc 	bl	80058d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	2201      	movs	r2, #1
 800551c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	2201      	movs	r2, #1
 8005524:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	2201      	movs	r2, #1
 800552c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	2201      	movs	r2, #1
 8005534:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	2201      	movs	r2, #1
 800553c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	2201      	movs	r2, #1
 8005544:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	2201      	movs	r2, #1
 800554c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	2201      	movs	r2, #1
 8005554:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	2201      	movs	r2, #1
 800555c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	2201      	movs	r2, #1
 8005564:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	2201      	movs	r2, #1
 800556c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	2201      	movs	r2, #1
 8005574:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005578:	2300      	movs	r3, #0
}
 800557a:	4618      	mov	r0, r3
 800557c:	3708      	adds	r7, #8
 800557e:	46bd      	mov	sp, r7
 8005580:	bd80      	pop	{r7, pc}

08005582 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8005582:	b480      	push	{r7}
 8005584:	b083      	sub	sp, #12
 8005586:	af00      	add	r7, sp, #0
 8005588:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800558a:	bf00      	nop
 800558c:	370c      	adds	r7, #12
 800558e:	46bd      	mov	sp, r7
 8005590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005594:	4770      	bx	lr
	...

08005598 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005598:	b480      	push	{r7}
 800559a:	b085      	sub	sp, #20
 800559c:	af00      	add	r7, sp, #0
 800559e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80055a6:	b2db      	uxtb	r3, r3
 80055a8:	2b01      	cmp	r3, #1
 80055aa:	d001      	beq.n	80055b0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80055ac:	2301      	movs	r3, #1
 80055ae:	e03b      	b.n	8005628 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	2202      	movs	r2, #2
 80055b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	68da      	ldr	r2, [r3, #12]
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	f042 0201 	orr.w	r2, r2, #1
 80055c6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	4a19      	ldr	r2, [pc, #100]	; (8005634 <HAL_TIM_Base_Start_IT+0x9c>)
 80055ce:	4293      	cmp	r3, r2
 80055d0:	d009      	beq.n	80055e6 <HAL_TIM_Base_Start_IT+0x4e>
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80055da:	d004      	beq.n	80055e6 <HAL_TIM_Base_Start_IT+0x4e>
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	4a15      	ldr	r2, [pc, #84]	; (8005638 <HAL_TIM_Base_Start_IT+0xa0>)
 80055e2:	4293      	cmp	r3, r2
 80055e4:	d115      	bne.n	8005612 <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	689a      	ldr	r2, [r3, #8]
 80055ec:	4b13      	ldr	r3, [pc, #76]	; (800563c <HAL_TIM_Base_Start_IT+0xa4>)
 80055ee:	4013      	ands	r3, r2
 80055f0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	2b06      	cmp	r3, #6
 80055f6:	d015      	beq.n	8005624 <HAL_TIM_Base_Start_IT+0x8c>
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80055fe:	d011      	beq.n	8005624 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	681a      	ldr	r2, [r3, #0]
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	f042 0201 	orr.w	r2, r2, #1
 800560e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005610:	e008      	b.n	8005624 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	681a      	ldr	r2, [r3, #0]
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	f042 0201 	orr.w	r2, r2, #1
 8005620:	601a      	str	r2, [r3, #0]
 8005622:	e000      	b.n	8005626 <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005624:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005626:	2300      	movs	r3, #0
}
 8005628:	4618      	mov	r0, r3
 800562a:	3714      	adds	r7, #20
 800562c:	46bd      	mov	sp, r7
 800562e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005632:	4770      	bx	lr
 8005634:	40012c00 	.word	0x40012c00
 8005638:	40014000 	.word	0x40014000
 800563c:	00010007 	.word	0x00010007

08005640 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005640:	b580      	push	{r7, lr}
 8005642:	b082      	sub	sp, #8
 8005644:	af00      	add	r7, sp, #0
 8005646:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	691b      	ldr	r3, [r3, #16]
 800564e:	f003 0302 	and.w	r3, r3, #2
 8005652:	2b02      	cmp	r3, #2
 8005654:	d122      	bne.n	800569c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	68db      	ldr	r3, [r3, #12]
 800565c:	f003 0302 	and.w	r3, r3, #2
 8005660:	2b02      	cmp	r3, #2
 8005662:	d11b      	bne.n	800569c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	f06f 0202 	mvn.w	r2, #2
 800566c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	2201      	movs	r2, #1
 8005672:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	699b      	ldr	r3, [r3, #24]
 800567a:	f003 0303 	and.w	r3, r3, #3
 800567e:	2b00      	cmp	r3, #0
 8005680:	d003      	beq.n	800568a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005682:	6878      	ldr	r0, [r7, #4]
 8005684:	f000 f905 	bl	8005892 <HAL_TIM_IC_CaptureCallback>
 8005688:	e005      	b.n	8005696 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800568a:	6878      	ldr	r0, [r7, #4]
 800568c:	f000 f8f7 	bl	800587e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005690:	6878      	ldr	r0, [r7, #4]
 8005692:	f000 f908 	bl	80058a6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	2200      	movs	r2, #0
 800569a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	691b      	ldr	r3, [r3, #16]
 80056a2:	f003 0304 	and.w	r3, r3, #4
 80056a6:	2b04      	cmp	r3, #4
 80056a8:	d122      	bne.n	80056f0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	68db      	ldr	r3, [r3, #12]
 80056b0:	f003 0304 	and.w	r3, r3, #4
 80056b4:	2b04      	cmp	r3, #4
 80056b6:	d11b      	bne.n	80056f0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	f06f 0204 	mvn.w	r2, #4
 80056c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	2202      	movs	r2, #2
 80056c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	699b      	ldr	r3, [r3, #24]
 80056ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d003      	beq.n	80056de <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80056d6:	6878      	ldr	r0, [r7, #4]
 80056d8:	f000 f8db 	bl	8005892 <HAL_TIM_IC_CaptureCallback>
 80056dc:	e005      	b.n	80056ea <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80056de:	6878      	ldr	r0, [r7, #4]
 80056e0:	f000 f8cd 	bl	800587e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80056e4:	6878      	ldr	r0, [r7, #4]
 80056e6:	f000 f8de 	bl	80058a6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	2200      	movs	r2, #0
 80056ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	691b      	ldr	r3, [r3, #16]
 80056f6:	f003 0308 	and.w	r3, r3, #8
 80056fa:	2b08      	cmp	r3, #8
 80056fc:	d122      	bne.n	8005744 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	68db      	ldr	r3, [r3, #12]
 8005704:	f003 0308 	and.w	r3, r3, #8
 8005708:	2b08      	cmp	r3, #8
 800570a:	d11b      	bne.n	8005744 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	f06f 0208 	mvn.w	r2, #8
 8005714:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	2204      	movs	r2, #4
 800571a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	69db      	ldr	r3, [r3, #28]
 8005722:	f003 0303 	and.w	r3, r3, #3
 8005726:	2b00      	cmp	r3, #0
 8005728:	d003      	beq.n	8005732 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800572a:	6878      	ldr	r0, [r7, #4]
 800572c:	f000 f8b1 	bl	8005892 <HAL_TIM_IC_CaptureCallback>
 8005730:	e005      	b.n	800573e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005732:	6878      	ldr	r0, [r7, #4]
 8005734:	f000 f8a3 	bl	800587e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005738:	6878      	ldr	r0, [r7, #4]
 800573a:	f000 f8b4 	bl	80058a6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	2200      	movs	r2, #0
 8005742:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	691b      	ldr	r3, [r3, #16]
 800574a:	f003 0310 	and.w	r3, r3, #16
 800574e:	2b10      	cmp	r3, #16
 8005750:	d122      	bne.n	8005798 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	68db      	ldr	r3, [r3, #12]
 8005758:	f003 0310 	and.w	r3, r3, #16
 800575c:	2b10      	cmp	r3, #16
 800575e:	d11b      	bne.n	8005798 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	f06f 0210 	mvn.w	r2, #16
 8005768:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	2208      	movs	r2, #8
 800576e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	69db      	ldr	r3, [r3, #28]
 8005776:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800577a:	2b00      	cmp	r3, #0
 800577c:	d003      	beq.n	8005786 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800577e:	6878      	ldr	r0, [r7, #4]
 8005780:	f000 f887 	bl	8005892 <HAL_TIM_IC_CaptureCallback>
 8005784:	e005      	b.n	8005792 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005786:	6878      	ldr	r0, [r7, #4]
 8005788:	f000 f879 	bl	800587e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800578c:	6878      	ldr	r0, [r7, #4]
 800578e:	f000 f88a 	bl	80058a6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	2200      	movs	r2, #0
 8005796:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	691b      	ldr	r3, [r3, #16]
 800579e:	f003 0301 	and.w	r3, r3, #1
 80057a2:	2b01      	cmp	r3, #1
 80057a4:	d10e      	bne.n	80057c4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	68db      	ldr	r3, [r3, #12]
 80057ac:	f003 0301 	and.w	r3, r3, #1
 80057b0:	2b01      	cmp	r3, #1
 80057b2:	d107      	bne.n	80057c4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	f06f 0201 	mvn.w	r2, #1
 80057bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80057be:	6878      	ldr	r0, [r7, #4]
 80057c0:	f7fb fe5c 	bl	800147c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	691b      	ldr	r3, [r3, #16]
 80057ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80057ce:	2b80      	cmp	r3, #128	; 0x80
 80057d0:	d10e      	bne.n	80057f0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	68db      	ldr	r3, [r3, #12]
 80057d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80057dc:	2b80      	cmp	r3, #128	; 0x80
 80057de:	d107      	bne.n	80057f0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80057e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80057ea:	6878      	ldr	r0, [r7, #4]
 80057ec:	f000 f8de 	bl	80059ac <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	691b      	ldr	r3, [r3, #16]
 80057f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80057fe:	d10e      	bne.n	800581e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	68db      	ldr	r3, [r3, #12]
 8005806:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800580a:	2b80      	cmp	r3, #128	; 0x80
 800580c:	d107      	bne.n	800581e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005816:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005818:	6878      	ldr	r0, [r7, #4]
 800581a:	f000 f8d1 	bl	80059c0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	691b      	ldr	r3, [r3, #16]
 8005824:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005828:	2b40      	cmp	r3, #64	; 0x40
 800582a:	d10e      	bne.n	800584a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	68db      	ldr	r3, [r3, #12]
 8005832:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005836:	2b40      	cmp	r3, #64	; 0x40
 8005838:	d107      	bne.n	800584a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005842:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005844:	6878      	ldr	r0, [r7, #4]
 8005846:	f000 f838 	bl	80058ba <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	691b      	ldr	r3, [r3, #16]
 8005850:	f003 0320 	and.w	r3, r3, #32
 8005854:	2b20      	cmp	r3, #32
 8005856:	d10e      	bne.n	8005876 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	68db      	ldr	r3, [r3, #12]
 800585e:	f003 0320 	and.w	r3, r3, #32
 8005862:	2b20      	cmp	r3, #32
 8005864:	d107      	bne.n	8005876 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	f06f 0220 	mvn.w	r2, #32
 800586e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005870:	6878      	ldr	r0, [r7, #4]
 8005872:	f000 f891 	bl	8005998 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005876:	bf00      	nop
 8005878:	3708      	adds	r7, #8
 800587a:	46bd      	mov	sp, r7
 800587c:	bd80      	pop	{r7, pc}

0800587e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800587e:	b480      	push	{r7}
 8005880:	b083      	sub	sp, #12
 8005882:	af00      	add	r7, sp, #0
 8005884:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005886:	bf00      	nop
 8005888:	370c      	adds	r7, #12
 800588a:	46bd      	mov	sp, r7
 800588c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005890:	4770      	bx	lr

08005892 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005892:	b480      	push	{r7}
 8005894:	b083      	sub	sp, #12
 8005896:	af00      	add	r7, sp, #0
 8005898:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800589a:	bf00      	nop
 800589c:	370c      	adds	r7, #12
 800589e:	46bd      	mov	sp, r7
 80058a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a4:	4770      	bx	lr

080058a6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80058a6:	b480      	push	{r7}
 80058a8:	b083      	sub	sp, #12
 80058aa:	af00      	add	r7, sp, #0
 80058ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80058ae:	bf00      	nop
 80058b0:	370c      	adds	r7, #12
 80058b2:	46bd      	mov	sp, r7
 80058b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b8:	4770      	bx	lr

080058ba <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80058ba:	b480      	push	{r7}
 80058bc:	b083      	sub	sp, #12
 80058be:	af00      	add	r7, sp, #0
 80058c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80058c2:	bf00      	nop
 80058c4:	370c      	adds	r7, #12
 80058c6:	46bd      	mov	sp, r7
 80058c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058cc:	4770      	bx	lr
	...

080058d0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80058d0:	b480      	push	{r7}
 80058d2:	b085      	sub	sp, #20
 80058d4:	af00      	add	r7, sp, #0
 80058d6:	6078      	str	r0, [r7, #4]
 80058d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	4a2a      	ldr	r2, [pc, #168]	; (800598c <TIM_Base_SetConfig+0xbc>)
 80058e4:	4293      	cmp	r3, r2
 80058e6:	d003      	beq.n	80058f0 <TIM_Base_SetConfig+0x20>
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80058ee:	d108      	bne.n	8005902 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058f6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80058f8:	683b      	ldr	r3, [r7, #0]
 80058fa:	685b      	ldr	r3, [r3, #4]
 80058fc:	68fa      	ldr	r2, [r7, #12]
 80058fe:	4313      	orrs	r3, r2
 8005900:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	4a21      	ldr	r2, [pc, #132]	; (800598c <TIM_Base_SetConfig+0xbc>)
 8005906:	4293      	cmp	r3, r2
 8005908:	d00b      	beq.n	8005922 <TIM_Base_SetConfig+0x52>
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005910:	d007      	beq.n	8005922 <TIM_Base_SetConfig+0x52>
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	4a1e      	ldr	r2, [pc, #120]	; (8005990 <TIM_Base_SetConfig+0xc0>)
 8005916:	4293      	cmp	r3, r2
 8005918:	d003      	beq.n	8005922 <TIM_Base_SetConfig+0x52>
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	4a1d      	ldr	r2, [pc, #116]	; (8005994 <TIM_Base_SetConfig+0xc4>)
 800591e:	4293      	cmp	r3, r2
 8005920:	d108      	bne.n	8005934 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005928:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800592a:	683b      	ldr	r3, [r7, #0]
 800592c:	68db      	ldr	r3, [r3, #12]
 800592e:	68fa      	ldr	r2, [r7, #12]
 8005930:	4313      	orrs	r3, r2
 8005932:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800593a:	683b      	ldr	r3, [r7, #0]
 800593c:	695b      	ldr	r3, [r3, #20]
 800593e:	4313      	orrs	r3, r2
 8005940:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	68fa      	ldr	r2, [r7, #12]
 8005946:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005948:	683b      	ldr	r3, [r7, #0]
 800594a:	689a      	ldr	r2, [r3, #8]
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005950:	683b      	ldr	r3, [r7, #0]
 8005952:	681a      	ldr	r2, [r3, #0]
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	4a0c      	ldr	r2, [pc, #48]	; (800598c <TIM_Base_SetConfig+0xbc>)
 800595c:	4293      	cmp	r3, r2
 800595e:	d007      	beq.n	8005970 <TIM_Base_SetConfig+0xa0>
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	4a0b      	ldr	r2, [pc, #44]	; (8005990 <TIM_Base_SetConfig+0xc0>)
 8005964:	4293      	cmp	r3, r2
 8005966:	d003      	beq.n	8005970 <TIM_Base_SetConfig+0xa0>
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	4a0a      	ldr	r2, [pc, #40]	; (8005994 <TIM_Base_SetConfig+0xc4>)
 800596c:	4293      	cmp	r3, r2
 800596e:	d103      	bne.n	8005978 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005970:	683b      	ldr	r3, [r7, #0]
 8005972:	691a      	ldr	r2, [r3, #16]
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	2201      	movs	r2, #1
 800597c:	615a      	str	r2, [r3, #20]
}
 800597e:	bf00      	nop
 8005980:	3714      	adds	r7, #20
 8005982:	46bd      	mov	sp, r7
 8005984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005988:	4770      	bx	lr
 800598a:	bf00      	nop
 800598c:	40012c00 	.word	0x40012c00
 8005990:	40014000 	.word	0x40014000
 8005994:	40014400 	.word	0x40014400

08005998 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005998:	b480      	push	{r7}
 800599a:	b083      	sub	sp, #12
 800599c:	af00      	add	r7, sp, #0
 800599e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80059a0:	bf00      	nop
 80059a2:	370c      	adds	r7, #12
 80059a4:	46bd      	mov	sp, r7
 80059a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059aa:	4770      	bx	lr

080059ac <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80059ac:	b480      	push	{r7}
 80059ae:	b083      	sub	sp, #12
 80059b0:	af00      	add	r7, sp, #0
 80059b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80059b4:	bf00      	nop
 80059b6:	370c      	adds	r7, #12
 80059b8:	46bd      	mov	sp, r7
 80059ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059be:	4770      	bx	lr

080059c0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80059c0:	b480      	push	{r7}
 80059c2:	b083      	sub	sp, #12
 80059c4:	af00      	add	r7, sp, #0
 80059c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80059c8:	bf00      	nop
 80059ca:	370c      	adds	r7, #12
 80059cc:	46bd      	mov	sp, r7
 80059ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d2:	4770      	bx	lr

080059d4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80059d4:	b580      	push	{r7, lr}
 80059d6:	b082      	sub	sp, #8
 80059d8:	af00      	add	r7, sp, #0
 80059da:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d101      	bne.n	80059e6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80059e2:	2301      	movs	r3, #1
 80059e4:	e040      	b.n	8005a68 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d106      	bne.n	80059fc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	2200      	movs	r2, #0
 80059f2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80059f6:	6878      	ldr	r0, [r7, #4]
 80059f8:	f7fd fac2 	bl	8002f80 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	2224      	movs	r2, #36	; 0x24
 8005a00:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	681a      	ldr	r2, [r3, #0]
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	f022 0201 	bic.w	r2, r2, #1
 8005a10:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005a12:	6878      	ldr	r0, [r7, #4]
 8005a14:	f000 fdb8 	bl	8006588 <UART_SetConfig>
 8005a18:	4603      	mov	r3, r0
 8005a1a:	2b01      	cmp	r3, #1
 8005a1c:	d101      	bne.n	8005a22 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005a1e:	2301      	movs	r3, #1
 8005a20:	e022      	b.n	8005a68 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d002      	beq.n	8005a30 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005a2a:	6878      	ldr	r0, [r7, #4]
 8005a2c:	f000 ffd8 	bl	80069e0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	685a      	ldr	r2, [r3, #4]
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005a3e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	689a      	ldr	r2, [r3, #8]
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005a4e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	681a      	ldr	r2, [r3, #0]
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	f042 0201 	orr.w	r2, r2, #1
 8005a5e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005a60:	6878      	ldr	r0, [r7, #4]
 8005a62:	f001 f85f 	bl	8006b24 <UART_CheckIdleState>
 8005a66:	4603      	mov	r3, r0
}
 8005a68:	4618      	mov	r0, r3
 8005a6a:	3708      	adds	r7, #8
 8005a6c:	46bd      	mov	sp, r7
 8005a6e:	bd80      	pop	{r7, pc}

08005a70 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005a70:	b580      	push	{r7, lr}
 8005a72:	b08a      	sub	sp, #40	; 0x28
 8005a74:	af02      	add	r7, sp, #8
 8005a76:	60f8      	str	r0, [r7, #12]
 8005a78:	60b9      	str	r1, [r7, #8]
 8005a7a:	603b      	str	r3, [r7, #0]
 8005a7c:	4613      	mov	r3, r2
 8005a7e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005a84:	2b20      	cmp	r3, #32
 8005a86:	f040 8082 	bne.w	8005b8e <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8005a8a:	68bb      	ldr	r3, [r7, #8]
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d002      	beq.n	8005a96 <HAL_UART_Transmit+0x26>
 8005a90:	88fb      	ldrh	r3, [r7, #6]
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d101      	bne.n	8005a9a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8005a96:	2301      	movs	r3, #1
 8005a98:	e07a      	b.n	8005b90 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8005aa0:	2b01      	cmp	r3, #1
 8005aa2:	d101      	bne.n	8005aa8 <HAL_UART_Transmit+0x38>
 8005aa4:	2302      	movs	r3, #2
 8005aa6:	e073      	b.n	8005b90 <HAL_UART_Transmit+0x120>
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	2201      	movs	r2, #1
 8005aac:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	2200      	movs	r2, #0
 8005ab4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	2221      	movs	r2, #33	; 0x21
 8005abc:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005abe:	f7fd fd3f 	bl	8003540 <HAL_GetTick>
 8005ac2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	88fa      	ldrh	r2, [r7, #6]
 8005ac8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	88fa      	ldrh	r2, [r7, #6]
 8005ad0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	689b      	ldr	r3, [r3, #8]
 8005ad8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005adc:	d108      	bne.n	8005af0 <HAL_UART_Transmit+0x80>
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	691b      	ldr	r3, [r3, #16]
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d104      	bne.n	8005af0 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8005ae6:	2300      	movs	r3, #0
 8005ae8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005aea:	68bb      	ldr	r3, [r7, #8]
 8005aec:	61bb      	str	r3, [r7, #24]
 8005aee:	e003      	b.n	8005af8 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8005af0:	68bb      	ldr	r3, [r7, #8]
 8005af2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005af4:	2300      	movs	r3, #0
 8005af6:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	2200      	movs	r2, #0
 8005afc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8005b00:	e02d      	b.n	8005b5e <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005b02:	683b      	ldr	r3, [r7, #0]
 8005b04:	9300      	str	r3, [sp, #0]
 8005b06:	697b      	ldr	r3, [r7, #20]
 8005b08:	2200      	movs	r2, #0
 8005b0a:	2180      	movs	r1, #128	; 0x80
 8005b0c:	68f8      	ldr	r0, [r7, #12]
 8005b0e:	f001 f852 	bl	8006bb6 <UART_WaitOnFlagUntilTimeout>
 8005b12:	4603      	mov	r3, r0
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d001      	beq.n	8005b1c <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8005b18:	2303      	movs	r3, #3
 8005b1a:	e039      	b.n	8005b90 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8005b1c:	69fb      	ldr	r3, [r7, #28]
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d10b      	bne.n	8005b3a <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005b22:	69bb      	ldr	r3, [r7, #24]
 8005b24:	881a      	ldrh	r2, [r3, #0]
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005b2e:	b292      	uxth	r2, r2
 8005b30:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005b32:	69bb      	ldr	r3, [r7, #24]
 8005b34:	3302      	adds	r3, #2
 8005b36:	61bb      	str	r3, [r7, #24]
 8005b38:	e008      	b.n	8005b4c <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005b3a:	69fb      	ldr	r3, [r7, #28]
 8005b3c:	781a      	ldrb	r2, [r3, #0]
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	b292      	uxth	r2, r2
 8005b44:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005b46:	69fb      	ldr	r3, [r7, #28]
 8005b48:	3301      	adds	r3, #1
 8005b4a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005b52:	b29b      	uxth	r3, r3
 8005b54:	3b01      	subs	r3, #1
 8005b56:	b29a      	uxth	r2, r3
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005b64:	b29b      	uxth	r3, r3
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d1cb      	bne.n	8005b02 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005b6a:	683b      	ldr	r3, [r7, #0]
 8005b6c:	9300      	str	r3, [sp, #0]
 8005b6e:	697b      	ldr	r3, [r7, #20]
 8005b70:	2200      	movs	r2, #0
 8005b72:	2140      	movs	r1, #64	; 0x40
 8005b74:	68f8      	ldr	r0, [r7, #12]
 8005b76:	f001 f81e 	bl	8006bb6 <UART_WaitOnFlagUntilTimeout>
 8005b7a:	4603      	mov	r3, r0
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d001      	beq.n	8005b84 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8005b80:	2303      	movs	r3, #3
 8005b82:	e005      	b.n	8005b90 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	2220      	movs	r2, #32
 8005b88:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8005b8a:	2300      	movs	r3, #0
 8005b8c:	e000      	b.n	8005b90 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8005b8e:	2302      	movs	r3, #2
  }
}
 8005b90:	4618      	mov	r0, r3
 8005b92:	3720      	adds	r7, #32
 8005b94:	46bd      	mov	sp, r7
 8005b96:	bd80      	pop	{r7, pc}

08005b98 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005b98:	b580      	push	{r7, lr}
 8005b9a:	b08a      	sub	sp, #40	; 0x28
 8005b9c:	af02      	add	r7, sp, #8
 8005b9e:	60f8      	str	r0, [r7, #12]
 8005ba0:	60b9      	str	r1, [r7, #8]
 8005ba2:	603b      	str	r3, [r7, #0]
 8005ba4:	4613      	mov	r3, r2
 8005ba6:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005bac:	2b20      	cmp	r3, #32
 8005bae:	f040 80bf 	bne.w	8005d30 <HAL_UART_Receive+0x198>
  {
    if ((pData == NULL) || (Size == 0U))
 8005bb2:	68bb      	ldr	r3, [r7, #8]
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d002      	beq.n	8005bbe <HAL_UART_Receive+0x26>
 8005bb8:	88fb      	ldrh	r3, [r7, #6]
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d101      	bne.n	8005bc2 <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 8005bbe:	2301      	movs	r3, #1
 8005bc0:	e0b7      	b.n	8005d32 <HAL_UART_Receive+0x19a>
    }

    __HAL_LOCK(huart);
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8005bc8:	2b01      	cmp	r3, #1
 8005bca:	d101      	bne.n	8005bd0 <HAL_UART_Receive+0x38>
 8005bcc:	2302      	movs	r3, #2
 8005bce:	e0b0      	b.n	8005d32 <HAL_UART_Receive+0x19a>
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	2201      	movs	r2, #1
 8005bd4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	2200      	movs	r2, #0
 8005bdc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	2222      	movs	r2, #34	; 0x22
 8005be4:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	2200      	movs	r2, #0
 8005bea:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005bec:	f7fd fca8 	bl	8003540 <HAL_GetTick>
 8005bf0:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	88fa      	ldrh	r2, [r7, #6]
 8005bf6:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	88fa      	ldrh	r2, [r7, #6]
 8005bfe:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	689b      	ldr	r3, [r3, #8]
 8005c06:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c0a:	d10e      	bne.n	8005c2a <HAL_UART_Receive+0x92>
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	691b      	ldr	r3, [r3, #16]
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d105      	bne.n	8005c20 <HAL_UART_Receive+0x88>
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	f240 12ff 	movw	r2, #511	; 0x1ff
 8005c1a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005c1e:	e02d      	b.n	8005c7c <HAL_UART_Receive+0xe4>
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	22ff      	movs	r2, #255	; 0xff
 8005c24:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005c28:	e028      	b.n	8005c7c <HAL_UART_Receive+0xe4>
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	689b      	ldr	r3, [r3, #8]
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d10d      	bne.n	8005c4e <HAL_UART_Receive+0xb6>
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	691b      	ldr	r3, [r3, #16]
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d104      	bne.n	8005c44 <HAL_UART_Receive+0xac>
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	22ff      	movs	r2, #255	; 0xff
 8005c3e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005c42:	e01b      	b.n	8005c7c <HAL_UART_Receive+0xe4>
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	227f      	movs	r2, #127	; 0x7f
 8005c48:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005c4c:	e016      	b.n	8005c7c <HAL_UART_Receive+0xe4>
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	689b      	ldr	r3, [r3, #8]
 8005c52:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005c56:	d10d      	bne.n	8005c74 <HAL_UART_Receive+0xdc>
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	691b      	ldr	r3, [r3, #16]
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d104      	bne.n	8005c6a <HAL_UART_Receive+0xd2>
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	227f      	movs	r2, #127	; 0x7f
 8005c64:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005c68:	e008      	b.n	8005c7c <HAL_UART_Receive+0xe4>
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	223f      	movs	r2, #63	; 0x3f
 8005c6e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005c72:	e003      	b.n	8005c7c <HAL_UART_Receive+0xe4>
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	2200      	movs	r2, #0
 8005c78:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005c82:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	689b      	ldr	r3, [r3, #8]
 8005c88:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c8c:	d108      	bne.n	8005ca0 <HAL_UART_Receive+0x108>
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	691b      	ldr	r3, [r3, #16]
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d104      	bne.n	8005ca0 <HAL_UART_Receive+0x108>
    {
      pdata8bits  = NULL;
 8005c96:	2300      	movs	r3, #0
 8005c98:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005c9a:	68bb      	ldr	r3, [r7, #8]
 8005c9c:	61bb      	str	r3, [r7, #24]
 8005c9e:	e003      	b.n	8005ca8 <HAL_UART_Receive+0x110>
    }
    else
    {
      pdata8bits  = pData;
 8005ca0:	68bb      	ldr	r3, [r7, #8]
 8005ca2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005ca4:	2300      	movs	r3, #0
 8005ca6:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	2200      	movs	r2, #0
 8005cac:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8005cb0:	e033      	b.n	8005d1a <HAL_UART_Receive+0x182>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8005cb2:	683b      	ldr	r3, [r7, #0]
 8005cb4:	9300      	str	r3, [sp, #0]
 8005cb6:	697b      	ldr	r3, [r7, #20]
 8005cb8:	2200      	movs	r2, #0
 8005cba:	2120      	movs	r1, #32
 8005cbc:	68f8      	ldr	r0, [r7, #12]
 8005cbe:	f000 ff7a 	bl	8006bb6 <UART_WaitOnFlagUntilTimeout>
 8005cc2:	4603      	mov	r3, r0
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d001      	beq.n	8005ccc <HAL_UART_Receive+0x134>
      {
        return HAL_TIMEOUT;
 8005cc8:	2303      	movs	r3, #3
 8005cca:	e032      	b.n	8005d32 <HAL_UART_Receive+0x19a>
      }
      if (pdata8bits == NULL)
 8005ccc:	69fb      	ldr	r3, [r7, #28]
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d10c      	bne.n	8005cec <HAL_UART_Receive+0x154>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8005cd8:	b29a      	uxth	r2, r3
 8005cda:	8a7b      	ldrh	r3, [r7, #18]
 8005cdc:	4013      	ands	r3, r2
 8005cde:	b29a      	uxth	r2, r3
 8005ce0:	69bb      	ldr	r3, [r7, #24]
 8005ce2:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8005ce4:	69bb      	ldr	r3, [r7, #24]
 8005ce6:	3302      	adds	r3, #2
 8005ce8:	61bb      	str	r3, [r7, #24]
 8005cea:	e00d      	b.n	8005d08 <HAL_UART_Receive+0x170>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8005cf2:	b29b      	uxth	r3, r3
 8005cf4:	b2da      	uxtb	r2, r3
 8005cf6:	8a7b      	ldrh	r3, [r7, #18]
 8005cf8:	b2db      	uxtb	r3, r3
 8005cfa:	4013      	ands	r3, r2
 8005cfc:	b2da      	uxtb	r2, r3
 8005cfe:	69fb      	ldr	r3, [r7, #28]
 8005d00:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8005d02:	69fb      	ldr	r3, [r7, #28]
 8005d04:	3301      	adds	r3, #1
 8005d06:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005d0e:	b29b      	uxth	r3, r3
 8005d10:	3b01      	subs	r3, #1
 8005d12:	b29a      	uxth	r2, r3
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005d20:	b29b      	uxth	r3, r3
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d1c5      	bne.n	8005cb2 <HAL_UART_Receive+0x11a>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	2220      	movs	r2, #32
 8005d2a:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8005d2c:	2300      	movs	r3, #0
 8005d2e:	e000      	b.n	8005d32 <HAL_UART_Receive+0x19a>
  }
  else
  {
    return HAL_BUSY;
 8005d30:	2302      	movs	r3, #2
  }
}
 8005d32:	4618      	mov	r0, r3
 8005d34:	3720      	adds	r7, #32
 8005d36:	46bd      	mov	sp, r7
 8005d38:	bd80      	pop	{r7, pc}
	...

08005d3c <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8005d3c:	b480      	push	{r7}
 8005d3e:	b08b      	sub	sp, #44	; 0x2c
 8005d40:	af00      	add	r7, sp, #0
 8005d42:	60f8      	str	r0, [r7, #12]
 8005d44:	60b9      	str	r1, [r7, #8]
 8005d46:	4613      	mov	r3, r2
 8005d48:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005d4e:	2b20      	cmp	r3, #32
 8005d50:	d156      	bne.n	8005e00 <HAL_UART_Transmit_IT+0xc4>
  {
    if ((pData == NULL) || (Size == 0U))
 8005d52:	68bb      	ldr	r3, [r7, #8]
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d002      	beq.n	8005d5e <HAL_UART_Transmit_IT+0x22>
 8005d58:	88fb      	ldrh	r3, [r7, #6]
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d101      	bne.n	8005d62 <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 8005d5e:	2301      	movs	r3, #1
 8005d60:	e04f      	b.n	8005e02 <HAL_UART_Transmit_IT+0xc6>
    }

    __HAL_LOCK(huart);
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8005d68:	2b01      	cmp	r3, #1
 8005d6a:	d101      	bne.n	8005d70 <HAL_UART_Transmit_IT+0x34>
 8005d6c:	2302      	movs	r3, #2
 8005d6e:	e048      	b.n	8005e02 <HAL_UART_Transmit_IT+0xc6>
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	2201      	movs	r2, #1
 8005d74:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->pTxBuffPtr  = pData;
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	68ba      	ldr	r2, [r7, #8]
 8005d7c:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	88fa      	ldrh	r2, [r7, #6]
 8005d82:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	88fa      	ldrh	r2, [r7, #6]
 8005d8a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	2200      	movs	r2, #0
 8005d92:	669a      	str	r2, [r3, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	2200      	movs	r2, #0
 8005d98:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	2221      	movs	r2, #33	; 0x21
 8005da0:	679a      	str	r2, [r3, #120]	; 0x78
      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
    }
#else
    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	689b      	ldr	r3, [r3, #8]
 8005da6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005daa:	d107      	bne.n	8005dbc <HAL_UART_Transmit_IT+0x80>
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	691b      	ldr	r3, [r3, #16]
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d103      	bne.n	8005dbc <HAL_UART_Transmit_IT+0x80>
    {
      huart->TxISR = UART_TxISR_16BIT;
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	4a16      	ldr	r2, [pc, #88]	; (8005e10 <HAL_UART_Transmit_IT+0xd4>)
 8005db8:	669a      	str	r2, [r3, #104]	; 0x68
 8005dba:	e002      	b.n	8005dc2 <HAL_UART_Transmit_IT+0x86>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	4a15      	ldr	r2, [pc, #84]	; (8005e14 <HAL_UART_Transmit_IT+0xd8>)
 8005dc0:	669a      	str	r2, [r3, #104]	; 0x68
    }

    __HAL_UNLOCK(huart);
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	2200      	movs	r2, #0
 8005dc6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dd0:	697b      	ldr	r3, [r7, #20]
 8005dd2:	e853 3f00 	ldrex	r3, [r3]
 8005dd6:	613b      	str	r3, [r7, #16]
   return(result);
 8005dd8:	693b      	ldr	r3, [r7, #16]
 8005dda:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005dde:	627b      	str	r3, [r7, #36]	; 0x24
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	461a      	mov	r2, r3
 8005de6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005de8:	623b      	str	r3, [r7, #32]
 8005dea:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dec:	69f9      	ldr	r1, [r7, #28]
 8005dee:	6a3a      	ldr	r2, [r7, #32]
 8005df0:	e841 2300 	strex	r3, r2, [r1]
 8005df4:	61bb      	str	r3, [r7, #24]
   return(result);
 8005df6:	69bb      	ldr	r3, [r7, #24]
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d1e6      	bne.n	8005dca <HAL_UART_Transmit_IT+0x8e>
#endif /* USART_CR1_FIFOEN */

    return HAL_OK;
 8005dfc:	2300      	movs	r3, #0
 8005dfe:	e000      	b.n	8005e02 <HAL_UART_Transmit_IT+0xc6>
  }
  else
  {
    return HAL_BUSY;
 8005e00:	2302      	movs	r3, #2
  }
}
 8005e02:	4618      	mov	r0, r3
 8005e04:	372c      	adds	r7, #44	; 0x2c
 8005e06:	46bd      	mov	sp, r7
 8005e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e0c:	4770      	bx	lr
 8005e0e:	bf00      	nop
 8005e10:	080073ef 	.word	0x080073ef
 8005e14:	08007337 	.word	0x08007337

08005e18 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005e18:	b580      	push	{r7, lr}
 8005e1a:	b08a      	sub	sp, #40	; 0x28
 8005e1c:	af00      	add	r7, sp, #0
 8005e1e:	60f8      	str	r0, [r7, #12]
 8005e20:	60b9      	str	r1, [r7, #8]
 8005e22:	4613      	mov	r3, r2
 8005e24:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005e2a:	2b20      	cmp	r3, #32
 8005e2c:	d142      	bne.n	8005eb4 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005e2e:	68bb      	ldr	r3, [r7, #8]
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d002      	beq.n	8005e3a <HAL_UART_Receive_IT+0x22>
 8005e34:	88fb      	ldrh	r3, [r7, #6]
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d101      	bne.n	8005e3e <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 8005e3a:	2301      	movs	r3, #1
 8005e3c:	e03b      	b.n	8005eb6 <HAL_UART_Receive_IT+0x9e>
    }

    __HAL_LOCK(huart);
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8005e44:	2b01      	cmp	r3, #1
 8005e46:	d101      	bne.n	8005e4c <HAL_UART_Receive_IT+0x34>
 8005e48:	2302      	movs	r3, #2
 8005e4a:	e034      	b.n	8005eb6 <HAL_UART_Receive_IT+0x9e>
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	2201      	movs	r2, #1
 8005e50:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	2200      	movs	r2, #0
 8005e58:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	4a18      	ldr	r2, [pc, #96]	; (8005ec0 <HAL_UART_Receive_IT+0xa8>)
 8005e60:	4293      	cmp	r3, r2
 8005e62:	d01f      	beq.n	8005ea4 <HAL_UART_Receive_IT+0x8c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	685b      	ldr	r3, [r3, #4]
 8005e6a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d018      	beq.n	8005ea4 <HAL_UART_Receive_IT+0x8c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e78:	697b      	ldr	r3, [r7, #20]
 8005e7a:	e853 3f00 	ldrex	r3, [r3]
 8005e7e:	613b      	str	r3, [r7, #16]
   return(result);
 8005e80:	693b      	ldr	r3, [r7, #16]
 8005e82:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005e86:	627b      	str	r3, [r7, #36]	; 0x24
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	461a      	mov	r2, r3
 8005e8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e90:	623b      	str	r3, [r7, #32]
 8005e92:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e94:	69f9      	ldr	r1, [r7, #28]
 8005e96:	6a3a      	ldr	r2, [r7, #32]
 8005e98:	e841 2300 	strex	r3, r2, [r1]
 8005e9c:	61bb      	str	r3, [r7, #24]
   return(result);
 8005e9e:	69bb      	ldr	r3, [r7, #24]
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d1e6      	bne.n	8005e72 <HAL_UART_Receive_IT+0x5a>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005ea4:	88fb      	ldrh	r3, [r7, #6]
 8005ea6:	461a      	mov	r2, r3
 8005ea8:	68b9      	ldr	r1, [r7, #8]
 8005eaa:	68f8      	ldr	r0, [r7, #12]
 8005eac:	f000 ff48 	bl	8006d40 <UART_Start_Receive_IT>
 8005eb0:	4603      	mov	r3, r0
 8005eb2:	e000      	b.n	8005eb6 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8005eb4:	2302      	movs	r3, #2
  }
}
 8005eb6:	4618      	mov	r0, r3
 8005eb8:	3728      	adds	r7, #40	; 0x28
 8005eba:	46bd      	mov	sp, r7
 8005ebc:	bd80      	pop	{r7, pc}
 8005ebe:	bf00      	nop
 8005ec0:	40008000 	.word	0x40008000

08005ec4 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005ec4:	b580      	push	{r7, lr}
 8005ec6:	b08a      	sub	sp, #40	; 0x28
 8005ec8:	af00      	add	r7, sp, #0
 8005eca:	60f8      	str	r0, [r7, #12]
 8005ecc:	60b9      	str	r1, [r7, #8]
 8005ece:	4613      	mov	r3, r2
 8005ed0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005ed6:	2b20      	cmp	r3, #32
 8005ed8:	d142      	bne.n	8005f60 <HAL_UART_Receive_DMA+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005eda:	68bb      	ldr	r3, [r7, #8]
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d002      	beq.n	8005ee6 <HAL_UART_Receive_DMA+0x22>
 8005ee0:	88fb      	ldrh	r3, [r7, #6]
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d101      	bne.n	8005eea <HAL_UART_Receive_DMA+0x26>
    {
      return HAL_ERROR;
 8005ee6:	2301      	movs	r3, #1
 8005ee8:	e03b      	b.n	8005f62 <HAL_UART_Receive_DMA+0x9e>
    }

    __HAL_LOCK(huart);
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8005ef0:	2b01      	cmp	r3, #1
 8005ef2:	d101      	bne.n	8005ef8 <HAL_UART_Receive_DMA+0x34>
 8005ef4:	2302      	movs	r3, #2
 8005ef6:	e034      	b.n	8005f62 <HAL_UART_Receive_DMA+0x9e>
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	2201      	movs	r2, #1
 8005efc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	2200      	movs	r2, #0
 8005f04:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	4a18      	ldr	r2, [pc, #96]	; (8005f6c <HAL_UART_Receive_DMA+0xa8>)
 8005f0c:	4293      	cmp	r3, r2
 8005f0e:	d01f      	beq.n	8005f50 <HAL_UART_Receive_DMA+0x8c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	685b      	ldr	r3, [r3, #4]
 8005f16:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d018      	beq.n	8005f50 <HAL_UART_Receive_DMA+0x8c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f24:	697b      	ldr	r3, [r7, #20]
 8005f26:	e853 3f00 	ldrex	r3, [r3]
 8005f2a:	613b      	str	r3, [r7, #16]
   return(result);
 8005f2c:	693b      	ldr	r3, [r7, #16]
 8005f2e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005f32:	627b      	str	r3, [r7, #36]	; 0x24
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	461a      	mov	r2, r3
 8005f3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f3c:	623b      	str	r3, [r7, #32]
 8005f3e:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f40:	69f9      	ldr	r1, [r7, #28]
 8005f42:	6a3a      	ldr	r2, [r7, #32]
 8005f44:	e841 2300 	strex	r3, r2, [r1]
 8005f48:	61bb      	str	r3, [r7, #24]
   return(result);
 8005f4a:	69bb      	ldr	r3, [r7, #24]
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d1e6      	bne.n	8005f1e <HAL_UART_Receive_DMA+0x5a>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8005f50:	88fb      	ldrh	r3, [r7, #6]
 8005f52:	461a      	mov	r2, r3
 8005f54:	68b9      	ldr	r1, [r7, #8]
 8005f56:	68f8      	ldr	r0, [r7, #12]
 8005f58:	f000 ffbc 	bl	8006ed4 <UART_Start_Receive_DMA>
 8005f5c:	4603      	mov	r3, r0
 8005f5e:	e000      	b.n	8005f62 <HAL_UART_Receive_DMA+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8005f60:	2302      	movs	r3, #2
  }
}
 8005f62:	4618      	mov	r0, r3
 8005f64:	3728      	adds	r7, #40	; 0x28
 8005f66:	46bd      	mov	sp, r7
 8005f68:	bd80      	pop	{r7, pc}
 8005f6a:	bf00      	nop
 8005f6c:	40008000 	.word	0x40008000

08005f70 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005f70:	b580      	push	{r7, lr}
 8005f72:	b0ba      	sub	sp, #232	; 0xe8
 8005f74:	af00      	add	r7, sp, #0
 8005f76:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	69db      	ldr	r3, [r3, #28]
 8005f7e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	689b      	ldr	r3, [r3, #8]
 8005f92:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005f96:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8005f9a:	f640 030f 	movw	r3, #2063	; 0x80f
 8005f9e:	4013      	ands	r3, r2
 8005fa0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8005fa4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d115      	bne.n	8005fd8 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8005fac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005fb0:	f003 0320 	and.w	r3, r3, #32
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d00f      	beq.n	8005fd8 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005fb8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005fbc:	f003 0320 	and.w	r3, r3, #32
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d009      	beq.n	8005fd8 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	f000 82a6 	beq.w	800651a <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005fd2:	6878      	ldr	r0, [r7, #4]
 8005fd4:	4798      	blx	r3
      }
      return;
 8005fd6:	e2a0      	b.n	800651a <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8005fd8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	f000 8117 	beq.w	8006210 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8005fe2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005fe6:	f003 0301 	and.w	r3, r3, #1
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d106      	bne.n	8005ffc <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8005fee:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8005ff2:	4b85      	ldr	r3, [pc, #532]	; (8006208 <HAL_UART_IRQHandler+0x298>)
 8005ff4:	4013      	ands	r3, r2
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	f000 810a 	beq.w	8006210 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005ffc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006000:	f003 0301 	and.w	r3, r3, #1
 8006004:	2b00      	cmp	r3, #0
 8006006:	d011      	beq.n	800602c <HAL_UART_IRQHandler+0xbc>
 8006008:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800600c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006010:	2b00      	cmp	r3, #0
 8006012:	d00b      	beq.n	800602c <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	2201      	movs	r2, #1
 800601a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006022:	f043 0201 	orr.w	r2, r3, #1
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800602c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006030:	f003 0302 	and.w	r3, r3, #2
 8006034:	2b00      	cmp	r3, #0
 8006036:	d011      	beq.n	800605c <HAL_UART_IRQHandler+0xec>
 8006038:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800603c:	f003 0301 	and.w	r3, r3, #1
 8006040:	2b00      	cmp	r3, #0
 8006042:	d00b      	beq.n	800605c <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	2202      	movs	r2, #2
 800604a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006052:	f043 0204 	orr.w	r2, r3, #4
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800605c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006060:	f003 0304 	and.w	r3, r3, #4
 8006064:	2b00      	cmp	r3, #0
 8006066:	d011      	beq.n	800608c <HAL_UART_IRQHandler+0x11c>
 8006068:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800606c:	f003 0301 	and.w	r3, r3, #1
 8006070:	2b00      	cmp	r3, #0
 8006072:	d00b      	beq.n	800608c <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	2204      	movs	r2, #4
 800607a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006082:	f043 0202 	orr.w	r2, r3, #2
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 800608c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006090:	f003 0308 	and.w	r3, r3, #8
 8006094:	2b00      	cmp	r3, #0
 8006096:	d017      	beq.n	80060c8 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006098:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800609c:	f003 0320 	and.w	r3, r3, #32
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d105      	bne.n	80060b0 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80060a4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80060a8:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d00b      	beq.n	80060c8 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	2208      	movs	r2, #8
 80060b6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80060be:	f043 0208 	orr.w	r2, r3, #8
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80060c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80060cc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d012      	beq.n	80060fa <HAL_UART_IRQHandler+0x18a>
 80060d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80060d8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d00c      	beq.n	80060fa <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80060e8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80060f0:	f043 0220 	orr.w	r2, r3, #32
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006100:	2b00      	cmp	r3, #0
 8006102:	f000 820c 	beq.w	800651e <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8006106:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800610a:	f003 0320 	and.w	r3, r3, #32
 800610e:	2b00      	cmp	r3, #0
 8006110:	d00d      	beq.n	800612e <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006112:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006116:	f003 0320 	and.w	r3, r3, #32
 800611a:	2b00      	cmp	r3, #0
 800611c:	d007      	beq.n	800612e <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006122:	2b00      	cmp	r3, #0
 8006124:	d003      	beq.n	800612e <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800612a:	6878      	ldr	r0, [r7, #4]
 800612c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006134:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	689b      	ldr	r3, [r3, #8]
 800613e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006142:	2b40      	cmp	r3, #64	; 0x40
 8006144:	d005      	beq.n	8006152 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006146:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800614a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800614e:	2b00      	cmp	r3, #0
 8006150:	d04f      	beq.n	80061f2 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006152:	6878      	ldr	r0, [r7, #4]
 8006154:	f000 ff8a 	bl	800706c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	689b      	ldr	r3, [r3, #8]
 800615e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006162:	2b40      	cmp	r3, #64	; 0x40
 8006164:	d141      	bne.n	80061ea <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	3308      	adds	r3, #8
 800616c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006170:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006174:	e853 3f00 	ldrex	r3, [r3]
 8006178:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800617c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006180:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006184:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	3308      	adds	r3, #8
 800618e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006192:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006196:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800619a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800619e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80061a2:	e841 2300 	strex	r3, r2, [r1]
 80061a6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80061aa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d1d9      	bne.n	8006166 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d013      	beq.n	80061e2 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80061be:	4a13      	ldr	r2, [pc, #76]	; (800620c <HAL_UART_IRQHandler+0x29c>)
 80061c0:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80061c6:	4618      	mov	r0, r3
 80061c8:	f7fd fbfe 	bl	80039c8 <HAL_DMA_Abort_IT>
 80061cc:	4603      	mov	r3, r0
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d017      	beq.n	8006202 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80061d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061d8:	687a      	ldr	r2, [r7, #4]
 80061da:	6f12      	ldr	r2, [r2, #112]	; 0x70
 80061dc:	4610      	mov	r0, r2
 80061de:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80061e0:	e00f      	b.n	8006202 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80061e2:	6878      	ldr	r0, [r7, #4]
 80061e4:	f000 f9ba 	bl	800655c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80061e8:	e00b      	b.n	8006202 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80061ea:	6878      	ldr	r0, [r7, #4]
 80061ec:	f000 f9b6 	bl	800655c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80061f0:	e007      	b.n	8006202 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80061f2:	6878      	ldr	r0, [r7, #4]
 80061f4:	f000 f9b2 	bl	800655c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	2200      	movs	r2, #0
 80061fc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8006200:	e18d      	b.n	800651e <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006202:	bf00      	nop
    return;
 8006204:	e18b      	b.n	800651e <HAL_UART_IRQHandler+0x5ae>
 8006206:	bf00      	nop
 8006208:	04000120 	.word	0x04000120
 800620c:	0800730b 	.word	0x0800730b

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006214:	2b01      	cmp	r3, #1
 8006216:	f040 8146 	bne.w	80064a6 <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800621a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800621e:	f003 0310 	and.w	r3, r3, #16
 8006222:	2b00      	cmp	r3, #0
 8006224:	f000 813f 	beq.w	80064a6 <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006228:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800622c:	f003 0310 	and.w	r3, r3, #16
 8006230:	2b00      	cmp	r3, #0
 8006232:	f000 8138 	beq.w	80064a6 <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	2210      	movs	r2, #16
 800623c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	689b      	ldr	r3, [r3, #8]
 8006244:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006248:	2b40      	cmp	r3, #64	; 0x40
 800624a:	f040 80b4 	bne.w	80063b6 <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	685b      	ldr	r3, [r3, #4]
 8006256:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800625a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800625e:	2b00      	cmp	r3, #0
 8006260:	f000 815f 	beq.w	8006522 <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800626a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800626e:	429a      	cmp	r2, r3
 8006270:	f080 8157 	bcs.w	8006522 <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800627a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	f003 0320 	and.w	r3, r3, #32
 800628a:	2b00      	cmp	r3, #0
 800628c:	f040 8085 	bne.w	800639a <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006298:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800629c:	e853 3f00 	ldrex	r3, [r3]
 80062a0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80062a4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80062a8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80062ac:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	461a      	mov	r2, r3
 80062b6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80062ba:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80062be:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062c2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80062c6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80062ca:	e841 2300 	strex	r3, r2, [r1]
 80062ce:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80062d2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d1da      	bne.n	8006290 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	3308      	adds	r3, #8
 80062e0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062e2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80062e4:	e853 3f00 	ldrex	r3, [r3]
 80062e8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80062ea:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80062ec:	f023 0301 	bic.w	r3, r3, #1
 80062f0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	3308      	adds	r3, #8
 80062fa:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80062fe:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006302:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006304:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006306:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800630a:	e841 2300 	strex	r3, r2, [r1]
 800630e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006310:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006312:	2b00      	cmp	r3, #0
 8006314:	d1e1      	bne.n	80062da <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	3308      	adds	r3, #8
 800631c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800631e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006320:	e853 3f00 	ldrex	r3, [r3]
 8006324:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006326:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006328:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800632c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	3308      	adds	r3, #8
 8006336:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800633a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800633c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800633e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006340:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006342:	e841 2300 	strex	r3, r2, [r1]
 8006346:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006348:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800634a:	2b00      	cmp	r3, #0
 800634c:	d1e3      	bne.n	8006316 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	2220      	movs	r2, #32
 8006352:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	2200      	movs	r2, #0
 8006358:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006360:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006362:	e853 3f00 	ldrex	r3, [r3]
 8006366:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006368:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800636a:	f023 0310 	bic.w	r3, r3, #16
 800636e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	461a      	mov	r2, r3
 8006378:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800637c:	65bb      	str	r3, [r7, #88]	; 0x58
 800637e:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006380:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006382:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006384:	e841 2300 	strex	r3, r2, [r1]
 8006388:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800638a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800638c:	2b00      	cmp	r3, #0
 800638e:	d1e4      	bne.n	800635a <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006394:	4618      	mov	r0, r3
 8006396:	f7fd fad9 	bl	800394c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80063a6:	b29b      	uxth	r3, r3
 80063a8:	1ad3      	subs	r3, r2, r3
 80063aa:	b29b      	uxth	r3, r3
 80063ac:	4619      	mov	r1, r3
 80063ae:	6878      	ldr	r0, [r7, #4]
 80063b0:	f000 f8de 	bl	8006570 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80063b4:	e0b5      	b.n	8006522 <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80063c2:	b29b      	uxth	r3, r3
 80063c4:	1ad3      	subs	r3, r2, r3
 80063c6:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80063d0:	b29b      	uxth	r3, r3
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	f000 80a7 	beq.w	8006526 <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 80063d8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80063dc:	2b00      	cmp	r3, #0
 80063de:	f000 80a2 	beq.w	8006526 <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063ea:	e853 3f00 	ldrex	r3, [r3]
 80063ee:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80063f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80063f2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80063f6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	461a      	mov	r2, r3
 8006400:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006404:	647b      	str	r3, [r7, #68]	; 0x44
 8006406:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006408:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800640a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800640c:	e841 2300 	strex	r3, r2, [r1]
 8006410:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006412:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006414:	2b00      	cmp	r3, #0
 8006416:	d1e4      	bne.n	80063e2 <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	3308      	adds	r3, #8
 800641e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006422:	e853 3f00 	ldrex	r3, [r3]
 8006426:	623b      	str	r3, [r7, #32]
   return(result);
 8006428:	6a3b      	ldr	r3, [r7, #32]
 800642a:	f023 0301 	bic.w	r3, r3, #1
 800642e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	3308      	adds	r3, #8
 8006438:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800643c:	633a      	str	r2, [r7, #48]	; 0x30
 800643e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006440:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006442:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006444:	e841 2300 	strex	r3, r2, [r1]
 8006448:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800644a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800644c:	2b00      	cmp	r3, #0
 800644e:	d1e3      	bne.n	8006418 <HAL_UART_IRQHandler+0x4a8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	2220      	movs	r2, #32
 8006454:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	2200      	movs	r2, #0
 800645a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	2200      	movs	r2, #0
 8006460:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006468:	693b      	ldr	r3, [r7, #16]
 800646a:	e853 3f00 	ldrex	r3, [r3]
 800646e:	60fb      	str	r3, [r7, #12]
   return(result);
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	f023 0310 	bic.w	r3, r3, #16
 8006476:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	461a      	mov	r2, r3
 8006480:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006484:	61fb      	str	r3, [r7, #28]
 8006486:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006488:	69b9      	ldr	r1, [r7, #24]
 800648a:	69fa      	ldr	r2, [r7, #28]
 800648c:	e841 2300 	strex	r3, r2, [r1]
 8006490:	617b      	str	r3, [r7, #20]
   return(result);
 8006492:	697b      	ldr	r3, [r7, #20]
 8006494:	2b00      	cmp	r3, #0
 8006496:	d1e4      	bne.n	8006462 <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006498:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800649c:	4619      	mov	r1, r3
 800649e:	6878      	ldr	r0, [r7, #4]
 80064a0:	f000 f866 	bl	8006570 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80064a4:	e03f      	b.n	8006526 <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80064a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80064aa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d00e      	beq.n	80064d0 <HAL_UART_IRQHandler+0x560>
 80064b2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80064b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d008      	beq.n	80064d0 <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80064c6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80064c8:	6878      	ldr	r0, [r7, #4]
 80064ca:	f001 f97a 	bl	80077c2 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80064ce:	e02d      	b.n	800652c <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 80064d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80064d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d00e      	beq.n	80064fa <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80064dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80064e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d008      	beq.n	80064fa <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d01c      	beq.n	800652a <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80064f4:	6878      	ldr	r0, [r7, #4]
 80064f6:	4798      	blx	r3
    }
    return;
 80064f8:	e017      	b.n	800652a <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80064fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80064fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006502:	2b00      	cmp	r3, #0
 8006504:	d012      	beq.n	800652c <HAL_UART_IRQHandler+0x5bc>
 8006506:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800650a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800650e:	2b00      	cmp	r3, #0
 8006510:	d00c      	beq.n	800652c <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 8006512:	6878      	ldr	r0, [r7, #4]
 8006514:	f000 ffcb 	bl	80074ae <UART_EndTransmit_IT>
    return;
 8006518:	e008      	b.n	800652c <HAL_UART_IRQHandler+0x5bc>
      return;
 800651a:	bf00      	nop
 800651c:	e006      	b.n	800652c <HAL_UART_IRQHandler+0x5bc>
    return;
 800651e:	bf00      	nop
 8006520:	e004      	b.n	800652c <HAL_UART_IRQHandler+0x5bc>
      return;
 8006522:	bf00      	nop
 8006524:	e002      	b.n	800652c <HAL_UART_IRQHandler+0x5bc>
      return;
 8006526:	bf00      	nop
 8006528:	e000      	b.n	800652c <HAL_UART_IRQHandler+0x5bc>
    return;
 800652a:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 800652c:	37e8      	adds	r7, #232	; 0xe8
 800652e:	46bd      	mov	sp, r7
 8006530:	bd80      	pop	{r7, pc}
 8006532:	bf00      	nop

08006534 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006534:	b480      	push	{r7}
 8006536:	b083      	sub	sp, #12
 8006538:	af00      	add	r7, sp, #0
 800653a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800653c:	bf00      	nop
 800653e:	370c      	adds	r7, #12
 8006540:	46bd      	mov	sp, r7
 8006542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006546:	4770      	bx	lr

08006548 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006548:	b480      	push	{r7}
 800654a:	b083      	sub	sp, #12
 800654c:	af00      	add	r7, sp, #0
 800654e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8006550:	bf00      	nop
 8006552:	370c      	adds	r7, #12
 8006554:	46bd      	mov	sp, r7
 8006556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800655a:	4770      	bx	lr

0800655c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800655c:	b480      	push	{r7}
 800655e:	b083      	sub	sp, #12
 8006560:	af00      	add	r7, sp, #0
 8006562:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006564:	bf00      	nop
 8006566:	370c      	adds	r7, #12
 8006568:	46bd      	mov	sp, r7
 800656a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800656e:	4770      	bx	lr

08006570 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006570:	b480      	push	{r7}
 8006572:	b083      	sub	sp, #12
 8006574:	af00      	add	r7, sp, #0
 8006576:	6078      	str	r0, [r7, #4]
 8006578:	460b      	mov	r3, r1
 800657a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800657c:	bf00      	nop
 800657e:	370c      	adds	r7, #12
 8006580:	46bd      	mov	sp, r7
 8006582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006586:	4770      	bx	lr

08006588 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006588:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800658c:	b08a      	sub	sp, #40	; 0x28
 800658e:	af00      	add	r7, sp, #0
 8006590:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006592:	2300      	movs	r3, #0
 8006594:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	689a      	ldr	r2, [r3, #8]
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	691b      	ldr	r3, [r3, #16]
 80065a0:	431a      	orrs	r2, r3
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	695b      	ldr	r3, [r3, #20]
 80065a6:	431a      	orrs	r2, r3
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	69db      	ldr	r3, [r3, #28]
 80065ac:	4313      	orrs	r3, r2
 80065ae:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	681a      	ldr	r2, [r3, #0]
 80065b6:	4bb4      	ldr	r3, [pc, #720]	; (8006888 <UART_SetConfig+0x300>)
 80065b8:	4013      	ands	r3, r2
 80065ba:	68fa      	ldr	r2, [r7, #12]
 80065bc:	6812      	ldr	r2, [r2, #0]
 80065be:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80065c0:	430b      	orrs	r3, r1
 80065c2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	685b      	ldr	r3, [r3, #4]
 80065ca:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	68da      	ldr	r2, [r3, #12]
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	430a      	orrs	r2, r1
 80065d8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	699b      	ldr	r3, [r3, #24]
 80065de:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	4aa9      	ldr	r2, [pc, #676]	; (800688c <UART_SetConfig+0x304>)
 80065e6:	4293      	cmp	r3, r2
 80065e8:	d004      	beq.n	80065f4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	6a1b      	ldr	r3, [r3, #32]
 80065ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80065f0:	4313      	orrs	r3, r2
 80065f2:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	689b      	ldr	r3, [r3, #8]
 80065fa:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006604:	430a      	orrs	r2, r1
 8006606:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	4aa0      	ldr	r2, [pc, #640]	; (8006890 <UART_SetConfig+0x308>)
 800660e:	4293      	cmp	r3, r2
 8006610:	d126      	bne.n	8006660 <UART_SetConfig+0xd8>
 8006612:	4ba0      	ldr	r3, [pc, #640]	; (8006894 <UART_SetConfig+0x30c>)
 8006614:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006618:	f003 0303 	and.w	r3, r3, #3
 800661c:	2b03      	cmp	r3, #3
 800661e:	d81b      	bhi.n	8006658 <UART_SetConfig+0xd0>
 8006620:	a201      	add	r2, pc, #4	; (adr r2, 8006628 <UART_SetConfig+0xa0>)
 8006622:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006626:	bf00      	nop
 8006628:	08006639 	.word	0x08006639
 800662c:	08006649 	.word	0x08006649
 8006630:	08006641 	.word	0x08006641
 8006634:	08006651 	.word	0x08006651
 8006638:	2301      	movs	r3, #1
 800663a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800663e:	e080      	b.n	8006742 <UART_SetConfig+0x1ba>
 8006640:	2302      	movs	r3, #2
 8006642:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006646:	e07c      	b.n	8006742 <UART_SetConfig+0x1ba>
 8006648:	2304      	movs	r3, #4
 800664a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800664e:	e078      	b.n	8006742 <UART_SetConfig+0x1ba>
 8006650:	2308      	movs	r3, #8
 8006652:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006656:	e074      	b.n	8006742 <UART_SetConfig+0x1ba>
 8006658:	2310      	movs	r3, #16
 800665a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800665e:	e070      	b.n	8006742 <UART_SetConfig+0x1ba>
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	4a8c      	ldr	r2, [pc, #560]	; (8006898 <UART_SetConfig+0x310>)
 8006666:	4293      	cmp	r3, r2
 8006668:	d138      	bne.n	80066dc <UART_SetConfig+0x154>
 800666a:	4b8a      	ldr	r3, [pc, #552]	; (8006894 <UART_SetConfig+0x30c>)
 800666c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006670:	f003 030c 	and.w	r3, r3, #12
 8006674:	2b0c      	cmp	r3, #12
 8006676:	d82d      	bhi.n	80066d4 <UART_SetConfig+0x14c>
 8006678:	a201      	add	r2, pc, #4	; (adr r2, 8006680 <UART_SetConfig+0xf8>)
 800667a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800667e:	bf00      	nop
 8006680:	080066b5 	.word	0x080066b5
 8006684:	080066d5 	.word	0x080066d5
 8006688:	080066d5 	.word	0x080066d5
 800668c:	080066d5 	.word	0x080066d5
 8006690:	080066c5 	.word	0x080066c5
 8006694:	080066d5 	.word	0x080066d5
 8006698:	080066d5 	.word	0x080066d5
 800669c:	080066d5 	.word	0x080066d5
 80066a0:	080066bd 	.word	0x080066bd
 80066a4:	080066d5 	.word	0x080066d5
 80066a8:	080066d5 	.word	0x080066d5
 80066ac:	080066d5 	.word	0x080066d5
 80066b0:	080066cd 	.word	0x080066cd
 80066b4:	2300      	movs	r3, #0
 80066b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80066ba:	e042      	b.n	8006742 <UART_SetConfig+0x1ba>
 80066bc:	2302      	movs	r3, #2
 80066be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80066c2:	e03e      	b.n	8006742 <UART_SetConfig+0x1ba>
 80066c4:	2304      	movs	r3, #4
 80066c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80066ca:	e03a      	b.n	8006742 <UART_SetConfig+0x1ba>
 80066cc:	2308      	movs	r3, #8
 80066ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80066d2:	e036      	b.n	8006742 <UART_SetConfig+0x1ba>
 80066d4:	2310      	movs	r3, #16
 80066d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80066da:	e032      	b.n	8006742 <UART_SetConfig+0x1ba>
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	4a6a      	ldr	r2, [pc, #424]	; (800688c <UART_SetConfig+0x304>)
 80066e2:	4293      	cmp	r3, r2
 80066e4:	d12a      	bne.n	800673c <UART_SetConfig+0x1b4>
 80066e6:	4b6b      	ldr	r3, [pc, #428]	; (8006894 <UART_SetConfig+0x30c>)
 80066e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80066ec:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80066f0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80066f4:	d01a      	beq.n	800672c <UART_SetConfig+0x1a4>
 80066f6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80066fa:	d81b      	bhi.n	8006734 <UART_SetConfig+0x1ac>
 80066fc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006700:	d00c      	beq.n	800671c <UART_SetConfig+0x194>
 8006702:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006706:	d815      	bhi.n	8006734 <UART_SetConfig+0x1ac>
 8006708:	2b00      	cmp	r3, #0
 800670a:	d003      	beq.n	8006714 <UART_SetConfig+0x18c>
 800670c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006710:	d008      	beq.n	8006724 <UART_SetConfig+0x19c>
 8006712:	e00f      	b.n	8006734 <UART_SetConfig+0x1ac>
 8006714:	2300      	movs	r3, #0
 8006716:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800671a:	e012      	b.n	8006742 <UART_SetConfig+0x1ba>
 800671c:	2302      	movs	r3, #2
 800671e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006722:	e00e      	b.n	8006742 <UART_SetConfig+0x1ba>
 8006724:	2304      	movs	r3, #4
 8006726:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800672a:	e00a      	b.n	8006742 <UART_SetConfig+0x1ba>
 800672c:	2308      	movs	r3, #8
 800672e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006732:	e006      	b.n	8006742 <UART_SetConfig+0x1ba>
 8006734:	2310      	movs	r3, #16
 8006736:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800673a:	e002      	b.n	8006742 <UART_SetConfig+0x1ba>
 800673c:	2310      	movs	r3, #16
 800673e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	4a51      	ldr	r2, [pc, #324]	; (800688c <UART_SetConfig+0x304>)
 8006748:	4293      	cmp	r3, r2
 800674a:	d17a      	bne.n	8006842 <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800674c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006750:	2b08      	cmp	r3, #8
 8006752:	d824      	bhi.n	800679e <UART_SetConfig+0x216>
 8006754:	a201      	add	r2, pc, #4	; (adr r2, 800675c <UART_SetConfig+0x1d4>)
 8006756:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800675a:	bf00      	nop
 800675c:	08006781 	.word	0x08006781
 8006760:	0800679f 	.word	0x0800679f
 8006764:	08006789 	.word	0x08006789
 8006768:	0800679f 	.word	0x0800679f
 800676c:	0800678f 	.word	0x0800678f
 8006770:	0800679f 	.word	0x0800679f
 8006774:	0800679f 	.word	0x0800679f
 8006778:	0800679f 	.word	0x0800679f
 800677c:	08006797 	.word	0x08006797
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006780:	f7fe faf2 	bl	8004d68 <HAL_RCC_GetPCLK1Freq>
 8006784:	61f8      	str	r0, [r7, #28]
        break;
 8006786:	e010      	b.n	80067aa <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006788:	4b44      	ldr	r3, [pc, #272]	; (800689c <UART_SetConfig+0x314>)
 800678a:	61fb      	str	r3, [r7, #28]
        break;
 800678c:	e00d      	b.n	80067aa <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800678e:	f7fe fa53 	bl	8004c38 <HAL_RCC_GetSysClockFreq>
 8006792:	61f8      	str	r0, [r7, #28]
        break;
 8006794:	e009      	b.n	80067aa <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006796:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800679a:	61fb      	str	r3, [r7, #28]
        break;
 800679c:	e005      	b.n	80067aa <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 800679e:	2300      	movs	r3, #0
 80067a0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80067a2:	2301      	movs	r3, #1
 80067a4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80067a8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80067aa:	69fb      	ldr	r3, [r7, #28]
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	f000 8107 	beq.w	80069c0 <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	685a      	ldr	r2, [r3, #4]
 80067b6:	4613      	mov	r3, r2
 80067b8:	005b      	lsls	r3, r3, #1
 80067ba:	4413      	add	r3, r2
 80067bc:	69fa      	ldr	r2, [r7, #28]
 80067be:	429a      	cmp	r2, r3
 80067c0:	d305      	bcc.n	80067ce <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	685b      	ldr	r3, [r3, #4]
 80067c6:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80067c8:	69fa      	ldr	r2, [r7, #28]
 80067ca:	429a      	cmp	r2, r3
 80067cc:	d903      	bls.n	80067d6 <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 80067ce:	2301      	movs	r3, #1
 80067d0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80067d4:	e0f4      	b.n	80069c0 <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80067d6:	69fb      	ldr	r3, [r7, #28]
 80067d8:	2200      	movs	r2, #0
 80067da:	461c      	mov	r4, r3
 80067dc:	4615      	mov	r5, r2
 80067de:	f04f 0200 	mov.w	r2, #0
 80067e2:	f04f 0300 	mov.w	r3, #0
 80067e6:	022b      	lsls	r3, r5, #8
 80067e8:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80067ec:	0222      	lsls	r2, r4, #8
 80067ee:	68f9      	ldr	r1, [r7, #12]
 80067f0:	6849      	ldr	r1, [r1, #4]
 80067f2:	0849      	lsrs	r1, r1, #1
 80067f4:	2000      	movs	r0, #0
 80067f6:	4688      	mov	r8, r1
 80067f8:	4681      	mov	r9, r0
 80067fa:	eb12 0a08 	adds.w	sl, r2, r8
 80067fe:	eb43 0b09 	adc.w	fp, r3, r9
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	685b      	ldr	r3, [r3, #4]
 8006806:	2200      	movs	r2, #0
 8006808:	603b      	str	r3, [r7, #0]
 800680a:	607a      	str	r2, [r7, #4]
 800680c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006810:	4650      	mov	r0, sl
 8006812:	4659      	mov	r1, fp
 8006814:	f7fa f9d2 	bl	8000bbc <__aeabi_uldivmod>
 8006818:	4602      	mov	r2, r0
 800681a:	460b      	mov	r3, r1
 800681c:	4613      	mov	r3, r2
 800681e:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006820:	69bb      	ldr	r3, [r7, #24]
 8006822:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006826:	d308      	bcc.n	800683a <UART_SetConfig+0x2b2>
 8006828:	69bb      	ldr	r3, [r7, #24]
 800682a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800682e:	d204      	bcs.n	800683a <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	69ba      	ldr	r2, [r7, #24]
 8006836:	60da      	str	r2, [r3, #12]
 8006838:	e0c2      	b.n	80069c0 <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 800683a:	2301      	movs	r3, #1
 800683c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006840:	e0be      	b.n	80069c0 <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	69db      	ldr	r3, [r3, #28]
 8006846:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800684a:	d16a      	bne.n	8006922 <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 800684c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006850:	2b08      	cmp	r3, #8
 8006852:	d834      	bhi.n	80068be <UART_SetConfig+0x336>
 8006854:	a201      	add	r2, pc, #4	; (adr r2, 800685c <UART_SetConfig+0x2d4>)
 8006856:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800685a:	bf00      	nop
 800685c:	08006881 	.word	0x08006881
 8006860:	080068a1 	.word	0x080068a1
 8006864:	080068a9 	.word	0x080068a9
 8006868:	080068bf 	.word	0x080068bf
 800686c:	080068af 	.word	0x080068af
 8006870:	080068bf 	.word	0x080068bf
 8006874:	080068bf 	.word	0x080068bf
 8006878:	080068bf 	.word	0x080068bf
 800687c:	080068b7 	.word	0x080068b7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006880:	f7fe fa72 	bl	8004d68 <HAL_RCC_GetPCLK1Freq>
 8006884:	61f8      	str	r0, [r7, #28]
        break;
 8006886:	e020      	b.n	80068ca <UART_SetConfig+0x342>
 8006888:	efff69f3 	.word	0xefff69f3
 800688c:	40008000 	.word	0x40008000
 8006890:	40013800 	.word	0x40013800
 8006894:	40021000 	.word	0x40021000
 8006898:	40004400 	.word	0x40004400
 800689c:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80068a0:	f7fe fa78 	bl	8004d94 <HAL_RCC_GetPCLK2Freq>
 80068a4:	61f8      	str	r0, [r7, #28]
        break;
 80068a6:	e010      	b.n	80068ca <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80068a8:	4b4c      	ldr	r3, [pc, #304]	; (80069dc <UART_SetConfig+0x454>)
 80068aa:	61fb      	str	r3, [r7, #28]
        break;
 80068ac:	e00d      	b.n	80068ca <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80068ae:	f7fe f9c3 	bl	8004c38 <HAL_RCC_GetSysClockFreq>
 80068b2:	61f8      	str	r0, [r7, #28]
        break;
 80068b4:	e009      	b.n	80068ca <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80068b6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80068ba:	61fb      	str	r3, [r7, #28]
        break;
 80068bc:	e005      	b.n	80068ca <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 80068be:	2300      	movs	r3, #0
 80068c0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80068c2:	2301      	movs	r3, #1
 80068c4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80068c8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80068ca:	69fb      	ldr	r3, [r7, #28]
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d077      	beq.n	80069c0 <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80068d0:	69fb      	ldr	r3, [r7, #28]
 80068d2:	005a      	lsls	r2, r3, #1
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	685b      	ldr	r3, [r3, #4]
 80068d8:	085b      	lsrs	r3, r3, #1
 80068da:	441a      	add	r2, r3
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	685b      	ldr	r3, [r3, #4]
 80068e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80068e4:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80068e6:	69bb      	ldr	r3, [r7, #24]
 80068e8:	2b0f      	cmp	r3, #15
 80068ea:	d916      	bls.n	800691a <UART_SetConfig+0x392>
 80068ec:	69bb      	ldr	r3, [r7, #24]
 80068ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80068f2:	d212      	bcs.n	800691a <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80068f4:	69bb      	ldr	r3, [r7, #24]
 80068f6:	b29b      	uxth	r3, r3
 80068f8:	f023 030f 	bic.w	r3, r3, #15
 80068fc:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80068fe:	69bb      	ldr	r3, [r7, #24]
 8006900:	085b      	lsrs	r3, r3, #1
 8006902:	b29b      	uxth	r3, r3
 8006904:	f003 0307 	and.w	r3, r3, #7
 8006908:	b29a      	uxth	r2, r3
 800690a:	8afb      	ldrh	r3, [r7, #22]
 800690c:	4313      	orrs	r3, r2
 800690e:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	8afa      	ldrh	r2, [r7, #22]
 8006916:	60da      	str	r2, [r3, #12]
 8006918:	e052      	b.n	80069c0 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 800691a:	2301      	movs	r3, #1
 800691c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006920:	e04e      	b.n	80069c0 <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006922:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006926:	2b08      	cmp	r3, #8
 8006928:	d827      	bhi.n	800697a <UART_SetConfig+0x3f2>
 800692a:	a201      	add	r2, pc, #4	; (adr r2, 8006930 <UART_SetConfig+0x3a8>)
 800692c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006930:	08006955 	.word	0x08006955
 8006934:	0800695d 	.word	0x0800695d
 8006938:	08006965 	.word	0x08006965
 800693c:	0800697b 	.word	0x0800697b
 8006940:	0800696b 	.word	0x0800696b
 8006944:	0800697b 	.word	0x0800697b
 8006948:	0800697b 	.word	0x0800697b
 800694c:	0800697b 	.word	0x0800697b
 8006950:	08006973 	.word	0x08006973
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006954:	f7fe fa08 	bl	8004d68 <HAL_RCC_GetPCLK1Freq>
 8006958:	61f8      	str	r0, [r7, #28]
        break;
 800695a:	e014      	b.n	8006986 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800695c:	f7fe fa1a 	bl	8004d94 <HAL_RCC_GetPCLK2Freq>
 8006960:	61f8      	str	r0, [r7, #28]
        break;
 8006962:	e010      	b.n	8006986 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006964:	4b1d      	ldr	r3, [pc, #116]	; (80069dc <UART_SetConfig+0x454>)
 8006966:	61fb      	str	r3, [r7, #28]
        break;
 8006968:	e00d      	b.n	8006986 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800696a:	f7fe f965 	bl	8004c38 <HAL_RCC_GetSysClockFreq>
 800696e:	61f8      	str	r0, [r7, #28]
        break;
 8006970:	e009      	b.n	8006986 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006972:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006976:	61fb      	str	r3, [r7, #28]
        break;
 8006978:	e005      	b.n	8006986 <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 800697a:	2300      	movs	r3, #0
 800697c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800697e:	2301      	movs	r3, #1
 8006980:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006984:	bf00      	nop
    }

    if (pclk != 0U)
 8006986:	69fb      	ldr	r3, [r7, #28]
 8006988:	2b00      	cmp	r3, #0
 800698a:	d019      	beq.n	80069c0 <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	685b      	ldr	r3, [r3, #4]
 8006990:	085a      	lsrs	r2, r3, #1
 8006992:	69fb      	ldr	r3, [r7, #28]
 8006994:	441a      	add	r2, r3
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	685b      	ldr	r3, [r3, #4]
 800699a:	fbb2 f3f3 	udiv	r3, r2, r3
 800699e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80069a0:	69bb      	ldr	r3, [r7, #24]
 80069a2:	2b0f      	cmp	r3, #15
 80069a4:	d909      	bls.n	80069ba <UART_SetConfig+0x432>
 80069a6:	69bb      	ldr	r3, [r7, #24]
 80069a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80069ac:	d205      	bcs.n	80069ba <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80069ae:	69bb      	ldr	r3, [r7, #24]
 80069b0:	b29a      	uxth	r2, r3
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	60da      	str	r2, [r3, #12]
 80069b8:	e002      	b.n	80069c0 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 80069ba:	2301      	movs	r3, #1
 80069bc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	2200      	movs	r2, #0
 80069c4:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	2200      	movs	r2, #0
 80069ca:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80069cc:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 80069d0:	4618      	mov	r0, r3
 80069d2:	3728      	adds	r7, #40	; 0x28
 80069d4:	46bd      	mov	sp, r7
 80069d6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80069da:	bf00      	nop
 80069dc:	00f42400 	.word	0x00f42400

080069e0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80069e0:	b480      	push	{r7}
 80069e2:	b083      	sub	sp, #12
 80069e4:	af00      	add	r7, sp, #0
 80069e6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069ec:	f003 0301 	and.w	r3, r3, #1
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d00a      	beq.n	8006a0a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	685b      	ldr	r3, [r3, #4]
 80069fa:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	430a      	orrs	r2, r1
 8006a08:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a0e:	f003 0302 	and.w	r3, r3, #2
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d00a      	beq.n	8006a2c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	685b      	ldr	r3, [r3, #4]
 8006a1c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	430a      	orrs	r2, r1
 8006a2a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a30:	f003 0304 	and.w	r3, r3, #4
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d00a      	beq.n	8006a4e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	685b      	ldr	r3, [r3, #4]
 8006a3e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	430a      	orrs	r2, r1
 8006a4c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a52:	f003 0308 	and.w	r3, r3, #8
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d00a      	beq.n	8006a70 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	685b      	ldr	r3, [r3, #4]
 8006a60:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	430a      	orrs	r2, r1
 8006a6e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a74:	f003 0310 	and.w	r3, r3, #16
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d00a      	beq.n	8006a92 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	689b      	ldr	r3, [r3, #8]
 8006a82:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	430a      	orrs	r2, r1
 8006a90:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a96:	f003 0320 	and.w	r3, r3, #32
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d00a      	beq.n	8006ab4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	689b      	ldr	r3, [r3, #8]
 8006aa4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	430a      	orrs	r2, r1
 8006ab2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ab8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d01a      	beq.n	8006af6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	685b      	ldr	r3, [r3, #4]
 8006ac6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	430a      	orrs	r2, r1
 8006ad4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ada:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006ade:	d10a      	bne.n	8006af6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	685b      	ldr	r3, [r3, #4]
 8006ae6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	430a      	orrs	r2, r1
 8006af4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006afa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d00a      	beq.n	8006b18 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	685b      	ldr	r3, [r3, #4]
 8006b08:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	430a      	orrs	r2, r1
 8006b16:	605a      	str	r2, [r3, #4]
  }
}
 8006b18:	bf00      	nop
 8006b1a:	370c      	adds	r7, #12
 8006b1c:	46bd      	mov	sp, r7
 8006b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b22:	4770      	bx	lr

08006b24 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006b24:	b580      	push	{r7, lr}
 8006b26:	b086      	sub	sp, #24
 8006b28:	af02      	add	r7, sp, #8
 8006b2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	2200      	movs	r2, #0
 8006b30:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006b34:	f7fc fd04 	bl	8003540 <HAL_GetTick>
 8006b38:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	f003 0308 	and.w	r3, r3, #8
 8006b44:	2b08      	cmp	r3, #8
 8006b46:	d10e      	bne.n	8006b66 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006b48:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006b4c:	9300      	str	r3, [sp, #0]
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	2200      	movs	r2, #0
 8006b52:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006b56:	6878      	ldr	r0, [r7, #4]
 8006b58:	f000 f82d 	bl	8006bb6 <UART_WaitOnFlagUntilTimeout>
 8006b5c:	4603      	mov	r3, r0
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d001      	beq.n	8006b66 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006b62:	2303      	movs	r3, #3
 8006b64:	e023      	b.n	8006bae <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	f003 0304 	and.w	r3, r3, #4
 8006b70:	2b04      	cmp	r3, #4
 8006b72:	d10e      	bne.n	8006b92 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006b74:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006b78:	9300      	str	r3, [sp, #0]
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	2200      	movs	r2, #0
 8006b7e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006b82:	6878      	ldr	r0, [r7, #4]
 8006b84:	f000 f817 	bl	8006bb6 <UART_WaitOnFlagUntilTimeout>
 8006b88:	4603      	mov	r3, r0
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d001      	beq.n	8006b92 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006b8e:	2303      	movs	r3, #3
 8006b90:	e00d      	b.n	8006bae <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	2220      	movs	r2, #32
 8006b96:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	2220      	movs	r2, #32
 8006b9c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	2200      	movs	r2, #0
 8006ba2:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	2200      	movs	r2, #0
 8006ba8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8006bac:	2300      	movs	r3, #0
}
 8006bae:	4618      	mov	r0, r3
 8006bb0:	3710      	adds	r7, #16
 8006bb2:	46bd      	mov	sp, r7
 8006bb4:	bd80      	pop	{r7, pc}

08006bb6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006bb6:	b580      	push	{r7, lr}
 8006bb8:	b09c      	sub	sp, #112	; 0x70
 8006bba:	af00      	add	r7, sp, #0
 8006bbc:	60f8      	str	r0, [r7, #12]
 8006bbe:	60b9      	str	r1, [r7, #8]
 8006bc0:	603b      	str	r3, [r7, #0]
 8006bc2:	4613      	mov	r3, r2
 8006bc4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006bc6:	e0a5      	b.n	8006d14 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006bc8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006bca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006bce:	f000 80a1 	beq.w	8006d14 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006bd2:	f7fc fcb5 	bl	8003540 <HAL_GetTick>
 8006bd6:	4602      	mov	r2, r0
 8006bd8:	683b      	ldr	r3, [r7, #0]
 8006bda:	1ad3      	subs	r3, r2, r3
 8006bdc:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8006bde:	429a      	cmp	r2, r3
 8006be0:	d302      	bcc.n	8006be8 <UART_WaitOnFlagUntilTimeout+0x32>
 8006be2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d13e      	bne.n	8006c66 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006bf0:	e853 3f00 	ldrex	r3, [r3]
 8006bf4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006bf6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006bf8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006bfc:	667b      	str	r3, [r7, #100]	; 0x64
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	461a      	mov	r2, r3
 8006c04:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006c06:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006c08:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c0a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006c0c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006c0e:	e841 2300 	strex	r3, r2, [r1]
 8006c12:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006c14:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d1e6      	bne.n	8006be8 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	3308      	adds	r3, #8
 8006c20:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c22:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006c24:	e853 3f00 	ldrex	r3, [r3]
 8006c28:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006c2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c2c:	f023 0301 	bic.w	r3, r3, #1
 8006c30:	663b      	str	r3, [r7, #96]	; 0x60
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	3308      	adds	r3, #8
 8006c38:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006c3a:	64ba      	str	r2, [r7, #72]	; 0x48
 8006c3c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c3e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006c40:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006c42:	e841 2300 	strex	r3, r2, [r1]
 8006c46:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006c48:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d1e5      	bne.n	8006c1a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	2220      	movs	r2, #32
 8006c52:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	2220      	movs	r2, #32
 8006c58:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	2200      	movs	r2, #0
 8006c5e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8006c62:	2303      	movs	r3, #3
 8006c64:	e067      	b.n	8006d36 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	f003 0304 	and.w	r3, r3, #4
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d04f      	beq.n	8006d14 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	69db      	ldr	r3, [r3, #28]
 8006c7a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006c7e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006c82:	d147      	bne.n	8006d14 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006c8c:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c96:	e853 3f00 	ldrex	r3, [r3]
 8006c9a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006c9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c9e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006ca2:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	461a      	mov	r2, r3
 8006caa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006cac:	637b      	str	r3, [r7, #52]	; 0x34
 8006cae:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cb0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006cb2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006cb4:	e841 2300 	strex	r3, r2, [r1]
 8006cb8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006cba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d1e6      	bne.n	8006c8e <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	3308      	adds	r3, #8
 8006cc6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cc8:	697b      	ldr	r3, [r7, #20]
 8006cca:	e853 3f00 	ldrex	r3, [r3]
 8006cce:	613b      	str	r3, [r7, #16]
   return(result);
 8006cd0:	693b      	ldr	r3, [r7, #16]
 8006cd2:	f023 0301 	bic.w	r3, r3, #1
 8006cd6:	66bb      	str	r3, [r7, #104]	; 0x68
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	3308      	adds	r3, #8
 8006cde:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006ce0:	623a      	str	r2, [r7, #32]
 8006ce2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ce4:	69f9      	ldr	r1, [r7, #28]
 8006ce6:	6a3a      	ldr	r2, [r7, #32]
 8006ce8:	e841 2300 	strex	r3, r2, [r1]
 8006cec:	61bb      	str	r3, [r7, #24]
   return(result);
 8006cee:	69bb      	ldr	r3, [r7, #24]
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d1e5      	bne.n	8006cc0 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	2220      	movs	r2, #32
 8006cf8:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	2220      	movs	r2, #32
 8006cfe:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	2220      	movs	r2, #32
 8006d04:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	2200      	movs	r2, #0
 8006d0c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8006d10:	2303      	movs	r3, #3
 8006d12:	e010      	b.n	8006d36 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	69da      	ldr	r2, [r3, #28]
 8006d1a:	68bb      	ldr	r3, [r7, #8]
 8006d1c:	4013      	ands	r3, r2
 8006d1e:	68ba      	ldr	r2, [r7, #8]
 8006d20:	429a      	cmp	r2, r3
 8006d22:	bf0c      	ite	eq
 8006d24:	2301      	moveq	r3, #1
 8006d26:	2300      	movne	r3, #0
 8006d28:	b2db      	uxtb	r3, r3
 8006d2a:	461a      	mov	r2, r3
 8006d2c:	79fb      	ldrb	r3, [r7, #7]
 8006d2e:	429a      	cmp	r2, r3
 8006d30:	f43f af4a 	beq.w	8006bc8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006d34:	2300      	movs	r3, #0
}
 8006d36:	4618      	mov	r0, r3
 8006d38:	3770      	adds	r7, #112	; 0x70
 8006d3a:	46bd      	mov	sp, r7
 8006d3c:	bd80      	pop	{r7, pc}
	...

08006d40 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006d40:	b480      	push	{r7}
 8006d42:	b097      	sub	sp, #92	; 0x5c
 8006d44:	af00      	add	r7, sp, #0
 8006d46:	60f8      	str	r0, [r7, #12]
 8006d48:	60b9      	str	r1, [r7, #8]
 8006d4a:	4613      	mov	r3, r2
 8006d4c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	68ba      	ldr	r2, [r7, #8]
 8006d52:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	88fa      	ldrh	r2, [r7, #6]
 8006d58:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	88fa      	ldrh	r2, [r7, #6]
 8006d60:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	2200      	movs	r2, #0
 8006d68:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	689b      	ldr	r3, [r3, #8]
 8006d6e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006d72:	d10e      	bne.n	8006d92 <UART_Start_Receive_IT+0x52>
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	691b      	ldr	r3, [r3, #16]
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d105      	bne.n	8006d88 <UART_Start_Receive_IT+0x48>
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	f240 12ff 	movw	r2, #511	; 0x1ff
 8006d82:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006d86:	e02d      	b.n	8006de4 <UART_Start_Receive_IT+0xa4>
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	22ff      	movs	r2, #255	; 0xff
 8006d8c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006d90:	e028      	b.n	8006de4 <UART_Start_Receive_IT+0xa4>
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	689b      	ldr	r3, [r3, #8]
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d10d      	bne.n	8006db6 <UART_Start_Receive_IT+0x76>
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	691b      	ldr	r3, [r3, #16]
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d104      	bne.n	8006dac <UART_Start_Receive_IT+0x6c>
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	22ff      	movs	r2, #255	; 0xff
 8006da6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006daa:	e01b      	b.n	8006de4 <UART_Start_Receive_IT+0xa4>
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	227f      	movs	r2, #127	; 0x7f
 8006db0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006db4:	e016      	b.n	8006de4 <UART_Start_Receive_IT+0xa4>
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	689b      	ldr	r3, [r3, #8]
 8006dba:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006dbe:	d10d      	bne.n	8006ddc <UART_Start_Receive_IT+0x9c>
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	691b      	ldr	r3, [r3, #16]
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d104      	bne.n	8006dd2 <UART_Start_Receive_IT+0x92>
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	227f      	movs	r2, #127	; 0x7f
 8006dcc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006dd0:	e008      	b.n	8006de4 <UART_Start_Receive_IT+0xa4>
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	223f      	movs	r2, #63	; 0x3f
 8006dd6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006dda:	e003      	b.n	8006de4 <UART_Start_Receive_IT+0xa4>
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	2200      	movs	r2, #0
 8006de0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	2200      	movs	r2, #0
 8006de8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	2222      	movs	r2, #34	; 0x22
 8006df0:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	3308      	adds	r3, #8
 8006df8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dfa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006dfc:	e853 3f00 	ldrex	r3, [r3]
 8006e00:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006e02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e04:	f043 0301 	orr.w	r3, r3, #1
 8006e08:	657b      	str	r3, [r7, #84]	; 0x54
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	3308      	adds	r3, #8
 8006e10:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006e12:	64ba      	str	r2, [r7, #72]	; 0x48
 8006e14:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e16:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006e18:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006e1a:	e841 2300 	strex	r3, r2, [r1]
 8006e1e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006e20:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d1e5      	bne.n	8006df2 <UART_Start_Receive_IT+0xb2>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	689b      	ldr	r3, [r3, #8]
 8006e2a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006e2e:	d107      	bne.n	8006e40 <UART_Start_Receive_IT+0x100>
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	691b      	ldr	r3, [r3, #16]
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d103      	bne.n	8006e40 <UART_Start_Receive_IT+0x100>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	4a24      	ldr	r2, [pc, #144]	; (8006ecc <UART_Start_Receive_IT+0x18c>)
 8006e3c:	665a      	str	r2, [r3, #100]	; 0x64
 8006e3e:	e002      	b.n	8006e46 <UART_Start_Receive_IT+0x106>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	4a23      	ldr	r2, [pc, #140]	; (8006ed0 <UART_Start_Receive_IT+0x190>)
 8006e44:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	2200      	movs	r2, #0
 8006e4a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	691b      	ldr	r3, [r3, #16]
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d019      	beq.n	8006e8a <UART_Start_Receive_IT+0x14a>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e5e:	e853 3f00 	ldrex	r3, [r3]
 8006e62:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006e64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e66:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8006e6a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	461a      	mov	r2, r3
 8006e72:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006e74:	637b      	str	r3, [r7, #52]	; 0x34
 8006e76:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e78:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006e7a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006e7c:	e841 2300 	strex	r3, r2, [r1]
 8006e80:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006e82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d1e6      	bne.n	8006e56 <UART_Start_Receive_IT+0x116>
 8006e88:	e018      	b.n	8006ebc <UART_Start_Receive_IT+0x17c>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e90:	697b      	ldr	r3, [r7, #20]
 8006e92:	e853 3f00 	ldrex	r3, [r3]
 8006e96:	613b      	str	r3, [r7, #16]
   return(result);
 8006e98:	693b      	ldr	r3, [r7, #16]
 8006e9a:	f043 0320 	orr.w	r3, r3, #32
 8006e9e:	653b      	str	r3, [r7, #80]	; 0x50
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	461a      	mov	r2, r3
 8006ea6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006ea8:	623b      	str	r3, [r7, #32]
 8006eaa:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006eac:	69f9      	ldr	r1, [r7, #28]
 8006eae:	6a3a      	ldr	r2, [r7, #32]
 8006eb0:	e841 2300 	strex	r3, r2, [r1]
 8006eb4:	61bb      	str	r3, [r7, #24]
   return(result);
 8006eb6:	69bb      	ldr	r3, [r7, #24]
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d1e6      	bne.n	8006e8a <UART_Start_Receive_IT+0x14a>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 8006ebc:	2300      	movs	r3, #0
}
 8006ebe:	4618      	mov	r0, r3
 8006ec0:	375c      	adds	r7, #92	; 0x5c
 8006ec2:	46bd      	mov	sp, r7
 8006ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ec8:	4770      	bx	lr
 8006eca:	bf00      	nop
 8006ecc:	08007663 	.word	0x08007663
 8006ed0:	08007503 	.word	0x08007503

08006ed4 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006ed4:	b580      	push	{r7, lr}
 8006ed6:	b096      	sub	sp, #88	; 0x58
 8006ed8:	af00      	add	r7, sp, #0
 8006eda:	60f8      	str	r0, [r7, #12]
 8006edc:	60b9      	str	r1, [r7, #8]
 8006ede:	4613      	mov	r3, r2
 8006ee0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	68ba      	ldr	r2, [r7, #8]
 8006ee6:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	88fa      	ldrh	r2, [r7, #6]
 8006eec:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	2200      	movs	r2, #0
 8006ef4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	2222      	movs	r2, #34	; 0x22
 8006efc:	67da      	str	r2, [r3, #124]	; 0x7c

  if (huart->hdmarx != NULL)
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d02b      	beq.n	8006f5e <UART_Start_Receive_DMA+0x8a>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f0a:	4a42      	ldr	r2, [pc, #264]	; (8007014 <UART_Start_Receive_DMA+0x140>)
 8006f0c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f12:	4a41      	ldr	r2, [pc, #260]	; (8007018 <UART_Start_Receive_DMA+0x144>)
 8006f14:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f1a:	4a40      	ldr	r2, [pc, #256]	; (800701c <UART_Start_Receive_DMA+0x148>)
 8006f1c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f22:	2200      	movs	r2, #0
 8006f24:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	6f18      	ldr	r0, [r3, #112]	; 0x70
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	3324      	adds	r3, #36	; 0x24
 8006f30:	4619      	mov	r1, r3
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f36:	461a      	mov	r2, r3
 8006f38:	88fb      	ldrh	r3, [r7, #6]
 8006f3a:	f7fc fca7 	bl	800388c <HAL_DMA_Start_IT>
 8006f3e:	4603      	mov	r3, r0
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d00c      	beq.n	8006f5e <UART_Start_Receive_DMA+0x8a>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	2210      	movs	r2, #16
 8006f48:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	2200      	movs	r2, #0
 8006f50:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	2220      	movs	r2, #32
 8006f58:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_ERROR;
 8006f5a:	2301      	movs	r3, #1
 8006f5c:	e055      	b.n	800700a <UART_Start_Receive_DMA+0x136>
    }
  }
  __HAL_UNLOCK(huart);
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	2200      	movs	r2, #0
 8006f62:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	691b      	ldr	r3, [r3, #16]
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d018      	beq.n	8006fa0 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f74:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006f76:	e853 3f00 	ldrex	r3, [r3]
 8006f7a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006f7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f7e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006f82:	657b      	str	r3, [r7, #84]	; 0x54
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	461a      	mov	r2, r3
 8006f8a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006f8c:	64bb      	str	r3, [r7, #72]	; 0x48
 8006f8e:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f90:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006f92:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006f94:	e841 2300 	strex	r3, r2, [r1]
 8006f98:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006f9a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d1e6      	bne.n	8006f6e <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	3308      	adds	r3, #8
 8006fa6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006faa:	e853 3f00 	ldrex	r3, [r3]
 8006fae:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006fb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fb2:	f043 0301 	orr.w	r3, r3, #1
 8006fb6:	653b      	str	r3, [r7, #80]	; 0x50
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	3308      	adds	r3, #8
 8006fbe:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006fc0:	637a      	str	r2, [r7, #52]	; 0x34
 8006fc2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fc4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006fc6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006fc8:	e841 2300 	strex	r3, r2, [r1]
 8006fcc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006fce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d1e5      	bne.n	8006fa0 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	3308      	adds	r3, #8
 8006fda:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fdc:	697b      	ldr	r3, [r7, #20]
 8006fde:	e853 3f00 	ldrex	r3, [r3]
 8006fe2:	613b      	str	r3, [r7, #16]
   return(result);
 8006fe4:	693b      	ldr	r3, [r7, #16]
 8006fe6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006fea:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	3308      	adds	r3, #8
 8006ff2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006ff4:	623a      	str	r2, [r7, #32]
 8006ff6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ff8:	69f9      	ldr	r1, [r7, #28]
 8006ffa:	6a3a      	ldr	r2, [r7, #32]
 8006ffc:	e841 2300 	strex	r3, r2, [r1]
 8007000:	61bb      	str	r3, [r7, #24]
   return(result);
 8007002:	69bb      	ldr	r3, [r7, #24]
 8007004:	2b00      	cmp	r3, #0
 8007006:	d1e5      	bne.n	8006fd4 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 8007008:	2300      	movs	r3, #0
}
 800700a:	4618      	mov	r0, r3
 800700c:	3758      	adds	r7, #88	; 0x58
 800700e:	46bd      	mov	sp, r7
 8007010:	bd80      	pop	{r7, pc}
 8007012:	bf00      	nop
 8007014:	08007133 	.word	0x08007133
 8007018:	08007257 	.word	0x08007257
 800701c:	0800728f 	.word	0x0800728f

08007020 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8007020:	b480      	push	{r7}
 8007022:	b089      	sub	sp, #36	; 0x24
 8007024:	af00      	add	r7, sp, #0
 8007026:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
#else
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	e853 3f00 	ldrex	r3, [r3]
 8007034:	60bb      	str	r3, [r7, #8]
   return(result);
 8007036:	68bb      	ldr	r3, [r7, #8]
 8007038:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800703c:	61fb      	str	r3, [r7, #28]
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	461a      	mov	r2, r3
 8007044:	69fb      	ldr	r3, [r7, #28]
 8007046:	61bb      	str	r3, [r7, #24]
 8007048:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800704a:	6979      	ldr	r1, [r7, #20]
 800704c:	69ba      	ldr	r2, [r7, #24]
 800704e:	e841 2300 	strex	r3, r2, [r1]
 8007052:	613b      	str	r3, [r7, #16]
   return(result);
 8007054:	693b      	ldr	r3, [r7, #16]
 8007056:	2b00      	cmp	r3, #0
 8007058:	d1e6      	bne.n	8007028 <UART_EndTxTransfer+0x8>
#endif /* USART_CR1_FIFOEN */

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	2220      	movs	r2, #32
 800705e:	679a      	str	r2, [r3, #120]	; 0x78
}
 8007060:	bf00      	nop
 8007062:	3724      	adds	r7, #36	; 0x24
 8007064:	46bd      	mov	sp, r7
 8007066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800706a:	4770      	bx	lr

0800706c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800706c:	b480      	push	{r7}
 800706e:	b095      	sub	sp, #84	; 0x54
 8007070:	af00      	add	r7, sp, #0
 8007072:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800707a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800707c:	e853 3f00 	ldrex	r3, [r3]
 8007080:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007082:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007084:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007088:	64fb      	str	r3, [r7, #76]	; 0x4c
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	461a      	mov	r2, r3
 8007090:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007092:	643b      	str	r3, [r7, #64]	; 0x40
 8007094:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007096:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007098:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800709a:	e841 2300 	strex	r3, r2, [r1]
 800709e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80070a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d1e6      	bne.n	8007074 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	3308      	adds	r3, #8
 80070ac:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070ae:	6a3b      	ldr	r3, [r7, #32]
 80070b0:	e853 3f00 	ldrex	r3, [r3]
 80070b4:	61fb      	str	r3, [r7, #28]
   return(result);
 80070b6:	69fb      	ldr	r3, [r7, #28]
 80070b8:	f023 0301 	bic.w	r3, r3, #1
 80070bc:	64bb      	str	r3, [r7, #72]	; 0x48
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	3308      	adds	r3, #8
 80070c4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80070c6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80070c8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070ca:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80070cc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80070ce:	e841 2300 	strex	r3, r2, [r1]
 80070d2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80070d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d1e5      	bne.n	80070a6 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80070de:	2b01      	cmp	r3, #1
 80070e0:	d118      	bne.n	8007114 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	e853 3f00 	ldrex	r3, [r3]
 80070ee:	60bb      	str	r3, [r7, #8]
   return(result);
 80070f0:	68bb      	ldr	r3, [r7, #8]
 80070f2:	f023 0310 	bic.w	r3, r3, #16
 80070f6:	647b      	str	r3, [r7, #68]	; 0x44
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	461a      	mov	r2, r3
 80070fe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007100:	61bb      	str	r3, [r7, #24]
 8007102:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007104:	6979      	ldr	r1, [r7, #20]
 8007106:	69ba      	ldr	r2, [r7, #24]
 8007108:	e841 2300 	strex	r3, r2, [r1]
 800710c:	613b      	str	r3, [r7, #16]
   return(result);
 800710e:	693b      	ldr	r3, [r7, #16]
 8007110:	2b00      	cmp	r3, #0
 8007112:	d1e6      	bne.n	80070e2 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	2220      	movs	r2, #32
 8007118:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	2200      	movs	r2, #0
 800711e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	2200      	movs	r2, #0
 8007124:	665a      	str	r2, [r3, #100]	; 0x64
}
 8007126:	bf00      	nop
 8007128:	3754      	adds	r7, #84	; 0x54
 800712a:	46bd      	mov	sp, r7
 800712c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007130:	4770      	bx	lr

08007132 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8007132:	b580      	push	{r7, lr}
 8007134:	b09c      	sub	sp, #112	; 0x70
 8007136:	af00      	add	r7, sp, #0
 8007138:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800713e:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	f003 0320 	and.w	r3, r3, #32
 800714a:	2b00      	cmp	r3, #0
 800714c:	d170      	bne.n	8007230 <UART_DMAReceiveCplt+0xfe>
  {
    huart->RxXferCount = 0U;
 800714e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007150:	2200      	movs	r2, #0
 8007152:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007156:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800715c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800715e:	e853 3f00 	ldrex	r3, [r3]
 8007162:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007164:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007166:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800716a:	66bb      	str	r3, [r7, #104]	; 0x68
 800716c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	461a      	mov	r2, r3
 8007172:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007174:	65bb      	str	r3, [r7, #88]	; 0x58
 8007176:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007178:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800717a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800717c:	e841 2300 	strex	r3, r2, [r1]
 8007180:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007182:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007184:	2b00      	cmp	r3, #0
 8007186:	d1e6      	bne.n	8007156 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007188:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	3308      	adds	r3, #8
 800718e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007190:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007192:	e853 3f00 	ldrex	r3, [r3]
 8007196:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007198:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800719a:	f023 0301 	bic.w	r3, r3, #1
 800719e:	667b      	str	r3, [r7, #100]	; 0x64
 80071a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	3308      	adds	r3, #8
 80071a6:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80071a8:	647a      	str	r2, [r7, #68]	; 0x44
 80071aa:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071ac:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80071ae:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80071b0:	e841 2300 	strex	r3, r2, [r1]
 80071b4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80071b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d1e5      	bne.n	8007188 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80071bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	3308      	adds	r3, #8
 80071c2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071c6:	e853 3f00 	ldrex	r3, [r3]
 80071ca:	623b      	str	r3, [r7, #32]
   return(result);
 80071cc:	6a3b      	ldr	r3, [r7, #32]
 80071ce:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80071d2:	663b      	str	r3, [r7, #96]	; 0x60
 80071d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	3308      	adds	r3, #8
 80071da:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80071dc:	633a      	str	r2, [r7, #48]	; 0x30
 80071de:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071e0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80071e2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80071e4:	e841 2300 	strex	r3, r2, [r1]
 80071e8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80071ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d1e5      	bne.n	80071bc <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80071f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80071f2:	2220      	movs	r2, #32
 80071f4:	67da      	str	r2, [r3, #124]	; 0x7c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80071f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80071f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80071fa:	2b01      	cmp	r3, #1
 80071fc:	d118      	bne.n	8007230 <UART_DMAReceiveCplt+0xfe>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80071fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007204:	693b      	ldr	r3, [r7, #16]
 8007206:	e853 3f00 	ldrex	r3, [r3]
 800720a:	60fb      	str	r3, [r7, #12]
   return(result);
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	f023 0310 	bic.w	r3, r3, #16
 8007212:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007214:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	461a      	mov	r2, r3
 800721a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800721c:	61fb      	str	r3, [r7, #28]
 800721e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007220:	69b9      	ldr	r1, [r7, #24]
 8007222:	69fa      	ldr	r2, [r7, #28]
 8007224:	e841 2300 	strex	r3, r2, [r1]
 8007228:	617b      	str	r3, [r7, #20]
   return(result);
 800722a:	697b      	ldr	r3, [r7, #20]
 800722c:	2b00      	cmp	r3, #0
 800722e:	d1e6      	bne.n	80071fe <UART_DMAReceiveCplt+0xcc>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007230:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007232:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007234:	2b01      	cmp	r3, #1
 8007236:	d107      	bne.n	8007248 <UART_DMAReceiveCplt+0x116>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007238:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800723a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800723e:	4619      	mov	r1, r3
 8007240:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8007242:	f7ff f995 	bl	8006570 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007246:	e002      	b.n	800724e <UART_DMAReceiveCplt+0x11c>
    HAL_UART_RxCpltCallback(huart);
 8007248:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800724a:	f7fc f8d7 	bl	80033fc <HAL_UART_RxCpltCallback>
}
 800724e:	bf00      	nop
 8007250:	3770      	adds	r7, #112	; 0x70
 8007252:	46bd      	mov	sp, r7
 8007254:	bd80      	pop	{r7, pc}

08007256 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007256:	b580      	push	{r7, lr}
 8007258:	b084      	sub	sp, #16
 800725a:	af00      	add	r7, sp, #0
 800725c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007262:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007268:	2b01      	cmp	r3, #1
 800726a:	d109      	bne.n	8007280 <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8007272:	085b      	lsrs	r3, r3, #1
 8007274:	b29b      	uxth	r3, r3
 8007276:	4619      	mov	r1, r3
 8007278:	68f8      	ldr	r0, [r7, #12]
 800727a:	f7ff f979 	bl	8006570 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800727e:	e002      	b.n	8007286 <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 8007280:	68f8      	ldr	r0, [r7, #12]
 8007282:	f7ff f961 	bl	8006548 <HAL_UART_RxHalfCpltCallback>
}
 8007286:	bf00      	nop
 8007288:	3710      	adds	r7, #16
 800728a:	46bd      	mov	sp, r7
 800728c:	bd80      	pop	{r7, pc}

0800728e <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800728e:	b580      	push	{r7, lr}
 8007290:	b086      	sub	sp, #24
 8007292:	af00      	add	r7, sp, #0
 8007294:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800729a:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800729c:	697b      	ldr	r3, [r7, #20]
 800729e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80072a0:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80072a2:	697b      	ldr	r3, [r7, #20]
 80072a4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80072a6:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80072a8:	697b      	ldr	r3, [r7, #20]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	689b      	ldr	r3, [r3, #8]
 80072ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80072b2:	2b80      	cmp	r3, #128	; 0x80
 80072b4:	d109      	bne.n	80072ca <UART_DMAError+0x3c>
 80072b6:	693b      	ldr	r3, [r7, #16]
 80072b8:	2b21      	cmp	r3, #33	; 0x21
 80072ba:	d106      	bne.n	80072ca <UART_DMAError+0x3c>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 80072bc:	697b      	ldr	r3, [r7, #20]
 80072be:	2200      	movs	r2, #0
 80072c0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 80072c4:	6978      	ldr	r0, [r7, #20]
 80072c6:	f7ff feab 	bl	8007020 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80072ca:	697b      	ldr	r3, [r7, #20]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	689b      	ldr	r3, [r3, #8]
 80072d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80072d4:	2b40      	cmp	r3, #64	; 0x40
 80072d6:	d109      	bne.n	80072ec <UART_DMAError+0x5e>
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	2b22      	cmp	r3, #34	; 0x22
 80072dc:	d106      	bne.n	80072ec <UART_DMAError+0x5e>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 80072de:	697b      	ldr	r3, [r7, #20]
 80072e0:	2200      	movs	r2, #0
 80072e2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 80072e6:	6978      	ldr	r0, [r7, #20]
 80072e8:	f7ff fec0 	bl	800706c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80072ec:	697b      	ldr	r3, [r7, #20]
 80072ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80072f2:	f043 0210 	orr.w	r2, r3, #16
 80072f6:	697b      	ldr	r3, [r7, #20]
 80072f8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80072fc:	6978      	ldr	r0, [r7, #20]
 80072fe:	f7ff f92d 	bl	800655c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007302:	bf00      	nop
 8007304:	3718      	adds	r7, #24
 8007306:	46bd      	mov	sp, r7
 8007308:	bd80      	pop	{r7, pc}

0800730a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800730a:	b580      	push	{r7, lr}
 800730c:	b084      	sub	sp, #16
 800730e:	af00      	add	r7, sp, #0
 8007310:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007316:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	2200      	movs	r2, #0
 800731c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	2200      	movs	r2, #0
 8007324:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007328:	68f8      	ldr	r0, [r7, #12]
 800732a:	f7ff f917 	bl	800655c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800732e:	bf00      	nop
 8007330:	3710      	adds	r7, #16
 8007332:	46bd      	mov	sp, r7
 8007334:	bd80      	pop	{r7, pc}

08007336 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8007336:	b480      	push	{r7}
 8007338:	b08f      	sub	sp, #60	; 0x3c
 800733a:	af00      	add	r7, sp, #0
 800733c:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007342:	2b21      	cmp	r3, #33	; 0x21
 8007344:	d14d      	bne.n	80073e2 <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800734c:	b29b      	uxth	r3, r3
 800734e:	2b00      	cmp	r3, #0
 8007350:	d132      	bne.n	80073b8 <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007358:	6a3b      	ldr	r3, [r7, #32]
 800735a:	e853 3f00 	ldrex	r3, [r3]
 800735e:	61fb      	str	r3, [r7, #28]
   return(result);
 8007360:	69fb      	ldr	r3, [r7, #28]
 8007362:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007366:	637b      	str	r3, [r7, #52]	; 0x34
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	461a      	mov	r2, r3
 800736e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007370:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007372:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007374:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007376:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007378:	e841 2300 	strex	r3, r2, [r1]
 800737c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800737e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007380:	2b00      	cmp	r3, #0
 8007382:	d1e6      	bne.n	8007352 <UART_TxISR_8BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	e853 3f00 	ldrex	r3, [r3]
 8007390:	60bb      	str	r3, [r7, #8]
   return(result);
 8007392:	68bb      	ldr	r3, [r7, #8]
 8007394:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007398:	633b      	str	r3, [r7, #48]	; 0x30
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	461a      	mov	r2, r3
 80073a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073a2:	61bb      	str	r3, [r7, #24]
 80073a4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073a6:	6979      	ldr	r1, [r7, #20]
 80073a8:	69ba      	ldr	r2, [r7, #24]
 80073aa:	e841 2300 	strex	r3, r2, [r1]
 80073ae:	613b      	str	r3, [r7, #16]
   return(result);
 80073b0:	693b      	ldr	r3, [r7, #16]
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d1e6      	bne.n	8007384 <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 80073b6:	e014      	b.n	80073e2 <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80073bc:	781a      	ldrb	r2, [r3, #0]
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	b292      	uxth	r2, r2
 80073c4:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80073ca:	1c5a      	adds	r2, r3, #1
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80073d6:	b29b      	uxth	r3, r3
 80073d8:	3b01      	subs	r3, #1
 80073da:	b29a      	uxth	r2, r3
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 80073e2:	bf00      	nop
 80073e4:	373c      	adds	r7, #60	; 0x3c
 80073e6:	46bd      	mov	sp, r7
 80073e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ec:	4770      	bx	lr

080073ee <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 80073ee:	b480      	push	{r7}
 80073f0:	b091      	sub	sp, #68	; 0x44
 80073f2:	af00      	add	r7, sp, #0
 80073f4:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80073fa:	2b21      	cmp	r3, #33	; 0x21
 80073fc:	d151      	bne.n	80074a2 <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007404:	b29b      	uxth	r3, r3
 8007406:	2b00      	cmp	r3, #0
 8007408:	d132      	bne.n	8007470 <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007410:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007412:	e853 3f00 	ldrex	r3, [r3]
 8007416:	623b      	str	r3, [r7, #32]
   return(result);
 8007418:	6a3b      	ldr	r3, [r7, #32]
 800741a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800741e:	63bb      	str	r3, [r7, #56]	; 0x38
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	461a      	mov	r2, r3
 8007426:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007428:	633b      	str	r3, [r7, #48]	; 0x30
 800742a:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800742c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800742e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007430:	e841 2300 	strex	r3, r2, [r1]
 8007434:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007436:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007438:	2b00      	cmp	r3, #0
 800743a:	d1e6      	bne.n	800740a <UART_TxISR_16BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007442:	693b      	ldr	r3, [r7, #16]
 8007444:	e853 3f00 	ldrex	r3, [r3]
 8007448:	60fb      	str	r3, [r7, #12]
   return(result);
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007450:	637b      	str	r3, [r7, #52]	; 0x34
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	461a      	mov	r2, r3
 8007458:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800745a:	61fb      	str	r3, [r7, #28]
 800745c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800745e:	69b9      	ldr	r1, [r7, #24]
 8007460:	69fa      	ldr	r2, [r7, #28]
 8007462:	e841 2300 	strex	r3, r2, [r1]
 8007466:	617b      	str	r3, [r7, #20]
   return(result);
 8007468:	697b      	ldr	r3, [r7, #20]
 800746a:	2b00      	cmp	r3, #0
 800746c:	d1e6      	bne.n	800743c <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 800746e:	e018      	b.n	80074a2 <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007474:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8007476:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007478:	881a      	ldrh	r2, [r3, #0]
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007482:	b292      	uxth	r2, r2
 8007484:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800748a:	1c9a      	adds	r2, r3, #2
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007496:	b29b      	uxth	r3, r3
 8007498:	3b01      	subs	r3, #1
 800749a:	b29a      	uxth	r2, r3
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 80074a2:	bf00      	nop
 80074a4:	3744      	adds	r7, #68	; 0x44
 80074a6:	46bd      	mov	sp, r7
 80074a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ac:	4770      	bx	lr

080074ae <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80074ae:	b580      	push	{r7, lr}
 80074b0:	b088      	sub	sp, #32
 80074b2:	af00      	add	r7, sp, #0
 80074b4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	e853 3f00 	ldrex	r3, [r3]
 80074c2:	60bb      	str	r3, [r7, #8]
   return(result);
 80074c4:	68bb      	ldr	r3, [r7, #8]
 80074c6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80074ca:	61fb      	str	r3, [r7, #28]
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	461a      	mov	r2, r3
 80074d2:	69fb      	ldr	r3, [r7, #28]
 80074d4:	61bb      	str	r3, [r7, #24]
 80074d6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074d8:	6979      	ldr	r1, [r7, #20]
 80074da:	69ba      	ldr	r2, [r7, #24]
 80074dc:	e841 2300 	strex	r3, r2, [r1]
 80074e0:	613b      	str	r3, [r7, #16]
   return(result);
 80074e2:	693b      	ldr	r3, [r7, #16]
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d1e6      	bne.n	80074b6 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	2220      	movs	r2, #32
 80074ec:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	2200      	movs	r2, #0
 80074f2:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80074f4:	6878      	ldr	r0, [r7, #4]
 80074f6:	f7ff f81d 	bl	8006534 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80074fa:	bf00      	nop
 80074fc:	3720      	adds	r7, #32
 80074fe:	46bd      	mov	sp, r7
 8007500:	bd80      	pop	{r7, pc}

08007502 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8007502:	b580      	push	{r7, lr}
 8007504:	b096      	sub	sp, #88	; 0x58
 8007506:	af00      	add	r7, sp, #0
 8007508:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007510:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007518:	2b22      	cmp	r3, #34	; 0x22
 800751a:	f040 8094 	bne.w	8007646 <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8007524:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007528:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 800752c:	b2d9      	uxtb	r1, r3
 800752e:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8007532:	b2da      	uxtb	r2, r3
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007538:	400a      	ands	r2, r1
 800753a:	b2d2      	uxtb	r2, r2
 800753c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007542:	1c5a      	adds	r2, r3, #1
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800754e:	b29b      	uxth	r3, r3
 8007550:	3b01      	subs	r3, #1
 8007552:	b29a      	uxth	r2, r3
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007560:	b29b      	uxth	r3, r3
 8007562:	2b00      	cmp	r3, #0
 8007564:	d179      	bne.n	800765a <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800756c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800756e:	e853 3f00 	ldrex	r3, [r3]
 8007572:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007574:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007576:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800757a:	653b      	str	r3, [r7, #80]	; 0x50
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	461a      	mov	r2, r3
 8007582:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007584:	647b      	str	r3, [r7, #68]	; 0x44
 8007586:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007588:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800758a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800758c:	e841 2300 	strex	r3, r2, [r1]
 8007590:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007592:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007594:	2b00      	cmp	r3, #0
 8007596:	d1e6      	bne.n	8007566 <UART_RxISR_8BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	3308      	adds	r3, #8
 800759e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075a2:	e853 3f00 	ldrex	r3, [r3]
 80075a6:	623b      	str	r3, [r7, #32]
   return(result);
 80075a8:	6a3b      	ldr	r3, [r7, #32]
 80075aa:	f023 0301 	bic.w	r3, r3, #1
 80075ae:	64fb      	str	r3, [r7, #76]	; 0x4c
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	3308      	adds	r3, #8
 80075b6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80075b8:	633a      	str	r2, [r7, #48]	; 0x30
 80075ba:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075bc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80075be:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80075c0:	e841 2300 	strex	r3, r2, [r1]
 80075c4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80075c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d1e5      	bne.n	8007598 <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	2220      	movs	r2, #32
 80075d0:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	2200      	movs	r2, #0
 80075d6:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80075dc:	2b01      	cmp	r3, #1
 80075de:	d12e      	bne.n	800763e <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	2200      	movs	r2, #0
 80075e4:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075ec:	693b      	ldr	r3, [r7, #16]
 80075ee:	e853 3f00 	ldrex	r3, [r3]
 80075f2:	60fb      	str	r3, [r7, #12]
   return(result);
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	f023 0310 	bic.w	r3, r3, #16
 80075fa:	64bb      	str	r3, [r7, #72]	; 0x48
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	461a      	mov	r2, r3
 8007602:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007604:	61fb      	str	r3, [r7, #28]
 8007606:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007608:	69b9      	ldr	r1, [r7, #24]
 800760a:	69fa      	ldr	r2, [r7, #28]
 800760c:	e841 2300 	strex	r3, r2, [r1]
 8007610:	617b      	str	r3, [r7, #20]
   return(result);
 8007612:	697b      	ldr	r3, [r7, #20]
 8007614:	2b00      	cmp	r3, #0
 8007616:	d1e6      	bne.n	80075e6 <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	69db      	ldr	r3, [r3, #28]
 800761e:	f003 0310 	and.w	r3, r3, #16
 8007622:	2b10      	cmp	r3, #16
 8007624:	d103      	bne.n	800762e <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	2210      	movs	r2, #16
 800762c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8007634:	4619      	mov	r1, r3
 8007636:	6878      	ldr	r0, [r7, #4]
 8007638:	f7fe ff9a 	bl	8006570 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800763c:	e00d      	b.n	800765a <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 800763e:	6878      	ldr	r0, [r7, #4]
 8007640:	f7fb fedc 	bl	80033fc <HAL_UART_RxCpltCallback>
}
 8007644:	e009      	b.n	800765a <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	8b1b      	ldrh	r3, [r3, #24]
 800764c:	b29a      	uxth	r2, r3
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	f042 0208 	orr.w	r2, r2, #8
 8007656:	b292      	uxth	r2, r2
 8007658:	831a      	strh	r2, [r3, #24]
}
 800765a:	bf00      	nop
 800765c:	3758      	adds	r7, #88	; 0x58
 800765e:	46bd      	mov	sp, r7
 8007660:	bd80      	pop	{r7, pc}

08007662 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8007662:	b580      	push	{r7, lr}
 8007664:	b096      	sub	sp, #88	; 0x58
 8007666:	af00      	add	r7, sp, #0
 8007668:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007670:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007678:	2b22      	cmp	r3, #34	; 0x22
 800767a:	f040 8094 	bne.w	80077a6 <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8007684:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800768c:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 800768e:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8007692:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8007696:	4013      	ands	r3, r2
 8007698:	b29a      	uxth	r2, r3
 800769a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800769c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80076a2:	1c9a      	adds	r2, r3, #2
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80076ae:	b29b      	uxth	r3, r3
 80076b0:	3b01      	subs	r3, #1
 80076b2:	b29a      	uxth	r2, r3
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80076c0:	b29b      	uxth	r3, r3
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d179      	bne.n	80077ba <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80076ce:	e853 3f00 	ldrex	r3, [r3]
 80076d2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80076d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076d6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80076da:	64fb      	str	r3, [r7, #76]	; 0x4c
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	461a      	mov	r2, r3
 80076e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80076e4:	643b      	str	r3, [r7, #64]	; 0x40
 80076e6:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076e8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80076ea:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80076ec:	e841 2300 	strex	r3, r2, [r1]
 80076f0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80076f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d1e6      	bne.n	80076c6 <UART_RxISR_16BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	3308      	adds	r3, #8
 80076fe:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007700:	6a3b      	ldr	r3, [r7, #32]
 8007702:	e853 3f00 	ldrex	r3, [r3]
 8007706:	61fb      	str	r3, [r7, #28]
   return(result);
 8007708:	69fb      	ldr	r3, [r7, #28]
 800770a:	f023 0301 	bic.w	r3, r3, #1
 800770e:	64bb      	str	r3, [r7, #72]	; 0x48
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	3308      	adds	r3, #8
 8007716:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007718:	62fa      	str	r2, [r7, #44]	; 0x2c
 800771a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800771c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800771e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007720:	e841 2300 	strex	r3, r2, [r1]
 8007724:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007726:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007728:	2b00      	cmp	r3, #0
 800772a:	d1e5      	bne.n	80076f8 <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	2220      	movs	r2, #32
 8007730:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	2200      	movs	r2, #0
 8007736:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800773c:	2b01      	cmp	r3, #1
 800773e:	d12e      	bne.n	800779e <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	2200      	movs	r2, #0
 8007744:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	e853 3f00 	ldrex	r3, [r3]
 8007752:	60bb      	str	r3, [r7, #8]
   return(result);
 8007754:	68bb      	ldr	r3, [r7, #8]
 8007756:	f023 0310 	bic.w	r3, r3, #16
 800775a:	647b      	str	r3, [r7, #68]	; 0x44
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	461a      	mov	r2, r3
 8007762:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007764:	61bb      	str	r3, [r7, #24]
 8007766:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007768:	6979      	ldr	r1, [r7, #20]
 800776a:	69ba      	ldr	r2, [r7, #24]
 800776c:	e841 2300 	strex	r3, r2, [r1]
 8007770:	613b      	str	r3, [r7, #16]
   return(result);
 8007772:	693b      	ldr	r3, [r7, #16]
 8007774:	2b00      	cmp	r3, #0
 8007776:	d1e6      	bne.n	8007746 <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	69db      	ldr	r3, [r3, #28]
 800777e:	f003 0310 	and.w	r3, r3, #16
 8007782:	2b10      	cmp	r3, #16
 8007784:	d103      	bne.n	800778e <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	2210      	movs	r2, #16
 800778c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8007794:	4619      	mov	r1, r3
 8007796:	6878      	ldr	r0, [r7, #4]
 8007798:	f7fe feea 	bl	8006570 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800779c:	e00d      	b.n	80077ba <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 800779e:	6878      	ldr	r0, [r7, #4]
 80077a0:	f7fb fe2c 	bl	80033fc <HAL_UART_RxCpltCallback>
}
 80077a4:	e009      	b.n	80077ba <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	8b1b      	ldrh	r3, [r3, #24]
 80077ac:	b29a      	uxth	r2, r3
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	f042 0208 	orr.w	r2, r2, #8
 80077b6:	b292      	uxth	r2, r2
 80077b8:	831a      	strh	r2, [r3, #24]
}
 80077ba:	bf00      	nop
 80077bc:	3758      	adds	r7, #88	; 0x58
 80077be:	46bd      	mov	sp, r7
 80077c0:	bd80      	pop	{r7, pc}

080077c2 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80077c2:	b480      	push	{r7}
 80077c4:	b083      	sub	sp, #12
 80077c6:	af00      	add	r7, sp, #0
 80077c8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80077ca:	bf00      	nop
 80077cc:	370c      	adds	r7, #12
 80077ce:	46bd      	mov	sp, r7
 80077d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077d4:	4770      	bx	lr
	...

080077d8 <__NVIC_SetPriority>:
{
 80077d8:	b480      	push	{r7}
 80077da:	b083      	sub	sp, #12
 80077dc:	af00      	add	r7, sp, #0
 80077de:	4603      	mov	r3, r0
 80077e0:	6039      	str	r1, [r7, #0]
 80077e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80077e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	db0a      	blt.n	8007802 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80077ec:	683b      	ldr	r3, [r7, #0]
 80077ee:	b2da      	uxtb	r2, r3
 80077f0:	490c      	ldr	r1, [pc, #48]	; (8007824 <__NVIC_SetPriority+0x4c>)
 80077f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80077f6:	0112      	lsls	r2, r2, #4
 80077f8:	b2d2      	uxtb	r2, r2
 80077fa:	440b      	add	r3, r1
 80077fc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8007800:	e00a      	b.n	8007818 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007802:	683b      	ldr	r3, [r7, #0]
 8007804:	b2da      	uxtb	r2, r3
 8007806:	4908      	ldr	r1, [pc, #32]	; (8007828 <__NVIC_SetPriority+0x50>)
 8007808:	79fb      	ldrb	r3, [r7, #7]
 800780a:	f003 030f 	and.w	r3, r3, #15
 800780e:	3b04      	subs	r3, #4
 8007810:	0112      	lsls	r2, r2, #4
 8007812:	b2d2      	uxtb	r2, r2
 8007814:	440b      	add	r3, r1
 8007816:	761a      	strb	r2, [r3, #24]
}
 8007818:	bf00      	nop
 800781a:	370c      	adds	r7, #12
 800781c:	46bd      	mov	sp, r7
 800781e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007822:	4770      	bx	lr
 8007824:	e000e100 	.word	0xe000e100
 8007828:	e000ed00 	.word	0xe000ed00

0800782c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800782c:	b580      	push	{r7, lr}
 800782e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8007830:	4b05      	ldr	r3, [pc, #20]	; (8007848 <SysTick_Handler+0x1c>)
 8007832:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8007834:	f001 ff4c 	bl	80096d0 <xTaskGetSchedulerState>
 8007838:	4603      	mov	r3, r0
 800783a:	2b01      	cmp	r3, #1
 800783c:	d001      	beq.n	8007842 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800783e:	f002 fe7b 	bl	800a538 <xPortSysTickHandler>
  }
}
 8007842:	bf00      	nop
 8007844:	bd80      	pop	{r7, pc}
 8007846:	bf00      	nop
 8007848:	e000e010 	.word	0xe000e010

0800784c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800784c:	b580      	push	{r7, lr}
 800784e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8007850:	2100      	movs	r1, #0
 8007852:	f06f 0004 	mvn.w	r0, #4
 8007856:	f7ff ffbf 	bl	80077d8 <__NVIC_SetPriority>
#endif
}
 800785a:	bf00      	nop
 800785c:	bd80      	pop	{r7, pc}
	...

08007860 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8007860:	b480      	push	{r7}
 8007862:	b083      	sub	sp, #12
 8007864:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007866:	f3ef 8305 	mrs	r3, IPSR
 800786a:	603b      	str	r3, [r7, #0]
  return(result);
 800786c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800786e:	2b00      	cmp	r3, #0
 8007870:	d003      	beq.n	800787a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8007872:	f06f 0305 	mvn.w	r3, #5
 8007876:	607b      	str	r3, [r7, #4]
 8007878:	e00c      	b.n	8007894 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800787a:	4b0a      	ldr	r3, [pc, #40]	; (80078a4 <osKernelInitialize+0x44>)
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	2b00      	cmp	r3, #0
 8007880:	d105      	bne.n	800788e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8007882:	4b08      	ldr	r3, [pc, #32]	; (80078a4 <osKernelInitialize+0x44>)
 8007884:	2201      	movs	r2, #1
 8007886:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8007888:	2300      	movs	r3, #0
 800788a:	607b      	str	r3, [r7, #4]
 800788c:	e002      	b.n	8007894 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800788e:	f04f 33ff 	mov.w	r3, #4294967295
 8007892:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8007894:	687b      	ldr	r3, [r7, #4]
}
 8007896:	4618      	mov	r0, r3
 8007898:	370c      	adds	r7, #12
 800789a:	46bd      	mov	sp, r7
 800789c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078a0:	4770      	bx	lr
 80078a2:	bf00      	nop
 80078a4:	20002350 	.word	0x20002350

080078a8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80078a8:	b580      	push	{r7, lr}
 80078aa:	b082      	sub	sp, #8
 80078ac:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80078ae:	f3ef 8305 	mrs	r3, IPSR
 80078b2:	603b      	str	r3, [r7, #0]
  return(result);
 80078b4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d003      	beq.n	80078c2 <osKernelStart+0x1a>
    stat = osErrorISR;
 80078ba:	f06f 0305 	mvn.w	r3, #5
 80078be:	607b      	str	r3, [r7, #4]
 80078c0:	e010      	b.n	80078e4 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80078c2:	4b0b      	ldr	r3, [pc, #44]	; (80078f0 <osKernelStart+0x48>)
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	2b01      	cmp	r3, #1
 80078c8:	d109      	bne.n	80078de <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80078ca:	f7ff ffbf 	bl	800784c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80078ce:	4b08      	ldr	r3, [pc, #32]	; (80078f0 <osKernelStart+0x48>)
 80078d0:	2202      	movs	r2, #2
 80078d2:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80078d4:	f001 faa0 	bl	8008e18 <vTaskStartScheduler>
      stat = osOK;
 80078d8:	2300      	movs	r3, #0
 80078da:	607b      	str	r3, [r7, #4]
 80078dc:	e002      	b.n	80078e4 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80078de:	f04f 33ff 	mov.w	r3, #4294967295
 80078e2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80078e4:	687b      	ldr	r3, [r7, #4]
}
 80078e6:	4618      	mov	r0, r3
 80078e8:	3708      	adds	r7, #8
 80078ea:	46bd      	mov	sp, r7
 80078ec:	bd80      	pop	{r7, pc}
 80078ee:	bf00      	nop
 80078f0:	20002350 	.word	0x20002350

080078f4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80078f4:	b580      	push	{r7, lr}
 80078f6:	b08e      	sub	sp, #56	; 0x38
 80078f8:	af04      	add	r7, sp, #16
 80078fa:	60f8      	str	r0, [r7, #12]
 80078fc:	60b9      	str	r1, [r7, #8]
 80078fe:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8007900:	2300      	movs	r3, #0
 8007902:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007904:	f3ef 8305 	mrs	r3, IPSR
 8007908:	617b      	str	r3, [r7, #20]
  return(result);
 800790a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800790c:	2b00      	cmp	r3, #0
 800790e:	d17f      	bne.n	8007a10 <osThreadNew+0x11c>
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	2b00      	cmp	r3, #0
 8007914:	d07c      	beq.n	8007a10 <osThreadNew+0x11c>
    stack = configMINIMAL_STACK_SIZE;
 8007916:	f44f 7380 	mov.w	r3, #256	; 0x100
 800791a:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800791c:	2318      	movs	r3, #24
 800791e:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8007920:	2300      	movs	r3, #0
 8007922:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8007924:	f04f 33ff 	mov.w	r3, #4294967295
 8007928:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	2b00      	cmp	r3, #0
 800792e:	d045      	beq.n	80079bc <osThreadNew+0xc8>
      if (attr->name != NULL) {
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	2b00      	cmp	r3, #0
 8007936:	d002      	beq.n	800793e <osThreadNew+0x4a>
        name = attr->name;
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	699b      	ldr	r3, [r3, #24]
 8007942:	2b00      	cmp	r3, #0
 8007944:	d002      	beq.n	800794c <osThreadNew+0x58>
        prio = (UBaseType_t)attr->priority;
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	699b      	ldr	r3, [r3, #24]
 800794a:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800794c:	69fb      	ldr	r3, [r7, #28]
 800794e:	2b00      	cmp	r3, #0
 8007950:	d008      	beq.n	8007964 <osThreadNew+0x70>
 8007952:	69fb      	ldr	r3, [r7, #28]
 8007954:	2b38      	cmp	r3, #56	; 0x38
 8007956:	d805      	bhi.n	8007964 <osThreadNew+0x70>
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	685b      	ldr	r3, [r3, #4]
 800795c:	f003 0301 	and.w	r3, r3, #1
 8007960:	2b00      	cmp	r3, #0
 8007962:	d001      	beq.n	8007968 <osThreadNew+0x74>
        return (NULL);
 8007964:	2300      	movs	r3, #0
 8007966:	e054      	b.n	8007a12 <osThreadNew+0x11e>
      }

      if (attr->stack_size > 0U) {
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	695b      	ldr	r3, [r3, #20]
 800796c:	2b00      	cmp	r3, #0
 800796e:	d003      	beq.n	8007978 <osThreadNew+0x84>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	695b      	ldr	r3, [r3, #20]
 8007974:	089b      	lsrs	r3, r3, #2
 8007976:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	689b      	ldr	r3, [r3, #8]
 800797c:	2b00      	cmp	r3, #0
 800797e:	d00e      	beq.n	800799e <osThreadNew+0xaa>
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	68db      	ldr	r3, [r3, #12]
 8007984:	2bbb      	cmp	r3, #187	; 0xbb
 8007986:	d90a      	bls.n	800799e <osThreadNew+0xaa>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800798c:	2b00      	cmp	r3, #0
 800798e:	d006      	beq.n	800799e <osThreadNew+0xaa>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	695b      	ldr	r3, [r3, #20]
 8007994:	2b00      	cmp	r3, #0
 8007996:	d002      	beq.n	800799e <osThreadNew+0xaa>
        mem = 1;
 8007998:	2301      	movs	r3, #1
 800799a:	61bb      	str	r3, [r7, #24]
 800799c:	e010      	b.n	80079c0 <osThreadNew+0xcc>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	689b      	ldr	r3, [r3, #8]
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	d10c      	bne.n	80079c0 <osThreadNew+0xcc>
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	68db      	ldr	r3, [r3, #12]
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	d108      	bne.n	80079c0 <osThreadNew+0xcc>
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	691b      	ldr	r3, [r3, #16]
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d104      	bne.n	80079c0 <osThreadNew+0xcc>
          mem = 0;
 80079b6:	2300      	movs	r3, #0
 80079b8:	61bb      	str	r3, [r7, #24]
 80079ba:	e001      	b.n	80079c0 <osThreadNew+0xcc>
        }
      }
    }
    else {
      mem = 0;
 80079bc:	2300      	movs	r3, #0
 80079be:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80079c0:	69bb      	ldr	r3, [r7, #24]
 80079c2:	2b01      	cmp	r3, #1
 80079c4:	d110      	bne.n	80079e8 <osThreadNew+0xf4>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80079ca:	687a      	ldr	r2, [r7, #4]
 80079cc:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80079ce:	9202      	str	r2, [sp, #8]
 80079d0:	9301      	str	r3, [sp, #4]
 80079d2:	69fb      	ldr	r3, [r7, #28]
 80079d4:	9300      	str	r3, [sp, #0]
 80079d6:	68bb      	ldr	r3, [r7, #8]
 80079d8:	6a3a      	ldr	r2, [r7, #32]
 80079da:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80079dc:	68f8      	ldr	r0, [r7, #12]
 80079de:	f000 ffbd 	bl	800895c <xTaskCreateStatic>
 80079e2:	4603      	mov	r3, r0
 80079e4:	613b      	str	r3, [r7, #16]
 80079e6:	e013      	b.n	8007a10 <osThreadNew+0x11c>
      #endif
    }
    else {
      if (mem == 0) {
 80079e8:	69bb      	ldr	r3, [r7, #24]
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d110      	bne.n	8007a10 <osThreadNew+0x11c>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80079ee:	6a3b      	ldr	r3, [r7, #32]
 80079f0:	b29a      	uxth	r2, r3
 80079f2:	f107 0310 	add.w	r3, r7, #16
 80079f6:	9301      	str	r3, [sp, #4]
 80079f8:	69fb      	ldr	r3, [r7, #28]
 80079fa:	9300      	str	r3, [sp, #0]
 80079fc:	68bb      	ldr	r3, [r7, #8]
 80079fe:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007a00:	68f8      	ldr	r0, [r7, #12]
 8007a02:	f001 f808 	bl	8008a16 <xTaskCreate>
 8007a06:	4603      	mov	r3, r0
 8007a08:	2b01      	cmp	r3, #1
 8007a0a:	d001      	beq.n	8007a10 <osThreadNew+0x11c>
            hTask = NULL;
 8007a0c:	2300      	movs	r3, #0
 8007a0e:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8007a10:	693b      	ldr	r3, [r7, #16]
}
 8007a12:	4618      	mov	r0, r3
 8007a14:	3728      	adds	r7, #40	; 0x28
 8007a16:	46bd      	mov	sp, r7
 8007a18:	bd80      	pop	{r7, pc}
	...

08007a1c <osThreadYield>:
  }

  return (prio);
}

osStatus_t osThreadYield (void) {
 8007a1c:	b480      	push	{r7}
 8007a1e:	b083      	sub	sp, #12
 8007a20:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007a22:	f3ef 8305 	mrs	r3, IPSR
 8007a26:	603b      	str	r3, [r7, #0]
  return(result);
 8007a28:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d003      	beq.n	8007a36 <osThreadYield+0x1a>
    stat = osErrorISR;
 8007a2e:	f06f 0305 	mvn.w	r3, #5
 8007a32:	607b      	str	r3, [r7, #4]
 8007a34:	e009      	b.n	8007a4a <osThreadYield+0x2e>
  } else {
    stat = osOK;
 8007a36:	2300      	movs	r3, #0
 8007a38:	607b      	str	r3, [r7, #4]
    taskYIELD();
 8007a3a:	4b07      	ldr	r3, [pc, #28]	; (8007a58 <osThreadYield+0x3c>)
 8007a3c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007a40:	601a      	str	r2, [r3, #0]
 8007a42:	f3bf 8f4f 	dsb	sy
 8007a46:	f3bf 8f6f 	isb	sy
  }

  return (stat);
 8007a4a:	687b      	ldr	r3, [r7, #4]
}
 8007a4c:	4618      	mov	r0, r3
 8007a4e:	370c      	adds	r7, #12
 8007a50:	46bd      	mov	sp, r7
 8007a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a56:	4770      	bx	lr
 8007a58:	e000ed04 	.word	0xe000ed04

08007a5c <osThreadExit>:

  return (stat);
}
#endif /* (configUSE_OS2_THREAD_SUSPEND_RESUME == 1) */

__NO_RETURN void osThreadExit (void) {
 8007a5c:	b580      	push	{r7, lr}
 8007a5e:	af00      	add	r7, sp, #0
#ifndef USE_FreeRTOS_HEAP_1
  vTaskDelete (NULL);
 8007a60:	2000      	movs	r0, #0
 8007a62:	f001 f933 	bl	8008ccc <vTaskDelete>
#endif
  for (;;);
 8007a66:	e7fe      	b.n	8007a66 <osThreadExit+0xa>

08007a68 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8007a68:	b580      	push	{r7, lr}
 8007a6a:	b084      	sub	sp, #16
 8007a6c:	af00      	add	r7, sp, #0
 8007a6e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007a70:	f3ef 8305 	mrs	r3, IPSR
 8007a74:	60bb      	str	r3, [r7, #8]
  return(result);
 8007a76:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d003      	beq.n	8007a84 <osDelay+0x1c>
    stat = osErrorISR;
 8007a7c:	f06f 0305 	mvn.w	r3, #5
 8007a80:	60fb      	str	r3, [r7, #12]
 8007a82:	e007      	b.n	8007a94 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8007a84:	2300      	movs	r3, #0
 8007a86:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d002      	beq.n	8007a94 <osDelay+0x2c>
      vTaskDelay(ticks);
 8007a8e:	6878      	ldr	r0, [r7, #4]
 8007a90:	f001 f98e 	bl	8008db0 <vTaskDelay>
    }
  }

  return (stat);
 8007a94:	68fb      	ldr	r3, [r7, #12]
}
 8007a96:	4618      	mov	r0, r3
 8007a98:	3710      	adds	r7, #16
 8007a9a:	46bd      	mov	sp, r7
 8007a9c:	bd80      	pop	{r7, pc}

08007a9e <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8007a9e:	b580      	push	{r7, lr}
 8007aa0:	b08a      	sub	sp, #40	; 0x28
 8007aa2:	af02      	add	r7, sp, #8
 8007aa4:	60f8      	str	r0, [r7, #12]
 8007aa6:	60b9      	str	r1, [r7, #8]
 8007aa8:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8007aaa:	2300      	movs	r3, #0
 8007aac:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007aae:	f3ef 8305 	mrs	r3, IPSR
 8007ab2:	613b      	str	r3, [r7, #16]
  return(result);
 8007ab4:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d15f      	bne.n	8007b7a <osMessageQueueNew+0xdc>
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d05c      	beq.n	8007b7a <osMessageQueueNew+0xdc>
 8007ac0:	68bb      	ldr	r3, [r7, #8]
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d059      	beq.n	8007b7a <osMessageQueueNew+0xdc>
    mem = -1;
 8007ac6:	f04f 33ff 	mov.w	r3, #4294967295
 8007aca:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d029      	beq.n	8007b26 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	689b      	ldr	r3, [r3, #8]
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d012      	beq.n	8007b00 <osMessageQueueNew+0x62>
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	68db      	ldr	r3, [r3, #12]
 8007ade:	2b4f      	cmp	r3, #79	; 0x4f
 8007ae0:	d90e      	bls.n	8007b00 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	d00a      	beq.n	8007b00 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	695a      	ldr	r2, [r3, #20]
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	68b9      	ldr	r1, [r7, #8]
 8007af2:	fb01 f303 	mul.w	r3, r1, r3
 8007af6:	429a      	cmp	r2, r3
 8007af8:	d302      	bcc.n	8007b00 <osMessageQueueNew+0x62>
        mem = 1;
 8007afa:	2301      	movs	r3, #1
 8007afc:	61bb      	str	r3, [r7, #24]
 8007afe:	e014      	b.n	8007b2a <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	689b      	ldr	r3, [r3, #8]
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d110      	bne.n	8007b2a <osMessageQueueNew+0x8c>
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	68db      	ldr	r3, [r3, #12]
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d10c      	bne.n	8007b2a <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d108      	bne.n	8007b2a <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	695b      	ldr	r3, [r3, #20]
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d104      	bne.n	8007b2a <osMessageQueueNew+0x8c>
          mem = 0;
 8007b20:	2300      	movs	r3, #0
 8007b22:	61bb      	str	r3, [r7, #24]
 8007b24:	e001      	b.n	8007b2a <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8007b26:	2300      	movs	r3, #0
 8007b28:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8007b2a:	69bb      	ldr	r3, [r7, #24]
 8007b2c:	2b01      	cmp	r3, #1
 8007b2e:	d10b      	bne.n	8007b48 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	691a      	ldr	r2, [r3, #16]
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	689b      	ldr	r3, [r3, #8]
 8007b38:	2100      	movs	r1, #0
 8007b3a:	9100      	str	r1, [sp, #0]
 8007b3c:	68b9      	ldr	r1, [r7, #8]
 8007b3e:	68f8      	ldr	r0, [r7, #12]
 8007b40:	f000 f9ce 	bl	8007ee0 <xQueueGenericCreateStatic>
 8007b44:	61f8      	str	r0, [r7, #28]
 8007b46:	e008      	b.n	8007b5a <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8007b48:	69bb      	ldr	r3, [r7, #24]
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d105      	bne.n	8007b5a <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8007b4e:	2200      	movs	r2, #0
 8007b50:	68b9      	ldr	r1, [r7, #8]
 8007b52:	68f8      	ldr	r0, [r7, #12]
 8007b54:	f000 fa3c 	bl	8007fd0 <xQueueGenericCreate>
 8007b58:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8007b5a:	69fb      	ldr	r3, [r7, #28]
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d00c      	beq.n	8007b7a <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	d003      	beq.n	8007b6e <osMessageQueueNew+0xd0>
        name = attr->name;
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	617b      	str	r3, [r7, #20]
 8007b6c:	e001      	b.n	8007b72 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8007b6e:	2300      	movs	r3, #0
 8007b70:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8007b72:	6979      	ldr	r1, [r7, #20]
 8007b74:	69f8      	ldr	r0, [r7, #28]
 8007b76:	f000 fe93 	bl	80088a0 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8007b7a:	69fb      	ldr	r3, [r7, #28]
}
 8007b7c:	4618      	mov	r0, r3
 8007b7e:	3720      	adds	r7, #32
 8007b80:	46bd      	mov	sp, r7
 8007b82:	bd80      	pop	{r7, pc}

08007b84 <osMessageQueueGet>:
  }

  return (stat);
}

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8007b84:	b580      	push	{r7, lr}
 8007b86:	b088      	sub	sp, #32
 8007b88:	af00      	add	r7, sp, #0
 8007b8a:	60f8      	str	r0, [r7, #12]
 8007b8c:	60b9      	str	r1, [r7, #8]
 8007b8e:	607a      	str	r2, [r7, #4]
 8007b90:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8007b96:	2300      	movs	r3, #0
 8007b98:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007b9a:	f3ef 8305 	mrs	r3, IPSR
 8007b9e:	617b      	str	r3, [r7, #20]
  return(result);
 8007ba0:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d028      	beq.n	8007bf8 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8007ba6:	69bb      	ldr	r3, [r7, #24]
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	d005      	beq.n	8007bb8 <osMessageQueueGet+0x34>
 8007bac:	68bb      	ldr	r3, [r7, #8]
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	d002      	beq.n	8007bb8 <osMessageQueueGet+0x34>
 8007bb2:	683b      	ldr	r3, [r7, #0]
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	d003      	beq.n	8007bc0 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8007bb8:	f06f 0303 	mvn.w	r3, #3
 8007bbc:	61fb      	str	r3, [r7, #28]
 8007bbe:	e037      	b.n	8007c30 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8007bc0:	2300      	movs	r3, #0
 8007bc2:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8007bc4:	f107 0310 	add.w	r3, r7, #16
 8007bc8:	461a      	mov	r2, r3
 8007bca:	68b9      	ldr	r1, [r7, #8]
 8007bcc:	69b8      	ldr	r0, [r7, #24]
 8007bce:	f000 fcd7 	bl	8008580 <xQueueReceiveFromISR>
 8007bd2:	4603      	mov	r3, r0
 8007bd4:	2b01      	cmp	r3, #1
 8007bd6:	d003      	beq.n	8007be0 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8007bd8:	f06f 0302 	mvn.w	r3, #2
 8007bdc:	61fb      	str	r3, [r7, #28]
 8007bde:	e027      	b.n	8007c30 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8007be0:	693b      	ldr	r3, [r7, #16]
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d024      	beq.n	8007c30 <osMessageQueueGet+0xac>
 8007be6:	4b15      	ldr	r3, [pc, #84]	; (8007c3c <osMessageQueueGet+0xb8>)
 8007be8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007bec:	601a      	str	r2, [r3, #0]
 8007bee:	f3bf 8f4f 	dsb	sy
 8007bf2:	f3bf 8f6f 	isb	sy
 8007bf6:	e01b      	b.n	8007c30 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8007bf8:	69bb      	ldr	r3, [r7, #24]
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	d002      	beq.n	8007c04 <osMessageQueueGet+0x80>
 8007bfe:	68bb      	ldr	r3, [r7, #8]
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	d103      	bne.n	8007c0c <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8007c04:	f06f 0303 	mvn.w	r3, #3
 8007c08:	61fb      	str	r3, [r7, #28]
 8007c0a:	e011      	b.n	8007c30 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8007c0c:	683a      	ldr	r2, [r7, #0]
 8007c0e:	68b9      	ldr	r1, [r7, #8]
 8007c10:	69b8      	ldr	r0, [r7, #24]
 8007c12:	f000 fbd5 	bl	80083c0 <xQueueReceive>
 8007c16:	4603      	mov	r3, r0
 8007c18:	2b01      	cmp	r3, #1
 8007c1a:	d009      	beq.n	8007c30 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8007c1c:	683b      	ldr	r3, [r7, #0]
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d003      	beq.n	8007c2a <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 8007c22:	f06f 0301 	mvn.w	r3, #1
 8007c26:	61fb      	str	r3, [r7, #28]
 8007c28:	e002      	b.n	8007c30 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 8007c2a:	f06f 0302 	mvn.w	r3, #2
 8007c2e:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8007c30:	69fb      	ldr	r3, [r7, #28]
}
 8007c32:	4618      	mov	r0, r3
 8007c34:	3720      	adds	r7, #32
 8007c36:	46bd      	mov	sp, r7
 8007c38:	bd80      	pop	{r7, pc}
 8007c3a:	bf00      	nop
 8007c3c:	e000ed04 	.word	0xe000ed04

08007c40 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8007c40:	b480      	push	{r7}
 8007c42:	b085      	sub	sp, #20
 8007c44:	af00      	add	r7, sp, #0
 8007c46:	60f8      	str	r0, [r7, #12]
 8007c48:	60b9      	str	r1, [r7, #8]
 8007c4a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	4a07      	ldr	r2, [pc, #28]	; (8007c6c <vApplicationGetIdleTaskMemory+0x2c>)
 8007c50:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8007c52:	68bb      	ldr	r3, [r7, #8]
 8007c54:	4a06      	ldr	r2, [pc, #24]	; (8007c70 <vApplicationGetIdleTaskMemory+0x30>)
 8007c56:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007c5e:	601a      	str	r2, [r3, #0]
}
 8007c60:	bf00      	nop
 8007c62:	3714      	adds	r7, #20
 8007c64:	46bd      	mov	sp, r7
 8007c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c6a:	4770      	bx	lr
 8007c6c:	20002354 	.word	0x20002354
 8007c70:	20002410 	.word	0x20002410

08007c74 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8007c74:	b480      	push	{r7}
 8007c76:	b085      	sub	sp, #20
 8007c78:	af00      	add	r7, sp, #0
 8007c7a:	60f8      	str	r0, [r7, #12]
 8007c7c:	60b9      	str	r1, [r7, #8]
 8007c7e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	4a07      	ldr	r2, [pc, #28]	; (8007ca0 <vApplicationGetTimerTaskMemory+0x2c>)
 8007c84:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8007c86:	68bb      	ldr	r3, [r7, #8]
 8007c88:	4a06      	ldr	r2, [pc, #24]	; (8007ca4 <vApplicationGetTimerTaskMemory+0x30>)
 8007c8a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007c92:	601a      	str	r2, [r3, #0]
}
 8007c94:	bf00      	nop
 8007c96:	3714      	adds	r7, #20
 8007c98:	46bd      	mov	sp, r7
 8007c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c9e:	4770      	bx	lr
 8007ca0:	20002810 	.word	0x20002810
 8007ca4:	200028cc 	.word	0x200028cc

08007ca8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007ca8:	b480      	push	{r7}
 8007caa:	b083      	sub	sp, #12
 8007cac:	af00      	add	r7, sp, #0
 8007cae:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	f103 0208 	add.w	r2, r3, #8
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	f04f 32ff 	mov.w	r2, #4294967295
 8007cc0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	f103 0208 	add.w	r2, r3, #8
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	f103 0208 	add.w	r2, r3, #8
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	2200      	movs	r2, #0
 8007cda:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007cdc:	bf00      	nop
 8007cde:	370c      	adds	r7, #12
 8007ce0:	46bd      	mov	sp, r7
 8007ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ce6:	4770      	bx	lr

08007ce8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007ce8:	b480      	push	{r7}
 8007cea:	b083      	sub	sp, #12
 8007cec:	af00      	add	r7, sp, #0
 8007cee:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	2200      	movs	r2, #0
 8007cf4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007cf6:	bf00      	nop
 8007cf8:	370c      	adds	r7, #12
 8007cfa:	46bd      	mov	sp, r7
 8007cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d00:	4770      	bx	lr

08007d02 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007d02:	b480      	push	{r7}
 8007d04:	b085      	sub	sp, #20
 8007d06:	af00      	add	r7, sp, #0
 8007d08:	6078      	str	r0, [r7, #4]
 8007d0a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	685b      	ldr	r3, [r3, #4]
 8007d10:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007d12:	683b      	ldr	r3, [r7, #0]
 8007d14:	68fa      	ldr	r2, [r7, #12]
 8007d16:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	689a      	ldr	r2, [r3, #8]
 8007d1c:	683b      	ldr	r3, [r7, #0]
 8007d1e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	689b      	ldr	r3, [r3, #8]
 8007d24:	683a      	ldr	r2, [r7, #0]
 8007d26:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	683a      	ldr	r2, [r7, #0]
 8007d2c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8007d2e:	683b      	ldr	r3, [r7, #0]
 8007d30:	687a      	ldr	r2, [r7, #4]
 8007d32:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	1c5a      	adds	r2, r3, #1
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	601a      	str	r2, [r3, #0]
}
 8007d3e:	bf00      	nop
 8007d40:	3714      	adds	r7, #20
 8007d42:	46bd      	mov	sp, r7
 8007d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d48:	4770      	bx	lr

08007d4a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007d4a:	b480      	push	{r7}
 8007d4c:	b085      	sub	sp, #20
 8007d4e:	af00      	add	r7, sp, #0
 8007d50:	6078      	str	r0, [r7, #4]
 8007d52:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007d54:	683b      	ldr	r3, [r7, #0]
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007d5a:	68bb      	ldr	r3, [r7, #8]
 8007d5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d60:	d103      	bne.n	8007d6a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	691b      	ldr	r3, [r3, #16]
 8007d66:	60fb      	str	r3, [r7, #12]
 8007d68:	e00c      	b.n	8007d84 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	3308      	adds	r3, #8
 8007d6e:	60fb      	str	r3, [r7, #12]
 8007d70:	e002      	b.n	8007d78 <vListInsert+0x2e>
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	685b      	ldr	r3, [r3, #4]
 8007d76:	60fb      	str	r3, [r7, #12]
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	685b      	ldr	r3, [r3, #4]
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	68ba      	ldr	r2, [r7, #8]
 8007d80:	429a      	cmp	r2, r3
 8007d82:	d2f6      	bcs.n	8007d72 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	685a      	ldr	r2, [r3, #4]
 8007d88:	683b      	ldr	r3, [r7, #0]
 8007d8a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007d8c:	683b      	ldr	r3, [r7, #0]
 8007d8e:	685b      	ldr	r3, [r3, #4]
 8007d90:	683a      	ldr	r2, [r7, #0]
 8007d92:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007d94:	683b      	ldr	r3, [r7, #0]
 8007d96:	68fa      	ldr	r2, [r7, #12]
 8007d98:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	683a      	ldr	r2, [r7, #0]
 8007d9e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8007da0:	683b      	ldr	r3, [r7, #0]
 8007da2:	687a      	ldr	r2, [r7, #4]
 8007da4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	1c5a      	adds	r2, r3, #1
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	601a      	str	r2, [r3, #0]
}
 8007db0:	bf00      	nop
 8007db2:	3714      	adds	r7, #20
 8007db4:	46bd      	mov	sp, r7
 8007db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dba:	4770      	bx	lr

08007dbc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007dbc:	b480      	push	{r7}
 8007dbe:	b085      	sub	sp, #20
 8007dc0:	af00      	add	r7, sp, #0
 8007dc2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	691b      	ldr	r3, [r3, #16]
 8007dc8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	685b      	ldr	r3, [r3, #4]
 8007dce:	687a      	ldr	r2, [r7, #4]
 8007dd0:	6892      	ldr	r2, [r2, #8]
 8007dd2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	689b      	ldr	r3, [r3, #8]
 8007dd8:	687a      	ldr	r2, [r7, #4]
 8007dda:	6852      	ldr	r2, [r2, #4]
 8007ddc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	685b      	ldr	r3, [r3, #4]
 8007de2:	687a      	ldr	r2, [r7, #4]
 8007de4:	429a      	cmp	r2, r3
 8007de6:	d103      	bne.n	8007df0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	689a      	ldr	r2, [r3, #8]
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	2200      	movs	r2, #0
 8007df4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	1e5a      	subs	r2, r3, #1
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	681b      	ldr	r3, [r3, #0]
}
 8007e04:	4618      	mov	r0, r3
 8007e06:	3714      	adds	r7, #20
 8007e08:	46bd      	mov	sp, r7
 8007e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e0e:	4770      	bx	lr

08007e10 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8007e10:	b580      	push	{r7, lr}
 8007e12:	b084      	sub	sp, #16
 8007e14:	af00      	add	r7, sp, #0
 8007e16:	6078      	str	r0, [r7, #4]
 8007e18:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	d10a      	bne.n	8007e3a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007e24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e28:	f383 8811 	msr	BASEPRI, r3
 8007e2c:	f3bf 8f6f 	isb	sy
 8007e30:	f3bf 8f4f 	dsb	sy
 8007e34:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8007e36:	bf00      	nop
 8007e38:	e7fe      	b.n	8007e38 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8007e3a:	f002 faeb 	bl	800a414 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	681a      	ldr	r2, [r3, #0]
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007e46:	68f9      	ldr	r1, [r7, #12]
 8007e48:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007e4a:	fb01 f303 	mul.w	r3, r1, r3
 8007e4e:	441a      	add	r2, r3
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	2200      	movs	r2, #0
 8007e58:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	681a      	ldr	r2, [r3, #0]
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	681a      	ldr	r2, [r3, #0]
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007e6a:	3b01      	subs	r3, #1
 8007e6c:	68f9      	ldr	r1, [r7, #12]
 8007e6e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007e70:	fb01 f303 	mul.w	r3, r1, r3
 8007e74:	441a      	add	r2, r3
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	22ff      	movs	r2, #255	; 0xff
 8007e7e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	22ff      	movs	r2, #255	; 0xff
 8007e86:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8007e8a:	683b      	ldr	r3, [r7, #0]
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	d114      	bne.n	8007eba <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	691b      	ldr	r3, [r3, #16]
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	d01a      	beq.n	8007ece <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	3310      	adds	r3, #16
 8007e9c:	4618      	mov	r0, r3
 8007e9e:	f001 fa55 	bl	800934c <xTaskRemoveFromEventList>
 8007ea2:	4603      	mov	r3, r0
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	d012      	beq.n	8007ece <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8007ea8:	4b0c      	ldr	r3, [pc, #48]	; (8007edc <xQueueGenericReset+0xcc>)
 8007eaa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007eae:	601a      	str	r2, [r3, #0]
 8007eb0:	f3bf 8f4f 	dsb	sy
 8007eb4:	f3bf 8f6f 	isb	sy
 8007eb8:	e009      	b.n	8007ece <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	3310      	adds	r3, #16
 8007ebe:	4618      	mov	r0, r3
 8007ec0:	f7ff fef2 	bl	8007ca8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	3324      	adds	r3, #36	; 0x24
 8007ec8:	4618      	mov	r0, r3
 8007eca:	f7ff feed 	bl	8007ca8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8007ece:	f002 fad1 	bl	800a474 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8007ed2:	2301      	movs	r3, #1
}
 8007ed4:	4618      	mov	r0, r3
 8007ed6:	3710      	adds	r7, #16
 8007ed8:	46bd      	mov	sp, r7
 8007eda:	bd80      	pop	{r7, pc}
 8007edc:	e000ed04 	.word	0xe000ed04

08007ee0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8007ee0:	b580      	push	{r7, lr}
 8007ee2:	b08e      	sub	sp, #56	; 0x38
 8007ee4:	af02      	add	r7, sp, #8
 8007ee6:	60f8      	str	r0, [r7, #12]
 8007ee8:	60b9      	str	r1, [r7, #8]
 8007eea:	607a      	str	r2, [r7, #4]
 8007eec:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	d10a      	bne.n	8007f0a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8007ef4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ef8:	f383 8811 	msr	BASEPRI, r3
 8007efc:	f3bf 8f6f 	isb	sy
 8007f00:	f3bf 8f4f 	dsb	sy
 8007f04:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007f06:	bf00      	nop
 8007f08:	e7fe      	b.n	8007f08 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8007f0a:	683b      	ldr	r3, [r7, #0]
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d10a      	bne.n	8007f26 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8007f10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f14:	f383 8811 	msr	BASEPRI, r3
 8007f18:	f3bf 8f6f 	isb	sy
 8007f1c:	f3bf 8f4f 	dsb	sy
 8007f20:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007f22:	bf00      	nop
 8007f24:	e7fe      	b.n	8007f24 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	d002      	beq.n	8007f32 <xQueueGenericCreateStatic+0x52>
 8007f2c:	68bb      	ldr	r3, [r7, #8]
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	d001      	beq.n	8007f36 <xQueueGenericCreateStatic+0x56>
 8007f32:	2301      	movs	r3, #1
 8007f34:	e000      	b.n	8007f38 <xQueueGenericCreateStatic+0x58>
 8007f36:	2300      	movs	r3, #0
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	d10a      	bne.n	8007f52 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8007f3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f40:	f383 8811 	msr	BASEPRI, r3
 8007f44:	f3bf 8f6f 	isb	sy
 8007f48:	f3bf 8f4f 	dsb	sy
 8007f4c:	623b      	str	r3, [r7, #32]
}
 8007f4e:	bf00      	nop
 8007f50:	e7fe      	b.n	8007f50 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	d102      	bne.n	8007f5e <xQueueGenericCreateStatic+0x7e>
 8007f58:	68bb      	ldr	r3, [r7, #8]
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d101      	bne.n	8007f62 <xQueueGenericCreateStatic+0x82>
 8007f5e:	2301      	movs	r3, #1
 8007f60:	e000      	b.n	8007f64 <xQueueGenericCreateStatic+0x84>
 8007f62:	2300      	movs	r3, #0
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	d10a      	bne.n	8007f7e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8007f68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f6c:	f383 8811 	msr	BASEPRI, r3
 8007f70:	f3bf 8f6f 	isb	sy
 8007f74:	f3bf 8f4f 	dsb	sy
 8007f78:	61fb      	str	r3, [r7, #28]
}
 8007f7a:	bf00      	nop
 8007f7c:	e7fe      	b.n	8007f7c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8007f7e:	2350      	movs	r3, #80	; 0x50
 8007f80:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8007f82:	697b      	ldr	r3, [r7, #20]
 8007f84:	2b50      	cmp	r3, #80	; 0x50
 8007f86:	d00a      	beq.n	8007f9e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8007f88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f8c:	f383 8811 	msr	BASEPRI, r3
 8007f90:	f3bf 8f6f 	isb	sy
 8007f94:	f3bf 8f4f 	dsb	sy
 8007f98:	61bb      	str	r3, [r7, #24]
}
 8007f9a:	bf00      	nop
 8007f9c:	e7fe      	b.n	8007f9c <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8007f9e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007fa0:	683b      	ldr	r3, [r7, #0]
 8007fa2:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8007fa4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	d00d      	beq.n	8007fc6 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8007faa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007fac:	2201      	movs	r2, #1
 8007fae:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007fb2:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8007fb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007fb8:	9300      	str	r3, [sp, #0]
 8007fba:	4613      	mov	r3, r2
 8007fbc:	687a      	ldr	r2, [r7, #4]
 8007fbe:	68b9      	ldr	r1, [r7, #8]
 8007fc0:	68f8      	ldr	r0, [r7, #12]
 8007fc2:	f000 f83f 	bl	8008044 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007fc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8007fc8:	4618      	mov	r0, r3
 8007fca:	3730      	adds	r7, #48	; 0x30
 8007fcc:	46bd      	mov	sp, r7
 8007fce:	bd80      	pop	{r7, pc}

08007fd0 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8007fd0:	b580      	push	{r7, lr}
 8007fd2:	b08a      	sub	sp, #40	; 0x28
 8007fd4:	af02      	add	r7, sp, #8
 8007fd6:	60f8      	str	r0, [r7, #12]
 8007fd8:	60b9      	str	r1, [r7, #8]
 8007fda:	4613      	mov	r3, r2
 8007fdc:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	d10a      	bne.n	8007ffa <xQueueGenericCreate+0x2a>
	__asm volatile
 8007fe4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fe8:	f383 8811 	msr	BASEPRI, r3
 8007fec:	f3bf 8f6f 	isb	sy
 8007ff0:	f3bf 8f4f 	dsb	sy
 8007ff4:	613b      	str	r3, [r7, #16]
}
 8007ff6:	bf00      	nop
 8007ff8:	e7fe      	b.n	8007ff8 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	68ba      	ldr	r2, [r7, #8]
 8007ffe:	fb02 f303 	mul.w	r3, r2, r3
 8008002:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8008004:	69fb      	ldr	r3, [r7, #28]
 8008006:	3350      	adds	r3, #80	; 0x50
 8008008:	4618      	mov	r0, r3
 800800a:	f002 fb25 	bl	800a658 <pvPortMalloc>
 800800e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8008010:	69bb      	ldr	r3, [r7, #24]
 8008012:	2b00      	cmp	r3, #0
 8008014:	d011      	beq.n	800803a <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8008016:	69bb      	ldr	r3, [r7, #24]
 8008018:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800801a:	697b      	ldr	r3, [r7, #20]
 800801c:	3350      	adds	r3, #80	; 0x50
 800801e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8008020:	69bb      	ldr	r3, [r7, #24]
 8008022:	2200      	movs	r2, #0
 8008024:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008028:	79fa      	ldrb	r2, [r7, #7]
 800802a:	69bb      	ldr	r3, [r7, #24]
 800802c:	9300      	str	r3, [sp, #0]
 800802e:	4613      	mov	r3, r2
 8008030:	697a      	ldr	r2, [r7, #20]
 8008032:	68b9      	ldr	r1, [r7, #8]
 8008034:	68f8      	ldr	r0, [r7, #12]
 8008036:	f000 f805 	bl	8008044 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800803a:	69bb      	ldr	r3, [r7, #24]
	}
 800803c:	4618      	mov	r0, r3
 800803e:	3720      	adds	r7, #32
 8008040:	46bd      	mov	sp, r7
 8008042:	bd80      	pop	{r7, pc}

08008044 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8008044:	b580      	push	{r7, lr}
 8008046:	b084      	sub	sp, #16
 8008048:	af00      	add	r7, sp, #0
 800804a:	60f8      	str	r0, [r7, #12]
 800804c:	60b9      	str	r1, [r7, #8]
 800804e:	607a      	str	r2, [r7, #4]
 8008050:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8008052:	68bb      	ldr	r3, [r7, #8]
 8008054:	2b00      	cmp	r3, #0
 8008056:	d103      	bne.n	8008060 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8008058:	69bb      	ldr	r3, [r7, #24]
 800805a:	69ba      	ldr	r2, [r7, #24]
 800805c:	601a      	str	r2, [r3, #0]
 800805e:	e002      	b.n	8008066 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8008060:	69bb      	ldr	r3, [r7, #24]
 8008062:	687a      	ldr	r2, [r7, #4]
 8008064:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8008066:	69bb      	ldr	r3, [r7, #24]
 8008068:	68fa      	ldr	r2, [r7, #12]
 800806a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800806c:	69bb      	ldr	r3, [r7, #24]
 800806e:	68ba      	ldr	r2, [r7, #8]
 8008070:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8008072:	2101      	movs	r1, #1
 8008074:	69b8      	ldr	r0, [r7, #24]
 8008076:	f7ff fecb 	bl	8007e10 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800807a:	69bb      	ldr	r3, [r7, #24]
 800807c:	78fa      	ldrb	r2, [r7, #3]
 800807e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8008082:	bf00      	nop
 8008084:	3710      	adds	r7, #16
 8008086:	46bd      	mov	sp, r7
 8008088:	bd80      	pop	{r7, pc}
	...

0800808c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800808c:	b580      	push	{r7, lr}
 800808e:	b08e      	sub	sp, #56	; 0x38
 8008090:	af00      	add	r7, sp, #0
 8008092:	60f8      	str	r0, [r7, #12]
 8008094:	60b9      	str	r1, [r7, #8]
 8008096:	607a      	str	r2, [r7, #4]
 8008098:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800809a:	2300      	movs	r3, #0
 800809c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800809e:	68fb      	ldr	r3, [r7, #12]
 80080a0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80080a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	d10a      	bne.n	80080be <xQueueGenericSend+0x32>
	__asm volatile
 80080a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080ac:	f383 8811 	msr	BASEPRI, r3
 80080b0:	f3bf 8f6f 	isb	sy
 80080b4:	f3bf 8f4f 	dsb	sy
 80080b8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80080ba:	bf00      	nop
 80080bc:	e7fe      	b.n	80080bc <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80080be:	68bb      	ldr	r3, [r7, #8]
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d103      	bne.n	80080cc <xQueueGenericSend+0x40>
 80080c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	d101      	bne.n	80080d0 <xQueueGenericSend+0x44>
 80080cc:	2301      	movs	r3, #1
 80080ce:	e000      	b.n	80080d2 <xQueueGenericSend+0x46>
 80080d0:	2300      	movs	r3, #0
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	d10a      	bne.n	80080ec <xQueueGenericSend+0x60>
	__asm volatile
 80080d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080da:	f383 8811 	msr	BASEPRI, r3
 80080de:	f3bf 8f6f 	isb	sy
 80080e2:	f3bf 8f4f 	dsb	sy
 80080e6:	627b      	str	r3, [r7, #36]	; 0x24
}
 80080e8:	bf00      	nop
 80080ea:	e7fe      	b.n	80080ea <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80080ec:	683b      	ldr	r3, [r7, #0]
 80080ee:	2b02      	cmp	r3, #2
 80080f0:	d103      	bne.n	80080fa <xQueueGenericSend+0x6e>
 80080f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80080f6:	2b01      	cmp	r3, #1
 80080f8:	d101      	bne.n	80080fe <xQueueGenericSend+0x72>
 80080fa:	2301      	movs	r3, #1
 80080fc:	e000      	b.n	8008100 <xQueueGenericSend+0x74>
 80080fe:	2300      	movs	r3, #0
 8008100:	2b00      	cmp	r3, #0
 8008102:	d10a      	bne.n	800811a <xQueueGenericSend+0x8e>
	__asm volatile
 8008104:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008108:	f383 8811 	msr	BASEPRI, r3
 800810c:	f3bf 8f6f 	isb	sy
 8008110:	f3bf 8f4f 	dsb	sy
 8008114:	623b      	str	r3, [r7, #32]
}
 8008116:	bf00      	nop
 8008118:	e7fe      	b.n	8008118 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800811a:	f001 fad9 	bl	80096d0 <xTaskGetSchedulerState>
 800811e:	4603      	mov	r3, r0
 8008120:	2b00      	cmp	r3, #0
 8008122:	d102      	bne.n	800812a <xQueueGenericSend+0x9e>
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	2b00      	cmp	r3, #0
 8008128:	d101      	bne.n	800812e <xQueueGenericSend+0xa2>
 800812a:	2301      	movs	r3, #1
 800812c:	e000      	b.n	8008130 <xQueueGenericSend+0xa4>
 800812e:	2300      	movs	r3, #0
 8008130:	2b00      	cmp	r3, #0
 8008132:	d10a      	bne.n	800814a <xQueueGenericSend+0xbe>
	__asm volatile
 8008134:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008138:	f383 8811 	msr	BASEPRI, r3
 800813c:	f3bf 8f6f 	isb	sy
 8008140:	f3bf 8f4f 	dsb	sy
 8008144:	61fb      	str	r3, [r7, #28]
}
 8008146:	bf00      	nop
 8008148:	e7fe      	b.n	8008148 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800814a:	f002 f963 	bl	800a414 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800814e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008150:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008152:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008154:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008156:	429a      	cmp	r2, r3
 8008158:	d302      	bcc.n	8008160 <xQueueGenericSend+0xd4>
 800815a:	683b      	ldr	r3, [r7, #0]
 800815c:	2b02      	cmp	r3, #2
 800815e:	d129      	bne.n	80081b4 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008160:	683a      	ldr	r2, [r7, #0]
 8008162:	68b9      	ldr	r1, [r7, #8]
 8008164:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008166:	f000 fa8b 	bl	8008680 <prvCopyDataToQueue>
 800816a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800816c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800816e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008170:	2b00      	cmp	r3, #0
 8008172:	d010      	beq.n	8008196 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008174:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008176:	3324      	adds	r3, #36	; 0x24
 8008178:	4618      	mov	r0, r3
 800817a:	f001 f8e7 	bl	800934c <xTaskRemoveFromEventList>
 800817e:	4603      	mov	r3, r0
 8008180:	2b00      	cmp	r3, #0
 8008182:	d013      	beq.n	80081ac <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8008184:	4b3f      	ldr	r3, [pc, #252]	; (8008284 <xQueueGenericSend+0x1f8>)
 8008186:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800818a:	601a      	str	r2, [r3, #0]
 800818c:	f3bf 8f4f 	dsb	sy
 8008190:	f3bf 8f6f 	isb	sy
 8008194:	e00a      	b.n	80081ac <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8008196:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008198:	2b00      	cmp	r3, #0
 800819a:	d007      	beq.n	80081ac <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800819c:	4b39      	ldr	r3, [pc, #228]	; (8008284 <xQueueGenericSend+0x1f8>)
 800819e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80081a2:	601a      	str	r2, [r3, #0]
 80081a4:	f3bf 8f4f 	dsb	sy
 80081a8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80081ac:	f002 f962 	bl	800a474 <vPortExitCritical>
				return pdPASS;
 80081b0:	2301      	movs	r3, #1
 80081b2:	e063      	b.n	800827c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	d103      	bne.n	80081c2 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80081ba:	f002 f95b 	bl	800a474 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80081be:	2300      	movs	r3, #0
 80081c0:	e05c      	b.n	800827c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80081c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	d106      	bne.n	80081d6 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80081c8:	f107 0314 	add.w	r3, r7, #20
 80081cc:	4618      	mov	r0, r3
 80081ce:	f001 f921 	bl	8009414 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80081d2:	2301      	movs	r3, #1
 80081d4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80081d6:	f002 f94d 	bl	800a474 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80081da:	f000 fe8d 	bl	8008ef8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80081de:	f002 f919 	bl	800a414 <vPortEnterCritical>
 80081e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081e4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80081e8:	b25b      	sxtb	r3, r3
 80081ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80081ee:	d103      	bne.n	80081f8 <xQueueGenericSend+0x16c>
 80081f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081f2:	2200      	movs	r2, #0
 80081f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80081f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081fa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80081fe:	b25b      	sxtb	r3, r3
 8008200:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008204:	d103      	bne.n	800820e <xQueueGenericSend+0x182>
 8008206:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008208:	2200      	movs	r2, #0
 800820a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800820e:	f002 f931 	bl	800a474 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008212:	1d3a      	adds	r2, r7, #4
 8008214:	f107 0314 	add.w	r3, r7, #20
 8008218:	4611      	mov	r1, r2
 800821a:	4618      	mov	r0, r3
 800821c:	f001 f910 	bl	8009440 <xTaskCheckForTimeOut>
 8008220:	4603      	mov	r3, r0
 8008222:	2b00      	cmp	r3, #0
 8008224:	d124      	bne.n	8008270 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8008226:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008228:	f000 fb22 	bl	8008870 <prvIsQueueFull>
 800822c:	4603      	mov	r3, r0
 800822e:	2b00      	cmp	r3, #0
 8008230:	d018      	beq.n	8008264 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8008232:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008234:	3310      	adds	r3, #16
 8008236:	687a      	ldr	r2, [r7, #4]
 8008238:	4611      	mov	r1, r2
 800823a:	4618      	mov	r0, r3
 800823c:	f001 f836 	bl	80092ac <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8008240:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008242:	f000 faad 	bl	80087a0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8008246:	f000 fe65 	bl	8008f14 <xTaskResumeAll>
 800824a:	4603      	mov	r3, r0
 800824c:	2b00      	cmp	r3, #0
 800824e:	f47f af7c 	bne.w	800814a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8008252:	4b0c      	ldr	r3, [pc, #48]	; (8008284 <xQueueGenericSend+0x1f8>)
 8008254:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008258:	601a      	str	r2, [r3, #0]
 800825a:	f3bf 8f4f 	dsb	sy
 800825e:	f3bf 8f6f 	isb	sy
 8008262:	e772      	b.n	800814a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8008264:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008266:	f000 fa9b 	bl	80087a0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800826a:	f000 fe53 	bl	8008f14 <xTaskResumeAll>
 800826e:	e76c      	b.n	800814a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8008270:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008272:	f000 fa95 	bl	80087a0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008276:	f000 fe4d 	bl	8008f14 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800827a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800827c:	4618      	mov	r0, r3
 800827e:	3738      	adds	r7, #56	; 0x38
 8008280:	46bd      	mov	sp, r7
 8008282:	bd80      	pop	{r7, pc}
 8008284:	e000ed04 	.word	0xe000ed04

08008288 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8008288:	b580      	push	{r7, lr}
 800828a:	b090      	sub	sp, #64	; 0x40
 800828c:	af00      	add	r7, sp, #0
 800828e:	60f8      	str	r0, [r7, #12]
 8008290:	60b9      	str	r1, [r7, #8]
 8008292:	607a      	str	r2, [r7, #4]
 8008294:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800829a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800829c:	2b00      	cmp	r3, #0
 800829e:	d10a      	bne.n	80082b6 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80082a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082a4:	f383 8811 	msr	BASEPRI, r3
 80082a8:	f3bf 8f6f 	isb	sy
 80082ac:	f3bf 8f4f 	dsb	sy
 80082b0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80082b2:	bf00      	nop
 80082b4:	e7fe      	b.n	80082b4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80082b6:	68bb      	ldr	r3, [r7, #8]
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	d103      	bne.n	80082c4 <xQueueGenericSendFromISR+0x3c>
 80082bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	d101      	bne.n	80082c8 <xQueueGenericSendFromISR+0x40>
 80082c4:	2301      	movs	r3, #1
 80082c6:	e000      	b.n	80082ca <xQueueGenericSendFromISR+0x42>
 80082c8:	2300      	movs	r3, #0
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d10a      	bne.n	80082e4 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80082ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082d2:	f383 8811 	msr	BASEPRI, r3
 80082d6:	f3bf 8f6f 	isb	sy
 80082da:	f3bf 8f4f 	dsb	sy
 80082de:	627b      	str	r3, [r7, #36]	; 0x24
}
 80082e0:	bf00      	nop
 80082e2:	e7fe      	b.n	80082e2 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80082e4:	683b      	ldr	r3, [r7, #0]
 80082e6:	2b02      	cmp	r3, #2
 80082e8:	d103      	bne.n	80082f2 <xQueueGenericSendFromISR+0x6a>
 80082ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80082ee:	2b01      	cmp	r3, #1
 80082f0:	d101      	bne.n	80082f6 <xQueueGenericSendFromISR+0x6e>
 80082f2:	2301      	movs	r3, #1
 80082f4:	e000      	b.n	80082f8 <xQueueGenericSendFromISR+0x70>
 80082f6:	2300      	movs	r3, #0
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	d10a      	bne.n	8008312 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80082fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008300:	f383 8811 	msr	BASEPRI, r3
 8008304:	f3bf 8f6f 	isb	sy
 8008308:	f3bf 8f4f 	dsb	sy
 800830c:	623b      	str	r3, [r7, #32]
}
 800830e:	bf00      	nop
 8008310:	e7fe      	b.n	8008310 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008312:	f002 f961 	bl	800a5d8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8008316:	f3ef 8211 	mrs	r2, BASEPRI
 800831a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800831e:	f383 8811 	msr	BASEPRI, r3
 8008322:	f3bf 8f6f 	isb	sy
 8008326:	f3bf 8f4f 	dsb	sy
 800832a:	61fa      	str	r2, [r7, #28]
 800832c:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800832e:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008330:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008332:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008334:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008336:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008338:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800833a:	429a      	cmp	r2, r3
 800833c:	d302      	bcc.n	8008344 <xQueueGenericSendFromISR+0xbc>
 800833e:	683b      	ldr	r3, [r7, #0]
 8008340:	2b02      	cmp	r3, #2
 8008342:	d12f      	bne.n	80083a4 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8008344:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008346:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800834a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800834e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008350:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008352:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008354:	683a      	ldr	r2, [r7, #0]
 8008356:	68b9      	ldr	r1, [r7, #8]
 8008358:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800835a:	f000 f991 	bl	8008680 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800835e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8008362:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008366:	d112      	bne.n	800838e <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008368:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800836a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800836c:	2b00      	cmp	r3, #0
 800836e:	d016      	beq.n	800839e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008370:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008372:	3324      	adds	r3, #36	; 0x24
 8008374:	4618      	mov	r0, r3
 8008376:	f000 ffe9 	bl	800934c <xTaskRemoveFromEventList>
 800837a:	4603      	mov	r3, r0
 800837c:	2b00      	cmp	r3, #0
 800837e:	d00e      	beq.n	800839e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	2b00      	cmp	r3, #0
 8008384:	d00b      	beq.n	800839e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	2201      	movs	r2, #1
 800838a:	601a      	str	r2, [r3, #0]
 800838c:	e007      	b.n	800839e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800838e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8008392:	3301      	adds	r3, #1
 8008394:	b2db      	uxtb	r3, r3
 8008396:	b25a      	sxtb	r2, r3
 8008398:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800839a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800839e:	2301      	movs	r3, #1
 80083a0:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80083a2:	e001      	b.n	80083a8 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80083a4:	2300      	movs	r3, #0
 80083a6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80083a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80083aa:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80083ac:	697b      	ldr	r3, [r7, #20]
 80083ae:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80083b2:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80083b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80083b6:	4618      	mov	r0, r3
 80083b8:	3740      	adds	r7, #64	; 0x40
 80083ba:	46bd      	mov	sp, r7
 80083bc:	bd80      	pop	{r7, pc}
	...

080083c0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80083c0:	b580      	push	{r7, lr}
 80083c2:	b08c      	sub	sp, #48	; 0x30
 80083c4:	af00      	add	r7, sp, #0
 80083c6:	60f8      	str	r0, [r7, #12]
 80083c8:	60b9      	str	r1, [r7, #8]
 80083ca:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80083cc:	2300      	movs	r3, #0
 80083ce:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80083d0:	68fb      	ldr	r3, [r7, #12]
 80083d2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80083d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	d10a      	bne.n	80083f0 <xQueueReceive+0x30>
	__asm volatile
 80083da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083de:	f383 8811 	msr	BASEPRI, r3
 80083e2:	f3bf 8f6f 	isb	sy
 80083e6:	f3bf 8f4f 	dsb	sy
 80083ea:	623b      	str	r3, [r7, #32]
}
 80083ec:	bf00      	nop
 80083ee:	e7fe      	b.n	80083ee <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80083f0:	68bb      	ldr	r3, [r7, #8]
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	d103      	bne.n	80083fe <xQueueReceive+0x3e>
 80083f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	d101      	bne.n	8008402 <xQueueReceive+0x42>
 80083fe:	2301      	movs	r3, #1
 8008400:	e000      	b.n	8008404 <xQueueReceive+0x44>
 8008402:	2300      	movs	r3, #0
 8008404:	2b00      	cmp	r3, #0
 8008406:	d10a      	bne.n	800841e <xQueueReceive+0x5e>
	__asm volatile
 8008408:	f04f 0350 	mov.w	r3, #80	; 0x50
 800840c:	f383 8811 	msr	BASEPRI, r3
 8008410:	f3bf 8f6f 	isb	sy
 8008414:	f3bf 8f4f 	dsb	sy
 8008418:	61fb      	str	r3, [r7, #28]
}
 800841a:	bf00      	nop
 800841c:	e7fe      	b.n	800841c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800841e:	f001 f957 	bl	80096d0 <xTaskGetSchedulerState>
 8008422:	4603      	mov	r3, r0
 8008424:	2b00      	cmp	r3, #0
 8008426:	d102      	bne.n	800842e <xQueueReceive+0x6e>
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	2b00      	cmp	r3, #0
 800842c:	d101      	bne.n	8008432 <xQueueReceive+0x72>
 800842e:	2301      	movs	r3, #1
 8008430:	e000      	b.n	8008434 <xQueueReceive+0x74>
 8008432:	2300      	movs	r3, #0
 8008434:	2b00      	cmp	r3, #0
 8008436:	d10a      	bne.n	800844e <xQueueReceive+0x8e>
	__asm volatile
 8008438:	f04f 0350 	mov.w	r3, #80	; 0x50
 800843c:	f383 8811 	msr	BASEPRI, r3
 8008440:	f3bf 8f6f 	isb	sy
 8008444:	f3bf 8f4f 	dsb	sy
 8008448:	61bb      	str	r3, [r7, #24]
}
 800844a:	bf00      	nop
 800844c:	e7fe      	b.n	800844c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800844e:	f001 ffe1 	bl	800a414 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008452:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008454:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008456:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008458:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800845a:	2b00      	cmp	r3, #0
 800845c:	d01f      	beq.n	800849e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800845e:	68b9      	ldr	r1, [r7, #8]
 8008460:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008462:	f000 f977 	bl	8008754 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008466:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008468:	1e5a      	subs	r2, r3, #1
 800846a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800846c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800846e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008470:	691b      	ldr	r3, [r3, #16]
 8008472:	2b00      	cmp	r3, #0
 8008474:	d00f      	beq.n	8008496 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008476:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008478:	3310      	adds	r3, #16
 800847a:	4618      	mov	r0, r3
 800847c:	f000 ff66 	bl	800934c <xTaskRemoveFromEventList>
 8008480:	4603      	mov	r3, r0
 8008482:	2b00      	cmp	r3, #0
 8008484:	d007      	beq.n	8008496 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008486:	4b3d      	ldr	r3, [pc, #244]	; (800857c <xQueueReceive+0x1bc>)
 8008488:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800848c:	601a      	str	r2, [r3, #0]
 800848e:	f3bf 8f4f 	dsb	sy
 8008492:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008496:	f001 ffed 	bl	800a474 <vPortExitCritical>
				return pdPASS;
 800849a:	2301      	movs	r3, #1
 800849c:	e069      	b.n	8008572 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	d103      	bne.n	80084ac <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80084a4:	f001 ffe6 	bl	800a474 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80084a8:	2300      	movs	r3, #0
 80084aa:	e062      	b.n	8008572 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80084ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	d106      	bne.n	80084c0 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80084b2:	f107 0310 	add.w	r3, r7, #16
 80084b6:	4618      	mov	r0, r3
 80084b8:	f000 ffac 	bl	8009414 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80084bc:	2301      	movs	r3, #1
 80084be:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80084c0:	f001 ffd8 	bl	800a474 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80084c4:	f000 fd18 	bl	8008ef8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80084c8:	f001 ffa4 	bl	800a414 <vPortEnterCritical>
 80084cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084ce:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80084d2:	b25b      	sxtb	r3, r3
 80084d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80084d8:	d103      	bne.n	80084e2 <xQueueReceive+0x122>
 80084da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084dc:	2200      	movs	r2, #0
 80084de:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80084e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084e4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80084e8:	b25b      	sxtb	r3, r3
 80084ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80084ee:	d103      	bne.n	80084f8 <xQueueReceive+0x138>
 80084f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084f2:	2200      	movs	r2, #0
 80084f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80084f8:	f001 ffbc 	bl	800a474 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80084fc:	1d3a      	adds	r2, r7, #4
 80084fe:	f107 0310 	add.w	r3, r7, #16
 8008502:	4611      	mov	r1, r2
 8008504:	4618      	mov	r0, r3
 8008506:	f000 ff9b 	bl	8009440 <xTaskCheckForTimeOut>
 800850a:	4603      	mov	r3, r0
 800850c:	2b00      	cmp	r3, #0
 800850e:	d123      	bne.n	8008558 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008510:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008512:	f000 f997 	bl	8008844 <prvIsQueueEmpty>
 8008516:	4603      	mov	r3, r0
 8008518:	2b00      	cmp	r3, #0
 800851a:	d017      	beq.n	800854c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800851c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800851e:	3324      	adds	r3, #36	; 0x24
 8008520:	687a      	ldr	r2, [r7, #4]
 8008522:	4611      	mov	r1, r2
 8008524:	4618      	mov	r0, r3
 8008526:	f000 fec1 	bl	80092ac <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800852a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800852c:	f000 f938 	bl	80087a0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008530:	f000 fcf0 	bl	8008f14 <xTaskResumeAll>
 8008534:	4603      	mov	r3, r0
 8008536:	2b00      	cmp	r3, #0
 8008538:	d189      	bne.n	800844e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800853a:	4b10      	ldr	r3, [pc, #64]	; (800857c <xQueueReceive+0x1bc>)
 800853c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008540:	601a      	str	r2, [r3, #0]
 8008542:	f3bf 8f4f 	dsb	sy
 8008546:	f3bf 8f6f 	isb	sy
 800854a:	e780      	b.n	800844e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800854c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800854e:	f000 f927 	bl	80087a0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008552:	f000 fcdf 	bl	8008f14 <xTaskResumeAll>
 8008556:	e77a      	b.n	800844e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8008558:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800855a:	f000 f921 	bl	80087a0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800855e:	f000 fcd9 	bl	8008f14 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008562:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008564:	f000 f96e 	bl	8008844 <prvIsQueueEmpty>
 8008568:	4603      	mov	r3, r0
 800856a:	2b00      	cmp	r3, #0
 800856c:	f43f af6f 	beq.w	800844e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008570:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8008572:	4618      	mov	r0, r3
 8008574:	3730      	adds	r7, #48	; 0x30
 8008576:	46bd      	mov	sp, r7
 8008578:	bd80      	pop	{r7, pc}
 800857a:	bf00      	nop
 800857c:	e000ed04 	.word	0xe000ed04

08008580 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8008580:	b580      	push	{r7, lr}
 8008582:	b08e      	sub	sp, #56	; 0x38
 8008584:	af00      	add	r7, sp, #0
 8008586:	60f8      	str	r0, [r7, #12]
 8008588:	60b9      	str	r1, [r7, #8]
 800858a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8008590:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008592:	2b00      	cmp	r3, #0
 8008594:	d10a      	bne.n	80085ac <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8008596:	f04f 0350 	mov.w	r3, #80	; 0x50
 800859a:	f383 8811 	msr	BASEPRI, r3
 800859e:	f3bf 8f6f 	isb	sy
 80085a2:	f3bf 8f4f 	dsb	sy
 80085a6:	623b      	str	r3, [r7, #32]
}
 80085a8:	bf00      	nop
 80085aa:	e7fe      	b.n	80085aa <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80085ac:	68bb      	ldr	r3, [r7, #8]
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	d103      	bne.n	80085ba <xQueueReceiveFromISR+0x3a>
 80085b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	d101      	bne.n	80085be <xQueueReceiveFromISR+0x3e>
 80085ba:	2301      	movs	r3, #1
 80085bc:	e000      	b.n	80085c0 <xQueueReceiveFromISR+0x40>
 80085be:	2300      	movs	r3, #0
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	d10a      	bne.n	80085da <xQueueReceiveFromISR+0x5a>
	__asm volatile
 80085c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085c8:	f383 8811 	msr	BASEPRI, r3
 80085cc:	f3bf 8f6f 	isb	sy
 80085d0:	f3bf 8f4f 	dsb	sy
 80085d4:	61fb      	str	r3, [r7, #28]
}
 80085d6:	bf00      	nop
 80085d8:	e7fe      	b.n	80085d8 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80085da:	f001 fffd 	bl	800a5d8 <vPortValidateInterruptPriority>
	__asm volatile
 80085de:	f3ef 8211 	mrs	r2, BASEPRI
 80085e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085e6:	f383 8811 	msr	BASEPRI, r3
 80085ea:	f3bf 8f6f 	isb	sy
 80085ee:	f3bf 8f4f 	dsb	sy
 80085f2:	61ba      	str	r2, [r7, #24]
 80085f4:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80085f6:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80085f8:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80085fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085fe:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008600:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008602:	2b00      	cmp	r3, #0
 8008604:	d02f      	beq.n	8008666 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8008606:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008608:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800860c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008610:	68b9      	ldr	r1, [r7, #8]
 8008612:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008614:	f000 f89e 	bl	8008754 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008618:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800861a:	1e5a      	subs	r2, r3, #1
 800861c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800861e:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8008620:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008624:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008628:	d112      	bne.n	8008650 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800862a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800862c:	691b      	ldr	r3, [r3, #16]
 800862e:	2b00      	cmp	r3, #0
 8008630:	d016      	beq.n	8008660 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008632:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008634:	3310      	adds	r3, #16
 8008636:	4618      	mov	r0, r3
 8008638:	f000 fe88 	bl	800934c <xTaskRemoveFromEventList>
 800863c:	4603      	mov	r3, r0
 800863e:	2b00      	cmp	r3, #0
 8008640:	d00e      	beq.n	8008660 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	2b00      	cmp	r3, #0
 8008646:	d00b      	beq.n	8008660 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	2201      	movs	r2, #1
 800864c:	601a      	str	r2, [r3, #0]
 800864e:	e007      	b.n	8008660 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8008650:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008654:	3301      	adds	r3, #1
 8008656:	b2db      	uxtb	r3, r3
 8008658:	b25a      	sxtb	r2, r3
 800865a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800865c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8008660:	2301      	movs	r3, #1
 8008662:	637b      	str	r3, [r7, #52]	; 0x34
 8008664:	e001      	b.n	800866a <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8008666:	2300      	movs	r3, #0
 8008668:	637b      	str	r3, [r7, #52]	; 0x34
 800866a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800866c:	613b      	str	r3, [r7, #16]
	__asm volatile
 800866e:	693b      	ldr	r3, [r7, #16]
 8008670:	f383 8811 	msr	BASEPRI, r3
}
 8008674:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008676:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8008678:	4618      	mov	r0, r3
 800867a:	3738      	adds	r7, #56	; 0x38
 800867c:	46bd      	mov	sp, r7
 800867e:	bd80      	pop	{r7, pc}

08008680 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8008680:	b580      	push	{r7, lr}
 8008682:	b086      	sub	sp, #24
 8008684:	af00      	add	r7, sp, #0
 8008686:	60f8      	str	r0, [r7, #12]
 8008688:	60b9      	str	r1, [r7, #8]
 800868a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800868c:	2300      	movs	r3, #0
 800868e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008690:	68fb      	ldr	r3, [r7, #12]
 8008692:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008694:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800869a:	2b00      	cmp	r3, #0
 800869c:	d10d      	bne.n	80086ba <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800869e:	68fb      	ldr	r3, [r7, #12]
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	d14d      	bne.n	8008742 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	689b      	ldr	r3, [r3, #8]
 80086aa:	4618      	mov	r0, r3
 80086ac:	f001 f82e 	bl	800970c <xTaskPriorityDisinherit>
 80086b0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80086b2:	68fb      	ldr	r3, [r7, #12]
 80086b4:	2200      	movs	r2, #0
 80086b6:	609a      	str	r2, [r3, #8]
 80086b8:	e043      	b.n	8008742 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	2b00      	cmp	r3, #0
 80086be:	d119      	bne.n	80086f4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80086c0:	68fb      	ldr	r3, [r7, #12]
 80086c2:	6858      	ldr	r0, [r3, #4]
 80086c4:	68fb      	ldr	r3, [r7, #12]
 80086c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086c8:	461a      	mov	r2, r3
 80086ca:	68b9      	ldr	r1, [r7, #8]
 80086cc:	f002 fad1 	bl	800ac72 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80086d0:	68fb      	ldr	r3, [r7, #12]
 80086d2:	685a      	ldr	r2, [r3, #4]
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086d8:	441a      	add	r2, r3
 80086da:	68fb      	ldr	r3, [r7, #12]
 80086dc:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80086de:	68fb      	ldr	r3, [r7, #12]
 80086e0:	685a      	ldr	r2, [r3, #4]
 80086e2:	68fb      	ldr	r3, [r7, #12]
 80086e4:	689b      	ldr	r3, [r3, #8]
 80086e6:	429a      	cmp	r2, r3
 80086e8:	d32b      	bcc.n	8008742 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80086ea:	68fb      	ldr	r3, [r7, #12]
 80086ec:	681a      	ldr	r2, [r3, #0]
 80086ee:	68fb      	ldr	r3, [r7, #12]
 80086f0:	605a      	str	r2, [r3, #4]
 80086f2:	e026      	b.n	8008742 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80086f4:	68fb      	ldr	r3, [r7, #12]
 80086f6:	68d8      	ldr	r0, [r3, #12]
 80086f8:	68fb      	ldr	r3, [r7, #12]
 80086fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086fc:	461a      	mov	r2, r3
 80086fe:	68b9      	ldr	r1, [r7, #8]
 8008700:	f002 fab7 	bl	800ac72 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8008704:	68fb      	ldr	r3, [r7, #12]
 8008706:	68da      	ldr	r2, [r3, #12]
 8008708:	68fb      	ldr	r3, [r7, #12]
 800870a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800870c:	425b      	negs	r3, r3
 800870e:	441a      	add	r2, r3
 8008710:	68fb      	ldr	r3, [r7, #12]
 8008712:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008714:	68fb      	ldr	r3, [r7, #12]
 8008716:	68da      	ldr	r2, [r3, #12]
 8008718:	68fb      	ldr	r3, [r7, #12]
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	429a      	cmp	r2, r3
 800871e:	d207      	bcs.n	8008730 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8008720:	68fb      	ldr	r3, [r7, #12]
 8008722:	689a      	ldr	r2, [r3, #8]
 8008724:	68fb      	ldr	r3, [r7, #12]
 8008726:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008728:	425b      	negs	r3, r3
 800872a:	441a      	add	r2, r3
 800872c:	68fb      	ldr	r3, [r7, #12]
 800872e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	2b02      	cmp	r3, #2
 8008734:	d105      	bne.n	8008742 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008736:	693b      	ldr	r3, [r7, #16]
 8008738:	2b00      	cmp	r3, #0
 800873a:	d002      	beq.n	8008742 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800873c:	693b      	ldr	r3, [r7, #16]
 800873e:	3b01      	subs	r3, #1
 8008740:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008742:	693b      	ldr	r3, [r7, #16]
 8008744:	1c5a      	adds	r2, r3, #1
 8008746:	68fb      	ldr	r3, [r7, #12]
 8008748:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800874a:	697b      	ldr	r3, [r7, #20]
}
 800874c:	4618      	mov	r0, r3
 800874e:	3718      	adds	r7, #24
 8008750:	46bd      	mov	sp, r7
 8008752:	bd80      	pop	{r7, pc}

08008754 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8008754:	b580      	push	{r7, lr}
 8008756:	b082      	sub	sp, #8
 8008758:	af00      	add	r7, sp, #0
 800875a:	6078      	str	r0, [r7, #4]
 800875c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008762:	2b00      	cmp	r3, #0
 8008764:	d018      	beq.n	8008798 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	68da      	ldr	r2, [r3, #12]
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800876e:	441a      	add	r2, r3
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	68da      	ldr	r2, [r3, #12]
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	689b      	ldr	r3, [r3, #8]
 800877c:	429a      	cmp	r2, r3
 800877e:	d303      	bcc.n	8008788 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	681a      	ldr	r2, [r3, #0]
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	68d9      	ldr	r1, [r3, #12]
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008790:	461a      	mov	r2, r3
 8008792:	6838      	ldr	r0, [r7, #0]
 8008794:	f002 fa6d 	bl	800ac72 <memcpy>
	}
}
 8008798:	bf00      	nop
 800879a:	3708      	adds	r7, #8
 800879c:	46bd      	mov	sp, r7
 800879e:	bd80      	pop	{r7, pc}

080087a0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80087a0:	b580      	push	{r7, lr}
 80087a2:	b084      	sub	sp, #16
 80087a4:	af00      	add	r7, sp, #0
 80087a6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80087a8:	f001 fe34 	bl	800a414 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80087b2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80087b4:	e011      	b.n	80087da <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087ba:	2b00      	cmp	r3, #0
 80087bc:	d012      	beq.n	80087e4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	3324      	adds	r3, #36	; 0x24
 80087c2:	4618      	mov	r0, r3
 80087c4:	f000 fdc2 	bl	800934c <xTaskRemoveFromEventList>
 80087c8:	4603      	mov	r3, r0
 80087ca:	2b00      	cmp	r3, #0
 80087cc:	d001      	beq.n	80087d2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80087ce:	f000 fe99 	bl	8009504 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80087d2:	7bfb      	ldrb	r3, [r7, #15]
 80087d4:	3b01      	subs	r3, #1
 80087d6:	b2db      	uxtb	r3, r3
 80087d8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80087da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80087de:	2b00      	cmp	r3, #0
 80087e0:	dce9      	bgt.n	80087b6 <prvUnlockQueue+0x16>
 80087e2:	e000      	b.n	80087e6 <prvUnlockQueue+0x46>
					break;
 80087e4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	22ff      	movs	r2, #255	; 0xff
 80087ea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80087ee:	f001 fe41 	bl	800a474 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80087f2:	f001 fe0f 	bl	800a414 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80087fc:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80087fe:	e011      	b.n	8008824 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	691b      	ldr	r3, [r3, #16]
 8008804:	2b00      	cmp	r3, #0
 8008806:	d012      	beq.n	800882e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	3310      	adds	r3, #16
 800880c:	4618      	mov	r0, r3
 800880e:	f000 fd9d 	bl	800934c <xTaskRemoveFromEventList>
 8008812:	4603      	mov	r3, r0
 8008814:	2b00      	cmp	r3, #0
 8008816:	d001      	beq.n	800881c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8008818:	f000 fe74 	bl	8009504 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800881c:	7bbb      	ldrb	r3, [r7, #14]
 800881e:	3b01      	subs	r3, #1
 8008820:	b2db      	uxtb	r3, r3
 8008822:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008824:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008828:	2b00      	cmp	r3, #0
 800882a:	dce9      	bgt.n	8008800 <prvUnlockQueue+0x60>
 800882c:	e000      	b.n	8008830 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800882e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	22ff      	movs	r2, #255	; 0xff
 8008834:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8008838:	f001 fe1c 	bl	800a474 <vPortExitCritical>
}
 800883c:	bf00      	nop
 800883e:	3710      	adds	r7, #16
 8008840:	46bd      	mov	sp, r7
 8008842:	bd80      	pop	{r7, pc}

08008844 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8008844:	b580      	push	{r7, lr}
 8008846:	b084      	sub	sp, #16
 8008848:	af00      	add	r7, sp, #0
 800884a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800884c:	f001 fde2 	bl	800a414 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008854:	2b00      	cmp	r3, #0
 8008856:	d102      	bne.n	800885e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8008858:	2301      	movs	r3, #1
 800885a:	60fb      	str	r3, [r7, #12]
 800885c:	e001      	b.n	8008862 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800885e:	2300      	movs	r3, #0
 8008860:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008862:	f001 fe07 	bl	800a474 <vPortExitCritical>

	return xReturn;
 8008866:	68fb      	ldr	r3, [r7, #12]
}
 8008868:	4618      	mov	r0, r3
 800886a:	3710      	adds	r7, #16
 800886c:	46bd      	mov	sp, r7
 800886e:	bd80      	pop	{r7, pc}

08008870 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8008870:	b580      	push	{r7, lr}
 8008872:	b084      	sub	sp, #16
 8008874:	af00      	add	r7, sp, #0
 8008876:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008878:	f001 fdcc 	bl	800a414 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008884:	429a      	cmp	r2, r3
 8008886:	d102      	bne.n	800888e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8008888:	2301      	movs	r3, #1
 800888a:	60fb      	str	r3, [r7, #12]
 800888c:	e001      	b.n	8008892 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800888e:	2300      	movs	r3, #0
 8008890:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008892:	f001 fdef 	bl	800a474 <vPortExitCritical>

	return xReturn;
 8008896:	68fb      	ldr	r3, [r7, #12]
}
 8008898:	4618      	mov	r0, r3
 800889a:	3710      	adds	r7, #16
 800889c:	46bd      	mov	sp, r7
 800889e:	bd80      	pop	{r7, pc}

080088a0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80088a0:	b480      	push	{r7}
 80088a2:	b085      	sub	sp, #20
 80088a4:	af00      	add	r7, sp, #0
 80088a6:	6078      	str	r0, [r7, #4]
 80088a8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80088aa:	2300      	movs	r3, #0
 80088ac:	60fb      	str	r3, [r7, #12]
 80088ae:	e014      	b.n	80088da <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80088b0:	4a0f      	ldr	r2, [pc, #60]	; (80088f0 <vQueueAddToRegistry+0x50>)
 80088b2:	68fb      	ldr	r3, [r7, #12]
 80088b4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	d10b      	bne.n	80088d4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80088bc:	490c      	ldr	r1, [pc, #48]	; (80088f0 <vQueueAddToRegistry+0x50>)
 80088be:	68fb      	ldr	r3, [r7, #12]
 80088c0:	683a      	ldr	r2, [r7, #0]
 80088c2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80088c6:	4a0a      	ldr	r2, [pc, #40]	; (80088f0 <vQueueAddToRegistry+0x50>)
 80088c8:	68fb      	ldr	r3, [r7, #12]
 80088ca:	00db      	lsls	r3, r3, #3
 80088cc:	4413      	add	r3, r2
 80088ce:	687a      	ldr	r2, [r7, #4]
 80088d0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80088d2:	e006      	b.n	80088e2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80088d4:	68fb      	ldr	r3, [r7, #12]
 80088d6:	3301      	adds	r3, #1
 80088d8:	60fb      	str	r3, [r7, #12]
 80088da:	68fb      	ldr	r3, [r7, #12]
 80088dc:	2b07      	cmp	r3, #7
 80088de:	d9e7      	bls.n	80088b0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80088e0:	bf00      	nop
 80088e2:	bf00      	nop
 80088e4:	3714      	adds	r7, #20
 80088e6:	46bd      	mov	sp, r7
 80088e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ec:	4770      	bx	lr
 80088ee:	bf00      	nop
 80088f0:	200030cc 	.word	0x200030cc

080088f4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80088f4:	b580      	push	{r7, lr}
 80088f6:	b086      	sub	sp, #24
 80088f8:	af00      	add	r7, sp, #0
 80088fa:	60f8      	str	r0, [r7, #12]
 80088fc:	60b9      	str	r1, [r7, #8]
 80088fe:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8008900:	68fb      	ldr	r3, [r7, #12]
 8008902:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8008904:	f001 fd86 	bl	800a414 <vPortEnterCritical>
 8008908:	697b      	ldr	r3, [r7, #20]
 800890a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800890e:	b25b      	sxtb	r3, r3
 8008910:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008914:	d103      	bne.n	800891e <vQueueWaitForMessageRestricted+0x2a>
 8008916:	697b      	ldr	r3, [r7, #20]
 8008918:	2200      	movs	r2, #0
 800891a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800891e:	697b      	ldr	r3, [r7, #20]
 8008920:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008924:	b25b      	sxtb	r3, r3
 8008926:	f1b3 3fff 	cmp.w	r3, #4294967295
 800892a:	d103      	bne.n	8008934 <vQueueWaitForMessageRestricted+0x40>
 800892c:	697b      	ldr	r3, [r7, #20]
 800892e:	2200      	movs	r2, #0
 8008930:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008934:	f001 fd9e 	bl	800a474 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8008938:	697b      	ldr	r3, [r7, #20]
 800893a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800893c:	2b00      	cmp	r3, #0
 800893e:	d106      	bne.n	800894e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8008940:	697b      	ldr	r3, [r7, #20]
 8008942:	3324      	adds	r3, #36	; 0x24
 8008944:	687a      	ldr	r2, [r7, #4]
 8008946:	68b9      	ldr	r1, [r7, #8]
 8008948:	4618      	mov	r0, r3
 800894a:	f000 fcd3 	bl	80092f4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800894e:	6978      	ldr	r0, [r7, #20]
 8008950:	f7ff ff26 	bl	80087a0 <prvUnlockQueue>
	}
 8008954:	bf00      	nop
 8008956:	3718      	adds	r7, #24
 8008958:	46bd      	mov	sp, r7
 800895a:	bd80      	pop	{r7, pc}

0800895c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800895c:	b580      	push	{r7, lr}
 800895e:	b08e      	sub	sp, #56	; 0x38
 8008960:	af04      	add	r7, sp, #16
 8008962:	60f8      	str	r0, [r7, #12]
 8008964:	60b9      	str	r1, [r7, #8]
 8008966:	607a      	str	r2, [r7, #4]
 8008968:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800896a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800896c:	2b00      	cmp	r3, #0
 800896e:	d10a      	bne.n	8008986 <xTaskCreateStatic+0x2a>
	__asm volatile
 8008970:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008974:	f383 8811 	msr	BASEPRI, r3
 8008978:	f3bf 8f6f 	isb	sy
 800897c:	f3bf 8f4f 	dsb	sy
 8008980:	623b      	str	r3, [r7, #32]
}
 8008982:	bf00      	nop
 8008984:	e7fe      	b.n	8008984 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8008986:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008988:	2b00      	cmp	r3, #0
 800898a:	d10a      	bne.n	80089a2 <xTaskCreateStatic+0x46>
	__asm volatile
 800898c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008990:	f383 8811 	msr	BASEPRI, r3
 8008994:	f3bf 8f6f 	isb	sy
 8008998:	f3bf 8f4f 	dsb	sy
 800899c:	61fb      	str	r3, [r7, #28]
}
 800899e:	bf00      	nop
 80089a0:	e7fe      	b.n	80089a0 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80089a2:	23bc      	movs	r3, #188	; 0xbc
 80089a4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80089a6:	693b      	ldr	r3, [r7, #16]
 80089a8:	2bbc      	cmp	r3, #188	; 0xbc
 80089aa:	d00a      	beq.n	80089c2 <xTaskCreateStatic+0x66>
	__asm volatile
 80089ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089b0:	f383 8811 	msr	BASEPRI, r3
 80089b4:	f3bf 8f6f 	isb	sy
 80089b8:	f3bf 8f4f 	dsb	sy
 80089bc:	61bb      	str	r3, [r7, #24]
}
 80089be:	bf00      	nop
 80089c0:	e7fe      	b.n	80089c0 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80089c2:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80089c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089c6:	2b00      	cmp	r3, #0
 80089c8:	d01e      	beq.n	8008a08 <xTaskCreateStatic+0xac>
 80089ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	d01b      	beq.n	8008a08 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80089d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089d2:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80089d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089d6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80089d8:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80089da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089dc:	2202      	movs	r2, #2
 80089de:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80089e2:	2300      	movs	r3, #0
 80089e4:	9303      	str	r3, [sp, #12]
 80089e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089e8:	9302      	str	r3, [sp, #8]
 80089ea:	f107 0314 	add.w	r3, r7, #20
 80089ee:	9301      	str	r3, [sp, #4]
 80089f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089f2:	9300      	str	r3, [sp, #0]
 80089f4:	683b      	ldr	r3, [r7, #0]
 80089f6:	687a      	ldr	r2, [r7, #4]
 80089f8:	68b9      	ldr	r1, [r7, #8]
 80089fa:	68f8      	ldr	r0, [r7, #12]
 80089fc:	f000 f850 	bl	8008aa0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008a00:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008a02:	f000 f8f3 	bl	8008bec <prvAddNewTaskToReadyList>
 8008a06:	e001      	b.n	8008a0c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8008a08:	2300      	movs	r3, #0
 8008a0a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8008a0c:	697b      	ldr	r3, [r7, #20]
	}
 8008a0e:	4618      	mov	r0, r3
 8008a10:	3728      	adds	r7, #40	; 0x28
 8008a12:	46bd      	mov	sp, r7
 8008a14:	bd80      	pop	{r7, pc}

08008a16 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8008a16:	b580      	push	{r7, lr}
 8008a18:	b08c      	sub	sp, #48	; 0x30
 8008a1a:	af04      	add	r7, sp, #16
 8008a1c:	60f8      	str	r0, [r7, #12]
 8008a1e:	60b9      	str	r1, [r7, #8]
 8008a20:	603b      	str	r3, [r7, #0]
 8008a22:	4613      	mov	r3, r2
 8008a24:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8008a26:	88fb      	ldrh	r3, [r7, #6]
 8008a28:	009b      	lsls	r3, r3, #2
 8008a2a:	4618      	mov	r0, r3
 8008a2c:	f001 fe14 	bl	800a658 <pvPortMalloc>
 8008a30:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8008a32:	697b      	ldr	r3, [r7, #20]
 8008a34:	2b00      	cmp	r3, #0
 8008a36:	d00e      	beq.n	8008a56 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8008a38:	20bc      	movs	r0, #188	; 0xbc
 8008a3a:	f001 fe0d 	bl	800a658 <pvPortMalloc>
 8008a3e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8008a40:	69fb      	ldr	r3, [r7, #28]
 8008a42:	2b00      	cmp	r3, #0
 8008a44:	d003      	beq.n	8008a4e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8008a46:	69fb      	ldr	r3, [r7, #28]
 8008a48:	697a      	ldr	r2, [r7, #20]
 8008a4a:	631a      	str	r2, [r3, #48]	; 0x30
 8008a4c:	e005      	b.n	8008a5a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8008a4e:	6978      	ldr	r0, [r7, #20]
 8008a50:	f001 fece 	bl	800a7f0 <vPortFree>
 8008a54:	e001      	b.n	8008a5a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8008a56:	2300      	movs	r3, #0
 8008a58:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8008a5a:	69fb      	ldr	r3, [r7, #28]
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	d017      	beq.n	8008a90 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8008a60:	69fb      	ldr	r3, [r7, #28]
 8008a62:	2200      	movs	r2, #0
 8008a64:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008a68:	88fa      	ldrh	r2, [r7, #6]
 8008a6a:	2300      	movs	r3, #0
 8008a6c:	9303      	str	r3, [sp, #12]
 8008a6e:	69fb      	ldr	r3, [r7, #28]
 8008a70:	9302      	str	r3, [sp, #8]
 8008a72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a74:	9301      	str	r3, [sp, #4]
 8008a76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a78:	9300      	str	r3, [sp, #0]
 8008a7a:	683b      	ldr	r3, [r7, #0]
 8008a7c:	68b9      	ldr	r1, [r7, #8]
 8008a7e:	68f8      	ldr	r0, [r7, #12]
 8008a80:	f000 f80e 	bl	8008aa0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008a84:	69f8      	ldr	r0, [r7, #28]
 8008a86:	f000 f8b1 	bl	8008bec <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008a8a:	2301      	movs	r3, #1
 8008a8c:	61bb      	str	r3, [r7, #24]
 8008a8e:	e002      	b.n	8008a96 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008a90:	f04f 33ff 	mov.w	r3, #4294967295
 8008a94:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8008a96:	69bb      	ldr	r3, [r7, #24]
	}
 8008a98:	4618      	mov	r0, r3
 8008a9a:	3720      	adds	r7, #32
 8008a9c:	46bd      	mov	sp, r7
 8008a9e:	bd80      	pop	{r7, pc}

08008aa0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008aa0:	b580      	push	{r7, lr}
 8008aa2:	b088      	sub	sp, #32
 8008aa4:	af00      	add	r7, sp, #0
 8008aa6:	60f8      	str	r0, [r7, #12]
 8008aa8:	60b9      	str	r1, [r7, #8]
 8008aaa:	607a      	str	r2, [r7, #4]
 8008aac:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8008aae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ab0:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	009b      	lsls	r3, r3, #2
 8008ab6:	461a      	mov	r2, r3
 8008ab8:	21a5      	movs	r1, #165	; 0xa5
 8008aba:	f002 f8e8 	bl	800ac8e <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8008abe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ac0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8008ac8:	3b01      	subs	r3, #1
 8008aca:	009b      	lsls	r3, r3, #2
 8008acc:	4413      	add	r3, r2
 8008ace:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8008ad0:	69bb      	ldr	r3, [r7, #24]
 8008ad2:	f023 0307 	bic.w	r3, r3, #7
 8008ad6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008ad8:	69bb      	ldr	r3, [r7, #24]
 8008ada:	f003 0307 	and.w	r3, r3, #7
 8008ade:	2b00      	cmp	r3, #0
 8008ae0:	d00a      	beq.n	8008af8 <prvInitialiseNewTask+0x58>
	__asm volatile
 8008ae2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ae6:	f383 8811 	msr	BASEPRI, r3
 8008aea:	f3bf 8f6f 	isb	sy
 8008aee:	f3bf 8f4f 	dsb	sy
 8008af2:	617b      	str	r3, [r7, #20]
}
 8008af4:	bf00      	nop
 8008af6:	e7fe      	b.n	8008af6 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8008af8:	68bb      	ldr	r3, [r7, #8]
 8008afa:	2b00      	cmp	r3, #0
 8008afc:	d01f      	beq.n	8008b3e <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008afe:	2300      	movs	r3, #0
 8008b00:	61fb      	str	r3, [r7, #28]
 8008b02:	e012      	b.n	8008b2a <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008b04:	68ba      	ldr	r2, [r7, #8]
 8008b06:	69fb      	ldr	r3, [r7, #28]
 8008b08:	4413      	add	r3, r2
 8008b0a:	7819      	ldrb	r1, [r3, #0]
 8008b0c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008b0e:	69fb      	ldr	r3, [r7, #28]
 8008b10:	4413      	add	r3, r2
 8008b12:	3334      	adds	r3, #52	; 0x34
 8008b14:	460a      	mov	r2, r1
 8008b16:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8008b18:	68ba      	ldr	r2, [r7, #8]
 8008b1a:	69fb      	ldr	r3, [r7, #28]
 8008b1c:	4413      	add	r3, r2
 8008b1e:	781b      	ldrb	r3, [r3, #0]
 8008b20:	2b00      	cmp	r3, #0
 8008b22:	d006      	beq.n	8008b32 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008b24:	69fb      	ldr	r3, [r7, #28]
 8008b26:	3301      	adds	r3, #1
 8008b28:	61fb      	str	r3, [r7, #28]
 8008b2a:	69fb      	ldr	r3, [r7, #28]
 8008b2c:	2b0f      	cmp	r3, #15
 8008b2e:	d9e9      	bls.n	8008b04 <prvInitialiseNewTask+0x64>
 8008b30:	e000      	b.n	8008b34 <prvInitialiseNewTask+0x94>
			{
				break;
 8008b32:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008b34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b36:	2200      	movs	r2, #0
 8008b38:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008b3c:	e003      	b.n	8008b46 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8008b3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b40:	2200      	movs	r2, #0
 8008b42:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008b46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b48:	2b37      	cmp	r3, #55	; 0x37
 8008b4a:	d901      	bls.n	8008b50 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008b4c:	2337      	movs	r3, #55	; 0x37
 8008b4e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8008b50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b52:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008b54:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8008b56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b58:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008b5a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8008b5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b5e:	2200      	movs	r2, #0
 8008b60:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008b62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b64:	3304      	adds	r3, #4
 8008b66:	4618      	mov	r0, r3
 8008b68:	f7ff f8be 	bl	8007ce8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008b6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b6e:	3318      	adds	r3, #24
 8008b70:	4618      	mov	r0, r3
 8008b72:	f7ff f8b9 	bl	8007ce8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008b76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b78:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008b7a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008b7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b7e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008b82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b84:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008b86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b88:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008b8a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8008b8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b8e:	2200      	movs	r2, #0
 8008b90:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008b94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b96:	2200      	movs	r2, #0
 8008b98:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8008b9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b9e:	3354      	adds	r3, #84	; 0x54
 8008ba0:	2260      	movs	r2, #96	; 0x60
 8008ba2:	2100      	movs	r1, #0
 8008ba4:	4618      	mov	r0, r3
 8008ba6:	f002 f872 	bl	800ac8e <memset>
 8008baa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bac:	4a0c      	ldr	r2, [pc, #48]	; (8008be0 <prvInitialiseNewTask+0x140>)
 8008bae:	659a      	str	r2, [r3, #88]	; 0x58
 8008bb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bb2:	4a0c      	ldr	r2, [pc, #48]	; (8008be4 <prvInitialiseNewTask+0x144>)
 8008bb4:	65da      	str	r2, [r3, #92]	; 0x5c
 8008bb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bb8:	4a0b      	ldr	r2, [pc, #44]	; (8008be8 <prvInitialiseNewTask+0x148>)
 8008bba:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008bbc:	683a      	ldr	r2, [r7, #0]
 8008bbe:	68f9      	ldr	r1, [r7, #12]
 8008bc0:	69b8      	ldr	r0, [r7, #24]
 8008bc2:	f001 faf7 	bl	800a1b4 <pxPortInitialiseStack>
 8008bc6:	4602      	mov	r2, r0
 8008bc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bca:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8008bcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008bce:	2b00      	cmp	r3, #0
 8008bd0:	d002      	beq.n	8008bd8 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008bd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008bd4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008bd6:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008bd8:	bf00      	nop
 8008bda:	3720      	adds	r7, #32
 8008bdc:	46bd      	mov	sp, r7
 8008bde:	bd80      	pop	{r7, pc}
 8008be0:	0800c470 	.word	0x0800c470
 8008be4:	0800c490 	.word	0x0800c490
 8008be8:	0800c450 	.word	0x0800c450

08008bec <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008bec:	b580      	push	{r7, lr}
 8008bee:	b082      	sub	sp, #8
 8008bf0:	af00      	add	r7, sp, #0
 8008bf2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008bf4:	f001 fc0e 	bl	800a414 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008bf8:	4b2d      	ldr	r3, [pc, #180]	; (8008cb0 <prvAddNewTaskToReadyList+0xc4>)
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	3301      	adds	r3, #1
 8008bfe:	4a2c      	ldr	r2, [pc, #176]	; (8008cb0 <prvAddNewTaskToReadyList+0xc4>)
 8008c00:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8008c02:	4b2c      	ldr	r3, [pc, #176]	; (8008cb4 <prvAddNewTaskToReadyList+0xc8>)
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	2b00      	cmp	r3, #0
 8008c08:	d109      	bne.n	8008c1e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8008c0a:	4a2a      	ldr	r2, [pc, #168]	; (8008cb4 <prvAddNewTaskToReadyList+0xc8>)
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008c10:	4b27      	ldr	r3, [pc, #156]	; (8008cb0 <prvAddNewTaskToReadyList+0xc4>)
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	2b01      	cmp	r3, #1
 8008c16:	d110      	bne.n	8008c3a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008c18:	f000 fc98 	bl	800954c <prvInitialiseTaskLists>
 8008c1c:	e00d      	b.n	8008c3a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8008c1e:	4b26      	ldr	r3, [pc, #152]	; (8008cb8 <prvAddNewTaskToReadyList+0xcc>)
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	2b00      	cmp	r3, #0
 8008c24:	d109      	bne.n	8008c3a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008c26:	4b23      	ldr	r3, [pc, #140]	; (8008cb4 <prvAddNewTaskToReadyList+0xc8>)
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c30:	429a      	cmp	r2, r3
 8008c32:	d802      	bhi.n	8008c3a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008c34:	4a1f      	ldr	r2, [pc, #124]	; (8008cb4 <prvAddNewTaskToReadyList+0xc8>)
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8008c3a:	4b20      	ldr	r3, [pc, #128]	; (8008cbc <prvAddNewTaskToReadyList+0xd0>)
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	3301      	adds	r3, #1
 8008c40:	4a1e      	ldr	r2, [pc, #120]	; (8008cbc <prvAddNewTaskToReadyList+0xd0>)
 8008c42:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8008c44:	4b1d      	ldr	r3, [pc, #116]	; (8008cbc <prvAddNewTaskToReadyList+0xd0>)
 8008c46:	681a      	ldr	r2, [r3, #0]
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008c50:	4b1b      	ldr	r3, [pc, #108]	; (8008cc0 <prvAddNewTaskToReadyList+0xd4>)
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	429a      	cmp	r2, r3
 8008c56:	d903      	bls.n	8008c60 <prvAddNewTaskToReadyList+0x74>
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c5c:	4a18      	ldr	r2, [pc, #96]	; (8008cc0 <prvAddNewTaskToReadyList+0xd4>)
 8008c5e:	6013      	str	r3, [r2, #0]
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008c64:	4613      	mov	r3, r2
 8008c66:	009b      	lsls	r3, r3, #2
 8008c68:	4413      	add	r3, r2
 8008c6a:	009b      	lsls	r3, r3, #2
 8008c6c:	4a15      	ldr	r2, [pc, #84]	; (8008cc4 <prvAddNewTaskToReadyList+0xd8>)
 8008c6e:	441a      	add	r2, r3
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	3304      	adds	r3, #4
 8008c74:	4619      	mov	r1, r3
 8008c76:	4610      	mov	r0, r2
 8008c78:	f7ff f843 	bl	8007d02 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8008c7c:	f001 fbfa 	bl	800a474 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8008c80:	4b0d      	ldr	r3, [pc, #52]	; (8008cb8 <prvAddNewTaskToReadyList+0xcc>)
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	2b00      	cmp	r3, #0
 8008c86:	d00e      	beq.n	8008ca6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008c88:	4b0a      	ldr	r3, [pc, #40]	; (8008cb4 <prvAddNewTaskToReadyList+0xc8>)
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c92:	429a      	cmp	r2, r3
 8008c94:	d207      	bcs.n	8008ca6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8008c96:	4b0c      	ldr	r3, [pc, #48]	; (8008cc8 <prvAddNewTaskToReadyList+0xdc>)
 8008c98:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008c9c:	601a      	str	r2, [r3, #0]
 8008c9e:	f3bf 8f4f 	dsb	sy
 8008ca2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008ca6:	bf00      	nop
 8008ca8:	3708      	adds	r7, #8
 8008caa:	46bd      	mov	sp, r7
 8008cac:	bd80      	pop	{r7, pc}
 8008cae:	bf00      	nop
 8008cb0:	200035e0 	.word	0x200035e0
 8008cb4:	2000310c 	.word	0x2000310c
 8008cb8:	200035ec 	.word	0x200035ec
 8008cbc:	200035fc 	.word	0x200035fc
 8008cc0:	200035e8 	.word	0x200035e8
 8008cc4:	20003110 	.word	0x20003110
 8008cc8:	e000ed04 	.word	0xe000ed04

08008ccc <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 8008ccc:	b580      	push	{r7, lr}
 8008cce:	b084      	sub	sp, #16
 8008cd0:	af00      	add	r7, sp, #0
 8008cd2:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8008cd4:	f001 fb9e 	bl	800a414 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	2b00      	cmp	r3, #0
 8008cdc:	d102      	bne.n	8008ce4 <vTaskDelete+0x18>
 8008cde:	4b2c      	ldr	r3, [pc, #176]	; (8008d90 <vTaskDelete+0xc4>)
 8008ce0:	681b      	ldr	r3, [r3, #0]
 8008ce2:	e000      	b.n	8008ce6 <vTaskDelete+0x1a>
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready/delayed list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008ce8:	68fb      	ldr	r3, [r7, #12]
 8008cea:	3304      	adds	r3, #4
 8008cec:	4618      	mov	r0, r3
 8008cee:	f7ff f865 	bl	8007dbc <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008cf2:	68fb      	ldr	r3, [r7, #12]
 8008cf4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	d004      	beq.n	8008d04 <vTaskDelete+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008cfa:	68fb      	ldr	r3, [r7, #12]
 8008cfc:	3318      	adds	r3, #24
 8008cfe:	4618      	mov	r0, r3
 8008d00:	f7ff f85c 	bl	8007dbc <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 8008d04:	4b23      	ldr	r3, [pc, #140]	; (8008d94 <vTaskDelete+0xc8>)
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	3301      	adds	r3, #1
 8008d0a:	4a22      	ldr	r2, [pc, #136]	; (8008d94 <vTaskDelete+0xc8>)
 8008d0c:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 8008d0e:	4b20      	ldr	r3, [pc, #128]	; (8008d90 <vTaskDelete+0xc4>)
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	68fa      	ldr	r2, [r7, #12]
 8008d14:	429a      	cmp	r2, r3
 8008d16:	d10b      	bne.n	8008d30 <vTaskDelete+0x64>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 8008d18:	68fb      	ldr	r3, [r7, #12]
 8008d1a:	3304      	adds	r3, #4
 8008d1c:	4619      	mov	r1, r3
 8008d1e:	481e      	ldr	r0, [pc, #120]	; (8008d98 <vTaskDelete+0xcc>)
 8008d20:	f7fe ffef 	bl	8007d02 <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 8008d24:	4b1d      	ldr	r3, [pc, #116]	; (8008d9c <vTaskDelete+0xd0>)
 8008d26:	681b      	ldr	r3, [r3, #0]
 8008d28:	3301      	adds	r3, #1
 8008d2a:	4a1c      	ldr	r2, [pc, #112]	; (8008d9c <vTaskDelete+0xd0>)
 8008d2c:	6013      	str	r3, [r2, #0]
 8008d2e:	e009      	b.n	8008d44 <vTaskDelete+0x78>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 8008d30:	4b1b      	ldr	r3, [pc, #108]	; (8008da0 <vTaskDelete+0xd4>)
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	3b01      	subs	r3, #1
 8008d36:	4a1a      	ldr	r2, [pc, #104]	; (8008da0 <vTaskDelete+0xd4>)
 8008d38:	6013      	str	r3, [r2, #0]
				traceTASK_DELETE( pxTCB );
				prvDeleteTCB( pxTCB );
 8008d3a:	68f8      	ldr	r0, [r7, #12]
 8008d3c:	f000 fc74 	bl	8009628 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 8008d40:	f000 fca6 	bl	8009690 <prvResetNextTaskUnblockTime>
			}
		}
		taskEXIT_CRITICAL();
 8008d44:	f001 fb96 	bl	800a474 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 8008d48:	4b16      	ldr	r3, [pc, #88]	; (8008da4 <vTaskDelete+0xd8>)
 8008d4a:	681b      	ldr	r3, [r3, #0]
 8008d4c:	2b00      	cmp	r3, #0
 8008d4e:	d01b      	beq.n	8008d88 <vTaskDelete+0xbc>
		{
			if( pxTCB == pxCurrentTCB )
 8008d50:	4b0f      	ldr	r3, [pc, #60]	; (8008d90 <vTaskDelete+0xc4>)
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	68fa      	ldr	r2, [r7, #12]
 8008d56:	429a      	cmp	r2, r3
 8008d58:	d116      	bne.n	8008d88 <vTaskDelete+0xbc>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 8008d5a:	4b13      	ldr	r3, [pc, #76]	; (8008da8 <vTaskDelete+0xdc>)
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	2b00      	cmp	r3, #0
 8008d60:	d00a      	beq.n	8008d78 <vTaskDelete+0xac>
	__asm volatile
 8008d62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d66:	f383 8811 	msr	BASEPRI, r3
 8008d6a:	f3bf 8f6f 	isb	sy
 8008d6e:	f3bf 8f4f 	dsb	sy
 8008d72:	60bb      	str	r3, [r7, #8]
}
 8008d74:	bf00      	nop
 8008d76:	e7fe      	b.n	8008d76 <vTaskDelete+0xaa>
				portYIELD_WITHIN_API();
 8008d78:	4b0c      	ldr	r3, [pc, #48]	; (8008dac <vTaskDelete+0xe0>)
 8008d7a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008d7e:	601a      	str	r2, [r3, #0]
 8008d80:	f3bf 8f4f 	dsb	sy
 8008d84:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8008d88:	bf00      	nop
 8008d8a:	3710      	adds	r7, #16
 8008d8c:	46bd      	mov	sp, r7
 8008d8e:	bd80      	pop	{r7, pc}
 8008d90:	2000310c 	.word	0x2000310c
 8008d94:	200035fc 	.word	0x200035fc
 8008d98:	200035b4 	.word	0x200035b4
 8008d9c:	200035c8 	.word	0x200035c8
 8008da0:	200035e0 	.word	0x200035e0
 8008da4:	200035ec 	.word	0x200035ec
 8008da8:	20003608 	.word	0x20003608
 8008dac:	e000ed04 	.word	0xe000ed04

08008db0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8008db0:	b580      	push	{r7, lr}
 8008db2:	b084      	sub	sp, #16
 8008db4:	af00      	add	r7, sp, #0
 8008db6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8008db8:	2300      	movs	r3, #0
 8008dba:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	2b00      	cmp	r3, #0
 8008dc0:	d017      	beq.n	8008df2 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8008dc2:	4b13      	ldr	r3, [pc, #76]	; (8008e10 <vTaskDelay+0x60>)
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	2b00      	cmp	r3, #0
 8008dc8:	d00a      	beq.n	8008de0 <vTaskDelay+0x30>
	__asm volatile
 8008dca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008dce:	f383 8811 	msr	BASEPRI, r3
 8008dd2:	f3bf 8f6f 	isb	sy
 8008dd6:	f3bf 8f4f 	dsb	sy
 8008dda:	60bb      	str	r3, [r7, #8]
}
 8008ddc:	bf00      	nop
 8008dde:	e7fe      	b.n	8008dde <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8008de0:	f000 f88a 	bl	8008ef8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8008de4:	2100      	movs	r1, #0
 8008de6:	6878      	ldr	r0, [r7, #4]
 8008de8:	f000 fe42 	bl	8009a70 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8008dec:	f000 f892 	bl	8008f14 <xTaskResumeAll>
 8008df0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8008df2:	68fb      	ldr	r3, [r7, #12]
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	d107      	bne.n	8008e08 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8008df8:	4b06      	ldr	r3, [pc, #24]	; (8008e14 <vTaskDelay+0x64>)
 8008dfa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008dfe:	601a      	str	r2, [r3, #0]
 8008e00:	f3bf 8f4f 	dsb	sy
 8008e04:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008e08:	bf00      	nop
 8008e0a:	3710      	adds	r7, #16
 8008e0c:	46bd      	mov	sp, r7
 8008e0e:	bd80      	pop	{r7, pc}
 8008e10:	20003608 	.word	0x20003608
 8008e14:	e000ed04 	.word	0xe000ed04

08008e18 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008e18:	b580      	push	{r7, lr}
 8008e1a:	b08a      	sub	sp, #40	; 0x28
 8008e1c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8008e1e:	2300      	movs	r3, #0
 8008e20:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8008e22:	2300      	movs	r3, #0
 8008e24:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8008e26:	463a      	mov	r2, r7
 8008e28:	1d39      	adds	r1, r7, #4
 8008e2a:	f107 0308 	add.w	r3, r7, #8
 8008e2e:	4618      	mov	r0, r3
 8008e30:	f7fe ff06 	bl	8007c40 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008e34:	6839      	ldr	r1, [r7, #0]
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	68ba      	ldr	r2, [r7, #8]
 8008e3a:	9202      	str	r2, [sp, #8]
 8008e3c:	9301      	str	r3, [sp, #4]
 8008e3e:	2300      	movs	r3, #0
 8008e40:	9300      	str	r3, [sp, #0]
 8008e42:	2300      	movs	r3, #0
 8008e44:	460a      	mov	r2, r1
 8008e46:	4924      	ldr	r1, [pc, #144]	; (8008ed8 <vTaskStartScheduler+0xc0>)
 8008e48:	4824      	ldr	r0, [pc, #144]	; (8008edc <vTaskStartScheduler+0xc4>)
 8008e4a:	f7ff fd87 	bl	800895c <xTaskCreateStatic>
 8008e4e:	4603      	mov	r3, r0
 8008e50:	4a23      	ldr	r2, [pc, #140]	; (8008ee0 <vTaskStartScheduler+0xc8>)
 8008e52:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8008e54:	4b22      	ldr	r3, [pc, #136]	; (8008ee0 <vTaskStartScheduler+0xc8>)
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	2b00      	cmp	r3, #0
 8008e5a:	d002      	beq.n	8008e62 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8008e5c:	2301      	movs	r3, #1
 8008e5e:	617b      	str	r3, [r7, #20]
 8008e60:	e001      	b.n	8008e66 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8008e62:	2300      	movs	r3, #0
 8008e64:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8008e66:	697b      	ldr	r3, [r7, #20]
 8008e68:	2b01      	cmp	r3, #1
 8008e6a:	d102      	bne.n	8008e72 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8008e6c:	f000 fe54 	bl	8009b18 <xTimerCreateTimerTask>
 8008e70:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8008e72:	697b      	ldr	r3, [r7, #20]
 8008e74:	2b01      	cmp	r3, #1
 8008e76:	d11b      	bne.n	8008eb0 <vTaskStartScheduler+0x98>
	__asm volatile
 8008e78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e7c:	f383 8811 	msr	BASEPRI, r3
 8008e80:	f3bf 8f6f 	isb	sy
 8008e84:	f3bf 8f4f 	dsb	sy
 8008e88:	613b      	str	r3, [r7, #16]
}
 8008e8a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008e8c:	4b15      	ldr	r3, [pc, #84]	; (8008ee4 <vTaskStartScheduler+0xcc>)
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	3354      	adds	r3, #84	; 0x54
 8008e92:	4a15      	ldr	r2, [pc, #84]	; (8008ee8 <vTaskStartScheduler+0xd0>)
 8008e94:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8008e96:	4b15      	ldr	r3, [pc, #84]	; (8008eec <vTaskStartScheduler+0xd4>)
 8008e98:	f04f 32ff 	mov.w	r2, #4294967295
 8008e9c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8008e9e:	4b14      	ldr	r3, [pc, #80]	; (8008ef0 <vTaskStartScheduler+0xd8>)
 8008ea0:	2201      	movs	r2, #1
 8008ea2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8008ea4:	4b13      	ldr	r3, [pc, #76]	; (8008ef4 <vTaskStartScheduler+0xdc>)
 8008ea6:	2200      	movs	r2, #0
 8008ea8:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8008eaa:	f001 fa11 	bl	800a2d0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8008eae:	e00e      	b.n	8008ece <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008eb0:	697b      	ldr	r3, [r7, #20]
 8008eb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008eb6:	d10a      	bne.n	8008ece <vTaskStartScheduler+0xb6>
	__asm volatile
 8008eb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ebc:	f383 8811 	msr	BASEPRI, r3
 8008ec0:	f3bf 8f6f 	isb	sy
 8008ec4:	f3bf 8f4f 	dsb	sy
 8008ec8:	60fb      	str	r3, [r7, #12]
}
 8008eca:	bf00      	nop
 8008ecc:	e7fe      	b.n	8008ecc <vTaskStartScheduler+0xb4>
}
 8008ece:	bf00      	nop
 8008ed0:	3718      	adds	r7, #24
 8008ed2:	46bd      	mov	sp, r7
 8008ed4:	bd80      	pop	{r7, pc}
 8008ed6:	bf00      	nop
 8008ed8:	0800c300 	.word	0x0800c300
 8008edc:	0800951d 	.word	0x0800951d
 8008ee0:	20003604 	.word	0x20003604
 8008ee4:	2000310c 	.word	0x2000310c
 8008ee8:	20000018 	.word	0x20000018
 8008eec:	20003600 	.word	0x20003600
 8008ef0:	200035ec 	.word	0x200035ec
 8008ef4:	200035e4 	.word	0x200035e4

08008ef8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008ef8:	b480      	push	{r7}
 8008efa:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8008efc:	4b04      	ldr	r3, [pc, #16]	; (8008f10 <vTaskSuspendAll+0x18>)
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	3301      	adds	r3, #1
 8008f02:	4a03      	ldr	r2, [pc, #12]	; (8008f10 <vTaskSuspendAll+0x18>)
 8008f04:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8008f06:	bf00      	nop
 8008f08:	46bd      	mov	sp, r7
 8008f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f0e:	4770      	bx	lr
 8008f10:	20003608 	.word	0x20003608

08008f14 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008f14:	b580      	push	{r7, lr}
 8008f16:	b084      	sub	sp, #16
 8008f18:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8008f1a:	2300      	movs	r3, #0
 8008f1c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8008f1e:	2300      	movs	r3, #0
 8008f20:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8008f22:	4b42      	ldr	r3, [pc, #264]	; (800902c <xTaskResumeAll+0x118>)
 8008f24:	681b      	ldr	r3, [r3, #0]
 8008f26:	2b00      	cmp	r3, #0
 8008f28:	d10a      	bne.n	8008f40 <xTaskResumeAll+0x2c>
	__asm volatile
 8008f2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f2e:	f383 8811 	msr	BASEPRI, r3
 8008f32:	f3bf 8f6f 	isb	sy
 8008f36:	f3bf 8f4f 	dsb	sy
 8008f3a:	603b      	str	r3, [r7, #0]
}
 8008f3c:	bf00      	nop
 8008f3e:	e7fe      	b.n	8008f3e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008f40:	f001 fa68 	bl	800a414 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8008f44:	4b39      	ldr	r3, [pc, #228]	; (800902c <xTaskResumeAll+0x118>)
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	3b01      	subs	r3, #1
 8008f4a:	4a38      	ldr	r2, [pc, #224]	; (800902c <xTaskResumeAll+0x118>)
 8008f4c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008f4e:	4b37      	ldr	r3, [pc, #220]	; (800902c <xTaskResumeAll+0x118>)
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	2b00      	cmp	r3, #0
 8008f54:	d162      	bne.n	800901c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008f56:	4b36      	ldr	r3, [pc, #216]	; (8009030 <xTaskResumeAll+0x11c>)
 8008f58:	681b      	ldr	r3, [r3, #0]
 8008f5a:	2b00      	cmp	r3, #0
 8008f5c:	d05e      	beq.n	800901c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008f5e:	e02f      	b.n	8008fc0 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008f60:	4b34      	ldr	r3, [pc, #208]	; (8009034 <xTaskResumeAll+0x120>)
 8008f62:	68db      	ldr	r3, [r3, #12]
 8008f64:	68db      	ldr	r3, [r3, #12]
 8008f66:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008f68:	68fb      	ldr	r3, [r7, #12]
 8008f6a:	3318      	adds	r3, #24
 8008f6c:	4618      	mov	r0, r3
 8008f6e:	f7fe ff25 	bl	8007dbc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008f72:	68fb      	ldr	r3, [r7, #12]
 8008f74:	3304      	adds	r3, #4
 8008f76:	4618      	mov	r0, r3
 8008f78:	f7fe ff20 	bl	8007dbc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008f7c:	68fb      	ldr	r3, [r7, #12]
 8008f7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f80:	4b2d      	ldr	r3, [pc, #180]	; (8009038 <xTaskResumeAll+0x124>)
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	429a      	cmp	r2, r3
 8008f86:	d903      	bls.n	8008f90 <xTaskResumeAll+0x7c>
 8008f88:	68fb      	ldr	r3, [r7, #12]
 8008f8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f8c:	4a2a      	ldr	r2, [pc, #168]	; (8009038 <xTaskResumeAll+0x124>)
 8008f8e:	6013      	str	r3, [r2, #0]
 8008f90:	68fb      	ldr	r3, [r7, #12]
 8008f92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f94:	4613      	mov	r3, r2
 8008f96:	009b      	lsls	r3, r3, #2
 8008f98:	4413      	add	r3, r2
 8008f9a:	009b      	lsls	r3, r3, #2
 8008f9c:	4a27      	ldr	r2, [pc, #156]	; (800903c <xTaskResumeAll+0x128>)
 8008f9e:	441a      	add	r2, r3
 8008fa0:	68fb      	ldr	r3, [r7, #12]
 8008fa2:	3304      	adds	r3, #4
 8008fa4:	4619      	mov	r1, r3
 8008fa6:	4610      	mov	r0, r2
 8008fa8:	f7fe feab 	bl	8007d02 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008fac:	68fb      	ldr	r3, [r7, #12]
 8008fae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008fb0:	4b23      	ldr	r3, [pc, #140]	; (8009040 <xTaskResumeAll+0x12c>)
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008fb6:	429a      	cmp	r2, r3
 8008fb8:	d302      	bcc.n	8008fc0 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8008fba:	4b22      	ldr	r3, [pc, #136]	; (8009044 <xTaskResumeAll+0x130>)
 8008fbc:	2201      	movs	r2, #1
 8008fbe:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008fc0:	4b1c      	ldr	r3, [pc, #112]	; (8009034 <xTaskResumeAll+0x120>)
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	2b00      	cmp	r3, #0
 8008fc6:	d1cb      	bne.n	8008f60 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8008fc8:	68fb      	ldr	r3, [r7, #12]
 8008fca:	2b00      	cmp	r3, #0
 8008fcc:	d001      	beq.n	8008fd2 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008fce:	f000 fb5f 	bl	8009690 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8008fd2:	4b1d      	ldr	r3, [pc, #116]	; (8009048 <xTaskResumeAll+0x134>)
 8008fd4:	681b      	ldr	r3, [r3, #0]
 8008fd6:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	2b00      	cmp	r3, #0
 8008fdc:	d010      	beq.n	8009000 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008fde:	f000 f847 	bl	8009070 <xTaskIncrementTick>
 8008fe2:	4603      	mov	r3, r0
 8008fe4:	2b00      	cmp	r3, #0
 8008fe6:	d002      	beq.n	8008fee <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8008fe8:	4b16      	ldr	r3, [pc, #88]	; (8009044 <xTaskResumeAll+0x130>)
 8008fea:	2201      	movs	r2, #1
 8008fec:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	3b01      	subs	r3, #1
 8008ff2:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	2b00      	cmp	r3, #0
 8008ff8:	d1f1      	bne.n	8008fde <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8008ffa:	4b13      	ldr	r3, [pc, #76]	; (8009048 <xTaskResumeAll+0x134>)
 8008ffc:	2200      	movs	r2, #0
 8008ffe:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8009000:	4b10      	ldr	r3, [pc, #64]	; (8009044 <xTaskResumeAll+0x130>)
 8009002:	681b      	ldr	r3, [r3, #0]
 8009004:	2b00      	cmp	r3, #0
 8009006:	d009      	beq.n	800901c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8009008:	2301      	movs	r3, #1
 800900a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800900c:	4b0f      	ldr	r3, [pc, #60]	; (800904c <xTaskResumeAll+0x138>)
 800900e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009012:	601a      	str	r2, [r3, #0]
 8009014:	f3bf 8f4f 	dsb	sy
 8009018:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800901c:	f001 fa2a 	bl	800a474 <vPortExitCritical>

	return xAlreadyYielded;
 8009020:	68bb      	ldr	r3, [r7, #8]
}
 8009022:	4618      	mov	r0, r3
 8009024:	3710      	adds	r7, #16
 8009026:	46bd      	mov	sp, r7
 8009028:	bd80      	pop	{r7, pc}
 800902a:	bf00      	nop
 800902c:	20003608 	.word	0x20003608
 8009030:	200035e0 	.word	0x200035e0
 8009034:	200035a0 	.word	0x200035a0
 8009038:	200035e8 	.word	0x200035e8
 800903c:	20003110 	.word	0x20003110
 8009040:	2000310c 	.word	0x2000310c
 8009044:	200035f4 	.word	0x200035f4
 8009048:	200035f0 	.word	0x200035f0
 800904c:	e000ed04 	.word	0xe000ed04

08009050 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8009050:	b480      	push	{r7}
 8009052:	b083      	sub	sp, #12
 8009054:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8009056:	4b05      	ldr	r3, [pc, #20]	; (800906c <xTaskGetTickCount+0x1c>)
 8009058:	681b      	ldr	r3, [r3, #0]
 800905a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800905c:	687b      	ldr	r3, [r7, #4]
}
 800905e:	4618      	mov	r0, r3
 8009060:	370c      	adds	r7, #12
 8009062:	46bd      	mov	sp, r7
 8009064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009068:	4770      	bx	lr
 800906a:	bf00      	nop
 800906c:	200035e4 	.word	0x200035e4

08009070 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009070:	b580      	push	{r7, lr}
 8009072:	b086      	sub	sp, #24
 8009074:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8009076:	2300      	movs	r3, #0
 8009078:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800907a:	4b4f      	ldr	r3, [pc, #316]	; (80091b8 <xTaskIncrementTick+0x148>)
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	2b00      	cmp	r3, #0
 8009080:	f040 808f 	bne.w	80091a2 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8009084:	4b4d      	ldr	r3, [pc, #308]	; (80091bc <xTaskIncrementTick+0x14c>)
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	3301      	adds	r3, #1
 800908a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800908c:	4a4b      	ldr	r2, [pc, #300]	; (80091bc <xTaskIncrementTick+0x14c>)
 800908e:	693b      	ldr	r3, [r7, #16]
 8009090:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8009092:	693b      	ldr	r3, [r7, #16]
 8009094:	2b00      	cmp	r3, #0
 8009096:	d120      	bne.n	80090da <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8009098:	4b49      	ldr	r3, [pc, #292]	; (80091c0 <xTaskIncrementTick+0x150>)
 800909a:	681b      	ldr	r3, [r3, #0]
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	2b00      	cmp	r3, #0
 80090a0:	d00a      	beq.n	80090b8 <xTaskIncrementTick+0x48>
	__asm volatile
 80090a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090a6:	f383 8811 	msr	BASEPRI, r3
 80090aa:	f3bf 8f6f 	isb	sy
 80090ae:	f3bf 8f4f 	dsb	sy
 80090b2:	603b      	str	r3, [r7, #0]
}
 80090b4:	bf00      	nop
 80090b6:	e7fe      	b.n	80090b6 <xTaskIncrementTick+0x46>
 80090b8:	4b41      	ldr	r3, [pc, #260]	; (80091c0 <xTaskIncrementTick+0x150>)
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	60fb      	str	r3, [r7, #12]
 80090be:	4b41      	ldr	r3, [pc, #260]	; (80091c4 <xTaskIncrementTick+0x154>)
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	4a3f      	ldr	r2, [pc, #252]	; (80091c0 <xTaskIncrementTick+0x150>)
 80090c4:	6013      	str	r3, [r2, #0]
 80090c6:	4a3f      	ldr	r2, [pc, #252]	; (80091c4 <xTaskIncrementTick+0x154>)
 80090c8:	68fb      	ldr	r3, [r7, #12]
 80090ca:	6013      	str	r3, [r2, #0]
 80090cc:	4b3e      	ldr	r3, [pc, #248]	; (80091c8 <xTaskIncrementTick+0x158>)
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	3301      	adds	r3, #1
 80090d2:	4a3d      	ldr	r2, [pc, #244]	; (80091c8 <xTaskIncrementTick+0x158>)
 80090d4:	6013      	str	r3, [r2, #0]
 80090d6:	f000 fadb 	bl	8009690 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80090da:	4b3c      	ldr	r3, [pc, #240]	; (80091cc <xTaskIncrementTick+0x15c>)
 80090dc:	681b      	ldr	r3, [r3, #0]
 80090de:	693a      	ldr	r2, [r7, #16]
 80090e0:	429a      	cmp	r2, r3
 80090e2:	d349      	bcc.n	8009178 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80090e4:	4b36      	ldr	r3, [pc, #216]	; (80091c0 <xTaskIncrementTick+0x150>)
 80090e6:	681b      	ldr	r3, [r3, #0]
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	2b00      	cmp	r3, #0
 80090ec:	d104      	bne.n	80090f8 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80090ee:	4b37      	ldr	r3, [pc, #220]	; (80091cc <xTaskIncrementTick+0x15c>)
 80090f0:	f04f 32ff 	mov.w	r2, #4294967295
 80090f4:	601a      	str	r2, [r3, #0]
					break;
 80090f6:	e03f      	b.n	8009178 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80090f8:	4b31      	ldr	r3, [pc, #196]	; (80091c0 <xTaskIncrementTick+0x150>)
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	68db      	ldr	r3, [r3, #12]
 80090fe:	68db      	ldr	r3, [r3, #12]
 8009100:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8009102:	68bb      	ldr	r3, [r7, #8]
 8009104:	685b      	ldr	r3, [r3, #4]
 8009106:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8009108:	693a      	ldr	r2, [r7, #16]
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	429a      	cmp	r2, r3
 800910e:	d203      	bcs.n	8009118 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8009110:	4a2e      	ldr	r2, [pc, #184]	; (80091cc <xTaskIncrementTick+0x15c>)
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8009116:	e02f      	b.n	8009178 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009118:	68bb      	ldr	r3, [r7, #8]
 800911a:	3304      	adds	r3, #4
 800911c:	4618      	mov	r0, r3
 800911e:	f7fe fe4d 	bl	8007dbc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009122:	68bb      	ldr	r3, [r7, #8]
 8009124:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009126:	2b00      	cmp	r3, #0
 8009128:	d004      	beq.n	8009134 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800912a:	68bb      	ldr	r3, [r7, #8]
 800912c:	3318      	adds	r3, #24
 800912e:	4618      	mov	r0, r3
 8009130:	f7fe fe44 	bl	8007dbc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8009134:	68bb      	ldr	r3, [r7, #8]
 8009136:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009138:	4b25      	ldr	r3, [pc, #148]	; (80091d0 <xTaskIncrementTick+0x160>)
 800913a:	681b      	ldr	r3, [r3, #0]
 800913c:	429a      	cmp	r2, r3
 800913e:	d903      	bls.n	8009148 <xTaskIncrementTick+0xd8>
 8009140:	68bb      	ldr	r3, [r7, #8]
 8009142:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009144:	4a22      	ldr	r2, [pc, #136]	; (80091d0 <xTaskIncrementTick+0x160>)
 8009146:	6013      	str	r3, [r2, #0]
 8009148:	68bb      	ldr	r3, [r7, #8]
 800914a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800914c:	4613      	mov	r3, r2
 800914e:	009b      	lsls	r3, r3, #2
 8009150:	4413      	add	r3, r2
 8009152:	009b      	lsls	r3, r3, #2
 8009154:	4a1f      	ldr	r2, [pc, #124]	; (80091d4 <xTaskIncrementTick+0x164>)
 8009156:	441a      	add	r2, r3
 8009158:	68bb      	ldr	r3, [r7, #8]
 800915a:	3304      	adds	r3, #4
 800915c:	4619      	mov	r1, r3
 800915e:	4610      	mov	r0, r2
 8009160:	f7fe fdcf 	bl	8007d02 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009164:	68bb      	ldr	r3, [r7, #8]
 8009166:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009168:	4b1b      	ldr	r3, [pc, #108]	; (80091d8 <xTaskIncrementTick+0x168>)
 800916a:	681b      	ldr	r3, [r3, #0]
 800916c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800916e:	429a      	cmp	r2, r3
 8009170:	d3b8      	bcc.n	80090e4 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8009172:	2301      	movs	r3, #1
 8009174:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009176:	e7b5      	b.n	80090e4 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8009178:	4b17      	ldr	r3, [pc, #92]	; (80091d8 <xTaskIncrementTick+0x168>)
 800917a:	681b      	ldr	r3, [r3, #0]
 800917c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800917e:	4915      	ldr	r1, [pc, #84]	; (80091d4 <xTaskIncrementTick+0x164>)
 8009180:	4613      	mov	r3, r2
 8009182:	009b      	lsls	r3, r3, #2
 8009184:	4413      	add	r3, r2
 8009186:	009b      	lsls	r3, r3, #2
 8009188:	440b      	add	r3, r1
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	2b01      	cmp	r3, #1
 800918e:	d901      	bls.n	8009194 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8009190:	2301      	movs	r3, #1
 8009192:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8009194:	4b11      	ldr	r3, [pc, #68]	; (80091dc <xTaskIncrementTick+0x16c>)
 8009196:	681b      	ldr	r3, [r3, #0]
 8009198:	2b00      	cmp	r3, #0
 800919a:	d007      	beq.n	80091ac <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800919c:	2301      	movs	r3, #1
 800919e:	617b      	str	r3, [r7, #20]
 80091a0:	e004      	b.n	80091ac <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80091a2:	4b0f      	ldr	r3, [pc, #60]	; (80091e0 <xTaskIncrementTick+0x170>)
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	3301      	adds	r3, #1
 80091a8:	4a0d      	ldr	r2, [pc, #52]	; (80091e0 <xTaskIncrementTick+0x170>)
 80091aa:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80091ac:	697b      	ldr	r3, [r7, #20]
}
 80091ae:	4618      	mov	r0, r3
 80091b0:	3718      	adds	r7, #24
 80091b2:	46bd      	mov	sp, r7
 80091b4:	bd80      	pop	{r7, pc}
 80091b6:	bf00      	nop
 80091b8:	20003608 	.word	0x20003608
 80091bc:	200035e4 	.word	0x200035e4
 80091c0:	20003598 	.word	0x20003598
 80091c4:	2000359c 	.word	0x2000359c
 80091c8:	200035f8 	.word	0x200035f8
 80091cc:	20003600 	.word	0x20003600
 80091d0:	200035e8 	.word	0x200035e8
 80091d4:	20003110 	.word	0x20003110
 80091d8:	2000310c 	.word	0x2000310c
 80091dc:	200035f4 	.word	0x200035f4
 80091e0:	200035f0 	.word	0x200035f0

080091e4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80091e4:	b480      	push	{r7}
 80091e6:	b085      	sub	sp, #20
 80091e8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80091ea:	4b2a      	ldr	r3, [pc, #168]	; (8009294 <vTaskSwitchContext+0xb0>)
 80091ec:	681b      	ldr	r3, [r3, #0]
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	d003      	beq.n	80091fa <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80091f2:	4b29      	ldr	r3, [pc, #164]	; (8009298 <vTaskSwitchContext+0xb4>)
 80091f4:	2201      	movs	r2, #1
 80091f6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80091f8:	e046      	b.n	8009288 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 80091fa:	4b27      	ldr	r3, [pc, #156]	; (8009298 <vTaskSwitchContext+0xb4>)
 80091fc:	2200      	movs	r2, #0
 80091fe:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009200:	4b26      	ldr	r3, [pc, #152]	; (800929c <vTaskSwitchContext+0xb8>)
 8009202:	681b      	ldr	r3, [r3, #0]
 8009204:	60fb      	str	r3, [r7, #12]
 8009206:	e010      	b.n	800922a <vTaskSwitchContext+0x46>
 8009208:	68fb      	ldr	r3, [r7, #12]
 800920a:	2b00      	cmp	r3, #0
 800920c:	d10a      	bne.n	8009224 <vTaskSwitchContext+0x40>
	__asm volatile
 800920e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009212:	f383 8811 	msr	BASEPRI, r3
 8009216:	f3bf 8f6f 	isb	sy
 800921a:	f3bf 8f4f 	dsb	sy
 800921e:	607b      	str	r3, [r7, #4]
}
 8009220:	bf00      	nop
 8009222:	e7fe      	b.n	8009222 <vTaskSwitchContext+0x3e>
 8009224:	68fb      	ldr	r3, [r7, #12]
 8009226:	3b01      	subs	r3, #1
 8009228:	60fb      	str	r3, [r7, #12]
 800922a:	491d      	ldr	r1, [pc, #116]	; (80092a0 <vTaskSwitchContext+0xbc>)
 800922c:	68fa      	ldr	r2, [r7, #12]
 800922e:	4613      	mov	r3, r2
 8009230:	009b      	lsls	r3, r3, #2
 8009232:	4413      	add	r3, r2
 8009234:	009b      	lsls	r3, r3, #2
 8009236:	440b      	add	r3, r1
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	2b00      	cmp	r3, #0
 800923c:	d0e4      	beq.n	8009208 <vTaskSwitchContext+0x24>
 800923e:	68fa      	ldr	r2, [r7, #12]
 8009240:	4613      	mov	r3, r2
 8009242:	009b      	lsls	r3, r3, #2
 8009244:	4413      	add	r3, r2
 8009246:	009b      	lsls	r3, r3, #2
 8009248:	4a15      	ldr	r2, [pc, #84]	; (80092a0 <vTaskSwitchContext+0xbc>)
 800924a:	4413      	add	r3, r2
 800924c:	60bb      	str	r3, [r7, #8]
 800924e:	68bb      	ldr	r3, [r7, #8]
 8009250:	685b      	ldr	r3, [r3, #4]
 8009252:	685a      	ldr	r2, [r3, #4]
 8009254:	68bb      	ldr	r3, [r7, #8]
 8009256:	605a      	str	r2, [r3, #4]
 8009258:	68bb      	ldr	r3, [r7, #8]
 800925a:	685a      	ldr	r2, [r3, #4]
 800925c:	68bb      	ldr	r3, [r7, #8]
 800925e:	3308      	adds	r3, #8
 8009260:	429a      	cmp	r2, r3
 8009262:	d104      	bne.n	800926e <vTaskSwitchContext+0x8a>
 8009264:	68bb      	ldr	r3, [r7, #8]
 8009266:	685b      	ldr	r3, [r3, #4]
 8009268:	685a      	ldr	r2, [r3, #4]
 800926a:	68bb      	ldr	r3, [r7, #8]
 800926c:	605a      	str	r2, [r3, #4]
 800926e:	68bb      	ldr	r3, [r7, #8]
 8009270:	685b      	ldr	r3, [r3, #4]
 8009272:	68db      	ldr	r3, [r3, #12]
 8009274:	4a0b      	ldr	r2, [pc, #44]	; (80092a4 <vTaskSwitchContext+0xc0>)
 8009276:	6013      	str	r3, [r2, #0]
 8009278:	4a08      	ldr	r2, [pc, #32]	; (800929c <vTaskSwitchContext+0xb8>)
 800927a:	68fb      	ldr	r3, [r7, #12]
 800927c:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800927e:	4b09      	ldr	r3, [pc, #36]	; (80092a4 <vTaskSwitchContext+0xc0>)
 8009280:	681b      	ldr	r3, [r3, #0]
 8009282:	3354      	adds	r3, #84	; 0x54
 8009284:	4a08      	ldr	r2, [pc, #32]	; (80092a8 <vTaskSwitchContext+0xc4>)
 8009286:	6013      	str	r3, [r2, #0]
}
 8009288:	bf00      	nop
 800928a:	3714      	adds	r7, #20
 800928c:	46bd      	mov	sp, r7
 800928e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009292:	4770      	bx	lr
 8009294:	20003608 	.word	0x20003608
 8009298:	200035f4 	.word	0x200035f4
 800929c:	200035e8 	.word	0x200035e8
 80092a0:	20003110 	.word	0x20003110
 80092a4:	2000310c 	.word	0x2000310c
 80092a8:	20000018 	.word	0x20000018

080092ac <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80092ac:	b580      	push	{r7, lr}
 80092ae:	b084      	sub	sp, #16
 80092b0:	af00      	add	r7, sp, #0
 80092b2:	6078      	str	r0, [r7, #4]
 80092b4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	2b00      	cmp	r3, #0
 80092ba:	d10a      	bne.n	80092d2 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80092bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092c0:	f383 8811 	msr	BASEPRI, r3
 80092c4:	f3bf 8f6f 	isb	sy
 80092c8:	f3bf 8f4f 	dsb	sy
 80092cc:	60fb      	str	r3, [r7, #12]
}
 80092ce:	bf00      	nop
 80092d0:	e7fe      	b.n	80092d0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80092d2:	4b07      	ldr	r3, [pc, #28]	; (80092f0 <vTaskPlaceOnEventList+0x44>)
 80092d4:	681b      	ldr	r3, [r3, #0]
 80092d6:	3318      	adds	r3, #24
 80092d8:	4619      	mov	r1, r3
 80092da:	6878      	ldr	r0, [r7, #4]
 80092dc:	f7fe fd35 	bl	8007d4a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80092e0:	2101      	movs	r1, #1
 80092e2:	6838      	ldr	r0, [r7, #0]
 80092e4:	f000 fbc4 	bl	8009a70 <prvAddCurrentTaskToDelayedList>
}
 80092e8:	bf00      	nop
 80092ea:	3710      	adds	r7, #16
 80092ec:	46bd      	mov	sp, r7
 80092ee:	bd80      	pop	{r7, pc}
 80092f0:	2000310c 	.word	0x2000310c

080092f4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80092f4:	b580      	push	{r7, lr}
 80092f6:	b086      	sub	sp, #24
 80092f8:	af00      	add	r7, sp, #0
 80092fa:	60f8      	str	r0, [r7, #12]
 80092fc:	60b9      	str	r1, [r7, #8]
 80092fe:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8009300:	68fb      	ldr	r3, [r7, #12]
 8009302:	2b00      	cmp	r3, #0
 8009304:	d10a      	bne.n	800931c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8009306:	f04f 0350 	mov.w	r3, #80	; 0x50
 800930a:	f383 8811 	msr	BASEPRI, r3
 800930e:	f3bf 8f6f 	isb	sy
 8009312:	f3bf 8f4f 	dsb	sy
 8009316:	617b      	str	r3, [r7, #20]
}
 8009318:	bf00      	nop
 800931a:	e7fe      	b.n	800931a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800931c:	4b0a      	ldr	r3, [pc, #40]	; (8009348 <vTaskPlaceOnEventListRestricted+0x54>)
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	3318      	adds	r3, #24
 8009322:	4619      	mov	r1, r3
 8009324:	68f8      	ldr	r0, [r7, #12]
 8009326:	f7fe fcec 	bl	8007d02 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	2b00      	cmp	r3, #0
 800932e:	d002      	beq.n	8009336 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8009330:	f04f 33ff 	mov.w	r3, #4294967295
 8009334:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8009336:	6879      	ldr	r1, [r7, #4]
 8009338:	68b8      	ldr	r0, [r7, #8]
 800933a:	f000 fb99 	bl	8009a70 <prvAddCurrentTaskToDelayedList>
	}
 800933e:	bf00      	nop
 8009340:	3718      	adds	r7, #24
 8009342:	46bd      	mov	sp, r7
 8009344:	bd80      	pop	{r7, pc}
 8009346:	bf00      	nop
 8009348:	2000310c 	.word	0x2000310c

0800934c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800934c:	b580      	push	{r7, lr}
 800934e:	b086      	sub	sp, #24
 8009350:	af00      	add	r7, sp, #0
 8009352:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	68db      	ldr	r3, [r3, #12]
 8009358:	68db      	ldr	r3, [r3, #12]
 800935a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800935c:	693b      	ldr	r3, [r7, #16]
 800935e:	2b00      	cmp	r3, #0
 8009360:	d10a      	bne.n	8009378 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8009362:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009366:	f383 8811 	msr	BASEPRI, r3
 800936a:	f3bf 8f6f 	isb	sy
 800936e:	f3bf 8f4f 	dsb	sy
 8009372:	60fb      	str	r3, [r7, #12]
}
 8009374:	bf00      	nop
 8009376:	e7fe      	b.n	8009376 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8009378:	693b      	ldr	r3, [r7, #16]
 800937a:	3318      	adds	r3, #24
 800937c:	4618      	mov	r0, r3
 800937e:	f7fe fd1d 	bl	8007dbc <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009382:	4b1e      	ldr	r3, [pc, #120]	; (80093fc <xTaskRemoveFromEventList+0xb0>)
 8009384:	681b      	ldr	r3, [r3, #0]
 8009386:	2b00      	cmp	r3, #0
 8009388:	d11d      	bne.n	80093c6 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800938a:	693b      	ldr	r3, [r7, #16]
 800938c:	3304      	adds	r3, #4
 800938e:	4618      	mov	r0, r3
 8009390:	f7fe fd14 	bl	8007dbc <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8009394:	693b      	ldr	r3, [r7, #16]
 8009396:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009398:	4b19      	ldr	r3, [pc, #100]	; (8009400 <xTaskRemoveFromEventList+0xb4>)
 800939a:	681b      	ldr	r3, [r3, #0]
 800939c:	429a      	cmp	r2, r3
 800939e:	d903      	bls.n	80093a8 <xTaskRemoveFromEventList+0x5c>
 80093a0:	693b      	ldr	r3, [r7, #16]
 80093a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093a4:	4a16      	ldr	r2, [pc, #88]	; (8009400 <xTaskRemoveFromEventList+0xb4>)
 80093a6:	6013      	str	r3, [r2, #0]
 80093a8:	693b      	ldr	r3, [r7, #16]
 80093aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80093ac:	4613      	mov	r3, r2
 80093ae:	009b      	lsls	r3, r3, #2
 80093b0:	4413      	add	r3, r2
 80093b2:	009b      	lsls	r3, r3, #2
 80093b4:	4a13      	ldr	r2, [pc, #76]	; (8009404 <xTaskRemoveFromEventList+0xb8>)
 80093b6:	441a      	add	r2, r3
 80093b8:	693b      	ldr	r3, [r7, #16]
 80093ba:	3304      	adds	r3, #4
 80093bc:	4619      	mov	r1, r3
 80093be:	4610      	mov	r0, r2
 80093c0:	f7fe fc9f 	bl	8007d02 <vListInsertEnd>
 80093c4:	e005      	b.n	80093d2 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80093c6:	693b      	ldr	r3, [r7, #16]
 80093c8:	3318      	adds	r3, #24
 80093ca:	4619      	mov	r1, r3
 80093cc:	480e      	ldr	r0, [pc, #56]	; (8009408 <xTaskRemoveFromEventList+0xbc>)
 80093ce:	f7fe fc98 	bl	8007d02 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80093d2:	693b      	ldr	r3, [r7, #16]
 80093d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80093d6:	4b0d      	ldr	r3, [pc, #52]	; (800940c <xTaskRemoveFromEventList+0xc0>)
 80093d8:	681b      	ldr	r3, [r3, #0]
 80093da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093dc:	429a      	cmp	r2, r3
 80093de:	d905      	bls.n	80093ec <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80093e0:	2301      	movs	r3, #1
 80093e2:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80093e4:	4b0a      	ldr	r3, [pc, #40]	; (8009410 <xTaskRemoveFromEventList+0xc4>)
 80093e6:	2201      	movs	r2, #1
 80093e8:	601a      	str	r2, [r3, #0]
 80093ea:	e001      	b.n	80093f0 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80093ec:	2300      	movs	r3, #0
 80093ee:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80093f0:	697b      	ldr	r3, [r7, #20]
}
 80093f2:	4618      	mov	r0, r3
 80093f4:	3718      	adds	r7, #24
 80093f6:	46bd      	mov	sp, r7
 80093f8:	bd80      	pop	{r7, pc}
 80093fa:	bf00      	nop
 80093fc:	20003608 	.word	0x20003608
 8009400:	200035e8 	.word	0x200035e8
 8009404:	20003110 	.word	0x20003110
 8009408:	200035a0 	.word	0x200035a0
 800940c:	2000310c 	.word	0x2000310c
 8009410:	200035f4 	.word	0x200035f4

08009414 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8009414:	b480      	push	{r7}
 8009416:	b083      	sub	sp, #12
 8009418:	af00      	add	r7, sp, #0
 800941a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800941c:	4b06      	ldr	r3, [pc, #24]	; (8009438 <vTaskInternalSetTimeOutState+0x24>)
 800941e:	681a      	ldr	r2, [r3, #0]
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8009424:	4b05      	ldr	r3, [pc, #20]	; (800943c <vTaskInternalSetTimeOutState+0x28>)
 8009426:	681a      	ldr	r2, [r3, #0]
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	605a      	str	r2, [r3, #4]
}
 800942c:	bf00      	nop
 800942e:	370c      	adds	r7, #12
 8009430:	46bd      	mov	sp, r7
 8009432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009436:	4770      	bx	lr
 8009438:	200035f8 	.word	0x200035f8
 800943c:	200035e4 	.word	0x200035e4

08009440 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8009440:	b580      	push	{r7, lr}
 8009442:	b088      	sub	sp, #32
 8009444:	af00      	add	r7, sp, #0
 8009446:	6078      	str	r0, [r7, #4]
 8009448:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	2b00      	cmp	r3, #0
 800944e:	d10a      	bne.n	8009466 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8009450:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009454:	f383 8811 	msr	BASEPRI, r3
 8009458:	f3bf 8f6f 	isb	sy
 800945c:	f3bf 8f4f 	dsb	sy
 8009460:	613b      	str	r3, [r7, #16]
}
 8009462:	bf00      	nop
 8009464:	e7fe      	b.n	8009464 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8009466:	683b      	ldr	r3, [r7, #0]
 8009468:	2b00      	cmp	r3, #0
 800946a:	d10a      	bne.n	8009482 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800946c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009470:	f383 8811 	msr	BASEPRI, r3
 8009474:	f3bf 8f6f 	isb	sy
 8009478:	f3bf 8f4f 	dsb	sy
 800947c:	60fb      	str	r3, [r7, #12]
}
 800947e:	bf00      	nop
 8009480:	e7fe      	b.n	8009480 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8009482:	f000 ffc7 	bl	800a414 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8009486:	4b1d      	ldr	r3, [pc, #116]	; (80094fc <xTaskCheckForTimeOut+0xbc>)
 8009488:	681b      	ldr	r3, [r3, #0]
 800948a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	685b      	ldr	r3, [r3, #4]
 8009490:	69ba      	ldr	r2, [r7, #24]
 8009492:	1ad3      	subs	r3, r2, r3
 8009494:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8009496:	683b      	ldr	r3, [r7, #0]
 8009498:	681b      	ldr	r3, [r3, #0]
 800949a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800949e:	d102      	bne.n	80094a6 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80094a0:	2300      	movs	r3, #0
 80094a2:	61fb      	str	r3, [r7, #28]
 80094a4:	e023      	b.n	80094ee <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	681a      	ldr	r2, [r3, #0]
 80094aa:	4b15      	ldr	r3, [pc, #84]	; (8009500 <xTaskCheckForTimeOut+0xc0>)
 80094ac:	681b      	ldr	r3, [r3, #0]
 80094ae:	429a      	cmp	r2, r3
 80094b0:	d007      	beq.n	80094c2 <xTaskCheckForTimeOut+0x82>
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	685b      	ldr	r3, [r3, #4]
 80094b6:	69ba      	ldr	r2, [r7, #24]
 80094b8:	429a      	cmp	r2, r3
 80094ba:	d302      	bcc.n	80094c2 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80094bc:	2301      	movs	r3, #1
 80094be:	61fb      	str	r3, [r7, #28]
 80094c0:	e015      	b.n	80094ee <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80094c2:	683b      	ldr	r3, [r7, #0]
 80094c4:	681b      	ldr	r3, [r3, #0]
 80094c6:	697a      	ldr	r2, [r7, #20]
 80094c8:	429a      	cmp	r2, r3
 80094ca:	d20b      	bcs.n	80094e4 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80094cc:	683b      	ldr	r3, [r7, #0]
 80094ce:	681a      	ldr	r2, [r3, #0]
 80094d0:	697b      	ldr	r3, [r7, #20]
 80094d2:	1ad2      	subs	r2, r2, r3
 80094d4:	683b      	ldr	r3, [r7, #0]
 80094d6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80094d8:	6878      	ldr	r0, [r7, #4]
 80094da:	f7ff ff9b 	bl	8009414 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80094de:	2300      	movs	r3, #0
 80094e0:	61fb      	str	r3, [r7, #28]
 80094e2:	e004      	b.n	80094ee <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80094e4:	683b      	ldr	r3, [r7, #0]
 80094e6:	2200      	movs	r2, #0
 80094e8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80094ea:	2301      	movs	r3, #1
 80094ec:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80094ee:	f000 ffc1 	bl	800a474 <vPortExitCritical>

	return xReturn;
 80094f2:	69fb      	ldr	r3, [r7, #28]
}
 80094f4:	4618      	mov	r0, r3
 80094f6:	3720      	adds	r7, #32
 80094f8:	46bd      	mov	sp, r7
 80094fa:	bd80      	pop	{r7, pc}
 80094fc:	200035e4 	.word	0x200035e4
 8009500:	200035f8 	.word	0x200035f8

08009504 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8009504:	b480      	push	{r7}
 8009506:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8009508:	4b03      	ldr	r3, [pc, #12]	; (8009518 <vTaskMissedYield+0x14>)
 800950a:	2201      	movs	r2, #1
 800950c:	601a      	str	r2, [r3, #0]
}
 800950e:	bf00      	nop
 8009510:	46bd      	mov	sp, r7
 8009512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009516:	4770      	bx	lr
 8009518:	200035f4 	.word	0x200035f4

0800951c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800951c:	b580      	push	{r7, lr}
 800951e:	b082      	sub	sp, #8
 8009520:	af00      	add	r7, sp, #0
 8009522:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8009524:	f000 f852 	bl	80095cc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8009528:	4b06      	ldr	r3, [pc, #24]	; (8009544 <prvIdleTask+0x28>)
 800952a:	681b      	ldr	r3, [r3, #0]
 800952c:	2b01      	cmp	r3, #1
 800952e:	d9f9      	bls.n	8009524 <prvIdleTask+0x8>
			{
				taskYIELD();
 8009530:	4b05      	ldr	r3, [pc, #20]	; (8009548 <prvIdleTask+0x2c>)
 8009532:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009536:	601a      	str	r2, [r3, #0]
 8009538:	f3bf 8f4f 	dsb	sy
 800953c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8009540:	e7f0      	b.n	8009524 <prvIdleTask+0x8>
 8009542:	bf00      	nop
 8009544:	20003110 	.word	0x20003110
 8009548:	e000ed04 	.word	0xe000ed04

0800954c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800954c:	b580      	push	{r7, lr}
 800954e:	b082      	sub	sp, #8
 8009550:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009552:	2300      	movs	r3, #0
 8009554:	607b      	str	r3, [r7, #4]
 8009556:	e00c      	b.n	8009572 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8009558:	687a      	ldr	r2, [r7, #4]
 800955a:	4613      	mov	r3, r2
 800955c:	009b      	lsls	r3, r3, #2
 800955e:	4413      	add	r3, r2
 8009560:	009b      	lsls	r3, r3, #2
 8009562:	4a12      	ldr	r2, [pc, #72]	; (80095ac <prvInitialiseTaskLists+0x60>)
 8009564:	4413      	add	r3, r2
 8009566:	4618      	mov	r0, r3
 8009568:	f7fe fb9e 	bl	8007ca8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	3301      	adds	r3, #1
 8009570:	607b      	str	r3, [r7, #4]
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	2b37      	cmp	r3, #55	; 0x37
 8009576:	d9ef      	bls.n	8009558 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8009578:	480d      	ldr	r0, [pc, #52]	; (80095b0 <prvInitialiseTaskLists+0x64>)
 800957a:	f7fe fb95 	bl	8007ca8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800957e:	480d      	ldr	r0, [pc, #52]	; (80095b4 <prvInitialiseTaskLists+0x68>)
 8009580:	f7fe fb92 	bl	8007ca8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8009584:	480c      	ldr	r0, [pc, #48]	; (80095b8 <prvInitialiseTaskLists+0x6c>)
 8009586:	f7fe fb8f 	bl	8007ca8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800958a:	480c      	ldr	r0, [pc, #48]	; (80095bc <prvInitialiseTaskLists+0x70>)
 800958c:	f7fe fb8c 	bl	8007ca8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8009590:	480b      	ldr	r0, [pc, #44]	; (80095c0 <prvInitialiseTaskLists+0x74>)
 8009592:	f7fe fb89 	bl	8007ca8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8009596:	4b0b      	ldr	r3, [pc, #44]	; (80095c4 <prvInitialiseTaskLists+0x78>)
 8009598:	4a05      	ldr	r2, [pc, #20]	; (80095b0 <prvInitialiseTaskLists+0x64>)
 800959a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800959c:	4b0a      	ldr	r3, [pc, #40]	; (80095c8 <prvInitialiseTaskLists+0x7c>)
 800959e:	4a05      	ldr	r2, [pc, #20]	; (80095b4 <prvInitialiseTaskLists+0x68>)
 80095a0:	601a      	str	r2, [r3, #0]
}
 80095a2:	bf00      	nop
 80095a4:	3708      	adds	r7, #8
 80095a6:	46bd      	mov	sp, r7
 80095a8:	bd80      	pop	{r7, pc}
 80095aa:	bf00      	nop
 80095ac:	20003110 	.word	0x20003110
 80095b0:	20003570 	.word	0x20003570
 80095b4:	20003584 	.word	0x20003584
 80095b8:	200035a0 	.word	0x200035a0
 80095bc:	200035b4 	.word	0x200035b4
 80095c0:	200035cc 	.word	0x200035cc
 80095c4:	20003598 	.word	0x20003598
 80095c8:	2000359c 	.word	0x2000359c

080095cc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80095cc:	b580      	push	{r7, lr}
 80095ce:	b082      	sub	sp, #8
 80095d0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80095d2:	e019      	b.n	8009608 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80095d4:	f000 ff1e 	bl	800a414 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80095d8:	4b10      	ldr	r3, [pc, #64]	; (800961c <prvCheckTasksWaitingTermination+0x50>)
 80095da:	68db      	ldr	r3, [r3, #12]
 80095dc:	68db      	ldr	r3, [r3, #12]
 80095de:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	3304      	adds	r3, #4
 80095e4:	4618      	mov	r0, r3
 80095e6:	f7fe fbe9 	bl	8007dbc <uxListRemove>
				--uxCurrentNumberOfTasks;
 80095ea:	4b0d      	ldr	r3, [pc, #52]	; (8009620 <prvCheckTasksWaitingTermination+0x54>)
 80095ec:	681b      	ldr	r3, [r3, #0]
 80095ee:	3b01      	subs	r3, #1
 80095f0:	4a0b      	ldr	r2, [pc, #44]	; (8009620 <prvCheckTasksWaitingTermination+0x54>)
 80095f2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80095f4:	4b0b      	ldr	r3, [pc, #44]	; (8009624 <prvCheckTasksWaitingTermination+0x58>)
 80095f6:	681b      	ldr	r3, [r3, #0]
 80095f8:	3b01      	subs	r3, #1
 80095fa:	4a0a      	ldr	r2, [pc, #40]	; (8009624 <prvCheckTasksWaitingTermination+0x58>)
 80095fc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80095fe:	f000 ff39 	bl	800a474 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8009602:	6878      	ldr	r0, [r7, #4]
 8009604:	f000 f810 	bl	8009628 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009608:	4b06      	ldr	r3, [pc, #24]	; (8009624 <prvCheckTasksWaitingTermination+0x58>)
 800960a:	681b      	ldr	r3, [r3, #0]
 800960c:	2b00      	cmp	r3, #0
 800960e:	d1e1      	bne.n	80095d4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8009610:	bf00      	nop
 8009612:	bf00      	nop
 8009614:	3708      	adds	r7, #8
 8009616:	46bd      	mov	sp, r7
 8009618:	bd80      	pop	{r7, pc}
 800961a:	bf00      	nop
 800961c:	200035b4 	.word	0x200035b4
 8009620:	200035e0 	.word	0x200035e0
 8009624:	200035c8 	.word	0x200035c8

08009628 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8009628:	b580      	push	{r7, lr}
 800962a:	b084      	sub	sp, #16
 800962c:	af00      	add	r7, sp, #0
 800962e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	3354      	adds	r3, #84	; 0x54
 8009634:	4618      	mov	r0, r3
 8009636:	f001 fc63 	bl	800af00 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8009640:	2b00      	cmp	r3, #0
 8009642:	d108      	bne.n	8009656 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009648:	4618      	mov	r0, r3
 800964a:	f001 f8d1 	bl	800a7f0 <vPortFree>
				vPortFree( pxTCB );
 800964e:	6878      	ldr	r0, [r7, #4]
 8009650:	f001 f8ce 	bl	800a7f0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8009654:	e018      	b.n	8009688 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800965c:	2b01      	cmp	r3, #1
 800965e:	d103      	bne.n	8009668 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8009660:	6878      	ldr	r0, [r7, #4]
 8009662:	f001 f8c5 	bl	800a7f0 <vPortFree>
	}
 8009666:	e00f      	b.n	8009688 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800966e:	2b02      	cmp	r3, #2
 8009670:	d00a      	beq.n	8009688 <prvDeleteTCB+0x60>
	__asm volatile
 8009672:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009676:	f383 8811 	msr	BASEPRI, r3
 800967a:	f3bf 8f6f 	isb	sy
 800967e:	f3bf 8f4f 	dsb	sy
 8009682:	60fb      	str	r3, [r7, #12]
}
 8009684:	bf00      	nop
 8009686:	e7fe      	b.n	8009686 <prvDeleteTCB+0x5e>
	}
 8009688:	bf00      	nop
 800968a:	3710      	adds	r7, #16
 800968c:	46bd      	mov	sp, r7
 800968e:	bd80      	pop	{r7, pc}

08009690 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009690:	b480      	push	{r7}
 8009692:	b083      	sub	sp, #12
 8009694:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009696:	4b0c      	ldr	r3, [pc, #48]	; (80096c8 <prvResetNextTaskUnblockTime+0x38>)
 8009698:	681b      	ldr	r3, [r3, #0]
 800969a:	681b      	ldr	r3, [r3, #0]
 800969c:	2b00      	cmp	r3, #0
 800969e:	d104      	bne.n	80096aa <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80096a0:	4b0a      	ldr	r3, [pc, #40]	; (80096cc <prvResetNextTaskUnblockTime+0x3c>)
 80096a2:	f04f 32ff 	mov.w	r2, #4294967295
 80096a6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80096a8:	e008      	b.n	80096bc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80096aa:	4b07      	ldr	r3, [pc, #28]	; (80096c8 <prvResetNextTaskUnblockTime+0x38>)
 80096ac:	681b      	ldr	r3, [r3, #0]
 80096ae:	68db      	ldr	r3, [r3, #12]
 80096b0:	68db      	ldr	r3, [r3, #12]
 80096b2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	685b      	ldr	r3, [r3, #4]
 80096b8:	4a04      	ldr	r2, [pc, #16]	; (80096cc <prvResetNextTaskUnblockTime+0x3c>)
 80096ba:	6013      	str	r3, [r2, #0]
}
 80096bc:	bf00      	nop
 80096be:	370c      	adds	r7, #12
 80096c0:	46bd      	mov	sp, r7
 80096c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096c6:	4770      	bx	lr
 80096c8:	20003598 	.word	0x20003598
 80096cc:	20003600 	.word	0x20003600

080096d0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80096d0:	b480      	push	{r7}
 80096d2:	b083      	sub	sp, #12
 80096d4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80096d6:	4b0b      	ldr	r3, [pc, #44]	; (8009704 <xTaskGetSchedulerState+0x34>)
 80096d8:	681b      	ldr	r3, [r3, #0]
 80096da:	2b00      	cmp	r3, #0
 80096dc:	d102      	bne.n	80096e4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80096de:	2301      	movs	r3, #1
 80096e0:	607b      	str	r3, [r7, #4]
 80096e2:	e008      	b.n	80096f6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80096e4:	4b08      	ldr	r3, [pc, #32]	; (8009708 <xTaskGetSchedulerState+0x38>)
 80096e6:	681b      	ldr	r3, [r3, #0]
 80096e8:	2b00      	cmp	r3, #0
 80096ea:	d102      	bne.n	80096f2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80096ec:	2302      	movs	r3, #2
 80096ee:	607b      	str	r3, [r7, #4]
 80096f0:	e001      	b.n	80096f6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80096f2:	2300      	movs	r3, #0
 80096f4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80096f6:	687b      	ldr	r3, [r7, #4]
	}
 80096f8:	4618      	mov	r0, r3
 80096fa:	370c      	adds	r7, #12
 80096fc:	46bd      	mov	sp, r7
 80096fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009702:	4770      	bx	lr
 8009704:	200035ec 	.word	0x200035ec
 8009708:	20003608 	.word	0x20003608

0800970c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800970c:	b580      	push	{r7, lr}
 800970e:	b086      	sub	sp, #24
 8009710:	af00      	add	r7, sp, #0
 8009712:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8009718:	2300      	movs	r3, #0
 800971a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	2b00      	cmp	r3, #0
 8009720:	d056      	beq.n	80097d0 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8009722:	4b2e      	ldr	r3, [pc, #184]	; (80097dc <xTaskPriorityDisinherit+0xd0>)
 8009724:	681b      	ldr	r3, [r3, #0]
 8009726:	693a      	ldr	r2, [r7, #16]
 8009728:	429a      	cmp	r2, r3
 800972a:	d00a      	beq.n	8009742 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800972c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009730:	f383 8811 	msr	BASEPRI, r3
 8009734:	f3bf 8f6f 	isb	sy
 8009738:	f3bf 8f4f 	dsb	sy
 800973c:	60fb      	str	r3, [r7, #12]
}
 800973e:	bf00      	nop
 8009740:	e7fe      	b.n	8009740 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8009742:	693b      	ldr	r3, [r7, #16]
 8009744:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009746:	2b00      	cmp	r3, #0
 8009748:	d10a      	bne.n	8009760 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800974a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800974e:	f383 8811 	msr	BASEPRI, r3
 8009752:	f3bf 8f6f 	isb	sy
 8009756:	f3bf 8f4f 	dsb	sy
 800975a:	60bb      	str	r3, [r7, #8]
}
 800975c:	bf00      	nop
 800975e:	e7fe      	b.n	800975e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8009760:	693b      	ldr	r3, [r7, #16]
 8009762:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009764:	1e5a      	subs	r2, r3, #1
 8009766:	693b      	ldr	r3, [r7, #16]
 8009768:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800976a:	693b      	ldr	r3, [r7, #16]
 800976c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800976e:	693b      	ldr	r3, [r7, #16]
 8009770:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009772:	429a      	cmp	r2, r3
 8009774:	d02c      	beq.n	80097d0 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8009776:	693b      	ldr	r3, [r7, #16]
 8009778:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800977a:	2b00      	cmp	r3, #0
 800977c:	d128      	bne.n	80097d0 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800977e:	693b      	ldr	r3, [r7, #16]
 8009780:	3304      	adds	r3, #4
 8009782:	4618      	mov	r0, r3
 8009784:	f7fe fb1a 	bl	8007dbc <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8009788:	693b      	ldr	r3, [r7, #16]
 800978a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800978c:	693b      	ldr	r3, [r7, #16]
 800978e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009790:	693b      	ldr	r3, [r7, #16]
 8009792:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009794:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009798:	693b      	ldr	r3, [r7, #16]
 800979a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800979c:	693b      	ldr	r3, [r7, #16]
 800979e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80097a0:	4b0f      	ldr	r3, [pc, #60]	; (80097e0 <xTaskPriorityDisinherit+0xd4>)
 80097a2:	681b      	ldr	r3, [r3, #0]
 80097a4:	429a      	cmp	r2, r3
 80097a6:	d903      	bls.n	80097b0 <xTaskPriorityDisinherit+0xa4>
 80097a8:	693b      	ldr	r3, [r7, #16]
 80097aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80097ac:	4a0c      	ldr	r2, [pc, #48]	; (80097e0 <xTaskPriorityDisinherit+0xd4>)
 80097ae:	6013      	str	r3, [r2, #0]
 80097b0:	693b      	ldr	r3, [r7, #16]
 80097b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80097b4:	4613      	mov	r3, r2
 80097b6:	009b      	lsls	r3, r3, #2
 80097b8:	4413      	add	r3, r2
 80097ba:	009b      	lsls	r3, r3, #2
 80097bc:	4a09      	ldr	r2, [pc, #36]	; (80097e4 <xTaskPriorityDisinherit+0xd8>)
 80097be:	441a      	add	r2, r3
 80097c0:	693b      	ldr	r3, [r7, #16]
 80097c2:	3304      	adds	r3, #4
 80097c4:	4619      	mov	r1, r3
 80097c6:	4610      	mov	r0, r2
 80097c8:	f7fe fa9b 	bl	8007d02 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80097cc:	2301      	movs	r3, #1
 80097ce:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80097d0:	697b      	ldr	r3, [r7, #20]
	}
 80097d2:	4618      	mov	r0, r3
 80097d4:	3718      	adds	r7, #24
 80097d6:	46bd      	mov	sp, r7
 80097d8:	bd80      	pop	{r7, pc}
 80097da:	bf00      	nop
 80097dc:	2000310c 	.word	0x2000310c
 80097e0:	200035e8 	.word	0x200035e8
 80097e4:	20003110 	.word	0x20003110

080097e8 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 80097e8:	b580      	push	{r7, lr}
 80097ea:	b086      	sub	sp, #24
 80097ec:	af00      	add	r7, sp, #0
 80097ee:	60f8      	str	r0, [r7, #12]
 80097f0:	60b9      	str	r1, [r7, #8]
 80097f2:	607a      	str	r2, [r7, #4]
 80097f4:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 80097f6:	f000 fe0d 	bl	800a414 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 80097fa:	4b29      	ldr	r3, [pc, #164]	; (80098a0 <xTaskNotifyWait+0xb8>)
 80097fc:	681b      	ldr	r3, [r3, #0]
 80097fe:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 8009802:	b2db      	uxtb	r3, r3
 8009804:	2b02      	cmp	r3, #2
 8009806:	d01c      	beq.n	8009842 <xTaskNotifyWait+0x5a>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 8009808:	4b25      	ldr	r3, [pc, #148]	; (80098a0 <xTaskNotifyWait+0xb8>)
 800980a:	681b      	ldr	r3, [r3, #0]
 800980c:	f8d3 10b4 	ldr.w	r1, [r3, #180]	; 0xb4
 8009810:	68fa      	ldr	r2, [r7, #12]
 8009812:	43d2      	mvns	r2, r2
 8009814:	400a      	ands	r2, r1
 8009816:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 800981a:	4b21      	ldr	r3, [pc, #132]	; (80098a0 <xTaskNotifyWait+0xb8>)
 800981c:	681b      	ldr	r3, [r3, #0]
 800981e:	2201      	movs	r2, #1
 8009820:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8

				if( xTicksToWait > ( TickType_t ) 0 )
 8009824:	683b      	ldr	r3, [r7, #0]
 8009826:	2b00      	cmp	r3, #0
 8009828:	d00b      	beq.n	8009842 <xTaskNotifyWait+0x5a>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800982a:	2101      	movs	r1, #1
 800982c:	6838      	ldr	r0, [r7, #0]
 800982e:	f000 f91f 	bl	8009a70 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 8009832:	4b1c      	ldr	r3, [pc, #112]	; (80098a4 <xTaskNotifyWait+0xbc>)
 8009834:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009838:	601a      	str	r2, [r3, #0]
 800983a:	f3bf 8f4f 	dsb	sy
 800983e:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8009842:	f000 fe17 	bl	800a474 <vPortExitCritical>

		taskENTER_CRITICAL();
 8009846:	f000 fde5 	bl	800a414 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	2b00      	cmp	r3, #0
 800984e:	d005      	beq.n	800985c <xTaskNotifyWait+0x74>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 8009850:	4b13      	ldr	r3, [pc, #76]	; (80098a0 <xTaskNotifyWait+0xb8>)
 8009852:	681b      	ldr	r3, [r3, #0]
 8009854:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800985c:	4b10      	ldr	r3, [pc, #64]	; (80098a0 <xTaskNotifyWait+0xb8>)
 800985e:	681b      	ldr	r3, [r3, #0]
 8009860:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 8009864:	b2db      	uxtb	r3, r3
 8009866:	2b02      	cmp	r3, #2
 8009868:	d002      	beq.n	8009870 <xTaskNotifyWait+0x88>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 800986a:	2300      	movs	r3, #0
 800986c:	617b      	str	r3, [r7, #20]
 800986e:	e00a      	b.n	8009886 <xTaskNotifyWait+0x9e>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 8009870:	4b0b      	ldr	r3, [pc, #44]	; (80098a0 <xTaskNotifyWait+0xb8>)
 8009872:	681b      	ldr	r3, [r3, #0]
 8009874:	f8d3 10b4 	ldr.w	r1, [r3, #180]	; 0xb4
 8009878:	68ba      	ldr	r2, [r7, #8]
 800987a:	43d2      	mvns	r2, r2
 800987c:	400a      	ands	r2, r1
 800987e:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
				xReturn = pdTRUE;
 8009882:	2301      	movs	r3, #1
 8009884:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8009886:	4b06      	ldr	r3, [pc, #24]	; (80098a0 <xTaskNotifyWait+0xb8>)
 8009888:	681b      	ldr	r3, [r3, #0]
 800988a:	2200      	movs	r2, #0
 800988c:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
		}
		taskEXIT_CRITICAL();
 8009890:	f000 fdf0 	bl	800a474 <vPortExitCritical>

		return xReturn;
 8009894:	697b      	ldr	r3, [r7, #20]
	}
 8009896:	4618      	mov	r0, r3
 8009898:	3718      	adds	r7, #24
 800989a:	46bd      	mov	sp, r7
 800989c:	bd80      	pop	{r7, pc}
 800989e:	bf00      	nop
 80098a0:	2000310c 	.word	0x2000310c
 80098a4:	e000ed04 	.word	0xe000ed04

080098a8 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 80098a8:	b580      	push	{r7, lr}
 80098aa:	b08e      	sub	sp, #56	; 0x38
 80098ac:	af00      	add	r7, sp, #0
 80098ae:	60f8      	str	r0, [r7, #12]
 80098b0:	60b9      	str	r1, [r7, #8]
 80098b2:	603b      	str	r3, [r7, #0]
 80098b4:	4613      	mov	r3, r2
 80098b6:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 80098b8:	2301      	movs	r3, #1
 80098ba:	637b      	str	r3, [r7, #52]	; 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 80098bc:	68fb      	ldr	r3, [r7, #12]
 80098be:	2b00      	cmp	r3, #0
 80098c0:	d10a      	bne.n	80098d8 <xTaskGenericNotifyFromISR+0x30>
	__asm volatile
 80098c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098c6:	f383 8811 	msr	BASEPRI, r3
 80098ca:	f3bf 8f6f 	isb	sy
 80098ce:	f3bf 8f4f 	dsb	sy
 80098d2:	627b      	str	r3, [r7, #36]	; 0x24
}
 80098d4:	bf00      	nop
 80098d6:	e7fe      	b.n	80098d6 <xTaskGenericNotifyFromISR+0x2e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80098d8:	f000 fe7e 	bl	800a5d8 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 80098dc:	68fb      	ldr	r3, [r7, #12]
 80098de:	633b      	str	r3, [r7, #48]	; 0x30
	__asm volatile
 80098e0:	f3ef 8211 	mrs	r2, BASEPRI
 80098e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098e8:	f383 8811 	msr	BASEPRI, r3
 80098ec:	f3bf 8f6f 	isb	sy
 80098f0:	f3bf 8f4f 	dsb	sy
 80098f4:	623a      	str	r2, [r7, #32]
 80098f6:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 80098f8:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80098fa:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 80098fc:	683b      	ldr	r3, [r7, #0]
 80098fe:	2b00      	cmp	r3, #0
 8009900:	d004      	beq.n	800990c <xTaskGenericNotifyFromISR+0x64>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8009902:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009904:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 8009908:	683b      	ldr	r3, [r7, #0]
 800990a:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800990c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800990e:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 8009912:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8009916:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009918:	2202      	movs	r2, #2
 800991a:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8

			switch( eAction )
 800991e:	79fb      	ldrb	r3, [r7, #7]
 8009920:	2b04      	cmp	r3, #4
 8009922:	d82f      	bhi.n	8009984 <xTaskGenericNotifyFromISR+0xdc>
 8009924:	a201      	add	r2, pc, #4	; (adr r2, 800992c <xTaskGenericNotifyFromISR+0x84>)
 8009926:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800992a:	bf00      	nop
 800992c:	080099a7 	.word	0x080099a7
 8009930:	08009941 	.word	0x08009941
 8009934:	08009953 	.word	0x08009953
 8009938:	08009963 	.word	0x08009963
 800993c:	0800996d 	.word	0x0800996d
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8009940:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009942:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 8009946:	68bb      	ldr	r3, [r7, #8]
 8009948:	431a      	orrs	r2, r3
 800994a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800994c:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					break;
 8009950:	e02c      	b.n	80099ac <xTaskGenericNotifyFromISR+0x104>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8009952:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009954:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8009958:	1c5a      	adds	r2, r3, #1
 800995a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800995c:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					break;
 8009960:	e024      	b.n	80099ac <xTaskGenericNotifyFromISR+0x104>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8009962:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009964:	68ba      	ldr	r2, [r7, #8]
 8009966:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					break;
 800996a:	e01f      	b.n	80099ac <xTaskGenericNotifyFromISR+0x104>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800996c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8009970:	2b02      	cmp	r3, #2
 8009972:	d004      	beq.n	800997e <xTaskGenericNotifyFromISR+0xd6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8009974:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009976:	68ba      	ldr	r2, [r7, #8]
 8009978:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800997c:	e016      	b.n	80099ac <xTaskGenericNotifyFromISR+0x104>
						xReturn = pdFAIL;
 800997e:	2300      	movs	r3, #0
 8009980:	637b      	str	r3, [r7, #52]	; 0x34
					break;
 8009982:	e013      	b.n	80099ac <xTaskGenericNotifyFromISR+0x104>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8009984:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009986:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800998a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800998e:	d00c      	beq.n	80099aa <xTaskGenericNotifyFromISR+0x102>
	__asm volatile
 8009990:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009994:	f383 8811 	msr	BASEPRI, r3
 8009998:	f3bf 8f6f 	isb	sy
 800999c:	f3bf 8f4f 	dsb	sy
 80099a0:	61bb      	str	r3, [r7, #24]
}
 80099a2:	bf00      	nop
 80099a4:	e7fe      	b.n	80099a4 <xTaskGenericNotifyFromISR+0xfc>
					break;
 80099a6:	bf00      	nop
 80099a8:	e000      	b.n	80099ac <xTaskGenericNotifyFromISR+0x104>
					break;
 80099aa:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 80099ac:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80099b0:	2b01      	cmp	r3, #1
 80099b2:	d146      	bne.n	8009a42 <xTaskGenericNotifyFromISR+0x19a>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 80099b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80099b8:	2b00      	cmp	r3, #0
 80099ba:	d00a      	beq.n	80099d2 <xTaskGenericNotifyFromISR+0x12a>
	__asm volatile
 80099bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099c0:	f383 8811 	msr	BASEPRI, r3
 80099c4:	f3bf 8f6f 	isb	sy
 80099c8:	f3bf 8f4f 	dsb	sy
 80099cc:	617b      	str	r3, [r7, #20]
}
 80099ce:	bf00      	nop
 80099d0:	e7fe      	b.n	80099d0 <xTaskGenericNotifyFromISR+0x128>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80099d2:	4b21      	ldr	r3, [pc, #132]	; (8009a58 <xTaskGenericNotifyFromISR+0x1b0>)
 80099d4:	681b      	ldr	r3, [r3, #0]
 80099d6:	2b00      	cmp	r3, #0
 80099d8:	d11d      	bne.n	8009a16 <xTaskGenericNotifyFromISR+0x16e>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80099da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099dc:	3304      	adds	r3, #4
 80099de:	4618      	mov	r0, r3
 80099e0:	f7fe f9ec 	bl	8007dbc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80099e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80099e8:	4b1c      	ldr	r3, [pc, #112]	; (8009a5c <xTaskGenericNotifyFromISR+0x1b4>)
 80099ea:	681b      	ldr	r3, [r3, #0]
 80099ec:	429a      	cmp	r2, r3
 80099ee:	d903      	bls.n	80099f8 <xTaskGenericNotifyFromISR+0x150>
 80099f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80099f4:	4a19      	ldr	r2, [pc, #100]	; (8009a5c <xTaskGenericNotifyFromISR+0x1b4>)
 80099f6:	6013      	str	r3, [r2, #0]
 80099f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80099fc:	4613      	mov	r3, r2
 80099fe:	009b      	lsls	r3, r3, #2
 8009a00:	4413      	add	r3, r2
 8009a02:	009b      	lsls	r3, r3, #2
 8009a04:	4a16      	ldr	r2, [pc, #88]	; (8009a60 <xTaskGenericNotifyFromISR+0x1b8>)
 8009a06:	441a      	add	r2, r3
 8009a08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a0a:	3304      	adds	r3, #4
 8009a0c:	4619      	mov	r1, r3
 8009a0e:	4610      	mov	r0, r2
 8009a10:	f7fe f977 	bl	8007d02 <vListInsertEnd>
 8009a14:	e005      	b.n	8009a22 <xTaskGenericNotifyFromISR+0x17a>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8009a16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a18:	3318      	adds	r3, #24
 8009a1a:	4619      	mov	r1, r3
 8009a1c:	4811      	ldr	r0, [pc, #68]	; (8009a64 <xTaskGenericNotifyFromISR+0x1bc>)
 8009a1e:	f7fe f970 	bl	8007d02 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009a22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009a26:	4b10      	ldr	r3, [pc, #64]	; (8009a68 <xTaskGenericNotifyFromISR+0x1c0>)
 8009a28:	681b      	ldr	r3, [r3, #0]
 8009a2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a2c:	429a      	cmp	r2, r3
 8009a2e:	d908      	bls.n	8009a42 <xTaskGenericNotifyFromISR+0x19a>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 8009a30:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009a32:	2b00      	cmp	r3, #0
 8009a34:	d002      	beq.n	8009a3c <xTaskGenericNotifyFromISR+0x194>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 8009a36:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009a38:	2201      	movs	r2, #1
 8009a3a:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 8009a3c:	4b0b      	ldr	r3, [pc, #44]	; (8009a6c <xTaskGenericNotifyFromISR+0x1c4>)
 8009a3e:	2201      	movs	r2, #1
 8009a40:	601a      	str	r2, [r3, #0]
 8009a42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a44:	613b      	str	r3, [r7, #16]
	__asm volatile
 8009a46:	693b      	ldr	r3, [r7, #16]
 8009a48:	f383 8811 	msr	BASEPRI, r3
}
 8009a4c:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 8009a4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	}
 8009a50:	4618      	mov	r0, r3
 8009a52:	3738      	adds	r7, #56	; 0x38
 8009a54:	46bd      	mov	sp, r7
 8009a56:	bd80      	pop	{r7, pc}
 8009a58:	20003608 	.word	0x20003608
 8009a5c:	200035e8 	.word	0x200035e8
 8009a60:	20003110 	.word	0x20003110
 8009a64:	200035a0 	.word	0x200035a0
 8009a68:	2000310c 	.word	0x2000310c
 8009a6c:	200035f4 	.word	0x200035f4

08009a70 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009a70:	b580      	push	{r7, lr}
 8009a72:	b084      	sub	sp, #16
 8009a74:	af00      	add	r7, sp, #0
 8009a76:	6078      	str	r0, [r7, #4]
 8009a78:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8009a7a:	4b21      	ldr	r3, [pc, #132]	; (8009b00 <prvAddCurrentTaskToDelayedList+0x90>)
 8009a7c:	681b      	ldr	r3, [r3, #0]
 8009a7e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009a80:	4b20      	ldr	r3, [pc, #128]	; (8009b04 <prvAddCurrentTaskToDelayedList+0x94>)
 8009a82:	681b      	ldr	r3, [r3, #0]
 8009a84:	3304      	adds	r3, #4
 8009a86:	4618      	mov	r0, r3
 8009a88:	f7fe f998 	bl	8007dbc <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009a92:	d10a      	bne.n	8009aaa <prvAddCurrentTaskToDelayedList+0x3a>
 8009a94:	683b      	ldr	r3, [r7, #0]
 8009a96:	2b00      	cmp	r3, #0
 8009a98:	d007      	beq.n	8009aaa <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009a9a:	4b1a      	ldr	r3, [pc, #104]	; (8009b04 <prvAddCurrentTaskToDelayedList+0x94>)
 8009a9c:	681b      	ldr	r3, [r3, #0]
 8009a9e:	3304      	adds	r3, #4
 8009aa0:	4619      	mov	r1, r3
 8009aa2:	4819      	ldr	r0, [pc, #100]	; (8009b08 <prvAddCurrentTaskToDelayedList+0x98>)
 8009aa4:	f7fe f92d 	bl	8007d02 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009aa8:	e026      	b.n	8009af8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8009aaa:	68fa      	ldr	r2, [r7, #12]
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	4413      	add	r3, r2
 8009ab0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009ab2:	4b14      	ldr	r3, [pc, #80]	; (8009b04 <prvAddCurrentTaskToDelayedList+0x94>)
 8009ab4:	681b      	ldr	r3, [r3, #0]
 8009ab6:	68ba      	ldr	r2, [r7, #8]
 8009ab8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8009aba:	68ba      	ldr	r2, [r7, #8]
 8009abc:	68fb      	ldr	r3, [r7, #12]
 8009abe:	429a      	cmp	r2, r3
 8009ac0:	d209      	bcs.n	8009ad6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009ac2:	4b12      	ldr	r3, [pc, #72]	; (8009b0c <prvAddCurrentTaskToDelayedList+0x9c>)
 8009ac4:	681a      	ldr	r2, [r3, #0]
 8009ac6:	4b0f      	ldr	r3, [pc, #60]	; (8009b04 <prvAddCurrentTaskToDelayedList+0x94>)
 8009ac8:	681b      	ldr	r3, [r3, #0]
 8009aca:	3304      	adds	r3, #4
 8009acc:	4619      	mov	r1, r3
 8009ace:	4610      	mov	r0, r2
 8009ad0:	f7fe f93b 	bl	8007d4a <vListInsert>
}
 8009ad4:	e010      	b.n	8009af8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009ad6:	4b0e      	ldr	r3, [pc, #56]	; (8009b10 <prvAddCurrentTaskToDelayedList+0xa0>)
 8009ad8:	681a      	ldr	r2, [r3, #0]
 8009ada:	4b0a      	ldr	r3, [pc, #40]	; (8009b04 <prvAddCurrentTaskToDelayedList+0x94>)
 8009adc:	681b      	ldr	r3, [r3, #0]
 8009ade:	3304      	adds	r3, #4
 8009ae0:	4619      	mov	r1, r3
 8009ae2:	4610      	mov	r0, r2
 8009ae4:	f7fe f931 	bl	8007d4a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009ae8:	4b0a      	ldr	r3, [pc, #40]	; (8009b14 <prvAddCurrentTaskToDelayedList+0xa4>)
 8009aea:	681b      	ldr	r3, [r3, #0]
 8009aec:	68ba      	ldr	r2, [r7, #8]
 8009aee:	429a      	cmp	r2, r3
 8009af0:	d202      	bcs.n	8009af8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8009af2:	4a08      	ldr	r2, [pc, #32]	; (8009b14 <prvAddCurrentTaskToDelayedList+0xa4>)
 8009af4:	68bb      	ldr	r3, [r7, #8]
 8009af6:	6013      	str	r3, [r2, #0]
}
 8009af8:	bf00      	nop
 8009afa:	3710      	adds	r7, #16
 8009afc:	46bd      	mov	sp, r7
 8009afe:	bd80      	pop	{r7, pc}
 8009b00:	200035e4 	.word	0x200035e4
 8009b04:	2000310c 	.word	0x2000310c
 8009b08:	200035cc 	.word	0x200035cc
 8009b0c:	2000359c 	.word	0x2000359c
 8009b10:	20003598 	.word	0x20003598
 8009b14:	20003600 	.word	0x20003600

08009b18 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8009b18:	b580      	push	{r7, lr}
 8009b1a:	b08a      	sub	sp, #40	; 0x28
 8009b1c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8009b1e:	2300      	movs	r3, #0
 8009b20:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8009b22:	f000 fb07 	bl	800a134 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8009b26:	4b1c      	ldr	r3, [pc, #112]	; (8009b98 <xTimerCreateTimerTask+0x80>)
 8009b28:	681b      	ldr	r3, [r3, #0]
 8009b2a:	2b00      	cmp	r3, #0
 8009b2c:	d021      	beq.n	8009b72 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8009b2e:	2300      	movs	r3, #0
 8009b30:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8009b32:	2300      	movs	r3, #0
 8009b34:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8009b36:	1d3a      	adds	r2, r7, #4
 8009b38:	f107 0108 	add.w	r1, r7, #8
 8009b3c:	f107 030c 	add.w	r3, r7, #12
 8009b40:	4618      	mov	r0, r3
 8009b42:	f7fe f897 	bl	8007c74 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8009b46:	6879      	ldr	r1, [r7, #4]
 8009b48:	68bb      	ldr	r3, [r7, #8]
 8009b4a:	68fa      	ldr	r2, [r7, #12]
 8009b4c:	9202      	str	r2, [sp, #8]
 8009b4e:	9301      	str	r3, [sp, #4]
 8009b50:	2305      	movs	r3, #5
 8009b52:	9300      	str	r3, [sp, #0]
 8009b54:	2300      	movs	r3, #0
 8009b56:	460a      	mov	r2, r1
 8009b58:	4910      	ldr	r1, [pc, #64]	; (8009b9c <xTimerCreateTimerTask+0x84>)
 8009b5a:	4811      	ldr	r0, [pc, #68]	; (8009ba0 <xTimerCreateTimerTask+0x88>)
 8009b5c:	f7fe fefe 	bl	800895c <xTaskCreateStatic>
 8009b60:	4603      	mov	r3, r0
 8009b62:	4a10      	ldr	r2, [pc, #64]	; (8009ba4 <xTimerCreateTimerTask+0x8c>)
 8009b64:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8009b66:	4b0f      	ldr	r3, [pc, #60]	; (8009ba4 <xTimerCreateTimerTask+0x8c>)
 8009b68:	681b      	ldr	r3, [r3, #0]
 8009b6a:	2b00      	cmp	r3, #0
 8009b6c:	d001      	beq.n	8009b72 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8009b6e:	2301      	movs	r3, #1
 8009b70:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8009b72:	697b      	ldr	r3, [r7, #20]
 8009b74:	2b00      	cmp	r3, #0
 8009b76:	d10a      	bne.n	8009b8e <xTimerCreateTimerTask+0x76>
	__asm volatile
 8009b78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b7c:	f383 8811 	msr	BASEPRI, r3
 8009b80:	f3bf 8f6f 	isb	sy
 8009b84:	f3bf 8f4f 	dsb	sy
 8009b88:	613b      	str	r3, [r7, #16]
}
 8009b8a:	bf00      	nop
 8009b8c:	e7fe      	b.n	8009b8c <xTimerCreateTimerTask+0x74>
	return xReturn;
 8009b8e:	697b      	ldr	r3, [r7, #20]
}
 8009b90:	4618      	mov	r0, r3
 8009b92:	3718      	adds	r7, #24
 8009b94:	46bd      	mov	sp, r7
 8009b96:	bd80      	pop	{r7, pc}
 8009b98:	2000363c 	.word	0x2000363c
 8009b9c:	0800c308 	.word	0x0800c308
 8009ba0:	08009cdd 	.word	0x08009cdd
 8009ba4:	20003640 	.word	0x20003640

08009ba8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8009ba8:	b580      	push	{r7, lr}
 8009baa:	b08a      	sub	sp, #40	; 0x28
 8009bac:	af00      	add	r7, sp, #0
 8009bae:	60f8      	str	r0, [r7, #12]
 8009bb0:	60b9      	str	r1, [r7, #8]
 8009bb2:	607a      	str	r2, [r7, #4]
 8009bb4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8009bb6:	2300      	movs	r3, #0
 8009bb8:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8009bba:	68fb      	ldr	r3, [r7, #12]
 8009bbc:	2b00      	cmp	r3, #0
 8009bbe:	d10a      	bne.n	8009bd6 <xTimerGenericCommand+0x2e>
	__asm volatile
 8009bc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bc4:	f383 8811 	msr	BASEPRI, r3
 8009bc8:	f3bf 8f6f 	isb	sy
 8009bcc:	f3bf 8f4f 	dsb	sy
 8009bd0:	623b      	str	r3, [r7, #32]
}
 8009bd2:	bf00      	nop
 8009bd4:	e7fe      	b.n	8009bd4 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8009bd6:	4b1a      	ldr	r3, [pc, #104]	; (8009c40 <xTimerGenericCommand+0x98>)
 8009bd8:	681b      	ldr	r3, [r3, #0]
 8009bda:	2b00      	cmp	r3, #0
 8009bdc:	d02a      	beq.n	8009c34 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8009bde:	68bb      	ldr	r3, [r7, #8]
 8009be0:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8009be6:	68fb      	ldr	r3, [r7, #12]
 8009be8:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8009bea:	68bb      	ldr	r3, [r7, #8]
 8009bec:	2b05      	cmp	r3, #5
 8009bee:	dc18      	bgt.n	8009c22 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8009bf0:	f7ff fd6e 	bl	80096d0 <xTaskGetSchedulerState>
 8009bf4:	4603      	mov	r3, r0
 8009bf6:	2b02      	cmp	r3, #2
 8009bf8:	d109      	bne.n	8009c0e <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8009bfa:	4b11      	ldr	r3, [pc, #68]	; (8009c40 <xTimerGenericCommand+0x98>)
 8009bfc:	6818      	ldr	r0, [r3, #0]
 8009bfe:	f107 0110 	add.w	r1, r7, #16
 8009c02:	2300      	movs	r3, #0
 8009c04:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009c06:	f7fe fa41 	bl	800808c <xQueueGenericSend>
 8009c0a:	6278      	str	r0, [r7, #36]	; 0x24
 8009c0c:	e012      	b.n	8009c34 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8009c0e:	4b0c      	ldr	r3, [pc, #48]	; (8009c40 <xTimerGenericCommand+0x98>)
 8009c10:	6818      	ldr	r0, [r3, #0]
 8009c12:	f107 0110 	add.w	r1, r7, #16
 8009c16:	2300      	movs	r3, #0
 8009c18:	2200      	movs	r2, #0
 8009c1a:	f7fe fa37 	bl	800808c <xQueueGenericSend>
 8009c1e:	6278      	str	r0, [r7, #36]	; 0x24
 8009c20:	e008      	b.n	8009c34 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8009c22:	4b07      	ldr	r3, [pc, #28]	; (8009c40 <xTimerGenericCommand+0x98>)
 8009c24:	6818      	ldr	r0, [r3, #0]
 8009c26:	f107 0110 	add.w	r1, r7, #16
 8009c2a:	2300      	movs	r3, #0
 8009c2c:	683a      	ldr	r2, [r7, #0]
 8009c2e:	f7fe fb2b 	bl	8008288 <xQueueGenericSendFromISR>
 8009c32:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8009c34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009c36:	4618      	mov	r0, r3
 8009c38:	3728      	adds	r7, #40	; 0x28
 8009c3a:	46bd      	mov	sp, r7
 8009c3c:	bd80      	pop	{r7, pc}
 8009c3e:	bf00      	nop
 8009c40:	2000363c 	.word	0x2000363c

08009c44 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8009c44:	b580      	push	{r7, lr}
 8009c46:	b088      	sub	sp, #32
 8009c48:	af02      	add	r7, sp, #8
 8009c4a:	6078      	str	r0, [r7, #4]
 8009c4c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009c4e:	4b22      	ldr	r3, [pc, #136]	; (8009cd8 <prvProcessExpiredTimer+0x94>)
 8009c50:	681b      	ldr	r3, [r3, #0]
 8009c52:	68db      	ldr	r3, [r3, #12]
 8009c54:	68db      	ldr	r3, [r3, #12]
 8009c56:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009c58:	697b      	ldr	r3, [r7, #20]
 8009c5a:	3304      	adds	r3, #4
 8009c5c:	4618      	mov	r0, r3
 8009c5e:	f7fe f8ad 	bl	8007dbc <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009c62:	697b      	ldr	r3, [r7, #20]
 8009c64:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009c68:	f003 0304 	and.w	r3, r3, #4
 8009c6c:	2b00      	cmp	r3, #0
 8009c6e:	d022      	beq.n	8009cb6 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8009c70:	697b      	ldr	r3, [r7, #20]
 8009c72:	699a      	ldr	r2, [r3, #24]
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	18d1      	adds	r1, r2, r3
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	683a      	ldr	r2, [r7, #0]
 8009c7c:	6978      	ldr	r0, [r7, #20]
 8009c7e:	f000 f8d1 	bl	8009e24 <prvInsertTimerInActiveList>
 8009c82:	4603      	mov	r3, r0
 8009c84:	2b00      	cmp	r3, #0
 8009c86:	d01f      	beq.n	8009cc8 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009c88:	2300      	movs	r3, #0
 8009c8a:	9300      	str	r3, [sp, #0]
 8009c8c:	2300      	movs	r3, #0
 8009c8e:	687a      	ldr	r2, [r7, #4]
 8009c90:	2100      	movs	r1, #0
 8009c92:	6978      	ldr	r0, [r7, #20]
 8009c94:	f7ff ff88 	bl	8009ba8 <xTimerGenericCommand>
 8009c98:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8009c9a:	693b      	ldr	r3, [r7, #16]
 8009c9c:	2b00      	cmp	r3, #0
 8009c9e:	d113      	bne.n	8009cc8 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8009ca0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ca4:	f383 8811 	msr	BASEPRI, r3
 8009ca8:	f3bf 8f6f 	isb	sy
 8009cac:	f3bf 8f4f 	dsb	sy
 8009cb0:	60fb      	str	r3, [r7, #12]
}
 8009cb2:	bf00      	nop
 8009cb4:	e7fe      	b.n	8009cb4 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009cb6:	697b      	ldr	r3, [r7, #20]
 8009cb8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009cbc:	f023 0301 	bic.w	r3, r3, #1
 8009cc0:	b2da      	uxtb	r2, r3
 8009cc2:	697b      	ldr	r3, [r7, #20]
 8009cc4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009cc8:	697b      	ldr	r3, [r7, #20]
 8009cca:	6a1b      	ldr	r3, [r3, #32]
 8009ccc:	6978      	ldr	r0, [r7, #20]
 8009cce:	4798      	blx	r3
}
 8009cd0:	bf00      	nop
 8009cd2:	3718      	adds	r7, #24
 8009cd4:	46bd      	mov	sp, r7
 8009cd6:	bd80      	pop	{r7, pc}
 8009cd8:	20003634 	.word	0x20003634

08009cdc <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8009cdc:	b580      	push	{r7, lr}
 8009cde:	b084      	sub	sp, #16
 8009ce0:	af00      	add	r7, sp, #0
 8009ce2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009ce4:	f107 0308 	add.w	r3, r7, #8
 8009ce8:	4618      	mov	r0, r3
 8009cea:	f000 f857 	bl	8009d9c <prvGetNextExpireTime>
 8009cee:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8009cf0:	68bb      	ldr	r3, [r7, #8]
 8009cf2:	4619      	mov	r1, r3
 8009cf4:	68f8      	ldr	r0, [r7, #12]
 8009cf6:	f000 f803 	bl	8009d00 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8009cfa:	f000 f8d5 	bl	8009ea8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009cfe:	e7f1      	b.n	8009ce4 <prvTimerTask+0x8>

08009d00 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8009d00:	b580      	push	{r7, lr}
 8009d02:	b084      	sub	sp, #16
 8009d04:	af00      	add	r7, sp, #0
 8009d06:	6078      	str	r0, [r7, #4]
 8009d08:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8009d0a:	f7ff f8f5 	bl	8008ef8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009d0e:	f107 0308 	add.w	r3, r7, #8
 8009d12:	4618      	mov	r0, r3
 8009d14:	f000 f866 	bl	8009de4 <prvSampleTimeNow>
 8009d18:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8009d1a:	68bb      	ldr	r3, [r7, #8]
 8009d1c:	2b00      	cmp	r3, #0
 8009d1e:	d130      	bne.n	8009d82 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8009d20:	683b      	ldr	r3, [r7, #0]
 8009d22:	2b00      	cmp	r3, #0
 8009d24:	d10a      	bne.n	8009d3c <prvProcessTimerOrBlockTask+0x3c>
 8009d26:	687a      	ldr	r2, [r7, #4]
 8009d28:	68fb      	ldr	r3, [r7, #12]
 8009d2a:	429a      	cmp	r2, r3
 8009d2c:	d806      	bhi.n	8009d3c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8009d2e:	f7ff f8f1 	bl	8008f14 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8009d32:	68f9      	ldr	r1, [r7, #12]
 8009d34:	6878      	ldr	r0, [r7, #4]
 8009d36:	f7ff ff85 	bl	8009c44 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8009d3a:	e024      	b.n	8009d86 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8009d3c:	683b      	ldr	r3, [r7, #0]
 8009d3e:	2b00      	cmp	r3, #0
 8009d40:	d008      	beq.n	8009d54 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8009d42:	4b13      	ldr	r3, [pc, #76]	; (8009d90 <prvProcessTimerOrBlockTask+0x90>)
 8009d44:	681b      	ldr	r3, [r3, #0]
 8009d46:	681b      	ldr	r3, [r3, #0]
 8009d48:	2b00      	cmp	r3, #0
 8009d4a:	d101      	bne.n	8009d50 <prvProcessTimerOrBlockTask+0x50>
 8009d4c:	2301      	movs	r3, #1
 8009d4e:	e000      	b.n	8009d52 <prvProcessTimerOrBlockTask+0x52>
 8009d50:	2300      	movs	r3, #0
 8009d52:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8009d54:	4b0f      	ldr	r3, [pc, #60]	; (8009d94 <prvProcessTimerOrBlockTask+0x94>)
 8009d56:	6818      	ldr	r0, [r3, #0]
 8009d58:	687a      	ldr	r2, [r7, #4]
 8009d5a:	68fb      	ldr	r3, [r7, #12]
 8009d5c:	1ad3      	subs	r3, r2, r3
 8009d5e:	683a      	ldr	r2, [r7, #0]
 8009d60:	4619      	mov	r1, r3
 8009d62:	f7fe fdc7 	bl	80088f4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8009d66:	f7ff f8d5 	bl	8008f14 <xTaskResumeAll>
 8009d6a:	4603      	mov	r3, r0
 8009d6c:	2b00      	cmp	r3, #0
 8009d6e:	d10a      	bne.n	8009d86 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8009d70:	4b09      	ldr	r3, [pc, #36]	; (8009d98 <prvProcessTimerOrBlockTask+0x98>)
 8009d72:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009d76:	601a      	str	r2, [r3, #0]
 8009d78:	f3bf 8f4f 	dsb	sy
 8009d7c:	f3bf 8f6f 	isb	sy
}
 8009d80:	e001      	b.n	8009d86 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8009d82:	f7ff f8c7 	bl	8008f14 <xTaskResumeAll>
}
 8009d86:	bf00      	nop
 8009d88:	3710      	adds	r7, #16
 8009d8a:	46bd      	mov	sp, r7
 8009d8c:	bd80      	pop	{r7, pc}
 8009d8e:	bf00      	nop
 8009d90:	20003638 	.word	0x20003638
 8009d94:	2000363c 	.word	0x2000363c
 8009d98:	e000ed04 	.word	0xe000ed04

08009d9c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8009d9c:	b480      	push	{r7}
 8009d9e:	b085      	sub	sp, #20
 8009da0:	af00      	add	r7, sp, #0
 8009da2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8009da4:	4b0e      	ldr	r3, [pc, #56]	; (8009de0 <prvGetNextExpireTime+0x44>)
 8009da6:	681b      	ldr	r3, [r3, #0]
 8009da8:	681b      	ldr	r3, [r3, #0]
 8009daa:	2b00      	cmp	r3, #0
 8009dac:	d101      	bne.n	8009db2 <prvGetNextExpireTime+0x16>
 8009dae:	2201      	movs	r2, #1
 8009db0:	e000      	b.n	8009db4 <prvGetNextExpireTime+0x18>
 8009db2:	2200      	movs	r2, #0
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	681b      	ldr	r3, [r3, #0]
 8009dbc:	2b00      	cmp	r3, #0
 8009dbe:	d105      	bne.n	8009dcc <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009dc0:	4b07      	ldr	r3, [pc, #28]	; (8009de0 <prvGetNextExpireTime+0x44>)
 8009dc2:	681b      	ldr	r3, [r3, #0]
 8009dc4:	68db      	ldr	r3, [r3, #12]
 8009dc6:	681b      	ldr	r3, [r3, #0]
 8009dc8:	60fb      	str	r3, [r7, #12]
 8009dca:	e001      	b.n	8009dd0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8009dcc:	2300      	movs	r3, #0
 8009dce:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8009dd0:	68fb      	ldr	r3, [r7, #12]
}
 8009dd2:	4618      	mov	r0, r3
 8009dd4:	3714      	adds	r7, #20
 8009dd6:	46bd      	mov	sp, r7
 8009dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ddc:	4770      	bx	lr
 8009dde:	bf00      	nop
 8009de0:	20003634 	.word	0x20003634

08009de4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8009de4:	b580      	push	{r7, lr}
 8009de6:	b084      	sub	sp, #16
 8009de8:	af00      	add	r7, sp, #0
 8009dea:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8009dec:	f7ff f930 	bl	8009050 <xTaskGetTickCount>
 8009df0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8009df2:	4b0b      	ldr	r3, [pc, #44]	; (8009e20 <prvSampleTimeNow+0x3c>)
 8009df4:	681b      	ldr	r3, [r3, #0]
 8009df6:	68fa      	ldr	r2, [r7, #12]
 8009df8:	429a      	cmp	r2, r3
 8009dfa:	d205      	bcs.n	8009e08 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8009dfc:	f000 f936 	bl	800a06c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	2201      	movs	r2, #1
 8009e04:	601a      	str	r2, [r3, #0]
 8009e06:	e002      	b.n	8009e0e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	2200      	movs	r2, #0
 8009e0c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8009e0e:	4a04      	ldr	r2, [pc, #16]	; (8009e20 <prvSampleTimeNow+0x3c>)
 8009e10:	68fb      	ldr	r3, [r7, #12]
 8009e12:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8009e14:	68fb      	ldr	r3, [r7, #12]
}
 8009e16:	4618      	mov	r0, r3
 8009e18:	3710      	adds	r7, #16
 8009e1a:	46bd      	mov	sp, r7
 8009e1c:	bd80      	pop	{r7, pc}
 8009e1e:	bf00      	nop
 8009e20:	20003644 	.word	0x20003644

08009e24 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8009e24:	b580      	push	{r7, lr}
 8009e26:	b086      	sub	sp, #24
 8009e28:	af00      	add	r7, sp, #0
 8009e2a:	60f8      	str	r0, [r7, #12]
 8009e2c:	60b9      	str	r1, [r7, #8]
 8009e2e:	607a      	str	r2, [r7, #4]
 8009e30:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8009e32:	2300      	movs	r3, #0
 8009e34:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8009e36:	68fb      	ldr	r3, [r7, #12]
 8009e38:	68ba      	ldr	r2, [r7, #8]
 8009e3a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009e3c:	68fb      	ldr	r3, [r7, #12]
 8009e3e:	68fa      	ldr	r2, [r7, #12]
 8009e40:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8009e42:	68ba      	ldr	r2, [r7, #8]
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	429a      	cmp	r2, r3
 8009e48:	d812      	bhi.n	8009e70 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009e4a:	687a      	ldr	r2, [r7, #4]
 8009e4c:	683b      	ldr	r3, [r7, #0]
 8009e4e:	1ad2      	subs	r2, r2, r3
 8009e50:	68fb      	ldr	r3, [r7, #12]
 8009e52:	699b      	ldr	r3, [r3, #24]
 8009e54:	429a      	cmp	r2, r3
 8009e56:	d302      	bcc.n	8009e5e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8009e58:	2301      	movs	r3, #1
 8009e5a:	617b      	str	r3, [r7, #20]
 8009e5c:	e01b      	b.n	8009e96 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8009e5e:	4b10      	ldr	r3, [pc, #64]	; (8009ea0 <prvInsertTimerInActiveList+0x7c>)
 8009e60:	681a      	ldr	r2, [r3, #0]
 8009e62:	68fb      	ldr	r3, [r7, #12]
 8009e64:	3304      	adds	r3, #4
 8009e66:	4619      	mov	r1, r3
 8009e68:	4610      	mov	r0, r2
 8009e6a:	f7fd ff6e 	bl	8007d4a <vListInsert>
 8009e6e:	e012      	b.n	8009e96 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8009e70:	687a      	ldr	r2, [r7, #4]
 8009e72:	683b      	ldr	r3, [r7, #0]
 8009e74:	429a      	cmp	r2, r3
 8009e76:	d206      	bcs.n	8009e86 <prvInsertTimerInActiveList+0x62>
 8009e78:	68ba      	ldr	r2, [r7, #8]
 8009e7a:	683b      	ldr	r3, [r7, #0]
 8009e7c:	429a      	cmp	r2, r3
 8009e7e:	d302      	bcc.n	8009e86 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8009e80:	2301      	movs	r3, #1
 8009e82:	617b      	str	r3, [r7, #20]
 8009e84:	e007      	b.n	8009e96 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009e86:	4b07      	ldr	r3, [pc, #28]	; (8009ea4 <prvInsertTimerInActiveList+0x80>)
 8009e88:	681a      	ldr	r2, [r3, #0]
 8009e8a:	68fb      	ldr	r3, [r7, #12]
 8009e8c:	3304      	adds	r3, #4
 8009e8e:	4619      	mov	r1, r3
 8009e90:	4610      	mov	r0, r2
 8009e92:	f7fd ff5a 	bl	8007d4a <vListInsert>
		}
	}

	return xProcessTimerNow;
 8009e96:	697b      	ldr	r3, [r7, #20]
}
 8009e98:	4618      	mov	r0, r3
 8009e9a:	3718      	adds	r7, #24
 8009e9c:	46bd      	mov	sp, r7
 8009e9e:	bd80      	pop	{r7, pc}
 8009ea0:	20003638 	.word	0x20003638
 8009ea4:	20003634 	.word	0x20003634

08009ea8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8009ea8:	b580      	push	{r7, lr}
 8009eaa:	b08e      	sub	sp, #56	; 0x38
 8009eac:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009eae:	e0ca      	b.n	800a046 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	2b00      	cmp	r3, #0
 8009eb4:	da18      	bge.n	8009ee8 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8009eb6:	1d3b      	adds	r3, r7, #4
 8009eb8:	3304      	adds	r3, #4
 8009eba:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8009ebc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ebe:	2b00      	cmp	r3, #0
 8009ec0:	d10a      	bne.n	8009ed8 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8009ec2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ec6:	f383 8811 	msr	BASEPRI, r3
 8009eca:	f3bf 8f6f 	isb	sy
 8009ece:	f3bf 8f4f 	dsb	sy
 8009ed2:	61fb      	str	r3, [r7, #28]
}
 8009ed4:	bf00      	nop
 8009ed6:	e7fe      	b.n	8009ed6 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8009ed8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009eda:	681b      	ldr	r3, [r3, #0]
 8009edc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009ede:	6850      	ldr	r0, [r2, #4]
 8009ee0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009ee2:	6892      	ldr	r2, [r2, #8]
 8009ee4:	4611      	mov	r1, r2
 8009ee6:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	2b00      	cmp	r3, #0
 8009eec:	f2c0 80aa 	blt.w	800a044 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8009ef0:	68fb      	ldr	r3, [r7, #12]
 8009ef2:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8009ef4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ef6:	695b      	ldr	r3, [r3, #20]
 8009ef8:	2b00      	cmp	r3, #0
 8009efa:	d004      	beq.n	8009f06 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009efc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009efe:	3304      	adds	r3, #4
 8009f00:	4618      	mov	r0, r3
 8009f02:	f7fd ff5b 	bl	8007dbc <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009f06:	463b      	mov	r3, r7
 8009f08:	4618      	mov	r0, r3
 8009f0a:	f7ff ff6b 	bl	8009de4 <prvSampleTimeNow>
 8009f0e:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	2b09      	cmp	r3, #9
 8009f14:	f200 8097 	bhi.w	800a046 <prvProcessReceivedCommands+0x19e>
 8009f18:	a201      	add	r2, pc, #4	; (adr r2, 8009f20 <prvProcessReceivedCommands+0x78>)
 8009f1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f1e:	bf00      	nop
 8009f20:	08009f49 	.word	0x08009f49
 8009f24:	08009f49 	.word	0x08009f49
 8009f28:	08009f49 	.word	0x08009f49
 8009f2c:	08009fbd 	.word	0x08009fbd
 8009f30:	08009fd1 	.word	0x08009fd1
 8009f34:	0800a01b 	.word	0x0800a01b
 8009f38:	08009f49 	.word	0x08009f49
 8009f3c:	08009f49 	.word	0x08009f49
 8009f40:	08009fbd 	.word	0x08009fbd
 8009f44:	08009fd1 	.word	0x08009fd1
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009f48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f4a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009f4e:	f043 0301 	orr.w	r3, r3, #1
 8009f52:	b2da      	uxtb	r2, r3
 8009f54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f56:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8009f5a:	68ba      	ldr	r2, [r7, #8]
 8009f5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f5e:	699b      	ldr	r3, [r3, #24]
 8009f60:	18d1      	adds	r1, r2, r3
 8009f62:	68bb      	ldr	r3, [r7, #8]
 8009f64:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009f66:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009f68:	f7ff ff5c 	bl	8009e24 <prvInsertTimerInActiveList>
 8009f6c:	4603      	mov	r3, r0
 8009f6e:	2b00      	cmp	r3, #0
 8009f70:	d069      	beq.n	800a046 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009f72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f74:	6a1b      	ldr	r3, [r3, #32]
 8009f76:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009f78:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009f7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f7c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009f80:	f003 0304 	and.w	r3, r3, #4
 8009f84:	2b00      	cmp	r3, #0
 8009f86:	d05e      	beq.n	800a046 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8009f88:	68ba      	ldr	r2, [r7, #8]
 8009f8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f8c:	699b      	ldr	r3, [r3, #24]
 8009f8e:	441a      	add	r2, r3
 8009f90:	2300      	movs	r3, #0
 8009f92:	9300      	str	r3, [sp, #0]
 8009f94:	2300      	movs	r3, #0
 8009f96:	2100      	movs	r1, #0
 8009f98:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009f9a:	f7ff fe05 	bl	8009ba8 <xTimerGenericCommand>
 8009f9e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8009fa0:	6a3b      	ldr	r3, [r7, #32]
 8009fa2:	2b00      	cmp	r3, #0
 8009fa4:	d14f      	bne.n	800a046 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8009fa6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009faa:	f383 8811 	msr	BASEPRI, r3
 8009fae:	f3bf 8f6f 	isb	sy
 8009fb2:	f3bf 8f4f 	dsb	sy
 8009fb6:	61bb      	str	r3, [r7, #24]
}
 8009fb8:	bf00      	nop
 8009fba:	e7fe      	b.n	8009fba <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009fbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009fbe:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009fc2:	f023 0301 	bic.w	r3, r3, #1
 8009fc6:	b2da      	uxtb	r2, r3
 8009fc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009fca:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8009fce:	e03a      	b.n	800a046 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009fd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009fd2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009fd6:	f043 0301 	orr.w	r3, r3, #1
 8009fda:	b2da      	uxtb	r2, r3
 8009fdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009fde:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8009fe2:	68ba      	ldr	r2, [r7, #8]
 8009fe4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009fe6:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8009fe8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009fea:	699b      	ldr	r3, [r3, #24]
 8009fec:	2b00      	cmp	r3, #0
 8009fee:	d10a      	bne.n	800a006 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8009ff0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ff4:	f383 8811 	msr	BASEPRI, r3
 8009ff8:	f3bf 8f6f 	isb	sy
 8009ffc:	f3bf 8f4f 	dsb	sy
 800a000:	617b      	str	r3, [r7, #20]
}
 800a002:	bf00      	nop
 800a004:	e7fe      	b.n	800a004 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800a006:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a008:	699a      	ldr	r2, [r3, #24]
 800a00a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a00c:	18d1      	adds	r1, r2, r3
 800a00e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a010:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a012:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a014:	f7ff ff06 	bl	8009e24 <prvInsertTimerInActiveList>
					break;
 800a018:	e015      	b.n	800a046 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800a01a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a01c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a020:	f003 0302 	and.w	r3, r3, #2
 800a024:	2b00      	cmp	r3, #0
 800a026:	d103      	bne.n	800a030 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800a028:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a02a:	f000 fbe1 	bl	800a7f0 <vPortFree>
 800a02e:	e00a      	b.n	800a046 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a030:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a032:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a036:	f023 0301 	bic.w	r3, r3, #1
 800a03a:	b2da      	uxtb	r2, r3
 800a03c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a03e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800a042:	e000      	b.n	800a046 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800a044:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a046:	4b08      	ldr	r3, [pc, #32]	; (800a068 <prvProcessReceivedCommands+0x1c0>)
 800a048:	681b      	ldr	r3, [r3, #0]
 800a04a:	1d39      	adds	r1, r7, #4
 800a04c:	2200      	movs	r2, #0
 800a04e:	4618      	mov	r0, r3
 800a050:	f7fe f9b6 	bl	80083c0 <xQueueReceive>
 800a054:	4603      	mov	r3, r0
 800a056:	2b00      	cmp	r3, #0
 800a058:	f47f af2a 	bne.w	8009eb0 <prvProcessReceivedCommands+0x8>
	}
}
 800a05c:	bf00      	nop
 800a05e:	bf00      	nop
 800a060:	3730      	adds	r7, #48	; 0x30
 800a062:	46bd      	mov	sp, r7
 800a064:	bd80      	pop	{r7, pc}
 800a066:	bf00      	nop
 800a068:	2000363c 	.word	0x2000363c

0800a06c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800a06c:	b580      	push	{r7, lr}
 800a06e:	b088      	sub	sp, #32
 800a070:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a072:	e048      	b.n	800a106 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a074:	4b2d      	ldr	r3, [pc, #180]	; (800a12c <prvSwitchTimerLists+0xc0>)
 800a076:	681b      	ldr	r3, [r3, #0]
 800a078:	68db      	ldr	r3, [r3, #12]
 800a07a:	681b      	ldr	r3, [r3, #0]
 800a07c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a07e:	4b2b      	ldr	r3, [pc, #172]	; (800a12c <prvSwitchTimerLists+0xc0>)
 800a080:	681b      	ldr	r3, [r3, #0]
 800a082:	68db      	ldr	r3, [r3, #12]
 800a084:	68db      	ldr	r3, [r3, #12]
 800a086:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a088:	68fb      	ldr	r3, [r7, #12]
 800a08a:	3304      	adds	r3, #4
 800a08c:	4618      	mov	r0, r3
 800a08e:	f7fd fe95 	bl	8007dbc <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a092:	68fb      	ldr	r3, [r7, #12]
 800a094:	6a1b      	ldr	r3, [r3, #32]
 800a096:	68f8      	ldr	r0, [r7, #12]
 800a098:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a09a:	68fb      	ldr	r3, [r7, #12]
 800a09c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a0a0:	f003 0304 	and.w	r3, r3, #4
 800a0a4:	2b00      	cmp	r3, #0
 800a0a6:	d02e      	beq.n	800a106 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800a0a8:	68fb      	ldr	r3, [r7, #12]
 800a0aa:	699b      	ldr	r3, [r3, #24]
 800a0ac:	693a      	ldr	r2, [r7, #16]
 800a0ae:	4413      	add	r3, r2
 800a0b0:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800a0b2:	68ba      	ldr	r2, [r7, #8]
 800a0b4:	693b      	ldr	r3, [r7, #16]
 800a0b6:	429a      	cmp	r2, r3
 800a0b8:	d90e      	bls.n	800a0d8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800a0ba:	68fb      	ldr	r3, [r7, #12]
 800a0bc:	68ba      	ldr	r2, [r7, #8]
 800a0be:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a0c0:	68fb      	ldr	r3, [r7, #12]
 800a0c2:	68fa      	ldr	r2, [r7, #12]
 800a0c4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a0c6:	4b19      	ldr	r3, [pc, #100]	; (800a12c <prvSwitchTimerLists+0xc0>)
 800a0c8:	681a      	ldr	r2, [r3, #0]
 800a0ca:	68fb      	ldr	r3, [r7, #12]
 800a0cc:	3304      	adds	r3, #4
 800a0ce:	4619      	mov	r1, r3
 800a0d0:	4610      	mov	r0, r2
 800a0d2:	f7fd fe3a 	bl	8007d4a <vListInsert>
 800a0d6:	e016      	b.n	800a106 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a0d8:	2300      	movs	r3, #0
 800a0da:	9300      	str	r3, [sp, #0]
 800a0dc:	2300      	movs	r3, #0
 800a0de:	693a      	ldr	r2, [r7, #16]
 800a0e0:	2100      	movs	r1, #0
 800a0e2:	68f8      	ldr	r0, [r7, #12]
 800a0e4:	f7ff fd60 	bl	8009ba8 <xTimerGenericCommand>
 800a0e8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	2b00      	cmp	r3, #0
 800a0ee:	d10a      	bne.n	800a106 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800a0f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0f4:	f383 8811 	msr	BASEPRI, r3
 800a0f8:	f3bf 8f6f 	isb	sy
 800a0fc:	f3bf 8f4f 	dsb	sy
 800a100:	603b      	str	r3, [r7, #0]
}
 800a102:	bf00      	nop
 800a104:	e7fe      	b.n	800a104 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a106:	4b09      	ldr	r3, [pc, #36]	; (800a12c <prvSwitchTimerLists+0xc0>)
 800a108:	681b      	ldr	r3, [r3, #0]
 800a10a:	681b      	ldr	r3, [r3, #0]
 800a10c:	2b00      	cmp	r3, #0
 800a10e:	d1b1      	bne.n	800a074 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800a110:	4b06      	ldr	r3, [pc, #24]	; (800a12c <prvSwitchTimerLists+0xc0>)
 800a112:	681b      	ldr	r3, [r3, #0]
 800a114:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800a116:	4b06      	ldr	r3, [pc, #24]	; (800a130 <prvSwitchTimerLists+0xc4>)
 800a118:	681b      	ldr	r3, [r3, #0]
 800a11a:	4a04      	ldr	r2, [pc, #16]	; (800a12c <prvSwitchTimerLists+0xc0>)
 800a11c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800a11e:	4a04      	ldr	r2, [pc, #16]	; (800a130 <prvSwitchTimerLists+0xc4>)
 800a120:	697b      	ldr	r3, [r7, #20]
 800a122:	6013      	str	r3, [r2, #0]
}
 800a124:	bf00      	nop
 800a126:	3718      	adds	r7, #24
 800a128:	46bd      	mov	sp, r7
 800a12a:	bd80      	pop	{r7, pc}
 800a12c:	20003634 	.word	0x20003634
 800a130:	20003638 	.word	0x20003638

0800a134 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800a134:	b580      	push	{r7, lr}
 800a136:	b082      	sub	sp, #8
 800a138:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800a13a:	f000 f96b 	bl	800a414 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800a13e:	4b15      	ldr	r3, [pc, #84]	; (800a194 <prvCheckForValidListAndQueue+0x60>)
 800a140:	681b      	ldr	r3, [r3, #0]
 800a142:	2b00      	cmp	r3, #0
 800a144:	d120      	bne.n	800a188 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800a146:	4814      	ldr	r0, [pc, #80]	; (800a198 <prvCheckForValidListAndQueue+0x64>)
 800a148:	f7fd fdae 	bl	8007ca8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800a14c:	4813      	ldr	r0, [pc, #76]	; (800a19c <prvCheckForValidListAndQueue+0x68>)
 800a14e:	f7fd fdab 	bl	8007ca8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800a152:	4b13      	ldr	r3, [pc, #76]	; (800a1a0 <prvCheckForValidListAndQueue+0x6c>)
 800a154:	4a10      	ldr	r2, [pc, #64]	; (800a198 <prvCheckForValidListAndQueue+0x64>)
 800a156:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800a158:	4b12      	ldr	r3, [pc, #72]	; (800a1a4 <prvCheckForValidListAndQueue+0x70>)
 800a15a:	4a10      	ldr	r2, [pc, #64]	; (800a19c <prvCheckForValidListAndQueue+0x68>)
 800a15c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800a15e:	2300      	movs	r3, #0
 800a160:	9300      	str	r3, [sp, #0]
 800a162:	4b11      	ldr	r3, [pc, #68]	; (800a1a8 <prvCheckForValidListAndQueue+0x74>)
 800a164:	4a11      	ldr	r2, [pc, #68]	; (800a1ac <prvCheckForValidListAndQueue+0x78>)
 800a166:	2110      	movs	r1, #16
 800a168:	200a      	movs	r0, #10
 800a16a:	f7fd feb9 	bl	8007ee0 <xQueueGenericCreateStatic>
 800a16e:	4603      	mov	r3, r0
 800a170:	4a08      	ldr	r2, [pc, #32]	; (800a194 <prvCheckForValidListAndQueue+0x60>)
 800a172:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800a174:	4b07      	ldr	r3, [pc, #28]	; (800a194 <prvCheckForValidListAndQueue+0x60>)
 800a176:	681b      	ldr	r3, [r3, #0]
 800a178:	2b00      	cmp	r3, #0
 800a17a:	d005      	beq.n	800a188 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800a17c:	4b05      	ldr	r3, [pc, #20]	; (800a194 <prvCheckForValidListAndQueue+0x60>)
 800a17e:	681b      	ldr	r3, [r3, #0]
 800a180:	490b      	ldr	r1, [pc, #44]	; (800a1b0 <prvCheckForValidListAndQueue+0x7c>)
 800a182:	4618      	mov	r0, r3
 800a184:	f7fe fb8c 	bl	80088a0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a188:	f000 f974 	bl	800a474 <vPortExitCritical>
}
 800a18c:	bf00      	nop
 800a18e:	46bd      	mov	sp, r7
 800a190:	bd80      	pop	{r7, pc}
 800a192:	bf00      	nop
 800a194:	2000363c 	.word	0x2000363c
 800a198:	2000360c 	.word	0x2000360c
 800a19c:	20003620 	.word	0x20003620
 800a1a0:	20003634 	.word	0x20003634
 800a1a4:	20003638 	.word	0x20003638
 800a1a8:	200036e8 	.word	0x200036e8
 800a1ac:	20003648 	.word	0x20003648
 800a1b0:	0800c310 	.word	0x0800c310

0800a1b4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800a1b4:	b480      	push	{r7}
 800a1b6:	b085      	sub	sp, #20
 800a1b8:	af00      	add	r7, sp, #0
 800a1ba:	60f8      	str	r0, [r7, #12]
 800a1bc:	60b9      	str	r1, [r7, #8]
 800a1be:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800a1c0:	68fb      	ldr	r3, [r7, #12]
 800a1c2:	3b04      	subs	r3, #4
 800a1c4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800a1c6:	68fb      	ldr	r3, [r7, #12]
 800a1c8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800a1cc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a1ce:	68fb      	ldr	r3, [r7, #12]
 800a1d0:	3b04      	subs	r3, #4
 800a1d2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800a1d4:	68bb      	ldr	r3, [r7, #8]
 800a1d6:	f023 0201 	bic.w	r2, r3, #1
 800a1da:	68fb      	ldr	r3, [r7, #12]
 800a1dc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a1de:	68fb      	ldr	r3, [r7, #12]
 800a1e0:	3b04      	subs	r3, #4
 800a1e2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800a1e4:	4a0c      	ldr	r2, [pc, #48]	; (800a218 <pxPortInitialiseStack+0x64>)
 800a1e6:	68fb      	ldr	r3, [r7, #12]
 800a1e8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800a1ea:	68fb      	ldr	r3, [r7, #12]
 800a1ec:	3b14      	subs	r3, #20
 800a1ee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800a1f0:	687a      	ldr	r2, [r7, #4]
 800a1f2:	68fb      	ldr	r3, [r7, #12]
 800a1f4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800a1f6:	68fb      	ldr	r3, [r7, #12]
 800a1f8:	3b04      	subs	r3, #4
 800a1fa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800a1fc:	68fb      	ldr	r3, [r7, #12]
 800a1fe:	f06f 0202 	mvn.w	r2, #2
 800a202:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800a204:	68fb      	ldr	r3, [r7, #12]
 800a206:	3b20      	subs	r3, #32
 800a208:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800a20a:	68fb      	ldr	r3, [r7, #12]
}
 800a20c:	4618      	mov	r0, r3
 800a20e:	3714      	adds	r7, #20
 800a210:	46bd      	mov	sp, r7
 800a212:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a216:	4770      	bx	lr
 800a218:	0800a21d 	.word	0x0800a21d

0800a21c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800a21c:	b480      	push	{r7}
 800a21e:	b085      	sub	sp, #20
 800a220:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800a222:	2300      	movs	r3, #0
 800a224:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800a226:	4b12      	ldr	r3, [pc, #72]	; (800a270 <prvTaskExitError+0x54>)
 800a228:	681b      	ldr	r3, [r3, #0]
 800a22a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a22e:	d00a      	beq.n	800a246 <prvTaskExitError+0x2a>
	__asm volatile
 800a230:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a234:	f383 8811 	msr	BASEPRI, r3
 800a238:	f3bf 8f6f 	isb	sy
 800a23c:	f3bf 8f4f 	dsb	sy
 800a240:	60fb      	str	r3, [r7, #12]
}
 800a242:	bf00      	nop
 800a244:	e7fe      	b.n	800a244 <prvTaskExitError+0x28>
	__asm volatile
 800a246:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a24a:	f383 8811 	msr	BASEPRI, r3
 800a24e:	f3bf 8f6f 	isb	sy
 800a252:	f3bf 8f4f 	dsb	sy
 800a256:	60bb      	str	r3, [r7, #8]
}
 800a258:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800a25a:	bf00      	nop
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	2b00      	cmp	r3, #0
 800a260:	d0fc      	beq.n	800a25c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800a262:	bf00      	nop
 800a264:	bf00      	nop
 800a266:	3714      	adds	r7, #20
 800a268:	46bd      	mov	sp, r7
 800a26a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a26e:	4770      	bx	lr
 800a270:	20000014 	.word	0x20000014
	...

0800a280 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800a280:	4b07      	ldr	r3, [pc, #28]	; (800a2a0 <pxCurrentTCBConst2>)
 800a282:	6819      	ldr	r1, [r3, #0]
 800a284:	6808      	ldr	r0, [r1, #0]
 800a286:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a28a:	f380 8809 	msr	PSP, r0
 800a28e:	f3bf 8f6f 	isb	sy
 800a292:	f04f 0000 	mov.w	r0, #0
 800a296:	f380 8811 	msr	BASEPRI, r0
 800a29a:	4770      	bx	lr
 800a29c:	f3af 8000 	nop.w

0800a2a0 <pxCurrentTCBConst2>:
 800a2a0:	2000310c 	.word	0x2000310c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800a2a4:	bf00      	nop
 800a2a6:	bf00      	nop

0800a2a8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800a2a8:	4808      	ldr	r0, [pc, #32]	; (800a2cc <prvPortStartFirstTask+0x24>)
 800a2aa:	6800      	ldr	r0, [r0, #0]
 800a2ac:	6800      	ldr	r0, [r0, #0]
 800a2ae:	f380 8808 	msr	MSP, r0
 800a2b2:	f04f 0000 	mov.w	r0, #0
 800a2b6:	f380 8814 	msr	CONTROL, r0
 800a2ba:	b662      	cpsie	i
 800a2bc:	b661      	cpsie	f
 800a2be:	f3bf 8f4f 	dsb	sy
 800a2c2:	f3bf 8f6f 	isb	sy
 800a2c6:	df00      	svc	0
 800a2c8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800a2ca:	bf00      	nop
 800a2cc:	e000ed08 	.word	0xe000ed08

0800a2d0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800a2d0:	b580      	push	{r7, lr}
 800a2d2:	b086      	sub	sp, #24
 800a2d4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800a2d6:	4b46      	ldr	r3, [pc, #280]	; (800a3f0 <xPortStartScheduler+0x120>)
 800a2d8:	681b      	ldr	r3, [r3, #0]
 800a2da:	4a46      	ldr	r2, [pc, #280]	; (800a3f4 <xPortStartScheduler+0x124>)
 800a2dc:	4293      	cmp	r3, r2
 800a2de:	d10a      	bne.n	800a2f6 <xPortStartScheduler+0x26>
	__asm volatile
 800a2e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2e4:	f383 8811 	msr	BASEPRI, r3
 800a2e8:	f3bf 8f6f 	isb	sy
 800a2ec:	f3bf 8f4f 	dsb	sy
 800a2f0:	613b      	str	r3, [r7, #16]
}
 800a2f2:	bf00      	nop
 800a2f4:	e7fe      	b.n	800a2f4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800a2f6:	4b3e      	ldr	r3, [pc, #248]	; (800a3f0 <xPortStartScheduler+0x120>)
 800a2f8:	681b      	ldr	r3, [r3, #0]
 800a2fa:	4a3f      	ldr	r2, [pc, #252]	; (800a3f8 <xPortStartScheduler+0x128>)
 800a2fc:	4293      	cmp	r3, r2
 800a2fe:	d10a      	bne.n	800a316 <xPortStartScheduler+0x46>
	__asm volatile
 800a300:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a304:	f383 8811 	msr	BASEPRI, r3
 800a308:	f3bf 8f6f 	isb	sy
 800a30c:	f3bf 8f4f 	dsb	sy
 800a310:	60fb      	str	r3, [r7, #12]
}
 800a312:	bf00      	nop
 800a314:	e7fe      	b.n	800a314 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800a316:	4b39      	ldr	r3, [pc, #228]	; (800a3fc <xPortStartScheduler+0x12c>)
 800a318:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800a31a:	697b      	ldr	r3, [r7, #20]
 800a31c:	781b      	ldrb	r3, [r3, #0]
 800a31e:	b2db      	uxtb	r3, r3
 800a320:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800a322:	697b      	ldr	r3, [r7, #20]
 800a324:	22ff      	movs	r2, #255	; 0xff
 800a326:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800a328:	697b      	ldr	r3, [r7, #20]
 800a32a:	781b      	ldrb	r3, [r3, #0]
 800a32c:	b2db      	uxtb	r3, r3
 800a32e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800a330:	78fb      	ldrb	r3, [r7, #3]
 800a332:	b2db      	uxtb	r3, r3
 800a334:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800a338:	b2da      	uxtb	r2, r3
 800a33a:	4b31      	ldr	r3, [pc, #196]	; (800a400 <xPortStartScheduler+0x130>)
 800a33c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800a33e:	4b31      	ldr	r3, [pc, #196]	; (800a404 <xPortStartScheduler+0x134>)
 800a340:	2207      	movs	r2, #7
 800a342:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a344:	e009      	b.n	800a35a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800a346:	4b2f      	ldr	r3, [pc, #188]	; (800a404 <xPortStartScheduler+0x134>)
 800a348:	681b      	ldr	r3, [r3, #0]
 800a34a:	3b01      	subs	r3, #1
 800a34c:	4a2d      	ldr	r2, [pc, #180]	; (800a404 <xPortStartScheduler+0x134>)
 800a34e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800a350:	78fb      	ldrb	r3, [r7, #3]
 800a352:	b2db      	uxtb	r3, r3
 800a354:	005b      	lsls	r3, r3, #1
 800a356:	b2db      	uxtb	r3, r3
 800a358:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a35a:	78fb      	ldrb	r3, [r7, #3]
 800a35c:	b2db      	uxtb	r3, r3
 800a35e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a362:	2b80      	cmp	r3, #128	; 0x80
 800a364:	d0ef      	beq.n	800a346 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800a366:	4b27      	ldr	r3, [pc, #156]	; (800a404 <xPortStartScheduler+0x134>)
 800a368:	681b      	ldr	r3, [r3, #0]
 800a36a:	f1c3 0307 	rsb	r3, r3, #7
 800a36e:	2b04      	cmp	r3, #4
 800a370:	d00a      	beq.n	800a388 <xPortStartScheduler+0xb8>
	__asm volatile
 800a372:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a376:	f383 8811 	msr	BASEPRI, r3
 800a37a:	f3bf 8f6f 	isb	sy
 800a37e:	f3bf 8f4f 	dsb	sy
 800a382:	60bb      	str	r3, [r7, #8]
}
 800a384:	bf00      	nop
 800a386:	e7fe      	b.n	800a386 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800a388:	4b1e      	ldr	r3, [pc, #120]	; (800a404 <xPortStartScheduler+0x134>)
 800a38a:	681b      	ldr	r3, [r3, #0]
 800a38c:	021b      	lsls	r3, r3, #8
 800a38e:	4a1d      	ldr	r2, [pc, #116]	; (800a404 <xPortStartScheduler+0x134>)
 800a390:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800a392:	4b1c      	ldr	r3, [pc, #112]	; (800a404 <xPortStartScheduler+0x134>)
 800a394:	681b      	ldr	r3, [r3, #0]
 800a396:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a39a:	4a1a      	ldr	r2, [pc, #104]	; (800a404 <xPortStartScheduler+0x134>)
 800a39c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	b2da      	uxtb	r2, r3
 800a3a2:	697b      	ldr	r3, [r7, #20]
 800a3a4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800a3a6:	4b18      	ldr	r3, [pc, #96]	; (800a408 <xPortStartScheduler+0x138>)
 800a3a8:	681b      	ldr	r3, [r3, #0]
 800a3aa:	4a17      	ldr	r2, [pc, #92]	; (800a408 <xPortStartScheduler+0x138>)
 800a3ac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800a3b0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800a3b2:	4b15      	ldr	r3, [pc, #84]	; (800a408 <xPortStartScheduler+0x138>)
 800a3b4:	681b      	ldr	r3, [r3, #0]
 800a3b6:	4a14      	ldr	r2, [pc, #80]	; (800a408 <xPortStartScheduler+0x138>)
 800a3b8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800a3bc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800a3be:	f000 f8dd 	bl	800a57c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800a3c2:	4b12      	ldr	r3, [pc, #72]	; (800a40c <xPortStartScheduler+0x13c>)
 800a3c4:	2200      	movs	r2, #0
 800a3c6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800a3c8:	f000 f8fc 	bl	800a5c4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800a3cc:	4b10      	ldr	r3, [pc, #64]	; (800a410 <xPortStartScheduler+0x140>)
 800a3ce:	681b      	ldr	r3, [r3, #0]
 800a3d0:	4a0f      	ldr	r2, [pc, #60]	; (800a410 <xPortStartScheduler+0x140>)
 800a3d2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800a3d6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800a3d8:	f7ff ff66 	bl	800a2a8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800a3dc:	f7fe ff02 	bl	80091e4 <vTaskSwitchContext>
	prvTaskExitError();
 800a3e0:	f7ff ff1c 	bl	800a21c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800a3e4:	2300      	movs	r3, #0
}
 800a3e6:	4618      	mov	r0, r3
 800a3e8:	3718      	adds	r7, #24
 800a3ea:	46bd      	mov	sp, r7
 800a3ec:	bd80      	pop	{r7, pc}
 800a3ee:	bf00      	nop
 800a3f0:	e000ed00 	.word	0xe000ed00
 800a3f4:	410fc271 	.word	0x410fc271
 800a3f8:	410fc270 	.word	0x410fc270
 800a3fc:	e000e400 	.word	0xe000e400
 800a400:	20003738 	.word	0x20003738
 800a404:	2000373c 	.word	0x2000373c
 800a408:	e000ed20 	.word	0xe000ed20
 800a40c:	20000014 	.word	0x20000014
 800a410:	e000ef34 	.word	0xe000ef34

0800a414 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800a414:	b480      	push	{r7}
 800a416:	b083      	sub	sp, #12
 800a418:	af00      	add	r7, sp, #0
	__asm volatile
 800a41a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a41e:	f383 8811 	msr	BASEPRI, r3
 800a422:	f3bf 8f6f 	isb	sy
 800a426:	f3bf 8f4f 	dsb	sy
 800a42a:	607b      	str	r3, [r7, #4]
}
 800a42c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800a42e:	4b0f      	ldr	r3, [pc, #60]	; (800a46c <vPortEnterCritical+0x58>)
 800a430:	681b      	ldr	r3, [r3, #0]
 800a432:	3301      	adds	r3, #1
 800a434:	4a0d      	ldr	r2, [pc, #52]	; (800a46c <vPortEnterCritical+0x58>)
 800a436:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800a438:	4b0c      	ldr	r3, [pc, #48]	; (800a46c <vPortEnterCritical+0x58>)
 800a43a:	681b      	ldr	r3, [r3, #0]
 800a43c:	2b01      	cmp	r3, #1
 800a43e:	d10f      	bne.n	800a460 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800a440:	4b0b      	ldr	r3, [pc, #44]	; (800a470 <vPortEnterCritical+0x5c>)
 800a442:	681b      	ldr	r3, [r3, #0]
 800a444:	b2db      	uxtb	r3, r3
 800a446:	2b00      	cmp	r3, #0
 800a448:	d00a      	beq.n	800a460 <vPortEnterCritical+0x4c>
	__asm volatile
 800a44a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a44e:	f383 8811 	msr	BASEPRI, r3
 800a452:	f3bf 8f6f 	isb	sy
 800a456:	f3bf 8f4f 	dsb	sy
 800a45a:	603b      	str	r3, [r7, #0]
}
 800a45c:	bf00      	nop
 800a45e:	e7fe      	b.n	800a45e <vPortEnterCritical+0x4a>
	}
}
 800a460:	bf00      	nop
 800a462:	370c      	adds	r7, #12
 800a464:	46bd      	mov	sp, r7
 800a466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a46a:	4770      	bx	lr
 800a46c:	20000014 	.word	0x20000014
 800a470:	e000ed04 	.word	0xe000ed04

0800a474 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800a474:	b480      	push	{r7}
 800a476:	b083      	sub	sp, #12
 800a478:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800a47a:	4b12      	ldr	r3, [pc, #72]	; (800a4c4 <vPortExitCritical+0x50>)
 800a47c:	681b      	ldr	r3, [r3, #0]
 800a47e:	2b00      	cmp	r3, #0
 800a480:	d10a      	bne.n	800a498 <vPortExitCritical+0x24>
	__asm volatile
 800a482:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a486:	f383 8811 	msr	BASEPRI, r3
 800a48a:	f3bf 8f6f 	isb	sy
 800a48e:	f3bf 8f4f 	dsb	sy
 800a492:	607b      	str	r3, [r7, #4]
}
 800a494:	bf00      	nop
 800a496:	e7fe      	b.n	800a496 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800a498:	4b0a      	ldr	r3, [pc, #40]	; (800a4c4 <vPortExitCritical+0x50>)
 800a49a:	681b      	ldr	r3, [r3, #0]
 800a49c:	3b01      	subs	r3, #1
 800a49e:	4a09      	ldr	r2, [pc, #36]	; (800a4c4 <vPortExitCritical+0x50>)
 800a4a0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800a4a2:	4b08      	ldr	r3, [pc, #32]	; (800a4c4 <vPortExitCritical+0x50>)
 800a4a4:	681b      	ldr	r3, [r3, #0]
 800a4a6:	2b00      	cmp	r3, #0
 800a4a8:	d105      	bne.n	800a4b6 <vPortExitCritical+0x42>
 800a4aa:	2300      	movs	r3, #0
 800a4ac:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a4ae:	683b      	ldr	r3, [r7, #0]
 800a4b0:	f383 8811 	msr	BASEPRI, r3
}
 800a4b4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800a4b6:	bf00      	nop
 800a4b8:	370c      	adds	r7, #12
 800a4ba:	46bd      	mov	sp, r7
 800a4bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4c0:	4770      	bx	lr
 800a4c2:	bf00      	nop
 800a4c4:	20000014 	.word	0x20000014
	...

0800a4d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800a4d0:	f3ef 8009 	mrs	r0, PSP
 800a4d4:	f3bf 8f6f 	isb	sy
 800a4d8:	4b15      	ldr	r3, [pc, #84]	; (800a530 <pxCurrentTCBConst>)
 800a4da:	681a      	ldr	r2, [r3, #0]
 800a4dc:	f01e 0f10 	tst.w	lr, #16
 800a4e0:	bf08      	it	eq
 800a4e2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800a4e6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a4ea:	6010      	str	r0, [r2, #0]
 800a4ec:	e92d 0009 	stmdb	sp!, {r0, r3}
 800a4f0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800a4f4:	f380 8811 	msr	BASEPRI, r0
 800a4f8:	f3bf 8f4f 	dsb	sy
 800a4fc:	f3bf 8f6f 	isb	sy
 800a500:	f7fe fe70 	bl	80091e4 <vTaskSwitchContext>
 800a504:	f04f 0000 	mov.w	r0, #0
 800a508:	f380 8811 	msr	BASEPRI, r0
 800a50c:	bc09      	pop	{r0, r3}
 800a50e:	6819      	ldr	r1, [r3, #0]
 800a510:	6808      	ldr	r0, [r1, #0]
 800a512:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a516:	f01e 0f10 	tst.w	lr, #16
 800a51a:	bf08      	it	eq
 800a51c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800a520:	f380 8809 	msr	PSP, r0
 800a524:	f3bf 8f6f 	isb	sy
 800a528:	4770      	bx	lr
 800a52a:	bf00      	nop
 800a52c:	f3af 8000 	nop.w

0800a530 <pxCurrentTCBConst>:
 800a530:	2000310c 	.word	0x2000310c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800a534:	bf00      	nop
 800a536:	bf00      	nop

0800a538 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800a538:	b580      	push	{r7, lr}
 800a53a:	b082      	sub	sp, #8
 800a53c:	af00      	add	r7, sp, #0
	__asm volatile
 800a53e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a542:	f383 8811 	msr	BASEPRI, r3
 800a546:	f3bf 8f6f 	isb	sy
 800a54a:	f3bf 8f4f 	dsb	sy
 800a54e:	607b      	str	r3, [r7, #4]
}
 800a550:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800a552:	f7fe fd8d 	bl	8009070 <xTaskIncrementTick>
 800a556:	4603      	mov	r3, r0
 800a558:	2b00      	cmp	r3, #0
 800a55a:	d003      	beq.n	800a564 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800a55c:	4b06      	ldr	r3, [pc, #24]	; (800a578 <xPortSysTickHandler+0x40>)
 800a55e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a562:	601a      	str	r2, [r3, #0]
 800a564:	2300      	movs	r3, #0
 800a566:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a568:	683b      	ldr	r3, [r7, #0]
 800a56a:	f383 8811 	msr	BASEPRI, r3
}
 800a56e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800a570:	bf00      	nop
 800a572:	3708      	adds	r7, #8
 800a574:	46bd      	mov	sp, r7
 800a576:	bd80      	pop	{r7, pc}
 800a578:	e000ed04 	.word	0xe000ed04

0800a57c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800a57c:	b480      	push	{r7}
 800a57e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800a580:	4b0b      	ldr	r3, [pc, #44]	; (800a5b0 <vPortSetupTimerInterrupt+0x34>)
 800a582:	2200      	movs	r2, #0
 800a584:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800a586:	4b0b      	ldr	r3, [pc, #44]	; (800a5b4 <vPortSetupTimerInterrupt+0x38>)
 800a588:	2200      	movs	r2, #0
 800a58a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800a58c:	4b0a      	ldr	r3, [pc, #40]	; (800a5b8 <vPortSetupTimerInterrupt+0x3c>)
 800a58e:	681b      	ldr	r3, [r3, #0]
 800a590:	4a0a      	ldr	r2, [pc, #40]	; (800a5bc <vPortSetupTimerInterrupt+0x40>)
 800a592:	fba2 2303 	umull	r2, r3, r2, r3
 800a596:	099b      	lsrs	r3, r3, #6
 800a598:	4a09      	ldr	r2, [pc, #36]	; (800a5c0 <vPortSetupTimerInterrupt+0x44>)
 800a59a:	3b01      	subs	r3, #1
 800a59c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800a59e:	4b04      	ldr	r3, [pc, #16]	; (800a5b0 <vPortSetupTimerInterrupt+0x34>)
 800a5a0:	2207      	movs	r2, #7
 800a5a2:	601a      	str	r2, [r3, #0]
}
 800a5a4:	bf00      	nop
 800a5a6:	46bd      	mov	sp, r7
 800a5a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5ac:	4770      	bx	lr
 800a5ae:	bf00      	nop
 800a5b0:	e000e010 	.word	0xe000e010
 800a5b4:	e000e018 	.word	0xe000e018
 800a5b8:	20000000 	.word	0x20000000
 800a5bc:	10624dd3 	.word	0x10624dd3
 800a5c0:	e000e014 	.word	0xe000e014

0800a5c4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800a5c4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800a5d4 <vPortEnableVFP+0x10>
 800a5c8:	6801      	ldr	r1, [r0, #0]
 800a5ca:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800a5ce:	6001      	str	r1, [r0, #0]
 800a5d0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800a5d2:	bf00      	nop
 800a5d4:	e000ed88 	.word	0xe000ed88

0800a5d8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800a5d8:	b480      	push	{r7}
 800a5da:	b085      	sub	sp, #20
 800a5dc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800a5de:	f3ef 8305 	mrs	r3, IPSR
 800a5e2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800a5e4:	68fb      	ldr	r3, [r7, #12]
 800a5e6:	2b0f      	cmp	r3, #15
 800a5e8:	d914      	bls.n	800a614 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800a5ea:	4a17      	ldr	r2, [pc, #92]	; (800a648 <vPortValidateInterruptPriority+0x70>)
 800a5ec:	68fb      	ldr	r3, [r7, #12]
 800a5ee:	4413      	add	r3, r2
 800a5f0:	781b      	ldrb	r3, [r3, #0]
 800a5f2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800a5f4:	4b15      	ldr	r3, [pc, #84]	; (800a64c <vPortValidateInterruptPriority+0x74>)
 800a5f6:	781b      	ldrb	r3, [r3, #0]
 800a5f8:	7afa      	ldrb	r2, [r7, #11]
 800a5fa:	429a      	cmp	r2, r3
 800a5fc:	d20a      	bcs.n	800a614 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800a5fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a602:	f383 8811 	msr	BASEPRI, r3
 800a606:	f3bf 8f6f 	isb	sy
 800a60a:	f3bf 8f4f 	dsb	sy
 800a60e:	607b      	str	r3, [r7, #4]
}
 800a610:	bf00      	nop
 800a612:	e7fe      	b.n	800a612 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800a614:	4b0e      	ldr	r3, [pc, #56]	; (800a650 <vPortValidateInterruptPriority+0x78>)
 800a616:	681b      	ldr	r3, [r3, #0]
 800a618:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800a61c:	4b0d      	ldr	r3, [pc, #52]	; (800a654 <vPortValidateInterruptPriority+0x7c>)
 800a61e:	681b      	ldr	r3, [r3, #0]
 800a620:	429a      	cmp	r2, r3
 800a622:	d90a      	bls.n	800a63a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800a624:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a628:	f383 8811 	msr	BASEPRI, r3
 800a62c:	f3bf 8f6f 	isb	sy
 800a630:	f3bf 8f4f 	dsb	sy
 800a634:	603b      	str	r3, [r7, #0]
}
 800a636:	bf00      	nop
 800a638:	e7fe      	b.n	800a638 <vPortValidateInterruptPriority+0x60>
	}
 800a63a:	bf00      	nop
 800a63c:	3714      	adds	r7, #20
 800a63e:	46bd      	mov	sp, r7
 800a640:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a644:	4770      	bx	lr
 800a646:	bf00      	nop
 800a648:	e000e3f0 	.word	0xe000e3f0
 800a64c:	20003738 	.word	0x20003738
 800a650:	e000ed0c 	.word	0xe000ed0c
 800a654:	2000373c 	.word	0x2000373c

0800a658 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800a658:	b580      	push	{r7, lr}
 800a65a:	b08a      	sub	sp, #40	; 0x28
 800a65c:	af00      	add	r7, sp, #0
 800a65e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800a660:	2300      	movs	r3, #0
 800a662:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800a664:	f7fe fc48 	bl	8008ef8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800a668:	4b5b      	ldr	r3, [pc, #364]	; (800a7d8 <pvPortMalloc+0x180>)
 800a66a:	681b      	ldr	r3, [r3, #0]
 800a66c:	2b00      	cmp	r3, #0
 800a66e:	d101      	bne.n	800a674 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800a670:	f000 f920 	bl	800a8b4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800a674:	4b59      	ldr	r3, [pc, #356]	; (800a7dc <pvPortMalloc+0x184>)
 800a676:	681a      	ldr	r2, [r3, #0]
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	4013      	ands	r3, r2
 800a67c:	2b00      	cmp	r3, #0
 800a67e:	f040 8093 	bne.w	800a7a8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	2b00      	cmp	r3, #0
 800a686:	d01d      	beq.n	800a6c4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800a688:	2208      	movs	r2, #8
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	4413      	add	r3, r2
 800a68e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	f003 0307 	and.w	r3, r3, #7
 800a696:	2b00      	cmp	r3, #0
 800a698:	d014      	beq.n	800a6c4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	f023 0307 	bic.w	r3, r3, #7
 800a6a0:	3308      	adds	r3, #8
 800a6a2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	f003 0307 	and.w	r3, r3, #7
 800a6aa:	2b00      	cmp	r3, #0
 800a6ac:	d00a      	beq.n	800a6c4 <pvPortMalloc+0x6c>
	__asm volatile
 800a6ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6b2:	f383 8811 	msr	BASEPRI, r3
 800a6b6:	f3bf 8f6f 	isb	sy
 800a6ba:	f3bf 8f4f 	dsb	sy
 800a6be:	617b      	str	r3, [r7, #20]
}
 800a6c0:	bf00      	nop
 800a6c2:	e7fe      	b.n	800a6c2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	2b00      	cmp	r3, #0
 800a6c8:	d06e      	beq.n	800a7a8 <pvPortMalloc+0x150>
 800a6ca:	4b45      	ldr	r3, [pc, #276]	; (800a7e0 <pvPortMalloc+0x188>)
 800a6cc:	681b      	ldr	r3, [r3, #0]
 800a6ce:	687a      	ldr	r2, [r7, #4]
 800a6d0:	429a      	cmp	r2, r3
 800a6d2:	d869      	bhi.n	800a7a8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800a6d4:	4b43      	ldr	r3, [pc, #268]	; (800a7e4 <pvPortMalloc+0x18c>)
 800a6d6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800a6d8:	4b42      	ldr	r3, [pc, #264]	; (800a7e4 <pvPortMalloc+0x18c>)
 800a6da:	681b      	ldr	r3, [r3, #0]
 800a6dc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a6de:	e004      	b.n	800a6ea <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800a6e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6e2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800a6e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6e6:	681b      	ldr	r3, [r3, #0]
 800a6e8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a6ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6ec:	685b      	ldr	r3, [r3, #4]
 800a6ee:	687a      	ldr	r2, [r7, #4]
 800a6f0:	429a      	cmp	r2, r3
 800a6f2:	d903      	bls.n	800a6fc <pvPortMalloc+0xa4>
 800a6f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6f6:	681b      	ldr	r3, [r3, #0]
 800a6f8:	2b00      	cmp	r3, #0
 800a6fa:	d1f1      	bne.n	800a6e0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800a6fc:	4b36      	ldr	r3, [pc, #216]	; (800a7d8 <pvPortMalloc+0x180>)
 800a6fe:	681b      	ldr	r3, [r3, #0]
 800a700:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a702:	429a      	cmp	r2, r3
 800a704:	d050      	beq.n	800a7a8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800a706:	6a3b      	ldr	r3, [r7, #32]
 800a708:	681b      	ldr	r3, [r3, #0]
 800a70a:	2208      	movs	r2, #8
 800a70c:	4413      	add	r3, r2
 800a70e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a712:	681a      	ldr	r2, [r3, #0]
 800a714:	6a3b      	ldr	r3, [r7, #32]
 800a716:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a718:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a71a:	685a      	ldr	r2, [r3, #4]
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	1ad2      	subs	r2, r2, r3
 800a720:	2308      	movs	r3, #8
 800a722:	005b      	lsls	r3, r3, #1
 800a724:	429a      	cmp	r2, r3
 800a726:	d91f      	bls.n	800a768 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800a728:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	4413      	add	r3, r2
 800a72e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a730:	69bb      	ldr	r3, [r7, #24]
 800a732:	f003 0307 	and.w	r3, r3, #7
 800a736:	2b00      	cmp	r3, #0
 800a738:	d00a      	beq.n	800a750 <pvPortMalloc+0xf8>
	__asm volatile
 800a73a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a73e:	f383 8811 	msr	BASEPRI, r3
 800a742:	f3bf 8f6f 	isb	sy
 800a746:	f3bf 8f4f 	dsb	sy
 800a74a:	613b      	str	r3, [r7, #16]
}
 800a74c:	bf00      	nop
 800a74e:	e7fe      	b.n	800a74e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800a750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a752:	685a      	ldr	r2, [r3, #4]
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	1ad2      	subs	r2, r2, r3
 800a758:	69bb      	ldr	r3, [r7, #24]
 800a75a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800a75c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a75e:	687a      	ldr	r2, [r7, #4]
 800a760:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800a762:	69b8      	ldr	r0, [r7, #24]
 800a764:	f000 f908 	bl	800a978 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a768:	4b1d      	ldr	r3, [pc, #116]	; (800a7e0 <pvPortMalloc+0x188>)
 800a76a:	681a      	ldr	r2, [r3, #0]
 800a76c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a76e:	685b      	ldr	r3, [r3, #4]
 800a770:	1ad3      	subs	r3, r2, r3
 800a772:	4a1b      	ldr	r2, [pc, #108]	; (800a7e0 <pvPortMalloc+0x188>)
 800a774:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a776:	4b1a      	ldr	r3, [pc, #104]	; (800a7e0 <pvPortMalloc+0x188>)
 800a778:	681a      	ldr	r2, [r3, #0]
 800a77a:	4b1b      	ldr	r3, [pc, #108]	; (800a7e8 <pvPortMalloc+0x190>)
 800a77c:	681b      	ldr	r3, [r3, #0]
 800a77e:	429a      	cmp	r2, r3
 800a780:	d203      	bcs.n	800a78a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800a782:	4b17      	ldr	r3, [pc, #92]	; (800a7e0 <pvPortMalloc+0x188>)
 800a784:	681b      	ldr	r3, [r3, #0]
 800a786:	4a18      	ldr	r2, [pc, #96]	; (800a7e8 <pvPortMalloc+0x190>)
 800a788:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800a78a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a78c:	685a      	ldr	r2, [r3, #4]
 800a78e:	4b13      	ldr	r3, [pc, #76]	; (800a7dc <pvPortMalloc+0x184>)
 800a790:	681b      	ldr	r3, [r3, #0]
 800a792:	431a      	orrs	r2, r3
 800a794:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a796:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800a798:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a79a:	2200      	movs	r2, #0
 800a79c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800a79e:	4b13      	ldr	r3, [pc, #76]	; (800a7ec <pvPortMalloc+0x194>)
 800a7a0:	681b      	ldr	r3, [r3, #0]
 800a7a2:	3301      	adds	r3, #1
 800a7a4:	4a11      	ldr	r2, [pc, #68]	; (800a7ec <pvPortMalloc+0x194>)
 800a7a6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800a7a8:	f7fe fbb4 	bl	8008f14 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800a7ac:	69fb      	ldr	r3, [r7, #28]
 800a7ae:	f003 0307 	and.w	r3, r3, #7
 800a7b2:	2b00      	cmp	r3, #0
 800a7b4:	d00a      	beq.n	800a7cc <pvPortMalloc+0x174>
	__asm volatile
 800a7b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7ba:	f383 8811 	msr	BASEPRI, r3
 800a7be:	f3bf 8f6f 	isb	sy
 800a7c2:	f3bf 8f4f 	dsb	sy
 800a7c6:	60fb      	str	r3, [r7, #12]
}
 800a7c8:	bf00      	nop
 800a7ca:	e7fe      	b.n	800a7ca <pvPortMalloc+0x172>
	return pvReturn;
 800a7cc:	69fb      	ldr	r3, [r7, #28]
}
 800a7ce:	4618      	mov	r0, r3
 800a7d0:	3728      	adds	r7, #40	; 0x28
 800a7d2:	46bd      	mov	sp, r7
 800a7d4:	bd80      	pop	{r7, pc}
 800a7d6:	bf00      	nop
 800a7d8:	20005e58 	.word	0x20005e58
 800a7dc:	20005e6c 	.word	0x20005e6c
 800a7e0:	20005e5c 	.word	0x20005e5c
 800a7e4:	20005e50 	.word	0x20005e50
 800a7e8:	20005e60 	.word	0x20005e60
 800a7ec:	20005e64 	.word	0x20005e64

0800a7f0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800a7f0:	b580      	push	{r7, lr}
 800a7f2:	b086      	sub	sp, #24
 800a7f4:	af00      	add	r7, sp, #0
 800a7f6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	2b00      	cmp	r3, #0
 800a800:	d04d      	beq.n	800a89e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800a802:	2308      	movs	r3, #8
 800a804:	425b      	negs	r3, r3
 800a806:	697a      	ldr	r2, [r7, #20]
 800a808:	4413      	add	r3, r2
 800a80a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800a80c:	697b      	ldr	r3, [r7, #20]
 800a80e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800a810:	693b      	ldr	r3, [r7, #16]
 800a812:	685a      	ldr	r2, [r3, #4]
 800a814:	4b24      	ldr	r3, [pc, #144]	; (800a8a8 <vPortFree+0xb8>)
 800a816:	681b      	ldr	r3, [r3, #0]
 800a818:	4013      	ands	r3, r2
 800a81a:	2b00      	cmp	r3, #0
 800a81c:	d10a      	bne.n	800a834 <vPortFree+0x44>
	__asm volatile
 800a81e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a822:	f383 8811 	msr	BASEPRI, r3
 800a826:	f3bf 8f6f 	isb	sy
 800a82a:	f3bf 8f4f 	dsb	sy
 800a82e:	60fb      	str	r3, [r7, #12]
}
 800a830:	bf00      	nop
 800a832:	e7fe      	b.n	800a832 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800a834:	693b      	ldr	r3, [r7, #16]
 800a836:	681b      	ldr	r3, [r3, #0]
 800a838:	2b00      	cmp	r3, #0
 800a83a:	d00a      	beq.n	800a852 <vPortFree+0x62>
	__asm volatile
 800a83c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a840:	f383 8811 	msr	BASEPRI, r3
 800a844:	f3bf 8f6f 	isb	sy
 800a848:	f3bf 8f4f 	dsb	sy
 800a84c:	60bb      	str	r3, [r7, #8]
}
 800a84e:	bf00      	nop
 800a850:	e7fe      	b.n	800a850 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800a852:	693b      	ldr	r3, [r7, #16]
 800a854:	685a      	ldr	r2, [r3, #4]
 800a856:	4b14      	ldr	r3, [pc, #80]	; (800a8a8 <vPortFree+0xb8>)
 800a858:	681b      	ldr	r3, [r3, #0]
 800a85a:	4013      	ands	r3, r2
 800a85c:	2b00      	cmp	r3, #0
 800a85e:	d01e      	beq.n	800a89e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800a860:	693b      	ldr	r3, [r7, #16]
 800a862:	681b      	ldr	r3, [r3, #0]
 800a864:	2b00      	cmp	r3, #0
 800a866:	d11a      	bne.n	800a89e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800a868:	693b      	ldr	r3, [r7, #16]
 800a86a:	685a      	ldr	r2, [r3, #4]
 800a86c:	4b0e      	ldr	r3, [pc, #56]	; (800a8a8 <vPortFree+0xb8>)
 800a86e:	681b      	ldr	r3, [r3, #0]
 800a870:	43db      	mvns	r3, r3
 800a872:	401a      	ands	r2, r3
 800a874:	693b      	ldr	r3, [r7, #16]
 800a876:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800a878:	f7fe fb3e 	bl	8008ef8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800a87c:	693b      	ldr	r3, [r7, #16]
 800a87e:	685a      	ldr	r2, [r3, #4]
 800a880:	4b0a      	ldr	r3, [pc, #40]	; (800a8ac <vPortFree+0xbc>)
 800a882:	681b      	ldr	r3, [r3, #0]
 800a884:	4413      	add	r3, r2
 800a886:	4a09      	ldr	r2, [pc, #36]	; (800a8ac <vPortFree+0xbc>)
 800a888:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a88a:	6938      	ldr	r0, [r7, #16]
 800a88c:	f000 f874 	bl	800a978 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800a890:	4b07      	ldr	r3, [pc, #28]	; (800a8b0 <vPortFree+0xc0>)
 800a892:	681b      	ldr	r3, [r3, #0]
 800a894:	3301      	adds	r3, #1
 800a896:	4a06      	ldr	r2, [pc, #24]	; (800a8b0 <vPortFree+0xc0>)
 800a898:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800a89a:	f7fe fb3b 	bl	8008f14 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800a89e:	bf00      	nop
 800a8a0:	3718      	adds	r7, #24
 800a8a2:	46bd      	mov	sp, r7
 800a8a4:	bd80      	pop	{r7, pc}
 800a8a6:	bf00      	nop
 800a8a8:	20005e6c 	.word	0x20005e6c
 800a8ac:	20005e5c 	.word	0x20005e5c
 800a8b0:	20005e68 	.word	0x20005e68

0800a8b4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800a8b4:	b480      	push	{r7}
 800a8b6:	b085      	sub	sp, #20
 800a8b8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800a8ba:	f242 7310 	movw	r3, #10000	; 0x2710
 800a8be:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800a8c0:	4b27      	ldr	r3, [pc, #156]	; (800a960 <prvHeapInit+0xac>)
 800a8c2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800a8c4:	68fb      	ldr	r3, [r7, #12]
 800a8c6:	f003 0307 	and.w	r3, r3, #7
 800a8ca:	2b00      	cmp	r3, #0
 800a8cc:	d00c      	beq.n	800a8e8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800a8ce:	68fb      	ldr	r3, [r7, #12]
 800a8d0:	3307      	adds	r3, #7
 800a8d2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a8d4:	68fb      	ldr	r3, [r7, #12]
 800a8d6:	f023 0307 	bic.w	r3, r3, #7
 800a8da:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800a8dc:	68ba      	ldr	r2, [r7, #8]
 800a8de:	68fb      	ldr	r3, [r7, #12]
 800a8e0:	1ad3      	subs	r3, r2, r3
 800a8e2:	4a1f      	ldr	r2, [pc, #124]	; (800a960 <prvHeapInit+0xac>)
 800a8e4:	4413      	add	r3, r2
 800a8e6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800a8e8:	68fb      	ldr	r3, [r7, #12]
 800a8ea:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a8ec:	4a1d      	ldr	r2, [pc, #116]	; (800a964 <prvHeapInit+0xb0>)
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800a8f2:	4b1c      	ldr	r3, [pc, #112]	; (800a964 <prvHeapInit+0xb0>)
 800a8f4:	2200      	movs	r2, #0
 800a8f6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	68ba      	ldr	r2, [r7, #8]
 800a8fc:	4413      	add	r3, r2
 800a8fe:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800a900:	2208      	movs	r2, #8
 800a902:	68fb      	ldr	r3, [r7, #12]
 800a904:	1a9b      	subs	r3, r3, r2
 800a906:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a908:	68fb      	ldr	r3, [r7, #12]
 800a90a:	f023 0307 	bic.w	r3, r3, #7
 800a90e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800a910:	68fb      	ldr	r3, [r7, #12]
 800a912:	4a15      	ldr	r2, [pc, #84]	; (800a968 <prvHeapInit+0xb4>)
 800a914:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800a916:	4b14      	ldr	r3, [pc, #80]	; (800a968 <prvHeapInit+0xb4>)
 800a918:	681b      	ldr	r3, [r3, #0]
 800a91a:	2200      	movs	r2, #0
 800a91c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800a91e:	4b12      	ldr	r3, [pc, #72]	; (800a968 <prvHeapInit+0xb4>)
 800a920:	681b      	ldr	r3, [r3, #0]
 800a922:	2200      	movs	r2, #0
 800a924:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800a92a:	683b      	ldr	r3, [r7, #0]
 800a92c:	68fa      	ldr	r2, [r7, #12]
 800a92e:	1ad2      	subs	r2, r2, r3
 800a930:	683b      	ldr	r3, [r7, #0]
 800a932:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800a934:	4b0c      	ldr	r3, [pc, #48]	; (800a968 <prvHeapInit+0xb4>)
 800a936:	681a      	ldr	r2, [r3, #0]
 800a938:	683b      	ldr	r3, [r7, #0]
 800a93a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a93c:	683b      	ldr	r3, [r7, #0]
 800a93e:	685b      	ldr	r3, [r3, #4]
 800a940:	4a0a      	ldr	r2, [pc, #40]	; (800a96c <prvHeapInit+0xb8>)
 800a942:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a944:	683b      	ldr	r3, [r7, #0]
 800a946:	685b      	ldr	r3, [r3, #4]
 800a948:	4a09      	ldr	r2, [pc, #36]	; (800a970 <prvHeapInit+0xbc>)
 800a94a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a94c:	4b09      	ldr	r3, [pc, #36]	; (800a974 <prvHeapInit+0xc0>)
 800a94e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800a952:	601a      	str	r2, [r3, #0]
}
 800a954:	bf00      	nop
 800a956:	3714      	adds	r7, #20
 800a958:	46bd      	mov	sp, r7
 800a95a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a95e:	4770      	bx	lr
 800a960:	20003740 	.word	0x20003740
 800a964:	20005e50 	.word	0x20005e50
 800a968:	20005e58 	.word	0x20005e58
 800a96c:	20005e60 	.word	0x20005e60
 800a970:	20005e5c 	.word	0x20005e5c
 800a974:	20005e6c 	.word	0x20005e6c

0800a978 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800a978:	b480      	push	{r7}
 800a97a:	b085      	sub	sp, #20
 800a97c:	af00      	add	r7, sp, #0
 800a97e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a980:	4b28      	ldr	r3, [pc, #160]	; (800aa24 <prvInsertBlockIntoFreeList+0xac>)
 800a982:	60fb      	str	r3, [r7, #12]
 800a984:	e002      	b.n	800a98c <prvInsertBlockIntoFreeList+0x14>
 800a986:	68fb      	ldr	r3, [r7, #12]
 800a988:	681b      	ldr	r3, [r3, #0]
 800a98a:	60fb      	str	r3, [r7, #12]
 800a98c:	68fb      	ldr	r3, [r7, #12]
 800a98e:	681b      	ldr	r3, [r3, #0]
 800a990:	687a      	ldr	r2, [r7, #4]
 800a992:	429a      	cmp	r2, r3
 800a994:	d8f7      	bhi.n	800a986 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800a996:	68fb      	ldr	r3, [r7, #12]
 800a998:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800a99a:	68fb      	ldr	r3, [r7, #12]
 800a99c:	685b      	ldr	r3, [r3, #4]
 800a99e:	68ba      	ldr	r2, [r7, #8]
 800a9a0:	4413      	add	r3, r2
 800a9a2:	687a      	ldr	r2, [r7, #4]
 800a9a4:	429a      	cmp	r2, r3
 800a9a6:	d108      	bne.n	800a9ba <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800a9a8:	68fb      	ldr	r3, [r7, #12]
 800a9aa:	685a      	ldr	r2, [r3, #4]
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	685b      	ldr	r3, [r3, #4]
 800a9b0:	441a      	add	r2, r3
 800a9b2:	68fb      	ldr	r3, [r7, #12]
 800a9b4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800a9b6:	68fb      	ldr	r3, [r7, #12]
 800a9b8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	685b      	ldr	r3, [r3, #4]
 800a9c2:	68ba      	ldr	r2, [r7, #8]
 800a9c4:	441a      	add	r2, r3
 800a9c6:	68fb      	ldr	r3, [r7, #12]
 800a9c8:	681b      	ldr	r3, [r3, #0]
 800a9ca:	429a      	cmp	r2, r3
 800a9cc:	d118      	bne.n	800aa00 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800a9ce:	68fb      	ldr	r3, [r7, #12]
 800a9d0:	681a      	ldr	r2, [r3, #0]
 800a9d2:	4b15      	ldr	r3, [pc, #84]	; (800aa28 <prvInsertBlockIntoFreeList+0xb0>)
 800a9d4:	681b      	ldr	r3, [r3, #0]
 800a9d6:	429a      	cmp	r2, r3
 800a9d8:	d00d      	beq.n	800a9f6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	685a      	ldr	r2, [r3, #4]
 800a9de:	68fb      	ldr	r3, [r7, #12]
 800a9e0:	681b      	ldr	r3, [r3, #0]
 800a9e2:	685b      	ldr	r3, [r3, #4]
 800a9e4:	441a      	add	r2, r3
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800a9ea:	68fb      	ldr	r3, [r7, #12]
 800a9ec:	681b      	ldr	r3, [r3, #0]
 800a9ee:	681a      	ldr	r2, [r3, #0]
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	601a      	str	r2, [r3, #0]
 800a9f4:	e008      	b.n	800aa08 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800a9f6:	4b0c      	ldr	r3, [pc, #48]	; (800aa28 <prvInsertBlockIntoFreeList+0xb0>)
 800a9f8:	681a      	ldr	r2, [r3, #0]
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	601a      	str	r2, [r3, #0]
 800a9fe:	e003      	b.n	800aa08 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800aa00:	68fb      	ldr	r3, [r7, #12]
 800aa02:	681a      	ldr	r2, [r3, #0]
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800aa08:	68fa      	ldr	r2, [r7, #12]
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	429a      	cmp	r2, r3
 800aa0e:	d002      	beq.n	800aa16 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800aa10:	68fb      	ldr	r3, [r7, #12]
 800aa12:	687a      	ldr	r2, [r7, #4]
 800aa14:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800aa16:	bf00      	nop
 800aa18:	3714      	adds	r7, #20
 800aa1a:	46bd      	mov	sp, r7
 800aa1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa20:	4770      	bx	lr
 800aa22:	bf00      	nop
 800aa24:	20005e50 	.word	0x20005e50
 800aa28:	20005e58 	.word	0x20005e58

0800aa2c <__errno>:
 800aa2c:	4b01      	ldr	r3, [pc, #4]	; (800aa34 <__errno+0x8>)
 800aa2e:	6818      	ldr	r0, [r3, #0]
 800aa30:	4770      	bx	lr
 800aa32:	bf00      	nop
 800aa34:	20000018 	.word	0x20000018

0800aa38 <std>:
 800aa38:	2300      	movs	r3, #0
 800aa3a:	b510      	push	{r4, lr}
 800aa3c:	4604      	mov	r4, r0
 800aa3e:	e9c0 3300 	strd	r3, r3, [r0]
 800aa42:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800aa46:	6083      	str	r3, [r0, #8]
 800aa48:	8181      	strh	r1, [r0, #12]
 800aa4a:	6643      	str	r3, [r0, #100]	; 0x64
 800aa4c:	81c2      	strh	r2, [r0, #14]
 800aa4e:	6183      	str	r3, [r0, #24]
 800aa50:	4619      	mov	r1, r3
 800aa52:	2208      	movs	r2, #8
 800aa54:	305c      	adds	r0, #92	; 0x5c
 800aa56:	f000 f91a 	bl	800ac8e <memset>
 800aa5a:	4b05      	ldr	r3, [pc, #20]	; (800aa70 <std+0x38>)
 800aa5c:	6263      	str	r3, [r4, #36]	; 0x24
 800aa5e:	4b05      	ldr	r3, [pc, #20]	; (800aa74 <std+0x3c>)
 800aa60:	62a3      	str	r3, [r4, #40]	; 0x28
 800aa62:	4b05      	ldr	r3, [pc, #20]	; (800aa78 <std+0x40>)
 800aa64:	62e3      	str	r3, [r4, #44]	; 0x2c
 800aa66:	4b05      	ldr	r3, [pc, #20]	; (800aa7c <std+0x44>)
 800aa68:	6224      	str	r4, [r4, #32]
 800aa6a:	6323      	str	r3, [r4, #48]	; 0x30
 800aa6c:	bd10      	pop	{r4, pc}
 800aa6e:	bf00      	nop
 800aa70:	0800b1a5 	.word	0x0800b1a5
 800aa74:	0800b1c7 	.word	0x0800b1c7
 800aa78:	0800b1ff 	.word	0x0800b1ff
 800aa7c:	0800b223 	.word	0x0800b223

0800aa80 <_cleanup_r>:
 800aa80:	4901      	ldr	r1, [pc, #4]	; (800aa88 <_cleanup_r+0x8>)
 800aa82:	f000 b8af 	b.w	800abe4 <_fwalk_reent>
 800aa86:	bf00      	nop
 800aa88:	0800b4fd 	.word	0x0800b4fd

0800aa8c <__sfmoreglue>:
 800aa8c:	b570      	push	{r4, r5, r6, lr}
 800aa8e:	2268      	movs	r2, #104	; 0x68
 800aa90:	1e4d      	subs	r5, r1, #1
 800aa92:	4355      	muls	r5, r2
 800aa94:	460e      	mov	r6, r1
 800aa96:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800aa9a:	f000 f921 	bl	800ace0 <_malloc_r>
 800aa9e:	4604      	mov	r4, r0
 800aaa0:	b140      	cbz	r0, 800aab4 <__sfmoreglue+0x28>
 800aaa2:	2100      	movs	r1, #0
 800aaa4:	e9c0 1600 	strd	r1, r6, [r0]
 800aaa8:	300c      	adds	r0, #12
 800aaaa:	60a0      	str	r0, [r4, #8]
 800aaac:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800aab0:	f000 f8ed 	bl	800ac8e <memset>
 800aab4:	4620      	mov	r0, r4
 800aab6:	bd70      	pop	{r4, r5, r6, pc}

0800aab8 <__sfp_lock_acquire>:
 800aab8:	4801      	ldr	r0, [pc, #4]	; (800aac0 <__sfp_lock_acquire+0x8>)
 800aaba:	f000 b8d8 	b.w	800ac6e <__retarget_lock_acquire_recursive>
 800aabe:	bf00      	nop
 800aac0:	20005e71 	.word	0x20005e71

0800aac4 <__sfp_lock_release>:
 800aac4:	4801      	ldr	r0, [pc, #4]	; (800aacc <__sfp_lock_release+0x8>)
 800aac6:	f000 b8d3 	b.w	800ac70 <__retarget_lock_release_recursive>
 800aaca:	bf00      	nop
 800aacc:	20005e71 	.word	0x20005e71

0800aad0 <__sinit_lock_acquire>:
 800aad0:	4801      	ldr	r0, [pc, #4]	; (800aad8 <__sinit_lock_acquire+0x8>)
 800aad2:	f000 b8cc 	b.w	800ac6e <__retarget_lock_acquire_recursive>
 800aad6:	bf00      	nop
 800aad8:	20005e72 	.word	0x20005e72

0800aadc <__sinit_lock_release>:
 800aadc:	4801      	ldr	r0, [pc, #4]	; (800aae4 <__sinit_lock_release+0x8>)
 800aade:	f000 b8c7 	b.w	800ac70 <__retarget_lock_release_recursive>
 800aae2:	bf00      	nop
 800aae4:	20005e72 	.word	0x20005e72

0800aae8 <__sinit>:
 800aae8:	b510      	push	{r4, lr}
 800aaea:	4604      	mov	r4, r0
 800aaec:	f7ff fff0 	bl	800aad0 <__sinit_lock_acquire>
 800aaf0:	69a3      	ldr	r3, [r4, #24]
 800aaf2:	b11b      	cbz	r3, 800aafc <__sinit+0x14>
 800aaf4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800aaf8:	f7ff bff0 	b.w	800aadc <__sinit_lock_release>
 800aafc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800ab00:	6523      	str	r3, [r4, #80]	; 0x50
 800ab02:	4b13      	ldr	r3, [pc, #76]	; (800ab50 <__sinit+0x68>)
 800ab04:	4a13      	ldr	r2, [pc, #76]	; (800ab54 <__sinit+0x6c>)
 800ab06:	681b      	ldr	r3, [r3, #0]
 800ab08:	62a2      	str	r2, [r4, #40]	; 0x28
 800ab0a:	42a3      	cmp	r3, r4
 800ab0c:	bf04      	itt	eq
 800ab0e:	2301      	moveq	r3, #1
 800ab10:	61a3      	streq	r3, [r4, #24]
 800ab12:	4620      	mov	r0, r4
 800ab14:	f000 f820 	bl	800ab58 <__sfp>
 800ab18:	6060      	str	r0, [r4, #4]
 800ab1a:	4620      	mov	r0, r4
 800ab1c:	f000 f81c 	bl	800ab58 <__sfp>
 800ab20:	60a0      	str	r0, [r4, #8]
 800ab22:	4620      	mov	r0, r4
 800ab24:	f000 f818 	bl	800ab58 <__sfp>
 800ab28:	2200      	movs	r2, #0
 800ab2a:	60e0      	str	r0, [r4, #12]
 800ab2c:	2104      	movs	r1, #4
 800ab2e:	6860      	ldr	r0, [r4, #4]
 800ab30:	f7ff ff82 	bl	800aa38 <std>
 800ab34:	68a0      	ldr	r0, [r4, #8]
 800ab36:	2201      	movs	r2, #1
 800ab38:	2109      	movs	r1, #9
 800ab3a:	f7ff ff7d 	bl	800aa38 <std>
 800ab3e:	68e0      	ldr	r0, [r4, #12]
 800ab40:	2202      	movs	r2, #2
 800ab42:	2112      	movs	r1, #18
 800ab44:	f7ff ff78 	bl	800aa38 <std>
 800ab48:	2301      	movs	r3, #1
 800ab4a:	61a3      	str	r3, [r4, #24]
 800ab4c:	e7d2      	b.n	800aaf4 <__sinit+0xc>
 800ab4e:	bf00      	nop
 800ab50:	0800c4b0 	.word	0x0800c4b0
 800ab54:	0800aa81 	.word	0x0800aa81

0800ab58 <__sfp>:
 800ab58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab5a:	4607      	mov	r7, r0
 800ab5c:	f7ff ffac 	bl	800aab8 <__sfp_lock_acquire>
 800ab60:	4b1e      	ldr	r3, [pc, #120]	; (800abdc <__sfp+0x84>)
 800ab62:	681e      	ldr	r6, [r3, #0]
 800ab64:	69b3      	ldr	r3, [r6, #24]
 800ab66:	b913      	cbnz	r3, 800ab6e <__sfp+0x16>
 800ab68:	4630      	mov	r0, r6
 800ab6a:	f7ff ffbd 	bl	800aae8 <__sinit>
 800ab6e:	3648      	adds	r6, #72	; 0x48
 800ab70:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800ab74:	3b01      	subs	r3, #1
 800ab76:	d503      	bpl.n	800ab80 <__sfp+0x28>
 800ab78:	6833      	ldr	r3, [r6, #0]
 800ab7a:	b30b      	cbz	r3, 800abc0 <__sfp+0x68>
 800ab7c:	6836      	ldr	r6, [r6, #0]
 800ab7e:	e7f7      	b.n	800ab70 <__sfp+0x18>
 800ab80:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800ab84:	b9d5      	cbnz	r5, 800abbc <__sfp+0x64>
 800ab86:	4b16      	ldr	r3, [pc, #88]	; (800abe0 <__sfp+0x88>)
 800ab88:	60e3      	str	r3, [r4, #12]
 800ab8a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800ab8e:	6665      	str	r5, [r4, #100]	; 0x64
 800ab90:	f000 f86c 	bl	800ac6c <__retarget_lock_init_recursive>
 800ab94:	f7ff ff96 	bl	800aac4 <__sfp_lock_release>
 800ab98:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800ab9c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800aba0:	6025      	str	r5, [r4, #0]
 800aba2:	61a5      	str	r5, [r4, #24]
 800aba4:	2208      	movs	r2, #8
 800aba6:	4629      	mov	r1, r5
 800aba8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800abac:	f000 f86f 	bl	800ac8e <memset>
 800abb0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800abb4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800abb8:	4620      	mov	r0, r4
 800abba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800abbc:	3468      	adds	r4, #104	; 0x68
 800abbe:	e7d9      	b.n	800ab74 <__sfp+0x1c>
 800abc0:	2104      	movs	r1, #4
 800abc2:	4638      	mov	r0, r7
 800abc4:	f7ff ff62 	bl	800aa8c <__sfmoreglue>
 800abc8:	4604      	mov	r4, r0
 800abca:	6030      	str	r0, [r6, #0]
 800abcc:	2800      	cmp	r0, #0
 800abce:	d1d5      	bne.n	800ab7c <__sfp+0x24>
 800abd0:	f7ff ff78 	bl	800aac4 <__sfp_lock_release>
 800abd4:	230c      	movs	r3, #12
 800abd6:	603b      	str	r3, [r7, #0]
 800abd8:	e7ee      	b.n	800abb8 <__sfp+0x60>
 800abda:	bf00      	nop
 800abdc:	0800c4b0 	.word	0x0800c4b0
 800abe0:	ffff0001 	.word	0xffff0001

0800abe4 <_fwalk_reent>:
 800abe4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800abe8:	4606      	mov	r6, r0
 800abea:	4688      	mov	r8, r1
 800abec:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800abf0:	2700      	movs	r7, #0
 800abf2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800abf6:	f1b9 0901 	subs.w	r9, r9, #1
 800abfa:	d505      	bpl.n	800ac08 <_fwalk_reent+0x24>
 800abfc:	6824      	ldr	r4, [r4, #0]
 800abfe:	2c00      	cmp	r4, #0
 800ac00:	d1f7      	bne.n	800abf2 <_fwalk_reent+0xe>
 800ac02:	4638      	mov	r0, r7
 800ac04:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ac08:	89ab      	ldrh	r3, [r5, #12]
 800ac0a:	2b01      	cmp	r3, #1
 800ac0c:	d907      	bls.n	800ac1e <_fwalk_reent+0x3a>
 800ac0e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ac12:	3301      	adds	r3, #1
 800ac14:	d003      	beq.n	800ac1e <_fwalk_reent+0x3a>
 800ac16:	4629      	mov	r1, r5
 800ac18:	4630      	mov	r0, r6
 800ac1a:	47c0      	blx	r8
 800ac1c:	4307      	orrs	r7, r0
 800ac1e:	3568      	adds	r5, #104	; 0x68
 800ac20:	e7e9      	b.n	800abf6 <_fwalk_reent+0x12>
	...

0800ac24 <__libc_init_array>:
 800ac24:	b570      	push	{r4, r5, r6, lr}
 800ac26:	4d0d      	ldr	r5, [pc, #52]	; (800ac5c <__libc_init_array+0x38>)
 800ac28:	4c0d      	ldr	r4, [pc, #52]	; (800ac60 <__libc_init_array+0x3c>)
 800ac2a:	1b64      	subs	r4, r4, r5
 800ac2c:	10a4      	asrs	r4, r4, #2
 800ac2e:	2600      	movs	r6, #0
 800ac30:	42a6      	cmp	r6, r4
 800ac32:	d109      	bne.n	800ac48 <__libc_init_array+0x24>
 800ac34:	4d0b      	ldr	r5, [pc, #44]	; (800ac64 <__libc_init_array+0x40>)
 800ac36:	4c0c      	ldr	r4, [pc, #48]	; (800ac68 <__libc_init_array+0x44>)
 800ac38:	f001 fa44 	bl	800c0c4 <_init>
 800ac3c:	1b64      	subs	r4, r4, r5
 800ac3e:	10a4      	asrs	r4, r4, #2
 800ac40:	2600      	movs	r6, #0
 800ac42:	42a6      	cmp	r6, r4
 800ac44:	d105      	bne.n	800ac52 <__libc_init_array+0x2e>
 800ac46:	bd70      	pop	{r4, r5, r6, pc}
 800ac48:	f855 3b04 	ldr.w	r3, [r5], #4
 800ac4c:	4798      	blx	r3
 800ac4e:	3601      	adds	r6, #1
 800ac50:	e7ee      	b.n	800ac30 <__libc_init_array+0xc>
 800ac52:	f855 3b04 	ldr.w	r3, [r5], #4
 800ac56:	4798      	blx	r3
 800ac58:	3601      	adds	r6, #1
 800ac5a:	e7f2      	b.n	800ac42 <__libc_init_array+0x1e>
 800ac5c:	0800c4f0 	.word	0x0800c4f0
 800ac60:	0800c4f0 	.word	0x0800c4f0
 800ac64:	0800c4f0 	.word	0x0800c4f0
 800ac68:	0800c4f4 	.word	0x0800c4f4

0800ac6c <__retarget_lock_init_recursive>:
 800ac6c:	4770      	bx	lr

0800ac6e <__retarget_lock_acquire_recursive>:
 800ac6e:	4770      	bx	lr

0800ac70 <__retarget_lock_release_recursive>:
 800ac70:	4770      	bx	lr

0800ac72 <memcpy>:
 800ac72:	440a      	add	r2, r1
 800ac74:	4291      	cmp	r1, r2
 800ac76:	f100 33ff 	add.w	r3, r0, #4294967295
 800ac7a:	d100      	bne.n	800ac7e <memcpy+0xc>
 800ac7c:	4770      	bx	lr
 800ac7e:	b510      	push	{r4, lr}
 800ac80:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ac84:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ac88:	4291      	cmp	r1, r2
 800ac8a:	d1f9      	bne.n	800ac80 <memcpy+0xe>
 800ac8c:	bd10      	pop	{r4, pc}

0800ac8e <memset>:
 800ac8e:	4402      	add	r2, r0
 800ac90:	4603      	mov	r3, r0
 800ac92:	4293      	cmp	r3, r2
 800ac94:	d100      	bne.n	800ac98 <memset+0xa>
 800ac96:	4770      	bx	lr
 800ac98:	f803 1b01 	strb.w	r1, [r3], #1
 800ac9c:	e7f9      	b.n	800ac92 <memset+0x4>
	...

0800aca0 <sbrk_aligned>:
 800aca0:	b570      	push	{r4, r5, r6, lr}
 800aca2:	4e0e      	ldr	r6, [pc, #56]	; (800acdc <sbrk_aligned+0x3c>)
 800aca4:	460c      	mov	r4, r1
 800aca6:	6831      	ldr	r1, [r6, #0]
 800aca8:	4605      	mov	r5, r0
 800acaa:	b911      	cbnz	r1, 800acb2 <sbrk_aligned+0x12>
 800acac:	f000 f984 	bl	800afb8 <_sbrk_r>
 800acb0:	6030      	str	r0, [r6, #0]
 800acb2:	4621      	mov	r1, r4
 800acb4:	4628      	mov	r0, r5
 800acb6:	f000 f97f 	bl	800afb8 <_sbrk_r>
 800acba:	1c43      	adds	r3, r0, #1
 800acbc:	d00a      	beq.n	800acd4 <sbrk_aligned+0x34>
 800acbe:	1cc4      	adds	r4, r0, #3
 800acc0:	f024 0403 	bic.w	r4, r4, #3
 800acc4:	42a0      	cmp	r0, r4
 800acc6:	d007      	beq.n	800acd8 <sbrk_aligned+0x38>
 800acc8:	1a21      	subs	r1, r4, r0
 800acca:	4628      	mov	r0, r5
 800accc:	f000 f974 	bl	800afb8 <_sbrk_r>
 800acd0:	3001      	adds	r0, #1
 800acd2:	d101      	bne.n	800acd8 <sbrk_aligned+0x38>
 800acd4:	f04f 34ff 	mov.w	r4, #4294967295
 800acd8:	4620      	mov	r0, r4
 800acda:	bd70      	pop	{r4, r5, r6, pc}
 800acdc:	20005e78 	.word	0x20005e78

0800ace0 <_malloc_r>:
 800ace0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ace4:	1ccd      	adds	r5, r1, #3
 800ace6:	f025 0503 	bic.w	r5, r5, #3
 800acea:	3508      	adds	r5, #8
 800acec:	2d0c      	cmp	r5, #12
 800acee:	bf38      	it	cc
 800acf0:	250c      	movcc	r5, #12
 800acf2:	2d00      	cmp	r5, #0
 800acf4:	4607      	mov	r7, r0
 800acf6:	db01      	blt.n	800acfc <_malloc_r+0x1c>
 800acf8:	42a9      	cmp	r1, r5
 800acfa:	d905      	bls.n	800ad08 <_malloc_r+0x28>
 800acfc:	230c      	movs	r3, #12
 800acfe:	603b      	str	r3, [r7, #0]
 800ad00:	2600      	movs	r6, #0
 800ad02:	4630      	mov	r0, r6
 800ad04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ad08:	4e2e      	ldr	r6, [pc, #184]	; (800adc4 <_malloc_r+0xe4>)
 800ad0a:	f000 fcb3 	bl	800b674 <__malloc_lock>
 800ad0e:	6833      	ldr	r3, [r6, #0]
 800ad10:	461c      	mov	r4, r3
 800ad12:	bb34      	cbnz	r4, 800ad62 <_malloc_r+0x82>
 800ad14:	4629      	mov	r1, r5
 800ad16:	4638      	mov	r0, r7
 800ad18:	f7ff ffc2 	bl	800aca0 <sbrk_aligned>
 800ad1c:	1c43      	adds	r3, r0, #1
 800ad1e:	4604      	mov	r4, r0
 800ad20:	d14d      	bne.n	800adbe <_malloc_r+0xde>
 800ad22:	6834      	ldr	r4, [r6, #0]
 800ad24:	4626      	mov	r6, r4
 800ad26:	2e00      	cmp	r6, #0
 800ad28:	d140      	bne.n	800adac <_malloc_r+0xcc>
 800ad2a:	6823      	ldr	r3, [r4, #0]
 800ad2c:	4631      	mov	r1, r6
 800ad2e:	4638      	mov	r0, r7
 800ad30:	eb04 0803 	add.w	r8, r4, r3
 800ad34:	f000 f940 	bl	800afb8 <_sbrk_r>
 800ad38:	4580      	cmp	r8, r0
 800ad3a:	d13a      	bne.n	800adb2 <_malloc_r+0xd2>
 800ad3c:	6821      	ldr	r1, [r4, #0]
 800ad3e:	3503      	adds	r5, #3
 800ad40:	1a6d      	subs	r5, r5, r1
 800ad42:	f025 0503 	bic.w	r5, r5, #3
 800ad46:	3508      	adds	r5, #8
 800ad48:	2d0c      	cmp	r5, #12
 800ad4a:	bf38      	it	cc
 800ad4c:	250c      	movcc	r5, #12
 800ad4e:	4629      	mov	r1, r5
 800ad50:	4638      	mov	r0, r7
 800ad52:	f7ff ffa5 	bl	800aca0 <sbrk_aligned>
 800ad56:	3001      	adds	r0, #1
 800ad58:	d02b      	beq.n	800adb2 <_malloc_r+0xd2>
 800ad5a:	6823      	ldr	r3, [r4, #0]
 800ad5c:	442b      	add	r3, r5
 800ad5e:	6023      	str	r3, [r4, #0]
 800ad60:	e00e      	b.n	800ad80 <_malloc_r+0xa0>
 800ad62:	6822      	ldr	r2, [r4, #0]
 800ad64:	1b52      	subs	r2, r2, r5
 800ad66:	d41e      	bmi.n	800ada6 <_malloc_r+0xc6>
 800ad68:	2a0b      	cmp	r2, #11
 800ad6a:	d916      	bls.n	800ad9a <_malloc_r+0xba>
 800ad6c:	1961      	adds	r1, r4, r5
 800ad6e:	42a3      	cmp	r3, r4
 800ad70:	6025      	str	r5, [r4, #0]
 800ad72:	bf18      	it	ne
 800ad74:	6059      	strne	r1, [r3, #4]
 800ad76:	6863      	ldr	r3, [r4, #4]
 800ad78:	bf08      	it	eq
 800ad7a:	6031      	streq	r1, [r6, #0]
 800ad7c:	5162      	str	r2, [r4, r5]
 800ad7e:	604b      	str	r3, [r1, #4]
 800ad80:	4638      	mov	r0, r7
 800ad82:	f104 060b 	add.w	r6, r4, #11
 800ad86:	f000 fc7b 	bl	800b680 <__malloc_unlock>
 800ad8a:	f026 0607 	bic.w	r6, r6, #7
 800ad8e:	1d23      	adds	r3, r4, #4
 800ad90:	1af2      	subs	r2, r6, r3
 800ad92:	d0b6      	beq.n	800ad02 <_malloc_r+0x22>
 800ad94:	1b9b      	subs	r3, r3, r6
 800ad96:	50a3      	str	r3, [r4, r2]
 800ad98:	e7b3      	b.n	800ad02 <_malloc_r+0x22>
 800ad9a:	6862      	ldr	r2, [r4, #4]
 800ad9c:	42a3      	cmp	r3, r4
 800ad9e:	bf0c      	ite	eq
 800ada0:	6032      	streq	r2, [r6, #0]
 800ada2:	605a      	strne	r2, [r3, #4]
 800ada4:	e7ec      	b.n	800ad80 <_malloc_r+0xa0>
 800ada6:	4623      	mov	r3, r4
 800ada8:	6864      	ldr	r4, [r4, #4]
 800adaa:	e7b2      	b.n	800ad12 <_malloc_r+0x32>
 800adac:	4634      	mov	r4, r6
 800adae:	6876      	ldr	r6, [r6, #4]
 800adb0:	e7b9      	b.n	800ad26 <_malloc_r+0x46>
 800adb2:	230c      	movs	r3, #12
 800adb4:	603b      	str	r3, [r7, #0]
 800adb6:	4638      	mov	r0, r7
 800adb8:	f000 fc62 	bl	800b680 <__malloc_unlock>
 800adbc:	e7a1      	b.n	800ad02 <_malloc_r+0x22>
 800adbe:	6025      	str	r5, [r4, #0]
 800adc0:	e7de      	b.n	800ad80 <_malloc_r+0xa0>
 800adc2:	bf00      	nop
 800adc4:	20005e74 	.word	0x20005e74

0800adc8 <iprintf>:
 800adc8:	b40f      	push	{r0, r1, r2, r3}
 800adca:	4b0a      	ldr	r3, [pc, #40]	; (800adf4 <iprintf+0x2c>)
 800adcc:	b513      	push	{r0, r1, r4, lr}
 800adce:	681c      	ldr	r4, [r3, #0]
 800add0:	b124      	cbz	r4, 800addc <iprintf+0x14>
 800add2:	69a3      	ldr	r3, [r4, #24]
 800add4:	b913      	cbnz	r3, 800addc <iprintf+0x14>
 800add6:	4620      	mov	r0, r4
 800add8:	f7ff fe86 	bl	800aae8 <__sinit>
 800addc:	ab05      	add	r3, sp, #20
 800adde:	9a04      	ldr	r2, [sp, #16]
 800ade0:	68a1      	ldr	r1, [r4, #8]
 800ade2:	9301      	str	r3, [sp, #4]
 800ade4:	4620      	mov	r0, r4
 800ade6:	f000 fe23 	bl	800ba30 <_vfiprintf_r>
 800adea:	b002      	add	sp, #8
 800adec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800adf0:	b004      	add	sp, #16
 800adf2:	4770      	bx	lr
 800adf4:	20000018 	.word	0x20000018

0800adf8 <_puts_r>:
 800adf8:	b570      	push	{r4, r5, r6, lr}
 800adfa:	460e      	mov	r6, r1
 800adfc:	4605      	mov	r5, r0
 800adfe:	b118      	cbz	r0, 800ae08 <_puts_r+0x10>
 800ae00:	6983      	ldr	r3, [r0, #24]
 800ae02:	b90b      	cbnz	r3, 800ae08 <_puts_r+0x10>
 800ae04:	f7ff fe70 	bl	800aae8 <__sinit>
 800ae08:	69ab      	ldr	r3, [r5, #24]
 800ae0a:	68ac      	ldr	r4, [r5, #8]
 800ae0c:	b913      	cbnz	r3, 800ae14 <_puts_r+0x1c>
 800ae0e:	4628      	mov	r0, r5
 800ae10:	f7ff fe6a 	bl	800aae8 <__sinit>
 800ae14:	4b2c      	ldr	r3, [pc, #176]	; (800aec8 <_puts_r+0xd0>)
 800ae16:	429c      	cmp	r4, r3
 800ae18:	d120      	bne.n	800ae5c <_puts_r+0x64>
 800ae1a:	686c      	ldr	r4, [r5, #4]
 800ae1c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ae1e:	07db      	lsls	r3, r3, #31
 800ae20:	d405      	bmi.n	800ae2e <_puts_r+0x36>
 800ae22:	89a3      	ldrh	r3, [r4, #12]
 800ae24:	0598      	lsls	r0, r3, #22
 800ae26:	d402      	bmi.n	800ae2e <_puts_r+0x36>
 800ae28:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ae2a:	f7ff ff20 	bl	800ac6e <__retarget_lock_acquire_recursive>
 800ae2e:	89a3      	ldrh	r3, [r4, #12]
 800ae30:	0719      	lsls	r1, r3, #28
 800ae32:	d51d      	bpl.n	800ae70 <_puts_r+0x78>
 800ae34:	6923      	ldr	r3, [r4, #16]
 800ae36:	b1db      	cbz	r3, 800ae70 <_puts_r+0x78>
 800ae38:	3e01      	subs	r6, #1
 800ae3a:	68a3      	ldr	r3, [r4, #8]
 800ae3c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800ae40:	3b01      	subs	r3, #1
 800ae42:	60a3      	str	r3, [r4, #8]
 800ae44:	bb39      	cbnz	r1, 800ae96 <_puts_r+0x9e>
 800ae46:	2b00      	cmp	r3, #0
 800ae48:	da38      	bge.n	800aebc <_puts_r+0xc4>
 800ae4a:	4622      	mov	r2, r4
 800ae4c:	210a      	movs	r1, #10
 800ae4e:	4628      	mov	r0, r5
 800ae50:	f000 f9ec 	bl	800b22c <__swbuf_r>
 800ae54:	3001      	adds	r0, #1
 800ae56:	d011      	beq.n	800ae7c <_puts_r+0x84>
 800ae58:	250a      	movs	r5, #10
 800ae5a:	e011      	b.n	800ae80 <_puts_r+0x88>
 800ae5c:	4b1b      	ldr	r3, [pc, #108]	; (800aecc <_puts_r+0xd4>)
 800ae5e:	429c      	cmp	r4, r3
 800ae60:	d101      	bne.n	800ae66 <_puts_r+0x6e>
 800ae62:	68ac      	ldr	r4, [r5, #8]
 800ae64:	e7da      	b.n	800ae1c <_puts_r+0x24>
 800ae66:	4b1a      	ldr	r3, [pc, #104]	; (800aed0 <_puts_r+0xd8>)
 800ae68:	429c      	cmp	r4, r3
 800ae6a:	bf08      	it	eq
 800ae6c:	68ec      	ldreq	r4, [r5, #12]
 800ae6e:	e7d5      	b.n	800ae1c <_puts_r+0x24>
 800ae70:	4621      	mov	r1, r4
 800ae72:	4628      	mov	r0, r5
 800ae74:	f000 fa3e 	bl	800b2f4 <__swsetup_r>
 800ae78:	2800      	cmp	r0, #0
 800ae7a:	d0dd      	beq.n	800ae38 <_puts_r+0x40>
 800ae7c:	f04f 35ff 	mov.w	r5, #4294967295
 800ae80:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ae82:	07da      	lsls	r2, r3, #31
 800ae84:	d405      	bmi.n	800ae92 <_puts_r+0x9a>
 800ae86:	89a3      	ldrh	r3, [r4, #12]
 800ae88:	059b      	lsls	r3, r3, #22
 800ae8a:	d402      	bmi.n	800ae92 <_puts_r+0x9a>
 800ae8c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ae8e:	f7ff feef 	bl	800ac70 <__retarget_lock_release_recursive>
 800ae92:	4628      	mov	r0, r5
 800ae94:	bd70      	pop	{r4, r5, r6, pc}
 800ae96:	2b00      	cmp	r3, #0
 800ae98:	da04      	bge.n	800aea4 <_puts_r+0xac>
 800ae9a:	69a2      	ldr	r2, [r4, #24]
 800ae9c:	429a      	cmp	r2, r3
 800ae9e:	dc06      	bgt.n	800aeae <_puts_r+0xb6>
 800aea0:	290a      	cmp	r1, #10
 800aea2:	d004      	beq.n	800aeae <_puts_r+0xb6>
 800aea4:	6823      	ldr	r3, [r4, #0]
 800aea6:	1c5a      	adds	r2, r3, #1
 800aea8:	6022      	str	r2, [r4, #0]
 800aeaa:	7019      	strb	r1, [r3, #0]
 800aeac:	e7c5      	b.n	800ae3a <_puts_r+0x42>
 800aeae:	4622      	mov	r2, r4
 800aeb0:	4628      	mov	r0, r5
 800aeb2:	f000 f9bb 	bl	800b22c <__swbuf_r>
 800aeb6:	3001      	adds	r0, #1
 800aeb8:	d1bf      	bne.n	800ae3a <_puts_r+0x42>
 800aeba:	e7df      	b.n	800ae7c <_puts_r+0x84>
 800aebc:	6823      	ldr	r3, [r4, #0]
 800aebe:	250a      	movs	r5, #10
 800aec0:	1c5a      	adds	r2, r3, #1
 800aec2:	6022      	str	r2, [r4, #0]
 800aec4:	701d      	strb	r5, [r3, #0]
 800aec6:	e7db      	b.n	800ae80 <_puts_r+0x88>
 800aec8:	0800c470 	.word	0x0800c470
 800aecc:	0800c490 	.word	0x0800c490
 800aed0:	0800c450 	.word	0x0800c450

0800aed4 <puts>:
 800aed4:	4b02      	ldr	r3, [pc, #8]	; (800aee0 <puts+0xc>)
 800aed6:	4601      	mov	r1, r0
 800aed8:	6818      	ldr	r0, [r3, #0]
 800aeda:	f7ff bf8d 	b.w	800adf8 <_puts_r>
 800aede:	bf00      	nop
 800aee0:	20000018 	.word	0x20000018

0800aee4 <cleanup_glue>:
 800aee4:	b538      	push	{r3, r4, r5, lr}
 800aee6:	460c      	mov	r4, r1
 800aee8:	6809      	ldr	r1, [r1, #0]
 800aeea:	4605      	mov	r5, r0
 800aeec:	b109      	cbz	r1, 800aef2 <cleanup_glue+0xe>
 800aeee:	f7ff fff9 	bl	800aee4 <cleanup_glue>
 800aef2:	4621      	mov	r1, r4
 800aef4:	4628      	mov	r0, r5
 800aef6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800aefa:	f000 bbc7 	b.w	800b68c <_free_r>
	...

0800af00 <_reclaim_reent>:
 800af00:	4b2c      	ldr	r3, [pc, #176]	; (800afb4 <_reclaim_reent+0xb4>)
 800af02:	681b      	ldr	r3, [r3, #0]
 800af04:	4283      	cmp	r3, r0
 800af06:	b570      	push	{r4, r5, r6, lr}
 800af08:	4604      	mov	r4, r0
 800af0a:	d051      	beq.n	800afb0 <_reclaim_reent+0xb0>
 800af0c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800af0e:	b143      	cbz	r3, 800af22 <_reclaim_reent+0x22>
 800af10:	68db      	ldr	r3, [r3, #12]
 800af12:	2b00      	cmp	r3, #0
 800af14:	d14a      	bne.n	800afac <_reclaim_reent+0xac>
 800af16:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800af18:	6819      	ldr	r1, [r3, #0]
 800af1a:	b111      	cbz	r1, 800af22 <_reclaim_reent+0x22>
 800af1c:	4620      	mov	r0, r4
 800af1e:	f000 fbb5 	bl	800b68c <_free_r>
 800af22:	6961      	ldr	r1, [r4, #20]
 800af24:	b111      	cbz	r1, 800af2c <_reclaim_reent+0x2c>
 800af26:	4620      	mov	r0, r4
 800af28:	f000 fbb0 	bl	800b68c <_free_r>
 800af2c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800af2e:	b111      	cbz	r1, 800af36 <_reclaim_reent+0x36>
 800af30:	4620      	mov	r0, r4
 800af32:	f000 fbab 	bl	800b68c <_free_r>
 800af36:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800af38:	b111      	cbz	r1, 800af40 <_reclaim_reent+0x40>
 800af3a:	4620      	mov	r0, r4
 800af3c:	f000 fba6 	bl	800b68c <_free_r>
 800af40:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800af42:	b111      	cbz	r1, 800af4a <_reclaim_reent+0x4a>
 800af44:	4620      	mov	r0, r4
 800af46:	f000 fba1 	bl	800b68c <_free_r>
 800af4a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800af4c:	b111      	cbz	r1, 800af54 <_reclaim_reent+0x54>
 800af4e:	4620      	mov	r0, r4
 800af50:	f000 fb9c 	bl	800b68c <_free_r>
 800af54:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800af56:	b111      	cbz	r1, 800af5e <_reclaim_reent+0x5e>
 800af58:	4620      	mov	r0, r4
 800af5a:	f000 fb97 	bl	800b68c <_free_r>
 800af5e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800af60:	b111      	cbz	r1, 800af68 <_reclaim_reent+0x68>
 800af62:	4620      	mov	r0, r4
 800af64:	f000 fb92 	bl	800b68c <_free_r>
 800af68:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800af6a:	b111      	cbz	r1, 800af72 <_reclaim_reent+0x72>
 800af6c:	4620      	mov	r0, r4
 800af6e:	f000 fb8d 	bl	800b68c <_free_r>
 800af72:	69a3      	ldr	r3, [r4, #24]
 800af74:	b1e3      	cbz	r3, 800afb0 <_reclaim_reent+0xb0>
 800af76:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800af78:	4620      	mov	r0, r4
 800af7a:	4798      	blx	r3
 800af7c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800af7e:	b1b9      	cbz	r1, 800afb0 <_reclaim_reent+0xb0>
 800af80:	4620      	mov	r0, r4
 800af82:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800af86:	f7ff bfad 	b.w	800aee4 <cleanup_glue>
 800af8a:	5949      	ldr	r1, [r1, r5]
 800af8c:	b941      	cbnz	r1, 800afa0 <_reclaim_reent+0xa0>
 800af8e:	3504      	adds	r5, #4
 800af90:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800af92:	2d80      	cmp	r5, #128	; 0x80
 800af94:	68d9      	ldr	r1, [r3, #12]
 800af96:	d1f8      	bne.n	800af8a <_reclaim_reent+0x8a>
 800af98:	4620      	mov	r0, r4
 800af9a:	f000 fb77 	bl	800b68c <_free_r>
 800af9e:	e7ba      	b.n	800af16 <_reclaim_reent+0x16>
 800afa0:	680e      	ldr	r6, [r1, #0]
 800afa2:	4620      	mov	r0, r4
 800afa4:	f000 fb72 	bl	800b68c <_free_r>
 800afa8:	4631      	mov	r1, r6
 800afaa:	e7ef      	b.n	800af8c <_reclaim_reent+0x8c>
 800afac:	2500      	movs	r5, #0
 800afae:	e7ef      	b.n	800af90 <_reclaim_reent+0x90>
 800afb0:	bd70      	pop	{r4, r5, r6, pc}
 800afb2:	bf00      	nop
 800afb4:	20000018 	.word	0x20000018

0800afb8 <_sbrk_r>:
 800afb8:	b538      	push	{r3, r4, r5, lr}
 800afba:	4d06      	ldr	r5, [pc, #24]	; (800afd4 <_sbrk_r+0x1c>)
 800afbc:	2300      	movs	r3, #0
 800afbe:	4604      	mov	r4, r0
 800afc0:	4608      	mov	r0, r1
 800afc2:	602b      	str	r3, [r5, #0]
 800afc4:	f7f7 ff32 	bl	8002e2c <_sbrk>
 800afc8:	1c43      	adds	r3, r0, #1
 800afca:	d102      	bne.n	800afd2 <_sbrk_r+0x1a>
 800afcc:	682b      	ldr	r3, [r5, #0]
 800afce:	b103      	cbz	r3, 800afd2 <_sbrk_r+0x1a>
 800afd0:	6023      	str	r3, [r4, #0]
 800afd2:	bd38      	pop	{r3, r4, r5, pc}
 800afd4:	20005e7c 	.word	0x20005e7c

0800afd8 <setvbuf>:
 800afd8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800afdc:	461d      	mov	r5, r3
 800afde:	4b5d      	ldr	r3, [pc, #372]	; (800b154 <setvbuf+0x17c>)
 800afe0:	681f      	ldr	r7, [r3, #0]
 800afe2:	4604      	mov	r4, r0
 800afe4:	460e      	mov	r6, r1
 800afe6:	4690      	mov	r8, r2
 800afe8:	b127      	cbz	r7, 800aff4 <setvbuf+0x1c>
 800afea:	69bb      	ldr	r3, [r7, #24]
 800afec:	b913      	cbnz	r3, 800aff4 <setvbuf+0x1c>
 800afee:	4638      	mov	r0, r7
 800aff0:	f7ff fd7a 	bl	800aae8 <__sinit>
 800aff4:	4b58      	ldr	r3, [pc, #352]	; (800b158 <setvbuf+0x180>)
 800aff6:	429c      	cmp	r4, r3
 800aff8:	d167      	bne.n	800b0ca <setvbuf+0xf2>
 800affa:	687c      	ldr	r4, [r7, #4]
 800affc:	f1b8 0f02 	cmp.w	r8, #2
 800b000:	d006      	beq.n	800b010 <setvbuf+0x38>
 800b002:	f1b8 0f01 	cmp.w	r8, #1
 800b006:	f200 809f 	bhi.w	800b148 <setvbuf+0x170>
 800b00a:	2d00      	cmp	r5, #0
 800b00c:	f2c0 809c 	blt.w	800b148 <setvbuf+0x170>
 800b010:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b012:	07db      	lsls	r3, r3, #31
 800b014:	d405      	bmi.n	800b022 <setvbuf+0x4a>
 800b016:	89a3      	ldrh	r3, [r4, #12]
 800b018:	0598      	lsls	r0, r3, #22
 800b01a:	d402      	bmi.n	800b022 <setvbuf+0x4a>
 800b01c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b01e:	f7ff fe26 	bl	800ac6e <__retarget_lock_acquire_recursive>
 800b022:	4621      	mov	r1, r4
 800b024:	4638      	mov	r0, r7
 800b026:	f000 fa69 	bl	800b4fc <_fflush_r>
 800b02a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b02c:	b141      	cbz	r1, 800b040 <setvbuf+0x68>
 800b02e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b032:	4299      	cmp	r1, r3
 800b034:	d002      	beq.n	800b03c <setvbuf+0x64>
 800b036:	4638      	mov	r0, r7
 800b038:	f000 fb28 	bl	800b68c <_free_r>
 800b03c:	2300      	movs	r3, #0
 800b03e:	6363      	str	r3, [r4, #52]	; 0x34
 800b040:	2300      	movs	r3, #0
 800b042:	61a3      	str	r3, [r4, #24]
 800b044:	6063      	str	r3, [r4, #4]
 800b046:	89a3      	ldrh	r3, [r4, #12]
 800b048:	0619      	lsls	r1, r3, #24
 800b04a:	d503      	bpl.n	800b054 <setvbuf+0x7c>
 800b04c:	6921      	ldr	r1, [r4, #16]
 800b04e:	4638      	mov	r0, r7
 800b050:	f000 fb1c 	bl	800b68c <_free_r>
 800b054:	89a3      	ldrh	r3, [r4, #12]
 800b056:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 800b05a:	f023 0303 	bic.w	r3, r3, #3
 800b05e:	f1b8 0f02 	cmp.w	r8, #2
 800b062:	81a3      	strh	r3, [r4, #12]
 800b064:	d06c      	beq.n	800b140 <setvbuf+0x168>
 800b066:	ab01      	add	r3, sp, #4
 800b068:	466a      	mov	r2, sp
 800b06a:	4621      	mov	r1, r4
 800b06c:	4638      	mov	r0, r7
 800b06e:	f000 fa93 	bl	800b598 <__swhatbuf_r>
 800b072:	89a3      	ldrh	r3, [r4, #12]
 800b074:	4318      	orrs	r0, r3
 800b076:	81a0      	strh	r0, [r4, #12]
 800b078:	2d00      	cmp	r5, #0
 800b07a:	d130      	bne.n	800b0de <setvbuf+0x106>
 800b07c:	9d00      	ldr	r5, [sp, #0]
 800b07e:	4628      	mov	r0, r5
 800b080:	f000 faf0 	bl	800b664 <malloc>
 800b084:	4606      	mov	r6, r0
 800b086:	2800      	cmp	r0, #0
 800b088:	d155      	bne.n	800b136 <setvbuf+0x15e>
 800b08a:	f8dd 9000 	ldr.w	r9, [sp]
 800b08e:	45a9      	cmp	r9, r5
 800b090:	d14a      	bne.n	800b128 <setvbuf+0x150>
 800b092:	f04f 35ff 	mov.w	r5, #4294967295
 800b096:	2200      	movs	r2, #0
 800b098:	60a2      	str	r2, [r4, #8]
 800b09a:	f104 0247 	add.w	r2, r4, #71	; 0x47
 800b09e:	6022      	str	r2, [r4, #0]
 800b0a0:	6122      	str	r2, [r4, #16]
 800b0a2:	2201      	movs	r2, #1
 800b0a4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b0a8:	6162      	str	r2, [r4, #20]
 800b0aa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b0ac:	f043 0302 	orr.w	r3, r3, #2
 800b0b0:	07d2      	lsls	r2, r2, #31
 800b0b2:	81a3      	strh	r3, [r4, #12]
 800b0b4:	d405      	bmi.n	800b0c2 <setvbuf+0xea>
 800b0b6:	f413 7f00 	tst.w	r3, #512	; 0x200
 800b0ba:	d102      	bne.n	800b0c2 <setvbuf+0xea>
 800b0bc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b0be:	f7ff fdd7 	bl	800ac70 <__retarget_lock_release_recursive>
 800b0c2:	4628      	mov	r0, r5
 800b0c4:	b003      	add	sp, #12
 800b0c6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b0ca:	4b24      	ldr	r3, [pc, #144]	; (800b15c <setvbuf+0x184>)
 800b0cc:	429c      	cmp	r4, r3
 800b0ce:	d101      	bne.n	800b0d4 <setvbuf+0xfc>
 800b0d0:	68bc      	ldr	r4, [r7, #8]
 800b0d2:	e793      	b.n	800affc <setvbuf+0x24>
 800b0d4:	4b22      	ldr	r3, [pc, #136]	; (800b160 <setvbuf+0x188>)
 800b0d6:	429c      	cmp	r4, r3
 800b0d8:	bf08      	it	eq
 800b0da:	68fc      	ldreq	r4, [r7, #12]
 800b0dc:	e78e      	b.n	800affc <setvbuf+0x24>
 800b0de:	2e00      	cmp	r6, #0
 800b0e0:	d0cd      	beq.n	800b07e <setvbuf+0xa6>
 800b0e2:	69bb      	ldr	r3, [r7, #24]
 800b0e4:	b913      	cbnz	r3, 800b0ec <setvbuf+0x114>
 800b0e6:	4638      	mov	r0, r7
 800b0e8:	f7ff fcfe 	bl	800aae8 <__sinit>
 800b0ec:	f1b8 0f01 	cmp.w	r8, #1
 800b0f0:	bf08      	it	eq
 800b0f2:	89a3      	ldrheq	r3, [r4, #12]
 800b0f4:	6026      	str	r6, [r4, #0]
 800b0f6:	bf04      	itt	eq
 800b0f8:	f043 0301 	orreq.w	r3, r3, #1
 800b0fc:	81a3      	strheq	r3, [r4, #12]
 800b0fe:	89a2      	ldrh	r2, [r4, #12]
 800b100:	f012 0308 	ands.w	r3, r2, #8
 800b104:	e9c4 6504 	strd	r6, r5, [r4, #16]
 800b108:	d01c      	beq.n	800b144 <setvbuf+0x16c>
 800b10a:	07d3      	lsls	r3, r2, #31
 800b10c:	bf41      	itttt	mi
 800b10e:	2300      	movmi	r3, #0
 800b110:	426d      	negmi	r5, r5
 800b112:	60a3      	strmi	r3, [r4, #8]
 800b114:	61a5      	strmi	r5, [r4, #24]
 800b116:	bf58      	it	pl
 800b118:	60a5      	strpl	r5, [r4, #8]
 800b11a:	6e65      	ldr	r5, [r4, #100]	; 0x64
 800b11c:	f015 0501 	ands.w	r5, r5, #1
 800b120:	d115      	bne.n	800b14e <setvbuf+0x176>
 800b122:	f412 7f00 	tst.w	r2, #512	; 0x200
 800b126:	e7c8      	b.n	800b0ba <setvbuf+0xe2>
 800b128:	4648      	mov	r0, r9
 800b12a:	f000 fa9b 	bl	800b664 <malloc>
 800b12e:	4606      	mov	r6, r0
 800b130:	2800      	cmp	r0, #0
 800b132:	d0ae      	beq.n	800b092 <setvbuf+0xba>
 800b134:	464d      	mov	r5, r9
 800b136:	89a3      	ldrh	r3, [r4, #12]
 800b138:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b13c:	81a3      	strh	r3, [r4, #12]
 800b13e:	e7d0      	b.n	800b0e2 <setvbuf+0x10a>
 800b140:	2500      	movs	r5, #0
 800b142:	e7a8      	b.n	800b096 <setvbuf+0xbe>
 800b144:	60a3      	str	r3, [r4, #8]
 800b146:	e7e8      	b.n	800b11a <setvbuf+0x142>
 800b148:	f04f 35ff 	mov.w	r5, #4294967295
 800b14c:	e7b9      	b.n	800b0c2 <setvbuf+0xea>
 800b14e:	2500      	movs	r5, #0
 800b150:	e7b7      	b.n	800b0c2 <setvbuf+0xea>
 800b152:	bf00      	nop
 800b154:	20000018 	.word	0x20000018
 800b158:	0800c470 	.word	0x0800c470
 800b15c:	0800c490 	.word	0x0800c490
 800b160:	0800c450 	.word	0x0800c450

0800b164 <siprintf>:
 800b164:	b40e      	push	{r1, r2, r3}
 800b166:	b500      	push	{lr}
 800b168:	b09c      	sub	sp, #112	; 0x70
 800b16a:	ab1d      	add	r3, sp, #116	; 0x74
 800b16c:	9002      	str	r0, [sp, #8]
 800b16e:	9006      	str	r0, [sp, #24]
 800b170:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800b174:	4809      	ldr	r0, [pc, #36]	; (800b19c <siprintf+0x38>)
 800b176:	9107      	str	r1, [sp, #28]
 800b178:	9104      	str	r1, [sp, #16]
 800b17a:	4909      	ldr	r1, [pc, #36]	; (800b1a0 <siprintf+0x3c>)
 800b17c:	f853 2b04 	ldr.w	r2, [r3], #4
 800b180:	9105      	str	r1, [sp, #20]
 800b182:	6800      	ldr	r0, [r0, #0]
 800b184:	9301      	str	r3, [sp, #4]
 800b186:	a902      	add	r1, sp, #8
 800b188:	f000 fb28 	bl	800b7dc <_svfiprintf_r>
 800b18c:	9b02      	ldr	r3, [sp, #8]
 800b18e:	2200      	movs	r2, #0
 800b190:	701a      	strb	r2, [r3, #0]
 800b192:	b01c      	add	sp, #112	; 0x70
 800b194:	f85d eb04 	ldr.w	lr, [sp], #4
 800b198:	b003      	add	sp, #12
 800b19a:	4770      	bx	lr
 800b19c:	20000018 	.word	0x20000018
 800b1a0:	ffff0208 	.word	0xffff0208

0800b1a4 <__sread>:
 800b1a4:	b510      	push	{r4, lr}
 800b1a6:	460c      	mov	r4, r1
 800b1a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b1ac:	f000 ff04 	bl	800bfb8 <_read_r>
 800b1b0:	2800      	cmp	r0, #0
 800b1b2:	bfab      	itete	ge
 800b1b4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b1b6:	89a3      	ldrhlt	r3, [r4, #12]
 800b1b8:	181b      	addge	r3, r3, r0
 800b1ba:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b1be:	bfac      	ite	ge
 800b1c0:	6563      	strge	r3, [r4, #84]	; 0x54
 800b1c2:	81a3      	strhlt	r3, [r4, #12]
 800b1c4:	bd10      	pop	{r4, pc}

0800b1c6 <__swrite>:
 800b1c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b1ca:	461f      	mov	r7, r3
 800b1cc:	898b      	ldrh	r3, [r1, #12]
 800b1ce:	05db      	lsls	r3, r3, #23
 800b1d0:	4605      	mov	r5, r0
 800b1d2:	460c      	mov	r4, r1
 800b1d4:	4616      	mov	r6, r2
 800b1d6:	d505      	bpl.n	800b1e4 <__swrite+0x1e>
 800b1d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b1dc:	2302      	movs	r3, #2
 800b1de:	2200      	movs	r2, #0
 800b1e0:	f000 f9c8 	bl	800b574 <_lseek_r>
 800b1e4:	89a3      	ldrh	r3, [r4, #12]
 800b1e6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b1ea:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b1ee:	81a3      	strh	r3, [r4, #12]
 800b1f0:	4632      	mov	r2, r6
 800b1f2:	463b      	mov	r3, r7
 800b1f4:	4628      	mov	r0, r5
 800b1f6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b1fa:	f000 b869 	b.w	800b2d0 <_write_r>

0800b1fe <__sseek>:
 800b1fe:	b510      	push	{r4, lr}
 800b200:	460c      	mov	r4, r1
 800b202:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b206:	f000 f9b5 	bl	800b574 <_lseek_r>
 800b20a:	1c43      	adds	r3, r0, #1
 800b20c:	89a3      	ldrh	r3, [r4, #12]
 800b20e:	bf15      	itete	ne
 800b210:	6560      	strne	r0, [r4, #84]	; 0x54
 800b212:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b216:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b21a:	81a3      	strheq	r3, [r4, #12]
 800b21c:	bf18      	it	ne
 800b21e:	81a3      	strhne	r3, [r4, #12]
 800b220:	bd10      	pop	{r4, pc}

0800b222 <__sclose>:
 800b222:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b226:	f000 b8d3 	b.w	800b3d0 <_close_r>
	...

0800b22c <__swbuf_r>:
 800b22c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b22e:	460e      	mov	r6, r1
 800b230:	4614      	mov	r4, r2
 800b232:	4605      	mov	r5, r0
 800b234:	b118      	cbz	r0, 800b23e <__swbuf_r+0x12>
 800b236:	6983      	ldr	r3, [r0, #24]
 800b238:	b90b      	cbnz	r3, 800b23e <__swbuf_r+0x12>
 800b23a:	f7ff fc55 	bl	800aae8 <__sinit>
 800b23e:	4b21      	ldr	r3, [pc, #132]	; (800b2c4 <__swbuf_r+0x98>)
 800b240:	429c      	cmp	r4, r3
 800b242:	d12b      	bne.n	800b29c <__swbuf_r+0x70>
 800b244:	686c      	ldr	r4, [r5, #4]
 800b246:	69a3      	ldr	r3, [r4, #24]
 800b248:	60a3      	str	r3, [r4, #8]
 800b24a:	89a3      	ldrh	r3, [r4, #12]
 800b24c:	071a      	lsls	r2, r3, #28
 800b24e:	d52f      	bpl.n	800b2b0 <__swbuf_r+0x84>
 800b250:	6923      	ldr	r3, [r4, #16]
 800b252:	b36b      	cbz	r3, 800b2b0 <__swbuf_r+0x84>
 800b254:	6923      	ldr	r3, [r4, #16]
 800b256:	6820      	ldr	r0, [r4, #0]
 800b258:	1ac0      	subs	r0, r0, r3
 800b25a:	6963      	ldr	r3, [r4, #20]
 800b25c:	b2f6      	uxtb	r6, r6
 800b25e:	4283      	cmp	r3, r0
 800b260:	4637      	mov	r7, r6
 800b262:	dc04      	bgt.n	800b26e <__swbuf_r+0x42>
 800b264:	4621      	mov	r1, r4
 800b266:	4628      	mov	r0, r5
 800b268:	f000 f948 	bl	800b4fc <_fflush_r>
 800b26c:	bb30      	cbnz	r0, 800b2bc <__swbuf_r+0x90>
 800b26e:	68a3      	ldr	r3, [r4, #8]
 800b270:	3b01      	subs	r3, #1
 800b272:	60a3      	str	r3, [r4, #8]
 800b274:	6823      	ldr	r3, [r4, #0]
 800b276:	1c5a      	adds	r2, r3, #1
 800b278:	6022      	str	r2, [r4, #0]
 800b27a:	701e      	strb	r6, [r3, #0]
 800b27c:	6963      	ldr	r3, [r4, #20]
 800b27e:	3001      	adds	r0, #1
 800b280:	4283      	cmp	r3, r0
 800b282:	d004      	beq.n	800b28e <__swbuf_r+0x62>
 800b284:	89a3      	ldrh	r3, [r4, #12]
 800b286:	07db      	lsls	r3, r3, #31
 800b288:	d506      	bpl.n	800b298 <__swbuf_r+0x6c>
 800b28a:	2e0a      	cmp	r6, #10
 800b28c:	d104      	bne.n	800b298 <__swbuf_r+0x6c>
 800b28e:	4621      	mov	r1, r4
 800b290:	4628      	mov	r0, r5
 800b292:	f000 f933 	bl	800b4fc <_fflush_r>
 800b296:	b988      	cbnz	r0, 800b2bc <__swbuf_r+0x90>
 800b298:	4638      	mov	r0, r7
 800b29a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b29c:	4b0a      	ldr	r3, [pc, #40]	; (800b2c8 <__swbuf_r+0x9c>)
 800b29e:	429c      	cmp	r4, r3
 800b2a0:	d101      	bne.n	800b2a6 <__swbuf_r+0x7a>
 800b2a2:	68ac      	ldr	r4, [r5, #8]
 800b2a4:	e7cf      	b.n	800b246 <__swbuf_r+0x1a>
 800b2a6:	4b09      	ldr	r3, [pc, #36]	; (800b2cc <__swbuf_r+0xa0>)
 800b2a8:	429c      	cmp	r4, r3
 800b2aa:	bf08      	it	eq
 800b2ac:	68ec      	ldreq	r4, [r5, #12]
 800b2ae:	e7ca      	b.n	800b246 <__swbuf_r+0x1a>
 800b2b0:	4621      	mov	r1, r4
 800b2b2:	4628      	mov	r0, r5
 800b2b4:	f000 f81e 	bl	800b2f4 <__swsetup_r>
 800b2b8:	2800      	cmp	r0, #0
 800b2ba:	d0cb      	beq.n	800b254 <__swbuf_r+0x28>
 800b2bc:	f04f 37ff 	mov.w	r7, #4294967295
 800b2c0:	e7ea      	b.n	800b298 <__swbuf_r+0x6c>
 800b2c2:	bf00      	nop
 800b2c4:	0800c470 	.word	0x0800c470
 800b2c8:	0800c490 	.word	0x0800c490
 800b2cc:	0800c450 	.word	0x0800c450

0800b2d0 <_write_r>:
 800b2d0:	b538      	push	{r3, r4, r5, lr}
 800b2d2:	4d07      	ldr	r5, [pc, #28]	; (800b2f0 <_write_r+0x20>)
 800b2d4:	4604      	mov	r4, r0
 800b2d6:	4608      	mov	r0, r1
 800b2d8:	4611      	mov	r1, r2
 800b2da:	2200      	movs	r2, #0
 800b2dc:	602a      	str	r2, [r5, #0]
 800b2de:	461a      	mov	r2, r3
 800b2e0:	f7f7 fbd6 	bl	8002a90 <_write>
 800b2e4:	1c43      	adds	r3, r0, #1
 800b2e6:	d102      	bne.n	800b2ee <_write_r+0x1e>
 800b2e8:	682b      	ldr	r3, [r5, #0]
 800b2ea:	b103      	cbz	r3, 800b2ee <_write_r+0x1e>
 800b2ec:	6023      	str	r3, [r4, #0]
 800b2ee:	bd38      	pop	{r3, r4, r5, pc}
 800b2f0:	20005e7c 	.word	0x20005e7c

0800b2f4 <__swsetup_r>:
 800b2f4:	4b32      	ldr	r3, [pc, #200]	; (800b3c0 <__swsetup_r+0xcc>)
 800b2f6:	b570      	push	{r4, r5, r6, lr}
 800b2f8:	681d      	ldr	r5, [r3, #0]
 800b2fa:	4606      	mov	r6, r0
 800b2fc:	460c      	mov	r4, r1
 800b2fe:	b125      	cbz	r5, 800b30a <__swsetup_r+0x16>
 800b300:	69ab      	ldr	r3, [r5, #24]
 800b302:	b913      	cbnz	r3, 800b30a <__swsetup_r+0x16>
 800b304:	4628      	mov	r0, r5
 800b306:	f7ff fbef 	bl	800aae8 <__sinit>
 800b30a:	4b2e      	ldr	r3, [pc, #184]	; (800b3c4 <__swsetup_r+0xd0>)
 800b30c:	429c      	cmp	r4, r3
 800b30e:	d10f      	bne.n	800b330 <__swsetup_r+0x3c>
 800b310:	686c      	ldr	r4, [r5, #4]
 800b312:	89a3      	ldrh	r3, [r4, #12]
 800b314:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b318:	0719      	lsls	r1, r3, #28
 800b31a:	d42c      	bmi.n	800b376 <__swsetup_r+0x82>
 800b31c:	06dd      	lsls	r5, r3, #27
 800b31e:	d411      	bmi.n	800b344 <__swsetup_r+0x50>
 800b320:	2309      	movs	r3, #9
 800b322:	6033      	str	r3, [r6, #0]
 800b324:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b328:	81a3      	strh	r3, [r4, #12]
 800b32a:	f04f 30ff 	mov.w	r0, #4294967295
 800b32e:	e03e      	b.n	800b3ae <__swsetup_r+0xba>
 800b330:	4b25      	ldr	r3, [pc, #148]	; (800b3c8 <__swsetup_r+0xd4>)
 800b332:	429c      	cmp	r4, r3
 800b334:	d101      	bne.n	800b33a <__swsetup_r+0x46>
 800b336:	68ac      	ldr	r4, [r5, #8]
 800b338:	e7eb      	b.n	800b312 <__swsetup_r+0x1e>
 800b33a:	4b24      	ldr	r3, [pc, #144]	; (800b3cc <__swsetup_r+0xd8>)
 800b33c:	429c      	cmp	r4, r3
 800b33e:	bf08      	it	eq
 800b340:	68ec      	ldreq	r4, [r5, #12]
 800b342:	e7e6      	b.n	800b312 <__swsetup_r+0x1e>
 800b344:	0758      	lsls	r0, r3, #29
 800b346:	d512      	bpl.n	800b36e <__swsetup_r+0x7a>
 800b348:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b34a:	b141      	cbz	r1, 800b35e <__swsetup_r+0x6a>
 800b34c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b350:	4299      	cmp	r1, r3
 800b352:	d002      	beq.n	800b35a <__swsetup_r+0x66>
 800b354:	4630      	mov	r0, r6
 800b356:	f000 f999 	bl	800b68c <_free_r>
 800b35a:	2300      	movs	r3, #0
 800b35c:	6363      	str	r3, [r4, #52]	; 0x34
 800b35e:	89a3      	ldrh	r3, [r4, #12]
 800b360:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b364:	81a3      	strh	r3, [r4, #12]
 800b366:	2300      	movs	r3, #0
 800b368:	6063      	str	r3, [r4, #4]
 800b36a:	6923      	ldr	r3, [r4, #16]
 800b36c:	6023      	str	r3, [r4, #0]
 800b36e:	89a3      	ldrh	r3, [r4, #12]
 800b370:	f043 0308 	orr.w	r3, r3, #8
 800b374:	81a3      	strh	r3, [r4, #12]
 800b376:	6923      	ldr	r3, [r4, #16]
 800b378:	b94b      	cbnz	r3, 800b38e <__swsetup_r+0x9a>
 800b37a:	89a3      	ldrh	r3, [r4, #12]
 800b37c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b380:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b384:	d003      	beq.n	800b38e <__swsetup_r+0x9a>
 800b386:	4621      	mov	r1, r4
 800b388:	4630      	mov	r0, r6
 800b38a:	f000 f92b 	bl	800b5e4 <__smakebuf_r>
 800b38e:	89a0      	ldrh	r0, [r4, #12]
 800b390:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b394:	f010 0301 	ands.w	r3, r0, #1
 800b398:	d00a      	beq.n	800b3b0 <__swsetup_r+0xbc>
 800b39a:	2300      	movs	r3, #0
 800b39c:	60a3      	str	r3, [r4, #8]
 800b39e:	6963      	ldr	r3, [r4, #20]
 800b3a0:	425b      	negs	r3, r3
 800b3a2:	61a3      	str	r3, [r4, #24]
 800b3a4:	6923      	ldr	r3, [r4, #16]
 800b3a6:	b943      	cbnz	r3, 800b3ba <__swsetup_r+0xc6>
 800b3a8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800b3ac:	d1ba      	bne.n	800b324 <__swsetup_r+0x30>
 800b3ae:	bd70      	pop	{r4, r5, r6, pc}
 800b3b0:	0781      	lsls	r1, r0, #30
 800b3b2:	bf58      	it	pl
 800b3b4:	6963      	ldrpl	r3, [r4, #20]
 800b3b6:	60a3      	str	r3, [r4, #8]
 800b3b8:	e7f4      	b.n	800b3a4 <__swsetup_r+0xb0>
 800b3ba:	2000      	movs	r0, #0
 800b3bc:	e7f7      	b.n	800b3ae <__swsetup_r+0xba>
 800b3be:	bf00      	nop
 800b3c0:	20000018 	.word	0x20000018
 800b3c4:	0800c470 	.word	0x0800c470
 800b3c8:	0800c490 	.word	0x0800c490
 800b3cc:	0800c450 	.word	0x0800c450

0800b3d0 <_close_r>:
 800b3d0:	b538      	push	{r3, r4, r5, lr}
 800b3d2:	4d06      	ldr	r5, [pc, #24]	; (800b3ec <_close_r+0x1c>)
 800b3d4:	2300      	movs	r3, #0
 800b3d6:	4604      	mov	r4, r0
 800b3d8:	4608      	mov	r0, r1
 800b3da:	602b      	str	r3, [r5, #0]
 800b3dc:	f7f7 fb84 	bl	8002ae8 <_close>
 800b3e0:	1c43      	adds	r3, r0, #1
 800b3e2:	d102      	bne.n	800b3ea <_close_r+0x1a>
 800b3e4:	682b      	ldr	r3, [r5, #0]
 800b3e6:	b103      	cbz	r3, 800b3ea <_close_r+0x1a>
 800b3e8:	6023      	str	r3, [r4, #0]
 800b3ea:	bd38      	pop	{r3, r4, r5, pc}
 800b3ec:	20005e7c 	.word	0x20005e7c

0800b3f0 <__sflush_r>:
 800b3f0:	898a      	ldrh	r2, [r1, #12]
 800b3f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b3f6:	4605      	mov	r5, r0
 800b3f8:	0710      	lsls	r0, r2, #28
 800b3fa:	460c      	mov	r4, r1
 800b3fc:	d458      	bmi.n	800b4b0 <__sflush_r+0xc0>
 800b3fe:	684b      	ldr	r3, [r1, #4]
 800b400:	2b00      	cmp	r3, #0
 800b402:	dc05      	bgt.n	800b410 <__sflush_r+0x20>
 800b404:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b406:	2b00      	cmp	r3, #0
 800b408:	dc02      	bgt.n	800b410 <__sflush_r+0x20>
 800b40a:	2000      	movs	r0, #0
 800b40c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b410:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b412:	2e00      	cmp	r6, #0
 800b414:	d0f9      	beq.n	800b40a <__sflush_r+0x1a>
 800b416:	2300      	movs	r3, #0
 800b418:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b41c:	682f      	ldr	r7, [r5, #0]
 800b41e:	602b      	str	r3, [r5, #0]
 800b420:	d032      	beq.n	800b488 <__sflush_r+0x98>
 800b422:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b424:	89a3      	ldrh	r3, [r4, #12]
 800b426:	075a      	lsls	r2, r3, #29
 800b428:	d505      	bpl.n	800b436 <__sflush_r+0x46>
 800b42a:	6863      	ldr	r3, [r4, #4]
 800b42c:	1ac0      	subs	r0, r0, r3
 800b42e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b430:	b10b      	cbz	r3, 800b436 <__sflush_r+0x46>
 800b432:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b434:	1ac0      	subs	r0, r0, r3
 800b436:	2300      	movs	r3, #0
 800b438:	4602      	mov	r2, r0
 800b43a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b43c:	6a21      	ldr	r1, [r4, #32]
 800b43e:	4628      	mov	r0, r5
 800b440:	47b0      	blx	r6
 800b442:	1c43      	adds	r3, r0, #1
 800b444:	89a3      	ldrh	r3, [r4, #12]
 800b446:	d106      	bne.n	800b456 <__sflush_r+0x66>
 800b448:	6829      	ldr	r1, [r5, #0]
 800b44a:	291d      	cmp	r1, #29
 800b44c:	d82c      	bhi.n	800b4a8 <__sflush_r+0xb8>
 800b44e:	4a2a      	ldr	r2, [pc, #168]	; (800b4f8 <__sflush_r+0x108>)
 800b450:	40ca      	lsrs	r2, r1
 800b452:	07d6      	lsls	r6, r2, #31
 800b454:	d528      	bpl.n	800b4a8 <__sflush_r+0xb8>
 800b456:	2200      	movs	r2, #0
 800b458:	6062      	str	r2, [r4, #4]
 800b45a:	04d9      	lsls	r1, r3, #19
 800b45c:	6922      	ldr	r2, [r4, #16]
 800b45e:	6022      	str	r2, [r4, #0]
 800b460:	d504      	bpl.n	800b46c <__sflush_r+0x7c>
 800b462:	1c42      	adds	r2, r0, #1
 800b464:	d101      	bne.n	800b46a <__sflush_r+0x7a>
 800b466:	682b      	ldr	r3, [r5, #0]
 800b468:	b903      	cbnz	r3, 800b46c <__sflush_r+0x7c>
 800b46a:	6560      	str	r0, [r4, #84]	; 0x54
 800b46c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b46e:	602f      	str	r7, [r5, #0]
 800b470:	2900      	cmp	r1, #0
 800b472:	d0ca      	beq.n	800b40a <__sflush_r+0x1a>
 800b474:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b478:	4299      	cmp	r1, r3
 800b47a:	d002      	beq.n	800b482 <__sflush_r+0x92>
 800b47c:	4628      	mov	r0, r5
 800b47e:	f000 f905 	bl	800b68c <_free_r>
 800b482:	2000      	movs	r0, #0
 800b484:	6360      	str	r0, [r4, #52]	; 0x34
 800b486:	e7c1      	b.n	800b40c <__sflush_r+0x1c>
 800b488:	6a21      	ldr	r1, [r4, #32]
 800b48a:	2301      	movs	r3, #1
 800b48c:	4628      	mov	r0, r5
 800b48e:	47b0      	blx	r6
 800b490:	1c41      	adds	r1, r0, #1
 800b492:	d1c7      	bne.n	800b424 <__sflush_r+0x34>
 800b494:	682b      	ldr	r3, [r5, #0]
 800b496:	2b00      	cmp	r3, #0
 800b498:	d0c4      	beq.n	800b424 <__sflush_r+0x34>
 800b49a:	2b1d      	cmp	r3, #29
 800b49c:	d001      	beq.n	800b4a2 <__sflush_r+0xb2>
 800b49e:	2b16      	cmp	r3, #22
 800b4a0:	d101      	bne.n	800b4a6 <__sflush_r+0xb6>
 800b4a2:	602f      	str	r7, [r5, #0]
 800b4a4:	e7b1      	b.n	800b40a <__sflush_r+0x1a>
 800b4a6:	89a3      	ldrh	r3, [r4, #12]
 800b4a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b4ac:	81a3      	strh	r3, [r4, #12]
 800b4ae:	e7ad      	b.n	800b40c <__sflush_r+0x1c>
 800b4b0:	690f      	ldr	r7, [r1, #16]
 800b4b2:	2f00      	cmp	r7, #0
 800b4b4:	d0a9      	beq.n	800b40a <__sflush_r+0x1a>
 800b4b6:	0793      	lsls	r3, r2, #30
 800b4b8:	680e      	ldr	r6, [r1, #0]
 800b4ba:	bf08      	it	eq
 800b4bc:	694b      	ldreq	r3, [r1, #20]
 800b4be:	600f      	str	r7, [r1, #0]
 800b4c0:	bf18      	it	ne
 800b4c2:	2300      	movne	r3, #0
 800b4c4:	eba6 0807 	sub.w	r8, r6, r7
 800b4c8:	608b      	str	r3, [r1, #8]
 800b4ca:	f1b8 0f00 	cmp.w	r8, #0
 800b4ce:	dd9c      	ble.n	800b40a <__sflush_r+0x1a>
 800b4d0:	6a21      	ldr	r1, [r4, #32]
 800b4d2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b4d4:	4643      	mov	r3, r8
 800b4d6:	463a      	mov	r2, r7
 800b4d8:	4628      	mov	r0, r5
 800b4da:	47b0      	blx	r6
 800b4dc:	2800      	cmp	r0, #0
 800b4de:	dc06      	bgt.n	800b4ee <__sflush_r+0xfe>
 800b4e0:	89a3      	ldrh	r3, [r4, #12]
 800b4e2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b4e6:	81a3      	strh	r3, [r4, #12]
 800b4e8:	f04f 30ff 	mov.w	r0, #4294967295
 800b4ec:	e78e      	b.n	800b40c <__sflush_r+0x1c>
 800b4ee:	4407      	add	r7, r0
 800b4f0:	eba8 0800 	sub.w	r8, r8, r0
 800b4f4:	e7e9      	b.n	800b4ca <__sflush_r+0xda>
 800b4f6:	bf00      	nop
 800b4f8:	20400001 	.word	0x20400001

0800b4fc <_fflush_r>:
 800b4fc:	b538      	push	{r3, r4, r5, lr}
 800b4fe:	690b      	ldr	r3, [r1, #16]
 800b500:	4605      	mov	r5, r0
 800b502:	460c      	mov	r4, r1
 800b504:	b913      	cbnz	r3, 800b50c <_fflush_r+0x10>
 800b506:	2500      	movs	r5, #0
 800b508:	4628      	mov	r0, r5
 800b50a:	bd38      	pop	{r3, r4, r5, pc}
 800b50c:	b118      	cbz	r0, 800b516 <_fflush_r+0x1a>
 800b50e:	6983      	ldr	r3, [r0, #24]
 800b510:	b90b      	cbnz	r3, 800b516 <_fflush_r+0x1a>
 800b512:	f7ff fae9 	bl	800aae8 <__sinit>
 800b516:	4b14      	ldr	r3, [pc, #80]	; (800b568 <_fflush_r+0x6c>)
 800b518:	429c      	cmp	r4, r3
 800b51a:	d11b      	bne.n	800b554 <_fflush_r+0x58>
 800b51c:	686c      	ldr	r4, [r5, #4]
 800b51e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b522:	2b00      	cmp	r3, #0
 800b524:	d0ef      	beq.n	800b506 <_fflush_r+0xa>
 800b526:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b528:	07d0      	lsls	r0, r2, #31
 800b52a:	d404      	bmi.n	800b536 <_fflush_r+0x3a>
 800b52c:	0599      	lsls	r1, r3, #22
 800b52e:	d402      	bmi.n	800b536 <_fflush_r+0x3a>
 800b530:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b532:	f7ff fb9c 	bl	800ac6e <__retarget_lock_acquire_recursive>
 800b536:	4628      	mov	r0, r5
 800b538:	4621      	mov	r1, r4
 800b53a:	f7ff ff59 	bl	800b3f0 <__sflush_r>
 800b53e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b540:	07da      	lsls	r2, r3, #31
 800b542:	4605      	mov	r5, r0
 800b544:	d4e0      	bmi.n	800b508 <_fflush_r+0xc>
 800b546:	89a3      	ldrh	r3, [r4, #12]
 800b548:	059b      	lsls	r3, r3, #22
 800b54a:	d4dd      	bmi.n	800b508 <_fflush_r+0xc>
 800b54c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b54e:	f7ff fb8f 	bl	800ac70 <__retarget_lock_release_recursive>
 800b552:	e7d9      	b.n	800b508 <_fflush_r+0xc>
 800b554:	4b05      	ldr	r3, [pc, #20]	; (800b56c <_fflush_r+0x70>)
 800b556:	429c      	cmp	r4, r3
 800b558:	d101      	bne.n	800b55e <_fflush_r+0x62>
 800b55a:	68ac      	ldr	r4, [r5, #8]
 800b55c:	e7df      	b.n	800b51e <_fflush_r+0x22>
 800b55e:	4b04      	ldr	r3, [pc, #16]	; (800b570 <_fflush_r+0x74>)
 800b560:	429c      	cmp	r4, r3
 800b562:	bf08      	it	eq
 800b564:	68ec      	ldreq	r4, [r5, #12]
 800b566:	e7da      	b.n	800b51e <_fflush_r+0x22>
 800b568:	0800c470 	.word	0x0800c470
 800b56c:	0800c490 	.word	0x0800c490
 800b570:	0800c450 	.word	0x0800c450

0800b574 <_lseek_r>:
 800b574:	b538      	push	{r3, r4, r5, lr}
 800b576:	4d07      	ldr	r5, [pc, #28]	; (800b594 <_lseek_r+0x20>)
 800b578:	4604      	mov	r4, r0
 800b57a:	4608      	mov	r0, r1
 800b57c:	4611      	mov	r1, r2
 800b57e:	2200      	movs	r2, #0
 800b580:	602a      	str	r2, [r5, #0]
 800b582:	461a      	mov	r2, r3
 800b584:	f7f7 fac7 	bl	8002b16 <_lseek>
 800b588:	1c43      	adds	r3, r0, #1
 800b58a:	d102      	bne.n	800b592 <_lseek_r+0x1e>
 800b58c:	682b      	ldr	r3, [r5, #0]
 800b58e:	b103      	cbz	r3, 800b592 <_lseek_r+0x1e>
 800b590:	6023      	str	r3, [r4, #0]
 800b592:	bd38      	pop	{r3, r4, r5, pc}
 800b594:	20005e7c 	.word	0x20005e7c

0800b598 <__swhatbuf_r>:
 800b598:	b570      	push	{r4, r5, r6, lr}
 800b59a:	460e      	mov	r6, r1
 800b59c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b5a0:	2900      	cmp	r1, #0
 800b5a2:	b096      	sub	sp, #88	; 0x58
 800b5a4:	4614      	mov	r4, r2
 800b5a6:	461d      	mov	r5, r3
 800b5a8:	da08      	bge.n	800b5bc <__swhatbuf_r+0x24>
 800b5aa:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800b5ae:	2200      	movs	r2, #0
 800b5b0:	602a      	str	r2, [r5, #0]
 800b5b2:	061a      	lsls	r2, r3, #24
 800b5b4:	d410      	bmi.n	800b5d8 <__swhatbuf_r+0x40>
 800b5b6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b5ba:	e00e      	b.n	800b5da <__swhatbuf_r+0x42>
 800b5bc:	466a      	mov	r2, sp
 800b5be:	f000 fd0d 	bl	800bfdc <_fstat_r>
 800b5c2:	2800      	cmp	r0, #0
 800b5c4:	dbf1      	blt.n	800b5aa <__swhatbuf_r+0x12>
 800b5c6:	9a01      	ldr	r2, [sp, #4]
 800b5c8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800b5cc:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800b5d0:	425a      	negs	r2, r3
 800b5d2:	415a      	adcs	r2, r3
 800b5d4:	602a      	str	r2, [r5, #0]
 800b5d6:	e7ee      	b.n	800b5b6 <__swhatbuf_r+0x1e>
 800b5d8:	2340      	movs	r3, #64	; 0x40
 800b5da:	2000      	movs	r0, #0
 800b5dc:	6023      	str	r3, [r4, #0]
 800b5de:	b016      	add	sp, #88	; 0x58
 800b5e0:	bd70      	pop	{r4, r5, r6, pc}
	...

0800b5e4 <__smakebuf_r>:
 800b5e4:	898b      	ldrh	r3, [r1, #12]
 800b5e6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b5e8:	079d      	lsls	r5, r3, #30
 800b5ea:	4606      	mov	r6, r0
 800b5ec:	460c      	mov	r4, r1
 800b5ee:	d507      	bpl.n	800b600 <__smakebuf_r+0x1c>
 800b5f0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b5f4:	6023      	str	r3, [r4, #0]
 800b5f6:	6123      	str	r3, [r4, #16]
 800b5f8:	2301      	movs	r3, #1
 800b5fa:	6163      	str	r3, [r4, #20]
 800b5fc:	b002      	add	sp, #8
 800b5fe:	bd70      	pop	{r4, r5, r6, pc}
 800b600:	ab01      	add	r3, sp, #4
 800b602:	466a      	mov	r2, sp
 800b604:	f7ff ffc8 	bl	800b598 <__swhatbuf_r>
 800b608:	9900      	ldr	r1, [sp, #0]
 800b60a:	4605      	mov	r5, r0
 800b60c:	4630      	mov	r0, r6
 800b60e:	f7ff fb67 	bl	800ace0 <_malloc_r>
 800b612:	b948      	cbnz	r0, 800b628 <__smakebuf_r+0x44>
 800b614:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b618:	059a      	lsls	r2, r3, #22
 800b61a:	d4ef      	bmi.n	800b5fc <__smakebuf_r+0x18>
 800b61c:	f023 0303 	bic.w	r3, r3, #3
 800b620:	f043 0302 	orr.w	r3, r3, #2
 800b624:	81a3      	strh	r3, [r4, #12]
 800b626:	e7e3      	b.n	800b5f0 <__smakebuf_r+0xc>
 800b628:	4b0d      	ldr	r3, [pc, #52]	; (800b660 <__smakebuf_r+0x7c>)
 800b62a:	62b3      	str	r3, [r6, #40]	; 0x28
 800b62c:	89a3      	ldrh	r3, [r4, #12]
 800b62e:	6020      	str	r0, [r4, #0]
 800b630:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b634:	81a3      	strh	r3, [r4, #12]
 800b636:	9b00      	ldr	r3, [sp, #0]
 800b638:	6163      	str	r3, [r4, #20]
 800b63a:	9b01      	ldr	r3, [sp, #4]
 800b63c:	6120      	str	r0, [r4, #16]
 800b63e:	b15b      	cbz	r3, 800b658 <__smakebuf_r+0x74>
 800b640:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b644:	4630      	mov	r0, r6
 800b646:	f000 fcdb 	bl	800c000 <_isatty_r>
 800b64a:	b128      	cbz	r0, 800b658 <__smakebuf_r+0x74>
 800b64c:	89a3      	ldrh	r3, [r4, #12]
 800b64e:	f023 0303 	bic.w	r3, r3, #3
 800b652:	f043 0301 	orr.w	r3, r3, #1
 800b656:	81a3      	strh	r3, [r4, #12]
 800b658:	89a0      	ldrh	r0, [r4, #12]
 800b65a:	4305      	orrs	r5, r0
 800b65c:	81a5      	strh	r5, [r4, #12]
 800b65e:	e7cd      	b.n	800b5fc <__smakebuf_r+0x18>
 800b660:	0800aa81 	.word	0x0800aa81

0800b664 <malloc>:
 800b664:	4b02      	ldr	r3, [pc, #8]	; (800b670 <malloc+0xc>)
 800b666:	4601      	mov	r1, r0
 800b668:	6818      	ldr	r0, [r3, #0]
 800b66a:	f7ff bb39 	b.w	800ace0 <_malloc_r>
 800b66e:	bf00      	nop
 800b670:	20000018 	.word	0x20000018

0800b674 <__malloc_lock>:
 800b674:	4801      	ldr	r0, [pc, #4]	; (800b67c <__malloc_lock+0x8>)
 800b676:	f7ff bafa 	b.w	800ac6e <__retarget_lock_acquire_recursive>
 800b67a:	bf00      	nop
 800b67c:	20005e70 	.word	0x20005e70

0800b680 <__malloc_unlock>:
 800b680:	4801      	ldr	r0, [pc, #4]	; (800b688 <__malloc_unlock+0x8>)
 800b682:	f7ff baf5 	b.w	800ac70 <__retarget_lock_release_recursive>
 800b686:	bf00      	nop
 800b688:	20005e70 	.word	0x20005e70

0800b68c <_free_r>:
 800b68c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b68e:	2900      	cmp	r1, #0
 800b690:	d044      	beq.n	800b71c <_free_r+0x90>
 800b692:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b696:	9001      	str	r0, [sp, #4]
 800b698:	2b00      	cmp	r3, #0
 800b69a:	f1a1 0404 	sub.w	r4, r1, #4
 800b69e:	bfb8      	it	lt
 800b6a0:	18e4      	addlt	r4, r4, r3
 800b6a2:	f7ff ffe7 	bl	800b674 <__malloc_lock>
 800b6a6:	4a1e      	ldr	r2, [pc, #120]	; (800b720 <_free_r+0x94>)
 800b6a8:	9801      	ldr	r0, [sp, #4]
 800b6aa:	6813      	ldr	r3, [r2, #0]
 800b6ac:	b933      	cbnz	r3, 800b6bc <_free_r+0x30>
 800b6ae:	6063      	str	r3, [r4, #4]
 800b6b0:	6014      	str	r4, [r2, #0]
 800b6b2:	b003      	add	sp, #12
 800b6b4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b6b8:	f7ff bfe2 	b.w	800b680 <__malloc_unlock>
 800b6bc:	42a3      	cmp	r3, r4
 800b6be:	d908      	bls.n	800b6d2 <_free_r+0x46>
 800b6c0:	6825      	ldr	r5, [r4, #0]
 800b6c2:	1961      	adds	r1, r4, r5
 800b6c4:	428b      	cmp	r3, r1
 800b6c6:	bf01      	itttt	eq
 800b6c8:	6819      	ldreq	r1, [r3, #0]
 800b6ca:	685b      	ldreq	r3, [r3, #4]
 800b6cc:	1949      	addeq	r1, r1, r5
 800b6ce:	6021      	streq	r1, [r4, #0]
 800b6d0:	e7ed      	b.n	800b6ae <_free_r+0x22>
 800b6d2:	461a      	mov	r2, r3
 800b6d4:	685b      	ldr	r3, [r3, #4]
 800b6d6:	b10b      	cbz	r3, 800b6dc <_free_r+0x50>
 800b6d8:	42a3      	cmp	r3, r4
 800b6da:	d9fa      	bls.n	800b6d2 <_free_r+0x46>
 800b6dc:	6811      	ldr	r1, [r2, #0]
 800b6de:	1855      	adds	r5, r2, r1
 800b6e0:	42a5      	cmp	r5, r4
 800b6e2:	d10b      	bne.n	800b6fc <_free_r+0x70>
 800b6e4:	6824      	ldr	r4, [r4, #0]
 800b6e6:	4421      	add	r1, r4
 800b6e8:	1854      	adds	r4, r2, r1
 800b6ea:	42a3      	cmp	r3, r4
 800b6ec:	6011      	str	r1, [r2, #0]
 800b6ee:	d1e0      	bne.n	800b6b2 <_free_r+0x26>
 800b6f0:	681c      	ldr	r4, [r3, #0]
 800b6f2:	685b      	ldr	r3, [r3, #4]
 800b6f4:	6053      	str	r3, [r2, #4]
 800b6f6:	4421      	add	r1, r4
 800b6f8:	6011      	str	r1, [r2, #0]
 800b6fa:	e7da      	b.n	800b6b2 <_free_r+0x26>
 800b6fc:	d902      	bls.n	800b704 <_free_r+0x78>
 800b6fe:	230c      	movs	r3, #12
 800b700:	6003      	str	r3, [r0, #0]
 800b702:	e7d6      	b.n	800b6b2 <_free_r+0x26>
 800b704:	6825      	ldr	r5, [r4, #0]
 800b706:	1961      	adds	r1, r4, r5
 800b708:	428b      	cmp	r3, r1
 800b70a:	bf04      	itt	eq
 800b70c:	6819      	ldreq	r1, [r3, #0]
 800b70e:	685b      	ldreq	r3, [r3, #4]
 800b710:	6063      	str	r3, [r4, #4]
 800b712:	bf04      	itt	eq
 800b714:	1949      	addeq	r1, r1, r5
 800b716:	6021      	streq	r1, [r4, #0]
 800b718:	6054      	str	r4, [r2, #4]
 800b71a:	e7ca      	b.n	800b6b2 <_free_r+0x26>
 800b71c:	b003      	add	sp, #12
 800b71e:	bd30      	pop	{r4, r5, pc}
 800b720:	20005e74 	.word	0x20005e74

0800b724 <__ssputs_r>:
 800b724:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b728:	688e      	ldr	r6, [r1, #8]
 800b72a:	429e      	cmp	r6, r3
 800b72c:	4682      	mov	sl, r0
 800b72e:	460c      	mov	r4, r1
 800b730:	4690      	mov	r8, r2
 800b732:	461f      	mov	r7, r3
 800b734:	d838      	bhi.n	800b7a8 <__ssputs_r+0x84>
 800b736:	898a      	ldrh	r2, [r1, #12]
 800b738:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b73c:	d032      	beq.n	800b7a4 <__ssputs_r+0x80>
 800b73e:	6825      	ldr	r5, [r4, #0]
 800b740:	6909      	ldr	r1, [r1, #16]
 800b742:	eba5 0901 	sub.w	r9, r5, r1
 800b746:	6965      	ldr	r5, [r4, #20]
 800b748:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b74c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b750:	3301      	adds	r3, #1
 800b752:	444b      	add	r3, r9
 800b754:	106d      	asrs	r5, r5, #1
 800b756:	429d      	cmp	r5, r3
 800b758:	bf38      	it	cc
 800b75a:	461d      	movcc	r5, r3
 800b75c:	0553      	lsls	r3, r2, #21
 800b75e:	d531      	bpl.n	800b7c4 <__ssputs_r+0xa0>
 800b760:	4629      	mov	r1, r5
 800b762:	f7ff fabd 	bl	800ace0 <_malloc_r>
 800b766:	4606      	mov	r6, r0
 800b768:	b950      	cbnz	r0, 800b780 <__ssputs_r+0x5c>
 800b76a:	230c      	movs	r3, #12
 800b76c:	f8ca 3000 	str.w	r3, [sl]
 800b770:	89a3      	ldrh	r3, [r4, #12]
 800b772:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b776:	81a3      	strh	r3, [r4, #12]
 800b778:	f04f 30ff 	mov.w	r0, #4294967295
 800b77c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b780:	6921      	ldr	r1, [r4, #16]
 800b782:	464a      	mov	r2, r9
 800b784:	f7ff fa75 	bl	800ac72 <memcpy>
 800b788:	89a3      	ldrh	r3, [r4, #12]
 800b78a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b78e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b792:	81a3      	strh	r3, [r4, #12]
 800b794:	6126      	str	r6, [r4, #16]
 800b796:	6165      	str	r5, [r4, #20]
 800b798:	444e      	add	r6, r9
 800b79a:	eba5 0509 	sub.w	r5, r5, r9
 800b79e:	6026      	str	r6, [r4, #0]
 800b7a0:	60a5      	str	r5, [r4, #8]
 800b7a2:	463e      	mov	r6, r7
 800b7a4:	42be      	cmp	r6, r7
 800b7a6:	d900      	bls.n	800b7aa <__ssputs_r+0x86>
 800b7a8:	463e      	mov	r6, r7
 800b7aa:	6820      	ldr	r0, [r4, #0]
 800b7ac:	4632      	mov	r2, r6
 800b7ae:	4641      	mov	r1, r8
 800b7b0:	f000 fc36 	bl	800c020 <memmove>
 800b7b4:	68a3      	ldr	r3, [r4, #8]
 800b7b6:	1b9b      	subs	r3, r3, r6
 800b7b8:	60a3      	str	r3, [r4, #8]
 800b7ba:	6823      	ldr	r3, [r4, #0]
 800b7bc:	4433      	add	r3, r6
 800b7be:	6023      	str	r3, [r4, #0]
 800b7c0:	2000      	movs	r0, #0
 800b7c2:	e7db      	b.n	800b77c <__ssputs_r+0x58>
 800b7c4:	462a      	mov	r2, r5
 800b7c6:	f000 fc45 	bl	800c054 <_realloc_r>
 800b7ca:	4606      	mov	r6, r0
 800b7cc:	2800      	cmp	r0, #0
 800b7ce:	d1e1      	bne.n	800b794 <__ssputs_r+0x70>
 800b7d0:	6921      	ldr	r1, [r4, #16]
 800b7d2:	4650      	mov	r0, sl
 800b7d4:	f7ff ff5a 	bl	800b68c <_free_r>
 800b7d8:	e7c7      	b.n	800b76a <__ssputs_r+0x46>
	...

0800b7dc <_svfiprintf_r>:
 800b7dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b7e0:	4698      	mov	r8, r3
 800b7e2:	898b      	ldrh	r3, [r1, #12]
 800b7e4:	061b      	lsls	r3, r3, #24
 800b7e6:	b09d      	sub	sp, #116	; 0x74
 800b7e8:	4607      	mov	r7, r0
 800b7ea:	460d      	mov	r5, r1
 800b7ec:	4614      	mov	r4, r2
 800b7ee:	d50e      	bpl.n	800b80e <_svfiprintf_r+0x32>
 800b7f0:	690b      	ldr	r3, [r1, #16]
 800b7f2:	b963      	cbnz	r3, 800b80e <_svfiprintf_r+0x32>
 800b7f4:	2140      	movs	r1, #64	; 0x40
 800b7f6:	f7ff fa73 	bl	800ace0 <_malloc_r>
 800b7fa:	6028      	str	r0, [r5, #0]
 800b7fc:	6128      	str	r0, [r5, #16]
 800b7fe:	b920      	cbnz	r0, 800b80a <_svfiprintf_r+0x2e>
 800b800:	230c      	movs	r3, #12
 800b802:	603b      	str	r3, [r7, #0]
 800b804:	f04f 30ff 	mov.w	r0, #4294967295
 800b808:	e0d1      	b.n	800b9ae <_svfiprintf_r+0x1d2>
 800b80a:	2340      	movs	r3, #64	; 0x40
 800b80c:	616b      	str	r3, [r5, #20]
 800b80e:	2300      	movs	r3, #0
 800b810:	9309      	str	r3, [sp, #36]	; 0x24
 800b812:	2320      	movs	r3, #32
 800b814:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b818:	f8cd 800c 	str.w	r8, [sp, #12]
 800b81c:	2330      	movs	r3, #48	; 0x30
 800b81e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800b9c8 <_svfiprintf_r+0x1ec>
 800b822:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b826:	f04f 0901 	mov.w	r9, #1
 800b82a:	4623      	mov	r3, r4
 800b82c:	469a      	mov	sl, r3
 800b82e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b832:	b10a      	cbz	r2, 800b838 <_svfiprintf_r+0x5c>
 800b834:	2a25      	cmp	r2, #37	; 0x25
 800b836:	d1f9      	bne.n	800b82c <_svfiprintf_r+0x50>
 800b838:	ebba 0b04 	subs.w	fp, sl, r4
 800b83c:	d00b      	beq.n	800b856 <_svfiprintf_r+0x7a>
 800b83e:	465b      	mov	r3, fp
 800b840:	4622      	mov	r2, r4
 800b842:	4629      	mov	r1, r5
 800b844:	4638      	mov	r0, r7
 800b846:	f7ff ff6d 	bl	800b724 <__ssputs_r>
 800b84a:	3001      	adds	r0, #1
 800b84c:	f000 80aa 	beq.w	800b9a4 <_svfiprintf_r+0x1c8>
 800b850:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b852:	445a      	add	r2, fp
 800b854:	9209      	str	r2, [sp, #36]	; 0x24
 800b856:	f89a 3000 	ldrb.w	r3, [sl]
 800b85a:	2b00      	cmp	r3, #0
 800b85c:	f000 80a2 	beq.w	800b9a4 <_svfiprintf_r+0x1c8>
 800b860:	2300      	movs	r3, #0
 800b862:	f04f 32ff 	mov.w	r2, #4294967295
 800b866:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b86a:	f10a 0a01 	add.w	sl, sl, #1
 800b86e:	9304      	str	r3, [sp, #16]
 800b870:	9307      	str	r3, [sp, #28]
 800b872:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b876:	931a      	str	r3, [sp, #104]	; 0x68
 800b878:	4654      	mov	r4, sl
 800b87a:	2205      	movs	r2, #5
 800b87c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b880:	4851      	ldr	r0, [pc, #324]	; (800b9c8 <_svfiprintf_r+0x1ec>)
 800b882:	f7f4 fca5 	bl	80001d0 <memchr>
 800b886:	9a04      	ldr	r2, [sp, #16]
 800b888:	b9d8      	cbnz	r0, 800b8c2 <_svfiprintf_r+0xe6>
 800b88a:	06d0      	lsls	r0, r2, #27
 800b88c:	bf44      	itt	mi
 800b88e:	2320      	movmi	r3, #32
 800b890:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b894:	0711      	lsls	r1, r2, #28
 800b896:	bf44      	itt	mi
 800b898:	232b      	movmi	r3, #43	; 0x2b
 800b89a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b89e:	f89a 3000 	ldrb.w	r3, [sl]
 800b8a2:	2b2a      	cmp	r3, #42	; 0x2a
 800b8a4:	d015      	beq.n	800b8d2 <_svfiprintf_r+0xf6>
 800b8a6:	9a07      	ldr	r2, [sp, #28]
 800b8a8:	4654      	mov	r4, sl
 800b8aa:	2000      	movs	r0, #0
 800b8ac:	f04f 0c0a 	mov.w	ip, #10
 800b8b0:	4621      	mov	r1, r4
 800b8b2:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b8b6:	3b30      	subs	r3, #48	; 0x30
 800b8b8:	2b09      	cmp	r3, #9
 800b8ba:	d94e      	bls.n	800b95a <_svfiprintf_r+0x17e>
 800b8bc:	b1b0      	cbz	r0, 800b8ec <_svfiprintf_r+0x110>
 800b8be:	9207      	str	r2, [sp, #28]
 800b8c0:	e014      	b.n	800b8ec <_svfiprintf_r+0x110>
 800b8c2:	eba0 0308 	sub.w	r3, r0, r8
 800b8c6:	fa09 f303 	lsl.w	r3, r9, r3
 800b8ca:	4313      	orrs	r3, r2
 800b8cc:	9304      	str	r3, [sp, #16]
 800b8ce:	46a2      	mov	sl, r4
 800b8d0:	e7d2      	b.n	800b878 <_svfiprintf_r+0x9c>
 800b8d2:	9b03      	ldr	r3, [sp, #12]
 800b8d4:	1d19      	adds	r1, r3, #4
 800b8d6:	681b      	ldr	r3, [r3, #0]
 800b8d8:	9103      	str	r1, [sp, #12]
 800b8da:	2b00      	cmp	r3, #0
 800b8dc:	bfbb      	ittet	lt
 800b8de:	425b      	neglt	r3, r3
 800b8e0:	f042 0202 	orrlt.w	r2, r2, #2
 800b8e4:	9307      	strge	r3, [sp, #28]
 800b8e6:	9307      	strlt	r3, [sp, #28]
 800b8e8:	bfb8      	it	lt
 800b8ea:	9204      	strlt	r2, [sp, #16]
 800b8ec:	7823      	ldrb	r3, [r4, #0]
 800b8ee:	2b2e      	cmp	r3, #46	; 0x2e
 800b8f0:	d10c      	bne.n	800b90c <_svfiprintf_r+0x130>
 800b8f2:	7863      	ldrb	r3, [r4, #1]
 800b8f4:	2b2a      	cmp	r3, #42	; 0x2a
 800b8f6:	d135      	bne.n	800b964 <_svfiprintf_r+0x188>
 800b8f8:	9b03      	ldr	r3, [sp, #12]
 800b8fa:	1d1a      	adds	r2, r3, #4
 800b8fc:	681b      	ldr	r3, [r3, #0]
 800b8fe:	9203      	str	r2, [sp, #12]
 800b900:	2b00      	cmp	r3, #0
 800b902:	bfb8      	it	lt
 800b904:	f04f 33ff 	movlt.w	r3, #4294967295
 800b908:	3402      	adds	r4, #2
 800b90a:	9305      	str	r3, [sp, #20]
 800b90c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800b9d8 <_svfiprintf_r+0x1fc>
 800b910:	7821      	ldrb	r1, [r4, #0]
 800b912:	2203      	movs	r2, #3
 800b914:	4650      	mov	r0, sl
 800b916:	f7f4 fc5b 	bl	80001d0 <memchr>
 800b91a:	b140      	cbz	r0, 800b92e <_svfiprintf_r+0x152>
 800b91c:	2340      	movs	r3, #64	; 0x40
 800b91e:	eba0 000a 	sub.w	r0, r0, sl
 800b922:	fa03 f000 	lsl.w	r0, r3, r0
 800b926:	9b04      	ldr	r3, [sp, #16]
 800b928:	4303      	orrs	r3, r0
 800b92a:	3401      	adds	r4, #1
 800b92c:	9304      	str	r3, [sp, #16]
 800b92e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b932:	4826      	ldr	r0, [pc, #152]	; (800b9cc <_svfiprintf_r+0x1f0>)
 800b934:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b938:	2206      	movs	r2, #6
 800b93a:	f7f4 fc49 	bl	80001d0 <memchr>
 800b93e:	2800      	cmp	r0, #0
 800b940:	d038      	beq.n	800b9b4 <_svfiprintf_r+0x1d8>
 800b942:	4b23      	ldr	r3, [pc, #140]	; (800b9d0 <_svfiprintf_r+0x1f4>)
 800b944:	bb1b      	cbnz	r3, 800b98e <_svfiprintf_r+0x1b2>
 800b946:	9b03      	ldr	r3, [sp, #12]
 800b948:	3307      	adds	r3, #7
 800b94a:	f023 0307 	bic.w	r3, r3, #7
 800b94e:	3308      	adds	r3, #8
 800b950:	9303      	str	r3, [sp, #12]
 800b952:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b954:	4433      	add	r3, r6
 800b956:	9309      	str	r3, [sp, #36]	; 0x24
 800b958:	e767      	b.n	800b82a <_svfiprintf_r+0x4e>
 800b95a:	fb0c 3202 	mla	r2, ip, r2, r3
 800b95e:	460c      	mov	r4, r1
 800b960:	2001      	movs	r0, #1
 800b962:	e7a5      	b.n	800b8b0 <_svfiprintf_r+0xd4>
 800b964:	2300      	movs	r3, #0
 800b966:	3401      	adds	r4, #1
 800b968:	9305      	str	r3, [sp, #20]
 800b96a:	4619      	mov	r1, r3
 800b96c:	f04f 0c0a 	mov.w	ip, #10
 800b970:	4620      	mov	r0, r4
 800b972:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b976:	3a30      	subs	r2, #48	; 0x30
 800b978:	2a09      	cmp	r2, #9
 800b97a:	d903      	bls.n	800b984 <_svfiprintf_r+0x1a8>
 800b97c:	2b00      	cmp	r3, #0
 800b97e:	d0c5      	beq.n	800b90c <_svfiprintf_r+0x130>
 800b980:	9105      	str	r1, [sp, #20]
 800b982:	e7c3      	b.n	800b90c <_svfiprintf_r+0x130>
 800b984:	fb0c 2101 	mla	r1, ip, r1, r2
 800b988:	4604      	mov	r4, r0
 800b98a:	2301      	movs	r3, #1
 800b98c:	e7f0      	b.n	800b970 <_svfiprintf_r+0x194>
 800b98e:	ab03      	add	r3, sp, #12
 800b990:	9300      	str	r3, [sp, #0]
 800b992:	462a      	mov	r2, r5
 800b994:	4b0f      	ldr	r3, [pc, #60]	; (800b9d4 <_svfiprintf_r+0x1f8>)
 800b996:	a904      	add	r1, sp, #16
 800b998:	4638      	mov	r0, r7
 800b99a:	f3af 8000 	nop.w
 800b99e:	1c42      	adds	r2, r0, #1
 800b9a0:	4606      	mov	r6, r0
 800b9a2:	d1d6      	bne.n	800b952 <_svfiprintf_r+0x176>
 800b9a4:	89ab      	ldrh	r3, [r5, #12]
 800b9a6:	065b      	lsls	r3, r3, #25
 800b9a8:	f53f af2c 	bmi.w	800b804 <_svfiprintf_r+0x28>
 800b9ac:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b9ae:	b01d      	add	sp, #116	; 0x74
 800b9b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b9b4:	ab03      	add	r3, sp, #12
 800b9b6:	9300      	str	r3, [sp, #0]
 800b9b8:	462a      	mov	r2, r5
 800b9ba:	4b06      	ldr	r3, [pc, #24]	; (800b9d4 <_svfiprintf_r+0x1f8>)
 800b9bc:	a904      	add	r1, sp, #16
 800b9be:	4638      	mov	r0, r7
 800b9c0:	f000 f9d4 	bl	800bd6c <_printf_i>
 800b9c4:	e7eb      	b.n	800b99e <_svfiprintf_r+0x1c2>
 800b9c6:	bf00      	nop
 800b9c8:	0800c4b4 	.word	0x0800c4b4
 800b9cc:	0800c4be 	.word	0x0800c4be
 800b9d0:	00000000 	.word	0x00000000
 800b9d4:	0800b725 	.word	0x0800b725
 800b9d8:	0800c4ba 	.word	0x0800c4ba

0800b9dc <__sfputc_r>:
 800b9dc:	6893      	ldr	r3, [r2, #8]
 800b9de:	3b01      	subs	r3, #1
 800b9e0:	2b00      	cmp	r3, #0
 800b9e2:	b410      	push	{r4}
 800b9e4:	6093      	str	r3, [r2, #8]
 800b9e6:	da08      	bge.n	800b9fa <__sfputc_r+0x1e>
 800b9e8:	6994      	ldr	r4, [r2, #24]
 800b9ea:	42a3      	cmp	r3, r4
 800b9ec:	db01      	blt.n	800b9f2 <__sfputc_r+0x16>
 800b9ee:	290a      	cmp	r1, #10
 800b9f0:	d103      	bne.n	800b9fa <__sfputc_r+0x1e>
 800b9f2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b9f6:	f7ff bc19 	b.w	800b22c <__swbuf_r>
 800b9fa:	6813      	ldr	r3, [r2, #0]
 800b9fc:	1c58      	adds	r0, r3, #1
 800b9fe:	6010      	str	r0, [r2, #0]
 800ba00:	7019      	strb	r1, [r3, #0]
 800ba02:	4608      	mov	r0, r1
 800ba04:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ba08:	4770      	bx	lr

0800ba0a <__sfputs_r>:
 800ba0a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ba0c:	4606      	mov	r6, r0
 800ba0e:	460f      	mov	r7, r1
 800ba10:	4614      	mov	r4, r2
 800ba12:	18d5      	adds	r5, r2, r3
 800ba14:	42ac      	cmp	r4, r5
 800ba16:	d101      	bne.n	800ba1c <__sfputs_r+0x12>
 800ba18:	2000      	movs	r0, #0
 800ba1a:	e007      	b.n	800ba2c <__sfputs_r+0x22>
 800ba1c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ba20:	463a      	mov	r2, r7
 800ba22:	4630      	mov	r0, r6
 800ba24:	f7ff ffda 	bl	800b9dc <__sfputc_r>
 800ba28:	1c43      	adds	r3, r0, #1
 800ba2a:	d1f3      	bne.n	800ba14 <__sfputs_r+0xa>
 800ba2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800ba30 <_vfiprintf_r>:
 800ba30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba34:	460d      	mov	r5, r1
 800ba36:	b09d      	sub	sp, #116	; 0x74
 800ba38:	4614      	mov	r4, r2
 800ba3a:	4698      	mov	r8, r3
 800ba3c:	4606      	mov	r6, r0
 800ba3e:	b118      	cbz	r0, 800ba48 <_vfiprintf_r+0x18>
 800ba40:	6983      	ldr	r3, [r0, #24]
 800ba42:	b90b      	cbnz	r3, 800ba48 <_vfiprintf_r+0x18>
 800ba44:	f7ff f850 	bl	800aae8 <__sinit>
 800ba48:	4b89      	ldr	r3, [pc, #548]	; (800bc70 <_vfiprintf_r+0x240>)
 800ba4a:	429d      	cmp	r5, r3
 800ba4c:	d11b      	bne.n	800ba86 <_vfiprintf_r+0x56>
 800ba4e:	6875      	ldr	r5, [r6, #4]
 800ba50:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ba52:	07d9      	lsls	r1, r3, #31
 800ba54:	d405      	bmi.n	800ba62 <_vfiprintf_r+0x32>
 800ba56:	89ab      	ldrh	r3, [r5, #12]
 800ba58:	059a      	lsls	r2, r3, #22
 800ba5a:	d402      	bmi.n	800ba62 <_vfiprintf_r+0x32>
 800ba5c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ba5e:	f7ff f906 	bl	800ac6e <__retarget_lock_acquire_recursive>
 800ba62:	89ab      	ldrh	r3, [r5, #12]
 800ba64:	071b      	lsls	r3, r3, #28
 800ba66:	d501      	bpl.n	800ba6c <_vfiprintf_r+0x3c>
 800ba68:	692b      	ldr	r3, [r5, #16]
 800ba6a:	b9eb      	cbnz	r3, 800baa8 <_vfiprintf_r+0x78>
 800ba6c:	4629      	mov	r1, r5
 800ba6e:	4630      	mov	r0, r6
 800ba70:	f7ff fc40 	bl	800b2f4 <__swsetup_r>
 800ba74:	b1c0      	cbz	r0, 800baa8 <_vfiprintf_r+0x78>
 800ba76:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ba78:	07dc      	lsls	r4, r3, #31
 800ba7a:	d50e      	bpl.n	800ba9a <_vfiprintf_r+0x6a>
 800ba7c:	f04f 30ff 	mov.w	r0, #4294967295
 800ba80:	b01d      	add	sp, #116	; 0x74
 800ba82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ba86:	4b7b      	ldr	r3, [pc, #492]	; (800bc74 <_vfiprintf_r+0x244>)
 800ba88:	429d      	cmp	r5, r3
 800ba8a:	d101      	bne.n	800ba90 <_vfiprintf_r+0x60>
 800ba8c:	68b5      	ldr	r5, [r6, #8]
 800ba8e:	e7df      	b.n	800ba50 <_vfiprintf_r+0x20>
 800ba90:	4b79      	ldr	r3, [pc, #484]	; (800bc78 <_vfiprintf_r+0x248>)
 800ba92:	429d      	cmp	r5, r3
 800ba94:	bf08      	it	eq
 800ba96:	68f5      	ldreq	r5, [r6, #12]
 800ba98:	e7da      	b.n	800ba50 <_vfiprintf_r+0x20>
 800ba9a:	89ab      	ldrh	r3, [r5, #12]
 800ba9c:	0598      	lsls	r0, r3, #22
 800ba9e:	d4ed      	bmi.n	800ba7c <_vfiprintf_r+0x4c>
 800baa0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800baa2:	f7ff f8e5 	bl	800ac70 <__retarget_lock_release_recursive>
 800baa6:	e7e9      	b.n	800ba7c <_vfiprintf_r+0x4c>
 800baa8:	2300      	movs	r3, #0
 800baaa:	9309      	str	r3, [sp, #36]	; 0x24
 800baac:	2320      	movs	r3, #32
 800baae:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800bab2:	f8cd 800c 	str.w	r8, [sp, #12]
 800bab6:	2330      	movs	r3, #48	; 0x30
 800bab8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800bc7c <_vfiprintf_r+0x24c>
 800babc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800bac0:	f04f 0901 	mov.w	r9, #1
 800bac4:	4623      	mov	r3, r4
 800bac6:	469a      	mov	sl, r3
 800bac8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bacc:	b10a      	cbz	r2, 800bad2 <_vfiprintf_r+0xa2>
 800bace:	2a25      	cmp	r2, #37	; 0x25
 800bad0:	d1f9      	bne.n	800bac6 <_vfiprintf_r+0x96>
 800bad2:	ebba 0b04 	subs.w	fp, sl, r4
 800bad6:	d00b      	beq.n	800baf0 <_vfiprintf_r+0xc0>
 800bad8:	465b      	mov	r3, fp
 800bada:	4622      	mov	r2, r4
 800badc:	4629      	mov	r1, r5
 800bade:	4630      	mov	r0, r6
 800bae0:	f7ff ff93 	bl	800ba0a <__sfputs_r>
 800bae4:	3001      	adds	r0, #1
 800bae6:	f000 80aa 	beq.w	800bc3e <_vfiprintf_r+0x20e>
 800baea:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800baec:	445a      	add	r2, fp
 800baee:	9209      	str	r2, [sp, #36]	; 0x24
 800baf0:	f89a 3000 	ldrb.w	r3, [sl]
 800baf4:	2b00      	cmp	r3, #0
 800baf6:	f000 80a2 	beq.w	800bc3e <_vfiprintf_r+0x20e>
 800bafa:	2300      	movs	r3, #0
 800bafc:	f04f 32ff 	mov.w	r2, #4294967295
 800bb00:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bb04:	f10a 0a01 	add.w	sl, sl, #1
 800bb08:	9304      	str	r3, [sp, #16]
 800bb0a:	9307      	str	r3, [sp, #28]
 800bb0c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800bb10:	931a      	str	r3, [sp, #104]	; 0x68
 800bb12:	4654      	mov	r4, sl
 800bb14:	2205      	movs	r2, #5
 800bb16:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bb1a:	4858      	ldr	r0, [pc, #352]	; (800bc7c <_vfiprintf_r+0x24c>)
 800bb1c:	f7f4 fb58 	bl	80001d0 <memchr>
 800bb20:	9a04      	ldr	r2, [sp, #16]
 800bb22:	b9d8      	cbnz	r0, 800bb5c <_vfiprintf_r+0x12c>
 800bb24:	06d1      	lsls	r1, r2, #27
 800bb26:	bf44      	itt	mi
 800bb28:	2320      	movmi	r3, #32
 800bb2a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bb2e:	0713      	lsls	r3, r2, #28
 800bb30:	bf44      	itt	mi
 800bb32:	232b      	movmi	r3, #43	; 0x2b
 800bb34:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bb38:	f89a 3000 	ldrb.w	r3, [sl]
 800bb3c:	2b2a      	cmp	r3, #42	; 0x2a
 800bb3e:	d015      	beq.n	800bb6c <_vfiprintf_r+0x13c>
 800bb40:	9a07      	ldr	r2, [sp, #28]
 800bb42:	4654      	mov	r4, sl
 800bb44:	2000      	movs	r0, #0
 800bb46:	f04f 0c0a 	mov.w	ip, #10
 800bb4a:	4621      	mov	r1, r4
 800bb4c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bb50:	3b30      	subs	r3, #48	; 0x30
 800bb52:	2b09      	cmp	r3, #9
 800bb54:	d94e      	bls.n	800bbf4 <_vfiprintf_r+0x1c4>
 800bb56:	b1b0      	cbz	r0, 800bb86 <_vfiprintf_r+0x156>
 800bb58:	9207      	str	r2, [sp, #28]
 800bb5a:	e014      	b.n	800bb86 <_vfiprintf_r+0x156>
 800bb5c:	eba0 0308 	sub.w	r3, r0, r8
 800bb60:	fa09 f303 	lsl.w	r3, r9, r3
 800bb64:	4313      	orrs	r3, r2
 800bb66:	9304      	str	r3, [sp, #16]
 800bb68:	46a2      	mov	sl, r4
 800bb6a:	e7d2      	b.n	800bb12 <_vfiprintf_r+0xe2>
 800bb6c:	9b03      	ldr	r3, [sp, #12]
 800bb6e:	1d19      	adds	r1, r3, #4
 800bb70:	681b      	ldr	r3, [r3, #0]
 800bb72:	9103      	str	r1, [sp, #12]
 800bb74:	2b00      	cmp	r3, #0
 800bb76:	bfbb      	ittet	lt
 800bb78:	425b      	neglt	r3, r3
 800bb7a:	f042 0202 	orrlt.w	r2, r2, #2
 800bb7e:	9307      	strge	r3, [sp, #28]
 800bb80:	9307      	strlt	r3, [sp, #28]
 800bb82:	bfb8      	it	lt
 800bb84:	9204      	strlt	r2, [sp, #16]
 800bb86:	7823      	ldrb	r3, [r4, #0]
 800bb88:	2b2e      	cmp	r3, #46	; 0x2e
 800bb8a:	d10c      	bne.n	800bba6 <_vfiprintf_r+0x176>
 800bb8c:	7863      	ldrb	r3, [r4, #1]
 800bb8e:	2b2a      	cmp	r3, #42	; 0x2a
 800bb90:	d135      	bne.n	800bbfe <_vfiprintf_r+0x1ce>
 800bb92:	9b03      	ldr	r3, [sp, #12]
 800bb94:	1d1a      	adds	r2, r3, #4
 800bb96:	681b      	ldr	r3, [r3, #0]
 800bb98:	9203      	str	r2, [sp, #12]
 800bb9a:	2b00      	cmp	r3, #0
 800bb9c:	bfb8      	it	lt
 800bb9e:	f04f 33ff 	movlt.w	r3, #4294967295
 800bba2:	3402      	adds	r4, #2
 800bba4:	9305      	str	r3, [sp, #20]
 800bba6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800bc8c <_vfiprintf_r+0x25c>
 800bbaa:	7821      	ldrb	r1, [r4, #0]
 800bbac:	2203      	movs	r2, #3
 800bbae:	4650      	mov	r0, sl
 800bbb0:	f7f4 fb0e 	bl	80001d0 <memchr>
 800bbb4:	b140      	cbz	r0, 800bbc8 <_vfiprintf_r+0x198>
 800bbb6:	2340      	movs	r3, #64	; 0x40
 800bbb8:	eba0 000a 	sub.w	r0, r0, sl
 800bbbc:	fa03 f000 	lsl.w	r0, r3, r0
 800bbc0:	9b04      	ldr	r3, [sp, #16]
 800bbc2:	4303      	orrs	r3, r0
 800bbc4:	3401      	adds	r4, #1
 800bbc6:	9304      	str	r3, [sp, #16]
 800bbc8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bbcc:	482c      	ldr	r0, [pc, #176]	; (800bc80 <_vfiprintf_r+0x250>)
 800bbce:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800bbd2:	2206      	movs	r2, #6
 800bbd4:	f7f4 fafc 	bl	80001d0 <memchr>
 800bbd8:	2800      	cmp	r0, #0
 800bbda:	d03f      	beq.n	800bc5c <_vfiprintf_r+0x22c>
 800bbdc:	4b29      	ldr	r3, [pc, #164]	; (800bc84 <_vfiprintf_r+0x254>)
 800bbde:	bb1b      	cbnz	r3, 800bc28 <_vfiprintf_r+0x1f8>
 800bbe0:	9b03      	ldr	r3, [sp, #12]
 800bbe2:	3307      	adds	r3, #7
 800bbe4:	f023 0307 	bic.w	r3, r3, #7
 800bbe8:	3308      	adds	r3, #8
 800bbea:	9303      	str	r3, [sp, #12]
 800bbec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bbee:	443b      	add	r3, r7
 800bbf0:	9309      	str	r3, [sp, #36]	; 0x24
 800bbf2:	e767      	b.n	800bac4 <_vfiprintf_r+0x94>
 800bbf4:	fb0c 3202 	mla	r2, ip, r2, r3
 800bbf8:	460c      	mov	r4, r1
 800bbfa:	2001      	movs	r0, #1
 800bbfc:	e7a5      	b.n	800bb4a <_vfiprintf_r+0x11a>
 800bbfe:	2300      	movs	r3, #0
 800bc00:	3401      	adds	r4, #1
 800bc02:	9305      	str	r3, [sp, #20]
 800bc04:	4619      	mov	r1, r3
 800bc06:	f04f 0c0a 	mov.w	ip, #10
 800bc0a:	4620      	mov	r0, r4
 800bc0c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bc10:	3a30      	subs	r2, #48	; 0x30
 800bc12:	2a09      	cmp	r2, #9
 800bc14:	d903      	bls.n	800bc1e <_vfiprintf_r+0x1ee>
 800bc16:	2b00      	cmp	r3, #0
 800bc18:	d0c5      	beq.n	800bba6 <_vfiprintf_r+0x176>
 800bc1a:	9105      	str	r1, [sp, #20]
 800bc1c:	e7c3      	b.n	800bba6 <_vfiprintf_r+0x176>
 800bc1e:	fb0c 2101 	mla	r1, ip, r1, r2
 800bc22:	4604      	mov	r4, r0
 800bc24:	2301      	movs	r3, #1
 800bc26:	e7f0      	b.n	800bc0a <_vfiprintf_r+0x1da>
 800bc28:	ab03      	add	r3, sp, #12
 800bc2a:	9300      	str	r3, [sp, #0]
 800bc2c:	462a      	mov	r2, r5
 800bc2e:	4b16      	ldr	r3, [pc, #88]	; (800bc88 <_vfiprintf_r+0x258>)
 800bc30:	a904      	add	r1, sp, #16
 800bc32:	4630      	mov	r0, r6
 800bc34:	f3af 8000 	nop.w
 800bc38:	4607      	mov	r7, r0
 800bc3a:	1c78      	adds	r0, r7, #1
 800bc3c:	d1d6      	bne.n	800bbec <_vfiprintf_r+0x1bc>
 800bc3e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bc40:	07d9      	lsls	r1, r3, #31
 800bc42:	d405      	bmi.n	800bc50 <_vfiprintf_r+0x220>
 800bc44:	89ab      	ldrh	r3, [r5, #12]
 800bc46:	059a      	lsls	r2, r3, #22
 800bc48:	d402      	bmi.n	800bc50 <_vfiprintf_r+0x220>
 800bc4a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bc4c:	f7ff f810 	bl	800ac70 <__retarget_lock_release_recursive>
 800bc50:	89ab      	ldrh	r3, [r5, #12]
 800bc52:	065b      	lsls	r3, r3, #25
 800bc54:	f53f af12 	bmi.w	800ba7c <_vfiprintf_r+0x4c>
 800bc58:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bc5a:	e711      	b.n	800ba80 <_vfiprintf_r+0x50>
 800bc5c:	ab03      	add	r3, sp, #12
 800bc5e:	9300      	str	r3, [sp, #0]
 800bc60:	462a      	mov	r2, r5
 800bc62:	4b09      	ldr	r3, [pc, #36]	; (800bc88 <_vfiprintf_r+0x258>)
 800bc64:	a904      	add	r1, sp, #16
 800bc66:	4630      	mov	r0, r6
 800bc68:	f000 f880 	bl	800bd6c <_printf_i>
 800bc6c:	e7e4      	b.n	800bc38 <_vfiprintf_r+0x208>
 800bc6e:	bf00      	nop
 800bc70:	0800c470 	.word	0x0800c470
 800bc74:	0800c490 	.word	0x0800c490
 800bc78:	0800c450 	.word	0x0800c450
 800bc7c:	0800c4b4 	.word	0x0800c4b4
 800bc80:	0800c4be 	.word	0x0800c4be
 800bc84:	00000000 	.word	0x00000000
 800bc88:	0800ba0b 	.word	0x0800ba0b
 800bc8c:	0800c4ba 	.word	0x0800c4ba

0800bc90 <_printf_common>:
 800bc90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bc94:	4616      	mov	r6, r2
 800bc96:	4699      	mov	r9, r3
 800bc98:	688a      	ldr	r2, [r1, #8]
 800bc9a:	690b      	ldr	r3, [r1, #16]
 800bc9c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800bca0:	4293      	cmp	r3, r2
 800bca2:	bfb8      	it	lt
 800bca4:	4613      	movlt	r3, r2
 800bca6:	6033      	str	r3, [r6, #0]
 800bca8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800bcac:	4607      	mov	r7, r0
 800bcae:	460c      	mov	r4, r1
 800bcb0:	b10a      	cbz	r2, 800bcb6 <_printf_common+0x26>
 800bcb2:	3301      	adds	r3, #1
 800bcb4:	6033      	str	r3, [r6, #0]
 800bcb6:	6823      	ldr	r3, [r4, #0]
 800bcb8:	0699      	lsls	r1, r3, #26
 800bcba:	bf42      	ittt	mi
 800bcbc:	6833      	ldrmi	r3, [r6, #0]
 800bcbe:	3302      	addmi	r3, #2
 800bcc0:	6033      	strmi	r3, [r6, #0]
 800bcc2:	6825      	ldr	r5, [r4, #0]
 800bcc4:	f015 0506 	ands.w	r5, r5, #6
 800bcc8:	d106      	bne.n	800bcd8 <_printf_common+0x48>
 800bcca:	f104 0a19 	add.w	sl, r4, #25
 800bcce:	68e3      	ldr	r3, [r4, #12]
 800bcd0:	6832      	ldr	r2, [r6, #0]
 800bcd2:	1a9b      	subs	r3, r3, r2
 800bcd4:	42ab      	cmp	r3, r5
 800bcd6:	dc26      	bgt.n	800bd26 <_printf_common+0x96>
 800bcd8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800bcdc:	1e13      	subs	r3, r2, #0
 800bcde:	6822      	ldr	r2, [r4, #0]
 800bce0:	bf18      	it	ne
 800bce2:	2301      	movne	r3, #1
 800bce4:	0692      	lsls	r2, r2, #26
 800bce6:	d42b      	bmi.n	800bd40 <_printf_common+0xb0>
 800bce8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800bcec:	4649      	mov	r1, r9
 800bcee:	4638      	mov	r0, r7
 800bcf0:	47c0      	blx	r8
 800bcf2:	3001      	adds	r0, #1
 800bcf4:	d01e      	beq.n	800bd34 <_printf_common+0xa4>
 800bcf6:	6823      	ldr	r3, [r4, #0]
 800bcf8:	68e5      	ldr	r5, [r4, #12]
 800bcfa:	6832      	ldr	r2, [r6, #0]
 800bcfc:	f003 0306 	and.w	r3, r3, #6
 800bd00:	2b04      	cmp	r3, #4
 800bd02:	bf08      	it	eq
 800bd04:	1aad      	subeq	r5, r5, r2
 800bd06:	68a3      	ldr	r3, [r4, #8]
 800bd08:	6922      	ldr	r2, [r4, #16]
 800bd0a:	bf0c      	ite	eq
 800bd0c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800bd10:	2500      	movne	r5, #0
 800bd12:	4293      	cmp	r3, r2
 800bd14:	bfc4      	itt	gt
 800bd16:	1a9b      	subgt	r3, r3, r2
 800bd18:	18ed      	addgt	r5, r5, r3
 800bd1a:	2600      	movs	r6, #0
 800bd1c:	341a      	adds	r4, #26
 800bd1e:	42b5      	cmp	r5, r6
 800bd20:	d11a      	bne.n	800bd58 <_printf_common+0xc8>
 800bd22:	2000      	movs	r0, #0
 800bd24:	e008      	b.n	800bd38 <_printf_common+0xa8>
 800bd26:	2301      	movs	r3, #1
 800bd28:	4652      	mov	r2, sl
 800bd2a:	4649      	mov	r1, r9
 800bd2c:	4638      	mov	r0, r7
 800bd2e:	47c0      	blx	r8
 800bd30:	3001      	adds	r0, #1
 800bd32:	d103      	bne.n	800bd3c <_printf_common+0xac>
 800bd34:	f04f 30ff 	mov.w	r0, #4294967295
 800bd38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bd3c:	3501      	adds	r5, #1
 800bd3e:	e7c6      	b.n	800bcce <_printf_common+0x3e>
 800bd40:	18e1      	adds	r1, r4, r3
 800bd42:	1c5a      	adds	r2, r3, #1
 800bd44:	2030      	movs	r0, #48	; 0x30
 800bd46:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800bd4a:	4422      	add	r2, r4
 800bd4c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800bd50:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800bd54:	3302      	adds	r3, #2
 800bd56:	e7c7      	b.n	800bce8 <_printf_common+0x58>
 800bd58:	2301      	movs	r3, #1
 800bd5a:	4622      	mov	r2, r4
 800bd5c:	4649      	mov	r1, r9
 800bd5e:	4638      	mov	r0, r7
 800bd60:	47c0      	blx	r8
 800bd62:	3001      	adds	r0, #1
 800bd64:	d0e6      	beq.n	800bd34 <_printf_common+0xa4>
 800bd66:	3601      	adds	r6, #1
 800bd68:	e7d9      	b.n	800bd1e <_printf_common+0x8e>
	...

0800bd6c <_printf_i>:
 800bd6c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800bd70:	7e0f      	ldrb	r7, [r1, #24]
 800bd72:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800bd74:	2f78      	cmp	r7, #120	; 0x78
 800bd76:	4691      	mov	r9, r2
 800bd78:	4680      	mov	r8, r0
 800bd7a:	460c      	mov	r4, r1
 800bd7c:	469a      	mov	sl, r3
 800bd7e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800bd82:	d807      	bhi.n	800bd94 <_printf_i+0x28>
 800bd84:	2f62      	cmp	r7, #98	; 0x62
 800bd86:	d80a      	bhi.n	800bd9e <_printf_i+0x32>
 800bd88:	2f00      	cmp	r7, #0
 800bd8a:	f000 80d8 	beq.w	800bf3e <_printf_i+0x1d2>
 800bd8e:	2f58      	cmp	r7, #88	; 0x58
 800bd90:	f000 80a3 	beq.w	800beda <_printf_i+0x16e>
 800bd94:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800bd98:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800bd9c:	e03a      	b.n	800be14 <_printf_i+0xa8>
 800bd9e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800bda2:	2b15      	cmp	r3, #21
 800bda4:	d8f6      	bhi.n	800bd94 <_printf_i+0x28>
 800bda6:	a101      	add	r1, pc, #4	; (adr r1, 800bdac <_printf_i+0x40>)
 800bda8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800bdac:	0800be05 	.word	0x0800be05
 800bdb0:	0800be19 	.word	0x0800be19
 800bdb4:	0800bd95 	.word	0x0800bd95
 800bdb8:	0800bd95 	.word	0x0800bd95
 800bdbc:	0800bd95 	.word	0x0800bd95
 800bdc0:	0800bd95 	.word	0x0800bd95
 800bdc4:	0800be19 	.word	0x0800be19
 800bdc8:	0800bd95 	.word	0x0800bd95
 800bdcc:	0800bd95 	.word	0x0800bd95
 800bdd0:	0800bd95 	.word	0x0800bd95
 800bdd4:	0800bd95 	.word	0x0800bd95
 800bdd8:	0800bf25 	.word	0x0800bf25
 800bddc:	0800be49 	.word	0x0800be49
 800bde0:	0800bf07 	.word	0x0800bf07
 800bde4:	0800bd95 	.word	0x0800bd95
 800bde8:	0800bd95 	.word	0x0800bd95
 800bdec:	0800bf47 	.word	0x0800bf47
 800bdf0:	0800bd95 	.word	0x0800bd95
 800bdf4:	0800be49 	.word	0x0800be49
 800bdf8:	0800bd95 	.word	0x0800bd95
 800bdfc:	0800bd95 	.word	0x0800bd95
 800be00:	0800bf0f 	.word	0x0800bf0f
 800be04:	682b      	ldr	r3, [r5, #0]
 800be06:	1d1a      	adds	r2, r3, #4
 800be08:	681b      	ldr	r3, [r3, #0]
 800be0a:	602a      	str	r2, [r5, #0]
 800be0c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800be10:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800be14:	2301      	movs	r3, #1
 800be16:	e0a3      	b.n	800bf60 <_printf_i+0x1f4>
 800be18:	6820      	ldr	r0, [r4, #0]
 800be1a:	6829      	ldr	r1, [r5, #0]
 800be1c:	0606      	lsls	r6, r0, #24
 800be1e:	f101 0304 	add.w	r3, r1, #4
 800be22:	d50a      	bpl.n	800be3a <_printf_i+0xce>
 800be24:	680e      	ldr	r6, [r1, #0]
 800be26:	602b      	str	r3, [r5, #0]
 800be28:	2e00      	cmp	r6, #0
 800be2a:	da03      	bge.n	800be34 <_printf_i+0xc8>
 800be2c:	232d      	movs	r3, #45	; 0x2d
 800be2e:	4276      	negs	r6, r6
 800be30:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800be34:	485e      	ldr	r0, [pc, #376]	; (800bfb0 <_printf_i+0x244>)
 800be36:	230a      	movs	r3, #10
 800be38:	e019      	b.n	800be6e <_printf_i+0x102>
 800be3a:	680e      	ldr	r6, [r1, #0]
 800be3c:	602b      	str	r3, [r5, #0]
 800be3e:	f010 0f40 	tst.w	r0, #64	; 0x40
 800be42:	bf18      	it	ne
 800be44:	b236      	sxthne	r6, r6
 800be46:	e7ef      	b.n	800be28 <_printf_i+0xbc>
 800be48:	682b      	ldr	r3, [r5, #0]
 800be4a:	6820      	ldr	r0, [r4, #0]
 800be4c:	1d19      	adds	r1, r3, #4
 800be4e:	6029      	str	r1, [r5, #0]
 800be50:	0601      	lsls	r1, r0, #24
 800be52:	d501      	bpl.n	800be58 <_printf_i+0xec>
 800be54:	681e      	ldr	r6, [r3, #0]
 800be56:	e002      	b.n	800be5e <_printf_i+0xf2>
 800be58:	0646      	lsls	r6, r0, #25
 800be5a:	d5fb      	bpl.n	800be54 <_printf_i+0xe8>
 800be5c:	881e      	ldrh	r6, [r3, #0]
 800be5e:	4854      	ldr	r0, [pc, #336]	; (800bfb0 <_printf_i+0x244>)
 800be60:	2f6f      	cmp	r7, #111	; 0x6f
 800be62:	bf0c      	ite	eq
 800be64:	2308      	moveq	r3, #8
 800be66:	230a      	movne	r3, #10
 800be68:	2100      	movs	r1, #0
 800be6a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800be6e:	6865      	ldr	r5, [r4, #4]
 800be70:	60a5      	str	r5, [r4, #8]
 800be72:	2d00      	cmp	r5, #0
 800be74:	bfa2      	ittt	ge
 800be76:	6821      	ldrge	r1, [r4, #0]
 800be78:	f021 0104 	bicge.w	r1, r1, #4
 800be7c:	6021      	strge	r1, [r4, #0]
 800be7e:	b90e      	cbnz	r6, 800be84 <_printf_i+0x118>
 800be80:	2d00      	cmp	r5, #0
 800be82:	d04d      	beq.n	800bf20 <_printf_i+0x1b4>
 800be84:	4615      	mov	r5, r2
 800be86:	fbb6 f1f3 	udiv	r1, r6, r3
 800be8a:	fb03 6711 	mls	r7, r3, r1, r6
 800be8e:	5dc7      	ldrb	r7, [r0, r7]
 800be90:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800be94:	4637      	mov	r7, r6
 800be96:	42bb      	cmp	r3, r7
 800be98:	460e      	mov	r6, r1
 800be9a:	d9f4      	bls.n	800be86 <_printf_i+0x11a>
 800be9c:	2b08      	cmp	r3, #8
 800be9e:	d10b      	bne.n	800beb8 <_printf_i+0x14c>
 800bea0:	6823      	ldr	r3, [r4, #0]
 800bea2:	07de      	lsls	r6, r3, #31
 800bea4:	d508      	bpl.n	800beb8 <_printf_i+0x14c>
 800bea6:	6923      	ldr	r3, [r4, #16]
 800bea8:	6861      	ldr	r1, [r4, #4]
 800beaa:	4299      	cmp	r1, r3
 800beac:	bfde      	ittt	le
 800beae:	2330      	movle	r3, #48	; 0x30
 800beb0:	f805 3c01 	strble.w	r3, [r5, #-1]
 800beb4:	f105 35ff 	addle.w	r5, r5, #4294967295
 800beb8:	1b52      	subs	r2, r2, r5
 800beba:	6122      	str	r2, [r4, #16]
 800bebc:	f8cd a000 	str.w	sl, [sp]
 800bec0:	464b      	mov	r3, r9
 800bec2:	aa03      	add	r2, sp, #12
 800bec4:	4621      	mov	r1, r4
 800bec6:	4640      	mov	r0, r8
 800bec8:	f7ff fee2 	bl	800bc90 <_printf_common>
 800becc:	3001      	adds	r0, #1
 800bece:	d14c      	bne.n	800bf6a <_printf_i+0x1fe>
 800bed0:	f04f 30ff 	mov.w	r0, #4294967295
 800bed4:	b004      	add	sp, #16
 800bed6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800beda:	4835      	ldr	r0, [pc, #212]	; (800bfb0 <_printf_i+0x244>)
 800bedc:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800bee0:	6829      	ldr	r1, [r5, #0]
 800bee2:	6823      	ldr	r3, [r4, #0]
 800bee4:	f851 6b04 	ldr.w	r6, [r1], #4
 800bee8:	6029      	str	r1, [r5, #0]
 800beea:	061d      	lsls	r5, r3, #24
 800beec:	d514      	bpl.n	800bf18 <_printf_i+0x1ac>
 800beee:	07df      	lsls	r7, r3, #31
 800bef0:	bf44      	itt	mi
 800bef2:	f043 0320 	orrmi.w	r3, r3, #32
 800bef6:	6023      	strmi	r3, [r4, #0]
 800bef8:	b91e      	cbnz	r6, 800bf02 <_printf_i+0x196>
 800befa:	6823      	ldr	r3, [r4, #0]
 800befc:	f023 0320 	bic.w	r3, r3, #32
 800bf00:	6023      	str	r3, [r4, #0]
 800bf02:	2310      	movs	r3, #16
 800bf04:	e7b0      	b.n	800be68 <_printf_i+0xfc>
 800bf06:	6823      	ldr	r3, [r4, #0]
 800bf08:	f043 0320 	orr.w	r3, r3, #32
 800bf0c:	6023      	str	r3, [r4, #0]
 800bf0e:	2378      	movs	r3, #120	; 0x78
 800bf10:	4828      	ldr	r0, [pc, #160]	; (800bfb4 <_printf_i+0x248>)
 800bf12:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800bf16:	e7e3      	b.n	800bee0 <_printf_i+0x174>
 800bf18:	0659      	lsls	r1, r3, #25
 800bf1a:	bf48      	it	mi
 800bf1c:	b2b6      	uxthmi	r6, r6
 800bf1e:	e7e6      	b.n	800beee <_printf_i+0x182>
 800bf20:	4615      	mov	r5, r2
 800bf22:	e7bb      	b.n	800be9c <_printf_i+0x130>
 800bf24:	682b      	ldr	r3, [r5, #0]
 800bf26:	6826      	ldr	r6, [r4, #0]
 800bf28:	6961      	ldr	r1, [r4, #20]
 800bf2a:	1d18      	adds	r0, r3, #4
 800bf2c:	6028      	str	r0, [r5, #0]
 800bf2e:	0635      	lsls	r5, r6, #24
 800bf30:	681b      	ldr	r3, [r3, #0]
 800bf32:	d501      	bpl.n	800bf38 <_printf_i+0x1cc>
 800bf34:	6019      	str	r1, [r3, #0]
 800bf36:	e002      	b.n	800bf3e <_printf_i+0x1d2>
 800bf38:	0670      	lsls	r0, r6, #25
 800bf3a:	d5fb      	bpl.n	800bf34 <_printf_i+0x1c8>
 800bf3c:	8019      	strh	r1, [r3, #0]
 800bf3e:	2300      	movs	r3, #0
 800bf40:	6123      	str	r3, [r4, #16]
 800bf42:	4615      	mov	r5, r2
 800bf44:	e7ba      	b.n	800bebc <_printf_i+0x150>
 800bf46:	682b      	ldr	r3, [r5, #0]
 800bf48:	1d1a      	adds	r2, r3, #4
 800bf4a:	602a      	str	r2, [r5, #0]
 800bf4c:	681d      	ldr	r5, [r3, #0]
 800bf4e:	6862      	ldr	r2, [r4, #4]
 800bf50:	2100      	movs	r1, #0
 800bf52:	4628      	mov	r0, r5
 800bf54:	f7f4 f93c 	bl	80001d0 <memchr>
 800bf58:	b108      	cbz	r0, 800bf5e <_printf_i+0x1f2>
 800bf5a:	1b40      	subs	r0, r0, r5
 800bf5c:	6060      	str	r0, [r4, #4]
 800bf5e:	6863      	ldr	r3, [r4, #4]
 800bf60:	6123      	str	r3, [r4, #16]
 800bf62:	2300      	movs	r3, #0
 800bf64:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bf68:	e7a8      	b.n	800bebc <_printf_i+0x150>
 800bf6a:	6923      	ldr	r3, [r4, #16]
 800bf6c:	462a      	mov	r2, r5
 800bf6e:	4649      	mov	r1, r9
 800bf70:	4640      	mov	r0, r8
 800bf72:	47d0      	blx	sl
 800bf74:	3001      	adds	r0, #1
 800bf76:	d0ab      	beq.n	800bed0 <_printf_i+0x164>
 800bf78:	6823      	ldr	r3, [r4, #0]
 800bf7a:	079b      	lsls	r3, r3, #30
 800bf7c:	d413      	bmi.n	800bfa6 <_printf_i+0x23a>
 800bf7e:	68e0      	ldr	r0, [r4, #12]
 800bf80:	9b03      	ldr	r3, [sp, #12]
 800bf82:	4298      	cmp	r0, r3
 800bf84:	bfb8      	it	lt
 800bf86:	4618      	movlt	r0, r3
 800bf88:	e7a4      	b.n	800bed4 <_printf_i+0x168>
 800bf8a:	2301      	movs	r3, #1
 800bf8c:	4632      	mov	r2, r6
 800bf8e:	4649      	mov	r1, r9
 800bf90:	4640      	mov	r0, r8
 800bf92:	47d0      	blx	sl
 800bf94:	3001      	adds	r0, #1
 800bf96:	d09b      	beq.n	800bed0 <_printf_i+0x164>
 800bf98:	3501      	adds	r5, #1
 800bf9a:	68e3      	ldr	r3, [r4, #12]
 800bf9c:	9903      	ldr	r1, [sp, #12]
 800bf9e:	1a5b      	subs	r3, r3, r1
 800bfa0:	42ab      	cmp	r3, r5
 800bfa2:	dcf2      	bgt.n	800bf8a <_printf_i+0x21e>
 800bfa4:	e7eb      	b.n	800bf7e <_printf_i+0x212>
 800bfa6:	2500      	movs	r5, #0
 800bfa8:	f104 0619 	add.w	r6, r4, #25
 800bfac:	e7f5      	b.n	800bf9a <_printf_i+0x22e>
 800bfae:	bf00      	nop
 800bfb0:	0800c4c5 	.word	0x0800c4c5
 800bfb4:	0800c4d6 	.word	0x0800c4d6

0800bfb8 <_read_r>:
 800bfb8:	b538      	push	{r3, r4, r5, lr}
 800bfba:	4d07      	ldr	r5, [pc, #28]	; (800bfd8 <_read_r+0x20>)
 800bfbc:	4604      	mov	r4, r0
 800bfbe:	4608      	mov	r0, r1
 800bfc0:	4611      	mov	r1, r2
 800bfc2:	2200      	movs	r2, #0
 800bfc4:	602a      	str	r2, [r5, #0]
 800bfc6:	461a      	mov	r2, r3
 800bfc8:	f7f6 fdb6 	bl	8002b38 <_read>
 800bfcc:	1c43      	adds	r3, r0, #1
 800bfce:	d102      	bne.n	800bfd6 <_read_r+0x1e>
 800bfd0:	682b      	ldr	r3, [r5, #0]
 800bfd2:	b103      	cbz	r3, 800bfd6 <_read_r+0x1e>
 800bfd4:	6023      	str	r3, [r4, #0]
 800bfd6:	bd38      	pop	{r3, r4, r5, pc}
 800bfd8:	20005e7c 	.word	0x20005e7c

0800bfdc <_fstat_r>:
 800bfdc:	b538      	push	{r3, r4, r5, lr}
 800bfde:	4d07      	ldr	r5, [pc, #28]	; (800bffc <_fstat_r+0x20>)
 800bfe0:	2300      	movs	r3, #0
 800bfe2:	4604      	mov	r4, r0
 800bfe4:	4608      	mov	r0, r1
 800bfe6:	4611      	mov	r1, r2
 800bfe8:	602b      	str	r3, [r5, #0]
 800bfea:	f7f6 fdcd 	bl	8002b88 <_fstat>
 800bfee:	1c43      	adds	r3, r0, #1
 800bff0:	d102      	bne.n	800bff8 <_fstat_r+0x1c>
 800bff2:	682b      	ldr	r3, [r5, #0]
 800bff4:	b103      	cbz	r3, 800bff8 <_fstat_r+0x1c>
 800bff6:	6023      	str	r3, [r4, #0]
 800bff8:	bd38      	pop	{r3, r4, r5, pc}
 800bffa:	bf00      	nop
 800bffc:	20005e7c 	.word	0x20005e7c

0800c000 <_isatty_r>:
 800c000:	b538      	push	{r3, r4, r5, lr}
 800c002:	4d06      	ldr	r5, [pc, #24]	; (800c01c <_isatty_r+0x1c>)
 800c004:	2300      	movs	r3, #0
 800c006:	4604      	mov	r4, r0
 800c008:	4608      	mov	r0, r1
 800c00a:	602b      	str	r3, [r5, #0]
 800c00c:	f7f6 fd2a 	bl	8002a64 <_isatty>
 800c010:	1c43      	adds	r3, r0, #1
 800c012:	d102      	bne.n	800c01a <_isatty_r+0x1a>
 800c014:	682b      	ldr	r3, [r5, #0]
 800c016:	b103      	cbz	r3, 800c01a <_isatty_r+0x1a>
 800c018:	6023      	str	r3, [r4, #0]
 800c01a:	bd38      	pop	{r3, r4, r5, pc}
 800c01c:	20005e7c 	.word	0x20005e7c

0800c020 <memmove>:
 800c020:	4288      	cmp	r0, r1
 800c022:	b510      	push	{r4, lr}
 800c024:	eb01 0402 	add.w	r4, r1, r2
 800c028:	d902      	bls.n	800c030 <memmove+0x10>
 800c02a:	4284      	cmp	r4, r0
 800c02c:	4623      	mov	r3, r4
 800c02e:	d807      	bhi.n	800c040 <memmove+0x20>
 800c030:	1e43      	subs	r3, r0, #1
 800c032:	42a1      	cmp	r1, r4
 800c034:	d008      	beq.n	800c048 <memmove+0x28>
 800c036:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c03a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c03e:	e7f8      	b.n	800c032 <memmove+0x12>
 800c040:	4402      	add	r2, r0
 800c042:	4601      	mov	r1, r0
 800c044:	428a      	cmp	r2, r1
 800c046:	d100      	bne.n	800c04a <memmove+0x2a>
 800c048:	bd10      	pop	{r4, pc}
 800c04a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c04e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c052:	e7f7      	b.n	800c044 <memmove+0x24>

0800c054 <_realloc_r>:
 800c054:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c058:	4680      	mov	r8, r0
 800c05a:	4614      	mov	r4, r2
 800c05c:	460e      	mov	r6, r1
 800c05e:	b921      	cbnz	r1, 800c06a <_realloc_r+0x16>
 800c060:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c064:	4611      	mov	r1, r2
 800c066:	f7fe be3b 	b.w	800ace0 <_malloc_r>
 800c06a:	b92a      	cbnz	r2, 800c078 <_realloc_r+0x24>
 800c06c:	f7ff fb0e 	bl	800b68c <_free_r>
 800c070:	4625      	mov	r5, r4
 800c072:	4628      	mov	r0, r5
 800c074:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c078:	f000 f81b 	bl	800c0b2 <_malloc_usable_size_r>
 800c07c:	4284      	cmp	r4, r0
 800c07e:	4607      	mov	r7, r0
 800c080:	d802      	bhi.n	800c088 <_realloc_r+0x34>
 800c082:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800c086:	d812      	bhi.n	800c0ae <_realloc_r+0x5a>
 800c088:	4621      	mov	r1, r4
 800c08a:	4640      	mov	r0, r8
 800c08c:	f7fe fe28 	bl	800ace0 <_malloc_r>
 800c090:	4605      	mov	r5, r0
 800c092:	2800      	cmp	r0, #0
 800c094:	d0ed      	beq.n	800c072 <_realloc_r+0x1e>
 800c096:	42bc      	cmp	r4, r7
 800c098:	4622      	mov	r2, r4
 800c09a:	4631      	mov	r1, r6
 800c09c:	bf28      	it	cs
 800c09e:	463a      	movcs	r2, r7
 800c0a0:	f7fe fde7 	bl	800ac72 <memcpy>
 800c0a4:	4631      	mov	r1, r6
 800c0a6:	4640      	mov	r0, r8
 800c0a8:	f7ff faf0 	bl	800b68c <_free_r>
 800c0ac:	e7e1      	b.n	800c072 <_realloc_r+0x1e>
 800c0ae:	4635      	mov	r5, r6
 800c0b0:	e7df      	b.n	800c072 <_realloc_r+0x1e>

0800c0b2 <_malloc_usable_size_r>:
 800c0b2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c0b6:	1f18      	subs	r0, r3, #4
 800c0b8:	2b00      	cmp	r3, #0
 800c0ba:	bfbc      	itt	lt
 800c0bc:	580b      	ldrlt	r3, [r1, r0]
 800c0be:	18c0      	addlt	r0, r0, r3
 800c0c0:	4770      	bx	lr
	...

0800c0c4 <_init>:
 800c0c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c0c6:	bf00      	nop
 800c0c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c0ca:	bc08      	pop	{r3}
 800c0cc:	469e      	mov	lr, r3
 800c0ce:	4770      	bx	lr

0800c0d0 <_fini>:
 800c0d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c0d2:	bf00      	nop
 800c0d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c0d6:	bc08      	pop	{r3}
 800c0d8:	469e      	mov	lr, r3
 800c0da:	4770      	bx	lr
