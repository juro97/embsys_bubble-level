
nucleo-l432kc_9dof-imu-click.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009770  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002d4  08009900  08009900  00019900  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009bd4  08009bd4  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08009bd4  08009bd4  00019bd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009bdc  08009bdc  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009bdc  08009bdc  00019bdc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009be0  08009be0  00019be0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08009be4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003d38  20000074  08009c58  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20003dac  08009c58  00023dac  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00022009  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000044d9  00000000  00000000  000420ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001ae0  00000000  00000000  00046588  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001918  00000000  00000000  00048068  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000267eb  00000000  00000000  00049980  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00021d48  00000000  00000000  0007016b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d990a  00000000  00000000  00091eb3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0016b7bd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007ac0  00000000  00000000  0016b810  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080098e8 	.word	0x080098e8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	080098e8 	.word	0x080098e8

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	; 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	3c01      	subs	r4, #1
 80003ac:	bf28      	it	cs
 80003ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003b2:	d2e9      	bcs.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_dmul>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005f6:	bf1d      	ittte	ne
 80005f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005fc:	ea94 0f0c 	teqne	r4, ip
 8000600:	ea95 0f0c 	teqne	r5, ip
 8000604:	f000 f8de 	bleq	80007c4 <__aeabi_dmul+0x1dc>
 8000608:	442c      	add	r4, r5
 800060a:	ea81 0603 	eor.w	r6, r1, r3
 800060e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000612:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000616:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800061a:	bf18      	it	ne
 800061c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000624:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000628:	d038      	beq.n	800069c <__aeabi_dmul+0xb4>
 800062a:	fba0 ce02 	umull	ip, lr, r0, r2
 800062e:	f04f 0500 	mov.w	r5, #0
 8000632:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000636:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800063a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800063e:	f04f 0600 	mov.w	r6, #0
 8000642:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000646:	f09c 0f00 	teq	ip, #0
 800064a:	bf18      	it	ne
 800064c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000650:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000654:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000658:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800065c:	d204      	bcs.n	8000668 <__aeabi_dmul+0x80>
 800065e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000662:	416d      	adcs	r5, r5
 8000664:	eb46 0606 	adc.w	r6, r6, r6
 8000668:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800066c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000670:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000674:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000678:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800067c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000680:	bf88      	it	hi
 8000682:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000686:	d81e      	bhi.n	80006c6 <__aeabi_dmul+0xde>
 8000688:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800068c:	bf08      	it	eq
 800068e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000692:	f150 0000 	adcs.w	r0, r0, #0
 8000696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006a0:	ea46 0101 	orr.w	r1, r6, r1
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	ea81 0103 	eor.w	r1, r1, r3
 80006ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b0:	bfc2      	ittt	gt
 80006b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	popgt	{r4, r5, r6, pc}
 80006bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006c0:	f04f 0e00 	mov.w	lr, #0
 80006c4:	3c01      	subs	r4, #1
 80006c6:	f300 80ab 	bgt.w	8000820 <__aeabi_dmul+0x238>
 80006ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ce:	bfde      	ittt	le
 80006d0:	2000      	movle	r0, #0
 80006d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006d6:	bd70      	pople	{r4, r5, r6, pc}
 80006d8:	f1c4 0400 	rsb	r4, r4, #0
 80006dc:	3c20      	subs	r4, #32
 80006de:	da35      	bge.n	800074c <__aeabi_dmul+0x164>
 80006e0:	340c      	adds	r4, #12
 80006e2:	dc1b      	bgt.n	800071c <__aeabi_dmul+0x134>
 80006e4:	f104 0414 	add.w	r4, r4, #20
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f305 	lsl.w	r3, r0, r5
 80006f0:	fa20 f004 	lsr.w	r0, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000700:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000708:	fa21 f604 	lsr.w	r6, r1, r4
 800070c:	eb42 0106 	adc.w	r1, r2, r6
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 040c 	rsb	r4, r4, #12
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f304 	lsl.w	r3, r0, r4
 8000728:	fa20 f005 	lsr.w	r0, r0, r5
 800072c:	fa01 f204 	lsl.w	r2, r1, r4
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800073c:	f141 0100 	adc.w	r1, r1, #0
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f205 	lsl.w	r2, r0, r5
 8000754:	ea4e 0e02 	orr.w	lr, lr, r2
 8000758:	fa20 f304 	lsr.w	r3, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea43 0302 	orr.w	r3, r3, r2
 8000764:	fa21 f004 	lsr.w	r0, r1, r4
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800076c:	fa21 f204 	lsr.w	r2, r1, r4
 8000770:	ea20 0002 	bic.w	r0, r0, r2
 8000774:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f094 0f00 	teq	r4, #0
 8000788:	d10f      	bne.n	80007aa <__aeabi_dmul+0x1c2>
 800078a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800078e:	0040      	lsls	r0, r0, #1
 8000790:	eb41 0101 	adc.w	r1, r1, r1
 8000794:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000798:	bf08      	it	eq
 800079a:	3c01      	subeq	r4, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1a6>
 800079e:	ea41 0106 	orr.w	r1, r1, r6
 80007a2:	f095 0f00 	teq	r5, #0
 80007a6:	bf18      	it	ne
 80007a8:	4770      	bxne	lr
 80007aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ae:	0052      	lsls	r2, r2, #1
 80007b0:	eb43 0303 	adc.w	r3, r3, r3
 80007b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3d01      	subeq	r5, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1c6>
 80007be:	ea43 0306 	orr.w	r3, r3, r6
 80007c2:	4770      	bx	lr
 80007c4:	ea94 0f0c 	teq	r4, ip
 80007c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007cc:	bf18      	it	ne
 80007ce:	ea95 0f0c 	teqne	r5, ip
 80007d2:	d00c      	beq.n	80007ee <__aeabi_dmul+0x206>
 80007d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d8:	bf18      	it	ne
 80007da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007de:	d1d1      	bne.n	8000784 <__aeabi_dmul+0x19c>
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e8:	f04f 0000 	mov.w	r0, #0
 80007ec:	bd70      	pop	{r4, r5, r6, pc}
 80007ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f2:	bf06      	itte	eq
 80007f4:	4610      	moveq	r0, r2
 80007f6:	4619      	moveq	r1, r3
 80007f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fc:	d019      	beq.n	8000832 <__aeabi_dmul+0x24a>
 80007fe:	ea94 0f0c 	teq	r4, ip
 8000802:	d102      	bne.n	800080a <__aeabi_dmul+0x222>
 8000804:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000808:	d113      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800080a:	ea95 0f0c 	teq	r5, ip
 800080e:	d105      	bne.n	800081c <__aeabi_dmul+0x234>
 8000810:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000814:	bf1c      	itt	ne
 8000816:	4610      	movne	r0, r2
 8000818:	4619      	movne	r1, r3
 800081a:	d10a      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800081c:	ea81 0103 	eor.w	r1, r1, r3
 8000820:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000824:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000828:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000836:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800083a:	bd70      	pop	{r4, r5, r6, pc}

0800083c <__aeabi_ddiv>:
 800083c:	b570      	push	{r4, r5, r6, lr}
 800083e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000842:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000846:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800084a:	bf1d      	ittte	ne
 800084c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000850:	ea94 0f0c 	teqne	r4, ip
 8000854:	ea95 0f0c 	teqne	r5, ip
 8000858:	f000 f8a7 	bleq	80009aa <__aeabi_ddiv+0x16e>
 800085c:	eba4 0405 	sub.w	r4, r4, r5
 8000860:	ea81 0e03 	eor.w	lr, r1, r3
 8000864:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000868:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800086c:	f000 8088 	beq.w	8000980 <__aeabi_ddiv+0x144>
 8000870:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000874:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000878:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800087c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000880:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000884:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000888:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800088c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000890:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000894:	429d      	cmp	r5, r3
 8000896:	bf08      	it	eq
 8000898:	4296      	cmpeq	r6, r2
 800089a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800089e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008a2:	d202      	bcs.n	80008aa <__aeabi_ddiv+0x6e>
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	1ab6      	subs	r6, r6, r2
 80008ac:	eb65 0503 	sbc.w	r5, r5, r3
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000918:	ea55 0e06 	orrs.w	lr, r5, r6
 800091c:	d018      	beq.n	8000950 <__aeabi_ddiv+0x114>
 800091e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000922:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000926:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800092a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800092e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000932:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000936:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800093a:	d1c0      	bne.n	80008be <__aeabi_ddiv+0x82>
 800093c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000940:	d10b      	bne.n	800095a <__aeabi_ddiv+0x11e>
 8000942:	ea41 0100 	orr.w	r1, r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800094e:	e7b6      	b.n	80008be <__aeabi_ddiv+0x82>
 8000950:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000954:	bf04      	itt	eq
 8000956:	4301      	orreq	r1, r0
 8000958:	2000      	moveq	r0, #0
 800095a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800095e:	bf88      	it	hi
 8000960:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000964:	f63f aeaf 	bhi.w	80006c6 <__aeabi_dmul+0xde>
 8000968:	ebb5 0c03 	subs.w	ip, r5, r3
 800096c:	bf04      	itt	eq
 800096e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000972:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000976:	f150 0000 	adcs.w	r0, r0, #0
 800097a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000984:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000988:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800098c:	bfc2      	ittt	gt
 800098e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000992:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000996:	bd70      	popgt	{r4, r5, r6, pc}
 8000998:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800099c:	f04f 0e00 	mov.w	lr, #0
 80009a0:	3c01      	subs	r4, #1
 80009a2:	e690      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009a4:	ea45 0e06 	orr.w	lr, r5, r6
 80009a8:	e68d      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ae:	ea94 0f0c 	teq	r4, ip
 80009b2:	bf08      	it	eq
 80009b4:	ea95 0f0c 	teqeq	r5, ip
 80009b8:	f43f af3b 	beq.w	8000832 <__aeabi_dmul+0x24a>
 80009bc:	ea94 0f0c 	teq	r4, ip
 80009c0:	d10a      	bne.n	80009d8 <__aeabi_ddiv+0x19c>
 80009c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009c6:	f47f af34 	bne.w	8000832 <__aeabi_dmul+0x24a>
 80009ca:	ea95 0f0c 	teq	r5, ip
 80009ce:	f47f af25 	bne.w	800081c <__aeabi_dmul+0x234>
 80009d2:	4610      	mov	r0, r2
 80009d4:	4619      	mov	r1, r3
 80009d6:	e72c      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009d8:	ea95 0f0c 	teq	r5, ip
 80009dc:	d106      	bne.n	80009ec <__aeabi_ddiv+0x1b0>
 80009de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009e2:	f43f aefd 	beq.w	80007e0 <__aeabi_dmul+0x1f8>
 80009e6:	4610      	mov	r0, r2
 80009e8:	4619      	mov	r1, r3
 80009ea:	e722      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009f6:	f47f aec5 	bne.w	8000784 <__aeabi_dmul+0x19c>
 80009fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009fe:	f47f af0d 	bne.w	800081c <__aeabi_dmul+0x234>
 8000a02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a06:	f47f aeeb 	bne.w	80007e0 <__aeabi_dmul+0x1f8>
 8000a0a:	e712      	b.n	8000832 <__aeabi_dmul+0x24a>

08000a0c <__aeabi_d2iz>:
 8000a0c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a10:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a14:	d215      	bcs.n	8000a42 <__aeabi_d2iz+0x36>
 8000a16:	d511      	bpl.n	8000a3c <__aeabi_d2iz+0x30>
 8000a18:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a1c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a20:	d912      	bls.n	8000a48 <__aeabi_d2iz+0x3c>
 8000a22:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a26:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a2a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a2e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a32:	fa23 f002 	lsr.w	r0, r3, r2
 8000a36:	bf18      	it	ne
 8000a38:	4240      	negne	r0, r0
 8000a3a:	4770      	bx	lr
 8000a3c:	f04f 0000 	mov.w	r0, #0
 8000a40:	4770      	bx	lr
 8000a42:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a46:	d105      	bne.n	8000a54 <__aeabi_d2iz+0x48>
 8000a48:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a4c:	bf08      	it	eq
 8000a4e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a52:	4770      	bx	lr
 8000a54:	f04f 0000 	mov.w	r0, #0
 8000a58:	4770      	bx	lr
 8000a5a:	bf00      	nop

08000a5c <__aeabi_d2f>:
 8000a5c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a60:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a64:	bf24      	itt	cs
 8000a66:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a6a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a6e:	d90d      	bls.n	8000a8c <__aeabi_d2f+0x30>
 8000a70:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a74:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a78:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a7c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a80:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a84:	bf08      	it	eq
 8000a86:	f020 0001 	biceq.w	r0, r0, #1
 8000a8a:	4770      	bx	lr
 8000a8c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a90:	d121      	bne.n	8000ad6 <__aeabi_d2f+0x7a>
 8000a92:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a96:	bfbc      	itt	lt
 8000a98:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a9c:	4770      	bxlt	lr
 8000a9e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000aa2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000aa6:	f1c2 0218 	rsb	r2, r2, #24
 8000aaa:	f1c2 0c20 	rsb	ip, r2, #32
 8000aae:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ab2:	fa20 f002 	lsr.w	r0, r0, r2
 8000ab6:	bf18      	it	ne
 8000ab8:	f040 0001 	orrne.w	r0, r0, #1
 8000abc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ac0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ac4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ac8:	ea40 000c 	orr.w	r0, r0, ip
 8000acc:	fa23 f302 	lsr.w	r3, r3, r2
 8000ad0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ad4:	e7cc      	b.n	8000a70 <__aeabi_d2f+0x14>
 8000ad6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ada:	d107      	bne.n	8000aec <__aeabi_d2f+0x90>
 8000adc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ae0:	bf1e      	ittt	ne
 8000ae2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ae6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000aea:	4770      	bxne	lr
 8000aec:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000af0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000af4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000af8:	4770      	bx	lr
 8000afa:	bf00      	nop

08000afc <__aeabi_uldivmod>:
 8000afc:	b953      	cbnz	r3, 8000b14 <__aeabi_uldivmod+0x18>
 8000afe:	b94a      	cbnz	r2, 8000b14 <__aeabi_uldivmod+0x18>
 8000b00:	2900      	cmp	r1, #0
 8000b02:	bf08      	it	eq
 8000b04:	2800      	cmpeq	r0, #0
 8000b06:	bf1c      	itt	ne
 8000b08:	f04f 31ff 	movne.w	r1, #4294967295
 8000b0c:	f04f 30ff 	movne.w	r0, #4294967295
 8000b10:	f000 b974 	b.w	8000dfc <__aeabi_idiv0>
 8000b14:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b18:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b1c:	f000 f806 	bl	8000b2c <__udivmoddi4>
 8000b20:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b24:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b28:	b004      	add	sp, #16
 8000b2a:	4770      	bx	lr

08000b2c <__udivmoddi4>:
 8000b2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b30:	9d08      	ldr	r5, [sp, #32]
 8000b32:	4604      	mov	r4, r0
 8000b34:	468e      	mov	lr, r1
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d14d      	bne.n	8000bd6 <__udivmoddi4+0xaa>
 8000b3a:	428a      	cmp	r2, r1
 8000b3c:	4694      	mov	ip, r2
 8000b3e:	d969      	bls.n	8000c14 <__udivmoddi4+0xe8>
 8000b40:	fab2 f282 	clz	r2, r2
 8000b44:	b152      	cbz	r2, 8000b5c <__udivmoddi4+0x30>
 8000b46:	fa01 f302 	lsl.w	r3, r1, r2
 8000b4a:	f1c2 0120 	rsb	r1, r2, #32
 8000b4e:	fa20 f101 	lsr.w	r1, r0, r1
 8000b52:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b56:	ea41 0e03 	orr.w	lr, r1, r3
 8000b5a:	4094      	lsls	r4, r2
 8000b5c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000b60:	0c21      	lsrs	r1, r4, #16
 8000b62:	fbbe f6f8 	udiv	r6, lr, r8
 8000b66:	fa1f f78c 	uxth.w	r7, ip
 8000b6a:	fb08 e316 	mls	r3, r8, r6, lr
 8000b6e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000b72:	fb06 f107 	mul.w	r1, r6, r7
 8000b76:	4299      	cmp	r1, r3
 8000b78:	d90a      	bls.n	8000b90 <__udivmoddi4+0x64>
 8000b7a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b7e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000b82:	f080 811f 	bcs.w	8000dc4 <__udivmoddi4+0x298>
 8000b86:	4299      	cmp	r1, r3
 8000b88:	f240 811c 	bls.w	8000dc4 <__udivmoddi4+0x298>
 8000b8c:	3e02      	subs	r6, #2
 8000b8e:	4463      	add	r3, ip
 8000b90:	1a5b      	subs	r3, r3, r1
 8000b92:	b2a4      	uxth	r4, r4
 8000b94:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b98:	fb08 3310 	mls	r3, r8, r0, r3
 8000b9c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ba0:	fb00 f707 	mul.w	r7, r0, r7
 8000ba4:	42a7      	cmp	r7, r4
 8000ba6:	d90a      	bls.n	8000bbe <__udivmoddi4+0x92>
 8000ba8:	eb1c 0404 	adds.w	r4, ip, r4
 8000bac:	f100 33ff 	add.w	r3, r0, #4294967295
 8000bb0:	f080 810a 	bcs.w	8000dc8 <__udivmoddi4+0x29c>
 8000bb4:	42a7      	cmp	r7, r4
 8000bb6:	f240 8107 	bls.w	8000dc8 <__udivmoddi4+0x29c>
 8000bba:	4464      	add	r4, ip
 8000bbc:	3802      	subs	r0, #2
 8000bbe:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000bc2:	1be4      	subs	r4, r4, r7
 8000bc4:	2600      	movs	r6, #0
 8000bc6:	b11d      	cbz	r5, 8000bd0 <__udivmoddi4+0xa4>
 8000bc8:	40d4      	lsrs	r4, r2
 8000bca:	2300      	movs	r3, #0
 8000bcc:	e9c5 4300 	strd	r4, r3, [r5]
 8000bd0:	4631      	mov	r1, r6
 8000bd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bd6:	428b      	cmp	r3, r1
 8000bd8:	d909      	bls.n	8000bee <__udivmoddi4+0xc2>
 8000bda:	2d00      	cmp	r5, #0
 8000bdc:	f000 80ef 	beq.w	8000dbe <__udivmoddi4+0x292>
 8000be0:	2600      	movs	r6, #0
 8000be2:	e9c5 0100 	strd	r0, r1, [r5]
 8000be6:	4630      	mov	r0, r6
 8000be8:	4631      	mov	r1, r6
 8000bea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bee:	fab3 f683 	clz	r6, r3
 8000bf2:	2e00      	cmp	r6, #0
 8000bf4:	d14a      	bne.n	8000c8c <__udivmoddi4+0x160>
 8000bf6:	428b      	cmp	r3, r1
 8000bf8:	d302      	bcc.n	8000c00 <__udivmoddi4+0xd4>
 8000bfa:	4282      	cmp	r2, r0
 8000bfc:	f200 80f9 	bhi.w	8000df2 <__udivmoddi4+0x2c6>
 8000c00:	1a84      	subs	r4, r0, r2
 8000c02:	eb61 0303 	sbc.w	r3, r1, r3
 8000c06:	2001      	movs	r0, #1
 8000c08:	469e      	mov	lr, r3
 8000c0a:	2d00      	cmp	r5, #0
 8000c0c:	d0e0      	beq.n	8000bd0 <__udivmoddi4+0xa4>
 8000c0e:	e9c5 4e00 	strd	r4, lr, [r5]
 8000c12:	e7dd      	b.n	8000bd0 <__udivmoddi4+0xa4>
 8000c14:	b902      	cbnz	r2, 8000c18 <__udivmoddi4+0xec>
 8000c16:	deff      	udf	#255	; 0xff
 8000c18:	fab2 f282 	clz	r2, r2
 8000c1c:	2a00      	cmp	r2, #0
 8000c1e:	f040 8092 	bne.w	8000d46 <__udivmoddi4+0x21a>
 8000c22:	eba1 010c 	sub.w	r1, r1, ip
 8000c26:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c2a:	fa1f fe8c 	uxth.w	lr, ip
 8000c2e:	2601      	movs	r6, #1
 8000c30:	0c20      	lsrs	r0, r4, #16
 8000c32:	fbb1 f3f7 	udiv	r3, r1, r7
 8000c36:	fb07 1113 	mls	r1, r7, r3, r1
 8000c3a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c3e:	fb0e f003 	mul.w	r0, lr, r3
 8000c42:	4288      	cmp	r0, r1
 8000c44:	d908      	bls.n	8000c58 <__udivmoddi4+0x12c>
 8000c46:	eb1c 0101 	adds.w	r1, ip, r1
 8000c4a:	f103 38ff 	add.w	r8, r3, #4294967295
 8000c4e:	d202      	bcs.n	8000c56 <__udivmoddi4+0x12a>
 8000c50:	4288      	cmp	r0, r1
 8000c52:	f200 80cb 	bhi.w	8000dec <__udivmoddi4+0x2c0>
 8000c56:	4643      	mov	r3, r8
 8000c58:	1a09      	subs	r1, r1, r0
 8000c5a:	b2a4      	uxth	r4, r4
 8000c5c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c60:	fb07 1110 	mls	r1, r7, r0, r1
 8000c64:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000c68:	fb0e fe00 	mul.w	lr, lr, r0
 8000c6c:	45a6      	cmp	lr, r4
 8000c6e:	d908      	bls.n	8000c82 <__udivmoddi4+0x156>
 8000c70:	eb1c 0404 	adds.w	r4, ip, r4
 8000c74:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c78:	d202      	bcs.n	8000c80 <__udivmoddi4+0x154>
 8000c7a:	45a6      	cmp	lr, r4
 8000c7c:	f200 80bb 	bhi.w	8000df6 <__udivmoddi4+0x2ca>
 8000c80:	4608      	mov	r0, r1
 8000c82:	eba4 040e 	sub.w	r4, r4, lr
 8000c86:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000c8a:	e79c      	b.n	8000bc6 <__udivmoddi4+0x9a>
 8000c8c:	f1c6 0720 	rsb	r7, r6, #32
 8000c90:	40b3      	lsls	r3, r6
 8000c92:	fa22 fc07 	lsr.w	ip, r2, r7
 8000c96:	ea4c 0c03 	orr.w	ip, ip, r3
 8000c9a:	fa20 f407 	lsr.w	r4, r0, r7
 8000c9e:	fa01 f306 	lsl.w	r3, r1, r6
 8000ca2:	431c      	orrs	r4, r3
 8000ca4:	40f9      	lsrs	r1, r7
 8000ca6:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000caa:	fa00 f306 	lsl.w	r3, r0, r6
 8000cae:	fbb1 f8f9 	udiv	r8, r1, r9
 8000cb2:	0c20      	lsrs	r0, r4, #16
 8000cb4:	fa1f fe8c 	uxth.w	lr, ip
 8000cb8:	fb09 1118 	mls	r1, r9, r8, r1
 8000cbc:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000cc0:	fb08 f00e 	mul.w	r0, r8, lr
 8000cc4:	4288      	cmp	r0, r1
 8000cc6:	fa02 f206 	lsl.w	r2, r2, r6
 8000cca:	d90b      	bls.n	8000ce4 <__udivmoddi4+0x1b8>
 8000ccc:	eb1c 0101 	adds.w	r1, ip, r1
 8000cd0:	f108 3aff 	add.w	sl, r8, #4294967295
 8000cd4:	f080 8088 	bcs.w	8000de8 <__udivmoddi4+0x2bc>
 8000cd8:	4288      	cmp	r0, r1
 8000cda:	f240 8085 	bls.w	8000de8 <__udivmoddi4+0x2bc>
 8000cde:	f1a8 0802 	sub.w	r8, r8, #2
 8000ce2:	4461      	add	r1, ip
 8000ce4:	1a09      	subs	r1, r1, r0
 8000ce6:	b2a4      	uxth	r4, r4
 8000ce8:	fbb1 f0f9 	udiv	r0, r1, r9
 8000cec:	fb09 1110 	mls	r1, r9, r0, r1
 8000cf0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000cf4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000cf8:	458e      	cmp	lr, r1
 8000cfa:	d908      	bls.n	8000d0e <__udivmoddi4+0x1e2>
 8000cfc:	eb1c 0101 	adds.w	r1, ip, r1
 8000d00:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d04:	d26c      	bcs.n	8000de0 <__udivmoddi4+0x2b4>
 8000d06:	458e      	cmp	lr, r1
 8000d08:	d96a      	bls.n	8000de0 <__udivmoddi4+0x2b4>
 8000d0a:	3802      	subs	r0, #2
 8000d0c:	4461      	add	r1, ip
 8000d0e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000d12:	fba0 9402 	umull	r9, r4, r0, r2
 8000d16:	eba1 010e 	sub.w	r1, r1, lr
 8000d1a:	42a1      	cmp	r1, r4
 8000d1c:	46c8      	mov	r8, r9
 8000d1e:	46a6      	mov	lr, r4
 8000d20:	d356      	bcc.n	8000dd0 <__udivmoddi4+0x2a4>
 8000d22:	d053      	beq.n	8000dcc <__udivmoddi4+0x2a0>
 8000d24:	b15d      	cbz	r5, 8000d3e <__udivmoddi4+0x212>
 8000d26:	ebb3 0208 	subs.w	r2, r3, r8
 8000d2a:	eb61 010e 	sbc.w	r1, r1, lr
 8000d2e:	fa01 f707 	lsl.w	r7, r1, r7
 8000d32:	fa22 f306 	lsr.w	r3, r2, r6
 8000d36:	40f1      	lsrs	r1, r6
 8000d38:	431f      	orrs	r7, r3
 8000d3a:	e9c5 7100 	strd	r7, r1, [r5]
 8000d3e:	2600      	movs	r6, #0
 8000d40:	4631      	mov	r1, r6
 8000d42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d46:	f1c2 0320 	rsb	r3, r2, #32
 8000d4a:	40d8      	lsrs	r0, r3
 8000d4c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d50:	fa21 f303 	lsr.w	r3, r1, r3
 8000d54:	4091      	lsls	r1, r2
 8000d56:	4301      	orrs	r1, r0
 8000d58:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d5c:	fa1f fe8c 	uxth.w	lr, ip
 8000d60:	fbb3 f0f7 	udiv	r0, r3, r7
 8000d64:	fb07 3610 	mls	r6, r7, r0, r3
 8000d68:	0c0b      	lsrs	r3, r1, #16
 8000d6a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000d6e:	fb00 f60e 	mul.w	r6, r0, lr
 8000d72:	429e      	cmp	r6, r3
 8000d74:	fa04 f402 	lsl.w	r4, r4, r2
 8000d78:	d908      	bls.n	8000d8c <__udivmoddi4+0x260>
 8000d7a:	eb1c 0303 	adds.w	r3, ip, r3
 8000d7e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000d82:	d22f      	bcs.n	8000de4 <__udivmoddi4+0x2b8>
 8000d84:	429e      	cmp	r6, r3
 8000d86:	d92d      	bls.n	8000de4 <__udivmoddi4+0x2b8>
 8000d88:	3802      	subs	r0, #2
 8000d8a:	4463      	add	r3, ip
 8000d8c:	1b9b      	subs	r3, r3, r6
 8000d8e:	b289      	uxth	r1, r1
 8000d90:	fbb3 f6f7 	udiv	r6, r3, r7
 8000d94:	fb07 3316 	mls	r3, r7, r6, r3
 8000d98:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d9c:	fb06 f30e 	mul.w	r3, r6, lr
 8000da0:	428b      	cmp	r3, r1
 8000da2:	d908      	bls.n	8000db6 <__udivmoddi4+0x28a>
 8000da4:	eb1c 0101 	adds.w	r1, ip, r1
 8000da8:	f106 38ff 	add.w	r8, r6, #4294967295
 8000dac:	d216      	bcs.n	8000ddc <__udivmoddi4+0x2b0>
 8000dae:	428b      	cmp	r3, r1
 8000db0:	d914      	bls.n	8000ddc <__udivmoddi4+0x2b0>
 8000db2:	3e02      	subs	r6, #2
 8000db4:	4461      	add	r1, ip
 8000db6:	1ac9      	subs	r1, r1, r3
 8000db8:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000dbc:	e738      	b.n	8000c30 <__udivmoddi4+0x104>
 8000dbe:	462e      	mov	r6, r5
 8000dc0:	4628      	mov	r0, r5
 8000dc2:	e705      	b.n	8000bd0 <__udivmoddi4+0xa4>
 8000dc4:	4606      	mov	r6, r0
 8000dc6:	e6e3      	b.n	8000b90 <__udivmoddi4+0x64>
 8000dc8:	4618      	mov	r0, r3
 8000dca:	e6f8      	b.n	8000bbe <__udivmoddi4+0x92>
 8000dcc:	454b      	cmp	r3, r9
 8000dce:	d2a9      	bcs.n	8000d24 <__udivmoddi4+0x1f8>
 8000dd0:	ebb9 0802 	subs.w	r8, r9, r2
 8000dd4:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000dd8:	3801      	subs	r0, #1
 8000dda:	e7a3      	b.n	8000d24 <__udivmoddi4+0x1f8>
 8000ddc:	4646      	mov	r6, r8
 8000dde:	e7ea      	b.n	8000db6 <__udivmoddi4+0x28a>
 8000de0:	4620      	mov	r0, r4
 8000de2:	e794      	b.n	8000d0e <__udivmoddi4+0x1e2>
 8000de4:	4640      	mov	r0, r8
 8000de6:	e7d1      	b.n	8000d8c <__udivmoddi4+0x260>
 8000de8:	46d0      	mov	r8, sl
 8000dea:	e77b      	b.n	8000ce4 <__udivmoddi4+0x1b8>
 8000dec:	3b02      	subs	r3, #2
 8000dee:	4461      	add	r1, ip
 8000df0:	e732      	b.n	8000c58 <__udivmoddi4+0x12c>
 8000df2:	4630      	mov	r0, r6
 8000df4:	e709      	b.n	8000c0a <__udivmoddi4+0xde>
 8000df6:	4464      	add	r4, ip
 8000df8:	3802      	subs	r0, #2
 8000dfa:	e742      	b.n	8000c82 <__udivmoddi4+0x156>

08000dfc <__aeabi_idiv0>:
 8000dfc:	4770      	bx	lr
 8000dfe:	bf00      	nop

08000e00 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000e00:	b580      	push	{r7, lr}
 8000e02:	af00      	add	r7, sp, #0
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of reportDataQueue */
  reportDataQueueHandle = osMessageQueueNew (64, sizeof(uint16_t), &reportDataQueue_attributes);
 8000e04:	4a0c      	ldr	r2, [pc, #48]	; (8000e38 <MX_FREERTOS_Init+0x38>)
 8000e06:	2102      	movs	r1, #2
 8000e08:	2040      	movs	r0, #64	; 0x40
 8000e0a:	f004 fbe0 	bl	80055ce <osMessageQueueNew>
 8000e0e:	4603      	mov	r3, r0
 8000e10:	4a0a      	ldr	r2, [pc, #40]	; (8000e3c <MX_FREERTOS_Init+0x3c>)
 8000e12:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of readDataTask */
  readDataTaskHandle = osThreadNew(StartReadDataTask, NULL, &readDataTask_attributes);
 8000e14:	4a0a      	ldr	r2, [pc, #40]	; (8000e40 <MX_FREERTOS_Init+0x40>)
 8000e16:	2100      	movs	r1, #0
 8000e18:	480a      	ldr	r0, [pc, #40]	; (8000e44 <MX_FREERTOS_Init+0x44>)
 8000e1a:	f004 fb09 	bl	8005430 <osThreadNew>
 8000e1e:	4603      	mov	r3, r0
 8000e20:	4a09      	ldr	r2, [pc, #36]	; (8000e48 <MX_FREERTOS_Init+0x48>)
 8000e22:	6013      	str	r3, [r2, #0]

  /* creation of sendDataTask */
  sendDataTaskHandle = osThreadNew(startSendDataTask, NULL, &sendDataTask_attributes);
 8000e24:	4a09      	ldr	r2, [pc, #36]	; (8000e4c <MX_FREERTOS_Init+0x4c>)
 8000e26:	2100      	movs	r1, #0
 8000e28:	4809      	ldr	r0, [pc, #36]	; (8000e50 <MX_FREERTOS_Init+0x50>)
 8000e2a:	f004 fb01 	bl	8005430 <osThreadNew>
 8000e2e:	4603      	mov	r3, r0
 8000e30:	4a08      	ldr	r2, [pc, #32]	; (8000e54 <MX_FREERTOS_Init+0x54>)
 8000e32:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8000e34:	bf00      	nop
 8000e36:	bd80      	pop	{r7, pc}
 8000e38:	08009a8c 	.word	0x08009a8c
 8000e3c:	20000098 	.word	0x20000098
 8000e40:	08009a44 	.word	0x08009a44
 8000e44:	08000e59 	.word	0x08000e59
 8000e48:	20000090 	.word	0x20000090
 8000e4c:	08009a68 	.word	0x08009a68
 8000e50:	08000ead 	.word	0x08000ead
 8000e54:	20000094 	.word	0x20000094

08000e58 <StartReadDataTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartReadDataTask */
void StartReadDataTask(void *argument)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b084      	sub	sp, #16
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartReadDataTask */

	printf("***------------- 9 DOF IMU Click ------------***\r\n");
 8000e60:	480e      	ldr	r0, [pc, #56]	; (8000e9c <StartReadDataTask+0x44>)
 8000e62:	f007 fc77 	bl	8008754 <puts>

    /* config the 9dof module */
    mpu9dof_default_cfg();
 8000e66:	f000 f9a1 	bl	80011ac <mpu9dof_default_cfg>

    /* calibrate the module */
    mpu9dof_calibrate_module();
 8000e6a:	f000 fabd 	bl	80013e8 <mpu9dof_calibrate_module>

  /* Infinite loop */
  for(;;)
  {
	  /* read the gyro and accel values */
	  mpu9dof_read(&GYRO);
 8000e6e:	480c      	ldr	r0, [pc, #48]	; (8000ea0 <StartReadDataTask+0x48>)
 8000e70:	f000 fa2a 	bl	80012c8 <mpu9dof_read>
	  mpu9dof_read(&ACCEL);
 8000e74:	480b      	ldr	r0, [pc, #44]	; (8000ea4 <StartReadDataTask+0x4c>)
 8000e76:	f000 fa27 	bl	80012c8 <mpu9dof_read>

	  /* dave the processed sensor data */
	  data = (ReportData *) mpu9dof_process();
 8000e7a:	f000 fb41 	bl	8001500 <mpu9dof_process>
 8000e7e:	4603      	mov	r3, r0
 8000e80:	60fb      	str	r3, [r7, #12]

	  /* report the data to the sending task */
	  osMessageQueuePut(reportDataQueueHandle, &data, 0U, 0U);
 8000e82:	4b09      	ldr	r3, [pc, #36]	; (8000ea8 <StartReadDataTask+0x50>)
 8000e84:	6818      	ldr	r0, [r3, #0]
 8000e86:	f107 010c 	add.w	r1, r7, #12
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	f004 fc11 	bl	80056b4 <osMessageQueuePut>

	  osDelay(30);
 8000e92:	201e      	movs	r0, #30
 8000e94:	f004 fb80 	bl	8005598 <osDelay>
	  mpu9dof_read(&GYRO);
 8000e98:	e7e9      	b.n	8000e6e <StartReadDataTask+0x16>
 8000e9a:	bf00      	nop
 8000e9c:	08009930 	.word	0x08009930
 8000ea0:	08009a41 	.word	0x08009a41
 8000ea4:	08009a42 	.word	0x08009a42
 8000ea8:	20000098 	.word	0x20000098

08000eac <startSendDataTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_startSendDataTask */
void startSendDataTask(void *argument)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b086      	sub	sp, #24
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN startSendDataTask */

	/* transfer interval in ms */
	/* if transfer interval is smaller than sensor data rate, the que is blocking */
#ifdef NDEBUG
	const uint8_t RAW_DATA = 1;
 8000eb4:	2301      	movs	r3, #1
 8000eb6:	75fb      	strb	r3, [r7, #23]
	const uint8_t OFFSET_VALUES = 2;
 8000eb8:	2302      	movs	r3, #2
 8000eba:	75bb      	strb	r3, [r7, #22]
	const uint8_t CALIBRATED_VALUES = 3;
 8000ebc:	2303      	movs	r3, #3
 8000ebe:	757b      	strb	r3, [r7, #21]
	const uint8_t PROCESSED_DATA = 4;
 8000ec0:	2304      	movs	r3, #4
 8000ec2:	74fb      	strb	r3, [r7, #19]
#endif

	const uint8_t TRANSFER_INTERVAL = 100;
 8000ec4:	2364      	movs	r3, #100	; 0x64
 8000ec6:	753b      	strb	r3, [r7, #20]

	ReportData data;

  for(;;)
  {
	if(osMessageQueueGet(reportDataQueueHandle, &data, 0U, 0U) == osOK)
 8000ec8:	4b0b      	ldr	r3, [pc, #44]	; (8000ef8 <startSendDataTask+0x4c>)
 8000eca:	6818      	ldr	r0, [r3, #0]
 8000ecc:	f107 010c 	add.w	r1, r7, #12
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	f004 fc4e 	bl	8005774 <osMessageQueueGet>
 8000ed8:	4603      	mov	r3, r0
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d105      	bne.n	8000eea <startSendDataTask+0x3e>
	{
		/* CALL THE TRANSMIT TO RASPBY FUNCTION HERE */

#ifdef NDEBUG
	  /* delete logging for final version */
	  mpu9dof_log_data(&PROCESSED_DATA);
 8000ede:	f107 0313 	add.w	r3, r7, #19
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	f000 fc1e 	bl	8001724 <mpu9dof_log_data>
 8000ee8:	e001      	b.n	8000eee <startSendDataTask+0x42>
#endif

	} else {
		osThreadYield();
 8000eea:	f004 fb35 	bl	8005558 <osThreadYield>
	}

    osDelay(TRANSFER_INTERVAL);
 8000eee:	7d3b      	ldrb	r3, [r7, #20]
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	f004 fb51 	bl	8005598 <osDelay>
	if(osMessageQueueGet(reportDataQueueHandle, &data, 0U, 0U) == osOK)
 8000ef6:	e7e7      	b.n	8000ec8 <startSendDataTask+0x1c>
 8000ef8:	20000098 	.word	0x20000098

08000efc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000efc:	b480      	push	{r7}
 8000efe:	b085      	sub	sp, #20
 8000f00:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f02:	4b15      	ldr	r3, [pc, #84]	; (8000f58 <MX_GPIO_Init+0x5c>)
 8000f04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f06:	4a14      	ldr	r2, [pc, #80]	; (8000f58 <MX_GPIO_Init+0x5c>)
 8000f08:	f043 0304 	orr.w	r3, r3, #4
 8000f0c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f0e:	4b12      	ldr	r3, [pc, #72]	; (8000f58 <MX_GPIO_Init+0x5c>)
 8000f10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f12:	f003 0304 	and.w	r3, r3, #4
 8000f16:	60fb      	str	r3, [r7, #12]
 8000f18:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f1a:	4b0f      	ldr	r3, [pc, #60]	; (8000f58 <MX_GPIO_Init+0x5c>)
 8000f1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f1e:	4a0e      	ldr	r2, [pc, #56]	; (8000f58 <MX_GPIO_Init+0x5c>)
 8000f20:	f043 0301 	orr.w	r3, r3, #1
 8000f24:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f26:	4b0c      	ldr	r3, [pc, #48]	; (8000f58 <MX_GPIO_Init+0x5c>)
 8000f28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f2a:	f003 0301 	and.w	r3, r3, #1
 8000f2e:	60bb      	str	r3, [r7, #8]
 8000f30:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f32:	4b09      	ldr	r3, [pc, #36]	; (8000f58 <MX_GPIO_Init+0x5c>)
 8000f34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f36:	4a08      	ldr	r2, [pc, #32]	; (8000f58 <MX_GPIO_Init+0x5c>)
 8000f38:	f043 0302 	orr.w	r3, r3, #2
 8000f3c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f3e:	4b06      	ldr	r3, [pc, #24]	; (8000f58 <MX_GPIO_Init+0x5c>)
 8000f40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f42:	f003 0302 	and.w	r3, r3, #2
 8000f46:	607b      	str	r3, [r7, #4]
 8000f48:	687b      	ldr	r3, [r7, #4]

}
 8000f4a:	bf00      	nop
 8000f4c:	3714      	adds	r7, #20
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f54:	4770      	bx	lr
 8000f56:	bf00      	nop
 8000f58:	40021000 	.word	0x40021000

08000f5c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000f60:	4b1b      	ldr	r3, [pc, #108]	; (8000fd0 <MX_I2C1_Init+0x74>)
 8000f62:	4a1c      	ldr	r2, [pc, #112]	; (8000fd4 <MX_I2C1_Init+0x78>)
 8000f64:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00702681;
 8000f66:	4b1a      	ldr	r3, [pc, #104]	; (8000fd0 <MX_I2C1_Init+0x74>)
 8000f68:	4a1b      	ldr	r2, [pc, #108]	; (8000fd8 <MX_I2C1_Init+0x7c>)
 8000f6a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000f6c:	4b18      	ldr	r3, [pc, #96]	; (8000fd0 <MX_I2C1_Init+0x74>)
 8000f6e:	2200      	movs	r2, #0
 8000f70:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000f72:	4b17      	ldr	r3, [pc, #92]	; (8000fd0 <MX_I2C1_Init+0x74>)
 8000f74:	2201      	movs	r2, #1
 8000f76:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000f78:	4b15      	ldr	r3, [pc, #84]	; (8000fd0 <MX_I2C1_Init+0x74>)
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000f7e:	4b14      	ldr	r3, [pc, #80]	; (8000fd0 <MX_I2C1_Init+0x74>)
 8000f80:	2200      	movs	r2, #0
 8000f82:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000f84:	4b12      	ldr	r3, [pc, #72]	; (8000fd0 <MX_I2C1_Init+0x74>)
 8000f86:	2200      	movs	r2, #0
 8000f88:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000f8a:	4b11      	ldr	r3, [pc, #68]	; (8000fd0 <MX_I2C1_Init+0x74>)
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000f90:	4b0f      	ldr	r3, [pc, #60]	; (8000fd0 <MX_I2C1_Init+0x74>)
 8000f92:	2200      	movs	r2, #0
 8000f94:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000f96:	480e      	ldr	r0, [pc, #56]	; (8000fd0 <MX_I2C1_Init+0x74>)
 8000f98:	f001 fa4e 	bl	8002438 <HAL_I2C_Init>
 8000f9c:	4603      	mov	r3, r0
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d001      	beq.n	8000fa6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000fa2:	f000 f8fd 	bl	80011a0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000fa6:	2100      	movs	r1, #0
 8000fa8:	4809      	ldr	r0, [pc, #36]	; (8000fd0 <MX_I2C1_Init+0x74>)
 8000faa:	f001 ff35 	bl	8002e18 <HAL_I2CEx_ConfigAnalogFilter>
 8000fae:	4603      	mov	r3, r0
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d001      	beq.n	8000fb8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000fb4:	f000 f8f4 	bl	80011a0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000fb8:	2100      	movs	r1, #0
 8000fba:	4805      	ldr	r0, [pc, #20]	; (8000fd0 <MX_I2C1_Init+0x74>)
 8000fbc:	f001 ff77 	bl	8002eae <HAL_I2CEx_ConfigDigitalFilter>
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d001      	beq.n	8000fca <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000fc6:	f000 f8eb 	bl	80011a0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000fca:	bf00      	nop
 8000fcc:	bd80      	pop	{r7, pc}
 8000fce:	bf00      	nop
 8000fd0:	2000009c 	.word	0x2000009c
 8000fd4:	40005400 	.word	0x40005400
 8000fd8:	00702681 	.word	0x00702681

08000fdc <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b09e      	sub	sp, #120	; 0x78
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fe4:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000fe8:	2200      	movs	r2, #0
 8000fea:	601a      	str	r2, [r3, #0]
 8000fec:	605a      	str	r2, [r3, #4]
 8000fee:	609a      	str	r2, [r3, #8]
 8000ff0:	60da      	str	r2, [r3, #12]
 8000ff2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ff4:	f107 0310 	add.w	r3, r7, #16
 8000ff8:	2254      	movs	r2, #84	; 0x54
 8000ffa:	2100      	movs	r1, #0
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	f007 fa86 	bl	800850e <memset>
  if(i2cHandle->Instance==I2C1)
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	4a1e      	ldr	r2, [pc, #120]	; (8001080 <HAL_I2C_MspInit+0xa4>)
 8001008:	4293      	cmp	r3, r2
 800100a:	d135      	bne.n	8001078 <HAL_I2C_MspInit+0x9c>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800100c:	2340      	movs	r3, #64	; 0x40
 800100e:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001010:	2300      	movs	r3, #0
 8001012:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001014:	f107 0310 	add.w	r3, r7, #16
 8001018:	4618      	mov	r0, r3
 800101a:	f002 fe73 	bl	8003d04 <HAL_RCCEx_PeriphCLKConfig>
 800101e:	4603      	mov	r3, r0
 8001020:	2b00      	cmp	r3, #0
 8001022:	d001      	beq.n	8001028 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001024:	f000 f8bc 	bl	80011a0 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001028:	4b16      	ldr	r3, [pc, #88]	; (8001084 <HAL_I2C_MspInit+0xa8>)
 800102a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800102c:	4a15      	ldr	r2, [pc, #84]	; (8001084 <HAL_I2C_MspInit+0xa8>)
 800102e:	f043 0302 	orr.w	r3, r3, #2
 8001032:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001034:	4b13      	ldr	r3, [pc, #76]	; (8001084 <HAL_I2C_MspInit+0xa8>)
 8001036:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001038:	f003 0302 	and.w	r3, r3, #2
 800103c:	60fb      	str	r3, [r7, #12]
 800103e:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001040:	23c0      	movs	r3, #192	; 0xc0
 8001042:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001044:	2312      	movs	r3, #18
 8001046:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001048:	2300      	movs	r3, #0
 800104a:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800104c:	2303      	movs	r3, #3
 800104e:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001050:	2304      	movs	r3, #4
 8001052:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001054:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001058:	4619      	mov	r1, r3
 800105a:	480b      	ldr	r0, [pc, #44]	; (8001088 <HAL_I2C_MspInit+0xac>)
 800105c:	f001 f882 	bl	8002164 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001060:	4b08      	ldr	r3, [pc, #32]	; (8001084 <HAL_I2C_MspInit+0xa8>)
 8001062:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001064:	4a07      	ldr	r2, [pc, #28]	; (8001084 <HAL_I2C_MspInit+0xa8>)
 8001066:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800106a:	6593      	str	r3, [r2, #88]	; 0x58
 800106c:	4b05      	ldr	r3, [pc, #20]	; (8001084 <HAL_I2C_MspInit+0xa8>)
 800106e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001070:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001074:	60bb      	str	r3, [r7, #8]
 8001076:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001078:	bf00      	nop
 800107a:	3778      	adds	r7, #120	; 0x78
 800107c:	46bd      	mov	sp, r7
 800107e:	bd80      	pop	{r7, pc}
 8001080:	40005400 	.word	0x40005400
 8001084:	40021000 	.word	0x40021000
 8001088:	48000400 	.word	0x48000400

0800108c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001090:	f000 ff29 	bl	8001ee6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001094:	f000 f810 	bl	80010b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001098:	f7ff ff30 	bl	8000efc <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800109c:	f000 fe1e 	bl	8001cdc <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80010a0:	f7ff ff5c 	bl	8000f5c <MX_I2C1_Init>
  MX_USART1_UART_Init();
 80010a4:	f000 fdea 	bl	8001c7c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 80010a8:	f004 f978 	bl	800539c <osKernelInitialize>
  MX_FREERTOS_Init();
 80010ac:	f7ff fea8 	bl	8000e00 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 80010b0:	f004 f998 	bl	80053e4 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80010b4:	e7fe      	b.n	80010b4 <main+0x28>
	...

080010b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b096      	sub	sp, #88	; 0x58
 80010bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010be:	f107 0314 	add.w	r3, r7, #20
 80010c2:	2244      	movs	r2, #68	; 0x44
 80010c4:	2100      	movs	r1, #0
 80010c6:	4618      	mov	r0, r3
 80010c8:	f007 fa21 	bl	800850e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010cc:	463b      	mov	r3, r7
 80010ce:	2200      	movs	r2, #0
 80010d0:	601a      	str	r2, [r3, #0]
 80010d2:	605a      	str	r2, [r3, #4]
 80010d4:	609a      	str	r2, [r3, #8]
 80010d6:	60da      	str	r2, [r3, #12]
 80010d8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80010da:	f44f 7000 	mov.w	r0, #512	; 0x200
 80010de:	f001 ff51 	bl	8002f84 <HAL_PWREx_ControlVoltageScaling>
 80010e2:	4603      	mov	r3, r0
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d001      	beq.n	80010ec <SystemClock_Config+0x34>
  {
    Error_Handler();
 80010e8:	f000 f85a 	bl	80011a0 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80010ec:	f001 ff2c 	bl	8002f48 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80010f0:	4b21      	ldr	r3, [pc, #132]	; (8001178 <SystemClock_Config+0xc0>)
 80010f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80010f6:	4a20      	ldr	r2, [pc, #128]	; (8001178 <SystemClock_Config+0xc0>)
 80010f8:	f023 0318 	bic.w	r3, r3, #24
 80010fc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8001100:	2314      	movs	r3, #20
 8001102:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001104:	2301      	movs	r3, #1
 8001106:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001108:	2301      	movs	r3, #1
 800110a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800110c:	2300      	movs	r3, #0
 800110e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001110:	2360      	movs	r3, #96	; 0x60
 8001112:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001114:	2302      	movs	r3, #2
 8001116:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8001118:	2301      	movs	r3, #1
 800111a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800111c:	2301      	movs	r3, #1
 800111e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 36;
 8001120:	2324      	movs	r3, #36	; 0x24
 8001122:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001124:	2307      	movs	r3, #7
 8001126:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001128:	2302      	movs	r3, #2
 800112a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800112c:	2302      	movs	r3, #2
 800112e:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001130:	f107 0314 	add.w	r3, r7, #20
 8001134:	4618      	mov	r0, r3
 8001136:	f001 ff7b 	bl	8003030 <HAL_RCC_OscConfig>
 800113a:	4603      	mov	r3, r0
 800113c:	2b00      	cmp	r3, #0
 800113e:	d001      	beq.n	8001144 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8001140:	f000 f82e 	bl	80011a0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001144:	230f      	movs	r3, #15
 8001146:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001148:	2303      	movs	r3, #3
 800114a:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800114c:	2300      	movs	r3, #0
 800114e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001150:	2300      	movs	r3, #0
 8001152:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001154:	2300      	movs	r3, #0
 8001156:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001158:	463b      	mov	r3, r7
 800115a:	2104      	movs	r1, #4
 800115c:	4618      	mov	r0, r3
 800115e:	f002 fb7b 	bl	8003858 <HAL_RCC_ClockConfig>
 8001162:	4603      	mov	r3, r0
 8001164:	2b00      	cmp	r3, #0
 8001166:	d001      	beq.n	800116c <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8001168:	f000 f81a 	bl	80011a0 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 800116c:	f002 ffc0 	bl	80040f0 <HAL_RCCEx_EnableMSIPLLMode>
}
 8001170:	bf00      	nop
 8001172:	3758      	adds	r7, #88	; 0x58
 8001174:	46bd      	mov	sp, r7
 8001176:	bd80      	pop	{r7, pc}
 8001178:	40021000 	.word	0x40021000

0800117c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b082      	sub	sp, #8
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM16) {
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	4a04      	ldr	r2, [pc, #16]	; (800119c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800118a:	4293      	cmp	r3, r2
 800118c:	d101      	bne.n	8001192 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800118e:	f000 fec3 	bl	8001f18 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001192:	bf00      	nop
 8001194:	3708      	adds	r7, #8
 8001196:	46bd      	mov	sp, r7
 8001198:	bd80      	pop	{r7, pc}
 800119a:	bf00      	nop
 800119c:	40014400 	.word	0x40014400

080011a0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011a0:	b480      	push	{r7}
 80011a2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011a4:	b672      	cpsid	i
}
 80011a6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80011a8:	e7fe      	b.n	80011a8 <Error_Handler+0x8>
	...

080011ac <mpu9dof_default_cfg>:
 * @brief:
 * @param:
 * @return:
 */
void mpu9dof_default_cfg()
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b082      	sub	sp, #8
 80011b0:	af00      	add	r7, sp, #0

	const uint8_t LEN = 1;
 80011b2:	2301      	movs	r3, #1
 80011b4:	71fb      	strb	r3, [r7, #7]

    /* Chip reset */
    mpu9dof_generic_write( &MPU9DOF_PWR_MGMT_1, &MPU9DOF_BIT_H_RESET, &LEN );
 80011b6:	1dfb      	adds	r3, r7, #7
 80011b8:	461a      	mov	r2, r3
 80011ba:	4932      	ldr	r1, [pc, #200]	; (8001284 <mpu9dof_default_cfg+0xd8>)
 80011bc:	4832      	ldr	r0, [pc, #200]	; (8001288 <mpu9dof_default_cfg+0xdc>)
 80011be:	f000 fb19 	bl	80017f4 <mpu9dof_generic_write>
    HAL_Delay(10);
 80011c2:	200a      	movs	r0, #10
 80011c4:	f000 fec8 	bl	8001f58 <HAL_Delay>

    /* Initialize accel & gyro */
    mpu9dof_generic_write( &MPU9DOF_SMPLRT_DIV, &MPU9DOF_DEFAULT, &LEN );
 80011c8:	1dfb      	adds	r3, r7, #7
 80011ca:	461a      	mov	r2, r3
 80011cc:	492f      	ldr	r1, [pc, #188]	; (800128c <mpu9dof_default_cfg+0xe0>)
 80011ce:	4830      	ldr	r0, [pc, #192]	; (8001290 <mpu9dof_default_cfg+0xe4>)
 80011d0:	f000 fb10 	bl	80017f4 <mpu9dof_generic_write>
    HAL_Delay(10);
 80011d4:	200a      	movs	r0, #10
 80011d6:	f000 febf 	bl	8001f58 <HAL_Delay>

    mpu9dof_generic_write( &MPU9DOF_CONFIG, &MPU9DOF_BITS_DLPF_CFG_42HZ, &LEN );
 80011da:	1dfb      	adds	r3, r7, #7
 80011dc:	461a      	mov	r2, r3
 80011de:	492d      	ldr	r1, [pc, #180]	; (8001294 <mpu9dof_default_cfg+0xe8>)
 80011e0:	482d      	ldr	r0, [pc, #180]	; (8001298 <mpu9dof_default_cfg+0xec>)
 80011e2:	f000 fb07 	bl	80017f4 <mpu9dof_generic_write>
    HAL_Delay(10);
 80011e6:	200a      	movs	r0, #10
 80011e8:	f000 feb6 	bl	8001f58 <HAL_Delay>

    mpu9dof_generic_write( &MPU9DOF_GYRO_CONFIG, &MPU9DOF_BITS_FS_250DPS, &LEN );
 80011ec:	1dfb      	adds	r3, r7, #7
 80011ee:	461a      	mov	r2, r3
 80011f0:	492a      	ldr	r1, [pc, #168]	; (800129c <mpu9dof_default_cfg+0xf0>)
 80011f2:	482b      	ldr	r0, [pc, #172]	; (80012a0 <mpu9dof_default_cfg+0xf4>)
 80011f4:	f000 fafe 	bl	80017f4 <mpu9dof_generic_write>
    HAL_Delay(10);
 80011f8:	200a      	movs	r0, #10
 80011fa:	f000 fead 	bl	8001f58 <HAL_Delay>

    mpu9dof_generic_write( &MPU9DOF_ACCEL_CONFIG, &MPU9DOF_BITS_AFSL_SEL_8G, &LEN );
 80011fe:	1dfb      	adds	r3, r7, #7
 8001200:	461a      	mov	r2, r3
 8001202:	4928      	ldr	r1, [pc, #160]	; (80012a4 <mpu9dof_default_cfg+0xf8>)
 8001204:	4828      	ldr	r0, [pc, #160]	; (80012a8 <mpu9dof_default_cfg+0xfc>)
 8001206:	f000 faf5 	bl	80017f4 <mpu9dof_generic_write>
    HAL_Delay(10);
 800120a:	200a      	movs	r0, #10
 800120c:	f000 fea4 	bl	8001f58 <HAL_Delay>

    /* Disable FIFOs */
    mpu9dof_generic_write( &MPU9DOF_FIFO_EN , &MPU9DOF_BIT_FIFO_DIS, &LEN );
 8001210:	1dfb      	adds	r3, r7, #7
 8001212:	461a      	mov	r2, r3
 8001214:	4925      	ldr	r1, [pc, #148]	; (80012ac <mpu9dof_default_cfg+0x100>)
 8001216:	4826      	ldr	r0, [pc, #152]	; (80012b0 <mpu9dof_default_cfg+0x104>)
 8001218:	f000 faec 	bl	80017f4 <mpu9dof_generic_write>
    HAL_Delay(10);
 800121c:	200a      	movs	r0, #10
 800121e:	f000 fe9b 	bl	8001f58 <HAL_Delay>

    /* Bypass mode enabled */
    mpu9dof_generic_write( &MPU9DOF_INT_PIN_CFG , &MPU9DOF_BIT_INT_PIN_CFG, &LEN );
 8001222:	1dfb      	adds	r3, r7, #7
 8001224:	461a      	mov	r2, r3
 8001226:	4923      	ldr	r1, [pc, #140]	; (80012b4 <mpu9dof_default_cfg+0x108>)
 8001228:	4823      	ldr	r0, [pc, #140]	; (80012b8 <mpu9dof_default_cfg+0x10c>)
 800122a:	f000 fae3 	bl	80017f4 <mpu9dof_generic_write>
    HAL_Delay(10);
 800122e:	200a      	movs	r0, #10
 8001230:	f000 fe92 	bl	8001f58 <HAL_Delay>

    /* Disable all interrupts */
    mpu9dof_generic_write( &MPU9DOF_INT_ENABLE , &MPU9DOF_DEFAULT, &LEN );
 8001234:	1dfb      	adds	r3, r7, #7
 8001236:	461a      	mov	r2, r3
 8001238:	4914      	ldr	r1, [pc, #80]	; (800128c <mpu9dof_default_cfg+0xe0>)
 800123a:	4820      	ldr	r0, [pc, #128]	; (80012bc <mpu9dof_default_cfg+0x110>)
 800123c:	f000 fada 	bl	80017f4 <mpu9dof_generic_write>
    HAL_Delay(10);
 8001240:	200a      	movs	r0, #10
 8001242:	f000 fe89 	bl	8001f58 <HAL_Delay>

    /* No FIFO and no I2C slaves */
    mpu9dof_generic_write( &MPU9DOF_USER_CTRL , &MPU9DOF_DEFAULT, &LEN );
 8001246:	1dfb      	adds	r3, r7, #7
 8001248:	461a      	mov	r2, r3
 800124a:	4910      	ldr	r1, [pc, #64]	; (800128c <mpu9dof_default_cfg+0xe0>)
 800124c:	481c      	ldr	r0, [pc, #112]	; (80012c0 <mpu9dof_default_cfg+0x114>)
 800124e:	f000 fad1 	bl	80017f4 <mpu9dof_generic_write>
    HAL_Delay(10);
 8001252:	200a      	movs	r0, #10
 8001254:	f000 fe80 	bl	8001f58 <HAL_Delay>

    /* No power management, internal clock source */
    mpu9dof_generic_write( &MPU9DOF_PWR_MGMT_1, &MPU9DOF_DEFAULT, &LEN );
 8001258:	1dfb      	adds	r3, r7, #7
 800125a:	461a      	mov	r2, r3
 800125c:	490b      	ldr	r1, [pc, #44]	; (800128c <mpu9dof_default_cfg+0xe0>)
 800125e:	480a      	ldr	r0, [pc, #40]	; (8001288 <mpu9dof_default_cfg+0xdc>)
 8001260:	f000 fac8 	bl	80017f4 <mpu9dof_generic_write>
    HAL_Delay(10);
 8001264:	200a      	movs	r0, #10
 8001266:	f000 fe77 	bl	8001f58 <HAL_Delay>

    mpu9dof_generic_write( &MPU9DOF_PWR_MGMT_2, &MPU9DOF_DEFAULT, &LEN );
 800126a:	1dfb      	adds	r3, r7, #7
 800126c:	461a      	mov	r2, r3
 800126e:	4907      	ldr	r1, [pc, #28]	; (800128c <mpu9dof_default_cfg+0xe0>)
 8001270:	4814      	ldr	r0, [pc, #80]	; (80012c4 <mpu9dof_default_cfg+0x118>)
 8001272:	f000 fabf 	bl	80017f4 <mpu9dof_generic_write>
    HAL_Delay(10);
 8001276:	200a      	movs	r0, #10
 8001278:	f000 fe6e 	bl	8001f58 <HAL_Delay>
}
 800127c:	bf00      	nop
 800127e:	3708      	adds	r7, #8
 8001280:	46bd      	mov	sp, r7
 8001282:	bd80      	pop	{r7, pc}
 8001284:	08009aa4 	.word	0x08009aa4
 8001288:	08009ab1 	.word	0x08009ab1
 800128c:	08009aa5 	.word	0x08009aa5
 8001290:	08009aa9 	.word	0x08009aa9
 8001294:	08009aa6 	.word	0x08009aa6
 8001298:	08009aaa 	.word	0x08009aaa
 800129c:	08009ab3 	.word	0x08009ab3
 80012a0:	08009aab 	.word	0x08009aab
 80012a4:	08009ab4 	.word	0x08009ab4
 80012a8:	08009aac 	.word	0x08009aac
 80012ac:	08009aa7 	.word	0x08009aa7
 80012b0:	08009aad 	.word	0x08009aad
 80012b4:	08009aa8 	.word	0x08009aa8
 80012b8:	08009aae 	.word	0x08009aae
 80012bc:	08009aaf 	.word	0x08009aaf
 80012c0:	08009ab0 	.word	0x08009ab0
 80012c4:	08009ab2 	.word	0x08009ab2

080012c8 <mpu9dof_read>:
 * @brief:
 * @param:
 * @return:
 */
void mpu9dof_read(const uint8_t *sensor)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b084      	sub	sp, #16
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]
	uint8_t buffer[2] = {0};
 80012d0:	2300      	movs	r3, #0
 80012d2:	81bb      	strh	r3, [r7, #12]

	const uint8_t LEN = 2;
 80012d4:	2302      	movs	r3, #2
 80012d6:	72fb      	strb	r3, [r7, #11]

	switch(*sensor)
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	781b      	ldrb	r3, [r3, #0]
 80012dc:	2b01      	cmp	r3, #1
 80012de:	d002      	beq.n	80012e6 <mpu9dof_read+0x1e>
 80012e0:	2b02      	cmp	r3, #2
 80012e2:	d034      	beq.n	800134e <mpu9dof_read+0x86>
 80012e4:	e067      	b.n	80013b6 <mpu9dof_read+0xee>
	{
		case 1:
			mpu9dof_generic_read( &MPU9DOF_GYRO_XOUT_H, buffer, &LEN );
 80012e6:	f107 020b 	add.w	r2, r7, #11
 80012ea:	f107 030c 	add.w	r3, r7, #12
 80012ee:	4619      	mov	r1, r3
 80012f0:	4835      	ldr	r0, [pc, #212]	; (80013c8 <mpu9dof_read+0x100>)
 80012f2:	f000 fadb 	bl	80018ac <mpu9dof_generic_read>
			rawData.gyro[0] = (int16_t)(buffer[0] << 8 | buffer[1]);
 80012f6:	7b3b      	ldrb	r3, [r7, #12]
 80012f8:	021b      	lsls	r3, r3, #8
 80012fa:	b21a      	sxth	r2, r3
 80012fc:	7b7b      	ldrb	r3, [r7, #13]
 80012fe:	b21b      	sxth	r3, r3
 8001300:	4313      	orrs	r3, r2
 8001302:	b21a      	sxth	r2, r3
 8001304:	4b31      	ldr	r3, [pc, #196]	; (80013cc <mpu9dof_read+0x104>)
 8001306:	80da      	strh	r2, [r3, #6]

			mpu9dof_generic_read( &MPU9DOF_GYRO_YOUT_H, buffer, &LEN );
 8001308:	f107 020b 	add.w	r2, r7, #11
 800130c:	f107 030c 	add.w	r3, r7, #12
 8001310:	4619      	mov	r1, r3
 8001312:	482f      	ldr	r0, [pc, #188]	; (80013d0 <mpu9dof_read+0x108>)
 8001314:	f000 faca 	bl	80018ac <mpu9dof_generic_read>
			rawData.gyro[1] = (int16_t)(buffer[0] << 8 | buffer[1]);
 8001318:	7b3b      	ldrb	r3, [r7, #12]
 800131a:	021b      	lsls	r3, r3, #8
 800131c:	b21a      	sxth	r2, r3
 800131e:	7b7b      	ldrb	r3, [r7, #13]
 8001320:	b21b      	sxth	r3, r3
 8001322:	4313      	orrs	r3, r2
 8001324:	b21a      	sxth	r2, r3
 8001326:	4b29      	ldr	r3, [pc, #164]	; (80013cc <mpu9dof_read+0x104>)
 8001328:	811a      	strh	r2, [r3, #8]

			mpu9dof_generic_read( &MPU9DOF_GYRO_ZOUT_H, buffer, &LEN );
 800132a:	f107 020b 	add.w	r2, r7, #11
 800132e:	f107 030c 	add.w	r3, r7, #12
 8001332:	4619      	mov	r1, r3
 8001334:	4827      	ldr	r0, [pc, #156]	; (80013d4 <mpu9dof_read+0x10c>)
 8001336:	f000 fab9 	bl	80018ac <mpu9dof_generic_read>
			rawData.gyro[2] = (int16_t)(buffer[0] << 8 | buffer[1]);
 800133a:	7b3b      	ldrb	r3, [r7, #12]
 800133c:	021b      	lsls	r3, r3, #8
 800133e:	b21a      	sxth	r2, r3
 8001340:	7b7b      	ldrb	r3, [r7, #13]
 8001342:	b21b      	sxth	r3, r3
 8001344:	4313      	orrs	r3, r2
 8001346:	b21a      	sxth	r2, r3
 8001348:	4b20      	ldr	r3, [pc, #128]	; (80013cc <mpu9dof_read+0x104>)
 800134a:	815a      	strh	r2, [r3, #10]
			break;
 800134c:	e037      	b.n	80013be <mpu9dof_read+0xf6>

		case 2: /* Accel */
			mpu9dof_generic_read( &MPU9DOF_ACCEL_XOUT_H, buffer, &LEN );
 800134e:	f107 020b 	add.w	r2, r7, #11
 8001352:	f107 030c 	add.w	r3, r7, #12
 8001356:	4619      	mov	r1, r3
 8001358:	481f      	ldr	r0, [pc, #124]	; (80013d8 <mpu9dof_read+0x110>)
 800135a:	f000 faa7 	bl	80018ac <mpu9dof_generic_read>
		    rawData.acc[0] = (int16_t)(buffer[0] << 8 | buffer[1]);
 800135e:	7b3b      	ldrb	r3, [r7, #12]
 8001360:	021b      	lsls	r3, r3, #8
 8001362:	b21a      	sxth	r2, r3
 8001364:	7b7b      	ldrb	r3, [r7, #13]
 8001366:	b21b      	sxth	r3, r3
 8001368:	4313      	orrs	r3, r2
 800136a:	b21a      	sxth	r2, r3
 800136c:	4b17      	ldr	r3, [pc, #92]	; (80013cc <mpu9dof_read+0x104>)
 800136e:	801a      	strh	r2, [r3, #0]

		    mpu9dof_generic_read( &MPU9DOF_ACCEL_YOUT_H, buffer, &LEN );
 8001370:	f107 020b 	add.w	r2, r7, #11
 8001374:	f107 030c 	add.w	r3, r7, #12
 8001378:	4619      	mov	r1, r3
 800137a:	4818      	ldr	r0, [pc, #96]	; (80013dc <mpu9dof_read+0x114>)
 800137c:	f000 fa96 	bl	80018ac <mpu9dof_generic_read>
		    rawData.acc[1] = (int16_t)(buffer[0] << 8 | buffer[1]);
 8001380:	7b3b      	ldrb	r3, [r7, #12]
 8001382:	021b      	lsls	r3, r3, #8
 8001384:	b21a      	sxth	r2, r3
 8001386:	7b7b      	ldrb	r3, [r7, #13]
 8001388:	b21b      	sxth	r3, r3
 800138a:	4313      	orrs	r3, r2
 800138c:	b21a      	sxth	r2, r3
 800138e:	4b0f      	ldr	r3, [pc, #60]	; (80013cc <mpu9dof_read+0x104>)
 8001390:	805a      	strh	r2, [r3, #2]

		    mpu9dof_generic_read( &MPU9DOF_ACCEL_ZOUT_H, buffer, &LEN );
 8001392:	f107 020b 	add.w	r2, r7, #11
 8001396:	f107 030c 	add.w	r3, r7, #12
 800139a:	4619      	mov	r1, r3
 800139c:	4810      	ldr	r0, [pc, #64]	; (80013e0 <mpu9dof_read+0x118>)
 800139e:	f000 fa85 	bl	80018ac <mpu9dof_generic_read>
		    rawData.acc[2] = (int16_t)(buffer[0] << 8 | buffer[1]);
 80013a2:	7b3b      	ldrb	r3, [r7, #12]
 80013a4:	021b      	lsls	r3, r3, #8
 80013a6:	b21a      	sxth	r2, r3
 80013a8:	7b7b      	ldrb	r3, [r7, #13]
 80013aa:	b21b      	sxth	r3, r3
 80013ac:	4313      	orrs	r3, r2
 80013ae:	b21a      	sxth	r2, r3
 80013b0:	4b06      	ldr	r3, [pc, #24]	; (80013cc <mpu9dof_read+0x104>)
 80013b2:	809a      	strh	r2, [r3, #4]
			break;
 80013b4:	e003      	b.n	80013be <mpu9dof_read+0xf6>

		default:
			printf("passed wrong Argument to function");
 80013b6:	480b      	ldr	r0, [pc, #44]	; (80013e4 <mpu9dof_read+0x11c>)
 80013b8:	f007 f946 	bl	8008648 <iprintf>
	}
}
 80013bc:	bf00      	nop
 80013be:	bf00      	nop
 80013c0:	3710      	adds	r7, #16
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bd80      	pop	{r7, pc}
 80013c6:	bf00      	nop
 80013c8:	08009ab5 	.word	0x08009ab5
 80013cc:	200000f0 	.word	0x200000f0
 80013d0:	08009ab6 	.word	0x08009ab6
 80013d4:	08009ab7 	.word	0x08009ab7
 80013d8:	08009ab8 	.word	0x08009ab8
 80013dc:	08009ab9 	.word	0x08009ab9
 80013e0:	08009aba 	.word	0x08009aba
 80013e4:	08009964 	.word	0x08009964

080013e8 <mpu9dof_calibrate_module>:
 * @brief: Calibrates the 9DOF MPU module by summing sample data up and calculating the mean value out of it
 * @param: none
 * @return: none
 */
void mpu9dof_calibrate_module()
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b086      	sub	sp, #24
 80013ec:	af00      	add	r7, sp, #0
	const uint8_t GYRO = 1;
 80013ee:	2301      	movs	r3, #1
 80013f0:	73fb      	strb	r3, [r7, #15]

	int32_t gyro_sum[3] = {0, 0, 0};
 80013f2:	2300      	movs	r3, #0
 80013f4:	603b      	str	r3, [r7, #0]
 80013f6:	2300      	movs	r3, #0
 80013f8:	607b      	str	r3, [r7, #4]
 80013fa:	2300      	movs	r3, #0
 80013fc:	60bb      	str	r3, [r7, #8]

	for (size_t i = 0; i < CALIBRATION_SAMPLES; i++)
 80013fe:	2300      	movs	r3, #0
 8001400:	617b      	str	r3, [r7, #20]
 8001402:	e01c      	b.n	800143e <mpu9dof_calibrate_module+0x56>
	{
	        mpu9dof_read(&GYRO);
 8001404:	f107 030f 	add.w	r3, r7, #15
 8001408:	4618      	mov	r0, r3
 800140a:	f7ff ff5d 	bl	80012c8 <mpu9dof_read>
	        gyro_sum[0] += rawData.gyro[0];
 800140e:	683b      	ldr	r3, [r7, #0]
 8001410:	4a36      	ldr	r2, [pc, #216]	; (80014ec <mpu9dof_calibrate_module+0x104>)
 8001412:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 8001416:	4413      	add	r3, r2
 8001418:	603b      	str	r3, [r7, #0]
	        gyro_sum[1] += rawData.gyro[1];
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	4a33      	ldr	r2, [pc, #204]	; (80014ec <mpu9dof_calibrate_module+0x104>)
 800141e:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 8001422:	4413      	add	r3, r2
 8001424:	607b      	str	r3, [r7, #4]
	        gyro_sum[2] += rawData.gyro[2];
 8001426:	68bb      	ldr	r3, [r7, #8]
 8001428:	4a30      	ldr	r2, [pc, #192]	; (80014ec <mpu9dof_calibrate_module+0x104>)
 800142a:	f9b2 200a 	ldrsh.w	r2, [r2, #10]
 800142e:	4413      	add	r3, r2
 8001430:	60bb      	str	r3, [r7, #8]

	        // Delay to not exceed sensor's max data rate
	        HAL_Delay(10);
 8001432:	200a      	movs	r0, #10
 8001434:	f000 fd90 	bl	8001f58 <HAL_Delay>
	for (size_t i = 0; i < CALIBRATION_SAMPLES; i++)
 8001438:	697b      	ldr	r3, [r7, #20]
 800143a:	3301      	adds	r3, #1
 800143c:	617b      	str	r3, [r7, #20]
 800143e:	2332      	movs	r3, #50	; 0x32
 8001440:	461a      	mov	r2, r3
 8001442:	697b      	ldr	r3, [r7, #20]
 8001444:	4293      	cmp	r3, r2
 8001446:	d3dd      	bcc.n	8001404 <mpu9dof_calibrate_module+0x1c>
	}

    for (size_t i = 0; i < 3; i++)
 8001448:	2300      	movs	r3, #0
 800144a:	613b      	str	r3, [r7, #16]
 800144c:	e025      	b.n	800149a <mpu9dof_calibrate_module+0xb2>
    {
        offsetValues.gyro_offset[i] = gyro_sum[i] / CALIBRATION_SAMPLES;
 800144e:	693b      	ldr	r3, [r7, #16]
 8001450:	009b      	lsls	r3, r3, #2
 8001452:	3318      	adds	r3, #24
 8001454:	443b      	add	r3, r7
 8001456:	f853 3c18 	ldr.w	r3, [r3, #-24]
 800145a:	2232      	movs	r2, #50	; 0x32
 800145c:	fb93 f3f2 	sdiv	r3, r3, r2
 8001460:	b219      	sxth	r1, r3
 8001462:	4a23      	ldr	r2, [pc, #140]	; (80014f0 <mpu9dof_calibrate_module+0x108>)
 8001464:	693b      	ldr	r3, [r7, #16]
 8001466:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        calibratedData.gyro_calib[i] = rawData.gyro[i] - offsetValues.gyro_offset[i];
 800146a:	4a20      	ldr	r2, [pc, #128]	; (80014ec <mpu9dof_calibrate_module+0x104>)
 800146c:	693b      	ldr	r3, [r7, #16]
 800146e:	005b      	lsls	r3, r3, #1
 8001470:	4413      	add	r3, r2
 8001472:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8001476:	b29a      	uxth	r2, r3
 8001478:	491d      	ldr	r1, [pc, #116]	; (80014f0 <mpu9dof_calibrate_module+0x108>)
 800147a:	693b      	ldr	r3, [r7, #16]
 800147c:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
 8001480:	b29b      	uxth	r3, r3
 8001482:	1ad3      	subs	r3, r2, r3
 8001484:	b29b      	uxth	r3, r3
 8001486:	b219      	sxth	r1, r3
 8001488:	4a1a      	ldr	r2, [pc, #104]	; (80014f4 <mpu9dof_calibrate_module+0x10c>)
 800148a:	693b      	ldr	r3, [r7, #16]
 800148c:	005b      	lsls	r3, r3, #1
 800148e:	4413      	add	r3, r2
 8001490:	460a      	mov	r2, r1
 8001492:	80da      	strh	r2, [r3, #6]
    for (size_t i = 0; i < 3; i++)
 8001494:	693b      	ldr	r3, [r7, #16]
 8001496:	3301      	adds	r3, #1
 8001498:	613b      	str	r3, [r7, #16]
 800149a:	693b      	ldr	r3, [r7, #16]
 800149c:	2b02      	cmp	r3, #2
 800149e:	d9d6      	bls.n	800144e <mpu9dof_calibrate_module+0x66>
    }

    /* normal 1G offset of accel in Z-achsis */
    offsetValues.acc_offset[2] -= 16384.0;
 80014a0:	4b13      	ldr	r3, [pc, #76]	; (80014f0 <mpu9dof_calibrate_module+0x108>)
 80014a2:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80014a6:	4618      	mov	r0, r3
 80014a8:	f7ff f834 	bl	8000514 <__aeabi_i2d>
 80014ac:	f04f 0200 	mov.w	r2, #0
 80014b0:	4b11      	ldr	r3, [pc, #68]	; (80014f8 <mpu9dof_calibrate_module+0x110>)
 80014b2:	f7fe fee1 	bl	8000278 <__aeabi_dsub>
 80014b6:	4602      	mov	r2, r0
 80014b8:	460b      	mov	r3, r1
 80014ba:	4610      	mov	r0, r2
 80014bc:	4619      	mov	r1, r3
 80014be:	f7ff faa5 	bl	8000a0c <__aeabi_d2iz>
 80014c2:	4603      	mov	r3, r0
 80014c4:	b21a      	sxth	r2, r3
 80014c6:	4b0a      	ldr	r3, [pc, #40]	; (80014f0 <mpu9dof_calibrate_module+0x108>)
 80014c8:	815a      	strh	r2, [r3, #10]
    calibratedData.acc_calib[2] = rawData.acc[2] - offsetValues.acc_offset[2];
 80014ca:	4b08      	ldr	r3, [pc, #32]	; (80014ec <mpu9dof_calibrate_module+0x104>)
 80014cc:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80014d0:	b29a      	uxth	r2, r3
 80014d2:	4b07      	ldr	r3, [pc, #28]	; (80014f0 <mpu9dof_calibrate_module+0x108>)
 80014d4:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80014d8:	b29b      	uxth	r3, r3
 80014da:	1ad3      	subs	r3, r2, r3
 80014dc:	b29b      	uxth	r3, r3
 80014de:	b21a      	sxth	r2, r3
 80014e0:	4b04      	ldr	r3, [pc, #16]	; (80014f4 <mpu9dof_calibrate_module+0x10c>)
 80014e2:	809a      	strh	r2, [r3, #4]
}
 80014e4:	bf00      	nop
 80014e6:	3718      	adds	r7, #24
 80014e8:	46bd      	mov	sp, r7
 80014ea:	bd80      	pop	{r7, pc}
 80014ec:	200000f0 	.word	0x200000f0
 80014f0:	20000104 	.word	0x20000104
 80014f4:	20000110 	.word	0x20000110
 80014f8:	40d00000 	.word	0x40d00000
 80014fc:	00000000 	.word	0x00000000

08001500 <mpu9dof_process>:
 * @brief:
 * @param:
 * @return:
 */
void *mpu9dof_process()
{
 8001500:	b580      	push	{r7, lr}
 8001502:	b088      	sub	sp, #32
 8001504:	af00      	add	r7, sp, #0
		/* convert raw values to degrees/sec */
		float gyro_x_rate = (rawData.gyro[0] - offsetValues.gyro_offset[0]) / 131.0;
 8001506:	4b80      	ldr	r3, [pc, #512]	; (8001708 <mpu9dof_process+0x208>)
 8001508:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800150c:	461a      	mov	r2, r3
 800150e:	4b7f      	ldr	r3, [pc, #508]	; (800170c <mpu9dof_process+0x20c>)
 8001510:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001514:	1ad3      	subs	r3, r2, r3
 8001516:	4618      	mov	r0, r3
 8001518:	f7fe fffc 	bl	8000514 <__aeabi_i2d>
 800151c:	a378      	add	r3, pc, #480	; (adr r3, 8001700 <mpu9dof_process+0x200>)
 800151e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001522:	f7ff f98b 	bl	800083c <__aeabi_ddiv>
 8001526:	4602      	mov	r2, r0
 8001528:	460b      	mov	r3, r1
 800152a:	4610      	mov	r0, r2
 800152c:	4619      	mov	r1, r3
 800152e:	f7ff fa95 	bl	8000a5c <__aeabi_d2f>
 8001532:	4603      	mov	r3, r0
 8001534:	61fb      	str	r3, [r7, #28]
		float gyro_y_rate = (rawData.gyro[1] - offsetValues.gyro_offset[1]) / 131.0;
 8001536:	4b74      	ldr	r3, [pc, #464]	; (8001708 <mpu9dof_process+0x208>)
 8001538:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800153c:	461a      	mov	r2, r3
 800153e:	4b73      	ldr	r3, [pc, #460]	; (800170c <mpu9dof_process+0x20c>)
 8001540:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001544:	1ad3      	subs	r3, r2, r3
 8001546:	4618      	mov	r0, r3
 8001548:	f7fe ffe4 	bl	8000514 <__aeabi_i2d>
 800154c:	a36c      	add	r3, pc, #432	; (adr r3, 8001700 <mpu9dof_process+0x200>)
 800154e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001552:	f7ff f973 	bl	800083c <__aeabi_ddiv>
 8001556:	4602      	mov	r2, r0
 8001558:	460b      	mov	r3, r1
 800155a:	4610      	mov	r0, r2
 800155c:	4619      	mov	r1, r3
 800155e:	f7ff fa7d 	bl	8000a5c <__aeabi_d2f>
 8001562:	4603      	mov	r3, r0
 8001564:	61bb      	str	r3, [r7, #24]

		/* convert raw values to G's */
		float acc_x = rawData.acc[0] / 4096.0;
 8001566:	4b68      	ldr	r3, [pc, #416]	; (8001708 <mpu9dof_process+0x208>)
 8001568:	f9b3 3000 	ldrsh.w	r3, [r3]
 800156c:	4618      	mov	r0, r3
 800156e:	f7fe ffd1 	bl	8000514 <__aeabi_i2d>
 8001572:	f04f 0200 	mov.w	r2, #0
 8001576:	4b66      	ldr	r3, [pc, #408]	; (8001710 <mpu9dof_process+0x210>)
 8001578:	f7ff f960 	bl	800083c <__aeabi_ddiv>
 800157c:	4602      	mov	r2, r0
 800157e:	460b      	mov	r3, r1
 8001580:	4610      	mov	r0, r2
 8001582:	4619      	mov	r1, r3
 8001584:	f7ff fa6a 	bl	8000a5c <__aeabi_d2f>
 8001588:	4603      	mov	r3, r0
 800158a:	617b      	str	r3, [r7, #20]
		float acc_y = rawData.acc[1] / 4096.0;
 800158c:	4b5e      	ldr	r3, [pc, #376]	; (8001708 <mpu9dof_process+0x208>)
 800158e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001592:	4618      	mov	r0, r3
 8001594:	f7fe ffbe 	bl	8000514 <__aeabi_i2d>
 8001598:	f04f 0200 	mov.w	r2, #0
 800159c:	4b5c      	ldr	r3, [pc, #368]	; (8001710 <mpu9dof_process+0x210>)
 800159e:	f7ff f94d 	bl	800083c <__aeabi_ddiv>
 80015a2:	4602      	mov	r2, r0
 80015a4:	460b      	mov	r3, r1
 80015a6:	4610      	mov	r0, r2
 80015a8:	4619      	mov	r1, r3
 80015aa:	f7ff fa57 	bl	8000a5c <__aeabi_d2f>
 80015ae:	4603      	mov	r3, r0
 80015b0:	613b      	str	r3, [r7, #16]
		float acc_z = rawData.acc[2] / 4096.0;
 80015b2:	4b55      	ldr	r3, [pc, #340]	; (8001708 <mpu9dof_process+0x208>)
 80015b4:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80015b8:	4618      	mov	r0, r3
 80015ba:	f7fe ffab 	bl	8000514 <__aeabi_i2d>
 80015be:	f04f 0200 	mov.w	r2, #0
 80015c2:	4b53      	ldr	r3, [pc, #332]	; (8001710 <mpu9dof_process+0x210>)
 80015c4:	f7ff f93a 	bl	800083c <__aeabi_ddiv>
 80015c8:	4602      	mov	r2, r0
 80015ca:	460b      	mov	r3, r1
 80015cc:	4610      	mov	r0, r2
 80015ce:	4619      	mov	r1, r3
 80015d0:	f7ff fa44 	bl	8000a5c <__aeabi_d2f>
 80015d4:	4603      	mov	r3, r0
 80015d6:	60fb      	str	r3, [r7, #12]

		/* calculate angle from accelerometer data */
		float roll_acc = atan2f(acc_x, acc_z) * RAD_TO_DEG;
 80015d8:	edd7 0a03 	vldr	s1, [r7, #12]
 80015dc:	ed97 0a05 	vldr	s0, [r7, #20]
 80015e0:	f007 ffe2 	bl	80095a8 <atan2f>
 80015e4:	eef0 7a40 	vmov.f32	s15, s0
 80015e8:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 8001714 <mpu9dof_process+0x214>
 80015ec:	ee67 7a87 	vmul.f32	s15, s15, s14
 80015f0:	edc7 7a02 	vstr	s15, [r7, #8]
		float pitch_acc = atan2f(acc_y, acc_z) * RAD_TO_DEG;
 80015f4:	edd7 0a03 	vldr	s1, [r7, #12]
 80015f8:	ed97 0a04 	vldr	s0, [r7, #16]
 80015fc:	f007 ffd4 	bl	80095a8 <atan2f>
 8001600:	eef0 7a40 	vmov.f32	s15, s0
 8001604:	ed9f 7a43 	vldr	s14, [pc, #268]	; 8001714 <mpu9dof_process+0x214>
 8001608:	ee67 7a87 	vmul.f32	s15, s15, s14
 800160c:	edc7 7a01 	vstr	s15, [r7, #4]

		/* apply the complementary filter */
		processedData.roll = COMPLEMENTARY_RATIO * (processedData.roll - gyro_y_rate * DELTA_TIME) + (1 - COMPLEMENTARY_RATIO) * roll_acc;
 8001610:	4b41      	ldr	r3, [pc, #260]	; (8001718 <mpu9dof_process+0x218>)
 8001612:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001616:	ee07 3a90 	vmov	s15, r3
 800161a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800161e:	eddf 6a3f 	vldr	s13, [pc, #252]	; 800171c <mpu9dof_process+0x21c>
 8001622:	edd7 7a06 	vldr	s15, [r7, #24]
 8001626:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800162a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800162e:	ed9f 7a3c 	vldr	s14, [pc, #240]	; 8001720 <mpu9dof_process+0x220>
 8001632:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001636:	eddf 7a3a 	vldr	s15, [pc, #232]	; 8001720 <mpu9dof_process+0x220>
 800163a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800163e:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001642:	edd7 7a02 	vldr	s15, [r7, #8]
 8001646:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800164a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800164e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001652:	ee17 3a90 	vmov	r3, s15
 8001656:	b21a      	sxth	r2, r3
 8001658:	4b2f      	ldr	r3, [pc, #188]	; (8001718 <mpu9dof_process+0x218>)
 800165a:	801a      	strh	r2, [r3, #0]
		processedData.pitch = COMPLEMENTARY_RATIO * (processedData.pitch + gyro_x_rate * DELTA_TIME) + (1 - COMPLEMENTARY_RATIO) * pitch_acc;
 800165c:	4b2e      	ldr	r3, [pc, #184]	; (8001718 <mpu9dof_process+0x218>)
 800165e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001662:	ee07 3a90 	vmov	s15, r3
 8001666:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800166a:	eddf 6a2c 	vldr	s13, [pc, #176]	; 800171c <mpu9dof_process+0x21c>
 800166e:	edd7 7a07 	vldr	s15, [r7, #28]
 8001672:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001676:	ee77 7a27 	vadd.f32	s15, s14, s15
 800167a:	ed9f 7a29 	vldr	s14, [pc, #164]	; 8001720 <mpu9dof_process+0x220>
 800167e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001682:	eddf 7a27 	vldr	s15, [pc, #156]	; 8001720 <mpu9dof_process+0x220>
 8001686:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800168a:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800168e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001692:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001696:	ee77 7a27 	vadd.f32	s15, s14, s15
 800169a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800169e:	ee17 3a90 	vmov	r3, s15
 80016a2:	b21a      	sxth	r2, r3
 80016a4:	4b1c      	ldr	r3, [pc, #112]	; (8001718 <mpu9dof_process+0x218>)
 80016a6:	805a      	strh	r2, [r3, #2]

		/* shake detection */
		float magnitude = sqrtf(acc_x * acc_x + acc_y * acc_y + acc_z * acc_z);
 80016a8:	edd7 7a05 	vldr	s15, [r7, #20]
 80016ac:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80016b0:	edd7 7a04 	vldr	s15, [r7, #16]
 80016b4:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80016b8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80016bc:	edd7 7a03 	vldr	s15, [r7, #12]
 80016c0:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80016c4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80016c8:	eeb0 0a67 	vmov.f32	s0, s15
 80016cc:	f007 ff6e 	bl	80095ac <sqrtf>
 80016d0:	ed87 0a00 	vstr	s0, [r7]


		if (magnitude > SHAKE_THRESHOLD)
 80016d4:	eeb0 7a04 	vmov.f32	s14, #4	; 0x40200000  2.5
 80016d8:	edd7 7a00 	vldr	s15, [r7]
 80016dc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80016e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016e4:	dd03      	ble.n	80016ee <mpu9dof_process+0x1ee>
		{
			processedData.shake = 0;
 80016e6:	4b0c      	ldr	r3, [pc, #48]	; (8001718 <mpu9dof_process+0x218>)
 80016e8:	2200      	movs	r2, #0
 80016ea:	711a      	strb	r2, [r3, #4]
 80016ec:	e002      	b.n	80016f4 <mpu9dof_process+0x1f4>
		}
		else
		{
			processedData.shake = 1;
 80016ee:	4b0a      	ldr	r3, [pc, #40]	; (8001718 <mpu9dof_process+0x218>)
 80016f0:	2201      	movs	r2, #1
 80016f2:	711a      	strb	r2, [r3, #4]
		}
		return &processedData;
 80016f4:	4b08      	ldr	r3, [pc, #32]	; (8001718 <mpu9dof_process+0x218>)
}
 80016f6:	4618      	mov	r0, r3
 80016f8:	3720      	adds	r7, #32
 80016fa:	46bd      	mov	sp, r7
 80016fc:	bd80      	pop	{r7, pc}
 80016fe:	bf00      	nop
 8001700:	00000000 	.word	0x00000000
 8001704:	40606000 	.word	0x40606000
 8001708:	200000f0 	.word	0x200000f0
 800170c:	20000104 	.word	0x20000104
 8001710:	40b00000 	.word	0x40b00000
 8001714:	42652ee1 	.word	0x42652ee1
 8001718:	200000fc 	.word	0x200000fc
 800171c:	3d088889 	.word	0x3d088889
 8001720:	3f7ae148 	.word	0x3f7ae148

08001724 <mpu9dof_log_data>:
 * @brief:
 * @param:
 * @return:
 */
void mpu9dof_log_data(const uint8_t *data )
{
 8001724:	b580      	push	{r7, lr}
 8001726:	b082      	sub	sp, #8
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
	switch(*data)
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	781b      	ldrb	r3, [r3, #0]
 8001730:	3b01      	subs	r3, #1
 8001732:	2b03      	cmp	r3, #3
 8001734:	d844      	bhi.n	80017c0 <mpu9dof_log_data+0x9c>
 8001736:	a201      	add	r2, pc, #4	; (adr r2, 800173c <mpu9dof_log_data+0x18>)
 8001738:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800173c:	0800174d 	.word	0x0800174d
 8001740:	08001787 	.word	0x08001787
 8001744:	080017c9 	.word	0x080017c9
 8001748:	080017a5 	.word	0x080017a5
	{
		/* log the raw data */
		case 1:
			 printf("raw-acc: x=%d, y=%d, z=%d\r\n", rawData.acc[0], rawData.acc[1], rawData.acc[2]);
 800174c:	4b21      	ldr	r3, [pc, #132]	; (80017d4 <mpu9dof_log_data+0xb0>)
 800174e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001752:	4619      	mov	r1, r3
 8001754:	4b1f      	ldr	r3, [pc, #124]	; (80017d4 <mpu9dof_log_data+0xb0>)
 8001756:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800175a:	461a      	mov	r2, r3
 800175c:	4b1d      	ldr	r3, [pc, #116]	; (80017d4 <mpu9dof_log_data+0xb0>)
 800175e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001762:	481d      	ldr	r0, [pc, #116]	; (80017d8 <mpu9dof_log_data+0xb4>)
 8001764:	f006 ff70 	bl	8008648 <iprintf>
			 printf("raw-gyr: x=%d, y=%d, z=%d\r\n", rawData.gyro[0], rawData.gyro[1], rawData.gyro[2]);
 8001768:	4b1a      	ldr	r3, [pc, #104]	; (80017d4 <mpu9dof_log_data+0xb0>)
 800176a:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800176e:	4619      	mov	r1, r3
 8001770:	4b18      	ldr	r3, [pc, #96]	; (80017d4 <mpu9dof_log_data+0xb0>)
 8001772:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001776:	461a      	mov	r2, r3
 8001778:	4b16      	ldr	r3, [pc, #88]	; (80017d4 <mpu9dof_log_data+0xb0>)
 800177a:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800177e:	4817      	ldr	r0, [pc, #92]	; (80017dc <mpu9dof_log_data+0xb8>)
 8001780:	f006 ff62 	bl	8008648 <iprintf>
			break;
 8001784:	e021      	b.n	80017ca <mpu9dof_log_data+0xa6>

		/* log the calibration offset */
		case 2:
			 printf("offset-gyro: x=%d, y=%d, z=%d\r\n", offsetValues.gyro_offset[0], offsetValues.gyro_offset[1], offsetValues.gyro_offset[2]);
 8001786:	4b16      	ldr	r3, [pc, #88]	; (80017e0 <mpu9dof_log_data+0xbc>)
 8001788:	f9b3 3000 	ldrsh.w	r3, [r3]
 800178c:	4619      	mov	r1, r3
 800178e:	4b14      	ldr	r3, [pc, #80]	; (80017e0 <mpu9dof_log_data+0xbc>)
 8001790:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001794:	461a      	mov	r2, r3
 8001796:	4b12      	ldr	r3, [pc, #72]	; (80017e0 <mpu9dof_log_data+0xbc>)
 8001798:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800179c:	4811      	ldr	r0, [pc, #68]	; (80017e4 <mpu9dof_log_data+0xc0>)
 800179e:	f006 ff53 	bl	8008648 <iprintf>
			break;
 80017a2:	e012      	b.n	80017ca <mpu9dof_log_data+0xa6>
			/* TODO */
			break;

		/* log the processed final data */
		case 4:
			printf("final: roll=%d, pitch=%d, shake=%d\r\n", processedData.roll, processedData.pitch, processedData.shake);
 80017a4:	4b10      	ldr	r3, [pc, #64]	; (80017e8 <mpu9dof_log_data+0xc4>)
 80017a6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80017aa:	4619      	mov	r1, r3
 80017ac:	4b0e      	ldr	r3, [pc, #56]	; (80017e8 <mpu9dof_log_data+0xc4>)
 80017ae:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80017b2:	461a      	mov	r2, r3
 80017b4:	4b0c      	ldr	r3, [pc, #48]	; (80017e8 <mpu9dof_log_data+0xc4>)
 80017b6:	791b      	ldrb	r3, [r3, #4]
 80017b8:	480c      	ldr	r0, [pc, #48]	; (80017ec <mpu9dof_log_data+0xc8>)
 80017ba:	f006 ff45 	bl	8008648 <iprintf>
			break;
 80017be:	e004      	b.n	80017ca <mpu9dof_log_data+0xa6>

		default:
			printf("** ERROR: Passed Wrong Values! **\r\n");
 80017c0:	480b      	ldr	r0, [pc, #44]	; (80017f0 <mpu9dof_log_data+0xcc>)
 80017c2:	f006 ffc7 	bl	8008754 <puts>
	}
}
 80017c6:	e000      	b.n	80017ca <mpu9dof_log_data+0xa6>
			break;
 80017c8:	bf00      	nop
}
 80017ca:	bf00      	nop
 80017cc:	3708      	adds	r7, #8
 80017ce:	46bd      	mov	sp, r7
 80017d0:	bd80      	pop	{r7, pc}
 80017d2:	bf00      	nop
 80017d4:	200000f0 	.word	0x200000f0
 80017d8:	08009988 	.word	0x08009988
 80017dc:	080099a4 	.word	0x080099a4
 80017e0:	20000104 	.word	0x20000104
 80017e4:	080099c0 	.word	0x080099c0
 80017e8:	200000fc 	.word	0x200000fc
 80017ec:	080099e0 	.word	0x080099e0
 80017f0:	08009a08 	.word	0x08009a08

080017f4 <mpu9dof_generic_write>:
 * @brief:
 * @param:
 * @return:
 */
void mpu9dof_generic_write (const uint8_t *reg, const uint8_t *data_buf, const uint8_t *len )
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b0c6      	sub	sp, #280	; 0x118
 80017f8:	af02      	add	r7, sp, #8
 80017fa:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80017fe:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001802:	6018      	str	r0, [r3, #0]
 8001804:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001808:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800180c:	6019      	str	r1, [r3, #0]
 800180e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001812:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001816:	601a      	str	r2, [r3, #0]
	taskENTER_CRITICAL();
 8001818:	f006 fa3c 	bl	8007c94 <vPortEnterCritical>
	uint8_t data[256] = {0};
 800181c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001820:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001824:	2200      	movs	r2, #0
 8001826:	601a      	str	r2, [r3, #0]
 8001828:	3304      	adds	r3, #4
 800182a:	22fc      	movs	r2, #252	; 0xfc
 800182c:	2100      	movs	r1, #0
 800182e:	4618      	mov	r0, r3
 8001830:	f006 fe6d 	bl	800850e <memset>

	data[0] = *reg;
 8001834:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001838:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	781a      	ldrb	r2, [r3, #0]
 8001840:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001844:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001848:	701a      	strb	r2, [r3, #0]
	memcpy(&data[1], data_buf, *len);
 800184a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800184e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	781b      	ldrb	r3, [r3, #0]
 8001856:	4619      	mov	r1, r3
 8001858:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800185c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001860:	f107 0210 	add.w	r2, r7, #16
 8001864:	1c50      	adds	r0, r2, #1
 8001866:	460a      	mov	r2, r1
 8001868:	6819      	ldr	r1, [r3, #0]
 800186a:	f006 fe42 	bl	80084f2 <memcpy>

    HAL_I2C_Master_Transmit(&hi2c1, MPU9DOF_XLG_I2C_ADDR_1<<1, data, (*len) + 1, HAL_MAX_DELAY);
 800186e:	2369      	movs	r3, #105	; 0x69
 8001870:	b29b      	uxth	r3, r3
 8001872:	005b      	lsls	r3, r3, #1
 8001874:	b299      	uxth	r1, r3
 8001876:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800187a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	781b      	ldrb	r3, [r3, #0]
 8001882:	b29b      	uxth	r3, r3
 8001884:	3301      	adds	r3, #1
 8001886:	b29b      	uxth	r3, r3
 8001888:	f107 0210 	add.w	r2, r7, #16
 800188c:	f04f 30ff 	mov.w	r0, #4294967295
 8001890:	9000      	str	r0, [sp, #0]
 8001892:	4805      	ldr	r0, [pc, #20]	; (80018a8 <mpu9dof_generic_write+0xb4>)
 8001894:	f000 fe60 	bl	8002558 <HAL_I2C_Master_Transmit>
    taskEXIT_CRITICAL();
 8001898:	f006 fa2c 	bl	8007cf4 <vPortExitCritical>
}
 800189c:	bf00      	nop
 800189e:	f507 7788 	add.w	r7, r7, #272	; 0x110
 80018a2:	46bd      	mov	sp, r7
 80018a4:	bd80      	pop	{r7, pc}
 80018a6:	bf00      	nop
 80018a8:	2000009c 	.word	0x2000009c

080018ac <mpu9dof_generic_read>:
 * @brief:
 * @param:
 * @return:
 */
void mpu9dof_generic_read(const uint8_t *reg, uint8_t *data_buf, const uint8_t *len)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b088      	sub	sp, #32
 80018b0:	af04      	add	r7, sp, #16
 80018b2:	60f8      	str	r0, [r7, #12]
 80018b4:	60b9      	str	r1, [r7, #8]
 80018b6:	607a      	str	r2, [r7, #4]
	taskENTER_CRITICAL();
 80018b8:	f006 f9ec 	bl	8007c94 <vPortEnterCritical>
	HAL_I2C_Mem_Read(&hi2c1, MPU9DOF_XLG_I2C_ADDR_1<<1, *reg, I2C_MEMADD_SIZE_8BIT, data_buf, *len, HAL_MAX_DELAY);
 80018bc:	2369      	movs	r3, #105	; 0x69
 80018be:	b29b      	uxth	r3, r3
 80018c0:	005b      	lsls	r3, r3, #1
 80018c2:	b299      	uxth	r1, r3
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	781b      	ldrb	r3, [r3, #0]
 80018c8:	b29a      	uxth	r2, r3
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	781b      	ldrb	r3, [r3, #0]
 80018ce:	b29b      	uxth	r3, r3
 80018d0:	f04f 30ff 	mov.w	r0, #4294967295
 80018d4:	9002      	str	r0, [sp, #8]
 80018d6:	9301      	str	r3, [sp, #4]
 80018d8:	68bb      	ldr	r3, [r7, #8]
 80018da:	9300      	str	r3, [sp, #0]
 80018dc:	2301      	movs	r3, #1
 80018de:	4804      	ldr	r0, [pc, #16]	; (80018f0 <mpu9dof_generic_read+0x44>)
 80018e0:	f000 ff2e 	bl	8002740 <HAL_I2C_Mem_Read>
	taskEXIT_CRITICAL();
 80018e4:	f006 fa06 	bl	8007cf4 <vPortExitCritical>
}
 80018e8:	bf00      	nop
 80018ea:	3710      	adds	r7, #16
 80018ec:	46bd      	mov	sp, r7
 80018ee:	bd80      	pop	{r7, pc}
 80018f0:	2000009c 	.word	0x2000009c

080018f4 <RetargetInit>:
#define STDOUT_FILENO 1
#define STDERR_FILENO 2

UART_HandleTypeDef *gHuart;

void RetargetInit(UART_HandleTypeDef *huart) {
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b082      	sub	sp, #8
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]
  gHuart = huart;
 80018fc:	4a07      	ldr	r2, [pc, #28]	; (800191c <RetargetInit+0x28>)
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	6013      	str	r3, [r2, #0]

  /* Disable I/O buffering for STDOUT stream, so that
   * chars are sent out as soon as they are printed. */
  setvbuf(stdout, NULL, _IONBF, 0);
 8001902:	4b07      	ldr	r3, [pc, #28]	; (8001920 <RetargetInit+0x2c>)
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	6898      	ldr	r0, [r3, #8]
 8001908:	2300      	movs	r3, #0
 800190a:	2202      	movs	r2, #2
 800190c:	2100      	movs	r1, #0
 800190e:	f006 ffa3 	bl	8008858 <setvbuf>
}
 8001912:	bf00      	nop
 8001914:	3708      	adds	r7, #8
 8001916:	46bd      	mov	sp, r7
 8001918:	bd80      	pop	{r7, pc}
 800191a:	bf00      	nop
 800191c:	2000011c 	.word	0x2000011c
 8001920:	20000010 	.word	0x20000010

08001924 <_isatty>:

int _isatty(int fd) {
 8001924:	b580      	push	{r7, lr}
 8001926:	b082      	sub	sp, #8
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	2b00      	cmp	r3, #0
 8001930:	db04      	blt.n	800193c <_isatty+0x18>
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	2b02      	cmp	r3, #2
 8001936:	dc01      	bgt.n	800193c <_isatty+0x18>
    return 1;
 8001938:	2301      	movs	r3, #1
 800193a:	e005      	b.n	8001948 <_isatty+0x24>

  errno = EBADF;
 800193c:	f006 fcb6 	bl	80082ac <__errno>
 8001940:	4603      	mov	r3, r0
 8001942:	2209      	movs	r2, #9
 8001944:	601a      	str	r2, [r3, #0]
  return 0;
 8001946:	2300      	movs	r3, #0
}
 8001948:	4618      	mov	r0, r3
 800194a:	3708      	adds	r7, #8
 800194c:	46bd      	mov	sp, r7
 800194e:	bd80      	pop	{r7, pc}

08001950 <_write>:

int _write(int fd, char* ptr, int len) {
 8001950:	b580      	push	{r7, lr}
 8001952:	b086      	sub	sp, #24
 8001954:	af00      	add	r7, sp, #0
 8001956:	60f8      	str	r0, [r7, #12]
 8001958:	60b9      	str	r1, [r7, #8]
 800195a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDOUT_FILENO || fd == STDERR_FILENO) {
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	2b01      	cmp	r3, #1
 8001960:	d002      	beq.n	8001968 <_write+0x18>
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	2b02      	cmp	r3, #2
 8001966:	d111      	bne.n	800198c <_write+0x3c>
    hstatus = HAL_UART_Transmit(gHuart, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 8001968:	4b0e      	ldr	r3, [pc, #56]	; (80019a4 <_write+0x54>)
 800196a:	6818      	ldr	r0, [r3, #0]
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	b29a      	uxth	r2, r3
 8001970:	f04f 33ff 	mov.w	r3, #4294967295
 8001974:	68b9      	ldr	r1, [r7, #8]
 8001976:	f002 ff8b 	bl	8004890 <HAL_UART_Transmit>
 800197a:	4603      	mov	r3, r0
 800197c:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 800197e:	7dfb      	ldrb	r3, [r7, #23]
 8001980:	2b00      	cmp	r3, #0
 8001982:	d101      	bne.n	8001988 <_write+0x38>
      return len;
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	e008      	b.n	800199a <_write+0x4a>
    else
      return EIO;
 8001988:	2305      	movs	r3, #5
 800198a:	e006      	b.n	800199a <_write+0x4a>
  }
  errno = EBADF;
 800198c:	f006 fc8e 	bl	80082ac <__errno>
 8001990:	4603      	mov	r3, r0
 8001992:	2209      	movs	r2, #9
 8001994:	601a      	str	r2, [r3, #0]
  return -1;
 8001996:	f04f 33ff 	mov.w	r3, #4294967295
}
 800199a:	4618      	mov	r0, r3
 800199c:	3718      	adds	r7, #24
 800199e:	46bd      	mov	sp, r7
 80019a0:	bd80      	pop	{r7, pc}
 80019a2:	bf00      	nop
 80019a4:	2000011c 	.word	0x2000011c

080019a8 <_close>:

int _close(int fd) {
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b082      	sub	sp, #8
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	db04      	blt.n	80019c0 <_close+0x18>
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	2b02      	cmp	r3, #2
 80019ba:	dc01      	bgt.n	80019c0 <_close+0x18>
    return 0;
 80019bc:	2300      	movs	r3, #0
 80019be:	e006      	b.n	80019ce <_close+0x26>

  errno = EBADF;
 80019c0:	f006 fc74 	bl	80082ac <__errno>
 80019c4:	4603      	mov	r3, r0
 80019c6:	2209      	movs	r2, #9
 80019c8:	601a      	str	r2, [r3, #0]
  return -1;
 80019ca:	f04f 33ff 	mov.w	r3, #4294967295
}
 80019ce:	4618      	mov	r0, r3
 80019d0:	3708      	adds	r7, #8
 80019d2:	46bd      	mov	sp, r7
 80019d4:	bd80      	pop	{r7, pc}

080019d6 <_lseek>:

int _lseek(int fd, int ptr, int dir) {
 80019d6:	b580      	push	{r7, lr}
 80019d8:	b084      	sub	sp, #16
 80019da:	af00      	add	r7, sp, #0
 80019dc:	60f8      	str	r0, [r7, #12]
 80019de:	60b9      	str	r1, [r7, #8]
 80019e0:	607a      	str	r2, [r7, #4]
  (void) fd;
  (void) ptr;
  (void) dir;

  errno = EBADF;
 80019e2:	f006 fc63 	bl	80082ac <__errno>
 80019e6:	4603      	mov	r3, r0
 80019e8:	2209      	movs	r2, #9
 80019ea:	601a      	str	r2, [r3, #0]
  return -1;
 80019ec:	f04f 33ff 	mov.w	r3, #4294967295
}
 80019f0:	4618      	mov	r0, r3
 80019f2:	3710      	adds	r7, #16
 80019f4:	46bd      	mov	sp, r7
 80019f6:	bd80      	pop	{r7, pc}

080019f8 <_read>:

int _read(int fd, char* ptr, int len) {
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b086      	sub	sp, #24
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	60f8      	str	r0, [r7, #12]
 8001a00:	60b9      	str	r1, [r7, #8]
 8001a02:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDIN_FILENO) {
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d110      	bne.n	8001a2c <_read+0x34>
    hstatus = HAL_UART_Receive(gHuart, (uint8_t *) ptr, 1, HAL_MAX_DELAY);
 8001a0a:	4b0e      	ldr	r3, [pc, #56]	; (8001a44 <_read+0x4c>)
 8001a0c:	6818      	ldr	r0, [r3, #0]
 8001a0e:	f04f 33ff 	mov.w	r3, #4294967295
 8001a12:	2201      	movs	r2, #1
 8001a14:	68b9      	ldr	r1, [r7, #8]
 8001a16:	f002 ffcf 	bl	80049b8 <HAL_UART_Receive>
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 8001a1e:	7dfb      	ldrb	r3, [r7, #23]
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d101      	bne.n	8001a28 <_read+0x30>
      return 1;
 8001a24:	2301      	movs	r3, #1
 8001a26:	e008      	b.n	8001a3a <_read+0x42>
    else
      return EIO;
 8001a28:	2305      	movs	r3, #5
 8001a2a:	e006      	b.n	8001a3a <_read+0x42>
  }
  errno = EBADF;
 8001a2c:	f006 fc3e 	bl	80082ac <__errno>
 8001a30:	4603      	mov	r3, r0
 8001a32:	2209      	movs	r2, #9
 8001a34:	601a      	str	r2, [r3, #0]
  return -1;
 8001a36:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	3718      	adds	r7, #24
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	bd80      	pop	{r7, pc}
 8001a42:	bf00      	nop
 8001a44:	2000011c 	.word	0x2000011c

08001a48 <_fstat>:

int _fstat(int fd, struct stat* st) {
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b082      	sub	sp, #8
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
 8001a50:	6039      	str	r1, [r7, #0]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO) {
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	db08      	blt.n	8001a6a <_fstat+0x22>
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	2b02      	cmp	r3, #2
 8001a5c:	dc05      	bgt.n	8001a6a <_fstat+0x22>
    st->st_mode = S_IFCHR;
 8001a5e:	683b      	ldr	r3, [r7, #0]
 8001a60:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001a64:	605a      	str	r2, [r3, #4]
    return 0;
 8001a66:	2300      	movs	r3, #0
 8001a68:	e005      	b.n	8001a76 <_fstat+0x2e>
  }

  errno = EBADF;
 8001a6a:	f006 fc1f 	bl	80082ac <__errno>
 8001a6e:	4603      	mov	r3, r0
 8001a70:	2209      	movs	r2, #9
 8001a72:	601a      	str	r2, [r3, #0]
  return 0;
 8001a74:	2300      	movs	r3, #0
}
 8001a76:	4618      	mov	r0, r3
 8001a78:	3708      	adds	r7, #8
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	bd80      	pop	{r7, pc}
	...

08001a80 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b082      	sub	sp, #8
 8001a84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a86:	4b11      	ldr	r3, [pc, #68]	; (8001acc <HAL_MspInit+0x4c>)
 8001a88:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a8a:	4a10      	ldr	r2, [pc, #64]	; (8001acc <HAL_MspInit+0x4c>)
 8001a8c:	f043 0301 	orr.w	r3, r3, #1
 8001a90:	6613      	str	r3, [r2, #96]	; 0x60
 8001a92:	4b0e      	ldr	r3, [pc, #56]	; (8001acc <HAL_MspInit+0x4c>)
 8001a94:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a96:	f003 0301 	and.w	r3, r3, #1
 8001a9a:	607b      	str	r3, [r7, #4]
 8001a9c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a9e:	4b0b      	ldr	r3, [pc, #44]	; (8001acc <HAL_MspInit+0x4c>)
 8001aa0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001aa2:	4a0a      	ldr	r2, [pc, #40]	; (8001acc <HAL_MspInit+0x4c>)
 8001aa4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001aa8:	6593      	str	r3, [r2, #88]	; 0x58
 8001aaa:	4b08      	ldr	r3, [pc, #32]	; (8001acc <HAL_MspInit+0x4c>)
 8001aac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001aae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ab2:	603b      	str	r3, [r7, #0]
 8001ab4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	210f      	movs	r1, #15
 8001aba:	f06f 0001 	mvn.w	r0, #1
 8001abe:	f000 fb27 	bl	8002110 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ac2:	bf00      	nop
 8001ac4:	3708      	adds	r7, #8
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	bd80      	pop	{r7, pc}
 8001aca:	bf00      	nop
 8001acc:	40021000 	.word	0x40021000

08001ad0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b08c      	sub	sp, #48	; 0x30
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8001ad8:	2300      	movs	r3, #0
 8001ada:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Enable TIM16 clock */
  __HAL_RCC_TIM16_CLK_ENABLE();
 8001ade:	4b2e      	ldr	r3, [pc, #184]	; (8001b98 <HAL_InitTick+0xc8>)
 8001ae0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ae2:	4a2d      	ldr	r2, [pc, #180]	; (8001b98 <HAL_InitTick+0xc8>)
 8001ae4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ae8:	6613      	str	r3, [r2, #96]	; 0x60
 8001aea:	4b2b      	ldr	r3, [pc, #172]	; (8001b98 <HAL_InitTick+0xc8>)
 8001aec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001aee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001af2:	60bb      	str	r3, [r7, #8]
 8001af4:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001af6:	f107 020c 	add.w	r2, r7, #12
 8001afa:	f107 0310 	add.w	r3, r7, #16
 8001afe:	4611      	mov	r1, r2
 8001b00:	4618      	mov	r0, r3
 8001b02:	f002 f86d 	bl	8003be0 <HAL_RCC_GetClockConfig>

  /* Compute TIM16 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001b06:	f002 f855 	bl	8003bb4 <HAL_RCC_GetPCLK2Freq>
 8001b0a:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM16 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001b0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b0e:	4a23      	ldr	r2, [pc, #140]	; (8001b9c <HAL_InitTick+0xcc>)
 8001b10:	fba2 2303 	umull	r2, r3, r2, r3
 8001b14:	0c9b      	lsrs	r3, r3, #18
 8001b16:	3b01      	subs	r3, #1
 8001b18:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM16 */
  htim16.Instance = TIM16;
 8001b1a:	4b21      	ldr	r3, [pc, #132]	; (8001ba0 <HAL_InitTick+0xd0>)
 8001b1c:	4a21      	ldr	r2, [pc, #132]	; (8001ba4 <HAL_InitTick+0xd4>)
 8001b1e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM16CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim16.Init.Period = (1000000U / 1000U) - 1U;
 8001b20:	4b1f      	ldr	r3, [pc, #124]	; (8001ba0 <HAL_InitTick+0xd0>)
 8001b22:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001b26:	60da      	str	r2, [r3, #12]
  htim16.Init.Prescaler = uwPrescalerValue;
 8001b28:	4a1d      	ldr	r2, [pc, #116]	; (8001ba0 <HAL_InitTick+0xd0>)
 8001b2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b2c:	6053      	str	r3, [r2, #4]
  htim16.Init.ClockDivision = 0;
 8001b2e:	4b1c      	ldr	r3, [pc, #112]	; (8001ba0 <HAL_InitTick+0xd0>)
 8001b30:	2200      	movs	r2, #0
 8001b32:	611a      	str	r2, [r3, #16]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b34:	4b1a      	ldr	r3, [pc, #104]	; (8001ba0 <HAL_InitTick+0xd0>)
 8001b36:	2200      	movs	r2, #0
 8001b38:	609a      	str	r2, [r3, #8]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b3a:	4b19      	ldr	r3, [pc, #100]	; (8001ba0 <HAL_InitTick+0xd0>)
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim16);
 8001b40:	4817      	ldr	r0, [pc, #92]	; (8001ba0 <HAL_InitTick+0xd0>)
 8001b42:	f002 fbd7 	bl	80042f4 <HAL_TIM_Base_Init>
 8001b46:	4603      	mov	r3, r0
 8001b48:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8001b4c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d11b      	bne.n	8001b8c <HAL_InitTick+0xbc>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim16);
 8001b54:	4812      	ldr	r0, [pc, #72]	; (8001ba0 <HAL_InitTick+0xd0>)
 8001b56:	f002 fc2f 	bl	80043b8 <HAL_TIM_Base_Start_IT>
 8001b5a:	4603      	mov	r3, r0
 8001b5c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8001b60:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d111      	bne.n	8001b8c <HAL_InitTick+0xbc>
    {
    /* Enable the TIM16 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8001b68:	2019      	movs	r0, #25
 8001b6a:	f000 faed 	bl	8002148 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	2b0f      	cmp	r3, #15
 8001b72:	d808      	bhi.n	8001b86 <HAL_InitTick+0xb6>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority, 0U);
 8001b74:	2200      	movs	r2, #0
 8001b76:	6879      	ldr	r1, [r7, #4]
 8001b78:	2019      	movs	r0, #25
 8001b7a:	f000 fac9 	bl	8002110 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001b7e:	4a0a      	ldr	r2, [pc, #40]	; (8001ba8 <HAL_InitTick+0xd8>)
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	6013      	str	r3, [r2, #0]
 8001b84:	e002      	b.n	8001b8c <HAL_InitTick+0xbc>
      }
      else
      {
        status = HAL_ERROR;
 8001b86:	2301      	movs	r3, #1
 8001b88:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8001b8c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8001b90:	4618      	mov	r0, r3
 8001b92:	3730      	adds	r7, #48	; 0x30
 8001b94:	46bd      	mov	sp, r7
 8001b96:	bd80      	pop	{r7, pc}
 8001b98:	40021000 	.word	0x40021000
 8001b9c:	431bde83 	.word	0x431bde83
 8001ba0:	20000120 	.word	0x20000120
 8001ba4:	40014400 	.word	0x40014400
 8001ba8:	20000004 	.word	0x20000004

08001bac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001bac:	b480      	push	{r7}
 8001bae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001bb0:	e7fe      	b.n	8001bb0 <NMI_Handler+0x4>

08001bb2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001bb2:	b480      	push	{r7}
 8001bb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001bb6:	e7fe      	b.n	8001bb6 <HardFault_Handler+0x4>

08001bb8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001bb8:	b480      	push	{r7}
 8001bba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001bbc:	e7fe      	b.n	8001bbc <MemManage_Handler+0x4>

08001bbe <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001bbe:	b480      	push	{r7}
 8001bc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001bc2:	e7fe      	b.n	8001bc2 <BusFault_Handler+0x4>

08001bc4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001bc4:	b480      	push	{r7}
 8001bc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001bc8:	e7fe      	b.n	8001bc8 <UsageFault_Handler+0x4>

08001bca <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001bca:	b480      	push	{r7}
 8001bcc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001bce:	bf00      	nop
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd6:	4770      	bx	lr

08001bd8 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8001bdc:	4802      	ldr	r0, [pc, #8]	; (8001be8 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8001bde:	f002 fc3f 	bl	8004460 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8001be2:	bf00      	nop
 8001be4:	bd80      	pop	{r7, pc}
 8001be6:	bf00      	nop
 8001be8:	20000120 	.word	0x20000120

08001bec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b086      	sub	sp, #24
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001bf4:	4a14      	ldr	r2, [pc, #80]	; (8001c48 <_sbrk+0x5c>)
 8001bf6:	4b15      	ldr	r3, [pc, #84]	; (8001c4c <_sbrk+0x60>)
 8001bf8:	1ad3      	subs	r3, r2, r3
 8001bfa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001bfc:	697b      	ldr	r3, [r7, #20]
 8001bfe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001c00:	4b13      	ldr	r3, [pc, #76]	; (8001c50 <_sbrk+0x64>)
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d102      	bne.n	8001c0e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001c08:	4b11      	ldr	r3, [pc, #68]	; (8001c50 <_sbrk+0x64>)
 8001c0a:	4a12      	ldr	r2, [pc, #72]	; (8001c54 <_sbrk+0x68>)
 8001c0c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001c0e:	4b10      	ldr	r3, [pc, #64]	; (8001c50 <_sbrk+0x64>)
 8001c10:	681a      	ldr	r2, [r3, #0]
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	4413      	add	r3, r2
 8001c16:	693a      	ldr	r2, [r7, #16]
 8001c18:	429a      	cmp	r2, r3
 8001c1a:	d207      	bcs.n	8001c2c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001c1c:	f006 fb46 	bl	80082ac <__errno>
 8001c20:	4603      	mov	r3, r0
 8001c22:	220c      	movs	r2, #12
 8001c24:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001c26:	f04f 33ff 	mov.w	r3, #4294967295
 8001c2a:	e009      	b.n	8001c40 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001c2c:	4b08      	ldr	r3, [pc, #32]	; (8001c50 <_sbrk+0x64>)
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001c32:	4b07      	ldr	r3, [pc, #28]	; (8001c50 <_sbrk+0x64>)
 8001c34:	681a      	ldr	r2, [r3, #0]
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	4413      	add	r3, r2
 8001c3a:	4a05      	ldr	r2, [pc, #20]	; (8001c50 <_sbrk+0x64>)
 8001c3c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001c3e:	68fb      	ldr	r3, [r7, #12]
}
 8001c40:	4618      	mov	r0, r3
 8001c42:	3718      	adds	r7, #24
 8001c44:	46bd      	mov	sp, r7
 8001c46:	bd80      	pop	{r7, pc}
 8001c48:	20010000 	.word	0x20010000
 8001c4c:	00000400 	.word	0x00000400
 8001c50:	2000016c 	.word	0x2000016c
 8001c54:	20003db0 	.word	0x20003db0

08001c58 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001c58:	b480      	push	{r7}
 8001c5a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001c5c:	4b06      	ldr	r3, [pc, #24]	; (8001c78 <SystemInit+0x20>)
 8001c5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c62:	4a05      	ldr	r2, [pc, #20]	; (8001c78 <SystemInit+0x20>)
 8001c64:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001c68:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001c6c:	bf00      	nop
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c74:	4770      	bx	lr
 8001c76:	bf00      	nop
 8001c78:	e000ed00 	.word	0xe000ed00

08001c7c <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001c80:	4b14      	ldr	r3, [pc, #80]	; (8001cd4 <MX_USART1_UART_Init+0x58>)
 8001c82:	4a15      	ldr	r2, [pc, #84]	; (8001cd8 <MX_USART1_UART_Init+0x5c>)
 8001c84:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001c86:	4b13      	ldr	r3, [pc, #76]	; (8001cd4 <MX_USART1_UART_Init+0x58>)
 8001c88:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001c8c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001c8e:	4b11      	ldr	r3, [pc, #68]	; (8001cd4 <MX_USART1_UART_Init+0x58>)
 8001c90:	2200      	movs	r2, #0
 8001c92:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001c94:	4b0f      	ldr	r3, [pc, #60]	; (8001cd4 <MX_USART1_UART_Init+0x58>)
 8001c96:	2200      	movs	r2, #0
 8001c98:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001c9a:	4b0e      	ldr	r3, [pc, #56]	; (8001cd4 <MX_USART1_UART_Init+0x58>)
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001ca0:	4b0c      	ldr	r3, [pc, #48]	; (8001cd4 <MX_USART1_UART_Init+0x58>)
 8001ca2:	220c      	movs	r2, #12
 8001ca4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ca6:	4b0b      	ldr	r3, [pc, #44]	; (8001cd4 <MX_USART1_UART_Init+0x58>)
 8001ca8:	2200      	movs	r2, #0
 8001caa:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001cac:	4b09      	ldr	r3, [pc, #36]	; (8001cd4 <MX_USART1_UART_Init+0x58>)
 8001cae:	2200      	movs	r2, #0
 8001cb0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001cb2:	4b08      	ldr	r3, [pc, #32]	; (8001cd4 <MX_USART1_UART_Init+0x58>)
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001cb8:	4b06      	ldr	r3, [pc, #24]	; (8001cd4 <MX_USART1_UART_Init+0x58>)
 8001cba:	2200      	movs	r2, #0
 8001cbc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001cbe:	4805      	ldr	r0, [pc, #20]	; (8001cd4 <MX_USART1_UART_Init+0x58>)
 8001cc0:	f002 fd98 	bl	80047f4 <HAL_UART_Init>
 8001cc4:	4603      	mov	r3, r0
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d001      	beq.n	8001cce <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8001cca:	f7ff fa69 	bl	80011a0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001cce:	bf00      	nop
 8001cd0:	bd80      	pop	{r7, pc}
 8001cd2:	bf00      	nop
 8001cd4:	20000170 	.word	0x20000170
 8001cd8:	40013800 	.word	0x40013800

08001cdc <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001ce0:	4b15      	ldr	r3, [pc, #84]	; (8001d38 <MX_USART2_UART_Init+0x5c>)
 8001ce2:	4a16      	ldr	r2, [pc, #88]	; (8001d3c <MX_USART2_UART_Init+0x60>)
 8001ce4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001ce6:	4b14      	ldr	r3, [pc, #80]	; (8001d38 <MX_USART2_UART_Init+0x5c>)
 8001ce8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001cec:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001cee:	4b12      	ldr	r3, [pc, #72]	; (8001d38 <MX_USART2_UART_Init+0x5c>)
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001cf4:	4b10      	ldr	r3, [pc, #64]	; (8001d38 <MX_USART2_UART_Init+0x5c>)
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001cfa:	4b0f      	ldr	r3, [pc, #60]	; (8001d38 <MX_USART2_UART_Init+0x5c>)
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001d00:	4b0d      	ldr	r3, [pc, #52]	; (8001d38 <MX_USART2_UART_Init+0x5c>)
 8001d02:	220c      	movs	r2, #12
 8001d04:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d06:	4b0c      	ldr	r3, [pc, #48]	; (8001d38 <MX_USART2_UART_Init+0x5c>)
 8001d08:	2200      	movs	r2, #0
 8001d0a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d0c:	4b0a      	ldr	r3, [pc, #40]	; (8001d38 <MX_USART2_UART_Init+0x5c>)
 8001d0e:	2200      	movs	r2, #0
 8001d10:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001d12:	4b09      	ldr	r3, [pc, #36]	; (8001d38 <MX_USART2_UART_Init+0x5c>)
 8001d14:	2200      	movs	r2, #0
 8001d16:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001d18:	4b07      	ldr	r3, [pc, #28]	; (8001d38 <MX_USART2_UART_Init+0x5c>)
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001d1e:	4806      	ldr	r0, [pc, #24]	; (8001d38 <MX_USART2_UART_Init+0x5c>)
 8001d20:	f002 fd68 	bl	80047f4 <HAL_UART_Init>
 8001d24:	4603      	mov	r3, r0
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d001      	beq.n	8001d2e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001d2a:	f7ff fa39 	bl	80011a0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */
  RetargetInit(&huart2);
 8001d2e:	4802      	ldr	r0, [pc, #8]	; (8001d38 <MX_USART2_UART_Init+0x5c>)
 8001d30:	f7ff fde0 	bl	80018f4 <RetargetInit>
  /* USER CODE END USART2_Init 2 */

}
 8001d34:	bf00      	nop
 8001d36:	bd80      	pop	{r7, pc}
 8001d38:	200001f4 	.word	0x200001f4
 8001d3c:	40004400 	.word	0x40004400

08001d40 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b0a0      	sub	sp, #128	; 0x80
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d48:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	601a      	str	r2, [r3, #0]
 8001d50:	605a      	str	r2, [r3, #4]
 8001d52:	609a      	str	r2, [r3, #8]
 8001d54:	60da      	str	r2, [r3, #12]
 8001d56:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001d58:	f107 0318 	add.w	r3, r7, #24
 8001d5c:	2254      	movs	r2, #84	; 0x54
 8001d5e:	2100      	movs	r1, #0
 8001d60:	4618      	mov	r0, r3
 8001d62:	f006 fbd4 	bl	800850e <memset>
  if(uartHandle->Instance==USART1)
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	4a47      	ldr	r2, [pc, #284]	; (8001e88 <HAL_UART_MspInit+0x148>)
 8001d6c:	4293      	cmp	r3, r2
 8001d6e:	d138      	bne.n	8001de2 <HAL_UART_MspInit+0xa2>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001d70:	2301      	movs	r3, #1
 8001d72:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001d74:	2300      	movs	r3, #0
 8001d76:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001d78:	f107 0318 	add.w	r3, r7, #24
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	f001 ffc1 	bl	8003d04 <HAL_RCCEx_PeriphCLKConfig>
 8001d82:	4603      	mov	r3, r0
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d001      	beq.n	8001d8c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001d88:	f7ff fa0a 	bl	80011a0 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001d8c:	4b3f      	ldr	r3, [pc, #252]	; (8001e8c <HAL_UART_MspInit+0x14c>)
 8001d8e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d90:	4a3e      	ldr	r2, [pc, #248]	; (8001e8c <HAL_UART_MspInit+0x14c>)
 8001d92:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d96:	6613      	str	r3, [r2, #96]	; 0x60
 8001d98:	4b3c      	ldr	r3, [pc, #240]	; (8001e8c <HAL_UART_MspInit+0x14c>)
 8001d9a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d9c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001da0:	617b      	str	r3, [r7, #20]
 8001da2:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001da4:	4b39      	ldr	r3, [pc, #228]	; (8001e8c <HAL_UART_MspInit+0x14c>)
 8001da6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001da8:	4a38      	ldr	r2, [pc, #224]	; (8001e8c <HAL_UART_MspInit+0x14c>)
 8001daa:	f043 0301 	orr.w	r3, r3, #1
 8001dae:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001db0:	4b36      	ldr	r3, [pc, #216]	; (8001e8c <HAL_UART_MspInit+0x14c>)
 8001db2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001db4:	f003 0301 	and.w	r3, r3, #1
 8001db8:	613b      	str	r3, [r7, #16]
 8001dba:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001dbc:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001dc0:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dc2:	2302      	movs	r3, #2
 8001dc4:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001dca:	2303      	movs	r3, #3
 8001dcc:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001dce:	2307      	movs	r3, #7
 8001dd0:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dd2:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001dd6:	4619      	mov	r1, r3
 8001dd8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ddc:	f000 f9c2 	bl	8002164 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001de0:	e04d      	b.n	8001e7e <HAL_UART_MspInit+0x13e>
  else if(uartHandle->Instance==USART2)
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	4a2a      	ldr	r2, [pc, #168]	; (8001e90 <HAL_UART_MspInit+0x150>)
 8001de8:	4293      	cmp	r3, r2
 8001dea:	d148      	bne.n	8001e7e <HAL_UART_MspInit+0x13e>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001dec:	2302      	movs	r3, #2
 8001dee:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001df0:	2300      	movs	r3, #0
 8001df2:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001df4:	f107 0318 	add.w	r3, r7, #24
 8001df8:	4618      	mov	r0, r3
 8001dfa:	f001 ff83 	bl	8003d04 <HAL_RCCEx_PeriphCLKConfig>
 8001dfe:	4603      	mov	r3, r0
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d001      	beq.n	8001e08 <HAL_UART_MspInit+0xc8>
      Error_Handler();
 8001e04:	f7ff f9cc 	bl	80011a0 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001e08:	4b20      	ldr	r3, [pc, #128]	; (8001e8c <HAL_UART_MspInit+0x14c>)
 8001e0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e0c:	4a1f      	ldr	r2, [pc, #124]	; (8001e8c <HAL_UART_MspInit+0x14c>)
 8001e0e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e12:	6593      	str	r3, [r2, #88]	; 0x58
 8001e14:	4b1d      	ldr	r3, [pc, #116]	; (8001e8c <HAL_UART_MspInit+0x14c>)
 8001e16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e1c:	60fb      	str	r3, [r7, #12]
 8001e1e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e20:	4b1a      	ldr	r3, [pc, #104]	; (8001e8c <HAL_UART_MspInit+0x14c>)
 8001e22:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e24:	4a19      	ldr	r2, [pc, #100]	; (8001e8c <HAL_UART_MspInit+0x14c>)
 8001e26:	f043 0301 	orr.w	r3, r3, #1
 8001e2a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e2c:	4b17      	ldr	r3, [pc, #92]	; (8001e8c <HAL_UART_MspInit+0x14c>)
 8001e2e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e30:	f003 0301 	and.w	r3, r3, #1
 8001e34:	60bb      	str	r3, [r7, #8]
 8001e36:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8001e38:	2304      	movs	r3, #4
 8001e3a:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e3c:	2302      	movs	r3, #2
 8001e3e:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e40:	2300      	movs	r3, #0
 8001e42:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e44:	2303      	movs	r3, #3
 8001e46:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001e48:	2307      	movs	r3, #7
 8001e4a:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8001e4c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001e50:	4619      	mov	r1, r3
 8001e52:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e56:	f000 f985 	bl	8002164 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8001e5a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001e5e:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e60:	2302      	movs	r3, #2
 8001e62:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e64:	2300      	movs	r3, #0
 8001e66:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e68:	2303      	movs	r3, #3
 8001e6a:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8001e6c:	2303      	movs	r3, #3
 8001e6e:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8001e70:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001e74:	4619      	mov	r1, r3
 8001e76:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e7a:	f000 f973 	bl	8002164 <HAL_GPIO_Init>
}
 8001e7e:	bf00      	nop
 8001e80:	3780      	adds	r7, #128	; 0x80
 8001e82:	46bd      	mov	sp, r7
 8001e84:	bd80      	pop	{r7, pc}
 8001e86:	bf00      	nop
 8001e88:	40013800 	.word	0x40013800
 8001e8c:	40021000 	.word	0x40021000
 8001e90:	40004400 	.word	0x40004400

08001e94 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001e94:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001ecc <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001e98:	f7ff fede 	bl	8001c58 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001e9c:	480c      	ldr	r0, [pc, #48]	; (8001ed0 <LoopForever+0x6>)
  ldr r1, =_edata
 8001e9e:	490d      	ldr	r1, [pc, #52]	; (8001ed4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001ea0:	4a0d      	ldr	r2, [pc, #52]	; (8001ed8 <LoopForever+0xe>)
  movs r3, #0
 8001ea2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ea4:	e002      	b.n	8001eac <LoopCopyDataInit>

08001ea6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001ea6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ea8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001eaa:	3304      	adds	r3, #4

08001eac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001eac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001eae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001eb0:	d3f9      	bcc.n	8001ea6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001eb2:	4a0a      	ldr	r2, [pc, #40]	; (8001edc <LoopForever+0x12>)
  ldr r4, =_ebss
 8001eb4:	4c0a      	ldr	r4, [pc, #40]	; (8001ee0 <LoopForever+0x16>)
  movs r3, #0
 8001eb6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001eb8:	e001      	b.n	8001ebe <LoopFillZerobss>

08001eba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001eba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ebc:	3204      	adds	r2, #4

08001ebe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ebe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ec0:	d3fb      	bcc.n	8001eba <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001ec2:	f006 faef 	bl	80084a4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001ec6:	f7ff f8e1 	bl	800108c <main>

08001eca <LoopForever>:

LoopForever:
    b LoopForever
 8001eca:	e7fe      	b.n	8001eca <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001ecc:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001ed0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ed4:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8001ed8:	08009be4 	.word	0x08009be4
  ldr r2, =_sbss
 8001edc:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8001ee0:	20003dac 	.word	0x20003dac

08001ee4 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001ee4:	e7fe      	b.n	8001ee4 <ADC1_IRQHandler>

08001ee6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ee6:	b580      	push	{r7, lr}
 8001ee8:	b082      	sub	sp, #8
 8001eea:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001eec:	2300      	movs	r3, #0
 8001eee:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ef0:	2003      	movs	r0, #3
 8001ef2:	f000 f902 	bl	80020fa <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001ef6:	200f      	movs	r0, #15
 8001ef8:	f7ff fdea 	bl	8001ad0 <HAL_InitTick>
 8001efc:	4603      	mov	r3, r0
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d002      	beq.n	8001f08 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001f02:	2301      	movs	r3, #1
 8001f04:	71fb      	strb	r3, [r7, #7]
 8001f06:	e001      	b.n	8001f0c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001f08:	f7ff fdba 	bl	8001a80 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001f0c:	79fb      	ldrb	r3, [r7, #7]
}
 8001f0e:	4618      	mov	r0, r3
 8001f10:	3708      	adds	r7, #8
 8001f12:	46bd      	mov	sp, r7
 8001f14:	bd80      	pop	{r7, pc}
	...

08001f18 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f18:	b480      	push	{r7}
 8001f1a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001f1c:	4b06      	ldr	r3, [pc, #24]	; (8001f38 <HAL_IncTick+0x20>)
 8001f1e:	781b      	ldrb	r3, [r3, #0]
 8001f20:	461a      	mov	r2, r3
 8001f22:	4b06      	ldr	r3, [pc, #24]	; (8001f3c <HAL_IncTick+0x24>)
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	4413      	add	r3, r2
 8001f28:	4a04      	ldr	r2, [pc, #16]	; (8001f3c <HAL_IncTick+0x24>)
 8001f2a:	6013      	str	r3, [r2, #0]
}
 8001f2c:	bf00      	nop
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f34:	4770      	bx	lr
 8001f36:	bf00      	nop
 8001f38:	20000008 	.word	0x20000008
 8001f3c:	20000278 	.word	0x20000278

08001f40 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f40:	b480      	push	{r7}
 8001f42:	af00      	add	r7, sp, #0
  return uwTick;
 8001f44:	4b03      	ldr	r3, [pc, #12]	; (8001f54 <HAL_GetTick+0x14>)
 8001f46:	681b      	ldr	r3, [r3, #0]
}
 8001f48:	4618      	mov	r0, r3
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f50:	4770      	bx	lr
 8001f52:	bf00      	nop
 8001f54:	20000278 	.word	0x20000278

08001f58 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b084      	sub	sp, #16
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001f60:	f7ff ffee 	bl	8001f40 <HAL_GetTick>
 8001f64:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f70:	d005      	beq.n	8001f7e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001f72:	4b0a      	ldr	r3, [pc, #40]	; (8001f9c <HAL_Delay+0x44>)
 8001f74:	781b      	ldrb	r3, [r3, #0]
 8001f76:	461a      	mov	r2, r3
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	4413      	add	r3, r2
 8001f7c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001f7e:	bf00      	nop
 8001f80:	f7ff ffde 	bl	8001f40 <HAL_GetTick>
 8001f84:	4602      	mov	r2, r0
 8001f86:	68bb      	ldr	r3, [r7, #8]
 8001f88:	1ad3      	subs	r3, r2, r3
 8001f8a:	68fa      	ldr	r2, [r7, #12]
 8001f8c:	429a      	cmp	r2, r3
 8001f8e:	d8f7      	bhi.n	8001f80 <HAL_Delay+0x28>
  {
  }
}
 8001f90:	bf00      	nop
 8001f92:	bf00      	nop
 8001f94:	3710      	adds	r7, #16
 8001f96:	46bd      	mov	sp, r7
 8001f98:	bd80      	pop	{r7, pc}
 8001f9a:	bf00      	nop
 8001f9c:	20000008 	.word	0x20000008

08001fa0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fa0:	b480      	push	{r7}
 8001fa2:	b085      	sub	sp, #20
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	f003 0307 	and.w	r3, r3, #7
 8001fae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001fb0:	4b0c      	ldr	r3, [pc, #48]	; (8001fe4 <__NVIC_SetPriorityGrouping+0x44>)
 8001fb2:	68db      	ldr	r3, [r3, #12]
 8001fb4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001fb6:	68ba      	ldr	r2, [r7, #8]
 8001fb8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001fbc:	4013      	ands	r3, r2
 8001fbe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001fc4:	68bb      	ldr	r3, [r7, #8]
 8001fc6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001fc8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001fcc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001fd0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001fd2:	4a04      	ldr	r2, [pc, #16]	; (8001fe4 <__NVIC_SetPriorityGrouping+0x44>)
 8001fd4:	68bb      	ldr	r3, [r7, #8]
 8001fd6:	60d3      	str	r3, [r2, #12]
}
 8001fd8:	bf00      	nop
 8001fda:	3714      	adds	r7, #20
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe2:	4770      	bx	lr
 8001fe4:	e000ed00 	.word	0xe000ed00

08001fe8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001fe8:	b480      	push	{r7}
 8001fea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001fec:	4b04      	ldr	r3, [pc, #16]	; (8002000 <__NVIC_GetPriorityGrouping+0x18>)
 8001fee:	68db      	ldr	r3, [r3, #12]
 8001ff0:	0a1b      	lsrs	r3, r3, #8
 8001ff2:	f003 0307 	and.w	r3, r3, #7
}
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffe:	4770      	bx	lr
 8002000:	e000ed00 	.word	0xe000ed00

08002004 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002004:	b480      	push	{r7}
 8002006:	b083      	sub	sp, #12
 8002008:	af00      	add	r7, sp, #0
 800200a:	4603      	mov	r3, r0
 800200c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800200e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002012:	2b00      	cmp	r3, #0
 8002014:	db0b      	blt.n	800202e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002016:	79fb      	ldrb	r3, [r7, #7]
 8002018:	f003 021f 	and.w	r2, r3, #31
 800201c:	4907      	ldr	r1, [pc, #28]	; (800203c <__NVIC_EnableIRQ+0x38>)
 800201e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002022:	095b      	lsrs	r3, r3, #5
 8002024:	2001      	movs	r0, #1
 8002026:	fa00 f202 	lsl.w	r2, r0, r2
 800202a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800202e:	bf00      	nop
 8002030:	370c      	adds	r7, #12
 8002032:	46bd      	mov	sp, r7
 8002034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002038:	4770      	bx	lr
 800203a:	bf00      	nop
 800203c:	e000e100 	.word	0xe000e100

08002040 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002040:	b480      	push	{r7}
 8002042:	b083      	sub	sp, #12
 8002044:	af00      	add	r7, sp, #0
 8002046:	4603      	mov	r3, r0
 8002048:	6039      	str	r1, [r7, #0]
 800204a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800204c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002050:	2b00      	cmp	r3, #0
 8002052:	db0a      	blt.n	800206a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002054:	683b      	ldr	r3, [r7, #0]
 8002056:	b2da      	uxtb	r2, r3
 8002058:	490c      	ldr	r1, [pc, #48]	; (800208c <__NVIC_SetPriority+0x4c>)
 800205a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800205e:	0112      	lsls	r2, r2, #4
 8002060:	b2d2      	uxtb	r2, r2
 8002062:	440b      	add	r3, r1
 8002064:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002068:	e00a      	b.n	8002080 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800206a:	683b      	ldr	r3, [r7, #0]
 800206c:	b2da      	uxtb	r2, r3
 800206e:	4908      	ldr	r1, [pc, #32]	; (8002090 <__NVIC_SetPriority+0x50>)
 8002070:	79fb      	ldrb	r3, [r7, #7]
 8002072:	f003 030f 	and.w	r3, r3, #15
 8002076:	3b04      	subs	r3, #4
 8002078:	0112      	lsls	r2, r2, #4
 800207a:	b2d2      	uxtb	r2, r2
 800207c:	440b      	add	r3, r1
 800207e:	761a      	strb	r2, [r3, #24]
}
 8002080:	bf00      	nop
 8002082:	370c      	adds	r7, #12
 8002084:	46bd      	mov	sp, r7
 8002086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208a:	4770      	bx	lr
 800208c:	e000e100 	.word	0xe000e100
 8002090:	e000ed00 	.word	0xe000ed00

08002094 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002094:	b480      	push	{r7}
 8002096:	b089      	sub	sp, #36	; 0x24
 8002098:	af00      	add	r7, sp, #0
 800209a:	60f8      	str	r0, [r7, #12]
 800209c:	60b9      	str	r1, [r7, #8]
 800209e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	f003 0307 	and.w	r3, r3, #7
 80020a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80020a8:	69fb      	ldr	r3, [r7, #28]
 80020aa:	f1c3 0307 	rsb	r3, r3, #7
 80020ae:	2b04      	cmp	r3, #4
 80020b0:	bf28      	it	cs
 80020b2:	2304      	movcs	r3, #4
 80020b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80020b6:	69fb      	ldr	r3, [r7, #28]
 80020b8:	3304      	adds	r3, #4
 80020ba:	2b06      	cmp	r3, #6
 80020bc:	d902      	bls.n	80020c4 <NVIC_EncodePriority+0x30>
 80020be:	69fb      	ldr	r3, [r7, #28]
 80020c0:	3b03      	subs	r3, #3
 80020c2:	e000      	b.n	80020c6 <NVIC_EncodePriority+0x32>
 80020c4:	2300      	movs	r3, #0
 80020c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020c8:	f04f 32ff 	mov.w	r2, #4294967295
 80020cc:	69bb      	ldr	r3, [r7, #24]
 80020ce:	fa02 f303 	lsl.w	r3, r2, r3
 80020d2:	43da      	mvns	r2, r3
 80020d4:	68bb      	ldr	r3, [r7, #8]
 80020d6:	401a      	ands	r2, r3
 80020d8:	697b      	ldr	r3, [r7, #20]
 80020da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80020dc:	f04f 31ff 	mov.w	r1, #4294967295
 80020e0:	697b      	ldr	r3, [r7, #20]
 80020e2:	fa01 f303 	lsl.w	r3, r1, r3
 80020e6:	43d9      	mvns	r1, r3
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020ec:	4313      	orrs	r3, r2
         );
}
 80020ee:	4618      	mov	r0, r3
 80020f0:	3724      	adds	r7, #36	; 0x24
 80020f2:	46bd      	mov	sp, r7
 80020f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f8:	4770      	bx	lr

080020fa <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020fa:	b580      	push	{r7, lr}
 80020fc:	b082      	sub	sp, #8
 80020fe:	af00      	add	r7, sp, #0
 8002100:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002102:	6878      	ldr	r0, [r7, #4]
 8002104:	f7ff ff4c 	bl	8001fa0 <__NVIC_SetPriorityGrouping>
}
 8002108:	bf00      	nop
 800210a:	3708      	adds	r7, #8
 800210c:	46bd      	mov	sp, r7
 800210e:	bd80      	pop	{r7, pc}

08002110 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	b086      	sub	sp, #24
 8002114:	af00      	add	r7, sp, #0
 8002116:	4603      	mov	r3, r0
 8002118:	60b9      	str	r1, [r7, #8]
 800211a:	607a      	str	r2, [r7, #4]
 800211c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800211e:	2300      	movs	r3, #0
 8002120:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002122:	f7ff ff61 	bl	8001fe8 <__NVIC_GetPriorityGrouping>
 8002126:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002128:	687a      	ldr	r2, [r7, #4]
 800212a:	68b9      	ldr	r1, [r7, #8]
 800212c:	6978      	ldr	r0, [r7, #20]
 800212e:	f7ff ffb1 	bl	8002094 <NVIC_EncodePriority>
 8002132:	4602      	mov	r2, r0
 8002134:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002138:	4611      	mov	r1, r2
 800213a:	4618      	mov	r0, r3
 800213c:	f7ff ff80 	bl	8002040 <__NVIC_SetPriority>
}
 8002140:	bf00      	nop
 8002142:	3718      	adds	r7, #24
 8002144:	46bd      	mov	sp, r7
 8002146:	bd80      	pop	{r7, pc}

08002148 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	b082      	sub	sp, #8
 800214c:	af00      	add	r7, sp, #0
 800214e:	4603      	mov	r3, r0
 8002150:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002152:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002156:	4618      	mov	r0, r3
 8002158:	f7ff ff54 	bl	8002004 <__NVIC_EnableIRQ>
}
 800215c:	bf00      	nop
 800215e:	3708      	adds	r7, #8
 8002160:	46bd      	mov	sp, r7
 8002162:	bd80      	pop	{r7, pc}

08002164 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002164:	b480      	push	{r7}
 8002166:	b087      	sub	sp, #28
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
 800216c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800216e:	2300      	movs	r3, #0
 8002170:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002172:	e148      	b.n	8002406 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002174:	683b      	ldr	r3, [r7, #0]
 8002176:	681a      	ldr	r2, [r3, #0]
 8002178:	2101      	movs	r1, #1
 800217a:	697b      	ldr	r3, [r7, #20]
 800217c:	fa01 f303 	lsl.w	r3, r1, r3
 8002180:	4013      	ands	r3, r2
 8002182:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	2b00      	cmp	r3, #0
 8002188:	f000 813a 	beq.w	8002400 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800218c:	683b      	ldr	r3, [r7, #0]
 800218e:	685b      	ldr	r3, [r3, #4]
 8002190:	f003 0303 	and.w	r3, r3, #3
 8002194:	2b01      	cmp	r3, #1
 8002196:	d005      	beq.n	80021a4 <HAL_GPIO_Init+0x40>
 8002198:	683b      	ldr	r3, [r7, #0]
 800219a:	685b      	ldr	r3, [r3, #4]
 800219c:	f003 0303 	and.w	r3, r3, #3
 80021a0:	2b02      	cmp	r3, #2
 80021a2:	d130      	bne.n	8002206 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	689b      	ldr	r3, [r3, #8]
 80021a8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80021aa:	697b      	ldr	r3, [r7, #20]
 80021ac:	005b      	lsls	r3, r3, #1
 80021ae:	2203      	movs	r2, #3
 80021b0:	fa02 f303 	lsl.w	r3, r2, r3
 80021b4:	43db      	mvns	r3, r3
 80021b6:	693a      	ldr	r2, [r7, #16]
 80021b8:	4013      	ands	r3, r2
 80021ba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80021bc:	683b      	ldr	r3, [r7, #0]
 80021be:	68da      	ldr	r2, [r3, #12]
 80021c0:	697b      	ldr	r3, [r7, #20]
 80021c2:	005b      	lsls	r3, r3, #1
 80021c4:	fa02 f303 	lsl.w	r3, r2, r3
 80021c8:	693a      	ldr	r2, [r7, #16]
 80021ca:	4313      	orrs	r3, r2
 80021cc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	693a      	ldr	r2, [r7, #16]
 80021d2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	685b      	ldr	r3, [r3, #4]
 80021d8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80021da:	2201      	movs	r2, #1
 80021dc:	697b      	ldr	r3, [r7, #20]
 80021de:	fa02 f303 	lsl.w	r3, r2, r3
 80021e2:	43db      	mvns	r3, r3
 80021e4:	693a      	ldr	r2, [r7, #16]
 80021e6:	4013      	ands	r3, r2
 80021e8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80021ea:	683b      	ldr	r3, [r7, #0]
 80021ec:	685b      	ldr	r3, [r3, #4]
 80021ee:	091b      	lsrs	r3, r3, #4
 80021f0:	f003 0201 	and.w	r2, r3, #1
 80021f4:	697b      	ldr	r3, [r7, #20]
 80021f6:	fa02 f303 	lsl.w	r3, r2, r3
 80021fa:	693a      	ldr	r2, [r7, #16]
 80021fc:	4313      	orrs	r3, r2
 80021fe:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	693a      	ldr	r2, [r7, #16]
 8002204:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002206:	683b      	ldr	r3, [r7, #0]
 8002208:	685b      	ldr	r3, [r3, #4]
 800220a:	f003 0303 	and.w	r3, r3, #3
 800220e:	2b03      	cmp	r3, #3
 8002210:	d017      	beq.n	8002242 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	68db      	ldr	r3, [r3, #12]
 8002216:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002218:	697b      	ldr	r3, [r7, #20]
 800221a:	005b      	lsls	r3, r3, #1
 800221c:	2203      	movs	r2, #3
 800221e:	fa02 f303 	lsl.w	r3, r2, r3
 8002222:	43db      	mvns	r3, r3
 8002224:	693a      	ldr	r2, [r7, #16]
 8002226:	4013      	ands	r3, r2
 8002228:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800222a:	683b      	ldr	r3, [r7, #0]
 800222c:	689a      	ldr	r2, [r3, #8]
 800222e:	697b      	ldr	r3, [r7, #20]
 8002230:	005b      	lsls	r3, r3, #1
 8002232:	fa02 f303 	lsl.w	r3, r2, r3
 8002236:	693a      	ldr	r2, [r7, #16]
 8002238:	4313      	orrs	r3, r2
 800223a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	693a      	ldr	r2, [r7, #16]
 8002240:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002242:	683b      	ldr	r3, [r7, #0]
 8002244:	685b      	ldr	r3, [r3, #4]
 8002246:	f003 0303 	and.w	r3, r3, #3
 800224a:	2b02      	cmp	r3, #2
 800224c:	d123      	bne.n	8002296 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800224e:	697b      	ldr	r3, [r7, #20]
 8002250:	08da      	lsrs	r2, r3, #3
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	3208      	adds	r2, #8
 8002256:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800225a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800225c:	697b      	ldr	r3, [r7, #20]
 800225e:	f003 0307 	and.w	r3, r3, #7
 8002262:	009b      	lsls	r3, r3, #2
 8002264:	220f      	movs	r2, #15
 8002266:	fa02 f303 	lsl.w	r3, r2, r3
 800226a:	43db      	mvns	r3, r3
 800226c:	693a      	ldr	r2, [r7, #16]
 800226e:	4013      	ands	r3, r2
 8002270:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002272:	683b      	ldr	r3, [r7, #0]
 8002274:	691a      	ldr	r2, [r3, #16]
 8002276:	697b      	ldr	r3, [r7, #20]
 8002278:	f003 0307 	and.w	r3, r3, #7
 800227c:	009b      	lsls	r3, r3, #2
 800227e:	fa02 f303 	lsl.w	r3, r2, r3
 8002282:	693a      	ldr	r2, [r7, #16]
 8002284:	4313      	orrs	r3, r2
 8002286:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002288:	697b      	ldr	r3, [r7, #20]
 800228a:	08da      	lsrs	r2, r3, #3
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	3208      	adds	r2, #8
 8002290:	6939      	ldr	r1, [r7, #16]
 8002292:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800229c:	697b      	ldr	r3, [r7, #20]
 800229e:	005b      	lsls	r3, r3, #1
 80022a0:	2203      	movs	r2, #3
 80022a2:	fa02 f303 	lsl.w	r3, r2, r3
 80022a6:	43db      	mvns	r3, r3
 80022a8:	693a      	ldr	r2, [r7, #16]
 80022aa:	4013      	ands	r3, r2
 80022ac:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80022ae:	683b      	ldr	r3, [r7, #0]
 80022b0:	685b      	ldr	r3, [r3, #4]
 80022b2:	f003 0203 	and.w	r2, r3, #3
 80022b6:	697b      	ldr	r3, [r7, #20]
 80022b8:	005b      	lsls	r3, r3, #1
 80022ba:	fa02 f303 	lsl.w	r3, r2, r3
 80022be:	693a      	ldr	r2, [r7, #16]
 80022c0:	4313      	orrs	r3, r2
 80022c2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	693a      	ldr	r2, [r7, #16]
 80022c8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80022ca:	683b      	ldr	r3, [r7, #0]
 80022cc:	685b      	ldr	r3, [r3, #4]
 80022ce:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	f000 8094 	beq.w	8002400 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022d8:	4b52      	ldr	r3, [pc, #328]	; (8002424 <HAL_GPIO_Init+0x2c0>)
 80022da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80022dc:	4a51      	ldr	r2, [pc, #324]	; (8002424 <HAL_GPIO_Init+0x2c0>)
 80022de:	f043 0301 	orr.w	r3, r3, #1
 80022e2:	6613      	str	r3, [r2, #96]	; 0x60
 80022e4:	4b4f      	ldr	r3, [pc, #316]	; (8002424 <HAL_GPIO_Init+0x2c0>)
 80022e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80022e8:	f003 0301 	and.w	r3, r3, #1
 80022ec:	60bb      	str	r3, [r7, #8]
 80022ee:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80022f0:	4a4d      	ldr	r2, [pc, #308]	; (8002428 <HAL_GPIO_Init+0x2c4>)
 80022f2:	697b      	ldr	r3, [r7, #20]
 80022f4:	089b      	lsrs	r3, r3, #2
 80022f6:	3302      	adds	r3, #2
 80022f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022fc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80022fe:	697b      	ldr	r3, [r7, #20]
 8002300:	f003 0303 	and.w	r3, r3, #3
 8002304:	009b      	lsls	r3, r3, #2
 8002306:	220f      	movs	r2, #15
 8002308:	fa02 f303 	lsl.w	r3, r2, r3
 800230c:	43db      	mvns	r3, r3
 800230e:	693a      	ldr	r2, [r7, #16]
 8002310:	4013      	ands	r3, r2
 8002312:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800231a:	d00d      	beq.n	8002338 <HAL_GPIO_Init+0x1d4>
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	4a43      	ldr	r2, [pc, #268]	; (800242c <HAL_GPIO_Init+0x2c8>)
 8002320:	4293      	cmp	r3, r2
 8002322:	d007      	beq.n	8002334 <HAL_GPIO_Init+0x1d0>
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	4a42      	ldr	r2, [pc, #264]	; (8002430 <HAL_GPIO_Init+0x2cc>)
 8002328:	4293      	cmp	r3, r2
 800232a:	d101      	bne.n	8002330 <HAL_GPIO_Init+0x1cc>
 800232c:	2302      	movs	r3, #2
 800232e:	e004      	b.n	800233a <HAL_GPIO_Init+0x1d6>
 8002330:	2307      	movs	r3, #7
 8002332:	e002      	b.n	800233a <HAL_GPIO_Init+0x1d6>
 8002334:	2301      	movs	r3, #1
 8002336:	e000      	b.n	800233a <HAL_GPIO_Init+0x1d6>
 8002338:	2300      	movs	r3, #0
 800233a:	697a      	ldr	r2, [r7, #20]
 800233c:	f002 0203 	and.w	r2, r2, #3
 8002340:	0092      	lsls	r2, r2, #2
 8002342:	4093      	lsls	r3, r2
 8002344:	693a      	ldr	r2, [r7, #16]
 8002346:	4313      	orrs	r3, r2
 8002348:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800234a:	4937      	ldr	r1, [pc, #220]	; (8002428 <HAL_GPIO_Init+0x2c4>)
 800234c:	697b      	ldr	r3, [r7, #20]
 800234e:	089b      	lsrs	r3, r3, #2
 8002350:	3302      	adds	r3, #2
 8002352:	693a      	ldr	r2, [r7, #16]
 8002354:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002358:	4b36      	ldr	r3, [pc, #216]	; (8002434 <HAL_GPIO_Init+0x2d0>)
 800235a:	689b      	ldr	r3, [r3, #8]
 800235c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	43db      	mvns	r3, r3
 8002362:	693a      	ldr	r2, [r7, #16]
 8002364:	4013      	ands	r3, r2
 8002366:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002368:	683b      	ldr	r3, [r7, #0]
 800236a:	685b      	ldr	r3, [r3, #4]
 800236c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002370:	2b00      	cmp	r3, #0
 8002372:	d003      	beq.n	800237c <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8002374:	693a      	ldr	r2, [r7, #16]
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	4313      	orrs	r3, r2
 800237a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800237c:	4a2d      	ldr	r2, [pc, #180]	; (8002434 <HAL_GPIO_Init+0x2d0>)
 800237e:	693b      	ldr	r3, [r7, #16]
 8002380:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002382:	4b2c      	ldr	r3, [pc, #176]	; (8002434 <HAL_GPIO_Init+0x2d0>)
 8002384:	68db      	ldr	r3, [r3, #12]
 8002386:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	43db      	mvns	r3, r3
 800238c:	693a      	ldr	r2, [r7, #16]
 800238e:	4013      	ands	r3, r2
 8002390:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002392:	683b      	ldr	r3, [r7, #0]
 8002394:	685b      	ldr	r3, [r3, #4]
 8002396:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800239a:	2b00      	cmp	r3, #0
 800239c:	d003      	beq.n	80023a6 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 800239e:	693a      	ldr	r2, [r7, #16]
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	4313      	orrs	r3, r2
 80023a4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80023a6:	4a23      	ldr	r2, [pc, #140]	; (8002434 <HAL_GPIO_Init+0x2d0>)
 80023a8:	693b      	ldr	r3, [r7, #16]
 80023aa:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80023ac:	4b21      	ldr	r3, [pc, #132]	; (8002434 <HAL_GPIO_Init+0x2d0>)
 80023ae:	685b      	ldr	r3, [r3, #4]
 80023b0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	43db      	mvns	r3, r3
 80023b6:	693a      	ldr	r2, [r7, #16]
 80023b8:	4013      	ands	r3, r2
 80023ba:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80023bc:	683b      	ldr	r3, [r7, #0]
 80023be:	685b      	ldr	r3, [r3, #4]
 80023c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d003      	beq.n	80023d0 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 80023c8:	693a      	ldr	r2, [r7, #16]
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	4313      	orrs	r3, r2
 80023ce:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80023d0:	4a18      	ldr	r2, [pc, #96]	; (8002434 <HAL_GPIO_Init+0x2d0>)
 80023d2:	693b      	ldr	r3, [r7, #16]
 80023d4:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80023d6:	4b17      	ldr	r3, [pc, #92]	; (8002434 <HAL_GPIO_Init+0x2d0>)
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	43db      	mvns	r3, r3
 80023e0:	693a      	ldr	r2, [r7, #16]
 80023e2:	4013      	ands	r3, r2
 80023e4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80023e6:	683b      	ldr	r3, [r7, #0]
 80023e8:	685b      	ldr	r3, [r3, #4]
 80023ea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d003      	beq.n	80023fa <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 80023f2:	693a      	ldr	r2, [r7, #16]
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	4313      	orrs	r3, r2
 80023f8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80023fa:	4a0e      	ldr	r2, [pc, #56]	; (8002434 <HAL_GPIO_Init+0x2d0>)
 80023fc:	693b      	ldr	r3, [r7, #16]
 80023fe:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002400:	697b      	ldr	r3, [r7, #20]
 8002402:	3301      	adds	r3, #1
 8002404:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002406:	683b      	ldr	r3, [r7, #0]
 8002408:	681a      	ldr	r2, [r3, #0]
 800240a:	697b      	ldr	r3, [r7, #20]
 800240c:	fa22 f303 	lsr.w	r3, r2, r3
 8002410:	2b00      	cmp	r3, #0
 8002412:	f47f aeaf 	bne.w	8002174 <HAL_GPIO_Init+0x10>
  }
}
 8002416:	bf00      	nop
 8002418:	bf00      	nop
 800241a:	371c      	adds	r7, #28
 800241c:	46bd      	mov	sp, r7
 800241e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002422:	4770      	bx	lr
 8002424:	40021000 	.word	0x40021000
 8002428:	40010000 	.word	0x40010000
 800242c:	48000400 	.word	0x48000400
 8002430:	48000800 	.word	0x48000800
 8002434:	40010400 	.word	0x40010400

08002438 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002438:	b580      	push	{r7, lr}
 800243a:	b082      	sub	sp, #8
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	2b00      	cmp	r3, #0
 8002444:	d101      	bne.n	800244a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002446:	2301      	movs	r3, #1
 8002448:	e081      	b.n	800254e <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002450:	b2db      	uxtb	r3, r3
 8002452:	2b00      	cmp	r3, #0
 8002454:	d106      	bne.n	8002464 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	2200      	movs	r2, #0
 800245a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800245e:	6878      	ldr	r0, [r7, #4]
 8002460:	f7fe fdbc 	bl	8000fdc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	2224      	movs	r2, #36	; 0x24
 8002468:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	681a      	ldr	r2, [r3, #0]
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f022 0201 	bic.w	r2, r2, #1
 800247a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	685a      	ldr	r2, [r3, #4]
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002488:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	689a      	ldr	r2, [r3, #8]
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002498:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	68db      	ldr	r3, [r3, #12]
 800249e:	2b01      	cmp	r3, #1
 80024a0:	d107      	bne.n	80024b2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	689a      	ldr	r2, [r3, #8]
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80024ae:	609a      	str	r2, [r3, #8]
 80024b0:	e006      	b.n	80024c0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	689a      	ldr	r2, [r3, #8]
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80024be:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	68db      	ldr	r3, [r3, #12]
 80024c4:	2b02      	cmp	r3, #2
 80024c6:	d104      	bne.n	80024d2 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80024d0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	685b      	ldr	r3, [r3, #4]
 80024d8:	687a      	ldr	r2, [r7, #4]
 80024da:	6812      	ldr	r2, [r2, #0]
 80024dc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80024e0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80024e4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	68da      	ldr	r2, [r3, #12]
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80024f4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	691a      	ldr	r2, [r3, #16]
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	695b      	ldr	r3, [r3, #20]
 80024fe:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	699b      	ldr	r3, [r3, #24]
 8002506:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	430a      	orrs	r2, r1
 800250e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	69d9      	ldr	r1, [r3, #28]
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	6a1a      	ldr	r2, [r3, #32]
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	430a      	orrs	r2, r1
 800251e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	681a      	ldr	r2, [r3, #0]
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f042 0201 	orr.w	r2, r2, #1
 800252e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	2200      	movs	r2, #0
 8002534:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	2220      	movs	r2, #32
 800253a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	2200      	movs	r2, #0
 8002542:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	2200      	movs	r2, #0
 8002548:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800254c:	2300      	movs	r3, #0
}
 800254e:	4618      	mov	r0, r3
 8002550:	3708      	adds	r7, #8
 8002552:	46bd      	mov	sp, r7
 8002554:	bd80      	pop	{r7, pc}
	...

08002558 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8002558:	b580      	push	{r7, lr}
 800255a:	b088      	sub	sp, #32
 800255c:	af02      	add	r7, sp, #8
 800255e:	60f8      	str	r0, [r7, #12]
 8002560:	607a      	str	r2, [r7, #4]
 8002562:	461a      	mov	r2, r3
 8002564:	460b      	mov	r3, r1
 8002566:	817b      	strh	r3, [r7, #10]
 8002568:	4613      	mov	r3, r2
 800256a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002572:	b2db      	uxtb	r3, r3
 8002574:	2b20      	cmp	r3, #32
 8002576:	f040 80da 	bne.w	800272e <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002580:	2b01      	cmp	r3, #1
 8002582:	d101      	bne.n	8002588 <HAL_I2C_Master_Transmit+0x30>
 8002584:	2302      	movs	r3, #2
 8002586:	e0d3      	b.n	8002730 <HAL_I2C_Master_Transmit+0x1d8>
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	2201      	movs	r2, #1
 800258c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002590:	f7ff fcd6 	bl	8001f40 <HAL_GetTick>
 8002594:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002596:	697b      	ldr	r3, [r7, #20]
 8002598:	9300      	str	r3, [sp, #0]
 800259a:	2319      	movs	r3, #25
 800259c:	2201      	movs	r2, #1
 800259e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80025a2:	68f8      	ldr	r0, [r7, #12]
 80025a4:	f000 fa5e 	bl	8002a64 <I2C_WaitOnFlagUntilTimeout>
 80025a8:	4603      	mov	r3, r0
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d001      	beq.n	80025b2 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 80025ae:	2301      	movs	r3, #1
 80025b0:	e0be      	b.n	8002730 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	2221      	movs	r2, #33	; 0x21
 80025b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	2210      	movs	r2, #16
 80025be:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	2200      	movs	r2, #0
 80025c6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	687a      	ldr	r2, [r7, #4]
 80025cc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	893a      	ldrh	r2, [r7, #8]
 80025d2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	2200      	movs	r2, #0
 80025d8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025de:	b29b      	uxth	r3, r3
 80025e0:	2bff      	cmp	r3, #255	; 0xff
 80025e2:	d90e      	bls.n	8002602 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	22ff      	movs	r2, #255	; 0xff
 80025e8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025ee:	b2da      	uxtb	r2, r3
 80025f0:	8979      	ldrh	r1, [r7, #10]
 80025f2:	4b51      	ldr	r3, [pc, #324]	; (8002738 <HAL_I2C_Master_Transmit+0x1e0>)
 80025f4:	9300      	str	r3, [sp, #0]
 80025f6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80025fa:	68f8      	ldr	r0, [r7, #12]
 80025fc:	f000 fbda 	bl	8002db4 <I2C_TransferConfig>
 8002600:	e06c      	b.n	80026dc <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002606:	b29a      	uxth	r2, r3
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002610:	b2da      	uxtb	r2, r3
 8002612:	8979      	ldrh	r1, [r7, #10]
 8002614:	4b48      	ldr	r3, [pc, #288]	; (8002738 <HAL_I2C_Master_Transmit+0x1e0>)
 8002616:	9300      	str	r3, [sp, #0]
 8002618:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800261c:	68f8      	ldr	r0, [r7, #12]
 800261e:	f000 fbc9 	bl	8002db4 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8002622:	e05b      	b.n	80026dc <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002624:	697a      	ldr	r2, [r7, #20]
 8002626:	6a39      	ldr	r1, [r7, #32]
 8002628:	68f8      	ldr	r0, [r7, #12]
 800262a:	f000 fa5b 	bl	8002ae4 <I2C_WaitOnTXISFlagUntilTimeout>
 800262e:	4603      	mov	r3, r0
 8002630:	2b00      	cmp	r3, #0
 8002632:	d001      	beq.n	8002638 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8002634:	2301      	movs	r3, #1
 8002636:	e07b      	b.n	8002730 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800263c:	781a      	ldrb	r2, [r3, #0]
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002648:	1c5a      	adds	r2, r3, #1
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002652:	b29b      	uxth	r3, r3
 8002654:	3b01      	subs	r3, #1
 8002656:	b29a      	uxth	r2, r3
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002660:	3b01      	subs	r3, #1
 8002662:	b29a      	uxth	r2, r3
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800266c:	b29b      	uxth	r3, r3
 800266e:	2b00      	cmp	r3, #0
 8002670:	d034      	beq.n	80026dc <HAL_I2C_Master_Transmit+0x184>
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002676:	2b00      	cmp	r3, #0
 8002678:	d130      	bne.n	80026dc <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800267a:	697b      	ldr	r3, [r7, #20]
 800267c:	9300      	str	r3, [sp, #0]
 800267e:	6a3b      	ldr	r3, [r7, #32]
 8002680:	2200      	movs	r2, #0
 8002682:	2180      	movs	r1, #128	; 0x80
 8002684:	68f8      	ldr	r0, [r7, #12]
 8002686:	f000 f9ed 	bl	8002a64 <I2C_WaitOnFlagUntilTimeout>
 800268a:	4603      	mov	r3, r0
 800268c:	2b00      	cmp	r3, #0
 800268e:	d001      	beq.n	8002694 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8002690:	2301      	movs	r3, #1
 8002692:	e04d      	b.n	8002730 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002698:	b29b      	uxth	r3, r3
 800269a:	2bff      	cmp	r3, #255	; 0xff
 800269c:	d90e      	bls.n	80026bc <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	22ff      	movs	r2, #255	; 0xff
 80026a2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026a8:	b2da      	uxtb	r2, r3
 80026aa:	8979      	ldrh	r1, [r7, #10]
 80026ac:	2300      	movs	r3, #0
 80026ae:	9300      	str	r3, [sp, #0]
 80026b0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80026b4:	68f8      	ldr	r0, [r7, #12]
 80026b6:	f000 fb7d 	bl	8002db4 <I2C_TransferConfig>
 80026ba:	e00f      	b.n	80026dc <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026c0:	b29a      	uxth	r2, r3
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026ca:	b2da      	uxtb	r2, r3
 80026cc:	8979      	ldrh	r1, [r7, #10]
 80026ce:	2300      	movs	r3, #0
 80026d0:	9300      	str	r3, [sp, #0]
 80026d2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80026d6:	68f8      	ldr	r0, [r7, #12]
 80026d8:	f000 fb6c 	bl	8002db4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026e0:	b29b      	uxth	r3, r3
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d19e      	bne.n	8002624 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80026e6:	697a      	ldr	r2, [r7, #20]
 80026e8:	6a39      	ldr	r1, [r7, #32]
 80026ea:	68f8      	ldr	r0, [r7, #12]
 80026ec:	f000 fa3a 	bl	8002b64 <I2C_WaitOnSTOPFlagUntilTimeout>
 80026f0:	4603      	mov	r3, r0
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d001      	beq.n	80026fa <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 80026f6:	2301      	movs	r3, #1
 80026f8:	e01a      	b.n	8002730 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	2220      	movs	r2, #32
 8002700:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	6859      	ldr	r1, [r3, #4]
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	681a      	ldr	r2, [r3, #0]
 800270c:	4b0b      	ldr	r3, [pc, #44]	; (800273c <HAL_I2C_Master_Transmit+0x1e4>)
 800270e:	400b      	ands	r3, r1
 8002710:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	2220      	movs	r2, #32
 8002716:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	2200      	movs	r2, #0
 800271e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	2200      	movs	r2, #0
 8002726:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800272a:	2300      	movs	r3, #0
 800272c:	e000      	b.n	8002730 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 800272e:	2302      	movs	r3, #2
  }
}
 8002730:	4618      	mov	r0, r3
 8002732:	3718      	adds	r7, #24
 8002734:	46bd      	mov	sp, r7
 8002736:	bd80      	pop	{r7, pc}
 8002738:	80002000 	.word	0x80002000
 800273c:	fe00e800 	.word	0xfe00e800

08002740 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002740:	b580      	push	{r7, lr}
 8002742:	b088      	sub	sp, #32
 8002744:	af02      	add	r7, sp, #8
 8002746:	60f8      	str	r0, [r7, #12]
 8002748:	4608      	mov	r0, r1
 800274a:	4611      	mov	r1, r2
 800274c:	461a      	mov	r2, r3
 800274e:	4603      	mov	r3, r0
 8002750:	817b      	strh	r3, [r7, #10]
 8002752:	460b      	mov	r3, r1
 8002754:	813b      	strh	r3, [r7, #8]
 8002756:	4613      	mov	r3, r2
 8002758:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002760:	b2db      	uxtb	r3, r3
 8002762:	2b20      	cmp	r3, #32
 8002764:	f040 80fd 	bne.w	8002962 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8002768:	6a3b      	ldr	r3, [r7, #32]
 800276a:	2b00      	cmp	r3, #0
 800276c:	d002      	beq.n	8002774 <HAL_I2C_Mem_Read+0x34>
 800276e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002770:	2b00      	cmp	r3, #0
 8002772:	d105      	bne.n	8002780 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	f44f 7200 	mov.w	r2, #512	; 0x200
 800277a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800277c:	2301      	movs	r3, #1
 800277e:	e0f1      	b.n	8002964 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002786:	2b01      	cmp	r3, #1
 8002788:	d101      	bne.n	800278e <HAL_I2C_Mem_Read+0x4e>
 800278a:	2302      	movs	r3, #2
 800278c:	e0ea      	b.n	8002964 <HAL_I2C_Mem_Read+0x224>
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	2201      	movs	r2, #1
 8002792:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002796:	f7ff fbd3 	bl	8001f40 <HAL_GetTick>
 800279a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800279c:	697b      	ldr	r3, [r7, #20]
 800279e:	9300      	str	r3, [sp, #0]
 80027a0:	2319      	movs	r3, #25
 80027a2:	2201      	movs	r2, #1
 80027a4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80027a8:	68f8      	ldr	r0, [r7, #12]
 80027aa:	f000 f95b 	bl	8002a64 <I2C_WaitOnFlagUntilTimeout>
 80027ae:	4603      	mov	r3, r0
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d001      	beq.n	80027b8 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80027b4:	2301      	movs	r3, #1
 80027b6:	e0d5      	b.n	8002964 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	2222      	movs	r2, #34	; 0x22
 80027bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	2240      	movs	r2, #64	; 0x40
 80027c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	2200      	movs	r2, #0
 80027cc:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	6a3a      	ldr	r2, [r7, #32]
 80027d2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80027d8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	2200      	movs	r2, #0
 80027de:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80027e0:	88f8      	ldrh	r0, [r7, #6]
 80027e2:	893a      	ldrh	r2, [r7, #8]
 80027e4:	8979      	ldrh	r1, [r7, #10]
 80027e6:	697b      	ldr	r3, [r7, #20]
 80027e8:	9301      	str	r3, [sp, #4]
 80027ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027ec:	9300      	str	r3, [sp, #0]
 80027ee:	4603      	mov	r3, r0
 80027f0:	68f8      	ldr	r0, [r7, #12]
 80027f2:	f000 f8bf 	bl	8002974 <I2C_RequestMemoryRead>
 80027f6:	4603      	mov	r3, r0
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d005      	beq.n	8002808 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	2200      	movs	r2, #0
 8002800:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002804:	2301      	movs	r3, #1
 8002806:	e0ad      	b.n	8002964 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800280c:	b29b      	uxth	r3, r3
 800280e:	2bff      	cmp	r3, #255	; 0xff
 8002810:	d90e      	bls.n	8002830 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	22ff      	movs	r2, #255	; 0xff
 8002816:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800281c:	b2da      	uxtb	r2, r3
 800281e:	8979      	ldrh	r1, [r7, #10]
 8002820:	4b52      	ldr	r3, [pc, #328]	; (800296c <HAL_I2C_Mem_Read+0x22c>)
 8002822:	9300      	str	r3, [sp, #0]
 8002824:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002828:	68f8      	ldr	r0, [r7, #12]
 800282a:	f000 fac3 	bl	8002db4 <I2C_TransferConfig>
 800282e:	e00f      	b.n	8002850 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002834:	b29a      	uxth	r2, r3
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800283e:	b2da      	uxtb	r2, r3
 8002840:	8979      	ldrh	r1, [r7, #10]
 8002842:	4b4a      	ldr	r3, [pc, #296]	; (800296c <HAL_I2C_Mem_Read+0x22c>)
 8002844:	9300      	str	r3, [sp, #0]
 8002846:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800284a:	68f8      	ldr	r0, [r7, #12]
 800284c:	f000 fab2 	bl	8002db4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8002850:	697b      	ldr	r3, [r7, #20]
 8002852:	9300      	str	r3, [sp, #0]
 8002854:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002856:	2200      	movs	r2, #0
 8002858:	2104      	movs	r1, #4
 800285a:	68f8      	ldr	r0, [r7, #12]
 800285c:	f000 f902 	bl	8002a64 <I2C_WaitOnFlagUntilTimeout>
 8002860:	4603      	mov	r3, r0
 8002862:	2b00      	cmp	r3, #0
 8002864:	d001      	beq.n	800286a <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8002866:	2301      	movs	r3, #1
 8002868:	e07c      	b.n	8002964 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002874:	b2d2      	uxtb	r2, r2
 8002876:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800287c:	1c5a      	adds	r2, r3, #1
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002886:	3b01      	subs	r3, #1
 8002888:	b29a      	uxth	r2, r3
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002892:	b29b      	uxth	r3, r3
 8002894:	3b01      	subs	r3, #1
 8002896:	b29a      	uxth	r2, r3
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028a0:	b29b      	uxth	r3, r3
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d034      	beq.n	8002910 <HAL_I2C_Mem_Read+0x1d0>
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d130      	bne.n	8002910 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80028ae:	697b      	ldr	r3, [r7, #20]
 80028b0:	9300      	str	r3, [sp, #0]
 80028b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028b4:	2200      	movs	r2, #0
 80028b6:	2180      	movs	r1, #128	; 0x80
 80028b8:	68f8      	ldr	r0, [r7, #12]
 80028ba:	f000 f8d3 	bl	8002a64 <I2C_WaitOnFlagUntilTimeout>
 80028be:	4603      	mov	r3, r0
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d001      	beq.n	80028c8 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80028c4:	2301      	movs	r3, #1
 80028c6:	e04d      	b.n	8002964 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028cc:	b29b      	uxth	r3, r3
 80028ce:	2bff      	cmp	r3, #255	; 0xff
 80028d0:	d90e      	bls.n	80028f0 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	22ff      	movs	r2, #255	; 0xff
 80028d6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028dc:	b2da      	uxtb	r2, r3
 80028de:	8979      	ldrh	r1, [r7, #10]
 80028e0:	2300      	movs	r3, #0
 80028e2:	9300      	str	r3, [sp, #0]
 80028e4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80028e8:	68f8      	ldr	r0, [r7, #12]
 80028ea:	f000 fa63 	bl	8002db4 <I2C_TransferConfig>
 80028ee:	e00f      	b.n	8002910 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028f4:	b29a      	uxth	r2, r3
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028fe:	b2da      	uxtb	r2, r3
 8002900:	8979      	ldrh	r1, [r7, #10]
 8002902:	2300      	movs	r3, #0
 8002904:	9300      	str	r3, [sp, #0]
 8002906:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800290a:	68f8      	ldr	r0, [r7, #12]
 800290c:	f000 fa52 	bl	8002db4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002914:	b29b      	uxth	r3, r3
 8002916:	2b00      	cmp	r3, #0
 8002918:	d19a      	bne.n	8002850 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800291a:	697a      	ldr	r2, [r7, #20]
 800291c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800291e:	68f8      	ldr	r0, [r7, #12]
 8002920:	f000 f920 	bl	8002b64 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002924:	4603      	mov	r3, r0
 8002926:	2b00      	cmp	r3, #0
 8002928:	d001      	beq.n	800292e <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800292a:	2301      	movs	r3, #1
 800292c:	e01a      	b.n	8002964 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	2220      	movs	r2, #32
 8002934:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	6859      	ldr	r1, [r3, #4]
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	681a      	ldr	r2, [r3, #0]
 8002940:	4b0b      	ldr	r3, [pc, #44]	; (8002970 <HAL_I2C_Mem_Read+0x230>)
 8002942:	400b      	ands	r3, r1
 8002944:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	2220      	movs	r2, #32
 800294a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	2200      	movs	r2, #0
 8002952:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	2200      	movs	r2, #0
 800295a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800295e:	2300      	movs	r3, #0
 8002960:	e000      	b.n	8002964 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8002962:	2302      	movs	r3, #2
  }
}
 8002964:	4618      	mov	r0, r3
 8002966:	3718      	adds	r7, #24
 8002968:	46bd      	mov	sp, r7
 800296a:	bd80      	pop	{r7, pc}
 800296c:	80002400 	.word	0x80002400
 8002970:	fe00e800 	.word	0xfe00e800

08002974 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8002974:	b580      	push	{r7, lr}
 8002976:	b086      	sub	sp, #24
 8002978:	af02      	add	r7, sp, #8
 800297a:	60f8      	str	r0, [r7, #12]
 800297c:	4608      	mov	r0, r1
 800297e:	4611      	mov	r1, r2
 8002980:	461a      	mov	r2, r3
 8002982:	4603      	mov	r3, r0
 8002984:	817b      	strh	r3, [r7, #10]
 8002986:	460b      	mov	r3, r1
 8002988:	813b      	strh	r3, [r7, #8]
 800298a:	4613      	mov	r3, r2
 800298c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800298e:	88fb      	ldrh	r3, [r7, #6]
 8002990:	b2da      	uxtb	r2, r3
 8002992:	8979      	ldrh	r1, [r7, #10]
 8002994:	4b20      	ldr	r3, [pc, #128]	; (8002a18 <I2C_RequestMemoryRead+0xa4>)
 8002996:	9300      	str	r3, [sp, #0]
 8002998:	2300      	movs	r3, #0
 800299a:	68f8      	ldr	r0, [r7, #12]
 800299c:	f000 fa0a 	bl	8002db4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80029a0:	69fa      	ldr	r2, [r7, #28]
 80029a2:	69b9      	ldr	r1, [r7, #24]
 80029a4:	68f8      	ldr	r0, [r7, #12]
 80029a6:	f000 f89d 	bl	8002ae4 <I2C_WaitOnTXISFlagUntilTimeout>
 80029aa:	4603      	mov	r3, r0
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d001      	beq.n	80029b4 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80029b0:	2301      	movs	r3, #1
 80029b2:	e02c      	b.n	8002a0e <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80029b4:	88fb      	ldrh	r3, [r7, #6]
 80029b6:	2b01      	cmp	r3, #1
 80029b8:	d105      	bne.n	80029c6 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80029ba:	893b      	ldrh	r3, [r7, #8]
 80029bc:	b2da      	uxtb	r2, r3
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	629a      	str	r2, [r3, #40]	; 0x28
 80029c4:	e015      	b.n	80029f2 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80029c6:	893b      	ldrh	r3, [r7, #8]
 80029c8:	0a1b      	lsrs	r3, r3, #8
 80029ca:	b29b      	uxth	r3, r3
 80029cc:	b2da      	uxtb	r2, r3
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80029d4:	69fa      	ldr	r2, [r7, #28]
 80029d6:	69b9      	ldr	r1, [r7, #24]
 80029d8:	68f8      	ldr	r0, [r7, #12]
 80029da:	f000 f883 	bl	8002ae4 <I2C_WaitOnTXISFlagUntilTimeout>
 80029de:	4603      	mov	r3, r0
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d001      	beq.n	80029e8 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80029e4:	2301      	movs	r3, #1
 80029e6:	e012      	b.n	8002a0e <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80029e8:	893b      	ldrh	r3, [r7, #8]
 80029ea:	b2da      	uxtb	r2, r3
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80029f2:	69fb      	ldr	r3, [r7, #28]
 80029f4:	9300      	str	r3, [sp, #0]
 80029f6:	69bb      	ldr	r3, [r7, #24]
 80029f8:	2200      	movs	r2, #0
 80029fa:	2140      	movs	r1, #64	; 0x40
 80029fc:	68f8      	ldr	r0, [r7, #12]
 80029fe:	f000 f831 	bl	8002a64 <I2C_WaitOnFlagUntilTimeout>
 8002a02:	4603      	mov	r3, r0
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d001      	beq.n	8002a0c <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8002a08:	2301      	movs	r3, #1
 8002a0a:	e000      	b.n	8002a0e <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8002a0c:	2300      	movs	r3, #0
}
 8002a0e:	4618      	mov	r0, r3
 8002a10:	3710      	adds	r7, #16
 8002a12:	46bd      	mov	sp, r7
 8002a14:	bd80      	pop	{r7, pc}
 8002a16:	bf00      	nop
 8002a18:	80002000 	.word	0x80002000

08002a1c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002a1c:	b480      	push	{r7}
 8002a1e:	b083      	sub	sp, #12
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	699b      	ldr	r3, [r3, #24]
 8002a2a:	f003 0302 	and.w	r3, r3, #2
 8002a2e:	2b02      	cmp	r3, #2
 8002a30:	d103      	bne.n	8002a3a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	2200      	movs	r2, #0
 8002a38:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	699b      	ldr	r3, [r3, #24]
 8002a40:	f003 0301 	and.w	r3, r3, #1
 8002a44:	2b01      	cmp	r3, #1
 8002a46:	d007      	beq.n	8002a58 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	699a      	ldr	r2, [r3, #24]
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f042 0201 	orr.w	r2, r2, #1
 8002a56:	619a      	str	r2, [r3, #24]
  }
}
 8002a58:	bf00      	nop
 8002a5a:	370c      	adds	r7, #12
 8002a5c:	46bd      	mov	sp, r7
 8002a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a62:	4770      	bx	lr

08002a64 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002a64:	b580      	push	{r7, lr}
 8002a66:	b084      	sub	sp, #16
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	60f8      	str	r0, [r7, #12]
 8002a6c:	60b9      	str	r1, [r7, #8]
 8002a6e:	603b      	str	r3, [r7, #0]
 8002a70:	4613      	mov	r3, r2
 8002a72:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002a74:	e022      	b.n	8002abc <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a76:	683b      	ldr	r3, [r7, #0]
 8002a78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a7c:	d01e      	beq.n	8002abc <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a7e:	f7ff fa5f 	bl	8001f40 <HAL_GetTick>
 8002a82:	4602      	mov	r2, r0
 8002a84:	69bb      	ldr	r3, [r7, #24]
 8002a86:	1ad3      	subs	r3, r2, r3
 8002a88:	683a      	ldr	r2, [r7, #0]
 8002a8a:	429a      	cmp	r2, r3
 8002a8c:	d302      	bcc.n	8002a94 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002a8e:	683b      	ldr	r3, [r7, #0]
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d113      	bne.n	8002abc <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a98:	f043 0220 	orr.w	r2, r3, #32
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	2220      	movs	r2, #32
 8002aa4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	2200      	movs	r2, #0
 8002aac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	2200      	movs	r2, #0
 8002ab4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8002ab8:	2301      	movs	r3, #1
 8002aba:	e00f      	b.n	8002adc <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	699a      	ldr	r2, [r3, #24]
 8002ac2:	68bb      	ldr	r3, [r7, #8]
 8002ac4:	4013      	ands	r3, r2
 8002ac6:	68ba      	ldr	r2, [r7, #8]
 8002ac8:	429a      	cmp	r2, r3
 8002aca:	bf0c      	ite	eq
 8002acc:	2301      	moveq	r3, #1
 8002ace:	2300      	movne	r3, #0
 8002ad0:	b2db      	uxtb	r3, r3
 8002ad2:	461a      	mov	r2, r3
 8002ad4:	79fb      	ldrb	r3, [r7, #7]
 8002ad6:	429a      	cmp	r2, r3
 8002ad8:	d0cd      	beq.n	8002a76 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002ada:	2300      	movs	r3, #0
}
 8002adc:	4618      	mov	r0, r3
 8002ade:	3710      	adds	r7, #16
 8002ae0:	46bd      	mov	sp, r7
 8002ae2:	bd80      	pop	{r7, pc}

08002ae4 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	b084      	sub	sp, #16
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	60f8      	str	r0, [r7, #12]
 8002aec:	60b9      	str	r1, [r7, #8]
 8002aee:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002af0:	e02c      	b.n	8002b4c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002af2:	687a      	ldr	r2, [r7, #4]
 8002af4:	68b9      	ldr	r1, [r7, #8]
 8002af6:	68f8      	ldr	r0, [r7, #12]
 8002af8:	f000 f870 	bl	8002bdc <I2C_IsErrorOccurred>
 8002afc:	4603      	mov	r3, r0
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d001      	beq.n	8002b06 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002b02:	2301      	movs	r3, #1
 8002b04:	e02a      	b.n	8002b5c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b06:	68bb      	ldr	r3, [r7, #8]
 8002b08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b0c:	d01e      	beq.n	8002b4c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b0e:	f7ff fa17 	bl	8001f40 <HAL_GetTick>
 8002b12:	4602      	mov	r2, r0
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	1ad3      	subs	r3, r2, r3
 8002b18:	68ba      	ldr	r2, [r7, #8]
 8002b1a:	429a      	cmp	r2, r3
 8002b1c:	d302      	bcc.n	8002b24 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002b1e:	68bb      	ldr	r3, [r7, #8]
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d113      	bne.n	8002b4c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b28:	f043 0220 	orr.w	r2, r3, #32
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	2220      	movs	r2, #32
 8002b34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	2200      	movs	r2, #0
 8002b44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002b48:	2301      	movs	r3, #1
 8002b4a:	e007      	b.n	8002b5c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	699b      	ldr	r3, [r3, #24]
 8002b52:	f003 0302 	and.w	r3, r3, #2
 8002b56:	2b02      	cmp	r3, #2
 8002b58:	d1cb      	bne.n	8002af2 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002b5a:	2300      	movs	r3, #0
}
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	3710      	adds	r7, #16
 8002b60:	46bd      	mov	sp, r7
 8002b62:	bd80      	pop	{r7, pc}

08002b64 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002b64:	b580      	push	{r7, lr}
 8002b66:	b084      	sub	sp, #16
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	60f8      	str	r0, [r7, #12]
 8002b6c:	60b9      	str	r1, [r7, #8]
 8002b6e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002b70:	e028      	b.n	8002bc4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002b72:	687a      	ldr	r2, [r7, #4]
 8002b74:	68b9      	ldr	r1, [r7, #8]
 8002b76:	68f8      	ldr	r0, [r7, #12]
 8002b78:	f000 f830 	bl	8002bdc <I2C_IsErrorOccurred>
 8002b7c:	4603      	mov	r3, r0
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d001      	beq.n	8002b86 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002b82:	2301      	movs	r3, #1
 8002b84:	e026      	b.n	8002bd4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b86:	f7ff f9db 	bl	8001f40 <HAL_GetTick>
 8002b8a:	4602      	mov	r2, r0
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	1ad3      	subs	r3, r2, r3
 8002b90:	68ba      	ldr	r2, [r7, #8]
 8002b92:	429a      	cmp	r2, r3
 8002b94:	d302      	bcc.n	8002b9c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002b96:	68bb      	ldr	r3, [r7, #8]
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d113      	bne.n	8002bc4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ba0:	f043 0220 	orr.w	r2, r3, #32
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	2220      	movs	r2, #32
 8002bac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	2200      	movs	r2, #0
 8002bbc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8002bc0:	2301      	movs	r3, #1
 8002bc2:	e007      	b.n	8002bd4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	699b      	ldr	r3, [r3, #24]
 8002bca:	f003 0320 	and.w	r3, r3, #32
 8002bce:	2b20      	cmp	r3, #32
 8002bd0:	d1cf      	bne.n	8002b72 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002bd2:	2300      	movs	r3, #0
}
 8002bd4:	4618      	mov	r0, r3
 8002bd6:	3710      	adds	r7, #16
 8002bd8:	46bd      	mov	sp, r7
 8002bda:	bd80      	pop	{r7, pc}

08002bdc <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002bdc:	b580      	push	{r7, lr}
 8002bde:	b08a      	sub	sp, #40	; 0x28
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	60f8      	str	r0, [r7, #12]
 8002be4:	60b9      	str	r1, [r7, #8]
 8002be6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002be8:	2300      	movs	r3, #0
 8002bea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	699b      	ldr	r3, [r3, #24]
 8002bf4:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002bf6:	2300      	movs	r3, #0
 8002bf8:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002bfe:	69bb      	ldr	r3, [r7, #24]
 8002c00:	f003 0310 	and.w	r3, r3, #16
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d075      	beq.n	8002cf4 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	2210      	movs	r2, #16
 8002c0e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002c10:	e056      	b.n	8002cc0 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002c12:	68bb      	ldr	r3, [r7, #8]
 8002c14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c18:	d052      	beq.n	8002cc0 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002c1a:	f7ff f991 	bl	8001f40 <HAL_GetTick>
 8002c1e:	4602      	mov	r2, r0
 8002c20:	69fb      	ldr	r3, [r7, #28]
 8002c22:	1ad3      	subs	r3, r2, r3
 8002c24:	68ba      	ldr	r2, [r7, #8]
 8002c26:	429a      	cmp	r2, r3
 8002c28:	d302      	bcc.n	8002c30 <I2C_IsErrorOccurred+0x54>
 8002c2a:	68bb      	ldr	r3, [r7, #8]
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d147      	bne.n	8002cc0 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	685b      	ldr	r3, [r3, #4]
 8002c36:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c3a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002c42:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	699b      	ldr	r3, [r3, #24]
 8002c4a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002c4e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002c52:	d12e      	bne.n	8002cb2 <I2C_IsErrorOccurred+0xd6>
 8002c54:	697b      	ldr	r3, [r7, #20]
 8002c56:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002c5a:	d02a      	beq.n	8002cb2 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8002c5c:	7cfb      	ldrb	r3, [r7, #19]
 8002c5e:	2b20      	cmp	r3, #32
 8002c60:	d027      	beq.n	8002cb2 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	685a      	ldr	r2, [r3, #4]
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002c70:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002c72:	f7ff f965 	bl	8001f40 <HAL_GetTick>
 8002c76:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002c78:	e01b      	b.n	8002cb2 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002c7a:	f7ff f961 	bl	8001f40 <HAL_GetTick>
 8002c7e:	4602      	mov	r2, r0
 8002c80:	69fb      	ldr	r3, [r7, #28]
 8002c82:	1ad3      	subs	r3, r2, r3
 8002c84:	2b19      	cmp	r3, #25
 8002c86:	d914      	bls.n	8002cb2 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c8c:	f043 0220 	orr.w	r2, r3, #32
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	2220      	movs	r2, #32
 8002c98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 8002cac:	2301      	movs	r3, #1
 8002cae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	699b      	ldr	r3, [r3, #24]
 8002cb8:	f003 0320 	and.w	r3, r3, #32
 8002cbc:	2b20      	cmp	r3, #32
 8002cbe:	d1dc      	bne.n	8002c7a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	699b      	ldr	r3, [r3, #24]
 8002cc6:	f003 0320 	and.w	r3, r3, #32
 8002cca:	2b20      	cmp	r3, #32
 8002ccc:	d003      	beq.n	8002cd6 <I2C_IsErrorOccurred+0xfa>
 8002cce:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d09d      	beq.n	8002c12 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002cd6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d103      	bne.n	8002ce6 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	2220      	movs	r2, #32
 8002ce4:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002ce6:	6a3b      	ldr	r3, [r7, #32]
 8002ce8:	f043 0304 	orr.w	r3, r3, #4
 8002cec:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002cee:	2301      	movs	r3, #1
 8002cf0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	699b      	ldr	r3, [r3, #24]
 8002cfa:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002cfc:	69bb      	ldr	r3, [r7, #24]
 8002cfe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d00b      	beq.n	8002d1e <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002d06:	6a3b      	ldr	r3, [r7, #32]
 8002d08:	f043 0301 	orr.w	r3, r3, #1
 8002d0c:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002d16:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002d18:	2301      	movs	r3, #1
 8002d1a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002d1e:	69bb      	ldr	r3, [r7, #24]
 8002d20:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d00b      	beq.n	8002d40 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002d28:	6a3b      	ldr	r3, [r7, #32]
 8002d2a:	f043 0308 	orr.w	r3, r3, #8
 8002d2e:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002d38:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002d3a:	2301      	movs	r3, #1
 8002d3c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002d40:	69bb      	ldr	r3, [r7, #24]
 8002d42:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d00b      	beq.n	8002d62 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002d4a:	6a3b      	ldr	r3, [r7, #32]
 8002d4c:	f043 0302 	orr.w	r3, r3, #2
 8002d50:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002d5a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002d5c:	2301      	movs	r3, #1
 8002d5e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8002d62:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d01c      	beq.n	8002da4 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002d6a:	68f8      	ldr	r0, [r7, #12]
 8002d6c:	f7ff fe56 	bl	8002a1c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	6859      	ldr	r1, [r3, #4]
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	681a      	ldr	r2, [r3, #0]
 8002d7a:	4b0d      	ldr	r3, [pc, #52]	; (8002db0 <I2C_IsErrorOccurred+0x1d4>)
 8002d7c:	400b      	ands	r3, r1
 8002d7e:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002d84:	6a3b      	ldr	r3, [r7, #32]
 8002d86:	431a      	orrs	r2, r3
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	2220      	movs	r2, #32
 8002d90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	2200      	movs	r2, #0
 8002d98:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	2200      	movs	r2, #0
 8002da0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8002da4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8002da8:	4618      	mov	r0, r3
 8002daa:	3728      	adds	r7, #40	; 0x28
 8002dac:	46bd      	mov	sp, r7
 8002dae:	bd80      	pop	{r7, pc}
 8002db0:	fe00e800 	.word	0xfe00e800

08002db4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002db4:	b480      	push	{r7}
 8002db6:	b087      	sub	sp, #28
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	60f8      	str	r0, [r7, #12]
 8002dbc:	607b      	str	r3, [r7, #4]
 8002dbe:	460b      	mov	r3, r1
 8002dc0:	817b      	strh	r3, [r7, #10]
 8002dc2:	4613      	mov	r3, r2
 8002dc4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002dc6:	897b      	ldrh	r3, [r7, #10]
 8002dc8:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002dcc:	7a7b      	ldrb	r3, [r7, #9]
 8002dce:	041b      	lsls	r3, r3, #16
 8002dd0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002dd4:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002dda:	6a3b      	ldr	r3, [r7, #32]
 8002ddc:	4313      	orrs	r3, r2
 8002dde:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002de2:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	685a      	ldr	r2, [r3, #4]
 8002dea:	6a3b      	ldr	r3, [r7, #32]
 8002dec:	0d5b      	lsrs	r3, r3, #21
 8002dee:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8002df2:	4b08      	ldr	r3, [pc, #32]	; (8002e14 <I2C_TransferConfig+0x60>)
 8002df4:	430b      	orrs	r3, r1
 8002df6:	43db      	mvns	r3, r3
 8002df8:	ea02 0103 	and.w	r1, r2, r3
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	697a      	ldr	r2, [r7, #20]
 8002e02:	430a      	orrs	r2, r1
 8002e04:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002e06:	bf00      	nop
 8002e08:	371c      	adds	r7, #28
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e10:	4770      	bx	lr
 8002e12:	bf00      	nop
 8002e14:	03ff63ff 	.word	0x03ff63ff

08002e18 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002e18:	b480      	push	{r7}
 8002e1a:	b083      	sub	sp, #12
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	6078      	str	r0, [r7, #4]
 8002e20:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002e28:	b2db      	uxtb	r3, r3
 8002e2a:	2b20      	cmp	r3, #32
 8002e2c:	d138      	bne.n	8002ea0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002e34:	2b01      	cmp	r3, #1
 8002e36:	d101      	bne.n	8002e3c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002e38:	2302      	movs	r3, #2
 8002e3a:	e032      	b.n	8002ea2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	2201      	movs	r2, #1
 8002e40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	2224      	movs	r2, #36	; 0x24
 8002e48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	681a      	ldr	r2, [r3, #0]
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f022 0201 	bic.w	r2, r2, #1
 8002e5a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	681a      	ldr	r2, [r3, #0]
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002e6a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	6819      	ldr	r1, [r3, #0]
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	683a      	ldr	r2, [r7, #0]
 8002e78:	430a      	orrs	r2, r1
 8002e7a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	681a      	ldr	r2, [r3, #0]
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f042 0201 	orr.w	r2, r2, #1
 8002e8a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	2220      	movs	r2, #32
 8002e90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	2200      	movs	r2, #0
 8002e98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002e9c:	2300      	movs	r3, #0
 8002e9e:	e000      	b.n	8002ea2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002ea0:	2302      	movs	r3, #2
  }
}
 8002ea2:	4618      	mov	r0, r3
 8002ea4:	370c      	adds	r7, #12
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eac:	4770      	bx	lr

08002eae <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002eae:	b480      	push	{r7}
 8002eb0:	b085      	sub	sp, #20
 8002eb2:	af00      	add	r7, sp, #0
 8002eb4:	6078      	str	r0, [r7, #4]
 8002eb6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002ebe:	b2db      	uxtb	r3, r3
 8002ec0:	2b20      	cmp	r3, #32
 8002ec2:	d139      	bne.n	8002f38 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002eca:	2b01      	cmp	r3, #1
 8002ecc:	d101      	bne.n	8002ed2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002ece:	2302      	movs	r3, #2
 8002ed0:	e033      	b.n	8002f3a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	2201      	movs	r2, #1
 8002ed6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	2224      	movs	r2, #36	; 0x24
 8002ede:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	681a      	ldr	r2, [r3, #0]
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f022 0201 	bic.w	r2, r2, #1
 8002ef0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002f00:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002f02:	683b      	ldr	r3, [r7, #0]
 8002f04:	021b      	lsls	r3, r3, #8
 8002f06:	68fa      	ldr	r2, [r7, #12]
 8002f08:	4313      	orrs	r3, r2
 8002f0a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	68fa      	ldr	r2, [r7, #12]
 8002f12:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	681a      	ldr	r2, [r3, #0]
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f042 0201 	orr.w	r2, r2, #1
 8002f22:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	2220      	movs	r2, #32
 8002f28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	2200      	movs	r2, #0
 8002f30:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002f34:	2300      	movs	r3, #0
 8002f36:	e000      	b.n	8002f3a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002f38:	2302      	movs	r3, #2
  }
}
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	3714      	adds	r7, #20
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f44:	4770      	bx	lr
	...

08002f48 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002f48:	b480      	push	{r7}
 8002f4a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002f4c:	4b05      	ldr	r3, [pc, #20]	; (8002f64 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	4a04      	ldr	r2, [pc, #16]	; (8002f64 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002f52:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f56:	6013      	str	r3, [r2, #0]
}
 8002f58:	bf00      	nop
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f60:	4770      	bx	lr
 8002f62:	bf00      	nop
 8002f64:	40007000 	.word	0x40007000

08002f68 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002f68:	b480      	push	{r7}
 8002f6a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002f6c:	4b04      	ldr	r3, [pc, #16]	; (8002f80 <HAL_PWREx_GetVoltageRange+0x18>)
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002f74:	4618      	mov	r0, r3
 8002f76:	46bd      	mov	sp, r7
 8002f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7c:	4770      	bx	lr
 8002f7e:	bf00      	nop
 8002f80:	40007000 	.word	0x40007000

08002f84 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002f84:	b480      	push	{r7}
 8002f86:	b085      	sub	sp, #20
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002f92:	d130      	bne.n	8002ff6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002f94:	4b23      	ldr	r3, [pc, #140]	; (8003024 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002f9c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002fa0:	d038      	beq.n	8003014 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002fa2:	4b20      	ldr	r3, [pc, #128]	; (8003024 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002faa:	4a1e      	ldr	r2, [pc, #120]	; (8003024 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002fac:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002fb0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002fb2:	4b1d      	ldr	r3, [pc, #116]	; (8003028 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	2232      	movs	r2, #50	; 0x32
 8002fb8:	fb02 f303 	mul.w	r3, r2, r3
 8002fbc:	4a1b      	ldr	r2, [pc, #108]	; (800302c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002fbe:	fba2 2303 	umull	r2, r3, r2, r3
 8002fc2:	0c9b      	lsrs	r3, r3, #18
 8002fc4:	3301      	adds	r3, #1
 8002fc6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002fc8:	e002      	b.n	8002fd0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	3b01      	subs	r3, #1
 8002fce:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002fd0:	4b14      	ldr	r3, [pc, #80]	; (8003024 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002fd2:	695b      	ldr	r3, [r3, #20]
 8002fd4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002fd8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002fdc:	d102      	bne.n	8002fe4 <HAL_PWREx_ControlVoltageScaling+0x60>
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d1f2      	bne.n	8002fca <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002fe4:	4b0f      	ldr	r3, [pc, #60]	; (8003024 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002fe6:	695b      	ldr	r3, [r3, #20]
 8002fe8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002fec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ff0:	d110      	bne.n	8003014 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002ff2:	2303      	movs	r3, #3
 8002ff4:	e00f      	b.n	8003016 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002ff6:	4b0b      	ldr	r3, [pc, #44]	; (8003024 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002ffe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003002:	d007      	beq.n	8003014 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003004:	4b07      	ldr	r3, [pc, #28]	; (8003024 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800300c:	4a05      	ldr	r2, [pc, #20]	; (8003024 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800300e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003012:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003014:	2300      	movs	r3, #0
}
 8003016:	4618      	mov	r0, r3
 8003018:	3714      	adds	r7, #20
 800301a:	46bd      	mov	sp, r7
 800301c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003020:	4770      	bx	lr
 8003022:	bf00      	nop
 8003024:	40007000 	.word	0x40007000
 8003028:	20000000 	.word	0x20000000
 800302c:	431bde83 	.word	0x431bde83

08003030 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003030:	b580      	push	{r7, lr}
 8003032:	b088      	sub	sp, #32
 8003034:	af00      	add	r7, sp, #0
 8003036:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	2b00      	cmp	r3, #0
 800303c:	d102      	bne.n	8003044 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800303e:	2301      	movs	r3, #1
 8003040:	f000 bc02 	b.w	8003848 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003044:	4b96      	ldr	r3, [pc, #600]	; (80032a0 <HAL_RCC_OscConfig+0x270>)
 8003046:	689b      	ldr	r3, [r3, #8]
 8003048:	f003 030c 	and.w	r3, r3, #12
 800304c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800304e:	4b94      	ldr	r3, [pc, #592]	; (80032a0 <HAL_RCC_OscConfig+0x270>)
 8003050:	68db      	ldr	r3, [r3, #12]
 8003052:	f003 0303 	and.w	r3, r3, #3
 8003056:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f003 0310 	and.w	r3, r3, #16
 8003060:	2b00      	cmp	r3, #0
 8003062:	f000 80e4 	beq.w	800322e <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003066:	69bb      	ldr	r3, [r7, #24]
 8003068:	2b00      	cmp	r3, #0
 800306a:	d007      	beq.n	800307c <HAL_RCC_OscConfig+0x4c>
 800306c:	69bb      	ldr	r3, [r7, #24]
 800306e:	2b0c      	cmp	r3, #12
 8003070:	f040 808b 	bne.w	800318a <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003074:	697b      	ldr	r3, [r7, #20]
 8003076:	2b01      	cmp	r3, #1
 8003078:	f040 8087 	bne.w	800318a <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800307c:	4b88      	ldr	r3, [pc, #544]	; (80032a0 <HAL_RCC_OscConfig+0x270>)
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f003 0302 	and.w	r3, r3, #2
 8003084:	2b00      	cmp	r3, #0
 8003086:	d005      	beq.n	8003094 <HAL_RCC_OscConfig+0x64>
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	699b      	ldr	r3, [r3, #24]
 800308c:	2b00      	cmp	r3, #0
 800308e:	d101      	bne.n	8003094 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8003090:	2301      	movs	r3, #1
 8003092:	e3d9      	b.n	8003848 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	6a1a      	ldr	r2, [r3, #32]
 8003098:	4b81      	ldr	r3, [pc, #516]	; (80032a0 <HAL_RCC_OscConfig+0x270>)
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f003 0308 	and.w	r3, r3, #8
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d004      	beq.n	80030ae <HAL_RCC_OscConfig+0x7e>
 80030a4:	4b7e      	ldr	r3, [pc, #504]	; (80032a0 <HAL_RCC_OscConfig+0x270>)
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80030ac:	e005      	b.n	80030ba <HAL_RCC_OscConfig+0x8a>
 80030ae:	4b7c      	ldr	r3, [pc, #496]	; (80032a0 <HAL_RCC_OscConfig+0x270>)
 80030b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80030b4:	091b      	lsrs	r3, r3, #4
 80030b6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80030ba:	4293      	cmp	r3, r2
 80030bc:	d223      	bcs.n	8003106 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	6a1b      	ldr	r3, [r3, #32]
 80030c2:	4618      	mov	r0, r3
 80030c4:	f000 fdbe 	bl	8003c44 <RCC_SetFlashLatencyFromMSIRange>
 80030c8:	4603      	mov	r3, r0
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d001      	beq.n	80030d2 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80030ce:	2301      	movs	r3, #1
 80030d0:	e3ba      	b.n	8003848 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80030d2:	4b73      	ldr	r3, [pc, #460]	; (80032a0 <HAL_RCC_OscConfig+0x270>)
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	4a72      	ldr	r2, [pc, #456]	; (80032a0 <HAL_RCC_OscConfig+0x270>)
 80030d8:	f043 0308 	orr.w	r3, r3, #8
 80030dc:	6013      	str	r3, [r2, #0]
 80030de:	4b70      	ldr	r3, [pc, #448]	; (80032a0 <HAL_RCC_OscConfig+0x270>)
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	6a1b      	ldr	r3, [r3, #32]
 80030ea:	496d      	ldr	r1, [pc, #436]	; (80032a0 <HAL_RCC_OscConfig+0x270>)
 80030ec:	4313      	orrs	r3, r2
 80030ee:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80030f0:	4b6b      	ldr	r3, [pc, #428]	; (80032a0 <HAL_RCC_OscConfig+0x270>)
 80030f2:	685b      	ldr	r3, [r3, #4]
 80030f4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	69db      	ldr	r3, [r3, #28]
 80030fc:	021b      	lsls	r3, r3, #8
 80030fe:	4968      	ldr	r1, [pc, #416]	; (80032a0 <HAL_RCC_OscConfig+0x270>)
 8003100:	4313      	orrs	r3, r2
 8003102:	604b      	str	r3, [r1, #4]
 8003104:	e025      	b.n	8003152 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003106:	4b66      	ldr	r3, [pc, #408]	; (80032a0 <HAL_RCC_OscConfig+0x270>)
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	4a65      	ldr	r2, [pc, #404]	; (80032a0 <HAL_RCC_OscConfig+0x270>)
 800310c:	f043 0308 	orr.w	r3, r3, #8
 8003110:	6013      	str	r3, [r2, #0]
 8003112:	4b63      	ldr	r3, [pc, #396]	; (80032a0 <HAL_RCC_OscConfig+0x270>)
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	6a1b      	ldr	r3, [r3, #32]
 800311e:	4960      	ldr	r1, [pc, #384]	; (80032a0 <HAL_RCC_OscConfig+0x270>)
 8003120:	4313      	orrs	r3, r2
 8003122:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003124:	4b5e      	ldr	r3, [pc, #376]	; (80032a0 <HAL_RCC_OscConfig+0x270>)
 8003126:	685b      	ldr	r3, [r3, #4]
 8003128:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	69db      	ldr	r3, [r3, #28]
 8003130:	021b      	lsls	r3, r3, #8
 8003132:	495b      	ldr	r1, [pc, #364]	; (80032a0 <HAL_RCC_OscConfig+0x270>)
 8003134:	4313      	orrs	r3, r2
 8003136:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003138:	69bb      	ldr	r3, [r7, #24]
 800313a:	2b00      	cmp	r3, #0
 800313c:	d109      	bne.n	8003152 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	6a1b      	ldr	r3, [r3, #32]
 8003142:	4618      	mov	r0, r3
 8003144:	f000 fd7e 	bl	8003c44 <RCC_SetFlashLatencyFromMSIRange>
 8003148:	4603      	mov	r3, r0
 800314a:	2b00      	cmp	r3, #0
 800314c:	d001      	beq.n	8003152 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800314e:	2301      	movs	r3, #1
 8003150:	e37a      	b.n	8003848 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003152:	f000 fc81 	bl	8003a58 <HAL_RCC_GetSysClockFreq>
 8003156:	4602      	mov	r2, r0
 8003158:	4b51      	ldr	r3, [pc, #324]	; (80032a0 <HAL_RCC_OscConfig+0x270>)
 800315a:	689b      	ldr	r3, [r3, #8]
 800315c:	091b      	lsrs	r3, r3, #4
 800315e:	f003 030f 	and.w	r3, r3, #15
 8003162:	4950      	ldr	r1, [pc, #320]	; (80032a4 <HAL_RCC_OscConfig+0x274>)
 8003164:	5ccb      	ldrb	r3, [r1, r3]
 8003166:	f003 031f 	and.w	r3, r3, #31
 800316a:	fa22 f303 	lsr.w	r3, r2, r3
 800316e:	4a4e      	ldr	r2, [pc, #312]	; (80032a8 <HAL_RCC_OscConfig+0x278>)
 8003170:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003172:	4b4e      	ldr	r3, [pc, #312]	; (80032ac <HAL_RCC_OscConfig+0x27c>)
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	4618      	mov	r0, r3
 8003178:	f7fe fcaa 	bl	8001ad0 <HAL_InitTick>
 800317c:	4603      	mov	r3, r0
 800317e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003180:	7bfb      	ldrb	r3, [r7, #15]
 8003182:	2b00      	cmp	r3, #0
 8003184:	d052      	beq.n	800322c <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8003186:	7bfb      	ldrb	r3, [r7, #15]
 8003188:	e35e      	b.n	8003848 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	699b      	ldr	r3, [r3, #24]
 800318e:	2b00      	cmp	r3, #0
 8003190:	d032      	beq.n	80031f8 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003192:	4b43      	ldr	r3, [pc, #268]	; (80032a0 <HAL_RCC_OscConfig+0x270>)
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	4a42      	ldr	r2, [pc, #264]	; (80032a0 <HAL_RCC_OscConfig+0x270>)
 8003198:	f043 0301 	orr.w	r3, r3, #1
 800319c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800319e:	f7fe fecf 	bl	8001f40 <HAL_GetTick>
 80031a2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80031a4:	e008      	b.n	80031b8 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80031a6:	f7fe fecb 	bl	8001f40 <HAL_GetTick>
 80031aa:	4602      	mov	r2, r0
 80031ac:	693b      	ldr	r3, [r7, #16]
 80031ae:	1ad3      	subs	r3, r2, r3
 80031b0:	2b02      	cmp	r3, #2
 80031b2:	d901      	bls.n	80031b8 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80031b4:	2303      	movs	r3, #3
 80031b6:	e347      	b.n	8003848 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80031b8:	4b39      	ldr	r3, [pc, #228]	; (80032a0 <HAL_RCC_OscConfig+0x270>)
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f003 0302 	and.w	r3, r3, #2
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d0f0      	beq.n	80031a6 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80031c4:	4b36      	ldr	r3, [pc, #216]	; (80032a0 <HAL_RCC_OscConfig+0x270>)
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	4a35      	ldr	r2, [pc, #212]	; (80032a0 <HAL_RCC_OscConfig+0x270>)
 80031ca:	f043 0308 	orr.w	r3, r3, #8
 80031ce:	6013      	str	r3, [r2, #0]
 80031d0:	4b33      	ldr	r3, [pc, #204]	; (80032a0 <HAL_RCC_OscConfig+0x270>)
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	6a1b      	ldr	r3, [r3, #32]
 80031dc:	4930      	ldr	r1, [pc, #192]	; (80032a0 <HAL_RCC_OscConfig+0x270>)
 80031de:	4313      	orrs	r3, r2
 80031e0:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80031e2:	4b2f      	ldr	r3, [pc, #188]	; (80032a0 <HAL_RCC_OscConfig+0x270>)
 80031e4:	685b      	ldr	r3, [r3, #4]
 80031e6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	69db      	ldr	r3, [r3, #28]
 80031ee:	021b      	lsls	r3, r3, #8
 80031f0:	492b      	ldr	r1, [pc, #172]	; (80032a0 <HAL_RCC_OscConfig+0x270>)
 80031f2:	4313      	orrs	r3, r2
 80031f4:	604b      	str	r3, [r1, #4]
 80031f6:	e01a      	b.n	800322e <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80031f8:	4b29      	ldr	r3, [pc, #164]	; (80032a0 <HAL_RCC_OscConfig+0x270>)
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	4a28      	ldr	r2, [pc, #160]	; (80032a0 <HAL_RCC_OscConfig+0x270>)
 80031fe:	f023 0301 	bic.w	r3, r3, #1
 8003202:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003204:	f7fe fe9c 	bl	8001f40 <HAL_GetTick>
 8003208:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800320a:	e008      	b.n	800321e <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800320c:	f7fe fe98 	bl	8001f40 <HAL_GetTick>
 8003210:	4602      	mov	r2, r0
 8003212:	693b      	ldr	r3, [r7, #16]
 8003214:	1ad3      	subs	r3, r2, r3
 8003216:	2b02      	cmp	r3, #2
 8003218:	d901      	bls.n	800321e <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800321a:	2303      	movs	r3, #3
 800321c:	e314      	b.n	8003848 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800321e:	4b20      	ldr	r3, [pc, #128]	; (80032a0 <HAL_RCC_OscConfig+0x270>)
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f003 0302 	and.w	r3, r3, #2
 8003226:	2b00      	cmp	r3, #0
 8003228:	d1f0      	bne.n	800320c <HAL_RCC_OscConfig+0x1dc>
 800322a:	e000      	b.n	800322e <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800322c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f003 0301 	and.w	r3, r3, #1
 8003236:	2b00      	cmp	r3, #0
 8003238:	d073      	beq.n	8003322 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800323a:	69bb      	ldr	r3, [r7, #24]
 800323c:	2b08      	cmp	r3, #8
 800323e:	d005      	beq.n	800324c <HAL_RCC_OscConfig+0x21c>
 8003240:	69bb      	ldr	r3, [r7, #24]
 8003242:	2b0c      	cmp	r3, #12
 8003244:	d10e      	bne.n	8003264 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003246:	697b      	ldr	r3, [r7, #20]
 8003248:	2b03      	cmp	r3, #3
 800324a:	d10b      	bne.n	8003264 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800324c:	4b14      	ldr	r3, [pc, #80]	; (80032a0 <HAL_RCC_OscConfig+0x270>)
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003254:	2b00      	cmp	r3, #0
 8003256:	d063      	beq.n	8003320 <HAL_RCC_OscConfig+0x2f0>
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	685b      	ldr	r3, [r3, #4]
 800325c:	2b00      	cmp	r3, #0
 800325e:	d15f      	bne.n	8003320 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003260:	2301      	movs	r3, #1
 8003262:	e2f1      	b.n	8003848 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	685b      	ldr	r3, [r3, #4]
 8003268:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800326c:	d106      	bne.n	800327c <HAL_RCC_OscConfig+0x24c>
 800326e:	4b0c      	ldr	r3, [pc, #48]	; (80032a0 <HAL_RCC_OscConfig+0x270>)
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	4a0b      	ldr	r2, [pc, #44]	; (80032a0 <HAL_RCC_OscConfig+0x270>)
 8003274:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003278:	6013      	str	r3, [r2, #0]
 800327a:	e025      	b.n	80032c8 <HAL_RCC_OscConfig+0x298>
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	685b      	ldr	r3, [r3, #4]
 8003280:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003284:	d114      	bne.n	80032b0 <HAL_RCC_OscConfig+0x280>
 8003286:	4b06      	ldr	r3, [pc, #24]	; (80032a0 <HAL_RCC_OscConfig+0x270>)
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	4a05      	ldr	r2, [pc, #20]	; (80032a0 <HAL_RCC_OscConfig+0x270>)
 800328c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003290:	6013      	str	r3, [r2, #0]
 8003292:	4b03      	ldr	r3, [pc, #12]	; (80032a0 <HAL_RCC_OscConfig+0x270>)
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	4a02      	ldr	r2, [pc, #8]	; (80032a0 <HAL_RCC_OscConfig+0x270>)
 8003298:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800329c:	6013      	str	r3, [r2, #0]
 800329e:	e013      	b.n	80032c8 <HAL_RCC_OscConfig+0x298>
 80032a0:	40021000 	.word	0x40021000
 80032a4:	08009abc 	.word	0x08009abc
 80032a8:	20000000 	.word	0x20000000
 80032ac:	20000004 	.word	0x20000004
 80032b0:	4ba0      	ldr	r3, [pc, #640]	; (8003534 <HAL_RCC_OscConfig+0x504>)
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	4a9f      	ldr	r2, [pc, #636]	; (8003534 <HAL_RCC_OscConfig+0x504>)
 80032b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80032ba:	6013      	str	r3, [r2, #0]
 80032bc:	4b9d      	ldr	r3, [pc, #628]	; (8003534 <HAL_RCC_OscConfig+0x504>)
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	4a9c      	ldr	r2, [pc, #624]	; (8003534 <HAL_RCC_OscConfig+0x504>)
 80032c2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80032c6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	685b      	ldr	r3, [r3, #4]
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d013      	beq.n	80032f8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032d0:	f7fe fe36 	bl	8001f40 <HAL_GetTick>
 80032d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80032d6:	e008      	b.n	80032ea <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80032d8:	f7fe fe32 	bl	8001f40 <HAL_GetTick>
 80032dc:	4602      	mov	r2, r0
 80032de:	693b      	ldr	r3, [r7, #16]
 80032e0:	1ad3      	subs	r3, r2, r3
 80032e2:	2b64      	cmp	r3, #100	; 0x64
 80032e4:	d901      	bls.n	80032ea <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80032e6:	2303      	movs	r3, #3
 80032e8:	e2ae      	b.n	8003848 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80032ea:	4b92      	ldr	r3, [pc, #584]	; (8003534 <HAL_RCC_OscConfig+0x504>)
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d0f0      	beq.n	80032d8 <HAL_RCC_OscConfig+0x2a8>
 80032f6:	e014      	b.n	8003322 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032f8:	f7fe fe22 	bl	8001f40 <HAL_GetTick>
 80032fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80032fe:	e008      	b.n	8003312 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003300:	f7fe fe1e 	bl	8001f40 <HAL_GetTick>
 8003304:	4602      	mov	r2, r0
 8003306:	693b      	ldr	r3, [r7, #16]
 8003308:	1ad3      	subs	r3, r2, r3
 800330a:	2b64      	cmp	r3, #100	; 0x64
 800330c:	d901      	bls.n	8003312 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800330e:	2303      	movs	r3, #3
 8003310:	e29a      	b.n	8003848 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003312:	4b88      	ldr	r3, [pc, #544]	; (8003534 <HAL_RCC_OscConfig+0x504>)
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800331a:	2b00      	cmp	r3, #0
 800331c:	d1f0      	bne.n	8003300 <HAL_RCC_OscConfig+0x2d0>
 800331e:	e000      	b.n	8003322 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003320:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f003 0302 	and.w	r3, r3, #2
 800332a:	2b00      	cmp	r3, #0
 800332c:	d060      	beq.n	80033f0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800332e:	69bb      	ldr	r3, [r7, #24]
 8003330:	2b04      	cmp	r3, #4
 8003332:	d005      	beq.n	8003340 <HAL_RCC_OscConfig+0x310>
 8003334:	69bb      	ldr	r3, [r7, #24]
 8003336:	2b0c      	cmp	r3, #12
 8003338:	d119      	bne.n	800336e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800333a:	697b      	ldr	r3, [r7, #20]
 800333c:	2b02      	cmp	r3, #2
 800333e:	d116      	bne.n	800336e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003340:	4b7c      	ldr	r3, [pc, #496]	; (8003534 <HAL_RCC_OscConfig+0x504>)
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003348:	2b00      	cmp	r3, #0
 800334a:	d005      	beq.n	8003358 <HAL_RCC_OscConfig+0x328>
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	68db      	ldr	r3, [r3, #12]
 8003350:	2b00      	cmp	r3, #0
 8003352:	d101      	bne.n	8003358 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003354:	2301      	movs	r3, #1
 8003356:	e277      	b.n	8003848 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003358:	4b76      	ldr	r3, [pc, #472]	; (8003534 <HAL_RCC_OscConfig+0x504>)
 800335a:	685b      	ldr	r3, [r3, #4]
 800335c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	691b      	ldr	r3, [r3, #16]
 8003364:	061b      	lsls	r3, r3, #24
 8003366:	4973      	ldr	r1, [pc, #460]	; (8003534 <HAL_RCC_OscConfig+0x504>)
 8003368:	4313      	orrs	r3, r2
 800336a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800336c:	e040      	b.n	80033f0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	68db      	ldr	r3, [r3, #12]
 8003372:	2b00      	cmp	r3, #0
 8003374:	d023      	beq.n	80033be <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003376:	4b6f      	ldr	r3, [pc, #444]	; (8003534 <HAL_RCC_OscConfig+0x504>)
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	4a6e      	ldr	r2, [pc, #440]	; (8003534 <HAL_RCC_OscConfig+0x504>)
 800337c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003380:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003382:	f7fe fddd 	bl	8001f40 <HAL_GetTick>
 8003386:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003388:	e008      	b.n	800339c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800338a:	f7fe fdd9 	bl	8001f40 <HAL_GetTick>
 800338e:	4602      	mov	r2, r0
 8003390:	693b      	ldr	r3, [r7, #16]
 8003392:	1ad3      	subs	r3, r2, r3
 8003394:	2b02      	cmp	r3, #2
 8003396:	d901      	bls.n	800339c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003398:	2303      	movs	r3, #3
 800339a:	e255      	b.n	8003848 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800339c:	4b65      	ldr	r3, [pc, #404]	; (8003534 <HAL_RCC_OscConfig+0x504>)
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d0f0      	beq.n	800338a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033a8:	4b62      	ldr	r3, [pc, #392]	; (8003534 <HAL_RCC_OscConfig+0x504>)
 80033aa:	685b      	ldr	r3, [r3, #4]
 80033ac:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	691b      	ldr	r3, [r3, #16]
 80033b4:	061b      	lsls	r3, r3, #24
 80033b6:	495f      	ldr	r1, [pc, #380]	; (8003534 <HAL_RCC_OscConfig+0x504>)
 80033b8:	4313      	orrs	r3, r2
 80033ba:	604b      	str	r3, [r1, #4]
 80033bc:	e018      	b.n	80033f0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80033be:	4b5d      	ldr	r3, [pc, #372]	; (8003534 <HAL_RCC_OscConfig+0x504>)
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	4a5c      	ldr	r2, [pc, #368]	; (8003534 <HAL_RCC_OscConfig+0x504>)
 80033c4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80033c8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033ca:	f7fe fdb9 	bl	8001f40 <HAL_GetTick>
 80033ce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80033d0:	e008      	b.n	80033e4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80033d2:	f7fe fdb5 	bl	8001f40 <HAL_GetTick>
 80033d6:	4602      	mov	r2, r0
 80033d8:	693b      	ldr	r3, [r7, #16]
 80033da:	1ad3      	subs	r3, r2, r3
 80033dc:	2b02      	cmp	r3, #2
 80033de:	d901      	bls.n	80033e4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80033e0:	2303      	movs	r3, #3
 80033e2:	e231      	b.n	8003848 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80033e4:	4b53      	ldr	r3, [pc, #332]	; (8003534 <HAL_RCC_OscConfig+0x504>)
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d1f0      	bne.n	80033d2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	f003 0308 	and.w	r3, r3, #8
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d03c      	beq.n	8003476 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	695b      	ldr	r3, [r3, #20]
 8003400:	2b00      	cmp	r3, #0
 8003402:	d01c      	beq.n	800343e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003404:	4b4b      	ldr	r3, [pc, #300]	; (8003534 <HAL_RCC_OscConfig+0x504>)
 8003406:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800340a:	4a4a      	ldr	r2, [pc, #296]	; (8003534 <HAL_RCC_OscConfig+0x504>)
 800340c:	f043 0301 	orr.w	r3, r3, #1
 8003410:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003414:	f7fe fd94 	bl	8001f40 <HAL_GetTick>
 8003418:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800341a:	e008      	b.n	800342e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800341c:	f7fe fd90 	bl	8001f40 <HAL_GetTick>
 8003420:	4602      	mov	r2, r0
 8003422:	693b      	ldr	r3, [r7, #16]
 8003424:	1ad3      	subs	r3, r2, r3
 8003426:	2b02      	cmp	r3, #2
 8003428:	d901      	bls.n	800342e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800342a:	2303      	movs	r3, #3
 800342c:	e20c      	b.n	8003848 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800342e:	4b41      	ldr	r3, [pc, #260]	; (8003534 <HAL_RCC_OscConfig+0x504>)
 8003430:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003434:	f003 0302 	and.w	r3, r3, #2
 8003438:	2b00      	cmp	r3, #0
 800343a:	d0ef      	beq.n	800341c <HAL_RCC_OscConfig+0x3ec>
 800343c:	e01b      	b.n	8003476 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800343e:	4b3d      	ldr	r3, [pc, #244]	; (8003534 <HAL_RCC_OscConfig+0x504>)
 8003440:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003444:	4a3b      	ldr	r2, [pc, #236]	; (8003534 <HAL_RCC_OscConfig+0x504>)
 8003446:	f023 0301 	bic.w	r3, r3, #1
 800344a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800344e:	f7fe fd77 	bl	8001f40 <HAL_GetTick>
 8003452:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003454:	e008      	b.n	8003468 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003456:	f7fe fd73 	bl	8001f40 <HAL_GetTick>
 800345a:	4602      	mov	r2, r0
 800345c:	693b      	ldr	r3, [r7, #16]
 800345e:	1ad3      	subs	r3, r2, r3
 8003460:	2b02      	cmp	r3, #2
 8003462:	d901      	bls.n	8003468 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003464:	2303      	movs	r3, #3
 8003466:	e1ef      	b.n	8003848 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003468:	4b32      	ldr	r3, [pc, #200]	; (8003534 <HAL_RCC_OscConfig+0x504>)
 800346a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800346e:	f003 0302 	and.w	r3, r3, #2
 8003472:	2b00      	cmp	r3, #0
 8003474:	d1ef      	bne.n	8003456 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f003 0304 	and.w	r3, r3, #4
 800347e:	2b00      	cmp	r3, #0
 8003480:	f000 80a6 	beq.w	80035d0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003484:	2300      	movs	r3, #0
 8003486:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003488:	4b2a      	ldr	r3, [pc, #168]	; (8003534 <HAL_RCC_OscConfig+0x504>)
 800348a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800348c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003490:	2b00      	cmp	r3, #0
 8003492:	d10d      	bne.n	80034b0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003494:	4b27      	ldr	r3, [pc, #156]	; (8003534 <HAL_RCC_OscConfig+0x504>)
 8003496:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003498:	4a26      	ldr	r2, [pc, #152]	; (8003534 <HAL_RCC_OscConfig+0x504>)
 800349a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800349e:	6593      	str	r3, [r2, #88]	; 0x58
 80034a0:	4b24      	ldr	r3, [pc, #144]	; (8003534 <HAL_RCC_OscConfig+0x504>)
 80034a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034a8:	60bb      	str	r3, [r7, #8]
 80034aa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80034ac:	2301      	movs	r3, #1
 80034ae:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80034b0:	4b21      	ldr	r3, [pc, #132]	; (8003538 <HAL_RCC_OscConfig+0x508>)
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d118      	bne.n	80034ee <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80034bc:	4b1e      	ldr	r3, [pc, #120]	; (8003538 <HAL_RCC_OscConfig+0x508>)
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	4a1d      	ldr	r2, [pc, #116]	; (8003538 <HAL_RCC_OscConfig+0x508>)
 80034c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80034c6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80034c8:	f7fe fd3a 	bl	8001f40 <HAL_GetTick>
 80034cc:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80034ce:	e008      	b.n	80034e2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80034d0:	f7fe fd36 	bl	8001f40 <HAL_GetTick>
 80034d4:	4602      	mov	r2, r0
 80034d6:	693b      	ldr	r3, [r7, #16]
 80034d8:	1ad3      	subs	r3, r2, r3
 80034da:	2b02      	cmp	r3, #2
 80034dc:	d901      	bls.n	80034e2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80034de:	2303      	movs	r3, #3
 80034e0:	e1b2      	b.n	8003848 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80034e2:	4b15      	ldr	r3, [pc, #84]	; (8003538 <HAL_RCC_OscConfig+0x508>)
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d0f0      	beq.n	80034d0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	689b      	ldr	r3, [r3, #8]
 80034f2:	2b01      	cmp	r3, #1
 80034f4:	d108      	bne.n	8003508 <HAL_RCC_OscConfig+0x4d8>
 80034f6:	4b0f      	ldr	r3, [pc, #60]	; (8003534 <HAL_RCC_OscConfig+0x504>)
 80034f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034fc:	4a0d      	ldr	r2, [pc, #52]	; (8003534 <HAL_RCC_OscConfig+0x504>)
 80034fe:	f043 0301 	orr.w	r3, r3, #1
 8003502:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003506:	e029      	b.n	800355c <HAL_RCC_OscConfig+0x52c>
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	689b      	ldr	r3, [r3, #8]
 800350c:	2b05      	cmp	r3, #5
 800350e:	d115      	bne.n	800353c <HAL_RCC_OscConfig+0x50c>
 8003510:	4b08      	ldr	r3, [pc, #32]	; (8003534 <HAL_RCC_OscConfig+0x504>)
 8003512:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003516:	4a07      	ldr	r2, [pc, #28]	; (8003534 <HAL_RCC_OscConfig+0x504>)
 8003518:	f043 0304 	orr.w	r3, r3, #4
 800351c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003520:	4b04      	ldr	r3, [pc, #16]	; (8003534 <HAL_RCC_OscConfig+0x504>)
 8003522:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003526:	4a03      	ldr	r2, [pc, #12]	; (8003534 <HAL_RCC_OscConfig+0x504>)
 8003528:	f043 0301 	orr.w	r3, r3, #1
 800352c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003530:	e014      	b.n	800355c <HAL_RCC_OscConfig+0x52c>
 8003532:	bf00      	nop
 8003534:	40021000 	.word	0x40021000
 8003538:	40007000 	.word	0x40007000
 800353c:	4b9a      	ldr	r3, [pc, #616]	; (80037a8 <HAL_RCC_OscConfig+0x778>)
 800353e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003542:	4a99      	ldr	r2, [pc, #612]	; (80037a8 <HAL_RCC_OscConfig+0x778>)
 8003544:	f023 0301 	bic.w	r3, r3, #1
 8003548:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800354c:	4b96      	ldr	r3, [pc, #600]	; (80037a8 <HAL_RCC_OscConfig+0x778>)
 800354e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003552:	4a95      	ldr	r2, [pc, #596]	; (80037a8 <HAL_RCC_OscConfig+0x778>)
 8003554:	f023 0304 	bic.w	r3, r3, #4
 8003558:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	689b      	ldr	r3, [r3, #8]
 8003560:	2b00      	cmp	r3, #0
 8003562:	d016      	beq.n	8003592 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003564:	f7fe fcec 	bl	8001f40 <HAL_GetTick>
 8003568:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800356a:	e00a      	b.n	8003582 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800356c:	f7fe fce8 	bl	8001f40 <HAL_GetTick>
 8003570:	4602      	mov	r2, r0
 8003572:	693b      	ldr	r3, [r7, #16]
 8003574:	1ad3      	subs	r3, r2, r3
 8003576:	f241 3288 	movw	r2, #5000	; 0x1388
 800357a:	4293      	cmp	r3, r2
 800357c:	d901      	bls.n	8003582 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800357e:	2303      	movs	r3, #3
 8003580:	e162      	b.n	8003848 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003582:	4b89      	ldr	r3, [pc, #548]	; (80037a8 <HAL_RCC_OscConfig+0x778>)
 8003584:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003588:	f003 0302 	and.w	r3, r3, #2
 800358c:	2b00      	cmp	r3, #0
 800358e:	d0ed      	beq.n	800356c <HAL_RCC_OscConfig+0x53c>
 8003590:	e015      	b.n	80035be <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003592:	f7fe fcd5 	bl	8001f40 <HAL_GetTick>
 8003596:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003598:	e00a      	b.n	80035b0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800359a:	f7fe fcd1 	bl	8001f40 <HAL_GetTick>
 800359e:	4602      	mov	r2, r0
 80035a0:	693b      	ldr	r3, [r7, #16]
 80035a2:	1ad3      	subs	r3, r2, r3
 80035a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80035a8:	4293      	cmp	r3, r2
 80035aa:	d901      	bls.n	80035b0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80035ac:	2303      	movs	r3, #3
 80035ae:	e14b      	b.n	8003848 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80035b0:	4b7d      	ldr	r3, [pc, #500]	; (80037a8 <HAL_RCC_OscConfig+0x778>)
 80035b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035b6:	f003 0302 	and.w	r3, r3, #2
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d1ed      	bne.n	800359a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80035be:	7ffb      	ldrb	r3, [r7, #31]
 80035c0:	2b01      	cmp	r3, #1
 80035c2:	d105      	bne.n	80035d0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80035c4:	4b78      	ldr	r3, [pc, #480]	; (80037a8 <HAL_RCC_OscConfig+0x778>)
 80035c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035c8:	4a77      	ldr	r2, [pc, #476]	; (80037a8 <HAL_RCC_OscConfig+0x778>)
 80035ca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80035ce:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f003 0320 	and.w	r3, r3, #32
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d03c      	beq.n	8003656 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d01c      	beq.n	800361e <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80035e4:	4b70      	ldr	r3, [pc, #448]	; (80037a8 <HAL_RCC_OscConfig+0x778>)
 80035e6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80035ea:	4a6f      	ldr	r2, [pc, #444]	; (80037a8 <HAL_RCC_OscConfig+0x778>)
 80035ec:	f043 0301 	orr.w	r3, r3, #1
 80035f0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035f4:	f7fe fca4 	bl	8001f40 <HAL_GetTick>
 80035f8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80035fa:	e008      	b.n	800360e <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80035fc:	f7fe fca0 	bl	8001f40 <HAL_GetTick>
 8003600:	4602      	mov	r2, r0
 8003602:	693b      	ldr	r3, [r7, #16]
 8003604:	1ad3      	subs	r3, r2, r3
 8003606:	2b02      	cmp	r3, #2
 8003608:	d901      	bls.n	800360e <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800360a:	2303      	movs	r3, #3
 800360c:	e11c      	b.n	8003848 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800360e:	4b66      	ldr	r3, [pc, #408]	; (80037a8 <HAL_RCC_OscConfig+0x778>)
 8003610:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003614:	f003 0302 	and.w	r3, r3, #2
 8003618:	2b00      	cmp	r3, #0
 800361a:	d0ef      	beq.n	80035fc <HAL_RCC_OscConfig+0x5cc>
 800361c:	e01b      	b.n	8003656 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800361e:	4b62      	ldr	r3, [pc, #392]	; (80037a8 <HAL_RCC_OscConfig+0x778>)
 8003620:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003624:	4a60      	ldr	r2, [pc, #384]	; (80037a8 <HAL_RCC_OscConfig+0x778>)
 8003626:	f023 0301 	bic.w	r3, r3, #1
 800362a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800362e:	f7fe fc87 	bl	8001f40 <HAL_GetTick>
 8003632:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003634:	e008      	b.n	8003648 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003636:	f7fe fc83 	bl	8001f40 <HAL_GetTick>
 800363a:	4602      	mov	r2, r0
 800363c:	693b      	ldr	r3, [r7, #16]
 800363e:	1ad3      	subs	r3, r2, r3
 8003640:	2b02      	cmp	r3, #2
 8003642:	d901      	bls.n	8003648 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8003644:	2303      	movs	r3, #3
 8003646:	e0ff      	b.n	8003848 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003648:	4b57      	ldr	r3, [pc, #348]	; (80037a8 <HAL_RCC_OscConfig+0x778>)
 800364a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800364e:	f003 0302 	and.w	r3, r3, #2
 8003652:	2b00      	cmp	r3, #0
 8003654:	d1ef      	bne.n	8003636 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800365a:	2b00      	cmp	r3, #0
 800365c:	f000 80f3 	beq.w	8003846 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003664:	2b02      	cmp	r3, #2
 8003666:	f040 80c9 	bne.w	80037fc <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800366a:	4b4f      	ldr	r3, [pc, #316]	; (80037a8 <HAL_RCC_OscConfig+0x778>)
 800366c:	68db      	ldr	r3, [r3, #12]
 800366e:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003670:	697b      	ldr	r3, [r7, #20]
 8003672:	f003 0203 	and.w	r2, r3, #3
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800367a:	429a      	cmp	r2, r3
 800367c:	d12c      	bne.n	80036d8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800367e:	697b      	ldr	r3, [r7, #20]
 8003680:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003688:	3b01      	subs	r3, #1
 800368a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800368c:	429a      	cmp	r2, r3
 800368e:	d123      	bne.n	80036d8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003690:	697b      	ldr	r3, [r7, #20]
 8003692:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800369a:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800369c:	429a      	cmp	r2, r3
 800369e:	d11b      	bne.n	80036d8 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80036a0:	697b      	ldr	r3, [r7, #20]
 80036a2:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036aa:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80036ac:	429a      	cmp	r2, r3
 80036ae:	d113      	bne.n	80036d8 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80036b0:	697b      	ldr	r3, [r7, #20]
 80036b2:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036ba:	085b      	lsrs	r3, r3, #1
 80036bc:	3b01      	subs	r3, #1
 80036be:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80036c0:	429a      	cmp	r2, r3
 80036c2:	d109      	bne.n	80036d8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80036c4:	697b      	ldr	r3, [r7, #20]
 80036c6:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036ce:	085b      	lsrs	r3, r3, #1
 80036d0:	3b01      	subs	r3, #1
 80036d2:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80036d4:	429a      	cmp	r2, r3
 80036d6:	d06b      	beq.n	80037b0 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80036d8:	69bb      	ldr	r3, [r7, #24]
 80036da:	2b0c      	cmp	r3, #12
 80036dc:	d062      	beq.n	80037a4 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80036de:	4b32      	ldr	r3, [pc, #200]	; (80037a8 <HAL_RCC_OscConfig+0x778>)
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d001      	beq.n	80036ee <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 80036ea:	2301      	movs	r3, #1
 80036ec:	e0ac      	b.n	8003848 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80036ee:	4b2e      	ldr	r3, [pc, #184]	; (80037a8 <HAL_RCC_OscConfig+0x778>)
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	4a2d      	ldr	r2, [pc, #180]	; (80037a8 <HAL_RCC_OscConfig+0x778>)
 80036f4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80036f8:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80036fa:	f7fe fc21 	bl	8001f40 <HAL_GetTick>
 80036fe:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003700:	e008      	b.n	8003714 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003702:	f7fe fc1d 	bl	8001f40 <HAL_GetTick>
 8003706:	4602      	mov	r2, r0
 8003708:	693b      	ldr	r3, [r7, #16]
 800370a:	1ad3      	subs	r3, r2, r3
 800370c:	2b02      	cmp	r3, #2
 800370e:	d901      	bls.n	8003714 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8003710:	2303      	movs	r3, #3
 8003712:	e099      	b.n	8003848 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003714:	4b24      	ldr	r3, [pc, #144]	; (80037a8 <HAL_RCC_OscConfig+0x778>)
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800371c:	2b00      	cmp	r3, #0
 800371e:	d1f0      	bne.n	8003702 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003720:	4b21      	ldr	r3, [pc, #132]	; (80037a8 <HAL_RCC_OscConfig+0x778>)
 8003722:	68da      	ldr	r2, [r3, #12]
 8003724:	4b21      	ldr	r3, [pc, #132]	; (80037ac <HAL_RCC_OscConfig+0x77c>)
 8003726:	4013      	ands	r3, r2
 8003728:	687a      	ldr	r2, [r7, #4]
 800372a:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800372c:	687a      	ldr	r2, [r7, #4]
 800372e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003730:	3a01      	subs	r2, #1
 8003732:	0112      	lsls	r2, r2, #4
 8003734:	4311      	orrs	r1, r2
 8003736:	687a      	ldr	r2, [r7, #4]
 8003738:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800373a:	0212      	lsls	r2, r2, #8
 800373c:	4311      	orrs	r1, r2
 800373e:	687a      	ldr	r2, [r7, #4]
 8003740:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003742:	0852      	lsrs	r2, r2, #1
 8003744:	3a01      	subs	r2, #1
 8003746:	0552      	lsls	r2, r2, #21
 8003748:	4311      	orrs	r1, r2
 800374a:	687a      	ldr	r2, [r7, #4]
 800374c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800374e:	0852      	lsrs	r2, r2, #1
 8003750:	3a01      	subs	r2, #1
 8003752:	0652      	lsls	r2, r2, #25
 8003754:	4311      	orrs	r1, r2
 8003756:	687a      	ldr	r2, [r7, #4]
 8003758:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800375a:	06d2      	lsls	r2, r2, #27
 800375c:	430a      	orrs	r2, r1
 800375e:	4912      	ldr	r1, [pc, #72]	; (80037a8 <HAL_RCC_OscConfig+0x778>)
 8003760:	4313      	orrs	r3, r2
 8003762:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003764:	4b10      	ldr	r3, [pc, #64]	; (80037a8 <HAL_RCC_OscConfig+0x778>)
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	4a0f      	ldr	r2, [pc, #60]	; (80037a8 <HAL_RCC_OscConfig+0x778>)
 800376a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800376e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003770:	4b0d      	ldr	r3, [pc, #52]	; (80037a8 <HAL_RCC_OscConfig+0x778>)
 8003772:	68db      	ldr	r3, [r3, #12]
 8003774:	4a0c      	ldr	r2, [pc, #48]	; (80037a8 <HAL_RCC_OscConfig+0x778>)
 8003776:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800377a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800377c:	f7fe fbe0 	bl	8001f40 <HAL_GetTick>
 8003780:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003782:	e008      	b.n	8003796 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003784:	f7fe fbdc 	bl	8001f40 <HAL_GetTick>
 8003788:	4602      	mov	r2, r0
 800378a:	693b      	ldr	r3, [r7, #16]
 800378c:	1ad3      	subs	r3, r2, r3
 800378e:	2b02      	cmp	r3, #2
 8003790:	d901      	bls.n	8003796 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8003792:	2303      	movs	r3, #3
 8003794:	e058      	b.n	8003848 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003796:	4b04      	ldr	r3, [pc, #16]	; (80037a8 <HAL_RCC_OscConfig+0x778>)
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d0f0      	beq.n	8003784 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80037a2:	e050      	b.n	8003846 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80037a4:	2301      	movs	r3, #1
 80037a6:	e04f      	b.n	8003848 <HAL_RCC_OscConfig+0x818>
 80037a8:	40021000 	.word	0x40021000
 80037ac:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80037b0:	4b27      	ldr	r3, [pc, #156]	; (8003850 <HAL_RCC_OscConfig+0x820>)
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d144      	bne.n	8003846 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80037bc:	4b24      	ldr	r3, [pc, #144]	; (8003850 <HAL_RCC_OscConfig+0x820>)
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	4a23      	ldr	r2, [pc, #140]	; (8003850 <HAL_RCC_OscConfig+0x820>)
 80037c2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80037c6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80037c8:	4b21      	ldr	r3, [pc, #132]	; (8003850 <HAL_RCC_OscConfig+0x820>)
 80037ca:	68db      	ldr	r3, [r3, #12]
 80037cc:	4a20      	ldr	r2, [pc, #128]	; (8003850 <HAL_RCC_OscConfig+0x820>)
 80037ce:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80037d2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80037d4:	f7fe fbb4 	bl	8001f40 <HAL_GetTick>
 80037d8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80037da:	e008      	b.n	80037ee <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037dc:	f7fe fbb0 	bl	8001f40 <HAL_GetTick>
 80037e0:	4602      	mov	r2, r0
 80037e2:	693b      	ldr	r3, [r7, #16]
 80037e4:	1ad3      	subs	r3, r2, r3
 80037e6:	2b02      	cmp	r3, #2
 80037e8:	d901      	bls.n	80037ee <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 80037ea:	2303      	movs	r3, #3
 80037ec:	e02c      	b.n	8003848 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80037ee:	4b18      	ldr	r3, [pc, #96]	; (8003850 <HAL_RCC_OscConfig+0x820>)
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d0f0      	beq.n	80037dc <HAL_RCC_OscConfig+0x7ac>
 80037fa:	e024      	b.n	8003846 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80037fc:	69bb      	ldr	r3, [r7, #24]
 80037fe:	2b0c      	cmp	r3, #12
 8003800:	d01f      	beq.n	8003842 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003802:	4b13      	ldr	r3, [pc, #76]	; (8003850 <HAL_RCC_OscConfig+0x820>)
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	4a12      	ldr	r2, [pc, #72]	; (8003850 <HAL_RCC_OscConfig+0x820>)
 8003808:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800380c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800380e:	f7fe fb97 	bl	8001f40 <HAL_GetTick>
 8003812:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003814:	e008      	b.n	8003828 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003816:	f7fe fb93 	bl	8001f40 <HAL_GetTick>
 800381a:	4602      	mov	r2, r0
 800381c:	693b      	ldr	r3, [r7, #16]
 800381e:	1ad3      	subs	r3, r2, r3
 8003820:	2b02      	cmp	r3, #2
 8003822:	d901      	bls.n	8003828 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8003824:	2303      	movs	r3, #3
 8003826:	e00f      	b.n	8003848 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003828:	4b09      	ldr	r3, [pc, #36]	; (8003850 <HAL_RCC_OscConfig+0x820>)
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003830:	2b00      	cmp	r3, #0
 8003832:	d1f0      	bne.n	8003816 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8003834:	4b06      	ldr	r3, [pc, #24]	; (8003850 <HAL_RCC_OscConfig+0x820>)
 8003836:	68da      	ldr	r2, [r3, #12]
 8003838:	4905      	ldr	r1, [pc, #20]	; (8003850 <HAL_RCC_OscConfig+0x820>)
 800383a:	4b06      	ldr	r3, [pc, #24]	; (8003854 <HAL_RCC_OscConfig+0x824>)
 800383c:	4013      	ands	r3, r2
 800383e:	60cb      	str	r3, [r1, #12]
 8003840:	e001      	b.n	8003846 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003842:	2301      	movs	r3, #1
 8003844:	e000      	b.n	8003848 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8003846:	2300      	movs	r3, #0
}
 8003848:	4618      	mov	r0, r3
 800384a:	3720      	adds	r7, #32
 800384c:	46bd      	mov	sp, r7
 800384e:	bd80      	pop	{r7, pc}
 8003850:	40021000 	.word	0x40021000
 8003854:	feeefffc 	.word	0xfeeefffc

08003858 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003858:	b580      	push	{r7, lr}
 800385a:	b084      	sub	sp, #16
 800385c:	af00      	add	r7, sp, #0
 800385e:	6078      	str	r0, [r7, #4]
 8003860:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	2b00      	cmp	r3, #0
 8003866:	d101      	bne.n	800386c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003868:	2301      	movs	r3, #1
 800386a:	e0e7      	b.n	8003a3c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800386c:	4b75      	ldr	r3, [pc, #468]	; (8003a44 <HAL_RCC_ClockConfig+0x1ec>)
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f003 0307 	and.w	r3, r3, #7
 8003874:	683a      	ldr	r2, [r7, #0]
 8003876:	429a      	cmp	r2, r3
 8003878:	d910      	bls.n	800389c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800387a:	4b72      	ldr	r3, [pc, #456]	; (8003a44 <HAL_RCC_ClockConfig+0x1ec>)
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f023 0207 	bic.w	r2, r3, #7
 8003882:	4970      	ldr	r1, [pc, #448]	; (8003a44 <HAL_RCC_ClockConfig+0x1ec>)
 8003884:	683b      	ldr	r3, [r7, #0]
 8003886:	4313      	orrs	r3, r2
 8003888:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800388a:	4b6e      	ldr	r3, [pc, #440]	; (8003a44 <HAL_RCC_ClockConfig+0x1ec>)
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f003 0307 	and.w	r3, r3, #7
 8003892:	683a      	ldr	r2, [r7, #0]
 8003894:	429a      	cmp	r2, r3
 8003896:	d001      	beq.n	800389c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003898:	2301      	movs	r3, #1
 800389a:	e0cf      	b.n	8003a3c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f003 0302 	and.w	r3, r3, #2
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d010      	beq.n	80038ca <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	689a      	ldr	r2, [r3, #8]
 80038ac:	4b66      	ldr	r3, [pc, #408]	; (8003a48 <HAL_RCC_ClockConfig+0x1f0>)
 80038ae:	689b      	ldr	r3, [r3, #8]
 80038b0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80038b4:	429a      	cmp	r2, r3
 80038b6:	d908      	bls.n	80038ca <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80038b8:	4b63      	ldr	r3, [pc, #396]	; (8003a48 <HAL_RCC_ClockConfig+0x1f0>)
 80038ba:	689b      	ldr	r3, [r3, #8]
 80038bc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	689b      	ldr	r3, [r3, #8]
 80038c4:	4960      	ldr	r1, [pc, #384]	; (8003a48 <HAL_RCC_ClockConfig+0x1f0>)
 80038c6:	4313      	orrs	r3, r2
 80038c8:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f003 0301 	and.w	r3, r3, #1
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d04c      	beq.n	8003970 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	685b      	ldr	r3, [r3, #4]
 80038da:	2b03      	cmp	r3, #3
 80038dc:	d107      	bne.n	80038ee <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80038de:	4b5a      	ldr	r3, [pc, #360]	; (8003a48 <HAL_RCC_ClockConfig+0x1f0>)
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d121      	bne.n	800392e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80038ea:	2301      	movs	r3, #1
 80038ec:	e0a6      	b.n	8003a3c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	685b      	ldr	r3, [r3, #4]
 80038f2:	2b02      	cmp	r3, #2
 80038f4:	d107      	bne.n	8003906 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80038f6:	4b54      	ldr	r3, [pc, #336]	; (8003a48 <HAL_RCC_ClockConfig+0x1f0>)
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d115      	bne.n	800392e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003902:	2301      	movs	r3, #1
 8003904:	e09a      	b.n	8003a3c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	685b      	ldr	r3, [r3, #4]
 800390a:	2b00      	cmp	r3, #0
 800390c:	d107      	bne.n	800391e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800390e:	4b4e      	ldr	r3, [pc, #312]	; (8003a48 <HAL_RCC_ClockConfig+0x1f0>)
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	f003 0302 	and.w	r3, r3, #2
 8003916:	2b00      	cmp	r3, #0
 8003918:	d109      	bne.n	800392e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800391a:	2301      	movs	r3, #1
 800391c:	e08e      	b.n	8003a3c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800391e:	4b4a      	ldr	r3, [pc, #296]	; (8003a48 <HAL_RCC_ClockConfig+0x1f0>)
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003926:	2b00      	cmp	r3, #0
 8003928:	d101      	bne.n	800392e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800392a:	2301      	movs	r3, #1
 800392c:	e086      	b.n	8003a3c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800392e:	4b46      	ldr	r3, [pc, #280]	; (8003a48 <HAL_RCC_ClockConfig+0x1f0>)
 8003930:	689b      	ldr	r3, [r3, #8]
 8003932:	f023 0203 	bic.w	r2, r3, #3
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	685b      	ldr	r3, [r3, #4]
 800393a:	4943      	ldr	r1, [pc, #268]	; (8003a48 <HAL_RCC_ClockConfig+0x1f0>)
 800393c:	4313      	orrs	r3, r2
 800393e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003940:	f7fe fafe 	bl	8001f40 <HAL_GetTick>
 8003944:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003946:	e00a      	b.n	800395e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003948:	f7fe fafa 	bl	8001f40 <HAL_GetTick>
 800394c:	4602      	mov	r2, r0
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	1ad3      	subs	r3, r2, r3
 8003952:	f241 3288 	movw	r2, #5000	; 0x1388
 8003956:	4293      	cmp	r3, r2
 8003958:	d901      	bls.n	800395e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800395a:	2303      	movs	r3, #3
 800395c:	e06e      	b.n	8003a3c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800395e:	4b3a      	ldr	r3, [pc, #232]	; (8003a48 <HAL_RCC_ClockConfig+0x1f0>)
 8003960:	689b      	ldr	r3, [r3, #8]
 8003962:	f003 020c 	and.w	r2, r3, #12
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	685b      	ldr	r3, [r3, #4]
 800396a:	009b      	lsls	r3, r3, #2
 800396c:	429a      	cmp	r2, r3
 800396e:	d1eb      	bne.n	8003948 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	f003 0302 	and.w	r3, r3, #2
 8003978:	2b00      	cmp	r3, #0
 800397a:	d010      	beq.n	800399e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	689a      	ldr	r2, [r3, #8]
 8003980:	4b31      	ldr	r3, [pc, #196]	; (8003a48 <HAL_RCC_ClockConfig+0x1f0>)
 8003982:	689b      	ldr	r3, [r3, #8]
 8003984:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003988:	429a      	cmp	r2, r3
 800398a:	d208      	bcs.n	800399e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800398c:	4b2e      	ldr	r3, [pc, #184]	; (8003a48 <HAL_RCC_ClockConfig+0x1f0>)
 800398e:	689b      	ldr	r3, [r3, #8]
 8003990:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	689b      	ldr	r3, [r3, #8]
 8003998:	492b      	ldr	r1, [pc, #172]	; (8003a48 <HAL_RCC_ClockConfig+0x1f0>)
 800399a:	4313      	orrs	r3, r2
 800399c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800399e:	4b29      	ldr	r3, [pc, #164]	; (8003a44 <HAL_RCC_ClockConfig+0x1ec>)
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f003 0307 	and.w	r3, r3, #7
 80039a6:	683a      	ldr	r2, [r7, #0]
 80039a8:	429a      	cmp	r2, r3
 80039aa:	d210      	bcs.n	80039ce <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039ac:	4b25      	ldr	r3, [pc, #148]	; (8003a44 <HAL_RCC_ClockConfig+0x1ec>)
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	f023 0207 	bic.w	r2, r3, #7
 80039b4:	4923      	ldr	r1, [pc, #140]	; (8003a44 <HAL_RCC_ClockConfig+0x1ec>)
 80039b6:	683b      	ldr	r3, [r7, #0]
 80039b8:	4313      	orrs	r3, r2
 80039ba:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80039bc:	4b21      	ldr	r3, [pc, #132]	; (8003a44 <HAL_RCC_ClockConfig+0x1ec>)
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	f003 0307 	and.w	r3, r3, #7
 80039c4:	683a      	ldr	r2, [r7, #0]
 80039c6:	429a      	cmp	r2, r3
 80039c8:	d001      	beq.n	80039ce <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80039ca:	2301      	movs	r3, #1
 80039cc:	e036      	b.n	8003a3c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f003 0304 	and.w	r3, r3, #4
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d008      	beq.n	80039ec <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80039da:	4b1b      	ldr	r3, [pc, #108]	; (8003a48 <HAL_RCC_ClockConfig+0x1f0>)
 80039dc:	689b      	ldr	r3, [r3, #8]
 80039de:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	68db      	ldr	r3, [r3, #12]
 80039e6:	4918      	ldr	r1, [pc, #96]	; (8003a48 <HAL_RCC_ClockConfig+0x1f0>)
 80039e8:	4313      	orrs	r3, r2
 80039ea:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	f003 0308 	and.w	r3, r3, #8
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d009      	beq.n	8003a0c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80039f8:	4b13      	ldr	r3, [pc, #76]	; (8003a48 <HAL_RCC_ClockConfig+0x1f0>)
 80039fa:	689b      	ldr	r3, [r3, #8]
 80039fc:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	691b      	ldr	r3, [r3, #16]
 8003a04:	00db      	lsls	r3, r3, #3
 8003a06:	4910      	ldr	r1, [pc, #64]	; (8003a48 <HAL_RCC_ClockConfig+0x1f0>)
 8003a08:	4313      	orrs	r3, r2
 8003a0a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003a0c:	f000 f824 	bl	8003a58 <HAL_RCC_GetSysClockFreq>
 8003a10:	4602      	mov	r2, r0
 8003a12:	4b0d      	ldr	r3, [pc, #52]	; (8003a48 <HAL_RCC_ClockConfig+0x1f0>)
 8003a14:	689b      	ldr	r3, [r3, #8]
 8003a16:	091b      	lsrs	r3, r3, #4
 8003a18:	f003 030f 	and.w	r3, r3, #15
 8003a1c:	490b      	ldr	r1, [pc, #44]	; (8003a4c <HAL_RCC_ClockConfig+0x1f4>)
 8003a1e:	5ccb      	ldrb	r3, [r1, r3]
 8003a20:	f003 031f 	and.w	r3, r3, #31
 8003a24:	fa22 f303 	lsr.w	r3, r2, r3
 8003a28:	4a09      	ldr	r2, [pc, #36]	; (8003a50 <HAL_RCC_ClockConfig+0x1f8>)
 8003a2a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003a2c:	4b09      	ldr	r3, [pc, #36]	; (8003a54 <HAL_RCC_ClockConfig+0x1fc>)
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	4618      	mov	r0, r3
 8003a32:	f7fe f84d 	bl	8001ad0 <HAL_InitTick>
 8003a36:	4603      	mov	r3, r0
 8003a38:	72fb      	strb	r3, [r7, #11]

  return status;
 8003a3a:	7afb      	ldrb	r3, [r7, #11]
}
 8003a3c:	4618      	mov	r0, r3
 8003a3e:	3710      	adds	r7, #16
 8003a40:	46bd      	mov	sp, r7
 8003a42:	bd80      	pop	{r7, pc}
 8003a44:	40022000 	.word	0x40022000
 8003a48:	40021000 	.word	0x40021000
 8003a4c:	08009abc 	.word	0x08009abc
 8003a50:	20000000 	.word	0x20000000
 8003a54:	20000004 	.word	0x20000004

08003a58 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003a58:	b480      	push	{r7}
 8003a5a:	b089      	sub	sp, #36	; 0x24
 8003a5c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003a5e:	2300      	movs	r3, #0
 8003a60:	61fb      	str	r3, [r7, #28]
 8003a62:	2300      	movs	r3, #0
 8003a64:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003a66:	4b3e      	ldr	r3, [pc, #248]	; (8003b60 <HAL_RCC_GetSysClockFreq+0x108>)
 8003a68:	689b      	ldr	r3, [r3, #8]
 8003a6a:	f003 030c 	and.w	r3, r3, #12
 8003a6e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003a70:	4b3b      	ldr	r3, [pc, #236]	; (8003b60 <HAL_RCC_GetSysClockFreq+0x108>)
 8003a72:	68db      	ldr	r3, [r3, #12]
 8003a74:	f003 0303 	and.w	r3, r3, #3
 8003a78:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003a7a:	693b      	ldr	r3, [r7, #16]
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d005      	beq.n	8003a8c <HAL_RCC_GetSysClockFreq+0x34>
 8003a80:	693b      	ldr	r3, [r7, #16]
 8003a82:	2b0c      	cmp	r3, #12
 8003a84:	d121      	bne.n	8003aca <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	2b01      	cmp	r3, #1
 8003a8a:	d11e      	bne.n	8003aca <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003a8c:	4b34      	ldr	r3, [pc, #208]	; (8003b60 <HAL_RCC_GetSysClockFreq+0x108>)
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	f003 0308 	and.w	r3, r3, #8
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d107      	bne.n	8003aa8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003a98:	4b31      	ldr	r3, [pc, #196]	; (8003b60 <HAL_RCC_GetSysClockFreq+0x108>)
 8003a9a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003a9e:	0a1b      	lsrs	r3, r3, #8
 8003aa0:	f003 030f 	and.w	r3, r3, #15
 8003aa4:	61fb      	str	r3, [r7, #28]
 8003aa6:	e005      	b.n	8003ab4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003aa8:	4b2d      	ldr	r3, [pc, #180]	; (8003b60 <HAL_RCC_GetSysClockFreq+0x108>)
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	091b      	lsrs	r3, r3, #4
 8003aae:	f003 030f 	and.w	r3, r3, #15
 8003ab2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003ab4:	4a2b      	ldr	r2, [pc, #172]	; (8003b64 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003ab6:	69fb      	ldr	r3, [r7, #28]
 8003ab8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003abc:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003abe:	693b      	ldr	r3, [r7, #16]
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d10d      	bne.n	8003ae0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003ac4:	69fb      	ldr	r3, [r7, #28]
 8003ac6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003ac8:	e00a      	b.n	8003ae0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003aca:	693b      	ldr	r3, [r7, #16]
 8003acc:	2b04      	cmp	r3, #4
 8003ace:	d102      	bne.n	8003ad6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003ad0:	4b25      	ldr	r3, [pc, #148]	; (8003b68 <HAL_RCC_GetSysClockFreq+0x110>)
 8003ad2:	61bb      	str	r3, [r7, #24]
 8003ad4:	e004      	b.n	8003ae0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003ad6:	693b      	ldr	r3, [r7, #16]
 8003ad8:	2b08      	cmp	r3, #8
 8003ada:	d101      	bne.n	8003ae0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003adc:	4b23      	ldr	r3, [pc, #140]	; (8003b6c <HAL_RCC_GetSysClockFreq+0x114>)
 8003ade:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003ae0:	693b      	ldr	r3, [r7, #16]
 8003ae2:	2b0c      	cmp	r3, #12
 8003ae4:	d134      	bne.n	8003b50 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003ae6:	4b1e      	ldr	r3, [pc, #120]	; (8003b60 <HAL_RCC_GetSysClockFreq+0x108>)
 8003ae8:	68db      	ldr	r3, [r3, #12]
 8003aea:	f003 0303 	and.w	r3, r3, #3
 8003aee:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003af0:	68bb      	ldr	r3, [r7, #8]
 8003af2:	2b02      	cmp	r3, #2
 8003af4:	d003      	beq.n	8003afe <HAL_RCC_GetSysClockFreq+0xa6>
 8003af6:	68bb      	ldr	r3, [r7, #8]
 8003af8:	2b03      	cmp	r3, #3
 8003afa:	d003      	beq.n	8003b04 <HAL_RCC_GetSysClockFreq+0xac>
 8003afc:	e005      	b.n	8003b0a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003afe:	4b1a      	ldr	r3, [pc, #104]	; (8003b68 <HAL_RCC_GetSysClockFreq+0x110>)
 8003b00:	617b      	str	r3, [r7, #20]
      break;
 8003b02:	e005      	b.n	8003b10 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003b04:	4b19      	ldr	r3, [pc, #100]	; (8003b6c <HAL_RCC_GetSysClockFreq+0x114>)
 8003b06:	617b      	str	r3, [r7, #20]
      break;
 8003b08:	e002      	b.n	8003b10 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003b0a:	69fb      	ldr	r3, [r7, #28]
 8003b0c:	617b      	str	r3, [r7, #20]
      break;
 8003b0e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003b10:	4b13      	ldr	r3, [pc, #76]	; (8003b60 <HAL_RCC_GetSysClockFreq+0x108>)
 8003b12:	68db      	ldr	r3, [r3, #12]
 8003b14:	091b      	lsrs	r3, r3, #4
 8003b16:	f003 0307 	and.w	r3, r3, #7
 8003b1a:	3301      	adds	r3, #1
 8003b1c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003b1e:	4b10      	ldr	r3, [pc, #64]	; (8003b60 <HAL_RCC_GetSysClockFreq+0x108>)
 8003b20:	68db      	ldr	r3, [r3, #12]
 8003b22:	0a1b      	lsrs	r3, r3, #8
 8003b24:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003b28:	697a      	ldr	r2, [r7, #20]
 8003b2a:	fb03 f202 	mul.w	r2, r3, r2
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b34:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003b36:	4b0a      	ldr	r3, [pc, #40]	; (8003b60 <HAL_RCC_GetSysClockFreq+0x108>)
 8003b38:	68db      	ldr	r3, [r3, #12]
 8003b3a:	0e5b      	lsrs	r3, r3, #25
 8003b3c:	f003 0303 	and.w	r3, r3, #3
 8003b40:	3301      	adds	r3, #1
 8003b42:	005b      	lsls	r3, r3, #1
 8003b44:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003b46:	697a      	ldr	r2, [r7, #20]
 8003b48:	683b      	ldr	r3, [r7, #0]
 8003b4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b4e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003b50:	69bb      	ldr	r3, [r7, #24]
}
 8003b52:	4618      	mov	r0, r3
 8003b54:	3724      	adds	r7, #36	; 0x24
 8003b56:	46bd      	mov	sp, r7
 8003b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b5c:	4770      	bx	lr
 8003b5e:	bf00      	nop
 8003b60:	40021000 	.word	0x40021000
 8003b64:	08009ad4 	.word	0x08009ad4
 8003b68:	00f42400 	.word	0x00f42400
 8003b6c:	007a1200 	.word	0x007a1200

08003b70 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003b70:	b480      	push	{r7}
 8003b72:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003b74:	4b03      	ldr	r3, [pc, #12]	; (8003b84 <HAL_RCC_GetHCLKFreq+0x14>)
 8003b76:	681b      	ldr	r3, [r3, #0]
}
 8003b78:	4618      	mov	r0, r3
 8003b7a:	46bd      	mov	sp, r7
 8003b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b80:	4770      	bx	lr
 8003b82:	bf00      	nop
 8003b84:	20000000 	.word	0x20000000

08003b88 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003b88:	b580      	push	{r7, lr}
 8003b8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003b8c:	f7ff fff0 	bl	8003b70 <HAL_RCC_GetHCLKFreq>
 8003b90:	4602      	mov	r2, r0
 8003b92:	4b06      	ldr	r3, [pc, #24]	; (8003bac <HAL_RCC_GetPCLK1Freq+0x24>)
 8003b94:	689b      	ldr	r3, [r3, #8]
 8003b96:	0a1b      	lsrs	r3, r3, #8
 8003b98:	f003 0307 	and.w	r3, r3, #7
 8003b9c:	4904      	ldr	r1, [pc, #16]	; (8003bb0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003b9e:	5ccb      	ldrb	r3, [r1, r3]
 8003ba0:	f003 031f 	and.w	r3, r3, #31
 8003ba4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ba8:	4618      	mov	r0, r3
 8003baa:	bd80      	pop	{r7, pc}
 8003bac:	40021000 	.word	0x40021000
 8003bb0:	08009acc 	.word	0x08009acc

08003bb4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003bb4:	b580      	push	{r7, lr}
 8003bb6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003bb8:	f7ff ffda 	bl	8003b70 <HAL_RCC_GetHCLKFreq>
 8003bbc:	4602      	mov	r2, r0
 8003bbe:	4b06      	ldr	r3, [pc, #24]	; (8003bd8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003bc0:	689b      	ldr	r3, [r3, #8]
 8003bc2:	0adb      	lsrs	r3, r3, #11
 8003bc4:	f003 0307 	and.w	r3, r3, #7
 8003bc8:	4904      	ldr	r1, [pc, #16]	; (8003bdc <HAL_RCC_GetPCLK2Freq+0x28>)
 8003bca:	5ccb      	ldrb	r3, [r1, r3]
 8003bcc:	f003 031f 	and.w	r3, r3, #31
 8003bd0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003bd4:	4618      	mov	r0, r3
 8003bd6:	bd80      	pop	{r7, pc}
 8003bd8:	40021000 	.word	0x40021000
 8003bdc:	08009acc 	.word	0x08009acc

08003be0 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003be0:	b480      	push	{r7}
 8003be2:	b083      	sub	sp, #12
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	6078      	str	r0, [r7, #4]
 8003be8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	220f      	movs	r2, #15
 8003bee:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8003bf0:	4b12      	ldr	r3, [pc, #72]	; (8003c3c <HAL_RCC_GetClockConfig+0x5c>)
 8003bf2:	689b      	ldr	r3, [r3, #8]
 8003bf4:	f003 0203 	and.w	r2, r3, #3
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8003bfc:	4b0f      	ldr	r3, [pc, #60]	; (8003c3c <HAL_RCC_GetClockConfig+0x5c>)
 8003bfe:	689b      	ldr	r3, [r3, #8]
 8003c00:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8003c08:	4b0c      	ldr	r3, [pc, #48]	; (8003c3c <HAL_RCC_GetClockConfig+0x5c>)
 8003c0a:	689b      	ldr	r3, [r3, #8]
 8003c0c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8003c14:	4b09      	ldr	r3, [pc, #36]	; (8003c3c <HAL_RCC_GetClockConfig+0x5c>)
 8003c16:	689b      	ldr	r3, [r3, #8]
 8003c18:	08db      	lsrs	r3, r3, #3
 8003c1a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8003c22:	4b07      	ldr	r3, [pc, #28]	; (8003c40 <HAL_RCC_GetClockConfig+0x60>)
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f003 0207 	and.w	r2, r3, #7
 8003c2a:	683b      	ldr	r3, [r7, #0]
 8003c2c:	601a      	str	r2, [r3, #0]
}
 8003c2e:	bf00      	nop
 8003c30:	370c      	adds	r7, #12
 8003c32:	46bd      	mov	sp, r7
 8003c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c38:	4770      	bx	lr
 8003c3a:	bf00      	nop
 8003c3c:	40021000 	.word	0x40021000
 8003c40:	40022000 	.word	0x40022000

08003c44 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003c44:	b580      	push	{r7, lr}
 8003c46:	b086      	sub	sp, #24
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003c4c:	2300      	movs	r3, #0
 8003c4e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003c50:	4b2a      	ldr	r3, [pc, #168]	; (8003cfc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003c52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c54:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d003      	beq.n	8003c64 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003c5c:	f7ff f984 	bl	8002f68 <HAL_PWREx_GetVoltageRange>
 8003c60:	6178      	str	r0, [r7, #20]
 8003c62:	e014      	b.n	8003c8e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003c64:	4b25      	ldr	r3, [pc, #148]	; (8003cfc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003c66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c68:	4a24      	ldr	r2, [pc, #144]	; (8003cfc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003c6a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c6e:	6593      	str	r3, [r2, #88]	; 0x58
 8003c70:	4b22      	ldr	r3, [pc, #136]	; (8003cfc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003c72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c74:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c78:	60fb      	str	r3, [r7, #12]
 8003c7a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003c7c:	f7ff f974 	bl	8002f68 <HAL_PWREx_GetVoltageRange>
 8003c80:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003c82:	4b1e      	ldr	r3, [pc, #120]	; (8003cfc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003c84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c86:	4a1d      	ldr	r2, [pc, #116]	; (8003cfc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003c88:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003c8c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003c8e:	697b      	ldr	r3, [r7, #20]
 8003c90:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003c94:	d10b      	bne.n	8003cae <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	2b80      	cmp	r3, #128	; 0x80
 8003c9a:	d919      	bls.n	8003cd0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	2ba0      	cmp	r3, #160	; 0xa0
 8003ca0:	d902      	bls.n	8003ca8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003ca2:	2302      	movs	r3, #2
 8003ca4:	613b      	str	r3, [r7, #16]
 8003ca6:	e013      	b.n	8003cd0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003ca8:	2301      	movs	r3, #1
 8003caa:	613b      	str	r3, [r7, #16]
 8003cac:	e010      	b.n	8003cd0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	2b80      	cmp	r3, #128	; 0x80
 8003cb2:	d902      	bls.n	8003cba <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003cb4:	2303      	movs	r3, #3
 8003cb6:	613b      	str	r3, [r7, #16]
 8003cb8:	e00a      	b.n	8003cd0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	2b80      	cmp	r3, #128	; 0x80
 8003cbe:	d102      	bne.n	8003cc6 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003cc0:	2302      	movs	r3, #2
 8003cc2:	613b      	str	r3, [r7, #16]
 8003cc4:	e004      	b.n	8003cd0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	2b70      	cmp	r3, #112	; 0x70
 8003cca:	d101      	bne.n	8003cd0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003ccc:	2301      	movs	r3, #1
 8003cce:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003cd0:	4b0b      	ldr	r3, [pc, #44]	; (8003d00 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f023 0207 	bic.w	r2, r3, #7
 8003cd8:	4909      	ldr	r1, [pc, #36]	; (8003d00 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003cda:	693b      	ldr	r3, [r7, #16]
 8003cdc:	4313      	orrs	r3, r2
 8003cde:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003ce0:	4b07      	ldr	r3, [pc, #28]	; (8003d00 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	f003 0307 	and.w	r3, r3, #7
 8003ce8:	693a      	ldr	r2, [r7, #16]
 8003cea:	429a      	cmp	r2, r3
 8003cec:	d001      	beq.n	8003cf2 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003cee:	2301      	movs	r3, #1
 8003cf0:	e000      	b.n	8003cf4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003cf2:	2300      	movs	r3, #0
}
 8003cf4:	4618      	mov	r0, r3
 8003cf6:	3718      	adds	r7, #24
 8003cf8:	46bd      	mov	sp, r7
 8003cfa:	bd80      	pop	{r7, pc}
 8003cfc:	40021000 	.word	0x40021000
 8003d00:	40022000 	.word	0x40022000

08003d04 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003d04:	b580      	push	{r7, lr}
 8003d06:	b086      	sub	sp, #24
 8003d08:	af00      	add	r7, sp, #0
 8003d0a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003d0c:	2300      	movs	r3, #0
 8003d0e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003d10:	2300      	movs	r3, #0
 8003d12:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d031      	beq.n	8003d84 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d24:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003d28:	d01a      	beq.n	8003d60 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8003d2a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003d2e:	d814      	bhi.n	8003d5a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d009      	beq.n	8003d48 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003d34:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003d38:	d10f      	bne.n	8003d5a <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8003d3a:	4b5d      	ldr	r3, [pc, #372]	; (8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003d3c:	68db      	ldr	r3, [r3, #12]
 8003d3e:	4a5c      	ldr	r2, [pc, #368]	; (8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003d40:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d44:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003d46:	e00c      	b.n	8003d62 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	3304      	adds	r3, #4
 8003d4c:	2100      	movs	r1, #0
 8003d4e:	4618      	mov	r0, r3
 8003d50:	f000 f9de 	bl	8004110 <RCCEx_PLLSAI1_Config>
 8003d54:	4603      	mov	r3, r0
 8003d56:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003d58:	e003      	b.n	8003d62 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003d5a:	2301      	movs	r3, #1
 8003d5c:	74fb      	strb	r3, [r7, #19]
      break;
 8003d5e:	e000      	b.n	8003d62 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8003d60:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003d62:	7cfb      	ldrb	r3, [r7, #19]
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d10b      	bne.n	8003d80 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003d68:	4b51      	ldr	r3, [pc, #324]	; (8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003d6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d6e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d76:	494e      	ldr	r1, [pc, #312]	; (8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003d78:	4313      	orrs	r3, r2
 8003d7a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003d7e:	e001      	b.n	8003d84 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d80:	7cfb      	ldrb	r3, [r7, #19]
 8003d82:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	f000 809e 	beq.w	8003ece <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003d92:	2300      	movs	r3, #0
 8003d94:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003d96:	4b46      	ldr	r3, [pc, #280]	; (8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003d98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d101      	bne.n	8003da6 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8003da2:	2301      	movs	r3, #1
 8003da4:	e000      	b.n	8003da8 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8003da6:	2300      	movs	r3, #0
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d00d      	beq.n	8003dc8 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003dac:	4b40      	ldr	r3, [pc, #256]	; (8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003dae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003db0:	4a3f      	ldr	r2, [pc, #252]	; (8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003db2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003db6:	6593      	str	r3, [r2, #88]	; 0x58
 8003db8:	4b3d      	ldr	r3, [pc, #244]	; (8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003dba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003dbc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003dc0:	60bb      	str	r3, [r7, #8]
 8003dc2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003dc4:	2301      	movs	r3, #1
 8003dc6:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003dc8:	4b3a      	ldr	r3, [pc, #232]	; (8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	4a39      	ldr	r2, [pc, #228]	; (8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8003dce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003dd2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003dd4:	f7fe f8b4 	bl	8001f40 <HAL_GetTick>
 8003dd8:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003dda:	e009      	b.n	8003df0 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ddc:	f7fe f8b0 	bl	8001f40 <HAL_GetTick>
 8003de0:	4602      	mov	r2, r0
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	1ad3      	subs	r3, r2, r3
 8003de6:	2b02      	cmp	r3, #2
 8003de8:	d902      	bls.n	8003df0 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8003dea:	2303      	movs	r3, #3
 8003dec:	74fb      	strb	r3, [r7, #19]
        break;
 8003dee:	e005      	b.n	8003dfc <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003df0:	4b30      	ldr	r3, [pc, #192]	; (8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d0ef      	beq.n	8003ddc <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8003dfc:	7cfb      	ldrb	r3, [r7, #19]
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d15a      	bne.n	8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003e02:	4b2b      	ldr	r3, [pc, #172]	; (8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003e04:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e08:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e0c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003e0e:	697b      	ldr	r3, [r7, #20]
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d01e      	beq.n	8003e52 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e18:	697a      	ldr	r2, [r7, #20]
 8003e1a:	429a      	cmp	r2, r3
 8003e1c:	d019      	beq.n	8003e52 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003e1e:	4b24      	ldr	r3, [pc, #144]	; (8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003e20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e24:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e28:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003e2a:	4b21      	ldr	r3, [pc, #132]	; (8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003e2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e30:	4a1f      	ldr	r2, [pc, #124]	; (8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003e32:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e36:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003e3a:	4b1d      	ldr	r3, [pc, #116]	; (8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003e3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e40:	4a1b      	ldr	r2, [pc, #108]	; (8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003e42:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e46:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003e4a:	4a19      	ldr	r2, [pc, #100]	; (8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003e4c:	697b      	ldr	r3, [r7, #20]
 8003e4e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003e52:	697b      	ldr	r3, [r7, #20]
 8003e54:	f003 0301 	and.w	r3, r3, #1
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d016      	beq.n	8003e8a <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e5c:	f7fe f870 	bl	8001f40 <HAL_GetTick>
 8003e60:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003e62:	e00b      	b.n	8003e7c <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e64:	f7fe f86c 	bl	8001f40 <HAL_GetTick>
 8003e68:	4602      	mov	r2, r0
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	1ad3      	subs	r3, r2, r3
 8003e6e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e72:	4293      	cmp	r3, r2
 8003e74:	d902      	bls.n	8003e7c <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8003e76:	2303      	movs	r3, #3
 8003e78:	74fb      	strb	r3, [r7, #19]
            break;
 8003e7a:	e006      	b.n	8003e8a <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003e7c:	4b0c      	ldr	r3, [pc, #48]	; (8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003e7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e82:	f003 0302 	and.w	r3, r3, #2
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d0ec      	beq.n	8003e64 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8003e8a:	7cfb      	ldrb	r3, [r7, #19]
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d10b      	bne.n	8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003e90:	4b07      	ldr	r3, [pc, #28]	; (8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003e92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e96:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e9e:	4904      	ldr	r1, [pc, #16]	; (8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003ea0:	4313      	orrs	r3, r2
 8003ea2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003ea6:	e009      	b.n	8003ebc <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003ea8:	7cfb      	ldrb	r3, [r7, #19]
 8003eaa:	74bb      	strb	r3, [r7, #18]
 8003eac:	e006      	b.n	8003ebc <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8003eae:	bf00      	nop
 8003eb0:	40021000 	.word	0x40021000
 8003eb4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003eb8:	7cfb      	ldrb	r3, [r7, #19]
 8003eba:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003ebc:	7c7b      	ldrb	r3, [r7, #17]
 8003ebe:	2b01      	cmp	r3, #1
 8003ec0:	d105      	bne.n	8003ece <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ec2:	4b8a      	ldr	r3, [pc, #552]	; (80040ec <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003ec4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ec6:	4a89      	ldr	r2, [pc, #548]	; (80040ec <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003ec8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003ecc:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f003 0301 	and.w	r3, r3, #1
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d00a      	beq.n	8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003eda:	4b84      	ldr	r3, [pc, #528]	; (80040ec <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003edc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ee0:	f023 0203 	bic.w	r2, r3, #3
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	6a1b      	ldr	r3, [r3, #32]
 8003ee8:	4980      	ldr	r1, [pc, #512]	; (80040ec <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003eea:	4313      	orrs	r3, r2
 8003eec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	f003 0302 	and.w	r3, r3, #2
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d00a      	beq.n	8003f12 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003efc:	4b7b      	ldr	r3, [pc, #492]	; (80040ec <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003efe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f02:	f023 020c 	bic.w	r2, r3, #12
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f0a:	4978      	ldr	r1, [pc, #480]	; (80040ec <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003f0c:	4313      	orrs	r3, r2
 8003f0e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f003 0320 	and.w	r3, r3, #32
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d00a      	beq.n	8003f34 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003f1e:	4b73      	ldr	r3, [pc, #460]	; (80040ec <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003f20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f24:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f2c:	496f      	ldr	r1, [pc, #444]	; (80040ec <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003f2e:	4313      	orrs	r3, r2
 8003f30:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d00a      	beq.n	8003f56 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003f40:	4b6a      	ldr	r3, [pc, #424]	; (80040ec <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003f42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f46:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f4e:	4967      	ldr	r1, [pc, #412]	; (80040ec <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003f50:	4313      	orrs	r3, r2
 8003f52:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d00a      	beq.n	8003f78 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003f62:	4b62      	ldr	r3, [pc, #392]	; (80040ec <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003f64:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f68:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f70:	495e      	ldr	r1, [pc, #376]	; (80040ec <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003f72:	4313      	orrs	r3, r2
 8003f74:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d00a      	beq.n	8003f9a <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003f84:	4b59      	ldr	r3, [pc, #356]	; (80040ec <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003f86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f8a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f92:	4956      	ldr	r1, [pc, #344]	; (80040ec <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003f94:	4313      	orrs	r3, r2
 8003f96:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d00a      	beq.n	8003fbc <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003fa6:	4b51      	ldr	r3, [pc, #324]	; (80040ec <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003fa8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fac:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fb4:	494d      	ldr	r1, [pc, #308]	; (80040ec <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003fb6:	4313      	orrs	r3, r2
 8003fb8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d028      	beq.n	800401a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003fc8:	4b48      	ldr	r3, [pc, #288]	; (80040ec <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003fca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fce:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fd6:	4945      	ldr	r1, [pc, #276]	; (80040ec <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003fd8:	4313      	orrs	r3, r2
 8003fda:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fe2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003fe6:	d106      	bne.n	8003ff6 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003fe8:	4b40      	ldr	r3, [pc, #256]	; (80040ec <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003fea:	68db      	ldr	r3, [r3, #12]
 8003fec:	4a3f      	ldr	r2, [pc, #252]	; (80040ec <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003fee:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003ff2:	60d3      	str	r3, [r2, #12]
 8003ff4:	e011      	b.n	800401a <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ffa:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003ffe:	d10c      	bne.n	800401a <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	3304      	adds	r3, #4
 8004004:	2101      	movs	r1, #1
 8004006:	4618      	mov	r0, r3
 8004008:	f000 f882 	bl	8004110 <RCCEx_PLLSAI1_Config>
 800400c:	4603      	mov	r3, r0
 800400e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004010:	7cfb      	ldrb	r3, [r7, #19]
 8004012:	2b00      	cmp	r3, #0
 8004014:	d001      	beq.n	800401a <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 8004016:	7cfb      	ldrb	r3, [r7, #19]
 8004018:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004022:	2b00      	cmp	r3, #0
 8004024:	d028      	beq.n	8004078 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004026:	4b31      	ldr	r3, [pc, #196]	; (80040ec <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004028:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800402c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004034:	492d      	ldr	r1, [pc, #180]	; (80040ec <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004036:	4313      	orrs	r3, r2
 8004038:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004040:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004044:	d106      	bne.n	8004054 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004046:	4b29      	ldr	r3, [pc, #164]	; (80040ec <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004048:	68db      	ldr	r3, [r3, #12]
 800404a:	4a28      	ldr	r2, [pc, #160]	; (80040ec <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800404c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004050:	60d3      	str	r3, [r2, #12]
 8004052:	e011      	b.n	8004078 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004058:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800405c:	d10c      	bne.n	8004078 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	3304      	adds	r3, #4
 8004062:	2101      	movs	r1, #1
 8004064:	4618      	mov	r0, r3
 8004066:	f000 f853 	bl	8004110 <RCCEx_PLLSAI1_Config>
 800406a:	4603      	mov	r3, r0
 800406c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800406e:	7cfb      	ldrb	r3, [r7, #19]
 8004070:	2b00      	cmp	r3, #0
 8004072:	d001      	beq.n	8004078 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 8004074:	7cfb      	ldrb	r3, [r7, #19]
 8004076:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004080:	2b00      	cmp	r3, #0
 8004082:	d01c      	beq.n	80040be <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004084:	4b19      	ldr	r3, [pc, #100]	; (80040ec <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004086:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800408a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004092:	4916      	ldr	r1, [pc, #88]	; (80040ec <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004094:	4313      	orrs	r3, r2
 8004096:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800409e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80040a2:	d10c      	bne.n	80040be <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	3304      	adds	r3, #4
 80040a8:	2102      	movs	r1, #2
 80040aa:	4618      	mov	r0, r3
 80040ac:	f000 f830 	bl	8004110 <RCCEx_PLLSAI1_Config>
 80040b0:	4603      	mov	r3, r0
 80040b2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80040b4:	7cfb      	ldrb	r3, [r7, #19]
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d001      	beq.n	80040be <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 80040ba:	7cfb      	ldrb	r3, [r7, #19]
 80040bc:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d00a      	beq.n	80040e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80040ca:	4b08      	ldr	r3, [pc, #32]	; (80040ec <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80040cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040d0:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80040d8:	4904      	ldr	r1, [pc, #16]	; (80040ec <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80040da:	4313      	orrs	r3, r2
 80040dc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80040e0:	7cbb      	ldrb	r3, [r7, #18]
}
 80040e2:	4618      	mov	r0, r3
 80040e4:	3718      	adds	r7, #24
 80040e6:	46bd      	mov	sp, r7
 80040e8:	bd80      	pop	{r7, pc}
 80040ea:	bf00      	nop
 80040ec:	40021000 	.word	0x40021000

080040f0 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 80040f0:	b480      	push	{r7}
 80040f2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 80040f4:	4b05      	ldr	r3, [pc, #20]	; (800410c <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	4a04      	ldr	r2, [pc, #16]	; (800410c <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80040fa:	f043 0304 	orr.w	r3, r3, #4
 80040fe:	6013      	str	r3, [r2, #0]
}
 8004100:	bf00      	nop
 8004102:	46bd      	mov	sp, r7
 8004104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004108:	4770      	bx	lr
 800410a:	bf00      	nop
 800410c:	40021000 	.word	0x40021000

08004110 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004110:	b580      	push	{r7, lr}
 8004112:	b084      	sub	sp, #16
 8004114:	af00      	add	r7, sp, #0
 8004116:	6078      	str	r0, [r7, #4]
 8004118:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800411a:	2300      	movs	r3, #0
 800411c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800411e:	4b74      	ldr	r3, [pc, #464]	; (80042f0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004120:	68db      	ldr	r3, [r3, #12]
 8004122:	f003 0303 	and.w	r3, r3, #3
 8004126:	2b00      	cmp	r3, #0
 8004128:	d018      	beq.n	800415c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800412a:	4b71      	ldr	r3, [pc, #452]	; (80042f0 <RCCEx_PLLSAI1_Config+0x1e0>)
 800412c:	68db      	ldr	r3, [r3, #12]
 800412e:	f003 0203 	and.w	r2, r3, #3
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	429a      	cmp	r2, r3
 8004138:	d10d      	bne.n	8004156 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
       ||
 800413e:	2b00      	cmp	r3, #0
 8004140:	d009      	beq.n	8004156 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004142:	4b6b      	ldr	r3, [pc, #428]	; (80042f0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004144:	68db      	ldr	r3, [r3, #12]
 8004146:	091b      	lsrs	r3, r3, #4
 8004148:	f003 0307 	and.w	r3, r3, #7
 800414c:	1c5a      	adds	r2, r3, #1
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	685b      	ldr	r3, [r3, #4]
       ||
 8004152:	429a      	cmp	r2, r3
 8004154:	d047      	beq.n	80041e6 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004156:	2301      	movs	r3, #1
 8004158:	73fb      	strb	r3, [r7, #15]
 800415a:	e044      	b.n	80041e6 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	2b03      	cmp	r3, #3
 8004162:	d018      	beq.n	8004196 <RCCEx_PLLSAI1_Config+0x86>
 8004164:	2b03      	cmp	r3, #3
 8004166:	d825      	bhi.n	80041b4 <RCCEx_PLLSAI1_Config+0xa4>
 8004168:	2b01      	cmp	r3, #1
 800416a:	d002      	beq.n	8004172 <RCCEx_PLLSAI1_Config+0x62>
 800416c:	2b02      	cmp	r3, #2
 800416e:	d009      	beq.n	8004184 <RCCEx_PLLSAI1_Config+0x74>
 8004170:	e020      	b.n	80041b4 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004172:	4b5f      	ldr	r3, [pc, #380]	; (80042f0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f003 0302 	and.w	r3, r3, #2
 800417a:	2b00      	cmp	r3, #0
 800417c:	d11d      	bne.n	80041ba <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800417e:	2301      	movs	r3, #1
 8004180:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004182:	e01a      	b.n	80041ba <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004184:	4b5a      	ldr	r3, [pc, #360]	; (80042f0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800418c:	2b00      	cmp	r3, #0
 800418e:	d116      	bne.n	80041be <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004190:	2301      	movs	r3, #1
 8004192:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004194:	e013      	b.n	80041be <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004196:	4b56      	ldr	r3, [pc, #344]	; (80042f0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d10f      	bne.n	80041c2 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80041a2:	4b53      	ldr	r3, [pc, #332]	; (80042f0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d109      	bne.n	80041c2 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80041ae:	2301      	movs	r3, #1
 80041b0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80041b2:	e006      	b.n	80041c2 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80041b4:	2301      	movs	r3, #1
 80041b6:	73fb      	strb	r3, [r7, #15]
      break;
 80041b8:	e004      	b.n	80041c4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80041ba:	bf00      	nop
 80041bc:	e002      	b.n	80041c4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80041be:	bf00      	nop
 80041c0:	e000      	b.n	80041c4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80041c2:	bf00      	nop
    }

    if(status == HAL_OK)
 80041c4:	7bfb      	ldrb	r3, [r7, #15]
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d10d      	bne.n	80041e6 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80041ca:	4b49      	ldr	r3, [pc, #292]	; (80042f0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80041cc:	68db      	ldr	r3, [r3, #12]
 80041ce:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	6819      	ldr	r1, [r3, #0]
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	685b      	ldr	r3, [r3, #4]
 80041da:	3b01      	subs	r3, #1
 80041dc:	011b      	lsls	r3, r3, #4
 80041de:	430b      	orrs	r3, r1
 80041e0:	4943      	ldr	r1, [pc, #268]	; (80042f0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80041e2:	4313      	orrs	r3, r2
 80041e4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80041e6:	7bfb      	ldrb	r3, [r7, #15]
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d17c      	bne.n	80042e6 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80041ec:	4b40      	ldr	r3, [pc, #256]	; (80042f0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	4a3f      	ldr	r2, [pc, #252]	; (80042f0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80041f2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80041f6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80041f8:	f7fd fea2 	bl	8001f40 <HAL_GetTick>
 80041fc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80041fe:	e009      	b.n	8004214 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004200:	f7fd fe9e 	bl	8001f40 <HAL_GetTick>
 8004204:	4602      	mov	r2, r0
 8004206:	68bb      	ldr	r3, [r7, #8]
 8004208:	1ad3      	subs	r3, r2, r3
 800420a:	2b02      	cmp	r3, #2
 800420c:	d902      	bls.n	8004214 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800420e:	2303      	movs	r3, #3
 8004210:	73fb      	strb	r3, [r7, #15]
        break;
 8004212:	e005      	b.n	8004220 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004214:	4b36      	ldr	r3, [pc, #216]	; (80042f0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800421c:	2b00      	cmp	r3, #0
 800421e:	d1ef      	bne.n	8004200 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004220:	7bfb      	ldrb	r3, [r7, #15]
 8004222:	2b00      	cmp	r3, #0
 8004224:	d15f      	bne.n	80042e6 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004226:	683b      	ldr	r3, [r7, #0]
 8004228:	2b00      	cmp	r3, #0
 800422a:	d110      	bne.n	800424e <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800422c:	4b30      	ldr	r3, [pc, #192]	; (80042f0 <RCCEx_PLLSAI1_Config+0x1e0>)
 800422e:	691b      	ldr	r3, [r3, #16]
 8004230:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8004234:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004238:	687a      	ldr	r2, [r7, #4]
 800423a:	6892      	ldr	r2, [r2, #8]
 800423c:	0211      	lsls	r1, r2, #8
 800423e:	687a      	ldr	r2, [r7, #4]
 8004240:	68d2      	ldr	r2, [r2, #12]
 8004242:	06d2      	lsls	r2, r2, #27
 8004244:	430a      	orrs	r2, r1
 8004246:	492a      	ldr	r1, [pc, #168]	; (80042f0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004248:	4313      	orrs	r3, r2
 800424a:	610b      	str	r3, [r1, #16]
 800424c:	e027      	b.n	800429e <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800424e:	683b      	ldr	r3, [r7, #0]
 8004250:	2b01      	cmp	r3, #1
 8004252:	d112      	bne.n	800427a <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004254:	4b26      	ldr	r3, [pc, #152]	; (80042f0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004256:	691b      	ldr	r3, [r3, #16]
 8004258:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800425c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004260:	687a      	ldr	r2, [r7, #4]
 8004262:	6892      	ldr	r2, [r2, #8]
 8004264:	0211      	lsls	r1, r2, #8
 8004266:	687a      	ldr	r2, [r7, #4]
 8004268:	6912      	ldr	r2, [r2, #16]
 800426a:	0852      	lsrs	r2, r2, #1
 800426c:	3a01      	subs	r2, #1
 800426e:	0552      	lsls	r2, r2, #21
 8004270:	430a      	orrs	r2, r1
 8004272:	491f      	ldr	r1, [pc, #124]	; (80042f0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004274:	4313      	orrs	r3, r2
 8004276:	610b      	str	r3, [r1, #16]
 8004278:	e011      	b.n	800429e <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800427a:	4b1d      	ldr	r3, [pc, #116]	; (80042f0 <RCCEx_PLLSAI1_Config+0x1e0>)
 800427c:	691b      	ldr	r3, [r3, #16]
 800427e:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004282:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004286:	687a      	ldr	r2, [r7, #4]
 8004288:	6892      	ldr	r2, [r2, #8]
 800428a:	0211      	lsls	r1, r2, #8
 800428c:	687a      	ldr	r2, [r7, #4]
 800428e:	6952      	ldr	r2, [r2, #20]
 8004290:	0852      	lsrs	r2, r2, #1
 8004292:	3a01      	subs	r2, #1
 8004294:	0652      	lsls	r2, r2, #25
 8004296:	430a      	orrs	r2, r1
 8004298:	4915      	ldr	r1, [pc, #84]	; (80042f0 <RCCEx_PLLSAI1_Config+0x1e0>)
 800429a:	4313      	orrs	r3, r2
 800429c:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800429e:	4b14      	ldr	r3, [pc, #80]	; (80042f0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	4a13      	ldr	r2, [pc, #76]	; (80042f0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80042a4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80042a8:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042aa:	f7fd fe49 	bl	8001f40 <HAL_GetTick>
 80042ae:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80042b0:	e009      	b.n	80042c6 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80042b2:	f7fd fe45 	bl	8001f40 <HAL_GetTick>
 80042b6:	4602      	mov	r2, r0
 80042b8:	68bb      	ldr	r3, [r7, #8]
 80042ba:	1ad3      	subs	r3, r2, r3
 80042bc:	2b02      	cmp	r3, #2
 80042be:	d902      	bls.n	80042c6 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 80042c0:	2303      	movs	r3, #3
 80042c2:	73fb      	strb	r3, [r7, #15]
          break;
 80042c4:	e005      	b.n	80042d2 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80042c6:	4b0a      	ldr	r3, [pc, #40]	; (80042f0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d0ef      	beq.n	80042b2 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 80042d2:	7bfb      	ldrb	r3, [r7, #15]
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d106      	bne.n	80042e6 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80042d8:	4b05      	ldr	r3, [pc, #20]	; (80042f0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80042da:	691a      	ldr	r2, [r3, #16]
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	699b      	ldr	r3, [r3, #24]
 80042e0:	4903      	ldr	r1, [pc, #12]	; (80042f0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80042e2:	4313      	orrs	r3, r2
 80042e4:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80042e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80042e8:	4618      	mov	r0, r3
 80042ea:	3710      	adds	r7, #16
 80042ec:	46bd      	mov	sp, r7
 80042ee:	bd80      	pop	{r7, pc}
 80042f0:	40021000 	.word	0x40021000

080042f4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80042f4:	b580      	push	{r7, lr}
 80042f6:	b082      	sub	sp, #8
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d101      	bne.n	8004306 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004302:	2301      	movs	r3, #1
 8004304:	e049      	b.n	800439a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800430c:	b2db      	uxtb	r3, r3
 800430e:	2b00      	cmp	r3, #0
 8004310:	d106      	bne.n	8004320 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	2200      	movs	r2, #0
 8004316:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800431a:	6878      	ldr	r0, [r7, #4]
 800431c:	f000 f841 	bl	80043a2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	2202      	movs	r2, #2
 8004324:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681a      	ldr	r2, [r3, #0]
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	3304      	adds	r3, #4
 8004330:	4619      	mov	r1, r3
 8004332:	4610      	mov	r0, r2
 8004334:	f000 f9dc 	bl	80046f0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	2201      	movs	r2, #1
 800433c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	2201      	movs	r2, #1
 8004344:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	2201      	movs	r2, #1
 800434c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	2201      	movs	r2, #1
 8004354:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	2201      	movs	r2, #1
 800435c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	2201      	movs	r2, #1
 8004364:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	2201      	movs	r2, #1
 800436c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	2201      	movs	r2, #1
 8004374:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	2201      	movs	r2, #1
 800437c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	2201      	movs	r2, #1
 8004384:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	2201      	movs	r2, #1
 800438c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	2201      	movs	r2, #1
 8004394:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004398:	2300      	movs	r3, #0
}
 800439a:	4618      	mov	r0, r3
 800439c:	3708      	adds	r7, #8
 800439e:	46bd      	mov	sp, r7
 80043a0:	bd80      	pop	{r7, pc}

080043a2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80043a2:	b480      	push	{r7}
 80043a4:	b083      	sub	sp, #12
 80043a6:	af00      	add	r7, sp, #0
 80043a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80043aa:	bf00      	nop
 80043ac:	370c      	adds	r7, #12
 80043ae:	46bd      	mov	sp, r7
 80043b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b4:	4770      	bx	lr
	...

080043b8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80043b8:	b480      	push	{r7}
 80043ba:	b085      	sub	sp, #20
 80043bc:	af00      	add	r7, sp, #0
 80043be:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80043c6:	b2db      	uxtb	r3, r3
 80043c8:	2b01      	cmp	r3, #1
 80043ca:	d001      	beq.n	80043d0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80043cc:	2301      	movs	r3, #1
 80043ce:	e03b      	b.n	8004448 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	2202      	movs	r2, #2
 80043d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	68da      	ldr	r2, [r3, #12]
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	f042 0201 	orr.w	r2, r2, #1
 80043e6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	4a19      	ldr	r2, [pc, #100]	; (8004454 <HAL_TIM_Base_Start_IT+0x9c>)
 80043ee:	4293      	cmp	r3, r2
 80043f0:	d009      	beq.n	8004406 <HAL_TIM_Base_Start_IT+0x4e>
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80043fa:	d004      	beq.n	8004406 <HAL_TIM_Base_Start_IT+0x4e>
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	4a15      	ldr	r2, [pc, #84]	; (8004458 <HAL_TIM_Base_Start_IT+0xa0>)
 8004402:	4293      	cmp	r3, r2
 8004404:	d115      	bne.n	8004432 <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	689a      	ldr	r2, [r3, #8]
 800440c:	4b13      	ldr	r3, [pc, #76]	; (800445c <HAL_TIM_Base_Start_IT+0xa4>)
 800440e:	4013      	ands	r3, r2
 8004410:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	2b06      	cmp	r3, #6
 8004416:	d015      	beq.n	8004444 <HAL_TIM_Base_Start_IT+0x8c>
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800441e:	d011      	beq.n	8004444 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	681a      	ldr	r2, [r3, #0]
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	f042 0201 	orr.w	r2, r2, #1
 800442e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004430:	e008      	b.n	8004444 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	681a      	ldr	r2, [r3, #0]
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	f042 0201 	orr.w	r2, r2, #1
 8004440:	601a      	str	r2, [r3, #0]
 8004442:	e000      	b.n	8004446 <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004444:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004446:	2300      	movs	r3, #0
}
 8004448:	4618      	mov	r0, r3
 800444a:	3714      	adds	r7, #20
 800444c:	46bd      	mov	sp, r7
 800444e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004452:	4770      	bx	lr
 8004454:	40012c00 	.word	0x40012c00
 8004458:	40014000 	.word	0x40014000
 800445c:	00010007 	.word	0x00010007

08004460 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004460:	b580      	push	{r7, lr}
 8004462:	b082      	sub	sp, #8
 8004464:	af00      	add	r7, sp, #0
 8004466:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	691b      	ldr	r3, [r3, #16]
 800446e:	f003 0302 	and.w	r3, r3, #2
 8004472:	2b02      	cmp	r3, #2
 8004474:	d122      	bne.n	80044bc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	68db      	ldr	r3, [r3, #12]
 800447c:	f003 0302 	and.w	r3, r3, #2
 8004480:	2b02      	cmp	r3, #2
 8004482:	d11b      	bne.n	80044bc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	f06f 0202 	mvn.w	r2, #2
 800448c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	2201      	movs	r2, #1
 8004492:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	699b      	ldr	r3, [r3, #24]
 800449a:	f003 0303 	and.w	r3, r3, #3
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d003      	beq.n	80044aa <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80044a2:	6878      	ldr	r0, [r7, #4]
 80044a4:	f000 f905 	bl	80046b2 <HAL_TIM_IC_CaptureCallback>
 80044a8:	e005      	b.n	80044b6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80044aa:	6878      	ldr	r0, [r7, #4]
 80044ac:	f000 f8f7 	bl	800469e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80044b0:	6878      	ldr	r0, [r7, #4]
 80044b2:	f000 f908 	bl	80046c6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	2200      	movs	r2, #0
 80044ba:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	691b      	ldr	r3, [r3, #16]
 80044c2:	f003 0304 	and.w	r3, r3, #4
 80044c6:	2b04      	cmp	r3, #4
 80044c8:	d122      	bne.n	8004510 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	68db      	ldr	r3, [r3, #12]
 80044d0:	f003 0304 	and.w	r3, r3, #4
 80044d4:	2b04      	cmp	r3, #4
 80044d6:	d11b      	bne.n	8004510 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	f06f 0204 	mvn.w	r2, #4
 80044e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	2202      	movs	r2, #2
 80044e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	699b      	ldr	r3, [r3, #24]
 80044ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d003      	beq.n	80044fe <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80044f6:	6878      	ldr	r0, [r7, #4]
 80044f8:	f000 f8db 	bl	80046b2 <HAL_TIM_IC_CaptureCallback>
 80044fc:	e005      	b.n	800450a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80044fe:	6878      	ldr	r0, [r7, #4]
 8004500:	f000 f8cd 	bl	800469e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004504:	6878      	ldr	r0, [r7, #4]
 8004506:	f000 f8de 	bl	80046c6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	2200      	movs	r2, #0
 800450e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	691b      	ldr	r3, [r3, #16]
 8004516:	f003 0308 	and.w	r3, r3, #8
 800451a:	2b08      	cmp	r3, #8
 800451c:	d122      	bne.n	8004564 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	68db      	ldr	r3, [r3, #12]
 8004524:	f003 0308 	and.w	r3, r3, #8
 8004528:	2b08      	cmp	r3, #8
 800452a:	d11b      	bne.n	8004564 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	f06f 0208 	mvn.w	r2, #8
 8004534:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	2204      	movs	r2, #4
 800453a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	69db      	ldr	r3, [r3, #28]
 8004542:	f003 0303 	and.w	r3, r3, #3
 8004546:	2b00      	cmp	r3, #0
 8004548:	d003      	beq.n	8004552 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800454a:	6878      	ldr	r0, [r7, #4]
 800454c:	f000 f8b1 	bl	80046b2 <HAL_TIM_IC_CaptureCallback>
 8004550:	e005      	b.n	800455e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004552:	6878      	ldr	r0, [r7, #4]
 8004554:	f000 f8a3 	bl	800469e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004558:	6878      	ldr	r0, [r7, #4]
 800455a:	f000 f8b4 	bl	80046c6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	2200      	movs	r2, #0
 8004562:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	691b      	ldr	r3, [r3, #16]
 800456a:	f003 0310 	and.w	r3, r3, #16
 800456e:	2b10      	cmp	r3, #16
 8004570:	d122      	bne.n	80045b8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	68db      	ldr	r3, [r3, #12]
 8004578:	f003 0310 	and.w	r3, r3, #16
 800457c:	2b10      	cmp	r3, #16
 800457e:	d11b      	bne.n	80045b8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	f06f 0210 	mvn.w	r2, #16
 8004588:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	2208      	movs	r2, #8
 800458e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	69db      	ldr	r3, [r3, #28]
 8004596:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800459a:	2b00      	cmp	r3, #0
 800459c:	d003      	beq.n	80045a6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800459e:	6878      	ldr	r0, [r7, #4]
 80045a0:	f000 f887 	bl	80046b2 <HAL_TIM_IC_CaptureCallback>
 80045a4:	e005      	b.n	80045b2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80045a6:	6878      	ldr	r0, [r7, #4]
 80045a8:	f000 f879 	bl	800469e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80045ac:	6878      	ldr	r0, [r7, #4]
 80045ae:	f000 f88a 	bl	80046c6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	2200      	movs	r2, #0
 80045b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	691b      	ldr	r3, [r3, #16]
 80045be:	f003 0301 	and.w	r3, r3, #1
 80045c2:	2b01      	cmp	r3, #1
 80045c4:	d10e      	bne.n	80045e4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	68db      	ldr	r3, [r3, #12]
 80045cc:	f003 0301 	and.w	r3, r3, #1
 80045d0:	2b01      	cmp	r3, #1
 80045d2:	d107      	bne.n	80045e4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	f06f 0201 	mvn.w	r2, #1
 80045dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80045de:	6878      	ldr	r0, [r7, #4]
 80045e0:	f7fc fdcc 	bl	800117c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	691b      	ldr	r3, [r3, #16]
 80045ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045ee:	2b80      	cmp	r3, #128	; 0x80
 80045f0:	d10e      	bne.n	8004610 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	68db      	ldr	r3, [r3, #12]
 80045f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045fc:	2b80      	cmp	r3, #128	; 0x80
 80045fe:	d107      	bne.n	8004610 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004608:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800460a:	6878      	ldr	r0, [r7, #4]
 800460c:	f000 f8de 	bl	80047cc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	691b      	ldr	r3, [r3, #16]
 8004616:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800461a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800461e:	d10e      	bne.n	800463e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	68db      	ldr	r3, [r3, #12]
 8004626:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800462a:	2b80      	cmp	r3, #128	; 0x80
 800462c:	d107      	bne.n	800463e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004636:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004638:	6878      	ldr	r0, [r7, #4]
 800463a:	f000 f8d1 	bl	80047e0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	691b      	ldr	r3, [r3, #16]
 8004644:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004648:	2b40      	cmp	r3, #64	; 0x40
 800464a:	d10e      	bne.n	800466a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	68db      	ldr	r3, [r3, #12]
 8004652:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004656:	2b40      	cmp	r3, #64	; 0x40
 8004658:	d107      	bne.n	800466a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004662:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004664:	6878      	ldr	r0, [r7, #4]
 8004666:	f000 f838 	bl	80046da <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	691b      	ldr	r3, [r3, #16]
 8004670:	f003 0320 	and.w	r3, r3, #32
 8004674:	2b20      	cmp	r3, #32
 8004676:	d10e      	bne.n	8004696 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	68db      	ldr	r3, [r3, #12]
 800467e:	f003 0320 	and.w	r3, r3, #32
 8004682:	2b20      	cmp	r3, #32
 8004684:	d107      	bne.n	8004696 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	f06f 0220 	mvn.w	r2, #32
 800468e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004690:	6878      	ldr	r0, [r7, #4]
 8004692:	f000 f891 	bl	80047b8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004696:	bf00      	nop
 8004698:	3708      	adds	r7, #8
 800469a:	46bd      	mov	sp, r7
 800469c:	bd80      	pop	{r7, pc}

0800469e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800469e:	b480      	push	{r7}
 80046a0:	b083      	sub	sp, #12
 80046a2:	af00      	add	r7, sp, #0
 80046a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80046a6:	bf00      	nop
 80046a8:	370c      	adds	r7, #12
 80046aa:	46bd      	mov	sp, r7
 80046ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b0:	4770      	bx	lr

080046b2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80046b2:	b480      	push	{r7}
 80046b4:	b083      	sub	sp, #12
 80046b6:	af00      	add	r7, sp, #0
 80046b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80046ba:	bf00      	nop
 80046bc:	370c      	adds	r7, #12
 80046be:	46bd      	mov	sp, r7
 80046c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c4:	4770      	bx	lr

080046c6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80046c6:	b480      	push	{r7}
 80046c8:	b083      	sub	sp, #12
 80046ca:	af00      	add	r7, sp, #0
 80046cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80046ce:	bf00      	nop
 80046d0:	370c      	adds	r7, #12
 80046d2:	46bd      	mov	sp, r7
 80046d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d8:	4770      	bx	lr

080046da <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80046da:	b480      	push	{r7}
 80046dc:	b083      	sub	sp, #12
 80046de:	af00      	add	r7, sp, #0
 80046e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80046e2:	bf00      	nop
 80046e4:	370c      	adds	r7, #12
 80046e6:	46bd      	mov	sp, r7
 80046e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ec:	4770      	bx	lr
	...

080046f0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80046f0:	b480      	push	{r7}
 80046f2:	b085      	sub	sp, #20
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	6078      	str	r0, [r7, #4]
 80046f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	4a2a      	ldr	r2, [pc, #168]	; (80047ac <TIM_Base_SetConfig+0xbc>)
 8004704:	4293      	cmp	r3, r2
 8004706:	d003      	beq.n	8004710 <TIM_Base_SetConfig+0x20>
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800470e:	d108      	bne.n	8004722 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004716:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004718:	683b      	ldr	r3, [r7, #0]
 800471a:	685b      	ldr	r3, [r3, #4]
 800471c:	68fa      	ldr	r2, [r7, #12]
 800471e:	4313      	orrs	r3, r2
 8004720:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	4a21      	ldr	r2, [pc, #132]	; (80047ac <TIM_Base_SetConfig+0xbc>)
 8004726:	4293      	cmp	r3, r2
 8004728:	d00b      	beq.n	8004742 <TIM_Base_SetConfig+0x52>
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004730:	d007      	beq.n	8004742 <TIM_Base_SetConfig+0x52>
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	4a1e      	ldr	r2, [pc, #120]	; (80047b0 <TIM_Base_SetConfig+0xc0>)
 8004736:	4293      	cmp	r3, r2
 8004738:	d003      	beq.n	8004742 <TIM_Base_SetConfig+0x52>
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	4a1d      	ldr	r2, [pc, #116]	; (80047b4 <TIM_Base_SetConfig+0xc4>)
 800473e:	4293      	cmp	r3, r2
 8004740:	d108      	bne.n	8004754 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004748:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800474a:	683b      	ldr	r3, [r7, #0]
 800474c:	68db      	ldr	r3, [r3, #12]
 800474e:	68fa      	ldr	r2, [r7, #12]
 8004750:	4313      	orrs	r3, r2
 8004752:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800475a:	683b      	ldr	r3, [r7, #0]
 800475c:	695b      	ldr	r3, [r3, #20]
 800475e:	4313      	orrs	r3, r2
 8004760:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	68fa      	ldr	r2, [r7, #12]
 8004766:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004768:	683b      	ldr	r3, [r7, #0]
 800476a:	689a      	ldr	r2, [r3, #8]
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004770:	683b      	ldr	r3, [r7, #0]
 8004772:	681a      	ldr	r2, [r3, #0]
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	4a0c      	ldr	r2, [pc, #48]	; (80047ac <TIM_Base_SetConfig+0xbc>)
 800477c:	4293      	cmp	r3, r2
 800477e:	d007      	beq.n	8004790 <TIM_Base_SetConfig+0xa0>
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	4a0b      	ldr	r2, [pc, #44]	; (80047b0 <TIM_Base_SetConfig+0xc0>)
 8004784:	4293      	cmp	r3, r2
 8004786:	d003      	beq.n	8004790 <TIM_Base_SetConfig+0xa0>
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	4a0a      	ldr	r2, [pc, #40]	; (80047b4 <TIM_Base_SetConfig+0xc4>)
 800478c:	4293      	cmp	r3, r2
 800478e:	d103      	bne.n	8004798 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004790:	683b      	ldr	r3, [r7, #0]
 8004792:	691a      	ldr	r2, [r3, #16]
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	2201      	movs	r2, #1
 800479c:	615a      	str	r2, [r3, #20]
}
 800479e:	bf00      	nop
 80047a0:	3714      	adds	r7, #20
 80047a2:	46bd      	mov	sp, r7
 80047a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a8:	4770      	bx	lr
 80047aa:	bf00      	nop
 80047ac:	40012c00 	.word	0x40012c00
 80047b0:	40014000 	.word	0x40014000
 80047b4:	40014400 	.word	0x40014400

080047b8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80047b8:	b480      	push	{r7}
 80047ba:	b083      	sub	sp, #12
 80047bc:	af00      	add	r7, sp, #0
 80047be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80047c0:	bf00      	nop
 80047c2:	370c      	adds	r7, #12
 80047c4:	46bd      	mov	sp, r7
 80047c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ca:	4770      	bx	lr

080047cc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80047cc:	b480      	push	{r7}
 80047ce:	b083      	sub	sp, #12
 80047d0:	af00      	add	r7, sp, #0
 80047d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80047d4:	bf00      	nop
 80047d6:	370c      	adds	r7, #12
 80047d8:	46bd      	mov	sp, r7
 80047da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047de:	4770      	bx	lr

080047e0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80047e0:	b480      	push	{r7}
 80047e2:	b083      	sub	sp, #12
 80047e4:	af00      	add	r7, sp, #0
 80047e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80047e8:	bf00      	nop
 80047ea:	370c      	adds	r7, #12
 80047ec:	46bd      	mov	sp, r7
 80047ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f2:	4770      	bx	lr

080047f4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80047f4:	b580      	push	{r7, lr}
 80047f6:	b082      	sub	sp, #8
 80047f8:	af00      	add	r7, sp, #0
 80047fa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d101      	bne.n	8004806 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004802:	2301      	movs	r3, #1
 8004804:	e040      	b.n	8004888 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800480a:	2b00      	cmp	r3, #0
 800480c:	d106      	bne.n	800481c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	2200      	movs	r2, #0
 8004812:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004816:	6878      	ldr	r0, [r7, #4]
 8004818:	f7fd fa92 	bl	8001d40 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	2224      	movs	r2, #36	; 0x24
 8004820:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	681a      	ldr	r2, [r3, #0]
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	f022 0201 	bic.w	r2, r2, #1
 8004830:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004832:	6878      	ldr	r0, [r7, #4]
 8004834:	f000 f992 	bl	8004b5c <UART_SetConfig>
 8004838:	4603      	mov	r3, r0
 800483a:	2b01      	cmp	r3, #1
 800483c:	d101      	bne.n	8004842 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800483e:	2301      	movs	r3, #1
 8004840:	e022      	b.n	8004888 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004846:	2b00      	cmp	r3, #0
 8004848:	d002      	beq.n	8004850 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800484a:	6878      	ldr	r0, [r7, #4]
 800484c:	f000 fbb2 	bl	8004fb4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	685a      	ldr	r2, [r3, #4]
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800485e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	689a      	ldr	r2, [r3, #8]
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800486e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	681a      	ldr	r2, [r3, #0]
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	f042 0201 	orr.w	r2, r2, #1
 800487e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004880:	6878      	ldr	r0, [r7, #4]
 8004882:	f000 fc39 	bl	80050f8 <UART_CheckIdleState>
 8004886:	4603      	mov	r3, r0
}
 8004888:	4618      	mov	r0, r3
 800488a:	3708      	adds	r7, #8
 800488c:	46bd      	mov	sp, r7
 800488e:	bd80      	pop	{r7, pc}

08004890 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004890:	b580      	push	{r7, lr}
 8004892:	b08a      	sub	sp, #40	; 0x28
 8004894:	af02      	add	r7, sp, #8
 8004896:	60f8      	str	r0, [r7, #12]
 8004898:	60b9      	str	r1, [r7, #8]
 800489a:	603b      	str	r3, [r7, #0]
 800489c:	4613      	mov	r3, r2
 800489e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80048a4:	2b20      	cmp	r3, #32
 80048a6:	f040 8082 	bne.w	80049ae <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 80048aa:	68bb      	ldr	r3, [r7, #8]
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d002      	beq.n	80048b6 <HAL_UART_Transmit+0x26>
 80048b0:	88fb      	ldrh	r3, [r7, #6]
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d101      	bne.n	80048ba <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80048b6:	2301      	movs	r3, #1
 80048b8:	e07a      	b.n	80049b0 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80048c0:	2b01      	cmp	r3, #1
 80048c2:	d101      	bne.n	80048c8 <HAL_UART_Transmit+0x38>
 80048c4:	2302      	movs	r3, #2
 80048c6:	e073      	b.n	80049b0 <HAL_UART_Transmit+0x120>
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	2201      	movs	r2, #1
 80048cc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	2200      	movs	r2, #0
 80048d4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	2221      	movs	r2, #33	; 0x21
 80048dc:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80048de:	f7fd fb2f 	bl	8001f40 <HAL_GetTick>
 80048e2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	88fa      	ldrh	r2, [r7, #6]
 80048e8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	88fa      	ldrh	r2, [r7, #6]
 80048f0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	689b      	ldr	r3, [r3, #8]
 80048f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80048fc:	d108      	bne.n	8004910 <HAL_UART_Transmit+0x80>
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	691b      	ldr	r3, [r3, #16]
 8004902:	2b00      	cmp	r3, #0
 8004904:	d104      	bne.n	8004910 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8004906:	2300      	movs	r3, #0
 8004908:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800490a:	68bb      	ldr	r3, [r7, #8]
 800490c:	61bb      	str	r3, [r7, #24]
 800490e:	e003      	b.n	8004918 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8004910:	68bb      	ldr	r3, [r7, #8]
 8004912:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004914:	2300      	movs	r3, #0
 8004916:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	2200      	movs	r2, #0
 800491c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8004920:	e02d      	b.n	800497e <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004922:	683b      	ldr	r3, [r7, #0]
 8004924:	9300      	str	r3, [sp, #0]
 8004926:	697b      	ldr	r3, [r7, #20]
 8004928:	2200      	movs	r2, #0
 800492a:	2180      	movs	r1, #128	; 0x80
 800492c:	68f8      	ldr	r0, [r7, #12]
 800492e:	f000 fc2c 	bl	800518a <UART_WaitOnFlagUntilTimeout>
 8004932:	4603      	mov	r3, r0
 8004934:	2b00      	cmp	r3, #0
 8004936:	d001      	beq.n	800493c <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8004938:	2303      	movs	r3, #3
 800493a:	e039      	b.n	80049b0 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 800493c:	69fb      	ldr	r3, [r7, #28]
 800493e:	2b00      	cmp	r3, #0
 8004940:	d10b      	bne.n	800495a <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004942:	69bb      	ldr	r3, [r7, #24]
 8004944:	881a      	ldrh	r2, [r3, #0]
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800494e:	b292      	uxth	r2, r2
 8004950:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004952:	69bb      	ldr	r3, [r7, #24]
 8004954:	3302      	adds	r3, #2
 8004956:	61bb      	str	r3, [r7, #24]
 8004958:	e008      	b.n	800496c <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800495a:	69fb      	ldr	r3, [r7, #28]
 800495c:	781a      	ldrb	r2, [r3, #0]
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	b292      	uxth	r2, r2
 8004964:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004966:	69fb      	ldr	r3, [r7, #28]
 8004968:	3301      	adds	r3, #1
 800496a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004972:	b29b      	uxth	r3, r3
 8004974:	3b01      	subs	r3, #1
 8004976:	b29a      	uxth	r2, r3
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004984:	b29b      	uxth	r3, r3
 8004986:	2b00      	cmp	r3, #0
 8004988:	d1cb      	bne.n	8004922 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800498a:	683b      	ldr	r3, [r7, #0]
 800498c:	9300      	str	r3, [sp, #0]
 800498e:	697b      	ldr	r3, [r7, #20]
 8004990:	2200      	movs	r2, #0
 8004992:	2140      	movs	r1, #64	; 0x40
 8004994:	68f8      	ldr	r0, [r7, #12]
 8004996:	f000 fbf8 	bl	800518a <UART_WaitOnFlagUntilTimeout>
 800499a:	4603      	mov	r3, r0
 800499c:	2b00      	cmp	r3, #0
 800499e:	d001      	beq.n	80049a4 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 80049a0:	2303      	movs	r3, #3
 80049a2:	e005      	b.n	80049b0 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	2220      	movs	r2, #32
 80049a8:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80049aa:	2300      	movs	r3, #0
 80049ac:	e000      	b.n	80049b0 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 80049ae:	2302      	movs	r3, #2
  }
}
 80049b0:	4618      	mov	r0, r3
 80049b2:	3720      	adds	r7, #32
 80049b4:	46bd      	mov	sp, r7
 80049b6:	bd80      	pop	{r7, pc}

080049b8 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80049b8:	b580      	push	{r7, lr}
 80049ba:	b08a      	sub	sp, #40	; 0x28
 80049bc:	af02      	add	r7, sp, #8
 80049be:	60f8      	str	r0, [r7, #12]
 80049c0:	60b9      	str	r1, [r7, #8]
 80049c2:	603b      	str	r3, [r7, #0]
 80049c4:	4613      	mov	r3, r2
 80049c6:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80049cc:	2b20      	cmp	r3, #32
 80049ce:	f040 80bf 	bne.w	8004b50 <HAL_UART_Receive+0x198>
  {
    if ((pData == NULL) || (Size == 0U))
 80049d2:	68bb      	ldr	r3, [r7, #8]
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d002      	beq.n	80049de <HAL_UART_Receive+0x26>
 80049d8:	88fb      	ldrh	r3, [r7, #6]
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d101      	bne.n	80049e2 <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 80049de:	2301      	movs	r3, #1
 80049e0:	e0b7      	b.n	8004b52 <HAL_UART_Receive+0x19a>
    }

    __HAL_LOCK(huart);
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80049e8:	2b01      	cmp	r3, #1
 80049ea:	d101      	bne.n	80049f0 <HAL_UART_Receive+0x38>
 80049ec:	2302      	movs	r3, #2
 80049ee:	e0b0      	b.n	8004b52 <HAL_UART_Receive+0x19a>
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	2201      	movs	r2, #1
 80049f4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	2200      	movs	r2, #0
 80049fc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	2222      	movs	r2, #34	; 0x22
 8004a04:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	2200      	movs	r2, #0
 8004a0a:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004a0c:	f7fd fa98 	bl	8001f40 <HAL_GetTick>
 8004a10:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	88fa      	ldrh	r2, [r7, #6]
 8004a16:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	88fa      	ldrh	r2, [r7, #6]
 8004a1e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	689b      	ldr	r3, [r3, #8]
 8004a26:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a2a:	d10e      	bne.n	8004a4a <HAL_UART_Receive+0x92>
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	691b      	ldr	r3, [r3, #16]
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d105      	bne.n	8004a40 <HAL_UART_Receive+0x88>
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	f240 12ff 	movw	r2, #511	; 0x1ff
 8004a3a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004a3e:	e02d      	b.n	8004a9c <HAL_UART_Receive+0xe4>
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	22ff      	movs	r2, #255	; 0xff
 8004a44:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004a48:	e028      	b.n	8004a9c <HAL_UART_Receive+0xe4>
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	689b      	ldr	r3, [r3, #8]
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d10d      	bne.n	8004a6e <HAL_UART_Receive+0xb6>
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	691b      	ldr	r3, [r3, #16]
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d104      	bne.n	8004a64 <HAL_UART_Receive+0xac>
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	22ff      	movs	r2, #255	; 0xff
 8004a5e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004a62:	e01b      	b.n	8004a9c <HAL_UART_Receive+0xe4>
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	227f      	movs	r2, #127	; 0x7f
 8004a68:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004a6c:	e016      	b.n	8004a9c <HAL_UART_Receive+0xe4>
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	689b      	ldr	r3, [r3, #8]
 8004a72:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004a76:	d10d      	bne.n	8004a94 <HAL_UART_Receive+0xdc>
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	691b      	ldr	r3, [r3, #16]
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d104      	bne.n	8004a8a <HAL_UART_Receive+0xd2>
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	227f      	movs	r2, #127	; 0x7f
 8004a84:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004a88:	e008      	b.n	8004a9c <HAL_UART_Receive+0xe4>
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	223f      	movs	r2, #63	; 0x3f
 8004a8e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004a92:	e003      	b.n	8004a9c <HAL_UART_Receive+0xe4>
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	2200      	movs	r2, #0
 8004a98:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004aa2:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	689b      	ldr	r3, [r3, #8]
 8004aa8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004aac:	d108      	bne.n	8004ac0 <HAL_UART_Receive+0x108>
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	691b      	ldr	r3, [r3, #16]
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d104      	bne.n	8004ac0 <HAL_UART_Receive+0x108>
    {
      pdata8bits  = NULL;
 8004ab6:	2300      	movs	r3, #0
 8004ab8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004aba:	68bb      	ldr	r3, [r7, #8]
 8004abc:	61bb      	str	r3, [r7, #24]
 8004abe:	e003      	b.n	8004ac8 <HAL_UART_Receive+0x110>
    }
    else
    {
      pdata8bits  = pData;
 8004ac0:	68bb      	ldr	r3, [r7, #8]
 8004ac2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004ac4:	2300      	movs	r3, #0
 8004ac6:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	2200      	movs	r2, #0
 8004acc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8004ad0:	e033      	b.n	8004b3a <HAL_UART_Receive+0x182>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8004ad2:	683b      	ldr	r3, [r7, #0]
 8004ad4:	9300      	str	r3, [sp, #0]
 8004ad6:	697b      	ldr	r3, [r7, #20]
 8004ad8:	2200      	movs	r2, #0
 8004ada:	2120      	movs	r1, #32
 8004adc:	68f8      	ldr	r0, [r7, #12]
 8004ade:	f000 fb54 	bl	800518a <UART_WaitOnFlagUntilTimeout>
 8004ae2:	4603      	mov	r3, r0
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d001      	beq.n	8004aec <HAL_UART_Receive+0x134>
      {
        return HAL_TIMEOUT;
 8004ae8:	2303      	movs	r3, #3
 8004aea:	e032      	b.n	8004b52 <HAL_UART_Receive+0x19a>
      }
      if (pdata8bits == NULL)
 8004aec:	69fb      	ldr	r3, [r7, #28]
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d10c      	bne.n	8004b0c <HAL_UART_Receive+0x154>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8004af8:	b29a      	uxth	r2, r3
 8004afa:	8a7b      	ldrh	r3, [r7, #18]
 8004afc:	4013      	ands	r3, r2
 8004afe:	b29a      	uxth	r2, r3
 8004b00:	69bb      	ldr	r3, [r7, #24]
 8004b02:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8004b04:	69bb      	ldr	r3, [r7, #24]
 8004b06:	3302      	adds	r3, #2
 8004b08:	61bb      	str	r3, [r7, #24]
 8004b0a:	e00d      	b.n	8004b28 <HAL_UART_Receive+0x170>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8004b12:	b29b      	uxth	r3, r3
 8004b14:	b2da      	uxtb	r2, r3
 8004b16:	8a7b      	ldrh	r3, [r7, #18]
 8004b18:	b2db      	uxtb	r3, r3
 8004b1a:	4013      	ands	r3, r2
 8004b1c:	b2da      	uxtb	r2, r3
 8004b1e:	69fb      	ldr	r3, [r7, #28]
 8004b20:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8004b22:	69fb      	ldr	r3, [r7, #28]
 8004b24:	3301      	adds	r3, #1
 8004b26:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004b2e:	b29b      	uxth	r3, r3
 8004b30:	3b01      	subs	r3, #1
 8004b32:	b29a      	uxth	r2, r3
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004b40:	b29b      	uxth	r3, r3
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d1c5      	bne.n	8004ad2 <HAL_UART_Receive+0x11a>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	2220      	movs	r2, #32
 8004b4a:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8004b4c:	2300      	movs	r3, #0
 8004b4e:	e000      	b.n	8004b52 <HAL_UART_Receive+0x19a>
  }
  else
  {
    return HAL_BUSY;
 8004b50:	2302      	movs	r3, #2
  }
}
 8004b52:	4618      	mov	r0, r3
 8004b54:	3720      	adds	r7, #32
 8004b56:	46bd      	mov	sp, r7
 8004b58:	bd80      	pop	{r7, pc}
	...

08004b5c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004b5c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004b60:	b08a      	sub	sp, #40	; 0x28
 8004b62:	af00      	add	r7, sp, #0
 8004b64:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004b66:	2300      	movs	r3, #0
 8004b68:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	689a      	ldr	r2, [r3, #8]
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	691b      	ldr	r3, [r3, #16]
 8004b74:	431a      	orrs	r2, r3
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	695b      	ldr	r3, [r3, #20]
 8004b7a:	431a      	orrs	r2, r3
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	69db      	ldr	r3, [r3, #28]
 8004b80:	4313      	orrs	r3, r2
 8004b82:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	681a      	ldr	r2, [r3, #0]
 8004b8a:	4bb4      	ldr	r3, [pc, #720]	; (8004e5c <UART_SetConfig+0x300>)
 8004b8c:	4013      	ands	r3, r2
 8004b8e:	68fa      	ldr	r2, [r7, #12]
 8004b90:	6812      	ldr	r2, [r2, #0]
 8004b92:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004b94:	430b      	orrs	r3, r1
 8004b96:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	685b      	ldr	r3, [r3, #4]
 8004b9e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	68da      	ldr	r2, [r3, #12]
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	430a      	orrs	r2, r1
 8004bac:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	699b      	ldr	r3, [r3, #24]
 8004bb2:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	4aa9      	ldr	r2, [pc, #676]	; (8004e60 <UART_SetConfig+0x304>)
 8004bba:	4293      	cmp	r3, r2
 8004bbc:	d004      	beq.n	8004bc8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	6a1b      	ldr	r3, [r3, #32]
 8004bc2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004bc4:	4313      	orrs	r3, r2
 8004bc6:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	689b      	ldr	r3, [r3, #8]
 8004bce:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004bd8:	430a      	orrs	r2, r1
 8004bda:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	4aa0      	ldr	r2, [pc, #640]	; (8004e64 <UART_SetConfig+0x308>)
 8004be2:	4293      	cmp	r3, r2
 8004be4:	d126      	bne.n	8004c34 <UART_SetConfig+0xd8>
 8004be6:	4ba0      	ldr	r3, [pc, #640]	; (8004e68 <UART_SetConfig+0x30c>)
 8004be8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bec:	f003 0303 	and.w	r3, r3, #3
 8004bf0:	2b03      	cmp	r3, #3
 8004bf2:	d81b      	bhi.n	8004c2c <UART_SetConfig+0xd0>
 8004bf4:	a201      	add	r2, pc, #4	; (adr r2, 8004bfc <UART_SetConfig+0xa0>)
 8004bf6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bfa:	bf00      	nop
 8004bfc:	08004c0d 	.word	0x08004c0d
 8004c00:	08004c1d 	.word	0x08004c1d
 8004c04:	08004c15 	.word	0x08004c15
 8004c08:	08004c25 	.word	0x08004c25
 8004c0c:	2301      	movs	r3, #1
 8004c0e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c12:	e080      	b.n	8004d16 <UART_SetConfig+0x1ba>
 8004c14:	2302      	movs	r3, #2
 8004c16:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c1a:	e07c      	b.n	8004d16 <UART_SetConfig+0x1ba>
 8004c1c:	2304      	movs	r3, #4
 8004c1e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c22:	e078      	b.n	8004d16 <UART_SetConfig+0x1ba>
 8004c24:	2308      	movs	r3, #8
 8004c26:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c2a:	e074      	b.n	8004d16 <UART_SetConfig+0x1ba>
 8004c2c:	2310      	movs	r3, #16
 8004c2e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c32:	e070      	b.n	8004d16 <UART_SetConfig+0x1ba>
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	4a8c      	ldr	r2, [pc, #560]	; (8004e6c <UART_SetConfig+0x310>)
 8004c3a:	4293      	cmp	r3, r2
 8004c3c:	d138      	bne.n	8004cb0 <UART_SetConfig+0x154>
 8004c3e:	4b8a      	ldr	r3, [pc, #552]	; (8004e68 <UART_SetConfig+0x30c>)
 8004c40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c44:	f003 030c 	and.w	r3, r3, #12
 8004c48:	2b0c      	cmp	r3, #12
 8004c4a:	d82d      	bhi.n	8004ca8 <UART_SetConfig+0x14c>
 8004c4c:	a201      	add	r2, pc, #4	; (adr r2, 8004c54 <UART_SetConfig+0xf8>)
 8004c4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c52:	bf00      	nop
 8004c54:	08004c89 	.word	0x08004c89
 8004c58:	08004ca9 	.word	0x08004ca9
 8004c5c:	08004ca9 	.word	0x08004ca9
 8004c60:	08004ca9 	.word	0x08004ca9
 8004c64:	08004c99 	.word	0x08004c99
 8004c68:	08004ca9 	.word	0x08004ca9
 8004c6c:	08004ca9 	.word	0x08004ca9
 8004c70:	08004ca9 	.word	0x08004ca9
 8004c74:	08004c91 	.word	0x08004c91
 8004c78:	08004ca9 	.word	0x08004ca9
 8004c7c:	08004ca9 	.word	0x08004ca9
 8004c80:	08004ca9 	.word	0x08004ca9
 8004c84:	08004ca1 	.word	0x08004ca1
 8004c88:	2300      	movs	r3, #0
 8004c8a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c8e:	e042      	b.n	8004d16 <UART_SetConfig+0x1ba>
 8004c90:	2302      	movs	r3, #2
 8004c92:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c96:	e03e      	b.n	8004d16 <UART_SetConfig+0x1ba>
 8004c98:	2304      	movs	r3, #4
 8004c9a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c9e:	e03a      	b.n	8004d16 <UART_SetConfig+0x1ba>
 8004ca0:	2308      	movs	r3, #8
 8004ca2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004ca6:	e036      	b.n	8004d16 <UART_SetConfig+0x1ba>
 8004ca8:	2310      	movs	r3, #16
 8004caa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004cae:	e032      	b.n	8004d16 <UART_SetConfig+0x1ba>
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	4a6a      	ldr	r2, [pc, #424]	; (8004e60 <UART_SetConfig+0x304>)
 8004cb6:	4293      	cmp	r3, r2
 8004cb8:	d12a      	bne.n	8004d10 <UART_SetConfig+0x1b4>
 8004cba:	4b6b      	ldr	r3, [pc, #428]	; (8004e68 <UART_SetConfig+0x30c>)
 8004cbc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cc0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004cc4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004cc8:	d01a      	beq.n	8004d00 <UART_SetConfig+0x1a4>
 8004cca:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004cce:	d81b      	bhi.n	8004d08 <UART_SetConfig+0x1ac>
 8004cd0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004cd4:	d00c      	beq.n	8004cf0 <UART_SetConfig+0x194>
 8004cd6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004cda:	d815      	bhi.n	8004d08 <UART_SetConfig+0x1ac>
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d003      	beq.n	8004ce8 <UART_SetConfig+0x18c>
 8004ce0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004ce4:	d008      	beq.n	8004cf8 <UART_SetConfig+0x19c>
 8004ce6:	e00f      	b.n	8004d08 <UART_SetConfig+0x1ac>
 8004ce8:	2300      	movs	r3, #0
 8004cea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004cee:	e012      	b.n	8004d16 <UART_SetConfig+0x1ba>
 8004cf0:	2302      	movs	r3, #2
 8004cf2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004cf6:	e00e      	b.n	8004d16 <UART_SetConfig+0x1ba>
 8004cf8:	2304      	movs	r3, #4
 8004cfa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004cfe:	e00a      	b.n	8004d16 <UART_SetConfig+0x1ba>
 8004d00:	2308      	movs	r3, #8
 8004d02:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d06:	e006      	b.n	8004d16 <UART_SetConfig+0x1ba>
 8004d08:	2310      	movs	r3, #16
 8004d0a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d0e:	e002      	b.n	8004d16 <UART_SetConfig+0x1ba>
 8004d10:	2310      	movs	r3, #16
 8004d12:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	4a51      	ldr	r2, [pc, #324]	; (8004e60 <UART_SetConfig+0x304>)
 8004d1c:	4293      	cmp	r3, r2
 8004d1e:	d17a      	bne.n	8004e16 <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004d20:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004d24:	2b08      	cmp	r3, #8
 8004d26:	d824      	bhi.n	8004d72 <UART_SetConfig+0x216>
 8004d28:	a201      	add	r2, pc, #4	; (adr r2, 8004d30 <UART_SetConfig+0x1d4>)
 8004d2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d2e:	bf00      	nop
 8004d30:	08004d55 	.word	0x08004d55
 8004d34:	08004d73 	.word	0x08004d73
 8004d38:	08004d5d 	.word	0x08004d5d
 8004d3c:	08004d73 	.word	0x08004d73
 8004d40:	08004d63 	.word	0x08004d63
 8004d44:	08004d73 	.word	0x08004d73
 8004d48:	08004d73 	.word	0x08004d73
 8004d4c:	08004d73 	.word	0x08004d73
 8004d50:	08004d6b 	.word	0x08004d6b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004d54:	f7fe ff18 	bl	8003b88 <HAL_RCC_GetPCLK1Freq>
 8004d58:	61f8      	str	r0, [r7, #28]
        break;
 8004d5a:	e010      	b.n	8004d7e <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004d5c:	4b44      	ldr	r3, [pc, #272]	; (8004e70 <UART_SetConfig+0x314>)
 8004d5e:	61fb      	str	r3, [r7, #28]
        break;
 8004d60:	e00d      	b.n	8004d7e <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004d62:	f7fe fe79 	bl	8003a58 <HAL_RCC_GetSysClockFreq>
 8004d66:	61f8      	str	r0, [r7, #28]
        break;
 8004d68:	e009      	b.n	8004d7e <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004d6a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004d6e:	61fb      	str	r3, [r7, #28]
        break;
 8004d70:	e005      	b.n	8004d7e <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 8004d72:	2300      	movs	r3, #0
 8004d74:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004d76:	2301      	movs	r3, #1
 8004d78:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004d7c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004d7e:	69fb      	ldr	r3, [r7, #28]
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	f000 8107 	beq.w	8004f94 <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	685a      	ldr	r2, [r3, #4]
 8004d8a:	4613      	mov	r3, r2
 8004d8c:	005b      	lsls	r3, r3, #1
 8004d8e:	4413      	add	r3, r2
 8004d90:	69fa      	ldr	r2, [r7, #28]
 8004d92:	429a      	cmp	r2, r3
 8004d94:	d305      	bcc.n	8004da2 <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	685b      	ldr	r3, [r3, #4]
 8004d9a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004d9c:	69fa      	ldr	r2, [r7, #28]
 8004d9e:	429a      	cmp	r2, r3
 8004da0:	d903      	bls.n	8004daa <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 8004da2:	2301      	movs	r3, #1
 8004da4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004da8:	e0f4      	b.n	8004f94 <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004daa:	69fb      	ldr	r3, [r7, #28]
 8004dac:	2200      	movs	r2, #0
 8004dae:	461c      	mov	r4, r3
 8004db0:	4615      	mov	r5, r2
 8004db2:	f04f 0200 	mov.w	r2, #0
 8004db6:	f04f 0300 	mov.w	r3, #0
 8004dba:	022b      	lsls	r3, r5, #8
 8004dbc:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8004dc0:	0222      	lsls	r2, r4, #8
 8004dc2:	68f9      	ldr	r1, [r7, #12]
 8004dc4:	6849      	ldr	r1, [r1, #4]
 8004dc6:	0849      	lsrs	r1, r1, #1
 8004dc8:	2000      	movs	r0, #0
 8004dca:	4688      	mov	r8, r1
 8004dcc:	4681      	mov	r9, r0
 8004dce:	eb12 0a08 	adds.w	sl, r2, r8
 8004dd2:	eb43 0b09 	adc.w	fp, r3, r9
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	685b      	ldr	r3, [r3, #4]
 8004dda:	2200      	movs	r2, #0
 8004ddc:	603b      	str	r3, [r7, #0]
 8004dde:	607a      	str	r2, [r7, #4]
 8004de0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004de4:	4650      	mov	r0, sl
 8004de6:	4659      	mov	r1, fp
 8004de8:	f7fb fe88 	bl	8000afc <__aeabi_uldivmod>
 8004dec:	4602      	mov	r2, r0
 8004dee:	460b      	mov	r3, r1
 8004df0:	4613      	mov	r3, r2
 8004df2:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004df4:	69bb      	ldr	r3, [r7, #24]
 8004df6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004dfa:	d308      	bcc.n	8004e0e <UART_SetConfig+0x2b2>
 8004dfc:	69bb      	ldr	r3, [r7, #24]
 8004dfe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004e02:	d204      	bcs.n	8004e0e <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	69ba      	ldr	r2, [r7, #24]
 8004e0a:	60da      	str	r2, [r3, #12]
 8004e0c:	e0c2      	b.n	8004f94 <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 8004e0e:	2301      	movs	r3, #1
 8004e10:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004e14:	e0be      	b.n	8004f94 <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	69db      	ldr	r3, [r3, #28]
 8004e1a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004e1e:	d16a      	bne.n	8004ef6 <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 8004e20:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004e24:	2b08      	cmp	r3, #8
 8004e26:	d834      	bhi.n	8004e92 <UART_SetConfig+0x336>
 8004e28:	a201      	add	r2, pc, #4	; (adr r2, 8004e30 <UART_SetConfig+0x2d4>)
 8004e2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e2e:	bf00      	nop
 8004e30:	08004e55 	.word	0x08004e55
 8004e34:	08004e75 	.word	0x08004e75
 8004e38:	08004e7d 	.word	0x08004e7d
 8004e3c:	08004e93 	.word	0x08004e93
 8004e40:	08004e83 	.word	0x08004e83
 8004e44:	08004e93 	.word	0x08004e93
 8004e48:	08004e93 	.word	0x08004e93
 8004e4c:	08004e93 	.word	0x08004e93
 8004e50:	08004e8b 	.word	0x08004e8b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004e54:	f7fe fe98 	bl	8003b88 <HAL_RCC_GetPCLK1Freq>
 8004e58:	61f8      	str	r0, [r7, #28]
        break;
 8004e5a:	e020      	b.n	8004e9e <UART_SetConfig+0x342>
 8004e5c:	efff69f3 	.word	0xefff69f3
 8004e60:	40008000 	.word	0x40008000
 8004e64:	40013800 	.word	0x40013800
 8004e68:	40021000 	.word	0x40021000
 8004e6c:	40004400 	.word	0x40004400
 8004e70:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004e74:	f7fe fe9e 	bl	8003bb4 <HAL_RCC_GetPCLK2Freq>
 8004e78:	61f8      	str	r0, [r7, #28]
        break;
 8004e7a:	e010      	b.n	8004e9e <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004e7c:	4b4c      	ldr	r3, [pc, #304]	; (8004fb0 <UART_SetConfig+0x454>)
 8004e7e:	61fb      	str	r3, [r7, #28]
        break;
 8004e80:	e00d      	b.n	8004e9e <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004e82:	f7fe fde9 	bl	8003a58 <HAL_RCC_GetSysClockFreq>
 8004e86:	61f8      	str	r0, [r7, #28]
        break;
 8004e88:	e009      	b.n	8004e9e <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004e8a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004e8e:	61fb      	str	r3, [r7, #28]
        break;
 8004e90:	e005      	b.n	8004e9e <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 8004e92:	2300      	movs	r3, #0
 8004e94:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004e96:	2301      	movs	r3, #1
 8004e98:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004e9c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004e9e:	69fb      	ldr	r3, [r7, #28]
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d077      	beq.n	8004f94 <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004ea4:	69fb      	ldr	r3, [r7, #28]
 8004ea6:	005a      	lsls	r2, r3, #1
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	685b      	ldr	r3, [r3, #4]
 8004eac:	085b      	lsrs	r3, r3, #1
 8004eae:	441a      	add	r2, r3
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	685b      	ldr	r3, [r3, #4]
 8004eb4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004eb8:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004eba:	69bb      	ldr	r3, [r7, #24]
 8004ebc:	2b0f      	cmp	r3, #15
 8004ebe:	d916      	bls.n	8004eee <UART_SetConfig+0x392>
 8004ec0:	69bb      	ldr	r3, [r7, #24]
 8004ec2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ec6:	d212      	bcs.n	8004eee <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004ec8:	69bb      	ldr	r3, [r7, #24]
 8004eca:	b29b      	uxth	r3, r3
 8004ecc:	f023 030f 	bic.w	r3, r3, #15
 8004ed0:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004ed2:	69bb      	ldr	r3, [r7, #24]
 8004ed4:	085b      	lsrs	r3, r3, #1
 8004ed6:	b29b      	uxth	r3, r3
 8004ed8:	f003 0307 	and.w	r3, r3, #7
 8004edc:	b29a      	uxth	r2, r3
 8004ede:	8afb      	ldrh	r3, [r7, #22]
 8004ee0:	4313      	orrs	r3, r2
 8004ee2:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	8afa      	ldrh	r2, [r7, #22]
 8004eea:	60da      	str	r2, [r3, #12]
 8004eec:	e052      	b.n	8004f94 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8004eee:	2301      	movs	r3, #1
 8004ef0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004ef4:	e04e      	b.n	8004f94 <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004ef6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004efa:	2b08      	cmp	r3, #8
 8004efc:	d827      	bhi.n	8004f4e <UART_SetConfig+0x3f2>
 8004efe:	a201      	add	r2, pc, #4	; (adr r2, 8004f04 <UART_SetConfig+0x3a8>)
 8004f00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f04:	08004f29 	.word	0x08004f29
 8004f08:	08004f31 	.word	0x08004f31
 8004f0c:	08004f39 	.word	0x08004f39
 8004f10:	08004f4f 	.word	0x08004f4f
 8004f14:	08004f3f 	.word	0x08004f3f
 8004f18:	08004f4f 	.word	0x08004f4f
 8004f1c:	08004f4f 	.word	0x08004f4f
 8004f20:	08004f4f 	.word	0x08004f4f
 8004f24:	08004f47 	.word	0x08004f47
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004f28:	f7fe fe2e 	bl	8003b88 <HAL_RCC_GetPCLK1Freq>
 8004f2c:	61f8      	str	r0, [r7, #28]
        break;
 8004f2e:	e014      	b.n	8004f5a <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004f30:	f7fe fe40 	bl	8003bb4 <HAL_RCC_GetPCLK2Freq>
 8004f34:	61f8      	str	r0, [r7, #28]
        break;
 8004f36:	e010      	b.n	8004f5a <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004f38:	4b1d      	ldr	r3, [pc, #116]	; (8004fb0 <UART_SetConfig+0x454>)
 8004f3a:	61fb      	str	r3, [r7, #28]
        break;
 8004f3c:	e00d      	b.n	8004f5a <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004f3e:	f7fe fd8b 	bl	8003a58 <HAL_RCC_GetSysClockFreq>
 8004f42:	61f8      	str	r0, [r7, #28]
        break;
 8004f44:	e009      	b.n	8004f5a <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004f46:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004f4a:	61fb      	str	r3, [r7, #28]
        break;
 8004f4c:	e005      	b.n	8004f5a <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 8004f4e:	2300      	movs	r3, #0
 8004f50:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004f52:	2301      	movs	r3, #1
 8004f54:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004f58:	bf00      	nop
    }

    if (pclk != 0U)
 8004f5a:	69fb      	ldr	r3, [r7, #28]
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d019      	beq.n	8004f94 <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	685b      	ldr	r3, [r3, #4]
 8004f64:	085a      	lsrs	r2, r3, #1
 8004f66:	69fb      	ldr	r3, [r7, #28]
 8004f68:	441a      	add	r2, r3
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	685b      	ldr	r3, [r3, #4]
 8004f6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f72:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004f74:	69bb      	ldr	r3, [r7, #24]
 8004f76:	2b0f      	cmp	r3, #15
 8004f78:	d909      	bls.n	8004f8e <UART_SetConfig+0x432>
 8004f7a:	69bb      	ldr	r3, [r7, #24]
 8004f7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004f80:	d205      	bcs.n	8004f8e <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004f82:	69bb      	ldr	r3, [r7, #24]
 8004f84:	b29a      	uxth	r2, r3
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	60da      	str	r2, [r3, #12]
 8004f8c:	e002      	b.n	8004f94 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8004f8e:	2301      	movs	r3, #1
 8004f90:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	2200      	movs	r2, #0
 8004f98:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	2200      	movs	r2, #0
 8004f9e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004fa0:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8004fa4:	4618      	mov	r0, r3
 8004fa6:	3728      	adds	r7, #40	; 0x28
 8004fa8:	46bd      	mov	sp, r7
 8004faa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004fae:	bf00      	nop
 8004fb0:	00f42400 	.word	0x00f42400

08004fb4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004fb4:	b480      	push	{r7}
 8004fb6:	b083      	sub	sp, #12
 8004fb8:	af00      	add	r7, sp, #0
 8004fba:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fc0:	f003 0301 	and.w	r3, r3, #1
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d00a      	beq.n	8004fde <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	685b      	ldr	r3, [r3, #4]
 8004fce:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	430a      	orrs	r2, r1
 8004fdc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fe2:	f003 0302 	and.w	r3, r3, #2
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d00a      	beq.n	8005000 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	685b      	ldr	r3, [r3, #4]
 8004ff0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	430a      	orrs	r2, r1
 8004ffe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005004:	f003 0304 	and.w	r3, r3, #4
 8005008:	2b00      	cmp	r3, #0
 800500a:	d00a      	beq.n	8005022 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	685b      	ldr	r3, [r3, #4]
 8005012:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	430a      	orrs	r2, r1
 8005020:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005026:	f003 0308 	and.w	r3, r3, #8
 800502a:	2b00      	cmp	r3, #0
 800502c:	d00a      	beq.n	8005044 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	685b      	ldr	r3, [r3, #4]
 8005034:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	430a      	orrs	r2, r1
 8005042:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005048:	f003 0310 	and.w	r3, r3, #16
 800504c:	2b00      	cmp	r3, #0
 800504e:	d00a      	beq.n	8005066 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	689b      	ldr	r3, [r3, #8]
 8005056:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	430a      	orrs	r2, r1
 8005064:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800506a:	f003 0320 	and.w	r3, r3, #32
 800506e:	2b00      	cmp	r3, #0
 8005070:	d00a      	beq.n	8005088 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	689b      	ldr	r3, [r3, #8]
 8005078:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	430a      	orrs	r2, r1
 8005086:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800508c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005090:	2b00      	cmp	r3, #0
 8005092:	d01a      	beq.n	80050ca <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	685b      	ldr	r3, [r3, #4]
 800509a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	430a      	orrs	r2, r1
 80050a8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050ae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80050b2:	d10a      	bne.n	80050ca <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	685b      	ldr	r3, [r3, #4]
 80050ba:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	430a      	orrs	r2, r1
 80050c8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d00a      	beq.n	80050ec <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	685b      	ldr	r3, [r3, #4]
 80050dc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	430a      	orrs	r2, r1
 80050ea:	605a      	str	r2, [r3, #4]
  }
}
 80050ec:	bf00      	nop
 80050ee:	370c      	adds	r7, #12
 80050f0:	46bd      	mov	sp, r7
 80050f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f6:	4770      	bx	lr

080050f8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80050f8:	b580      	push	{r7, lr}
 80050fa:	b086      	sub	sp, #24
 80050fc:	af02      	add	r7, sp, #8
 80050fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	2200      	movs	r2, #0
 8005104:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005108:	f7fc ff1a 	bl	8001f40 <HAL_GetTick>
 800510c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	f003 0308 	and.w	r3, r3, #8
 8005118:	2b08      	cmp	r3, #8
 800511a:	d10e      	bne.n	800513a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800511c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005120:	9300      	str	r3, [sp, #0]
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	2200      	movs	r2, #0
 8005126:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800512a:	6878      	ldr	r0, [r7, #4]
 800512c:	f000 f82d 	bl	800518a <UART_WaitOnFlagUntilTimeout>
 8005130:	4603      	mov	r3, r0
 8005132:	2b00      	cmp	r3, #0
 8005134:	d001      	beq.n	800513a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005136:	2303      	movs	r3, #3
 8005138:	e023      	b.n	8005182 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	f003 0304 	and.w	r3, r3, #4
 8005144:	2b04      	cmp	r3, #4
 8005146:	d10e      	bne.n	8005166 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005148:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800514c:	9300      	str	r3, [sp, #0]
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	2200      	movs	r2, #0
 8005152:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005156:	6878      	ldr	r0, [r7, #4]
 8005158:	f000 f817 	bl	800518a <UART_WaitOnFlagUntilTimeout>
 800515c:	4603      	mov	r3, r0
 800515e:	2b00      	cmp	r3, #0
 8005160:	d001      	beq.n	8005166 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005162:	2303      	movs	r3, #3
 8005164:	e00d      	b.n	8005182 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	2220      	movs	r2, #32
 800516a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	2220      	movs	r2, #32
 8005170:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	2200      	movs	r2, #0
 8005176:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	2200      	movs	r2, #0
 800517c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8005180:	2300      	movs	r3, #0
}
 8005182:	4618      	mov	r0, r3
 8005184:	3710      	adds	r7, #16
 8005186:	46bd      	mov	sp, r7
 8005188:	bd80      	pop	{r7, pc}

0800518a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800518a:	b580      	push	{r7, lr}
 800518c:	b09c      	sub	sp, #112	; 0x70
 800518e:	af00      	add	r7, sp, #0
 8005190:	60f8      	str	r0, [r7, #12]
 8005192:	60b9      	str	r1, [r7, #8]
 8005194:	603b      	str	r3, [r7, #0]
 8005196:	4613      	mov	r3, r2
 8005198:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800519a:	e0a5      	b.n	80052e8 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800519c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800519e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051a2:	f000 80a1 	beq.w	80052e8 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80051a6:	f7fc fecb 	bl	8001f40 <HAL_GetTick>
 80051aa:	4602      	mov	r2, r0
 80051ac:	683b      	ldr	r3, [r7, #0]
 80051ae:	1ad3      	subs	r3, r2, r3
 80051b0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80051b2:	429a      	cmp	r2, r3
 80051b4:	d302      	bcc.n	80051bc <UART_WaitOnFlagUntilTimeout+0x32>
 80051b6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d13e      	bne.n	800523a <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80051c4:	e853 3f00 	ldrex	r3, [r3]
 80051c8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80051ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80051cc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80051d0:	667b      	str	r3, [r7, #100]	; 0x64
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	461a      	mov	r2, r3
 80051d8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80051da:	65fb      	str	r3, [r7, #92]	; 0x5c
 80051dc:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051de:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80051e0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80051e2:	e841 2300 	strex	r3, r2, [r1]
 80051e6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80051e8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d1e6      	bne.n	80051bc <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	3308      	adds	r3, #8
 80051f4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80051f8:	e853 3f00 	ldrex	r3, [r3]
 80051fc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80051fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005200:	f023 0301 	bic.w	r3, r3, #1
 8005204:	663b      	str	r3, [r7, #96]	; 0x60
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	3308      	adds	r3, #8
 800520c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800520e:	64ba      	str	r2, [r7, #72]	; 0x48
 8005210:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005212:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005214:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005216:	e841 2300 	strex	r3, r2, [r1]
 800521a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800521c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800521e:	2b00      	cmp	r3, #0
 8005220:	d1e5      	bne.n	80051ee <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	2220      	movs	r2, #32
 8005226:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	2220      	movs	r2, #32
 800522c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	2200      	movs	r2, #0
 8005232:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8005236:	2303      	movs	r3, #3
 8005238:	e067      	b.n	800530a <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	f003 0304 	and.w	r3, r3, #4
 8005244:	2b00      	cmp	r3, #0
 8005246:	d04f      	beq.n	80052e8 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	69db      	ldr	r3, [r3, #28]
 800524e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005252:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005256:	d147      	bne.n	80052e8 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005260:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005268:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800526a:	e853 3f00 	ldrex	r3, [r3]
 800526e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005272:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005276:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	461a      	mov	r2, r3
 800527e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005280:	637b      	str	r3, [r7, #52]	; 0x34
 8005282:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005284:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005286:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005288:	e841 2300 	strex	r3, r2, [r1]
 800528c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800528e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005290:	2b00      	cmp	r3, #0
 8005292:	d1e6      	bne.n	8005262 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	3308      	adds	r3, #8
 800529a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800529c:	697b      	ldr	r3, [r7, #20]
 800529e:	e853 3f00 	ldrex	r3, [r3]
 80052a2:	613b      	str	r3, [r7, #16]
   return(result);
 80052a4:	693b      	ldr	r3, [r7, #16]
 80052a6:	f023 0301 	bic.w	r3, r3, #1
 80052aa:	66bb      	str	r3, [r7, #104]	; 0x68
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	3308      	adds	r3, #8
 80052b2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80052b4:	623a      	str	r2, [r7, #32]
 80052b6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052b8:	69f9      	ldr	r1, [r7, #28]
 80052ba:	6a3a      	ldr	r2, [r7, #32]
 80052bc:	e841 2300 	strex	r3, r2, [r1]
 80052c0:	61bb      	str	r3, [r7, #24]
   return(result);
 80052c2:	69bb      	ldr	r3, [r7, #24]
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d1e5      	bne.n	8005294 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	2220      	movs	r2, #32
 80052cc:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	2220      	movs	r2, #32
 80052d2:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	2220      	movs	r2, #32
 80052d8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	2200      	movs	r2, #0
 80052e0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80052e4:	2303      	movs	r3, #3
 80052e6:	e010      	b.n	800530a <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	69da      	ldr	r2, [r3, #28]
 80052ee:	68bb      	ldr	r3, [r7, #8]
 80052f0:	4013      	ands	r3, r2
 80052f2:	68ba      	ldr	r2, [r7, #8]
 80052f4:	429a      	cmp	r2, r3
 80052f6:	bf0c      	ite	eq
 80052f8:	2301      	moveq	r3, #1
 80052fa:	2300      	movne	r3, #0
 80052fc:	b2db      	uxtb	r3, r3
 80052fe:	461a      	mov	r2, r3
 8005300:	79fb      	ldrb	r3, [r7, #7]
 8005302:	429a      	cmp	r2, r3
 8005304:	f43f af4a 	beq.w	800519c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005308:	2300      	movs	r3, #0
}
 800530a:	4618      	mov	r0, r3
 800530c:	3770      	adds	r7, #112	; 0x70
 800530e:	46bd      	mov	sp, r7
 8005310:	bd80      	pop	{r7, pc}
	...

08005314 <__NVIC_SetPriority>:
{
 8005314:	b480      	push	{r7}
 8005316:	b083      	sub	sp, #12
 8005318:	af00      	add	r7, sp, #0
 800531a:	4603      	mov	r3, r0
 800531c:	6039      	str	r1, [r7, #0]
 800531e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005320:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005324:	2b00      	cmp	r3, #0
 8005326:	db0a      	blt.n	800533e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005328:	683b      	ldr	r3, [r7, #0]
 800532a:	b2da      	uxtb	r2, r3
 800532c:	490c      	ldr	r1, [pc, #48]	; (8005360 <__NVIC_SetPriority+0x4c>)
 800532e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005332:	0112      	lsls	r2, r2, #4
 8005334:	b2d2      	uxtb	r2, r2
 8005336:	440b      	add	r3, r1
 8005338:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800533c:	e00a      	b.n	8005354 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800533e:	683b      	ldr	r3, [r7, #0]
 8005340:	b2da      	uxtb	r2, r3
 8005342:	4908      	ldr	r1, [pc, #32]	; (8005364 <__NVIC_SetPriority+0x50>)
 8005344:	79fb      	ldrb	r3, [r7, #7]
 8005346:	f003 030f 	and.w	r3, r3, #15
 800534a:	3b04      	subs	r3, #4
 800534c:	0112      	lsls	r2, r2, #4
 800534e:	b2d2      	uxtb	r2, r2
 8005350:	440b      	add	r3, r1
 8005352:	761a      	strb	r2, [r3, #24]
}
 8005354:	bf00      	nop
 8005356:	370c      	adds	r7, #12
 8005358:	46bd      	mov	sp, r7
 800535a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800535e:	4770      	bx	lr
 8005360:	e000e100 	.word	0xe000e100
 8005364:	e000ed00 	.word	0xe000ed00

08005368 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8005368:	b580      	push	{r7, lr}
 800536a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800536c:	4b05      	ldr	r3, [pc, #20]	; (8005384 <SysTick_Handler+0x1c>)
 800536e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8005370:	f001 ff34 	bl	80071dc <xTaskGetSchedulerState>
 8005374:	4603      	mov	r3, r0
 8005376:	2b01      	cmp	r3, #1
 8005378:	d001      	beq.n	800537e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800537a:	f002 fd1d 	bl	8007db8 <xPortSysTickHandler>
  }
}
 800537e:	bf00      	nop
 8005380:	bd80      	pop	{r7, pc}
 8005382:	bf00      	nop
 8005384:	e000e010 	.word	0xe000e010

08005388 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8005388:	b580      	push	{r7, lr}
 800538a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800538c:	2100      	movs	r1, #0
 800538e:	f06f 0004 	mvn.w	r0, #4
 8005392:	f7ff ffbf 	bl	8005314 <__NVIC_SetPriority>
#endif
}
 8005396:	bf00      	nop
 8005398:	bd80      	pop	{r7, pc}
	...

0800539c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800539c:	b480      	push	{r7}
 800539e:	b083      	sub	sp, #12
 80053a0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80053a2:	f3ef 8305 	mrs	r3, IPSR
 80053a6:	603b      	str	r3, [r7, #0]
  return(result);
 80053a8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d003      	beq.n	80053b6 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80053ae:	f06f 0305 	mvn.w	r3, #5
 80053b2:	607b      	str	r3, [r7, #4]
 80053b4:	e00c      	b.n	80053d0 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80053b6:	4b0a      	ldr	r3, [pc, #40]	; (80053e0 <osKernelInitialize+0x44>)
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d105      	bne.n	80053ca <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80053be:	4b08      	ldr	r3, [pc, #32]	; (80053e0 <osKernelInitialize+0x44>)
 80053c0:	2201      	movs	r2, #1
 80053c2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80053c4:	2300      	movs	r3, #0
 80053c6:	607b      	str	r3, [r7, #4]
 80053c8:	e002      	b.n	80053d0 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80053ca:	f04f 33ff 	mov.w	r3, #4294967295
 80053ce:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80053d0:	687b      	ldr	r3, [r7, #4]
}
 80053d2:	4618      	mov	r0, r3
 80053d4:	370c      	adds	r7, #12
 80053d6:	46bd      	mov	sp, r7
 80053d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053dc:	4770      	bx	lr
 80053de:	bf00      	nop
 80053e0:	2000027c 	.word	0x2000027c

080053e4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80053e4:	b580      	push	{r7, lr}
 80053e6:	b082      	sub	sp, #8
 80053e8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80053ea:	f3ef 8305 	mrs	r3, IPSR
 80053ee:	603b      	str	r3, [r7, #0]
  return(result);
 80053f0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d003      	beq.n	80053fe <osKernelStart+0x1a>
    stat = osErrorISR;
 80053f6:	f06f 0305 	mvn.w	r3, #5
 80053fa:	607b      	str	r3, [r7, #4]
 80053fc:	e010      	b.n	8005420 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80053fe:	4b0b      	ldr	r3, [pc, #44]	; (800542c <osKernelStart+0x48>)
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	2b01      	cmp	r3, #1
 8005404:	d109      	bne.n	800541a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8005406:	f7ff ffbf 	bl	8005388 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800540a:	4b08      	ldr	r3, [pc, #32]	; (800542c <osKernelStart+0x48>)
 800540c:	2202      	movs	r2, #2
 800540e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8005410:	f001 fa88 	bl	8006924 <vTaskStartScheduler>
      stat = osOK;
 8005414:	2300      	movs	r3, #0
 8005416:	607b      	str	r3, [r7, #4]
 8005418:	e002      	b.n	8005420 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800541a:	f04f 33ff 	mov.w	r3, #4294967295
 800541e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005420:	687b      	ldr	r3, [r7, #4]
}
 8005422:	4618      	mov	r0, r3
 8005424:	3708      	adds	r7, #8
 8005426:	46bd      	mov	sp, r7
 8005428:	bd80      	pop	{r7, pc}
 800542a:	bf00      	nop
 800542c:	2000027c 	.word	0x2000027c

08005430 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8005430:	b580      	push	{r7, lr}
 8005432:	b08e      	sub	sp, #56	; 0x38
 8005434:	af04      	add	r7, sp, #16
 8005436:	60f8      	str	r0, [r7, #12]
 8005438:	60b9      	str	r1, [r7, #8]
 800543a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800543c:	2300      	movs	r3, #0
 800543e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005440:	f3ef 8305 	mrs	r3, IPSR
 8005444:	617b      	str	r3, [r7, #20]
  return(result);
 8005446:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8005448:	2b00      	cmp	r3, #0
 800544a:	d17f      	bne.n	800554c <osThreadNew+0x11c>
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	2b00      	cmp	r3, #0
 8005450:	d07c      	beq.n	800554c <osThreadNew+0x11c>
    stack = configMINIMAL_STACK_SIZE;
 8005452:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005456:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8005458:	2318      	movs	r3, #24
 800545a:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800545c:	2300      	movs	r3, #0
 800545e:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8005460:	f04f 33ff 	mov.w	r3, #4294967295
 8005464:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	2b00      	cmp	r3, #0
 800546a:	d045      	beq.n	80054f8 <osThreadNew+0xc8>
      if (attr->name != NULL) {
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	2b00      	cmp	r3, #0
 8005472:	d002      	beq.n	800547a <osThreadNew+0x4a>
        name = attr->name;
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	699b      	ldr	r3, [r3, #24]
 800547e:	2b00      	cmp	r3, #0
 8005480:	d002      	beq.n	8005488 <osThreadNew+0x58>
        prio = (UBaseType_t)attr->priority;
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	699b      	ldr	r3, [r3, #24]
 8005486:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8005488:	69fb      	ldr	r3, [r7, #28]
 800548a:	2b00      	cmp	r3, #0
 800548c:	d008      	beq.n	80054a0 <osThreadNew+0x70>
 800548e:	69fb      	ldr	r3, [r7, #28]
 8005490:	2b38      	cmp	r3, #56	; 0x38
 8005492:	d805      	bhi.n	80054a0 <osThreadNew+0x70>
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	685b      	ldr	r3, [r3, #4]
 8005498:	f003 0301 	and.w	r3, r3, #1
 800549c:	2b00      	cmp	r3, #0
 800549e:	d001      	beq.n	80054a4 <osThreadNew+0x74>
        return (NULL);
 80054a0:	2300      	movs	r3, #0
 80054a2:	e054      	b.n	800554e <osThreadNew+0x11e>
      }

      if (attr->stack_size > 0U) {
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	695b      	ldr	r3, [r3, #20]
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d003      	beq.n	80054b4 <osThreadNew+0x84>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	695b      	ldr	r3, [r3, #20]
 80054b0:	089b      	lsrs	r3, r3, #2
 80054b2:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	689b      	ldr	r3, [r3, #8]
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d00e      	beq.n	80054da <osThreadNew+0xaa>
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	68db      	ldr	r3, [r3, #12]
 80054c0:	2bbb      	cmp	r3, #187	; 0xbb
 80054c2:	d90a      	bls.n	80054da <osThreadNew+0xaa>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d006      	beq.n	80054da <osThreadNew+0xaa>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	695b      	ldr	r3, [r3, #20]
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d002      	beq.n	80054da <osThreadNew+0xaa>
        mem = 1;
 80054d4:	2301      	movs	r3, #1
 80054d6:	61bb      	str	r3, [r7, #24]
 80054d8:	e010      	b.n	80054fc <osThreadNew+0xcc>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	689b      	ldr	r3, [r3, #8]
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d10c      	bne.n	80054fc <osThreadNew+0xcc>
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	68db      	ldr	r3, [r3, #12]
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d108      	bne.n	80054fc <osThreadNew+0xcc>
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	691b      	ldr	r3, [r3, #16]
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d104      	bne.n	80054fc <osThreadNew+0xcc>
          mem = 0;
 80054f2:	2300      	movs	r3, #0
 80054f4:	61bb      	str	r3, [r7, #24]
 80054f6:	e001      	b.n	80054fc <osThreadNew+0xcc>
        }
      }
    }
    else {
      mem = 0;
 80054f8:	2300      	movs	r3, #0
 80054fa:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80054fc:	69bb      	ldr	r3, [r7, #24]
 80054fe:	2b01      	cmp	r3, #1
 8005500:	d110      	bne.n	8005524 <osThreadNew+0xf4>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8005506:	687a      	ldr	r2, [r7, #4]
 8005508:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800550a:	9202      	str	r2, [sp, #8]
 800550c:	9301      	str	r3, [sp, #4]
 800550e:	69fb      	ldr	r3, [r7, #28]
 8005510:	9300      	str	r3, [sp, #0]
 8005512:	68bb      	ldr	r3, [r7, #8]
 8005514:	6a3a      	ldr	r2, [r7, #32]
 8005516:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005518:	68f8      	ldr	r0, [r7, #12]
 800551a:	f001 f817 	bl	800654c <xTaskCreateStatic>
 800551e:	4603      	mov	r3, r0
 8005520:	613b      	str	r3, [r7, #16]
 8005522:	e013      	b.n	800554c <osThreadNew+0x11c>
      #endif
    }
    else {
      if (mem == 0) {
 8005524:	69bb      	ldr	r3, [r7, #24]
 8005526:	2b00      	cmp	r3, #0
 8005528:	d110      	bne.n	800554c <osThreadNew+0x11c>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800552a:	6a3b      	ldr	r3, [r7, #32]
 800552c:	b29a      	uxth	r2, r3
 800552e:	f107 0310 	add.w	r3, r7, #16
 8005532:	9301      	str	r3, [sp, #4]
 8005534:	69fb      	ldr	r3, [r7, #28]
 8005536:	9300      	str	r3, [sp, #0]
 8005538:	68bb      	ldr	r3, [r7, #8]
 800553a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800553c:	68f8      	ldr	r0, [r7, #12]
 800553e:	f001 f862 	bl	8006606 <xTaskCreate>
 8005542:	4603      	mov	r3, r0
 8005544:	2b01      	cmp	r3, #1
 8005546:	d001      	beq.n	800554c <osThreadNew+0x11c>
            hTask = NULL;
 8005548:	2300      	movs	r3, #0
 800554a:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800554c:	693b      	ldr	r3, [r7, #16]
}
 800554e:	4618      	mov	r0, r3
 8005550:	3728      	adds	r7, #40	; 0x28
 8005552:	46bd      	mov	sp, r7
 8005554:	bd80      	pop	{r7, pc}
	...

08005558 <osThreadYield>:
  }

  return (prio);
}

osStatus_t osThreadYield (void) {
 8005558:	b480      	push	{r7}
 800555a:	b083      	sub	sp, #12
 800555c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800555e:	f3ef 8305 	mrs	r3, IPSR
 8005562:	603b      	str	r3, [r7, #0]
  return(result);
 8005564:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005566:	2b00      	cmp	r3, #0
 8005568:	d003      	beq.n	8005572 <osThreadYield+0x1a>
    stat = osErrorISR;
 800556a:	f06f 0305 	mvn.w	r3, #5
 800556e:	607b      	str	r3, [r7, #4]
 8005570:	e009      	b.n	8005586 <osThreadYield+0x2e>
  } else {
    stat = osOK;
 8005572:	2300      	movs	r3, #0
 8005574:	607b      	str	r3, [r7, #4]
    taskYIELD();
 8005576:	4b07      	ldr	r3, [pc, #28]	; (8005594 <osThreadYield+0x3c>)
 8005578:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800557c:	601a      	str	r2, [r3, #0]
 800557e:	f3bf 8f4f 	dsb	sy
 8005582:	f3bf 8f6f 	isb	sy
  }

  return (stat);
 8005586:	687b      	ldr	r3, [r7, #4]
}
 8005588:	4618      	mov	r0, r3
 800558a:	370c      	adds	r7, #12
 800558c:	46bd      	mov	sp, r7
 800558e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005592:	4770      	bx	lr
 8005594:	e000ed04 	.word	0xe000ed04

08005598 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8005598:	b580      	push	{r7, lr}
 800559a:	b084      	sub	sp, #16
 800559c:	af00      	add	r7, sp, #0
 800559e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80055a0:	f3ef 8305 	mrs	r3, IPSR
 80055a4:	60bb      	str	r3, [r7, #8]
  return(result);
 80055a6:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d003      	beq.n	80055b4 <osDelay+0x1c>
    stat = osErrorISR;
 80055ac:	f06f 0305 	mvn.w	r3, #5
 80055b0:	60fb      	str	r3, [r7, #12]
 80055b2:	e007      	b.n	80055c4 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80055b4:	2300      	movs	r3, #0
 80055b6:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d002      	beq.n	80055c4 <osDelay+0x2c>
      vTaskDelay(ticks);
 80055be:	6878      	ldr	r0, [r7, #4]
 80055c0:	f001 f97c 	bl	80068bc <vTaskDelay>
    }
  }

  return (stat);
 80055c4:	68fb      	ldr	r3, [r7, #12]
}
 80055c6:	4618      	mov	r0, r3
 80055c8:	3710      	adds	r7, #16
 80055ca:	46bd      	mov	sp, r7
 80055cc:	bd80      	pop	{r7, pc}

080055ce <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 80055ce:	b580      	push	{r7, lr}
 80055d0:	b08a      	sub	sp, #40	; 0x28
 80055d2:	af02      	add	r7, sp, #8
 80055d4:	60f8      	str	r0, [r7, #12]
 80055d6:	60b9      	str	r1, [r7, #8]
 80055d8:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 80055da:	2300      	movs	r3, #0
 80055dc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80055de:	f3ef 8305 	mrs	r3, IPSR
 80055e2:	613b      	str	r3, [r7, #16]
  return(result);
 80055e4:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d15f      	bne.n	80056aa <osMessageQueueNew+0xdc>
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d05c      	beq.n	80056aa <osMessageQueueNew+0xdc>
 80055f0:	68bb      	ldr	r3, [r7, #8]
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d059      	beq.n	80056aa <osMessageQueueNew+0xdc>
    mem = -1;
 80055f6:	f04f 33ff 	mov.w	r3, #4294967295
 80055fa:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d029      	beq.n	8005656 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	689b      	ldr	r3, [r3, #8]
 8005606:	2b00      	cmp	r3, #0
 8005608:	d012      	beq.n	8005630 <osMessageQueueNew+0x62>
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	68db      	ldr	r3, [r3, #12]
 800560e:	2b4f      	cmp	r3, #79	; 0x4f
 8005610:	d90e      	bls.n	8005630 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8005616:	2b00      	cmp	r3, #0
 8005618:	d00a      	beq.n	8005630 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	695a      	ldr	r2, [r3, #20]
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	68b9      	ldr	r1, [r7, #8]
 8005622:	fb01 f303 	mul.w	r3, r1, r3
 8005626:	429a      	cmp	r2, r3
 8005628:	d302      	bcc.n	8005630 <osMessageQueueNew+0x62>
        mem = 1;
 800562a:	2301      	movs	r3, #1
 800562c:	61bb      	str	r3, [r7, #24]
 800562e:	e014      	b.n	800565a <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	689b      	ldr	r3, [r3, #8]
 8005634:	2b00      	cmp	r3, #0
 8005636:	d110      	bne.n	800565a <osMessageQueueNew+0x8c>
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	68db      	ldr	r3, [r3, #12]
 800563c:	2b00      	cmp	r3, #0
 800563e:	d10c      	bne.n	800565a <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8005644:	2b00      	cmp	r3, #0
 8005646:	d108      	bne.n	800565a <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	695b      	ldr	r3, [r3, #20]
 800564c:	2b00      	cmp	r3, #0
 800564e:	d104      	bne.n	800565a <osMessageQueueNew+0x8c>
          mem = 0;
 8005650:	2300      	movs	r3, #0
 8005652:	61bb      	str	r3, [r7, #24]
 8005654:	e001      	b.n	800565a <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8005656:	2300      	movs	r3, #0
 8005658:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800565a:	69bb      	ldr	r3, [r7, #24]
 800565c:	2b01      	cmp	r3, #1
 800565e:	d10b      	bne.n	8005678 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	691a      	ldr	r2, [r3, #16]
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	689b      	ldr	r3, [r3, #8]
 8005668:	2100      	movs	r1, #0
 800566a:	9100      	str	r1, [sp, #0]
 800566c:	68b9      	ldr	r1, [r7, #8]
 800566e:	68f8      	ldr	r0, [r7, #12]
 8005670:	f000 fa2e 	bl	8005ad0 <xQueueGenericCreateStatic>
 8005674:	61f8      	str	r0, [r7, #28]
 8005676:	e008      	b.n	800568a <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8005678:	69bb      	ldr	r3, [r7, #24]
 800567a:	2b00      	cmp	r3, #0
 800567c:	d105      	bne.n	800568a <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800567e:	2200      	movs	r2, #0
 8005680:	68b9      	ldr	r1, [r7, #8]
 8005682:	68f8      	ldr	r0, [r7, #12]
 8005684:	f000 fa9c 	bl	8005bc0 <xQueueGenericCreate>
 8005688:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800568a:	69fb      	ldr	r3, [r7, #28]
 800568c:	2b00      	cmp	r3, #0
 800568e:	d00c      	beq.n	80056aa <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	2b00      	cmp	r3, #0
 8005694:	d003      	beq.n	800569e <osMessageQueueNew+0xd0>
        name = attr->name;
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	617b      	str	r3, [r7, #20]
 800569c:	e001      	b.n	80056a2 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 800569e:	2300      	movs	r3, #0
 80056a0:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 80056a2:	6979      	ldr	r1, [r7, #20]
 80056a4:	69f8      	ldr	r0, [r7, #28]
 80056a6:	f000 fef3 	bl	8006490 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 80056aa:	69fb      	ldr	r3, [r7, #28]
}
 80056ac:	4618      	mov	r0, r3
 80056ae:	3720      	adds	r7, #32
 80056b0:	46bd      	mov	sp, r7
 80056b2:	bd80      	pop	{r7, pc}

080056b4 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 80056b4:	b580      	push	{r7, lr}
 80056b6:	b088      	sub	sp, #32
 80056b8:	af00      	add	r7, sp, #0
 80056ba:	60f8      	str	r0, [r7, #12]
 80056bc:	60b9      	str	r1, [r7, #8]
 80056be:	603b      	str	r3, [r7, #0]
 80056c0:	4613      	mov	r3, r2
 80056c2:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80056c8:	2300      	movs	r3, #0
 80056ca:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80056cc:	f3ef 8305 	mrs	r3, IPSR
 80056d0:	617b      	str	r3, [r7, #20]
  return(result);
 80056d2:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d028      	beq.n	800572a <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80056d8:	69bb      	ldr	r3, [r7, #24]
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d005      	beq.n	80056ea <osMessageQueuePut+0x36>
 80056de:	68bb      	ldr	r3, [r7, #8]
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d002      	beq.n	80056ea <osMessageQueuePut+0x36>
 80056e4:	683b      	ldr	r3, [r7, #0]
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d003      	beq.n	80056f2 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 80056ea:	f06f 0303 	mvn.w	r3, #3
 80056ee:	61fb      	str	r3, [r7, #28]
 80056f0:	e038      	b.n	8005764 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 80056f2:	2300      	movs	r3, #0
 80056f4:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 80056f6:	f107 0210 	add.w	r2, r7, #16
 80056fa:	2300      	movs	r3, #0
 80056fc:	68b9      	ldr	r1, [r7, #8]
 80056fe:	69b8      	ldr	r0, [r7, #24]
 8005700:	f000 fbba 	bl	8005e78 <xQueueGenericSendFromISR>
 8005704:	4603      	mov	r3, r0
 8005706:	2b01      	cmp	r3, #1
 8005708:	d003      	beq.n	8005712 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 800570a:	f06f 0302 	mvn.w	r3, #2
 800570e:	61fb      	str	r3, [r7, #28]
 8005710:	e028      	b.n	8005764 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 8005712:	693b      	ldr	r3, [r7, #16]
 8005714:	2b00      	cmp	r3, #0
 8005716:	d025      	beq.n	8005764 <osMessageQueuePut+0xb0>
 8005718:	4b15      	ldr	r3, [pc, #84]	; (8005770 <osMessageQueuePut+0xbc>)
 800571a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800571e:	601a      	str	r2, [r3, #0]
 8005720:	f3bf 8f4f 	dsb	sy
 8005724:	f3bf 8f6f 	isb	sy
 8005728:	e01c      	b.n	8005764 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800572a:	69bb      	ldr	r3, [r7, #24]
 800572c:	2b00      	cmp	r3, #0
 800572e:	d002      	beq.n	8005736 <osMessageQueuePut+0x82>
 8005730:	68bb      	ldr	r3, [r7, #8]
 8005732:	2b00      	cmp	r3, #0
 8005734:	d103      	bne.n	800573e <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 8005736:	f06f 0303 	mvn.w	r3, #3
 800573a:	61fb      	str	r3, [r7, #28]
 800573c:	e012      	b.n	8005764 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800573e:	2300      	movs	r3, #0
 8005740:	683a      	ldr	r2, [r7, #0]
 8005742:	68b9      	ldr	r1, [r7, #8]
 8005744:	69b8      	ldr	r0, [r7, #24]
 8005746:	f000 fa99 	bl	8005c7c <xQueueGenericSend>
 800574a:	4603      	mov	r3, r0
 800574c:	2b01      	cmp	r3, #1
 800574e:	d009      	beq.n	8005764 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8005750:	683b      	ldr	r3, [r7, #0]
 8005752:	2b00      	cmp	r3, #0
 8005754:	d003      	beq.n	800575e <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 8005756:	f06f 0301 	mvn.w	r3, #1
 800575a:	61fb      	str	r3, [r7, #28]
 800575c:	e002      	b.n	8005764 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 800575e:	f06f 0302 	mvn.w	r3, #2
 8005762:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8005764:	69fb      	ldr	r3, [r7, #28]
}
 8005766:	4618      	mov	r0, r3
 8005768:	3720      	adds	r7, #32
 800576a:	46bd      	mov	sp, r7
 800576c:	bd80      	pop	{r7, pc}
 800576e:	bf00      	nop
 8005770:	e000ed04 	.word	0xe000ed04

08005774 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8005774:	b580      	push	{r7, lr}
 8005776:	b088      	sub	sp, #32
 8005778:	af00      	add	r7, sp, #0
 800577a:	60f8      	str	r0, [r7, #12]
 800577c:	60b9      	str	r1, [r7, #8]
 800577e:	607a      	str	r2, [r7, #4]
 8005780:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8005786:	2300      	movs	r3, #0
 8005788:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800578a:	f3ef 8305 	mrs	r3, IPSR
 800578e:	617b      	str	r3, [r7, #20]
  return(result);
 8005790:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8005792:	2b00      	cmp	r3, #0
 8005794:	d028      	beq.n	80057e8 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8005796:	69bb      	ldr	r3, [r7, #24]
 8005798:	2b00      	cmp	r3, #0
 800579a:	d005      	beq.n	80057a8 <osMessageQueueGet+0x34>
 800579c:	68bb      	ldr	r3, [r7, #8]
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d002      	beq.n	80057a8 <osMessageQueueGet+0x34>
 80057a2:	683b      	ldr	r3, [r7, #0]
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d003      	beq.n	80057b0 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 80057a8:	f06f 0303 	mvn.w	r3, #3
 80057ac:	61fb      	str	r3, [r7, #28]
 80057ae:	e037      	b.n	8005820 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 80057b0:	2300      	movs	r3, #0
 80057b2:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 80057b4:	f107 0310 	add.w	r3, r7, #16
 80057b8:	461a      	mov	r2, r3
 80057ba:	68b9      	ldr	r1, [r7, #8]
 80057bc:	69b8      	ldr	r0, [r7, #24]
 80057be:	f000 fcd7 	bl	8006170 <xQueueReceiveFromISR>
 80057c2:	4603      	mov	r3, r0
 80057c4:	2b01      	cmp	r3, #1
 80057c6:	d003      	beq.n	80057d0 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 80057c8:	f06f 0302 	mvn.w	r3, #2
 80057cc:	61fb      	str	r3, [r7, #28]
 80057ce:	e027      	b.n	8005820 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 80057d0:	693b      	ldr	r3, [r7, #16]
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d024      	beq.n	8005820 <osMessageQueueGet+0xac>
 80057d6:	4b15      	ldr	r3, [pc, #84]	; (800582c <osMessageQueueGet+0xb8>)
 80057d8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80057dc:	601a      	str	r2, [r3, #0]
 80057de:	f3bf 8f4f 	dsb	sy
 80057e2:	f3bf 8f6f 	isb	sy
 80057e6:	e01b      	b.n	8005820 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80057e8:	69bb      	ldr	r3, [r7, #24]
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d002      	beq.n	80057f4 <osMessageQueueGet+0x80>
 80057ee:	68bb      	ldr	r3, [r7, #8]
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d103      	bne.n	80057fc <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 80057f4:	f06f 0303 	mvn.w	r3, #3
 80057f8:	61fb      	str	r3, [r7, #28]
 80057fa:	e011      	b.n	8005820 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80057fc:	683a      	ldr	r2, [r7, #0]
 80057fe:	68b9      	ldr	r1, [r7, #8]
 8005800:	69b8      	ldr	r0, [r7, #24]
 8005802:	f000 fbd5 	bl	8005fb0 <xQueueReceive>
 8005806:	4603      	mov	r3, r0
 8005808:	2b01      	cmp	r3, #1
 800580a:	d009      	beq.n	8005820 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 800580c:	683b      	ldr	r3, [r7, #0]
 800580e:	2b00      	cmp	r3, #0
 8005810:	d003      	beq.n	800581a <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 8005812:	f06f 0301 	mvn.w	r3, #1
 8005816:	61fb      	str	r3, [r7, #28]
 8005818:	e002      	b.n	8005820 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 800581a:	f06f 0302 	mvn.w	r3, #2
 800581e:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8005820:	69fb      	ldr	r3, [r7, #28]
}
 8005822:	4618      	mov	r0, r3
 8005824:	3720      	adds	r7, #32
 8005826:	46bd      	mov	sp, r7
 8005828:	bd80      	pop	{r7, pc}
 800582a:	bf00      	nop
 800582c:	e000ed04 	.word	0xe000ed04

08005830 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8005830:	b480      	push	{r7}
 8005832:	b085      	sub	sp, #20
 8005834:	af00      	add	r7, sp, #0
 8005836:	60f8      	str	r0, [r7, #12]
 8005838:	60b9      	str	r1, [r7, #8]
 800583a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	4a07      	ldr	r2, [pc, #28]	; (800585c <vApplicationGetIdleTaskMemory+0x2c>)
 8005840:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8005842:	68bb      	ldr	r3, [r7, #8]
 8005844:	4a06      	ldr	r2, [pc, #24]	; (8005860 <vApplicationGetIdleTaskMemory+0x30>)
 8005846:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800584e:	601a      	str	r2, [r3, #0]
}
 8005850:	bf00      	nop
 8005852:	3714      	adds	r7, #20
 8005854:	46bd      	mov	sp, r7
 8005856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800585a:	4770      	bx	lr
 800585c:	20000280 	.word	0x20000280
 8005860:	2000033c 	.word	0x2000033c

08005864 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8005864:	b480      	push	{r7}
 8005866:	b085      	sub	sp, #20
 8005868:	af00      	add	r7, sp, #0
 800586a:	60f8      	str	r0, [r7, #12]
 800586c:	60b9      	str	r1, [r7, #8]
 800586e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	4a07      	ldr	r2, [pc, #28]	; (8005890 <vApplicationGetTimerTaskMemory+0x2c>)
 8005874:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8005876:	68bb      	ldr	r3, [r7, #8]
 8005878:	4a06      	ldr	r2, [pc, #24]	; (8005894 <vApplicationGetTimerTaskMemory+0x30>)
 800587a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005882:	601a      	str	r2, [r3, #0]
}
 8005884:	bf00      	nop
 8005886:	3714      	adds	r7, #20
 8005888:	46bd      	mov	sp, r7
 800588a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800588e:	4770      	bx	lr
 8005890:	2000073c 	.word	0x2000073c
 8005894:	200007f8 	.word	0x200007f8

08005898 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005898:	b480      	push	{r7}
 800589a:	b083      	sub	sp, #12
 800589c:	af00      	add	r7, sp, #0
 800589e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	f103 0208 	add.w	r2, r3, #8
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	f04f 32ff 	mov.w	r2, #4294967295
 80058b0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	f103 0208 	add.w	r2, r3, #8
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	f103 0208 	add.w	r2, r3, #8
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	2200      	movs	r2, #0
 80058ca:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80058cc:	bf00      	nop
 80058ce:	370c      	adds	r7, #12
 80058d0:	46bd      	mov	sp, r7
 80058d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d6:	4770      	bx	lr

080058d8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80058d8:	b480      	push	{r7}
 80058da:	b083      	sub	sp, #12
 80058dc:	af00      	add	r7, sp, #0
 80058de:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	2200      	movs	r2, #0
 80058e4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80058e6:	bf00      	nop
 80058e8:	370c      	adds	r7, #12
 80058ea:	46bd      	mov	sp, r7
 80058ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f0:	4770      	bx	lr

080058f2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80058f2:	b480      	push	{r7}
 80058f4:	b085      	sub	sp, #20
 80058f6:	af00      	add	r7, sp, #0
 80058f8:	6078      	str	r0, [r7, #4]
 80058fa:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	685b      	ldr	r3, [r3, #4]
 8005900:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005902:	683b      	ldr	r3, [r7, #0]
 8005904:	68fa      	ldr	r2, [r7, #12]
 8005906:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	689a      	ldr	r2, [r3, #8]
 800590c:	683b      	ldr	r3, [r7, #0]
 800590e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	689b      	ldr	r3, [r3, #8]
 8005914:	683a      	ldr	r2, [r7, #0]
 8005916:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	683a      	ldr	r2, [r7, #0]
 800591c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800591e:	683b      	ldr	r3, [r7, #0]
 8005920:	687a      	ldr	r2, [r7, #4]
 8005922:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	1c5a      	adds	r2, r3, #1
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	601a      	str	r2, [r3, #0]
}
 800592e:	bf00      	nop
 8005930:	3714      	adds	r7, #20
 8005932:	46bd      	mov	sp, r7
 8005934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005938:	4770      	bx	lr

0800593a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800593a:	b480      	push	{r7}
 800593c:	b085      	sub	sp, #20
 800593e:	af00      	add	r7, sp, #0
 8005940:	6078      	str	r0, [r7, #4]
 8005942:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005944:	683b      	ldr	r3, [r7, #0]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800594a:	68bb      	ldr	r3, [r7, #8]
 800594c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005950:	d103      	bne.n	800595a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	691b      	ldr	r3, [r3, #16]
 8005956:	60fb      	str	r3, [r7, #12]
 8005958:	e00c      	b.n	8005974 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	3308      	adds	r3, #8
 800595e:	60fb      	str	r3, [r7, #12]
 8005960:	e002      	b.n	8005968 <vListInsert+0x2e>
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	685b      	ldr	r3, [r3, #4]
 8005966:	60fb      	str	r3, [r7, #12]
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	685b      	ldr	r3, [r3, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	68ba      	ldr	r2, [r7, #8]
 8005970:	429a      	cmp	r2, r3
 8005972:	d2f6      	bcs.n	8005962 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	685a      	ldr	r2, [r3, #4]
 8005978:	683b      	ldr	r3, [r7, #0]
 800597a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800597c:	683b      	ldr	r3, [r7, #0]
 800597e:	685b      	ldr	r3, [r3, #4]
 8005980:	683a      	ldr	r2, [r7, #0]
 8005982:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005984:	683b      	ldr	r3, [r7, #0]
 8005986:	68fa      	ldr	r2, [r7, #12]
 8005988:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	683a      	ldr	r2, [r7, #0]
 800598e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005990:	683b      	ldr	r3, [r7, #0]
 8005992:	687a      	ldr	r2, [r7, #4]
 8005994:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	1c5a      	adds	r2, r3, #1
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	601a      	str	r2, [r3, #0]
}
 80059a0:	bf00      	nop
 80059a2:	3714      	adds	r7, #20
 80059a4:	46bd      	mov	sp, r7
 80059a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059aa:	4770      	bx	lr

080059ac <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80059ac:	b480      	push	{r7}
 80059ae:	b085      	sub	sp, #20
 80059b0:	af00      	add	r7, sp, #0
 80059b2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	691b      	ldr	r3, [r3, #16]
 80059b8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	685b      	ldr	r3, [r3, #4]
 80059be:	687a      	ldr	r2, [r7, #4]
 80059c0:	6892      	ldr	r2, [r2, #8]
 80059c2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	689b      	ldr	r3, [r3, #8]
 80059c8:	687a      	ldr	r2, [r7, #4]
 80059ca:	6852      	ldr	r2, [r2, #4]
 80059cc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	685b      	ldr	r3, [r3, #4]
 80059d2:	687a      	ldr	r2, [r7, #4]
 80059d4:	429a      	cmp	r2, r3
 80059d6:	d103      	bne.n	80059e0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	689a      	ldr	r2, [r3, #8]
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	2200      	movs	r2, #0
 80059e4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	1e5a      	subs	r2, r3, #1
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	681b      	ldr	r3, [r3, #0]
}
 80059f4:	4618      	mov	r0, r3
 80059f6:	3714      	adds	r7, #20
 80059f8:	46bd      	mov	sp, r7
 80059fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059fe:	4770      	bx	lr

08005a00 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005a00:	b580      	push	{r7, lr}
 8005a02:	b084      	sub	sp, #16
 8005a04:	af00      	add	r7, sp, #0
 8005a06:	6078      	str	r0, [r7, #4]
 8005a08:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d10a      	bne.n	8005a2a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005a14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a18:	f383 8811 	msr	BASEPRI, r3
 8005a1c:	f3bf 8f6f 	isb	sy
 8005a20:	f3bf 8f4f 	dsb	sy
 8005a24:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005a26:	bf00      	nop
 8005a28:	e7fe      	b.n	8005a28 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8005a2a:	f002 f933 	bl	8007c94 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	681a      	ldr	r2, [r3, #0]
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a36:	68f9      	ldr	r1, [r7, #12]
 8005a38:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005a3a:	fb01 f303 	mul.w	r3, r1, r3
 8005a3e:	441a      	add	r2, r3
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	2200      	movs	r2, #0
 8005a48:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	681a      	ldr	r2, [r3, #0]
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	681a      	ldr	r2, [r3, #0]
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a5a:	3b01      	subs	r3, #1
 8005a5c:	68f9      	ldr	r1, [r7, #12]
 8005a5e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005a60:	fb01 f303 	mul.w	r3, r1, r3
 8005a64:	441a      	add	r2, r3
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	22ff      	movs	r2, #255	; 0xff
 8005a6e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	22ff      	movs	r2, #255	; 0xff
 8005a76:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8005a7a:	683b      	ldr	r3, [r7, #0]
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d114      	bne.n	8005aaa <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	691b      	ldr	r3, [r3, #16]
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d01a      	beq.n	8005abe <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	3310      	adds	r3, #16
 8005a8c:	4618      	mov	r0, r3
 8005a8e:	f001 f9e3 	bl	8006e58 <xTaskRemoveFromEventList>
 8005a92:	4603      	mov	r3, r0
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d012      	beq.n	8005abe <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005a98:	4b0c      	ldr	r3, [pc, #48]	; (8005acc <xQueueGenericReset+0xcc>)
 8005a9a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005a9e:	601a      	str	r2, [r3, #0]
 8005aa0:	f3bf 8f4f 	dsb	sy
 8005aa4:	f3bf 8f6f 	isb	sy
 8005aa8:	e009      	b.n	8005abe <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	3310      	adds	r3, #16
 8005aae:	4618      	mov	r0, r3
 8005ab0:	f7ff fef2 	bl	8005898 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	3324      	adds	r3, #36	; 0x24
 8005ab8:	4618      	mov	r0, r3
 8005aba:	f7ff feed 	bl	8005898 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005abe:	f002 f919 	bl	8007cf4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005ac2:	2301      	movs	r3, #1
}
 8005ac4:	4618      	mov	r0, r3
 8005ac6:	3710      	adds	r7, #16
 8005ac8:	46bd      	mov	sp, r7
 8005aca:	bd80      	pop	{r7, pc}
 8005acc:	e000ed04 	.word	0xe000ed04

08005ad0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005ad0:	b580      	push	{r7, lr}
 8005ad2:	b08e      	sub	sp, #56	; 0x38
 8005ad4:	af02      	add	r7, sp, #8
 8005ad6:	60f8      	str	r0, [r7, #12]
 8005ad8:	60b9      	str	r1, [r7, #8]
 8005ada:	607a      	str	r2, [r7, #4]
 8005adc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d10a      	bne.n	8005afa <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8005ae4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ae8:	f383 8811 	msr	BASEPRI, r3
 8005aec:	f3bf 8f6f 	isb	sy
 8005af0:	f3bf 8f4f 	dsb	sy
 8005af4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005af6:	bf00      	nop
 8005af8:	e7fe      	b.n	8005af8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005afa:	683b      	ldr	r3, [r7, #0]
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d10a      	bne.n	8005b16 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8005b00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b04:	f383 8811 	msr	BASEPRI, r3
 8005b08:	f3bf 8f6f 	isb	sy
 8005b0c:	f3bf 8f4f 	dsb	sy
 8005b10:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005b12:	bf00      	nop
 8005b14:	e7fe      	b.n	8005b14 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d002      	beq.n	8005b22 <xQueueGenericCreateStatic+0x52>
 8005b1c:	68bb      	ldr	r3, [r7, #8]
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d001      	beq.n	8005b26 <xQueueGenericCreateStatic+0x56>
 8005b22:	2301      	movs	r3, #1
 8005b24:	e000      	b.n	8005b28 <xQueueGenericCreateStatic+0x58>
 8005b26:	2300      	movs	r3, #0
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d10a      	bne.n	8005b42 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8005b2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b30:	f383 8811 	msr	BASEPRI, r3
 8005b34:	f3bf 8f6f 	isb	sy
 8005b38:	f3bf 8f4f 	dsb	sy
 8005b3c:	623b      	str	r3, [r7, #32]
}
 8005b3e:	bf00      	nop
 8005b40:	e7fe      	b.n	8005b40 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d102      	bne.n	8005b4e <xQueueGenericCreateStatic+0x7e>
 8005b48:	68bb      	ldr	r3, [r7, #8]
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d101      	bne.n	8005b52 <xQueueGenericCreateStatic+0x82>
 8005b4e:	2301      	movs	r3, #1
 8005b50:	e000      	b.n	8005b54 <xQueueGenericCreateStatic+0x84>
 8005b52:	2300      	movs	r3, #0
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d10a      	bne.n	8005b6e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8005b58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b5c:	f383 8811 	msr	BASEPRI, r3
 8005b60:	f3bf 8f6f 	isb	sy
 8005b64:	f3bf 8f4f 	dsb	sy
 8005b68:	61fb      	str	r3, [r7, #28]
}
 8005b6a:	bf00      	nop
 8005b6c:	e7fe      	b.n	8005b6c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8005b6e:	2350      	movs	r3, #80	; 0x50
 8005b70:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8005b72:	697b      	ldr	r3, [r7, #20]
 8005b74:	2b50      	cmp	r3, #80	; 0x50
 8005b76:	d00a      	beq.n	8005b8e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8005b78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b7c:	f383 8811 	msr	BASEPRI, r3
 8005b80:	f3bf 8f6f 	isb	sy
 8005b84:	f3bf 8f4f 	dsb	sy
 8005b88:	61bb      	str	r3, [r7, #24]
}
 8005b8a:	bf00      	nop
 8005b8c:	e7fe      	b.n	8005b8c <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8005b8e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005b90:	683b      	ldr	r3, [r7, #0]
 8005b92:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8005b94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d00d      	beq.n	8005bb6 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005b9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b9c:	2201      	movs	r2, #1
 8005b9e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005ba2:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8005ba6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ba8:	9300      	str	r3, [sp, #0]
 8005baa:	4613      	mov	r3, r2
 8005bac:	687a      	ldr	r2, [r7, #4]
 8005bae:	68b9      	ldr	r1, [r7, #8]
 8005bb0:	68f8      	ldr	r0, [r7, #12]
 8005bb2:	f000 f83f 	bl	8005c34 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005bb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8005bb8:	4618      	mov	r0, r3
 8005bba:	3730      	adds	r7, #48	; 0x30
 8005bbc:	46bd      	mov	sp, r7
 8005bbe:	bd80      	pop	{r7, pc}

08005bc0 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8005bc0:	b580      	push	{r7, lr}
 8005bc2:	b08a      	sub	sp, #40	; 0x28
 8005bc4:	af02      	add	r7, sp, #8
 8005bc6:	60f8      	str	r0, [r7, #12]
 8005bc8:	60b9      	str	r1, [r7, #8]
 8005bca:	4613      	mov	r3, r2
 8005bcc:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d10a      	bne.n	8005bea <xQueueGenericCreate+0x2a>
	__asm volatile
 8005bd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bd8:	f383 8811 	msr	BASEPRI, r3
 8005bdc:	f3bf 8f6f 	isb	sy
 8005be0:	f3bf 8f4f 	dsb	sy
 8005be4:	613b      	str	r3, [r7, #16]
}
 8005be6:	bf00      	nop
 8005be8:	e7fe      	b.n	8005be8 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	68ba      	ldr	r2, [r7, #8]
 8005bee:	fb02 f303 	mul.w	r3, r2, r3
 8005bf2:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8005bf4:	69fb      	ldr	r3, [r7, #28]
 8005bf6:	3350      	adds	r3, #80	; 0x50
 8005bf8:	4618      	mov	r0, r3
 8005bfa:	f002 f96d 	bl	8007ed8 <pvPortMalloc>
 8005bfe:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8005c00:	69bb      	ldr	r3, [r7, #24]
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d011      	beq.n	8005c2a <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8005c06:	69bb      	ldr	r3, [r7, #24]
 8005c08:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005c0a:	697b      	ldr	r3, [r7, #20]
 8005c0c:	3350      	adds	r3, #80	; 0x50
 8005c0e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8005c10:	69bb      	ldr	r3, [r7, #24]
 8005c12:	2200      	movs	r2, #0
 8005c14:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005c18:	79fa      	ldrb	r2, [r7, #7]
 8005c1a:	69bb      	ldr	r3, [r7, #24]
 8005c1c:	9300      	str	r3, [sp, #0]
 8005c1e:	4613      	mov	r3, r2
 8005c20:	697a      	ldr	r2, [r7, #20]
 8005c22:	68b9      	ldr	r1, [r7, #8]
 8005c24:	68f8      	ldr	r0, [r7, #12]
 8005c26:	f000 f805 	bl	8005c34 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005c2a:	69bb      	ldr	r3, [r7, #24]
	}
 8005c2c:	4618      	mov	r0, r3
 8005c2e:	3720      	adds	r7, #32
 8005c30:	46bd      	mov	sp, r7
 8005c32:	bd80      	pop	{r7, pc}

08005c34 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005c34:	b580      	push	{r7, lr}
 8005c36:	b084      	sub	sp, #16
 8005c38:	af00      	add	r7, sp, #0
 8005c3a:	60f8      	str	r0, [r7, #12]
 8005c3c:	60b9      	str	r1, [r7, #8]
 8005c3e:	607a      	str	r2, [r7, #4]
 8005c40:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005c42:	68bb      	ldr	r3, [r7, #8]
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d103      	bne.n	8005c50 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005c48:	69bb      	ldr	r3, [r7, #24]
 8005c4a:	69ba      	ldr	r2, [r7, #24]
 8005c4c:	601a      	str	r2, [r3, #0]
 8005c4e:	e002      	b.n	8005c56 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005c50:	69bb      	ldr	r3, [r7, #24]
 8005c52:	687a      	ldr	r2, [r7, #4]
 8005c54:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005c56:	69bb      	ldr	r3, [r7, #24]
 8005c58:	68fa      	ldr	r2, [r7, #12]
 8005c5a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005c5c:	69bb      	ldr	r3, [r7, #24]
 8005c5e:	68ba      	ldr	r2, [r7, #8]
 8005c60:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005c62:	2101      	movs	r1, #1
 8005c64:	69b8      	ldr	r0, [r7, #24]
 8005c66:	f7ff fecb 	bl	8005a00 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8005c6a:	69bb      	ldr	r3, [r7, #24]
 8005c6c:	78fa      	ldrb	r2, [r7, #3]
 8005c6e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005c72:	bf00      	nop
 8005c74:	3710      	adds	r7, #16
 8005c76:	46bd      	mov	sp, r7
 8005c78:	bd80      	pop	{r7, pc}
	...

08005c7c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005c7c:	b580      	push	{r7, lr}
 8005c7e:	b08e      	sub	sp, #56	; 0x38
 8005c80:	af00      	add	r7, sp, #0
 8005c82:	60f8      	str	r0, [r7, #12]
 8005c84:	60b9      	str	r1, [r7, #8]
 8005c86:	607a      	str	r2, [r7, #4]
 8005c88:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005c8a:	2300      	movs	r3, #0
 8005c8c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005c92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d10a      	bne.n	8005cae <xQueueGenericSend+0x32>
	__asm volatile
 8005c98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c9c:	f383 8811 	msr	BASEPRI, r3
 8005ca0:	f3bf 8f6f 	isb	sy
 8005ca4:	f3bf 8f4f 	dsb	sy
 8005ca8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005caa:	bf00      	nop
 8005cac:	e7fe      	b.n	8005cac <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005cae:	68bb      	ldr	r3, [r7, #8]
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d103      	bne.n	8005cbc <xQueueGenericSend+0x40>
 8005cb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d101      	bne.n	8005cc0 <xQueueGenericSend+0x44>
 8005cbc:	2301      	movs	r3, #1
 8005cbe:	e000      	b.n	8005cc2 <xQueueGenericSend+0x46>
 8005cc0:	2300      	movs	r3, #0
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d10a      	bne.n	8005cdc <xQueueGenericSend+0x60>
	__asm volatile
 8005cc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cca:	f383 8811 	msr	BASEPRI, r3
 8005cce:	f3bf 8f6f 	isb	sy
 8005cd2:	f3bf 8f4f 	dsb	sy
 8005cd6:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005cd8:	bf00      	nop
 8005cda:	e7fe      	b.n	8005cda <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005cdc:	683b      	ldr	r3, [r7, #0]
 8005cde:	2b02      	cmp	r3, #2
 8005ce0:	d103      	bne.n	8005cea <xQueueGenericSend+0x6e>
 8005ce2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ce4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ce6:	2b01      	cmp	r3, #1
 8005ce8:	d101      	bne.n	8005cee <xQueueGenericSend+0x72>
 8005cea:	2301      	movs	r3, #1
 8005cec:	e000      	b.n	8005cf0 <xQueueGenericSend+0x74>
 8005cee:	2300      	movs	r3, #0
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d10a      	bne.n	8005d0a <xQueueGenericSend+0x8e>
	__asm volatile
 8005cf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cf8:	f383 8811 	msr	BASEPRI, r3
 8005cfc:	f3bf 8f6f 	isb	sy
 8005d00:	f3bf 8f4f 	dsb	sy
 8005d04:	623b      	str	r3, [r7, #32]
}
 8005d06:	bf00      	nop
 8005d08:	e7fe      	b.n	8005d08 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005d0a:	f001 fa67 	bl	80071dc <xTaskGetSchedulerState>
 8005d0e:	4603      	mov	r3, r0
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d102      	bne.n	8005d1a <xQueueGenericSend+0x9e>
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d101      	bne.n	8005d1e <xQueueGenericSend+0xa2>
 8005d1a:	2301      	movs	r3, #1
 8005d1c:	e000      	b.n	8005d20 <xQueueGenericSend+0xa4>
 8005d1e:	2300      	movs	r3, #0
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d10a      	bne.n	8005d3a <xQueueGenericSend+0xbe>
	__asm volatile
 8005d24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d28:	f383 8811 	msr	BASEPRI, r3
 8005d2c:	f3bf 8f6f 	isb	sy
 8005d30:	f3bf 8f4f 	dsb	sy
 8005d34:	61fb      	str	r3, [r7, #28]
}
 8005d36:	bf00      	nop
 8005d38:	e7fe      	b.n	8005d38 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005d3a:	f001 ffab 	bl	8007c94 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005d3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d40:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005d42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d46:	429a      	cmp	r2, r3
 8005d48:	d302      	bcc.n	8005d50 <xQueueGenericSend+0xd4>
 8005d4a:	683b      	ldr	r3, [r7, #0]
 8005d4c:	2b02      	cmp	r3, #2
 8005d4e:	d129      	bne.n	8005da4 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005d50:	683a      	ldr	r2, [r7, #0]
 8005d52:	68b9      	ldr	r1, [r7, #8]
 8005d54:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005d56:	f000 fa8b 	bl	8006270 <prvCopyDataToQueue>
 8005d5a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005d5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d010      	beq.n	8005d86 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005d64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d66:	3324      	adds	r3, #36	; 0x24
 8005d68:	4618      	mov	r0, r3
 8005d6a:	f001 f875 	bl	8006e58 <xTaskRemoveFromEventList>
 8005d6e:	4603      	mov	r3, r0
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d013      	beq.n	8005d9c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005d74:	4b3f      	ldr	r3, [pc, #252]	; (8005e74 <xQueueGenericSend+0x1f8>)
 8005d76:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005d7a:	601a      	str	r2, [r3, #0]
 8005d7c:	f3bf 8f4f 	dsb	sy
 8005d80:	f3bf 8f6f 	isb	sy
 8005d84:	e00a      	b.n	8005d9c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005d86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d007      	beq.n	8005d9c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005d8c:	4b39      	ldr	r3, [pc, #228]	; (8005e74 <xQueueGenericSend+0x1f8>)
 8005d8e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005d92:	601a      	str	r2, [r3, #0]
 8005d94:	f3bf 8f4f 	dsb	sy
 8005d98:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005d9c:	f001 ffaa 	bl	8007cf4 <vPortExitCritical>
				return pdPASS;
 8005da0:	2301      	movs	r3, #1
 8005da2:	e063      	b.n	8005e6c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d103      	bne.n	8005db2 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005daa:	f001 ffa3 	bl	8007cf4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005dae:	2300      	movs	r3, #0
 8005db0:	e05c      	b.n	8005e6c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005db2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d106      	bne.n	8005dc6 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005db8:	f107 0314 	add.w	r3, r7, #20
 8005dbc:	4618      	mov	r0, r3
 8005dbe:	f001 f8af 	bl	8006f20 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005dc2:	2301      	movs	r3, #1
 8005dc4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005dc6:	f001 ff95 	bl	8007cf4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005dca:	f000 fe1b 	bl	8006a04 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005dce:	f001 ff61 	bl	8007c94 <vPortEnterCritical>
 8005dd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dd4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005dd8:	b25b      	sxtb	r3, r3
 8005dda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005dde:	d103      	bne.n	8005de8 <xQueueGenericSend+0x16c>
 8005de0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005de2:	2200      	movs	r2, #0
 8005de4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005de8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dea:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005dee:	b25b      	sxtb	r3, r3
 8005df0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005df4:	d103      	bne.n	8005dfe <xQueueGenericSend+0x182>
 8005df6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005df8:	2200      	movs	r2, #0
 8005dfa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005dfe:	f001 ff79 	bl	8007cf4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005e02:	1d3a      	adds	r2, r7, #4
 8005e04:	f107 0314 	add.w	r3, r7, #20
 8005e08:	4611      	mov	r1, r2
 8005e0a:	4618      	mov	r0, r3
 8005e0c:	f001 f89e 	bl	8006f4c <xTaskCheckForTimeOut>
 8005e10:	4603      	mov	r3, r0
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d124      	bne.n	8005e60 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005e16:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005e18:	f000 fb22 	bl	8006460 <prvIsQueueFull>
 8005e1c:	4603      	mov	r3, r0
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d018      	beq.n	8005e54 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005e22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e24:	3310      	adds	r3, #16
 8005e26:	687a      	ldr	r2, [r7, #4]
 8005e28:	4611      	mov	r1, r2
 8005e2a:	4618      	mov	r0, r3
 8005e2c:	f000 ffc4 	bl	8006db8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005e30:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005e32:	f000 faad 	bl	8006390 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005e36:	f000 fdf3 	bl	8006a20 <xTaskResumeAll>
 8005e3a:	4603      	mov	r3, r0
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	f47f af7c 	bne.w	8005d3a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8005e42:	4b0c      	ldr	r3, [pc, #48]	; (8005e74 <xQueueGenericSend+0x1f8>)
 8005e44:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005e48:	601a      	str	r2, [r3, #0]
 8005e4a:	f3bf 8f4f 	dsb	sy
 8005e4e:	f3bf 8f6f 	isb	sy
 8005e52:	e772      	b.n	8005d3a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005e54:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005e56:	f000 fa9b 	bl	8006390 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005e5a:	f000 fde1 	bl	8006a20 <xTaskResumeAll>
 8005e5e:	e76c      	b.n	8005d3a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005e60:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005e62:	f000 fa95 	bl	8006390 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005e66:	f000 fddb 	bl	8006a20 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005e6a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8005e6c:	4618      	mov	r0, r3
 8005e6e:	3738      	adds	r7, #56	; 0x38
 8005e70:	46bd      	mov	sp, r7
 8005e72:	bd80      	pop	{r7, pc}
 8005e74:	e000ed04 	.word	0xe000ed04

08005e78 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005e78:	b580      	push	{r7, lr}
 8005e7a:	b090      	sub	sp, #64	; 0x40
 8005e7c:	af00      	add	r7, sp, #0
 8005e7e:	60f8      	str	r0, [r7, #12]
 8005e80:	60b9      	str	r1, [r7, #8]
 8005e82:	607a      	str	r2, [r7, #4]
 8005e84:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8005e8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d10a      	bne.n	8005ea6 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8005e90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e94:	f383 8811 	msr	BASEPRI, r3
 8005e98:	f3bf 8f6f 	isb	sy
 8005e9c:	f3bf 8f4f 	dsb	sy
 8005ea0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005ea2:	bf00      	nop
 8005ea4:	e7fe      	b.n	8005ea4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005ea6:	68bb      	ldr	r3, [r7, #8]
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d103      	bne.n	8005eb4 <xQueueGenericSendFromISR+0x3c>
 8005eac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005eae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d101      	bne.n	8005eb8 <xQueueGenericSendFromISR+0x40>
 8005eb4:	2301      	movs	r3, #1
 8005eb6:	e000      	b.n	8005eba <xQueueGenericSendFromISR+0x42>
 8005eb8:	2300      	movs	r3, #0
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d10a      	bne.n	8005ed4 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8005ebe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ec2:	f383 8811 	msr	BASEPRI, r3
 8005ec6:	f3bf 8f6f 	isb	sy
 8005eca:	f3bf 8f4f 	dsb	sy
 8005ece:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005ed0:	bf00      	nop
 8005ed2:	e7fe      	b.n	8005ed2 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005ed4:	683b      	ldr	r3, [r7, #0]
 8005ed6:	2b02      	cmp	r3, #2
 8005ed8:	d103      	bne.n	8005ee2 <xQueueGenericSendFromISR+0x6a>
 8005eda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005edc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ede:	2b01      	cmp	r3, #1
 8005ee0:	d101      	bne.n	8005ee6 <xQueueGenericSendFromISR+0x6e>
 8005ee2:	2301      	movs	r3, #1
 8005ee4:	e000      	b.n	8005ee8 <xQueueGenericSendFromISR+0x70>
 8005ee6:	2300      	movs	r3, #0
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d10a      	bne.n	8005f02 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8005eec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ef0:	f383 8811 	msr	BASEPRI, r3
 8005ef4:	f3bf 8f6f 	isb	sy
 8005ef8:	f3bf 8f4f 	dsb	sy
 8005efc:	623b      	str	r3, [r7, #32]
}
 8005efe:	bf00      	nop
 8005f00:	e7fe      	b.n	8005f00 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005f02:	f001 ffa9 	bl	8007e58 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005f06:	f3ef 8211 	mrs	r2, BASEPRI
 8005f0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f0e:	f383 8811 	msr	BASEPRI, r3
 8005f12:	f3bf 8f6f 	isb	sy
 8005f16:	f3bf 8f4f 	dsb	sy
 8005f1a:	61fa      	str	r2, [r7, #28]
 8005f1c:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005f1e:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005f20:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005f22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f24:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005f26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f2a:	429a      	cmp	r2, r3
 8005f2c:	d302      	bcc.n	8005f34 <xQueueGenericSendFromISR+0xbc>
 8005f2e:	683b      	ldr	r3, [r7, #0]
 8005f30:	2b02      	cmp	r3, #2
 8005f32:	d12f      	bne.n	8005f94 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005f34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f36:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005f3a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005f3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f42:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005f44:	683a      	ldr	r2, [r7, #0]
 8005f46:	68b9      	ldr	r1, [r7, #8]
 8005f48:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005f4a:	f000 f991 	bl	8006270 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005f4e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8005f52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f56:	d112      	bne.n	8005f7e <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005f58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d016      	beq.n	8005f8e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005f60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f62:	3324      	adds	r3, #36	; 0x24
 8005f64:	4618      	mov	r0, r3
 8005f66:	f000 ff77 	bl	8006e58 <xTaskRemoveFromEventList>
 8005f6a:	4603      	mov	r3, r0
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d00e      	beq.n	8005f8e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d00b      	beq.n	8005f8e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	2201      	movs	r2, #1
 8005f7a:	601a      	str	r2, [r3, #0]
 8005f7c:	e007      	b.n	8005f8e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005f7e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8005f82:	3301      	adds	r3, #1
 8005f84:	b2db      	uxtb	r3, r3
 8005f86:	b25a      	sxtb	r2, r3
 8005f88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f8a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8005f8e:	2301      	movs	r3, #1
 8005f90:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8005f92:	e001      	b.n	8005f98 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005f94:	2300      	movs	r3, #0
 8005f96:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005f98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f9a:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005f9c:	697b      	ldr	r3, [r7, #20]
 8005f9e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005fa2:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005fa4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8005fa6:	4618      	mov	r0, r3
 8005fa8:	3740      	adds	r7, #64	; 0x40
 8005faa:	46bd      	mov	sp, r7
 8005fac:	bd80      	pop	{r7, pc}
	...

08005fb0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005fb0:	b580      	push	{r7, lr}
 8005fb2:	b08c      	sub	sp, #48	; 0x30
 8005fb4:	af00      	add	r7, sp, #0
 8005fb6:	60f8      	str	r0, [r7, #12]
 8005fb8:	60b9      	str	r1, [r7, #8]
 8005fba:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005fbc:	2300      	movs	r3, #0
 8005fbe:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005fc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d10a      	bne.n	8005fe0 <xQueueReceive+0x30>
	__asm volatile
 8005fca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fce:	f383 8811 	msr	BASEPRI, r3
 8005fd2:	f3bf 8f6f 	isb	sy
 8005fd6:	f3bf 8f4f 	dsb	sy
 8005fda:	623b      	str	r3, [r7, #32]
}
 8005fdc:	bf00      	nop
 8005fde:	e7fe      	b.n	8005fde <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005fe0:	68bb      	ldr	r3, [r7, #8]
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d103      	bne.n	8005fee <xQueueReceive+0x3e>
 8005fe6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fe8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d101      	bne.n	8005ff2 <xQueueReceive+0x42>
 8005fee:	2301      	movs	r3, #1
 8005ff0:	e000      	b.n	8005ff4 <xQueueReceive+0x44>
 8005ff2:	2300      	movs	r3, #0
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d10a      	bne.n	800600e <xQueueReceive+0x5e>
	__asm volatile
 8005ff8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ffc:	f383 8811 	msr	BASEPRI, r3
 8006000:	f3bf 8f6f 	isb	sy
 8006004:	f3bf 8f4f 	dsb	sy
 8006008:	61fb      	str	r3, [r7, #28]
}
 800600a:	bf00      	nop
 800600c:	e7fe      	b.n	800600c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800600e:	f001 f8e5 	bl	80071dc <xTaskGetSchedulerState>
 8006012:	4603      	mov	r3, r0
 8006014:	2b00      	cmp	r3, #0
 8006016:	d102      	bne.n	800601e <xQueueReceive+0x6e>
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	2b00      	cmp	r3, #0
 800601c:	d101      	bne.n	8006022 <xQueueReceive+0x72>
 800601e:	2301      	movs	r3, #1
 8006020:	e000      	b.n	8006024 <xQueueReceive+0x74>
 8006022:	2300      	movs	r3, #0
 8006024:	2b00      	cmp	r3, #0
 8006026:	d10a      	bne.n	800603e <xQueueReceive+0x8e>
	__asm volatile
 8006028:	f04f 0350 	mov.w	r3, #80	; 0x50
 800602c:	f383 8811 	msr	BASEPRI, r3
 8006030:	f3bf 8f6f 	isb	sy
 8006034:	f3bf 8f4f 	dsb	sy
 8006038:	61bb      	str	r3, [r7, #24]
}
 800603a:	bf00      	nop
 800603c:	e7fe      	b.n	800603c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800603e:	f001 fe29 	bl	8007c94 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006042:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006044:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006046:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006048:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800604a:	2b00      	cmp	r3, #0
 800604c:	d01f      	beq.n	800608e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800604e:	68b9      	ldr	r1, [r7, #8]
 8006050:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006052:	f000 f977 	bl	8006344 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006056:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006058:	1e5a      	subs	r2, r3, #1
 800605a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800605c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800605e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006060:	691b      	ldr	r3, [r3, #16]
 8006062:	2b00      	cmp	r3, #0
 8006064:	d00f      	beq.n	8006086 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006066:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006068:	3310      	adds	r3, #16
 800606a:	4618      	mov	r0, r3
 800606c:	f000 fef4 	bl	8006e58 <xTaskRemoveFromEventList>
 8006070:	4603      	mov	r3, r0
 8006072:	2b00      	cmp	r3, #0
 8006074:	d007      	beq.n	8006086 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006076:	4b3d      	ldr	r3, [pc, #244]	; (800616c <xQueueReceive+0x1bc>)
 8006078:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800607c:	601a      	str	r2, [r3, #0]
 800607e:	f3bf 8f4f 	dsb	sy
 8006082:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006086:	f001 fe35 	bl	8007cf4 <vPortExitCritical>
				return pdPASS;
 800608a:	2301      	movs	r3, #1
 800608c:	e069      	b.n	8006162 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	2b00      	cmp	r3, #0
 8006092:	d103      	bne.n	800609c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006094:	f001 fe2e 	bl	8007cf4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006098:	2300      	movs	r3, #0
 800609a:	e062      	b.n	8006162 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800609c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d106      	bne.n	80060b0 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80060a2:	f107 0310 	add.w	r3, r7, #16
 80060a6:	4618      	mov	r0, r3
 80060a8:	f000 ff3a 	bl	8006f20 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80060ac:	2301      	movs	r3, #1
 80060ae:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80060b0:	f001 fe20 	bl	8007cf4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80060b4:	f000 fca6 	bl	8006a04 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80060b8:	f001 fdec 	bl	8007c94 <vPortEnterCritical>
 80060bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060be:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80060c2:	b25b      	sxtb	r3, r3
 80060c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060c8:	d103      	bne.n	80060d2 <xQueueReceive+0x122>
 80060ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060cc:	2200      	movs	r2, #0
 80060ce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80060d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060d4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80060d8:	b25b      	sxtb	r3, r3
 80060da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060de:	d103      	bne.n	80060e8 <xQueueReceive+0x138>
 80060e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060e2:	2200      	movs	r2, #0
 80060e4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80060e8:	f001 fe04 	bl	8007cf4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80060ec:	1d3a      	adds	r2, r7, #4
 80060ee:	f107 0310 	add.w	r3, r7, #16
 80060f2:	4611      	mov	r1, r2
 80060f4:	4618      	mov	r0, r3
 80060f6:	f000 ff29 	bl	8006f4c <xTaskCheckForTimeOut>
 80060fa:	4603      	mov	r3, r0
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d123      	bne.n	8006148 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006100:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006102:	f000 f997 	bl	8006434 <prvIsQueueEmpty>
 8006106:	4603      	mov	r3, r0
 8006108:	2b00      	cmp	r3, #0
 800610a:	d017      	beq.n	800613c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800610c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800610e:	3324      	adds	r3, #36	; 0x24
 8006110:	687a      	ldr	r2, [r7, #4]
 8006112:	4611      	mov	r1, r2
 8006114:	4618      	mov	r0, r3
 8006116:	f000 fe4f 	bl	8006db8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800611a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800611c:	f000 f938 	bl	8006390 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006120:	f000 fc7e 	bl	8006a20 <xTaskResumeAll>
 8006124:	4603      	mov	r3, r0
 8006126:	2b00      	cmp	r3, #0
 8006128:	d189      	bne.n	800603e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800612a:	4b10      	ldr	r3, [pc, #64]	; (800616c <xQueueReceive+0x1bc>)
 800612c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006130:	601a      	str	r2, [r3, #0]
 8006132:	f3bf 8f4f 	dsb	sy
 8006136:	f3bf 8f6f 	isb	sy
 800613a:	e780      	b.n	800603e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800613c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800613e:	f000 f927 	bl	8006390 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006142:	f000 fc6d 	bl	8006a20 <xTaskResumeAll>
 8006146:	e77a      	b.n	800603e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8006148:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800614a:	f000 f921 	bl	8006390 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800614e:	f000 fc67 	bl	8006a20 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006152:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006154:	f000 f96e 	bl	8006434 <prvIsQueueEmpty>
 8006158:	4603      	mov	r3, r0
 800615a:	2b00      	cmp	r3, #0
 800615c:	f43f af6f 	beq.w	800603e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006160:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006162:	4618      	mov	r0, r3
 8006164:	3730      	adds	r7, #48	; 0x30
 8006166:	46bd      	mov	sp, r7
 8006168:	bd80      	pop	{r7, pc}
 800616a:	bf00      	nop
 800616c:	e000ed04 	.word	0xe000ed04

08006170 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8006170:	b580      	push	{r7, lr}
 8006172:	b08e      	sub	sp, #56	; 0x38
 8006174:	af00      	add	r7, sp, #0
 8006176:	60f8      	str	r0, [r7, #12]
 8006178:	60b9      	str	r1, [r7, #8]
 800617a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006180:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006182:	2b00      	cmp	r3, #0
 8006184:	d10a      	bne.n	800619c <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8006186:	f04f 0350 	mov.w	r3, #80	; 0x50
 800618a:	f383 8811 	msr	BASEPRI, r3
 800618e:	f3bf 8f6f 	isb	sy
 8006192:	f3bf 8f4f 	dsb	sy
 8006196:	623b      	str	r3, [r7, #32]
}
 8006198:	bf00      	nop
 800619a:	e7fe      	b.n	800619a <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800619c:	68bb      	ldr	r3, [r7, #8]
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d103      	bne.n	80061aa <xQueueReceiveFromISR+0x3a>
 80061a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d101      	bne.n	80061ae <xQueueReceiveFromISR+0x3e>
 80061aa:	2301      	movs	r3, #1
 80061ac:	e000      	b.n	80061b0 <xQueueReceiveFromISR+0x40>
 80061ae:	2300      	movs	r3, #0
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d10a      	bne.n	80061ca <xQueueReceiveFromISR+0x5a>
	__asm volatile
 80061b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061b8:	f383 8811 	msr	BASEPRI, r3
 80061bc:	f3bf 8f6f 	isb	sy
 80061c0:	f3bf 8f4f 	dsb	sy
 80061c4:	61fb      	str	r3, [r7, #28]
}
 80061c6:	bf00      	nop
 80061c8:	e7fe      	b.n	80061c8 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80061ca:	f001 fe45 	bl	8007e58 <vPortValidateInterruptPriority>
	__asm volatile
 80061ce:	f3ef 8211 	mrs	r2, BASEPRI
 80061d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061d6:	f383 8811 	msr	BASEPRI, r3
 80061da:	f3bf 8f6f 	isb	sy
 80061de:	f3bf 8f4f 	dsb	sy
 80061e2:	61ba      	str	r2, [r7, #24]
 80061e4:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80061e6:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80061e8:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80061ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061ee:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80061f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d02f      	beq.n	8006256 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80061f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061f8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80061fc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006200:	68b9      	ldr	r1, [r7, #8]
 8006202:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006204:	f000 f89e 	bl	8006344 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006208:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800620a:	1e5a      	subs	r2, r3, #1
 800620c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800620e:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8006210:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006214:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006218:	d112      	bne.n	8006240 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800621a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800621c:	691b      	ldr	r3, [r3, #16]
 800621e:	2b00      	cmp	r3, #0
 8006220:	d016      	beq.n	8006250 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006222:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006224:	3310      	adds	r3, #16
 8006226:	4618      	mov	r0, r3
 8006228:	f000 fe16 	bl	8006e58 <xTaskRemoveFromEventList>
 800622c:	4603      	mov	r3, r0
 800622e:	2b00      	cmp	r3, #0
 8006230:	d00e      	beq.n	8006250 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	2b00      	cmp	r3, #0
 8006236:	d00b      	beq.n	8006250 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	2201      	movs	r2, #1
 800623c:	601a      	str	r2, [r3, #0]
 800623e:	e007      	b.n	8006250 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8006240:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006244:	3301      	adds	r3, #1
 8006246:	b2db      	uxtb	r3, r3
 8006248:	b25a      	sxtb	r2, r3
 800624a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800624c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8006250:	2301      	movs	r3, #1
 8006252:	637b      	str	r3, [r7, #52]	; 0x34
 8006254:	e001      	b.n	800625a <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8006256:	2300      	movs	r3, #0
 8006258:	637b      	str	r3, [r7, #52]	; 0x34
 800625a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800625c:	613b      	str	r3, [r7, #16]
	__asm volatile
 800625e:	693b      	ldr	r3, [r7, #16]
 8006260:	f383 8811 	msr	BASEPRI, r3
}
 8006264:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006266:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8006268:	4618      	mov	r0, r3
 800626a:	3738      	adds	r7, #56	; 0x38
 800626c:	46bd      	mov	sp, r7
 800626e:	bd80      	pop	{r7, pc}

08006270 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006270:	b580      	push	{r7, lr}
 8006272:	b086      	sub	sp, #24
 8006274:	af00      	add	r7, sp, #0
 8006276:	60f8      	str	r0, [r7, #12]
 8006278:	60b9      	str	r1, [r7, #8]
 800627a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800627c:	2300      	movs	r3, #0
 800627e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006284:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800628a:	2b00      	cmp	r3, #0
 800628c:	d10d      	bne.n	80062aa <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	2b00      	cmp	r3, #0
 8006294:	d14d      	bne.n	8006332 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	689b      	ldr	r3, [r3, #8]
 800629a:	4618      	mov	r0, r3
 800629c:	f000 ffbc 	bl	8007218 <xTaskPriorityDisinherit>
 80062a0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	2200      	movs	r2, #0
 80062a6:	609a      	str	r2, [r3, #8]
 80062a8:	e043      	b.n	8006332 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d119      	bne.n	80062e4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	6858      	ldr	r0, [r3, #4]
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062b8:	461a      	mov	r2, r3
 80062ba:	68b9      	ldr	r1, [r7, #8]
 80062bc:	f002 f919 	bl	80084f2 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	685a      	ldr	r2, [r3, #4]
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062c8:	441a      	add	r2, r3
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	685a      	ldr	r2, [r3, #4]
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	689b      	ldr	r3, [r3, #8]
 80062d6:	429a      	cmp	r2, r3
 80062d8:	d32b      	bcc.n	8006332 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	681a      	ldr	r2, [r3, #0]
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	605a      	str	r2, [r3, #4]
 80062e2:	e026      	b.n	8006332 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	68d8      	ldr	r0, [r3, #12]
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062ec:	461a      	mov	r2, r3
 80062ee:	68b9      	ldr	r1, [r7, #8]
 80062f0:	f002 f8ff 	bl	80084f2 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	68da      	ldr	r2, [r3, #12]
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062fc:	425b      	negs	r3, r3
 80062fe:	441a      	add	r2, r3
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	68da      	ldr	r2, [r3, #12]
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	429a      	cmp	r2, r3
 800630e:	d207      	bcs.n	8006320 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	689a      	ldr	r2, [r3, #8]
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006318:	425b      	negs	r3, r3
 800631a:	441a      	add	r2, r3
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	2b02      	cmp	r3, #2
 8006324:	d105      	bne.n	8006332 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006326:	693b      	ldr	r3, [r7, #16]
 8006328:	2b00      	cmp	r3, #0
 800632a:	d002      	beq.n	8006332 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800632c:	693b      	ldr	r3, [r7, #16]
 800632e:	3b01      	subs	r3, #1
 8006330:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006332:	693b      	ldr	r3, [r7, #16]
 8006334:	1c5a      	adds	r2, r3, #1
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800633a:	697b      	ldr	r3, [r7, #20]
}
 800633c:	4618      	mov	r0, r3
 800633e:	3718      	adds	r7, #24
 8006340:	46bd      	mov	sp, r7
 8006342:	bd80      	pop	{r7, pc}

08006344 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006344:	b580      	push	{r7, lr}
 8006346:	b082      	sub	sp, #8
 8006348:	af00      	add	r7, sp, #0
 800634a:	6078      	str	r0, [r7, #4]
 800634c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006352:	2b00      	cmp	r3, #0
 8006354:	d018      	beq.n	8006388 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	68da      	ldr	r2, [r3, #12]
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800635e:	441a      	add	r2, r3
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	68da      	ldr	r2, [r3, #12]
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	689b      	ldr	r3, [r3, #8]
 800636c:	429a      	cmp	r2, r3
 800636e:	d303      	bcc.n	8006378 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	681a      	ldr	r2, [r3, #0]
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	68d9      	ldr	r1, [r3, #12]
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006380:	461a      	mov	r2, r3
 8006382:	6838      	ldr	r0, [r7, #0]
 8006384:	f002 f8b5 	bl	80084f2 <memcpy>
	}
}
 8006388:	bf00      	nop
 800638a:	3708      	adds	r7, #8
 800638c:	46bd      	mov	sp, r7
 800638e:	bd80      	pop	{r7, pc}

08006390 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006390:	b580      	push	{r7, lr}
 8006392:	b084      	sub	sp, #16
 8006394:	af00      	add	r7, sp, #0
 8006396:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006398:	f001 fc7c 	bl	8007c94 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80063a2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80063a4:	e011      	b.n	80063ca <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d012      	beq.n	80063d4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	3324      	adds	r3, #36	; 0x24
 80063b2:	4618      	mov	r0, r3
 80063b4:	f000 fd50 	bl	8006e58 <xTaskRemoveFromEventList>
 80063b8:	4603      	mov	r3, r0
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d001      	beq.n	80063c2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80063be:	f000 fe27 	bl	8007010 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80063c2:	7bfb      	ldrb	r3, [r7, #15]
 80063c4:	3b01      	subs	r3, #1
 80063c6:	b2db      	uxtb	r3, r3
 80063c8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80063ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	dce9      	bgt.n	80063a6 <prvUnlockQueue+0x16>
 80063d2:	e000      	b.n	80063d6 <prvUnlockQueue+0x46>
					break;
 80063d4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	22ff      	movs	r2, #255	; 0xff
 80063da:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80063de:	f001 fc89 	bl	8007cf4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80063e2:	f001 fc57 	bl	8007c94 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80063ec:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80063ee:	e011      	b.n	8006414 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	691b      	ldr	r3, [r3, #16]
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d012      	beq.n	800641e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	3310      	adds	r3, #16
 80063fc:	4618      	mov	r0, r3
 80063fe:	f000 fd2b 	bl	8006e58 <xTaskRemoveFromEventList>
 8006402:	4603      	mov	r3, r0
 8006404:	2b00      	cmp	r3, #0
 8006406:	d001      	beq.n	800640c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8006408:	f000 fe02 	bl	8007010 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800640c:	7bbb      	ldrb	r3, [r7, #14]
 800640e:	3b01      	subs	r3, #1
 8006410:	b2db      	uxtb	r3, r3
 8006412:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006414:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006418:	2b00      	cmp	r3, #0
 800641a:	dce9      	bgt.n	80063f0 <prvUnlockQueue+0x60>
 800641c:	e000      	b.n	8006420 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800641e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	22ff      	movs	r2, #255	; 0xff
 8006424:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8006428:	f001 fc64 	bl	8007cf4 <vPortExitCritical>
}
 800642c:	bf00      	nop
 800642e:	3710      	adds	r7, #16
 8006430:	46bd      	mov	sp, r7
 8006432:	bd80      	pop	{r7, pc}

08006434 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006434:	b580      	push	{r7, lr}
 8006436:	b084      	sub	sp, #16
 8006438:	af00      	add	r7, sp, #0
 800643a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800643c:	f001 fc2a 	bl	8007c94 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006444:	2b00      	cmp	r3, #0
 8006446:	d102      	bne.n	800644e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006448:	2301      	movs	r3, #1
 800644a:	60fb      	str	r3, [r7, #12]
 800644c:	e001      	b.n	8006452 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800644e:	2300      	movs	r3, #0
 8006450:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006452:	f001 fc4f 	bl	8007cf4 <vPortExitCritical>

	return xReturn;
 8006456:	68fb      	ldr	r3, [r7, #12]
}
 8006458:	4618      	mov	r0, r3
 800645a:	3710      	adds	r7, #16
 800645c:	46bd      	mov	sp, r7
 800645e:	bd80      	pop	{r7, pc}

08006460 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006460:	b580      	push	{r7, lr}
 8006462:	b084      	sub	sp, #16
 8006464:	af00      	add	r7, sp, #0
 8006466:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006468:	f001 fc14 	bl	8007c94 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006474:	429a      	cmp	r2, r3
 8006476:	d102      	bne.n	800647e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006478:	2301      	movs	r3, #1
 800647a:	60fb      	str	r3, [r7, #12]
 800647c:	e001      	b.n	8006482 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800647e:	2300      	movs	r3, #0
 8006480:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006482:	f001 fc37 	bl	8007cf4 <vPortExitCritical>

	return xReturn;
 8006486:	68fb      	ldr	r3, [r7, #12]
}
 8006488:	4618      	mov	r0, r3
 800648a:	3710      	adds	r7, #16
 800648c:	46bd      	mov	sp, r7
 800648e:	bd80      	pop	{r7, pc}

08006490 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8006490:	b480      	push	{r7}
 8006492:	b085      	sub	sp, #20
 8006494:	af00      	add	r7, sp, #0
 8006496:	6078      	str	r0, [r7, #4]
 8006498:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800649a:	2300      	movs	r3, #0
 800649c:	60fb      	str	r3, [r7, #12]
 800649e:	e014      	b.n	80064ca <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80064a0:	4a0f      	ldr	r2, [pc, #60]	; (80064e0 <vQueueAddToRegistry+0x50>)
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d10b      	bne.n	80064c4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80064ac:	490c      	ldr	r1, [pc, #48]	; (80064e0 <vQueueAddToRegistry+0x50>)
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	683a      	ldr	r2, [r7, #0]
 80064b2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80064b6:	4a0a      	ldr	r2, [pc, #40]	; (80064e0 <vQueueAddToRegistry+0x50>)
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	00db      	lsls	r3, r3, #3
 80064bc:	4413      	add	r3, r2
 80064be:	687a      	ldr	r2, [r7, #4]
 80064c0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80064c2:	e006      	b.n	80064d2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	3301      	adds	r3, #1
 80064c8:	60fb      	str	r3, [r7, #12]
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	2b07      	cmp	r3, #7
 80064ce:	d9e7      	bls.n	80064a0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80064d0:	bf00      	nop
 80064d2:	bf00      	nop
 80064d4:	3714      	adds	r7, #20
 80064d6:	46bd      	mov	sp, r7
 80064d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064dc:	4770      	bx	lr
 80064de:	bf00      	nop
 80064e0:	20000ff8 	.word	0x20000ff8

080064e4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80064e4:	b580      	push	{r7, lr}
 80064e6:	b086      	sub	sp, #24
 80064e8:	af00      	add	r7, sp, #0
 80064ea:	60f8      	str	r0, [r7, #12]
 80064ec:	60b9      	str	r1, [r7, #8]
 80064ee:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80064f4:	f001 fbce 	bl	8007c94 <vPortEnterCritical>
 80064f8:	697b      	ldr	r3, [r7, #20]
 80064fa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80064fe:	b25b      	sxtb	r3, r3
 8006500:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006504:	d103      	bne.n	800650e <vQueueWaitForMessageRestricted+0x2a>
 8006506:	697b      	ldr	r3, [r7, #20]
 8006508:	2200      	movs	r2, #0
 800650a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800650e:	697b      	ldr	r3, [r7, #20]
 8006510:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006514:	b25b      	sxtb	r3, r3
 8006516:	f1b3 3fff 	cmp.w	r3, #4294967295
 800651a:	d103      	bne.n	8006524 <vQueueWaitForMessageRestricted+0x40>
 800651c:	697b      	ldr	r3, [r7, #20]
 800651e:	2200      	movs	r2, #0
 8006520:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006524:	f001 fbe6 	bl	8007cf4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8006528:	697b      	ldr	r3, [r7, #20]
 800652a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800652c:	2b00      	cmp	r3, #0
 800652e:	d106      	bne.n	800653e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8006530:	697b      	ldr	r3, [r7, #20]
 8006532:	3324      	adds	r3, #36	; 0x24
 8006534:	687a      	ldr	r2, [r7, #4]
 8006536:	68b9      	ldr	r1, [r7, #8]
 8006538:	4618      	mov	r0, r3
 800653a:	f000 fc61 	bl	8006e00 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800653e:	6978      	ldr	r0, [r7, #20]
 8006540:	f7ff ff26 	bl	8006390 <prvUnlockQueue>
	}
 8006544:	bf00      	nop
 8006546:	3718      	adds	r7, #24
 8006548:	46bd      	mov	sp, r7
 800654a:	bd80      	pop	{r7, pc}

0800654c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800654c:	b580      	push	{r7, lr}
 800654e:	b08e      	sub	sp, #56	; 0x38
 8006550:	af04      	add	r7, sp, #16
 8006552:	60f8      	str	r0, [r7, #12]
 8006554:	60b9      	str	r1, [r7, #8]
 8006556:	607a      	str	r2, [r7, #4]
 8006558:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800655a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800655c:	2b00      	cmp	r3, #0
 800655e:	d10a      	bne.n	8006576 <xTaskCreateStatic+0x2a>
	__asm volatile
 8006560:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006564:	f383 8811 	msr	BASEPRI, r3
 8006568:	f3bf 8f6f 	isb	sy
 800656c:	f3bf 8f4f 	dsb	sy
 8006570:	623b      	str	r3, [r7, #32]
}
 8006572:	bf00      	nop
 8006574:	e7fe      	b.n	8006574 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8006576:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006578:	2b00      	cmp	r3, #0
 800657a:	d10a      	bne.n	8006592 <xTaskCreateStatic+0x46>
	__asm volatile
 800657c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006580:	f383 8811 	msr	BASEPRI, r3
 8006584:	f3bf 8f6f 	isb	sy
 8006588:	f3bf 8f4f 	dsb	sy
 800658c:	61fb      	str	r3, [r7, #28]
}
 800658e:	bf00      	nop
 8006590:	e7fe      	b.n	8006590 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006592:	23bc      	movs	r3, #188	; 0xbc
 8006594:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006596:	693b      	ldr	r3, [r7, #16]
 8006598:	2bbc      	cmp	r3, #188	; 0xbc
 800659a:	d00a      	beq.n	80065b2 <xTaskCreateStatic+0x66>
	__asm volatile
 800659c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065a0:	f383 8811 	msr	BASEPRI, r3
 80065a4:	f3bf 8f6f 	isb	sy
 80065a8:	f3bf 8f4f 	dsb	sy
 80065ac:	61bb      	str	r3, [r7, #24]
}
 80065ae:	bf00      	nop
 80065b0:	e7fe      	b.n	80065b0 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80065b2:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80065b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d01e      	beq.n	80065f8 <xTaskCreateStatic+0xac>
 80065ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d01b      	beq.n	80065f8 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80065c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065c2:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80065c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065c6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80065c8:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80065ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065cc:	2202      	movs	r2, #2
 80065ce:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80065d2:	2300      	movs	r3, #0
 80065d4:	9303      	str	r3, [sp, #12]
 80065d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065d8:	9302      	str	r3, [sp, #8]
 80065da:	f107 0314 	add.w	r3, r7, #20
 80065de:	9301      	str	r3, [sp, #4]
 80065e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065e2:	9300      	str	r3, [sp, #0]
 80065e4:	683b      	ldr	r3, [r7, #0]
 80065e6:	687a      	ldr	r2, [r7, #4]
 80065e8:	68b9      	ldr	r1, [r7, #8]
 80065ea:	68f8      	ldr	r0, [r7, #12]
 80065ec:	f000 f850 	bl	8006690 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80065f0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80065f2:	f000 f8f3 	bl	80067dc <prvAddNewTaskToReadyList>
 80065f6:	e001      	b.n	80065fc <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80065f8:	2300      	movs	r3, #0
 80065fa:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80065fc:	697b      	ldr	r3, [r7, #20]
	}
 80065fe:	4618      	mov	r0, r3
 8006600:	3728      	adds	r7, #40	; 0x28
 8006602:	46bd      	mov	sp, r7
 8006604:	bd80      	pop	{r7, pc}

08006606 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006606:	b580      	push	{r7, lr}
 8006608:	b08c      	sub	sp, #48	; 0x30
 800660a:	af04      	add	r7, sp, #16
 800660c:	60f8      	str	r0, [r7, #12]
 800660e:	60b9      	str	r1, [r7, #8]
 8006610:	603b      	str	r3, [r7, #0]
 8006612:	4613      	mov	r3, r2
 8006614:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006616:	88fb      	ldrh	r3, [r7, #6]
 8006618:	009b      	lsls	r3, r3, #2
 800661a:	4618      	mov	r0, r3
 800661c:	f001 fc5c 	bl	8007ed8 <pvPortMalloc>
 8006620:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006622:	697b      	ldr	r3, [r7, #20]
 8006624:	2b00      	cmp	r3, #0
 8006626:	d00e      	beq.n	8006646 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006628:	20bc      	movs	r0, #188	; 0xbc
 800662a:	f001 fc55 	bl	8007ed8 <pvPortMalloc>
 800662e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006630:	69fb      	ldr	r3, [r7, #28]
 8006632:	2b00      	cmp	r3, #0
 8006634:	d003      	beq.n	800663e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006636:	69fb      	ldr	r3, [r7, #28]
 8006638:	697a      	ldr	r2, [r7, #20]
 800663a:	631a      	str	r2, [r3, #48]	; 0x30
 800663c:	e005      	b.n	800664a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800663e:	6978      	ldr	r0, [r7, #20]
 8006640:	f001 fd16 	bl	8008070 <vPortFree>
 8006644:	e001      	b.n	800664a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006646:	2300      	movs	r3, #0
 8006648:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800664a:	69fb      	ldr	r3, [r7, #28]
 800664c:	2b00      	cmp	r3, #0
 800664e:	d017      	beq.n	8006680 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006650:	69fb      	ldr	r3, [r7, #28]
 8006652:	2200      	movs	r2, #0
 8006654:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006658:	88fa      	ldrh	r2, [r7, #6]
 800665a:	2300      	movs	r3, #0
 800665c:	9303      	str	r3, [sp, #12]
 800665e:	69fb      	ldr	r3, [r7, #28]
 8006660:	9302      	str	r3, [sp, #8]
 8006662:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006664:	9301      	str	r3, [sp, #4]
 8006666:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006668:	9300      	str	r3, [sp, #0]
 800666a:	683b      	ldr	r3, [r7, #0]
 800666c:	68b9      	ldr	r1, [r7, #8]
 800666e:	68f8      	ldr	r0, [r7, #12]
 8006670:	f000 f80e 	bl	8006690 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006674:	69f8      	ldr	r0, [r7, #28]
 8006676:	f000 f8b1 	bl	80067dc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800667a:	2301      	movs	r3, #1
 800667c:	61bb      	str	r3, [r7, #24]
 800667e:	e002      	b.n	8006686 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006680:	f04f 33ff 	mov.w	r3, #4294967295
 8006684:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006686:	69bb      	ldr	r3, [r7, #24]
	}
 8006688:	4618      	mov	r0, r3
 800668a:	3720      	adds	r7, #32
 800668c:	46bd      	mov	sp, r7
 800668e:	bd80      	pop	{r7, pc}

08006690 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006690:	b580      	push	{r7, lr}
 8006692:	b088      	sub	sp, #32
 8006694:	af00      	add	r7, sp, #0
 8006696:	60f8      	str	r0, [r7, #12]
 8006698:	60b9      	str	r1, [r7, #8]
 800669a:	607a      	str	r2, [r7, #4]
 800669c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800669e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066a0:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	009b      	lsls	r3, r3, #2
 80066a6:	461a      	mov	r2, r3
 80066a8:	21a5      	movs	r1, #165	; 0xa5
 80066aa:	f001 ff30 	bl	800850e <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80066ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066b0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80066b8:	3b01      	subs	r3, #1
 80066ba:	009b      	lsls	r3, r3, #2
 80066bc:	4413      	add	r3, r2
 80066be:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80066c0:	69bb      	ldr	r3, [r7, #24]
 80066c2:	f023 0307 	bic.w	r3, r3, #7
 80066c6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80066c8:	69bb      	ldr	r3, [r7, #24]
 80066ca:	f003 0307 	and.w	r3, r3, #7
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d00a      	beq.n	80066e8 <prvInitialiseNewTask+0x58>
	__asm volatile
 80066d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066d6:	f383 8811 	msr	BASEPRI, r3
 80066da:	f3bf 8f6f 	isb	sy
 80066de:	f3bf 8f4f 	dsb	sy
 80066e2:	617b      	str	r3, [r7, #20]
}
 80066e4:	bf00      	nop
 80066e6:	e7fe      	b.n	80066e6 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80066e8:	68bb      	ldr	r3, [r7, #8]
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d01f      	beq.n	800672e <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80066ee:	2300      	movs	r3, #0
 80066f0:	61fb      	str	r3, [r7, #28]
 80066f2:	e012      	b.n	800671a <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80066f4:	68ba      	ldr	r2, [r7, #8]
 80066f6:	69fb      	ldr	r3, [r7, #28]
 80066f8:	4413      	add	r3, r2
 80066fa:	7819      	ldrb	r1, [r3, #0]
 80066fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80066fe:	69fb      	ldr	r3, [r7, #28]
 8006700:	4413      	add	r3, r2
 8006702:	3334      	adds	r3, #52	; 0x34
 8006704:	460a      	mov	r2, r1
 8006706:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006708:	68ba      	ldr	r2, [r7, #8]
 800670a:	69fb      	ldr	r3, [r7, #28]
 800670c:	4413      	add	r3, r2
 800670e:	781b      	ldrb	r3, [r3, #0]
 8006710:	2b00      	cmp	r3, #0
 8006712:	d006      	beq.n	8006722 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006714:	69fb      	ldr	r3, [r7, #28]
 8006716:	3301      	adds	r3, #1
 8006718:	61fb      	str	r3, [r7, #28]
 800671a:	69fb      	ldr	r3, [r7, #28]
 800671c:	2b0f      	cmp	r3, #15
 800671e:	d9e9      	bls.n	80066f4 <prvInitialiseNewTask+0x64>
 8006720:	e000      	b.n	8006724 <prvInitialiseNewTask+0x94>
			{
				break;
 8006722:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006724:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006726:	2200      	movs	r2, #0
 8006728:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800672c:	e003      	b.n	8006736 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800672e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006730:	2200      	movs	r2, #0
 8006732:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006736:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006738:	2b37      	cmp	r3, #55	; 0x37
 800673a:	d901      	bls.n	8006740 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800673c:	2337      	movs	r3, #55	; 0x37
 800673e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006740:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006742:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006744:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006746:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006748:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800674a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800674c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800674e:	2200      	movs	r2, #0
 8006750:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006752:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006754:	3304      	adds	r3, #4
 8006756:	4618      	mov	r0, r3
 8006758:	f7ff f8be 	bl	80058d8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800675c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800675e:	3318      	adds	r3, #24
 8006760:	4618      	mov	r0, r3
 8006762:	f7ff f8b9 	bl	80058d8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006766:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006768:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800676a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800676c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800676e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006772:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006774:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006776:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006778:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800677a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800677c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800677e:	2200      	movs	r2, #0
 8006780:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006784:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006786:	2200      	movs	r2, #0
 8006788:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800678c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800678e:	3354      	adds	r3, #84	; 0x54
 8006790:	2260      	movs	r2, #96	; 0x60
 8006792:	2100      	movs	r1, #0
 8006794:	4618      	mov	r0, r3
 8006796:	f001 feba 	bl	800850e <memset>
 800679a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800679c:	4a0c      	ldr	r2, [pc, #48]	; (80067d0 <prvInitialiseNewTask+0x140>)
 800679e:	659a      	str	r2, [r3, #88]	; 0x58
 80067a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067a2:	4a0c      	ldr	r2, [pc, #48]	; (80067d4 <prvInitialiseNewTask+0x144>)
 80067a4:	65da      	str	r2, [r3, #92]	; 0x5c
 80067a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067a8:	4a0b      	ldr	r2, [pc, #44]	; (80067d8 <prvInitialiseNewTask+0x148>)
 80067aa:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80067ac:	683a      	ldr	r2, [r7, #0]
 80067ae:	68f9      	ldr	r1, [r7, #12]
 80067b0:	69b8      	ldr	r0, [r7, #24]
 80067b2:	f001 f941 	bl	8007a38 <pxPortInitialiseStack>
 80067b6:	4602      	mov	r2, r0
 80067b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067ba:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80067bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d002      	beq.n	80067c8 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80067c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80067c6:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80067c8:	bf00      	nop
 80067ca:	3720      	adds	r7, #32
 80067cc:	46bd      	mov	sp, r7
 80067ce:	bd80      	pop	{r7, pc}
 80067d0:	08009b24 	.word	0x08009b24
 80067d4:	08009b44 	.word	0x08009b44
 80067d8:	08009b04 	.word	0x08009b04

080067dc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80067dc:	b580      	push	{r7, lr}
 80067de:	b082      	sub	sp, #8
 80067e0:	af00      	add	r7, sp, #0
 80067e2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80067e4:	f001 fa56 	bl	8007c94 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80067e8:	4b2d      	ldr	r3, [pc, #180]	; (80068a0 <prvAddNewTaskToReadyList+0xc4>)
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	3301      	adds	r3, #1
 80067ee:	4a2c      	ldr	r2, [pc, #176]	; (80068a0 <prvAddNewTaskToReadyList+0xc4>)
 80067f0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80067f2:	4b2c      	ldr	r3, [pc, #176]	; (80068a4 <prvAddNewTaskToReadyList+0xc8>)
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d109      	bne.n	800680e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80067fa:	4a2a      	ldr	r2, [pc, #168]	; (80068a4 <prvAddNewTaskToReadyList+0xc8>)
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006800:	4b27      	ldr	r3, [pc, #156]	; (80068a0 <prvAddNewTaskToReadyList+0xc4>)
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	2b01      	cmp	r3, #1
 8006806:	d110      	bne.n	800682a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006808:	f000 fc26 	bl	8007058 <prvInitialiseTaskLists>
 800680c:	e00d      	b.n	800682a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800680e:	4b26      	ldr	r3, [pc, #152]	; (80068a8 <prvAddNewTaskToReadyList+0xcc>)
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	2b00      	cmp	r3, #0
 8006814:	d109      	bne.n	800682a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006816:	4b23      	ldr	r3, [pc, #140]	; (80068a4 <prvAddNewTaskToReadyList+0xc8>)
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006820:	429a      	cmp	r2, r3
 8006822:	d802      	bhi.n	800682a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006824:	4a1f      	ldr	r2, [pc, #124]	; (80068a4 <prvAddNewTaskToReadyList+0xc8>)
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800682a:	4b20      	ldr	r3, [pc, #128]	; (80068ac <prvAddNewTaskToReadyList+0xd0>)
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	3301      	adds	r3, #1
 8006830:	4a1e      	ldr	r2, [pc, #120]	; (80068ac <prvAddNewTaskToReadyList+0xd0>)
 8006832:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8006834:	4b1d      	ldr	r3, [pc, #116]	; (80068ac <prvAddNewTaskToReadyList+0xd0>)
 8006836:	681a      	ldr	r2, [r3, #0]
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006840:	4b1b      	ldr	r3, [pc, #108]	; (80068b0 <prvAddNewTaskToReadyList+0xd4>)
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	429a      	cmp	r2, r3
 8006846:	d903      	bls.n	8006850 <prvAddNewTaskToReadyList+0x74>
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800684c:	4a18      	ldr	r2, [pc, #96]	; (80068b0 <prvAddNewTaskToReadyList+0xd4>)
 800684e:	6013      	str	r3, [r2, #0]
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006854:	4613      	mov	r3, r2
 8006856:	009b      	lsls	r3, r3, #2
 8006858:	4413      	add	r3, r2
 800685a:	009b      	lsls	r3, r3, #2
 800685c:	4a15      	ldr	r2, [pc, #84]	; (80068b4 <prvAddNewTaskToReadyList+0xd8>)
 800685e:	441a      	add	r2, r3
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	3304      	adds	r3, #4
 8006864:	4619      	mov	r1, r3
 8006866:	4610      	mov	r0, r2
 8006868:	f7ff f843 	bl	80058f2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800686c:	f001 fa42 	bl	8007cf4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006870:	4b0d      	ldr	r3, [pc, #52]	; (80068a8 <prvAddNewTaskToReadyList+0xcc>)
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	2b00      	cmp	r3, #0
 8006876:	d00e      	beq.n	8006896 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006878:	4b0a      	ldr	r3, [pc, #40]	; (80068a4 <prvAddNewTaskToReadyList+0xc8>)
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006882:	429a      	cmp	r2, r3
 8006884:	d207      	bcs.n	8006896 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006886:	4b0c      	ldr	r3, [pc, #48]	; (80068b8 <prvAddNewTaskToReadyList+0xdc>)
 8006888:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800688c:	601a      	str	r2, [r3, #0]
 800688e:	f3bf 8f4f 	dsb	sy
 8006892:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006896:	bf00      	nop
 8006898:	3708      	adds	r7, #8
 800689a:	46bd      	mov	sp, r7
 800689c:	bd80      	pop	{r7, pc}
 800689e:	bf00      	nop
 80068a0:	2000150c 	.word	0x2000150c
 80068a4:	20001038 	.word	0x20001038
 80068a8:	20001518 	.word	0x20001518
 80068ac:	20001528 	.word	0x20001528
 80068b0:	20001514 	.word	0x20001514
 80068b4:	2000103c 	.word	0x2000103c
 80068b8:	e000ed04 	.word	0xe000ed04

080068bc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80068bc:	b580      	push	{r7, lr}
 80068be:	b084      	sub	sp, #16
 80068c0:	af00      	add	r7, sp, #0
 80068c2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80068c4:	2300      	movs	r3, #0
 80068c6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d017      	beq.n	80068fe <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80068ce:	4b13      	ldr	r3, [pc, #76]	; (800691c <vTaskDelay+0x60>)
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d00a      	beq.n	80068ec <vTaskDelay+0x30>
	__asm volatile
 80068d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068da:	f383 8811 	msr	BASEPRI, r3
 80068de:	f3bf 8f6f 	isb	sy
 80068e2:	f3bf 8f4f 	dsb	sy
 80068e6:	60bb      	str	r3, [r7, #8]
}
 80068e8:	bf00      	nop
 80068ea:	e7fe      	b.n	80068ea <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80068ec:	f000 f88a 	bl	8006a04 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80068f0:	2100      	movs	r1, #0
 80068f2:	6878      	ldr	r0, [r7, #4]
 80068f4:	f000 fcfe 	bl	80072f4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80068f8:	f000 f892 	bl	8006a20 <xTaskResumeAll>
 80068fc:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	2b00      	cmp	r3, #0
 8006902:	d107      	bne.n	8006914 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8006904:	4b06      	ldr	r3, [pc, #24]	; (8006920 <vTaskDelay+0x64>)
 8006906:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800690a:	601a      	str	r2, [r3, #0]
 800690c:	f3bf 8f4f 	dsb	sy
 8006910:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006914:	bf00      	nop
 8006916:	3710      	adds	r7, #16
 8006918:	46bd      	mov	sp, r7
 800691a:	bd80      	pop	{r7, pc}
 800691c:	20001534 	.word	0x20001534
 8006920:	e000ed04 	.word	0xe000ed04

08006924 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006924:	b580      	push	{r7, lr}
 8006926:	b08a      	sub	sp, #40	; 0x28
 8006928:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800692a:	2300      	movs	r3, #0
 800692c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800692e:	2300      	movs	r3, #0
 8006930:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006932:	463a      	mov	r2, r7
 8006934:	1d39      	adds	r1, r7, #4
 8006936:	f107 0308 	add.w	r3, r7, #8
 800693a:	4618      	mov	r0, r3
 800693c:	f7fe ff78 	bl	8005830 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006940:	6839      	ldr	r1, [r7, #0]
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	68ba      	ldr	r2, [r7, #8]
 8006946:	9202      	str	r2, [sp, #8]
 8006948:	9301      	str	r3, [sp, #4]
 800694a:	2300      	movs	r3, #0
 800694c:	9300      	str	r3, [sp, #0]
 800694e:	2300      	movs	r3, #0
 8006950:	460a      	mov	r2, r1
 8006952:	4924      	ldr	r1, [pc, #144]	; (80069e4 <vTaskStartScheduler+0xc0>)
 8006954:	4824      	ldr	r0, [pc, #144]	; (80069e8 <vTaskStartScheduler+0xc4>)
 8006956:	f7ff fdf9 	bl	800654c <xTaskCreateStatic>
 800695a:	4603      	mov	r3, r0
 800695c:	4a23      	ldr	r2, [pc, #140]	; (80069ec <vTaskStartScheduler+0xc8>)
 800695e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006960:	4b22      	ldr	r3, [pc, #136]	; (80069ec <vTaskStartScheduler+0xc8>)
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	2b00      	cmp	r3, #0
 8006966:	d002      	beq.n	800696e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006968:	2301      	movs	r3, #1
 800696a:	617b      	str	r3, [r7, #20]
 800696c:	e001      	b.n	8006972 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800696e:	2300      	movs	r3, #0
 8006970:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8006972:	697b      	ldr	r3, [r7, #20]
 8006974:	2b01      	cmp	r3, #1
 8006976:	d102      	bne.n	800697e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8006978:	f000 fd10 	bl	800739c <xTimerCreateTimerTask>
 800697c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800697e:	697b      	ldr	r3, [r7, #20]
 8006980:	2b01      	cmp	r3, #1
 8006982:	d11b      	bne.n	80069bc <vTaskStartScheduler+0x98>
	__asm volatile
 8006984:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006988:	f383 8811 	msr	BASEPRI, r3
 800698c:	f3bf 8f6f 	isb	sy
 8006990:	f3bf 8f4f 	dsb	sy
 8006994:	613b      	str	r3, [r7, #16]
}
 8006996:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006998:	4b15      	ldr	r3, [pc, #84]	; (80069f0 <vTaskStartScheduler+0xcc>)
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	3354      	adds	r3, #84	; 0x54
 800699e:	4a15      	ldr	r2, [pc, #84]	; (80069f4 <vTaskStartScheduler+0xd0>)
 80069a0:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80069a2:	4b15      	ldr	r3, [pc, #84]	; (80069f8 <vTaskStartScheduler+0xd4>)
 80069a4:	f04f 32ff 	mov.w	r2, #4294967295
 80069a8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80069aa:	4b14      	ldr	r3, [pc, #80]	; (80069fc <vTaskStartScheduler+0xd8>)
 80069ac:	2201      	movs	r2, #1
 80069ae:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80069b0:	4b13      	ldr	r3, [pc, #76]	; (8006a00 <vTaskStartScheduler+0xdc>)
 80069b2:	2200      	movs	r2, #0
 80069b4:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80069b6:	f001 f8cb 	bl	8007b50 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80069ba:	e00e      	b.n	80069da <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80069bc:	697b      	ldr	r3, [r7, #20]
 80069be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069c2:	d10a      	bne.n	80069da <vTaskStartScheduler+0xb6>
	__asm volatile
 80069c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069c8:	f383 8811 	msr	BASEPRI, r3
 80069cc:	f3bf 8f6f 	isb	sy
 80069d0:	f3bf 8f4f 	dsb	sy
 80069d4:	60fb      	str	r3, [r7, #12]
}
 80069d6:	bf00      	nop
 80069d8:	e7fe      	b.n	80069d8 <vTaskStartScheduler+0xb4>
}
 80069da:	bf00      	nop
 80069dc:	3718      	adds	r7, #24
 80069de:	46bd      	mov	sp, r7
 80069e0:	bd80      	pop	{r7, pc}
 80069e2:	bf00      	nop
 80069e4:	08009a2c 	.word	0x08009a2c
 80069e8:	08007029 	.word	0x08007029
 80069ec:	20001530 	.word	0x20001530
 80069f0:	20001038 	.word	0x20001038
 80069f4:	20000010 	.word	0x20000010
 80069f8:	2000152c 	.word	0x2000152c
 80069fc:	20001518 	.word	0x20001518
 8006a00:	20001510 	.word	0x20001510

08006a04 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006a04:	b480      	push	{r7}
 8006a06:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8006a08:	4b04      	ldr	r3, [pc, #16]	; (8006a1c <vTaskSuspendAll+0x18>)
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	3301      	adds	r3, #1
 8006a0e:	4a03      	ldr	r2, [pc, #12]	; (8006a1c <vTaskSuspendAll+0x18>)
 8006a10:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8006a12:	bf00      	nop
 8006a14:	46bd      	mov	sp, r7
 8006a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a1a:	4770      	bx	lr
 8006a1c:	20001534 	.word	0x20001534

08006a20 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006a20:	b580      	push	{r7, lr}
 8006a22:	b084      	sub	sp, #16
 8006a24:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006a26:	2300      	movs	r3, #0
 8006a28:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006a2a:	2300      	movs	r3, #0
 8006a2c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006a2e:	4b42      	ldr	r3, [pc, #264]	; (8006b38 <xTaskResumeAll+0x118>)
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d10a      	bne.n	8006a4c <xTaskResumeAll+0x2c>
	__asm volatile
 8006a36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a3a:	f383 8811 	msr	BASEPRI, r3
 8006a3e:	f3bf 8f6f 	isb	sy
 8006a42:	f3bf 8f4f 	dsb	sy
 8006a46:	603b      	str	r3, [r7, #0]
}
 8006a48:	bf00      	nop
 8006a4a:	e7fe      	b.n	8006a4a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006a4c:	f001 f922 	bl	8007c94 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006a50:	4b39      	ldr	r3, [pc, #228]	; (8006b38 <xTaskResumeAll+0x118>)
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	3b01      	subs	r3, #1
 8006a56:	4a38      	ldr	r2, [pc, #224]	; (8006b38 <xTaskResumeAll+0x118>)
 8006a58:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006a5a:	4b37      	ldr	r3, [pc, #220]	; (8006b38 <xTaskResumeAll+0x118>)
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d162      	bne.n	8006b28 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006a62:	4b36      	ldr	r3, [pc, #216]	; (8006b3c <xTaskResumeAll+0x11c>)
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d05e      	beq.n	8006b28 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006a6a:	e02f      	b.n	8006acc <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006a6c:	4b34      	ldr	r3, [pc, #208]	; (8006b40 <xTaskResumeAll+0x120>)
 8006a6e:	68db      	ldr	r3, [r3, #12]
 8006a70:	68db      	ldr	r3, [r3, #12]
 8006a72:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	3318      	adds	r3, #24
 8006a78:	4618      	mov	r0, r3
 8006a7a:	f7fe ff97 	bl	80059ac <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	3304      	adds	r3, #4
 8006a82:	4618      	mov	r0, r3
 8006a84:	f7fe ff92 	bl	80059ac <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a8c:	4b2d      	ldr	r3, [pc, #180]	; (8006b44 <xTaskResumeAll+0x124>)
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	429a      	cmp	r2, r3
 8006a92:	d903      	bls.n	8006a9c <xTaskResumeAll+0x7c>
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a98:	4a2a      	ldr	r2, [pc, #168]	; (8006b44 <xTaskResumeAll+0x124>)
 8006a9a:	6013      	str	r3, [r2, #0]
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006aa0:	4613      	mov	r3, r2
 8006aa2:	009b      	lsls	r3, r3, #2
 8006aa4:	4413      	add	r3, r2
 8006aa6:	009b      	lsls	r3, r3, #2
 8006aa8:	4a27      	ldr	r2, [pc, #156]	; (8006b48 <xTaskResumeAll+0x128>)
 8006aaa:	441a      	add	r2, r3
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	3304      	adds	r3, #4
 8006ab0:	4619      	mov	r1, r3
 8006ab2:	4610      	mov	r0, r2
 8006ab4:	f7fe ff1d 	bl	80058f2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006abc:	4b23      	ldr	r3, [pc, #140]	; (8006b4c <xTaskResumeAll+0x12c>)
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ac2:	429a      	cmp	r2, r3
 8006ac4:	d302      	bcc.n	8006acc <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8006ac6:	4b22      	ldr	r3, [pc, #136]	; (8006b50 <xTaskResumeAll+0x130>)
 8006ac8:	2201      	movs	r2, #1
 8006aca:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006acc:	4b1c      	ldr	r3, [pc, #112]	; (8006b40 <xTaskResumeAll+0x120>)
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d1cb      	bne.n	8006a6c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d001      	beq.n	8006ade <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006ada:	f000 fb5f 	bl	800719c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8006ade:	4b1d      	ldr	r3, [pc, #116]	; (8006b54 <xTaskResumeAll+0x134>)
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d010      	beq.n	8006b0c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006aea:	f000 f847 	bl	8006b7c <xTaskIncrementTick>
 8006aee:	4603      	mov	r3, r0
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d002      	beq.n	8006afa <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8006af4:	4b16      	ldr	r3, [pc, #88]	; (8006b50 <xTaskResumeAll+0x130>)
 8006af6:	2201      	movs	r2, #1
 8006af8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	3b01      	subs	r3, #1
 8006afe:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d1f1      	bne.n	8006aea <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8006b06:	4b13      	ldr	r3, [pc, #76]	; (8006b54 <xTaskResumeAll+0x134>)
 8006b08:	2200      	movs	r2, #0
 8006b0a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006b0c:	4b10      	ldr	r3, [pc, #64]	; (8006b50 <xTaskResumeAll+0x130>)
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d009      	beq.n	8006b28 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006b14:	2301      	movs	r3, #1
 8006b16:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006b18:	4b0f      	ldr	r3, [pc, #60]	; (8006b58 <xTaskResumeAll+0x138>)
 8006b1a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006b1e:	601a      	str	r2, [r3, #0]
 8006b20:	f3bf 8f4f 	dsb	sy
 8006b24:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006b28:	f001 f8e4 	bl	8007cf4 <vPortExitCritical>

	return xAlreadyYielded;
 8006b2c:	68bb      	ldr	r3, [r7, #8]
}
 8006b2e:	4618      	mov	r0, r3
 8006b30:	3710      	adds	r7, #16
 8006b32:	46bd      	mov	sp, r7
 8006b34:	bd80      	pop	{r7, pc}
 8006b36:	bf00      	nop
 8006b38:	20001534 	.word	0x20001534
 8006b3c:	2000150c 	.word	0x2000150c
 8006b40:	200014cc 	.word	0x200014cc
 8006b44:	20001514 	.word	0x20001514
 8006b48:	2000103c 	.word	0x2000103c
 8006b4c:	20001038 	.word	0x20001038
 8006b50:	20001520 	.word	0x20001520
 8006b54:	2000151c 	.word	0x2000151c
 8006b58:	e000ed04 	.word	0xe000ed04

08006b5c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006b5c:	b480      	push	{r7}
 8006b5e:	b083      	sub	sp, #12
 8006b60:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8006b62:	4b05      	ldr	r3, [pc, #20]	; (8006b78 <xTaskGetTickCount+0x1c>)
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006b68:	687b      	ldr	r3, [r7, #4]
}
 8006b6a:	4618      	mov	r0, r3
 8006b6c:	370c      	adds	r7, #12
 8006b6e:	46bd      	mov	sp, r7
 8006b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b74:	4770      	bx	lr
 8006b76:	bf00      	nop
 8006b78:	20001510 	.word	0x20001510

08006b7c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006b7c:	b580      	push	{r7, lr}
 8006b7e:	b086      	sub	sp, #24
 8006b80:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006b82:	2300      	movs	r3, #0
 8006b84:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006b86:	4b4f      	ldr	r3, [pc, #316]	; (8006cc4 <xTaskIncrementTick+0x148>)
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	f040 808f 	bne.w	8006cae <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006b90:	4b4d      	ldr	r3, [pc, #308]	; (8006cc8 <xTaskIncrementTick+0x14c>)
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	3301      	adds	r3, #1
 8006b96:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006b98:	4a4b      	ldr	r2, [pc, #300]	; (8006cc8 <xTaskIncrementTick+0x14c>)
 8006b9a:	693b      	ldr	r3, [r7, #16]
 8006b9c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006b9e:	693b      	ldr	r3, [r7, #16]
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d120      	bne.n	8006be6 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8006ba4:	4b49      	ldr	r3, [pc, #292]	; (8006ccc <xTaskIncrementTick+0x150>)
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d00a      	beq.n	8006bc4 <xTaskIncrementTick+0x48>
	__asm volatile
 8006bae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bb2:	f383 8811 	msr	BASEPRI, r3
 8006bb6:	f3bf 8f6f 	isb	sy
 8006bba:	f3bf 8f4f 	dsb	sy
 8006bbe:	603b      	str	r3, [r7, #0]
}
 8006bc0:	bf00      	nop
 8006bc2:	e7fe      	b.n	8006bc2 <xTaskIncrementTick+0x46>
 8006bc4:	4b41      	ldr	r3, [pc, #260]	; (8006ccc <xTaskIncrementTick+0x150>)
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	60fb      	str	r3, [r7, #12]
 8006bca:	4b41      	ldr	r3, [pc, #260]	; (8006cd0 <xTaskIncrementTick+0x154>)
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	4a3f      	ldr	r2, [pc, #252]	; (8006ccc <xTaskIncrementTick+0x150>)
 8006bd0:	6013      	str	r3, [r2, #0]
 8006bd2:	4a3f      	ldr	r2, [pc, #252]	; (8006cd0 <xTaskIncrementTick+0x154>)
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	6013      	str	r3, [r2, #0]
 8006bd8:	4b3e      	ldr	r3, [pc, #248]	; (8006cd4 <xTaskIncrementTick+0x158>)
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	3301      	adds	r3, #1
 8006bde:	4a3d      	ldr	r2, [pc, #244]	; (8006cd4 <xTaskIncrementTick+0x158>)
 8006be0:	6013      	str	r3, [r2, #0]
 8006be2:	f000 fadb 	bl	800719c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006be6:	4b3c      	ldr	r3, [pc, #240]	; (8006cd8 <xTaskIncrementTick+0x15c>)
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	693a      	ldr	r2, [r7, #16]
 8006bec:	429a      	cmp	r2, r3
 8006bee:	d349      	bcc.n	8006c84 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006bf0:	4b36      	ldr	r3, [pc, #216]	; (8006ccc <xTaskIncrementTick+0x150>)
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d104      	bne.n	8006c04 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006bfa:	4b37      	ldr	r3, [pc, #220]	; (8006cd8 <xTaskIncrementTick+0x15c>)
 8006bfc:	f04f 32ff 	mov.w	r2, #4294967295
 8006c00:	601a      	str	r2, [r3, #0]
					break;
 8006c02:	e03f      	b.n	8006c84 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006c04:	4b31      	ldr	r3, [pc, #196]	; (8006ccc <xTaskIncrementTick+0x150>)
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	68db      	ldr	r3, [r3, #12]
 8006c0a:	68db      	ldr	r3, [r3, #12]
 8006c0c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006c0e:	68bb      	ldr	r3, [r7, #8]
 8006c10:	685b      	ldr	r3, [r3, #4]
 8006c12:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006c14:	693a      	ldr	r2, [r7, #16]
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	429a      	cmp	r2, r3
 8006c1a:	d203      	bcs.n	8006c24 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006c1c:	4a2e      	ldr	r2, [pc, #184]	; (8006cd8 <xTaskIncrementTick+0x15c>)
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006c22:	e02f      	b.n	8006c84 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006c24:	68bb      	ldr	r3, [r7, #8]
 8006c26:	3304      	adds	r3, #4
 8006c28:	4618      	mov	r0, r3
 8006c2a:	f7fe febf 	bl	80059ac <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006c2e:	68bb      	ldr	r3, [r7, #8]
 8006c30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d004      	beq.n	8006c40 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006c36:	68bb      	ldr	r3, [r7, #8]
 8006c38:	3318      	adds	r3, #24
 8006c3a:	4618      	mov	r0, r3
 8006c3c:	f7fe feb6 	bl	80059ac <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006c40:	68bb      	ldr	r3, [r7, #8]
 8006c42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c44:	4b25      	ldr	r3, [pc, #148]	; (8006cdc <xTaskIncrementTick+0x160>)
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	429a      	cmp	r2, r3
 8006c4a:	d903      	bls.n	8006c54 <xTaskIncrementTick+0xd8>
 8006c4c:	68bb      	ldr	r3, [r7, #8]
 8006c4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c50:	4a22      	ldr	r2, [pc, #136]	; (8006cdc <xTaskIncrementTick+0x160>)
 8006c52:	6013      	str	r3, [r2, #0]
 8006c54:	68bb      	ldr	r3, [r7, #8]
 8006c56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c58:	4613      	mov	r3, r2
 8006c5a:	009b      	lsls	r3, r3, #2
 8006c5c:	4413      	add	r3, r2
 8006c5e:	009b      	lsls	r3, r3, #2
 8006c60:	4a1f      	ldr	r2, [pc, #124]	; (8006ce0 <xTaskIncrementTick+0x164>)
 8006c62:	441a      	add	r2, r3
 8006c64:	68bb      	ldr	r3, [r7, #8]
 8006c66:	3304      	adds	r3, #4
 8006c68:	4619      	mov	r1, r3
 8006c6a:	4610      	mov	r0, r2
 8006c6c:	f7fe fe41 	bl	80058f2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006c70:	68bb      	ldr	r3, [r7, #8]
 8006c72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c74:	4b1b      	ldr	r3, [pc, #108]	; (8006ce4 <xTaskIncrementTick+0x168>)
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c7a:	429a      	cmp	r2, r3
 8006c7c:	d3b8      	bcc.n	8006bf0 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8006c7e:	2301      	movs	r3, #1
 8006c80:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006c82:	e7b5      	b.n	8006bf0 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006c84:	4b17      	ldr	r3, [pc, #92]	; (8006ce4 <xTaskIncrementTick+0x168>)
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c8a:	4915      	ldr	r1, [pc, #84]	; (8006ce0 <xTaskIncrementTick+0x164>)
 8006c8c:	4613      	mov	r3, r2
 8006c8e:	009b      	lsls	r3, r3, #2
 8006c90:	4413      	add	r3, r2
 8006c92:	009b      	lsls	r3, r3, #2
 8006c94:	440b      	add	r3, r1
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	2b01      	cmp	r3, #1
 8006c9a:	d901      	bls.n	8006ca0 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8006c9c:	2301      	movs	r3, #1
 8006c9e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8006ca0:	4b11      	ldr	r3, [pc, #68]	; (8006ce8 <xTaskIncrementTick+0x16c>)
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d007      	beq.n	8006cb8 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8006ca8:	2301      	movs	r3, #1
 8006caa:	617b      	str	r3, [r7, #20]
 8006cac:	e004      	b.n	8006cb8 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8006cae:	4b0f      	ldr	r3, [pc, #60]	; (8006cec <xTaskIncrementTick+0x170>)
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	3301      	adds	r3, #1
 8006cb4:	4a0d      	ldr	r2, [pc, #52]	; (8006cec <xTaskIncrementTick+0x170>)
 8006cb6:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8006cb8:	697b      	ldr	r3, [r7, #20]
}
 8006cba:	4618      	mov	r0, r3
 8006cbc:	3718      	adds	r7, #24
 8006cbe:	46bd      	mov	sp, r7
 8006cc0:	bd80      	pop	{r7, pc}
 8006cc2:	bf00      	nop
 8006cc4:	20001534 	.word	0x20001534
 8006cc8:	20001510 	.word	0x20001510
 8006ccc:	200014c4 	.word	0x200014c4
 8006cd0:	200014c8 	.word	0x200014c8
 8006cd4:	20001524 	.word	0x20001524
 8006cd8:	2000152c 	.word	0x2000152c
 8006cdc:	20001514 	.word	0x20001514
 8006ce0:	2000103c 	.word	0x2000103c
 8006ce4:	20001038 	.word	0x20001038
 8006ce8:	20001520 	.word	0x20001520
 8006cec:	2000151c 	.word	0x2000151c

08006cf0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006cf0:	b480      	push	{r7}
 8006cf2:	b085      	sub	sp, #20
 8006cf4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006cf6:	4b2a      	ldr	r3, [pc, #168]	; (8006da0 <vTaskSwitchContext+0xb0>)
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d003      	beq.n	8006d06 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006cfe:	4b29      	ldr	r3, [pc, #164]	; (8006da4 <vTaskSwitchContext+0xb4>)
 8006d00:	2201      	movs	r2, #1
 8006d02:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006d04:	e046      	b.n	8006d94 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8006d06:	4b27      	ldr	r3, [pc, #156]	; (8006da4 <vTaskSwitchContext+0xb4>)
 8006d08:	2200      	movs	r2, #0
 8006d0a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006d0c:	4b26      	ldr	r3, [pc, #152]	; (8006da8 <vTaskSwitchContext+0xb8>)
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	60fb      	str	r3, [r7, #12]
 8006d12:	e010      	b.n	8006d36 <vTaskSwitchContext+0x46>
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d10a      	bne.n	8006d30 <vTaskSwitchContext+0x40>
	__asm volatile
 8006d1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d1e:	f383 8811 	msr	BASEPRI, r3
 8006d22:	f3bf 8f6f 	isb	sy
 8006d26:	f3bf 8f4f 	dsb	sy
 8006d2a:	607b      	str	r3, [r7, #4]
}
 8006d2c:	bf00      	nop
 8006d2e:	e7fe      	b.n	8006d2e <vTaskSwitchContext+0x3e>
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	3b01      	subs	r3, #1
 8006d34:	60fb      	str	r3, [r7, #12]
 8006d36:	491d      	ldr	r1, [pc, #116]	; (8006dac <vTaskSwitchContext+0xbc>)
 8006d38:	68fa      	ldr	r2, [r7, #12]
 8006d3a:	4613      	mov	r3, r2
 8006d3c:	009b      	lsls	r3, r3, #2
 8006d3e:	4413      	add	r3, r2
 8006d40:	009b      	lsls	r3, r3, #2
 8006d42:	440b      	add	r3, r1
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d0e4      	beq.n	8006d14 <vTaskSwitchContext+0x24>
 8006d4a:	68fa      	ldr	r2, [r7, #12]
 8006d4c:	4613      	mov	r3, r2
 8006d4e:	009b      	lsls	r3, r3, #2
 8006d50:	4413      	add	r3, r2
 8006d52:	009b      	lsls	r3, r3, #2
 8006d54:	4a15      	ldr	r2, [pc, #84]	; (8006dac <vTaskSwitchContext+0xbc>)
 8006d56:	4413      	add	r3, r2
 8006d58:	60bb      	str	r3, [r7, #8]
 8006d5a:	68bb      	ldr	r3, [r7, #8]
 8006d5c:	685b      	ldr	r3, [r3, #4]
 8006d5e:	685a      	ldr	r2, [r3, #4]
 8006d60:	68bb      	ldr	r3, [r7, #8]
 8006d62:	605a      	str	r2, [r3, #4]
 8006d64:	68bb      	ldr	r3, [r7, #8]
 8006d66:	685a      	ldr	r2, [r3, #4]
 8006d68:	68bb      	ldr	r3, [r7, #8]
 8006d6a:	3308      	adds	r3, #8
 8006d6c:	429a      	cmp	r2, r3
 8006d6e:	d104      	bne.n	8006d7a <vTaskSwitchContext+0x8a>
 8006d70:	68bb      	ldr	r3, [r7, #8]
 8006d72:	685b      	ldr	r3, [r3, #4]
 8006d74:	685a      	ldr	r2, [r3, #4]
 8006d76:	68bb      	ldr	r3, [r7, #8]
 8006d78:	605a      	str	r2, [r3, #4]
 8006d7a:	68bb      	ldr	r3, [r7, #8]
 8006d7c:	685b      	ldr	r3, [r3, #4]
 8006d7e:	68db      	ldr	r3, [r3, #12]
 8006d80:	4a0b      	ldr	r2, [pc, #44]	; (8006db0 <vTaskSwitchContext+0xc0>)
 8006d82:	6013      	str	r3, [r2, #0]
 8006d84:	4a08      	ldr	r2, [pc, #32]	; (8006da8 <vTaskSwitchContext+0xb8>)
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006d8a:	4b09      	ldr	r3, [pc, #36]	; (8006db0 <vTaskSwitchContext+0xc0>)
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	3354      	adds	r3, #84	; 0x54
 8006d90:	4a08      	ldr	r2, [pc, #32]	; (8006db4 <vTaskSwitchContext+0xc4>)
 8006d92:	6013      	str	r3, [r2, #0]
}
 8006d94:	bf00      	nop
 8006d96:	3714      	adds	r7, #20
 8006d98:	46bd      	mov	sp, r7
 8006d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d9e:	4770      	bx	lr
 8006da0:	20001534 	.word	0x20001534
 8006da4:	20001520 	.word	0x20001520
 8006da8:	20001514 	.word	0x20001514
 8006dac:	2000103c 	.word	0x2000103c
 8006db0:	20001038 	.word	0x20001038
 8006db4:	20000010 	.word	0x20000010

08006db8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006db8:	b580      	push	{r7, lr}
 8006dba:	b084      	sub	sp, #16
 8006dbc:	af00      	add	r7, sp, #0
 8006dbe:	6078      	str	r0, [r7, #4]
 8006dc0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d10a      	bne.n	8006dde <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8006dc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dcc:	f383 8811 	msr	BASEPRI, r3
 8006dd0:	f3bf 8f6f 	isb	sy
 8006dd4:	f3bf 8f4f 	dsb	sy
 8006dd8:	60fb      	str	r3, [r7, #12]
}
 8006dda:	bf00      	nop
 8006ddc:	e7fe      	b.n	8006ddc <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006dde:	4b07      	ldr	r3, [pc, #28]	; (8006dfc <vTaskPlaceOnEventList+0x44>)
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	3318      	adds	r3, #24
 8006de4:	4619      	mov	r1, r3
 8006de6:	6878      	ldr	r0, [r7, #4]
 8006de8:	f7fe fda7 	bl	800593a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006dec:	2101      	movs	r1, #1
 8006dee:	6838      	ldr	r0, [r7, #0]
 8006df0:	f000 fa80 	bl	80072f4 <prvAddCurrentTaskToDelayedList>
}
 8006df4:	bf00      	nop
 8006df6:	3710      	adds	r7, #16
 8006df8:	46bd      	mov	sp, r7
 8006dfa:	bd80      	pop	{r7, pc}
 8006dfc:	20001038 	.word	0x20001038

08006e00 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006e00:	b580      	push	{r7, lr}
 8006e02:	b086      	sub	sp, #24
 8006e04:	af00      	add	r7, sp, #0
 8006e06:	60f8      	str	r0, [r7, #12]
 8006e08:	60b9      	str	r1, [r7, #8]
 8006e0a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d10a      	bne.n	8006e28 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8006e12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e16:	f383 8811 	msr	BASEPRI, r3
 8006e1a:	f3bf 8f6f 	isb	sy
 8006e1e:	f3bf 8f4f 	dsb	sy
 8006e22:	617b      	str	r3, [r7, #20]
}
 8006e24:	bf00      	nop
 8006e26:	e7fe      	b.n	8006e26 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006e28:	4b0a      	ldr	r3, [pc, #40]	; (8006e54 <vTaskPlaceOnEventListRestricted+0x54>)
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	3318      	adds	r3, #24
 8006e2e:	4619      	mov	r1, r3
 8006e30:	68f8      	ldr	r0, [r7, #12]
 8006e32:	f7fe fd5e 	bl	80058f2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d002      	beq.n	8006e42 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8006e3c:	f04f 33ff 	mov.w	r3, #4294967295
 8006e40:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8006e42:	6879      	ldr	r1, [r7, #4]
 8006e44:	68b8      	ldr	r0, [r7, #8]
 8006e46:	f000 fa55 	bl	80072f4 <prvAddCurrentTaskToDelayedList>
	}
 8006e4a:	bf00      	nop
 8006e4c:	3718      	adds	r7, #24
 8006e4e:	46bd      	mov	sp, r7
 8006e50:	bd80      	pop	{r7, pc}
 8006e52:	bf00      	nop
 8006e54:	20001038 	.word	0x20001038

08006e58 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006e58:	b580      	push	{r7, lr}
 8006e5a:	b086      	sub	sp, #24
 8006e5c:	af00      	add	r7, sp, #0
 8006e5e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	68db      	ldr	r3, [r3, #12]
 8006e64:	68db      	ldr	r3, [r3, #12]
 8006e66:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006e68:	693b      	ldr	r3, [r7, #16]
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d10a      	bne.n	8006e84 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8006e6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e72:	f383 8811 	msr	BASEPRI, r3
 8006e76:	f3bf 8f6f 	isb	sy
 8006e7a:	f3bf 8f4f 	dsb	sy
 8006e7e:	60fb      	str	r3, [r7, #12]
}
 8006e80:	bf00      	nop
 8006e82:	e7fe      	b.n	8006e82 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006e84:	693b      	ldr	r3, [r7, #16]
 8006e86:	3318      	adds	r3, #24
 8006e88:	4618      	mov	r0, r3
 8006e8a:	f7fe fd8f 	bl	80059ac <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006e8e:	4b1e      	ldr	r3, [pc, #120]	; (8006f08 <xTaskRemoveFromEventList+0xb0>)
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d11d      	bne.n	8006ed2 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006e96:	693b      	ldr	r3, [r7, #16]
 8006e98:	3304      	adds	r3, #4
 8006e9a:	4618      	mov	r0, r3
 8006e9c:	f7fe fd86 	bl	80059ac <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006ea0:	693b      	ldr	r3, [r7, #16]
 8006ea2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ea4:	4b19      	ldr	r3, [pc, #100]	; (8006f0c <xTaskRemoveFromEventList+0xb4>)
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	429a      	cmp	r2, r3
 8006eaa:	d903      	bls.n	8006eb4 <xTaskRemoveFromEventList+0x5c>
 8006eac:	693b      	ldr	r3, [r7, #16]
 8006eae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006eb0:	4a16      	ldr	r2, [pc, #88]	; (8006f0c <xTaskRemoveFromEventList+0xb4>)
 8006eb2:	6013      	str	r3, [r2, #0]
 8006eb4:	693b      	ldr	r3, [r7, #16]
 8006eb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006eb8:	4613      	mov	r3, r2
 8006eba:	009b      	lsls	r3, r3, #2
 8006ebc:	4413      	add	r3, r2
 8006ebe:	009b      	lsls	r3, r3, #2
 8006ec0:	4a13      	ldr	r2, [pc, #76]	; (8006f10 <xTaskRemoveFromEventList+0xb8>)
 8006ec2:	441a      	add	r2, r3
 8006ec4:	693b      	ldr	r3, [r7, #16]
 8006ec6:	3304      	adds	r3, #4
 8006ec8:	4619      	mov	r1, r3
 8006eca:	4610      	mov	r0, r2
 8006ecc:	f7fe fd11 	bl	80058f2 <vListInsertEnd>
 8006ed0:	e005      	b.n	8006ede <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006ed2:	693b      	ldr	r3, [r7, #16]
 8006ed4:	3318      	adds	r3, #24
 8006ed6:	4619      	mov	r1, r3
 8006ed8:	480e      	ldr	r0, [pc, #56]	; (8006f14 <xTaskRemoveFromEventList+0xbc>)
 8006eda:	f7fe fd0a 	bl	80058f2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006ede:	693b      	ldr	r3, [r7, #16]
 8006ee0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ee2:	4b0d      	ldr	r3, [pc, #52]	; (8006f18 <xTaskRemoveFromEventList+0xc0>)
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ee8:	429a      	cmp	r2, r3
 8006eea:	d905      	bls.n	8006ef8 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006eec:	2301      	movs	r3, #1
 8006eee:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006ef0:	4b0a      	ldr	r3, [pc, #40]	; (8006f1c <xTaskRemoveFromEventList+0xc4>)
 8006ef2:	2201      	movs	r2, #1
 8006ef4:	601a      	str	r2, [r3, #0]
 8006ef6:	e001      	b.n	8006efc <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8006ef8:	2300      	movs	r3, #0
 8006efa:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8006efc:	697b      	ldr	r3, [r7, #20]
}
 8006efe:	4618      	mov	r0, r3
 8006f00:	3718      	adds	r7, #24
 8006f02:	46bd      	mov	sp, r7
 8006f04:	bd80      	pop	{r7, pc}
 8006f06:	bf00      	nop
 8006f08:	20001534 	.word	0x20001534
 8006f0c:	20001514 	.word	0x20001514
 8006f10:	2000103c 	.word	0x2000103c
 8006f14:	200014cc 	.word	0x200014cc
 8006f18:	20001038 	.word	0x20001038
 8006f1c:	20001520 	.word	0x20001520

08006f20 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006f20:	b480      	push	{r7}
 8006f22:	b083      	sub	sp, #12
 8006f24:	af00      	add	r7, sp, #0
 8006f26:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006f28:	4b06      	ldr	r3, [pc, #24]	; (8006f44 <vTaskInternalSetTimeOutState+0x24>)
 8006f2a:	681a      	ldr	r2, [r3, #0]
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006f30:	4b05      	ldr	r3, [pc, #20]	; (8006f48 <vTaskInternalSetTimeOutState+0x28>)
 8006f32:	681a      	ldr	r2, [r3, #0]
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	605a      	str	r2, [r3, #4]
}
 8006f38:	bf00      	nop
 8006f3a:	370c      	adds	r7, #12
 8006f3c:	46bd      	mov	sp, r7
 8006f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f42:	4770      	bx	lr
 8006f44:	20001524 	.word	0x20001524
 8006f48:	20001510 	.word	0x20001510

08006f4c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006f4c:	b580      	push	{r7, lr}
 8006f4e:	b088      	sub	sp, #32
 8006f50:	af00      	add	r7, sp, #0
 8006f52:	6078      	str	r0, [r7, #4]
 8006f54:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d10a      	bne.n	8006f72 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8006f5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f60:	f383 8811 	msr	BASEPRI, r3
 8006f64:	f3bf 8f6f 	isb	sy
 8006f68:	f3bf 8f4f 	dsb	sy
 8006f6c:	613b      	str	r3, [r7, #16]
}
 8006f6e:	bf00      	nop
 8006f70:	e7fe      	b.n	8006f70 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8006f72:	683b      	ldr	r3, [r7, #0]
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d10a      	bne.n	8006f8e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8006f78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f7c:	f383 8811 	msr	BASEPRI, r3
 8006f80:	f3bf 8f6f 	isb	sy
 8006f84:	f3bf 8f4f 	dsb	sy
 8006f88:	60fb      	str	r3, [r7, #12]
}
 8006f8a:	bf00      	nop
 8006f8c:	e7fe      	b.n	8006f8c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8006f8e:	f000 fe81 	bl	8007c94 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8006f92:	4b1d      	ldr	r3, [pc, #116]	; (8007008 <xTaskCheckForTimeOut+0xbc>)
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	685b      	ldr	r3, [r3, #4]
 8006f9c:	69ba      	ldr	r2, [r7, #24]
 8006f9e:	1ad3      	subs	r3, r2, r3
 8006fa0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8006fa2:	683b      	ldr	r3, [r7, #0]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006faa:	d102      	bne.n	8006fb2 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006fac:	2300      	movs	r3, #0
 8006fae:	61fb      	str	r3, [r7, #28]
 8006fb0:	e023      	b.n	8006ffa <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	681a      	ldr	r2, [r3, #0]
 8006fb6:	4b15      	ldr	r3, [pc, #84]	; (800700c <xTaskCheckForTimeOut+0xc0>)
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	429a      	cmp	r2, r3
 8006fbc:	d007      	beq.n	8006fce <xTaskCheckForTimeOut+0x82>
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	685b      	ldr	r3, [r3, #4]
 8006fc2:	69ba      	ldr	r2, [r7, #24]
 8006fc4:	429a      	cmp	r2, r3
 8006fc6:	d302      	bcc.n	8006fce <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006fc8:	2301      	movs	r3, #1
 8006fca:	61fb      	str	r3, [r7, #28]
 8006fcc:	e015      	b.n	8006ffa <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006fce:	683b      	ldr	r3, [r7, #0]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	697a      	ldr	r2, [r7, #20]
 8006fd4:	429a      	cmp	r2, r3
 8006fd6:	d20b      	bcs.n	8006ff0 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006fd8:	683b      	ldr	r3, [r7, #0]
 8006fda:	681a      	ldr	r2, [r3, #0]
 8006fdc:	697b      	ldr	r3, [r7, #20]
 8006fde:	1ad2      	subs	r2, r2, r3
 8006fe0:	683b      	ldr	r3, [r7, #0]
 8006fe2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006fe4:	6878      	ldr	r0, [r7, #4]
 8006fe6:	f7ff ff9b 	bl	8006f20 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006fea:	2300      	movs	r3, #0
 8006fec:	61fb      	str	r3, [r7, #28]
 8006fee:	e004      	b.n	8006ffa <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8006ff0:	683b      	ldr	r3, [r7, #0]
 8006ff2:	2200      	movs	r2, #0
 8006ff4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006ff6:	2301      	movs	r3, #1
 8006ff8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8006ffa:	f000 fe7b 	bl	8007cf4 <vPortExitCritical>

	return xReturn;
 8006ffe:	69fb      	ldr	r3, [r7, #28]
}
 8007000:	4618      	mov	r0, r3
 8007002:	3720      	adds	r7, #32
 8007004:	46bd      	mov	sp, r7
 8007006:	bd80      	pop	{r7, pc}
 8007008:	20001510 	.word	0x20001510
 800700c:	20001524 	.word	0x20001524

08007010 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007010:	b480      	push	{r7}
 8007012:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007014:	4b03      	ldr	r3, [pc, #12]	; (8007024 <vTaskMissedYield+0x14>)
 8007016:	2201      	movs	r2, #1
 8007018:	601a      	str	r2, [r3, #0]
}
 800701a:	bf00      	nop
 800701c:	46bd      	mov	sp, r7
 800701e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007022:	4770      	bx	lr
 8007024:	20001520 	.word	0x20001520

08007028 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007028:	b580      	push	{r7, lr}
 800702a:	b082      	sub	sp, #8
 800702c:	af00      	add	r7, sp, #0
 800702e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007030:	f000 f852 	bl	80070d8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007034:	4b06      	ldr	r3, [pc, #24]	; (8007050 <prvIdleTask+0x28>)
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	2b01      	cmp	r3, #1
 800703a:	d9f9      	bls.n	8007030 <prvIdleTask+0x8>
			{
				taskYIELD();
 800703c:	4b05      	ldr	r3, [pc, #20]	; (8007054 <prvIdleTask+0x2c>)
 800703e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007042:	601a      	str	r2, [r3, #0]
 8007044:	f3bf 8f4f 	dsb	sy
 8007048:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800704c:	e7f0      	b.n	8007030 <prvIdleTask+0x8>
 800704e:	bf00      	nop
 8007050:	2000103c 	.word	0x2000103c
 8007054:	e000ed04 	.word	0xe000ed04

08007058 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007058:	b580      	push	{r7, lr}
 800705a:	b082      	sub	sp, #8
 800705c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800705e:	2300      	movs	r3, #0
 8007060:	607b      	str	r3, [r7, #4]
 8007062:	e00c      	b.n	800707e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007064:	687a      	ldr	r2, [r7, #4]
 8007066:	4613      	mov	r3, r2
 8007068:	009b      	lsls	r3, r3, #2
 800706a:	4413      	add	r3, r2
 800706c:	009b      	lsls	r3, r3, #2
 800706e:	4a12      	ldr	r2, [pc, #72]	; (80070b8 <prvInitialiseTaskLists+0x60>)
 8007070:	4413      	add	r3, r2
 8007072:	4618      	mov	r0, r3
 8007074:	f7fe fc10 	bl	8005898 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	3301      	adds	r3, #1
 800707c:	607b      	str	r3, [r7, #4]
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	2b37      	cmp	r3, #55	; 0x37
 8007082:	d9ef      	bls.n	8007064 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007084:	480d      	ldr	r0, [pc, #52]	; (80070bc <prvInitialiseTaskLists+0x64>)
 8007086:	f7fe fc07 	bl	8005898 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800708a:	480d      	ldr	r0, [pc, #52]	; (80070c0 <prvInitialiseTaskLists+0x68>)
 800708c:	f7fe fc04 	bl	8005898 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007090:	480c      	ldr	r0, [pc, #48]	; (80070c4 <prvInitialiseTaskLists+0x6c>)
 8007092:	f7fe fc01 	bl	8005898 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007096:	480c      	ldr	r0, [pc, #48]	; (80070c8 <prvInitialiseTaskLists+0x70>)
 8007098:	f7fe fbfe 	bl	8005898 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800709c:	480b      	ldr	r0, [pc, #44]	; (80070cc <prvInitialiseTaskLists+0x74>)
 800709e:	f7fe fbfb 	bl	8005898 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80070a2:	4b0b      	ldr	r3, [pc, #44]	; (80070d0 <prvInitialiseTaskLists+0x78>)
 80070a4:	4a05      	ldr	r2, [pc, #20]	; (80070bc <prvInitialiseTaskLists+0x64>)
 80070a6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80070a8:	4b0a      	ldr	r3, [pc, #40]	; (80070d4 <prvInitialiseTaskLists+0x7c>)
 80070aa:	4a05      	ldr	r2, [pc, #20]	; (80070c0 <prvInitialiseTaskLists+0x68>)
 80070ac:	601a      	str	r2, [r3, #0]
}
 80070ae:	bf00      	nop
 80070b0:	3708      	adds	r7, #8
 80070b2:	46bd      	mov	sp, r7
 80070b4:	bd80      	pop	{r7, pc}
 80070b6:	bf00      	nop
 80070b8:	2000103c 	.word	0x2000103c
 80070bc:	2000149c 	.word	0x2000149c
 80070c0:	200014b0 	.word	0x200014b0
 80070c4:	200014cc 	.word	0x200014cc
 80070c8:	200014e0 	.word	0x200014e0
 80070cc:	200014f8 	.word	0x200014f8
 80070d0:	200014c4 	.word	0x200014c4
 80070d4:	200014c8 	.word	0x200014c8

080070d8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80070d8:	b580      	push	{r7, lr}
 80070da:	b082      	sub	sp, #8
 80070dc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80070de:	e019      	b.n	8007114 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80070e0:	f000 fdd8 	bl	8007c94 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80070e4:	4b10      	ldr	r3, [pc, #64]	; (8007128 <prvCheckTasksWaitingTermination+0x50>)
 80070e6:	68db      	ldr	r3, [r3, #12]
 80070e8:	68db      	ldr	r3, [r3, #12]
 80070ea:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	3304      	adds	r3, #4
 80070f0:	4618      	mov	r0, r3
 80070f2:	f7fe fc5b 	bl	80059ac <uxListRemove>
				--uxCurrentNumberOfTasks;
 80070f6:	4b0d      	ldr	r3, [pc, #52]	; (800712c <prvCheckTasksWaitingTermination+0x54>)
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	3b01      	subs	r3, #1
 80070fc:	4a0b      	ldr	r2, [pc, #44]	; (800712c <prvCheckTasksWaitingTermination+0x54>)
 80070fe:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007100:	4b0b      	ldr	r3, [pc, #44]	; (8007130 <prvCheckTasksWaitingTermination+0x58>)
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	3b01      	subs	r3, #1
 8007106:	4a0a      	ldr	r2, [pc, #40]	; (8007130 <prvCheckTasksWaitingTermination+0x58>)
 8007108:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800710a:	f000 fdf3 	bl	8007cf4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800710e:	6878      	ldr	r0, [r7, #4]
 8007110:	f000 f810 	bl	8007134 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007114:	4b06      	ldr	r3, [pc, #24]	; (8007130 <prvCheckTasksWaitingTermination+0x58>)
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	2b00      	cmp	r3, #0
 800711a:	d1e1      	bne.n	80070e0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800711c:	bf00      	nop
 800711e:	bf00      	nop
 8007120:	3708      	adds	r7, #8
 8007122:	46bd      	mov	sp, r7
 8007124:	bd80      	pop	{r7, pc}
 8007126:	bf00      	nop
 8007128:	200014e0 	.word	0x200014e0
 800712c:	2000150c 	.word	0x2000150c
 8007130:	200014f4 	.word	0x200014f4

08007134 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007134:	b580      	push	{r7, lr}
 8007136:	b084      	sub	sp, #16
 8007138:	af00      	add	r7, sp, #0
 800713a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	3354      	adds	r3, #84	; 0x54
 8007140:	4618      	mov	r0, r3
 8007142:	f001 fb1d 	bl	8008780 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800714c:	2b00      	cmp	r3, #0
 800714e:	d108      	bne.n	8007162 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007154:	4618      	mov	r0, r3
 8007156:	f000 ff8b 	bl	8008070 <vPortFree>
				vPortFree( pxTCB );
 800715a:	6878      	ldr	r0, [r7, #4]
 800715c:	f000 ff88 	bl	8008070 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007160:	e018      	b.n	8007194 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8007168:	2b01      	cmp	r3, #1
 800716a:	d103      	bne.n	8007174 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800716c:	6878      	ldr	r0, [r7, #4]
 800716e:	f000 ff7f 	bl	8008070 <vPortFree>
	}
 8007172:	e00f      	b.n	8007194 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800717a:	2b02      	cmp	r3, #2
 800717c:	d00a      	beq.n	8007194 <prvDeleteTCB+0x60>
	__asm volatile
 800717e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007182:	f383 8811 	msr	BASEPRI, r3
 8007186:	f3bf 8f6f 	isb	sy
 800718a:	f3bf 8f4f 	dsb	sy
 800718e:	60fb      	str	r3, [r7, #12]
}
 8007190:	bf00      	nop
 8007192:	e7fe      	b.n	8007192 <prvDeleteTCB+0x5e>
	}
 8007194:	bf00      	nop
 8007196:	3710      	adds	r7, #16
 8007198:	46bd      	mov	sp, r7
 800719a:	bd80      	pop	{r7, pc}

0800719c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800719c:	b480      	push	{r7}
 800719e:	b083      	sub	sp, #12
 80071a0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80071a2:	4b0c      	ldr	r3, [pc, #48]	; (80071d4 <prvResetNextTaskUnblockTime+0x38>)
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d104      	bne.n	80071b6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80071ac:	4b0a      	ldr	r3, [pc, #40]	; (80071d8 <prvResetNextTaskUnblockTime+0x3c>)
 80071ae:	f04f 32ff 	mov.w	r2, #4294967295
 80071b2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80071b4:	e008      	b.n	80071c8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80071b6:	4b07      	ldr	r3, [pc, #28]	; (80071d4 <prvResetNextTaskUnblockTime+0x38>)
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	68db      	ldr	r3, [r3, #12]
 80071bc:	68db      	ldr	r3, [r3, #12]
 80071be:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	685b      	ldr	r3, [r3, #4]
 80071c4:	4a04      	ldr	r2, [pc, #16]	; (80071d8 <prvResetNextTaskUnblockTime+0x3c>)
 80071c6:	6013      	str	r3, [r2, #0]
}
 80071c8:	bf00      	nop
 80071ca:	370c      	adds	r7, #12
 80071cc:	46bd      	mov	sp, r7
 80071ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071d2:	4770      	bx	lr
 80071d4:	200014c4 	.word	0x200014c4
 80071d8:	2000152c 	.word	0x2000152c

080071dc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80071dc:	b480      	push	{r7}
 80071de:	b083      	sub	sp, #12
 80071e0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80071e2:	4b0b      	ldr	r3, [pc, #44]	; (8007210 <xTaskGetSchedulerState+0x34>)
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d102      	bne.n	80071f0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80071ea:	2301      	movs	r3, #1
 80071ec:	607b      	str	r3, [r7, #4]
 80071ee:	e008      	b.n	8007202 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80071f0:	4b08      	ldr	r3, [pc, #32]	; (8007214 <xTaskGetSchedulerState+0x38>)
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d102      	bne.n	80071fe <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80071f8:	2302      	movs	r3, #2
 80071fa:	607b      	str	r3, [r7, #4]
 80071fc:	e001      	b.n	8007202 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80071fe:	2300      	movs	r3, #0
 8007200:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8007202:	687b      	ldr	r3, [r7, #4]
	}
 8007204:	4618      	mov	r0, r3
 8007206:	370c      	adds	r7, #12
 8007208:	46bd      	mov	sp, r7
 800720a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800720e:	4770      	bx	lr
 8007210:	20001518 	.word	0x20001518
 8007214:	20001534 	.word	0x20001534

08007218 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007218:	b580      	push	{r7, lr}
 800721a:	b086      	sub	sp, #24
 800721c:	af00      	add	r7, sp, #0
 800721e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8007224:	2300      	movs	r3, #0
 8007226:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	2b00      	cmp	r3, #0
 800722c:	d056      	beq.n	80072dc <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800722e:	4b2e      	ldr	r3, [pc, #184]	; (80072e8 <xTaskPriorityDisinherit+0xd0>)
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	693a      	ldr	r2, [r7, #16]
 8007234:	429a      	cmp	r2, r3
 8007236:	d00a      	beq.n	800724e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8007238:	f04f 0350 	mov.w	r3, #80	; 0x50
 800723c:	f383 8811 	msr	BASEPRI, r3
 8007240:	f3bf 8f6f 	isb	sy
 8007244:	f3bf 8f4f 	dsb	sy
 8007248:	60fb      	str	r3, [r7, #12]
}
 800724a:	bf00      	nop
 800724c:	e7fe      	b.n	800724c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800724e:	693b      	ldr	r3, [r7, #16]
 8007250:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007252:	2b00      	cmp	r3, #0
 8007254:	d10a      	bne.n	800726c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8007256:	f04f 0350 	mov.w	r3, #80	; 0x50
 800725a:	f383 8811 	msr	BASEPRI, r3
 800725e:	f3bf 8f6f 	isb	sy
 8007262:	f3bf 8f4f 	dsb	sy
 8007266:	60bb      	str	r3, [r7, #8]
}
 8007268:	bf00      	nop
 800726a:	e7fe      	b.n	800726a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800726c:	693b      	ldr	r3, [r7, #16]
 800726e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007270:	1e5a      	subs	r2, r3, #1
 8007272:	693b      	ldr	r3, [r7, #16]
 8007274:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007276:	693b      	ldr	r3, [r7, #16]
 8007278:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800727a:	693b      	ldr	r3, [r7, #16]
 800727c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800727e:	429a      	cmp	r2, r3
 8007280:	d02c      	beq.n	80072dc <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007282:	693b      	ldr	r3, [r7, #16]
 8007284:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007286:	2b00      	cmp	r3, #0
 8007288:	d128      	bne.n	80072dc <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800728a:	693b      	ldr	r3, [r7, #16]
 800728c:	3304      	adds	r3, #4
 800728e:	4618      	mov	r0, r3
 8007290:	f7fe fb8c 	bl	80059ac <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007294:	693b      	ldr	r3, [r7, #16]
 8007296:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007298:	693b      	ldr	r3, [r7, #16]
 800729a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800729c:	693b      	ldr	r3, [r7, #16]
 800729e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072a0:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80072a4:	693b      	ldr	r3, [r7, #16]
 80072a6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80072a8:	693b      	ldr	r3, [r7, #16]
 80072aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80072ac:	4b0f      	ldr	r3, [pc, #60]	; (80072ec <xTaskPriorityDisinherit+0xd4>)
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	429a      	cmp	r2, r3
 80072b2:	d903      	bls.n	80072bc <xTaskPriorityDisinherit+0xa4>
 80072b4:	693b      	ldr	r3, [r7, #16]
 80072b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072b8:	4a0c      	ldr	r2, [pc, #48]	; (80072ec <xTaskPriorityDisinherit+0xd4>)
 80072ba:	6013      	str	r3, [r2, #0]
 80072bc:	693b      	ldr	r3, [r7, #16]
 80072be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80072c0:	4613      	mov	r3, r2
 80072c2:	009b      	lsls	r3, r3, #2
 80072c4:	4413      	add	r3, r2
 80072c6:	009b      	lsls	r3, r3, #2
 80072c8:	4a09      	ldr	r2, [pc, #36]	; (80072f0 <xTaskPriorityDisinherit+0xd8>)
 80072ca:	441a      	add	r2, r3
 80072cc:	693b      	ldr	r3, [r7, #16]
 80072ce:	3304      	adds	r3, #4
 80072d0:	4619      	mov	r1, r3
 80072d2:	4610      	mov	r0, r2
 80072d4:	f7fe fb0d 	bl	80058f2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80072d8:	2301      	movs	r3, #1
 80072da:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80072dc:	697b      	ldr	r3, [r7, #20]
	}
 80072de:	4618      	mov	r0, r3
 80072e0:	3718      	adds	r7, #24
 80072e2:	46bd      	mov	sp, r7
 80072e4:	bd80      	pop	{r7, pc}
 80072e6:	bf00      	nop
 80072e8:	20001038 	.word	0x20001038
 80072ec:	20001514 	.word	0x20001514
 80072f0:	2000103c 	.word	0x2000103c

080072f4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80072f4:	b580      	push	{r7, lr}
 80072f6:	b084      	sub	sp, #16
 80072f8:	af00      	add	r7, sp, #0
 80072fa:	6078      	str	r0, [r7, #4]
 80072fc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80072fe:	4b21      	ldr	r3, [pc, #132]	; (8007384 <prvAddCurrentTaskToDelayedList+0x90>)
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007304:	4b20      	ldr	r3, [pc, #128]	; (8007388 <prvAddCurrentTaskToDelayedList+0x94>)
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	3304      	adds	r3, #4
 800730a:	4618      	mov	r0, r3
 800730c:	f7fe fb4e 	bl	80059ac <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007316:	d10a      	bne.n	800732e <prvAddCurrentTaskToDelayedList+0x3a>
 8007318:	683b      	ldr	r3, [r7, #0]
 800731a:	2b00      	cmp	r3, #0
 800731c:	d007      	beq.n	800732e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800731e:	4b1a      	ldr	r3, [pc, #104]	; (8007388 <prvAddCurrentTaskToDelayedList+0x94>)
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	3304      	adds	r3, #4
 8007324:	4619      	mov	r1, r3
 8007326:	4819      	ldr	r0, [pc, #100]	; (800738c <prvAddCurrentTaskToDelayedList+0x98>)
 8007328:	f7fe fae3 	bl	80058f2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800732c:	e026      	b.n	800737c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800732e:	68fa      	ldr	r2, [r7, #12]
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	4413      	add	r3, r2
 8007334:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007336:	4b14      	ldr	r3, [pc, #80]	; (8007388 <prvAddCurrentTaskToDelayedList+0x94>)
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	68ba      	ldr	r2, [r7, #8]
 800733c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800733e:	68ba      	ldr	r2, [r7, #8]
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	429a      	cmp	r2, r3
 8007344:	d209      	bcs.n	800735a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007346:	4b12      	ldr	r3, [pc, #72]	; (8007390 <prvAddCurrentTaskToDelayedList+0x9c>)
 8007348:	681a      	ldr	r2, [r3, #0]
 800734a:	4b0f      	ldr	r3, [pc, #60]	; (8007388 <prvAddCurrentTaskToDelayedList+0x94>)
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	3304      	adds	r3, #4
 8007350:	4619      	mov	r1, r3
 8007352:	4610      	mov	r0, r2
 8007354:	f7fe faf1 	bl	800593a <vListInsert>
}
 8007358:	e010      	b.n	800737c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800735a:	4b0e      	ldr	r3, [pc, #56]	; (8007394 <prvAddCurrentTaskToDelayedList+0xa0>)
 800735c:	681a      	ldr	r2, [r3, #0]
 800735e:	4b0a      	ldr	r3, [pc, #40]	; (8007388 <prvAddCurrentTaskToDelayedList+0x94>)
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	3304      	adds	r3, #4
 8007364:	4619      	mov	r1, r3
 8007366:	4610      	mov	r0, r2
 8007368:	f7fe fae7 	bl	800593a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800736c:	4b0a      	ldr	r3, [pc, #40]	; (8007398 <prvAddCurrentTaskToDelayedList+0xa4>)
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	68ba      	ldr	r2, [r7, #8]
 8007372:	429a      	cmp	r2, r3
 8007374:	d202      	bcs.n	800737c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8007376:	4a08      	ldr	r2, [pc, #32]	; (8007398 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007378:	68bb      	ldr	r3, [r7, #8]
 800737a:	6013      	str	r3, [r2, #0]
}
 800737c:	bf00      	nop
 800737e:	3710      	adds	r7, #16
 8007380:	46bd      	mov	sp, r7
 8007382:	bd80      	pop	{r7, pc}
 8007384:	20001510 	.word	0x20001510
 8007388:	20001038 	.word	0x20001038
 800738c:	200014f8 	.word	0x200014f8
 8007390:	200014c8 	.word	0x200014c8
 8007394:	200014c4 	.word	0x200014c4
 8007398:	2000152c 	.word	0x2000152c

0800739c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800739c:	b580      	push	{r7, lr}
 800739e:	b08a      	sub	sp, #40	; 0x28
 80073a0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80073a2:	2300      	movs	r3, #0
 80073a4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80073a6:	f000 fb07 	bl	80079b8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80073aa:	4b1c      	ldr	r3, [pc, #112]	; (800741c <xTimerCreateTimerTask+0x80>)
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d021      	beq.n	80073f6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80073b2:	2300      	movs	r3, #0
 80073b4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80073b6:	2300      	movs	r3, #0
 80073b8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80073ba:	1d3a      	adds	r2, r7, #4
 80073bc:	f107 0108 	add.w	r1, r7, #8
 80073c0:	f107 030c 	add.w	r3, r7, #12
 80073c4:	4618      	mov	r0, r3
 80073c6:	f7fe fa4d 	bl	8005864 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80073ca:	6879      	ldr	r1, [r7, #4]
 80073cc:	68bb      	ldr	r3, [r7, #8]
 80073ce:	68fa      	ldr	r2, [r7, #12]
 80073d0:	9202      	str	r2, [sp, #8]
 80073d2:	9301      	str	r3, [sp, #4]
 80073d4:	2305      	movs	r3, #5
 80073d6:	9300      	str	r3, [sp, #0]
 80073d8:	2300      	movs	r3, #0
 80073da:	460a      	mov	r2, r1
 80073dc:	4910      	ldr	r1, [pc, #64]	; (8007420 <xTimerCreateTimerTask+0x84>)
 80073de:	4811      	ldr	r0, [pc, #68]	; (8007424 <xTimerCreateTimerTask+0x88>)
 80073e0:	f7ff f8b4 	bl	800654c <xTaskCreateStatic>
 80073e4:	4603      	mov	r3, r0
 80073e6:	4a10      	ldr	r2, [pc, #64]	; (8007428 <xTimerCreateTimerTask+0x8c>)
 80073e8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80073ea:	4b0f      	ldr	r3, [pc, #60]	; (8007428 <xTimerCreateTimerTask+0x8c>)
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d001      	beq.n	80073f6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80073f2:	2301      	movs	r3, #1
 80073f4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80073f6:	697b      	ldr	r3, [r7, #20]
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d10a      	bne.n	8007412 <xTimerCreateTimerTask+0x76>
	__asm volatile
 80073fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007400:	f383 8811 	msr	BASEPRI, r3
 8007404:	f3bf 8f6f 	isb	sy
 8007408:	f3bf 8f4f 	dsb	sy
 800740c:	613b      	str	r3, [r7, #16]
}
 800740e:	bf00      	nop
 8007410:	e7fe      	b.n	8007410 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8007412:	697b      	ldr	r3, [r7, #20]
}
 8007414:	4618      	mov	r0, r3
 8007416:	3718      	adds	r7, #24
 8007418:	46bd      	mov	sp, r7
 800741a:	bd80      	pop	{r7, pc}
 800741c:	20001568 	.word	0x20001568
 8007420:	08009a34 	.word	0x08009a34
 8007424:	08007561 	.word	0x08007561
 8007428:	2000156c 	.word	0x2000156c

0800742c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800742c:	b580      	push	{r7, lr}
 800742e:	b08a      	sub	sp, #40	; 0x28
 8007430:	af00      	add	r7, sp, #0
 8007432:	60f8      	str	r0, [r7, #12]
 8007434:	60b9      	str	r1, [r7, #8]
 8007436:	607a      	str	r2, [r7, #4]
 8007438:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800743a:	2300      	movs	r3, #0
 800743c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	2b00      	cmp	r3, #0
 8007442:	d10a      	bne.n	800745a <xTimerGenericCommand+0x2e>
	__asm volatile
 8007444:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007448:	f383 8811 	msr	BASEPRI, r3
 800744c:	f3bf 8f6f 	isb	sy
 8007450:	f3bf 8f4f 	dsb	sy
 8007454:	623b      	str	r3, [r7, #32]
}
 8007456:	bf00      	nop
 8007458:	e7fe      	b.n	8007458 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800745a:	4b1a      	ldr	r3, [pc, #104]	; (80074c4 <xTimerGenericCommand+0x98>)
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	2b00      	cmp	r3, #0
 8007460:	d02a      	beq.n	80074b8 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8007462:	68bb      	ldr	r3, [r7, #8]
 8007464:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800746e:	68bb      	ldr	r3, [r7, #8]
 8007470:	2b05      	cmp	r3, #5
 8007472:	dc18      	bgt.n	80074a6 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8007474:	f7ff feb2 	bl	80071dc <xTaskGetSchedulerState>
 8007478:	4603      	mov	r3, r0
 800747a:	2b02      	cmp	r3, #2
 800747c:	d109      	bne.n	8007492 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800747e:	4b11      	ldr	r3, [pc, #68]	; (80074c4 <xTimerGenericCommand+0x98>)
 8007480:	6818      	ldr	r0, [r3, #0]
 8007482:	f107 0110 	add.w	r1, r7, #16
 8007486:	2300      	movs	r3, #0
 8007488:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800748a:	f7fe fbf7 	bl	8005c7c <xQueueGenericSend>
 800748e:	6278      	str	r0, [r7, #36]	; 0x24
 8007490:	e012      	b.n	80074b8 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8007492:	4b0c      	ldr	r3, [pc, #48]	; (80074c4 <xTimerGenericCommand+0x98>)
 8007494:	6818      	ldr	r0, [r3, #0]
 8007496:	f107 0110 	add.w	r1, r7, #16
 800749a:	2300      	movs	r3, #0
 800749c:	2200      	movs	r2, #0
 800749e:	f7fe fbed 	bl	8005c7c <xQueueGenericSend>
 80074a2:	6278      	str	r0, [r7, #36]	; 0x24
 80074a4:	e008      	b.n	80074b8 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80074a6:	4b07      	ldr	r3, [pc, #28]	; (80074c4 <xTimerGenericCommand+0x98>)
 80074a8:	6818      	ldr	r0, [r3, #0]
 80074aa:	f107 0110 	add.w	r1, r7, #16
 80074ae:	2300      	movs	r3, #0
 80074b0:	683a      	ldr	r2, [r7, #0]
 80074b2:	f7fe fce1 	bl	8005e78 <xQueueGenericSendFromISR>
 80074b6:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80074b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80074ba:	4618      	mov	r0, r3
 80074bc:	3728      	adds	r7, #40	; 0x28
 80074be:	46bd      	mov	sp, r7
 80074c0:	bd80      	pop	{r7, pc}
 80074c2:	bf00      	nop
 80074c4:	20001568 	.word	0x20001568

080074c8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80074c8:	b580      	push	{r7, lr}
 80074ca:	b088      	sub	sp, #32
 80074cc:	af02      	add	r7, sp, #8
 80074ce:	6078      	str	r0, [r7, #4]
 80074d0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80074d2:	4b22      	ldr	r3, [pc, #136]	; (800755c <prvProcessExpiredTimer+0x94>)
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	68db      	ldr	r3, [r3, #12]
 80074d8:	68db      	ldr	r3, [r3, #12]
 80074da:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80074dc:	697b      	ldr	r3, [r7, #20]
 80074de:	3304      	adds	r3, #4
 80074e0:	4618      	mov	r0, r3
 80074e2:	f7fe fa63 	bl	80059ac <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80074e6:	697b      	ldr	r3, [r7, #20]
 80074e8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80074ec:	f003 0304 	and.w	r3, r3, #4
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d022      	beq.n	800753a <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80074f4:	697b      	ldr	r3, [r7, #20]
 80074f6:	699a      	ldr	r2, [r3, #24]
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	18d1      	adds	r1, r2, r3
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	683a      	ldr	r2, [r7, #0]
 8007500:	6978      	ldr	r0, [r7, #20]
 8007502:	f000 f8d1 	bl	80076a8 <prvInsertTimerInActiveList>
 8007506:	4603      	mov	r3, r0
 8007508:	2b00      	cmp	r3, #0
 800750a:	d01f      	beq.n	800754c <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800750c:	2300      	movs	r3, #0
 800750e:	9300      	str	r3, [sp, #0]
 8007510:	2300      	movs	r3, #0
 8007512:	687a      	ldr	r2, [r7, #4]
 8007514:	2100      	movs	r1, #0
 8007516:	6978      	ldr	r0, [r7, #20]
 8007518:	f7ff ff88 	bl	800742c <xTimerGenericCommand>
 800751c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800751e:	693b      	ldr	r3, [r7, #16]
 8007520:	2b00      	cmp	r3, #0
 8007522:	d113      	bne.n	800754c <prvProcessExpiredTimer+0x84>
	__asm volatile
 8007524:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007528:	f383 8811 	msr	BASEPRI, r3
 800752c:	f3bf 8f6f 	isb	sy
 8007530:	f3bf 8f4f 	dsb	sy
 8007534:	60fb      	str	r3, [r7, #12]
}
 8007536:	bf00      	nop
 8007538:	e7fe      	b.n	8007538 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800753a:	697b      	ldr	r3, [r7, #20]
 800753c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007540:	f023 0301 	bic.w	r3, r3, #1
 8007544:	b2da      	uxtb	r2, r3
 8007546:	697b      	ldr	r3, [r7, #20]
 8007548:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800754c:	697b      	ldr	r3, [r7, #20]
 800754e:	6a1b      	ldr	r3, [r3, #32]
 8007550:	6978      	ldr	r0, [r7, #20]
 8007552:	4798      	blx	r3
}
 8007554:	bf00      	nop
 8007556:	3718      	adds	r7, #24
 8007558:	46bd      	mov	sp, r7
 800755a:	bd80      	pop	{r7, pc}
 800755c:	20001560 	.word	0x20001560

08007560 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8007560:	b580      	push	{r7, lr}
 8007562:	b084      	sub	sp, #16
 8007564:	af00      	add	r7, sp, #0
 8007566:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007568:	f107 0308 	add.w	r3, r7, #8
 800756c:	4618      	mov	r0, r3
 800756e:	f000 f857 	bl	8007620 <prvGetNextExpireTime>
 8007572:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8007574:	68bb      	ldr	r3, [r7, #8]
 8007576:	4619      	mov	r1, r3
 8007578:	68f8      	ldr	r0, [r7, #12]
 800757a:	f000 f803 	bl	8007584 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800757e:	f000 f8d5 	bl	800772c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007582:	e7f1      	b.n	8007568 <prvTimerTask+0x8>

08007584 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8007584:	b580      	push	{r7, lr}
 8007586:	b084      	sub	sp, #16
 8007588:	af00      	add	r7, sp, #0
 800758a:	6078      	str	r0, [r7, #4]
 800758c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800758e:	f7ff fa39 	bl	8006a04 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007592:	f107 0308 	add.w	r3, r7, #8
 8007596:	4618      	mov	r0, r3
 8007598:	f000 f866 	bl	8007668 <prvSampleTimeNow>
 800759c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800759e:	68bb      	ldr	r3, [r7, #8]
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	d130      	bne.n	8007606 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80075a4:	683b      	ldr	r3, [r7, #0]
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d10a      	bne.n	80075c0 <prvProcessTimerOrBlockTask+0x3c>
 80075aa:	687a      	ldr	r2, [r7, #4]
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	429a      	cmp	r2, r3
 80075b0:	d806      	bhi.n	80075c0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80075b2:	f7ff fa35 	bl	8006a20 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80075b6:	68f9      	ldr	r1, [r7, #12]
 80075b8:	6878      	ldr	r0, [r7, #4]
 80075ba:	f7ff ff85 	bl	80074c8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80075be:	e024      	b.n	800760a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80075c0:	683b      	ldr	r3, [r7, #0]
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d008      	beq.n	80075d8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80075c6:	4b13      	ldr	r3, [pc, #76]	; (8007614 <prvProcessTimerOrBlockTask+0x90>)
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d101      	bne.n	80075d4 <prvProcessTimerOrBlockTask+0x50>
 80075d0:	2301      	movs	r3, #1
 80075d2:	e000      	b.n	80075d6 <prvProcessTimerOrBlockTask+0x52>
 80075d4:	2300      	movs	r3, #0
 80075d6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80075d8:	4b0f      	ldr	r3, [pc, #60]	; (8007618 <prvProcessTimerOrBlockTask+0x94>)
 80075da:	6818      	ldr	r0, [r3, #0]
 80075dc:	687a      	ldr	r2, [r7, #4]
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	1ad3      	subs	r3, r2, r3
 80075e2:	683a      	ldr	r2, [r7, #0]
 80075e4:	4619      	mov	r1, r3
 80075e6:	f7fe ff7d 	bl	80064e4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80075ea:	f7ff fa19 	bl	8006a20 <xTaskResumeAll>
 80075ee:	4603      	mov	r3, r0
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d10a      	bne.n	800760a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80075f4:	4b09      	ldr	r3, [pc, #36]	; (800761c <prvProcessTimerOrBlockTask+0x98>)
 80075f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80075fa:	601a      	str	r2, [r3, #0]
 80075fc:	f3bf 8f4f 	dsb	sy
 8007600:	f3bf 8f6f 	isb	sy
}
 8007604:	e001      	b.n	800760a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8007606:	f7ff fa0b 	bl	8006a20 <xTaskResumeAll>
}
 800760a:	bf00      	nop
 800760c:	3710      	adds	r7, #16
 800760e:	46bd      	mov	sp, r7
 8007610:	bd80      	pop	{r7, pc}
 8007612:	bf00      	nop
 8007614:	20001564 	.word	0x20001564
 8007618:	20001568 	.word	0x20001568
 800761c:	e000ed04 	.word	0xe000ed04

08007620 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8007620:	b480      	push	{r7}
 8007622:	b085      	sub	sp, #20
 8007624:	af00      	add	r7, sp, #0
 8007626:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8007628:	4b0e      	ldr	r3, [pc, #56]	; (8007664 <prvGetNextExpireTime+0x44>)
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	2b00      	cmp	r3, #0
 8007630:	d101      	bne.n	8007636 <prvGetNextExpireTime+0x16>
 8007632:	2201      	movs	r2, #1
 8007634:	e000      	b.n	8007638 <prvGetNextExpireTime+0x18>
 8007636:	2200      	movs	r2, #0
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	2b00      	cmp	r3, #0
 8007642:	d105      	bne.n	8007650 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007644:	4b07      	ldr	r3, [pc, #28]	; (8007664 <prvGetNextExpireTime+0x44>)
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	68db      	ldr	r3, [r3, #12]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	60fb      	str	r3, [r7, #12]
 800764e:	e001      	b.n	8007654 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8007650:	2300      	movs	r3, #0
 8007652:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8007654:	68fb      	ldr	r3, [r7, #12]
}
 8007656:	4618      	mov	r0, r3
 8007658:	3714      	adds	r7, #20
 800765a:	46bd      	mov	sp, r7
 800765c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007660:	4770      	bx	lr
 8007662:	bf00      	nop
 8007664:	20001560 	.word	0x20001560

08007668 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8007668:	b580      	push	{r7, lr}
 800766a:	b084      	sub	sp, #16
 800766c:	af00      	add	r7, sp, #0
 800766e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8007670:	f7ff fa74 	bl	8006b5c <xTaskGetTickCount>
 8007674:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8007676:	4b0b      	ldr	r3, [pc, #44]	; (80076a4 <prvSampleTimeNow+0x3c>)
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	68fa      	ldr	r2, [r7, #12]
 800767c:	429a      	cmp	r2, r3
 800767e:	d205      	bcs.n	800768c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8007680:	f000 f936 	bl	80078f0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	2201      	movs	r2, #1
 8007688:	601a      	str	r2, [r3, #0]
 800768a:	e002      	b.n	8007692 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	2200      	movs	r2, #0
 8007690:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8007692:	4a04      	ldr	r2, [pc, #16]	; (80076a4 <prvSampleTimeNow+0x3c>)
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8007698:	68fb      	ldr	r3, [r7, #12]
}
 800769a:	4618      	mov	r0, r3
 800769c:	3710      	adds	r7, #16
 800769e:	46bd      	mov	sp, r7
 80076a0:	bd80      	pop	{r7, pc}
 80076a2:	bf00      	nop
 80076a4:	20001570 	.word	0x20001570

080076a8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80076a8:	b580      	push	{r7, lr}
 80076aa:	b086      	sub	sp, #24
 80076ac:	af00      	add	r7, sp, #0
 80076ae:	60f8      	str	r0, [r7, #12]
 80076b0:	60b9      	str	r1, [r7, #8]
 80076b2:	607a      	str	r2, [r7, #4]
 80076b4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80076b6:	2300      	movs	r3, #0
 80076b8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	68ba      	ldr	r2, [r7, #8]
 80076be:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	68fa      	ldr	r2, [r7, #12]
 80076c4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80076c6:	68ba      	ldr	r2, [r7, #8]
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	429a      	cmp	r2, r3
 80076cc:	d812      	bhi.n	80076f4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80076ce:	687a      	ldr	r2, [r7, #4]
 80076d0:	683b      	ldr	r3, [r7, #0]
 80076d2:	1ad2      	subs	r2, r2, r3
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	699b      	ldr	r3, [r3, #24]
 80076d8:	429a      	cmp	r2, r3
 80076da:	d302      	bcc.n	80076e2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80076dc:	2301      	movs	r3, #1
 80076de:	617b      	str	r3, [r7, #20]
 80076e0:	e01b      	b.n	800771a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80076e2:	4b10      	ldr	r3, [pc, #64]	; (8007724 <prvInsertTimerInActiveList+0x7c>)
 80076e4:	681a      	ldr	r2, [r3, #0]
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	3304      	adds	r3, #4
 80076ea:	4619      	mov	r1, r3
 80076ec:	4610      	mov	r0, r2
 80076ee:	f7fe f924 	bl	800593a <vListInsert>
 80076f2:	e012      	b.n	800771a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80076f4:	687a      	ldr	r2, [r7, #4]
 80076f6:	683b      	ldr	r3, [r7, #0]
 80076f8:	429a      	cmp	r2, r3
 80076fa:	d206      	bcs.n	800770a <prvInsertTimerInActiveList+0x62>
 80076fc:	68ba      	ldr	r2, [r7, #8]
 80076fe:	683b      	ldr	r3, [r7, #0]
 8007700:	429a      	cmp	r2, r3
 8007702:	d302      	bcc.n	800770a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8007704:	2301      	movs	r3, #1
 8007706:	617b      	str	r3, [r7, #20]
 8007708:	e007      	b.n	800771a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800770a:	4b07      	ldr	r3, [pc, #28]	; (8007728 <prvInsertTimerInActiveList+0x80>)
 800770c:	681a      	ldr	r2, [r3, #0]
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	3304      	adds	r3, #4
 8007712:	4619      	mov	r1, r3
 8007714:	4610      	mov	r0, r2
 8007716:	f7fe f910 	bl	800593a <vListInsert>
		}
	}

	return xProcessTimerNow;
 800771a:	697b      	ldr	r3, [r7, #20]
}
 800771c:	4618      	mov	r0, r3
 800771e:	3718      	adds	r7, #24
 8007720:	46bd      	mov	sp, r7
 8007722:	bd80      	pop	{r7, pc}
 8007724:	20001564 	.word	0x20001564
 8007728:	20001560 	.word	0x20001560

0800772c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800772c:	b580      	push	{r7, lr}
 800772e:	b08e      	sub	sp, #56	; 0x38
 8007730:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007732:	e0ca      	b.n	80078ca <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	2b00      	cmp	r3, #0
 8007738:	da18      	bge.n	800776c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800773a:	1d3b      	adds	r3, r7, #4
 800773c:	3304      	adds	r3, #4
 800773e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8007740:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007742:	2b00      	cmp	r3, #0
 8007744:	d10a      	bne.n	800775c <prvProcessReceivedCommands+0x30>
	__asm volatile
 8007746:	f04f 0350 	mov.w	r3, #80	; 0x50
 800774a:	f383 8811 	msr	BASEPRI, r3
 800774e:	f3bf 8f6f 	isb	sy
 8007752:	f3bf 8f4f 	dsb	sy
 8007756:	61fb      	str	r3, [r7, #28]
}
 8007758:	bf00      	nop
 800775a:	e7fe      	b.n	800775a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800775c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007762:	6850      	ldr	r0, [r2, #4]
 8007764:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007766:	6892      	ldr	r2, [r2, #8]
 8007768:	4611      	mov	r1, r2
 800776a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	2b00      	cmp	r3, #0
 8007770:	f2c0 80aa 	blt.w	80078c8 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8007778:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800777a:	695b      	ldr	r3, [r3, #20]
 800777c:	2b00      	cmp	r3, #0
 800777e:	d004      	beq.n	800778a <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007780:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007782:	3304      	adds	r3, #4
 8007784:	4618      	mov	r0, r3
 8007786:	f7fe f911 	bl	80059ac <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800778a:	463b      	mov	r3, r7
 800778c:	4618      	mov	r0, r3
 800778e:	f7ff ff6b 	bl	8007668 <prvSampleTimeNow>
 8007792:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	2b09      	cmp	r3, #9
 8007798:	f200 8097 	bhi.w	80078ca <prvProcessReceivedCommands+0x19e>
 800779c:	a201      	add	r2, pc, #4	; (adr r2, 80077a4 <prvProcessReceivedCommands+0x78>)
 800779e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077a2:	bf00      	nop
 80077a4:	080077cd 	.word	0x080077cd
 80077a8:	080077cd 	.word	0x080077cd
 80077ac:	080077cd 	.word	0x080077cd
 80077b0:	08007841 	.word	0x08007841
 80077b4:	08007855 	.word	0x08007855
 80077b8:	0800789f 	.word	0x0800789f
 80077bc:	080077cd 	.word	0x080077cd
 80077c0:	080077cd 	.word	0x080077cd
 80077c4:	08007841 	.word	0x08007841
 80077c8:	08007855 	.word	0x08007855
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80077cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077ce:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80077d2:	f043 0301 	orr.w	r3, r3, #1
 80077d6:	b2da      	uxtb	r2, r3
 80077d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077da:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80077de:	68ba      	ldr	r2, [r7, #8]
 80077e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077e2:	699b      	ldr	r3, [r3, #24]
 80077e4:	18d1      	adds	r1, r2, r3
 80077e6:	68bb      	ldr	r3, [r7, #8]
 80077e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80077ea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80077ec:	f7ff ff5c 	bl	80076a8 <prvInsertTimerInActiveList>
 80077f0:	4603      	mov	r3, r0
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	d069      	beq.n	80078ca <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80077f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077f8:	6a1b      	ldr	r3, [r3, #32]
 80077fa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80077fc:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80077fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007800:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007804:	f003 0304 	and.w	r3, r3, #4
 8007808:	2b00      	cmp	r3, #0
 800780a:	d05e      	beq.n	80078ca <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800780c:	68ba      	ldr	r2, [r7, #8]
 800780e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007810:	699b      	ldr	r3, [r3, #24]
 8007812:	441a      	add	r2, r3
 8007814:	2300      	movs	r3, #0
 8007816:	9300      	str	r3, [sp, #0]
 8007818:	2300      	movs	r3, #0
 800781a:	2100      	movs	r1, #0
 800781c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800781e:	f7ff fe05 	bl	800742c <xTimerGenericCommand>
 8007822:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8007824:	6a3b      	ldr	r3, [r7, #32]
 8007826:	2b00      	cmp	r3, #0
 8007828:	d14f      	bne.n	80078ca <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800782a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800782e:	f383 8811 	msr	BASEPRI, r3
 8007832:	f3bf 8f6f 	isb	sy
 8007836:	f3bf 8f4f 	dsb	sy
 800783a:	61bb      	str	r3, [r7, #24]
}
 800783c:	bf00      	nop
 800783e:	e7fe      	b.n	800783e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007840:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007842:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007846:	f023 0301 	bic.w	r3, r3, #1
 800784a:	b2da      	uxtb	r2, r3
 800784c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800784e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8007852:	e03a      	b.n	80078ca <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007854:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007856:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800785a:	f043 0301 	orr.w	r3, r3, #1
 800785e:	b2da      	uxtb	r2, r3
 8007860:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007862:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8007866:	68ba      	ldr	r2, [r7, #8]
 8007868:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800786a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800786c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800786e:	699b      	ldr	r3, [r3, #24]
 8007870:	2b00      	cmp	r3, #0
 8007872:	d10a      	bne.n	800788a <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8007874:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007878:	f383 8811 	msr	BASEPRI, r3
 800787c:	f3bf 8f6f 	isb	sy
 8007880:	f3bf 8f4f 	dsb	sy
 8007884:	617b      	str	r3, [r7, #20]
}
 8007886:	bf00      	nop
 8007888:	e7fe      	b.n	8007888 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800788a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800788c:	699a      	ldr	r2, [r3, #24]
 800788e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007890:	18d1      	adds	r1, r2, r3
 8007892:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007894:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007896:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007898:	f7ff ff06 	bl	80076a8 <prvInsertTimerInActiveList>
					break;
 800789c:	e015      	b.n	80078ca <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800789e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078a0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80078a4:	f003 0302 	and.w	r3, r3, #2
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	d103      	bne.n	80078b4 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 80078ac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80078ae:	f000 fbdf 	bl	8008070 <vPortFree>
 80078b2:	e00a      	b.n	80078ca <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80078b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078b6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80078ba:	f023 0301 	bic.w	r3, r3, #1
 80078be:	b2da      	uxtb	r2, r3
 80078c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078c2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80078c6:	e000      	b.n	80078ca <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80078c8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80078ca:	4b08      	ldr	r3, [pc, #32]	; (80078ec <prvProcessReceivedCommands+0x1c0>)
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	1d39      	adds	r1, r7, #4
 80078d0:	2200      	movs	r2, #0
 80078d2:	4618      	mov	r0, r3
 80078d4:	f7fe fb6c 	bl	8005fb0 <xQueueReceive>
 80078d8:	4603      	mov	r3, r0
 80078da:	2b00      	cmp	r3, #0
 80078dc:	f47f af2a 	bne.w	8007734 <prvProcessReceivedCommands+0x8>
	}
}
 80078e0:	bf00      	nop
 80078e2:	bf00      	nop
 80078e4:	3730      	adds	r7, #48	; 0x30
 80078e6:	46bd      	mov	sp, r7
 80078e8:	bd80      	pop	{r7, pc}
 80078ea:	bf00      	nop
 80078ec:	20001568 	.word	0x20001568

080078f0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80078f0:	b580      	push	{r7, lr}
 80078f2:	b088      	sub	sp, #32
 80078f4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80078f6:	e048      	b.n	800798a <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80078f8:	4b2d      	ldr	r3, [pc, #180]	; (80079b0 <prvSwitchTimerLists+0xc0>)
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	68db      	ldr	r3, [r3, #12]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007902:	4b2b      	ldr	r3, [pc, #172]	; (80079b0 <prvSwitchTimerLists+0xc0>)
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	68db      	ldr	r3, [r3, #12]
 8007908:	68db      	ldr	r3, [r3, #12]
 800790a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	3304      	adds	r3, #4
 8007910:	4618      	mov	r0, r3
 8007912:	f7fe f84b 	bl	80059ac <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	6a1b      	ldr	r3, [r3, #32]
 800791a:	68f8      	ldr	r0, [r7, #12]
 800791c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007924:	f003 0304 	and.w	r3, r3, #4
 8007928:	2b00      	cmp	r3, #0
 800792a:	d02e      	beq.n	800798a <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	699b      	ldr	r3, [r3, #24]
 8007930:	693a      	ldr	r2, [r7, #16]
 8007932:	4413      	add	r3, r2
 8007934:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8007936:	68ba      	ldr	r2, [r7, #8]
 8007938:	693b      	ldr	r3, [r7, #16]
 800793a:	429a      	cmp	r2, r3
 800793c:	d90e      	bls.n	800795c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	68ba      	ldr	r2, [r7, #8]
 8007942:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	68fa      	ldr	r2, [r7, #12]
 8007948:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800794a:	4b19      	ldr	r3, [pc, #100]	; (80079b0 <prvSwitchTimerLists+0xc0>)
 800794c:	681a      	ldr	r2, [r3, #0]
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	3304      	adds	r3, #4
 8007952:	4619      	mov	r1, r3
 8007954:	4610      	mov	r0, r2
 8007956:	f7fd fff0 	bl	800593a <vListInsert>
 800795a:	e016      	b.n	800798a <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800795c:	2300      	movs	r3, #0
 800795e:	9300      	str	r3, [sp, #0]
 8007960:	2300      	movs	r3, #0
 8007962:	693a      	ldr	r2, [r7, #16]
 8007964:	2100      	movs	r1, #0
 8007966:	68f8      	ldr	r0, [r7, #12]
 8007968:	f7ff fd60 	bl	800742c <xTimerGenericCommand>
 800796c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	2b00      	cmp	r3, #0
 8007972:	d10a      	bne.n	800798a <prvSwitchTimerLists+0x9a>
	__asm volatile
 8007974:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007978:	f383 8811 	msr	BASEPRI, r3
 800797c:	f3bf 8f6f 	isb	sy
 8007980:	f3bf 8f4f 	dsb	sy
 8007984:	603b      	str	r3, [r7, #0]
}
 8007986:	bf00      	nop
 8007988:	e7fe      	b.n	8007988 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800798a:	4b09      	ldr	r3, [pc, #36]	; (80079b0 <prvSwitchTimerLists+0xc0>)
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	2b00      	cmp	r3, #0
 8007992:	d1b1      	bne.n	80078f8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8007994:	4b06      	ldr	r3, [pc, #24]	; (80079b0 <prvSwitchTimerLists+0xc0>)
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800799a:	4b06      	ldr	r3, [pc, #24]	; (80079b4 <prvSwitchTimerLists+0xc4>)
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	4a04      	ldr	r2, [pc, #16]	; (80079b0 <prvSwitchTimerLists+0xc0>)
 80079a0:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80079a2:	4a04      	ldr	r2, [pc, #16]	; (80079b4 <prvSwitchTimerLists+0xc4>)
 80079a4:	697b      	ldr	r3, [r7, #20]
 80079a6:	6013      	str	r3, [r2, #0]
}
 80079a8:	bf00      	nop
 80079aa:	3718      	adds	r7, #24
 80079ac:	46bd      	mov	sp, r7
 80079ae:	bd80      	pop	{r7, pc}
 80079b0:	20001560 	.word	0x20001560
 80079b4:	20001564 	.word	0x20001564

080079b8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80079b8:	b580      	push	{r7, lr}
 80079ba:	b082      	sub	sp, #8
 80079bc:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80079be:	f000 f969 	bl	8007c94 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80079c2:	4b15      	ldr	r3, [pc, #84]	; (8007a18 <prvCheckForValidListAndQueue+0x60>)
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d120      	bne.n	8007a0c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80079ca:	4814      	ldr	r0, [pc, #80]	; (8007a1c <prvCheckForValidListAndQueue+0x64>)
 80079cc:	f7fd ff64 	bl	8005898 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80079d0:	4813      	ldr	r0, [pc, #76]	; (8007a20 <prvCheckForValidListAndQueue+0x68>)
 80079d2:	f7fd ff61 	bl	8005898 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80079d6:	4b13      	ldr	r3, [pc, #76]	; (8007a24 <prvCheckForValidListAndQueue+0x6c>)
 80079d8:	4a10      	ldr	r2, [pc, #64]	; (8007a1c <prvCheckForValidListAndQueue+0x64>)
 80079da:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80079dc:	4b12      	ldr	r3, [pc, #72]	; (8007a28 <prvCheckForValidListAndQueue+0x70>)
 80079de:	4a10      	ldr	r2, [pc, #64]	; (8007a20 <prvCheckForValidListAndQueue+0x68>)
 80079e0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80079e2:	2300      	movs	r3, #0
 80079e4:	9300      	str	r3, [sp, #0]
 80079e6:	4b11      	ldr	r3, [pc, #68]	; (8007a2c <prvCheckForValidListAndQueue+0x74>)
 80079e8:	4a11      	ldr	r2, [pc, #68]	; (8007a30 <prvCheckForValidListAndQueue+0x78>)
 80079ea:	2110      	movs	r1, #16
 80079ec:	200a      	movs	r0, #10
 80079ee:	f7fe f86f 	bl	8005ad0 <xQueueGenericCreateStatic>
 80079f2:	4603      	mov	r3, r0
 80079f4:	4a08      	ldr	r2, [pc, #32]	; (8007a18 <prvCheckForValidListAndQueue+0x60>)
 80079f6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80079f8:	4b07      	ldr	r3, [pc, #28]	; (8007a18 <prvCheckForValidListAndQueue+0x60>)
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d005      	beq.n	8007a0c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007a00:	4b05      	ldr	r3, [pc, #20]	; (8007a18 <prvCheckForValidListAndQueue+0x60>)
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	490b      	ldr	r1, [pc, #44]	; (8007a34 <prvCheckForValidListAndQueue+0x7c>)
 8007a06:	4618      	mov	r0, r3
 8007a08:	f7fe fd42 	bl	8006490 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007a0c:	f000 f972 	bl	8007cf4 <vPortExitCritical>
}
 8007a10:	bf00      	nop
 8007a12:	46bd      	mov	sp, r7
 8007a14:	bd80      	pop	{r7, pc}
 8007a16:	bf00      	nop
 8007a18:	20001568 	.word	0x20001568
 8007a1c:	20001538 	.word	0x20001538
 8007a20:	2000154c 	.word	0x2000154c
 8007a24:	20001560 	.word	0x20001560
 8007a28:	20001564 	.word	0x20001564
 8007a2c:	20001614 	.word	0x20001614
 8007a30:	20001574 	.word	0x20001574
 8007a34:	08009a3c 	.word	0x08009a3c

08007a38 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007a38:	b480      	push	{r7}
 8007a3a:	b085      	sub	sp, #20
 8007a3c:	af00      	add	r7, sp, #0
 8007a3e:	60f8      	str	r0, [r7, #12]
 8007a40:	60b9      	str	r1, [r7, #8]
 8007a42:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	3b04      	subs	r3, #4
 8007a48:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007a50:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	3b04      	subs	r3, #4
 8007a56:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007a58:	68bb      	ldr	r3, [r7, #8]
 8007a5a:	f023 0201 	bic.w	r2, r3, #1
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	3b04      	subs	r3, #4
 8007a66:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007a68:	4a0c      	ldr	r2, [pc, #48]	; (8007a9c <pxPortInitialiseStack+0x64>)
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	3b14      	subs	r3, #20
 8007a72:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007a74:	687a      	ldr	r2, [r7, #4]
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	3b04      	subs	r3, #4
 8007a7e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	f06f 0202 	mvn.w	r2, #2
 8007a86:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	3b20      	subs	r3, #32
 8007a8c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007a8e:	68fb      	ldr	r3, [r7, #12]
}
 8007a90:	4618      	mov	r0, r3
 8007a92:	3714      	adds	r7, #20
 8007a94:	46bd      	mov	sp, r7
 8007a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a9a:	4770      	bx	lr
 8007a9c:	08007aa1 	.word	0x08007aa1

08007aa0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007aa0:	b480      	push	{r7}
 8007aa2:	b085      	sub	sp, #20
 8007aa4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8007aa6:	2300      	movs	r3, #0
 8007aa8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007aaa:	4b12      	ldr	r3, [pc, #72]	; (8007af4 <prvTaskExitError+0x54>)
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ab2:	d00a      	beq.n	8007aca <prvTaskExitError+0x2a>
	__asm volatile
 8007ab4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ab8:	f383 8811 	msr	BASEPRI, r3
 8007abc:	f3bf 8f6f 	isb	sy
 8007ac0:	f3bf 8f4f 	dsb	sy
 8007ac4:	60fb      	str	r3, [r7, #12]
}
 8007ac6:	bf00      	nop
 8007ac8:	e7fe      	b.n	8007ac8 <prvTaskExitError+0x28>
	__asm volatile
 8007aca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ace:	f383 8811 	msr	BASEPRI, r3
 8007ad2:	f3bf 8f6f 	isb	sy
 8007ad6:	f3bf 8f4f 	dsb	sy
 8007ada:	60bb      	str	r3, [r7, #8]
}
 8007adc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007ade:	bf00      	nop
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	d0fc      	beq.n	8007ae0 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007ae6:	bf00      	nop
 8007ae8:	bf00      	nop
 8007aea:	3714      	adds	r7, #20
 8007aec:	46bd      	mov	sp, r7
 8007aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007af2:	4770      	bx	lr
 8007af4:	2000000c 	.word	0x2000000c
	...

08007b00 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007b00:	4b07      	ldr	r3, [pc, #28]	; (8007b20 <pxCurrentTCBConst2>)
 8007b02:	6819      	ldr	r1, [r3, #0]
 8007b04:	6808      	ldr	r0, [r1, #0]
 8007b06:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b0a:	f380 8809 	msr	PSP, r0
 8007b0e:	f3bf 8f6f 	isb	sy
 8007b12:	f04f 0000 	mov.w	r0, #0
 8007b16:	f380 8811 	msr	BASEPRI, r0
 8007b1a:	4770      	bx	lr
 8007b1c:	f3af 8000 	nop.w

08007b20 <pxCurrentTCBConst2>:
 8007b20:	20001038 	.word	0x20001038
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007b24:	bf00      	nop
 8007b26:	bf00      	nop

08007b28 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007b28:	4808      	ldr	r0, [pc, #32]	; (8007b4c <prvPortStartFirstTask+0x24>)
 8007b2a:	6800      	ldr	r0, [r0, #0]
 8007b2c:	6800      	ldr	r0, [r0, #0]
 8007b2e:	f380 8808 	msr	MSP, r0
 8007b32:	f04f 0000 	mov.w	r0, #0
 8007b36:	f380 8814 	msr	CONTROL, r0
 8007b3a:	b662      	cpsie	i
 8007b3c:	b661      	cpsie	f
 8007b3e:	f3bf 8f4f 	dsb	sy
 8007b42:	f3bf 8f6f 	isb	sy
 8007b46:	df00      	svc	0
 8007b48:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8007b4a:	bf00      	nop
 8007b4c:	e000ed08 	.word	0xe000ed08

08007b50 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007b50:	b580      	push	{r7, lr}
 8007b52:	b086      	sub	sp, #24
 8007b54:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007b56:	4b46      	ldr	r3, [pc, #280]	; (8007c70 <xPortStartScheduler+0x120>)
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	4a46      	ldr	r2, [pc, #280]	; (8007c74 <xPortStartScheduler+0x124>)
 8007b5c:	4293      	cmp	r3, r2
 8007b5e:	d10a      	bne.n	8007b76 <xPortStartScheduler+0x26>
	__asm volatile
 8007b60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b64:	f383 8811 	msr	BASEPRI, r3
 8007b68:	f3bf 8f6f 	isb	sy
 8007b6c:	f3bf 8f4f 	dsb	sy
 8007b70:	613b      	str	r3, [r7, #16]
}
 8007b72:	bf00      	nop
 8007b74:	e7fe      	b.n	8007b74 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007b76:	4b3e      	ldr	r3, [pc, #248]	; (8007c70 <xPortStartScheduler+0x120>)
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	4a3f      	ldr	r2, [pc, #252]	; (8007c78 <xPortStartScheduler+0x128>)
 8007b7c:	4293      	cmp	r3, r2
 8007b7e:	d10a      	bne.n	8007b96 <xPortStartScheduler+0x46>
	__asm volatile
 8007b80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b84:	f383 8811 	msr	BASEPRI, r3
 8007b88:	f3bf 8f6f 	isb	sy
 8007b8c:	f3bf 8f4f 	dsb	sy
 8007b90:	60fb      	str	r3, [r7, #12]
}
 8007b92:	bf00      	nop
 8007b94:	e7fe      	b.n	8007b94 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007b96:	4b39      	ldr	r3, [pc, #228]	; (8007c7c <xPortStartScheduler+0x12c>)
 8007b98:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007b9a:	697b      	ldr	r3, [r7, #20]
 8007b9c:	781b      	ldrb	r3, [r3, #0]
 8007b9e:	b2db      	uxtb	r3, r3
 8007ba0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007ba2:	697b      	ldr	r3, [r7, #20]
 8007ba4:	22ff      	movs	r2, #255	; 0xff
 8007ba6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007ba8:	697b      	ldr	r3, [r7, #20]
 8007baa:	781b      	ldrb	r3, [r3, #0]
 8007bac:	b2db      	uxtb	r3, r3
 8007bae:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007bb0:	78fb      	ldrb	r3, [r7, #3]
 8007bb2:	b2db      	uxtb	r3, r3
 8007bb4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007bb8:	b2da      	uxtb	r2, r3
 8007bba:	4b31      	ldr	r3, [pc, #196]	; (8007c80 <xPortStartScheduler+0x130>)
 8007bbc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007bbe:	4b31      	ldr	r3, [pc, #196]	; (8007c84 <xPortStartScheduler+0x134>)
 8007bc0:	2207      	movs	r2, #7
 8007bc2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007bc4:	e009      	b.n	8007bda <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8007bc6:	4b2f      	ldr	r3, [pc, #188]	; (8007c84 <xPortStartScheduler+0x134>)
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	3b01      	subs	r3, #1
 8007bcc:	4a2d      	ldr	r2, [pc, #180]	; (8007c84 <xPortStartScheduler+0x134>)
 8007bce:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007bd0:	78fb      	ldrb	r3, [r7, #3]
 8007bd2:	b2db      	uxtb	r3, r3
 8007bd4:	005b      	lsls	r3, r3, #1
 8007bd6:	b2db      	uxtb	r3, r3
 8007bd8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007bda:	78fb      	ldrb	r3, [r7, #3]
 8007bdc:	b2db      	uxtb	r3, r3
 8007bde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007be2:	2b80      	cmp	r3, #128	; 0x80
 8007be4:	d0ef      	beq.n	8007bc6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007be6:	4b27      	ldr	r3, [pc, #156]	; (8007c84 <xPortStartScheduler+0x134>)
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	f1c3 0307 	rsb	r3, r3, #7
 8007bee:	2b04      	cmp	r3, #4
 8007bf0:	d00a      	beq.n	8007c08 <xPortStartScheduler+0xb8>
	__asm volatile
 8007bf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bf6:	f383 8811 	msr	BASEPRI, r3
 8007bfa:	f3bf 8f6f 	isb	sy
 8007bfe:	f3bf 8f4f 	dsb	sy
 8007c02:	60bb      	str	r3, [r7, #8]
}
 8007c04:	bf00      	nop
 8007c06:	e7fe      	b.n	8007c06 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007c08:	4b1e      	ldr	r3, [pc, #120]	; (8007c84 <xPortStartScheduler+0x134>)
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	021b      	lsls	r3, r3, #8
 8007c0e:	4a1d      	ldr	r2, [pc, #116]	; (8007c84 <xPortStartScheduler+0x134>)
 8007c10:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007c12:	4b1c      	ldr	r3, [pc, #112]	; (8007c84 <xPortStartScheduler+0x134>)
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007c1a:	4a1a      	ldr	r2, [pc, #104]	; (8007c84 <xPortStartScheduler+0x134>)
 8007c1c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	b2da      	uxtb	r2, r3
 8007c22:	697b      	ldr	r3, [r7, #20]
 8007c24:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007c26:	4b18      	ldr	r3, [pc, #96]	; (8007c88 <xPortStartScheduler+0x138>)
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	4a17      	ldr	r2, [pc, #92]	; (8007c88 <xPortStartScheduler+0x138>)
 8007c2c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007c30:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007c32:	4b15      	ldr	r3, [pc, #84]	; (8007c88 <xPortStartScheduler+0x138>)
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	4a14      	ldr	r2, [pc, #80]	; (8007c88 <xPortStartScheduler+0x138>)
 8007c38:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8007c3c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007c3e:	f000 f8dd 	bl	8007dfc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007c42:	4b12      	ldr	r3, [pc, #72]	; (8007c8c <xPortStartScheduler+0x13c>)
 8007c44:	2200      	movs	r2, #0
 8007c46:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8007c48:	f000 f8fc 	bl	8007e44 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007c4c:	4b10      	ldr	r3, [pc, #64]	; (8007c90 <xPortStartScheduler+0x140>)
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	4a0f      	ldr	r2, [pc, #60]	; (8007c90 <xPortStartScheduler+0x140>)
 8007c52:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8007c56:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007c58:	f7ff ff66 	bl	8007b28 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007c5c:	f7ff f848 	bl	8006cf0 <vTaskSwitchContext>
	prvTaskExitError();
 8007c60:	f7ff ff1e 	bl	8007aa0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007c64:	2300      	movs	r3, #0
}
 8007c66:	4618      	mov	r0, r3
 8007c68:	3718      	adds	r7, #24
 8007c6a:	46bd      	mov	sp, r7
 8007c6c:	bd80      	pop	{r7, pc}
 8007c6e:	bf00      	nop
 8007c70:	e000ed00 	.word	0xe000ed00
 8007c74:	410fc271 	.word	0x410fc271
 8007c78:	410fc270 	.word	0x410fc270
 8007c7c:	e000e400 	.word	0xe000e400
 8007c80:	20001664 	.word	0x20001664
 8007c84:	20001668 	.word	0x20001668
 8007c88:	e000ed20 	.word	0xe000ed20
 8007c8c:	2000000c 	.word	0x2000000c
 8007c90:	e000ef34 	.word	0xe000ef34

08007c94 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007c94:	b480      	push	{r7}
 8007c96:	b083      	sub	sp, #12
 8007c98:	af00      	add	r7, sp, #0
	__asm volatile
 8007c9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c9e:	f383 8811 	msr	BASEPRI, r3
 8007ca2:	f3bf 8f6f 	isb	sy
 8007ca6:	f3bf 8f4f 	dsb	sy
 8007caa:	607b      	str	r3, [r7, #4]
}
 8007cac:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007cae:	4b0f      	ldr	r3, [pc, #60]	; (8007cec <vPortEnterCritical+0x58>)
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	3301      	adds	r3, #1
 8007cb4:	4a0d      	ldr	r2, [pc, #52]	; (8007cec <vPortEnterCritical+0x58>)
 8007cb6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007cb8:	4b0c      	ldr	r3, [pc, #48]	; (8007cec <vPortEnterCritical+0x58>)
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	2b01      	cmp	r3, #1
 8007cbe:	d10f      	bne.n	8007ce0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007cc0:	4b0b      	ldr	r3, [pc, #44]	; (8007cf0 <vPortEnterCritical+0x5c>)
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	b2db      	uxtb	r3, r3
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d00a      	beq.n	8007ce0 <vPortEnterCritical+0x4c>
	__asm volatile
 8007cca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cce:	f383 8811 	msr	BASEPRI, r3
 8007cd2:	f3bf 8f6f 	isb	sy
 8007cd6:	f3bf 8f4f 	dsb	sy
 8007cda:	603b      	str	r3, [r7, #0]
}
 8007cdc:	bf00      	nop
 8007cde:	e7fe      	b.n	8007cde <vPortEnterCritical+0x4a>
	}
}
 8007ce0:	bf00      	nop
 8007ce2:	370c      	adds	r7, #12
 8007ce4:	46bd      	mov	sp, r7
 8007ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cea:	4770      	bx	lr
 8007cec:	2000000c 	.word	0x2000000c
 8007cf0:	e000ed04 	.word	0xe000ed04

08007cf4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007cf4:	b480      	push	{r7}
 8007cf6:	b083      	sub	sp, #12
 8007cf8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007cfa:	4b12      	ldr	r3, [pc, #72]	; (8007d44 <vPortExitCritical+0x50>)
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	d10a      	bne.n	8007d18 <vPortExitCritical+0x24>
	__asm volatile
 8007d02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d06:	f383 8811 	msr	BASEPRI, r3
 8007d0a:	f3bf 8f6f 	isb	sy
 8007d0e:	f3bf 8f4f 	dsb	sy
 8007d12:	607b      	str	r3, [r7, #4]
}
 8007d14:	bf00      	nop
 8007d16:	e7fe      	b.n	8007d16 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007d18:	4b0a      	ldr	r3, [pc, #40]	; (8007d44 <vPortExitCritical+0x50>)
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	3b01      	subs	r3, #1
 8007d1e:	4a09      	ldr	r2, [pc, #36]	; (8007d44 <vPortExitCritical+0x50>)
 8007d20:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007d22:	4b08      	ldr	r3, [pc, #32]	; (8007d44 <vPortExitCritical+0x50>)
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d105      	bne.n	8007d36 <vPortExitCritical+0x42>
 8007d2a:	2300      	movs	r3, #0
 8007d2c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007d2e:	683b      	ldr	r3, [r7, #0]
 8007d30:	f383 8811 	msr	BASEPRI, r3
}
 8007d34:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007d36:	bf00      	nop
 8007d38:	370c      	adds	r7, #12
 8007d3a:	46bd      	mov	sp, r7
 8007d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d40:	4770      	bx	lr
 8007d42:	bf00      	nop
 8007d44:	2000000c 	.word	0x2000000c
	...

08007d50 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007d50:	f3ef 8009 	mrs	r0, PSP
 8007d54:	f3bf 8f6f 	isb	sy
 8007d58:	4b15      	ldr	r3, [pc, #84]	; (8007db0 <pxCurrentTCBConst>)
 8007d5a:	681a      	ldr	r2, [r3, #0]
 8007d5c:	f01e 0f10 	tst.w	lr, #16
 8007d60:	bf08      	it	eq
 8007d62:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007d66:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d6a:	6010      	str	r0, [r2, #0]
 8007d6c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007d70:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007d74:	f380 8811 	msr	BASEPRI, r0
 8007d78:	f3bf 8f4f 	dsb	sy
 8007d7c:	f3bf 8f6f 	isb	sy
 8007d80:	f7fe ffb6 	bl	8006cf0 <vTaskSwitchContext>
 8007d84:	f04f 0000 	mov.w	r0, #0
 8007d88:	f380 8811 	msr	BASEPRI, r0
 8007d8c:	bc09      	pop	{r0, r3}
 8007d8e:	6819      	ldr	r1, [r3, #0]
 8007d90:	6808      	ldr	r0, [r1, #0]
 8007d92:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d96:	f01e 0f10 	tst.w	lr, #16
 8007d9a:	bf08      	it	eq
 8007d9c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007da0:	f380 8809 	msr	PSP, r0
 8007da4:	f3bf 8f6f 	isb	sy
 8007da8:	4770      	bx	lr
 8007daa:	bf00      	nop
 8007dac:	f3af 8000 	nop.w

08007db0 <pxCurrentTCBConst>:
 8007db0:	20001038 	.word	0x20001038
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007db4:	bf00      	nop
 8007db6:	bf00      	nop

08007db8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007db8:	b580      	push	{r7, lr}
 8007dba:	b082      	sub	sp, #8
 8007dbc:	af00      	add	r7, sp, #0
	__asm volatile
 8007dbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dc2:	f383 8811 	msr	BASEPRI, r3
 8007dc6:	f3bf 8f6f 	isb	sy
 8007dca:	f3bf 8f4f 	dsb	sy
 8007dce:	607b      	str	r3, [r7, #4]
}
 8007dd0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007dd2:	f7fe fed3 	bl	8006b7c <xTaskIncrementTick>
 8007dd6:	4603      	mov	r3, r0
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	d003      	beq.n	8007de4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007ddc:	4b06      	ldr	r3, [pc, #24]	; (8007df8 <xPortSysTickHandler+0x40>)
 8007dde:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007de2:	601a      	str	r2, [r3, #0]
 8007de4:	2300      	movs	r3, #0
 8007de6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007de8:	683b      	ldr	r3, [r7, #0]
 8007dea:	f383 8811 	msr	BASEPRI, r3
}
 8007dee:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007df0:	bf00      	nop
 8007df2:	3708      	adds	r7, #8
 8007df4:	46bd      	mov	sp, r7
 8007df6:	bd80      	pop	{r7, pc}
 8007df8:	e000ed04 	.word	0xe000ed04

08007dfc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8007dfc:	b480      	push	{r7}
 8007dfe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007e00:	4b0b      	ldr	r3, [pc, #44]	; (8007e30 <vPortSetupTimerInterrupt+0x34>)
 8007e02:	2200      	movs	r2, #0
 8007e04:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007e06:	4b0b      	ldr	r3, [pc, #44]	; (8007e34 <vPortSetupTimerInterrupt+0x38>)
 8007e08:	2200      	movs	r2, #0
 8007e0a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007e0c:	4b0a      	ldr	r3, [pc, #40]	; (8007e38 <vPortSetupTimerInterrupt+0x3c>)
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	4a0a      	ldr	r2, [pc, #40]	; (8007e3c <vPortSetupTimerInterrupt+0x40>)
 8007e12:	fba2 2303 	umull	r2, r3, r2, r3
 8007e16:	099b      	lsrs	r3, r3, #6
 8007e18:	4a09      	ldr	r2, [pc, #36]	; (8007e40 <vPortSetupTimerInterrupt+0x44>)
 8007e1a:	3b01      	subs	r3, #1
 8007e1c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8007e1e:	4b04      	ldr	r3, [pc, #16]	; (8007e30 <vPortSetupTimerInterrupt+0x34>)
 8007e20:	2207      	movs	r2, #7
 8007e22:	601a      	str	r2, [r3, #0]
}
 8007e24:	bf00      	nop
 8007e26:	46bd      	mov	sp, r7
 8007e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e2c:	4770      	bx	lr
 8007e2e:	bf00      	nop
 8007e30:	e000e010 	.word	0xe000e010
 8007e34:	e000e018 	.word	0xe000e018
 8007e38:	20000000 	.word	0x20000000
 8007e3c:	10624dd3 	.word	0x10624dd3
 8007e40:	e000e014 	.word	0xe000e014

08007e44 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007e44:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007e54 <vPortEnableVFP+0x10>
 8007e48:	6801      	ldr	r1, [r0, #0]
 8007e4a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8007e4e:	6001      	str	r1, [r0, #0]
 8007e50:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007e52:	bf00      	nop
 8007e54:	e000ed88 	.word	0xe000ed88

08007e58 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007e58:	b480      	push	{r7}
 8007e5a:	b085      	sub	sp, #20
 8007e5c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8007e5e:	f3ef 8305 	mrs	r3, IPSR
 8007e62:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	2b0f      	cmp	r3, #15
 8007e68:	d914      	bls.n	8007e94 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8007e6a:	4a17      	ldr	r2, [pc, #92]	; (8007ec8 <vPortValidateInterruptPriority+0x70>)
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	4413      	add	r3, r2
 8007e70:	781b      	ldrb	r3, [r3, #0]
 8007e72:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007e74:	4b15      	ldr	r3, [pc, #84]	; (8007ecc <vPortValidateInterruptPriority+0x74>)
 8007e76:	781b      	ldrb	r3, [r3, #0]
 8007e78:	7afa      	ldrb	r2, [r7, #11]
 8007e7a:	429a      	cmp	r2, r3
 8007e7c:	d20a      	bcs.n	8007e94 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8007e7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e82:	f383 8811 	msr	BASEPRI, r3
 8007e86:	f3bf 8f6f 	isb	sy
 8007e8a:	f3bf 8f4f 	dsb	sy
 8007e8e:	607b      	str	r3, [r7, #4]
}
 8007e90:	bf00      	nop
 8007e92:	e7fe      	b.n	8007e92 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007e94:	4b0e      	ldr	r3, [pc, #56]	; (8007ed0 <vPortValidateInterruptPriority+0x78>)
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8007e9c:	4b0d      	ldr	r3, [pc, #52]	; (8007ed4 <vPortValidateInterruptPriority+0x7c>)
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	429a      	cmp	r2, r3
 8007ea2:	d90a      	bls.n	8007eba <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8007ea4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ea8:	f383 8811 	msr	BASEPRI, r3
 8007eac:	f3bf 8f6f 	isb	sy
 8007eb0:	f3bf 8f4f 	dsb	sy
 8007eb4:	603b      	str	r3, [r7, #0]
}
 8007eb6:	bf00      	nop
 8007eb8:	e7fe      	b.n	8007eb8 <vPortValidateInterruptPriority+0x60>
	}
 8007eba:	bf00      	nop
 8007ebc:	3714      	adds	r7, #20
 8007ebe:	46bd      	mov	sp, r7
 8007ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ec4:	4770      	bx	lr
 8007ec6:	bf00      	nop
 8007ec8:	e000e3f0 	.word	0xe000e3f0
 8007ecc:	20001664 	.word	0x20001664
 8007ed0:	e000ed0c 	.word	0xe000ed0c
 8007ed4:	20001668 	.word	0x20001668

08007ed8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007ed8:	b580      	push	{r7, lr}
 8007eda:	b08a      	sub	sp, #40	; 0x28
 8007edc:	af00      	add	r7, sp, #0
 8007ede:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007ee0:	2300      	movs	r3, #0
 8007ee2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007ee4:	f7fe fd8e 	bl	8006a04 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007ee8:	4b5b      	ldr	r3, [pc, #364]	; (8008058 <pvPortMalloc+0x180>)
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d101      	bne.n	8007ef4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007ef0:	f000 f920 	bl	8008134 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007ef4:	4b59      	ldr	r3, [pc, #356]	; (800805c <pvPortMalloc+0x184>)
 8007ef6:	681a      	ldr	r2, [r3, #0]
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	4013      	ands	r3, r2
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	f040 8093 	bne.w	8008028 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	d01d      	beq.n	8007f44 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8007f08:	2208      	movs	r2, #8
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	4413      	add	r3, r2
 8007f0e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	f003 0307 	and.w	r3, r3, #7
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d014      	beq.n	8007f44 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	f023 0307 	bic.w	r3, r3, #7
 8007f20:	3308      	adds	r3, #8
 8007f22:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	f003 0307 	and.w	r3, r3, #7
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	d00a      	beq.n	8007f44 <pvPortMalloc+0x6c>
	__asm volatile
 8007f2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f32:	f383 8811 	msr	BASEPRI, r3
 8007f36:	f3bf 8f6f 	isb	sy
 8007f3a:	f3bf 8f4f 	dsb	sy
 8007f3e:	617b      	str	r3, [r7, #20]
}
 8007f40:	bf00      	nop
 8007f42:	e7fe      	b.n	8007f42 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d06e      	beq.n	8008028 <pvPortMalloc+0x150>
 8007f4a:	4b45      	ldr	r3, [pc, #276]	; (8008060 <pvPortMalloc+0x188>)
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	687a      	ldr	r2, [r7, #4]
 8007f50:	429a      	cmp	r2, r3
 8007f52:	d869      	bhi.n	8008028 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007f54:	4b43      	ldr	r3, [pc, #268]	; (8008064 <pvPortMalloc+0x18c>)
 8007f56:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007f58:	4b42      	ldr	r3, [pc, #264]	; (8008064 <pvPortMalloc+0x18c>)
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007f5e:	e004      	b.n	8007f6a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8007f60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f62:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007f64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007f6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f6c:	685b      	ldr	r3, [r3, #4]
 8007f6e:	687a      	ldr	r2, [r7, #4]
 8007f70:	429a      	cmp	r2, r3
 8007f72:	d903      	bls.n	8007f7c <pvPortMalloc+0xa4>
 8007f74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	d1f1      	bne.n	8007f60 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007f7c:	4b36      	ldr	r3, [pc, #216]	; (8008058 <pvPortMalloc+0x180>)
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007f82:	429a      	cmp	r2, r3
 8007f84:	d050      	beq.n	8008028 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007f86:	6a3b      	ldr	r3, [r7, #32]
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	2208      	movs	r2, #8
 8007f8c:	4413      	add	r3, r2
 8007f8e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007f90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f92:	681a      	ldr	r2, [r3, #0]
 8007f94:	6a3b      	ldr	r3, [r7, #32]
 8007f96:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007f98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f9a:	685a      	ldr	r2, [r3, #4]
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	1ad2      	subs	r2, r2, r3
 8007fa0:	2308      	movs	r3, #8
 8007fa2:	005b      	lsls	r3, r3, #1
 8007fa4:	429a      	cmp	r2, r3
 8007fa6:	d91f      	bls.n	8007fe8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007fa8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	4413      	add	r3, r2
 8007fae:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007fb0:	69bb      	ldr	r3, [r7, #24]
 8007fb2:	f003 0307 	and.w	r3, r3, #7
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d00a      	beq.n	8007fd0 <pvPortMalloc+0xf8>
	__asm volatile
 8007fba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fbe:	f383 8811 	msr	BASEPRI, r3
 8007fc2:	f3bf 8f6f 	isb	sy
 8007fc6:	f3bf 8f4f 	dsb	sy
 8007fca:	613b      	str	r3, [r7, #16]
}
 8007fcc:	bf00      	nop
 8007fce:	e7fe      	b.n	8007fce <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007fd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fd2:	685a      	ldr	r2, [r3, #4]
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	1ad2      	subs	r2, r2, r3
 8007fd8:	69bb      	ldr	r3, [r7, #24]
 8007fda:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007fdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fde:	687a      	ldr	r2, [r7, #4]
 8007fe0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007fe2:	69b8      	ldr	r0, [r7, #24]
 8007fe4:	f000 f908 	bl	80081f8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007fe8:	4b1d      	ldr	r3, [pc, #116]	; (8008060 <pvPortMalloc+0x188>)
 8007fea:	681a      	ldr	r2, [r3, #0]
 8007fec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fee:	685b      	ldr	r3, [r3, #4]
 8007ff0:	1ad3      	subs	r3, r2, r3
 8007ff2:	4a1b      	ldr	r2, [pc, #108]	; (8008060 <pvPortMalloc+0x188>)
 8007ff4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007ff6:	4b1a      	ldr	r3, [pc, #104]	; (8008060 <pvPortMalloc+0x188>)
 8007ff8:	681a      	ldr	r2, [r3, #0]
 8007ffa:	4b1b      	ldr	r3, [pc, #108]	; (8008068 <pvPortMalloc+0x190>)
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	429a      	cmp	r2, r3
 8008000:	d203      	bcs.n	800800a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008002:	4b17      	ldr	r3, [pc, #92]	; (8008060 <pvPortMalloc+0x188>)
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	4a18      	ldr	r2, [pc, #96]	; (8008068 <pvPortMalloc+0x190>)
 8008008:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800800a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800800c:	685a      	ldr	r2, [r3, #4]
 800800e:	4b13      	ldr	r3, [pc, #76]	; (800805c <pvPortMalloc+0x184>)
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	431a      	orrs	r2, r3
 8008014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008016:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008018:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800801a:	2200      	movs	r2, #0
 800801c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800801e:	4b13      	ldr	r3, [pc, #76]	; (800806c <pvPortMalloc+0x194>)
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	3301      	adds	r3, #1
 8008024:	4a11      	ldr	r2, [pc, #68]	; (800806c <pvPortMalloc+0x194>)
 8008026:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008028:	f7fe fcfa 	bl	8006a20 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800802c:	69fb      	ldr	r3, [r7, #28]
 800802e:	f003 0307 	and.w	r3, r3, #7
 8008032:	2b00      	cmp	r3, #0
 8008034:	d00a      	beq.n	800804c <pvPortMalloc+0x174>
	__asm volatile
 8008036:	f04f 0350 	mov.w	r3, #80	; 0x50
 800803a:	f383 8811 	msr	BASEPRI, r3
 800803e:	f3bf 8f6f 	isb	sy
 8008042:	f3bf 8f4f 	dsb	sy
 8008046:	60fb      	str	r3, [r7, #12]
}
 8008048:	bf00      	nop
 800804a:	e7fe      	b.n	800804a <pvPortMalloc+0x172>
	return pvReturn;
 800804c:	69fb      	ldr	r3, [r7, #28]
}
 800804e:	4618      	mov	r0, r3
 8008050:	3728      	adds	r7, #40	; 0x28
 8008052:	46bd      	mov	sp, r7
 8008054:	bd80      	pop	{r7, pc}
 8008056:	bf00      	nop
 8008058:	20003d84 	.word	0x20003d84
 800805c:	20003d98 	.word	0x20003d98
 8008060:	20003d88 	.word	0x20003d88
 8008064:	20003d7c 	.word	0x20003d7c
 8008068:	20003d8c 	.word	0x20003d8c
 800806c:	20003d90 	.word	0x20003d90

08008070 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008070:	b580      	push	{r7, lr}
 8008072:	b086      	sub	sp, #24
 8008074:	af00      	add	r7, sp, #0
 8008076:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	2b00      	cmp	r3, #0
 8008080:	d04d      	beq.n	800811e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008082:	2308      	movs	r3, #8
 8008084:	425b      	negs	r3, r3
 8008086:	697a      	ldr	r2, [r7, #20]
 8008088:	4413      	add	r3, r2
 800808a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800808c:	697b      	ldr	r3, [r7, #20]
 800808e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008090:	693b      	ldr	r3, [r7, #16]
 8008092:	685a      	ldr	r2, [r3, #4]
 8008094:	4b24      	ldr	r3, [pc, #144]	; (8008128 <vPortFree+0xb8>)
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	4013      	ands	r3, r2
 800809a:	2b00      	cmp	r3, #0
 800809c:	d10a      	bne.n	80080b4 <vPortFree+0x44>
	__asm volatile
 800809e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080a2:	f383 8811 	msr	BASEPRI, r3
 80080a6:	f3bf 8f6f 	isb	sy
 80080aa:	f3bf 8f4f 	dsb	sy
 80080ae:	60fb      	str	r3, [r7, #12]
}
 80080b0:	bf00      	nop
 80080b2:	e7fe      	b.n	80080b2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80080b4:	693b      	ldr	r3, [r7, #16]
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	d00a      	beq.n	80080d2 <vPortFree+0x62>
	__asm volatile
 80080bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080c0:	f383 8811 	msr	BASEPRI, r3
 80080c4:	f3bf 8f6f 	isb	sy
 80080c8:	f3bf 8f4f 	dsb	sy
 80080cc:	60bb      	str	r3, [r7, #8]
}
 80080ce:	bf00      	nop
 80080d0:	e7fe      	b.n	80080d0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80080d2:	693b      	ldr	r3, [r7, #16]
 80080d4:	685a      	ldr	r2, [r3, #4]
 80080d6:	4b14      	ldr	r3, [pc, #80]	; (8008128 <vPortFree+0xb8>)
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	4013      	ands	r3, r2
 80080dc:	2b00      	cmp	r3, #0
 80080de:	d01e      	beq.n	800811e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80080e0:	693b      	ldr	r3, [r7, #16]
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	d11a      	bne.n	800811e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80080e8:	693b      	ldr	r3, [r7, #16]
 80080ea:	685a      	ldr	r2, [r3, #4]
 80080ec:	4b0e      	ldr	r3, [pc, #56]	; (8008128 <vPortFree+0xb8>)
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	43db      	mvns	r3, r3
 80080f2:	401a      	ands	r2, r3
 80080f4:	693b      	ldr	r3, [r7, #16]
 80080f6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80080f8:	f7fe fc84 	bl	8006a04 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80080fc:	693b      	ldr	r3, [r7, #16]
 80080fe:	685a      	ldr	r2, [r3, #4]
 8008100:	4b0a      	ldr	r3, [pc, #40]	; (800812c <vPortFree+0xbc>)
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	4413      	add	r3, r2
 8008106:	4a09      	ldr	r2, [pc, #36]	; (800812c <vPortFree+0xbc>)
 8008108:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800810a:	6938      	ldr	r0, [r7, #16]
 800810c:	f000 f874 	bl	80081f8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8008110:	4b07      	ldr	r3, [pc, #28]	; (8008130 <vPortFree+0xc0>)
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	3301      	adds	r3, #1
 8008116:	4a06      	ldr	r2, [pc, #24]	; (8008130 <vPortFree+0xc0>)
 8008118:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800811a:	f7fe fc81 	bl	8006a20 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800811e:	bf00      	nop
 8008120:	3718      	adds	r7, #24
 8008122:	46bd      	mov	sp, r7
 8008124:	bd80      	pop	{r7, pc}
 8008126:	bf00      	nop
 8008128:	20003d98 	.word	0x20003d98
 800812c:	20003d88 	.word	0x20003d88
 8008130:	20003d94 	.word	0x20003d94

08008134 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008134:	b480      	push	{r7}
 8008136:	b085      	sub	sp, #20
 8008138:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800813a:	f242 7310 	movw	r3, #10000	; 0x2710
 800813e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008140:	4b27      	ldr	r3, [pc, #156]	; (80081e0 <prvHeapInit+0xac>)
 8008142:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	f003 0307 	and.w	r3, r3, #7
 800814a:	2b00      	cmp	r3, #0
 800814c:	d00c      	beq.n	8008168 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800814e:	68fb      	ldr	r3, [r7, #12]
 8008150:	3307      	adds	r3, #7
 8008152:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	f023 0307 	bic.w	r3, r3, #7
 800815a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800815c:	68ba      	ldr	r2, [r7, #8]
 800815e:	68fb      	ldr	r3, [r7, #12]
 8008160:	1ad3      	subs	r3, r2, r3
 8008162:	4a1f      	ldr	r2, [pc, #124]	; (80081e0 <prvHeapInit+0xac>)
 8008164:	4413      	add	r3, r2
 8008166:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800816c:	4a1d      	ldr	r2, [pc, #116]	; (80081e4 <prvHeapInit+0xb0>)
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008172:	4b1c      	ldr	r3, [pc, #112]	; (80081e4 <prvHeapInit+0xb0>)
 8008174:	2200      	movs	r2, #0
 8008176:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	68ba      	ldr	r2, [r7, #8]
 800817c:	4413      	add	r3, r2
 800817e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008180:	2208      	movs	r2, #8
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	1a9b      	subs	r3, r3, r2
 8008186:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	f023 0307 	bic.w	r3, r3, #7
 800818e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	4a15      	ldr	r2, [pc, #84]	; (80081e8 <prvHeapInit+0xb4>)
 8008194:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008196:	4b14      	ldr	r3, [pc, #80]	; (80081e8 <prvHeapInit+0xb4>)
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	2200      	movs	r2, #0
 800819c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800819e:	4b12      	ldr	r3, [pc, #72]	; (80081e8 <prvHeapInit+0xb4>)
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	2200      	movs	r2, #0
 80081a4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80081aa:	683b      	ldr	r3, [r7, #0]
 80081ac:	68fa      	ldr	r2, [r7, #12]
 80081ae:	1ad2      	subs	r2, r2, r3
 80081b0:	683b      	ldr	r3, [r7, #0]
 80081b2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80081b4:	4b0c      	ldr	r3, [pc, #48]	; (80081e8 <prvHeapInit+0xb4>)
 80081b6:	681a      	ldr	r2, [r3, #0]
 80081b8:	683b      	ldr	r3, [r7, #0]
 80081ba:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80081bc:	683b      	ldr	r3, [r7, #0]
 80081be:	685b      	ldr	r3, [r3, #4]
 80081c0:	4a0a      	ldr	r2, [pc, #40]	; (80081ec <prvHeapInit+0xb8>)
 80081c2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80081c4:	683b      	ldr	r3, [r7, #0]
 80081c6:	685b      	ldr	r3, [r3, #4]
 80081c8:	4a09      	ldr	r2, [pc, #36]	; (80081f0 <prvHeapInit+0xbc>)
 80081ca:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80081cc:	4b09      	ldr	r3, [pc, #36]	; (80081f4 <prvHeapInit+0xc0>)
 80081ce:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80081d2:	601a      	str	r2, [r3, #0]
}
 80081d4:	bf00      	nop
 80081d6:	3714      	adds	r7, #20
 80081d8:	46bd      	mov	sp, r7
 80081da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081de:	4770      	bx	lr
 80081e0:	2000166c 	.word	0x2000166c
 80081e4:	20003d7c 	.word	0x20003d7c
 80081e8:	20003d84 	.word	0x20003d84
 80081ec:	20003d8c 	.word	0x20003d8c
 80081f0:	20003d88 	.word	0x20003d88
 80081f4:	20003d98 	.word	0x20003d98

080081f8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80081f8:	b480      	push	{r7}
 80081fa:	b085      	sub	sp, #20
 80081fc:	af00      	add	r7, sp, #0
 80081fe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008200:	4b28      	ldr	r3, [pc, #160]	; (80082a4 <prvInsertBlockIntoFreeList+0xac>)
 8008202:	60fb      	str	r3, [r7, #12]
 8008204:	e002      	b.n	800820c <prvInsertBlockIntoFreeList+0x14>
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	60fb      	str	r3, [r7, #12]
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	687a      	ldr	r2, [r7, #4]
 8008212:	429a      	cmp	r2, r3
 8008214:	d8f7      	bhi.n	8008206 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	685b      	ldr	r3, [r3, #4]
 800821e:	68ba      	ldr	r2, [r7, #8]
 8008220:	4413      	add	r3, r2
 8008222:	687a      	ldr	r2, [r7, #4]
 8008224:	429a      	cmp	r2, r3
 8008226:	d108      	bne.n	800823a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008228:	68fb      	ldr	r3, [r7, #12]
 800822a:	685a      	ldr	r2, [r3, #4]
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	685b      	ldr	r3, [r3, #4]
 8008230:	441a      	add	r2, r3
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	685b      	ldr	r3, [r3, #4]
 8008242:	68ba      	ldr	r2, [r7, #8]
 8008244:	441a      	add	r2, r3
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	429a      	cmp	r2, r3
 800824c:	d118      	bne.n	8008280 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	681a      	ldr	r2, [r3, #0]
 8008252:	4b15      	ldr	r3, [pc, #84]	; (80082a8 <prvInsertBlockIntoFreeList+0xb0>)
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	429a      	cmp	r2, r3
 8008258:	d00d      	beq.n	8008276 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	685a      	ldr	r2, [r3, #4]
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	685b      	ldr	r3, [r3, #4]
 8008264:	441a      	add	r2, r3
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	681a      	ldr	r2, [r3, #0]
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	601a      	str	r2, [r3, #0]
 8008274:	e008      	b.n	8008288 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008276:	4b0c      	ldr	r3, [pc, #48]	; (80082a8 <prvInsertBlockIntoFreeList+0xb0>)
 8008278:	681a      	ldr	r2, [r3, #0]
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	601a      	str	r2, [r3, #0]
 800827e:	e003      	b.n	8008288 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	681a      	ldr	r2, [r3, #0]
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008288:	68fa      	ldr	r2, [r7, #12]
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	429a      	cmp	r2, r3
 800828e:	d002      	beq.n	8008296 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	687a      	ldr	r2, [r7, #4]
 8008294:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008296:	bf00      	nop
 8008298:	3714      	adds	r7, #20
 800829a:	46bd      	mov	sp, r7
 800829c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082a0:	4770      	bx	lr
 80082a2:	bf00      	nop
 80082a4:	20003d7c 	.word	0x20003d7c
 80082a8:	20003d84 	.word	0x20003d84

080082ac <__errno>:
 80082ac:	4b01      	ldr	r3, [pc, #4]	; (80082b4 <__errno+0x8>)
 80082ae:	6818      	ldr	r0, [r3, #0]
 80082b0:	4770      	bx	lr
 80082b2:	bf00      	nop
 80082b4:	20000010 	.word	0x20000010

080082b8 <std>:
 80082b8:	2300      	movs	r3, #0
 80082ba:	b510      	push	{r4, lr}
 80082bc:	4604      	mov	r4, r0
 80082be:	e9c0 3300 	strd	r3, r3, [r0]
 80082c2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80082c6:	6083      	str	r3, [r0, #8]
 80082c8:	8181      	strh	r1, [r0, #12]
 80082ca:	6643      	str	r3, [r0, #100]	; 0x64
 80082cc:	81c2      	strh	r2, [r0, #14]
 80082ce:	6183      	str	r3, [r0, #24]
 80082d0:	4619      	mov	r1, r3
 80082d2:	2208      	movs	r2, #8
 80082d4:	305c      	adds	r0, #92	; 0x5c
 80082d6:	f000 f91a 	bl	800850e <memset>
 80082da:	4b05      	ldr	r3, [pc, #20]	; (80082f0 <std+0x38>)
 80082dc:	6263      	str	r3, [r4, #36]	; 0x24
 80082de:	4b05      	ldr	r3, [pc, #20]	; (80082f4 <std+0x3c>)
 80082e0:	62a3      	str	r3, [r4, #40]	; 0x28
 80082e2:	4b05      	ldr	r3, [pc, #20]	; (80082f8 <std+0x40>)
 80082e4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80082e6:	4b05      	ldr	r3, [pc, #20]	; (80082fc <std+0x44>)
 80082e8:	6224      	str	r4, [r4, #32]
 80082ea:	6323      	str	r3, [r4, #48]	; 0x30
 80082ec:	bd10      	pop	{r4, pc}
 80082ee:	bf00      	nop
 80082f0:	080089e5 	.word	0x080089e5
 80082f4:	08008a07 	.word	0x08008a07
 80082f8:	08008a3f 	.word	0x08008a3f
 80082fc:	08008a63 	.word	0x08008a63

08008300 <_cleanup_r>:
 8008300:	4901      	ldr	r1, [pc, #4]	; (8008308 <_cleanup_r+0x8>)
 8008302:	f000 b8af 	b.w	8008464 <_fwalk_reent>
 8008306:	bf00      	nop
 8008308:	08008d3d 	.word	0x08008d3d

0800830c <__sfmoreglue>:
 800830c:	b570      	push	{r4, r5, r6, lr}
 800830e:	2268      	movs	r2, #104	; 0x68
 8008310:	1e4d      	subs	r5, r1, #1
 8008312:	4355      	muls	r5, r2
 8008314:	460e      	mov	r6, r1
 8008316:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800831a:	f000 f921 	bl	8008560 <_malloc_r>
 800831e:	4604      	mov	r4, r0
 8008320:	b140      	cbz	r0, 8008334 <__sfmoreglue+0x28>
 8008322:	2100      	movs	r1, #0
 8008324:	e9c0 1600 	strd	r1, r6, [r0]
 8008328:	300c      	adds	r0, #12
 800832a:	60a0      	str	r0, [r4, #8]
 800832c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008330:	f000 f8ed 	bl	800850e <memset>
 8008334:	4620      	mov	r0, r4
 8008336:	bd70      	pop	{r4, r5, r6, pc}

08008338 <__sfp_lock_acquire>:
 8008338:	4801      	ldr	r0, [pc, #4]	; (8008340 <__sfp_lock_acquire+0x8>)
 800833a:	f000 b8d8 	b.w	80084ee <__retarget_lock_acquire_recursive>
 800833e:	bf00      	nop
 8008340:	20003d9d 	.word	0x20003d9d

08008344 <__sfp_lock_release>:
 8008344:	4801      	ldr	r0, [pc, #4]	; (800834c <__sfp_lock_release+0x8>)
 8008346:	f000 b8d3 	b.w	80084f0 <__retarget_lock_release_recursive>
 800834a:	bf00      	nop
 800834c:	20003d9d 	.word	0x20003d9d

08008350 <__sinit_lock_acquire>:
 8008350:	4801      	ldr	r0, [pc, #4]	; (8008358 <__sinit_lock_acquire+0x8>)
 8008352:	f000 b8cc 	b.w	80084ee <__retarget_lock_acquire_recursive>
 8008356:	bf00      	nop
 8008358:	20003d9e 	.word	0x20003d9e

0800835c <__sinit_lock_release>:
 800835c:	4801      	ldr	r0, [pc, #4]	; (8008364 <__sinit_lock_release+0x8>)
 800835e:	f000 b8c7 	b.w	80084f0 <__retarget_lock_release_recursive>
 8008362:	bf00      	nop
 8008364:	20003d9e 	.word	0x20003d9e

08008368 <__sinit>:
 8008368:	b510      	push	{r4, lr}
 800836a:	4604      	mov	r4, r0
 800836c:	f7ff fff0 	bl	8008350 <__sinit_lock_acquire>
 8008370:	69a3      	ldr	r3, [r4, #24]
 8008372:	b11b      	cbz	r3, 800837c <__sinit+0x14>
 8008374:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008378:	f7ff bff0 	b.w	800835c <__sinit_lock_release>
 800837c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008380:	6523      	str	r3, [r4, #80]	; 0x50
 8008382:	4b13      	ldr	r3, [pc, #76]	; (80083d0 <__sinit+0x68>)
 8008384:	4a13      	ldr	r2, [pc, #76]	; (80083d4 <__sinit+0x6c>)
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	62a2      	str	r2, [r4, #40]	; 0x28
 800838a:	42a3      	cmp	r3, r4
 800838c:	bf04      	itt	eq
 800838e:	2301      	moveq	r3, #1
 8008390:	61a3      	streq	r3, [r4, #24]
 8008392:	4620      	mov	r0, r4
 8008394:	f000 f820 	bl	80083d8 <__sfp>
 8008398:	6060      	str	r0, [r4, #4]
 800839a:	4620      	mov	r0, r4
 800839c:	f000 f81c 	bl	80083d8 <__sfp>
 80083a0:	60a0      	str	r0, [r4, #8]
 80083a2:	4620      	mov	r0, r4
 80083a4:	f000 f818 	bl	80083d8 <__sfp>
 80083a8:	2200      	movs	r2, #0
 80083aa:	60e0      	str	r0, [r4, #12]
 80083ac:	2104      	movs	r1, #4
 80083ae:	6860      	ldr	r0, [r4, #4]
 80083b0:	f7ff ff82 	bl	80082b8 <std>
 80083b4:	68a0      	ldr	r0, [r4, #8]
 80083b6:	2201      	movs	r2, #1
 80083b8:	2109      	movs	r1, #9
 80083ba:	f7ff ff7d 	bl	80082b8 <std>
 80083be:	68e0      	ldr	r0, [r4, #12]
 80083c0:	2202      	movs	r2, #2
 80083c2:	2112      	movs	r1, #18
 80083c4:	f7ff ff78 	bl	80082b8 <std>
 80083c8:	2301      	movs	r3, #1
 80083ca:	61a3      	str	r3, [r4, #24]
 80083cc:	e7d2      	b.n	8008374 <__sinit+0xc>
 80083ce:	bf00      	nop
 80083d0:	08009b64 	.word	0x08009b64
 80083d4:	08008301 	.word	0x08008301

080083d8 <__sfp>:
 80083d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80083da:	4607      	mov	r7, r0
 80083dc:	f7ff ffac 	bl	8008338 <__sfp_lock_acquire>
 80083e0:	4b1e      	ldr	r3, [pc, #120]	; (800845c <__sfp+0x84>)
 80083e2:	681e      	ldr	r6, [r3, #0]
 80083e4:	69b3      	ldr	r3, [r6, #24]
 80083e6:	b913      	cbnz	r3, 80083ee <__sfp+0x16>
 80083e8:	4630      	mov	r0, r6
 80083ea:	f7ff ffbd 	bl	8008368 <__sinit>
 80083ee:	3648      	adds	r6, #72	; 0x48
 80083f0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80083f4:	3b01      	subs	r3, #1
 80083f6:	d503      	bpl.n	8008400 <__sfp+0x28>
 80083f8:	6833      	ldr	r3, [r6, #0]
 80083fa:	b30b      	cbz	r3, 8008440 <__sfp+0x68>
 80083fc:	6836      	ldr	r6, [r6, #0]
 80083fe:	e7f7      	b.n	80083f0 <__sfp+0x18>
 8008400:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008404:	b9d5      	cbnz	r5, 800843c <__sfp+0x64>
 8008406:	4b16      	ldr	r3, [pc, #88]	; (8008460 <__sfp+0x88>)
 8008408:	60e3      	str	r3, [r4, #12]
 800840a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800840e:	6665      	str	r5, [r4, #100]	; 0x64
 8008410:	f000 f86c 	bl	80084ec <__retarget_lock_init_recursive>
 8008414:	f7ff ff96 	bl	8008344 <__sfp_lock_release>
 8008418:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800841c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008420:	6025      	str	r5, [r4, #0]
 8008422:	61a5      	str	r5, [r4, #24]
 8008424:	2208      	movs	r2, #8
 8008426:	4629      	mov	r1, r5
 8008428:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800842c:	f000 f86f 	bl	800850e <memset>
 8008430:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008434:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008438:	4620      	mov	r0, r4
 800843a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800843c:	3468      	adds	r4, #104	; 0x68
 800843e:	e7d9      	b.n	80083f4 <__sfp+0x1c>
 8008440:	2104      	movs	r1, #4
 8008442:	4638      	mov	r0, r7
 8008444:	f7ff ff62 	bl	800830c <__sfmoreglue>
 8008448:	4604      	mov	r4, r0
 800844a:	6030      	str	r0, [r6, #0]
 800844c:	2800      	cmp	r0, #0
 800844e:	d1d5      	bne.n	80083fc <__sfp+0x24>
 8008450:	f7ff ff78 	bl	8008344 <__sfp_lock_release>
 8008454:	230c      	movs	r3, #12
 8008456:	603b      	str	r3, [r7, #0]
 8008458:	e7ee      	b.n	8008438 <__sfp+0x60>
 800845a:	bf00      	nop
 800845c:	08009b64 	.word	0x08009b64
 8008460:	ffff0001 	.word	0xffff0001

08008464 <_fwalk_reent>:
 8008464:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008468:	4606      	mov	r6, r0
 800846a:	4688      	mov	r8, r1
 800846c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008470:	2700      	movs	r7, #0
 8008472:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008476:	f1b9 0901 	subs.w	r9, r9, #1
 800847a:	d505      	bpl.n	8008488 <_fwalk_reent+0x24>
 800847c:	6824      	ldr	r4, [r4, #0]
 800847e:	2c00      	cmp	r4, #0
 8008480:	d1f7      	bne.n	8008472 <_fwalk_reent+0xe>
 8008482:	4638      	mov	r0, r7
 8008484:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008488:	89ab      	ldrh	r3, [r5, #12]
 800848a:	2b01      	cmp	r3, #1
 800848c:	d907      	bls.n	800849e <_fwalk_reent+0x3a>
 800848e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008492:	3301      	adds	r3, #1
 8008494:	d003      	beq.n	800849e <_fwalk_reent+0x3a>
 8008496:	4629      	mov	r1, r5
 8008498:	4630      	mov	r0, r6
 800849a:	47c0      	blx	r8
 800849c:	4307      	orrs	r7, r0
 800849e:	3568      	adds	r5, #104	; 0x68
 80084a0:	e7e9      	b.n	8008476 <_fwalk_reent+0x12>
	...

080084a4 <__libc_init_array>:
 80084a4:	b570      	push	{r4, r5, r6, lr}
 80084a6:	4d0d      	ldr	r5, [pc, #52]	; (80084dc <__libc_init_array+0x38>)
 80084a8:	4c0d      	ldr	r4, [pc, #52]	; (80084e0 <__libc_init_array+0x3c>)
 80084aa:	1b64      	subs	r4, r4, r5
 80084ac:	10a4      	asrs	r4, r4, #2
 80084ae:	2600      	movs	r6, #0
 80084b0:	42a6      	cmp	r6, r4
 80084b2:	d109      	bne.n	80084c8 <__libc_init_array+0x24>
 80084b4:	4d0b      	ldr	r5, [pc, #44]	; (80084e4 <__libc_init_array+0x40>)
 80084b6:	4c0c      	ldr	r4, [pc, #48]	; (80084e8 <__libc_init_array+0x44>)
 80084b8:	f001 fa16 	bl	80098e8 <_init>
 80084bc:	1b64      	subs	r4, r4, r5
 80084be:	10a4      	asrs	r4, r4, #2
 80084c0:	2600      	movs	r6, #0
 80084c2:	42a6      	cmp	r6, r4
 80084c4:	d105      	bne.n	80084d2 <__libc_init_array+0x2e>
 80084c6:	bd70      	pop	{r4, r5, r6, pc}
 80084c8:	f855 3b04 	ldr.w	r3, [r5], #4
 80084cc:	4798      	blx	r3
 80084ce:	3601      	adds	r6, #1
 80084d0:	e7ee      	b.n	80084b0 <__libc_init_array+0xc>
 80084d2:	f855 3b04 	ldr.w	r3, [r5], #4
 80084d6:	4798      	blx	r3
 80084d8:	3601      	adds	r6, #1
 80084da:	e7f2      	b.n	80084c2 <__libc_init_array+0x1e>
 80084dc:	08009bdc 	.word	0x08009bdc
 80084e0:	08009bdc 	.word	0x08009bdc
 80084e4:	08009bdc 	.word	0x08009bdc
 80084e8:	08009be0 	.word	0x08009be0

080084ec <__retarget_lock_init_recursive>:
 80084ec:	4770      	bx	lr

080084ee <__retarget_lock_acquire_recursive>:
 80084ee:	4770      	bx	lr

080084f0 <__retarget_lock_release_recursive>:
 80084f0:	4770      	bx	lr

080084f2 <memcpy>:
 80084f2:	440a      	add	r2, r1
 80084f4:	4291      	cmp	r1, r2
 80084f6:	f100 33ff 	add.w	r3, r0, #4294967295
 80084fa:	d100      	bne.n	80084fe <memcpy+0xc>
 80084fc:	4770      	bx	lr
 80084fe:	b510      	push	{r4, lr}
 8008500:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008504:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008508:	4291      	cmp	r1, r2
 800850a:	d1f9      	bne.n	8008500 <memcpy+0xe>
 800850c:	bd10      	pop	{r4, pc}

0800850e <memset>:
 800850e:	4402      	add	r2, r0
 8008510:	4603      	mov	r3, r0
 8008512:	4293      	cmp	r3, r2
 8008514:	d100      	bne.n	8008518 <memset+0xa>
 8008516:	4770      	bx	lr
 8008518:	f803 1b01 	strb.w	r1, [r3], #1
 800851c:	e7f9      	b.n	8008512 <memset+0x4>
	...

08008520 <sbrk_aligned>:
 8008520:	b570      	push	{r4, r5, r6, lr}
 8008522:	4e0e      	ldr	r6, [pc, #56]	; (800855c <sbrk_aligned+0x3c>)
 8008524:	460c      	mov	r4, r1
 8008526:	6831      	ldr	r1, [r6, #0]
 8008528:	4605      	mov	r5, r0
 800852a:	b911      	cbnz	r1, 8008532 <sbrk_aligned+0x12>
 800852c:	f000 f984 	bl	8008838 <_sbrk_r>
 8008530:	6030      	str	r0, [r6, #0]
 8008532:	4621      	mov	r1, r4
 8008534:	4628      	mov	r0, r5
 8008536:	f000 f97f 	bl	8008838 <_sbrk_r>
 800853a:	1c43      	adds	r3, r0, #1
 800853c:	d00a      	beq.n	8008554 <sbrk_aligned+0x34>
 800853e:	1cc4      	adds	r4, r0, #3
 8008540:	f024 0403 	bic.w	r4, r4, #3
 8008544:	42a0      	cmp	r0, r4
 8008546:	d007      	beq.n	8008558 <sbrk_aligned+0x38>
 8008548:	1a21      	subs	r1, r4, r0
 800854a:	4628      	mov	r0, r5
 800854c:	f000 f974 	bl	8008838 <_sbrk_r>
 8008550:	3001      	adds	r0, #1
 8008552:	d101      	bne.n	8008558 <sbrk_aligned+0x38>
 8008554:	f04f 34ff 	mov.w	r4, #4294967295
 8008558:	4620      	mov	r0, r4
 800855a:	bd70      	pop	{r4, r5, r6, pc}
 800855c:	20003da4 	.word	0x20003da4

08008560 <_malloc_r>:
 8008560:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008564:	1ccd      	adds	r5, r1, #3
 8008566:	f025 0503 	bic.w	r5, r5, #3
 800856a:	3508      	adds	r5, #8
 800856c:	2d0c      	cmp	r5, #12
 800856e:	bf38      	it	cc
 8008570:	250c      	movcc	r5, #12
 8008572:	2d00      	cmp	r5, #0
 8008574:	4607      	mov	r7, r0
 8008576:	db01      	blt.n	800857c <_malloc_r+0x1c>
 8008578:	42a9      	cmp	r1, r5
 800857a:	d905      	bls.n	8008588 <_malloc_r+0x28>
 800857c:	230c      	movs	r3, #12
 800857e:	603b      	str	r3, [r7, #0]
 8008580:	2600      	movs	r6, #0
 8008582:	4630      	mov	r0, r6
 8008584:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008588:	4e2e      	ldr	r6, [pc, #184]	; (8008644 <_malloc_r+0xe4>)
 800858a:	f000 fc93 	bl	8008eb4 <__malloc_lock>
 800858e:	6833      	ldr	r3, [r6, #0]
 8008590:	461c      	mov	r4, r3
 8008592:	bb34      	cbnz	r4, 80085e2 <_malloc_r+0x82>
 8008594:	4629      	mov	r1, r5
 8008596:	4638      	mov	r0, r7
 8008598:	f7ff ffc2 	bl	8008520 <sbrk_aligned>
 800859c:	1c43      	adds	r3, r0, #1
 800859e:	4604      	mov	r4, r0
 80085a0:	d14d      	bne.n	800863e <_malloc_r+0xde>
 80085a2:	6834      	ldr	r4, [r6, #0]
 80085a4:	4626      	mov	r6, r4
 80085a6:	2e00      	cmp	r6, #0
 80085a8:	d140      	bne.n	800862c <_malloc_r+0xcc>
 80085aa:	6823      	ldr	r3, [r4, #0]
 80085ac:	4631      	mov	r1, r6
 80085ae:	4638      	mov	r0, r7
 80085b0:	eb04 0803 	add.w	r8, r4, r3
 80085b4:	f000 f940 	bl	8008838 <_sbrk_r>
 80085b8:	4580      	cmp	r8, r0
 80085ba:	d13a      	bne.n	8008632 <_malloc_r+0xd2>
 80085bc:	6821      	ldr	r1, [r4, #0]
 80085be:	3503      	adds	r5, #3
 80085c0:	1a6d      	subs	r5, r5, r1
 80085c2:	f025 0503 	bic.w	r5, r5, #3
 80085c6:	3508      	adds	r5, #8
 80085c8:	2d0c      	cmp	r5, #12
 80085ca:	bf38      	it	cc
 80085cc:	250c      	movcc	r5, #12
 80085ce:	4629      	mov	r1, r5
 80085d0:	4638      	mov	r0, r7
 80085d2:	f7ff ffa5 	bl	8008520 <sbrk_aligned>
 80085d6:	3001      	adds	r0, #1
 80085d8:	d02b      	beq.n	8008632 <_malloc_r+0xd2>
 80085da:	6823      	ldr	r3, [r4, #0]
 80085dc:	442b      	add	r3, r5
 80085de:	6023      	str	r3, [r4, #0]
 80085e0:	e00e      	b.n	8008600 <_malloc_r+0xa0>
 80085e2:	6822      	ldr	r2, [r4, #0]
 80085e4:	1b52      	subs	r2, r2, r5
 80085e6:	d41e      	bmi.n	8008626 <_malloc_r+0xc6>
 80085e8:	2a0b      	cmp	r2, #11
 80085ea:	d916      	bls.n	800861a <_malloc_r+0xba>
 80085ec:	1961      	adds	r1, r4, r5
 80085ee:	42a3      	cmp	r3, r4
 80085f0:	6025      	str	r5, [r4, #0]
 80085f2:	bf18      	it	ne
 80085f4:	6059      	strne	r1, [r3, #4]
 80085f6:	6863      	ldr	r3, [r4, #4]
 80085f8:	bf08      	it	eq
 80085fa:	6031      	streq	r1, [r6, #0]
 80085fc:	5162      	str	r2, [r4, r5]
 80085fe:	604b      	str	r3, [r1, #4]
 8008600:	4638      	mov	r0, r7
 8008602:	f104 060b 	add.w	r6, r4, #11
 8008606:	f000 fc5b 	bl	8008ec0 <__malloc_unlock>
 800860a:	f026 0607 	bic.w	r6, r6, #7
 800860e:	1d23      	adds	r3, r4, #4
 8008610:	1af2      	subs	r2, r6, r3
 8008612:	d0b6      	beq.n	8008582 <_malloc_r+0x22>
 8008614:	1b9b      	subs	r3, r3, r6
 8008616:	50a3      	str	r3, [r4, r2]
 8008618:	e7b3      	b.n	8008582 <_malloc_r+0x22>
 800861a:	6862      	ldr	r2, [r4, #4]
 800861c:	42a3      	cmp	r3, r4
 800861e:	bf0c      	ite	eq
 8008620:	6032      	streq	r2, [r6, #0]
 8008622:	605a      	strne	r2, [r3, #4]
 8008624:	e7ec      	b.n	8008600 <_malloc_r+0xa0>
 8008626:	4623      	mov	r3, r4
 8008628:	6864      	ldr	r4, [r4, #4]
 800862a:	e7b2      	b.n	8008592 <_malloc_r+0x32>
 800862c:	4634      	mov	r4, r6
 800862e:	6876      	ldr	r6, [r6, #4]
 8008630:	e7b9      	b.n	80085a6 <_malloc_r+0x46>
 8008632:	230c      	movs	r3, #12
 8008634:	603b      	str	r3, [r7, #0]
 8008636:	4638      	mov	r0, r7
 8008638:	f000 fc42 	bl	8008ec0 <__malloc_unlock>
 800863c:	e7a1      	b.n	8008582 <_malloc_r+0x22>
 800863e:	6025      	str	r5, [r4, #0]
 8008640:	e7de      	b.n	8008600 <_malloc_r+0xa0>
 8008642:	bf00      	nop
 8008644:	20003da0 	.word	0x20003da0

08008648 <iprintf>:
 8008648:	b40f      	push	{r0, r1, r2, r3}
 800864a:	4b0a      	ldr	r3, [pc, #40]	; (8008674 <iprintf+0x2c>)
 800864c:	b513      	push	{r0, r1, r4, lr}
 800864e:	681c      	ldr	r4, [r3, #0]
 8008650:	b124      	cbz	r4, 800865c <iprintf+0x14>
 8008652:	69a3      	ldr	r3, [r4, #24]
 8008654:	b913      	cbnz	r3, 800865c <iprintf+0x14>
 8008656:	4620      	mov	r0, r4
 8008658:	f7ff fe86 	bl	8008368 <__sinit>
 800865c:	ab05      	add	r3, sp, #20
 800865e:	9a04      	ldr	r2, [sp, #16]
 8008660:	68a1      	ldr	r1, [r4, #8]
 8008662:	9301      	str	r3, [sp, #4]
 8008664:	4620      	mov	r0, r4
 8008666:	f000 fca7 	bl	8008fb8 <_vfiprintf_r>
 800866a:	b002      	add	sp, #8
 800866c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008670:	b004      	add	sp, #16
 8008672:	4770      	bx	lr
 8008674:	20000010 	.word	0x20000010

08008678 <_puts_r>:
 8008678:	b570      	push	{r4, r5, r6, lr}
 800867a:	460e      	mov	r6, r1
 800867c:	4605      	mov	r5, r0
 800867e:	b118      	cbz	r0, 8008688 <_puts_r+0x10>
 8008680:	6983      	ldr	r3, [r0, #24]
 8008682:	b90b      	cbnz	r3, 8008688 <_puts_r+0x10>
 8008684:	f7ff fe70 	bl	8008368 <__sinit>
 8008688:	69ab      	ldr	r3, [r5, #24]
 800868a:	68ac      	ldr	r4, [r5, #8]
 800868c:	b913      	cbnz	r3, 8008694 <_puts_r+0x1c>
 800868e:	4628      	mov	r0, r5
 8008690:	f7ff fe6a 	bl	8008368 <__sinit>
 8008694:	4b2c      	ldr	r3, [pc, #176]	; (8008748 <_puts_r+0xd0>)
 8008696:	429c      	cmp	r4, r3
 8008698:	d120      	bne.n	80086dc <_puts_r+0x64>
 800869a:	686c      	ldr	r4, [r5, #4]
 800869c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800869e:	07db      	lsls	r3, r3, #31
 80086a0:	d405      	bmi.n	80086ae <_puts_r+0x36>
 80086a2:	89a3      	ldrh	r3, [r4, #12]
 80086a4:	0598      	lsls	r0, r3, #22
 80086a6:	d402      	bmi.n	80086ae <_puts_r+0x36>
 80086a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80086aa:	f7ff ff20 	bl	80084ee <__retarget_lock_acquire_recursive>
 80086ae:	89a3      	ldrh	r3, [r4, #12]
 80086b0:	0719      	lsls	r1, r3, #28
 80086b2:	d51d      	bpl.n	80086f0 <_puts_r+0x78>
 80086b4:	6923      	ldr	r3, [r4, #16]
 80086b6:	b1db      	cbz	r3, 80086f0 <_puts_r+0x78>
 80086b8:	3e01      	subs	r6, #1
 80086ba:	68a3      	ldr	r3, [r4, #8]
 80086bc:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80086c0:	3b01      	subs	r3, #1
 80086c2:	60a3      	str	r3, [r4, #8]
 80086c4:	bb39      	cbnz	r1, 8008716 <_puts_r+0x9e>
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	da38      	bge.n	800873c <_puts_r+0xc4>
 80086ca:	4622      	mov	r2, r4
 80086cc:	210a      	movs	r1, #10
 80086ce:	4628      	mov	r0, r5
 80086d0:	f000 f9cc 	bl	8008a6c <__swbuf_r>
 80086d4:	3001      	adds	r0, #1
 80086d6:	d011      	beq.n	80086fc <_puts_r+0x84>
 80086d8:	250a      	movs	r5, #10
 80086da:	e011      	b.n	8008700 <_puts_r+0x88>
 80086dc:	4b1b      	ldr	r3, [pc, #108]	; (800874c <_puts_r+0xd4>)
 80086de:	429c      	cmp	r4, r3
 80086e0:	d101      	bne.n	80086e6 <_puts_r+0x6e>
 80086e2:	68ac      	ldr	r4, [r5, #8]
 80086e4:	e7da      	b.n	800869c <_puts_r+0x24>
 80086e6:	4b1a      	ldr	r3, [pc, #104]	; (8008750 <_puts_r+0xd8>)
 80086e8:	429c      	cmp	r4, r3
 80086ea:	bf08      	it	eq
 80086ec:	68ec      	ldreq	r4, [r5, #12]
 80086ee:	e7d5      	b.n	800869c <_puts_r+0x24>
 80086f0:	4621      	mov	r1, r4
 80086f2:	4628      	mov	r0, r5
 80086f4:	f000 fa1e 	bl	8008b34 <__swsetup_r>
 80086f8:	2800      	cmp	r0, #0
 80086fa:	d0dd      	beq.n	80086b8 <_puts_r+0x40>
 80086fc:	f04f 35ff 	mov.w	r5, #4294967295
 8008700:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008702:	07da      	lsls	r2, r3, #31
 8008704:	d405      	bmi.n	8008712 <_puts_r+0x9a>
 8008706:	89a3      	ldrh	r3, [r4, #12]
 8008708:	059b      	lsls	r3, r3, #22
 800870a:	d402      	bmi.n	8008712 <_puts_r+0x9a>
 800870c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800870e:	f7ff feef 	bl	80084f0 <__retarget_lock_release_recursive>
 8008712:	4628      	mov	r0, r5
 8008714:	bd70      	pop	{r4, r5, r6, pc}
 8008716:	2b00      	cmp	r3, #0
 8008718:	da04      	bge.n	8008724 <_puts_r+0xac>
 800871a:	69a2      	ldr	r2, [r4, #24]
 800871c:	429a      	cmp	r2, r3
 800871e:	dc06      	bgt.n	800872e <_puts_r+0xb6>
 8008720:	290a      	cmp	r1, #10
 8008722:	d004      	beq.n	800872e <_puts_r+0xb6>
 8008724:	6823      	ldr	r3, [r4, #0]
 8008726:	1c5a      	adds	r2, r3, #1
 8008728:	6022      	str	r2, [r4, #0]
 800872a:	7019      	strb	r1, [r3, #0]
 800872c:	e7c5      	b.n	80086ba <_puts_r+0x42>
 800872e:	4622      	mov	r2, r4
 8008730:	4628      	mov	r0, r5
 8008732:	f000 f99b 	bl	8008a6c <__swbuf_r>
 8008736:	3001      	adds	r0, #1
 8008738:	d1bf      	bne.n	80086ba <_puts_r+0x42>
 800873a:	e7df      	b.n	80086fc <_puts_r+0x84>
 800873c:	6823      	ldr	r3, [r4, #0]
 800873e:	250a      	movs	r5, #10
 8008740:	1c5a      	adds	r2, r3, #1
 8008742:	6022      	str	r2, [r4, #0]
 8008744:	701d      	strb	r5, [r3, #0]
 8008746:	e7db      	b.n	8008700 <_puts_r+0x88>
 8008748:	08009b24 	.word	0x08009b24
 800874c:	08009b44 	.word	0x08009b44
 8008750:	08009b04 	.word	0x08009b04

08008754 <puts>:
 8008754:	4b02      	ldr	r3, [pc, #8]	; (8008760 <puts+0xc>)
 8008756:	4601      	mov	r1, r0
 8008758:	6818      	ldr	r0, [r3, #0]
 800875a:	f7ff bf8d 	b.w	8008678 <_puts_r>
 800875e:	bf00      	nop
 8008760:	20000010 	.word	0x20000010

08008764 <cleanup_glue>:
 8008764:	b538      	push	{r3, r4, r5, lr}
 8008766:	460c      	mov	r4, r1
 8008768:	6809      	ldr	r1, [r1, #0]
 800876a:	4605      	mov	r5, r0
 800876c:	b109      	cbz	r1, 8008772 <cleanup_glue+0xe>
 800876e:	f7ff fff9 	bl	8008764 <cleanup_glue>
 8008772:	4621      	mov	r1, r4
 8008774:	4628      	mov	r0, r5
 8008776:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800877a:	f000 bba7 	b.w	8008ecc <_free_r>
	...

08008780 <_reclaim_reent>:
 8008780:	4b2c      	ldr	r3, [pc, #176]	; (8008834 <_reclaim_reent+0xb4>)
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	4283      	cmp	r3, r0
 8008786:	b570      	push	{r4, r5, r6, lr}
 8008788:	4604      	mov	r4, r0
 800878a:	d051      	beq.n	8008830 <_reclaim_reent+0xb0>
 800878c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800878e:	b143      	cbz	r3, 80087a2 <_reclaim_reent+0x22>
 8008790:	68db      	ldr	r3, [r3, #12]
 8008792:	2b00      	cmp	r3, #0
 8008794:	d14a      	bne.n	800882c <_reclaim_reent+0xac>
 8008796:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008798:	6819      	ldr	r1, [r3, #0]
 800879a:	b111      	cbz	r1, 80087a2 <_reclaim_reent+0x22>
 800879c:	4620      	mov	r0, r4
 800879e:	f000 fb95 	bl	8008ecc <_free_r>
 80087a2:	6961      	ldr	r1, [r4, #20]
 80087a4:	b111      	cbz	r1, 80087ac <_reclaim_reent+0x2c>
 80087a6:	4620      	mov	r0, r4
 80087a8:	f000 fb90 	bl	8008ecc <_free_r>
 80087ac:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80087ae:	b111      	cbz	r1, 80087b6 <_reclaim_reent+0x36>
 80087b0:	4620      	mov	r0, r4
 80087b2:	f000 fb8b 	bl	8008ecc <_free_r>
 80087b6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80087b8:	b111      	cbz	r1, 80087c0 <_reclaim_reent+0x40>
 80087ba:	4620      	mov	r0, r4
 80087bc:	f000 fb86 	bl	8008ecc <_free_r>
 80087c0:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80087c2:	b111      	cbz	r1, 80087ca <_reclaim_reent+0x4a>
 80087c4:	4620      	mov	r0, r4
 80087c6:	f000 fb81 	bl	8008ecc <_free_r>
 80087ca:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80087cc:	b111      	cbz	r1, 80087d4 <_reclaim_reent+0x54>
 80087ce:	4620      	mov	r0, r4
 80087d0:	f000 fb7c 	bl	8008ecc <_free_r>
 80087d4:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 80087d6:	b111      	cbz	r1, 80087de <_reclaim_reent+0x5e>
 80087d8:	4620      	mov	r0, r4
 80087da:	f000 fb77 	bl	8008ecc <_free_r>
 80087de:	6da1      	ldr	r1, [r4, #88]	; 0x58
 80087e0:	b111      	cbz	r1, 80087e8 <_reclaim_reent+0x68>
 80087e2:	4620      	mov	r0, r4
 80087e4:	f000 fb72 	bl	8008ecc <_free_r>
 80087e8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80087ea:	b111      	cbz	r1, 80087f2 <_reclaim_reent+0x72>
 80087ec:	4620      	mov	r0, r4
 80087ee:	f000 fb6d 	bl	8008ecc <_free_r>
 80087f2:	69a3      	ldr	r3, [r4, #24]
 80087f4:	b1e3      	cbz	r3, 8008830 <_reclaim_reent+0xb0>
 80087f6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80087f8:	4620      	mov	r0, r4
 80087fa:	4798      	blx	r3
 80087fc:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80087fe:	b1b9      	cbz	r1, 8008830 <_reclaim_reent+0xb0>
 8008800:	4620      	mov	r0, r4
 8008802:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8008806:	f7ff bfad 	b.w	8008764 <cleanup_glue>
 800880a:	5949      	ldr	r1, [r1, r5]
 800880c:	b941      	cbnz	r1, 8008820 <_reclaim_reent+0xa0>
 800880e:	3504      	adds	r5, #4
 8008810:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008812:	2d80      	cmp	r5, #128	; 0x80
 8008814:	68d9      	ldr	r1, [r3, #12]
 8008816:	d1f8      	bne.n	800880a <_reclaim_reent+0x8a>
 8008818:	4620      	mov	r0, r4
 800881a:	f000 fb57 	bl	8008ecc <_free_r>
 800881e:	e7ba      	b.n	8008796 <_reclaim_reent+0x16>
 8008820:	680e      	ldr	r6, [r1, #0]
 8008822:	4620      	mov	r0, r4
 8008824:	f000 fb52 	bl	8008ecc <_free_r>
 8008828:	4631      	mov	r1, r6
 800882a:	e7ef      	b.n	800880c <_reclaim_reent+0x8c>
 800882c:	2500      	movs	r5, #0
 800882e:	e7ef      	b.n	8008810 <_reclaim_reent+0x90>
 8008830:	bd70      	pop	{r4, r5, r6, pc}
 8008832:	bf00      	nop
 8008834:	20000010 	.word	0x20000010

08008838 <_sbrk_r>:
 8008838:	b538      	push	{r3, r4, r5, lr}
 800883a:	4d06      	ldr	r5, [pc, #24]	; (8008854 <_sbrk_r+0x1c>)
 800883c:	2300      	movs	r3, #0
 800883e:	4604      	mov	r4, r0
 8008840:	4608      	mov	r0, r1
 8008842:	602b      	str	r3, [r5, #0]
 8008844:	f7f9 f9d2 	bl	8001bec <_sbrk>
 8008848:	1c43      	adds	r3, r0, #1
 800884a:	d102      	bne.n	8008852 <_sbrk_r+0x1a>
 800884c:	682b      	ldr	r3, [r5, #0]
 800884e:	b103      	cbz	r3, 8008852 <_sbrk_r+0x1a>
 8008850:	6023      	str	r3, [r4, #0]
 8008852:	bd38      	pop	{r3, r4, r5, pc}
 8008854:	20003da8 	.word	0x20003da8

08008858 <setvbuf>:
 8008858:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800885c:	461d      	mov	r5, r3
 800885e:	4b5d      	ldr	r3, [pc, #372]	; (80089d4 <setvbuf+0x17c>)
 8008860:	681f      	ldr	r7, [r3, #0]
 8008862:	4604      	mov	r4, r0
 8008864:	460e      	mov	r6, r1
 8008866:	4690      	mov	r8, r2
 8008868:	b127      	cbz	r7, 8008874 <setvbuf+0x1c>
 800886a:	69bb      	ldr	r3, [r7, #24]
 800886c:	b913      	cbnz	r3, 8008874 <setvbuf+0x1c>
 800886e:	4638      	mov	r0, r7
 8008870:	f7ff fd7a 	bl	8008368 <__sinit>
 8008874:	4b58      	ldr	r3, [pc, #352]	; (80089d8 <setvbuf+0x180>)
 8008876:	429c      	cmp	r4, r3
 8008878:	d167      	bne.n	800894a <setvbuf+0xf2>
 800887a:	687c      	ldr	r4, [r7, #4]
 800887c:	f1b8 0f02 	cmp.w	r8, #2
 8008880:	d006      	beq.n	8008890 <setvbuf+0x38>
 8008882:	f1b8 0f01 	cmp.w	r8, #1
 8008886:	f200 809f 	bhi.w	80089c8 <setvbuf+0x170>
 800888a:	2d00      	cmp	r5, #0
 800888c:	f2c0 809c 	blt.w	80089c8 <setvbuf+0x170>
 8008890:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008892:	07db      	lsls	r3, r3, #31
 8008894:	d405      	bmi.n	80088a2 <setvbuf+0x4a>
 8008896:	89a3      	ldrh	r3, [r4, #12]
 8008898:	0598      	lsls	r0, r3, #22
 800889a:	d402      	bmi.n	80088a2 <setvbuf+0x4a>
 800889c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800889e:	f7ff fe26 	bl	80084ee <__retarget_lock_acquire_recursive>
 80088a2:	4621      	mov	r1, r4
 80088a4:	4638      	mov	r0, r7
 80088a6:	f000 fa49 	bl	8008d3c <_fflush_r>
 80088aa:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80088ac:	b141      	cbz	r1, 80088c0 <setvbuf+0x68>
 80088ae:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80088b2:	4299      	cmp	r1, r3
 80088b4:	d002      	beq.n	80088bc <setvbuf+0x64>
 80088b6:	4638      	mov	r0, r7
 80088b8:	f000 fb08 	bl	8008ecc <_free_r>
 80088bc:	2300      	movs	r3, #0
 80088be:	6363      	str	r3, [r4, #52]	; 0x34
 80088c0:	2300      	movs	r3, #0
 80088c2:	61a3      	str	r3, [r4, #24]
 80088c4:	6063      	str	r3, [r4, #4]
 80088c6:	89a3      	ldrh	r3, [r4, #12]
 80088c8:	0619      	lsls	r1, r3, #24
 80088ca:	d503      	bpl.n	80088d4 <setvbuf+0x7c>
 80088cc:	6921      	ldr	r1, [r4, #16]
 80088ce:	4638      	mov	r0, r7
 80088d0:	f000 fafc 	bl	8008ecc <_free_r>
 80088d4:	89a3      	ldrh	r3, [r4, #12]
 80088d6:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 80088da:	f023 0303 	bic.w	r3, r3, #3
 80088de:	f1b8 0f02 	cmp.w	r8, #2
 80088e2:	81a3      	strh	r3, [r4, #12]
 80088e4:	d06c      	beq.n	80089c0 <setvbuf+0x168>
 80088e6:	ab01      	add	r3, sp, #4
 80088e8:	466a      	mov	r2, sp
 80088ea:	4621      	mov	r1, r4
 80088ec:	4638      	mov	r0, r7
 80088ee:	f000 fa73 	bl	8008dd8 <__swhatbuf_r>
 80088f2:	89a3      	ldrh	r3, [r4, #12]
 80088f4:	4318      	orrs	r0, r3
 80088f6:	81a0      	strh	r0, [r4, #12]
 80088f8:	2d00      	cmp	r5, #0
 80088fa:	d130      	bne.n	800895e <setvbuf+0x106>
 80088fc:	9d00      	ldr	r5, [sp, #0]
 80088fe:	4628      	mov	r0, r5
 8008900:	f000 fad0 	bl	8008ea4 <malloc>
 8008904:	4606      	mov	r6, r0
 8008906:	2800      	cmp	r0, #0
 8008908:	d155      	bne.n	80089b6 <setvbuf+0x15e>
 800890a:	f8dd 9000 	ldr.w	r9, [sp]
 800890e:	45a9      	cmp	r9, r5
 8008910:	d14a      	bne.n	80089a8 <setvbuf+0x150>
 8008912:	f04f 35ff 	mov.w	r5, #4294967295
 8008916:	2200      	movs	r2, #0
 8008918:	60a2      	str	r2, [r4, #8]
 800891a:	f104 0247 	add.w	r2, r4, #71	; 0x47
 800891e:	6022      	str	r2, [r4, #0]
 8008920:	6122      	str	r2, [r4, #16]
 8008922:	2201      	movs	r2, #1
 8008924:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008928:	6162      	str	r2, [r4, #20]
 800892a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800892c:	f043 0302 	orr.w	r3, r3, #2
 8008930:	07d2      	lsls	r2, r2, #31
 8008932:	81a3      	strh	r3, [r4, #12]
 8008934:	d405      	bmi.n	8008942 <setvbuf+0xea>
 8008936:	f413 7f00 	tst.w	r3, #512	; 0x200
 800893a:	d102      	bne.n	8008942 <setvbuf+0xea>
 800893c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800893e:	f7ff fdd7 	bl	80084f0 <__retarget_lock_release_recursive>
 8008942:	4628      	mov	r0, r5
 8008944:	b003      	add	sp, #12
 8008946:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800894a:	4b24      	ldr	r3, [pc, #144]	; (80089dc <setvbuf+0x184>)
 800894c:	429c      	cmp	r4, r3
 800894e:	d101      	bne.n	8008954 <setvbuf+0xfc>
 8008950:	68bc      	ldr	r4, [r7, #8]
 8008952:	e793      	b.n	800887c <setvbuf+0x24>
 8008954:	4b22      	ldr	r3, [pc, #136]	; (80089e0 <setvbuf+0x188>)
 8008956:	429c      	cmp	r4, r3
 8008958:	bf08      	it	eq
 800895a:	68fc      	ldreq	r4, [r7, #12]
 800895c:	e78e      	b.n	800887c <setvbuf+0x24>
 800895e:	2e00      	cmp	r6, #0
 8008960:	d0cd      	beq.n	80088fe <setvbuf+0xa6>
 8008962:	69bb      	ldr	r3, [r7, #24]
 8008964:	b913      	cbnz	r3, 800896c <setvbuf+0x114>
 8008966:	4638      	mov	r0, r7
 8008968:	f7ff fcfe 	bl	8008368 <__sinit>
 800896c:	f1b8 0f01 	cmp.w	r8, #1
 8008970:	bf08      	it	eq
 8008972:	89a3      	ldrheq	r3, [r4, #12]
 8008974:	6026      	str	r6, [r4, #0]
 8008976:	bf04      	itt	eq
 8008978:	f043 0301 	orreq.w	r3, r3, #1
 800897c:	81a3      	strheq	r3, [r4, #12]
 800897e:	89a2      	ldrh	r2, [r4, #12]
 8008980:	f012 0308 	ands.w	r3, r2, #8
 8008984:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8008988:	d01c      	beq.n	80089c4 <setvbuf+0x16c>
 800898a:	07d3      	lsls	r3, r2, #31
 800898c:	bf41      	itttt	mi
 800898e:	2300      	movmi	r3, #0
 8008990:	426d      	negmi	r5, r5
 8008992:	60a3      	strmi	r3, [r4, #8]
 8008994:	61a5      	strmi	r5, [r4, #24]
 8008996:	bf58      	it	pl
 8008998:	60a5      	strpl	r5, [r4, #8]
 800899a:	6e65      	ldr	r5, [r4, #100]	; 0x64
 800899c:	f015 0501 	ands.w	r5, r5, #1
 80089a0:	d115      	bne.n	80089ce <setvbuf+0x176>
 80089a2:	f412 7f00 	tst.w	r2, #512	; 0x200
 80089a6:	e7c8      	b.n	800893a <setvbuf+0xe2>
 80089a8:	4648      	mov	r0, r9
 80089aa:	f000 fa7b 	bl	8008ea4 <malloc>
 80089ae:	4606      	mov	r6, r0
 80089b0:	2800      	cmp	r0, #0
 80089b2:	d0ae      	beq.n	8008912 <setvbuf+0xba>
 80089b4:	464d      	mov	r5, r9
 80089b6:	89a3      	ldrh	r3, [r4, #12]
 80089b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80089bc:	81a3      	strh	r3, [r4, #12]
 80089be:	e7d0      	b.n	8008962 <setvbuf+0x10a>
 80089c0:	2500      	movs	r5, #0
 80089c2:	e7a8      	b.n	8008916 <setvbuf+0xbe>
 80089c4:	60a3      	str	r3, [r4, #8]
 80089c6:	e7e8      	b.n	800899a <setvbuf+0x142>
 80089c8:	f04f 35ff 	mov.w	r5, #4294967295
 80089cc:	e7b9      	b.n	8008942 <setvbuf+0xea>
 80089ce:	2500      	movs	r5, #0
 80089d0:	e7b7      	b.n	8008942 <setvbuf+0xea>
 80089d2:	bf00      	nop
 80089d4:	20000010 	.word	0x20000010
 80089d8:	08009b24 	.word	0x08009b24
 80089dc:	08009b44 	.word	0x08009b44
 80089e0:	08009b04 	.word	0x08009b04

080089e4 <__sread>:
 80089e4:	b510      	push	{r4, lr}
 80089e6:	460c      	mov	r4, r1
 80089e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80089ec:	f000 fda8 	bl	8009540 <_read_r>
 80089f0:	2800      	cmp	r0, #0
 80089f2:	bfab      	itete	ge
 80089f4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80089f6:	89a3      	ldrhlt	r3, [r4, #12]
 80089f8:	181b      	addge	r3, r3, r0
 80089fa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80089fe:	bfac      	ite	ge
 8008a00:	6563      	strge	r3, [r4, #84]	; 0x54
 8008a02:	81a3      	strhlt	r3, [r4, #12]
 8008a04:	bd10      	pop	{r4, pc}

08008a06 <__swrite>:
 8008a06:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008a0a:	461f      	mov	r7, r3
 8008a0c:	898b      	ldrh	r3, [r1, #12]
 8008a0e:	05db      	lsls	r3, r3, #23
 8008a10:	4605      	mov	r5, r0
 8008a12:	460c      	mov	r4, r1
 8008a14:	4616      	mov	r6, r2
 8008a16:	d505      	bpl.n	8008a24 <__swrite+0x1e>
 8008a18:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008a1c:	2302      	movs	r3, #2
 8008a1e:	2200      	movs	r2, #0
 8008a20:	f000 f9c8 	bl	8008db4 <_lseek_r>
 8008a24:	89a3      	ldrh	r3, [r4, #12]
 8008a26:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008a2a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008a2e:	81a3      	strh	r3, [r4, #12]
 8008a30:	4632      	mov	r2, r6
 8008a32:	463b      	mov	r3, r7
 8008a34:	4628      	mov	r0, r5
 8008a36:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008a3a:	f000 b869 	b.w	8008b10 <_write_r>

08008a3e <__sseek>:
 8008a3e:	b510      	push	{r4, lr}
 8008a40:	460c      	mov	r4, r1
 8008a42:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008a46:	f000 f9b5 	bl	8008db4 <_lseek_r>
 8008a4a:	1c43      	adds	r3, r0, #1
 8008a4c:	89a3      	ldrh	r3, [r4, #12]
 8008a4e:	bf15      	itete	ne
 8008a50:	6560      	strne	r0, [r4, #84]	; 0x54
 8008a52:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008a56:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008a5a:	81a3      	strheq	r3, [r4, #12]
 8008a5c:	bf18      	it	ne
 8008a5e:	81a3      	strhne	r3, [r4, #12]
 8008a60:	bd10      	pop	{r4, pc}

08008a62 <__sclose>:
 8008a62:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008a66:	f000 b8d3 	b.w	8008c10 <_close_r>
	...

08008a6c <__swbuf_r>:
 8008a6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a6e:	460e      	mov	r6, r1
 8008a70:	4614      	mov	r4, r2
 8008a72:	4605      	mov	r5, r0
 8008a74:	b118      	cbz	r0, 8008a7e <__swbuf_r+0x12>
 8008a76:	6983      	ldr	r3, [r0, #24]
 8008a78:	b90b      	cbnz	r3, 8008a7e <__swbuf_r+0x12>
 8008a7a:	f7ff fc75 	bl	8008368 <__sinit>
 8008a7e:	4b21      	ldr	r3, [pc, #132]	; (8008b04 <__swbuf_r+0x98>)
 8008a80:	429c      	cmp	r4, r3
 8008a82:	d12b      	bne.n	8008adc <__swbuf_r+0x70>
 8008a84:	686c      	ldr	r4, [r5, #4]
 8008a86:	69a3      	ldr	r3, [r4, #24]
 8008a88:	60a3      	str	r3, [r4, #8]
 8008a8a:	89a3      	ldrh	r3, [r4, #12]
 8008a8c:	071a      	lsls	r2, r3, #28
 8008a8e:	d52f      	bpl.n	8008af0 <__swbuf_r+0x84>
 8008a90:	6923      	ldr	r3, [r4, #16]
 8008a92:	b36b      	cbz	r3, 8008af0 <__swbuf_r+0x84>
 8008a94:	6923      	ldr	r3, [r4, #16]
 8008a96:	6820      	ldr	r0, [r4, #0]
 8008a98:	1ac0      	subs	r0, r0, r3
 8008a9a:	6963      	ldr	r3, [r4, #20]
 8008a9c:	b2f6      	uxtb	r6, r6
 8008a9e:	4283      	cmp	r3, r0
 8008aa0:	4637      	mov	r7, r6
 8008aa2:	dc04      	bgt.n	8008aae <__swbuf_r+0x42>
 8008aa4:	4621      	mov	r1, r4
 8008aa6:	4628      	mov	r0, r5
 8008aa8:	f000 f948 	bl	8008d3c <_fflush_r>
 8008aac:	bb30      	cbnz	r0, 8008afc <__swbuf_r+0x90>
 8008aae:	68a3      	ldr	r3, [r4, #8]
 8008ab0:	3b01      	subs	r3, #1
 8008ab2:	60a3      	str	r3, [r4, #8]
 8008ab4:	6823      	ldr	r3, [r4, #0]
 8008ab6:	1c5a      	adds	r2, r3, #1
 8008ab8:	6022      	str	r2, [r4, #0]
 8008aba:	701e      	strb	r6, [r3, #0]
 8008abc:	6963      	ldr	r3, [r4, #20]
 8008abe:	3001      	adds	r0, #1
 8008ac0:	4283      	cmp	r3, r0
 8008ac2:	d004      	beq.n	8008ace <__swbuf_r+0x62>
 8008ac4:	89a3      	ldrh	r3, [r4, #12]
 8008ac6:	07db      	lsls	r3, r3, #31
 8008ac8:	d506      	bpl.n	8008ad8 <__swbuf_r+0x6c>
 8008aca:	2e0a      	cmp	r6, #10
 8008acc:	d104      	bne.n	8008ad8 <__swbuf_r+0x6c>
 8008ace:	4621      	mov	r1, r4
 8008ad0:	4628      	mov	r0, r5
 8008ad2:	f000 f933 	bl	8008d3c <_fflush_r>
 8008ad6:	b988      	cbnz	r0, 8008afc <__swbuf_r+0x90>
 8008ad8:	4638      	mov	r0, r7
 8008ada:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008adc:	4b0a      	ldr	r3, [pc, #40]	; (8008b08 <__swbuf_r+0x9c>)
 8008ade:	429c      	cmp	r4, r3
 8008ae0:	d101      	bne.n	8008ae6 <__swbuf_r+0x7a>
 8008ae2:	68ac      	ldr	r4, [r5, #8]
 8008ae4:	e7cf      	b.n	8008a86 <__swbuf_r+0x1a>
 8008ae6:	4b09      	ldr	r3, [pc, #36]	; (8008b0c <__swbuf_r+0xa0>)
 8008ae8:	429c      	cmp	r4, r3
 8008aea:	bf08      	it	eq
 8008aec:	68ec      	ldreq	r4, [r5, #12]
 8008aee:	e7ca      	b.n	8008a86 <__swbuf_r+0x1a>
 8008af0:	4621      	mov	r1, r4
 8008af2:	4628      	mov	r0, r5
 8008af4:	f000 f81e 	bl	8008b34 <__swsetup_r>
 8008af8:	2800      	cmp	r0, #0
 8008afa:	d0cb      	beq.n	8008a94 <__swbuf_r+0x28>
 8008afc:	f04f 37ff 	mov.w	r7, #4294967295
 8008b00:	e7ea      	b.n	8008ad8 <__swbuf_r+0x6c>
 8008b02:	bf00      	nop
 8008b04:	08009b24 	.word	0x08009b24
 8008b08:	08009b44 	.word	0x08009b44
 8008b0c:	08009b04 	.word	0x08009b04

08008b10 <_write_r>:
 8008b10:	b538      	push	{r3, r4, r5, lr}
 8008b12:	4d07      	ldr	r5, [pc, #28]	; (8008b30 <_write_r+0x20>)
 8008b14:	4604      	mov	r4, r0
 8008b16:	4608      	mov	r0, r1
 8008b18:	4611      	mov	r1, r2
 8008b1a:	2200      	movs	r2, #0
 8008b1c:	602a      	str	r2, [r5, #0]
 8008b1e:	461a      	mov	r2, r3
 8008b20:	f7f8 ff16 	bl	8001950 <_write>
 8008b24:	1c43      	adds	r3, r0, #1
 8008b26:	d102      	bne.n	8008b2e <_write_r+0x1e>
 8008b28:	682b      	ldr	r3, [r5, #0]
 8008b2a:	b103      	cbz	r3, 8008b2e <_write_r+0x1e>
 8008b2c:	6023      	str	r3, [r4, #0]
 8008b2e:	bd38      	pop	{r3, r4, r5, pc}
 8008b30:	20003da8 	.word	0x20003da8

08008b34 <__swsetup_r>:
 8008b34:	4b32      	ldr	r3, [pc, #200]	; (8008c00 <__swsetup_r+0xcc>)
 8008b36:	b570      	push	{r4, r5, r6, lr}
 8008b38:	681d      	ldr	r5, [r3, #0]
 8008b3a:	4606      	mov	r6, r0
 8008b3c:	460c      	mov	r4, r1
 8008b3e:	b125      	cbz	r5, 8008b4a <__swsetup_r+0x16>
 8008b40:	69ab      	ldr	r3, [r5, #24]
 8008b42:	b913      	cbnz	r3, 8008b4a <__swsetup_r+0x16>
 8008b44:	4628      	mov	r0, r5
 8008b46:	f7ff fc0f 	bl	8008368 <__sinit>
 8008b4a:	4b2e      	ldr	r3, [pc, #184]	; (8008c04 <__swsetup_r+0xd0>)
 8008b4c:	429c      	cmp	r4, r3
 8008b4e:	d10f      	bne.n	8008b70 <__swsetup_r+0x3c>
 8008b50:	686c      	ldr	r4, [r5, #4]
 8008b52:	89a3      	ldrh	r3, [r4, #12]
 8008b54:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008b58:	0719      	lsls	r1, r3, #28
 8008b5a:	d42c      	bmi.n	8008bb6 <__swsetup_r+0x82>
 8008b5c:	06dd      	lsls	r5, r3, #27
 8008b5e:	d411      	bmi.n	8008b84 <__swsetup_r+0x50>
 8008b60:	2309      	movs	r3, #9
 8008b62:	6033      	str	r3, [r6, #0]
 8008b64:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008b68:	81a3      	strh	r3, [r4, #12]
 8008b6a:	f04f 30ff 	mov.w	r0, #4294967295
 8008b6e:	e03e      	b.n	8008bee <__swsetup_r+0xba>
 8008b70:	4b25      	ldr	r3, [pc, #148]	; (8008c08 <__swsetup_r+0xd4>)
 8008b72:	429c      	cmp	r4, r3
 8008b74:	d101      	bne.n	8008b7a <__swsetup_r+0x46>
 8008b76:	68ac      	ldr	r4, [r5, #8]
 8008b78:	e7eb      	b.n	8008b52 <__swsetup_r+0x1e>
 8008b7a:	4b24      	ldr	r3, [pc, #144]	; (8008c0c <__swsetup_r+0xd8>)
 8008b7c:	429c      	cmp	r4, r3
 8008b7e:	bf08      	it	eq
 8008b80:	68ec      	ldreq	r4, [r5, #12]
 8008b82:	e7e6      	b.n	8008b52 <__swsetup_r+0x1e>
 8008b84:	0758      	lsls	r0, r3, #29
 8008b86:	d512      	bpl.n	8008bae <__swsetup_r+0x7a>
 8008b88:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008b8a:	b141      	cbz	r1, 8008b9e <__swsetup_r+0x6a>
 8008b8c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008b90:	4299      	cmp	r1, r3
 8008b92:	d002      	beq.n	8008b9a <__swsetup_r+0x66>
 8008b94:	4630      	mov	r0, r6
 8008b96:	f000 f999 	bl	8008ecc <_free_r>
 8008b9a:	2300      	movs	r3, #0
 8008b9c:	6363      	str	r3, [r4, #52]	; 0x34
 8008b9e:	89a3      	ldrh	r3, [r4, #12]
 8008ba0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008ba4:	81a3      	strh	r3, [r4, #12]
 8008ba6:	2300      	movs	r3, #0
 8008ba8:	6063      	str	r3, [r4, #4]
 8008baa:	6923      	ldr	r3, [r4, #16]
 8008bac:	6023      	str	r3, [r4, #0]
 8008bae:	89a3      	ldrh	r3, [r4, #12]
 8008bb0:	f043 0308 	orr.w	r3, r3, #8
 8008bb4:	81a3      	strh	r3, [r4, #12]
 8008bb6:	6923      	ldr	r3, [r4, #16]
 8008bb8:	b94b      	cbnz	r3, 8008bce <__swsetup_r+0x9a>
 8008bba:	89a3      	ldrh	r3, [r4, #12]
 8008bbc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008bc0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008bc4:	d003      	beq.n	8008bce <__swsetup_r+0x9a>
 8008bc6:	4621      	mov	r1, r4
 8008bc8:	4630      	mov	r0, r6
 8008bca:	f000 f92b 	bl	8008e24 <__smakebuf_r>
 8008bce:	89a0      	ldrh	r0, [r4, #12]
 8008bd0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008bd4:	f010 0301 	ands.w	r3, r0, #1
 8008bd8:	d00a      	beq.n	8008bf0 <__swsetup_r+0xbc>
 8008bda:	2300      	movs	r3, #0
 8008bdc:	60a3      	str	r3, [r4, #8]
 8008bde:	6963      	ldr	r3, [r4, #20]
 8008be0:	425b      	negs	r3, r3
 8008be2:	61a3      	str	r3, [r4, #24]
 8008be4:	6923      	ldr	r3, [r4, #16]
 8008be6:	b943      	cbnz	r3, 8008bfa <__swsetup_r+0xc6>
 8008be8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008bec:	d1ba      	bne.n	8008b64 <__swsetup_r+0x30>
 8008bee:	bd70      	pop	{r4, r5, r6, pc}
 8008bf0:	0781      	lsls	r1, r0, #30
 8008bf2:	bf58      	it	pl
 8008bf4:	6963      	ldrpl	r3, [r4, #20]
 8008bf6:	60a3      	str	r3, [r4, #8]
 8008bf8:	e7f4      	b.n	8008be4 <__swsetup_r+0xb0>
 8008bfa:	2000      	movs	r0, #0
 8008bfc:	e7f7      	b.n	8008bee <__swsetup_r+0xba>
 8008bfe:	bf00      	nop
 8008c00:	20000010 	.word	0x20000010
 8008c04:	08009b24 	.word	0x08009b24
 8008c08:	08009b44 	.word	0x08009b44
 8008c0c:	08009b04 	.word	0x08009b04

08008c10 <_close_r>:
 8008c10:	b538      	push	{r3, r4, r5, lr}
 8008c12:	4d06      	ldr	r5, [pc, #24]	; (8008c2c <_close_r+0x1c>)
 8008c14:	2300      	movs	r3, #0
 8008c16:	4604      	mov	r4, r0
 8008c18:	4608      	mov	r0, r1
 8008c1a:	602b      	str	r3, [r5, #0]
 8008c1c:	f7f8 fec4 	bl	80019a8 <_close>
 8008c20:	1c43      	adds	r3, r0, #1
 8008c22:	d102      	bne.n	8008c2a <_close_r+0x1a>
 8008c24:	682b      	ldr	r3, [r5, #0]
 8008c26:	b103      	cbz	r3, 8008c2a <_close_r+0x1a>
 8008c28:	6023      	str	r3, [r4, #0]
 8008c2a:	bd38      	pop	{r3, r4, r5, pc}
 8008c2c:	20003da8 	.word	0x20003da8

08008c30 <__sflush_r>:
 8008c30:	898a      	ldrh	r2, [r1, #12]
 8008c32:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008c36:	4605      	mov	r5, r0
 8008c38:	0710      	lsls	r0, r2, #28
 8008c3a:	460c      	mov	r4, r1
 8008c3c:	d458      	bmi.n	8008cf0 <__sflush_r+0xc0>
 8008c3e:	684b      	ldr	r3, [r1, #4]
 8008c40:	2b00      	cmp	r3, #0
 8008c42:	dc05      	bgt.n	8008c50 <__sflush_r+0x20>
 8008c44:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	dc02      	bgt.n	8008c50 <__sflush_r+0x20>
 8008c4a:	2000      	movs	r0, #0
 8008c4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008c50:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008c52:	2e00      	cmp	r6, #0
 8008c54:	d0f9      	beq.n	8008c4a <__sflush_r+0x1a>
 8008c56:	2300      	movs	r3, #0
 8008c58:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008c5c:	682f      	ldr	r7, [r5, #0]
 8008c5e:	602b      	str	r3, [r5, #0]
 8008c60:	d032      	beq.n	8008cc8 <__sflush_r+0x98>
 8008c62:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008c64:	89a3      	ldrh	r3, [r4, #12]
 8008c66:	075a      	lsls	r2, r3, #29
 8008c68:	d505      	bpl.n	8008c76 <__sflush_r+0x46>
 8008c6a:	6863      	ldr	r3, [r4, #4]
 8008c6c:	1ac0      	subs	r0, r0, r3
 8008c6e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008c70:	b10b      	cbz	r3, 8008c76 <__sflush_r+0x46>
 8008c72:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008c74:	1ac0      	subs	r0, r0, r3
 8008c76:	2300      	movs	r3, #0
 8008c78:	4602      	mov	r2, r0
 8008c7a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008c7c:	6a21      	ldr	r1, [r4, #32]
 8008c7e:	4628      	mov	r0, r5
 8008c80:	47b0      	blx	r6
 8008c82:	1c43      	adds	r3, r0, #1
 8008c84:	89a3      	ldrh	r3, [r4, #12]
 8008c86:	d106      	bne.n	8008c96 <__sflush_r+0x66>
 8008c88:	6829      	ldr	r1, [r5, #0]
 8008c8a:	291d      	cmp	r1, #29
 8008c8c:	d82c      	bhi.n	8008ce8 <__sflush_r+0xb8>
 8008c8e:	4a2a      	ldr	r2, [pc, #168]	; (8008d38 <__sflush_r+0x108>)
 8008c90:	40ca      	lsrs	r2, r1
 8008c92:	07d6      	lsls	r6, r2, #31
 8008c94:	d528      	bpl.n	8008ce8 <__sflush_r+0xb8>
 8008c96:	2200      	movs	r2, #0
 8008c98:	6062      	str	r2, [r4, #4]
 8008c9a:	04d9      	lsls	r1, r3, #19
 8008c9c:	6922      	ldr	r2, [r4, #16]
 8008c9e:	6022      	str	r2, [r4, #0]
 8008ca0:	d504      	bpl.n	8008cac <__sflush_r+0x7c>
 8008ca2:	1c42      	adds	r2, r0, #1
 8008ca4:	d101      	bne.n	8008caa <__sflush_r+0x7a>
 8008ca6:	682b      	ldr	r3, [r5, #0]
 8008ca8:	b903      	cbnz	r3, 8008cac <__sflush_r+0x7c>
 8008caa:	6560      	str	r0, [r4, #84]	; 0x54
 8008cac:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008cae:	602f      	str	r7, [r5, #0]
 8008cb0:	2900      	cmp	r1, #0
 8008cb2:	d0ca      	beq.n	8008c4a <__sflush_r+0x1a>
 8008cb4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008cb8:	4299      	cmp	r1, r3
 8008cba:	d002      	beq.n	8008cc2 <__sflush_r+0x92>
 8008cbc:	4628      	mov	r0, r5
 8008cbe:	f000 f905 	bl	8008ecc <_free_r>
 8008cc2:	2000      	movs	r0, #0
 8008cc4:	6360      	str	r0, [r4, #52]	; 0x34
 8008cc6:	e7c1      	b.n	8008c4c <__sflush_r+0x1c>
 8008cc8:	6a21      	ldr	r1, [r4, #32]
 8008cca:	2301      	movs	r3, #1
 8008ccc:	4628      	mov	r0, r5
 8008cce:	47b0      	blx	r6
 8008cd0:	1c41      	adds	r1, r0, #1
 8008cd2:	d1c7      	bne.n	8008c64 <__sflush_r+0x34>
 8008cd4:	682b      	ldr	r3, [r5, #0]
 8008cd6:	2b00      	cmp	r3, #0
 8008cd8:	d0c4      	beq.n	8008c64 <__sflush_r+0x34>
 8008cda:	2b1d      	cmp	r3, #29
 8008cdc:	d001      	beq.n	8008ce2 <__sflush_r+0xb2>
 8008cde:	2b16      	cmp	r3, #22
 8008ce0:	d101      	bne.n	8008ce6 <__sflush_r+0xb6>
 8008ce2:	602f      	str	r7, [r5, #0]
 8008ce4:	e7b1      	b.n	8008c4a <__sflush_r+0x1a>
 8008ce6:	89a3      	ldrh	r3, [r4, #12]
 8008ce8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008cec:	81a3      	strh	r3, [r4, #12]
 8008cee:	e7ad      	b.n	8008c4c <__sflush_r+0x1c>
 8008cf0:	690f      	ldr	r7, [r1, #16]
 8008cf2:	2f00      	cmp	r7, #0
 8008cf4:	d0a9      	beq.n	8008c4a <__sflush_r+0x1a>
 8008cf6:	0793      	lsls	r3, r2, #30
 8008cf8:	680e      	ldr	r6, [r1, #0]
 8008cfa:	bf08      	it	eq
 8008cfc:	694b      	ldreq	r3, [r1, #20]
 8008cfe:	600f      	str	r7, [r1, #0]
 8008d00:	bf18      	it	ne
 8008d02:	2300      	movne	r3, #0
 8008d04:	eba6 0807 	sub.w	r8, r6, r7
 8008d08:	608b      	str	r3, [r1, #8]
 8008d0a:	f1b8 0f00 	cmp.w	r8, #0
 8008d0e:	dd9c      	ble.n	8008c4a <__sflush_r+0x1a>
 8008d10:	6a21      	ldr	r1, [r4, #32]
 8008d12:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008d14:	4643      	mov	r3, r8
 8008d16:	463a      	mov	r2, r7
 8008d18:	4628      	mov	r0, r5
 8008d1a:	47b0      	blx	r6
 8008d1c:	2800      	cmp	r0, #0
 8008d1e:	dc06      	bgt.n	8008d2e <__sflush_r+0xfe>
 8008d20:	89a3      	ldrh	r3, [r4, #12]
 8008d22:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008d26:	81a3      	strh	r3, [r4, #12]
 8008d28:	f04f 30ff 	mov.w	r0, #4294967295
 8008d2c:	e78e      	b.n	8008c4c <__sflush_r+0x1c>
 8008d2e:	4407      	add	r7, r0
 8008d30:	eba8 0800 	sub.w	r8, r8, r0
 8008d34:	e7e9      	b.n	8008d0a <__sflush_r+0xda>
 8008d36:	bf00      	nop
 8008d38:	20400001 	.word	0x20400001

08008d3c <_fflush_r>:
 8008d3c:	b538      	push	{r3, r4, r5, lr}
 8008d3e:	690b      	ldr	r3, [r1, #16]
 8008d40:	4605      	mov	r5, r0
 8008d42:	460c      	mov	r4, r1
 8008d44:	b913      	cbnz	r3, 8008d4c <_fflush_r+0x10>
 8008d46:	2500      	movs	r5, #0
 8008d48:	4628      	mov	r0, r5
 8008d4a:	bd38      	pop	{r3, r4, r5, pc}
 8008d4c:	b118      	cbz	r0, 8008d56 <_fflush_r+0x1a>
 8008d4e:	6983      	ldr	r3, [r0, #24]
 8008d50:	b90b      	cbnz	r3, 8008d56 <_fflush_r+0x1a>
 8008d52:	f7ff fb09 	bl	8008368 <__sinit>
 8008d56:	4b14      	ldr	r3, [pc, #80]	; (8008da8 <_fflush_r+0x6c>)
 8008d58:	429c      	cmp	r4, r3
 8008d5a:	d11b      	bne.n	8008d94 <_fflush_r+0x58>
 8008d5c:	686c      	ldr	r4, [r5, #4]
 8008d5e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008d62:	2b00      	cmp	r3, #0
 8008d64:	d0ef      	beq.n	8008d46 <_fflush_r+0xa>
 8008d66:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008d68:	07d0      	lsls	r0, r2, #31
 8008d6a:	d404      	bmi.n	8008d76 <_fflush_r+0x3a>
 8008d6c:	0599      	lsls	r1, r3, #22
 8008d6e:	d402      	bmi.n	8008d76 <_fflush_r+0x3a>
 8008d70:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008d72:	f7ff fbbc 	bl	80084ee <__retarget_lock_acquire_recursive>
 8008d76:	4628      	mov	r0, r5
 8008d78:	4621      	mov	r1, r4
 8008d7a:	f7ff ff59 	bl	8008c30 <__sflush_r>
 8008d7e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008d80:	07da      	lsls	r2, r3, #31
 8008d82:	4605      	mov	r5, r0
 8008d84:	d4e0      	bmi.n	8008d48 <_fflush_r+0xc>
 8008d86:	89a3      	ldrh	r3, [r4, #12]
 8008d88:	059b      	lsls	r3, r3, #22
 8008d8a:	d4dd      	bmi.n	8008d48 <_fflush_r+0xc>
 8008d8c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008d8e:	f7ff fbaf 	bl	80084f0 <__retarget_lock_release_recursive>
 8008d92:	e7d9      	b.n	8008d48 <_fflush_r+0xc>
 8008d94:	4b05      	ldr	r3, [pc, #20]	; (8008dac <_fflush_r+0x70>)
 8008d96:	429c      	cmp	r4, r3
 8008d98:	d101      	bne.n	8008d9e <_fflush_r+0x62>
 8008d9a:	68ac      	ldr	r4, [r5, #8]
 8008d9c:	e7df      	b.n	8008d5e <_fflush_r+0x22>
 8008d9e:	4b04      	ldr	r3, [pc, #16]	; (8008db0 <_fflush_r+0x74>)
 8008da0:	429c      	cmp	r4, r3
 8008da2:	bf08      	it	eq
 8008da4:	68ec      	ldreq	r4, [r5, #12]
 8008da6:	e7da      	b.n	8008d5e <_fflush_r+0x22>
 8008da8:	08009b24 	.word	0x08009b24
 8008dac:	08009b44 	.word	0x08009b44
 8008db0:	08009b04 	.word	0x08009b04

08008db4 <_lseek_r>:
 8008db4:	b538      	push	{r3, r4, r5, lr}
 8008db6:	4d07      	ldr	r5, [pc, #28]	; (8008dd4 <_lseek_r+0x20>)
 8008db8:	4604      	mov	r4, r0
 8008dba:	4608      	mov	r0, r1
 8008dbc:	4611      	mov	r1, r2
 8008dbe:	2200      	movs	r2, #0
 8008dc0:	602a      	str	r2, [r5, #0]
 8008dc2:	461a      	mov	r2, r3
 8008dc4:	f7f8 fe07 	bl	80019d6 <_lseek>
 8008dc8:	1c43      	adds	r3, r0, #1
 8008dca:	d102      	bne.n	8008dd2 <_lseek_r+0x1e>
 8008dcc:	682b      	ldr	r3, [r5, #0]
 8008dce:	b103      	cbz	r3, 8008dd2 <_lseek_r+0x1e>
 8008dd0:	6023      	str	r3, [r4, #0]
 8008dd2:	bd38      	pop	{r3, r4, r5, pc}
 8008dd4:	20003da8 	.word	0x20003da8

08008dd8 <__swhatbuf_r>:
 8008dd8:	b570      	push	{r4, r5, r6, lr}
 8008dda:	460e      	mov	r6, r1
 8008ddc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008de0:	2900      	cmp	r1, #0
 8008de2:	b096      	sub	sp, #88	; 0x58
 8008de4:	4614      	mov	r4, r2
 8008de6:	461d      	mov	r5, r3
 8008de8:	da08      	bge.n	8008dfc <__swhatbuf_r+0x24>
 8008dea:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8008dee:	2200      	movs	r2, #0
 8008df0:	602a      	str	r2, [r5, #0]
 8008df2:	061a      	lsls	r2, r3, #24
 8008df4:	d410      	bmi.n	8008e18 <__swhatbuf_r+0x40>
 8008df6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008dfa:	e00e      	b.n	8008e1a <__swhatbuf_r+0x42>
 8008dfc:	466a      	mov	r2, sp
 8008dfe:	f000 fbb1 	bl	8009564 <_fstat_r>
 8008e02:	2800      	cmp	r0, #0
 8008e04:	dbf1      	blt.n	8008dea <__swhatbuf_r+0x12>
 8008e06:	9a01      	ldr	r2, [sp, #4]
 8008e08:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008e0c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008e10:	425a      	negs	r2, r3
 8008e12:	415a      	adcs	r2, r3
 8008e14:	602a      	str	r2, [r5, #0]
 8008e16:	e7ee      	b.n	8008df6 <__swhatbuf_r+0x1e>
 8008e18:	2340      	movs	r3, #64	; 0x40
 8008e1a:	2000      	movs	r0, #0
 8008e1c:	6023      	str	r3, [r4, #0]
 8008e1e:	b016      	add	sp, #88	; 0x58
 8008e20:	bd70      	pop	{r4, r5, r6, pc}
	...

08008e24 <__smakebuf_r>:
 8008e24:	898b      	ldrh	r3, [r1, #12]
 8008e26:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008e28:	079d      	lsls	r5, r3, #30
 8008e2a:	4606      	mov	r6, r0
 8008e2c:	460c      	mov	r4, r1
 8008e2e:	d507      	bpl.n	8008e40 <__smakebuf_r+0x1c>
 8008e30:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008e34:	6023      	str	r3, [r4, #0]
 8008e36:	6123      	str	r3, [r4, #16]
 8008e38:	2301      	movs	r3, #1
 8008e3a:	6163      	str	r3, [r4, #20]
 8008e3c:	b002      	add	sp, #8
 8008e3e:	bd70      	pop	{r4, r5, r6, pc}
 8008e40:	ab01      	add	r3, sp, #4
 8008e42:	466a      	mov	r2, sp
 8008e44:	f7ff ffc8 	bl	8008dd8 <__swhatbuf_r>
 8008e48:	9900      	ldr	r1, [sp, #0]
 8008e4a:	4605      	mov	r5, r0
 8008e4c:	4630      	mov	r0, r6
 8008e4e:	f7ff fb87 	bl	8008560 <_malloc_r>
 8008e52:	b948      	cbnz	r0, 8008e68 <__smakebuf_r+0x44>
 8008e54:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008e58:	059a      	lsls	r2, r3, #22
 8008e5a:	d4ef      	bmi.n	8008e3c <__smakebuf_r+0x18>
 8008e5c:	f023 0303 	bic.w	r3, r3, #3
 8008e60:	f043 0302 	orr.w	r3, r3, #2
 8008e64:	81a3      	strh	r3, [r4, #12]
 8008e66:	e7e3      	b.n	8008e30 <__smakebuf_r+0xc>
 8008e68:	4b0d      	ldr	r3, [pc, #52]	; (8008ea0 <__smakebuf_r+0x7c>)
 8008e6a:	62b3      	str	r3, [r6, #40]	; 0x28
 8008e6c:	89a3      	ldrh	r3, [r4, #12]
 8008e6e:	6020      	str	r0, [r4, #0]
 8008e70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008e74:	81a3      	strh	r3, [r4, #12]
 8008e76:	9b00      	ldr	r3, [sp, #0]
 8008e78:	6163      	str	r3, [r4, #20]
 8008e7a:	9b01      	ldr	r3, [sp, #4]
 8008e7c:	6120      	str	r0, [r4, #16]
 8008e7e:	b15b      	cbz	r3, 8008e98 <__smakebuf_r+0x74>
 8008e80:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008e84:	4630      	mov	r0, r6
 8008e86:	f000 fb7f 	bl	8009588 <_isatty_r>
 8008e8a:	b128      	cbz	r0, 8008e98 <__smakebuf_r+0x74>
 8008e8c:	89a3      	ldrh	r3, [r4, #12]
 8008e8e:	f023 0303 	bic.w	r3, r3, #3
 8008e92:	f043 0301 	orr.w	r3, r3, #1
 8008e96:	81a3      	strh	r3, [r4, #12]
 8008e98:	89a0      	ldrh	r0, [r4, #12]
 8008e9a:	4305      	orrs	r5, r0
 8008e9c:	81a5      	strh	r5, [r4, #12]
 8008e9e:	e7cd      	b.n	8008e3c <__smakebuf_r+0x18>
 8008ea0:	08008301 	.word	0x08008301

08008ea4 <malloc>:
 8008ea4:	4b02      	ldr	r3, [pc, #8]	; (8008eb0 <malloc+0xc>)
 8008ea6:	4601      	mov	r1, r0
 8008ea8:	6818      	ldr	r0, [r3, #0]
 8008eaa:	f7ff bb59 	b.w	8008560 <_malloc_r>
 8008eae:	bf00      	nop
 8008eb0:	20000010 	.word	0x20000010

08008eb4 <__malloc_lock>:
 8008eb4:	4801      	ldr	r0, [pc, #4]	; (8008ebc <__malloc_lock+0x8>)
 8008eb6:	f7ff bb1a 	b.w	80084ee <__retarget_lock_acquire_recursive>
 8008eba:	bf00      	nop
 8008ebc:	20003d9c 	.word	0x20003d9c

08008ec0 <__malloc_unlock>:
 8008ec0:	4801      	ldr	r0, [pc, #4]	; (8008ec8 <__malloc_unlock+0x8>)
 8008ec2:	f7ff bb15 	b.w	80084f0 <__retarget_lock_release_recursive>
 8008ec6:	bf00      	nop
 8008ec8:	20003d9c 	.word	0x20003d9c

08008ecc <_free_r>:
 8008ecc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008ece:	2900      	cmp	r1, #0
 8008ed0:	d044      	beq.n	8008f5c <_free_r+0x90>
 8008ed2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008ed6:	9001      	str	r0, [sp, #4]
 8008ed8:	2b00      	cmp	r3, #0
 8008eda:	f1a1 0404 	sub.w	r4, r1, #4
 8008ede:	bfb8      	it	lt
 8008ee0:	18e4      	addlt	r4, r4, r3
 8008ee2:	f7ff ffe7 	bl	8008eb4 <__malloc_lock>
 8008ee6:	4a1e      	ldr	r2, [pc, #120]	; (8008f60 <_free_r+0x94>)
 8008ee8:	9801      	ldr	r0, [sp, #4]
 8008eea:	6813      	ldr	r3, [r2, #0]
 8008eec:	b933      	cbnz	r3, 8008efc <_free_r+0x30>
 8008eee:	6063      	str	r3, [r4, #4]
 8008ef0:	6014      	str	r4, [r2, #0]
 8008ef2:	b003      	add	sp, #12
 8008ef4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008ef8:	f7ff bfe2 	b.w	8008ec0 <__malloc_unlock>
 8008efc:	42a3      	cmp	r3, r4
 8008efe:	d908      	bls.n	8008f12 <_free_r+0x46>
 8008f00:	6825      	ldr	r5, [r4, #0]
 8008f02:	1961      	adds	r1, r4, r5
 8008f04:	428b      	cmp	r3, r1
 8008f06:	bf01      	itttt	eq
 8008f08:	6819      	ldreq	r1, [r3, #0]
 8008f0a:	685b      	ldreq	r3, [r3, #4]
 8008f0c:	1949      	addeq	r1, r1, r5
 8008f0e:	6021      	streq	r1, [r4, #0]
 8008f10:	e7ed      	b.n	8008eee <_free_r+0x22>
 8008f12:	461a      	mov	r2, r3
 8008f14:	685b      	ldr	r3, [r3, #4]
 8008f16:	b10b      	cbz	r3, 8008f1c <_free_r+0x50>
 8008f18:	42a3      	cmp	r3, r4
 8008f1a:	d9fa      	bls.n	8008f12 <_free_r+0x46>
 8008f1c:	6811      	ldr	r1, [r2, #0]
 8008f1e:	1855      	adds	r5, r2, r1
 8008f20:	42a5      	cmp	r5, r4
 8008f22:	d10b      	bne.n	8008f3c <_free_r+0x70>
 8008f24:	6824      	ldr	r4, [r4, #0]
 8008f26:	4421      	add	r1, r4
 8008f28:	1854      	adds	r4, r2, r1
 8008f2a:	42a3      	cmp	r3, r4
 8008f2c:	6011      	str	r1, [r2, #0]
 8008f2e:	d1e0      	bne.n	8008ef2 <_free_r+0x26>
 8008f30:	681c      	ldr	r4, [r3, #0]
 8008f32:	685b      	ldr	r3, [r3, #4]
 8008f34:	6053      	str	r3, [r2, #4]
 8008f36:	4421      	add	r1, r4
 8008f38:	6011      	str	r1, [r2, #0]
 8008f3a:	e7da      	b.n	8008ef2 <_free_r+0x26>
 8008f3c:	d902      	bls.n	8008f44 <_free_r+0x78>
 8008f3e:	230c      	movs	r3, #12
 8008f40:	6003      	str	r3, [r0, #0]
 8008f42:	e7d6      	b.n	8008ef2 <_free_r+0x26>
 8008f44:	6825      	ldr	r5, [r4, #0]
 8008f46:	1961      	adds	r1, r4, r5
 8008f48:	428b      	cmp	r3, r1
 8008f4a:	bf04      	itt	eq
 8008f4c:	6819      	ldreq	r1, [r3, #0]
 8008f4e:	685b      	ldreq	r3, [r3, #4]
 8008f50:	6063      	str	r3, [r4, #4]
 8008f52:	bf04      	itt	eq
 8008f54:	1949      	addeq	r1, r1, r5
 8008f56:	6021      	streq	r1, [r4, #0]
 8008f58:	6054      	str	r4, [r2, #4]
 8008f5a:	e7ca      	b.n	8008ef2 <_free_r+0x26>
 8008f5c:	b003      	add	sp, #12
 8008f5e:	bd30      	pop	{r4, r5, pc}
 8008f60:	20003da0 	.word	0x20003da0

08008f64 <__sfputc_r>:
 8008f64:	6893      	ldr	r3, [r2, #8]
 8008f66:	3b01      	subs	r3, #1
 8008f68:	2b00      	cmp	r3, #0
 8008f6a:	b410      	push	{r4}
 8008f6c:	6093      	str	r3, [r2, #8]
 8008f6e:	da08      	bge.n	8008f82 <__sfputc_r+0x1e>
 8008f70:	6994      	ldr	r4, [r2, #24]
 8008f72:	42a3      	cmp	r3, r4
 8008f74:	db01      	blt.n	8008f7a <__sfputc_r+0x16>
 8008f76:	290a      	cmp	r1, #10
 8008f78:	d103      	bne.n	8008f82 <__sfputc_r+0x1e>
 8008f7a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008f7e:	f7ff bd75 	b.w	8008a6c <__swbuf_r>
 8008f82:	6813      	ldr	r3, [r2, #0]
 8008f84:	1c58      	adds	r0, r3, #1
 8008f86:	6010      	str	r0, [r2, #0]
 8008f88:	7019      	strb	r1, [r3, #0]
 8008f8a:	4608      	mov	r0, r1
 8008f8c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008f90:	4770      	bx	lr

08008f92 <__sfputs_r>:
 8008f92:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f94:	4606      	mov	r6, r0
 8008f96:	460f      	mov	r7, r1
 8008f98:	4614      	mov	r4, r2
 8008f9a:	18d5      	adds	r5, r2, r3
 8008f9c:	42ac      	cmp	r4, r5
 8008f9e:	d101      	bne.n	8008fa4 <__sfputs_r+0x12>
 8008fa0:	2000      	movs	r0, #0
 8008fa2:	e007      	b.n	8008fb4 <__sfputs_r+0x22>
 8008fa4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008fa8:	463a      	mov	r2, r7
 8008faa:	4630      	mov	r0, r6
 8008fac:	f7ff ffda 	bl	8008f64 <__sfputc_r>
 8008fb0:	1c43      	adds	r3, r0, #1
 8008fb2:	d1f3      	bne.n	8008f9c <__sfputs_r+0xa>
 8008fb4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008fb8 <_vfiprintf_r>:
 8008fb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008fbc:	460d      	mov	r5, r1
 8008fbe:	b09d      	sub	sp, #116	; 0x74
 8008fc0:	4614      	mov	r4, r2
 8008fc2:	4698      	mov	r8, r3
 8008fc4:	4606      	mov	r6, r0
 8008fc6:	b118      	cbz	r0, 8008fd0 <_vfiprintf_r+0x18>
 8008fc8:	6983      	ldr	r3, [r0, #24]
 8008fca:	b90b      	cbnz	r3, 8008fd0 <_vfiprintf_r+0x18>
 8008fcc:	f7ff f9cc 	bl	8008368 <__sinit>
 8008fd0:	4b89      	ldr	r3, [pc, #548]	; (80091f8 <_vfiprintf_r+0x240>)
 8008fd2:	429d      	cmp	r5, r3
 8008fd4:	d11b      	bne.n	800900e <_vfiprintf_r+0x56>
 8008fd6:	6875      	ldr	r5, [r6, #4]
 8008fd8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008fda:	07d9      	lsls	r1, r3, #31
 8008fdc:	d405      	bmi.n	8008fea <_vfiprintf_r+0x32>
 8008fde:	89ab      	ldrh	r3, [r5, #12]
 8008fe0:	059a      	lsls	r2, r3, #22
 8008fe2:	d402      	bmi.n	8008fea <_vfiprintf_r+0x32>
 8008fe4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008fe6:	f7ff fa82 	bl	80084ee <__retarget_lock_acquire_recursive>
 8008fea:	89ab      	ldrh	r3, [r5, #12]
 8008fec:	071b      	lsls	r3, r3, #28
 8008fee:	d501      	bpl.n	8008ff4 <_vfiprintf_r+0x3c>
 8008ff0:	692b      	ldr	r3, [r5, #16]
 8008ff2:	b9eb      	cbnz	r3, 8009030 <_vfiprintf_r+0x78>
 8008ff4:	4629      	mov	r1, r5
 8008ff6:	4630      	mov	r0, r6
 8008ff8:	f7ff fd9c 	bl	8008b34 <__swsetup_r>
 8008ffc:	b1c0      	cbz	r0, 8009030 <_vfiprintf_r+0x78>
 8008ffe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009000:	07dc      	lsls	r4, r3, #31
 8009002:	d50e      	bpl.n	8009022 <_vfiprintf_r+0x6a>
 8009004:	f04f 30ff 	mov.w	r0, #4294967295
 8009008:	b01d      	add	sp, #116	; 0x74
 800900a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800900e:	4b7b      	ldr	r3, [pc, #492]	; (80091fc <_vfiprintf_r+0x244>)
 8009010:	429d      	cmp	r5, r3
 8009012:	d101      	bne.n	8009018 <_vfiprintf_r+0x60>
 8009014:	68b5      	ldr	r5, [r6, #8]
 8009016:	e7df      	b.n	8008fd8 <_vfiprintf_r+0x20>
 8009018:	4b79      	ldr	r3, [pc, #484]	; (8009200 <_vfiprintf_r+0x248>)
 800901a:	429d      	cmp	r5, r3
 800901c:	bf08      	it	eq
 800901e:	68f5      	ldreq	r5, [r6, #12]
 8009020:	e7da      	b.n	8008fd8 <_vfiprintf_r+0x20>
 8009022:	89ab      	ldrh	r3, [r5, #12]
 8009024:	0598      	lsls	r0, r3, #22
 8009026:	d4ed      	bmi.n	8009004 <_vfiprintf_r+0x4c>
 8009028:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800902a:	f7ff fa61 	bl	80084f0 <__retarget_lock_release_recursive>
 800902e:	e7e9      	b.n	8009004 <_vfiprintf_r+0x4c>
 8009030:	2300      	movs	r3, #0
 8009032:	9309      	str	r3, [sp, #36]	; 0x24
 8009034:	2320      	movs	r3, #32
 8009036:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800903a:	f8cd 800c 	str.w	r8, [sp, #12]
 800903e:	2330      	movs	r3, #48	; 0x30
 8009040:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8009204 <_vfiprintf_r+0x24c>
 8009044:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009048:	f04f 0901 	mov.w	r9, #1
 800904c:	4623      	mov	r3, r4
 800904e:	469a      	mov	sl, r3
 8009050:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009054:	b10a      	cbz	r2, 800905a <_vfiprintf_r+0xa2>
 8009056:	2a25      	cmp	r2, #37	; 0x25
 8009058:	d1f9      	bne.n	800904e <_vfiprintf_r+0x96>
 800905a:	ebba 0b04 	subs.w	fp, sl, r4
 800905e:	d00b      	beq.n	8009078 <_vfiprintf_r+0xc0>
 8009060:	465b      	mov	r3, fp
 8009062:	4622      	mov	r2, r4
 8009064:	4629      	mov	r1, r5
 8009066:	4630      	mov	r0, r6
 8009068:	f7ff ff93 	bl	8008f92 <__sfputs_r>
 800906c:	3001      	adds	r0, #1
 800906e:	f000 80aa 	beq.w	80091c6 <_vfiprintf_r+0x20e>
 8009072:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009074:	445a      	add	r2, fp
 8009076:	9209      	str	r2, [sp, #36]	; 0x24
 8009078:	f89a 3000 	ldrb.w	r3, [sl]
 800907c:	2b00      	cmp	r3, #0
 800907e:	f000 80a2 	beq.w	80091c6 <_vfiprintf_r+0x20e>
 8009082:	2300      	movs	r3, #0
 8009084:	f04f 32ff 	mov.w	r2, #4294967295
 8009088:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800908c:	f10a 0a01 	add.w	sl, sl, #1
 8009090:	9304      	str	r3, [sp, #16]
 8009092:	9307      	str	r3, [sp, #28]
 8009094:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009098:	931a      	str	r3, [sp, #104]	; 0x68
 800909a:	4654      	mov	r4, sl
 800909c:	2205      	movs	r2, #5
 800909e:	f814 1b01 	ldrb.w	r1, [r4], #1
 80090a2:	4858      	ldr	r0, [pc, #352]	; (8009204 <_vfiprintf_r+0x24c>)
 80090a4:	f7f7 f894 	bl	80001d0 <memchr>
 80090a8:	9a04      	ldr	r2, [sp, #16]
 80090aa:	b9d8      	cbnz	r0, 80090e4 <_vfiprintf_r+0x12c>
 80090ac:	06d1      	lsls	r1, r2, #27
 80090ae:	bf44      	itt	mi
 80090b0:	2320      	movmi	r3, #32
 80090b2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80090b6:	0713      	lsls	r3, r2, #28
 80090b8:	bf44      	itt	mi
 80090ba:	232b      	movmi	r3, #43	; 0x2b
 80090bc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80090c0:	f89a 3000 	ldrb.w	r3, [sl]
 80090c4:	2b2a      	cmp	r3, #42	; 0x2a
 80090c6:	d015      	beq.n	80090f4 <_vfiprintf_r+0x13c>
 80090c8:	9a07      	ldr	r2, [sp, #28]
 80090ca:	4654      	mov	r4, sl
 80090cc:	2000      	movs	r0, #0
 80090ce:	f04f 0c0a 	mov.w	ip, #10
 80090d2:	4621      	mov	r1, r4
 80090d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80090d8:	3b30      	subs	r3, #48	; 0x30
 80090da:	2b09      	cmp	r3, #9
 80090dc:	d94e      	bls.n	800917c <_vfiprintf_r+0x1c4>
 80090de:	b1b0      	cbz	r0, 800910e <_vfiprintf_r+0x156>
 80090e0:	9207      	str	r2, [sp, #28]
 80090e2:	e014      	b.n	800910e <_vfiprintf_r+0x156>
 80090e4:	eba0 0308 	sub.w	r3, r0, r8
 80090e8:	fa09 f303 	lsl.w	r3, r9, r3
 80090ec:	4313      	orrs	r3, r2
 80090ee:	9304      	str	r3, [sp, #16]
 80090f0:	46a2      	mov	sl, r4
 80090f2:	e7d2      	b.n	800909a <_vfiprintf_r+0xe2>
 80090f4:	9b03      	ldr	r3, [sp, #12]
 80090f6:	1d19      	adds	r1, r3, #4
 80090f8:	681b      	ldr	r3, [r3, #0]
 80090fa:	9103      	str	r1, [sp, #12]
 80090fc:	2b00      	cmp	r3, #0
 80090fe:	bfbb      	ittet	lt
 8009100:	425b      	neglt	r3, r3
 8009102:	f042 0202 	orrlt.w	r2, r2, #2
 8009106:	9307      	strge	r3, [sp, #28]
 8009108:	9307      	strlt	r3, [sp, #28]
 800910a:	bfb8      	it	lt
 800910c:	9204      	strlt	r2, [sp, #16]
 800910e:	7823      	ldrb	r3, [r4, #0]
 8009110:	2b2e      	cmp	r3, #46	; 0x2e
 8009112:	d10c      	bne.n	800912e <_vfiprintf_r+0x176>
 8009114:	7863      	ldrb	r3, [r4, #1]
 8009116:	2b2a      	cmp	r3, #42	; 0x2a
 8009118:	d135      	bne.n	8009186 <_vfiprintf_r+0x1ce>
 800911a:	9b03      	ldr	r3, [sp, #12]
 800911c:	1d1a      	adds	r2, r3, #4
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	9203      	str	r2, [sp, #12]
 8009122:	2b00      	cmp	r3, #0
 8009124:	bfb8      	it	lt
 8009126:	f04f 33ff 	movlt.w	r3, #4294967295
 800912a:	3402      	adds	r4, #2
 800912c:	9305      	str	r3, [sp, #20]
 800912e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8009214 <_vfiprintf_r+0x25c>
 8009132:	7821      	ldrb	r1, [r4, #0]
 8009134:	2203      	movs	r2, #3
 8009136:	4650      	mov	r0, sl
 8009138:	f7f7 f84a 	bl	80001d0 <memchr>
 800913c:	b140      	cbz	r0, 8009150 <_vfiprintf_r+0x198>
 800913e:	2340      	movs	r3, #64	; 0x40
 8009140:	eba0 000a 	sub.w	r0, r0, sl
 8009144:	fa03 f000 	lsl.w	r0, r3, r0
 8009148:	9b04      	ldr	r3, [sp, #16]
 800914a:	4303      	orrs	r3, r0
 800914c:	3401      	adds	r4, #1
 800914e:	9304      	str	r3, [sp, #16]
 8009150:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009154:	482c      	ldr	r0, [pc, #176]	; (8009208 <_vfiprintf_r+0x250>)
 8009156:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800915a:	2206      	movs	r2, #6
 800915c:	f7f7 f838 	bl	80001d0 <memchr>
 8009160:	2800      	cmp	r0, #0
 8009162:	d03f      	beq.n	80091e4 <_vfiprintf_r+0x22c>
 8009164:	4b29      	ldr	r3, [pc, #164]	; (800920c <_vfiprintf_r+0x254>)
 8009166:	bb1b      	cbnz	r3, 80091b0 <_vfiprintf_r+0x1f8>
 8009168:	9b03      	ldr	r3, [sp, #12]
 800916a:	3307      	adds	r3, #7
 800916c:	f023 0307 	bic.w	r3, r3, #7
 8009170:	3308      	adds	r3, #8
 8009172:	9303      	str	r3, [sp, #12]
 8009174:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009176:	443b      	add	r3, r7
 8009178:	9309      	str	r3, [sp, #36]	; 0x24
 800917a:	e767      	b.n	800904c <_vfiprintf_r+0x94>
 800917c:	fb0c 3202 	mla	r2, ip, r2, r3
 8009180:	460c      	mov	r4, r1
 8009182:	2001      	movs	r0, #1
 8009184:	e7a5      	b.n	80090d2 <_vfiprintf_r+0x11a>
 8009186:	2300      	movs	r3, #0
 8009188:	3401      	adds	r4, #1
 800918a:	9305      	str	r3, [sp, #20]
 800918c:	4619      	mov	r1, r3
 800918e:	f04f 0c0a 	mov.w	ip, #10
 8009192:	4620      	mov	r0, r4
 8009194:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009198:	3a30      	subs	r2, #48	; 0x30
 800919a:	2a09      	cmp	r2, #9
 800919c:	d903      	bls.n	80091a6 <_vfiprintf_r+0x1ee>
 800919e:	2b00      	cmp	r3, #0
 80091a0:	d0c5      	beq.n	800912e <_vfiprintf_r+0x176>
 80091a2:	9105      	str	r1, [sp, #20]
 80091a4:	e7c3      	b.n	800912e <_vfiprintf_r+0x176>
 80091a6:	fb0c 2101 	mla	r1, ip, r1, r2
 80091aa:	4604      	mov	r4, r0
 80091ac:	2301      	movs	r3, #1
 80091ae:	e7f0      	b.n	8009192 <_vfiprintf_r+0x1da>
 80091b0:	ab03      	add	r3, sp, #12
 80091b2:	9300      	str	r3, [sp, #0]
 80091b4:	462a      	mov	r2, r5
 80091b6:	4b16      	ldr	r3, [pc, #88]	; (8009210 <_vfiprintf_r+0x258>)
 80091b8:	a904      	add	r1, sp, #16
 80091ba:	4630      	mov	r0, r6
 80091bc:	f3af 8000 	nop.w
 80091c0:	4607      	mov	r7, r0
 80091c2:	1c78      	adds	r0, r7, #1
 80091c4:	d1d6      	bne.n	8009174 <_vfiprintf_r+0x1bc>
 80091c6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80091c8:	07d9      	lsls	r1, r3, #31
 80091ca:	d405      	bmi.n	80091d8 <_vfiprintf_r+0x220>
 80091cc:	89ab      	ldrh	r3, [r5, #12]
 80091ce:	059a      	lsls	r2, r3, #22
 80091d0:	d402      	bmi.n	80091d8 <_vfiprintf_r+0x220>
 80091d2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80091d4:	f7ff f98c 	bl	80084f0 <__retarget_lock_release_recursive>
 80091d8:	89ab      	ldrh	r3, [r5, #12]
 80091da:	065b      	lsls	r3, r3, #25
 80091dc:	f53f af12 	bmi.w	8009004 <_vfiprintf_r+0x4c>
 80091e0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80091e2:	e711      	b.n	8009008 <_vfiprintf_r+0x50>
 80091e4:	ab03      	add	r3, sp, #12
 80091e6:	9300      	str	r3, [sp, #0]
 80091e8:	462a      	mov	r2, r5
 80091ea:	4b09      	ldr	r3, [pc, #36]	; (8009210 <_vfiprintf_r+0x258>)
 80091ec:	a904      	add	r1, sp, #16
 80091ee:	4630      	mov	r0, r6
 80091f0:	f000 f880 	bl	80092f4 <_printf_i>
 80091f4:	e7e4      	b.n	80091c0 <_vfiprintf_r+0x208>
 80091f6:	bf00      	nop
 80091f8:	08009b24 	.word	0x08009b24
 80091fc:	08009b44 	.word	0x08009b44
 8009200:	08009b04 	.word	0x08009b04
 8009204:	08009b68 	.word	0x08009b68
 8009208:	08009b72 	.word	0x08009b72
 800920c:	00000000 	.word	0x00000000
 8009210:	08008f93 	.word	0x08008f93
 8009214:	08009b6e 	.word	0x08009b6e

08009218 <_printf_common>:
 8009218:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800921c:	4616      	mov	r6, r2
 800921e:	4699      	mov	r9, r3
 8009220:	688a      	ldr	r2, [r1, #8]
 8009222:	690b      	ldr	r3, [r1, #16]
 8009224:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009228:	4293      	cmp	r3, r2
 800922a:	bfb8      	it	lt
 800922c:	4613      	movlt	r3, r2
 800922e:	6033      	str	r3, [r6, #0]
 8009230:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009234:	4607      	mov	r7, r0
 8009236:	460c      	mov	r4, r1
 8009238:	b10a      	cbz	r2, 800923e <_printf_common+0x26>
 800923a:	3301      	adds	r3, #1
 800923c:	6033      	str	r3, [r6, #0]
 800923e:	6823      	ldr	r3, [r4, #0]
 8009240:	0699      	lsls	r1, r3, #26
 8009242:	bf42      	ittt	mi
 8009244:	6833      	ldrmi	r3, [r6, #0]
 8009246:	3302      	addmi	r3, #2
 8009248:	6033      	strmi	r3, [r6, #0]
 800924a:	6825      	ldr	r5, [r4, #0]
 800924c:	f015 0506 	ands.w	r5, r5, #6
 8009250:	d106      	bne.n	8009260 <_printf_common+0x48>
 8009252:	f104 0a19 	add.w	sl, r4, #25
 8009256:	68e3      	ldr	r3, [r4, #12]
 8009258:	6832      	ldr	r2, [r6, #0]
 800925a:	1a9b      	subs	r3, r3, r2
 800925c:	42ab      	cmp	r3, r5
 800925e:	dc26      	bgt.n	80092ae <_printf_common+0x96>
 8009260:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009264:	1e13      	subs	r3, r2, #0
 8009266:	6822      	ldr	r2, [r4, #0]
 8009268:	bf18      	it	ne
 800926a:	2301      	movne	r3, #1
 800926c:	0692      	lsls	r2, r2, #26
 800926e:	d42b      	bmi.n	80092c8 <_printf_common+0xb0>
 8009270:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009274:	4649      	mov	r1, r9
 8009276:	4638      	mov	r0, r7
 8009278:	47c0      	blx	r8
 800927a:	3001      	adds	r0, #1
 800927c:	d01e      	beq.n	80092bc <_printf_common+0xa4>
 800927e:	6823      	ldr	r3, [r4, #0]
 8009280:	68e5      	ldr	r5, [r4, #12]
 8009282:	6832      	ldr	r2, [r6, #0]
 8009284:	f003 0306 	and.w	r3, r3, #6
 8009288:	2b04      	cmp	r3, #4
 800928a:	bf08      	it	eq
 800928c:	1aad      	subeq	r5, r5, r2
 800928e:	68a3      	ldr	r3, [r4, #8]
 8009290:	6922      	ldr	r2, [r4, #16]
 8009292:	bf0c      	ite	eq
 8009294:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009298:	2500      	movne	r5, #0
 800929a:	4293      	cmp	r3, r2
 800929c:	bfc4      	itt	gt
 800929e:	1a9b      	subgt	r3, r3, r2
 80092a0:	18ed      	addgt	r5, r5, r3
 80092a2:	2600      	movs	r6, #0
 80092a4:	341a      	adds	r4, #26
 80092a6:	42b5      	cmp	r5, r6
 80092a8:	d11a      	bne.n	80092e0 <_printf_common+0xc8>
 80092aa:	2000      	movs	r0, #0
 80092ac:	e008      	b.n	80092c0 <_printf_common+0xa8>
 80092ae:	2301      	movs	r3, #1
 80092b0:	4652      	mov	r2, sl
 80092b2:	4649      	mov	r1, r9
 80092b4:	4638      	mov	r0, r7
 80092b6:	47c0      	blx	r8
 80092b8:	3001      	adds	r0, #1
 80092ba:	d103      	bne.n	80092c4 <_printf_common+0xac>
 80092bc:	f04f 30ff 	mov.w	r0, #4294967295
 80092c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80092c4:	3501      	adds	r5, #1
 80092c6:	e7c6      	b.n	8009256 <_printf_common+0x3e>
 80092c8:	18e1      	adds	r1, r4, r3
 80092ca:	1c5a      	adds	r2, r3, #1
 80092cc:	2030      	movs	r0, #48	; 0x30
 80092ce:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80092d2:	4422      	add	r2, r4
 80092d4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80092d8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80092dc:	3302      	adds	r3, #2
 80092de:	e7c7      	b.n	8009270 <_printf_common+0x58>
 80092e0:	2301      	movs	r3, #1
 80092e2:	4622      	mov	r2, r4
 80092e4:	4649      	mov	r1, r9
 80092e6:	4638      	mov	r0, r7
 80092e8:	47c0      	blx	r8
 80092ea:	3001      	adds	r0, #1
 80092ec:	d0e6      	beq.n	80092bc <_printf_common+0xa4>
 80092ee:	3601      	adds	r6, #1
 80092f0:	e7d9      	b.n	80092a6 <_printf_common+0x8e>
	...

080092f4 <_printf_i>:
 80092f4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80092f8:	7e0f      	ldrb	r7, [r1, #24]
 80092fa:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80092fc:	2f78      	cmp	r7, #120	; 0x78
 80092fe:	4691      	mov	r9, r2
 8009300:	4680      	mov	r8, r0
 8009302:	460c      	mov	r4, r1
 8009304:	469a      	mov	sl, r3
 8009306:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800930a:	d807      	bhi.n	800931c <_printf_i+0x28>
 800930c:	2f62      	cmp	r7, #98	; 0x62
 800930e:	d80a      	bhi.n	8009326 <_printf_i+0x32>
 8009310:	2f00      	cmp	r7, #0
 8009312:	f000 80d8 	beq.w	80094c6 <_printf_i+0x1d2>
 8009316:	2f58      	cmp	r7, #88	; 0x58
 8009318:	f000 80a3 	beq.w	8009462 <_printf_i+0x16e>
 800931c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009320:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009324:	e03a      	b.n	800939c <_printf_i+0xa8>
 8009326:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800932a:	2b15      	cmp	r3, #21
 800932c:	d8f6      	bhi.n	800931c <_printf_i+0x28>
 800932e:	a101      	add	r1, pc, #4	; (adr r1, 8009334 <_printf_i+0x40>)
 8009330:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009334:	0800938d 	.word	0x0800938d
 8009338:	080093a1 	.word	0x080093a1
 800933c:	0800931d 	.word	0x0800931d
 8009340:	0800931d 	.word	0x0800931d
 8009344:	0800931d 	.word	0x0800931d
 8009348:	0800931d 	.word	0x0800931d
 800934c:	080093a1 	.word	0x080093a1
 8009350:	0800931d 	.word	0x0800931d
 8009354:	0800931d 	.word	0x0800931d
 8009358:	0800931d 	.word	0x0800931d
 800935c:	0800931d 	.word	0x0800931d
 8009360:	080094ad 	.word	0x080094ad
 8009364:	080093d1 	.word	0x080093d1
 8009368:	0800948f 	.word	0x0800948f
 800936c:	0800931d 	.word	0x0800931d
 8009370:	0800931d 	.word	0x0800931d
 8009374:	080094cf 	.word	0x080094cf
 8009378:	0800931d 	.word	0x0800931d
 800937c:	080093d1 	.word	0x080093d1
 8009380:	0800931d 	.word	0x0800931d
 8009384:	0800931d 	.word	0x0800931d
 8009388:	08009497 	.word	0x08009497
 800938c:	682b      	ldr	r3, [r5, #0]
 800938e:	1d1a      	adds	r2, r3, #4
 8009390:	681b      	ldr	r3, [r3, #0]
 8009392:	602a      	str	r2, [r5, #0]
 8009394:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009398:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800939c:	2301      	movs	r3, #1
 800939e:	e0a3      	b.n	80094e8 <_printf_i+0x1f4>
 80093a0:	6820      	ldr	r0, [r4, #0]
 80093a2:	6829      	ldr	r1, [r5, #0]
 80093a4:	0606      	lsls	r6, r0, #24
 80093a6:	f101 0304 	add.w	r3, r1, #4
 80093aa:	d50a      	bpl.n	80093c2 <_printf_i+0xce>
 80093ac:	680e      	ldr	r6, [r1, #0]
 80093ae:	602b      	str	r3, [r5, #0]
 80093b0:	2e00      	cmp	r6, #0
 80093b2:	da03      	bge.n	80093bc <_printf_i+0xc8>
 80093b4:	232d      	movs	r3, #45	; 0x2d
 80093b6:	4276      	negs	r6, r6
 80093b8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80093bc:	485e      	ldr	r0, [pc, #376]	; (8009538 <_printf_i+0x244>)
 80093be:	230a      	movs	r3, #10
 80093c0:	e019      	b.n	80093f6 <_printf_i+0x102>
 80093c2:	680e      	ldr	r6, [r1, #0]
 80093c4:	602b      	str	r3, [r5, #0]
 80093c6:	f010 0f40 	tst.w	r0, #64	; 0x40
 80093ca:	bf18      	it	ne
 80093cc:	b236      	sxthne	r6, r6
 80093ce:	e7ef      	b.n	80093b0 <_printf_i+0xbc>
 80093d0:	682b      	ldr	r3, [r5, #0]
 80093d2:	6820      	ldr	r0, [r4, #0]
 80093d4:	1d19      	adds	r1, r3, #4
 80093d6:	6029      	str	r1, [r5, #0]
 80093d8:	0601      	lsls	r1, r0, #24
 80093da:	d501      	bpl.n	80093e0 <_printf_i+0xec>
 80093dc:	681e      	ldr	r6, [r3, #0]
 80093de:	e002      	b.n	80093e6 <_printf_i+0xf2>
 80093e0:	0646      	lsls	r6, r0, #25
 80093e2:	d5fb      	bpl.n	80093dc <_printf_i+0xe8>
 80093e4:	881e      	ldrh	r6, [r3, #0]
 80093e6:	4854      	ldr	r0, [pc, #336]	; (8009538 <_printf_i+0x244>)
 80093e8:	2f6f      	cmp	r7, #111	; 0x6f
 80093ea:	bf0c      	ite	eq
 80093ec:	2308      	moveq	r3, #8
 80093ee:	230a      	movne	r3, #10
 80093f0:	2100      	movs	r1, #0
 80093f2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80093f6:	6865      	ldr	r5, [r4, #4]
 80093f8:	60a5      	str	r5, [r4, #8]
 80093fa:	2d00      	cmp	r5, #0
 80093fc:	bfa2      	ittt	ge
 80093fe:	6821      	ldrge	r1, [r4, #0]
 8009400:	f021 0104 	bicge.w	r1, r1, #4
 8009404:	6021      	strge	r1, [r4, #0]
 8009406:	b90e      	cbnz	r6, 800940c <_printf_i+0x118>
 8009408:	2d00      	cmp	r5, #0
 800940a:	d04d      	beq.n	80094a8 <_printf_i+0x1b4>
 800940c:	4615      	mov	r5, r2
 800940e:	fbb6 f1f3 	udiv	r1, r6, r3
 8009412:	fb03 6711 	mls	r7, r3, r1, r6
 8009416:	5dc7      	ldrb	r7, [r0, r7]
 8009418:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800941c:	4637      	mov	r7, r6
 800941e:	42bb      	cmp	r3, r7
 8009420:	460e      	mov	r6, r1
 8009422:	d9f4      	bls.n	800940e <_printf_i+0x11a>
 8009424:	2b08      	cmp	r3, #8
 8009426:	d10b      	bne.n	8009440 <_printf_i+0x14c>
 8009428:	6823      	ldr	r3, [r4, #0]
 800942a:	07de      	lsls	r6, r3, #31
 800942c:	d508      	bpl.n	8009440 <_printf_i+0x14c>
 800942e:	6923      	ldr	r3, [r4, #16]
 8009430:	6861      	ldr	r1, [r4, #4]
 8009432:	4299      	cmp	r1, r3
 8009434:	bfde      	ittt	le
 8009436:	2330      	movle	r3, #48	; 0x30
 8009438:	f805 3c01 	strble.w	r3, [r5, #-1]
 800943c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009440:	1b52      	subs	r2, r2, r5
 8009442:	6122      	str	r2, [r4, #16]
 8009444:	f8cd a000 	str.w	sl, [sp]
 8009448:	464b      	mov	r3, r9
 800944a:	aa03      	add	r2, sp, #12
 800944c:	4621      	mov	r1, r4
 800944e:	4640      	mov	r0, r8
 8009450:	f7ff fee2 	bl	8009218 <_printf_common>
 8009454:	3001      	adds	r0, #1
 8009456:	d14c      	bne.n	80094f2 <_printf_i+0x1fe>
 8009458:	f04f 30ff 	mov.w	r0, #4294967295
 800945c:	b004      	add	sp, #16
 800945e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009462:	4835      	ldr	r0, [pc, #212]	; (8009538 <_printf_i+0x244>)
 8009464:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8009468:	6829      	ldr	r1, [r5, #0]
 800946a:	6823      	ldr	r3, [r4, #0]
 800946c:	f851 6b04 	ldr.w	r6, [r1], #4
 8009470:	6029      	str	r1, [r5, #0]
 8009472:	061d      	lsls	r5, r3, #24
 8009474:	d514      	bpl.n	80094a0 <_printf_i+0x1ac>
 8009476:	07df      	lsls	r7, r3, #31
 8009478:	bf44      	itt	mi
 800947a:	f043 0320 	orrmi.w	r3, r3, #32
 800947e:	6023      	strmi	r3, [r4, #0]
 8009480:	b91e      	cbnz	r6, 800948a <_printf_i+0x196>
 8009482:	6823      	ldr	r3, [r4, #0]
 8009484:	f023 0320 	bic.w	r3, r3, #32
 8009488:	6023      	str	r3, [r4, #0]
 800948a:	2310      	movs	r3, #16
 800948c:	e7b0      	b.n	80093f0 <_printf_i+0xfc>
 800948e:	6823      	ldr	r3, [r4, #0]
 8009490:	f043 0320 	orr.w	r3, r3, #32
 8009494:	6023      	str	r3, [r4, #0]
 8009496:	2378      	movs	r3, #120	; 0x78
 8009498:	4828      	ldr	r0, [pc, #160]	; (800953c <_printf_i+0x248>)
 800949a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800949e:	e7e3      	b.n	8009468 <_printf_i+0x174>
 80094a0:	0659      	lsls	r1, r3, #25
 80094a2:	bf48      	it	mi
 80094a4:	b2b6      	uxthmi	r6, r6
 80094a6:	e7e6      	b.n	8009476 <_printf_i+0x182>
 80094a8:	4615      	mov	r5, r2
 80094aa:	e7bb      	b.n	8009424 <_printf_i+0x130>
 80094ac:	682b      	ldr	r3, [r5, #0]
 80094ae:	6826      	ldr	r6, [r4, #0]
 80094b0:	6961      	ldr	r1, [r4, #20]
 80094b2:	1d18      	adds	r0, r3, #4
 80094b4:	6028      	str	r0, [r5, #0]
 80094b6:	0635      	lsls	r5, r6, #24
 80094b8:	681b      	ldr	r3, [r3, #0]
 80094ba:	d501      	bpl.n	80094c0 <_printf_i+0x1cc>
 80094bc:	6019      	str	r1, [r3, #0]
 80094be:	e002      	b.n	80094c6 <_printf_i+0x1d2>
 80094c0:	0670      	lsls	r0, r6, #25
 80094c2:	d5fb      	bpl.n	80094bc <_printf_i+0x1c8>
 80094c4:	8019      	strh	r1, [r3, #0]
 80094c6:	2300      	movs	r3, #0
 80094c8:	6123      	str	r3, [r4, #16]
 80094ca:	4615      	mov	r5, r2
 80094cc:	e7ba      	b.n	8009444 <_printf_i+0x150>
 80094ce:	682b      	ldr	r3, [r5, #0]
 80094d0:	1d1a      	adds	r2, r3, #4
 80094d2:	602a      	str	r2, [r5, #0]
 80094d4:	681d      	ldr	r5, [r3, #0]
 80094d6:	6862      	ldr	r2, [r4, #4]
 80094d8:	2100      	movs	r1, #0
 80094da:	4628      	mov	r0, r5
 80094dc:	f7f6 fe78 	bl	80001d0 <memchr>
 80094e0:	b108      	cbz	r0, 80094e6 <_printf_i+0x1f2>
 80094e2:	1b40      	subs	r0, r0, r5
 80094e4:	6060      	str	r0, [r4, #4]
 80094e6:	6863      	ldr	r3, [r4, #4]
 80094e8:	6123      	str	r3, [r4, #16]
 80094ea:	2300      	movs	r3, #0
 80094ec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80094f0:	e7a8      	b.n	8009444 <_printf_i+0x150>
 80094f2:	6923      	ldr	r3, [r4, #16]
 80094f4:	462a      	mov	r2, r5
 80094f6:	4649      	mov	r1, r9
 80094f8:	4640      	mov	r0, r8
 80094fa:	47d0      	blx	sl
 80094fc:	3001      	adds	r0, #1
 80094fe:	d0ab      	beq.n	8009458 <_printf_i+0x164>
 8009500:	6823      	ldr	r3, [r4, #0]
 8009502:	079b      	lsls	r3, r3, #30
 8009504:	d413      	bmi.n	800952e <_printf_i+0x23a>
 8009506:	68e0      	ldr	r0, [r4, #12]
 8009508:	9b03      	ldr	r3, [sp, #12]
 800950a:	4298      	cmp	r0, r3
 800950c:	bfb8      	it	lt
 800950e:	4618      	movlt	r0, r3
 8009510:	e7a4      	b.n	800945c <_printf_i+0x168>
 8009512:	2301      	movs	r3, #1
 8009514:	4632      	mov	r2, r6
 8009516:	4649      	mov	r1, r9
 8009518:	4640      	mov	r0, r8
 800951a:	47d0      	blx	sl
 800951c:	3001      	adds	r0, #1
 800951e:	d09b      	beq.n	8009458 <_printf_i+0x164>
 8009520:	3501      	adds	r5, #1
 8009522:	68e3      	ldr	r3, [r4, #12]
 8009524:	9903      	ldr	r1, [sp, #12]
 8009526:	1a5b      	subs	r3, r3, r1
 8009528:	42ab      	cmp	r3, r5
 800952a:	dcf2      	bgt.n	8009512 <_printf_i+0x21e>
 800952c:	e7eb      	b.n	8009506 <_printf_i+0x212>
 800952e:	2500      	movs	r5, #0
 8009530:	f104 0619 	add.w	r6, r4, #25
 8009534:	e7f5      	b.n	8009522 <_printf_i+0x22e>
 8009536:	bf00      	nop
 8009538:	08009b79 	.word	0x08009b79
 800953c:	08009b8a 	.word	0x08009b8a

08009540 <_read_r>:
 8009540:	b538      	push	{r3, r4, r5, lr}
 8009542:	4d07      	ldr	r5, [pc, #28]	; (8009560 <_read_r+0x20>)
 8009544:	4604      	mov	r4, r0
 8009546:	4608      	mov	r0, r1
 8009548:	4611      	mov	r1, r2
 800954a:	2200      	movs	r2, #0
 800954c:	602a      	str	r2, [r5, #0]
 800954e:	461a      	mov	r2, r3
 8009550:	f7f8 fa52 	bl	80019f8 <_read>
 8009554:	1c43      	adds	r3, r0, #1
 8009556:	d102      	bne.n	800955e <_read_r+0x1e>
 8009558:	682b      	ldr	r3, [r5, #0]
 800955a:	b103      	cbz	r3, 800955e <_read_r+0x1e>
 800955c:	6023      	str	r3, [r4, #0]
 800955e:	bd38      	pop	{r3, r4, r5, pc}
 8009560:	20003da8 	.word	0x20003da8

08009564 <_fstat_r>:
 8009564:	b538      	push	{r3, r4, r5, lr}
 8009566:	4d07      	ldr	r5, [pc, #28]	; (8009584 <_fstat_r+0x20>)
 8009568:	2300      	movs	r3, #0
 800956a:	4604      	mov	r4, r0
 800956c:	4608      	mov	r0, r1
 800956e:	4611      	mov	r1, r2
 8009570:	602b      	str	r3, [r5, #0]
 8009572:	f7f8 fa69 	bl	8001a48 <_fstat>
 8009576:	1c43      	adds	r3, r0, #1
 8009578:	d102      	bne.n	8009580 <_fstat_r+0x1c>
 800957a:	682b      	ldr	r3, [r5, #0]
 800957c:	b103      	cbz	r3, 8009580 <_fstat_r+0x1c>
 800957e:	6023      	str	r3, [r4, #0]
 8009580:	bd38      	pop	{r3, r4, r5, pc}
 8009582:	bf00      	nop
 8009584:	20003da8 	.word	0x20003da8

08009588 <_isatty_r>:
 8009588:	b538      	push	{r3, r4, r5, lr}
 800958a:	4d06      	ldr	r5, [pc, #24]	; (80095a4 <_isatty_r+0x1c>)
 800958c:	2300      	movs	r3, #0
 800958e:	4604      	mov	r4, r0
 8009590:	4608      	mov	r0, r1
 8009592:	602b      	str	r3, [r5, #0]
 8009594:	f7f8 f9c6 	bl	8001924 <_isatty>
 8009598:	1c43      	adds	r3, r0, #1
 800959a:	d102      	bne.n	80095a2 <_isatty_r+0x1a>
 800959c:	682b      	ldr	r3, [r5, #0]
 800959e:	b103      	cbz	r3, 80095a2 <_isatty_r+0x1a>
 80095a0:	6023      	str	r3, [r4, #0]
 80095a2:	bd38      	pop	{r3, r4, r5, pc}
 80095a4:	20003da8 	.word	0x20003da8

080095a8 <atan2f>:
 80095a8:	f000 b81e 	b.w	80095e8 <__ieee754_atan2f>

080095ac <sqrtf>:
 80095ac:	b508      	push	{r3, lr}
 80095ae:	ed2d 8b02 	vpush	{d8}
 80095b2:	eeb0 8a40 	vmov.f32	s16, s0
 80095b6:	f000 f8b7 	bl	8009728 <__ieee754_sqrtf>
 80095ba:	eeb4 8a48 	vcmp.f32	s16, s16
 80095be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80095c2:	d60c      	bvs.n	80095de <sqrtf+0x32>
 80095c4:	eddf 8a07 	vldr	s17, [pc, #28]	; 80095e4 <sqrtf+0x38>
 80095c8:	eeb4 8ae8 	vcmpe.f32	s16, s17
 80095cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80095d0:	d505      	bpl.n	80095de <sqrtf+0x32>
 80095d2:	f7fe fe6b 	bl	80082ac <__errno>
 80095d6:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 80095da:	2321      	movs	r3, #33	; 0x21
 80095dc:	6003      	str	r3, [r0, #0]
 80095de:	ecbd 8b02 	vpop	{d8}
 80095e2:	bd08      	pop	{r3, pc}
 80095e4:	00000000 	.word	0x00000000

080095e8 <__ieee754_atan2f>:
 80095e8:	ee10 2a90 	vmov	r2, s1
 80095ec:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 80095f0:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 80095f4:	b510      	push	{r4, lr}
 80095f6:	eef0 7a40 	vmov.f32	s15, s0
 80095fa:	dc06      	bgt.n	800960a <__ieee754_atan2f+0x22>
 80095fc:	ee10 0a10 	vmov	r0, s0
 8009600:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 8009604:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8009608:	dd04      	ble.n	8009614 <__ieee754_atan2f+0x2c>
 800960a:	ee77 7aa0 	vadd.f32	s15, s15, s1
 800960e:	eeb0 0a67 	vmov.f32	s0, s15
 8009612:	bd10      	pop	{r4, pc}
 8009614:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 8009618:	d103      	bne.n	8009622 <__ieee754_atan2f+0x3a>
 800961a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800961e:	f000 b887 	b.w	8009730 <atanf>
 8009622:	1794      	asrs	r4, r2, #30
 8009624:	f004 0402 	and.w	r4, r4, #2
 8009628:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 800962c:	b943      	cbnz	r3, 8009640 <__ieee754_atan2f+0x58>
 800962e:	2c02      	cmp	r4, #2
 8009630:	d05e      	beq.n	80096f0 <__ieee754_atan2f+0x108>
 8009632:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8009704 <__ieee754_atan2f+0x11c>
 8009636:	2c03      	cmp	r4, #3
 8009638:	bf08      	it	eq
 800963a:	eef0 7a47 	vmoveq.f32	s15, s14
 800963e:	e7e6      	b.n	800960e <__ieee754_atan2f+0x26>
 8009640:	b941      	cbnz	r1, 8009654 <__ieee754_atan2f+0x6c>
 8009642:	eddf 7a31 	vldr	s15, [pc, #196]	; 8009708 <__ieee754_atan2f+0x120>
 8009646:	ed9f 0a31 	vldr	s0, [pc, #196]	; 800970c <__ieee754_atan2f+0x124>
 800964a:	2800      	cmp	r0, #0
 800964c:	bfb8      	it	lt
 800964e:	eef0 7a40 	vmovlt.f32	s15, s0
 8009652:	e7dc      	b.n	800960e <__ieee754_atan2f+0x26>
 8009654:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8009658:	d110      	bne.n	800967c <__ieee754_atan2f+0x94>
 800965a:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800965e:	f104 34ff 	add.w	r4, r4, #4294967295
 8009662:	d107      	bne.n	8009674 <__ieee754_atan2f+0x8c>
 8009664:	2c02      	cmp	r4, #2
 8009666:	d846      	bhi.n	80096f6 <__ieee754_atan2f+0x10e>
 8009668:	4b29      	ldr	r3, [pc, #164]	; (8009710 <__ieee754_atan2f+0x128>)
 800966a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800966e:	edd4 7a00 	vldr	s15, [r4]
 8009672:	e7cc      	b.n	800960e <__ieee754_atan2f+0x26>
 8009674:	2c02      	cmp	r4, #2
 8009676:	d841      	bhi.n	80096fc <__ieee754_atan2f+0x114>
 8009678:	4b26      	ldr	r3, [pc, #152]	; (8009714 <__ieee754_atan2f+0x12c>)
 800967a:	e7f6      	b.n	800966a <__ieee754_atan2f+0x82>
 800967c:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8009680:	d0df      	beq.n	8009642 <__ieee754_atan2f+0x5a>
 8009682:	1a5b      	subs	r3, r3, r1
 8009684:	f1b3 5ff4 	cmp.w	r3, #511705088	; 0x1e800000
 8009688:	ea4f 51e3 	mov.w	r1, r3, asr #23
 800968c:	da1a      	bge.n	80096c4 <__ieee754_atan2f+0xdc>
 800968e:	2a00      	cmp	r2, #0
 8009690:	da01      	bge.n	8009696 <__ieee754_atan2f+0xae>
 8009692:	313c      	adds	r1, #60	; 0x3c
 8009694:	db19      	blt.n	80096ca <__ieee754_atan2f+0xe2>
 8009696:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 800969a:	f000 f91d 	bl	80098d8 <fabsf>
 800969e:	f000 f847 	bl	8009730 <atanf>
 80096a2:	eef0 7a40 	vmov.f32	s15, s0
 80096a6:	2c01      	cmp	r4, #1
 80096a8:	d012      	beq.n	80096d0 <__ieee754_atan2f+0xe8>
 80096aa:	2c02      	cmp	r4, #2
 80096ac:	d017      	beq.n	80096de <__ieee754_atan2f+0xf6>
 80096ae:	2c00      	cmp	r4, #0
 80096b0:	d0ad      	beq.n	800960e <__ieee754_atan2f+0x26>
 80096b2:	ed9f 0a19 	vldr	s0, [pc, #100]	; 8009718 <__ieee754_atan2f+0x130>
 80096b6:	ee77 7a80 	vadd.f32	s15, s15, s0
 80096ba:	ed9f 0a18 	vldr	s0, [pc, #96]	; 800971c <__ieee754_atan2f+0x134>
 80096be:	ee77 7ac0 	vsub.f32	s15, s15, s0
 80096c2:	e7a4      	b.n	800960e <__ieee754_atan2f+0x26>
 80096c4:	eddf 7a10 	vldr	s15, [pc, #64]	; 8009708 <__ieee754_atan2f+0x120>
 80096c8:	e7ed      	b.n	80096a6 <__ieee754_atan2f+0xbe>
 80096ca:	eddf 7a15 	vldr	s15, [pc, #84]	; 8009720 <__ieee754_atan2f+0x138>
 80096ce:	e7ea      	b.n	80096a6 <__ieee754_atan2f+0xbe>
 80096d0:	ee17 3a90 	vmov	r3, s15
 80096d4:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80096d8:	ee07 3a90 	vmov	s15, r3
 80096dc:	e797      	b.n	800960e <__ieee754_atan2f+0x26>
 80096de:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 8009718 <__ieee754_atan2f+0x130>
 80096e2:	ee77 7a80 	vadd.f32	s15, s15, s0
 80096e6:	ed9f 0a0d 	vldr	s0, [pc, #52]	; 800971c <__ieee754_atan2f+0x134>
 80096ea:	ee70 7a67 	vsub.f32	s15, s0, s15
 80096ee:	e78e      	b.n	800960e <__ieee754_atan2f+0x26>
 80096f0:	eddf 7a0a 	vldr	s15, [pc, #40]	; 800971c <__ieee754_atan2f+0x134>
 80096f4:	e78b      	b.n	800960e <__ieee754_atan2f+0x26>
 80096f6:	eddf 7a0b 	vldr	s15, [pc, #44]	; 8009724 <__ieee754_atan2f+0x13c>
 80096fa:	e788      	b.n	800960e <__ieee754_atan2f+0x26>
 80096fc:	eddf 7a08 	vldr	s15, [pc, #32]	; 8009720 <__ieee754_atan2f+0x138>
 8009700:	e785      	b.n	800960e <__ieee754_atan2f+0x26>
 8009702:	bf00      	nop
 8009704:	c0490fdb 	.word	0xc0490fdb
 8009708:	3fc90fdb 	.word	0x3fc90fdb
 800970c:	bfc90fdb 	.word	0xbfc90fdb
 8009710:	08009b9c 	.word	0x08009b9c
 8009714:	08009ba8 	.word	0x08009ba8
 8009718:	33bbbd2e 	.word	0x33bbbd2e
 800971c:	40490fdb 	.word	0x40490fdb
 8009720:	00000000 	.word	0x00000000
 8009724:	3f490fdb 	.word	0x3f490fdb

08009728 <__ieee754_sqrtf>:
 8009728:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800972c:	4770      	bx	lr
	...

08009730 <atanf>:
 8009730:	b538      	push	{r3, r4, r5, lr}
 8009732:	ee10 5a10 	vmov	r5, s0
 8009736:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 800973a:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
 800973e:	eef0 7a40 	vmov.f32	s15, s0
 8009742:	db10      	blt.n	8009766 <atanf+0x36>
 8009744:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 8009748:	dd04      	ble.n	8009754 <atanf+0x24>
 800974a:	ee70 7a00 	vadd.f32	s15, s0, s0
 800974e:	eeb0 0a67 	vmov.f32	s0, s15
 8009752:	bd38      	pop	{r3, r4, r5, pc}
 8009754:	eddf 7a4d 	vldr	s15, [pc, #308]	; 800988c <atanf+0x15c>
 8009758:	ed9f 0a4d 	vldr	s0, [pc, #308]	; 8009890 <atanf+0x160>
 800975c:	2d00      	cmp	r5, #0
 800975e:	bfd8      	it	le
 8009760:	eef0 7a40 	vmovle.f32	s15, s0
 8009764:	e7f3      	b.n	800974e <atanf+0x1e>
 8009766:	4b4b      	ldr	r3, [pc, #300]	; (8009894 <atanf+0x164>)
 8009768:	429c      	cmp	r4, r3
 800976a:	dc10      	bgt.n	800978e <atanf+0x5e>
 800976c:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
 8009770:	da0a      	bge.n	8009788 <atanf+0x58>
 8009772:	ed9f 7a49 	vldr	s14, [pc, #292]	; 8009898 <atanf+0x168>
 8009776:	ee30 7a07 	vadd.f32	s14, s0, s14
 800977a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800977e:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8009782:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009786:	dce2      	bgt.n	800974e <atanf+0x1e>
 8009788:	f04f 33ff 	mov.w	r3, #4294967295
 800978c:	e013      	b.n	80097b6 <atanf+0x86>
 800978e:	f000 f8a3 	bl	80098d8 <fabsf>
 8009792:	4b42      	ldr	r3, [pc, #264]	; (800989c <atanf+0x16c>)
 8009794:	429c      	cmp	r4, r3
 8009796:	dc4f      	bgt.n	8009838 <atanf+0x108>
 8009798:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 800979c:	429c      	cmp	r4, r3
 800979e:	dc41      	bgt.n	8009824 <atanf+0xf4>
 80097a0:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 80097a4:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 80097a8:	eea0 7a27 	vfma.f32	s14, s0, s15
 80097ac:	2300      	movs	r3, #0
 80097ae:	ee30 0a27 	vadd.f32	s0, s0, s15
 80097b2:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80097b6:	1c5a      	adds	r2, r3, #1
 80097b8:	ee27 6aa7 	vmul.f32	s12, s15, s15
 80097bc:	ed9f 7a38 	vldr	s14, [pc, #224]	; 80098a0 <atanf+0x170>
 80097c0:	eddf 5a38 	vldr	s11, [pc, #224]	; 80098a4 <atanf+0x174>
 80097c4:	ed9f 5a38 	vldr	s10, [pc, #224]	; 80098a8 <atanf+0x178>
 80097c8:	ee66 6a06 	vmul.f32	s13, s12, s12
 80097cc:	eee6 5a87 	vfma.f32	s11, s13, s14
 80097d0:	ed9f 7a36 	vldr	s14, [pc, #216]	; 80098ac <atanf+0x17c>
 80097d4:	eea5 7aa6 	vfma.f32	s14, s11, s13
 80097d8:	eddf 5a35 	vldr	s11, [pc, #212]	; 80098b0 <atanf+0x180>
 80097dc:	eee7 5a26 	vfma.f32	s11, s14, s13
 80097e0:	ed9f 7a34 	vldr	s14, [pc, #208]	; 80098b4 <atanf+0x184>
 80097e4:	eea5 7aa6 	vfma.f32	s14, s11, s13
 80097e8:	eddf 5a33 	vldr	s11, [pc, #204]	; 80098b8 <atanf+0x188>
 80097ec:	eee7 5a26 	vfma.f32	s11, s14, s13
 80097f0:	ed9f 7a32 	vldr	s14, [pc, #200]	; 80098bc <atanf+0x18c>
 80097f4:	eea6 5a87 	vfma.f32	s10, s13, s14
 80097f8:	ed9f 7a31 	vldr	s14, [pc, #196]	; 80098c0 <atanf+0x190>
 80097fc:	eea5 7a26 	vfma.f32	s14, s10, s13
 8009800:	ed9f 5a30 	vldr	s10, [pc, #192]	; 80098c4 <atanf+0x194>
 8009804:	eea7 5a26 	vfma.f32	s10, s14, s13
 8009808:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 80098c8 <atanf+0x198>
 800980c:	eea5 7a26 	vfma.f32	s14, s10, s13
 8009810:	ee27 7a26 	vmul.f32	s14, s14, s13
 8009814:	eea5 7a86 	vfma.f32	s14, s11, s12
 8009818:	ee27 7a87 	vmul.f32	s14, s15, s14
 800981c:	d121      	bne.n	8009862 <atanf+0x132>
 800981e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8009822:	e794      	b.n	800974e <atanf+0x1e>
 8009824:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8009828:	ee30 7a67 	vsub.f32	s14, s0, s15
 800982c:	ee30 0a27 	vadd.f32	s0, s0, s15
 8009830:	2301      	movs	r3, #1
 8009832:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8009836:	e7be      	b.n	80097b6 <atanf+0x86>
 8009838:	4b24      	ldr	r3, [pc, #144]	; (80098cc <atanf+0x19c>)
 800983a:	429c      	cmp	r4, r3
 800983c:	dc0b      	bgt.n	8009856 <atanf+0x126>
 800983e:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 8009842:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009846:	eea0 7a27 	vfma.f32	s14, s0, s15
 800984a:	2302      	movs	r3, #2
 800984c:	ee70 6a67 	vsub.f32	s13, s0, s15
 8009850:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009854:	e7af      	b.n	80097b6 <atanf+0x86>
 8009856:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800985a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800985e:	2303      	movs	r3, #3
 8009860:	e7a9      	b.n	80097b6 <atanf+0x86>
 8009862:	4a1b      	ldr	r2, [pc, #108]	; (80098d0 <atanf+0x1a0>)
 8009864:	491b      	ldr	r1, [pc, #108]	; (80098d4 <atanf+0x1a4>)
 8009866:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800986a:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 800986e:	ed93 0a00 	vldr	s0, [r3]
 8009872:	ee37 7a40 	vsub.f32	s14, s14, s0
 8009876:	ed92 0a00 	vldr	s0, [r2]
 800987a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800987e:	2d00      	cmp	r5, #0
 8009880:	ee70 7a67 	vsub.f32	s15, s0, s15
 8009884:	bfb8      	it	lt
 8009886:	eef1 7a67 	vneglt.f32	s15, s15
 800988a:	e760      	b.n	800974e <atanf+0x1e>
 800988c:	3fc90fdb 	.word	0x3fc90fdb
 8009890:	bfc90fdb 	.word	0xbfc90fdb
 8009894:	3edfffff 	.word	0x3edfffff
 8009898:	7149f2ca 	.word	0x7149f2ca
 800989c:	3f97ffff 	.word	0x3f97ffff
 80098a0:	3c8569d7 	.word	0x3c8569d7
 80098a4:	3d4bda59 	.word	0x3d4bda59
 80098a8:	bd6ef16b 	.word	0xbd6ef16b
 80098ac:	3d886b35 	.word	0x3d886b35
 80098b0:	3dba2e6e 	.word	0x3dba2e6e
 80098b4:	3e124925 	.word	0x3e124925
 80098b8:	3eaaaaab 	.word	0x3eaaaaab
 80098bc:	bd15a221 	.word	0xbd15a221
 80098c0:	bd9d8795 	.word	0xbd9d8795
 80098c4:	bde38e38 	.word	0xbde38e38
 80098c8:	be4ccccd 	.word	0xbe4ccccd
 80098cc:	401bffff 	.word	0x401bffff
 80098d0:	08009bb4 	.word	0x08009bb4
 80098d4:	08009bc4 	.word	0x08009bc4

080098d8 <fabsf>:
 80098d8:	ee10 3a10 	vmov	r3, s0
 80098dc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80098e0:	ee00 3a10 	vmov	s0, r3
 80098e4:	4770      	bx	lr
	...

080098e8 <_init>:
 80098e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80098ea:	bf00      	nop
 80098ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80098ee:	bc08      	pop	{r3}
 80098f0:	469e      	mov	lr, r3
 80098f2:	4770      	bx	lr

080098f4 <_fini>:
 80098f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80098f6:	bf00      	nop
 80098f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80098fa:	bc08      	pop	{r3}
 80098fc:	469e      	mov	lr, r3
 80098fe:	4770      	bx	lr
