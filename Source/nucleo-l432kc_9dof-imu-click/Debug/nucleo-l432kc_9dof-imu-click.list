
nucleo-l432kc_9dof-imu-click.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000add8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002cc  0800af68  0800af68  0001af68  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b234  0800b234  0002007c  2**0
                  CONTENTS
  4 .ARM          00000008  0800b234  0800b234  0001b234  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b23c  0800b23c  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b23c  0800b23c  0001b23c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b240  0800b240  0001b240  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  0800b244  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005ddc  2000007c  0800b2c0  0002007c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20005e58  0800b2c0  00025e58  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00025562  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004ed2  00000000  00000000  0004560e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001d68  00000000  00000000  0004a4e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001bb0  00000000  00000000  0004c248  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028061  00000000  00000000  0004ddf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00025421  00000000  00000000  00075e59  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000dd114  00000000  00000000  0009b27a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0017838e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008338  00000000  00000000  001783e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000007c 	.word	0x2000007c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800af50 	.word	0x0800af50

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000080 	.word	0x20000080
 80001cc:	0800af50 	.word	0x0800af50

080001d0 <__aeabi_drsub>:
 80001d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001d4:	e002      	b.n	80001dc <__adddf3>
 80001d6:	bf00      	nop

080001d8 <__aeabi_dsub>:
 80001d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001dc <__adddf3>:
 80001dc:	b530      	push	{r4, r5, lr}
 80001de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001e6:	ea94 0f05 	teq	r4, r5
 80001ea:	bf08      	it	eq
 80001ec:	ea90 0f02 	teqeq	r0, r2
 80001f0:	bf1f      	itttt	ne
 80001f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000202:	f000 80e2 	beq.w	80003ca <__adddf3+0x1ee>
 8000206:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800020a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800020e:	bfb8      	it	lt
 8000210:	426d      	neglt	r5, r5
 8000212:	dd0c      	ble.n	800022e <__adddf3+0x52>
 8000214:	442c      	add	r4, r5
 8000216:	ea80 0202 	eor.w	r2, r0, r2
 800021a:	ea81 0303 	eor.w	r3, r1, r3
 800021e:	ea82 0000 	eor.w	r0, r2, r0
 8000222:	ea83 0101 	eor.w	r1, r3, r1
 8000226:	ea80 0202 	eor.w	r2, r0, r2
 800022a:	ea81 0303 	eor.w	r3, r1, r3
 800022e:	2d36      	cmp	r5, #54	; 0x36
 8000230:	bf88      	it	hi
 8000232:	bd30      	pophi	{r4, r5, pc}
 8000234:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000238:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800023c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000240:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000244:	d002      	beq.n	800024c <__adddf3+0x70>
 8000246:	4240      	negs	r0, r0
 8000248:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800024c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000250:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000254:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000258:	d002      	beq.n	8000260 <__adddf3+0x84>
 800025a:	4252      	negs	r2, r2
 800025c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000260:	ea94 0f05 	teq	r4, r5
 8000264:	f000 80a7 	beq.w	80003b6 <__adddf3+0x1da>
 8000268:	f1a4 0401 	sub.w	r4, r4, #1
 800026c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000270:	db0d      	blt.n	800028e <__adddf3+0xb2>
 8000272:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000276:	fa22 f205 	lsr.w	r2, r2, r5
 800027a:	1880      	adds	r0, r0, r2
 800027c:	f141 0100 	adc.w	r1, r1, #0
 8000280:	fa03 f20e 	lsl.w	r2, r3, lr
 8000284:	1880      	adds	r0, r0, r2
 8000286:	fa43 f305 	asr.w	r3, r3, r5
 800028a:	4159      	adcs	r1, r3
 800028c:	e00e      	b.n	80002ac <__adddf3+0xd0>
 800028e:	f1a5 0520 	sub.w	r5, r5, #32
 8000292:	f10e 0e20 	add.w	lr, lr, #32
 8000296:	2a01      	cmp	r2, #1
 8000298:	fa03 fc0e 	lsl.w	ip, r3, lr
 800029c:	bf28      	it	cs
 800029e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002a2:	fa43 f305 	asr.w	r3, r3, r5
 80002a6:	18c0      	adds	r0, r0, r3
 80002a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b0:	d507      	bpl.n	80002c2 <__adddf3+0xe6>
 80002b2:	f04f 0e00 	mov.w	lr, #0
 80002b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002be:	eb6e 0101 	sbc.w	r1, lr, r1
 80002c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002c6:	d31b      	bcc.n	8000300 <__adddf3+0x124>
 80002c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002cc:	d30c      	bcc.n	80002e8 <__adddf3+0x10c>
 80002ce:	0849      	lsrs	r1, r1, #1
 80002d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d8:	f104 0401 	add.w	r4, r4, #1
 80002dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002e4:	f080 809a 	bcs.w	800041c <__adddf3+0x240>
 80002e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002ec:	bf08      	it	eq
 80002ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002f2:	f150 0000 	adcs.w	r0, r0, #0
 80002f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002fa:	ea41 0105 	orr.w	r1, r1, r5
 80002fe:	bd30      	pop	{r4, r5, pc}
 8000300:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000304:	4140      	adcs	r0, r0
 8000306:	eb41 0101 	adc.w	r1, r1, r1
 800030a:	3c01      	subs	r4, #1
 800030c:	bf28      	it	cs
 800030e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000312:	d2e9      	bcs.n	80002e8 <__adddf3+0x10c>
 8000314:	f091 0f00 	teq	r1, #0
 8000318:	bf04      	itt	eq
 800031a:	4601      	moveq	r1, r0
 800031c:	2000      	moveq	r0, #0
 800031e:	fab1 f381 	clz	r3, r1
 8000322:	bf08      	it	eq
 8000324:	3320      	addeq	r3, #32
 8000326:	f1a3 030b 	sub.w	r3, r3, #11
 800032a:	f1b3 0220 	subs.w	r2, r3, #32
 800032e:	da0c      	bge.n	800034a <__adddf3+0x16e>
 8000330:	320c      	adds	r2, #12
 8000332:	dd08      	ble.n	8000346 <__adddf3+0x16a>
 8000334:	f102 0c14 	add.w	ip, r2, #20
 8000338:	f1c2 020c 	rsb	r2, r2, #12
 800033c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000340:	fa21 f102 	lsr.w	r1, r1, r2
 8000344:	e00c      	b.n	8000360 <__adddf3+0x184>
 8000346:	f102 0214 	add.w	r2, r2, #20
 800034a:	bfd8      	it	le
 800034c:	f1c2 0c20 	rsble	ip, r2, #32
 8000350:	fa01 f102 	lsl.w	r1, r1, r2
 8000354:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000358:	bfdc      	itt	le
 800035a:	ea41 010c 	orrle.w	r1, r1, ip
 800035e:	4090      	lslle	r0, r2
 8000360:	1ae4      	subs	r4, r4, r3
 8000362:	bfa2      	ittt	ge
 8000364:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000368:	4329      	orrge	r1, r5
 800036a:	bd30      	popge	{r4, r5, pc}
 800036c:	ea6f 0404 	mvn.w	r4, r4
 8000370:	3c1f      	subs	r4, #31
 8000372:	da1c      	bge.n	80003ae <__adddf3+0x1d2>
 8000374:	340c      	adds	r4, #12
 8000376:	dc0e      	bgt.n	8000396 <__adddf3+0x1ba>
 8000378:	f104 0414 	add.w	r4, r4, #20
 800037c:	f1c4 0220 	rsb	r2, r4, #32
 8000380:	fa20 f004 	lsr.w	r0, r0, r4
 8000384:	fa01 f302 	lsl.w	r3, r1, r2
 8000388:	ea40 0003 	orr.w	r0, r0, r3
 800038c:	fa21 f304 	lsr.w	r3, r1, r4
 8000390:	ea45 0103 	orr.w	r1, r5, r3
 8000394:	bd30      	pop	{r4, r5, pc}
 8000396:	f1c4 040c 	rsb	r4, r4, #12
 800039a:	f1c4 0220 	rsb	r2, r4, #32
 800039e:	fa20 f002 	lsr.w	r0, r0, r2
 80003a2:	fa01 f304 	lsl.w	r3, r1, r4
 80003a6:	ea40 0003 	orr.w	r0, r0, r3
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	fa21 f004 	lsr.w	r0, r1, r4
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	f094 0f00 	teq	r4, #0
 80003ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003be:	bf06      	itte	eq
 80003c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003c4:	3401      	addeq	r4, #1
 80003c6:	3d01      	subne	r5, #1
 80003c8:	e74e      	b.n	8000268 <__adddf3+0x8c>
 80003ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ce:	bf18      	it	ne
 80003d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003d4:	d029      	beq.n	800042a <__adddf3+0x24e>
 80003d6:	ea94 0f05 	teq	r4, r5
 80003da:	bf08      	it	eq
 80003dc:	ea90 0f02 	teqeq	r0, r2
 80003e0:	d005      	beq.n	80003ee <__adddf3+0x212>
 80003e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003e6:	bf04      	itt	eq
 80003e8:	4619      	moveq	r1, r3
 80003ea:	4610      	moveq	r0, r2
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	ea91 0f03 	teq	r1, r3
 80003f2:	bf1e      	ittt	ne
 80003f4:	2100      	movne	r1, #0
 80003f6:	2000      	movne	r0, #0
 80003f8:	bd30      	popne	{r4, r5, pc}
 80003fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003fe:	d105      	bne.n	800040c <__adddf3+0x230>
 8000400:	0040      	lsls	r0, r0, #1
 8000402:	4149      	adcs	r1, r1
 8000404:	bf28      	it	cs
 8000406:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800040a:	bd30      	pop	{r4, r5, pc}
 800040c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000410:	bf3c      	itt	cc
 8000412:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000416:	bd30      	popcc	{r4, r5, pc}
 8000418:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800041c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000420:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000424:	f04f 0000 	mov.w	r0, #0
 8000428:	bd30      	pop	{r4, r5, pc}
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf1a      	itte	ne
 8000430:	4619      	movne	r1, r3
 8000432:	4610      	movne	r0, r2
 8000434:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000438:	bf1c      	itt	ne
 800043a:	460b      	movne	r3, r1
 800043c:	4602      	movne	r2, r0
 800043e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000442:	bf06      	itte	eq
 8000444:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000448:	ea91 0f03 	teqeq	r1, r3
 800044c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000450:	bd30      	pop	{r4, r5, pc}
 8000452:	bf00      	nop

08000454 <__aeabi_ui2d>:
 8000454:	f090 0f00 	teq	r0, #0
 8000458:	bf04      	itt	eq
 800045a:	2100      	moveq	r1, #0
 800045c:	4770      	bxeq	lr
 800045e:	b530      	push	{r4, r5, lr}
 8000460:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000464:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000468:	f04f 0500 	mov.w	r5, #0
 800046c:	f04f 0100 	mov.w	r1, #0
 8000470:	e750      	b.n	8000314 <__adddf3+0x138>
 8000472:	bf00      	nop

08000474 <__aeabi_i2d>:
 8000474:	f090 0f00 	teq	r0, #0
 8000478:	bf04      	itt	eq
 800047a:	2100      	moveq	r1, #0
 800047c:	4770      	bxeq	lr
 800047e:	b530      	push	{r4, r5, lr}
 8000480:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000484:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000488:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800048c:	bf48      	it	mi
 800048e:	4240      	negmi	r0, r0
 8000490:	f04f 0100 	mov.w	r1, #0
 8000494:	e73e      	b.n	8000314 <__adddf3+0x138>
 8000496:	bf00      	nop

08000498 <__aeabi_f2d>:
 8000498:	0042      	lsls	r2, r0, #1
 800049a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800049e:	ea4f 0131 	mov.w	r1, r1, rrx
 80004a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004a6:	bf1f      	itttt	ne
 80004a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004b4:	4770      	bxne	lr
 80004b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004ba:	bf08      	it	eq
 80004bc:	4770      	bxeq	lr
 80004be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004c2:	bf04      	itt	eq
 80004c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c8:	4770      	bxeq	lr
 80004ca:	b530      	push	{r4, r5, lr}
 80004cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d8:	e71c      	b.n	8000314 <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_ul2d>:
 80004dc:	ea50 0201 	orrs.w	r2, r0, r1
 80004e0:	bf08      	it	eq
 80004e2:	4770      	bxeq	lr
 80004e4:	b530      	push	{r4, r5, lr}
 80004e6:	f04f 0500 	mov.w	r5, #0
 80004ea:	e00a      	b.n	8000502 <__aeabi_l2d+0x16>

080004ec <__aeabi_l2d>:
 80004ec:	ea50 0201 	orrs.w	r2, r0, r1
 80004f0:	bf08      	it	eq
 80004f2:	4770      	bxeq	lr
 80004f4:	b530      	push	{r4, r5, lr}
 80004f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004fa:	d502      	bpl.n	8000502 <__aeabi_l2d+0x16>
 80004fc:	4240      	negs	r0, r0
 80004fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000502:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000506:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800050a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800050e:	f43f aed8 	beq.w	80002c2 <__adddf3+0xe6>
 8000512:	f04f 0203 	mov.w	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000532:	fa20 f002 	lsr.w	r0, r0, r2
 8000536:	fa01 fe03 	lsl.w	lr, r1, r3
 800053a:	ea40 000e 	orr.w	r0, r0, lr
 800053e:	fa21 f102 	lsr.w	r1, r1, r2
 8000542:	4414      	add	r4, r2
 8000544:	e6bd      	b.n	80002c2 <__adddf3+0xe6>
 8000546:	bf00      	nop

08000548 <__aeabi_dmul>:
 8000548:	b570      	push	{r4, r5, r6, lr}
 800054a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800054e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000552:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000556:	bf1d      	ittte	ne
 8000558:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800055c:	ea94 0f0c 	teqne	r4, ip
 8000560:	ea95 0f0c 	teqne	r5, ip
 8000564:	f000 f8de 	bleq	8000724 <__aeabi_dmul+0x1dc>
 8000568:	442c      	add	r4, r5
 800056a:	ea81 0603 	eor.w	r6, r1, r3
 800056e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000572:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000576:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800057a:	bf18      	it	ne
 800057c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000580:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000584:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000588:	d038      	beq.n	80005fc <__aeabi_dmul+0xb4>
 800058a:	fba0 ce02 	umull	ip, lr, r0, r2
 800058e:	f04f 0500 	mov.w	r5, #0
 8000592:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000596:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800059a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800059e:	f04f 0600 	mov.w	r6, #0
 80005a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005a6:	f09c 0f00 	teq	ip, #0
 80005aa:	bf18      	it	ne
 80005ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005bc:	d204      	bcs.n	80005c8 <__aeabi_dmul+0x80>
 80005be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005c2:	416d      	adcs	r5, r5
 80005c4:	eb46 0606 	adc.w	r6, r6, r6
 80005c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e0:	bf88      	it	hi
 80005e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005e6:	d81e      	bhi.n	8000626 <__aeabi_dmul+0xde>
 80005e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005ec:	bf08      	it	eq
 80005ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005f2:	f150 0000 	adcs.w	r0, r0, #0
 80005f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000600:	ea46 0101 	orr.w	r1, r6, r1
 8000604:	ea40 0002 	orr.w	r0, r0, r2
 8000608:	ea81 0103 	eor.w	r1, r1, r3
 800060c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000610:	bfc2      	ittt	gt
 8000612:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000616:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800061a:	bd70      	popgt	{r4, r5, r6, pc}
 800061c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000620:	f04f 0e00 	mov.w	lr, #0
 8000624:	3c01      	subs	r4, #1
 8000626:	f300 80ab 	bgt.w	8000780 <__aeabi_dmul+0x238>
 800062a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800062e:	bfde      	ittt	le
 8000630:	2000      	movle	r0, #0
 8000632:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000636:	bd70      	pople	{r4, r5, r6, pc}
 8000638:	f1c4 0400 	rsb	r4, r4, #0
 800063c:	3c20      	subs	r4, #32
 800063e:	da35      	bge.n	80006ac <__aeabi_dmul+0x164>
 8000640:	340c      	adds	r4, #12
 8000642:	dc1b      	bgt.n	800067c <__aeabi_dmul+0x134>
 8000644:	f104 0414 	add.w	r4, r4, #20
 8000648:	f1c4 0520 	rsb	r5, r4, #32
 800064c:	fa00 f305 	lsl.w	r3, r0, r5
 8000650:	fa20 f004 	lsr.w	r0, r0, r4
 8000654:	fa01 f205 	lsl.w	r2, r1, r5
 8000658:	ea40 0002 	orr.w	r0, r0, r2
 800065c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000660:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000664:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000668:	fa21 f604 	lsr.w	r6, r1, r4
 800066c:	eb42 0106 	adc.w	r1, r2, r6
 8000670:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000674:	bf08      	it	eq
 8000676:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800067a:	bd70      	pop	{r4, r5, r6, pc}
 800067c:	f1c4 040c 	rsb	r4, r4, #12
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f304 	lsl.w	r3, r0, r4
 8000688:	fa20 f005 	lsr.w	r0, r0, r5
 800068c:	fa01 f204 	lsl.w	r2, r1, r4
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000698:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800069c:	f141 0100 	adc.w	r1, r1, #0
 80006a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006a4:	bf08      	it	eq
 80006a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f1c4 0520 	rsb	r5, r4, #32
 80006b0:	fa00 f205 	lsl.w	r2, r0, r5
 80006b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b8:	fa20 f304 	lsr.w	r3, r0, r4
 80006bc:	fa01 f205 	lsl.w	r2, r1, r5
 80006c0:	ea43 0302 	orr.w	r3, r3, r2
 80006c4:	fa21 f004 	lsr.w	r0, r1, r4
 80006c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006cc:	fa21 f204 	lsr.w	r2, r1, r4
 80006d0:	ea20 0002 	bic.w	r0, r0, r2
 80006d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f094 0f00 	teq	r4, #0
 80006e8:	d10f      	bne.n	800070a <__aeabi_dmul+0x1c2>
 80006ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006ee:	0040      	lsls	r0, r0, #1
 80006f0:	eb41 0101 	adc.w	r1, r1, r1
 80006f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f8:	bf08      	it	eq
 80006fa:	3c01      	subeq	r4, #1
 80006fc:	d0f7      	beq.n	80006ee <__aeabi_dmul+0x1a6>
 80006fe:	ea41 0106 	orr.w	r1, r1, r6
 8000702:	f095 0f00 	teq	r5, #0
 8000706:	bf18      	it	ne
 8000708:	4770      	bxne	lr
 800070a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800070e:	0052      	lsls	r2, r2, #1
 8000710:	eb43 0303 	adc.w	r3, r3, r3
 8000714:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000718:	bf08      	it	eq
 800071a:	3d01      	subeq	r5, #1
 800071c:	d0f7      	beq.n	800070e <__aeabi_dmul+0x1c6>
 800071e:	ea43 0306 	orr.w	r3, r3, r6
 8000722:	4770      	bx	lr
 8000724:	ea94 0f0c 	teq	r4, ip
 8000728:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800072c:	bf18      	it	ne
 800072e:	ea95 0f0c 	teqne	r5, ip
 8000732:	d00c      	beq.n	800074e <__aeabi_dmul+0x206>
 8000734:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000738:	bf18      	it	ne
 800073a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800073e:	d1d1      	bne.n	80006e4 <__aeabi_dmul+0x19c>
 8000740:	ea81 0103 	eor.w	r1, r1, r3
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	f04f 0000 	mov.w	r0, #0
 800074c:	bd70      	pop	{r4, r5, r6, pc}
 800074e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000752:	bf06      	itte	eq
 8000754:	4610      	moveq	r0, r2
 8000756:	4619      	moveq	r1, r3
 8000758:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800075c:	d019      	beq.n	8000792 <__aeabi_dmul+0x24a>
 800075e:	ea94 0f0c 	teq	r4, ip
 8000762:	d102      	bne.n	800076a <__aeabi_dmul+0x222>
 8000764:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000768:	d113      	bne.n	8000792 <__aeabi_dmul+0x24a>
 800076a:	ea95 0f0c 	teq	r5, ip
 800076e:	d105      	bne.n	800077c <__aeabi_dmul+0x234>
 8000770:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000774:	bf1c      	itt	ne
 8000776:	4610      	movne	r0, r2
 8000778:	4619      	movne	r1, r3
 800077a:	d10a      	bne.n	8000792 <__aeabi_dmul+0x24a>
 800077c:	ea81 0103 	eor.w	r1, r1, r3
 8000780:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000784:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000788:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800078c:	f04f 0000 	mov.w	r0, #0
 8000790:	bd70      	pop	{r4, r5, r6, pc}
 8000792:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000796:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800079a:	bd70      	pop	{r4, r5, r6, pc}

0800079c <__aeabi_ddiv>:
 800079c:	b570      	push	{r4, r5, r6, lr}
 800079e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007aa:	bf1d      	ittte	ne
 80007ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b0:	ea94 0f0c 	teqne	r4, ip
 80007b4:	ea95 0f0c 	teqne	r5, ip
 80007b8:	f000 f8a7 	bleq	800090a <__aeabi_ddiv+0x16e>
 80007bc:	eba4 0405 	sub.w	r4, r4, r5
 80007c0:	ea81 0e03 	eor.w	lr, r1, r3
 80007c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007cc:	f000 8088 	beq.w	80008e0 <__aeabi_ddiv+0x144>
 80007d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007f4:	429d      	cmp	r5, r3
 80007f6:	bf08      	it	eq
 80007f8:	4296      	cmpeq	r6, r2
 80007fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000802:	d202      	bcs.n	800080a <__aeabi_ddiv+0x6e>
 8000804:	085b      	lsrs	r3, r3, #1
 8000806:	ea4f 0232 	mov.w	r2, r2, rrx
 800080a:	1ab6      	subs	r6, r6, r2
 800080c:	eb65 0503 	sbc.w	r5, r5, r3
 8000810:	085b      	lsrs	r3, r3, #1
 8000812:	ea4f 0232 	mov.w	r2, r2, rrx
 8000816:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800081a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800081e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000822:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000826:	bf22      	ittt	cs
 8000828:	1ab6      	subcs	r6, r6, r2
 800082a:	4675      	movcs	r5, lr
 800082c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000830:	085b      	lsrs	r3, r3, #1
 8000832:	ea4f 0232 	mov.w	r2, r2, rrx
 8000836:	ebb6 0e02 	subs.w	lr, r6, r2
 800083a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800083e:	bf22      	ittt	cs
 8000840:	1ab6      	subcs	r6, r6, r2
 8000842:	4675      	movcs	r5, lr
 8000844:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000852:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000856:	bf22      	ittt	cs
 8000858:	1ab6      	subcs	r6, r6, r2
 800085a:	4675      	movcs	r5, lr
 800085c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	ea4f 0232 	mov.w	r2, r2, rrx
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000878:	ea55 0e06 	orrs.w	lr, r5, r6
 800087c:	d018      	beq.n	80008b0 <__aeabi_ddiv+0x114>
 800087e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000882:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000886:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800088a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800088e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000892:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000896:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800089a:	d1c0      	bne.n	800081e <__aeabi_ddiv+0x82>
 800089c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a0:	d10b      	bne.n	80008ba <__aeabi_ddiv+0x11e>
 80008a2:	ea41 0100 	orr.w	r1, r1, r0
 80008a6:	f04f 0000 	mov.w	r0, #0
 80008aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008ae:	e7b6      	b.n	800081e <__aeabi_ddiv+0x82>
 80008b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008b4:	bf04      	itt	eq
 80008b6:	4301      	orreq	r1, r0
 80008b8:	2000      	moveq	r0, #0
 80008ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008be:	bf88      	it	hi
 80008c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008c4:	f63f aeaf 	bhi.w	8000626 <__aeabi_dmul+0xde>
 80008c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008cc:	bf04      	itt	eq
 80008ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008d6:	f150 0000 	adcs.w	r0, r0, #0
 80008da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008de:	bd70      	pop	{r4, r5, r6, pc}
 80008e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008ec:	bfc2      	ittt	gt
 80008ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008f6:	bd70      	popgt	{r4, r5, r6, pc}
 80008f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008fc:	f04f 0e00 	mov.w	lr, #0
 8000900:	3c01      	subs	r4, #1
 8000902:	e690      	b.n	8000626 <__aeabi_dmul+0xde>
 8000904:	ea45 0e06 	orr.w	lr, r5, r6
 8000908:	e68d      	b.n	8000626 <__aeabi_dmul+0xde>
 800090a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800090e:	ea94 0f0c 	teq	r4, ip
 8000912:	bf08      	it	eq
 8000914:	ea95 0f0c 	teqeq	r5, ip
 8000918:	f43f af3b 	beq.w	8000792 <__aeabi_dmul+0x24a>
 800091c:	ea94 0f0c 	teq	r4, ip
 8000920:	d10a      	bne.n	8000938 <__aeabi_ddiv+0x19c>
 8000922:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000926:	f47f af34 	bne.w	8000792 <__aeabi_dmul+0x24a>
 800092a:	ea95 0f0c 	teq	r5, ip
 800092e:	f47f af25 	bne.w	800077c <__aeabi_dmul+0x234>
 8000932:	4610      	mov	r0, r2
 8000934:	4619      	mov	r1, r3
 8000936:	e72c      	b.n	8000792 <__aeabi_dmul+0x24a>
 8000938:	ea95 0f0c 	teq	r5, ip
 800093c:	d106      	bne.n	800094c <__aeabi_ddiv+0x1b0>
 800093e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000942:	f43f aefd 	beq.w	8000740 <__aeabi_dmul+0x1f8>
 8000946:	4610      	mov	r0, r2
 8000948:	4619      	mov	r1, r3
 800094a:	e722      	b.n	8000792 <__aeabi_dmul+0x24a>
 800094c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000950:	bf18      	it	ne
 8000952:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000956:	f47f aec5 	bne.w	80006e4 <__aeabi_dmul+0x19c>
 800095a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800095e:	f47f af0d 	bne.w	800077c <__aeabi_dmul+0x234>
 8000962:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000966:	f47f aeeb 	bne.w	8000740 <__aeabi_dmul+0x1f8>
 800096a:	e712      	b.n	8000792 <__aeabi_dmul+0x24a>

0800096c <__gedf2>:
 800096c:	f04f 3cff 	mov.w	ip, #4294967295
 8000970:	e006      	b.n	8000980 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__ledf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	e002      	b.n	8000980 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__cmpdf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000984:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000988:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800098c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000990:	bf18      	it	ne
 8000992:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000996:	d01b      	beq.n	80009d0 <__cmpdf2+0x54>
 8000998:	b001      	add	sp, #4
 800099a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800099e:	bf0c      	ite	eq
 80009a0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009a4:	ea91 0f03 	teqne	r1, r3
 80009a8:	bf02      	ittt	eq
 80009aa:	ea90 0f02 	teqeq	r0, r2
 80009ae:	2000      	moveq	r0, #0
 80009b0:	4770      	bxeq	lr
 80009b2:	f110 0f00 	cmn.w	r0, #0
 80009b6:	ea91 0f03 	teq	r1, r3
 80009ba:	bf58      	it	pl
 80009bc:	4299      	cmppl	r1, r3
 80009be:	bf08      	it	eq
 80009c0:	4290      	cmpeq	r0, r2
 80009c2:	bf2c      	ite	cs
 80009c4:	17d8      	asrcs	r0, r3, #31
 80009c6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009ca:	f040 0001 	orr.w	r0, r0, #1
 80009ce:	4770      	bx	lr
 80009d0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d8:	d102      	bne.n	80009e0 <__cmpdf2+0x64>
 80009da:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009de:	d107      	bne.n	80009f0 <__cmpdf2+0x74>
 80009e0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009e4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e8:	d1d6      	bne.n	8000998 <__cmpdf2+0x1c>
 80009ea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009ee:	d0d3      	beq.n	8000998 <__cmpdf2+0x1c>
 80009f0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009f4:	4770      	bx	lr
 80009f6:	bf00      	nop

080009f8 <__aeabi_cdrcmple>:
 80009f8:	4684      	mov	ip, r0
 80009fa:	4610      	mov	r0, r2
 80009fc:	4662      	mov	r2, ip
 80009fe:	468c      	mov	ip, r1
 8000a00:	4619      	mov	r1, r3
 8000a02:	4663      	mov	r3, ip
 8000a04:	e000      	b.n	8000a08 <__aeabi_cdcmpeq>
 8000a06:	bf00      	nop

08000a08 <__aeabi_cdcmpeq>:
 8000a08:	b501      	push	{r0, lr}
 8000a0a:	f7ff ffb7 	bl	800097c <__cmpdf2>
 8000a0e:	2800      	cmp	r0, #0
 8000a10:	bf48      	it	mi
 8000a12:	f110 0f00 	cmnmi.w	r0, #0
 8000a16:	bd01      	pop	{r0, pc}

08000a18 <__aeabi_dcmpeq>:
 8000a18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a1c:	f7ff fff4 	bl	8000a08 <__aeabi_cdcmpeq>
 8000a20:	bf0c      	ite	eq
 8000a22:	2001      	moveq	r0, #1
 8000a24:	2000      	movne	r0, #0
 8000a26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a2a:	bf00      	nop

08000a2c <__aeabi_dcmplt>:
 8000a2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a30:	f7ff ffea 	bl	8000a08 <__aeabi_cdcmpeq>
 8000a34:	bf34      	ite	cc
 8000a36:	2001      	movcc	r0, #1
 8000a38:	2000      	movcs	r0, #0
 8000a3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a3e:	bf00      	nop

08000a40 <__aeabi_dcmple>:
 8000a40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a44:	f7ff ffe0 	bl	8000a08 <__aeabi_cdcmpeq>
 8000a48:	bf94      	ite	ls
 8000a4a:	2001      	movls	r0, #1
 8000a4c:	2000      	movhi	r0, #0
 8000a4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a52:	bf00      	nop

08000a54 <__aeabi_dcmpge>:
 8000a54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a58:	f7ff ffce 	bl	80009f8 <__aeabi_cdrcmple>
 8000a5c:	bf94      	ite	ls
 8000a5e:	2001      	movls	r0, #1
 8000a60:	2000      	movhi	r0, #0
 8000a62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a66:	bf00      	nop

08000a68 <__aeabi_dcmpgt>:
 8000a68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a6c:	f7ff ffc4 	bl	80009f8 <__aeabi_cdrcmple>
 8000a70:	bf34      	ite	cc
 8000a72:	2001      	movcc	r0, #1
 8000a74:	2000      	movcs	r0, #0
 8000a76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a7a:	bf00      	nop

08000a7c <__aeabi_ldivmod>:
 8000a7c:	b97b      	cbnz	r3, 8000a9e <__aeabi_ldivmod+0x22>
 8000a7e:	b972      	cbnz	r2, 8000a9e <__aeabi_ldivmod+0x22>
 8000a80:	2900      	cmp	r1, #0
 8000a82:	bfbe      	ittt	lt
 8000a84:	2000      	movlt	r0, #0
 8000a86:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000a8a:	e006      	blt.n	8000a9a <__aeabi_ldivmod+0x1e>
 8000a8c:	bf08      	it	eq
 8000a8e:	2800      	cmpeq	r0, #0
 8000a90:	bf1c      	itt	ne
 8000a92:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000a96:	f04f 30ff 	movne.w	r0, #4294967295
 8000a9a:	f000 b9f5 	b.w	8000e88 <__aeabi_idiv0>
 8000a9e:	f1ad 0c08 	sub.w	ip, sp, #8
 8000aa2:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000aa6:	2900      	cmp	r1, #0
 8000aa8:	db09      	blt.n	8000abe <__aeabi_ldivmod+0x42>
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	db1a      	blt.n	8000ae4 <__aeabi_ldivmod+0x68>
 8000aae:	f000 f883 	bl	8000bb8 <__udivmoddi4>
 8000ab2:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ab6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000aba:	b004      	add	sp, #16
 8000abc:	4770      	bx	lr
 8000abe:	4240      	negs	r0, r0
 8000ac0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	db1b      	blt.n	8000b00 <__aeabi_ldivmod+0x84>
 8000ac8:	f000 f876 	bl	8000bb8 <__udivmoddi4>
 8000acc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ad0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ad4:	b004      	add	sp, #16
 8000ad6:	4240      	negs	r0, r0
 8000ad8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000adc:	4252      	negs	r2, r2
 8000ade:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000ae2:	4770      	bx	lr
 8000ae4:	4252      	negs	r2, r2
 8000ae6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000aea:	f000 f865 	bl	8000bb8 <__udivmoddi4>
 8000aee:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000af2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000af6:	b004      	add	sp, #16
 8000af8:	4240      	negs	r0, r0
 8000afa:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000afe:	4770      	bx	lr
 8000b00:	4252      	negs	r2, r2
 8000b02:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000b06:	f000 f857 	bl	8000bb8 <__udivmoddi4>
 8000b0a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b0e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b12:	b004      	add	sp, #16
 8000b14:	4252      	negs	r2, r2
 8000b16:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000b1a:	4770      	bx	lr

08000b1c <__aeabi_uldivmod>:
 8000b1c:	b953      	cbnz	r3, 8000b34 <__aeabi_uldivmod+0x18>
 8000b1e:	b94a      	cbnz	r2, 8000b34 <__aeabi_uldivmod+0x18>
 8000b20:	2900      	cmp	r1, #0
 8000b22:	bf08      	it	eq
 8000b24:	2800      	cmpeq	r0, #0
 8000b26:	bf1c      	itt	ne
 8000b28:	f04f 31ff 	movne.w	r1, #4294967295
 8000b2c:	f04f 30ff 	movne.w	r0, #4294967295
 8000b30:	f000 b9aa 	b.w	8000e88 <__aeabi_idiv0>
 8000b34:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b38:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b3c:	f000 f83c 	bl	8000bb8 <__udivmoddi4>
 8000b40:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b44:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b48:	b004      	add	sp, #16
 8000b4a:	4770      	bx	lr

08000b4c <__aeabi_d2lz>:
 8000b4c:	b538      	push	{r3, r4, r5, lr}
 8000b4e:	2200      	movs	r2, #0
 8000b50:	2300      	movs	r3, #0
 8000b52:	4604      	mov	r4, r0
 8000b54:	460d      	mov	r5, r1
 8000b56:	f7ff ff69 	bl	8000a2c <__aeabi_dcmplt>
 8000b5a:	b928      	cbnz	r0, 8000b68 <__aeabi_d2lz+0x1c>
 8000b5c:	4620      	mov	r0, r4
 8000b5e:	4629      	mov	r1, r5
 8000b60:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000b64:	f000 b80a 	b.w	8000b7c <__aeabi_d2ulz>
 8000b68:	4620      	mov	r0, r4
 8000b6a:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000b6e:	f000 f805 	bl	8000b7c <__aeabi_d2ulz>
 8000b72:	4240      	negs	r0, r0
 8000b74:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b78:	bd38      	pop	{r3, r4, r5, pc}
 8000b7a:	bf00      	nop

08000b7c <__aeabi_d2ulz>:
 8000b7c:	b5d0      	push	{r4, r6, r7, lr}
 8000b7e:	4b0c      	ldr	r3, [pc, #48]	; (8000bb0 <__aeabi_d2ulz+0x34>)
 8000b80:	2200      	movs	r2, #0
 8000b82:	4606      	mov	r6, r0
 8000b84:	460f      	mov	r7, r1
 8000b86:	f7ff fcdf 	bl	8000548 <__aeabi_dmul>
 8000b8a:	f000 f97f 	bl	8000e8c <__aeabi_d2uiz>
 8000b8e:	4604      	mov	r4, r0
 8000b90:	f7ff fc60 	bl	8000454 <__aeabi_ui2d>
 8000b94:	4b07      	ldr	r3, [pc, #28]	; (8000bb4 <__aeabi_d2ulz+0x38>)
 8000b96:	2200      	movs	r2, #0
 8000b98:	f7ff fcd6 	bl	8000548 <__aeabi_dmul>
 8000b9c:	4602      	mov	r2, r0
 8000b9e:	460b      	mov	r3, r1
 8000ba0:	4630      	mov	r0, r6
 8000ba2:	4639      	mov	r1, r7
 8000ba4:	f7ff fb18 	bl	80001d8 <__aeabi_dsub>
 8000ba8:	f000 f970 	bl	8000e8c <__aeabi_d2uiz>
 8000bac:	4621      	mov	r1, r4
 8000bae:	bdd0      	pop	{r4, r6, r7, pc}
 8000bb0:	3df00000 	.word	0x3df00000
 8000bb4:	41f00000 	.word	0x41f00000

08000bb8 <__udivmoddi4>:
 8000bb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bbc:	9d08      	ldr	r5, [sp, #32]
 8000bbe:	4604      	mov	r4, r0
 8000bc0:	468e      	mov	lr, r1
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d14d      	bne.n	8000c62 <__udivmoddi4+0xaa>
 8000bc6:	428a      	cmp	r2, r1
 8000bc8:	4694      	mov	ip, r2
 8000bca:	d969      	bls.n	8000ca0 <__udivmoddi4+0xe8>
 8000bcc:	fab2 f282 	clz	r2, r2
 8000bd0:	b152      	cbz	r2, 8000be8 <__udivmoddi4+0x30>
 8000bd2:	fa01 f302 	lsl.w	r3, r1, r2
 8000bd6:	f1c2 0120 	rsb	r1, r2, #32
 8000bda:	fa20 f101 	lsr.w	r1, r0, r1
 8000bde:	fa0c fc02 	lsl.w	ip, ip, r2
 8000be2:	ea41 0e03 	orr.w	lr, r1, r3
 8000be6:	4094      	lsls	r4, r2
 8000be8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000bec:	0c21      	lsrs	r1, r4, #16
 8000bee:	fbbe f6f8 	udiv	r6, lr, r8
 8000bf2:	fa1f f78c 	uxth.w	r7, ip
 8000bf6:	fb08 e316 	mls	r3, r8, r6, lr
 8000bfa:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000bfe:	fb06 f107 	mul.w	r1, r6, r7
 8000c02:	4299      	cmp	r1, r3
 8000c04:	d90a      	bls.n	8000c1c <__udivmoddi4+0x64>
 8000c06:	eb1c 0303 	adds.w	r3, ip, r3
 8000c0a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c0e:	f080 811f 	bcs.w	8000e50 <__udivmoddi4+0x298>
 8000c12:	4299      	cmp	r1, r3
 8000c14:	f240 811c 	bls.w	8000e50 <__udivmoddi4+0x298>
 8000c18:	3e02      	subs	r6, #2
 8000c1a:	4463      	add	r3, ip
 8000c1c:	1a5b      	subs	r3, r3, r1
 8000c1e:	b2a4      	uxth	r4, r4
 8000c20:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c24:	fb08 3310 	mls	r3, r8, r0, r3
 8000c28:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c2c:	fb00 f707 	mul.w	r7, r0, r7
 8000c30:	42a7      	cmp	r7, r4
 8000c32:	d90a      	bls.n	8000c4a <__udivmoddi4+0x92>
 8000c34:	eb1c 0404 	adds.w	r4, ip, r4
 8000c38:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c3c:	f080 810a 	bcs.w	8000e54 <__udivmoddi4+0x29c>
 8000c40:	42a7      	cmp	r7, r4
 8000c42:	f240 8107 	bls.w	8000e54 <__udivmoddi4+0x29c>
 8000c46:	4464      	add	r4, ip
 8000c48:	3802      	subs	r0, #2
 8000c4a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c4e:	1be4      	subs	r4, r4, r7
 8000c50:	2600      	movs	r6, #0
 8000c52:	b11d      	cbz	r5, 8000c5c <__udivmoddi4+0xa4>
 8000c54:	40d4      	lsrs	r4, r2
 8000c56:	2300      	movs	r3, #0
 8000c58:	e9c5 4300 	strd	r4, r3, [r5]
 8000c5c:	4631      	mov	r1, r6
 8000c5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c62:	428b      	cmp	r3, r1
 8000c64:	d909      	bls.n	8000c7a <__udivmoddi4+0xc2>
 8000c66:	2d00      	cmp	r5, #0
 8000c68:	f000 80ef 	beq.w	8000e4a <__udivmoddi4+0x292>
 8000c6c:	2600      	movs	r6, #0
 8000c6e:	e9c5 0100 	strd	r0, r1, [r5]
 8000c72:	4630      	mov	r0, r6
 8000c74:	4631      	mov	r1, r6
 8000c76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7a:	fab3 f683 	clz	r6, r3
 8000c7e:	2e00      	cmp	r6, #0
 8000c80:	d14a      	bne.n	8000d18 <__udivmoddi4+0x160>
 8000c82:	428b      	cmp	r3, r1
 8000c84:	d302      	bcc.n	8000c8c <__udivmoddi4+0xd4>
 8000c86:	4282      	cmp	r2, r0
 8000c88:	f200 80f9 	bhi.w	8000e7e <__udivmoddi4+0x2c6>
 8000c8c:	1a84      	subs	r4, r0, r2
 8000c8e:	eb61 0303 	sbc.w	r3, r1, r3
 8000c92:	2001      	movs	r0, #1
 8000c94:	469e      	mov	lr, r3
 8000c96:	2d00      	cmp	r5, #0
 8000c98:	d0e0      	beq.n	8000c5c <__udivmoddi4+0xa4>
 8000c9a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000c9e:	e7dd      	b.n	8000c5c <__udivmoddi4+0xa4>
 8000ca0:	b902      	cbnz	r2, 8000ca4 <__udivmoddi4+0xec>
 8000ca2:	deff      	udf	#255	; 0xff
 8000ca4:	fab2 f282 	clz	r2, r2
 8000ca8:	2a00      	cmp	r2, #0
 8000caa:	f040 8092 	bne.w	8000dd2 <__udivmoddi4+0x21a>
 8000cae:	eba1 010c 	sub.w	r1, r1, ip
 8000cb2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cb6:	fa1f fe8c 	uxth.w	lr, ip
 8000cba:	2601      	movs	r6, #1
 8000cbc:	0c20      	lsrs	r0, r4, #16
 8000cbe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000cc2:	fb07 1113 	mls	r1, r7, r3, r1
 8000cc6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000cca:	fb0e f003 	mul.w	r0, lr, r3
 8000cce:	4288      	cmp	r0, r1
 8000cd0:	d908      	bls.n	8000ce4 <__udivmoddi4+0x12c>
 8000cd2:	eb1c 0101 	adds.w	r1, ip, r1
 8000cd6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000cda:	d202      	bcs.n	8000ce2 <__udivmoddi4+0x12a>
 8000cdc:	4288      	cmp	r0, r1
 8000cde:	f200 80cb 	bhi.w	8000e78 <__udivmoddi4+0x2c0>
 8000ce2:	4643      	mov	r3, r8
 8000ce4:	1a09      	subs	r1, r1, r0
 8000ce6:	b2a4      	uxth	r4, r4
 8000ce8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000cec:	fb07 1110 	mls	r1, r7, r0, r1
 8000cf0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000cf4:	fb0e fe00 	mul.w	lr, lr, r0
 8000cf8:	45a6      	cmp	lr, r4
 8000cfa:	d908      	bls.n	8000d0e <__udivmoddi4+0x156>
 8000cfc:	eb1c 0404 	adds.w	r4, ip, r4
 8000d00:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d04:	d202      	bcs.n	8000d0c <__udivmoddi4+0x154>
 8000d06:	45a6      	cmp	lr, r4
 8000d08:	f200 80bb 	bhi.w	8000e82 <__udivmoddi4+0x2ca>
 8000d0c:	4608      	mov	r0, r1
 8000d0e:	eba4 040e 	sub.w	r4, r4, lr
 8000d12:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d16:	e79c      	b.n	8000c52 <__udivmoddi4+0x9a>
 8000d18:	f1c6 0720 	rsb	r7, r6, #32
 8000d1c:	40b3      	lsls	r3, r6
 8000d1e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d22:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d26:	fa20 f407 	lsr.w	r4, r0, r7
 8000d2a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d2e:	431c      	orrs	r4, r3
 8000d30:	40f9      	lsrs	r1, r7
 8000d32:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d36:	fa00 f306 	lsl.w	r3, r0, r6
 8000d3a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d3e:	0c20      	lsrs	r0, r4, #16
 8000d40:	fa1f fe8c 	uxth.w	lr, ip
 8000d44:	fb09 1118 	mls	r1, r9, r8, r1
 8000d48:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d4c:	fb08 f00e 	mul.w	r0, r8, lr
 8000d50:	4288      	cmp	r0, r1
 8000d52:	fa02 f206 	lsl.w	r2, r2, r6
 8000d56:	d90b      	bls.n	8000d70 <__udivmoddi4+0x1b8>
 8000d58:	eb1c 0101 	adds.w	r1, ip, r1
 8000d5c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d60:	f080 8088 	bcs.w	8000e74 <__udivmoddi4+0x2bc>
 8000d64:	4288      	cmp	r0, r1
 8000d66:	f240 8085 	bls.w	8000e74 <__udivmoddi4+0x2bc>
 8000d6a:	f1a8 0802 	sub.w	r8, r8, #2
 8000d6e:	4461      	add	r1, ip
 8000d70:	1a09      	subs	r1, r1, r0
 8000d72:	b2a4      	uxth	r4, r4
 8000d74:	fbb1 f0f9 	udiv	r0, r1, r9
 8000d78:	fb09 1110 	mls	r1, r9, r0, r1
 8000d7c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000d80:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d84:	458e      	cmp	lr, r1
 8000d86:	d908      	bls.n	8000d9a <__udivmoddi4+0x1e2>
 8000d88:	eb1c 0101 	adds.w	r1, ip, r1
 8000d8c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d90:	d26c      	bcs.n	8000e6c <__udivmoddi4+0x2b4>
 8000d92:	458e      	cmp	lr, r1
 8000d94:	d96a      	bls.n	8000e6c <__udivmoddi4+0x2b4>
 8000d96:	3802      	subs	r0, #2
 8000d98:	4461      	add	r1, ip
 8000d9a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000d9e:	fba0 9402 	umull	r9, r4, r0, r2
 8000da2:	eba1 010e 	sub.w	r1, r1, lr
 8000da6:	42a1      	cmp	r1, r4
 8000da8:	46c8      	mov	r8, r9
 8000daa:	46a6      	mov	lr, r4
 8000dac:	d356      	bcc.n	8000e5c <__udivmoddi4+0x2a4>
 8000dae:	d053      	beq.n	8000e58 <__udivmoddi4+0x2a0>
 8000db0:	b15d      	cbz	r5, 8000dca <__udivmoddi4+0x212>
 8000db2:	ebb3 0208 	subs.w	r2, r3, r8
 8000db6:	eb61 010e 	sbc.w	r1, r1, lr
 8000dba:	fa01 f707 	lsl.w	r7, r1, r7
 8000dbe:	fa22 f306 	lsr.w	r3, r2, r6
 8000dc2:	40f1      	lsrs	r1, r6
 8000dc4:	431f      	orrs	r7, r3
 8000dc6:	e9c5 7100 	strd	r7, r1, [r5]
 8000dca:	2600      	movs	r6, #0
 8000dcc:	4631      	mov	r1, r6
 8000dce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dd2:	f1c2 0320 	rsb	r3, r2, #32
 8000dd6:	40d8      	lsrs	r0, r3
 8000dd8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ddc:	fa21 f303 	lsr.w	r3, r1, r3
 8000de0:	4091      	lsls	r1, r2
 8000de2:	4301      	orrs	r1, r0
 8000de4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000de8:	fa1f fe8c 	uxth.w	lr, ip
 8000dec:	fbb3 f0f7 	udiv	r0, r3, r7
 8000df0:	fb07 3610 	mls	r6, r7, r0, r3
 8000df4:	0c0b      	lsrs	r3, r1, #16
 8000df6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000dfa:	fb00 f60e 	mul.w	r6, r0, lr
 8000dfe:	429e      	cmp	r6, r3
 8000e00:	fa04 f402 	lsl.w	r4, r4, r2
 8000e04:	d908      	bls.n	8000e18 <__udivmoddi4+0x260>
 8000e06:	eb1c 0303 	adds.w	r3, ip, r3
 8000e0a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e0e:	d22f      	bcs.n	8000e70 <__udivmoddi4+0x2b8>
 8000e10:	429e      	cmp	r6, r3
 8000e12:	d92d      	bls.n	8000e70 <__udivmoddi4+0x2b8>
 8000e14:	3802      	subs	r0, #2
 8000e16:	4463      	add	r3, ip
 8000e18:	1b9b      	subs	r3, r3, r6
 8000e1a:	b289      	uxth	r1, r1
 8000e1c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e20:	fb07 3316 	mls	r3, r7, r6, r3
 8000e24:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e28:	fb06 f30e 	mul.w	r3, r6, lr
 8000e2c:	428b      	cmp	r3, r1
 8000e2e:	d908      	bls.n	8000e42 <__udivmoddi4+0x28a>
 8000e30:	eb1c 0101 	adds.w	r1, ip, r1
 8000e34:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e38:	d216      	bcs.n	8000e68 <__udivmoddi4+0x2b0>
 8000e3a:	428b      	cmp	r3, r1
 8000e3c:	d914      	bls.n	8000e68 <__udivmoddi4+0x2b0>
 8000e3e:	3e02      	subs	r6, #2
 8000e40:	4461      	add	r1, ip
 8000e42:	1ac9      	subs	r1, r1, r3
 8000e44:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e48:	e738      	b.n	8000cbc <__udivmoddi4+0x104>
 8000e4a:	462e      	mov	r6, r5
 8000e4c:	4628      	mov	r0, r5
 8000e4e:	e705      	b.n	8000c5c <__udivmoddi4+0xa4>
 8000e50:	4606      	mov	r6, r0
 8000e52:	e6e3      	b.n	8000c1c <__udivmoddi4+0x64>
 8000e54:	4618      	mov	r0, r3
 8000e56:	e6f8      	b.n	8000c4a <__udivmoddi4+0x92>
 8000e58:	454b      	cmp	r3, r9
 8000e5a:	d2a9      	bcs.n	8000db0 <__udivmoddi4+0x1f8>
 8000e5c:	ebb9 0802 	subs.w	r8, r9, r2
 8000e60:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e64:	3801      	subs	r0, #1
 8000e66:	e7a3      	b.n	8000db0 <__udivmoddi4+0x1f8>
 8000e68:	4646      	mov	r6, r8
 8000e6a:	e7ea      	b.n	8000e42 <__udivmoddi4+0x28a>
 8000e6c:	4620      	mov	r0, r4
 8000e6e:	e794      	b.n	8000d9a <__udivmoddi4+0x1e2>
 8000e70:	4640      	mov	r0, r8
 8000e72:	e7d1      	b.n	8000e18 <__udivmoddi4+0x260>
 8000e74:	46d0      	mov	r8, sl
 8000e76:	e77b      	b.n	8000d70 <__udivmoddi4+0x1b8>
 8000e78:	3b02      	subs	r3, #2
 8000e7a:	4461      	add	r1, ip
 8000e7c:	e732      	b.n	8000ce4 <__udivmoddi4+0x12c>
 8000e7e:	4630      	mov	r0, r6
 8000e80:	e709      	b.n	8000c96 <__udivmoddi4+0xde>
 8000e82:	4464      	add	r4, ip
 8000e84:	3802      	subs	r0, #2
 8000e86:	e742      	b.n	8000d0e <__udivmoddi4+0x156>

08000e88 <__aeabi_idiv0>:
 8000e88:	4770      	bx	lr
 8000e8a:	bf00      	nop

08000e8c <__aeabi_d2uiz>:
 8000e8c:	004a      	lsls	r2, r1, #1
 8000e8e:	d211      	bcs.n	8000eb4 <__aeabi_d2uiz+0x28>
 8000e90:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000e94:	d211      	bcs.n	8000eba <__aeabi_d2uiz+0x2e>
 8000e96:	d50d      	bpl.n	8000eb4 <__aeabi_d2uiz+0x28>
 8000e98:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000e9c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ea0:	d40e      	bmi.n	8000ec0 <__aeabi_d2uiz+0x34>
 8000ea2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ea6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000eaa:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000eae:	fa23 f002 	lsr.w	r0, r3, r2
 8000eb2:	4770      	bx	lr
 8000eb4:	f04f 0000 	mov.w	r0, #0
 8000eb8:	4770      	bx	lr
 8000eba:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ebe:	d102      	bne.n	8000ec6 <__aeabi_d2uiz+0x3a>
 8000ec0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ec4:	4770      	bx	lr
 8000ec6:	f04f 0000 	mov.w	r0, #0
 8000eca:	4770      	bx	lr

08000ecc <at_set_command>:
		tx(buffer, length);
	}
	return length;
}

int at_set_command(char *buffer, transmit_t tx, char *cmd, const char* param_format, ...) {
 8000ecc:	b408      	push	{r3}
 8000ece:	b580      	push	{r7, lr}
 8000ed0:	b089      	sub	sp, #36	; 0x24
 8000ed2:	af00      	add	r7, sp, #0
 8000ed4:	60f8      	str	r0, [r7, #12]
 8000ed6:	60b9      	str	r1, [r7, #8]
 8000ed8:	607a      	str	r2, [r7, #4]
	va_list parameters;
	int length = 0;
 8000eda:	2300      	movs	r3, #0
 8000edc:	61fb      	str	r3, [r7, #28]
	int tmp = 0;
 8000ede:	2300      	movs	r3, #0
 8000ee0:	61bb      	str	r3, [r7, #24]
	if((tmp = sprintf_(buffer, "%s=", cmd)) < 0) {
 8000ee2:	687a      	ldr	r2, [r7, #4]
 8000ee4:	4924      	ldr	r1, [pc, #144]	; (8000f78 <at_set_command+0xac>)
 8000ee6:	68f8      	ldr	r0, [r7, #12]
 8000ee8:	f001 fc4e 	bl	8002788 <sprintf_>
 8000eec:	61b8      	str	r0, [r7, #24]
 8000eee:	69bb      	ldr	r3, [r7, #24]
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	da02      	bge.n	8000efa <at_set_command+0x2e>
		return AT_CMD_ERROR;
 8000ef4:	f04f 33ff 	mov.w	r3, #4294967295
 8000ef8:	e037      	b.n	8000f6a <at_set_command+0x9e>
	}
	length += tmp;
 8000efa:	69fa      	ldr	r2, [r7, #28]
 8000efc:	69bb      	ldr	r3, [r7, #24]
 8000efe:	4413      	add	r3, r2
 8000f00:	61fb      	str	r3, [r7, #28]
	tmp = 0;
 8000f02:	2300      	movs	r3, #0
 8000f04:	61bb      	str	r3, [r7, #24]
	va_start(parameters, param_format);
 8000f06:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000f0a:	617b      	str	r3, [r7, #20]
	if((tmp = vsprintf_(buffer+length, param_format, parameters)) < 0) {
 8000f0c:	69fb      	ldr	r3, [r7, #28]
 8000f0e:	68fa      	ldr	r2, [r7, #12]
 8000f10:	4413      	add	r3, r2
 8000f12:	697a      	ldr	r2, [r7, #20]
 8000f14:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8000f16:	4618      	mov	r0, r3
 8000f18:	f001 fc24 	bl	8002764 <vsprintf_>
 8000f1c:	61b8      	str	r0, [r7, #24]
 8000f1e:	69bb      	ldr	r3, [r7, #24]
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	da02      	bge.n	8000f2a <at_set_command+0x5e>
		return AT_CMD_ERROR;
 8000f24:	f04f 33ff 	mov.w	r3, #4294967295
 8000f28:	e01f      	b.n	8000f6a <at_set_command+0x9e>
	}
	va_end(parameters);
	length += tmp;
 8000f2a:	69fa      	ldr	r2, [r7, #28]
 8000f2c:	69bb      	ldr	r3, [r7, #24]
 8000f2e:	4413      	add	r3, r2
 8000f30:	61fb      	str	r3, [r7, #28]
	tmp = 0;
 8000f32:	2300      	movs	r3, #0
 8000f34:	61bb      	str	r3, [r7, #24]
	if((tmp = sprintf_(buffer+length, "\r\n")) < 0) {
 8000f36:	69fb      	ldr	r3, [r7, #28]
 8000f38:	68fa      	ldr	r2, [r7, #12]
 8000f3a:	4413      	add	r3, r2
 8000f3c:	490f      	ldr	r1, [pc, #60]	; (8000f7c <at_set_command+0xb0>)
 8000f3e:	4618      	mov	r0, r3
 8000f40:	f001 fc22 	bl	8002788 <sprintf_>
 8000f44:	61b8      	str	r0, [r7, #24]
 8000f46:	69bb      	ldr	r3, [r7, #24]
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	da02      	bge.n	8000f52 <at_set_command+0x86>
		return AT_CMD_ERROR;
 8000f4c:	f04f 33ff 	mov.w	r3, #4294967295
 8000f50:	e00b      	b.n	8000f6a <at_set_command+0x9e>
	}
	length += tmp;
 8000f52:	69fa      	ldr	r2, [r7, #28]
 8000f54:	69bb      	ldr	r3, [r7, #24]
 8000f56:	4413      	add	r3, r2
 8000f58:	61fb      	str	r3, [r7, #28]
	if(tx != NULL) {
 8000f5a:	68bb      	ldr	r3, [r7, #8]
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d003      	beq.n	8000f68 <at_set_command+0x9c>
		tx(buffer, length);
 8000f60:	68bb      	ldr	r3, [r7, #8]
 8000f62:	69f9      	ldr	r1, [r7, #28]
 8000f64:	68f8      	ldr	r0, [r7, #12]
 8000f66:	4798      	blx	r3
	}
	return length;
 8000f68:	69fb      	ldr	r3, [r7, #28]
}
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	3724      	adds	r7, #36	; 0x24
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000f74:	b001      	add	sp, #4
 8000f76:	4770      	bx	lr
 8000f78:	0800af78 	.word	0x0800af78
 8000f7c:	0800af7c 	.word	0x0800af7c

08000f80 <at_execute_command>:
	}
	return length;
}


int at_execute_command(char *buffer, transmit_t tx, char *cmd) {
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b086      	sub	sp, #24
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	60f8      	str	r0, [r7, #12]
 8000f88:	60b9      	str	r1, [r7, #8]
 8000f8a:	607a      	str	r2, [r7, #4]
	int length;
	if((length = sprintf_(buffer, "%s\r\n", cmd)) < 0) {
 8000f8c:	687a      	ldr	r2, [r7, #4]
 8000f8e:	490b      	ldr	r1, [pc, #44]	; (8000fbc <at_execute_command+0x3c>)
 8000f90:	68f8      	ldr	r0, [r7, #12]
 8000f92:	f001 fbf9 	bl	8002788 <sprintf_>
 8000f96:	6178      	str	r0, [r7, #20]
 8000f98:	697b      	ldr	r3, [r7, #20]
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	da02      	bge.n	8000fa4 <at_execute_command+0x24>
		return AT_CMD_ERROR;
 8000f9e:	f04f 33ff 	mov.w	r3, #4294967295
 8000fa2:	e007      	b.n	8000fb4 <at_execute_command+0x34>
	}
	if(tx != NULL) {
 8000fa4:	68bb      	ldr	r3, [r7, #8]
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d003      	beq.n	8000fb2 <at_execute_command+0x32>
		tx(buffer, length);
 8000faa:	68bb      	ldr	r3, [r7, #8]
 8000fac:	6979      	ldr	r1, [r7, #20]
 8000fae:	68f8      	ldr	r0, [r7, #12]
 8000fb0:	4798      	blx	r3
	}
	return length;
 8000fb2:	697b      	ldr	r3, [r7, #20]
}
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	3718      	adds	r7, #24
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	bd80      	pop	{r7, pc}
 8000fbc:	0800af80 	.word	0x0800af80

08000fc0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b082      	sub	sp, #8
 8000fc4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000fc6:	4b0c      	ldr	r3, [pc, #48]	; (8000ff8 <MX_DMA_Init+0x38>)
 8000fc8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000fca:	4a0b      	ldr	r2, [pc, #44]	; (8000ff8 <MX_DMA_Init+0x38>)
 8000fcc:	f043 0301 	orr.w	r3, r3, #1
 8000fd0:	6493      	str	r3, [r2, #72]	; 0x48
 8000fd2:	4b09      	ldr	r3, [pc, #36]	; (8000ff8 <MX_DMA_Init+0x38>)
 8000fd4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000fd6:	f003 0301 	and.w	r3, r3, #1
 8000fda:	607b      	str	r3, [r7, #4]
 8000fdc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 5, 0);
 8000fde:	2200      	movs	r2, #0
 8000fe0:	2105      	movs	r1, #5
 8000fe2:	200f      	movs	r0, #15
 8000fe4:	f002 fa0e 	bl	8003404 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8000fe8:	200f      	movs	r0, #15
 8000fea:	f002 fa27 	bl	800343c <HAL_NVIC_EnableIRQ>

}
 8000fee:	bf00      	nop
 8000ff0:	3708      	adds	r7, #8
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	bd80      	pop	{r7, pc}
 8000ff6:	bf00      	nop
 8000ff8:	40021000 	.word	0x40021000

08000ffc <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	af00      	add	r7, sp, #0
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of reportDataQueue */
  reportDataQueueHandle = osMessageQueueNew (64, sizeof(uint16_t), &reportDataQueue_attributes);
 8001000:	4a08      	ldr	r2, [pc, #32]	; (8001024 <MX_FREERTOS_Init+0x28>)
 8001002:	2102      	movs	r1, #2
 8001004:	2040      	movs	r0, #64	; 0x40
 8001006:	f006 fbc7 	bl	8007798 <osMessageQueueNew>
 800100a:	4603      	mov	r3, r0
 800100c:	4a06      	ldr	r2, [pc, #24]	; (8001028 <MX_FREERTOS_Init+0x2c>)
 800100e:	6013      	str	r3, [r2, #0]

  /* creation of sendDataTask */
  //sendDataTaskHandle = osThreadNew(startSendDataTask, NULL, &sendDataTask_attributes);

  /* creation of startWifiClickT */
  startWifiClickTHandle = osThreadNew(_startWifiClickTask, NULL, &startWifiClickT_attributes);
 8001010:	4a06      	ldr	r2, [pc, #24]	; (800102c <MX_FREERTOS_Init+0x30>)
 8001012:	2100      	movs	r1, #0
 8001014:	4806      	ldr	r0, [pc, #24]	; (8001030 <MX_FREERTOS_Init+0x34>)
 8001016:	f006 fb0b 	bl	8007630 <osThreadNew>
 800101a:	4603      	mov	r3, r0
 800101c:	4a05      	ldr	r2, [pc, #20]	; (8001034 <MX_FREERTOS_Init+0x38>)
 800101e:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8001020:	bf00      	nop
 8001022:	bd80      	pop	{r7, pc}
 8001024:	0800b0e0 	.word	0x0800b0e0
 8001028:	2000009c 	.word	0x2000009c
 800102c:	0800b0bc 	.word	0x0800b0bc
 8001030:	08001039 	.word	0x08001039
 8001034:	20000098 	.word	0x20000098

08001038 <_startWifiClickTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header__startWifiClickTask */
void _startWifiClickTask(void *argument)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b082      	sub	sp, #8
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN _startWifiClickTask */
	StartWifiClick(argument);
 8001040:	6878      	ldr	r0, [r7, #4]
 8001042:	f001 ff4f 	bl	8002ee4 <StartWifiClick>
	osThreadExit();
 8001046:	f006 fb86 	bl	8007756 <osThreadExit>
	...

0800104c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800104c:	b480      	push	{r7}
 800104e:	b085      	sub	sp, #20
 8001050:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001052:	4b15      	ldr	r3, [pc, #84]	; (80010a8 <MX_GPIO_Init+0x5c>)
 8001054:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001056:	4a14      	ldr	r2, [pc, #80]	; (80010a8 <MX_GPIO_Init+0x5c>)
 8001058:	f043 0304 	orr.w	r3, r3, #4
 800105c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800105e:	4b12      	ldr	r3, [pc, #72]	; (80010a8 <MX_GPIO_Init+0x5c>)
 8001060:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001062:	f003 0304 	and.w	r3, r3, #4
 8001066:	60fb      	str	r3, [r7, #12]
 8001068:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800106a:	4b0f      	ldr	r3, [pc, #60]	; (80010a8 <MX_GPIO_Init+0x5c>)
 800106c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800106e:	4a0e      	ldr	r2, [pc, #56]	; (80010a8 <MX_GPIO_Init+0x5c>)
 8001070:	f043 0301 	orr.w	r3, r3, #1
 8001074:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001076:	4b0c      	ldr	r3, [pc, #48]	; (80010a8 <MX_GPIO_Init+0x5c>)
 8001078:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800107a:	f003 0301 	and.w	r3, r3, #1
 800107e:	60bb      	str	r3, [r7, #8]
 8001080:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001082:	4b09      	ldr	r3, [pc, #36]	; (80010a8 <MX_GPIO_Init+0x5c>)
 8001084:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001086:	4a08      	ldr	r2, [pc, #32]	; (80010a8 <MX_GPIO_Init+0x5c>)
 8001088:	f043 0302 	orr.w	r3, r3, #2
 800108c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800108e:	4b06      	ldr	r3, [pc, #24]	; (80010a8 <MX_GPIO_Init+0x5c>)
 8001090:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001092:	f003 0302 	and.w	r3, r3, #2
 8001096:	607b      	str	r3, [r7, #4]
 8001098:	687b      	ldr	r3, [r7, #4]

}
 800109a:	bf00      	nop
 800109c:	3714      	adds	r7, #20
 800109e:	46bd      	mov	sp, r7
 80010a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a4:	4770      	bx	lr
 80010a6:	bf00      	nop
 80010a8:	40021000 	.word	0x40021000

080010ac <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80010b0:	4b1b      	ldr	r3, [pc, #108]	; (8001120 <MX_I2C1_Init+0x74>)
 80010b2:	4a1c      	ldr	r2, [pc, #112]	; (8001124 <MX_I2C1_Init+0x78>)
 80010b4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00702681;
 80010b6:	4b1a      	ldr	r3, [pc, #104]	; (8001120 <MX_I2C1_Init+0x74>)
 80010b8:	4a1b      	ldr	r2, [pc, #108]	; (8001128 <MX_I2C1_Init+0x7c>)
 80010ba:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80010bc:	4b18      	ldr	r3, [pc, #96]	; (8001120 <MX_I2C1_Init+0x74>)
 80010be:	2200      	movs	r2, #0
 80010c0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80010c2:	4b17      	ldr	r3, [pc, #92]	; (8001120 <MX_I2C1_Init+0x74>)
 80010c4:	2201      	movs	r2, #1
 80010c6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80010c8:	4b15      	ldr	r3, [pc, #84]	; (8001120 <MX_I2C1_Init+0x74>)
 80010ca:	2200      	movs	r2, #0
 80010cc:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80010ce:	4b14      	ldr	r3, [pc, #80]	; (8001120 <MX_I2C1_Init+0x74>)
 80010d0:	2200      	movs	r2, #0
 80010d2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80010d4:	4b12      	ldr	r3, [pc, #72]	; (8001120 <MX_I2C1_Init+0x74>)
 80010d6:	2200      	movs	r2, #0
 80010d8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80010da:	4b11      	ldr	r3, [pc, #68]	; (8001120 <MX_I2C1_Init+0x74>)
 80010dc:	2200      	movs	r2, #0
 80010de:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80010e0:	4b0f      	ldr	r3, [pc, #60]	; (8001120 <MX_I2C1_Init+0x74>)
 80010e2:	2200      	movs	r2, #0
 80010e4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80010e6:	480e      	ldr	r0, [pc, #56]	; (8001120 <MX_I2C1_Init+0x74>)
 80010e8:	f002 fd96 	bl	8003c18 <HAL_I2C_Init>
 80010ec:	4603      	mov	r3, r0
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d001      	beq.n	80010f6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80010f2:	f000 f8ff 	bl	80012f4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80010f6:	2100      	movs	r1, #0
 80010f8:	4809      	ldr	r0, [pc, #36]	; (8001120 <MX_I2C1_Init+0x74>)
 80010fa:	f002 fe1c 	bl	8003d36 <HAL_I2CEx_ConfigAnalogFilter>
 80010fe:	4603      	mov	r3, r0
 8001100:	2b00      	cmp	r3, #0
 8001102:	d001      	beq.n	8001108 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001104:	f000 f8f6 	bl	80012f4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001108:	2100      	movs	r1, #0
 800110a:	4805      	ldr	r0, [pc, #20]	; (8001120 <MX_I2C1_Init+0x74>)
 800110c:	f002 fe5e 	bl	8003dcc <HAL_I2CEx_ConfigDigitalFilter>
 8001110:	4603      	mov	r3, r0
 8001112:	2b00      	cmp	r3, #0
 8001114:	d001      	beq.n	800111a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001116:	f000 f8ed 	bl	80012f4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800111a:	bf00      	nop
 800111c:	bd80      	pop	{r7, pc}
 800111e:	bf00      	nop
 8001120:	200000a0 	.word	0x200000a0
 8001124:	40005400 	.word	0x40005400
 8001128:	00702681 	.word	0x00702681

0800112c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b09e      	sub	sp, #120	; 0x78
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001134:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001138:	2200      	movs	r2, #0
 800113a:	601a      	str	r2, [r3, #0]
 800113c:	605a      	str	r2, [r3, #4]
 800113e:	609a      	str	r2, [r3, #8]
 8001140:	60da      	str	r2, [r3, #12]
 8001142:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001144:	f107 0310 	add.w	r3, r7, #16
 8001148:	2254      	movs	r2, #84	; 0x54
 800114a:	2100      	movs	r1, #0
 800114c:	4618      	mov	r0, r3
 800114e:	f009 fb3e 	bl	800a7ce <memset>
  if(i2cHandle->Instance==I2C1)
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	4a1e      	ldr	r2, [pc, #120]	; (80011d0 <HAL_I2C_MspInit+0xa4>)
 8001158:	4293      	cmp	r3, r2
 800115a:	d135      	bne.n	80011c8 <HAL_I2C_MspInit+0x9c>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800115c:	2340      	movs	r3, #64	; 0x40
 800115e:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001160:	2300      	movs	r3, #0
 8001162:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001164:	f107 0310 	add.w	r3, r7, #16
 8001168:	4618      	mov	r0, r3
 800116a:	f003 fd59 	bl	8004c20 <HAL_RCCEx_PeriphCLKConfig>
 800116e:	4603      	mov	r3, r0
 8001170:	2b00      	cmp	r3, #0
 8001172:	d001      	beq.n	8001178 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001174:	f000 f8be 	bl	80012f4 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001178:	4b16      	ldr	r3, [pc, #88]	; (80011d4 <HAL_I2C_MspInit+0xa8>)
 800117a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800117c:	4a15      	ldr	r2, [pc, #84]	; (80011d4 <HAL_I2C_MspInit+0xa8>)
 800117e:	f043 0302 	orr.w	r3, r3, #2
 8001182:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001184:	4b13      	ldr	r3, [pc, #76]	; (80011d4 <HAL_I2C_MspInit+0xa8>)
 8001186:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001188:	f003 0302 	and.w	r3, r3, #2
 800118c:	60fb      	str	r3, [r7, #12]
 800118e:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001190:	23c0      	movs	r3, #192	; 0xc0
 8001192:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001194:	2312      	movs	r3, #18
 8001196:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001198:	2300      	movs	r3, #0
 800119a:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800119c:	2303      	movs	r3, #3
 800119e:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80011a0:	2304      	movs	r3, #4
 80011a2:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011a4:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80011a8:	4619      	mov	r1, r3
 80011aa:	480b      	ldr	r0, [pc, #44]	; (80011d8 <HAL_I2C_MspInit+0xac>)
 80011ac:	f002 fbca 	bl	8003944 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80011b0:	4b08      	ldr	r3, [pc, #32]	; (80011d4 <HAL_I2C_MspInit+0xa8>)
 80011b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011b4:	4a07      	ldr	r2, [pc, #28]	; (80011d4 <HAL_I2C_MspInit+0xa8>)
 80011b6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80011ba:	6593      	str	r3, [r2, #88]	; 0x58
 80011bc:	4b05      	ldr	r3, [pc, #20]	; (80011d4 <HAL_I2C_MspInit+0xa8>)
 80011be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011c0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80011c4:	60bb      	str	r3, [r7, #8]
 80011c6:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80011c8:	bf00      	nop
 80011ca:	3778      	adds	r7, #120	; 0x78
 80011cc:	46bd      	mov	sp, r7
 80011ce:	bd80      	pop	{r7, pc}
 80011d0:	40005400 	.word	0x40005400
 80011d4:	40021000 	.word	0x40021000
 80011d8:	48000400 	.word	0x48000400

080011dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80011e0:	f002 f81f 	bl	8003222 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80011e4:	f000 f812 	bl	800120c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80011e8:	f7ff ff30 	bl	800104c <MX_GPIO_Init>
  MX_DMA_Init();
 80011ec:	f7ff fee8 	bl	8000fc0 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80011f0:	f001 fd3e 	bl	8002c70 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80011f4:	f7ff ff5a 	bl	80010ac <MX_I2C1_Init>
  MX_USART1_UART_Init();
 80011f8:	f001 fd0a 	bl	8002c10 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 80011fc:	f006 f9ce 	bl	800759c <osKernelInitialize>
  MX_FREERTOS_Init();
 8001200:	f7ff fefc 	bl	8000ffc <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8001204:	f006 f9ee 	bl	80075e4 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001208:	e7fe      	b.n	8001208 <main+0x2c>
	...

0800120c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b096      	sub	sp, #88	; 0x58
 8001210:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001212:	f107 0314 	add.w	r3, r7, #20
 8001216:	2244      	movs	r2, #68	; 0x44
 8001218:	2100      	movs	r1, #0
 800121a:	4618      	mov	r0, r3
 800121c:	f009 fad7 	bl	800a7ce <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001220:	463b      	mov	r3, r7
 8001222:	2200      	movs	r2, #0
 8001224:	601a      	str	r2, [r3, #0]
 8001226:	605a      	str	r2, [r3, #4]
 8001228:	609a      	str	r2, [r3, #8]
 800122a:	60da      	str	r2, [r3, #12]
 800122c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800122e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001232:	f002 fe35 	bl	8003ea0 <HAL_PWREx_ControlVoltageScaling>
 8001236:	4603      	mov	r3, r0
 8001238:	2b00      	cmp	r3, #0
 800123a:	d001      	beq.n	8001240 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800123c:	f000 f85a 	bl	80012f4 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001240:	f002 fe10 	bl	8003e64 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001244:	4b21      	ldr	r3, [pc, #132]	; (80012cc <SystemClock_Config+0xc0>)
 8001246:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800124a:	4a20      	ldr	r2, [pc, #128]	; (80012cc <SystemClock_Config+0xc0>)
 800124c:	f023 0318 	bic.w	r3, r3, #24
 8001250:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8001254:	2314      	movs	r3, #20
 8001256:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001258:	2301      	movs	r3, #1
 800125a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800125c:	2301      	movs	r3, #1
 800125e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001260:	2300      	movs	r3, #0
 8001262:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001264:	2360      	movs	r3, #96	; 0x60
 8001266:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001268:	2302      	movs	r3, #2
 800126a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 800126c:	2301      	movs	r3, #1
 800126e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001270:	2301      	movs	r3, #1
 8001272:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 36;
 8001274:	2324      	movs	r3, #36	; 0x24
 8001276:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001278:	2307      	movs	r3, #7
 800127a:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800127c:	2302      	movs	r3, #2
 800127e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001280:	2302      	movs	r3, #2
 8001282:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001284:	f107 0314 	add.w	r3, r7, #20
 8001288:	4618      	mov	r0, r3
 800128a:	f002 fe5f 	bl	8003f4c <HAL_RCC_OscConfig>
 800128e:	4603      	mov	r3, r0
 8001290:	2b00      	cmp	r3, #0
 8001292:	d001      	beq.n	8001298 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8001294:	f000 f82e 	bl	80012f4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001298:	230f      	movs	r3, #15
 800129a:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800129c:	2303      	movs	r3, #3
 800129e:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012a0:	2300      	movs	r3, #0
 80012a2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80012a4:	2300      	movs	r3, #0
 80012a6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80012a8:	2300      	movs	r3, #0
 80012aa:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80012ac:	463b      	mov	r3, r7
 80012ae:	2104      	movs	r1, #4
 80012b0:	4618      	mov	r0, r3
 80012b2:	f003 fa5f 	bl	8004774 <HAL_RCC_ClockConfig>
 80012b6:	4603      	mov	r3, r0
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d001      	beq.n	80012c0 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80012bc:	f000 f81a 	bl	80012f4 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 80012c0:	f003 fea4 	bl	800500c <HAL_RCCEx_EnableMSIPLLMode>
}
 80012c4:	bf00      	nop
 80012c6:	3758      	adds	r7, #88	; 0x58
 80012c8:	46bd      	mov	sp, r7
 80012ca:	bd80      	pop	{r7, pc}
 80012cc:	40021000 	.word	0x40021000

080012d0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b082      	sub	sp, #8
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM16) {
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	4a04      	ldr	r2, [pc, #16]	; (80012f0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80012de:	4293      	cmp	r3, r2
 80012e0:	d101      	bne.n	80012e6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80012e2:	f001 ffb7 	bl	8003254 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80012e6:	bf00      	nop
 80012e8:	3708      	adds	r7, #8
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bd80      	pop	{r7, pc}
 80012ee:	bf00      	nop
 80012f0:	40014400 	.word	0x40014400

080012f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012f4:	b480      	push	{r7}
 80012f6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012f8:	b672      	cpsid	i
}
 80012fa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80012fc:	e7fe      	b.n	80012fc <Error_Handler+0x8>

080012fe <get_bit_access>:
// but:
// 1. Some compilers are finicky about this;
// 2. Some people may want to convert this to C89;
// 3. If you try to use it as C++, only C++20 supports compound literals
static inline double_with_bit_access get_bit_access(double x)
{
 80012fe:	b480      	push	{r7}
 8001300:	b087      	sub	sp, #28
 8001302:	af00      	add	r7, sp, #0
 8001304:	60f8      	str	r0, [r7, #12]
 8001306:	e9c7 2300 	strd	r2, r3, [r7]
  double_with_bit_access dwba;
  dwba.F = x;
 800130a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800130e:	e9c7 2304 	strd	r2, r3, [r7, #16]
  return dwba;
 8001312:	68f9      	ldr	r1, [r7, #12]
 8001314:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001318:	e9c1 2300 	strd	r2, r3, [r1]
}
 800131c:	68f8      	ldr	r0, [r7, #12]
 800131e:	371c      	adds	r7, #28
 8001320:	46bd      	mov	sp, r7
 8001322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001326:	4770      	bx	lr

08001328 <get_sign_bit>:

static inline int get_sign_bit(double x)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b084      	sub	sp, #16
 800132c:	af00      	add	r7, sp, #0
 800132e:	e9c7 0100 	strd	r0, r1, [r7]
  // The sign is stored in the highest bit
  return (int) (get_bit_access(x).U >> (DOUBLE_SIZE_IN_BITS - 1));
 8001332:	f107 0108 	add.w	r1, r7, #8
 8001336:	e9d7 2300 	ldrd	r2, r3, [r7]
 800133a:	4608      	mov	r0, r1
 800133c:	f7ff ffdf 	bl	80012fe <get_bit_access>
 8001340:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001344:	f04f 0200 	mov.w	r2, #0
 8001348:	f04f 0300 	mov.w	r3, #0
 800134c:	0fca      	lsrs	r2, r1, #31
 800134e:	2300      	movs	r3, #0
 8001350:	4613      	mov	r3, r2
}
 8001352:	4618      	mov	r0, r3
 8001354:	3710      	adds	r7, #16
 8001356:	46bd      	mov	sp, r7
 8001358:	bd80      	pop	{r7, pc}

0800135a <putchar_via_gadget>:
// Note: This function currently assumes it is not passed a '\0' c,
// or alternatively, that '\0' can be passed to the function in the output
// gadget. The former assumption holds within the printf library. It also
// assumes that the output gadget has been properly initialized.
static inline void putchar_via_gadget(output_gadget_t* gadget, char c)
{
 800135a:	b580      	push	{r7, lr}
 800135c:	b084      	sub	sp, #16
 800135e:	af00      	add	r7, sp, #0
 8001360:	6078      	str	r0, [r7, #4]
 8001362:	460b      	mov	r3, r1
 8001364:	70fb      	strb	r3, [r7, #3]
  printf_size_t write_pos = gadget->pos++;
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	68db      	ldr	r3, [r3, #12]
 800136a:	1c59      	adds	r1, r3, #1
 800136c:	687a      	ldr	r2, [r7, #4]
 800136e:	60d1      	str	r1, [r2, #12]
 8001370:	60fb      	str	r3, [r7, #12]
    // We're _always_ increasing pos, so as to count how may characters
    // _would_ have been written if not for the max_chars limitation
  if (write_pos >= gadget->max_chars) {
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	691b      	ldr	r3, [r3, #16]
 8001376:	68fa      	ldr	r2, [r7, #12]
 8001378:	429a      	cmp	r2, r3
 800137a:	d212      	bcs.n	80013a2 <putchar_via_gadget+0x48>
    return;
  }
  if (gadget->function != NULL) {
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	2b00      	cmp	r3, #0
 8001382:	d007      	beq.n	8001394 <putchar_via_gadget+0x3a>
    // No check for c == '\0' .
    gadget->function(c, gadget->extra_function_arg);
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	687a      	ldr	r2, [r7, #4]
 800138a:	6851      	ldr	r1, [r2, #4]
 800138c:	78fa      	ldrb	r2, [r7, #3]
 800138e:	4610      	mov	r0, r2
 8001390:	4798      	blx	r3
 8001392:	e007      	b.n	80013a4 <putchar_via_gadget+0x4a>
  }
  else {
    // it must be the case that gadget->buffer != NULL , due to the constraint
    // on output_gadget_t ; and note we're relying on write_pos being non-negative.
    gadget->buffer[write_pos] = c;
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	689a      	ldr	r2, [r3, #8]
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	4413      	add	r3, r2
 800139c:	78fa      	ldrb	r2, [r7, #3]
 800139e:	701a      	strb	r2, [r3, #0]
 80013a0:	e000      	b.n	80013a4 <putchar_via_gadget+0x4a>
    return;
 80013a2:	bf00      	nop
  }
}
 80013a4:	3710      	adds	r7, #16
 80013a6:	46bd      	mov	sp, r7
 80013a8:	bd80      	pop	{r7, pc}

080013aa <append_termination_with_gadget>:

// Possibly-write the string-terminating '\0' character
static inline void append_termination_with_gadget(output_gadget_t* gadget)
{
 80013aa:	b480      	push	{r7}
 80013ac:	b085      	sub	sp, #20
 80013ae:	af00      	add	r7, sp, #0
 80013b0:	6078      	str	r0, [r7, #4]
  if (gadget->function != NULL || gadget->max_chars == 0) {
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d11b      	bne.n	80013f2 <append_termination_with_gadget+0x48>
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	691b      	ldr	r3, [r3, #16]
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d017      	beq.n	80013f2 <append_termination_with_gadget+0x48>
    return;
  }
  if (gadget->buffer == NULL) {
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	689b      	ldr	r3, [r3, #8]
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d015      	beq.n	80013f6 <append_termination_with_gadget+0x4c>
    return;
  }
  printf_size_t null_char_pos = gadget->pos < gadget->max_chars ? gadget->pos : gadget->max_chars - 1;
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	68da      	ldr	r2, [r3, #12]
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	691b      	ldr	r3, [r3, #16]
 80013d2:	429a      	cmp	r2, r3
 80013d4:	d202      	bcs.n	80013dc <append_termination_with_gadget+0x32>
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	68db      	ldr	r3, [r3, #12]
 80013da:	e002      	b.n	80013e2 <append_termination_with_gadget+0x38>
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	691b      	ldr	r3, [r3, #16]
 80013e0:	3b01      	subs	r3, #1
 80013e2:	60fb      	str	r3, [r7, #12]
  gadget->buffer[null_char_pos] = '\0';
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	689a      	ldr	r2, [r3, #8]
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	4413      	add	r3, r2
 80013ec:	2200      	movs	r2, #0
 80013ee:	701a      	strb	r2, [r3, #0]
 80013f0:	e002      	b.n	80013f8 <append_termination_with_gadget+0x4e>
    return;
 80013f2:	bf00      	nop
 80013f4:	e000      	b.n	80013f8 <append_termination_with_gadget+0x4e>
    return;
 80013f6:	bf00      	nop
}
 80013f8:	3714      	adds	r7, #20
 80013fa:	46bd      	mov	sp, r7
 80013fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001400:	4770      	bx	lr

08001402 <discarding_gadget>:
  (void) unused;
  putchar_(c);
}

static inline output_gadget_t discarding_gadget(void)
{
 8001402:	b4b0      	push	{r4, r5, r7}
 8001404:	b089      	sub	sp, #36	; 0x24
 8001406:	af00      	add	r7, sp, #0
 8001408:	6078      	str	r0, [r7, #4]
  output_gadget_t gadget;
  gadget.function = NULL;
 800140a:	2300      	movs	r3, #0
 800140c:	60fb      	str	r3, [r7, #12]
  gadget.extra_function_arg = NULL;
 800140e:	2300      	movs	r3, #0
 8001410:	613b      	str	r3, [r7, #16]
  gadget.buffer = NULL;
 8001412:	2300      	movs	r3, #0
 8001414:	617b      	str	r3, [r7, #20]
  gadget.pos = 0;
 8001416:	2300      	movs	r3, #0
 8001418:	61bb      	str	r3, [r7, #24]
  gadget.max_chars = 0;
 800141a:	2300      	movs	r3, #0
 800141c:	61fb      	str	r3, [r7, #28]
  return gadget;
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	461d      	mov	r5, r3
 8001422:	f107 040c 	add.w	r4, r7, #12
 8001426:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001428:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800142a:	6823      	ldr	r3, [r4, #0]
 800142c:	602b      	str	r3, [r5, #0]
}
 800142e:	6878      	ldr	r0, [r7, #4]
 8001430:	3724      	adds	r7, #36	; 0x24
 8001432:	46bd      	mov	sp, r7
 8001434:	bcb0      	pop	{r4, r5, r7}
 8001436:	4770      	bx	lr

08001438 <buffer_gadget>:

static inline output_gadget_t buffer_gadget(char* buffer, size_t buffer_size)
{
 8001438:	b5b0      	push	{r4, r5, r7, lr}
 800143a:	b08a      	sub	sp, #40	; 0x28
 800143c:	af00      	add	r7, sp, #0
 800143e:	60f8      	str	r0, [r7, #12]
 8001440:	60b9      	str	r1, [r7, #8]
 8001442:	607a      	str	r2, [r7, #4]
  printf_size_t usable_buffer_size = (buffer_size > PRINTF_MAX_POSSIBLE_BUFFER_SIZE) ?
 8001444:	687b      	ldr	r3, [r7, #4]
    PRINTF_MAX_POSSIBLE_BUFFER_SIZE : (printf_size_t) buffer_size;
 8001446:	2b00      	cmp	r3, #0
 8001448:	db01      	blt.n	800144e <buffer_gadget+0x16>
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	e001      	b.n	8001452 <buffer_gadget+0x1a>
 800144e:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
  printf_size_t usable_buffer_size = (buffer_size > PRINTF_MAX_POSSIBLE_BUFFER_SIZE) ?
 8001452:	627b      	str	r3, [r7, #36]	; 0x24
  output_gadget_t result = discarding_gadget();
 8001454:	f107 0310 	add.w	r3, r7, #16
 8001458:	4618      	mov	r0, r3
 800145a:	f7ff ffd2 	bl	8001402 <discarding_gadget>
  if (buffer != NULL) {
 800145e:	68bb      	ldr	r3, [r7, #8]
 8001460:	2b00      	cmp	r3, #0
 8001462:	d003      	beq.n	800146c <buffer_gadget+0x34>
    result.buffer = buffer;
 8001464:	68bb      	ldr	r3, [r7, #8]
 8001466:	61bb      	str	r3, [r7, #24]
    result.max_chars = usable_buffer_size;
 8001468:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800146a:	623b      	str	r3, [r7, #32]
  }
  return result;
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	461d      	mov	r5, r3
 8001470:	f107 0410 	add.w	r4, r7, #16
 8001474:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001476:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001478:	6823      	ldr	r3, [r4, #0]
 800147a:	602b      	str	r3, [r5, #0]
}
 800147c:	68f8      	ldr	r0, [r7, #12]
 800147e:	3728      	adds	r7, #40	; 0x28
 8001480:	46bd      	mov	sp, r7
 8001482:	bdb0      	pop	{r4, r5, r7, pc}

08001484 <strnlen_s_>:
// internal secure strlen
// @return The length of the string (excluding the terminating 0) limited by 'maxsize'
// @note strlen uses size_t, but wes only use this function with printf_size_t
// variables - hence the signature.
static inline printf_size_t strnlen_s_(const char* str, printf_size_t maxsize)
{
 8001484:	b480      	push	{r7}
 8001486:	b085      	sub	sp, #20
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
 800148c:	6039      	str	r1, [r7, #0]
  const char* s;
  for (s = str; *s && maxsize--; ++s);
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	60fb      	str	r3, [r7, #12]
 8001492:	e002      	b.n	800149a <strnlen_s_+0x16>
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	3301      	adds	r3, #1
 8001498:	60fb      	str	r3, [r7, #12]
 800149a:	68fb      	ldr	r3, [r7, #12]
 800149c:	781b      	ldrb	r3, [r3, #0]
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d004      	beq.n	80014ac <strnlen_s_+0x28>
 80014a2:	683b      	ldr	r3, [r7, #0]
 80014a4:	1e5a      	subs	r2, r3, #1
 80014a6:	603a      	str	r2, [r7, #0]
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d1f3      	bne.n	8001494 <strnlen_s_+0x10>
  return (printf_size_t)(s - str);
 80014ac:	68fa      	ldr	r2, [r7, #12]
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	1ad3      	subs	r3, r2, r3
}
 80014b2:	4618      	mov	r0, r3
 80014b4:	3714      	adds	r7, #20
 80014b6:	46bd      	mov	sp, r7
 80014b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014bc:	4770      	bx	lr

080014be <is_digit_>:


// internal test if char is a digit (0-9)
// @return true if char is a digit
static inline bool is_digit_(char ch)
{
 80014be:	b480      	push	{r7}
 80014c0:	b083      	sub	sp, #12
 80014c2:	af00      	add	r7, sp, #0
 80014c4:	4603      	mov	r3, r0
 80014c6:	71fb      	strb	r3, [r7, #7]
  return (ch >= '0') && (ch <= '9');
 80014c8:	79fb      	ldrb	r3, [r7, #7]
 80014ca:	2b2f      	cmp	r3, #47	; 0x2f
 80014cc:	d904      	bls.n	80014d8 <is_digit_+0x1a>
 80014ce:	79fb      	ldrb	r3, [r7, #7]
 80014d0:	2b39      	cmp	r3, #57	; 0x39
 80014d2:	d801      	bhi.n	80014d8 <is_digit_+0x1a>
 80014d4:	2301      	movs	r3, #1
 80014d6:	e000      	b.n	80014da <is_digit_+0x1c>
 80014d8:	2300      	movs	r3, #0
 80014da:	f003 0301 	and.w	r3, r3, #1
 80014de:	b2db      	uxtb	r3, r3
}
 80014e0:	4618      	mov	r0, r3
 80014e2:	370c      	adds	r7, #12
 80014e4:	46bd      	mov	sp, r7
 80014e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ea:	4770      	bx	lr

080014ec <atou_>:


// internal ASCII string to printf_size_t conversion
static printf_size_t atou_(const char** str)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b084      	sub	sp, #16
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]
  printf_size_t i = 0U;
 80014f4:	2300      	movs	r3, #0
 80014f6:	60fb      	str	r3, [r7, #12]
  while (is_digit_(**str)) {
 80014f8:	e00e      	b.n	8001518 <atou_+0x2c>
    i = i * 10U + (printf_size_t)(*((*str)++) - '0');
 80014fa:	68fa      	ldr	r2, [r7, #12]
 80014fc:	4613      	mov	r3, r2
 80014fe:	009b      	lsls	r3, r3, #2
 8001500:	4413      	add	r3, r2
 8001502:	005b      	lsls	r3, r3, #1
 8001504:	4618      	mov	r0, r3
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	1c59      	adds	r1, r3, #1
 800150c:	687a      	ldr	r2, [r7, #4]
 800150e:	6011      	str	r1, [r2, #0]
 8001510:	781b      	ldrb	r3, [r3, #0]
 8001512:	4403      	add	r3, r0
 8001514:	3b30      	subs	r3, #48	; 0x30
 8001516:	60fb      	str	r3, [r7, #12]
  while (is_digit_(**str)) {
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	781b      	ldrb	r3, [r3, #0]
 800151e:	4618      	mov	r0, r3
 8001520:	f7ff ffcd 	bl	80014be <is_digit_>
 8001524:	4603      	mov	r3, r0
 8001526:	2b00      	cmp	r3, #0
 8001528:	d1e7      	bne.n	80014fa <atou_+0xe>
  }
  return i;
 800152a:	68fb      	ldr	r3, [r7, #12]
}
 800152c:	4618      	mov	r0, r3
 800152e:	3710      	adds	r7, #16
 8001530:	46bd      	mov	sp, r7
 8001532:	bd80      	pop	{r7, pc}

08001534 <out_rev_>:


// output the specified string in reverse, taking care of any zero-padding
static void out_rev_(output_gadget_t* output, const char* buf, printf_size_t len, printf_size_t width, printf_flags_t flags)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	b086      	sub	sp, #24
 8001538:	af00      	add	r7, sp, #0
 800153a:	60f8      	str	r0, [r7, #12]
 800153c:	60b9      	str	r1, [r7, #8]
 800153e:	607a      	str	r2, [r7, #4]
 8001540:	603b      	str	r3, [r7, #0]
  const printf_size_t start_pos = output->pos;
 8001542:	68fb      	ldr	r3, [r7, #12]
 8001544:	68db      	ldr	r3, [r3, #12]
 8001546:	613b      	str	r3, [r7, #16]

  // pad spaces up to given width
  if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
 8001548:	6a3b      	ldr	r3, [r7, #32]
 800154a:	f003 0302 	and.w	r3, r3, #2
 800154e:	2b00      	cmp	r3, #0
 8001550:	d11e      	bne.n	8001590 <out_rev_+0x5c>
 8001552:	6a3b      	ldr	r3, [r7, #32]
 8001554:	f003 0301 	and.w	r3, r3, #1
 8001558:	2b00      	cmp	r3, #0
 800155a:	d119      	bne.n	8001590 <out_rev_+0x5c>
    for (printf_size_t i = len; i < width; i++) {
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	617b      	str	r3, [r7, #20]
 8001560:	e006      	b.n	8001570 <out_rev_+0x3c>
      putchar_via_gadget(output, ' ');
 8001562:	2120      	movs	r1, #32
 8001564:	68f8      	ldr	r0, [r7, #12]
 8001566:	f7ff fef8 	bl	800135a <putchar_via_gadget>
    for (printf_size_t i = len; i < width; i++) {
 800156a:	697b      	ldr	r3, [r7, #20]
 800156c:	3301      	adds	r3, #1
 800156e:	617b      	str	r3, [r7, #20]
 8001570:	697a      	ldr	r2, [r7, #20]
 8001572:	683b      	ldr	r3, [r7, #0]
 8001574:	429a      	cmp	r2, r3
 8001576:	d3f4      	bcc.n	8001562 <out_rev_+0x2e>
    }
  }

  // reverse string
  while (len) {
 8001578:	e00a      	b.n	8001590 <out_rev_+0x5c>
    putchar_via_gadget(output, buf[--len]);
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	3b01      	subs	r3, #1
 800157e:	607b      	str	r3, [r7, #4]
 8001580:	68ba      	ldr	r2, [r7, #8]
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	4413      	add	r3, r2
 8001586:	781b      	ldrb	r3, [r3, #0]
 8001588:	4619      	mov	r1, r3
 800158a:	68f8      	ldr	r0, [r7, #12]
 800158c:	f7ff fee5 	bl	800135a <putchar_via_gadget>
  while (len) {
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	2b00      	cmp	r3, #0
 8001594:	d1f1      	bne.n	800157a <out_rev_+0x46>
  }

  // append pad spaces up to given width
  if (flags & FLAGS_LEFT) {
 8001596:	6a3b      	ldr	r3, [r7, #32]
 8001598:	f003 0302 	and.w	r3, r3, #2
 800159c:	2b00      	cmp	r3, #0
 800159e:	d00b      	beq.n	80015b8 <out_rev_+0x84>
    while (output->pos - start_pos < width) {
 80015a0:	e003      	b.n	80015aa <out_rev_+0x76>
      putchar_via_gadget(output, ' ');
 80015a2:	2120      	movs	r1, #32
 80015a4:	68f8      	ldr	r0, [r7, #12]
 80015a6:	f7ff fed8 	bl	800135a <putchar_via_gadget>
    while (output->pos - start_pos < width) {
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	68da      	ldr	r2, [r3, #12]
 80015ae:	693b      	ldr	r3, [r7, #16]
 80015b0:	1ad3      	subs	r3, r2, r3
 80015b2:	683a      	ldr	r2, [r7, #0]
 80015b4:	429a      	cmp	r2, r3
 80015b6:	d8f4      	bhi.n	80015a2 <out_rev_+0x6e>
    }
  }
}
 80015b8:	bf00      	nop
 80015ba:	3718      	adds	r7, #24
 80015bc:	46bd      	mov	sp, r7
 80015be:	bd80      	pop	{r7, pc}

080015c0 <print_integer_finalization>:


// Invoked by print_integer after the actual number has been printed, performing necessary
// work on the number's prefix (as the number is initially printed in reverse order)
static void print_integer_finalization(output_gadget_t* output, char* buf, printf_size_t len, bool negative, numeric_base_t base, printf_size_t precision, printf_size_t width, printf_flags_t flags)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b088      	sub	sp, #32
 80015c4:	af02      	add	r7, sp, #8
 80015c6:	60f8      	str	r0, [r7, #12]
 80015c8:	60b9      	str	r1, [r7, #8]
 80015ca:	607a      	str	r2, [r7, #4]
 80015cc:	70fb      	strb	r3, [r7, #3]
  printf_size_t unpadded_len = len;
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	617b      	str	r3, [r7, #20]

  // pad with leading zeros
  {
    if (!(flags & FLAGS_LEFT)) {
 80015d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015d4:	f003 0302 	and.w	r3, r3, #2
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d12e      	bne.n	800163a <print_integer_finalization+0x7a>
      if (width && (flags & FLAGS_ZEROPAD) && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
 80015dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d017      	beq.n	8001612 <print_integer_finalization+0x52>
 80015e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015e4:	f003 0301 	and.w	r3, r3, #1
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d012      	beq.n	8001612 <print_integer_finalization+0x52>
 80015ec:	78fb      	ldrb	r3, [r7, #3]
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d104      	bne.n	80015fc <print_integer_finalization+0x3c>
 80015f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015f4:	f003 030c 	and.w	r3, r3, #12
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d00a      	beq.n	8001612 <print_integer_finalization+0x52>
        width--;
 80015fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015fe:	3b01      	subs	r3, #1
 8001600:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_INTEGER_BUFFER_SIZE)) {
 8001602:	e006      	b.n	8001612 <print_integer_finalization+0x52>
        buf[len++] = '0';
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	1c5a      	adds	r2, r3, #1
 8001608:	607a      	str	r2, [r7, #4]
 800160a:	68ba      	ldr	r2, [r7, #8]
 800160c:	4413      	add	r3, r2
 800160e:	2230      	movs	r2, #48	; 0x30
 8001610:	701a      	strb	r2, [r3, #0]
      while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_INTEGER_BUFFER_SIZE)) {
 8001612:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001614:	f003 0301 	and.w	r3, r3, #1
 8001618:	2b00      	cmp	r3, #0
 800161a:	d00e      	beq.n	800163a <print_integer_finalization+0x7a>
 800161c:	687a      	ldr	r2, [r7, #4]
 800161e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001620:	429a      	cmp	r2, r3
 8001622:	d20a      	bcs.n	800163a <print_integer_finalization+0x7a>
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	2b1f      	cmp	r3, #31
 8001628:	d9ec      	bls.n	8001604 <print_integer_finalization+0x44>
      }
    }

    while ((len < precision) && (len < PRINTF_INTEGER_BUFFER_SIZE)) {
 800162a:	e006      	b.n	800163a <print_integer_finalization+0x7a>
      buf[len++] = '0';
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	1c5a      	adds	r2, r3, #1
 8001630:	607a      	str	r2, [r7, #4]
 8001632:	68ba      	ldr	r2, [r7, #8]
 8001634:	4413      	add	r3, r2
 8001636:	2230      	movs	r2, #48	; 0x30
 8001638:	701a      	strb	r2, [r3, #0]
    while ((len < precision) && (len < PRINTF_INTEGER_BUFFER_SIZE)) {
 800163a:	687a      	ldr	r2, [r7, #4]
 800163c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800163e:	429a      	cmp	r2, r3
 8001640:	d202      	bcs.n	8001648 <print_integer_finalization+0x88>
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	2b1f      	cmp	r3, #31
 8001646:	d9f1      	bls.n	800162c <print_integer_finalization+0x6c>
    }

    if (base == BASE_OCTAL && (len > unpadded_len)) {
 8001648:	f897 3020 	ldrb.w	r3, [r7, #32]
 800164c:	2b08      	cmp	r3, #8
 800164e:	d107      	bne.n	8001660 <print_integer_finalization+0xa0>
 8001650:	687a      	ldr	r2, [r7, #4]
 8001652:	697b      	ldr	r3, [r7, #20]
 8001654:	429a      	cmp	r2, r3
 8001656:	d903      	bls.n	8001660 <print_integer_finalization+0xa0>
      // Since we've written some zeros, we've satisfied the alternative format leading space requirement
      flags &= ~FLAGS_HASH;
 8001658:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800165a:	f023 0310 	bic.w	r3, r3, #16
 800165e:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }

  // handle hash
  if (flags & (FLAGS_HASH | FLAGS_POINTER)) {
 8001660:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001662:	f242 0310 	movw	r3, #8208	; 0x2010
 8001666:	4013      	ands	r3, r2
 8001668:	2b00      	cmp	r3, #0
 800166a:	d068      	beq.n	800173e <print_integer_finalization+0x17e>
    if (!(flags & FLAGS_PRECISION) && len && ((len == precision) || (len == width))) {
 800166c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800166e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001672:	2b00      	cmp	r3, #0
 8001674:	d123      	bne.n	80016be <print_integer_finalization+0xfe>
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	2b00      	cmp	r3, #0
 800167a:	d020      	beq.n	80016be <print_integer_finalization+0xfe>
 800167c:	687a      	ldr	r2, [r7, #4]
 800167e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001680:	429a      	cmp	r2, r3
 8001682:	d003      	beq.n	800168c <print_integer_finalization+0xcc>
 8001684:	687a      	ldr	r2, [r7, #4]
 8001686:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001688:	429a      	cmp	r2, r3
 800168a:	d118      	bne.n	80016be <print_integer_finalization+0xfe>
      // Let's take back some padding digits to fit in what will eventually
      // be the format-specific prefix
      if (unpadded_len < len) {
 800168c:	697a      	ldr	r2, [r7, #20]
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	429a      	cmp	r2, r3
 8001692:	d202      	bcs.n	800169a <print_integer_finalization+0xda>
        len--; // This should suffice for BASE_OCTAL
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	3b01      	subs	r3, #1
 8001698:	607b      	str	r3, [r7, #4]
      }
      if (len && (base == BASE_HEX || base == BASE_BINARY) && (unpadded_len < len)) {
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	2b00      	cmp	r3, #0
 800169e:	d00e      	beq.n	80016be <print_integer_finalization+0xfe>
 80016a0:	f897 3020 	ldrb.w	r3, [r7, #32]
 80016a4:	2b10      	cmp	r3, #16
 80016a6:	d003      	beq.n	80016b0 <print_integer_finalization+0xf0>
 80016a8:	f897 3020 	ldrb.w	r3, [r7, #32]
 80016ac:	2b02      	cmp	r3, #2
 80016ae:	d106      	bne.n	80016be <print_integer_finalization+0xfe>
 80016b0:	697a      	ldr	r2, [r7, #20]
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	429a      	cmp	r2, r3
 80016b6:	d202      	bcs.n	80016be <print_integer_finalization+0xfe>
        len--; // ... and an extra one for 0x or 0b
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	3b01      	subs	r3, #1
 80016bc:	607b      	str	r3, [r7, #4]
      }
    }
    if ((base == BASE_HEX) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_INTEGER_BUFFER_SIZE)) {
 80016be:	f897 3020 	ldrb.w	r3, [r7, #32]
 80016c2:	2b10      	cmp	r3, #16
 80016c4:	d10f      	bne.n	80016e6 <print_integer_finalization+0x126>
 80016c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016c8:	f003 0320 	and.w	r3, r3, #32
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d10a      	bne.n	80016e6 <print_integer_finalization+0x126>
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	2b1f      	cmp	r3, #31
 80016d4:	d807      	bhi.n	80016e6 <print_integer_finalization+0x126>
      buf[len++] = 'x';
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	1c5a      	adds	r2, r3, #1
 80016da:	607a      	str	r2, [r7, #4]
 80016dc:	68ba      	ldr	r2, [r7, #8]
 80016de:	4413      	add	r3, r2
 80016e0:	2278      	movs	r2, #120	; 0x78
 80016e2:	701a      	strb	r2, [r3, #0]
 80016e4:	e021      	b.n	800172a <print_integer_finalization+0x16a>
    }
    else if ((base == BASE_HEX) && (flags & FLAGS_UPPERCASE) && (len < PRINTF_INTEGER_BUFFER_SIZE)) {
 80016e6:	f897 3020 	ldrb.w	r3, [r7, #32]
 80016ea:	2b10      	cmp	r3, #16
 80016ec:	d10f      	bne.n	800170e <print_integer_finalization+0x14e>
 80016ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016f0:	f003 0320 	and.w	r3, r3, #32
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d00a      	beq.n	800170e <print_integer_finalization+0x14e>
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	2b1f      	cmp	r3, #31
 80016fc:	d807      	bhi.n	800170e <print_integer_finalization+0x14e>
      buf[len++] = 'X';
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	1c5a      	adds	r2, r3, #1
 8001702:	607a      	str	r2, [r7, #4]
 8001704:	68ba      	ldr	r2, [r7, #8]
 8001706:	4413      	add	r3, r2
 8001708:	2258      	movs	r2, #88	; 0x58
 800170a:	701a      	strb	r2, [r3, #0]
 800170c:	e00d      	b.n	800172a <print_integer_finalization+0x16a>
    }
    else if ((base == BASE_BINARY) && (len < PRINTF_INTEGER_BUFFER_SIZE)) {
 800170e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001712:	2b02      	cmp	r3, #2
 8001714:	d109      	bne.n	800172a <print_integer_finalization+0x16a>
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	2b1f      	cmp	r3, #31
 800171a:	d806      	bhi.n	800172a <print_integer_finalization+0x16a>
      buf[len++] = 'b';
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	1c5a      	adds	r2, r3, #1
 8001720:	607a      	str	r2, [r7, #4]
 8001722:	68ba      	ldr	r2, [r7, #8]
 8001724:	4413      	add	r3, r2
 8001726:	2262      	movs	r2, #98	; 0x62
 8001728:	701a      	strb	r2, [r3, #0]
    }
    if (len < PRINTF_INTEGER_BUFFER_SIZE) {
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	2b1f      	cmp	r3, #31
 800172e:	d806      	bhi.n	800173e <print_integer_finalization+0x17e>
      buf[len++] = '0';
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	1c5a      	adds	r2, r3, #1
 8001734:	607a      	str	r2, [r7, #4]
 8001736:	68ba      	ldr	r2, [r7, #8]
 8001738:	4413      	add	r3, r2
 800173a:	2230      	movs	r2, #48	; 0x30
 800173c:	701a      	strb	r2, [r3, #0]
    }
  }

  if (len < PRINTF_INTEGER_BUFFER_SIZE) {
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	2b1f      	cmp	r3, #31
 8001742:	d823      	bhi.n	800178c <print_integer_finalization+0x1cc>
    if (negative) {
 8001744:	78fb      	ldrb	r3, [r7, #3]
 8001746:	2b00      	cmp	r3, #0
 8001748:	d007      	beq.n	800175a <print_integer_finalization+0x19a>
      buf[len++] = '-';
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	1c5a      	adds	r2, r3, #1
 800174e:	607a      	str	r2, [r7, #4]
 8001750:	68ba      	ldr	r2, [r7, #8]
 8001752:	4413      	add	r3, r2
 8001754:	222d      	movs	r2, #45	; 0x2d
 8001756:	701a      	strb	r2, [r3, #0]
 8001758:	e018      	b.n	800178c <print_integer_finalization+0x1cc>
    }
    else if (flags & FLAGS_PLUS) {
 800175a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800175c:	f003 0304 	and.w	r3, r3, #4
 8001760:	2b00      	cmp	r3, #0
 8001762:	d007      	beq.n	8001774 <print_integer_finalization+0x1b4>
      buf[len++] = '+';  // ignore the space if the '+' exists
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	1c5a      	adds	r2, r3, #1
 8001768:	607a      	str	r2, [r7, #4]
 800176a:	68ba      	ldr	r2, [r7, #8]
 800176c:	4413      	add	r3, r2
 800176e:	222b      	movs	r2, #43	; 0x2b
 8001770:	701a      	strb	r2, [r3, #0]
 8001772:	e00b      	b.n	800178c <print_integer_finalization+0x1cc>
    }
    else if (flags & FLAGS_SPACE) {
 8001774:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001776:	f003 0308 	and.w	r3, r3, #8
 800177a:	2b00      	cmp	r3, #0
 800177c:	d006      	beq.n	800178c <print_integer_finalization+0x1cc>
      buf[len++] = ' ';
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	1c5a      	adds	r2, r3, #1
 8001782:	607a      	str	r2, [r7, #4]
 8001784:	68ba      	ldr	r2, [r7, #8]
 8001786:	4413      	add	r3, r2
 8001788:	2220      	movs	r2, #32
 800178a:	701a      	strb	r2, [r3, #0]
    }
  }

  out_rev_(output, buf, len, width, flags);
 800178c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800178e:	9300      	str	r3, [sp, #0]
 8001790:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001792:	687a      	ldr	r2, [r7, #4]
 8001794:	68b9      	ldr	r1, [r7, #8]
 8001796:	68f8      	ldr	r0, [r7, #12]
 8001798:	f7ff fecc 	bl	8001534 <out_rev_>
}
 800179c:	bf00      	nop
 800179e:	3718      	adds	r7, #24
 80017a0:	46bd      	mov	sp, r7
 80017a2:	bd80      	pop	{r7, pc}

080017a4 <print_integer>:

// An internal itoa-like function
static void print_integer(output_gadget_t* output, printf_unsigned_value_t value, bool negative, numeric_base_t base, printf_size_t precision, printf_size_t width, printf_flags_t flags)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b092      	sub	sp, #72	; 0x48
 80017a8:	af04      	add	r7, sp, #16
 80017aa:	60f8      	str	r0, [r7, #12]
 80017ac:	60b9      	str	r1, [r7, #8]
 80017ae:	4611      	mov	r1, r2
 80017b0:	461a      	mov	r2, r3
 80017b2:	460b      	mov	r3, r1
 80017b4:	71fb      	strb	r3, [r7, #7]
 80017b6:	4613      	mov	r3, r2
 80017b8:	71bb      	strb	r3, [r7, #6]
  char buf[PRINTF_INTEGER_BUFFER_SIZE];
  printf_size_t len = 0U;
 80017ba:	2300      	movs	r3, #0
 80017bc:	637b      	str	r3, [r7, #52]	; 0x34

  if (!value) {
 80017be:	68bb      	ldr	r3, [r7, #8]
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d119      	bne.n	80017f8 <print_integer+0x54>
    if ( !(flags & FLAGS_PRECISION) ) {
 80017c4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80017c6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d10c      	bne.n	80017e8 <print_integer+0x44>
      buf[len++] = '0';
 80017ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80017d0:	1c5a      	adds	r2, r3, #1
 80017d2:	637a      	str	r2, [r7, #52]	; 0x34
 80017d4:	3338      	adds	r3, #56	; 0x38
 80017d6:	443b      	add	r3, r7
 80017d8:	2230      	movs	r2, #48	; 0x30
 80017da:	f803 2c28 	strb.w	r2, [r3, #-40]
      flags &= ~FLAGS_HASH;
 80017de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80017e0:	f023 0310 	bic.w	r3, r3, #16
 80017e4:	64bb      	str	r3, [r7, #72]	; 0x48
 80017e6:	e039      	b.n	800185c <print_integer+0xb8>
      // We drop this flag this since either the alternative and regular modes of the specifier
      // don't differ on 0 values, or (in the case of octal) we've already provided the special
      // handling for this mode.
    }
    else if (base == BASE_HEX) {
 80017e8:	79bb      	ldrb	r3, [r7, #6]
 80017ea:	2b10      	cmp	r3, #16
 80017ec:	d136      	bne.n	800185c <print_integer+0xb8>
      flags &= ~FLAGS_HASH;
 80017ee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80017f0:	f023 0310 	bic.w	r3, r3, #16
 80017f4:	64bb      	str	r3, [r7, #72]	; 0x48
 80017f6:	e031      	b.n	800185c <print_integer+0xb8>
      // don't differ on 0 values
    }
  }
  else {
    do {
      const char digit = (char)(value % base);
 80017f8:	79ba      	ldrb	r2, [r7, #6]
 80017fa:	68bb      	ldr	r3, [r7, #8]
 80017fc:	fbb3 f1f2 	udiv	r1, r3, r2
 8001800:	fb01 f202 	mul.w	r2, r1, r2
 8001804:	1a9b      	subs	r3, r3, r2
 8001806:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      buf[len++] = (char)(digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10);
 800180a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800180e:	2b09      	cmp	r3, #9
 8001810:	d804      	bhi.n	800181c <print_integer+0x78>
 8001812:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001816:	3330      	adds	r3, #48	; 0x30
 8001818:	b2da      	uxtb	r2, r3
 800181a:	e00d      	b.n	8001838 <print_integer+0x94>
 800181c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800181e:	f003 0320 	and.w	r3, r3, #32
 8001822:	2b00      	cmp	r3, #0
 8001824:	d001      	beq.n	800182a <print_integer+0x86>
 8001826:	2241      	movs	r2, #65	; 0x41
 8001828:	e000      	b.n	800182c <print_integer+0x88>
 800182a:	2261      	movs	r2, #97	; 0x61
 800182c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001830:	4413      	add	r3, r2
 8001832:	b2db      	uxtb	r3, r3
 8001834:	3b0a      	subs	r3, #10
 8001836:	b2da      	uxtb	r2, r3
 8001838:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800183a:	1c59      	adds	r1, r3, #1
 800183c:	6379      	str	r1, [r7, #52]	; 0x34
 800183e:	3338      	adds	r3, #56	; 0x38
 8001840:	443b      	add	r3, r7
 8001842:	f803 2c28 	strb.w	r2, [r3, #-40]
      value /= base;
 8001846:	79bb      	ldrb	r3, [r7, #6]
 8001848:	68ba      	ldr	r2, [r7, #8]
 800184a:	fbb2 f3f3 	udiv	r3, r2, r3
 800184e:	60bb      	str	r3, [r7, #8]
    } while (value && (len < PRINTF_INTEGER_BUFFER_SIZE));
 8001850:	68bb      	ldr	r3, [r7, #8]
 8001852:	2b00      	cmp	r3, #0
 8001854:	d002      	beq.n	800185c <print_integer+0xb8>
 8001856:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001858:	2b1f      	cmp	r3, #31
 800185a:	d9cd      	bls.n	80017f8 <print_integer+0x54>
  }

  print_integer_finalization(output, buf, len, negative, base, precision, width, flags);
 800185c:	79fa      	ldrb	r2, [r7, #7]
 800185e:	f107 0110 	add.w	r1, r7, #16
 8001862:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001864:	9303      	str	r3, [sp, #12]
 8001866:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001868:	9302      	str	r3, [sp, #8]
 800186a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800186c:	9301      	str	r3, [sp, #4]
 800186e:	79bb      	ldrb	r3, [r7, #6]
 8001870:	9300      	str	r3, [sp, #0]
 8001872:	4613      	mov	r3, r2
 8001874:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001876:	68f8      	ldr	r0, [r7, #12]
 8001878:	f7ff fea2 	bl	80015c0 <print_integer_finalization>
}
 800187c:	bf00      	nop
 800187e:	3738      	adds	r7, #56	; 0x38
 8001880:	46bd      	mov	sp, r7
 8001882:	bd80      	pop	{r7, pc}

08001884 <get_components>:

// Break up a double number - which is known to be a finite non-negative number -
// into its base-10 parts: integral - before the decimal point, and fractional - after it.
// Taken the precision into account, but does not change it even internally.
static struct double_components get_components(double number, printf_size_t precision)
{
 8001884:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001888:	b096      	sub	sp, #88	; 0x58
 800188a:	af00      	add	r7, sp, #0
 800188c:	62f8      	str	r0, [r7, #44]	; 0x2c
 800188e:	ed87 0b08 	vstr	d0, [r7, #32]
 8001892:	62b9      	str	r1, [r7, #40]	; 0x28
  struct double_components number_;
  number_.is_negative = get_sign_bit(number);
 8001894:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001898:	f7ff fd46 	bl	8001328 <get_sign_bit>
 800189c:	4603      	mov	r3, r0
 800189e:	2b00      	cmp	r3, #0
 80018a0:	bf14      	ite	ne
 80018a2:	2301      	movne	r3, #1
 80018a4:	2300      	moveq	r3, #0
 80018a6:	b2db      	uxtb	r3, r3
 80018a8:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
  double abs_number = (number_.is_negative) ? -number : number;
 80018ac:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d004      	beq.n	80018be <get_components+0x3a>
 80018b4:	6a3c      	ldr	r4, [r7, #32]
 80018b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018b8:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 80018bc:	e001      	b.n	80018c2 <get_components+0x3e>
 80018be:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80018c2:	e9c7 4514 	strd	r4, r5, [r7, #80]	; 0x50
  number_.integral = (int_fast64_t)abs_number;
 80018c6:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80018ca:	f7ff f93f 	bl	8000b4c <__aeabi_d2lz>
 80018ce:	4602      	mov	r2, r0
 80018d0:	460b      	mov	r3, r1
 80018d2:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
  double remainder = (abs_number - (double) number_.integral) * powers_of_10[precision];
 80018d6:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80018da:	4610      	mov	r0, r2
 80018dc:	4619      	mov	r1, r3
 80018de:	f7fe fe05 	bl	80004ec <__aeabi_l2d>
 80018e2:	4602      	mov	r2, r0
 80018e4:	460b      	mov	r3, r1
 80018e6:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80018ea:	f7fe fc75 	bl	80001d8 <__aeabi_dsub>
 80018ee:	4602      	mov	r2, r0
 80018f0:	460b      	mov	r3, r1
 80018f2:	4610      	mov	r0, r2
 80018f4:	4619      	mov	r1, r3
 80018f6:	4a69      	ldr	r2, [pc, #420]	; (8001a9c <get_components+0x218>)
 80018f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80018fa:	00db      	lsls	r3, r3, #3
 80018fc:	4413      	add	r3, r2
 80018fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001902:	f7fe fe21 	bl	8000548 <__aeabi_dmul>
 8001906:	4602      	mov	r2, r0
 8001908:	460b      	mov	r3, r1
 800190a:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
  number_.fractional = (int_fast64_t)remainder;
 800190e:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8001912:	f7ff f91b 	bl	8000b4c <__aeabi_d2lz>
 8001916:	4602      	mov	r2, r0
 8001918:	460b      	mov	r3, r1
 800191a:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38

  remainder -= (double) number_.fractional;
 800191e:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8001922:	4610      	mov	r0, r2
 8001924:	4619      	mov	r1, r3
 8001926:	f7fe fde1 	bl	80004ec <__aeabi_l2d>
 800192a:	4602      	mov	r2, r0
 800192c:	460b      	mov	r3, r1
 800192e:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8001932:	f7fe fc51 	bl	80001d8 <__aeabi_dsub>
 8001936:	4602      	mov	r2, r0
 8001938:	460b      	mov	r3, r1
 800193a:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48

  if (remainder > 0.5) {
 800193e:	f04f 0200 	mov.w	r2, #0
 8001942:	4b57      	ldr	r3, [pc, #348]	; (8001aa0 <get_components+0x21c>)
 8001944:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8001948:	f7ff f88e 	bl	8000a68 <__aeabi_dcmpgt>
 800194c:	4603      	mov	r3, r0
 800194e:	2b00      	cmp	r3, #0
 8001950:	d02d      	beq.n	80019ae <get_components+0x12a>
    ++number_.fractional;
 8001952:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8001956:	1c51      	adds	r1, r2, #1
 8001958:	61b9      	str	r1, [r7, #24]
 800195a:	f143 0300 	adc.w	r3, r3, #0
 800195e:	61fb      	str	r3, [r7, #28]
 8001960:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8001964:	e9c7 340e 	strd	r3, r4, [r7, #56]	; 0x38
    // handle rollover, e.g. case 0.99 with precision 1 is 1.0
    if ((double) number_.fractional >= powers_of_10[precision]) {
 8001968:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800196c:	4610      	mov	r0, r2
 800196e:	4619      	mov	r1, r3
 8001970:	f7fe fdbc 	bl	80004ec <__aeabi_l2d>
 8001974:	4a49      	ldr	r2, [pc, #292]	; (8001a9c <get_components+0x218>)
 8001976:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001978:	00db      	lsls	r3, r3, #3
 800197a:	4413      	add	r3, r2
 800197c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001980:	f7ff f868 	bl	8000a54 <__aeabi_dcmpge>
 8001984:	4603      	mov	r3, r0
 8001986:	2b00      	cmp	r3, #0
 8001988:	d033      	beq.n	80019f2 <get_components+0x16e>
      number_.fractional = 0;
 800198a:	f04f 0200 	mov.w	r2, #0
 800198e:	f04f 0300 	mov.w	r3, #0
 8001992:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
      ++number_.integral;
 8001996:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800199a:	1c51      	adds	r1, r2, #1
 800199c:	6139      	str	r1, [r7, #16]
 800199e:	f143 0300 	adc.w	r3, r3, #0
 80019a2:	617b      	str	r3, [r7, #20]
 80019a4:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 80019a8:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
 80019ac:	e021      	b.n	80019f2 <get_components+0x16e>
    }
  }
  else if ((remainder == 0.5) && ((number_.fractional == 0U) || (number_.fractional & 1U))) {
 80019ae:	f04f 0200 	mov.w	r2, #0
 80019b2:	4b3b      	ldr	r3, [pc, #236]	; (8001aa0 <get_components+0x21c>)
 80019b4:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80019b8:	f7ff f82e 	bl	8000a18 <__aeabi_dcmpeq>
 80019bc:	4603      	mov	r3, r0
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d017      	beq.n	80019f2 <get_components+0x16e>
 80019c2:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80019c6:	4313      	orrs	r3, r2
 80019c8:	d008      	beq.n	80019dc <get_components+0x158>
 80019ca:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80019ce:	f002 0a01 	and.w	sl, r2, #1
 80019d2:	f04f 0b00 	mov.w	fp, #0
 80019d6:	ea5a 030b 	orrs.w	r3, sl, fp
 80019da:	d00a      	beq.n	80019f2 <get_components+0x16e>
    // if halfway, round up if odd OR if last digit is 0
    ++number_.fractional;
 80019dc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80019e0:	1c51      	adds	r1, r2, #1
 80019e2:	60b9      	str	r1, [r7, #8]
 80019e4:	f143 0300 	adc.w	r3, r3, #0
 80019e8:	60fb      	str	r3, [r7, #12]
 80019ea:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80019ee:	e9c7 340e 	strd	r3, r4, [r7, #56]	; 0x38
  }

  if (precision == 0U) {
 80019f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d141      	bne.n	8001a7c <get_components+0x1f8>
    remainder = abs_number - (double) number_.integral;
 80019f8:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80019fc:	4610      	mov	r0, r2
 80019fe:	4619      	mov	r1, r3
 8001a00:	f7fe fd74 	bl	80004ec <__aeabi_l2d>
 8001a04:	4602      	mov	r2, r0
 8001a06:	460b      	mov	r3, r1
 8001a08:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8001a0c:	f7fe fbe4 	bl	80001d8 <__aeabi_dsub>
 8001a10:	4602      	mov	r2, r0
 8001a12:	460b      	mov	r3, r1
 8001a14:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
    if ((!(remainder < 0.5) || (remainder > 0.5)) && (number_.integral & 1)) {
 8001a18:	2301      	movs	r3, #1
 8001a1a:	461c      	mov	r4, r3
 8001a1c:	f04f 0200 	mov.w	r2, #0
 8001a20:	4b1f      	ldr	r3, [pc, #124]	; (8001aa0 <get_components+0x21c>)
 8001a22:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8001a26:	f7ff f801 	bl	8000a2c <__aeabi_dcmplt>
 8001a2a:	4603      	mov	r3, r0
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d101      	bne.n	8001a34 <get_components+0x1b0>
 8001a30:	2300      	movs	r3, #0
 8001a32:	461c      	mov	r4, r3
 8001a34:	b2e3      	uxtb	r3, r4
 8001a36:	f083 0301 	eor.w	r3, r3, #1
 8001a3a:	b2db      	uxtb	r3, r3
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d109      	bne.n	8001a54 <get_components+0x1d0>
 8001a40:	f04f 0200 	mov.w	r2, #0
 8001a44:	4b16      	ldr	r3, [pc, #88]	; (8001aa0 <get_components+0x21c>)
 8001a46:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8001a4a:	f7ff f80d 	bl	8000a68 <__aeabi_dcmpgt>
 8001a4e:	4603      	mov	r3, r0
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d013      	beq.n	8001a7c <get_components+0x1f8>
 8001a54:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001a58:	f002 0801 	and.w	r8, r2, #1
 8001a5c:	f04f 0900 	mov.w	r9, #0
 8001a60:	ea58 0309 	orrs.w	r3, r8, r9
 8001a64:	d00a      	beq.n	8001a7c <get_components+0x1f8>
      // exactly 0.5 and ODD, then round up
      // 1.5 -> 2, but 2.5 -> 2
      ++number_.integral;
 8001a66:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001a6a:	1c51      	adds	r1, r2, #1
 8001a6c:	6039      	str	r1, [r7, #0]
 8001a6e:	f143 0300 	adc.w	r3, r3, #0
 8001a72:	607b      	str	r3, [r7, #4]
 8001a74:	e9d7 3400 	ldrd	r3, r4, [r7]
 8001a78:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
    }
  }
  return number_;
 8001a7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a7e:	461d      	mov	r5, r3
 8001a80:	f107 0430 	add.w	r4, r7, #48	; 0x30
 8001a84:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001a86:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001a88:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001a8c:	e885 0003 	stmia.w	r5, {r0, r1}
}
 8001a90:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001a92:	3758      	adds	r7, #88	; 0x58
 8001a94:	46bd      	mov	sp, r7
 8001a96:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001a9a:	bf00      	nop
 8001a9c:	0800b0f8 	.word	0x0800b0f8
 8001aa0:	3fe00000 	.word	0x3fe00000

08001aa4 <print_broken_up_decimal>:
#endif // PRINTF_SUPPORT_EXPONENTIAL_SPECIFIERS

static void print_broken_up_decimal(
  struct double_components number_, output_gadget_t* output, printf_size_t precision,
  printf_size_t width, printf_flags_t flags, char *buf, printf_size_t len)
{
 8001aa4:	b084      	sub	sp, #16
 8001aa6:	b580      	push	{r7, lr}
 8001aa8:	b086      	sub	sp, #24
 8001aaa:	af02      	add	r7, sp, #8
 8001aac:	f107 0c18 	add.w	ip, r7, #24
 8001ab0:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
  if (precision != 0U) {
 8001ab4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	f000 8087 	beq.w	8001bca <print_broken_up_decimal+0x126>
    // do fractional part, as an unsigned number

    printf_size_t count = precision;
 8001abc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001abe:	60fb      	str	r3, [r7, #12]

    // %g/%G mandates we skip the trailing 0 digits...
    if ((flags & FLAGS_ADAPT_EXP) && !(flags & FLAGS_HASH) && (number_.fractional > 0)) {
 8001ac0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001ac2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d029      	beq.n	8001b1e <print_broken_up_decimal+0x7a>
 8001aca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001acc:	f003 0310 	and.w	r3, r3, #16
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d124      	bne.n	8001b1e <print_broken_up_decimal+0x7a>
 8001ad4:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001ad8:	2a01      	cmp	r2, #1
 8001ada:	f173 0300 	sbcs.w	r3, r3, #0
 8001ade:	db1e      	blt.n	8001b1e <print_broken_up_decimal+0x7a>
      while(true) {
        int_fast64_t digit = number_.fractional % 10U;
 8001ae0:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001ae4:	f04f 020a 	mov.w	r2, #10
 8001ae8:	f04f 0300 	mov.w	r3, #0
 8001aec:	f7fe ffc6 	bl	8000a7c <__aeabi_ldivmod>
 8001af0:	e9c7 2300 	strd	r2, r3, [r7]
        if (digit != 0) {
 8001af4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001af8:	4313      	orrs	r3, r2
 8001afa:	d10f      	bne.n	8001b1c <print_broken_up_decimal+0x78>
          break;
        }
        --count;
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	3b01      	subs	r3, #1
 8001b00:	60fb      	str	r3, [r7, #12]
        number_.fractional /= 10U;
 8001b02:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001b06:	f04f 020a 	mov.w	r2, #10
 8001b0a:	f04f 0300 	mov.w	r3, #0
 8001b0e:	f7fe ffb5 	bl	8000a7c <__aeabi_ldivmod>
 8001b12:	4602      	mov	r2, r0
 8001b14:	460b      	mov	r3, r1
 8001b16:	e9c7 2308 	strd	r2, r3, [r7, #32]
      while(true) {
 8001b1a:	e7e1      	b.n	8001ae0 <print_broken_up_decimal+0x3c>
          break;
 8001b1c:	bf00      	nop
      }
      // ... and even the decimal point if there are no
      // non-zero fractional part digits (see below)
    }

    if (number_.fractional > 0 || !(flags & FLAGS_ADAPT_EXP) || (flags & FLAGS_HASH) ) {
 8001b1e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001b22:	2a01      	cmp	r2, #1
 8001b24:	f173 0300 	sbcs.w	r3, r3, #0
 8001b28:	da2e      	bge.n	8001b88 <print_broken_up_decimal+0xe4>
 8001b2a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001b2c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d029      	beq.n	8001b88 <print_broken_up_decimal+0xe4>
 8001b34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001b36:	f003 0310 	and.w	r3, r3, #16
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d076      	beq.n	8001c2c <print_broken_up_decimal+0x188>
      while (len < PRINTF_DECIMAL_BUFFER_SIZE) {
 8001b3e:	e023      	b.n	8001b88 <print_broken_up_decimal+0xe4>
        --count;
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	3b01      	subs	r3, #1
 8001b44:	60fb      	str	r3, [r7, #12]
        buf[len++] = (char)('0' + number_.fractional % 10U);
 8001b46:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001b4a:	f04f 020a 	mov.w	r2, #10
 8001b4e:	f04f 0300 	mov.w	r3, #0
 8001b52:	f7fe ff93 	bl	8000a7c <__aeabi_ldivmod>
 8001b56:	b2d2      	uxtb	r2, r2
 8001b58:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001b5a:	1c59      	adds	r1, r3, #1
 8001b5c:	6479      	str	r1, [r7, #68]	; 0x44
 8001b5e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8001b60:	440b      	add	r3, r1
 8001b62:	3230      	adds	r2, #48	; 0x30
 8001b64:	b2d2      	uxtb	r2, r2
 8001b66:	701a      	strb	r2, [r3, #0]
        if (!(number_.fractional /= 10U)) {
 8001b68:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001b6c:	f04f 020a 	mov.w	r2, #10
 8001b70:	f04f 0300 	mov.w	r3, #0
 8001b74:	f7fe ff82 	bl	8000a7c <__aeabi_ldivmod>
 8001b78:	4602      	mov	r2, r0
 8001b7a:	460b      	mov	r3, r1
 8001b7c:	e9c7 2308 	strd	r2, r3, [r7, #32]
 8001b80:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001b84:	4313      	orrs	r3, r2
 8001b86:	d003      	beq.n	8001b90 <print_broken_up_decimal+0xec>
      while (len < PRINTF_DECIMAL_BUFFER_SIZE) {
 8001b88:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001b8a:	2b1f      	cmp	r3, #31
 8001b8c:	d9d8      	bls.n	8001b40 <print_broken_up_decimal+0x9c>
 8001b8e:	e00b      	b.n	8001ba8 <print_broken_up_decimal+0x104>
          break;
 8001b90:	bf00      	nop
        }
      }
      // add extra 0s
      while ((len < PRINTF_DECIMAL_BUFFER_SIZE) && (count > 0U)) {
 8001b92:	e009      	b.n	8001ba8 <print_broken_up_decimal+0x104>
        buf[len++] = '0';
 8001b94:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001b96:	1c5a      	adds	r2, r3, #1
 8001b98:	647a      	str	r2, [r7, #68]	; 0x44
 8001b9a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001b9c:	4413      	add	r3, r2
 8001b9e:	2230      	movs	r2, #48	; 0x30
 8001ba0:	701a      	strb	r2, [r3, #0]
        --count;
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	3b01      	subs	r3, #1
 8001ba6:	60fb      	str	r3, [r7, #12]
      while ((len < PRINTF_DECIMAL_BUFFER_SIZE) && (count > 0U)) {
 8001ba8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001baa:	2b1f      	cmp	r3, #31
 8001bac:	d802      	bhi.n	8001bb4 <print_broken_up_decimal+0x110>
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d1ef      	bne.n	8001b94 <print_broken_up_decimal+0xf0>
      }
      if (len < PRINTF_DECIMAL_BUFFER_SIZE) {
 8001bb4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001bb6:	2b1f      	cmp	r3, #31
 8001bb8:	d838      	bhi.n	8001c2c <print_broken_up_decimal+0x188>
        buf[len++] = '.';
 8001bba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001bbc:	1c5a      	adds	r2, r3, #1
 8001bbe:	647a      	str	r2, [r7, #68]	; 0x44
 8001bc0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001bc2:	4413      	add	r3, r2
 8001bc4:	222e      	movs	r2, #46	; 0x2e
 8001bc6:	701a      	strb	r2, [r3, #0]
 8001bc8:	e030      	b.n	8001c2c <print_broken_up_decimal+0x188>
      }
    }
  }
  else {
    if ((flags & FLAGS_HASH) && (len < PRINTF_DECIMAL_BUFFER_SIZE)) {
 8001bca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001bcc:	f003 0310 	and.w	r3, r3, #16
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d02b      	beq.n	8001c2c <print_broken_up_decimal+0x188>
 8001bd4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001bd6:	2b1f      	cmp	r3, #31
 8001bd8:	d828      	bhi.n	8001c2c <print_broken_up_decimal+0x188>
      buf[len++] = '.';
 8001bda:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001bdc:	1c5a      	adds	r2, r3, #1
 8001bde:	647a      	str	r2, [r7, #68]	; 0x44
 8001be0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001be2:	4413      	add	r3, r2
 8001be4:	222e      	movs	r2, #46	; 0x2e
 8001be6:	701a      	strb	r2, [r3, #0]
    }
  }

  // Write the integer part of the number (it comes after the fractional
  // since the character order is reversed)
  while (len < PRINTF_DECIMAL_BUFFER_SIZE) {
 8001be8:	e020      	b.n	8001c2c <print_broken_up_decimal+0x188>
    buf[len++] = (char)('0' + (number_.integral % 10));
 8001bea:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001bee:	f04f 020a 	mov.w	r2, #10
 8001bf2:	f04f 0300 	mov.w	r3, #0
 8001bf6:	f7fe ff41 	bl	8000a7c <__aeabi_ldivmod>
 8001bfa:	b2d2      	uxtb	r2, r2
 8001bfc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001bfe:	1c59      	adds	r1, r3, #1
 8001c00:	6479      	str	r1, [r7, #68]	; 0x44
 8001c02:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8001c04:	440b      	add	r3, r1
 8001c06:	3230      	adds	r2, #48	; 0x30
 8001c08:	b2d2      	uxtb	r2, r2
 8001c0a:	701a      	strb	r2, [r3, #0]
    if (!(number_.integral /= 10)) {
 8001c0c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001c10:	f04f 020a 	mov.w	r2, #10
 8001c14:	f04f 0300 	mov.w	r3, #0
 8001c18:	f7fe ff30 	bl	8000a7c <__aeabi_ldivmod>
 8001c1c:	4602      	mov	r2, r0
 8001c1e:	460b      	mov	r3, r1
 8001c20:	e9c7 2306 	strd	r2, r3, [r7, #24]
 8001c24:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001c28:	4313      	orrs	r3, r2
 8001c2a:	d003      	beq.n	8001c34 <print_broken_up_decimal+0x190>
  while (len < PRINTF_DECIMAL_BUFFER_SIZE) {
 8001c2c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001c2e:	2b1f      	cmp	r3, #31
 8001c30:	d9db      	bls.n	8001bea <print_broken_up_decimal+0x146>
 8001c32:	e000      	b.n	8001c36 <print_broken_up_decimal+0x192>
      break;
 8001c34:	bf00      	nop
    }
  }

  // pad leading zeros
  if (!(flags & FLAGS_LEFT) && (flags & FLAGS_ZEROPAD)) {
 8001c36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001c38:	f003 0302 	and.w	r3, r3, #2
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d122      	bne.n	8001c86 <print_broken_up_decimal+0x1e2>
 8001c40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001c42:	f003 0301 	and.w	r3, r3, #1
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d01d      	beq.n	8001c86 <print_broken_up_decimal+0x1e2>
    if (width && (number_.is_negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
 8001c4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d013      	beq.n	8001c78 <print_broken_up_decimal+0x1d4>
 8001c50:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d104      	bne.n	8001c62 <print_broken_up_decimal+0x1be>
 8001c58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001c5a:	f003 030c 	and.w	r3, r3, #12
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d00a      	beq.n	8001c78 <print_broken_up_decimal+0x1d4>
      width--;
 8001c62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001c64:	3b01      	subs	r3, #1
 8001c66:	63bb      	str	r3, [r7, #56]	; 0x38
    }
    while ((len < width) && (len < PRINTF_DECIMAL_BUFFER_SIZE)) {
 8001c68:	e006      	b.n	8001c78 <print_broken_up_decimal+0x1d4>
      buf[len++] = '0';
 8001c6a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001c6c:	1c5a      	adds	r2, r3, #1
 8001c6e:	647a      	str	r2, [r7, #68]	; 0x44
 8001c70:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001c72:	4413      	add	r3, r2
 8001c74:	2230      	movs	r2, #48	; 0x30
 8001c76:	701a      	strb	r2, [r3, #0]
    while ((len < width) && (len < PRINTF_DECIMAL_BUFFER_SIZE)) {
 8001c78:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001c7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001c7c:	429a      	cmp	r2, r3
 8001c7e:	d202      	bcs.n	8001c86 <print_broken_up_decimal+0x1e2>
 8001c80:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001c82:	2b1f      	cmp	r3, #31
 8001c84:	d9f1      	bls.n	8001c6a <print_broken_up_decimal+0x1c6>
    }
  }

  if (len < PRINTF_DECIMAL_BUFFER_SIZE) {
 8001c86:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001c88:	2b1f      	cmp	r3, #31
 8001c8a:	d824      	bhi.n	8001cd6 <print_broken_up_decimal+0x232>
    if (number_.is_negative) {
 8001c8c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d007      	beq.n	8001ca4 <print_broken_up_decimal+0x200>
      buf[len++] = '-';
 8001c94:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001c96:	1c5a      	adds	r2, r3, #1
 8001c98:	647a      	str	r2, [r7, #68]	; 0x44
 8001c9a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001c9c:	4413      	add	r3, r2
 8001c9e:	222d      	movs	r2, #45	; 0x2d
 8001ca0:	701a      	strb	r2, [r3, #0]
 8001ca2:	e018      	b.n	8001cd6 <print_broken_up_decimal+0x232>
    }
    else if (flags & FLAGS_PLUS) {
 8001ca4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001ca6:	f003 0304 	and.w	r3, r3, #4
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d007      	beq.n	8001cbe <print_broken_up_decimal+0x21a>
      buf[len++] = '+';  // ignore the space if the '+' exists
 8001cae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001cb0:	1c5a      	adds	r2, r3, #1
 8001cb2:	647a      	str	r2, [r7, #68]	; 0x44
 8001cb4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001cb6:	4413      	add	r3, r2
 8001cb8:	222b      	movs	r2, #43	; 0x2b
 8001cba:	701a      	strb	r2, [r3, #0]
 8001cbc:	e00b      	b.n	8001cd6 <print_broken_up_decimal+0x232>
    }
    else if (flags & FLAGS_SPACE) {
 8001cbe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001cc0:	f003 0308 	and.w	r3, r3, #8
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d006      	beq.n	8001cd6 <print_broken_up_decimal+0x232>
      buf[len++] = ' ';
 8001cc8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001cca:	1c5a      	adds	r2, r3, #1
 8001ccc:	647a      	str	r2, [r7, #68]	; 0x44
 8001cce:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001cd0:	4413      	add	r3, r2
 8001cd2:	2220      	movs	r2, #32
 8001cd4:	701a      	strb	r2, [r3, #0]
    }
  }

  out_rev_(output, buf, len, width, flags);
 8001cd6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001cd8:	9300      	str	r3, [sp, #0]
 8001cda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001cdc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001cde:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8001ce0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001ce2:	f7ff fc27 	bl	8001534 <out_rev_>
}
 8001ce6:	bf00      	nop
 8001ce8:	3710      	adds	r7, #16
 8001cea:	46bd      	mov	sp, r7
 8001cec:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001cf0:	b004      	add	sp, #16
 8001cf2:	4770      	bx	lr

08001cf4 <print_decimal_number>:

      // internal ftoa for fixed decimal floating point
static void print_decimal_number(output_gadget_t* output, double number, printf_size_t precision, printf_size_t width, printf_flags_t flags, char* buf, printf_size_t len)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b094      	sub	sp, #80	; 0x50
 8001cf8:	af08      	add	r7, sp, #32
 8001cfa:	6178      	str	r0, [r7, #20]
 8001cfc:	ed87 0b02 	vstr	d0, [r7, #8]
 8001d00:	6139      	str	r1, [r7, #16]
 8001d02:	607a      	str	r2, [r7, #4]
 8001d04:	603b      	str	r3, [r7, #0]
  struct double_components value_ = get_components(number, precision);
 8001d06:	f107 0318 	add.w	r3, r7, #24
 8001d0a:	6939      	ldr	r1, [r7, #16]
 8001d0c:	ed97 0b02 	vldr	d0, [r7, #8]
 8001d10:	4618      	mov	r0, r3
 8001d12:	f7ff fdb7 	bl	8001884 <get_components>
  print_broken_up_decimal(value_, output, precision, width, flags, buf, len);
 8001d16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001d18:	9307      	str	r3, [sp, #28]
 8001d1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001d1c:	9306      	str	r3, [sp, #24]
 8001d1e:	683b      	ldr	r3, [r7, #0]
 8001d20:	9305      	str	r3, [sp, #20]
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	9304      	str	r3, [sp, #16]
 8001d26:	693b      	ldr	r3, [r7, #16]
 8001d28:	9303      	str	r3, [sp, #12]
 8001d2a:	697b      	ldr	r3, [r7, #20]
 8001d2c:	9302      	str	r3, [sp, #8]
 8001d2e:	466a      	mov	r2, sp
 8001d30:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001d34:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001d38:	e882 0003 	stmia.w	r2, {r0, r1}
 8001d3c:	f107 0318 	add.w	r3, r7, #24
 8001d40:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001d42:	f7ff feaf 	bl	8001aa4 <print_broken_up_decimal>
}
 8001d46:	bf00      	nop
 8001d48:	3730      	adds	r7, #48	; 0x30
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	bd80      	pop	{r7, pc}
	...

08001d50 <print_floating_point>:
  }
}
#endif  // PRINTF_SUPPORT_EXPONENTIAL_SPECIFIERS

static void print_floating_point(output_gadget_t* output, double value, printf_size_t precision, printf_size_t width, printf_flags_t flags, bool prefer_exponential)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b092      	sub	sp, #72	; 0x48
 8001d54:	af02      	add	r7, sp, #8
 8001d56:	6178      	str	r0, [r7, #20]
 8001d58:	ed87 0b02 	vstr	d0, [r7, #8]
 8001d5c:	6139      	str	r1, [r7, #16]
 8001d5e:	607a      	str	r2, [r7, #4]
 8001d60:	603b      	str	r3, [r7, #0]
  char buf[PRINTF_DECIMAL_BUFFER_SIZE];
  printf_size_t len = 0U;
 8001d62:	2300      	movs	r3, #0
 8001d64:	63fb      	str	r3, [r7, #60]	; 0x3c

  // test for special values
  if (value != value) {
 8001d66:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001d6a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001d6e:	f7fe fe53 	bl	8000a18 <__aeabi_dcmpeq>
 8001d72:	4603      	mov	r3, r0
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d108      	bne.n	8001d8a <print_floating_point+0x3a>
    out_rev_(output, "nan", 3, width, flags);
 8001d78:	683b      	ldr	r3, [r7, #0]
 8001d7a:	9300      	str	r3, [sp, #0]
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	2203      	movs	r2, #3
 8001d80:	4943      	ldr	r1, [pc, #268]	; (8001e90 <print_floating_point+0x140>)
 8001d82:	6978      	ldr	r0, [r7, #20]
 8001d84:	f7ff fbd6 	bl	8001534 <out_rev_>
    return;
 8001d88:	e077      	b.n	8001e7a <print_floating_point+0x12a>
  }
  if (value < -DBL_MAX) {
 8001d8a:	f04f 32ff 	mov.w	r2, #4294967295
 8001d8e:	f46f 1380 	mvn.w	r3, #1048576	; 0x100000
 8001d92:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001d96:	f7fe fe49 	bl	8000a2c <__aeabi_dcmplt>
 8001d9a:	4603      	mov	r3, r0
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d008      	beq.n	8001db2 <print_floating_point+0x62>
    out_rev_(output, "fni-", 4, width, flags);
 8001da0:	683b      	ldr	r3, [r7, #0]
 8001da2:	9300      	str	r3, [sp, #0]
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	2204      	movs	r2, #4
 8001da8:	493a      	ldr	r1, [pc, #232]	; (8001e94 <print_floating_point+0x144>)
 8001daa:	6978      	ldr	r0, [r7, #20]
 8001dac:	f7ff fbc2 	bl	8001534 <out_rev_>
    return;
 8001db0:	e063      	b.n	8001e7a <print_floating_point+0x12a>
  }
  if (value > DBL_MAX) {
 8001db2:	f04f 32ff 	mov.w	r2, #4294967295
 8001db6:	4b38      	ldr	r3, [pc, #224]	; (8001e98 <print_floating_point+0x148>)
 8001db8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001dbc:	f7fe fe54 	bl	8000a68 <__aeabi_dcmpgt>
 8001dc0:	4603      	mov	r3, r0
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d016      	beq.n	8001df4 <print_floating_point+0xa4>
    out_rev_(output, (flags & FLAGS_PLUS) ? "fni+" : "fni", (flags & FLAGS_PLUS) ? 4U : 3U, width, flags);
 8001dc6:	683b      	ldr	r3, [r7, #0]
 8001dc8:	f003 0304 	and.w	r3, r3, #4
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d001      	beq.n	8001dd4 <print_floating_point+0x84>
 8001dd0:	4932      	ldr	r1, [pc, #200]	; (8001e9c <print_floating_point+0x14c>)
 8001dd2:	e000      	b.n	8001dd6 <print_floating_point+0x86>
 8001dd4:	4932      	ldr	r1, [pc, #200]	; (8001ea0 <print_floating_point+0x150>)
 8001dd6:	683b      	ldr	r3, [r7, #0]
 8001dd8:	f003 0304 	and.w	r3, r3, #4
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d001      	beq.n	8001de4 <print_floating_point+0x94>
 8001de0:	2204      	movs	r2, #4
 8001de2:	e000      	b.n	8001de6 <print_floating_point+0x96>
 8001de4:	2203      	movs	r2, #3
 8001de6:	683b      	ldr	r3, [r7, #0]
 8001de8:	9300      	str	r3, [sp, #0]
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	6978      	ldr	r0, [r7, #20]
 8001dee:	f7ff fba1 	bl	8001534 <out_rev_>
    return;
 8001df2:	e042      	b.n	8001e7a <print_floating_point+0x12a>
  }

  if (!prefer_exponential &&
 8001df4:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8001df8:	f083 0301 	eor.w	r3, r3, #1
 8001dfc:	b2db      	uxtb	r3, r3
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d013      	beq.n	8001e2a <print_floating_point+0xda>
 8001e02:	a31f      	add	r3, pc, #124	; (adr r3, 8001e80 <print_floating_point+0x130>)
 8001e04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e08:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001e0c:	f7fe fe2c 	bl	8000a68 <__aeabi_dcmpgt>
 8001e10:	4603      	mov	r3, r0
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d130      	bne.n	8001e78 <print_floating_point+0x128>
      ((value > PRINTF_FLOAT_NOTATION_THRESHOLD) || (value < -PRINTF_FLOAT_NOTATION_THRESHOLD))) {
 8001e16:	a31c      	add	r3, pc, #112	; (adr r3, 8001e88 <print_floating_point+0x138>)
 8001e18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e1c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001e20:	f7fe fe04 	bl	8000a2c <__aeabi_dcmplt>
 8001e24:	4603      	mov	r3, r0
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d126      	bne.n	8001e78 <print_floating_point+0x128>
#endif
    return;
  }

  // set default precision, if not set explicitly
  if (!(flags & FLAGS_PRECISION)) {
 8001e2a:	683b      	ldr	r3, [r7, #0]
 8001e2c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d10d      	bne.n	8001e50 <print_floating_point+0x100>
    precision = PRINTF_DEFAULT_FLOAT_PRECISION;
 8001e34:	2306      	movs	r3, #6
 8001e36:	613b      	str	r3, [r7, #16]
  }

  // limit precision so that our integer holding the fractional part does not overflow
  while ((len < PRINTF_DECIMAL_BUFFER_SIZE) && (precision > PRINTF_MAX_SUPPORTED_PRECISION)) {
 8001e38:	e00a      	b.n	8001e50 <print_floating_point+0x100>
    buf[len++] = '0'; // This respects the precision in terms of result length only
 8001e3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001e3c:	1c5a      	adds	r2, r3, #1
 8001e3e:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001e40:	3340      	adds	r3, #64	; 0x40
 8001e42:	443b      	add	r3, r7
 8001e44:	2230      	movs	r2, #48	; 0x30
 8001e46:	f803 2c24 	strb.w	r2, [r3, #-36]
    precision--;
 8001e4a:	693b      	ldr	r3, [r7, #16]
 8001e4c:	3b01      	subs	r3, #1
 8001e4e:	613b      	str	r3, [r7, #16]
  while ((len < PRINTF_DECIMAL_BUFFER_SIZE) && (precision > PRINTF_MAX_SUPPORTED_PRECISION)) {
 8001e50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001e52:	2b1f      	cmp	r3, #31
 8001e54:	d802      	bhi.n	8001e5c <print_floating_point+0x10c>
 8001e56:	693b      	ldr	r3, [r7, #16]
 8001e58:	2b11      	cmp	r3, #17
 8001e5a:	d8ee      	bhi.n	8001e3a <print_floating_point+0xea>
#if PRINTF_SUPPORT_EXPONENTIAL_SPECIFIERS
  if (prefer_exponential)
    print_exponential_number(output, value, precision, width, flags, buf, len);
  else
#endif
    print_decimal_number(output, value, precision, width, flags, buf, len);
 8001e5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001e5e:	9301      	str	r3, [sp, #4]
 8001e60:	f107 031c 	add.w	r3, r7, #28
 8001e64:	9300      	str	r3, [sp, #0]
 8001e66:	683b      	ldr	r3, [r7, #0]
 8001e68:	687a      	ldr	r2, [r7, #4]
 8001e6a:	6939      	ldr	r1, [r7, #16]
 8001e6c:	ed97 0b02 	vldr	d0, [r7, #8]
 8001e70:	6978      	ldr	r0, [r7, #20]
 8001e72:	f7ff ff3f 	bl	8001cf4 <print_decimal_number>
 8001e76:	e000      	b.n	8001e7a <print_floating_point+0x12a>
    return;
 8001e78:	bf00      	nop
}
 8001e7a:	3740      	adds	r7, #64	; 0x40
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	bd80      	pop	{r7, pc}
 8001e80:	00000000 	.word	0x00000000
 8001e84:	41cdcd65 	.word	0x41cdcd65
 8001e88:	00000000 	.word	0x00000000
 8001e8c:	c1cdcd65 	.word	0xc1cdcd65
 8001e90:	0800affc 	.word	0x0800affc
 8001e94:	0800b000 	.word	0x0800b000
 8001e98:	7fefffff 	.word	0x7fefffff
 8001e9c:	0800b008 	.word	0x0800b008
 8001ea0:	0800b010 	.word	0x0800b010

08001ea4 <parse_flags>:
#endif  // (PRINTF_SUPPORT_DECIMAL_SPECIFIERS || PRINTF_SUPPORT_EXPONENTIAL_SPECIFIERS)

// Advances the format pointer past the flags, and returns the parsed flags
// due to the characters passed
static printf_flags_t parse_flags(const char** format)
{
 8001ea4:	b480      	push	{r7}
 8001ea6:	b085      	sub	sp, #20
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
  printf_flags_t flags = 0U;
 8001eac:	2300      	movs	r3, #0
 8001eae:	60fb      	str	r3, [r7, #12]
  do {
    switch (**format) {
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	781b      	ldrb	r3, [r3, #0]
 8001eb6:	3b20      	subs	r3, #32
 8001eb8:	2b10      	cmp	r3, #16
 8001eba:	d857      	bhi.n	8001f6c <parse_flags+0xc8>
 8001ebc:	a201      	add	r2, pc, #4	; (adr r2, 8001ec4 <parse_flags+0x20>)
 8001ebe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ec2:	bf00      	nop
 8001ec4:	08001f45 	.word	0x08001f45
 8001ec8:	08001f6d 	.word	0x08001f6d
 8001ecc:	08001f6d 	.word	0x08001f6d
 8001ed0:	08001f59 	.word	0x08001f59
 8001ed4:	08001f6d 	.word	0x08001f6d
 8001ed8:	08001f6d 	.word	0x08001f6d
 8001edc:	08001f6d 	.word	0x08001f6d
 8001ee0:	08001f6d 	.word	0x08001f6d
 8001ee4:	08001f6d 	.word	0x08001f6d
 8001ee8:	08001f6d 	.word	0x08001f6d
 8001eec:	08001f6d 	.word	0x08001f6d
 8001ef0:	08001f31 	.word	0x08001f31
 8001ef4:	08001f6d 	.word	0x08001f6d
 8001ef8:	08001f1d 	.word	0x08001f1d
 8001efc:	08001f6d 	.word	0x08001f6d
 8001f00:	08001f6d 	.word	0x08001f6d
 8001f04:	08001f09 	.word	0x08001f09
      case '0': flags |= FLAGS_ZEROPAD; (*format)++; break;
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	f043 0301 	orr.w	r3, r3, #1
 8001f0e:	60fb      	str	r3, [r7, #12]
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	1c5a      	adds	r2, r3, #1
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	601a      	str	r2, [r3, #0]
 8001f1a:	e029      	b.n	8001f70 <parse_flags+0xcc>
      case '-': flags |= FLAGS_LEFT;    (*format)++; break;
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	f043 0302 	orr.w	r3, r3, #2
 8001f22:	60fb      	str	r3, [r7, #12]
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	1c5a      	adds	r2, r3, #1
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	601a      	str	r2, [r3, #0]
 8001f2e:	e01f      	b.n	8001f70 <parse_flags+0xcc>
      case '+': flags |= FLAGS_PLUS;    (*format)++; break;
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	f043 0304 	orr.w	r3, r3, #4
 8001f36:	60fb      	str	r3, [r7, #12]
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	1c5a      	adds	r2, r3, #1
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	601a      	str	r2, [r3, #0]
 8001f42:	e015      	b.n	8001f70 <parse_flags+0xcc>
      case ' ': flags |= FLAGS_SPACE;   (*format)++; break;
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	f043 0308 	orr.w	r3, r3, #8
 8001f4a:	60fb      	str	r3, [r7, #12]
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	1c5a      	adds	r2, r3, #1
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	601a      	str	r2, [r3, #0]
 8001f56:	e00b      	b.n	8001f70 <parse_flags+0xcc>
      case '#': flags |= FLAGS_HASH;    (*format)++; break;
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	f043 0310 	orr.w	r3, r3, #16
 8001f5e:	60fb      	str	r3, [r7, #12]
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	1c5a      	adds	r2, r3, #1
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	601a      	str	r2, [r3, #0]
 8001f6a:	e001      	b.n	8001f70 <parse_flags+0xcc>
      default : return flags;
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	e000      	b.n	8001f72 <parse_flags+0xce>
    switch (**format) {
 8001f70:	e79e      	b.n	8001eb0 <parse_flags+0xc>
    }
  } while (true);
}
 8001f72:	4618      	mov	r0, r3
 8001f74:	3714      	adds	r7, #20
 8001f76:	46bd      	mov	sp, r7
 8001f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7c:	4770      	bx	lr
 8001f7e:	bf00      	nop

08001f80 <format_string_loop>:

static inline void format_string_loop(output_gadget_t* output, const char* format, va_list args)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	b096      	sub	sp, #88	; 0x58
 8001f84:	af04      	add	r7, sp, #16
 8001f86:	60f8      	str	r0, [r7, #12]
 8001f88:	60b9      	str	r1, [r7, #8]
 8001f8a:	607a      	str	r2, [r7, #4]
#else
#define ADVANCE_IN_FORMAT_STRING(cptr_) (cptr_)++
#endif


  while (*format)
 8001f8c:	e3a1      	b.n	80026d2 <format_string_loop+0x752>
  {
    if (*format != '%') {
 8001f8e:	68bb      	ldr	r3, [r7, #8]
 8001f90:	781b      	ldrb	r3, [r3, #0]
 8001f92:	2b25      	cmp	r3, #37	; 0x25
 8001f94:	d009      	beq.n	8001faa <format_string_loop+0x2a>
      // A regular content character
      putchar_via_gadget(output, *format);
 8001f96:	68bb      	ldr	r3, [r7, #8]
 8001f98:	781b      	ldrb	r3, [r3, #0]
 8001f9a:	4619      	mov	r1, r3
 8001f9c:	68f8      	ldr	r0, [r7, #12]
 8001f9e:	f7ff f9dc 	bl	800135a <putchar_via_gadget>
      format++;
 8001fa2:	68bb      	ldr	r3, [r7, #8]
 8001fa4:	3301      	adds	r3, #1
 8001fa6:	60bb      	str	r3, [r7, #8]
      continue;
 8001fa8:	e393      	b.n	80026d2 <format_string_loop+0x752>
    }
    // We're parsing a format specifier: %[flags][width][.precision][length]
    ADVANCE_IN_FORMAT_STRING(format);
 8001faa:	68bb      	ldr	r3, [r7, #8]
 8001fac:	3301      	adds	r3, #1
 8001fae:	60bb      	str	r3, [r7, #8]
 8001fb0:	68bb      	ldr	r3, [r7, #8]
 8001fb2:	781b      	ldrb	r3, [r3, #0]
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	f000 8392 	beq.w	80026de <format_string_loop+0x75e>

    printf_flags_t flags = parse_flags(&format);
 8001fba:	f107 0308 	add.w	r3, r7, #8
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	f7ff ff70 	bl	8001ea4 <parse_flags>
 8001fc4:	6478      	str	r0, [r7, #68]	; 0x44

    // evaluate width field
    printf_size_t width = 0U;
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	643b      	str	r3, [r7, #64]	; 0x40
    if (is_digit_(*format)) {
 8001fca:	68bb      	ldr	r3, [r7, #8]
 8001fcc:	781b      	ldrb	r3, [r3, #0]
 8001fce:	4618      	mov	r0, r3
 8001fd0:	f7ff fa75 	bl	80014be <is_digit_>
 8001fd4:	4603      	mov	r3, r0
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d006      	beq.n	8001fe8 <format_string_loop+0x68>
      width = (printf_size_t) atou_(&format);
 8001fda:	f107 0308 	add.w	r3, r7, #8
 8001fde:	4618      	mov	r0, r3
 8001fe0:	f7ff fa84 	bl	80014ec <atou_>
 8001fe4:	6438      	str	r0, [r7, #64]	; 0x40
 8001fe6:	e01d      	b.n	8002024 <format_string_loop+0xa4>
    }
    else if (*format == '*') {
 8001fe8:	68bb      	ldr	r3, [r7, #8]
 8001fea:	781b      	ldrb	r3, [r3, #0]
 8001fec:	2b2a      	cmp	r3, #42	; 0x2a
 8001fee:	d119      	bne.n	8002024 <format_string_loop+0xa4>
      const int w = va_arg(args, int);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	1d1a      	adds	r2, r3, #4
 8001ff4:	607a      	str	r2, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	62bb      	str	r3, [r7, #40]	; 0x28
      if (w < 0) {
 8001ffa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	da07      	bge.n	8002010 <format_string_loop+0x90>
        flags |= FLAGS_LEFT;    // reverse padding
 8002000:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002002:	f043 0302 	orr.w	r3, r3, #2
 8002006:	647b      	str	r3, [r7, #68]	; 0x44
        width = (printf_size_t)-w;
 8002008:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800200a:	425b      	negs	r3, r3
 800200c:	643b      	str	r3, [r7, #64]	; 0x40
 800200e:	e001      	b.n	8002014 <format_string_loop+0x94>
      }
      else {
        width = (printf_size_t)w;
 8002010:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002012:	643b      	str	r3, [r7, #64]	; 0x40
      }
      ADVANCE_IN_FORMAT_STRING(format);
 8002014:	68bb      	ldr	r3, [r7, #8]
 8002016:	3301      	adds	r3, #1
 8002018:	60bb      	str	r3, [r7, #8]
 800201a:	68bb      	ldr	r3, [r7, #8]
 800201c:	781b      	ldrb	r3, [r3, #0]
 800201e:	2b00      	cmp	r3, #0
 8002020:	f000 835f 	beq.w	80026e2 <format_string_loop+0x762>
    }

    // evaluate precision field
    printf_size_t precision = 0U;
 8002024:	2300      	movs	r3, #0
 8002026:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (*format == '.') {
 8002028:	68bb      	ldr	r3, [r7, #8]
 800202a:	781b      	ldrb	r3, [r3, #0]
 800202c:	2b2e      	cmp	r3, #46	; 0x2e
 800202e:	d12f      	bne.n	8002090 <format_string_loop+0x110>
      flags |= FLAGS_PRECISION;
 8002030:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002032:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002036:	647b      	str	r3, [r7, #68]	; 0x44
      ADVANCE_IN_FORMAT_STRING(format);
 8002038:	68bb      	ldr	r3, [r7, #8]
 800203a:	3301      	adds	r3, #1
 800203c:	60bb      	str	r3, [r7, #8]
 800203e:	68bb      	ldr	r3, [r7, #8]
 8002040:	781b      	ldrb	r3, [r3, #0]
 8002042:	2b00      	cmp	r3, #0
 8002044:	f000 834f 	beq.w	80026e6 <format_string_loop+0x766>
      if (is_digit_(*format)) {
 8002048:	68bb      	ldr	r3, [r7, #8]
 800204a:	781b      	ldrb	r3, [r3, #0]
 800204c:	4618      	mov	r0, r3
 800204e:	f7ff fa36 	bl	80014be <is_digit_>
 8002052:	4603      	mov	r3, r0
 8002054:	2b00      	cmp	r3, #0
 8002056:	d006      	beq.n	8002066 <format_string_loop+0xe6>
        precision = (printf_size_t) atou_(&format);
 8002058:	f107 0308 	add.w	r3, r7, #8
 800205c:	4618      	mov	r0, r3
 800205e:	f7ff fa45 	bl	80014ec <atou_>
 8002062:	63f8      	str	r0, [r7, #60]	; 0x3c
 8002064:	e014      	b.n	8002090 <format_string_loop+0x110>
      }
      else if (*format == '*') {
 8002066:	68bb      	ldr	r3, [r7, #8]
 8002068:	781b      	ldrb	r3, [r3, #0]
 800206a:	2b2a      	cmp	r3, #42	; 0x2a
 800206c:	d110      	bne.n	8002090 <format_string_loop+0x110>
        const int precision_ = va_arg(args, int);
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	1d1a      	adds	r2, r3, #4
 8002072:	607a      	str	r2, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	627b      	str	r3, [r7, #36]	; 0x24
        precision = precision_ > 0 ? (printf_size_t) precision_ : 0U;
 8002078:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800207a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800207e:	63fb      	str	r3, [r7, #60]	; 0x3c
        ADVANCE_IN_FORMAT_STRING(format);
 8002080:	68bb      	ldr	r3, [r7, #8]
 8002082:	3301      	adds	r3, #1
 8002084:	60bb      	str	r3, [r7, #8]
 8002086:	68bb      	ldr	r3, [r7, #8]
 8002088:	781b      	ldrb	r3, [r3, #0]
 800208a:	2b00      	cmp	r3, #0
 800208c:	f000 832d 	beq.w	80026ea <format_string_loop+0x76a>
      }
    }

    // evaluate length field
    switch (*format) {
 8002090:	68bb      	ldr	r3, [r7, #8]
 8002092:	781b      	ldrb	r3, [r3, #0]
 8002094:	3b68      	subs	r3, #104	; 0x68
 8002096:	2b12      	cmp	r3, #18
 8002098:	f200 8087 	bhi.w	80021aa <format_string_loop+0x22a>
 800209c:	a201      	add	r2, pc, #4	; (adr r2, 80020a4 <format_string_loop+0x124>)
 800209e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020a2:	bf00      	nop
 80020a4:	08002129 	.word	0x08002129
 80020a8:	080021ab 	.word	0x080021ab
 80020ac:	08002179 	.word	0x08002179
 80020b0:	080021ab 	.word	0x080021ab
 80020b4:	080020f1 	.word	0x080020f1
 80020b8:	080021ab 	.word	0x080021ab
 80020bc:	080021ab 	.word	0x080021ab
 80020c0:	080021ab 	.word	0x080021ab
 80020c4:	080021ab 	.word	0x080021ab
 80020c8:	080021ab 	.word	0x080021ab
 80020cc:	080021ab 	.word	0x080021ab
 80020d0:	080021ab 	.word	0x080021ab
 80020d4:	08002161 	.word	0x08002161
 80020d8:	080021ab 	.word	0x080021ab
 80020dc:	080021ab 	.word	0x080021ab
 80020e0:	080021ab 	.word	0x080021ab
 80020e4:	080021ab 	.word	0x080021ab
 80020e8:	080021ab 	.word	0x080021ab
 80020ec:	08002191 	.word	0x08002191
        }
        break;
      }
#endif
      case 'l' :
        flags |= FLAGS_LONG;
 80020f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80020f2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80020f6:	647b      	str	r3, [r7, #68]	; 0x44
        ADVANCE_IN_FORMAT_STRING(format);
 80020f8:	68bb      	ldr	r3, [r7, #8]
 80020fa:	3301      	adds	r3, #1
 80020fc:	60bb      	str	r3, [r7, #8]
 80020fe:	68bb      	ldr	r3, [r7, #8]
 8002100:	781b      	ldrb	r3, [r3, #0]
 8002102:	2b00      	cmp	r3, #0
 8002104:	f000 82f3 	beq.w	80026ee <format_string_loop+0x76e>
        if (*format == 'l') {
 8002108:	68bb      	ldr	r3, [r7, #8]
 800210a:	781b      	ldrb	r3, [r3, #0]
 800210c:	2b6c      	cmp	r3, #108	; 0x6c
 800210e:	d14e      	bne.n	80021ae <format_string_loop+0x22e>
          flags |= FLAGS_LONG_LONG;
 8002110:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002112:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002116:	647b      	str	r3, [r7, #68]	; 0x44
          ADVANCE_IN_FORMAT_STRING(format);
 8002118:	68bb      	ldr	r3, [r7, #8]
 800211a:	3301      	adds	r3, #1
 800211c:	60bb      	str	r3, [r7, #8]
 800211e:	68bb      	ldr	r3, [r7, #8]
 8002120:	781b      	ldrb	r3, [r3, #0]
 8002122:	2b00      	cmp	r3, #0
 8002124:	d143      	bne.n	80021ae <format_string_loop+0x22e>
 8002126:	e2e7      	b.n	80026f8 <format_string_loop+0x778>
        }
        break;
      case 'h' :
        flags |= FLAGS_SHORT;
 8002128:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800212a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800212e:	647b      	str	r3, [r7, #68]	; 0x44
        ADVANCE_IN_FORMAT_STRING(format);
 8002130:	68bb      	ldr	r3, [r7, #8]
 8002132:	3301      	adds	r3, #1
 8002134:	60bb      	str	r3, [r7, #8]
 8002136:	68bb      	ldr	r3, [r7, #8]
 8002138:	781b      	ldrb	r3, [r3, #0]
 800213a:	2b00      	cmp	r3, #0
 800213c:	f000 82d9 	beq.w	80026f2 <format_string_loop+0x772>
        if (*format == 'h') {
 8002140:	68bb      	ldr	r3, [r7, #8]
 8002142:	781b      	ldrb	r3, [r3, #0]
 8002144:	2b68      	cmp	r3, #104	; 0x68
 8002146:	d134      	bne.n	80021b2 <format_string_loop+0x232>
          flags |= FLAGS_CHAR;
 8002148:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800214a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800214e:	647b      	str	r3, [r7, #68]	; 0x44
          ADVANCE_IN_FORMAT_STRING(format);
 8002150:	68bb      	ldr	r3, [r7, #8]
 8002152:	3301      	adds	r3, #1
 8002154:	60bb      	str	r3, [r7, #8]
 8002156:	68bb      	ldr	r3, [r7, #8]
 8002158:	781b      	ldrb	r3, [r3, #0]
 800215a:	2b00      	cmp	r3, #0
 800215c:	d129      	bne.n	80021b2 <format_string_loop+0x232>
 800215e:	e2cb      	b.n	80026f8 <format_string_loop+0x778>
        }
        break;
      case 't' :
        flags |= (sizeof(ptrdiff_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 8002160:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002162:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002166:	647b      	str	r3, [r7, #68]	; 0x44
        ADVANCE_IN_FORMAT_STRING(format);
 8002168:	68bb      	ldr	r3, [r7, #8]
 800216a:	3301      	adds	r3, #1
 800216c:	60bb      	str	r3, [r7, #8]
 800216e:	68bb      	ldr	r3, [r7, #8]
 8002170:	781b      	ldrb	r3, [r3, #0]
 8002172:	2b00      	cmp	r3, #0
 8002174:	d11f      	bne.n	80021b6 <format_string_loop+0x236>
 8002176:	e2bf      	b.n	80026f8 <format_string_loop+0x778>
        break;
      case 'j' :
        flags |= (sizeof(intmax_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 8002178:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800217a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800217e:	647b      	str	r3, [r7, #68]	; 0x44
        ADVANCE_IN_FORMAT_STRING(format);
 8002180:	68bb      	ldr	r3, [r7, #8]
 8002182:	3301      	adds	r3, #1
 8002184:	60bb      	str	r3, [r7, #8]
 8002186:	68bb      	ldr	r3, [r7, #8]
 8002188:	781b      	ldrb	r3, [r3, #0]
 800218a:	2b00      	cmp	r3, #0
 800218c:	d115      	bne.n	80021ba <format_string_loop+0x23a>
 800218e:	e2b3      	b.n	80026f8 <format_string_loop+0x778>
        break;
      case 'z' :
        flags |= (sizeof(size_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 8002190:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002192:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002196:	647b      	str	r3, [r7, #68]	; 0x44
        ADVANCE_IN_FORMAT_STRING(format);
 8002198:	68bb      	ldr	r3, [r7, #8]
 800219a:	3301      	adds	r3, #1
 800219c:	60bb      	str	r3, [r7, #8]
 800219e:	68bb      	ldr	r3, [r7, #8]
 80021a0:	781b      	ldrb	r3, [r3, #0]
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	f000 82a7 	beq.w	80026f6 <format_string_loop+0x776>
        break;
 80021a8:	e008      	b.n	80021bc <format_string_loop+0x23c>
      default:
        break;
 80021aa:	bf00      	nop
 80021ac:	e006      	b.n	80021bc <format_string_loop+0x23c>
        break;
 80021ae:	bf00      	nop
 80021b0:	e004      	b.n	80021bc <format_string_loop+0x23c>
        break;
 80021b2:	bf00      	nop
 80021b4:	e002      	b.n	80021bc <format_string_loop+0x23c>
        break;
 80021b6:	bf00      	nop
 80021b8:	e000      	b.n	80021bc <format_string_loop+0x23c>
        break;
 80021ba:	bf00      	nop
    }

    // evaluate specifier
    switch (*format) {
 80021bc:	68bb      	ldr	r3, [r7, #8]
 80021be:	781b      	ldrb	r3, [r3, #0]
 80021c0:	3b25      	subs	r3, #37	; 0x25
 80021c2:	2b53      	cmp	r3, #83	; 0x53
 80021c4:	f200 827b 	bhi.w	80026be <format_string_loop+0x73e>
 80021c8:	a201      	add	r2, pc, #4	; (adr r2, 80021d0 <format_string_loop+0x250>)
 80021ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021ce:	bf00      	nop
 80021d0:	080026af 	.word	0x080026af
 80021d4:	080026bf 	.word	0x080026bf
 80021d8:	080026bf 	.word	0x080026bf
 80021dc:	080026bf 	.word	0x080026bf
 80021e0:	080026bf 	.word	0x080026bf
 80021e4:	080026bf 	.word	0x080026bf
 80021e8:	080026bf 	.word	0x080026bf
 80021ec:	080026bf 	.word	0x080026bf
 80021f0:	080026bf 	.word	0x080026bf
 80021f4:	080026bf 	.word	0x080026bf
 80021f8:	080026bf 	.word	0x080026bf
 80021fc:	080026bf 	.word	0x080026bf
 8002200:	080026bf 	.word	0x080026bf
 8002204:	080026bf 	.word	0x080026bf
 8002208:	080026bf 	.word	0x080026bf
 800220c:	080026bf 	.word	0x080026bf
 8002210:	080026bf 	.word	0x080026bf
 8002214:	080026bf 	.word	0x080026bf
 8002218:	080026bf 	.word	0x080026bf
 800221c:	080026bf 	.word	0x080026bf
 8002220:	080026bf 	.word	0x080026bf
 8002224:	080026bf 	.word	0x080026bf
 8002228:	080026bf 	.word	0x080026bf
 800222c:	080026bf 	.word	0x080026bf
 8002230:	080026bf 	.word	0x080026bf
 8002234:	080026bf 	.word	0x080026bf
 8002238:	080026bf 	.word	0x080026bf
 800223c:	080026bf 	.word	0x080026bf
 8002240:	080026bf 	.word	0x080026bf
 8002244:	080026bf 	.word	0x080026bf
 8002248:	080026bf 	.word	0x080026bf
 800224c:	080026bf 	.word	0x080026bf
 8002250:	080026bf 	.word	0x080026bf
 8002254:	080024f5 	.word	0x080024f5
 8002258:	080026bf 	.word	0x080026bf
 800225c:	080026bf 	.word	0x080026bf
 8002260:	080026bf 	.word	0x080026bf
 8002264:	080026bf 	.word	0x080026bf
 8002268:	080026bf 	.word	0x080026bf
 800226c:	080026bf 	.word	0x080026bf
 8002270:	080026bf 	.word	0x080026bf
 8002274:	080026bf 	.word	0x080026bf
 8002278:	080026bf 	.word	0x080026bf
 800227c:	080026bf 	.word	0x080026bf
 8002280:	080026bf 	.word	0x080026bf
 8002284:	080026bf 	.word	0x080026bf
 8002288:	080026bf 	.word	0x080026bf
 800228c:	080026bf 	.word	0x080026bf
 8002290:	080026bf 	.word	0x080026bf
 8002294:	080026bf 	.word	0x080026bf
 8002298:	080026bf 	.word	0x080026bf
 800229c:	08002321 	.word	0x08002321
 80022a0:	080026bf 	.word	0x080026bf
 80022a4:	080026bf 	.word	0x080026bf
 80022a8:	080026bf 	.word	0x080026bf
 80022ac:	080026bf 	.word	0x080026bf
 80022b0:	080026bf 	.word	0x080026bf
 80022b4:	080026bf 	.word	0x080026bf
 80022b8:	080026bf 	.word	0x080026bf
 80022bc:	080026bf 	.word	0x080026bf
 80022c0:	080026bf 	.word	0x080026bf
 80022c4:	08002321 	.word	0x08002321
 80022c8:	08002537 	.word	0x08002537
 80022cc:	08002321 	.word	0x08002321
 80022d0:	080026bf 	.word	0x080026bf
 80022d4:	080024f5 	.word	0x080024f5
 80022d8:	080026bf 	.word	0x080026bf
 80022dc:	080026bf 	.word	0x080026bf
 80022e0:	08002321 	.word	0x08002321
 80022e4:	080026bf 	.word	0x080026bf
 80022e8:	080026bf 	.word	0x080026bf
 80022ec:	080026bf 	.word	0x080026bf
 80022f0:	080026bf 	.word	0x080026bf
 80022f4:	080026bf 	.word	0x080026bf
 80022f8:	08002321 	.word	0x08002321
 80022fc:	0800265d 	.word	0x0800265d
 8002300:	080026bf 	.word	0x080026bf
 8002304:	080026bf 	.word	0x080026bf
 8002308:	08002595 	.word	0x08002595
 800230c:	080026bf 	.word	0x080026bf
 8002310:	08002321 	.word	0x08002321
 8002314:	080026bf 	.word	0x080026bf
 8002318:	080026bf 	.word	0x080026bf
 800231c:	08002321 	.word	0x08002321
      case 'x' :
      case 'X' :
      case 'o' :
      case 'b' : {

        if (*format == 'd' || *format == 'i') {
 8002320:	68bb      	ldr	r3, [r7, #8]
 8002322:	781b      	ldrb	r3, [r3, #0]
 8002324:	2b64      	cmp	r3, #100	; 0x64
 8002326:	d003      	beq.n	8002330 <format_string_loop+0x3b0>
 8002328:	68bb      	ldr	r3, [r7, #8]
 800232a:	781b      	ldrb	r3, [r3, #0]
 800232c:	2b69      	cmp	r3, #105	; 0x69
 800232e:	d103      	bne.n	8002338 <format_string_loop+0x3b8>
          flags |= FLAGS_SIGNED;
 8002330:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002332:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002336:	647b      	str	r3, [r7, #68]	; 0x44
        }

        numeric_base_t base;
        if (*format == 'x' || *format == 'X') {
 8002338:	68bb      	ldr	r3, [r7, #8]
 800233a:	781b      	ldrb	r3, [r3, #0]
 800233c:	2b78      	cmp	r3, #120	; 0x78
 800233e:	d003      	beq.n	8002348 <format_string_loop+0x3c8>
 8002340:	68bb      	ldr	r3, [r7, #8]
 8002342:	781b      	ldrb	r3, [r3, #0]
 8002344:	2b58      	cmp	r3, #88	; 0x58
 8002346:	d103      	bne.n	8002350 <format_string_loop+0x3d0>
          base = BASE_HEX;
 8002348:	2310      	movs	r3, #16
 800234a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800234e:	e016      	b.n	800237e <format_string_loop+0x3fe>
        }
        else if (*format == 'o') {
 8002350:	68bb      	ldr	r3, [r7, #8]
 8002352:	781b      	ldrb	r3, [r3, #0]
 8002354:	2b6f      	cmp	r3, #111	; 0x6f
 8002356:	d103      	bne.n	8002360 <format_string_loop+0x3e0>
          base =  BASE_OCTAL;
 8002358:	2308      	movs	r3, #8
 800235a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800235e:	e00e      	b.n	800237e <format_string_loop+0x3fe>
        }
        else if (*format == 'b') {
 8002360:	68bb      	ldr	r3, [r7, #8]
 8002362:	781b      	ldrb	r3, [r3, #0]
 8002364:	2b62      	cmp	r3, #98	; 0x62
 8002366:	d103      	bne.n	8002370 <format_string_loop+0x3f0>
          base =  BASE_BINARY;
 8002368:	2302      	movs	r3, #2
 800236a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800236e:	e006      	b.n	800237e <format_string_loop+0x3fe>
        }
        else {
          base = BASE_DECIMAL;
 8002370:	230a      	movs	r3, #10
 8002372:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
          flags &= ~FLAGS_HASH; // decimal integers have no alternative presentation
 8002376:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002378:	f023 0310 	bic.w	r3, r3, #16
 800237c:	647b      	str	r3, [r7, #68]	; 0x44
        }

        if (*format == 'X') {
 800237e:	68bb      	ldr	r3, [r7, #8]
 8002380:	781b      	ldrb	r3, [r3, #0]
 8002382:	2b58      	cmp	r3, #88	; 0x58
 8002384:	d103      	bne.n	800238e <format_string_loop+0x40e>
          flags |= FLAGS_UPPERCASE;
 8002386:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002388:	f043 0320 	orr.w	r3, r3, #32
 800238c:	647b      	str	r3, [r7, #68]	; 0x44
        }

        format++;
 800238e:	68bb      	ldr	r3, [r7, #8]
 8002390:	3301      	adds	r3, #1
 8002392:	60bb      	str	r3, [r7, #8]
        // ignore '0' flag when precision is given
        if (flags & FLAGS_PRECISION) {
 8002394:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002396:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800239a:	2b00      	cmp	r3, #0
 800239c:	d003      	beq.n	80023a6 <format_string_loop+0x426>
          flags &= ~FLAGS_ZEROPAD;
 800239e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80023a0:	f023 0301 	bic.w	r3, r3, #1
 80023a4:	647b      	str	r3, [r7, #68]	; 0x44
        }

        if (flags & FLAGS_SIGNED) {
 80023a6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80023a8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d056      	beq.n	800245e <format_string_loop+0x4de>
          // A signed specifier: d, i or possibly I + bit size if enabled

          if (flags & FLAGS_LONG_LONG) {
 80023b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80023b2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	f040 818b 	bne.w	80026d2 <format_string_loop+0x752>
#if PRINTF_SUPPORT_LONG_LONG
            const long long value = va_arg(args, long long);
            print_integer(output, ABS_FOR_PRINTING(value), value < 0, base, precision, width, flags);
#endif
          }
          else if (flags & FLAGS_LONG) {
 80023bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80023be:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d01a      	beq.n	80023fc <format_string_loop+0x47c>
            const long value = va_arg(args, long);
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	1d1a      	adds	r2, r3, #4
 80023ca:	607a      	str	r2, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	617b      	str	r3, [r7, #20]
            print_integer(output, ABS_FOR_PRINTING(value), value < 0, base, precision, width, flags);
 80023d0:	697b      	ldr	r3, [r7, #20]
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	bfb8      	it	lt
 80023d6:	425b      	neglt	r3, r3
 80023d8:	4618      	mov	r0, r3
 80023da:	697b      	ldr	r3, [r7, #20]
 80023dc:	0fdb      	lsrs	r3, r3, #31
 80023de:	b2da      	uxtb	r2, r3
 80023e0:	f897 103b 	ldrb.w	r1, [r7, #59]	; 0x3b
 80023e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80023e6:	9302      	str	r3, [sp, #8]
 80023e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80023ea:	9301      	str	r3, [sp, #4]
 80023ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80023ee:	9300      	str	r3, [sp, #0]
 80023f0:	460b      	mov	r3, r1
 80023f2:	4601      	mov	r1, r0
 80023f4:	68f8      	ldr	r0, [r7, #12]
 80023f6:	f7ff f9d5 	bl	80017a4 <print_integer>
 80023fa:	e16a      	b.n	80026d2 <format_string_loop+0x752>
            // We never try to interpret the argument as something potentially-smaller than int,
            // due to integer promotion rules: Even if the user passed a short int, short unsigned
            // etc. - these will come in after promotion, as int's (or unsigned for the case of
            // short unsigned when it has the same size as int)
            const int value =
              (flags & FLAGS_CHAR) ? (signed char) va_arg(args, int) :
 80023fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80023fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002402:	2b00      	cmp	r3, #0
 8002404:	d005      	beq.n	8002412 <format_string_loop+0x492>
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	1d1a      	adds	r2, r3, #4
 800240a:	607a      	str	r2, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	b25b      	sxtb	r3, r3
 8002410:	e00e      	b.n	8002430 <format_string_loop+0x4b0>
              (flags & FLAGS_SHORT) ? (short int) va_arg(args, int) :
 8002412:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002414:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002418:	2b00      	cmp	r3, #0
 800241a:	d005      	beq.n	8002428 <format_string_loop+0x4a8>
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	1d1a      	adds	r2, r3, #4
 8002420:	607a      	str	r2, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	b21b      	sxth	r3, r3
 8002426:	e003      	b.n	8002430 <format_string_loop+0x4b0>
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	1d1a      	adds	r2, r3, #4
 800242c:	607a      	str	r2, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
            const int value =
 8002430:	61bb      	str	r3, [r7, #24]
              va_arg(args, int);
            print_integer(output, ABS_FOR_PRINTING(value), value < 0, base, precision, width, flags);
 8002432:	69bb      	ldr	r3, [r7, #24]
 8002434:	2b00      	cmp	r3, #0
 8002436:	bfb8      	it	lt
 8002438:	425b      	neglt	r3, r3
 800243a:	4618      	mov	r0, r3
 800243c:	69bb      	ldr	r3, [r7, #24]
 800243e:	0fdb      	lsrs	r3, r3, #31
 8002440:	b2da      	uxtb	r2, r3
 8002442:	f897 103b 	ldrb.w	r1, [r7, #59]	; 0x3b
 8002446:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002448:	9302      	str	r3, [sp, #8]
 800244a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800244c:	9301      	str	r3, [sp, #4]
 800244e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002450:	9300      	str	r3, [sp, #0]
 8002452:	460b      	mov	r3, r1
 8002454:	4601      	mov	r1, r0
 8002456:	68f8      	ldr	r0, [r7, #12]
 8002458:	f7ff f9a4 	bl	80017a4 <print_integer>
 800245c:	e139      	b.n	80026d2 <format_string_loop+0x752>
          }
        }
        else {
          // An unsigned specifier: u, x, X, o, b

          flags &= ~(FLAGS_PLUS | FLAGS_SPACE);
 800245e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002460:	f023 030c 	bic.w	r3, r3, #12
 8002464:	647b      	str	r3, [r7, #68]	; 0x44

          if (flags & FLAGS_LONG_LONG) {
 8002466:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002468:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800246c:	2b00      	cmp	r3, #0
 800246e:	f040 8130 	bne.w	80026d2 <format_string_loop+0x752>
#if PRINTF_SUPPORT_LONG_LONG
            print_integer(output, (printf_unsigned_value_t) va_arg(args, unsigned long long), false, base, precision, width, flags);
#endif
          }
          else if (flags & FLAGS_LONG) {
 8002472:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002474:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002478:	2b00      	cmp	r3, #0
 800247a:	d011      	beq.n	80024a0 <format_string_loop+0x520>
            print_integer(output, (printf_unsigned_value_t) va_arg(args, unsigned long), false, base, precision, width, flags);
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	1d1a      	adds	r2, r3, #4
 8002480:	607a      	str	r2, [r7, #4]
 8002482:	6819      	ldr	r1, [r3, #0]
 8002484:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 8002488:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800248a:	9302      	str	r3, [sp, #8]
 800248c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800248e:	9301      	str	r3, [sp, #4]
 8002490:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002492:	9300      	str	r3, [sp, #0]
 8002494:	4613      	mov	r3, r2
 8002496:	2200      	movs	r2, #0
 8002498:	68f8      	ldr	r0, [r7, #12]
 800249a:	f7ff f983 	bl	80017a4 <print_integer>
 800249e:	e118      	b.n	80026d2 <format_string_loop+0x752>
          }
          else {
            const unsigned int value =
              (flags & FLAGS_CHAR) ? (unsigned char)va_arg(args, unsigned int) :
 80024a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80024a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d005      	beq.n	80024b6 <format_string_loop+0x536>
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	1d1a      	adds	r2, r3, #4
 80024ae:	607a      	str	r2, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	b2db      	uxtb	r3, r3
 80024b4:	e00e      	b.n	80024d4 <format_string_loop+0x554>
              (flags & FLAGS_SHORT) ? (unsigned short int)va_arg(args, unsigned int) :
 80024b6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80024b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d005      	beq.n	80024cc <format_string_loop+0x54c>
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	1d1a      	adds	r2, r3, #4
 80024c4:	607a      	str	r2, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	b29b      	uxth	r3, r3
 80024ca:	e003      	b.n	80024d4 <format_string_loop+0x554>
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	1d1a      	adds	r2, r3, #4
 80024d0:	607a      	str	r2, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
            const unsigned int value =
 80024d4:	61fb      	str	r3, [r7, #28]
              va_arg(args, unsigned int);
            print_integer(output, (printf_unsigned_value_t) value, false, base, precision, width, flags);
 80024d6:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 80024da:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80024dc:	9302      	str	r3, [sp, #8]
 80024de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80024e0:	9301      	str	r3, [sp, #4]
 80024e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80024e4:	9300      	str	r3, [sp, #0]
 80024e6:	4613      	mov	r3, r2
 80024e8:	2200      	movs	r2, #0
 80024ea:	69f9      	ldr	r1, [r7, #28]
 80024ec:	68f8      	ldr	r0, [r7, #12]
 80024ee:	f7ff f959 	bl	80017a4 <print_integer>
          }
        }
        break;
 80024f2:	e0ee      	b.n	80026d2 <format_string_loop+0x752>
      }
#if PRINTF_SUPPORT_DECIMAL_SPECIFIERS
      case 'f' :
      case 'F' :
        if (*format == 'F') flags |= FLAGS_UPPERCASE;
 80024f4:	68bb      	ldr	r3, [r7, #8]
 80024f6:	781b      	ldrb	r3, [r3, #0]
 80024f8:	2b46      	cmp	r3, #70	; 0x46
 80024fa:	d103      	bne.n	8002504 <format_string_loop+0x584>
 80024fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80024fe:	f043 0320 	orr.w	r3, r3, #32
 8002502:	647b      	str	r3, [r7, #68]	; 0x44
        print_floating_point(output, va_arg(args, double), precision, width, flags, PRINTF_PREFER_DECIMAL);
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	3307      	adds	r3, #7
 8002508:	f023 0307 	bic.w	r3, r3, #7
 800250c:	f103 0208 	add.w	r2, r3, #8
 8002510:	607a      	str	r2, [r7, #4]
 8002512:	ed93 7b00 	vldr	d7, [r3]
 8002516:	2300      	movs	r3, #0
 8002518:	9300      	str	r3, [sp, #0]
 800251a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800251c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800251e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002520:	eeb0 0a47 	vmov.f32	s0, s14
 8002524:	eef0 0a67 	vmov.f32	s1, s15
 8002528:	68f8      	ldr	r0, [r7, #12]
 800252a:	f7ff fc11 	bl	8001d50 <print_floating_point>
        format++;
 800252e:	68bb      	ldr	r3, [r7, #8]
 8002530:	3301      	adds	r3, #1
 8002532:	60bb      	str	r3, [r7, #8]
        break;
 8002534:	e0cd      	b.n	80026d2 <format_string_loop+0x752>
        print_floating_point(output, va_arg(args, double), precision, width, flags, PRINTF_PREFER_EXPONENTIAL);
        format++;
        break;
#endif  // PRINTF_SUPPORT_EXPONENTIAL_SPECIFIERS
      case 'c' : {
        printf_size_t l = 1U;
 8002536:	2301      	movs	r3, #1
 8002538:	637b      	str	r3, [r7, #52]	; 0x34
        // pre padding
        if (!(flags & FLAGS_LEFT)) {
 800253a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800253c:	f003 0302 	and.w	r3, r3, #2
 8002540:	2b00      	cmp	r3, #0
 8002542:	d10a      	bne.n	800255a <format_string_loop+0x5da>
          while (l++ < width) {
 8002544:	e003      	b.n	800254e <format_string_loop+0x5ce>
            putchar_via_gadget(output, ' ');
 8002546:	2120      	movs	r1, #32
 8002548:	68f8      	ldr	r0, [r7, #12]
 800254a:	f7fe ff06 	bl	800135a <putchar_via_gadget>
          while (l++ < width) {
 800254e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002550:	1c5a      	adds	r2, r3, #1
 8002552:	637a      	str	r2, [r7, #52]	; 0x34
 8002554:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002556:	429a      	cmp	r2, r3
 8002558:	d8f5      	bhi.n	8002546 <format_string_loop+0x5c6>
          }
        }
        // char output
        putchar_via_gadget(output, (char) va_arg(args, int) );
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	1d1a      	adds	r2, r3, #4
 800255e:	607a      	str	r2, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	b2db      	uxtb	r3, r3
 8002564:	4619      	mov	r1, r3
 8002566:	68f8      	ldr	r0, [r7, #12]
 8002568:	f7fe fef7 	bl	800135a <putchar_via_gadget>
        // post padding
        if (flags & FLAGS_LEFT) {
 800256c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800256e:	f003 0302 	and.w	r3, r3, #2
 8002572:	2b00      	cmp	r3, #0
 8002574:	d00a      	beq.n	800258c <format_string_loop+0x60c>
          while (l++ < width) {
 8002576:	e003      	b.n	8002580 <format_string_loop+0x600>
            putchar_via_gadget(output, ' ');
 8002578:	2120      	movs	r1, #32
 800257a:	68f8      	ldr	r0, [r7, #12]
 800257c:	f7fe feed 	bl	800135a <putchar_via_gadget>
          while (l++ < width) {
 8002580:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002582:	1c5a      	adds	r2, r3, #1
 8002584:	637a      	str	r2, [r7, #52]	; 0x34
 8002586:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002588:	429a      	cmp	r2, r3
 800258a:	d8f5      	bhi.n	8002578 <format_string_loop+0x5f8>
          }
        }
        format++;
 800258c:	68bb      	ldr	r3, [r7, #8]
 800258e:	3301      	adds	r3, #1
 8002590:	60bb      	str	r3, [r7, #8]
        break;
 8002592:	e09e      	b.n	80026d2 <format_string_loop+0x752>
      }

      case 's' : {
        const char* p = va_arg(args, char*);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	1d1a      	adds	r2, r3, #4
 8002598:	607a      	str	r2, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	633b      	str	r3, [r7, #48]	; 0x30
        if (p == NULL) {
 800259e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d108      	bne.n	80025b6 <format_string_loop+0x636>
          out_rev_(output, ")llun(", 6, width, flags);
 80025a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80025a6:	9300      	str	r3, [sp, #0]
 80025a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80025aa:	2206      	movs	r2, #6
 80025ac:	4954      	ldr	r1, [pc, #336]	; (8002700 <format_string_loop+0x780>)
 80025ae:	68f8      	ldr	r0, [r7, #12]
 80025b0:	f7fe ffc0 	bl	8001534 <out_rev_>
 80025b4:	e04e      	b.n	8002654 <format_string_loop+0x6d4>
        }
        else {
          printf_size_t l = strnlen_s_(p, precision ? precision : PRINTF_MAX_POSSIBLE_BUFFER_SIZE);
 80025b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d001      	beq.n	80025c0 <format_string_loop+0x640>
 80025bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80025be:	e001      	b.n	80025c4 <format_string_loop+0x644>
 80025c0:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80025c4:	4619      	mov	r1, r3
 80025c6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80025c8:	f7fe ff5c 	bl	8001484 <strnlen_s_>
 80025cc:	62f8      	str	r0, [r7, #44]	; 0x2c
          // pre padding
          if (flags & FLAGS_PRECISION) {
 80025ce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80025d0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d005      	beq.n	80025e4 <format_string_loop+0x664>
            l = (l < precision ? l : precision);
 80025d8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80025da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80025dc:	4293      	cmp	r3, r2
 80025de:	bf28      	it	cs
 80025e0:	4613      	movcs	r3, r2
 80025e2:	62fb      	str	r3, [r7, #44]	; 0x2c
          }
          if (!(flags & FLAGS_LEFT)) {
 80025e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80025e6:	f003 0302 	and.w	r3, r3, #2
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d116      	bne.n	800261c <format_string_loop+0x69c>
            while (l++ < width) {
 80025ee:	e003      	b.n	80025f8 <format_string_loop+0x678>
              putchar_via_gadget(output, ' ');
 80025f0:	2120      	movs	r1, #32
 80025f2:	68f8      	ldr	r0, [r7, #12]
 80025f4:	f7fe feb1 	bl	800135a <putchar_via_gadget>
            while (l++ < width) {
 80025f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025fa:	1c5a      	adds	r2, r3, #1
 80025fc:	62fa      	str	r2, [r7, #44]	; 0x2c
 80025fe:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002600:	429a      	cmp	r2, r3
 8002602:	d8f5      	bhi.n	80025f0 <format_string_loop+0x670>
            }
          }
          // string output
          while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision)) {
 8002604:	e00a      	b.n	800261c <format_string_loop+0x69c>
            putchar_via_gadget(output, *(p++));
 8002606:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002608:	1c5a      	adds	r2, r3, #1
 800260a:	633a      	str	r2, [r7, #48]	; 0x30
 800260c:	781b      	ldrb	r3, [r3, #0]
 800260e:	4619      	mov	r1, r3
 8002610:	68f8      	ldr	r0, [r7, #12]
 8002612:	f7fe fea2 	bl	800135a <putchar_via_gadget>
            --precision;
 8002616:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002618:	3b01      	subs	r3, #1
 800261a:	63fb      	str	r3, [r7, #60]	; 0x3c
          while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision)) {
 800261c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800261e:	781b      	ldrb	r3, [r3, #0]
 8002620:	2b00      	cmp	r3, #0
 8002622:	d007      	beq.n	8002634 <format_string_loop+0x6b4>
 8002624:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002626:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800262a:	2b00      	cmp	r3, #0
 800262c:	d0eb      	beq.n	8002606 <format_string_loop+0x686>
 800262e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002630:	2b00      	cmp	r3, #0
 8002632:	d1e8      	bne.n	8002606 <format_string_loop+0x686>
          }
          // post padding
          if (flags & FLAGS_LEFT) {
 8002634:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002636:	f003 0302 	and.w	r3, r3, #2
 800263a:	2b00      	cmp	r3, #0
 800263c:	d00a      	beq.n	8002654 <format_string_loop+0x6d4>
            while (l++ < width) {
 800263e:	e003      	b.n	8002648 <format_string_loop+0x6c8>
              putchar_via_gadget(output, ' ');
 8002640:	2120      	movs	r1, #32
 8002642:	68f8      	ldr	r0, [r7, #12]
 8002644:	f7fe fe89 	bl	800135a <putchar_via_gadget>
            while (l++ < width) {
 8002648:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800264a:	1c5a      	adds	r2, r3, #1
 800264c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800264e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002650:	429a      	cmp	r2, r3
 8002652:	d8f5      	bhi.n	8002640 <format_string_loop+0x6c0>
            }
          }
        }
        format++;
 8002654:	68bb      	ldr	r3, [r7, #8]
 8002656:	3301      	adds	r3, #1
 8002658:	60bb      	str	r3, [r7, #8]
        break;
 800265a:	e03a      	b.n	80026d2 <format_string_loop+0x752>
      }

      case 'p' : {
        width = sizeof(void*) * 2U + 2; // 2 hex chars per byte + the "0x" prefix
 800265c:	230a      	movs	r3, #10
 800265e:	643b      	str	r3, [r7, #64]	; 0x40
        flags |= FLAGS_ZEROPAD | FLAGS_POINTER;
 8002660:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002662:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002666:	f043 0301 	orr.w	r3, r3, #1
 800266a:	647b      	str	r3, [r7, #68]	; 0x44
        uintptr_t value = (uintptr_t)va_arg(args, void*);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	1d1a      	adds	r2, r3, #4
 8002670:	607a      	str	r2, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	623b      	str	r3, [r7, #32]
        (value == (uintptr_t) NULL) ?
          out_rev_(output, ")lin(", 5, width, flags) :
 8002676:	6a3b      	ldr	r3, [r7, #32]
 8002678:	2b00      	cmp	r3, #0
 800267a:	d108      	bne.n	800268e <format_string_loop+0x70e>
 800267c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800267e:	9300      	str	r3, [sp, #0]
 8002680:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002682:	2205      	movs	r2, #5
 8002684:	491f      	ldr	r1, [pc, #124]	; (8002704 <format_string_loop+0x784>)
 8002686:	68f8      	ldr	r0, [r7, #12]
 8002688:	f7fe ff54 	bl	8001534 <out_rev_>
 800268c:	e00b      	b.n	80026a6 <format_string_loop+0x726>
          print_integer(output, (printf_unsigned_value_t) value, false, BASE_HEX, precision, width, flags);
 800268e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002690:	9302      	str	r3, [sp, #8]
 8002692:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002694:	9301      	str	r3, [sp, #4]
 8002696:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002698:	9300      	str	r3, [sp, #0]
 800269a:	2310      	movs	r3, #16
 800269c:	2200      	movs	r2, #0
 800269e:	6a39      	ldr	r1, [r7, #32]
 80026a0:	68f8      	ldr	r0, [r7, #12]
 80026a2:	f7ff f87f 	bl	80017a4 <print_integer>
        format++;
 80026a6:	68bb      	ldr	r3, [r7, #8]
 80026a8:	3301      	adds	r3, #1
 80026aa:	60bb      	str	r3, [r7, #8]
        break;
 80026ac:	e011      	b.n	80026d2 <format_string_loop+0x752>
      }

      case '%' :
        putchar_via_gadget(output, '%');
 80026ae:	2125      	movs	r1, #37	; 0x25
 80026b0:	68f8      	ldr	r0, [r7, #12]
 80026b2:	f7fe fe52 	bl	800135a <putchar_via_gadget>
        format++;
 80026b6:	68bb      	ldr	r3, [r7, #8]
 80026b8:	3301      	adds	r3, #1
 80026ba:	60bb      	str	r3, [r7, #8]
        break;
 80026bc:	e009      	b.n	80026d2 <format_string_loop+0x752>
        break;
      }
#endif // PRINTF_SUPPORT_WRITEBACK_SPECIFIER

      default :
        putchar_via_gadget(output, *format);
 80026be:	68bb      	ldr	r3, [r7, #8]
 80026c0:	781b      	ldrb	r3, [r3, #0]
 80026c2:	4619      	mov	r1, r3
 80026c4:	68f8      	ldr	r0, [r7, #12]
 80026c6:	f7fe fe48 	bl	800135a <putchar_via_gadget>
        format++;
 80026ca:	68bb      	ldr	r3, [r7, #8]
 80026cc:	3301      	adds	r3, #1
 80026ce:	60bb      	str	r3, [r7, #8]
        break;
 80026d0:	bf00      	nop
  while (*format)
 80026d2:	68bb      	ldr	r3, [r7, #8]
 80026d4:	781b      	ldrb	r3, [r3, #0]
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	f47f ac59 	bne.w	8001f8e <format_string_loop+0xe>
 80026dc:	e00c      	b.n	80026f8 <format_string_loop+0x778>
    ADVANCE_IN_FORMAT_STRING(format);
 80026de:	bf00      	nop
 80026e0:	e00a      	b.n	80026f8 <format_string_loop+0x778>
      ADVANCE_IN_FORMAT_STRING(format);
 80026e2:	bf00      	nop
 80026e4:	e008      	b.n	80026f8 <format_string_loop+0x778>
      ADVANCE_IN_FORMAT_STRING(format);
 80026e6:	bf00      	nop
 80026e8:	e006      	b.n	80026f8 <format_string_loop+0x778>
        ADVANCE_IN_FORMAT_STRING(format);
 80026ea:	bf00      	nop
 80026ec:	e004      	b.n	80026f8 <format_string_loop+0x778>
        ADVANCE_IN_FORMAT_STRING(format);
 80026ee:	bf00      	nop
 80026f0:	e002      	b.n	80026f8 <format_string_loop+0x778>
        ADVANCE_IN_FORMAT_STRING(format);
 80026f2:	bf00      	nop
 80026f4:	e000      	b.n	80026f8 <format_string_loop+0x778>
        ADVANCE_IN_FORMAT_STRING(format);
 80026f6:	bf00      	nop
    }
  }
}
 80026f8:	3748      	adds	r7, #72	; 0x48
 80026fa:	46bd      	mov	sp, r7
 80026fc:	bd80      	pop	{r7, pc}
 80026fe:	bf00      	nop
 8002700:	0800b014 	.word	0x0800b014
 8002704:	0800b01c 	.word	0x0800b01c

08002708 <vsnprintf_impl>:

// internal vsnprintf - used for implementing _all library functions
static int vsnprintf_impl(output_gadget_t* output, const char* format, va_list args)
{
 8002708:	b580      	push	{r7, lr}
 800270a:	b084      	sub	sp, #16
 800270c:	af00      	add	r7, sp, #0
 800270e:	60f8      	str	r0, [r7, #12]
 8002710:	60b9      	str	r1, [r7, #8]
 8002712:	607a      	str	r2, [r7, #4]
  // Note: The library only calls vsnprintf_impl() with output->pos being 0. However, it is
  // possible to call this function with a non-zero pos value for some "remedial printing".
  format_string_loop(output, format, args);
 8002714:	687a      	ldr	r2, [r7, #4]
 8002716:	68b9      	ldr	r1, [r7, #8]
 8002718:	68f8      	ldr	r0, [r7, #12]
 800271a:	f7ff fc31 	bl	8001f80 <format_string_loop>

  // termination
  append_termination_with_gadget(output);
 800271e:	68f8      	ldr	r0, [r7, #12]
 8002720:	f7fe fe43 	bl	80013aa <append_termination_with_gadget>

  // return written chars without terminating \0
  return (int)output->pos;
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	68db      	ldr	r3, [r3, #12]
}
 8002728:	4618      	mov	r0, r3
 800272a:	3710      	adds	r7, #16
 800272c:	46bd      	mov	sp, r7
 800272e:	bd80      	pop	{r7, pc}

08002730 <vsnprintf_>:
  output_gadget_t gadget = extern_putchar_gadget();
  return vsnprintf_impl(&gadget, format, arg);
}

int vsnprintf_(char* s, size_t n, const char* format, va_list arg)
{
 8002730:	b580      	push	{r7, lr}
 8002732:	b08a      	sub	sp, #40	; 0x28
 8002734:	af00      	add	r7, sp, #0
 8002736:	60f8      	str	r0, [r7, #12]
 8002738:	60b9      	str	r1, [r7, #8]
 800273a:	607a      	str	r2, [r7, #4]
 800273c:	603b      	str	r3, [r7, #0]
  output_gadget_t gadget = buffer_gadget(s, n);
 800273e:	f107 0314 	add.w	r3, r7, #20
 8002742:	68ba      	ldr	r2, [r7, #8]
 8002744:	68f9      	ldr	r1, [r7, #12]
 8002746:	4618      	mov	r0, r3
 8002748:	f7fe fe76 	bl	8001438 <buffer_gadget>
  return vsnprintf_impl(&gadget, format, arg);
 800274c:	f107 0314 	add.w	r3, r7, #20
 8002750:	683a      	ldr	r2, [r7, #0]
 8002752:	6879      	ldr	r1, [r7, #4]
 8002754:	4618      	mov	r0, r3
 8002756:	f7ff ffd7 	bl	8002708 <vsnprintf_impl>
 800275a:	4603      	mov	r3, r0
}
 800275c:	4618      	mov	r0, r3
 800275e:	3728      	adds	r7, #40	; 0x28
 8002760:	46bd      	mov	sp, r7
 8002762:	bd80      	pop	{r7, pc}

08002764 <vsprintf_>:

int vsprintf_(char* s, const char* format, va_list arg)
{
 8002764:	b580      	push	{r7, lr}
 8002766:	b084      	sub	sp, #16
 8002768:	af00      	add	r7, sp, #0
 800276a:	60f8      	str	r0, [r7, #12]
 800276c:	60b9      	str	r1, [r7, #8]
 800276e:	607a      	str	r2, [r7, #4]
  return vsnprintf_(s, PRINTF_MAX_POSSIBLE_BUFFER_SIZE, format, arg);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	68ba      	ldr	r2, [r7, #8]
 8002774:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8002778:	68f8      	ldr	r0, [r7, #12]
 800277a:	f7ff ffd9 	bl	8002730 <vsnprintf_>
 800277e:	4603      	mov	r3, r0
}
 8002780:	4618      	mov	r0, r3
 8002782:	3710      	adds	r7, #16
 8002784:	46bd      	mov	sp, r7
 8002786:	bd80      	pop	{r7, pc}

08002788 <sprintf_>:
  va_end(args);
  return ret;
}

int sprintf_(char* s, const char* format, ...)
{
 8002788:	b40e      	push	{r1, r2, r3}
 800278a:	b580      	push	{r7, lr}
 800278c:	b085      	sub	sp, #20
 800278e:	af00      	add	r7, sp, #0
 8002790:	6078      	str	r0, [r7, #4]
  va_list args;
  va_start(args, format);
 8002792:	f107 0320 	add.w	r3, r7, #32
 8002796:	60bb      	str	r3, [r7, #8]
  const int ret = vsprintf_(s, format, args);
 8002798:	68ba      	ldr	r2, [r7, #8]
 800279a:	69f9      	ldr	r1, [r7, #28]
 800279c:	6878      	ldr	r0, [r7, #4]
 800279e:	f7ff ffe1 	bl	8002764 <vsprintf_>
 80027a2:	60f8      	str	r0, [r7, #12]
  va_end(args);
  return ret;
 80027a4:	68fb      	ldr	r3, [r7, #12]
}
 80027a6:	4618      	mov	r0, r3
 80027a8:	3714      	adds	r7, #20
 80027aa:	46bd      	mov	sp, r7
 80027ac:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80027b0:	b003      	add	sp, #12
 80027b2:	4770      	bx	lr

080027b4 <RetargetInit>:
#define STDOUT_FILENO 1
#define STDERR_FILENO 2

UART_HandleTypeDef *gHuart;

void RetargetInit(UART_HandleTypeDef *huart) {
 80027b4:	b580      	push	{r7, lr}
 80027b6:	b082      	sub	sp, #8
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	6078      	str	r0, [r7, #4]
  gHuart = huart;
 80027bc:	4a07      	ldr	r2, [pc, #28]	; (80027dc <RetargetInit+0x28>)
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	6013      	str	r3, [r2, #0]

  /* Disable I/O buffering for STDOUT stream, so that
   * chars are sent out as soon as they are printed. */
  setvbuf(stdout, NULL, _IONBF, 0);
 80027c2:	4b07      	ldr	r3, [pc, #28]	; (80027e0 <RetargetInit+0x2c>)
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	6898      	ldr	r0, [r3, #8]
 80027c8:	2300      	movs	r3, #0
 80027ca:	2202      	movs	r2, #2
 80027cc:	2100      	movs	r1, #0
 80027ce:	f008 f915 	bl	800a9fc <setvbuf>
}
 80027d2:	bf00      	nop
 80027d4:	3708      	adds	r7, #8
 80027d6:	46bd      	mov	sp, r7
 80027d8:	bd80      	pop	{r7, pc}
 80027da:	bf00      	nop
 80027dc:	200000f4 	.word	0x200000f4
 80027e0:	20000018 	.word	0x20000018

080027e4 <_write>:

  errno = EBADF;
  return 0;
}

int _write(int fd, char* ptr, int len) {
 80027e4:	b580      	push	{r7, lr}
 80027e6:	b086      	sub	sp, #24
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	60f8      	str	r0, [r7, #12]
 80027ec:	60b9      	str	r1, [r7, #8]
 80027ee:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDOUT_FILENO || fd == STDERR_FILENO) {
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	2b01      	cmp	r3, #1
 80027f4:	d002      	beq.n	80027fc <_write+0x18>
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	2b02      	cmp	r3, #2
 80027fa:	d111      	bne.n	8002820 <_write+0x3c>
    hstatus = HAL_UART_Transmit(gHuart, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 80027fc:	4b0e      	ldr	r3, [pc, #56]	; (8002838 <_write+0x54>)
 80027fe:	6818      	ldr	r0, [r3, #0]
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	b29a      	uxth	r2, r3
 8002804:	f04f 33ff 	mov.w	r3, #4294967295
 8002808:	68b9      	ldr	r1, [r7, #8]
 800280a:	f002 ffcf 	bl	80057ac <HAL_UART_Transmit>
 800280e:	4603      	mov	r3, r0
 8002810:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 8002812:	7dfb      	ldrb	r3, [r7, #23]
 8002814:	2b00      	cmp	r3, #0
 8002816:	d101      	bne.n	800281c <_write+0x38>
      return len;
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	e008      	b.n	800282e <_write+0x4a>
    else
      return EIO;
 800281c:	2305      	movs	r3, #5
 800281e:	e006      	b.n	800282e <_write+0x4a>
  }
  errno = EBADF;
 8002820:	f007 fea4 	bl	800a56c <__errno>
 8002824:	4603      	mov	r3, r0
 8002826:	2209      	movs	r2, #9
 8002828:	601a      	str	r2, [r3, #0]
  return -1;
 800282a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800282e:	4618      	mov	r0, r3
 8002830:	3718      	adds	r7, #24
 8002832:	46bd      	mov	sp, r7
 8002834:	bd80      	pop	{r7, pc}
 8002836:	bf00      	nop
 8002838:	200000f4 	.word	0x200000f4

0800283c <_close>:

int _close(int fd) {
 800283c:	b580      	push	{r7, lr}
 800283e:	b082      	sub	sp, #8
 8002840:	af00      	add	r7, sp, #0
 8002842:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	2b00      	cmp	r3, #0
 8002848:	db04      	blt.n	8002854 <_close+0x18>
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	2b02      	cmp	r3, #2
 800284e:	dc01      	bgt.n	8002854 <_close+0x18>
    return 0;
 8002850:	2300      	movs	r3, #0
 8002852:	e006      	b.n	8002862 <_close+0x26>

  errno = EBADF;
 8002854:	f007 fe8a 	bl	800a56c <__errno>
 8002858:	4603      	mov	r3, r0
 800285a:	2209      	movs	r2, #9
 800285c:	601a      	str	r2, [r3, #0]
  return -1;
 800285e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002862:	4618      	mov	r0, r3
 8002864:	3708      	adds	r7, #8
 8002866:	46bd      	mov	sp, r7
 8002868:	bd80      	pop	{r7, pc}

0800286a <_lseek>:

int _lseek(int fd, int ptr, int dir) {
 800286a:	b580      	push	{r7, lr}
 800286c:	b084      	sub	sp, #16
 800286e:	af00      	add	r7, sp, #0
 8002870:	60f8      	str	r0, [r7, #12]
 8002872:	60b9      	str	r1, [r7, #8]
 8002874:	607a      	str	r2, [r7, #4]
  (void) fd;
  (void) ptr;
  (void) dir;

  errno = EBADF;
 8002876:	f007 fe79 	bl	800a56c <__errno>
 800287a:	4603      	mov	r3, r0
 800287c:	2209      	movs	r2, #9
 800287e:	601a      	str	r2, [r3, #0]
  return -1;
 8002880:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002884:	4618      	mov	r0, r3
 8002886:	3710      	adds	r7, #16
 8002888:	46bd      	mov	sp, r7
 800288a:	bd80      	pop	{r7, pc}

0800288c <_read>:

int _read(int fd, char* ptr, int len) {
 800288c:	b580      	push	{r7, lr}
 800288e:	b086      	sub	sp, #24
 8002890:	af00      	add	r7, sp, #0
 8002892:	60f8      	str	r0, [r7, #12]
 8002894:	60b9      	str	r1, [r7, #8]
 8002896:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDIN_FILENO) {
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	2b00      	cmp	r3, #0
 800289c:	d110      	bne.n	80028c0 <_read+0x34>
    hstatus = HAL_UART_Receive(gHuart, (uint8_t *) ptr, 1, HAL_MAX_DELAY);
 800289e:	4b0e      	ldr	r3, [pc, #56]	; (80028d8 <_read+0x4c>)
 80028a0:	6818      	ldr	r0, [r3, #0]
 80028a2:	f04f 33ff 	mov.w	r3, #4294967295
 80028a6:	2201      	movs	r2, #1
 80028a8:	68b9      	ldr	r1, [r7, #8]
 80028aa:	f003 f813 	bl	80058d4 <HAL_UART_Receive>
 80028ae:	4603      	mov	r3, r0
 80028b0:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 80028b2:	7dfb      	ldrb	r3, [r7, #23]
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d101      	bne.n	80028bc <_read+0x30>
      return 1;
 80028b8:	2301      	movs	r3, #1
 80028ba:	e008      	b.n	80028ce <_read+0x42>
    else
      return EIO;
 80028bc:	2305      	movs	r3, #5
 80028be:	e006      	b.n	80028ce <_read+0x42>
  }
  errno = EBADF;
 80028c0:	f007 fe54 	bl	800a56c <__errno>
 80028c4:	4603      	mov	r3, r0
 80028c6:	2209      	movs	r2, #9
 80028c8:	601a      	str	r2, [r3, #0]
  return -1;
 80028ca:	f04f 33ff 	mov.w	r3, #4294967295
}
 80028ce:	4618      	mov	r0, r3
 80028d0:	3718      	adds	r7, #24
 80028d2:	46bd      	mov	sp, r7
 80028d4:	bd80      	pop	{r7, pc}
 80028d6:	bf00      	nop
 80028d8:	200000f4 	.word	0x200000f4

080028dc <_fstat>:

int _fstat(int fd, struct stat* st) {
 80028dc:	b580      	push	{r7, lr}
 80028de:	b082      	sub	sp, #8
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	6078      	str	r0, [r7, #4]
 80028e4:	6039      	str	r1, [r7, #0]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO) {
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	db08      	blt.n	80028fe <_fstat+0x22>
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	2b02      	cmp	r3, #2
 80028f0:	dc05      	bgt.n	80028fe <_fstat+0x22>
    st->st_mode = S_IFCHR;
 80028f2:	683b      	ldr	r3, [r7, #0]
 80028f4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80028f8:	605a      	str	r2, [r3, #4]
    return 0;
 80028fa:	2300      	movs	r3, #0
 80028fc:	e005      	b.n	800290a <_fstat+0x2e>
  }

  errno = EBADF;
 80028fe:	f007 fe35 	bl	800a56c <__errno>
 8002902:	4603      	mov	r3, r0
 8002904:	2209      	movs	r2, #9
 8002906:	601a      	str	r2, [r3, #0]
  return 0;
 8002908:	2300      	movs	r3, #0
}
 800290a:	4618      	mov	r0, r3
 800290c:	3708      	adds	r7, #8
 800290e:	46bd      	mov	sp, r7
 8002910:	bd80      	pop	{r7, pc}
	...

08002914 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002914:	b580      	push	{r7, lr}
 8002916:	b082      	sub	sp, #8
 8002918:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800291a:	4b11      	ldr	r3, [pc, #68]	; (8002960 <HAL_MspInit+0x4c>)
 800291c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800291e:	4a10      	ldr	r2, [pc, #64]	; (8002960 <HAL_MspInit+0x4c>)
 8002920:	f043 0301 	orr.w	r3, r3, #1
 8002924:	6613      	str	r3, [r2, #96]	; 0x60
 8002926:	4b0e      	ldr	r3, [pc, #56]	; (8002960 <HAL_MspInit+0x4c>)
 8002928:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800292a:	f003 0301 	and.w	r3, r3, #1
 800292e:	607b      	str	r3, [r7, #4]
 8002930:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002932:	4b0b      	ldr	r3, [pc, #44]	; (8002960 <HAL_MspInit+0x4c>)
 8002934:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002936:	4a0a      	ldr	r2, [pc, #40]	; (8002960 <HAL_MspInit+0x4c>)
 8002938:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800293c:	6593      	str	r3, [r2, #88]	; 0x58
 800293e:	4b08      	ldr	r3, [pc, #32]	; (8002960 <HAL_MspInit+0x4c>)
 8002940:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002942:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002946:	603b      	str	r3, [r7, #0]
 8002948:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800294a:	2200      	movs	r2, #0
 800294c:	210f      	movs	r1, #15
 800294e:	f06f 0001 	mvn.w	r0, #1
 8002952:	f000 fd57 	bl	8003404 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002956:	bf00      	nop
 8002958:	3708      	adds	r7, #8
 800295a:	46bd      	mov	sp, r7
 800295c:	bd80      	pop	{r7, pc}
 800295e:	bf00      	nop
 8002960:	40021000 	.word	0x40021000

08002964 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002964:	b580      	push	{r7, lr}
 8002966:	b08c      	sub	sp, #48	; 0x30
 8002968:	af00      	add	r7, sp, #0
 800296a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 800296c:	2300      	movs	r3, #0
 800296e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Enable TIM16 clock */
  __HAL_RCC_TIM16_CLK_ENABLE();
 8002972:	4b2e      	ldr	r3, [pc, #184]	; (8002a2c <HAL_InitTick+0xc8>)
 8002974:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002976:	4a2d      	ldr	r2, [pc, #180]	; (8002a2c <HAL_InitTick+0xc8>)
 8002978:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800297c:	6613      	str	r3, [r2, #96]	; 0x60
 800297e:	4b2b      	ldr	r3, [pc, #172]	; (8002a2c <HAL_InitTick+0xc8>)
 8002980:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002982:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002986:	60bb      	str	r3, [r7, #8]
 8002988:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800298a:	f107 020c 	add.w	r2, r7, #12
 800298e:	f107 0310 	add.w	r3, r7, #16
 8002992:	4611      	mov	r1, r2
 8002994:	4618      	mov	r0, r3
 8002996:	f002 f8b1 	bl	8004afc <HAL_RCC_GetClockConfig>

  /* Compute TIM16 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 800299a:	f002 f899 	bl	8004ad0 <HAL_RCC_GetPCLK2Freq>
 800299e:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM16 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80029a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029a2:	4a23      	ldr	r2, [pc, #140]	; (8002a30 <HAL_InitTick+0xcc>)
 80029a4:	fba2 2303 	umull	r2, r3, r2, r3
 80029a8:	0c9b      	lsrs	r3, r3, #18
 80029aa:	3b01      	subs	r3, #1
 80029ac:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM16 */
  htim16.Instance = TIM16;
 80029ae:	4b21      	ldr	r3, [pc, #132]	; (8002a34 <HAL_InitTick+0xd0>)
 80029b0:	4a21      	ldr	r2, [pc, #132]	; (8002a38 <HAL_InitTick+0xd4>)
 80029b2:	601a      	str	r2, [r3, #0]
  + Period = [(TIM16CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim16.Init.Period = (1000000U / 1000U) - 1U;
 80029b4:	4b1f      	ldr	r3, [pc, #124]	; (8002a34 <HAL_InitTick+0xd0>)
 80029b6:	f240 32e7 	movw	r2, #999	; 0x3e7
 80029ba:	60da      	str	r2, [r3, #12]
  htim16.Init.Prescaler = uwPrescalerValue;
 80029bc:	4a1d      	ldr	r2, [pc, #116]	; (8002a34 <HAL_InitTick+0xd0>)
 80029be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029c0:	6053      	str	r3, [r2, #4]
  htim16.Init.ClockDivision = 0;
 80029c2:	4b1c      	ldr	r3, [pc, #112]	; (8002a34 <HAL_InitTick+0xd0>)
 80029c4:	2200      	movs	r2, #0
 80029c6:	611a      	str	r2, [r3, #16]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80029c8:	4b1a      	ldr	r3, [pc, #104]	; (8002a34 <HAL_InitTick+0xd0>)
 80029ca:	2200      	movs	r2, #0
 80029cc:	609a      	str	r2, [r3, #8]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80029ce:	4b19      	ldr	r3, [pc, #100]	; (8002a34 <HAL_InitTick+0xd0>)
 80029d0:	2200      	movs	r2, #0
 80029d2:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim16);
 80029d4:	4817      	ldr	r0, [pc, #92]	; (8002a34 <HAL_InitTick+0xd0>)
 80029d6:	f002 fc1b 	bl	8005210 <HAL_TIM_Base_Init>
 80029da:	4603      	mov	r3, r0
 80029dc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 80029e0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d11b      	bne.n	8002a20 <HAL_InitTick+0xbc>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim16);
 80029e8:	4812      	ldr	r0, [pc, #72]	; (8002a34 <HAL_InitTick+0xd0>)
 80029ea:	f002 fc73 	bl	80052d4 <HAL_TIM_Base_Start_IT>
 80029ee:	4603      	mov	r3, r0
 80029f0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 80029f4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d111      	bne.n	8002a20 <HAL_InitTick+0xbc>
    {
    /* Enable the TIM16 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80029fc:	2019      	movs	r0, #25
 80029fe:	f000 fd1d 	bl	800343c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	2b0f      	cmp	r3, #15
 8002a06:	d808      	bhi.n	8002a1a <HAL_InitTick+0xb6>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority, 0U);
 8002a08:	2200      	movs	r2, #0
 8002a0a:	6879      	ldr	r1, [r7, #4]
 8002a0c:	2019      	movs	r0, #25
 8002a0e:	f000 fcf9 	bl	8003404 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002a12:	4a0a      	ldr	r2, [pc, #40]	; (8002a3c <HAL_InitTick+0xd8>)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	6013      	str	r3, [r2, #0]
 8002a18:	e002      	b.n	8002a20 <HAL_InitTick+0xbc>
      }
      else
      {
        status = HAL_ERROR;
 8002a1a:	2301      	movs	r3, #1
 8002a1c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8002a20:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8002a24:	4618      	mov	r0, r3
 8002a26:	3730      	adds	r7, #48	; 0x30
 8002a28:	46bd      	mov	sp, r7
 8002a2a:	bd80      	pop	{r7, pc}
 8002a2c:	40021000 	.word	0x40021000
 8002a30:	431bde83 	.word	0x431bde83
 8002a34:	200000f8 	.word	0x200000f8
 8002a38:	40014400 	.word	0x40014400
 8002a3c:	2000000c 	.word	0x2000000c

08002a40 <LL_USART_IsActiveFlag_IDLE>:
  * @rmtoll ISR          IDLE          LL_USART_IsActiveFlag_IDLE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_IDLE(const USART_TypeDef *USARTx)
{
 8002a40:	b480      	push	{r7}
 8002a42:	b083      	sub	sp, #12
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_IDLE) == (USART_ISR_IDLE)) ? 1UL : 0UL);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	69db      	ldr	r3, [r3, #28]
 8002a4c:	f003 0310 	and.w	r3, r3, #16
 8002a50:	2b10      	cmp	r3, #16
 8002a52:	d101      	bne.n	8002a58 <LL_USART_IsActiveFlag_IDLE+0x18>
 8002a54:	2301      	movs	r3, #1
 8002a56:	e000      	b.n	8002a5a <LL_USART_IsActiveFlag_IDLE+0x1a>
 8002a58:	2300      	movs	r3, #0
}
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	370c      	adds	r7, #12
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a64:	4770      	bx	lr

08002a66 <LL_USART_ClearFlag_IDLE>:
  * @rmtoll ICR          IDLECF        LL_USART_ClearFlag_IDLE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ClearFlag_IDLE(USART_TypeDef *USARTx)
{
 8002a66:	b480      	push	{r7}
 8002a68:	b083      	sub	sp, #12
 8002a6a:	af00      	add	r7, sp, #0
 8002a6c:	6078      	str	r0, [r7, #4]
  WRITE_REG(USARTx->ICR, USART_ICR_IDLECF);
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	2210      	movs	r2, #16
 8002a72:	621a      	str	r2, [r3, #32]
}
 8002a74:	bf00      	nop
 8002a76:	370c      	adds	r7, #12
 8002a78:	46bd      	mov	sp, r7
 8002a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a7e:	4770      	bx	lr

08002a80 <LL_USART_IsEnabledIT_IDLE>:
  * @rmtoll CR1          IDLEIE        LL_USART_IsEnabledIT_IDLE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsEnabledIT_IDLE(const USART_TypeDef *USARTx)
{
 8002a80:	b480      	push	{r7}
 8002a82:	b083      	sub	sp, #12
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_IDLEIE) == (USART_CR1_IDLEIE)) ? 1UL : 0UL);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f003 0310 	and.w	r3, r3, #16
 8002a90:	2b10      	cmp	r3, #16
 8002a92:	d101      	bne.n	8002a98 <LL_USART_IsEnabledIT_IDLE+0x18>
 8002a94:	2301      	movs	r3, #1
 8002a96:	e000      	b.n	8002a9a <LL_USART_IsEnabledIT_IDLE+0x1a>
 8002a98:	2300      	movs	r3, #0
}
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	370c      	adds	r7, #12
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa4:	4770      	bx	lr

08002aa6 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002aa6:	b480      	push	{r7}
 8002aa8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002aaa:	e7fe      	b.n	8002aaa <NMI_Handler+0x4>

08002aac <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002aac:	b480      	push	{r7}
 8002aae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002ab0:	e7fe      	b.n	8002ab0 <HardFault_Handler+0x4>

08002ab2 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002ab2:	b480      	push	{r7}
 8002ab4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002ab6:	e7fe      	b.n	8002ab6 <MemManage_Handler+0x4>

08002ab8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002ab8:	b480      	push	{r7}
 8002aba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002abc:	e7fe      	b.n	8002abc <BusFault_Handler+0x4>

08002abe <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002abe:	b480      	push	{r7}
 8002ac0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002ac2:	e7fe      	b.n	8002ac2 <UsageFault_Handler+0x4>

08002ac4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002ac4:	b480      	push	{r7}
 8002ac6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002ac8:	bf00      	nop
 8002aca:	46bd      	mov	sp, r7
 8002acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad0:	4770      	bx	lr
	...

08002ad4 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8002ad4:	b580      	push	{r7, lr}
 8002ad6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8002ad8:	4802      	ldr	r0, [pc, #8]	; (8002ae4 <DMA1_Channel5_IRQHandler+0x10>)
 8002ada:	f000 fe54 	bl	8003786 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8002ade:	bf00      	nop
 8002ae0:	bd80      	pop	{r7, pc}
 8002ae2:	bf00      	nop
 8002ae4:	20000250 	.word	0x20000250

08002ae8 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8002aec:	4802      	ldr	r0, [pc, #8]	; (8002af8 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8002aee:	f002 fc45 	bl	800537c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8002af2:	bf00      	nop
 8002af4:	bd80      	pop	{r7, pc}
 8002af6:	bf00      	nop
 8002af8:	200000f8 	.word	0x200000f8

08002afc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002afc:	b580      	push	{r7, lr}
 8002afe:	b084      	sub	sp, #16
 8002b00:	af02      	add	r7, sp, #8
	/* USER CODE BEGIN USART1_IRQn 0 */

	  /* USER CODE END USART1_IRQn 0 */
	  HAL_UART_IRQHandler(&huart1);
 8002b02:	4816      	ldr	r0, [pc, #88]	; (8002b5c <USART1_IRQHandler+0x60>)
 8002b04:	f003 f8d2 	bl	8005cac <HAL_UART_IRQHandler>
	  /* USER CODE BEGIN USART1_IRQn 1 */
	  if(LL_USART_IsEnabledIT_IDLE(USART1) && LL_USART_IsActiveFlag_IDLE(USART1))
 8002b08:	4815      	ldr	r0, [pc, #84]	; (8002b60 <USART1_IRQHandler+0x64>)
 8002b0a:	f7ff ffb9 	bl	8002a80 <LL_USART_IsEnabledIT_IDLE>
 8002b0e:	4603      	mov	r3, r0
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d01e      	beq.n	8002b52 <USART1_IRQHandler+0x56>
 8002b14:	4812      	ldr	r0, [pc, #72]	; (8002b60 <USART1_IRQHandler+0x64>)
 8002b16:	f7ff ff93 	bl	8002a40 <LL_USART_IsActiveFlag_IDLE>
 8002b1a:	4603      	mov	r3, r0
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d018      	beq.n	8002b52 <USART1_IRQHandler+0x56>
	  {
		  LL_USART_ClearFlag_IDLE(USART1);        /* Clear IDLE line flag */
 8002b20:	480f      	ldr	r0, [pc, #60]	; (8002b60 <USART1_IRQHandler+0x64>)
 8002b22:	f7ff ffa0 	bl	8002a66 <LL_USART_ClearFlag_IDLE>
		  // Give a task notification to the UART2 Task
		  BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8002b26:	2300      	movs	r3, #0
 8002b28:	607b      	str	r3, [r7, #4]
		  xTaskNotifyFromISR(xUartTaskHandle, UART1_IDLE_EVENT, eSetBits, &xHigherPriorityTaskWoken);
 8002b2a:	4b0e      	ldr	r3, [pc, #56]	; (8002b64 <USART1_IRQHandler+0x68>)
 8002b2c:	6818      	ldr	r0, [r3, #0]
 8002b2e:	1d3b      	adds	r3, r7, #4
 8002b30:	9300      	str	r3, [sp, #0]
 8002b32:	2300      	movs	r3, #0
 8002b34:	2201      	movs	r2, #1
 8002b36:	2101      	movs	r1, #1
 8002b38:	f006 fc56 	bl	80093e8 <xTaskGenericNotifyFromISR>
		  portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d007      	beq.n	8002b52 <USART1_IRQHandler+0x56>
 8002b42:	4b09      	ldr	r3, [pc, #36]	; (8002b68 <USART1_IRQHandler+0x6c>)
 8002b44:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002b48:	601a      	str	r2, [r3, #0]
 8002b4a:	f3bf 8f4f 	dsb	sy
 8002b4e:	f3bf 8f6f 	isb	sy
	  }
	  /* USER CODE END USART1_IRQn 1 */
}
 8002b52:	bf00      	nop
 8002b54:	3708      	adds	r7, #8
 8002b56:	46bd      	mov	sp, r7
 8002b58:	bd80      	pop	{r7, pc}
 8002b5a:	bf00      	nop
 8002b5c:	20000148 	.word	0x20000148
 8002b60:	40013800 	.word	0x40013800
 8002b64:	2000229c 	.word	0x2000229c
 8002b68:	e000ed04 	.word	0xe000ed04

08002b6c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002b70:	4802      	ldr	r0, [pc, #8]	; (8002b7c <USART2_IRQHandler+0x10>)
 8002b72:	f003 f89b 	bl	8005cac <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002b76:	bf00      	nop
 8002b78:	bd80      	pop	{r7, pc}
 8002b7a:	bf00      	nop
 8002b7c:	200001cc 	.word	0x200001cc

08002b80 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002b80:	b580      	push	{r7, lr}
 8002b82:	b086      	sub	sp, #24
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002b88:	4a14      	ldr	r2, [pc, #80]	; (8002bdc <_sbrk+0x5c>)
 8002b8a:	4b15      	ldr	r3, [pc, #84]	; (8002be0 <_sbrk+0x60>)
 8002b8c:	1ad3      	subs	r3, r2, r3
 8002b8e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002b90:	697b      	ldr	r3, [r7, #20]
 8002b92:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002b94:	4b13      	ldr	r3, [pc, #76]	; (8002be4 <_sbrk+0x64>)
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d102      	bne.n	8002ba2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002b9c:	4b11      	ldr	r3, [pc, #68]	; (8002be4 <_sbrk+0x64>)
 8002b9e:	4a12      	ldr	r2, [pc, #72]	; (8002be8 <_sbrk+0x68>)
 8002ba0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002ba2:	4b10      	ldr	r3, [pc, #64]	; (8002be4 <_sbrk+0x64>)
 8002ba4:	681a      	ldr	r2, [r3, #0]
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	4413      	add	r3, r2
 8002baa:	693a      	ldr	r2, [r7, #16]
 8002bac:	429a      	cmp	r2, r3
 8002bae:	d207      	bcs.n	8002bc0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002bb0:	f007 fcdc 	bl	800a56c <__errno>
 8002bb4:	4603      	mov	r3, r0
 8002bb6:	220c      	movs	r2, #12
 8002bb8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002bba:	f04f 33ff 	mov.w	r3, #4294967295
 8002bbe:	e009      	b.n	8002bd4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002bc0:	4b08      	ldr	r3, [pc, #32]	; (8002be4 <_sbrk+0x64>)
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002bc6:	4b07      	ldr	r3, [pc, #28]	; (8002be4 <_sbrk+0x64>)
 8002bc8:	681a      	ldr	r2, [r3, #0]
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	4413      	add	r3, r2
 8002bce:	4a05      	ldr	r2, [pc, #20]	; (8002be4 <_sbrk+0x64>)
 8002bd0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002bd2:	68fb      	ldr	r3, [r7, #12]
}
 8002bd4:	4618      	mov	r0, r3
 8002bd6:	3718      	adds	r7, #24
 8002bd8:	46bd      	mov	sp, r7
 8002bda:	bd80      	pop	{r7, pc}
 8002bdc:	20010000 	.word	0x20010000
 8002be0:	00000400 	.word	0x00000400
 8002be4:	20000144 	.word	0x20000144
 8002be8:	20005e58 	.word	0x20005e58

08002bec <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002bec:	b480      	push	{r7}
 8002bee:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002bf0:	4b06      	ldr	r3, [pc, #24]	; (8002c0c <SystemInit+0x20>)
 8002bf2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bf6:	4a05      	ldr	r2, [pc, #20]	; (8002c0c <SystemInit+0x20>)
 8002bf8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002bfc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8002c00:	bf00      	nop
 8002c02:	46bd      	mov	sp, r7
 8002c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c08:	4770      	bx	lr
 8002c0a:	bf00      	nop
 8002c0c:	e000ed00 	.word	0xe000ed00

08002c10 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_rx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002c10:	b580      	push	{r7, lr}
 8002c12:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002c14:	4b14      	ldr	r3, [pc, #80]	; (8002c68 <MX_USART1_UART_Init+0x58>)
 8002c16:	4a15      	ldr	r2, [pc, #84]	; (8002c6c <MX_USART1_UART_Init+0x5c>)
 8002c18:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002c1a:	4b13      	ldr	r3, [pc, #76]	; (8002c68 <MX_USART1_UART_Init+0x58>)
 8002c1c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002c20:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002c22:	4b11      	ldr	r3, [pc, #68]	; (8002c68 <MX_USART1_UART_Init+0x58>)
 8002c24:	2200      	movs	r2, #0
 8002c26:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002c28:	4b0f      	ldr	r3, [pc, #60]	; (8002c68 <MX_USART1_UART_Init+0x58>)
 8002c2a:	2200      	movs	r2, #0
 8002c2c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002c2e:	4b0e      	ldr	r3, [pc, #56]	; (8002c68 <MX_USART1_UART_Init+0x58>)
 8002c30:	2200      	movs	r2, #0
 8002c32:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002c34:	4b0c      	ldr	r3, [pc, #48]	; (8002c68 <MX_USART1_UART_Init+0x58>)
 8002c36:	220c      	movs	r2, #12
 8002c38:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002c3a:	4b0b      	ldr	r3, [pc, #44]	; (8002c68 <MX_USART1_UART_Init+0x58>)
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002c40:	4b09      	ldr	r3, [pc, #36]	; (8002c68 <MX_USART1_UART_Init+0x58>)
 8002c42:	2200      	movs	r2, #0
 8002c44:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002c46:	4b08      	ldr	r3, [pc, #32]	; (8002c68 <MX_USART1_UART_Init+0x58>)
 8002c48:	2200      	movs	r2, #0
 8002c4a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002c4c:	4b06      	ldr	r3, [pc, #24]	; (8002c68 <MX_USART1_UART_Init+0x58>)
 8002c4e:	2200      	movs	r2, #0
 8002c50:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002c52:	4805      	ldr	r0, [pc, #20]	; (8002c68 <MX_USART1_UART_Init+0x58>)
 8002c54:	f002 fd5c 	bl	8005710 <HAL_UART_Init>
 8002c58:	4603      	mov	r3, r0
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d001      	beq.n	8002c62 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8002c5e:	f7fe fb49 	bl	80012f4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002c62:	bf00      	nop
 8002c64:	bd80      	pop	{r7, pc}
 8002c66:	bf00      	nop
 8002c68:	20000148 	.word	0x20000148
 8002c6c:	40013800 	.word	0x40013800

08002c70 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002c70:	b580      	push	{r7, lr}
 8002c72:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002c74:	4b15      	ldr	r3, [pc, #84]	; (8002ccc <MX_USART2_UART_Init+0x5c>)
 8002c76:	4a16      	ldr	r2, [pc, #88]	; (8002cd0 <MX_USART2_UART_Init+0x60>)
 8002c78:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002c7a:	4b14      	ldr	r3, [pc, #80]	; (8002ccc <MX_USART2_UART_Init+0x5c>)
 8002c7c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002c80:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002c82:	4b12      	ldr	r3, [pc, #72]	; (8002ccc <MX_USART2_UART_Init+0x5c>)
 8002c84:	2200      	movs	r2, #0
 8002c86:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002c88:	4b10      	ldr	r3, [pc, #64]	; (8002ccc <MX_USART2_UART_Init+0x5c>)
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002c8e:	4b0f      	ldr	r3, [pc, #60]	; (8002ccc <MX_USART2_UART_Init+0x5c>)
 8002c90:	2200      	movs	r2, #0
 8002c92:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002c94:	4b0d      	ldr	r3, [pc, #52]	; (8002ccc <MX_USART2_UART_Init+0x5c>)
 8002c96:	220c      	movs	r2, #12
 8002c98:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002c9a:	4b0c      	ldr	r3, [pc, #48]	; (8002ccc <MX_USART2_UART_Init+0x5c>)
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002ca0:	4b0a      	ldr	r3, [pc, #40]	; (8002ccc <MX_USART2_UART_Init+0x5c>)
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002ca6:	4b09      	ldr	r3, [pc, #36]	; (8002ccc <MX_USART2_UART_Init+0x5c>)
 8002ca8:	2200      	movs	r2, #0
 8002caa:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002cac:	4b07      	ldr	r3, [pc, #28]	; (8002ccc <MX_USART2_UART_Init+0x5c>)
 8002cae:	2200      	movs	r2, #0
 8002cb0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002cb2:	4806      	ldr	r0, [pc, #24]	; (8002ccc <MX_USART2_UART_Init+0x5c>)
 8002cb4:	f002 fd2c 	bl	8005710 <HAL_UART_Init>
 8002cb8:	4603      	mov	r3, r0
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d001      	beq.n	8002cc2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8002cbe:	f7fe fb19 	bl	80012f4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */
  RetargetInit(&huart2);
 8002cc2:	4802      	ldr	r0, [pc, #8]	; (8002ccc <MX_USART2_UART_Init+0x5c>)
 8002cc4:	f7ff fd76 	bl	80027b4 <RetargetInit>
  /* USER CODE END USART2_Init 2 */

}
 8002cc8:	bf00      	nop
 8002cca:	bd80      	pop	{r7, pc}
 8002ccc:	200001cc 	.word	0x200001cc
 8002cd0:	40004400 	.word	0x40004400

08002cd4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	b0a0      	sub	sp, #128	; 0x80
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002cdc:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002ce0:	2200      	movs	r2, #0
 8002ce2:	601a      	str	r2, [r3, #0]
 8002ce4:	605a      	str	r2, [r3, #4]
 8002ce6:	609a      	str	r2, [r3, #8]
 8002ce8:	60da      	str	r2, [r3, #12]
 8002cea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002cec:	f107 0318 	add.w	r3, r7, #24
 8002cf0:	2254      	movs	r2, #84	; 0x54
 8002cf2:	2100      	movs	r1, #0
 8002cf4:	4618      	mov	r0, r3
 8002cf6:	f007 fd6a 	bl	800a7ce <memset>
  if(uartHandle->Instance==USART1)
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	4a63      	ldr	r2, [pc, #396]	; (8002e8c <HAL_UART_MspInit+0x1b8>)
 8002d00:	4293      	cmp	r3, r2
 8002d02:	d169      	bne.n	8002dd8 <HAL_UART_MspInit+0x104>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002d04:	2301      	movs	r3, #1
 8002d06:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002d08:	2300      	movs	r3, #0
 8002d0a:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002d0c:	f107 0318 	add.w	r3, r7, #24
 8002d10:	4618      	mov	r0, r3
 8002d12:	f001 ff85 	bl	8004c20 <HAL_RCCEx_PeriphCLKConfig>
 8002d16:	4603      	mov	r3, r0
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d001      	beq.n	8002d20 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002d1c:	f7fe faea 	bl	80012f4 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002d20:	4b5b      	ldr	r3, [pc, #364]	; (8002e90 <HAL_UART_MspInit+0x1bc>)
 8002d22:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d24:	4a5a      	ldr	r2, [pc, #360]	; (8002e90 <HAL_UART_MspInit+0x1bc>)
 8002d26:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002d2a:	6613      	str	r3, [r2, #96]	; 0x60
 8002d2c:	4b58      	ldr	r3, [pc, #352]	; (8002e90 <HAL_UART_MspInit+0x1bc>)
 8002d2e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d30:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d34:	617b      	str	r3, [r7, #20]
 8002d36:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d38:	4b55      	ldr	r3, [pc, #340]	; (8002e90 <HAL_UART_MspInit+0x1bc>)
 8002d3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d3c:	4a54      	ldr	r2, [pc, #336]	; (8002e90 <HAL_UART_MspInit+0x1bc>)
 8002d3e:	f043 0301 	orr.w	r3, r3, #1
 8002d42:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002d44:	4b52      	ldr	r3, [pc, #328]	; (8002e90 <HAL_UART_MspInit+0x1bc>)
 8002d46:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d48:	f003 0301 	and.w	r3, r3, #1
 8002d4c:	613b      	str	r3, [r7, #16]
 8002d4e:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002d50:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002d54:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d56:	2302      	movs	r3, #2
 8002d58:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d5a:	2300      	movs	r3, #0
 8002d5c:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d5e:	2303      	movs	r3, #3
 8002d60:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002d62:	2307      	movs	r3, #7
 8002d64:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d66:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002d6a:	4619      	mov	r1, r3
 8002d6c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002d70:	f000 fde8 	bl	8003944 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8002d74:	4b47      	ldr	r3, [pc, #284]	; (8002e94 <HAL_UART_MspInit+0x1c0>)
 8002d76:	4a48      	ldr	r2, [pc, #288]	; (8002e98 <HAL_UART_MspInit+0x1c4>)
 8002d78:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_2;
 8002d7a:	4b46      	ldr	r3, [pc, #280]	; (8002e94 <HAL_UART_MspInit+0x1c0>)
 8002d7c:	2202      	movs	r2, #2
 8002d7e:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002d80:	4b44      	ldr	r3, [pc, #272]	; (8002e94 <HAL_UART_MspInit+0x1c0>)
 8002d82:	2200      	movs	r2, #0
 8002d84:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002d86:	4b43      	ldr	r3, [pc, #268]	; (8002e94 <HAL_UART_MspInit+0x1c0>)
 8002d88:	2200      	movs	r2, #0
 8002d8a:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002d8c:	4b41      	ldr	r3, [pc, #260]	; (8002e94 <HAL_UART_MspInit+0x1c0>)
 8002d8e:	2280      	movs	r2, #128	; 0x80
 8002d90:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002d92:	4b40      	ldr	r3, [pc, #256]	; (8002e94 <HAL_UART_MspInit+0x1c0>)
 8002d94:	2200      	movs	r2, #0
 8002d96:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002d98:	4b3e      	ldr	r3, [pc, #248]	; (8002e94 <HAL_UART_MspInit+0x1c0>)
 8002d9a:	2200      	movs	r2, #0
 8002d9c:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8002d9e:	4b3d      	ldr	r3, [pc, #244]	; (8002e94 <HAL_UART_MspInit+0x1c0>)
 8002da0:	2220      	movs	r2, #32
 8002da2:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002da4:	4b3b      	ldr	r3, [pc, #236]	; (8002e94 <HAL_UART_MspInit+0x1c0>)
 8002da6:	2200      	movs	r2, #0
 8002da8:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8002daa:	483a      	ldr	r0, [pc, #232]	; (8002e94 <HAL_UART_MspInit+0x1c0>)
 8002dac:	f000 fb54 	bl	8003458 <HAL_DMA_Init>
 8002db0:	4603      	mov	r3, r0
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d001      	beq.n	8002dba <HAL_UART_MspInit+0xe6>
    {
      Error_Handler();
 8002db6:	f7fe fa9d 	bl	80012f4 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	4a35      	ldr	r2, [pc, #212]	; (8002e94 <HAL_UART_MspInit+0x1c0>)
 8002dbe:	671a      	str	r2, [r3, #112]	; 0x70
 8002dc0:	4a34      	ldr	r2, [pc, #208]	; (8002e94 <HAL_UART_MspInit+0x1c0>)
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8002dc6:	2200      	movs	r2, #0
 8002dc8:	2105      	movs	r1, #5
 8002dca:	2025      	movs	r0, #37	; 0x25
 8002dcc:	f000 fb1a 	bl	8003404 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002dd0:	2025      	movs	r0, #37	; 0x25
 8002dd2:	f000 fb33 	bl	800343c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8002dd6:	e055      	b.n	8002e84 <HAL_UART_MspInit+0x1b0>
  else if(uartHandle->Instance==USART2)
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	4a2f      	ldr	r2, [pc, #188]	; (8002e9c <HAL_UART_MspInit+0x1c8>)
 8002dde:	4293      	cmp	r3, r2
 8002de0:	d150      	bne.n	8002e84 <HAL_UART_MspInit+0x1b0>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002de2:	2302      	movs	r3, #2
 8002de4:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002de6:	2300      	movs	r3, #0
 8002de8:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002dea:	f107 0318 	add.w	r3, r7, #24
 8002dee:	4618      	mov	r0, r3
 8002df0:	f001 ff16 	bl	8004c20 <HAL_RCCEx_PeriphCLKConfig>
 8002df4:	4603      	mov	r3, r0
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d001      	beq.n	8002dfe <HAL_UART_MspInit+0x12a>
      Error_Handler();
 8002dfa:	f7fe fa7b 	bl	80012f4 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002dfe:	4b24      	ldr	r3, [pc, #144]	; (8002e90 <HAL_UART_MspInit+0x1bc>)
 8002e00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e02:	4a23      	ldr	r2, [pc, #140]	; (8002e90 <HAL_UART_MspInit+0x1bc>)
 8002e04:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002e08:	6593      	str	r3, [r2, #88]	; 0x58
 8002e0a:	4b21      	ldr	r3, [pc, #132]	; (8002e90 <HAL_UART_MspInit+0x1bc>)
 8002e0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e12:	60fb      	str	r3, [r7, #12]
 8002e14:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e16:	4b1e      	ldr	r3, [pc, #120]	; (8002e90 <HAL_UART_MspInit+0x1bc>)
 8002e18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e1a:	4a1d      	ldr	r2, [pc, #116]	; (8002e90 <HAL_UART_MspInit+0x1bc>)
 8002e1c:	f043 0301 	orr.w	r3, r3, #1
 8002e20:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002e22:	4b1b      	ldr	r3, [pc, #108]	; (8002e90 <HAL_UART_MspInit+0x1bc>)
 8002e24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e26:	f003 0301 	and.w	r3, r3, #1
 8002e2a:	60bb      	str	r3, [r7, #8]
 8002e2c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8002e2e:	2304      	movs	r3, #4
 8002e30:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e32:	2302      	movs	r3, #2
 8002e34:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e36:	2300      	movs	r3, #0
 8002e38:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e3a:	2303      	movs	r3, #3
 8002e3c:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002e3e:	2307      	movs	r3, #7
 8002e40:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8002e42:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002e46:	4619      	mov	r1, r3
 8002e48:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002e4c:	f000 fd7a 	bl	8003944 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8002e50:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002e54:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e56:	2302      	movs	r3, #2
 8002e58:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e5a:	2300      	movs	r3, #0
 8002e5c:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e5e:	2303      	movs	r3, #3
 8002e60:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8002e62:	2303      	movs	r3, #3
 8002e64:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8002e66:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002e6a:	4619      	mov	r1, r3
 8002e6c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002e70:	f000 fd68 	bl	8003944 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8002e74:	2200      	movs	r2, #0
 8002e76:	2105      	movs	r1, #5
 8002e78:	2026      	movs	r0, #38	; 0x26
 8002e7a:	f000 fac3 	bl	8003404 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002e7e:	2026      	movs	r0, #38	; 0x26
 8002e80:	f000 fadc 	bl	800343c <HAL_NVIC_EnableIRQ>
}
 8002e84:	bf00      	nop
 8002e86:	3780      	adds	r7, #128	; 0x80
 8002e88:	46bd      	mov	sp, r7
 8002e8a:	bd80      	pop	{r7, pc}
 8002e8c:	40013800 	.word	0x40013800
 8002e90:	40021000 	.word	0x40021000
 8002e94:	20000250 	.word	0x20000250
 8002e98:	40020058 	.word	0x40020058
 8002e9c:	40004400 	.word	0x40004400

08002ea0 <LL_USART_EnableIT_IDLE>:
{
 8002ea0:	b480      	push	{r7}
 8002ea2:	b089      	sub	sp, #36	; 0x24
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_IDLEIE);
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	60fb      	str	r3, [r7, #12]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	e853 3f00 	ldrex	r3, [r3]
 8002eb2:	60bb      	str	r3, [r7, #8]
   return(result);
 8002eb4:	68bb      	ldr	r3, [r7, #8]
 8002eb6:	f043 0310 	orr.w	r3, r3, #16
 8002eba:	61fb      	str	r3, [r7, #28]
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	69fa      	ldr	r2, [r7, #28]
 8002ec0:	61ba      	str	r2, [r7, #24]
 8002ec2:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ec4:	6979      	ldr	r1, [r7, #20]
 8002ec6:	69ba      	ldr	r2, [r7, #24]
 8002ec8:	e841 2300 	strex	r3, r2, [r1]
 8002ecc:	613b      	str	r3, [r7, #16]
   return(result);
 8002ece:	693b      	ldr	r3, [r7, #16]
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d1e9      	bne.n	8002ea8 <LL_USART_EnableIT_IDLE+0x8>
}
 8002ed4:	bf00      	nop
 8002ed6:	bf00      	nop
 8002ed8:	3724      	adds	r7, #36	; 0x24
 8002eda:	46bd      	mov	sp, r7
 8002edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee0:	4770      	bx	lr
	...

08002ee4 <StartWifiClick>:
char at_cmd_buffer[AT_CMD_BUFFER_SIZE] = {0};

// NOTE: COPY & PASTING INTO SERIAL TERMINAL DOES NOT WORK!
// The serial terminal is meant for human input, since it is character by character via interrupts!

void StartWifiClick(void *argument) {
 8002ee4:	b580      	push	{r7, lr}
 8002ee6:	b084      	sub	sp, #16
 8002ee8:	af02      	add	r7, sp, #8
 8002eea:	6078      	str	r0, [r7, #4]
	// Create tasks
	//xTaskCreate(uart2Task, "Uart1Task", 128, NULL, osPriorityLow, NULL);
	xTaskCreate(UartHandlerTask, xUartHandlerTaskName, 128, NULL, osPriorityNormal1, &xUartTaskHandle);
 8002eec:	4b29      	ldr	r3, [pc, #164]	; (8002f94 <StartWifiClick+0xb0>)
 8002eee:	6819      	ldr	r1, [r3, #0]
 8002ef0:	4b29      	ldr	r3, [pc, #164]	; (8002f98 <StartWifiClick+0xb4>)
 8002ef2:	9301      	str	r3, [sp, #4]
 8002ef4:	2319      	movs	r3, #25
 8002ef6:	9300      	str	r3, [sp, #0]
 8002ef8:	2300      	movs	r3, #0
 8002efa:	2280      	movs	r2, #128	; 0x80
 8002efc:	4827      	ldr	r0, [pc, #156]	; (8002f9c <StartWifiClick+0xb8>)
 8002efe:	f005 fb2a 	bl	8008556 <xTaskCreate>

	// Activate UART interrupts and reception
	LL_USART_EnableIT_IDLE(USART1); // Enable idle line detection (interrupt) for uart1
 8002f02:	4827      	ldr	r0, [pc, #156]	; (8002fa0 <StartWifiClick+0xbc>)
 8002f04:	f7ff ffcc 	bl	8002ea0 <LL_USART_EnableIT_IDLE>
	HAL_UART_Receive_DMA(&huart1, uart1Buffer, BUFFER_SIZE);
 8002f08:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002f0c:	4925      	ldr	r1, [pc, #148]	; (8002fa4 <StartWifiClick+0xc0>)
 8002f0e:	4826      	ldr	r0, [pc, #152]	; (8002fa8 <StartWifiClick+0xc4>)
 8002f10:	f002 fe76 	bl	8005c00 <HAL_UART_Receive_DMA>

	// Configure Station+AP Mode
	at_set_command(at_cmd_buffer, SendATCommand, AT_WIFI_Set_Mode, "%u", AT_WIFI_Mixed_Mode);
 8002f14:	2303      	movs	r3, #3
 8002f16:	9300      	str	r3, [sp, #0]
 8002f18:	4b24      	ldr	r3, [pc, #144]	; (8002fac <StartWifiClick+0xc8>)
 8002f1a:	4a25      	ldr	r2, [pc, #148]	; (8002fb0 <StartWifiClick+0xcc>)
 8002f1c:	4925      	ldr	r1, [pc, #148]	; (8002fb4 <StartWifiClick+0xd0>)
 8002f1e:	4826      	ldr	r0, [pc, #152]	; (8002fb8 <StartWifiClick+0xd4>)
 8002f20:	f7fd ffd4 	bl	8000ecc <at_set_command>
	osDelay(10);
 8002f24:	200a      	movs	r0, #10
 8002f26:	f004 fc1c 	bl	8007762 <osDelay>
	// Allow multiple connections
	at_set_command(at_cmd_buffer, SendATCommand, AT_IP_Set_MultiConnectionMode, "%u", AT_IP_ConnectionMode_Multiple);
 8002f2a:	2301      	movs	r3, #1
 8002f2c:	9300      	str	r3, [sp, #0]
 8002f2e:	4b1f      	ldr	r3, [pc, #124]	; (8002fac <StartWifiClick+0xc8>)
 8002f30:	4a22      	ldr	r2, [pc, #136]	; (8002fbc <StartWifiClick+0xd8>)
 8002f32:	4920      	ldr	r1, [pc, #128]	; (8002fb4 <StartWifiClick+0xd0>)
 8002f34:	4820      	ldr	r0, [pc, #128]	; (8002fb8 <StartWifiClick+0xd4>)
 8002f36:	f7fd ffc9 	bl	8000ecc <at_set_command>
	osDelay(10);
 8002f3a:	200a      	movs	r0, #10
 8002f3c:	f004 fc11 	bl	8007762 <osDelay>
	// Start TCP server on Port 80
	at_set_command(at_cmd_buffer, SendATCommand, AT_IP_Server, "%u,%u", AT_IP_Server_Create, 80);
 8002f40:	2350      	movs	r3, #80	; 0x50
 8002f42:	9301      	str	r3, [sp, #4]
 8002f44:	2301      	movs	r3, #1
 8002f46:	9300      	str	r3, [sp, #0]
 8002f48:	4b1d      	ldr	r3, [pc, #116]	; (8002fc0 <StartWifiClick+0xdc>)
 8002f4a:	4a1e      	ldr	r2, [pc, #120]	; (8002fc4 <StartWifiClick+0xe0>)
 8002f4c:	4919      	ldr	r1, [pc, #100]	; (8002fb4 <StartWifiClick+0xd0>)
 8002f4e:	481a      	ldr	r0, [pc, #104]	; (8002fb8 <StartWifiClick+0xd4>)
 8002f50:	f7fd ffbc 	bl	8000ecc <at_set_command>
	osDelay(10);
 8002f54:	200a      	movs	r0, #10
 8002f56:	f004 fc04 	bl	8007762 <osDelay>
	// CONNECT to wifi
	at_set_command(at_cmd_buffer, SendATCommand, AT_WIFI_Connect, "\"%s\",\"%s\"", "lustig", "@Kienmayergasse62/13");
 8002f5a:	4b1b      	ldr	r3, [pc, #108]	; (8002fc8 <StartWifiClick+0xe4>)
 8002f5c:	9301      	str	r3, [sp, #4]
 8002f5e:	4b1b      	ldr	r3, [pc, #108]	; (8002fcc <StartWifiClick+0xe8>)
 8002f60:	9300      	str	r3, [sp, #0]
 8002f62:	4b1b      	ldr	r3, [pc, #108]	; (8002fd0 <StartWifiClick+0xec>)
 8002f64:	4a1b      	ldr	r2, [pc, #108]	; (8002fd4 <StartWifiClick+0xf0>)
 8002f66:	4913      	ldr	r1, [pc, #76]	; (8002fb4 <StartWifiClick+0xd0>)
 8002f68:	4813      	ldr	r0, [pc, #76]	; (8002fb8 <StartWifiClick+0xd4>)
 8002f6a:	f7fd ffaf 	bl	8000ecc <at_set_command>
	osDelay(10);
 8002f6e:	200a      	movs	r0, #10
 8002f70:	f004 fbf7 	bl	8007762 <osDelay>
	at_execute_command(at_cmd_buffer, SendATCommand, AT_Startup);
 8002f74:	4a18      	ldr	r2, [pc, #96]	; (8002fd8 <StartWifiClick+0xf4>)
 8002f76:	490f      	ldr	r1, [pc, #60]	; (8002fb4 <StartWifiClick+0xd0>)
 8002f78:	480f      	ldr	r0, [pc, #60]	; (8002fb8 <StartWifiClick+0xd4>)
 8002f7a:	f7fe f801 	bl	8000f80 <at_execute_command>
	osDelay(10);
 8002f7e:	200a      	movs	r0, #10
 8002f80:	f004 fbef 	bl	8007762 <osDelay>

	HAL_UART_Receive_IT(&huart2, &uart2_rx_char, 1);
 8002f84:	2201      	movs	r2, #1
 8002f86:	4915      	ldr	r1, [pc, #84]	; (8002fdc <StartWifiClick+0xf8>)
 8002f88:	4815      	ldr	r0, [pc, #84]	; (8002fe0 <StartWifiClick+0xfc>)
 8002f8a:	f002 fde3 	bl	8005b54 <HAL_UART_Receive_IT>

	osThreadExit();
 8002f8e:	f004 fbe2 	bl	8007756 <osThreadExit>
 8002f92:	bf00      	nop
 8002f94:	20000004 	.word	0x20000004
 8002f98:	2000229c 	.word	0x2000229c
 8002f9c:	08002fe5 	.word	0x08002fe5
 8002fa0:	40013800 	.word	0x40013800
 8002fa4:	20000298 	.word	0x20000298
 8002fa8:	20000148 	.word	0x20000148
 8002fac:	0800b034 	.word	0x0800b034
 8002fb0:	0800b038 	.word	0x0800b038
 8002fb4:	080031a9 	.word	0x080031a9
 8002fb8:	200022a0 	.word	0x200022a0
 8002fbc:	0800b044 	.word	0x0800b044
 8002fc0:	0800b050 	.word	0x0800b050
 8002fc4:	0800b058 	.word	0x0800b058
 8002fc8:	0800b080 	.word	0x0800b080
 8002fcc:	0800b098 	.word	0x0800b098
 8002fd0:	0800b068 	.word	0x0800b068
 8002fd4:	0800b074 	.word	0x0800b074
 8002fd8:	0800b0a0 	.word	0x0800b0a0
 8002fdc:	2000229a 	.word	0x2000229a
 8002fe0:	200001cc 	.word	0x200001cc

08002fe4 <UartHandlerTask>:
}

void UartHandlerTask(void *argument) {
 8002fe4:	b580      	push	{r7, lr}
 8002fe6:	b086      	sub	sp, #24
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	6078      	str	r0, [r7, #4]
	static size_t old_pos = 0;  // Track the position of last character processed

	while(1)
	{
		// Wait for a task notification indicating an uart event
		if(xTaskNotifyWait(0x00, UINT32_MAX, &ulNotificationValue, portMAX_DELAY) == pdPASS) {
 8002fec:	f107 020c 	add.w	r2, r7, #12
 8002ff0:	f04f 33ff 	mov.w	r3, #4294967295
 8002ff4:	f04f 31ff 	mov.w	r1, #4294967295
 8002ff8:	2000      	movs	r0, #0
 8002ffa:	f006 f995 	bl	8009328 <xTaskNotifyWait>
 8002ffe:	4603      	mov	r3, r0
 8003000:	2b01      	cmp	r3, #1
 8003002:	d1f3      	bne.n	8002fec <UartHandlerTask+0x8>

			if(ulNotificationValue & UART1_IDLE_EVENT) // Received message from UART1
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	f003 0301 	and.w	r3, r3, #1
 800300a:	2b00      	cmp	r3, #0
 800300c:	d03e      	beq.n	800308c <UartHandlerTask+0xa8>
			{
				size_t new_pos = BUFFER_SIZE - huart1.hdmarx->Instance->CNDTR;  // Compute the new position in the buffer
 800300e:	4b44      	ldr	r3, [pc, #272]	; (8003120 <UartHandlerTask+0x13c>)
 8003010:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	685b      	ldr	r3, [r3, #4]
 8003016:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
 800301a:	617b      	str	r3, [r7, #20]
				size_t length;

				if(new_pos != old_pos)  // Check if any new data is received
 800301c:	4b41      	ldr	r3, [pc, #260]	; (8003124 <UartHandlerTask+0x140>)
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	697a      	ldr	r2, [r7, #20]
 8003022:	429a      	cmp	r2, r3
 8003024:	d032      	beq.n	800308c <UartHandlerTask+0xa8>
				{
					if (new_pos > old_pos)  // If data does not wrap around the buffer
 8003026:	4b3f      	ldr	r3, [pc, #252]	; (8003124 <UartHandlerTask+0x140>)
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	697a      	ldr	r2, [r7, #20]
 800302c:	429a      	cmp	r2, r3
 800302e:	d910      	bls.n	8003052 <UartHandlerTask+0x6e>
					{
						length = new_pos - old_pos;
 8003030:	4b3c      	ldr	r3, [pc, #240]	; (8003124 <UartHandlerTask+0x140>)
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	697a      	ldr	r2, [r7, #20]
 8003036:	1ad3      	subs	r3, r2, r3
 8003038:	613b      	str	r3, [r7, #16]

						/*
						 * Process here
						 * */
						HAL_UART_Transmit(&huart2, &uart1Buffer[old_pos], length, HAL_MAX_DELAY);
 800303a:	4b3a      	ldr	r3, [pc, #232]	; (8003124 <UartHandlerTask+0x140>)
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	4a3a      	ldr	r2, [pc, #232]	; (8003128 <UartHandlerTask+0x144>)
 8003040:	1899      	adds	r1, r3, r2
 8003042:	693b      	ldr	r3, [r7, #16]
 8003044:	b29a      	uxth	r2, r3
 8003046:	f04f 33ff 	mov.w	r3, #4294967295
 800304a:	4838      	ldr	r0, [pc, #224]	; (800312c <UartHandlerTask+0x148>)
 800304c:	f002 fbae 	bl	80057ac <HAL_UART_Transmit>
 8003050:	e019      	b.n	8003086 <UartHandlerTask+0xa2>
					{
						/*
						 * Process here --> keep in mind, that the data has to be composed, as it wraps around the buffer
						 * */

						length = BUFFER_SIZE - old_pos;
 8003052:	4b34      	ldr	r3, [pc, #208]	; (8003124 <UartHandlerTask+0x140>)
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
 800305a:	613b      	str	r3, [r7, #16]
						HAL_UART_Transmit(&huart2, &uart1Buffer[old_pos], length, HAL_MAX_DELAY);
 800305c:	4b31      	ldr	r3, [pc, #196]	; (8003124 <UartHandlerTask+0x140>)
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	4a31      	ldr	r2, [pc, #196]	; (8003128 <UartHandlerTask+0x144>)
 8003062:	1899      	adds	r1, r3, r2
 8003064:	693b      	ldr	r3, [r7, #16]
 8003066:	b29a      	uxth	r2, r3
 8003068:	f04f 33ff 	mov.w	r3, #4294967295
 800306c:	482f      	ldr	r0, [pc, #188]	; (800312c <UartHandlerTask+0x148>)
 800306e:	f002 fb9d 	bl	80057ac <HAL_UART_Transmit>

						length = new_pos;
 8003072:	697b      	ldr	r3, [r7, #20]
 8003074:	613b      	str	r3, [r7, #16]
						HAL_UART_Transmit(&huart2, uart1Buffer, length, HAL_MAX_DELAY);
 8003076:	693b      	ldr	r3, [r7, #16]
 8003078:	b29a      	uxth	r2, r3
 800307a:	f04f 33ff 	mov.w	r3, #4294967295
 800307e:	492a      	ldr	r1, [pc, #168]	; (8003128 <UartHandlerTask+0x144>)
 8003080:	482a      	ldr	r0, [pc, #168]	; (800312c <UartHandlerTask+0x148>)
 8003082:	f002 fb93 	bl	80057ac <HAL_UART_Transmit>
					}

					old_pos = new_pos;  // Update the position of the last character processed
 8003086:	4a27      	ldr	r2, [pc, #156]	; (8003124 <UartHandlerTask+0x140>)
 8003088:	697b      	ldr	r3, [r7, #20]
 800308a:	6013      	str	r3, [r2, #0]
				}
			}
			if(ulNotificationValue & UART2_EVENT) // Received CHARACTER from UART2
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	f003 0302 	and.w	r3, r3, #2
 8003092:	2b00      	cmp	r3, #0
 8003094:	d0aa      	beq.n	8002fec <UartHandlerTask+0x8>
			{
				char c = (char)uart2_rx_char;
 8003096:	4b26      	ldr	r3, [pc, #152]	; (8003130 <UartHandlerTask+0x14c>)
 8003098:	781b      	ldrb	r3, [r3, #0]
 800309a:	72fb      	strb	r3, [r7, #11]

				// Echo back the character to the terminal
				HAL_UART_Transmit_IT(&huart2, (uint8_t*)&c, 1);
 800309c:	f107 030b 	add.w	r3, r7, #11
 80030a0:	2201      	movs	r2, #1
 80030a2:	4619      	mov	r1, r3
 80030a4:	4821      	ldr	r0, [pc, #132]	; (800312c <UartHandlerTask+0x148>)
 80030a6:	f002 fce7 	bl	8005a78 <HAL_UART_Transmit_IT>

				// If newline, forward the buffer to UART1 and reset buffer
				if(c == '\r')
 80030aa:	7afb      	ldrb	r3, [r7, #11]
 80030ac:	2b0d      	cmp	r3, #13
 80030ae:	d12c      	bne.n	800310a <UartHandlerTask+0x126>
				{
					uart2Buffer[uart2BufferIndex++] = '\r';
 80030b0:	4b20      	ldr	r3, [pc, #128]	; (8003134 <UartHandlerTask+0x150>)
 80030b2:	881b      	ldrh	r3, [r3, #0]
 80030b4:	1c5a      	adds	r2, r3, #1
 80030b6:	b291      	uxth	r1, r2
 80030b8:	4a1e      	ldr	r2, [pc, #120]	; (8003134 <UartHandlerTask+0x150>)
 80030ba:	8011      	strh	r1, [r2, #0]
 80030bc:	461a      	mov	r2, r3
 80030be:	4b1e      	ldr	r3, [pc, #120]	; (8003138 <UartHandlerTask+0x154>)
 80030c0:	210d      	movs	r1, #13
 80030c2:	5499      	strb	r1, [r3, r2]
					uart2Buffer[uart2BufferIndex++] = '\n';
 80030c4:	4b1b      	ldr	r3, [pc, #108]	; (8003134 <UartHandlerTask+0x150>)
 80030c6:	881b      	ldrh	r3, [r3, #0]
 80030c8:	1c5a      	adds	r2, r3, #1
 80030ca:	b291      	uxth	r1, r2
 80030cc:	4a19      	ldr	r2, [pc, #100]	; (8003134 <UartHandlerTask+0x150>)
 80030ce:	8011      	strh	r1, [r2, #0]
 80030d0:	461a      	mov	r2, r3
 80030d2:	4b19      	ldr	r3, [pc, #100]	; (8003138 <UartHandlerTask+0x154>)
 80030d4:	210a      	movs	r1, #10
 80030d6:	5499      	strb	r1, [r3, r2]
					HAL_UART_Transmit_IT(&huart2, (uint8_t*)newLine, 2);
 80030d8:	4b18      	ldr	r3, [pc, #96]	; (800313c <UartHandlerTask+0x158>)
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	2202      	movs	r2, #2
 80030de:	4619      	mov	r1, r3
 80030e0:	4812      	ldr	r0, [pc, #72]	; (800312c <UartHandlerTask+0x148>)
 80030e2:	f002 fcc9 	bl	8005a78 <HAL_UART_Transmit_IT>
					HAL_UART_Transmit(&huart1, uart2Buffer, uart2BufferIndex, HAL_MAX_DELAY);
 80030e6:	4b13      	ldr	r3, [pc, #76]	; (8003134 <UartHandlerTask+0x150>)
 80030e8:	881a      	ldrh	r2, [r3, #0]
 80030ea:	f04f 33ff 	mov.w	r3, #4294967295
 80030ee:	4912      	ldr	r1, [pc, #72]	; (8003138 <UartHandlerTask+0x154>)
 80030f0:	480b      	ldr	r0, [pc, #44]	; (8003120 <UartHandlerTask+0x13c>)
 80030f2:	f002 fb5b 	bl	80057ac <HAL_UART_Transmit>
					memset(uart2Buffer, 0, BUFFER_SIZE);
 80030f6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80030fa:	2100      	movs	r1, #0
 80030fc:	480e      	ldr	r0, [pc, #56]	; (8003138 <UartHandlerTask+0x154>)
 80030fe:	f007 fb66 	bl	800a7ce <memset>
					uart2BufferIndex = 0;
 8003102:	4b0c      	ldr	r3, [pc, #48]	; (8003134 <UartHandlerTask+0x150>)
 8003104:	2200      	movs	r2, #0
 8003106:	801a      	strh	r2, [r3, #0]
 8003108:	e770      	b.n	8002fec <UartHandlerTask+0x8>
				}
				else
				{
					uart2Buffer[uart2BufferIndex++] = c;
 800310a:	4b0a      	ldr	r3, [pc, #40]	; (8003134 <UartHandlerTask+0x150>)
 800310c:	881b      	ldrh	r3, [r3, #0]
 800310e:	1c5a      	adds	r2, r3, #1
 8003110:	b291      	uxth	r1, r2
 8003112:	4a08      	ldr	r2, [pc, #32]	; (8003134 <UartHandlerTask+0x150>)
 8003114:	8011      	strh	r1, [r2, #0]
 8003116:	461a      	mov	r2, r3
 8003118:	7af9      	ldrb	r1, [r7, #11]
 800311a:	4b07      	ldr	r3, [pc, #28]	; (8003138 <UartHandlerTask+0x154>)
 800311c:	5499      	strb	r1, [r3, r2]
		if(xTaskNotifyWait(0x00, UINT32_MAX, &ulNotificationValue, portMAX_DELAY) == pdPASS) {
 800311e:	e765      	b.n	8002fec <UartHandlerTask+0x8>
 8003120:	20000148 	.word	0x20000148
 8003124:	20002320 	.word	0x20002320
 8003128:	20000298 	.word	0x20000298
 800312c:	200001cc 	.word	0x200001cc
 8003130:	2000229a 	.word	0x2000229a
 8003134:	20002298 	.word	0x20002298
 8003138:	20001298 	.word	0x20001298
 800313c:	20000008 	.word	0x20000008

08003140 <HAL_UART_RxCpltCallback>:
	}
}

// Interrupt callback routine for UART
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003140:	b580      	push	{r7, lr}
 8003142:	b086      	sub	sp, #24
 8003144:	af02      	add	r7, sp, #8
 8003146:	6078      	str	r0, [r7, #4]
  if(huart->Instance == USART2) {
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	4a11      	ldr	r2, [pc, #68]	; (8003194 <HAL_UART_RxCpltCallback+0x54>)
 800314e:	4293      	cmp	r3, r2
 8003150:	d11b      	bne.n	800318a <HAL_UART_RxCpltCallback+0x4a>
	  BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8003152:	2300      	movs	r3, #0
 8003154:	60fb      	str	r3, [r7, #12]
	  xTaskNotifyFromISR(xUartTaskHandle, UART2_EVENT, eSetBits, &xHigherPriorityTaskWoken);
 8003156:	4b10      	ldr	r3, [pc, #64]	; (8003198 <HAL_UART_RxCpltCallback+0x58>)
 8003158:	6818      	ldr	r0, [r3, #0]
 800315a:	f107 030c 	add.w	r3, r7, #12
 800315e:	9300      	str	r3, [sp, #0]
 8003160:	2300      	movs	r3, #0
 8003162:	2201      	movs	r2, #1
 8003164:	2102      	movs	r1, #2
 8003166:	f006 f93f 	bl	80093e8 <xTaskGenericNotifyFromISR>
	  portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	2b00      	cmp	r3, #0
 800316e:	d007      	beq.n	8003180 <HAL_UART_RxCpltCallback+0x40>
 8003170:	4b0a      	ldr	r3, [pc, #40]	; (800319c <HAL_UART_RxCpltCallback+0x5c>)
 8003172:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003176:	601a      	str	r2, [r3, #0]
 8003178:	f3bf 8f4f 	dsb	sy
 800317c:	f3bf 8f6f 	isb	sy

	  HAL_UART_Receive_IT(&huart2, &uart2_rx_char, 1);
 8003180:	2201      	movs	r2, #1
 8003182:	4907      	ldr	r1, [pc, #28]	; (80031a0 <HAL_UART_RxCpltCallback+0x60>)
 8003184:	4807      	ldr	r0, [pc, #28]	; (80031a4 <HAL_UART_RxCpltCallback+0x64>)
 8003186:	f002 fce5 	bl	8005b54 <HAL_UART_Receive_IT>
  }
}
 800318a:	bf00      	nop
 800318c:	3710      	adds	r7, #16
 800318e:	46bd      	mov	sp, r7
 8003190:	bd80      	pop	{r7, pc}
 8003192:	bf00      	nop
 8003194:	40004400 	.word	0x40004400
 8003198:	2000229c 	.word	0x2000229c
 800319c:	e000ed04 	.word	0xe000ed04
 80031a0:	2000229a 	.word	0x2000229a
 80031a4:	200001cc 	.word	0x200001cc

080031a8 <SendATCommand>:

void SendATCommand(char *command, int length) {
 80031a8:	b580      	push	{r7, lr}
 80031aa:	b082      	sub	sp, #8
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	6078      	str	r0, [r7, #4]
 80031b0:	6039      	str	r1, [r7, #0]
	HAL_UART_Transmit(&huart1, (uint8_t*)command, length, HAL_MAX_DELAY);
 80031b2:	683b      	ldr	r3, [r7, #0]
 80031b4:	b29a      	uxth	r2, r3
 80031b6:	f04f 33ff 	mov.w	r3, #4294967295
 80031ba:	6879      	ldr	r1, [r7, #4]
 80031bc:	4803      	ldr	r0, [pc, #12]	; (80031cc <SendATCommand+0x24>)
 80031be:	f002 faf5 	bl	80057ac <HAL_UART_Transmit>
}
 80031c2:	bf00      	nop
 80031c4:	3708      	adds	r7, #8
 80031c6:	46bd      	mov	sp, r7
 80031c8:	bd80      	pop	{r7, pc}
 80031ca:	bf00      	nop
 80031cc:	20000148 	.word	0x20000148

080031d0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80031d0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003208 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80031d4:	f7ff fd0a 	bl	8002bec <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80031d8:	480c      	ldr	r0, [pc, #48]	; (800320c <LoopForever+0x6>)
  ldr r1, =_edata
 80031da:	490d      	ldr	r1, [pc, #52]	; (8003210 <LoopForever+0xa>)
  ldr r2, =_sidata
 80031dc:	4a0d      	ldr	r2, [pc, #52]	; (8003214 <LoopForever+0xe>)
  movs r3, #0
 80031de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80031e0:	e002      	b.n	80031e8 <LoopCopyDataInit>

080031e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80031e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80031e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80031e6:	3304      	adds	r3, #4

080031e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80031e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80031ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80031ec:	d3f9      	bcc.n	80031e2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80031ee:	4a0a      	ldr	r2, [pc, #40]	; (8003218 <LoopForever+0x12>)
  ldr r4, =_ebss
 80031f0:	4c0a      	ldr	r4, [pc, #40]	; (800321c <LoopForever+0x16>)
  movs r3, #0
 80031f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80031f4:	e001      	b.n	80031fa <LoopFillZerobss>

080031f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80031f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80031f8:	3204      	adds	r2, #4

080031fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80031fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80031fc:	d3fb      	bcc.n	80031f6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80031fe:	f007 fab1 	bl	800a764 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003202:	f7fd ffeb 	bl	80011dc <main>

08003206 <LoopForever>:

LoopForever:
    b LoopForever
 8003206:	e7fe      	b.n	8003206 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8003208:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 800320c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003210:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8003214:	0800b244 	.word	0x0800b244
  ldr r2, =_sbss
 8003218:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 800321c:	20005e58 	.word	0x20005e58

08003220 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003220:	e7fe      	b.n	8003220 <ADC1_IRQHandler>

08003222 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003222:	b580      	push	{r7, lr}
 8003224:	b082      	sub	sp, #8
 8003226:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003228:	2300      	movs	r3, #0
 800322a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800322c:	2003      	movs	r0, #3
 800322e:	f000 f8de 	bl	80033ee <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003232:	200f      	movs	r0, #15
 8003234:	f7ff fb96 	bl	8002964 <HAL_InitTick>
 8003238:	4603      	mov	r3, r0
 800323a:	2b00      	cmp	r3, #0
 800323c:	d002      	beq.n	8003244 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800323e:	2301      	movs	r3, #1
 8003240:	71fb      	strb	r3, [r7, #7]
 8003242:	e001      	b.n	8003248 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003244:	f7ff fb66 	bl	8002914 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003248:	79fb      	ldrb	r3, [r7, #7]
}
 800324a:	4618      	mov	r0, r3
 800324c:	3708      	adds	r7, #8
 800324e:	46bd      	mov	sp, r7
 8003250:	bd80      	pop	{r7, pc}
	...

08003254 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003254:	b480      	push	{r7}
 8003256:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003258:	4b06      	ldr	r3, [pc, #24]	; (8003274 <HAL_IncTick+0x20>)
 800325a:	781b      	ldrb	r3, [r3, #0]
 800325c:	461a      	mov	r2, r3
 800325e:	4b06      	ldr	r3, [pc, #24]	; (8003278 <HAL_IncTick+0x24>)
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	4413      	add	r3, r2
 8003264:	4a04      	ldr	r2, [pc, #16]	; (8003278 <HAL_IncTick+0x24>)
 8003266:	6013      	str	r3, [r2, #0]
}
 8003268:	bf00      	nop
 800326a:	46bd      	mov	sp, r7
 800326c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003270:	4770      	bx	lr
 8003272:	bf00      	nop
 8003274:	20000010 	.word	0x20000010
 8003278:	20002324 	.word	0x20002324

0800327c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800327c:	b480      	push	{r7}
 800327e:	af00      	add	r7, sp, #0
  return uwTick;
 8003280:	4b03      	ldr	r3, [pc, #12]	; (8003290 <HAL_GetTick+0x14>)
 8003282:	681b      	ldr	r3, [r3, #0]
}
 8003284:	4618      	mov	r0, r3
 8003286:	46bd      	mov	sp, r7
 8003288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800328c:	4770      	bx	lr
 800328e:	bf00      	nop
 8003290:	20002324 	.word	0x20002324

08003294 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003294:	b480      	push	{r7}
 8003296:	b085      	sub	sp, #20
 8003298:	af00      	add	r7, sp, #0
 800329a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	f003 0307 	and.w	r3, r3, #7
 80032a2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80032a4:	4b0c      	ldr	r3, [pc, #48]	; (80032d8 <__NVIC_SetPriorityGrouping+0x44>)
 80032a6:	68db      	ldr	r3, [r3, #12]
 80032a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80032aa:	68ba      	ldr	r2, [r7, #8]
 80032ac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80032b0:	4013      	ands	r3, r2
 80032b2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80032b8:	68bb      	ldr	r3, [r7, #8]
 80032ba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80032bc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80032c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80032c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80032c6:	4a04      	ldr	r2, [pc, #16]	; (80032d8 <__NVIC_SetPriorityGrouping+0x44>)
 80032c8:	68bb      	ldr	r3, [r7, #8]
 80032ca:	60d3      	str	r3, [r2, #12]
}
 80032cc:	bf00      	nop
 80032ce:	3714      	adds	r7, #20
 80032d0:	46bd      	mov	sp, r7
 80032d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d6:	4770      	bx	lr
 80032d8:	e000ed00 	.word	0xe000ed00

080032dc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80032dc:	b480      	push	{r7}
 80032de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80032e0:	4b04      	ldr	r3, [pc, #16]	; (80032f4 <__NVIC_GetPriorityGrouping+0x18>)
 80032e2:	68db      	ldr	r3, [r3, #12]
 80032e4:	0a1b      	lsrs	r3, r3, #8
 80032e6:	f003 0307 	and.w	r3, r3, #7
}
 80032ea:	4618      	mov	r0, r3
 80032ec:	46bd      	mov	sp, r7
 80032ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f2:	4770      	bx	lr
 80032f4:	e000ed00 	.word	0xe000ed00

080032f8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80032f8:	b480      	push	{r7}
 80032fa:	b083      	sub	sp, #12
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	4603      	mov	r3, r0
 8003300:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003302:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003306:	2b00      	cmp	r3, #0
 8003308:	db0b      	blt.n	8003322 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800330a:	79fb      	ldrb	r3, [r7, #7]
 800330c:	f003 021f 	and.w	r2, r3, #31
 8003310:	4907      	ldr	r1, [pc, #28]	; (8003330 <__NVIC_EnableIRQ+0x38>)
 8003312:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003316:	095b      	lsrs	r3, r3, #5
 8003318:	2001      	movs	r0, #1
 800331a:	fa00 f202 	lsl.w	r2, r0, r2
 800331e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003322:	bf00      	nop
 8003324:	370c      	adds	r7, #12
 8003326:	46bd      	mov	sp, r7
 8003328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800332c:	4770      	bx	lr
 800332e:	bf00      	nop
 8003330:	e000e100 	.word	0xe000e100

08003334 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003334:	b480      	push	{r7}
 8003336:	b083      	sub	sp, #12
 8003338:	af00      	add	r7, sp, #0
 800333a:	4603      	mov	r3, r0
 800333c:	6039      	str	r1, [r7, #0]
 800333e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003340:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003344:	2b00      	cmp	r3, #0
 8003346:	db0a      	blt.n	800335e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003348:	683b      	ldr	r3, [r7, #0]
 800334a:	b2da      	uxtb	r2, r3
 800334c:	490c      	ldr	r1, [pc, #48]	; (8003380 <__NVIC_SetPriority+0x4c>)
 800334e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003352:	0112      	lsls	r2, r2, #4
 8003354:	b2d2      	uxtb	r2, r2
 8003356:	440b      	add	r3, r1
 8003358:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800335c:	e00a      	b.n	8003374 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800335e:	683b      	ldr	r3, [r7, #0]
 8003360:	b2da      	uxtb	r2, r3
 8003362:	4908      	ldr	r1, [pc, #32]	; (8003384 <__NVIC_SetPriority+0x50>)
 8003364:	79fb      	ldrb	r3, [r7, #7]
 8003366:	f003 030f 	and.w	r3, r3, #15
 800336a:	3b04      	subs	r3, #4
 800336c:	0112      	lsls	r2, r2, #4
 800336e:	b2d2      	uxtb	r2, r2
 8003370:	440b      	add	r3, r1
 8003372:	761a      	strb	r2, [r3, #24]
}
 8003374:	bf00      	nop
 8003376:	370c      	adds	r7, #12
 8003378:	46bd      	mov	sp, r7
 800337a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800337e:	4770      	bx	lr
 8003380:	e000e100 	.word	0xe000e100
 8003384:	e000ed00 	.word	0xe000ed00

08003388 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003388:	b480      	push	{r7}
 800338a:	b089      	sub	sp, #36	; 0x24
 800338c:	af00      	add	r7, sp, #0
 800338e:	60f8      	str	r0, [r7, #12]
 8003390:	60b9      	str	r1, [r7, #8]
 8003392:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	f003 0307 	and.w	r3, r3, #7
 800339a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800339c:	69fb      	ldr	r3, [r7, #28]
 800339e:	f1c3 0307 	rsb	r3, r3, #7
 80033a2:	2b04      	cmp	r3, #4
 80033a4:	bf28      	it	cs
 80033a6:	2304      	movcs	r3, #4
 80033a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80033aa:	69fb      	ldr	r3, [r7, #28]
 80033ac:	3304      	adds	r3, #4
 80033ae:	2b06      	cmp	r3, #6
 80033b0:	d902      	bls.n	80033b8 <NVIC_EncodePriority+0x30>
 80033b2:	69fb      	ldr	r3, [r7, #28]
 80033b4:	3b03      	subs	r3, #3
 80033b6:	e000      	b.n	80033ba <NVIC_EncodePriority+0x32>
 80033b8:	2300      	movs	r3, #0
 80033ba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80033bc:	f04f 32ff 	mov.w	r2, #4294967295
 80033c0:	69bb      	ldr	r3, [r7, #24]
 80033c2:	fa02 f303 	lsl.w	r3, r2, r3
 80033c6:	43da      	mvns	r2, r3
 80033c8:	68bb      	ldr	r3, [r7, #8]
 80033ca:	401a      	ands	r2, r3
 80033cc:	697b      	ldr	r3, [r7, #20]
 80033ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80033d0:	f04f 31ff 	mov.w	r1, #4294967295
 80033d4:	697b      	ldr	r3, [r7, #20]
 80033d6:	fa01 f303 	lsl.w	r3, r1, r3
 80033da:	43d9      	mvns	r1, r3
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80033e0:	4313      	orrs	r3, r2
         );
}
 80033e2:	4618      	mov	r0, r3
 80033e4:	3724      	adds	r7, #36	; 0x24
 80033e6:	46bd      	mov	sp, r7
 80033e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ec:	4770      	bx	lr

080033ee <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80033ee:	b580      	push	{r7, lr}
 80033f0:	b082      	sub	sp, #8
 80033f2:	af00      	add	r7, sp, #0
 80033f4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80033f6:	6878      	ldr	r0, [r7, #4]
 80033f8:	f7ff ff4c 	bl	8003294 <__NVIC_SetPriorityGrouping>
}
 80033fc:	bf00      	nop
 80033fe:	3708      	adds	r7, #8
 8003400:	46bd      	mov	sp, r7
 8003402:	bd80      	pop	{r7, pc}

08003404 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003404:	b580      	push	{r7, lr}
 8003406:	b086      	sub	sp, #24
 8003408:	af00      	add	r7, sp, #0
 800340a:	4603      	mov	r3, r0
 800340c:	60b9      	str	r1, [r7, #8]
 800340e:	607a      	str	r2, [r7, #4]
 8003410:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003412:	2300      	movs	r3, #0
 8003414:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003416:	f7ff ff61 	bl	80032dc <__NVIC_GetPriorityGrouping>
 800341a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800341c:	687a      	ldr	r2, [r7, #4]
 800341e:	68b9      	ldr	r1, [r7, #8]
 8003420:	6978      	ldr	r0, [r7, #20]
 8003422:	f7ff ffb1 	bl	8003388 <NVIC_EncodePriority>
 8003426:	4602      	mov	r2, r0
 8003428:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800342c:	4611      	mov	r1, r2
 800342e:	4618      	mov	r0, r3
 8003430:	f7ff ff80 	bl	8003334 <__NVIC_SetPriority>
}
 8003434:	bf00      	nop
 8003436:	3718      	adds	r7, #24
 8003438:	46bd      	mov	sp, r7
 800343a:	bd80      	pop	{r7, pc}

0800343c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800343c:	b580      	push	{r7, lr}
 800343e:	b082      	sub	sp, #8
 8003440:	af00      	add	r7, sp, #0
 8003442:	4603      	mov	r3, r0
 8003444:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003446:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800344a:	4618      	mov	r0, r3
 800344c:	f7ff ff54 	bl	80032f8 <__NVIC_EnableIRQ>
}
 8003450:	bf00      	nop
 8003452:	3708      	adds	r7, #8
 8003454:	46bd      	mov	sp, r7
 8003456:	bd80      	pop	{r7, pc}

08003458 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003458:	b480      	push	{r7}
 800345a:	b085      	sub	sp, #20
 800345c:	af00      	add	r7, sp, #0
 800345e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	2b00      	cmp	r3, #0
 8003464:	d101      	bne.n	800346a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003466:	2301      	movs	r3, #1
 8003468:	e098      	b.n	800359c <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	461a      	mov	r2, r3
 8003470:	4b4d      	ldr	r3, [pc, #308]	; (80035a8 <HAL_DMA_Init+0x150>)
 8003472:	429a      	cmp	r2, r3
 8003474:	d80f      	bhi.n	8003496 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	461a      	mov	r2, r3
 800347c:	4b4b      	ldr	r3, [pc, #300]	; (80035ac <HAL_DMA_Init+0x154>)
 800347e:	4413      	add	r3, r2
 8003480:	4a4b      	ldr	r2, [pc, #300]	; (80035b0 <HAL_DMA_Init+0x158>)
 8003482:	fba2 2303 	umull	r2, r3, r2, r3
 8003486:	091b      	lsrs	r3, r3, #4
 8003488:	009a      	lsls	r2, r3, #2
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	4a48      	ldr	r2, [pc, #288]	; (80035b4 <HAL_DMA_Init+0x15c>)
 8003492:	641a      	str	r2, [r3, #64]	; 0x40
 8003494:	e00e      	b.n	80034b4 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	461a      	mov	r2, r3
 800349c:	4b46      	ldr	r3, [pc, #280]	; (80035b8 <HAL_DMA_Init+0x160>)
 800349e:	4413      	add	r3, r2
 80034a0:	4a43      	ldr	r2, [pc, #268]	; (80035b0 <HAL_DMA_Init+0x158>)
 80034a2:	fba2 2303 	umull	r2, r3, r2, r3
 80034a6:	091b      	lsrs	r3, r3, #4
 80034a8:	009a      	lsls	r2, r3, #2
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	4a42      	ldr	r2, [pc, #264]	; (80035bc <HAL_DMA_Init+0x164>)
 80034b2:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	2202      	movs	r2, #2
 80034b8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80034ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80034ce:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80034d8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	691b      	ldr	r3, [r3, #16]
 80034de:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80034e4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	699b      	ldr	r3, [r3, #24]
 80034ea:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80034f0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	6a1b      	ldr	r3, [r3, #32]
 80034f6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80034f8:	68fa      	ldr	r2, [r7, #12]
 80034fa:	4313      	orrs	r3, r2
 80034fc:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	68fa      	ldr	r2, [r7, #12]
 8003504:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	689b      	ldr	r3, [r3, #8]
 800350a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800350e:	d039      	beq.n	8003584 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003514:	4a27      	ldr	r2, [pc, #156]	; (80035b4 <HAL_DMA_Init+0x15c>)
 8003516:	4293      	cmp	r3, r2
 8003518:	d11a      	bne.n	8003550 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800351a:	4b29      	ldr	r3, [pc, #164]	; (80035c0 <HAL_DMA_Init+0x168>)
 800351c:	681a      	ldr	r2, [r3, #0]
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003522:	f003 031c 	and.w	r3, r3, #28
 8003526:	210f      	movs	r1, #15
 8003528:	fa01 f303 	lsl.w	r3, r1, r3
 800352c:	43db      	mvns	r3, r3
 800352e:	4924      	ldr	r1, [pc, #144]	; (80035c0 <HAL_DMA_Init+0x168>)
 8003530:	4013      	ands	r3, r2
 8003532:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8003534:	4b22      	ldr	r3, [pc, #136]	; (80035c0 <HAL_DMA_Init+0x168>)
 8003536:	681a      	ldr	r2, [r3, #0]
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	6859      	ldr	r1, [r3, #4]
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003540:	f003 031c 	and.w	r3, r3, #28
 8003544:	fa01 f303 	lsl.w	r3, r1, r3
 8003548:	491d      	ldr	r1, [pc, #116]	; (80035c0 <HAL_DMA_Init+0x168>)
 800354a:	4313      	orrs	r3, r2
 800354c:	600b      	str	r3, [r1, #0]
 800354e:	e019      	b.n	8003584 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8003550:	4b1c      	ldr	r3, [pc, #112]	; (80035c4 <HAL_DMA_Init+0x16c>)
 8003552:	681a      	ldr	r2, [r3, #0]
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003558:	f003 031c 	and.w	r3, r3, #28
 800355c:	210f      	movs	r1, #15
 800355e:	fa01 f303 	lsl.w	r3, r1, r3
 8003562:	43db      	mvns	r3, r3
 8003564:	4917      	ldr	r1, [pc, #92]	; (80035c4 <HAL_DMA_Init+0x16c>)
 8003566:	4013      	ands	r3, r2
 8003568:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800356a:	4b16      	ldr	r3, [pc, #88]	; (80035c4 <HAL_DMA_Init+0x16c>)
 800356c:	681a      	ldr	r2, [r3, #0]
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	6859      	ldr	r1, [r3, #4]
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003576:	f003 031c 	and.w	r3, r3, #28
 800357a:	fa01 f303 	lsl.w	r3, r1, r3
 800357e:	4911      	ldr	r1, [pc, #68]	; (80035c4 <HAL_DMA_Init+0x16c>)
 8003580:	4313      	orrs	r3, r2
 8003582:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	2200      	movs	r2, #0
 8003588:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	2201      	movs	r2, #1
 800358e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	2200      	movs	r2, #0
 8003596:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800359a:	2300      	movs	r3, #0
}
 800359c:	4618      	mov	r0, r3
 800359e:	3714      	adds	r7, #20
 80035a0:	46bd      	mov	sp, r7
 80035a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a6:	4770      	bx	lr
 80035a8:	40020407 	.word	0x40020407
 80035ac:	bffdfff8 	.word	0xbffdfff8
 80035b0:	cccccccd 	.word	0xcccccccd
 80035b4:	40020000 	.word	0x40020000
 80035b8:	bffdfbf8 	.word	0xbffdfbf8
 80035bc:	40020400 	.word	0x40020400
 80035c0:	400200a8 	.word	0x400200a8
 80035c4:	400204a8 	.word	0x400204a8

080035c8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80035c8:	b580      	push	{r7, lr}
 80035ca:	b086      	sub	sp, #24
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	60f8      	str	r0, [r7, #12]
 80035d0:	60b9      	str	r1, [r7, #8]
 80035d2:	607a      	str	r2, [r7, #4]
 80035d4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80035d6:	2300      	movs	r3, #0
 80035d8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80035e0:	2b01      	cmp	r3, #1
 80035e2:	d101      	bne.n	80035e8 <HAL_DMA_Start_IT+0x20>
 80035e4:	2302      	movs	r3, #2
 80035e6:	e04b      	b.n	8003680 <HAL_DMA_Start_IT+0xb8>
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	2201      	movs	r2, #1
 80035ec:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80035f6:	b2db      	uxtb	r3, r3
 80035f8:	2b01      	cmp	r3, #1
 80035fa:	d13a      	bne.n	8003672 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	2202      	movs	r2, #2
 8003600:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	2200      	movs	r2, #0
 8003608:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	681a      	ldr	r2, [r3, #0]
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f022 0201 	bic.w	r2, r2, #1
 8003618:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800361a:	683b      	ldr	r3, [r7, #0]
 800361c:	687a      	ldr	r2, [r7, #4]
 800361e:	68b9      	ldr	r1, [r7, #8]
 8003620:	68f8      	ldr	r0, [r7, #12]
 8003622:	f000 f95f 	bl	80038e4 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800362a:	2b00      	cmp	r3, #0
 800362c:	d008      	beq.n	8003640 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	681a      	ldr	r2, [r3, #0]
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f042 020e 	orr.w	r2, r2, #14
 800363c:	601a      	str	r2, [r3, #0]
 800363e:	e00f      	b.n	8003660 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	681a      	ldr	r2, [r3, #0]
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f022 0204 	bic.w	r2, r2, #4
 800364e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	681a      	ldr	r2, [r3, #0]
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f042 020a 	orr.w	r2, r2, #10
 800365e:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	681a      	ldr	r2, [r3, #0]
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f042 0201 	orr.w	r2, r2, #1
 800366e:	601a      	str	r2, [r3, #0]
 8003670:	e005      	b.n	800367e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	2200      	movs	r2, #0
 8003676:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800367a:	2302      	movs	r3, #2
 800367c:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800367e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003680:	4618      	mov	r0, r3
 8003682:	3718      	adds	r7, #24
 8003684:	46bd      	mov	sp, r7
 8003686:	bd80      	pop	{r7, pc}

08003688 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003688:	b480      	push	{r7}
 800368a:	b085      	sub	sp, #20
 800368c:	af00      	add	r7, sp, #0
 800368e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003690:	2300      	movs	r3, #0
 8003692:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800369a:	b2db      	uxtb	r3, r3
 800369c:	2b02      	cmp	r3, #2
 800369e:	d008      	beq.n	80036b2 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	2204      	movs	r2, #4
 80036a4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	2200      	movs	r2, #0
 80036aa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80036ae:	2301      	movs	r3, #1
 80036b0:	e022      	b.n	80036f8 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	681a      	ldr	r2, [r3, #0]
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f022 020e 	bic.w	r2, r2, #14
 80036c0:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	681a      	ldr	r2, [r3, #0]
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f022 0201 	bic.w	r2, r2, #1
 80036d0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036d6:	f003 021c 	and.w	r2, r3, #28
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036de:	2101      	movs	r1, #1
 80036e0:	fa01 f202 	lsl.w	r2, r1, r2
 80036e4:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	2201      	movs	r2, #1
 80036ea:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	2200      	movs	r2, #0
 80036f2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 80036f6:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80036f8:	4618      	mov	r0, r3
 80036fa:	3714      	adds	r7, #20
 80036fc:	46bd      	mov	sp, r7
 80036fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003702:	4770      	bx	lr

08003704 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003704:	b580      	push	{r7, lr}
 8003706:	b084      	sub	sp, #16
 8003708:	af00      	add	r7, sp, #0
 800370a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800370c:	2300      	movs	r3, #0
 800370e:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003716:	b2db      	uxtb	r3, r3
 8003718:	2b02      	cmp	r3, #2
 800371a:	d005      	beq.n	8003728 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	2204      	movs	r2, #4
 8003720:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8003722:	2301      	movs	r3, #1
 8003724:	73fb      	strb	r3, [r7, #15]
 8003726:	e029      	b.n	800377c <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	681a      	ldr	r2, [r3, #0]
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f022 020e 	bic.w	r2, r2, #14
 8003736:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	681a      	ldr	r2, [r3, #0]
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f022 0201 	bic.w	r2, r2, #1
 8003746:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800374c:	f003 021c 	and.w	r2, r3, #28
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003754:	2101      	movs	r1, #1
 8003756:	fa01 f202 	lsl.w	r2, r1, r2
 800375a:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	2201      	movs	r2, #1
 8003760:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	2200      	movs	r2, #0
 8003768:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003770:	2b00      	cmp	r3, #0
 8003772:	d003      	beq.n	800377c <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003778:	6878      	ldr	r0, [r7, #4]
 800377a:	4798      	blx	r3
    }
  }
  return status;
 800377c:	7bfb      	ldrb	r3, [r7, #15]
}
 800377e:	4618      	mov	r0, r3
 8003780:	3710      	adds	r7, #16
 8003782:	46bd      	mov	sp, r7
 8003784:	bd80      	pop	{r7, pc}

08003786 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003786:	b580      	push	{r7, lr}
 8003788:	b084      	sub	sp, #16
 800378a:	af00      	add	r7, sp, #0
 800378c:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037a2:	f003 031c 	and.w	r3, r3, #28
 80037a6:	2204      	movs	r2, #4
 80037a8:	409a      	lsls	r2, r3
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	4013      	ands	r3, r2
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d026      	beq.n	8003800 <HAL_DMA_IRQHandler+0x7a>
 80037b2:	68bb      	ldr	r3, [r7, #8]
 80037b4:	f003 0304 	and.w	r3, r3, #4
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d021      	beq.n	8003800 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f003 0320 	and.w	r3, r3, #32
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d107      	bne.n	80037da <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	681a      	ldr	r2, [r3, #0]
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f022 0204 	bic.w	r2, r2, #4
 80037d8:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037de:	f003 021c 	and.w	r2, r3, #28
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037e6:	2104      	movs	r1, #4
 80037e8:	fa01 f202 	lsl.w	r2, r1, r2
 80037ec:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d071      	beq.n	80038da <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037fa:	6878      	ldr	r0, [r7, #4]
 80037fc:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 80037fe:	e06c      	b.n	80038da <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003804:	f003 031c 	and.w	r3, r3, #28
 8003808:	2202      	movs	r2, #2
 800380a:	409a      	lsls	r2, r3
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	4013      	ands	r3, r2
 8003810:	2b00      	cmp	r3, #0
 8003812:	d02e      	beq.n	8003872 <HAL_DMA_IRQHandler+0xec>
 8003814:	68bb      	ldr	r3, [r7, #8]
 8003816:	f003 0302 	and.w	r3, r3, #2
 800381a:	2b00      	cmp	r3, #0
 800381c:	d029      	beq.n	8003872 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f003 0320 	and.w	r3, r3, #32
 8003828:	2b00      	cmp	r3, #0
 800382a:	d10b      	bne.n	8003844 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	681a      	ldr	r2, [r3, #0]
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f022 020a 	bic.w	r2, r2, #10
 800383a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	2201      	movs	r2, #1
 8003840:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003848:	f003 021c 	and.w	r2, r3, #28
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003850:	2102      	movs	r1, #2
 8003852:	fa01 f202 	lsl.w	r2, r1, r2
 8003856:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	2200      	movs	r2, #0
 800385c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003864:	2b00      	cmp	r3, #0
 8003866:	d038      	beq.n	80038da <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800386c:	6878      	ldr	r0, [r7, #4]
 800386e:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8003870:	e033      	b.n	80038da <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003876:	f003 031c 	and.w	r3, r3, #28
 800387a:	2208      	movs	r2, #8
 800387c:	409a      	lsls	r2, r3
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	4013      	ands	r3, r2
 8003882:	2b00      	cmp	r3, #0
 8003884:	d02a      	beq.n	80038dc <HAL_DMA_IRQHandler+0x156>
 8003886:	68bb      	ldr	r3, [r7, #8]
 8003888:	f003 0308 	and.w	r3, r3, #8
 800388c:	2b00      	cmp	r3, #0
 800388e:	d025      	beq.n	80038dc <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	681a      	ldr	r2, [r3, #0]
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f022 020e 	bic.w	r2, r2, #14
 800389e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038a4:	f003 021c 	and.w	r2, r3, #28
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038ac:	2101      	movs	r1, #1
 80038ae:	fa01 f202 	lsl.w	r2, r1, r2
 80038b2:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	2201      	movs	r2, #1
 80038b8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	2201      	movs	r2, #1
 80038be:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	2200      	movs	r2, #0
 80038c6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d004      	beq.n	80038dc <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038d6:	6878      	ldr	r0, [r7, #4]
 80038d8:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80038da:	bf00      	nop
 80038dc:	bf00      	nop
}
 80038de:	3710      	adds	r7, #16
 80038e0:	46bd      	mov	sp, r7
 80038e2:	bd80      	pop	{r7, pc}

080038e4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80038e4:	b480      	push	{r7}
 80038e6:	b085      	sub	sp, #20
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	60f8      	str	r0, [r7, #12]
 80038ec:	60b9      	str	r1, [r7, #8]
 80038ee:	607a      	str	r2, [r7, #4]
 80038f0:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038f6:	f003 021c 	and.w	r2, r3, #28
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038fe:	2101      	movs	r1, #1
 8003900:	fa01 f202 	lsl.w	r2, r1, r2
 8003904:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	683a      	ldr	r2, [r7, #0]
 800390c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	689b      	ldr	r3, [r3, #8]
 8003912:	2b10      	cmp	r3, #16
 8003914:	d108      	bne.n	8003928 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	687a      	ldr	r2, [r7, #4]
 800391c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	68ba      	ldr	r2, [r7, #8]
 8003924:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003926:	e007      	b.n	8003938 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	68ba      	ldr	r2, [r7, #8]
 800392e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	687a      	ldr	r2, [r7, #4]
 8003936:	60da      	str	r2, [r3, #12]
}
 8003938:	bf00      	nop
 800393a:	3714      	adds	r7, #20
 800393c:	46bd      	mov	sp, r7
 800393e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003942:	4770      	bx	lr

08003944 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003944:	b480      	push	{r7}
 8003946:	b087      	sub	sp, #28
 8003948:	af00      	add	r7, sp, #0
 800394a:	6078      	str	r0, [r7, #4]
 800394c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800394e:	2300      	movs	r3, #0
 8003950:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003952:	e148      	b.n	8003be6 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003954:	683b      	ldr	r3, [r7, #0]
 8003956:	681a      	ldr	r2, [r3, #0]
 8003958:	2101      	movs	r1, #1
 800395a:	697b      	ldr	r3, [r7, #20]
 800395c:	fa01 f303 	lsl.w	r3, r1, r3
 8003960:	4013      	ands	r3, r2
 8003962:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	2b00      	cmp	r3, #0
 8003968:	f000 813a 	beq.w	8003be0 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800396c:	683b      	ldr	r3, [r7, #0]
 800396e:	685b      	ldr	r3, [r3, #4]
 8003970:	f003 0303 	and.w	r3, r3, #3
 8003974:	2b01      	cmp	r3, #1
 8003976:	d005      	beq.n	8003984 <HAL_GPIO_Init+0x40>
 8003978:	683b      	ldr	r3, [r7, #0]
 800397a:	685b      	ldr	r3, [r3, #4]
 800397c:	f003 0303 	and.w	r3, r3, #3
 8003980:	2b02      	cmp	r3, #2
 8003982:	d130      	bne.n	80039e6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	689b      	ldr	r3, [r3, #8]
 8003988:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800398a:	697b      	ldr	r3, [r7, #20]
 800398c:	005b      	lsls	r3, r3, #1
 800398e:	2203      	movs	r2, #3
 8003990:	fa02 f303 	lsl.w	r3, r2, r3
 8003994:	43db      	mvns	r3, r3
 8003996:	693a      	ldr	r2, [r7, #16]
 8003998:	4013      	ands	r3, r2
 800399a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800399c:	683b      	ldr	r3, [r7, #0]
 800399e:	68da      	ldr	r2, [r3, #12]
 80039a0:	697b      	ldr	r3, [r7, #20]
 80039a2:	005b      	lsls	r3, r3, #1
 80039a4:	fa02 f303 	lsl.w	r3, r2, r3
 80039a8:	693a      	ldr	r2, [r7, #16]
 80039aa:	4313      	orrs	r3, r2
 80039ac:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	693a      	ldr	r2, [r7, #16]
 80039b2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	685b      	ldr	r3, [r3, #4]
 80039b8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80039ba:	2201      	movs	r2, #1
 80039bc:	697b      	ldr	r3, [r7, #20]
 80039be:	fa02 f303 	lsl.w	r3, r2, r3
 80039c2:	43db      	mvns	r3, r3
 80039c4:	693a      	ldr	r2, [r7, #16]
 80039c6:	4013      	ands	r3, r2
 80039c8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80039ca:	683b      	ldr	r3, [r7, #0]
 80039cc:	685b      	ldr	r3, [r3, #4]
 80039ce:	091b      	lsrs	r3, r3, #4
 80039d0:	f003 0201 	and.w	r2, r3, #1
 80039d4:	697b      	ldr	r3, [r7, #20]
 80039d6:	fa02 f303 	lsl.w	r3, r2, r3
 80039da:	693a      	ldr	r2, [r7, #16]
 80039dc:	4313      	orrs	r3, r2
 80039de:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	693a      	ldr	r2, [r7, #16]
 80039e4:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80039e6:	683b      	ldr	r3, [r7, #0]
 80039e8:	685b      	ldr	r3, [r3, #4]
 80039ea:	f003 0303 	and.w	r3, r3, #3
 80039ee:	2b03      	cmp	r3, #3
 80039f0:	d017      	beq.n	8003a22 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	68db      	ldr	r3, [r3, #12]
 80039f6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80039f8:	697b      	ldr	r3, [r7, #20]
 80039fa:	005b      	lsls	r3, r3, #1
 80039fc:	2203      	movs	r2, #3
 80039fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003a02:	43db      	mvns	r3, r3
 8003a04:	693a      	ldr	r2, [r7, #16]
 8003a06:	4013      	ands	r3, r2
 8003a08:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003a0a:	683b      	ldr	r3, [r7, #0]
 8003a0c:	689a      	ldr	r2, [r3, #8]
 8003a0e:	697b      	ldr	r3, [r7, #20]
 8003a10:	005b      	lsls	r3, r3, #1
 8003a12:	fa02 f303 	lsl.w	r3, r2, r3
 8003a16:	693a      	ldr	r2, [r7, #16]
 8003a18:	4313      	orrs	r3, r2
 8003a1a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	693a      	ldr	r2, [r7, #16]
 8003a20:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003a22:	683b      	ldr	r3, [r7, #0]
 8003a24:	685b      	ldr	r3, [r3, #4]
 8003a26:	f003 0303 	and.w	r3, r3, #3
 8003a2a:	2b02      	cmp	r3, #2
 8003a2c:	d123      	bne.n	8003a76 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003a2e:	697b      	ldr	r3, [r7, #20]
 8003a30:	08da      	lsrs	r2, r3, #3
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	3208      	adds	r2, #8
 8003a36:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003a3a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003a3c:	697b      	ldr	r3, [r7, #20]
 8003a3e:	f003 0307 	and.w	r3, r3, #7
 8003a42:	009b      	lsls	r3, r3, #2
 8003a44:	220f      	movs	r2, #15
 8003a46:	fa02 f303 	lsl.w	r3, r2, r3
 8003a4a:	43db      	mvns	r3, r3
 8003a4c:	693a      	ldr	r2, [r7, #16]
 8003a4e:	4013      	ands	r3, r2
 8003a50:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003a52:	683b      	ldr	r3, [r7, #0]
 8003a54:	691a      	ldr	r2, [r3, #16]
 8003a56:	697b      	ldr	r3, [r7, #20]
 8003a58:	f003 0307 	and.w	r3, r3, #7
 8003a5c:	009b      	lsls	r3, r3, #2
 8003a5e:	fa02 f303 	lsl.w	r3, r2, r3
 8003a62:	693a      	ldr	r2, [r7, #16]
 8003a64:	4313      	orrs	r3, r2
 8003a66:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003a68:	697b      	ldr	r3, [r7, #20]
 8003a6a:	08da      	lsrs	r2, r3, #3
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	3208      	adds	r2, #8
 8003a70:	6939      	ldr	r1, [r7, #16]
 8003a72:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003a7c:	697b      	ldr	r3, [r7, #20]
 8003a7e:	005b      	lsls	r3, r3, #1
 8003a80:	2203      	movs	r2, #3
 8003a82:	fa02 f303 	lsl.w	r3, r2, r3
 8003a86:	43db      	mvns	r3, r3
 8003a88:	693a      	ldr	r2, [r7, #16]
 8003a8a:	4013      	ands	r3, r2
 8003a8c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003a8e:	683b      	ldr	r3, [r7, #0]
 8003a90:	685b      	ldr	r3, [r3, #4]
 8003a92:	f003 0203 	and.w	r2, r3, #3
 8003a96:	697b      	ldr	r3, [r7, #20]
 8003a98:	005b      	lsls	r3, r3, #1
 8003a9a:	fa02 f303 	lsl.w	r3, r2, r3
 8003a9e:	693a      	ldr	r2, [r7, #16]
 8003aa0:	4313      	orrs	r3, r2
 8003aa2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	693a      	ldr	r2, [r7, #16]
 8003aa8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003aaa:	683b      	ldr	r3, [r7, #0]
 8003aac:	685b      	ldr	r3, [r3, #4]
 8003aae:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	f000 8094 	beq.w	8003be0 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003ab8:	4b52      	ldr	r3, [pc, #328]	; (8003c04 <HAL_GPIO_Init+0x2c0>)
 8003aba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003abc:	4a51      	ldr	r2, [pc, #324]	; (8003c04 <HAL_GPIO_Init+0x2c0>)
 8003abe:	f043 0301 	orr.w	r3, r3, #1
 8003ac2:	6613      	str	r3, [r2, #96]	; 0x60
 8003ac4:	4b4f      	ldr	r3, [pc, #316]	; (8003c04 <HAL_GPIO_Init+0x2c0>)
 8003ac6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ac8:	f003 0301 	and.w	r3, r3, #1
 8003acc:	60bb      	str	r3, [r7, #8]
 8003ace:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003ad0:	4a4d      	ldr	r2, [pc, #308]	; (8003c08 <HAL_GPIO_Init+0x2c4>)
 8003ad2:	697b      	ldr	r3, [r7, #20]
 8003ad4:	089b      	lsrs	r3, r3, #2
 8003ad6:	3302      	adds	r3, #2
 8003ad8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003adc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003ade:	697b      	ldr	r3, [r7, #20]
 8003ae0:	f003 0303 	and.w	r3, r3, #3
 8003ae4:	009b      	lsls	r3, r3, #2
 8003ae6:	220f      	movs	r2, #15
 8003ae8:	fa02 f303 	lsl.w	r3, r2, r3
 8003aec:	43db      	mvns	r3, r3
 8003aee:	693a      	ldr	r2, [r7, #16]
 8003af0:	4013      	ands	r3, r2
 8003af2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003afa:	d00d      	beq.n	8003b18 <HAL_GPIO_Init+0x1d4>
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	4a43      	ldr	r2, [pc, #268]	; (8003c0c <HAL_GPIO_Init+0x2c8>)
 8003b00:	4293      	cmp	r3, r2
 8003b02:	d007      	beq.n	8003b14 <HAL_GPIO_Init+0x1d0>
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	4a42      	ldr	r2, [pc, #264]	; (8003c10 <HAL_GPIO_Init+0x2cc>)
 8003b08:	4293      	cmp	r3, r2
 8003b0a:	d101      	bne.n	8003b10 <HAL_GPIO_Init+0x1cc>
 8003b0c:	2302      	movs	r3, #2
 8003b0e:	e004      	b.n	8003b1a <HAL_GPIO_Init+0x1d6>
 8003b10:	2307      	movs	r3, #7
 8003b12:	e002      	b.n	8003b1a <HAL_GPIO_Init+0x1d6>
 8003b14:	2301      	movs	r3, #1
 8003b16:	e000      	b.n	8003b1a <HAL_GPIO_Init+0x1d6>
 8003b18:	2300      	movs	r3, #0
 8003b1a:	697a      	ldr	r2, [r7, #20]
 8003b1c:	f002 0203 	and.w	r2, r2, #3
 8003b20:	0092      	lsls	r2, r2, #2
 8003b22:	4093      	lsls	r3, r2
 8003b24:	693a      	ldr	r2, [r7, #16]
 8003b26:	4313      	orrs	r3, r2
 8003b28:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003b2a:	4937      	ldr	r1, [pc, #220]	; (8003c08 <HAL_GPIO_Init+0x2c4>)
 8003b2c:	697b      	ldr	r3, [r7, #20]
 8003b2e:	089b      	lsrs	r3, r3, #2
 8003b30:	3302      	adds	r3, #2
 8003b32:	693a      	ldr	r2, [r7, #16]
 8003b34:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003b38:	4b36      	ldr	r3, [pc, #216]	; (8003c14 <HAL_GPIO_Init+0x2d0>)
 8003b3a:	689b      	ldr	r3, [r3, #8]
 8003b3c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	43db      	mvns	r3, r3
 8003b42:	693a      	ldr	r2, [r7, #16]
 8003b44:	4013      	ands	r3, r2
 8003b46:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003b48:	683b      	ldr	r3, [r7, #0]
 8003b4a:	685b      	ldr	r3, [r3, #4]
 8003b4c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d003      	beq.n	8003b5c <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8003b54:	693a      	ldr	r2, [r7, #16]
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	4313      	orrs	r3, r2
 8003b5a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003b5c:	4a2d      	ldr	r2, [pc, #180]	; (8003c14 <HAL_GPIO_Init+0x2d0>)
 8003b5e:	693b      	ldr	r3, [r7, #16]
 8003b60:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003b62:	4b2c      	ldr	r3, [pc, #176]	; (8003c14 <HAL_GPIO_Init+0x2d0>)
 8003b64:	68db      	ldr	r3, [r3, #12]
 8003b66:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	43db      	mvns	r3, r3
 8003b6c:	693a      	ldr	r2, [r7, #16]
 8003b6e:	4013      	ands	r3, r2
 8003b70:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003b72:	683b      	ldr	r3, [r7, #0]
 8003b74:	685b      	ldr	r3, [r3, #4]
 8003b76:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d003      	beq.n	8003b86 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8003b7e:	693a      	ldr	r2, [r7, #16]
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	4313      	orrs	r3, r2
 8003b84:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003b86:	4a23      	ldr	r2, [pc, #140]	; (8003c14 <HAL_GPIO_Init+0x2d0>)
 8003b88:	693b      	ldr	r3, [r7, #16]
 8003b8a:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003b8c:	4b21      	ldr	r3, [pc, #132]	; (8003c14 <HAL_GPIO_Init+0x2d0>)
 8003b8e:	685b      	ldr	r3, [r3, #4]
 8003b90:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	43db      	mvns	r3, r3
 8003b96:	693a      	ldr	r2, [r7, #16]
 8003b98:	4013      	ands	r3, r2
 8003b9a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003b9c:	683b      	ldr	r3, [r7, #0]
 8003b9e:	685b      	ldr	r3, [r3, #4]
 8003ba0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d003      	beq.n	8003bb0 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8003ba8:	693a      	ldr	r2, [r7, #16]
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	4313      	orrs	r3, r2
 8003bae:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003bb0:	4a18      	ldr	r2, [pc, #96]	; (8003c14 <HAL_GPIO_Init+0x2d0>)
 8003bb2:	693b      	ldr	r3, [r7, #16]
 8003bb4:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8003bb6:	4b17      	ldr	r3, [pc, #92]	; (8003c14 <HAL_GPIO_Init+0x2d0>)
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	43db      	mvns	r3, r3
 8003bc0:	693a      	ldr	r2, [r7, #16]
 8003bc2:	4013      	ands	r3, r2
 8003bc4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003bc6:	683b      	ldr	r3, [r7, #0]
 8003bc8:	685b      	ldr	r3, [r3, #4]
 8003bca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d003      	beq.n	8003bda <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8003bd2:	693a      	ldr	r2, [r7, #16]
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	4313      	orrs	r3, r2
 8003bd8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003bda:	4a0e      	ldr	r2, [pc, #56]	; (8003c14 <HAL_GPIO_Init+0x2d0>)
 8003bdc:	693b      	ldr	r3, [r7, #16]
 8003bde:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003be0:	697b      	ldr	r3, [r7, #20]
 8003be2:	3301      	adds	r3, #1
 8003be4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003be6:	683b      	ldr	r3, [r7, #0]
 8003be8:	681a      	ldr	r2, [r3, #0]
 8003bea:	697b      	ldr	r3, [r7, #20]
 8003bec:	fa22 f303 	lsr.w	r3, r2, r3
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	f47f aeaf 	bne.w	8003954 <HAL_GPIO_Init+0x10>
  }
}
 8003bf6:	bf00      	nop
 8003bf8:	bf00      	nop
 8003bfa:	371c      	adds	r7, #28
 8003bfc:	46bd      	mov	sp, r7
 8003bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c02:	4770      	bx	lr
 8003c04:	40021000 	.word	0x40021000
 8003c08:	40010000 	.word	0x40010000
 8003c0c:	48000400 	.word	0x48000400
 8003c10:	48000800 	.word	0x48000800
 8003c14:	40010400 	.word	0x40010400

08003c18 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003c18:	b580      	push	{r7, lr}
 8003c1a:	b082      	sub	sp, #8
 8003c1c:	af00      	add	r7, sp, #0
 8003c1e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d101      	bne.n	8003c2a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003c26:	2301      	movs	r3, #1
 8003c28:	e081      	b.n	8003d2e <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003c30:	b2db      	uxtb	r3, r3
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d106      	bne.n	8003c44 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	2200      	movs	r2, #0
 8003c3a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003c3e:	6878      	ldr	r0, [r7, #4]
 8003c40:	f7fd fa74 	bl	800112c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	2224      	movs	r2, #36	; 0x24
 8003c48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	681a      	ldr	r2, [r3, #0]
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f022 0201 	bic.w	r2, r2, #1
 8003c5a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	685a      	ldr	r2, [r3, #4]
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003c68:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	689a      	ldr	r2, [r3, #8]
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003c78:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	68db      	ldr	r3, [r3, #12]
 8003c7e:	2b01      	cmp	r3, #1
 8003c80:	d107      	bne.n	8003c92 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	689a      	ldr	r2, [r3, #8]
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003c8e:	609a      	str	r2, [r3, #8]
 8003c90:	e006      	b.n	8003ca0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	689a      	ldr	r2, [r3, #8]
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003c9e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	68db      	ldr	r3, [r3, #12]
 8003ca4:	2b02      	cmp	r3, #2
 8003ca6:	d104      	bne.n	8003cb2 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003cb0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	685b      	ldr	r3, [r3, #4]
 8003cb8:	687a      	ldr	r2, [r7, #4]
 8003cba:	6812      	ldr	r2, [r2, #0]
 8003cbc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003cc0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003cc4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	68da      	ldr	r2, [r3, #12]
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003cd4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	691a      	ldr	r2, [r3, #16]
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	695b      	ldr	r3, [r3, #20]
 8003cde:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	699b      	ldr	r3, [r3, #24]
 8003ce6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	430a      	orrs	r2, r1
 8003cee:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	69d9      	ldr	r1, [r3, #28]
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	6a1a      	ldr	r2, [r3, #32]
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	430a      	orrs	r2, r1
 8003cfe:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	681a      	ldr	r2, [r3, #0]
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f042 0201 	orr.w	r2, r2, #1
 8003d0e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	2200      	movs	r2, #0
 8003d14:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	2220      	movs	r2, #32
 8003d1a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	2200      	movs	r2, #0
 8003d22:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	2200      	movs	r2, #0
 8003d28:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003d2c:	2300      	movs	r3, #0
}
 8003d2e:	4618      	mov	r0, r3
 8003d30:	3708      	adds	r7, #8
 8003d32:	46bd      	mov	sp, r7
 8003d34:	bd80      	pop	{r7, pc}

08003d36 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003d36:	b480      	push	{r7}
 8003d38:	b083      	sub	sp, #12
 8003d3a:	af00      	add	r7, sp, #0
 8003d3c:	6078      	str	r0, [r7, #4]
 8003d3e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003d46:	b2db      	uxtb	r3, r3
 8003d48:	2b20      	cmp	r3, #32
 8003d4a:	d138      	bne.n	8003dbe <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003d52:	2b01      	cmp	r3, #1
 8003d54:	d101      	bne.n	8003d5a <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003d56:	2302      	movs	r3, #2
 8003d58:	e032      	b.n	8003dc0 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	2201      	movs	r2, #1
 8003d5e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	2224      	movs	r2, #36	; 0x24
 8003d66:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	681a      	ldr	r2, [r3, #0]
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	f022 0201 	bic.w	r2, r2, #1
 8003d78:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	681a      	ldr	r2, [r3, #0]
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003d88:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	6819      	ldr	r1, [r3, #0]
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	683a      	ldr	r2, [r7, #0]
 8003d96:	430a      	orrs	r2, r1
 8003d98:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	681a      	ldr	r2, [r3, #0]
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	f042 0201 	orr.w	r2, r2, #1
 8003da8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	2220      	movs	r2, #32
 8003dae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	2200      	movs	r2, #0
 8003db6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003dba:	2300      	movs	r3, #0
 8003dbc:	e000      	b.n	8003dc0 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003dbe:	2302      	movs	r3, #2
  }
}
 8003dc0:	4618      	mov	r0, r3
 8003dc2:	370c      	adds	r7, #12
 8003dc4:	46bd      	mov	sp, r7
 8003dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dca:	4770      	bx	lr

08003dcc <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003dcc:	b480      	push	{r7}
 8003dce:	b085      	sub	sp, #20
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	6078      	str	r0, [r7, #4]
 8003dd4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003ddc:	b2db      	uxtb	r3, r3
 8003dde:	2b20      	cmp	r3, #32
 8003de0:	d139      	bne.n	8003e56 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003de8:	2b01      	cmp	r3, #1
 8003dea:	d101      	bne.n	8003df0 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003dec:	2302      	movs	r3, #2
 8003dee:	e033      	b.n	8003e58 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	2201      	movs	r2, #1
 8003df4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	2224      	movs	r2, #36	; 0x24
 8003dfc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	681a      	ldr	r2, [r3, #0]
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f022 0201 	bic.w	r2, r2, #1
 8003e0e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003e1e:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003e20:	683b      	ldr	r3, [r7, #0]
 8003e22:	021b      	lsls	r3, r3, #8
 8003e24:	68fa      	ldr	r2, [r7, #12]
 8003e26:	4313      	orrs	r3, r2
 8003e28:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	68fa      	ldr	r2, [r7, #12]
 8003e30:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	681a      	ldr	r2, [r3, #0]
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f042 0201 	orr.w	r2, r2, #1
 8003e40:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	2220      	movs	r2, #32
 8003e46:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	2200      	movs	r2, #0
 8003e4e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003e52:	2300      	movs	r3, #0
 8003e54:	e000      	b.n	8003e58 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003e56:	2302      	movs	r3, #2
  }
}
 8003e58:	4618      	mov	r0, r3
 8003e5a:	3714      	adds	r7, #20
 8003e5c:	46bd      	mov	sp, r7
 8003e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e62:	4770      	bx	lr

08003e64 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003e64:	b480      	push	{r7}
 8003e66:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003e68:	4b05      	ldr	r3, [pc, #20]	; (8003e80 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	4a04      	ldr	r2, [pc, #16]	; (8003e80 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003e6e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e72:	6013      	str	r3, [r2, #0]
}
 8003e74:	bf00      	nop
 8003e76:	46bd      	mov	sp, r7
 8003e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e7c:	4770      	bx	lr
 8003e7e:	bf00      	nop
 8003e80:	40007000 	.word	0x40007000

08003e84 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003e84:	b480      	push	{r7}
 8003e86:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003e88:	4b04      	ldr	r3, [pc, #16]	; (8003e9c <HAL_PWREx_GetVoltageRange+0x18>)
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8003e90:	4618      	mov	r0, r3
 8003e92:	46bd      	mov	sp, r7
 8003e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e98:	4770      	bx	lr
 8003e9a:	bf00      	nop
 8003e9c:	40007000 	.word	0x40007000

08003ea0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003ea0:	b480      	push	{r7}
 8003ea2:	b085      	sub	sp, #20
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003eae:	d130      	bne.n	8003f12 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003eb0:	4b23      	ldr	r3, [pc, #140]	; (8003f40 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003eb8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003ebc:	d038      	beq.n	8003f30 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003ebe:	4b20      	ldr	r3, [pc, #128]	; (8003f40 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003ec6:	4a1e      	ldr	r2, [pc, #120]	; (8003f40 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003ec8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003ecc:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003ece:	4b1d      	ldr	r3, [pc, #116]	; (8003f44 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	2232      	movs	r2, #50	; 0x32
 8003ed4:	fb02 f303 	mul.w	r3, r2, r3
 8003ed8:	4a1b      	ldr	r2, [pc, #108]	; (8003f48 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003eda:	fba2 2303 	umull	r2, r3, r2, r3
 8003ede:	0c9b      	lsrs	r3, r3, #18
 8003ee0:	3301      	adds	r3, #1
 8003ee2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003ee4:	e002      	b.n	8003eec <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	3b01      	subs	r3, #1
 8003eea:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003eec:	4b14      	ldr	r3, [pc, #80]	; (8003f40 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003eee:	695b      	ldr	r3, [r3, #20]
 8003ef0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ef4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ef8:	d102      	bne.n	8003f00 <HAL_PWREx_ControlVoltageScaling+0x60>
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d1f2      	bne.n	8003ee6 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003f00:	4b0f      	ldr	r3, [pc, #60]	; (8003f40 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003f02:	695b      	ldr	r3, [r3, #20]
 8003f04:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f08:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f0c:	d110      	bne.n	8003f30 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8003f0e:	2303      	movs	r3, #3
 8003f10:	e00f      	b.n	8003f32 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003f12:	4b0b      	ldr	r3, [pc, #44]	; (8003f40 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003f1a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f1e:	d007      	beq.n	8003f30 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003f20:	4b07      	ldr	r3, [pc, #28]	; (8003f40 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003f28:	4a05      	ldr	r2, [pc, #20]	; (8003f40 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003f2a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003f2e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003f30:	2300      	movs	r3, #0
}
 8003f32:	4618      	mov	r0, r3
 8003f34:	3714      	adds	r7, #20
 8003f36:	46bd      	mov	sp, r7
 8003f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f3c:	4770      	bx	lr
 8003f3e:	bf00      	nop
 8003f40:	40007000 	.word	0x40007000
 8003f44:	20000000 	.word	0x20000000
 8003f48:	431bde83 	.word	0x431bde83

08003f4c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003f4c:	b580      	push	{r7, lr}
 8003f4e:	b088      	sub	sp, #32
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d102      	bne.n	8003f60 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003f5a:	2301      	movs	r3, #1
 8003f5c:	f000 bc02 	b.w	8004764 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003f60:	4b96      	ldr	r3, [pc, #600]	; (80041bc <HAL_RCC_OscConfig+0x270>)
 8003f62:	689b      	ldr	r3, [r3, #8]
 8003f64:	f003 030c 	and.w	r3, r3, #12
 8003f68:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003f6a:	4b94      	ldr	r3, [pc, #592]	; (80041bc <HAL_RCC_OscConfig+0x270>)
 8003f6c:	68db      	ldr	r3, [r3, #12]
 8003f6e:	f003 0303 	and.w	r3, r3, #3
 8003f72:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	f003 0310 	and.w	r3, r3, #16
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	f000 80e4 	beq.w	800414a <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003f82:	69bb      	ldr	r3, [r7, #24]
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d007      	beq.n	8003f98 <HAL_RCC_OscConfig+0x4c>
 8003f88:	69bb      	ldr	r3, [r7, #24]
 8003f8a:	2b0c      	cmp	r3, #12
 8003f8c:	f040 808b 	bne.w	80040a6 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003f90:	697b      	ldr	r3, [r7, #20]
 8003f92:	2b01      	cmp	r3, #1
 8003f94:	f040 8087 	bne.w	80040a6 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003f98:	4b88      	ldr	r3, [pc, #544]	; (80041bc <HAL_RCC_OscConfig+0x270>)
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	f003 0302 	and.w	r3, r3, #2
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d005      	beq.n	8003fb0 <HAL_RCC_OscConfig+0x64>
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	699b      	ldr	r3, [r3, #24]
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d101      	bne.n	8003fb0 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8003fac:	2301      	movs	r3, #1
 8003fae:	e3d9      	b.n	8004764 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	6a1a      	ldr	r2, [r3, #32]
 8003fb4:	4b81      	ldr	r3, [pc, #516]	; (80041bc <HAL_RCC_OscConfig+0x270>)
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	f003 0308 	and.w	r3, r3, #8
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d004      	beq.n	8003fca <HAL_RCC_OscConfig+0x7e>
 8003fc0:	4b7e      	ldr	r3, [pc, #504]	; (80041bc <HAL_RCC_OscConfig+0x270>)
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003fc8:	e005      	b.n	8003fd6 <HAL_RCC_OscConfig+0x8a>
 8003fca:	4b7c      	ldr	r3, [pc, #496]	; (80041bc <HAL_RCC_OscConfig+0x270>)
 8003fcc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003fd0:	091b      	lsrs	r3, r3, #4
 8003fd2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003fd6:	4293      	cmp	r3, r2
 8003fd8:	d223      	bcs.n	8004022 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	6a1b      	ldr	r3, [r3, #32]
 8003fde:	4618      	mov	r0, r3
 8003fe0:	f000 fdbe 	bl	8004b60 <RCC_SetFlashLatencyFromMSIRange>
 8003fe4:	4603      	mov	r3, r0
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d001      	beq.n	8003fee <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8003fea:	2301      	movs	r3, #1
 8003fec:	e3ba      	b.n	8004764 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003fee:	4b73      	ldr	r3, [pc, #460]	; (80041bc <HAL_RCC_OscConfig+0x270>)
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	4a72      	ldr	r2, [pc, #456]	; (80041bc <HAL_RCC_OscConfig+0x270>)
 8003ff4:	f043 0308 	orr.w	r3, r3, #8
 8003ff8:	6013      	str	r3, [r2, #0]
 8003ffa:	4b70      	ldr	r3, [pc, #448]	; (80041bc <HAL_RCC_OscConfig+0x270>)
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	6a1b      	ldr	r3, [r3, #32]
 8004006:	496d      	ldr	r1, [pc, #436]	; (80041bc <HAL_RCC_OscConfig+0x270>)
 8004008:	4313      	orrs	r3, r2
 800400a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800400c:	4b6b      	ldr	r3, [pc, #428]	; (80041bc <HAL_RCC_OscConfig+0x270>)
 800400e:	685b      	ldr	r3, [r3, #4]
 8004010:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	69db      	ldr	r3, [r3, #28]
 8004018:	021b      	lsls	r3, r3, #8
 800401a:	4968      	ldr	r1, [pc, #416]	; (80041bc <HAL_RCC_OscConfig+0x270>)
 800401c:	4313      	orrs	r3, r2
 800401e:	604b      	str	r3, [r1, #4]
 8004020:	e025      	b.n	800406e <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004022:	4b66      	ldr	r3, [pc, #408]	; (80041bc <HAL_RCC_OscConfig+0x270>)
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	4a65      	ldr	r2, [pc, #404]	; (80041bc <HAL_RCC_OscConfig+0x270>)
 8004028:	f043 0308 	orr.w	r3, r3, #8
 800402c:	6013      	str	r3, [r2, #0]
 800402e:	4b63      	ldr	r3, [pc, #396]	; (80041bc <HAL_RCC_OscConfig+0x270>)
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	6a1b      	ldr	r3, [r3, #32]
 800403a:	4960      	ldr	r1, [pc, #384]	; (80041bc <HAL_RCC_OscConfig+0x270>)
 800403c:	4313      	orrs	r3, r2
 800403e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004040:	4b5e      	ldr	r3, [pc, #376]	; (80041bc <HAL_RCC_OscConfig+0x270>)
 8004042:	685b      	ldr	r3, [r3, #4]
 8004044:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	69db      	ldr	r3, [r3, #28]
 800404c:	021b      	lsls	r3, r3, #8
 800404e:	495b      	ldr	r1, [pc, #364]	; (80041bc <HAL_RCC_OscConfig+0x270>)
 8004050:	4313      	orrs	r3, r2
 8004052:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004054:	69bb      	ldr	r3, [r7, #24]
 8004056:	2b00      	cmp	r3, #0
 8004058:	d109      	bne.n	800406e <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	6a1b      	ldr	r3, [r3, #32]
 800405e:	4618      	mov	r0, r3
 8004060:	f000 fd7e 	bl	8004b60 <RCC_SetFlashLatencyFromMSIRange>
 8004064:	4603      	mov	r3, r0
 8004066:	2b00      	cmp	r3, #0
 8004068:	d001      	beq.n	800406e <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800406a:	2301      	movs	r3, #1
 800406c:	e37a      	b.n	8004764 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800406e:	f000 fc81 	bl	8004974 <HAL_RCC_GetSysClockFreq>
 8004072:	4602      	mov	r2, r0
 8004074:	4b51      	ldr	r3, [pc, #324]	; (80041bc <HAL_RCC_OscConfig+0x270>)
 8004076:	689b      	ldr	r3, [r3, #8]
 8004078:	091b      	lsrs	r3, r3, #4
 800407a:	f003 030f 	and.w	r3, r3, #15
 800407e:	4950      	ldr	r1, [pc, #320]	; (80041c0 <HAL_RCC_OscConfig+0x274>)
 8004080:	5ccb      	ldrb	r3, [r1, r3]
 8004082:	f003 031f 	and.w	r3, r3, #31
 8004086:	fa22 f303 	lsr.w	r3, r2, r3
 800408a:	4a4e      	ldr	r2, [pc, #312]	; (80041c4 <HAL_RCC_OscConfig+0x278>)
 800408c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800408e:	4b4e      	ldr	r3, [pc, #312]	; (80041c8 <HAL_RCC_OscConfig+0x27c>)
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	4618      	mov	r0, r3
 8004094:	f7fe fc66 	bl	8002964 <HAL_InitTick>
 8004098:	4603      	mov	r3, r0
 800409a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800409c:	7bfb      	ldrb	r3, [r7, #15]
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d052      	beq.n	8004148 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80040a2:	7bfb      	ldrb	r3, [r7, #15]
 80040a4:	e35e      	b.n	8004764 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	699b      	ldr	r3, [r3, #24]
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d032      	beq.n	8004114 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80040ae:	4b43      	ldr	r3, [pc, #268]	; (80041bc <HAL_RCC_OscConfig+0x270>)
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	4a42      	ldr	r2, [pc, #264]	; (80041bc <HAL_RCC_OscConfig+0x270>)
 80040b4:	f043 0301 	orr.w	r3, r3, #1
 80040b8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80040ba:	f7ff f8df 	bl	800327c <HAL_GetTick>
 80040be:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80040c0:	e008      	b.n	80040d4 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80040c2:	f7ff f8db 	bl	800327c <HAL_GetTick>
 80040c6:	4602      	mov	r2, r0
 80040c8:	693b      	ldr	r3, [r7, #16]
 80040ca:	1ad3      	subs	r3, r2, r3
 80040cc:	2b02      	cmp	r3, #2
 80040ce:	d901      	bls.n	80040d4 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80040d0:	2303      	movs	r3, #3
 80040d2:	e347      	b.n	8004764 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80040d4:	4b39      	ldr	r3, [pc, #228]	; (80041bc <HAL_RCC_OscConfig+0x270>)
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	f003 0302 	and.w	r3, r3, #2
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d0f0      	beq.n	80040c2 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80040e0:	4b36      	ldr	r3, [pc, #216]	; (80041bc <HAL_RCC_OscConfig+0x270>)
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	4a35      	ldr	r2, [pc, #212]	; (80041bc <HAL_RCC_OscConfig+0x270>)
 80040e6:	f043 0308 	orr.w	r3, r3, #8
 80040ea:	6013      	str	r3, [r2, #0]
 80040ec:	4b33      	ldr	r3, [pc, #204]	; (80041bc <HAL_RCC_OscConfig+0x270>)
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	6a1b      	ldr	r3, [r3, #32]
 80040f8:	4930      	ldr	r1, [pc, #192]	; (80041bc <HAL_RCC_OscConfig+0x270>)
 80040fa:	4313      	orrs	r3, r2
 80040fc:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80040fe:	4b2f      	ldr	r3, [pc, #188]	; (80041bc <HAL_RCC_OscConfig+0x270>)
 8004100:	685b      	ldr	r3, [r3, #4]
 8004102:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	69db      	ldr	r3, [r3, #28]
 800410a:	021b      	lsls	r3, r3, #8
 800410c:	492b      	ldr	r1, [pc, #172]	; (80041bc <HAL_RCC_OscConfig+0x270>)
 800410e:	4313      	orrs	r3, r2
 8004110:	604b      	str	r3, [r1, #4]
 8004112:	e01a      	b.n	800414a <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004114:	4b29      	ldr	r3, [pc, #164]	; (80041bc <HAL_RCC_OscConfig+0x270>)
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	4a28      	ldr	r2, [pc, #160]	; (80041bc <HAL_RCC_OscConfig+0x270>)
 800411a:	f023 0301 	bic.w	r3, r3, #1
 800411e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004120:	f7ff f8ac 	bl	800327c <HAL_GetTick>
 8004124:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004126:	e008      	b.n	800413a <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004128:	f7ff f8a8 	bl	800327c <HAL_GetTick>
 800412c:	4602      	mov	r2, r0
 800412e:	693b      	ldr	r3, [r7, #16]
 8004130:	1ad3      	subs	r3, r2, r3
 8004132:	2b02      	cmp	r3, #2
 8004134:	d901      	bls.n	800413a <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8004136:	2303      	movs	r3, #3
 8004138:	e314      	b.n	8004764 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800413a:	4b20      	ldr	r3, [pc, #128]	; (80041bc <HAL_RCC_OscConfig+0x270>)
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	f003 0302 	and.w	r3, r3, #2
 8004142:	2b00      	cmp	r3, #0
 8004144:	d1f0      	bne.n	8004128 <HAL_RCC_OscConfig+0x1dc>
 8004146:	e000      	b.n	800414a <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004148:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f003 0301 	and.w	r3, r3, #1
 8004152:	2b00      	cmp	r3, #0
 8004154:	d073      	beq.n	800423e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8004156:	69bb      	ldr	r3, [r7, #24]
 8004158:	2b08      	cmp	r3, #8
 800415a:	d005      	beq.n	8004168 <HAL_RCC_OscConfig+0x21c>
 800415c:	69bb      	ldr	r3, [r7, #24]
 800415e:	2b0c      	cmp	r3, #12
 8004160:	d10e      	bne.n	8004180 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004162:	697b      	ldr	r3, [r7, #20]
 8004164:	2b03      	cmp	r3, #3
 8004166:	d10b      	bne.n	8004180 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004168:	4b14      	ldr	r3, [pc, #80]	; (80041bc <HAL_RCC_OscConfig+0x270>)
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004170:	2b00      	cmp	r3, #0
 8004172:	d063      	beq.n	800423c <HAL_RCC_OscConfig+0x2f0>
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	685b      	ldr	r3, [r3, #4]
 8004178:	2b00      	cmp	r3, #0
 800417a:	d15f      	bne.n	800423c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800417c:	2301      	movs	r3, #1
 800417e:	e2f1      	b.n	8004764 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	685b      	ldr	r3, [r3, #4]
 8004184:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004188:	d106      	bne.n	8004198 <HAL_RCC_OscConfig+0x24c>
 800418a:	4b0c      	ldr	r3, [pc, #48]	; (80041bc <HAL_RCC_OscConfig+0x270>)
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	4a0b      	ldr	r2, [pc, #44]	; (80041bc <HAL_RCC_OscConfig+0x270>)
 8004190:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004194:	6013      	str	r3, [r2, #0]
 8004196:	e025      	b.n	80041e4 <HAL_RCC_OscConfig+0x298>
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	685b      	ldr	r3, [r3, #4]
 800419c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80041a0:	d114      	bne.n	80041cc <HAL_RCC_OscConfig+0x280>
 80041a2:	4b06      	ldr	r3, [pc, #24]	; (80041bc <HAL_RCC_OscConfig+0x270>)
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	4a05      	ldr	r2, [pc, #20]	; (80041bc <HAL_RCC_OscConfig+0x270>)
 80041a8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80041ac:	6013      	str	r3, [r2, #0]
 80041ae:	4b03      	ldr	r3, [pc, #12]	; (80041bc <HAL_RCC_OscConfig+0x270>)
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	4a02      	ldr	r2, [pc, #8]	; (80041bc <HAL_RCC_OscConfig+0x270>)
 80041b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80041b8:	6013      	str	r3, [r2, #0]
 80041ba:	e013      	b.n	80041e4 <HAL_RCC_OscConfig+0x298>
 80041bc:	40021000 	.word	0x40021000
 80041c0:	0800b188 	.word	0x0800b188
 80041c4:	20000000 	.word	0x20000000
 80041c8:	2000000c 	.word	0x2000000c
 80041cc:	4ba0      	ldr	r3, [pc, #640]	; (8004450 <HAL_RCC_OscConfig+0x504>)
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	4a9f      	ldr	r2, [pc, #636]	; (8004450 <HAL_RCC_OscConfig+0x504>)
 80041d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80041d6:	6013      	str	r3, [r2, #0]
 80041d8:	4b9d      	ldr	r3, [pc, #628]	; (8004450 <HAL_RCC_OscConfig+0x504>)
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	4a9c      	ldr	r2, [pc, #624]	; (8004450 <HAL_RCC_OscConfig+0x504>)
 80041de:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80041e2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	685b      	ldr	r3, [r3, #4]
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d013      	beq.n	8004214 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041ec:	f7ff f846 	bl	800327c <HAL_GetTick>
 80041f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80041f2:	e008      	b.n	8004206 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80041f4:	f7ff f842 	bl	800327c <HAL_GetTick>
 80041f8:	4602      	mov	r2, r0
 80041fa:	693b      	ldr	r3, [r7, #16]
 80041fc:	1ad3      	subs	r3, r2, r3
 80041fe:	2b64      	cmp	r3, #100	; 0x64
 8004200:	d901      	bls.n	8004206 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8004202:	2303      	movs	r3, #3
 8004204:	e2ae      	b.n	8004764 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004206:	4b92      	ldr	r3, [pc, #584]	; (8004450 <HAL_RCC_OscConfig+0x504>)
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800420e:	2b00      	cmp	r3, #0
 8004210:	d0f0      	beq.n	80041f4 <HAL_RCC_OscConfig+0x2a8>
 8004212:	e014      	b.n	800423e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004214:	f7ff f832 	bl	800327c <HAL_GetTick>
 8004218:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800421a:	e008      	b.n	800422e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800421c:	f7ff f82e 	bl	800327c <HAL_GetTick>
 8004220:	4602      	mov	r2, r0
 8004222:	693b      	ldr	r3, [r7, #16]
 8004224:	1ad3      	subs	r3, r2, r3
 8004226:	2b64      	cmp	r3, #100	; 0x64
 8004228:	d901      	bls.n	800422e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800422a:	2303      	movs	r3, #3
 800422c:	e29a      	b.n	8004764 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800422e:	4b88      	ldr	r3, [pc, #544]	; (8004450 <HAL_RCC_OscConfig+0x504>)
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004236:	2b00      	cmp	r3, #0
 8004238:	d1f0      	bne.n	800421c <HAL_RCC_OscConfig+0x2d0>
 800423a:	e000      	b.n	800423e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800423c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	f003 0302 	and.w	r3, r3, #2
 8004246:	2b00      	cmp	r3, #0
 8004248:	d060      	beq.n	800430c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800424a:	69bb      	ldr	r3, [r7, #24]
 800424c:	2b04      	cmp	r3, #4
 800424e:	d005      	beq.n	800425c <HAL_RCC_OscConfig+0x310>
 8004250:	69bb      	ldr	r3, [r7, #24]
 8004252:	2b0c      	cmp	r3, #12
 8004254:	d119      	bne.n	800428a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004256:	697b      	ldr	r3, [r7, #20]
 8004258:	2b02      	cmp	r3, #2
 800425a:	d116      	bne.n	800428a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800425c:	4b7c      	ldr	r3, [pc, #496]	; (8004450 <HAL_RCC_OscConfig+0x504>)
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004264:	2b00      	cmp	r3, #0
 8004266:	d005      	beq.n	8004274 <HAL_RCC_OscConfig+0x328>
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	68db      	ldr	r3, [r3, #12]
 800426c:	2b00      	cmp	r3, #0
 800426e:	d101      	bne.n	8004274 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004270:	2301      	movs	r3, #1
 8004272:	e277      	b.n	8004764 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004274:	4b76      	ldr	r3, [pc, #472]	; (8004450 <HAL_RCC_OscConfig+0x504>)
 8004276:	685b      	ldr	r3, [r3, #4]
 8004278:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	691b      	ldr	r3, [r3, #16]
 8004280:	061b      	lsls	r3, r3, #24
 8004282:	4973      	ldr	r1, [pc, #460]	; (8004450 <HAL_RCC_OscConfig+0x504>)
 8004284:	4313      	orrs	r3, r2
 8004286:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004288:	e040      	b.n	800430c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	68db      	ldr	r3, [r3, #12]
 800428e:	2b00      	cmp	r3, #0
 8004290:	d023      	beq.n	80042da <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004292:	4b6f      	ldr	r3, [pc, #444]	; (8004450 <HAL_RCC_OscConfig+0x504>)
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	4a6e      	ldr	r2, [pc, #440]	; (8004450 <HAL_RCC_OscConfig+0x504>)
 8004298:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800429c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800429e:	f7fe ffed 	bl	800327c <HAL_GetTick>
 80042a2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80042a4:	e008      	b.n	80042b8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80042a6:	f7fe ffe9 	bl	800327c <HAL_GetTick>
 80042aa:	4602      	mov	r2, r0
 80042ac:	693b      	ldr	r3, [r7, #16]
 80042ae:	1ad3      	subs	r3, r2, r3
 80042b0:	2b02      	cmp	r3, #2
 80042b2:	d901      	bls.n	80042b8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80042b4:	2303      	movs	r3, #3
 80042b6:	e255      	b.n	8004764 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80042b8:	4b65      	ldr	r3, [pc, #404]	; (8004450 <HAL_RCC_OscConfig+0x504>)
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d0f0      	beq.n	80042a6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80042c4:	4b62      	ldr	r3, [pc, #392]	; (8004450 <HAL_RCC_OscConfig+0x504>)
 80042c6:	685b      	ldr	r3, [r3, #4]
 80042c8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	691b      	ldr	r3, [r3, #16]
 80042d0:	061b      	lsls	r3, r3, #24
 80042d2:	495f      	ldr	r1, [pc, #380]	; (8004450 <HAL_RCC_OscConfig+0x504>)
 80042d4:	4313      	orrs	r3, r2
 80042d6:	604b      	str	r3, [r1, #4]
 80042d8:	e018      	b.n	800430c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80042da:	4b5d      	ldr	r3, [pc, #372]	; (8004450 <HAL_RCC_OscConfig+0x504>)
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	4a5c      	ldr	r2, [pc, #368]	; (8004450 <HAL_RCC_OscConfig+0x504>)
 80042e0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80042e4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042e6:	f7fe ffc9 	bl	800327c <HAL_GetTick>
 80042ea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80042ec:	e008      	b.n	8004300 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80042ee:	f7fe ffc5 	bl	800327c <HAL_GetTick>
 80042f2:	4602      	mov	r2, r0
 80042f4:	693b      	ldr	r3, [r7, #16]
 80042f6:	1ad3      	subs	r3, r2, r3
 80042f8:	2b02      	cmp	r3, #2
 80042fa:	d901      	bls.n	8004300 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80042fc:	2303      	movs	r3, #3
 80042fe:	e231      	b.n	8004764 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004300:	4b53      	ldr	r3, [pc, #332]	; (8004450 <HAL_RCC_OscConfig+0x504>)
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004308:	2b00      	cmp	r3, #0
 800430a:	d1f0      	bne.n	80042ee <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	f003 0308 	and.w	r3, r3, #8
 8004314:	2b00      	cmp	r3, #0
 8004316:	d03c      	beq.n	8004392 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	695b      	ldr	r3, [r3, #20]
 800431c:	2b00      	cmp	r3, #0
 800431e:	d01c      	beq.n	800435a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004320:	4b4b      	ldr	r3, [pc, #300]	; (8004450 <HAL_RCC_OscConfig+0x504>)
 8004322:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004326:	4a4a      	ldr	r2, [pc, #296]	; (8004450 <HAL_RCC_OscConfig+0x504>)
 8004328:	f043 0301 	orr.w	r3, r3, #1
 800432c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004330:	f7fe ffa4 	bl	800327c <HAL_GetTick>
 8004334:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004336:	e008      	b.n	800434a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004338:	f7fe ffa0 	bl	800327c <HAL_GetTick>
 800433c:	4602      	mov	r2, r0
 800433e:	693b      	ldr	r3, [r7, #16]
 8004340:	1ad3      	subs	r3, r2, r3
 8004342:	2b02      	cmp	r3, #2
 8004344:	d901      	bls.n	800434a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8004346:	2303      	movs	r3, #3
 8004348:	e20c      	b.n	8004764 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800434a:	4b41      	ldr	r3, [pc, #260]	; (8004450 <HAL_RCC_OscConfig+0x504>)
 800434c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004350:	f003 0302 	and.w	r3, r3, #2
 8004354:	2b00      	cmp	r3, #0
 8004356:	d0ef      	beq.n	8004338 <HAL_RCC_OscConfig+0x3ec>
 8004358:	e01b      	b.n	8004392 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800435a:	4b3d      	ldr	r3, [pc, #244]	; (8004450 <HAL_RCC_OscConfig+0x504>)
 800435c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004360:	4a3b      	ldr	r2, [pc, #236]	; (8004450 <HAL_RCC_OscConfig+0x504>)
 8004362:	f023 0301 	bic.w	r3, r3, #1
 8004366:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800436a:	f7fe ff87 	bl	800327c <HAL_GetTick>
 800436e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004370:	e008      	b.n	8004384 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004372:	f7fe ff83 	bl	800327c <HAL_GetTick>
 8004376:	4602      	mov	r2, r0
 8004378:	693b      	ldr	r3, [r7, #16]
 800437a:	1ad3      	subs	r3, r2, r3
 800437c:	2b02      	cmp	r3, #2
 800437e:	d901      	bls.n	8004384 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004380:	2303      	movs	r3, #3
 8004382:	e1ef      	b.n	8004764 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004384:	4b32      	ldr	r3, [pc, #200]	; (8004450 <HAL_RCC_OscConfig+0x504>)
 8004386:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800438a:	f003 0302 	and.w	r3, r3, #2
 800438e:	2b00      	cmp	r3, #0
 8004390:	d1ef      	bne.n	8004372 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	f003 0304 	and.w	r3, r3, #4
 800439a:	2b00      	cmp	r3, #0
 800439c:	f000 80a6 	beq.w	80044ec <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80043a0:	2300      	movs	r3, #0
 80043a2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80043a4:	4b2a      	ldr	r3, [pc, #168]	; (8004450 <HAL_RCC_OscConfig+0x504>)
 80043a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d10d      	bne.n	80043cc <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80043b0:	4b27      	ldr	r3, [pc, #156]	; (8004450 <HAL_RCC_OscConfig+0x504>)
 80043b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043b4:	4a26      	ldr	r2, [pc, #152]	; (8004450 <HAL_RCC_OscConfig+0x504>)
 80043b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80043ba:	6593      	str	r3, [r2, #88]	; 0x58
 80043bc:	4b24      	ldr	r3, [pc, #144]	; (8004450 <HAL_RCC_OscConfig+0x504>)
 80043be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043c4:	60bb      	str	r3, [r7, #8]
 80043c6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80043c8:	2301      	movs	r3, #1
 80043ca:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80043cc:	4b21      	ldr	r3, [pc, #132]	; (8004454 <HAL_RCC_OscConfig+0x508>)
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d118      	bne.n	800440a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80043d8:	4b1e      	ldr	r3, [pc, #120]	; (8004454 <HAL_RCC_OscConfig+0x508>)
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	4a1d      	ldr	r2, [pc, #116]	; (8004454 <HAL_RCC_OscConfig+0x508>)
 80043de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80043e2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80043e4:	f7fe ff4a 	bl	800327c <HAL_GetTick>
 80043e8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80043ea:	e008      	b.n	80043fe <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80043ec:	f7fe ff46 	bl	800327c <HAL_GetTick>
 80043f0:	4602      	mov	r2, r0
 80043f2:	693b      	ldr	r3, [r7, #16]
 80043f4:	1ad3      	subs	r3, r2, r3
 80043f6:	2b02      	cmp	r3, #2
 80043f8:	d901      	bls.n	80043fe <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80043fa:	2303      	movs	r3, #3
 80043fc:	e1b2      	b.n	8004764 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80043fe:	4b15      	ldr	r3, [pc, #84]	; (8004454 <HAL_RCC_OscConfig+0x508>)
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004406:	2b00      	cmp	r3, #0
 8004408:	d0f0      	beq.n	80043ec <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	689b      	ldr	r3, [r3, #8]
 800440e:	2b01      	cmp	r3, #1
 8004410:	d108      	bne.n	8004424 <HAL_RCC_OscConfig+0x4d8>
 8004412:	4b0f      	ldr	r3, [pc, #60]	; (8004450 <HAL_RCC_OscConfig+0x504>)
 8004414:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004418:	4a0d      	ldr	r2, [pc, #52]	; (8004450 <HAL_RCC_OscConfig+0x504>)
 800441a:	f043 0301 	orr.w	r3, r3, #1
 800441e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004422:	e029      	b.n	8004478 <HAL_RCC_OscConfig+0x52c>
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	689b      	ldr	r3, [r3, #8]
 8004428:	2b05      	cmp	r3, #5
 800442a:	d115      	bne.n	8004458 <HAL_RCC_OscConfig+0x50c>
 800442c:	4b08      	ldr	r3, [pc, #32]	; (8004450 <HAL_RCC_OscConfig+0x504>)
 800442e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004432:	4a07      	ldr	r2, [pc, #28]	; (8004450 <HAL_RCC_OscConfig+0x504>)
 8004434:	f043 0304 	orr.w	r3, r3, #4
 8004438:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800443c:	4b04      	ldr	r3, [pc, #16]	; (8004450 <HAL_RCC_OscConfig+0x504>)
 800443e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004442:	4a03      	ldr	r2, [pc, #12]	; (8004450 <HAL_RCC_OscConfig+0x504>)
 8004444:	f043 0301 	orr.w	r3, r3, #1
 8004448:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800444c:	e014      	b.n	8004478 <HAL_RCC_OscConfig+0x52c>
 800444e:	bf00      	nop
 8004450:	40021000 	.word	0x40021000
 8004454:	40007000 	.word	0x40007000
 8004458:	4b9a      	ldr	r3, [pc, #616]	; (80046c4 <HAL_RCC_OscConfig+0x778>)
 800445a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800445e:	4a99      	ldr	r2, [pc, #612]	; (80046c4 <HAL_RCC_OscConfig+0x778>)
 8004460:	f023 0301 	bic.w	r3, r3, #1
 8004464:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004468:	4b96      	ldr	r3, [pc, #600]	; (80046c4 <HAL_RCC_OscConfig+0x778>)
 800446a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800446e:	4a95      	ldr	r2, [pc, #596]	; (80046c4 <HAL_RCC_OscConfig+0x778>)
 8004470:	f023 0304 	bic.w	r3, r3, #4
 8004474:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	689b      	ldr	r3, [r3, #8]
 800447c:	2b00      	cmp	r3, #0
 800447e:	d016      	beq.n	80044ae <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004480:	f7fe fefc 	bl	800327c <HAL_GetTick>
 8004484:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004486:	e00a      	b.n	800449e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004488:	f7fe fef8 	bl	800327c <HAL_GetTick>
 800448c:	4602      	mov	r2, r0
 800448e:	693b      	ldr	r3, [r7, #16]
 8004490:	1ad3      	subs	r3, r2, r3
 8004492:	f241 3288 	movw	r2, #5000	; 0x1388
 8004496:	4293      	cmp	r3, r2
 8004498:	d901      	bls.n	800449e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800449a:	2303      	movs	r3, #3
 800449c:	e162      	b.n	8004764 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800449e:	4b89      	ldr	r3, [pc, #548]	; (80046c4 <HAL_RCC_OscConfig+0x778>)
 80044a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044a4:	f003 0302 	and.w	r3, r3, #2
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d0ed      	beq.n	8004488 <HAL_RCC_OscConfig+0x53c>
 80044ac:	e015      	b.n	80044da <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044ae:	f7fe fee5 	bl	800327c <HAL_GetTick>
 80044b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80044b4:	e00a      	b.n	80044cc <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80044b6:	f7fe fee1 	bl	800327c <HAL_GetTick>
 80044ba:	4602      	mov	r2, r0
 80044bc:	693b      	ldr	r3, [r7, #16]
 80044be:	1ad3      	subs	r3, r2, r3
 80044c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80044c4:	4293      	cmp	r3, r2
 80044c6:	d901      	bls.n	80044cc <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80044c8:	2303      	movs	r3, #3
 80044ca:	e14b      	b.n	8004764 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80044cc:	4b7d      	ldr	r3, [pc, #500]	; (80046c4 <HAL_RCC_OscConfig+0x778>)
 80044ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044d2:	f003 0302 	and.w	r3, r3, #2
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d1ed      	bne.n	80044b6 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80044da:	7ffb      	ldrb	r3, [r7, #31]
 80044dc:	2b01      	cmp	r3, #1
 80044de:	d105      	bne.n	80044ec <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80044e0:	4b78      	ldr	r3, [pc, #480]	; (80046c4 <HAL_RCC_OscConfig+0x778>)
 80044e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044e4:	4a77      	ldr	r2, [pc, #476]	; (80046c4 <HAL_RCC_OscConfig+0x778>)
 80044e6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80044ea:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	f003 0320 	and.w	r3, r3, #32
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d03c      	beq.n	8004572 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d01c      	beq.n	800453a <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004500:	4b70      	ldr	r3, [pc, #448]	; (80046c4 <HAL_RCC_OscConfig+0x778>)
 8004502:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004506:	4a6f      	ldr	r2, [pc, #444]	; (80046c4 <HAL_RCC_OscConfig+0x778>)
 8004508:	f043 0301 	orr.w	r3, r3, #1
 800450c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004510:	f7fe feb4 	bl	800327c <HAL_GetTick>
 8004514:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004516:	e008      	b.n	800452a <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004518:	f7fe feb0 	bl	800327c <HAL_GetTick>
 800451c:	4602      	mov	r2, r0
 800451e:	693b      	ldr	r3, [r7, #16]
 8004520:	1ad3      	subs	r3, r2, r3
 8004522:	2b02      	cmp	r3, #2
 8004524:	d901      	bls.n	800452a <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8004526:	2303      	movs	r3, #3
 8004528:	e11c      	b.n	8004764 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800452a:	4b66      	ldr	r3, [pc, #408]	; (80046c4 <HAL_RCC_OscConfig+0x778>)
 800452c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004530:	f003 0302 	and.w	r3, r3, #2
 8004534:	2b00      	cmp	r3, #0
 8004536:	d0ef      	beq.n	8004518 <HAL_RCC_OscConfig+0x5cc>
 8004538:	e01b      	b.n	8004572 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800453a:	4b62      	ldr	r3, [pc, #392]	; (80046c4 <HAL_RCC_OscConfig+0x778>)
 800453c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004540:	4a60      	ldr	r2, [pc, #384]	; (80046c4 <HAL_RCC_OscConfig+0x778>)
 8004542:	f023 0301 	bic.w	r3, r3, #1
 8004546:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800454a:	f7fe fe97 	bl	800327c <HAL_GetTick>
 800454e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004550:	e008      	b.n	8004564 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004552:	f7fe fe93 	bl	800327c <HAL_GetTick>
 8004556:	4602      	mov	r2, r0
 8004558:	693b      	ldr	r3, [r7, #16]
 800455a:	1ad3      	subs	r3, r2, r3
 800455c:	2b02      	cmp	r3, #2
 800455e:	d901      	bls.n	8004564 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8004560:	2303      	movs	r3, #3
 8004562:	e0ff      	b.n	8004764 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004564:	4b57      	ldr	r3, [pc, #348]	; (80046c4 <HAL_RCC_OscConfig+0x778>)
 8004566:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800456a:	f003 0302 	and.w	r3, r3, #2
 800456e:	2b00      	cmp	r3, #0
 8004570:	d1ef      	bne.n	8004552 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004576:	2b00      	cmp	r3, #0
 8004578:	f000 80f3 	beq.w	8004762 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004580:	2b02      	cmp	r3, #2
 8004582:	f040 80c9 	bne.w	8004718 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004586:	4b4f      	ldr	r3, [pc, #316]	; (80046c4 <HAL_RCC_OscConfig+0x778>)
 8004588:	68db      	ldr	r3, [r3, #12]
 800458a:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800458c:	697b      	ldr	r3, [r7, #20]
 800458e:	f003 0203 	and.w	r2, r3, #3
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004596:	429a      	cmp	r2, r3
 8004598:	d12c      	bne.n	80045f4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800459a:	697b      	ldr	r3, [r7, #20]
 800459c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045a4:	3b01      	subs	r3, #1
 80045a6:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80045a8:	429a      	cmp	r2, r3
 80045aa:	d123      	bne.n	80045f4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80045ac:	697b      	ldr	r3, [r7, #20]
 80045ae:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045b6:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80045b8:	429a      	cmp	r2, r3
 80045ba:	d11b      	bne.n	80045f4 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80045bc:	697b      	ldr	r3, [r7, #20]
 80045be:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045c6:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80045c8:	429a      	cmp	r2, r3
 80045ca:	d113      	bne.n	80045f4 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80045cc:	697b      	ldr	r3, [r7, #20]
 80045ce:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045d6:	085b      	lsrs	r3, r3, #1
 80045d8:	3b01      	subs	r3, #1
 80045da:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80045dc:	429a      	cmp	r2, r3
 80045de:	d109      	bne.n	80045f4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80045e0:	697b      	ldr	r3, [r7, #20]
 80045e2:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045ea:	085b      	lsrs	r3, r3, #1
 80045ec:	3b01      	subs	r3, #1
 80045ee:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80045f0:	429a      	cmp	r2, r3
 80045f2:	d06b      	beq.n	80046cc <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80045f4:	69bb      	ldr	r3, [r7, #24]
 80045f6:	2b0c      	cmp	r3, #12
 80045f8:	d062      	beq.n	80046c0 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80045fa:	4b32      	ldr	r3, [pc, #200]	; (80046c4 <HAL_RCC_OscConfig+0x778>)
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004602:	2b00      	cmp	r3, #0
 8004604:	d001      	beq.n	800460a <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8004606:	2301      	movs	r3, #1
 8004608:	e0ac      	b.n	8004764 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800460a:	4b2e      	ldr	r3, [pc, #184]	; (80046c4 <HAL_RCC_OscConfig+0x778>)
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	4a2d      	ldr	r2, [pc, #180]	; (80046c4 <HAL_RCC_OscConfig+0x778>)
 8004610:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004614:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004616:	f7fe fe31 	bl	800327c <HAL_GetTick>
 800461a:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800461c:	e008      	b.n	8004630 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800461e:	f7fe fe2d 	bl	800327c <HAL_GetTick>
 8004622:	4602      	mov	r2, r0
 8004624:	693b      	ldr	r3, [r7, #16]
 8004626:	1ad3      	subs	r3, r2, r3
 8004628:	2b02      	cmp	r3, #2
 800462a:	d901      	bls.n	8004630 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 800462c:	2303      	movs	r3, #3
 800462e:	e099      	b.n	8004764 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004630:	4b24      	ldr	r3, [pc, #144]	; (80046c4 <HAL_RCC_OscConfig+0x778>)
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004638:	2b00      	cmp	r3, #0
 800463a:	d1f0      	bne.n	800461e <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800463c:	4b21      	ldr	r3, [pc, #132]	; (80046c4 <HAL_RCC_OscConfig+0x778>)
 800463e:	68da      	ldr	r2, [r3, #12]
 8004640:	4b21      	ldr	r3, [pc, #132]	; (80046c8 <HAL_RCC_OscConfig+0x77c>)
 8004642:	4013      	ands	r3, r2
 8004644:	687a      	ldr	r2, [r7, #4]
 8004646:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8004648:	687a      	ldr	r2, [r7, #4]
 800464a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800464c:	3a01      	subs	r2, #1
 800464e:	0112      	lsls	r2, r2, #4
 8004650:	4311      	orrs	r1, r2
 8004652:	687a      	ldr	r2, [r7, #4]
 8004654:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004656:	0212      	lsls	r2, r2, #8
 8004658:	4311      	orrs	r1, r2
 800465a:	687a      	ldr	r2, [r7, #4]
 800465c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800465e:	0852      	lsrs	r2, r2, #1
 8004660:	3a01      	subs	r2, #1
 8004662:	0552      	lsls	r2, r2, #21
 8004664:	4311      	orrs	r1, r2
 8004666:	687a      	ldr	r2, [r7, #4]
 8004668:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800466a:	0852      	lsrs	r2, r2, #1
 800466c:	3a01      	subs	r2, #1
 800466e:	0652      	lsls	r2, r2, #25
 8004670:	4311      	orrs	r1, r2
 8004672:	687a      	ldr	r2, [r7, #4]
 8004674:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004676:	06d2      	lsls	r2, r2, #27
 8004678:	430a      	orrs	r2, r1
 800467a:	4912      	ldr	r1, [pc, #72]	; (80046c4 <HAL_RCC_OscConfig+0x778>)
 800467c:	4313      	orrs	r3, r2
 800467e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004680:	4b10      	ldr	r3, [pc, #64]	; (80046c4 <HAL_RCC_OscConfig+0x778>)
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	4a0f      	ldr	r2, [pc, #60]	; (80046c4 <HAL_RCC_OscConfig+0x778>)
 8004686:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800468a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800468c:	4b0d      	ldr	r3, [pc, #52]	; (80046c4 <HAL_RCC_OscConfig+0x778>)
 800468e:	68db      	ldr	r3, [r3, #12]
 8004690:	4a0c      	ldr	r2, [pc, #48]	; (80046c4 <HAL_RCC_OscConfig+0x778>)
 8004692:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004696:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004698:	f7fe fdf0 	bl	800327c <HAL_GetTick>
 800469c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800469e:	e008      	b.n	80046b2 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80046a0:	f7fe fdec 	bl	800327c <HAL_GetTick>
 80046a4:	4602      	mov	r2, r0
 80046a6:	693b      	ldr	r3, [r7, #16]
 80046a8:	1ad3      	subs	r3, r2, r3
 80046aa:	2b02      	cmp	r3, #2
 80046ac:	d901      	bls.n	80046b2 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 80046ae:	2303      	movs	r3, #3
 80046b0:	e058      	b.n	8004764 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80046b2:	4b04      	ldr	r3, [pc, #16]	; (80046c4 <HAL_RCC_OscConfig+0x778>)
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d0f0      	beq.n	80046a0 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80046be:	e050      	b.n	8004762 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80046c0:	2301      	movs	r3, #1
 80046c2:	e04f      	b.n	8004764 <HAL_RCC_OscConfig+0x818>
 80046c4:	40021000 	.word	0x40021000
 80046c8:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80046cc:	4b27      	ldr	r3, [pc, #156]	; (800476c <HAL_RCC_OscConfig+0x820>)
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d144      	bne.n	8004762 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80046d8:	4b24      	ldr	r3, [pc, #144]	; (800476c <HAL_RCC_OscConfig+0x820>)
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	4a23      	ldr	r2, [pc, #140]	; (800476c <HAL_RCC_OscConfig+0x820>)
 80046de:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80046e2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80046e4:	4b21      	ldr	r3, [pc, #132]	; (800476c <HAL_RCC_OscConfig+0x820>)
 80046e6:	68db      	ldr	r3, [r3, #12]
 80046e8:	4a20      	ldr	r2, [pc, #128]	; (800476c <HAL_RCC_OscConfig+0x820>)
 80046ea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80046ee:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80046f0:	f7fe fdc4 	bl	800327c <HAL_GetTick>
 80046f4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80046f6:	e008      	b.n	800470a <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80046f8:	f7fe fdc0 	bl	800327c <HAL_GetTick>
 80046fc:	4602      	mov	r2, r0
 80046fe:	693b      	ldr	r3, [r7, #16]
 8004700:	1ad3      	subs	r3, r2, r3
 8004702:	2b02      	cmp	r3, #2
 8004704:	d901      	bls.n	800470a <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8004706:	2303      	movs	r3, #3
 8004708:	e02c      	b.n	8004764 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800470a:	4b18      	ldr	r3, [pc, #96]	; (800476c <HAL_RCC_OscConfig+0x820>)
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004712:	2b00      	cmp	r3, #0
 8004714:	d0f0      	beq.n	80046f8 <HAL_RCC_OscConfig+0x7ac>
 8004716:	e024      	b.n	8004762 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004718:	69bb      	ldr	r3, [r7, #24]
 800471a:	2b0c      	cmp	r3, #12
 800471c:	d01f      	beq.n	800475e <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800471e:	4b13      	ldr	r3, [pc, #76]	; (800476c <HAL_RCC_OscConfig+0x820>)
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	4a12      	ldr	r2, [pc, #72]	; (800476c <HAL_RCC_OscConfig+0x820>)
 8004724:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004728:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800472a:	f7fe fda7 	bl	800327c <HAL_GetTick>
 800472e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004730:	e008      	b.n	8004744 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004732:	f7fe fda3 	bl	800327c <HAL_GetTick>
 8004736:	4602      	mov	r2, r0
 8004738:	693b      	ldr	r3, [r7, #16]
 800473a:	1ad3      	subs	r3, r2, r3
 800473c:	2b02      	cmp	r3, #2
 800473e:	d901      	bls.n	8004744 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8004740:	2303      	movs	r3, #3
 8004742:	e00f      	b.n	8004764 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004744:	4b09      	ldr	r3, [pc, #36]	; (800476c <HAL_RCC_OscConfig+0x820>)
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800474c:	2b00      	cmp	r3, #0
 800474e:	d1f0      	bne.n	8004732 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8004750:	4b06      	ldr	r3, [pc, #24]	; (800476c <HAL_RCC_OscConfig+0x820>)
 8004752:	68da      	ldr	r2, [r3, #12]
 8004754:	4905      	ldr	r1, [pc, #20]	; (800476c <HAL_RCC_OscConfig+0x820>)
 8004756:	4b06      	ldr	r3, [pc, #24]	; (8004770 <HAL_RCC_OscConfig+0x824>)
 8004758:	4013      	ands	r3, r2
 800475a:	60cb      	str	r3, [r1, #12]
 800475c:	e001      	b.n	8004762 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800475e:	2301      	movs	r3, #1
 8004760:	e000      	b.n	8004764 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8004762:	2300      	movs	r3, #0
}
 8004764:	4618      	mov	r0, r3
 8004766:	3720      	adds	r7, #32
 8004768:	46bd      	mov	sp, r7
 800476a:	bd80      	pop	{r7, pc}
 800476c:	40021000 	.word	0x40021000
 8004770:	feeefffc 	.word	0xfeeefffc

08004774 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004774:	b580      	push	{r7, lr}
 8004776:	b084      	sub	sp, #16
 8004778:	af00      	add	r7, sp, #0
 800477a:	6078      	str	r0, [r7, #4]
 800477c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	2b00      	cmp	r3, #0
 8004782:	d101      	bne.n	8004788 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004784:	2301      	movs	r3, #1
 8004786:	e0e7      	b.n	8004958 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004788:	4b75      	ldr	r3, [pc, #468]	; (8004960 <HAL_RCC_ClockConfig+0x1ec>)
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	f003 0307 	and.w	r3, r3, #7
 8004790:	683a      	ldr	r2, [r7, #0]
 8004792:	429a      	cmp	r2, r3
 8004794:	d910      	bls.n	80047b8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004796:	4b72      	ldr	r3, [pc, #456]	; (8004960 <HAL_RCC_ClockConfig+0x1ec>)
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	f023 0207 	bic.w	r2, r3, #7
 800479e:	4970      	ldr	r1, [pc, #448]	; (8004960 <HAL_RCC_ClockConfig+0x1ec>)
 80047a0:	683b      	ldr	r3, [r7, #0]
 80047a2:	4313      	orrs	r3, r2
 80047a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80047a6:	4b6e      	ldr	r3, [pc, #440]	; (8004960 <HAL_RCC_ClockConfig+0x1ec>)
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	f003 0307 	and.w	r3, r3, #7
 80047ae:	683a      	ldr	r2, [r7, #0]
 80047b0:	429a      	cmp	r2, r3
 80047b2:	d001      	beq.n	80047b8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80047b4:	2301      	movs	r3, #1
 80047b6:	e0cf      	b.n	8004958 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	f003 0302 	and.w	r3, r3, #2
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d010      	beq.n	80047e6 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	689a      	ldr	r2, [r3, #8]
 80047c8:	4b66      	ldr	r3, [pc, #408]	; (8004964 <HAL_RCC_ClockConfig+0x1f0>)
 80047ca:	689b      	ldr	r3, [r3, #8]
 80047cc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80047d0:	429a      	cmp	r2, r3
 80047d2:	d908      	bls.n	80047e6 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80047d4:	4b63      	ldr	r3, [pc, #396]	; (8004964 <HAL_RCC_ClockConfig+0x1f0>)
 80047d6:	689b      	ldr	r3, [r3, #8]
 80047d8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	689b      	ldr	r3, [r3, #8]
 80047e0:	4960      	ldr	r1, [pc, #384]	; (8004964 <HAL_RCC_ClockConfig+0x1f0>)
 80047e2:	4313      	orrs	r3, r2
 80047e4:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	f003 0301 	and.w	r3, r3, #1
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d04c      	beq.n	800488c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	685b      	ldr	r3, [r3, #4]
 80047f6:	2b03      	cmp	r3, #3
 80047f8:	d107      	bne.n	800480a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80047fa:	4b5a      	ldr	r3, [pc, #360]	; (8004964 <HAL_RCC_ClockConfig+0x1f0>)
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004802:	2b00      	cmp	r3, #0
 8004804:	d121      	bne.n	800484a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8004806:	2301      	movs	r3, #1
 8004808:	e0a6      	b.n	8004958 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	685b      	ldr	r3, [r3, #4]
 800480e:	2b02      	cmp	r3, #2
 8004810:	d107      	bne.n	8004822 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004812:	4b54      	ldr	r3, [pc, #336]	; (8004964 <HAL_RCC_ClockConfig+0x1f0>)
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800481a:	2b00      	cmp	r3, #0
 800481c:	d115      	bne.n	800484a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800481e:	2301      	movs	r3, #1
 8004820:	e09a      	b.n	8004958 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	685b      	ldr	r3, [r3, #4]
 8004826:	2b00      	cmp	r3, #0
 8004828:	d107      	bne.n	800483a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800482a:	4b4e      	ldr	r3, [pc, #312]	; (8004964 <HAL_RCC_ClockConfig+0x1f0>)
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	f003 0302 	and.w	r3, r3, #2
 8004832:	2b00      	cmp	r3, #0
 8004834:	d109      	bne.n	800484a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004836:	2301      	movs	r3, #1
 8004838:	e08e      	b.n	8004958 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800483a:	4b4a      	ldr	r3, [pc, #296]	; (8004964 <HAL_RCC_ClockConfig+0x1f0>)
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004842:	2b00      	cmp	r3, #0
 8004844:	d101      	bne.n	800484a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004846:	2301      	movs	r3, #1
 8004848:	e086      	b.n	8004958 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800484a:	4b46      	ldr	r3, [pc, #280]	; (8004964 <HAL_RCC_ClockConfig+0x1f0>)
 800484c:	689b      	ldr	r3, [r3, #8]
 800484e:	f023 0203 	bic.w	r2, r3, #3
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	685b      	ldr	r3, [r3, #4]
 8004856:	4943      	ldr	r1, [pc, #268]	; (8004964 <HAL_RCC_ClockConfig+0x1f0>)
 8004858:	4313      	orrs	r3, r2
 800485a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800485c:	f7fe fd0e 	bl	800327c <HAL_GetTick>
 8004860:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004862:	e00a      	b.n	800487a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004864:	f7fe fd0a 	bl	800327c <HAL_GetTick>
 8004868:	4602      	mov	r2, r0
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	1ad3      	subs	r3, r2, r3
 800486e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004872:	4293      	cmp	r3, r2
 8004874:	d901      	bls.n	800487a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8004876:	2303      	movs	r3, #3
 8004878:	e06e      	b.n	8004958 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800487a:	4b3a      	ldr	r3, [pc, #232]	; (8004964 <HAL_RCC_ClockConfig+0x1f0>)
 800487c:	689b      	ldr	r3, [r3, #8]
 800487e:	f003 020c 	and.w	r2, r3, #12
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	685b      	ldr	r3, [r3, #4]
 8004886:	009b      	lsls	r3, r3, #2
 8004888:	429a      	cmp	r2, r3
 800488a:	d1eb      	bne.n	8004864 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	f003 0302 	and.w	r3, r3, #2
 8004894:	2b00      	cmp	r3, #0
 8004896:	d010      	beq.n	80048ba <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	689a      	ldr	r2, [r3, #8]
 800489c:	4b31      	ldr	r3, [pc, #196]	; (8004964 <HAL_RCC_ClockConfig+0x1f0>)
 800489e:	689b      	ldr	r3, [r3, #8]
 80048a0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80048a4:	429a      	cmp	r2, r3
 80048a6:	d208      	bcs.n	80048ba <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80048a8:	4b2e      	ldr	r3, [pc, #184]	; (8004964 <HAL_RCC_ClockConfig+0x1f0>)
 80048aa:	689b      	ldr	r3, [r3, #8]
 80048ac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	689b      	ldr	r3, [r3, #8]
 80048b4:	492b      	ldr	r1, [pc, #172]	; (8004964 <HAL_RCC_ClockConfig+0x1f0>)
 80048b6:	4313      	orrs	r3, r2
 80048b8:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80048ba:	4b29      	ldr	r3, [pc, #164]	; (8004960 <HAL_RCC_ClockConfig+0x1ec>)
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	f003 0307 	and.w	r3, r3, #7
 80048c2:	683a      	ldr	r2, [r7, #0]
 80048c4:	429a      	cmp	r2, r3
 80048c6:	d210      	bcs.n	80048ea <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80048c8:	4b25      	ldr	r3, [pc, #148]	; (8004960 <HAL_RCC_ClockConfig+0x1ec>)
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	f023 0207 	bic.w	r2, r3, #7
 80048d0:	4923      	ldr	r1, [pc, #140]	; (8004960 <HAL_RCC_ClockConfig+0x1ec>)
 80048d2:	683b      	ldr	r3, [r7, #0]
 80048d4:	4313      	orrs	r3, r2
 80048d6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80048d8:	4b21      	ldr	r3, [pc, #132]	; (8004960 <HAL_RCC_ClockConfig+0x1ec>)
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	f003 0307 	and.w	r3, r3, #7
 80048e0:	683a      	ldr	r2, [r7, #0]
 80048e2:	429a      	cmp	r2, r3
 80048e4:	d001      	beq.n	80048ea <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80048e6:	2301      	movs	r3, #1
 80048e8:	e036      	b.n	8004958 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	f003 0304 	and.w	r3, r3, #4
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d008      	beq.n	8004908 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80048f6:	4b1b      	ldr	r3, [pc, #108]	; (8004964 <HAL_RCC_ClockConfig+0x1f0>)
 80048f8:	689b      	ldr	r3, [r3, #8]
 80048fa:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	68db      	ldr	r3, [r3, #12]
 8004902:	4918      	ldr	r1, [pc, #96]	; (8004964 <HAL_RCC_ClockConfig+0x1f0>)
 8004904:	4313      	orrs	r3, r2
 8004906:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	f003 0308 	and.w	r3, r3, #8
 8004910:	2b00      	cmp	r3, #0
 8004912:	d009      	beq.n	8004928 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004914:	4b13      	ldr	r3, [pc, #76]	; (8004964 <HAL_RCC_ClockConfig+0x1f0>)
 8004916:	689b      	ldr	r3, [r3, #8]
 8004918:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	691b      	ldr	r3, [r3, #16]
 8004920:	00db      	lsls	r3, r3, #3
 8004922:	4910      	ldr	r1, [pc, #64]	; (8004964 <HAL_RCC_ClockConfig+0x1f0>)
 8004924:	4313      	orrs	r3, r2
 8004926:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004928:	f000 f824 	bl	8004974 <HAL_RCC_GetSysClockFreq>
 800492c:	4602      	mov	r2, r0
 800492e:	4b0d      	ldr	r3, [pc, #52]	; (8004964 <HAL_RCC_ClockConfig+0x1f0>)
 8004930:	689b      	ldr	r3, [r3, #8]
 8004932:	091b      	lsrs	r3, r3, #4
 8004934:	f003 030f 	and.w	r3, r3, #15
 8004938:	490b      	ldr	r1, [pc, #44]	; (8004968 <HAL_RCC_ClockConfig+0x1f4>)
 800493a:	5ccb      	ldrb	r3, [r1, r3]
 800493c:	f003 031f 	and.w	r3, r3, #31
 8004940:	fa22 f303 	lsr.w	r3, r2, r3
 8004944:	4a09      	ldr	r2, [pc, #36]	; (800496c <HAL_RCC_ClockConfig+0x1f8>)
 8004946:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004948:	4b09      	ldr	r3, [pc, #36]	; (8004970 <HAL_RCC_ClockConfig+0x1fc>)
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	4618      	mov	r0, r3
 800494e:	f7fe f809 	bl	8002964 <HAL_InitTick>
 8004952:	4603      	mov	r3, r0
 8004954:	72fb      	strb	r3, [r7, #11]

  return status;
 8004956:	7afb      	ldrb	r3, [r7, #11]
}
 8004958:	4618      	mov	r0, r3
 800495a:	3710      	adds	r7, #16
 800495c:	46bd      	mov	sp, r7
 800495e:	bd80      	pop	{r7, pc}
 8004960:	40022000 	.word	0x40022000
 8004964:	40021000 	.word	0x40021000
 8004968:	0800b188 	.word	0x0800b188
 800496c:	20000000 	.word	0x20000000
 8004970:	2000000c 	.word	0x2000000c

08004974 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004974:	b480      	push	{r7}
 8004976:	b089      	sub	sp, #36	; 0x24
 8004978:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800497a:	2300      	movs	r3, #0
 800497c:	61fb      	str	r3, [r7, #28]
 800497e:	2300      	movs	r3, #0
 8004980:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004982:	4b3e      	ldr	r3, [pc, #248]	; (8004a7c <HAL_RCC_GetSysClockFreq+0x108>)
 8004984:	689b      	ldr	r3, [r3, #8]
 8004986:	f003 030c 	and.w	r3, r3, #12
 800498a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800498c:	4b3b      	ldr	r3, [pc, #236]	; (8004a7c <HAL_RCC_GetSysClockFreq+0x108>)
 800498e:	68db      	ldr	r3, [r3, #12]
 8004990:	f003 0303 	and.w	r3, r3, #3
 8004994:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004996:	693b      	ldr	r3, [r7, #16]
 8004998:	2b00      	cmp	r3, #0
 800499a:	d005      	beq.n	80049a8 <HAL_RCC_GetSysClockFreq+0x34>
 800499c:	693b      	ldr	r3, [r7, #16]
 800499e:	2b0c      	cmp	r3, #12
 80049a0:	d121      	bne.n	80049e6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	2b01      	cmp	r3, #1
 80049a6:	d11e      	bne.n	80049e6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80049a8:	4b34      	ldr	r3, [pc, #208]	; (8004a7c <HAL_RCC_GetSysClockFreq+0x108>)
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	f003 0308 	and.w	r3, r3, #8
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d107      	bne.n	80049c4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80049b4:	4b31      	ldr	r3, [pc, #196]	; (8004a7c <HAL_RCC_GetSysClockFreq+0x108>)
 80049b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80049ba:	0a1b      	lsrs	r3, r3, #8
 80049bc:	f003 030f 	and.w	r3, r3, #15
 80049c0:	61fb      	str	r3, [r7, #28]
 80049c2:	e005      	b.n	80049d0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80049c4:	4b2d      	ldr	r3, [pc, #180]	; (8004a7c <HAL_RCC_GetSysClockFreq+0x108>)
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	091b      	lsrs	r3, r3, #4
 80049ca:	f003 030f 	and.w	r3, r3, #15
 80049ce:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80049d0:	4a2b      	ldr	r2, [pc, #172]	; (8004a80 <HAL_RCC_GetSysClockFreq+0x10c>)
 80049d2:	69fb      	ldr	r3, [r7, #28]
 80049d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80049d8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80049da:	693b      	ldr	r3, [r7, #16]
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d10d      	bne.n	80049fc <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80049e0:	69fb      	ldr	r3, [r7, #28]
 80049e2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80049e4:	e00a      	b.n	80049fc <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80049e6:	693b      	ldr	r3, [r7, #16]
 80049e8:	2b04      	cmp	r3, #4
 80049ea:	d102      	bne.n	80049f2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80049ec:	4b25      	ldr	r3, [pc, #148]	; (8004a84 <HAL_RCC_GetSysClockFreq+0x110>)
 80049ee:	61bb      	str	r3, [r7, #24]
 80049f0:	e004      	b.n	80049fc <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80049f2:	693b      	ldr	r3, [r7, #16]
 80049f4:	2b08      	cmp	r3, #8
 80049f6:	d101      	bne.n	80049fc <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80049f8:	4b23      	ldr	r3, [pc, #140]	; (8004a88 <HAL_RCC_GetSysClockFreq+0x114>)
 80049fa:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80049fc:	693b      	ldr	r3, [r7, #16]
 80049fe:	2b0c      	cmp	r3, #12
 8004a00:	d134      	bne.n	8004a6c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004a02:	4b1e      	ldr	r3, [pc, #120]	; (8004a7c <HAL_RCC_GetSysClockFreq+0x108>)
 8004a04:	68db      	ldr	r3, [r3, #12]
 8004a06:	f003 0303 	and.w	r3, r3, #3
 8004a0a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004a0c:	68bb      	ldr	r3, [r7, #8]
 8004a0e:	2b02      	cmp	r3, #2
 8004a10:	d003      	beq.n	8004a1a <HAL_RCC_GetSysClockFreq+0xa6>
 8004a12:	68bb      	ldr	r3, [r7, #8]
 8004a14:	2b03      	cmp	r3, #3
 8004a16:	d003      	beq.n	8004a20 <HAL_RCC_GetSysClockFreq+0xac>
 8004a18:	e005      	b.n	8004a26 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004a1a:	4b1a      	ldr	r3, [pc, #104]	; (8004a84 <HAL_RCC_GetSysClockFreq+0x110>)
 8004a1c:	617b      	str	r3, [r7, #20]
      break;
 8004a1e:	e005      	b.n	8004a2c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004a20:	4b19      	ldr	r3, [pc, #100]	; (8004a88 <HAL_RCC_GetSysClockFreq+0x114>)
 8004a22:	617b      	str	r3, [r7, #20]
      break;
 8004a24:	e002      	b.n	8004a2c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004a26:	69fb      	ldr	r3, [r7, #28]
 8004a28:	617b      	str	r3, [r7, #20]
      break;
 8004a2a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004a2c:	4b13      	ldr	r3, [pc, #76]	; (8004a7c <HAL_RCC_GetSysClockFreq+0x108>)
 8004a2e:	68db      	ldr	r3, [r3, #12]
 8004a30:	091b      	lsrs	r3, r3, #4
 8004a32:	f003 0307 	and.w	r3, r3, #7
 8004a36:	3301      	adds	r3, #1
 8004a38:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004a3a:	4b10      	ldr	r3, [pc, #64]	; (8004a7c <HAL_RCC_GetSysClockFreq+0x108>)
 8004a3c:	68db      	ldr	r3, [r3, #12]
 8004a3e:	0a1b      	lsrs	r3, r3, #8
 8004a40:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004a44:	697a      	ldr	r2, [r7, #20]
 8004a46:	fb03 f202 	mul.w	r2, r3, r2
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a50:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004a52:	4b0a      	ldr	r3, [pc, #40]	; (8004a7c <HAL_RCC_GetSysClockFreq+0x108>)
 8004a54:	68db      	ldr	r3, [r3, #12]
 8004a56:	0e5b      	lsrs	r3, r3, #25
 8004a58:	f003 0303 	and.w	r3, r3, #3
 8004a5c:	3301      	adds	r3, #1
 8004a5e:	005b      	lsls	r3, r3, #1
 8004a60:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004a62:	697a      	ldr	r2, [r7, #20]
 8004a64:	683b      	ldr	r3, [r7, #0]
 8004a66:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a6a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004a6c:	69bb      	ldr	r3, [r7, #24]
}
 8004a6e:	4618      	mov	r0, r3
 8004a70:	3724      	adds	r7, #36	; 0x24
 8004a72:	46bd      	mov	sp, r7
 8004a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a78:	4770      	bx	lr
 8004a7a:	bf00      	nop
 8004a7c:	40021000 	.word	0x40021000
 8004a80:	0800b1a0 	.word	0x0800b1a0
 8004a84:	00f42400 	.word	0x00f42400
 8004a88:	007a1200 	.word	0x007a1200

08004a8c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004a8c:	b480      	push	{r7}
 8004a8e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004a90:	4b03      	ldr	r3, [pc, #12]	; (8004aa0 <HAL_RCC_GetHCLKFreq+0x14>)
 8004a92:	681b      	ldr	r3, [r3, #0]
}
 8004a94:	4618      	mov	r0, r3
 8004a96:	46bd      	mov	sp, r7
 8004a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a9c:	4770      	bx	lr
 8004a9e:	bf00      	nop
 8004aa0:	20000000 	.word	0x20000000

08004aa4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004aa4:	b580      	push	{r7, lr}
 8004aa6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004aa8:	f7ff fff0 	bl	8004a8c <HAL_RCC_GetHCLKFreq>
 8004aac:	4602      	mov	r2, r0
 8004aae:	4b06      	ldr	r3, [pc, #24]	; (8004ac8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004ab0:	689b      	ldr	r3, [r3, #8]
 8004ab2:	0a1b      	lsrs	r3, r3, #8
 8004ab4:	f003 0307 	and.w	r3, r3, #7
 8004ab8:	4904      	ldr	r1, [pc, #16]	; (8004acc <HAL_RCC_GetPCLK1Freq+0x28>)
 8004aba:	5ccb      	ldrb	r3, [r1, r3]
 8004abc:	f003 031f 	and.w	r3, r3, #31
 8004ac0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004ac4:	4618      	mov	r0, r3
 8004ac6:	bd80      	pop	{r7, pc}
 8004ac8:	40021000 	.word	0x40021000
 8004acc:	0800b198 	.word	0x0800b198

08004ad0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004ad0:	b580      	push	{r7, lr}
 8004ad2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004ad4:	f7ff ffda 	bl	8004a8c <HAL_RCC_GetHCLKFreq>
 8004ad8:	4602      	mov	r2, r0
 8004ada:	4b06      	ldr	r3, [pc, #24]	; (8004af4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004adc:	689b      	ldr	r3, [r3, #8]
 8004ade:	0adb      	lsrs	r3, r3, #11
 8004ae0:	f003 0307 	and.w	r3, r3, #7
 8004ae4:	4904      	ldr	r1, [pc, #16]	; (8004af8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004ae6:	5ccb      	ldrb	r3, [r1, r3]
 8004ae8:	f003 031f 	and.w	r3, r3, #31
 8004aec:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004af0:	4618      	mov	r0, r3
 8004af2:	bd80      	pop	{r7, pc}
 8004af4:	40021000 	.word	0x40021000
 8004af8:	0800b198 	.word	0x0800b198

08004afc <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004afc:	b480      	push	{r7}
 8004afe:	b083      	sub	sp, #12
 8004b00:	af00      	add	r7, sp, #0
 8004b02:	6078      	str	r0, [r7, #4]
 8004b04:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	220f      	movs	r2, #15
 8004b0a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8004b0c:	4b12      	ldr	r3, [pc, #72]	; (8004b58 <HAL_RCC_GetClockConfig+0x5c>)
 8004b0e:	689b      	ldr	r3, [r3, #8]
 8004b10:	f003 0203 	and.w	r2, r3, #3
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8004b18:	4b0f      	ldr	r3, [pc, #60]	; (8004b58 <HAL_RCC_GetClockConfig+0x5c>)
 8004b1a:	689b      	ldr	r3, [r3, #8]
 8004b1c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8004b24:	4b0c      	ldr	r3, [pc, #48]	; (8004b58 <HAL_RCC_GetClockConfig+0x5c>)
 8004b26:	689b      	ldr	r3, [r3, #8]
 8004b28:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8004b30:	4b09      	ldr	r3, [pc, #36]	; (8004b58 <HAL_RCC_GetClockConfig+0x5c>)
 8004b32:	689b      	ldr	r3, [r3, #8]
 8004b34:	08db      	lsrs	r3, r3, #3
 8004b36:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8004b3e:	4b07      	ldr	r3, [pc, #28]	; (8004b5c <HAL_RCC_GetClockConfig+0x60>)
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	f003 0207 	and.w	r2, r3, #7
 8004b46:	683b      	ldr	r3, [r7, #0]
 8004b48:	601a      	str	r2, [r3, #0]
}
 8004b4a:	bf00      	nop
 8004b4c:	370c      	adds	r7, #12
 8004b4e:	46bd      	mov	sp, r7
 8004b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b54:	4770      	bx	lr
 8004b56:	bf00      	nop
 8004b58:	40021000 	.word	0x40021000
 8004b5c:	40022000 	.word	0x40022000

08004b60 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004b60:	b580      	push	{r7, lr}
 8004b62:	b086      	sub	sp, #24
 8004b64:	af00      	add	r7, sp, #0
 8004b66:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004b68:	2300      	movs	r3, #0
 8004b6a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004b6c:	4b2a      	ldr	r3, [pc, #168]	; (8004c18 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004b6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b70:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d003      	beq.n	8004b80 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004b78:	f7ff f984 	bl	8003e84 <HAL_PWREx_GetVoltageRange>
 8004b7c:	6178      	str	r0, [r7, #20]
 8004b7e:	e014      	b.n	8004baa <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004b80:	4b25      	ldr	r3, [pc, #148]	; (8004c18 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004b82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b84:	4a24      	ldr	r2, [pc, #144]	; (8004c18 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004b86:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b8a:	6593      	str	r3, [r2, #88]	; 0x58
 8004b8c:	4b22      	ldr	r3, [pc, #136]	; (8004c18 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004b8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b90:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b94:	60fb      	str	r3, [r7, #12]
 8004b96:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004b98:	f7ff f974 	bl	8003e84 <HAL_PWREx_GetVoltageRange>
 8004b9c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004b9e:	4b1e      	ldr	r3, [pc, #120]	; (8004c18 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004ba0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ba2:	4a1d      	ldr	r2, [pc, #116]	; (8004c18 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004ba4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004ba8:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004baa:	697b      	ldr	r3, [r7, #20]
 8004bac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004bb0:	d10b      	bne.n	8004bca <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	2b80      	cmp	r3, #128	; 0x80
 8004bb6:	d919      	bls.n	8004bec <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	2ba0      	cmp	r3, #160	; 0xa0
 8004bbc:	d902      	bls.n	8004bc4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004bbe:	2302      	movs	r3, #2
 8004bc0:	613b      	str	r3, [r7, #16]
 8004bc2:	e013      	b.n	8004bec <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004bc4:	2301      	movs	r3, #1
 8004bc6:	613b      	str	r3, [r7, #16]
 8004bc8:	e010      	b.n	8004bec <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	2b80      	cmp	r3, #128	; 0x80
 8004bce:	d902      	bls.n	8004bd6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004bd0:	2303      	movs	r3, #3
 8004bd2:	613b      	str	r3, [r7, #16]
 8004bd4:	e00a      	b.n	8004bec <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	2b80      	cmp	r3, #128	; 0x80
 8004bda:	d102      	bne.n	8004be2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004bdc:	2302      	movs	r3, #2
 8004bde:	613b      	str	r3, [r7, #16]
 8004be0:	e004      	b.n	8004bec <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	2b70      	cmp	r3, #112	; 0x70
 8004be6:	d101      	bne.n	8004bec <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004be8:	2301      	movs	r3, #1
 8004bea:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004bec:	4b0b      	ldr	r3, [pc, #44]	; (8004c1c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	f023 0207 	bic.w	r2, r3, #7
 8004bf4:	4909      	ldr	r1, [pc, #36]	; (8004c1c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004bf6:	693b      	ldr	r3, [r7, #16]
 8004bf8:	4313      	orrs	r3, r2
 8004bfa:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004bfc:	4b07      	ldr	r3, [pc, #28]	; (8004c1c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	f003 0307 	and.w	r3, r3, #7
 8004c04:	693a      	ldr	r2, [r7, #16]
 8004c06:	429a      	cmp	r2, r3
 8004c08:	d001      	beq.n	8004c0e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8004c0a:	2301      	movs	r3, #1
 8004c0c:	e000      	b.n	8004c10 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8004c0e:	2300      	movs	r3, #0
}
 8004c10:	4618      	mov	r0, r3
 8004c12:	3718      	adds	r7, #24
 8004c14:	46bd      	mov	sp, r7
 8004c16:	bd80      	pop	{r7, pc}
 8004c18:	40021000 	.word	0x40021000
 8004c1c:	40022000 	.word	0x40022000

08004c20 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004c20:	b580      	push	{r7, lr}
 8004c22:	b086      	sub	sp, #24
 8004c24:	af00      	add	r7, sp, #0
 8004c26:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004c28:	2300      	movs	r3, #0
 8004c2a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004c2c:	2300      	movs	r3, #0
 8004c2e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d031      	beq.n	8004ca0 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c40:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004c44:	d01a      	beq.n	8004c7c <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8004c46:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004c4a:	d814      	bhi.n	8004c76 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d009      	beq.n	8004c64 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004c50:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004c54:	d10f      	bne.n	8004c76 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8004c56:	4b5d      	ldr	r3, [pc, #372]	; (8004dcc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004c58:	68db      	ldr	r3, [r3, #12]
 8004c5a:	4a5c      	ldr	r2, [pc, #368]	; (8004dcc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004c5c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c60:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004c62:	e00c      	b.n	8004c7e <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	3304      	adds	r3, #4
 8004c68:	2100      	movs	r1, #0
 8004c6a:	4618      	mov	r0, r3
 8004c6c:	f000 f9de 	bl	800502c <RCCEx_PLLSAI1_Config>
 8004c70:	4603      	mov	r3, r0
 8004c72:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004c74:	e003      	b.n	8004c7e <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004c76:	2301      	movs	r3, #1
 8004c78:	74fb      	strb	r3, [r7, #19]
      break;
 8004c7a:	e000      	b.n	8004c7e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8004c7c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004c7e:	7cfb      	ldrb	r3, [r7, #19]
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d10b      	bne.n	8004c9c <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004c84:	4b51      	ldr	r3, [pc, #324]	; (8004dcc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004c86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c8a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c92:	494e      	ldr	r1, [pc, #312]	; (8004dcc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004c94:	4313      	orrs	r3, r2
 8004c96:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004c9a:	e001      	b.n	8004ca0 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c9c:	7cfb      	ldrb	r3, [r7, #19]
 8004c9e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	f000 809e 	beq.w	8004dea <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004cae:	2300      	movs	r3, #0
 8004cb0:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004cb2:	4b46      	ldr	r3, [pc, #280]	; (8004dcc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004cb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004cb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d101      	bne.n	8004cc2 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8004cbe:	2301      	movs	r3, #1
 8004cc0:	e000      	b.n	8004cc4 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8004cc2:	2300      	movs	r3, #0
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d00d      	beq.n	8004ce4 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004cc8:	4b40      	ldr	r3, [pc, #256]	; (8004dcc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004cca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ccc:	4a3f      	ldr	r2, [pc, #252]	; (8004dcc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004cce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004cd2:	6593      	str	r3, [r2, #88]	; 0x58
 8004cd4:	4b3d      	ldr	r3, [pc, #244]	; (8004dcc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004cd6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004cd8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004cdc:	60bb      	str	r3, [r7, #8]
 8004cde:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004ce0:	2301      	movs	r3, #1
 8004ce2:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004ce4:	4b3a      	ldr	r3, [pc, #232]	; (8004dd0 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	4a39      	ldr	r2, [pc, #228]	; (8004dd0 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8004cea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004cee:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004cf0:	f7fe fac4 	bl	800327c <HAL_GetTick>
 8004cf4:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004cf6:	e009      	b.n	8004d0c <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004cf8:	f7fe fac0 	bl	800327c <HAL_GetTick>
 8004cfc:	4602      	mov	r2, r0
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	1ad3      	subs	r3, r2, r3
 8004d02:	2b02      	cmp	r3, #2
 8004d04:	d902      	bls.n	8004d0c <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8004d06:	2303      	movs	r3, #3
 8004d08:	74fb      	strb	r3, [r7, #19]
        break;
 8004d0a:	e005      	b.n	8004d18 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004d0c:	4b30      	ldr	r3, [pc, #192]	; (8004dd0 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d0ef      	beq.n	8004cf8 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8004d18:	7cfb      	ldrb	r3, [r7, #19]
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d15a      	bne.n	8004dd4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004d1e:	4b2b      	ldr	r3, [pc, #172]	; (8004dcc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004d20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d24:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d28:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004d2a:	697b      	ldr	r3, [r7, #20]
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d01e      	beq.n	8004d6e <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d34:	697a      	ldr	r2, [r7, #20]
 8004d36:	429a      	cmp	r2, r3
 8004d38:	d019      	beq.n	8004d6e <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004d3a:	4b24      	ldr	r3, [pc, #144]	; (8004dcc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004d3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d40:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d44:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004d46:	4b21      	ldr	r3, [pc, #132]	; (8004dcc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004d48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d4c:	4a1f      	ldr	r2, [pc, #124]	; (8004dcc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004d4e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004d52:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004d56:	4b1d      	ldr	r3, [pc, #116]	; (8004dcc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004d58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d5c:	4a1b      	ldr	r2, [pc, #108]	; (8004dcc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004d5e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004d62:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004d66:	4a19      	ldr	r2, [pc, #100]	; (8004dcc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004d68:	697b      	ldr	r3, [r7, #20]
 8004d6a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004d6e:	697b      	ldr	r3, [r7, #20]
 8004d70:	f003 0301 	and.w	r3, r3, #1
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d016      	beq.n	8004da6 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d78:	f7fe fa80 	bl	800327c <HAL_GetTick>
 8004d7c:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004d7e:	e00b      	b.n	8004d98 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d80:	f7fe fa7c 	bl	800327c <HAL_GetTick>
 8004d84:	4602      	mov	r2, r0
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	1ad3      	subs	r3, r2, r3
 8004d8a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d8e:	4293      	cmp	r3, r2
 8004d90:	d902      	bls.n	8004d98 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8004d92:	2303      	movs	r3, #3
 8004d94:	74fb      	strb	r3, [r7, #19]
            break;
 8004d96:	e006      	b.n	8004da6 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004d98:	4b0c      	ldr	r3, [pc, #48]	; (8004dcc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004d9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d9e:	f003 0302 	and.w	r3, r3, #2
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d0ec      	beq.n	8004d80 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8004da6:	7cfb      	ldrb	r3, [r7, #19]
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d10b      	bne.n	8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004dac:	4b07      	ldr	r3, [pc, #28]	; (8004dcc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004dae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004db2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004dba:	4904      	ldr	r1, [pc, #16]	; (8004dcc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004dbc:	4313      	orrs	r3, r2
 8004dbe:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004dc2:	e009      	b.n	8004dd8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004dc4:	7cfb      	ldrb	r3, [r7, #19]
 8004dc6:	74bb      	strb	r3, [r7, #18]
 8004dc8:	e006      	b.n	8004dd8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8004dca:	bf00      	nop
 8004dcc:	40021000 	.word	0x40021000
 8004dd0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004dd4:	7cfb      	ldrb	r3, [r7, #19]
 8004dd6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004dd8:	7c7b      	ldrb	r3, [r7, #17]
 8004dda:	2b01      	cmp	r3, #1
 8004ddc:	d105      	bne.n	8004dea <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004dde:	4b8a      	ldr	r3, [pc, #552]	; (8005008 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004de0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004de2:	4a89      	ldr	r2, [pc, #548]	; (8005008 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004de4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004de8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	f003 0301 	and.w	r3, r3, #1
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d00a      	beq.n	8004e0c <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004df6:	4b84      	ldr	r3, [pc, #528]	; (8005008 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004df8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004dfc:	f023 0203 	bic.w	r2, r3, #3
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	6a1b      	ldr	r3, [r3, #32]
 8004e04:	4980      	ldr	r1, [pc, #512]	; (8005008 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004e06:	4313      	orrs	r3, r2
 8004e08:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	f003 0302 	and.w	r3, r3, #2
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d00a      	beq.n	8004e2e <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004e18:	4b7b      	ldr	r3, [pc, #492]	; (8005008 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004e1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e1e:	f023 020c 	bic.w	r2, r3, #12
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e26:	4978      	ldr	r1, [pc, #480]	; (8005008 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004e28:	4313      	orrs	r3, r2
 8004e2a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	f003 0320 	and.w	r3, r3, #32
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d00a      	beq.n	8004e50 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004e3a:	4b73      	ldr	r3, [pc, #460]	; (8005008 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004e3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e40:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e48:	496f      	ldr	r1, [pc, #444]	; (8005008 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004e4a:	4313      	orrs	r3, r2
 8004e4c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d00a      	beq.n	8004e72 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004e5c:	4b6a      	ldr	r3, [pc, #424]	; (8005008 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004e5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e62:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e6a:	4967      	ldr	r1, [pc, #412]	; (8005008 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004e6c:	4313      	orrs	r3, r2
 8004e6e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d00a      	beq.n	8004e94 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004e7e:	4b62      	ldr	r3, [pc, #392]	; (8005008 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004e80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e84:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e8c:	495e      	ldr	r1, [pc, #376]	; (8005008 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004e8e:	4313      	orrs	r3, r2
 8004e90:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d00a      	beq.n	8004eb6 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004ea0:	4b59      	ldr	r3, [pc, #356]	; (8005008 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004ea2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ea6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004eae:	4956      	ldr	r1, [pc, #344]	; (8005008 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004eb0:	4313      	orrs	r3, r2
 8004eb2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d00a      	beq.n	8004ed8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004ec2:	4b51      	ldr	r3, [pc, #324]	; (8005008 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004ec4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ec8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ed0:	494d      	ldr	r1, [pc, #308]	; (8005008 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004ed2:	4313      	orrs	r3, r2
 8004ed4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d028      	beq.n	8004f36 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004ee4:	4b48      	ldr	r3, [pc, #288]	; (8005008 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004ee6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004eea:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ef2:	4945      	ldr	r1, [pc, #276]	; (8005008 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004ef4:	4313      	orrs	r3, r2
 8004ef6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004efe:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004f02:	d106      	bne.n	8004f12 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004f04:	4b40      	ldr	r3, [pc, #256]	; (8005008 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004f06:	68db      	ldr	r3, [r3, #12]
 8004f08:	4a3f      	ldr	r2, [pc, #252]	; (8005008 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004f0a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004f0e:	60d3      	str	r3, [r2, #12]
 8004f10:	e011      	b.n	8004f36 <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f16:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004f1a:	d10c      	bne.n	8004f36 <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	3304      	adds	r3, #4
 8004f20:	2101      	movs	r1, #1
 8004f22:	4618      	mov	r0, r3
 8004f24:	f000 f882 	bl	800502c <RCCEx_PLLSAI1_Config>
 8004f28:	4603      	mov	r3, r0
 8004f2a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004f2c:	7cfb      	ldrb	r3, [r7, #19]
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d001      	beq.n	8004f36 <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 8004f32:	7cfb      	ldrb	r3, [r7, #19]
 8004f34:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d028      	beq.n	8004f94 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004f42:	4b31      	ldr	r3, [pc, #196]	; (8005008 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004f44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f48:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f50:	492d      	ldr	r1, [pc, #180]	; (8005008 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004f52:	4313      	orrs	r3, r2
 8004f54:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f5c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004f60:	d106      	bne.n	8004f70 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004f62:	4b29      	ldr	r3, [pc, #164]	; (8005008 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004f64:	68db      	ldr	r3, [r3, #12]
 8004f66:	4a28      	ldr	r2, [pc, #160]	; (8005008 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004f68:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004f6c:	60d3      	str	r3, [r2, #12]
 8004f6e:	e011      	b.n	8004f94 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f74:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004f78:	d10c      	bne.n	8004f94 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	3304      	adds	r3, #4
 8004f7e:	2101      	movs	r1, #1
 8004f80:	4618      	mov	r0, r3
 8004f82:	f000 f853 	bl	800502c <RCCEx_PLLSAI1_Config>
 8004f86:	4603      	mov	r3, r0
 8004f88:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004f8a:	7cfb      	ldrb	r3, [r7, #19]
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d001      	beq.n	8004f94 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 8004f90:	7cfb      	ldrb	r3, [r7, #19]
 8004f92:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d01c      	beq.n	8004fda <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004fa0:	4b19      	ldr	r3, [pc, #100]	; (8005008 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004fa2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fa6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004fae:	4916      	ldr	r1, [pc, #88]	; (8005008 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004fb0:	4313      	orrs	r3, r2
 8004fb2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004fba:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004fbe:	d10c      	bne.n	8004fda <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	3304      	adds	r3, #4
 8004fc4:	2102      	movs	r1, #2
 8004fc6:	4618      	mov	r0, r3
 8004fc8:	f000 f830 	bl	800502c <RCCEx_PLLSAI1_Config>
 8004fcc:	4603      	mov	r3, r0
 8004fce:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004fd0:	7cfb      	ldrb	r3, [r7, #19]
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d001      	beq.n	8004fda <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 8004fd6:	7cfb      	ldrb	r3, [r7, #19]
 8004fd8:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d00a      	beq.n	8004ffc <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004fe6:	4b08      	ldr	r3, [pc, #32]	; (8005008 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004fe8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fec:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ff4:	4904      	ldr	r1, [pc, #16]	; (8005008 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004ff6:	4313      	orrs	r3, r2
 8004ff8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004ffc:	7cbb      	ldrb	r3, [r7, #18]
}
 8004ffe:	4618      	mov	r0, r3
 8005000:	3718      	adds	r7, #24
 8005002:	46bd      	mov	sp, r7
 8005004:	bd80      	pop	{r7, pc}
 8005006:	bf00      	nop
 8005008:	40021000 	.word	0x40021000

0800500c <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 800500c:	b480      	push	{r7}
 800500e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8005010:	4b05      	ldr	r3, [pc, #20]	; (8005028 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	4a04      	ldr	r2, [pc, #16]	; (8005028 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8005016:	f043 0304 	orr.w	r3, r3, #4
 800501a:	6013      	str	r3, [r2, #0]
}
 800501c:	bf00      	nop
 800501e:	46bd      	mov	sp, r7
 8005020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005024:	4770      	bx	lr
 8005026:	bf00      	nop
 8005028:	40021000 	.word	0x40021000

0800502c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800502c:	b580      	push	{r7, lr}
 800502e:	b084      	sub	sp, #16
 8005030:	af00      	add	r7, sp, #0
 8005032:	6078      	str	r0, [r7, #4]
 8005034:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005036:	2300      	movs	r3, #0
 8005038:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800503a:	4b74      	ldr	r3, [pc, #464]	; (800520c <RCCEx_PLLSAI1_Config+0x1e0>)
 800503c:	68db      	ldr	r3, [r3, #12]
 800503e:	f003 0303 	and.w	r3, r3, #3
 8005042:	2b00      	cmp	r3, #0
 8005044:	d018      	beq.n	8005078 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8005046:	4b71      	ldr	r3, [pc, #452]	; (800520c <RCCEx_PLLSAI1_Config+0x1e0>)
 8005048:	68db      	ldr	r3, [r3, #12]
 800504a:	f003 0203 	and.w	r2, r3, #3
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	429a      	cmp	r2, r3
 8005054:	d10d      	bne.n	8005072 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
       ||
 800505a:	2b00      	cmp	r3, #0
 800505c:	d009      	beq.n	8005072 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800505e:	4b6b      	ldr	r3, [pc, #428]	; (800520c <RCCEx_PLLSAI1_Config+0x1e0>)
 8005060:	68db      	ldr	r3, [r3, #12]
 8005062:	091b      	lsrs	r3, r3, #4
 8005064:	f003 0307 	and.w	r3, r3, #7
 8005068:	1c5a      	adds	r2, r3, #1
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	685b      	ldr	r3, [r3, #4]
       ||
 800506e:	429a      	cmp	r2, r3
 8005070:	d047      	beq.n	8005102 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8005072:	2301      	movs	r3, #1
 8005074:	73fb      	strb	r3, [r7, #15]
 8005076:	e044      	b.n	8005102 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	2b03      	cmp	r3, #3
 800507e:	d018      	beq.n	80050b2 <RCCEx_PLLSAI1_Config+0x86>
 8005080:	2b03      	cmp	r3, #3
 8005082:	d825      	bhi.n	80050d0 <RCCEx_PLLSAI1_Config+0xa4>
 8005084:	2b01      	cmp	r3, #1
 8005086:	d002      	beq.n	800508e <RCCEx_PLLSAI1_Config+0x62>
 8005088:	2b02      	cmp	r3, #2
 800508a:	d009      	beq.n	80050a0 <RCCEx_PLLSAI1_Config+0x74>
 800508c:	e020      	b.n	80050d0 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800508e:	4b5f      	ldr	r3, [pc, #380]	; (800520c <RCCEx_PLLSAI1_Config+0x1e0>)
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	f003 0302 	and.w	r3, r3, #2
 8005096:	2b00      	cmp	r3, #0
 8005098:	d11d      	bne.n	80050d6 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800509a:	2301      	movs	r3, #1
 800509c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800509e:	e01a      	b.n	80050d6 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80050a0:	4b5a      	ldr	r3, [pc, #360]	; (800520c <RCCEx_PLLSAI1_Config+0x1e0>)
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d116      	bne.n	80050da <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80050ac:	2301      	movs	r3, #1
 80050ae:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80050b0:	e013      	b.n	80050da <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80050b2:	4b56      	ldr	r3, [pc, #344]	; (800520c <RCCEx_PLLSAI1_Config+0x1e0>)
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d10f      	bne.n	80050de <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80050be:	4b53      	ldr	r3, [pc, #332]	; (800520c <RCCEx_PLLSAI1_Config+0x1e0>)
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d109      	bne.n	80050de <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80050ca:	2301      	movs	r3, #1
 80050cc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80050ce:	e006      	b.n	80050de <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80050d0:	2301      	movs	r3, #1
 80050d2:	73fb      	strb	r3, [r7, #15]
      break;
 80050d4:	e004      	b.n	80050e0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80050d6:	bf00      	nop
 80050d8:	e002      	b.n	80050e0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80050da:	bf00      	nop
 80050dc:	e000      	b.n	80050e0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80050de:	bf00      	nop
    }

    if(status == HAL_OK)
 80050e0:	7bfb      	ldrb	r3, [r7, #15]
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d10d      	bne.n	8005102 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80050e6:	4b49      	ldr	r3, [pc, #292]	; (800520c <RCCEx_PLLSAI1_Config+0x1e0>)
 80050e8:	68db      	ldr	r3, [r3, #12]
 80050ea:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	6819      	ldr	r1, [r3, #0]
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	685b      	ldr	r3, [r3, #4]
 80050f6:	3b01      	subs	r3, #1
 80050f8:	011b      	lsls	r3, r3, #4
 80050fa:	430b      	orrs	r3, r1
 80050fc:	4943      	ldr	r1, [pc, #268]	; (800520c <RCCEx_PLLSAI1_Config+0x1e0>)
 80050fe:	4313      	orrs	r3, r2
 8005100:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005102:	7bfb      	ldrb	r3, [r7, #15]
 8005104:	2b00      	cmp	r3, #0
 8005106:	d17c      	bne.n	8005202 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8005108:	4b40      	ldr	r3, [pc, #256]	; (800520c <RCCEx_PLLSAI1_Config+0x1e0>)
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	4a3f      	ldr	r2, [pc, #252]	; (800520c <RCCEx_PLLSAI1_Config+0x1e0>)
 800510e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005112:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005114:	f7fe f8b2 	bl	800327c <HAL_GetTick>
 8005118:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800511a:	e009      	b.n	8005130 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800511c:	f7fe f8ae 	bl	800327c <HAL_GetTick>
 8005120:	4602      	mov	r2, r0
 8005122:	68bb      	ldr	r3, [r7, #8]
 8005124:	1ad3      	subs	r3, r2, r3
 8005126:	2b02      	cmp	r3, #2
 8005128:	d902      	bls.n	8005130 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800512a:	2303      	movs	r3, #3
 800512c:	73fb      	strb	r3, [r7, #15]
        break;
 800512e:	e005      	b.n	800513c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005130:	4b36      	ldr	r3, [pc, #216]	; (800520c <RCCEx_PLLSAI1_Config+0x1e0>)
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005138:	2b00      	cmp	r3, #0
 800513a:	d1ef      	bne.n	800511c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800513c:	7bfb      	ldrb	r3, [r7, #15]
 800513e:	2b00      	cmp	r3, #0
 8005140:	d15f      	bne.n	8005202 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005142:	683b      	ldr	r3, [r7, #0]
 8005144:	2b00      	cmp	r3, #0
 8005146:	d110      	bne.n	800516a <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005148:	4b30      	ldr	r3, [pc, #192]	; (800520c <RCCEx_PLLSAI1_Config+0x1e0>)
 800514a:	691b      	ldr	r3, [r3, #16]
 800514c:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8005150:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005154:	687a      	ldr	r2, [r7, #4]
 8005156:	6892      	ldr	r2, [r2, #8]
 8005158:	0211      	lsls	r1, r2, #8
 800515a:	687a      	ldr	r2, [r7, #4]
 800515c:	68d2      	ldr	r2, [r2, #12]
 800515e:	06d2      	lsls	r2, r2, #27
 8005160:	430a      	orrs	r2, r1
 8005162:	492a      	ldr	r1, [pc, #168]	; (800520c <RCCEx_PLLSAI1_Config+0x1e0>)
 8005164:	4313      	orrs	r3, r2
 8005166:	610b      	str	r3, [r1, #16]
 8005168:	e027      	b.n	80051ba <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800516a:	683b      	ldr	r3, [r7, #0]
 800516c:	2b01      	cmp	r3, #1
 800516e:	d112      	bne.n	8005196 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005170:	4b26      	ldr	r3, [pc, #152]	; (800520c <RCCEx_PLLSAI1_Config+0x1e0>)
 8005172:	691b      	ldr	r3, [r3, #16]
 8005174:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8005178:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800517c:	687a      	ldr	r2, [r7, #4]
 800517e:	6892      	ldr	r2, [r2, #8]
 8005180:	0211      	lsls	r1, r2, #8
 8005182:	687a      	ldr	r2, [r7, #4]
 8005184:	6912      	ldr	r2, [r2, #16]
 8005186:	0852      	lsrs	r2, r2, #1
 8005188:	3a01      	subs	r2, #1
 800518a:	0552      	lsls	r2, r2, #21
 800518c:	430a      	orrs	r2, r1
 800518e:	491f      	ldr	r1, [pc, #124]	; (800520c <RCCEx_PLLSAI1_Config+0x1e0>)
 8005190:	4313      	orrs	r3, r2
 8005192:	610b      	str	r3, [r1, #16]
 8005194:	e011      	b.n	80051ba <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005196:	4b1d      	ldr	r3, [pc, #116]	; (800520c <RCCEx_PLLSAI1_Config+0x1e0>)
 8005198:	691b      	ldr	r3, [r3, #16]
 800519a:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800519e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80051a2:	687a      	ldr	r2, [r7, #4]
 80051a4:	6892      	ldr	r2, [r2, #8]
 80051a6:	0211      	lsls	r1, r2, #8
 80051a8:	687a      	ldr	r2, [r7, #4]
 80051aa:	6952      	ldr	r2, [r2, #20]
 80051ac:	0852      	lsrs	r2, r2, #1
 80051ae:	3a01      	subs	r2, #1
 80051b0:	0652      	lsls	r2, r2, #25
 80051b2:	430a      	orrs	r2, r1
 80051b4:	4915      	ldr	r1, [pc, #84]	; (800520c <RCCEx_PLLSAI1_Config+0x1e0>)
 80051b6:	4313      	orrs	r3, r2
 80051b8:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80051ba:	4b14      	ldr	r3, [pc, #80]	; (800520c <RCCEx_PLLSAI1_Config+0x1e0>)
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	4a13      	ldr	r2, [pc, #76]	; (800520c <RCCEx_PLLSAI1_Config+0x1e0>)
 80051c0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80051c4:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80051c6:	f7fe f859 	bl	800327c <HAL_GetTick>
 80051ca:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80051cc:	e009      	b.n	80051e2 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80051ce:	f7fe f855 	bl	800327c <HAL_GetTick>
 80051d2:	4602      	mov	r2, r0
 80051d4:	68bb      	ldr	r3, [r7, #8]
 80051d6:	1ad3      	subs	r3, r2, r3
 80051d8:	2b02      	cmp	r3, #2
 80051da:	d902      	bls.n	80051e2 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 80051dc:	2303      	movs	r3, #3
 80051de:	73fb      	strb	r3, [r7, #15]
          break;
 80051e0:	e005      	b.n	80051ee <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80051e2:	4b0a      	ldr	r3, [pc, #40]	; (800520c <RCCEx_PLLSAI1_Config+0x1e0>)
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d0ef      	beq.n	80051ce <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 80051ee:	7bfb      	ldrb	r3, [r7, #15]
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d106      	bne.n	8005202 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80051f4:	4b05      	ldr	r3, [pc, #20]	; (800520c <RCCEx_PLLSAI1_Config+0x1e0>)
 80051f6:	691a      	ldr	r2, [r3, #16]
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	699b      	ldr	r3, [r3, #24]
 80051fc:	4903      	ldr	r1, [pc, #12]	; (800520c <RCCEx_PLLSAI1_Config+0x1e0>)
 80051fe:	4313      	orrs	r3, r2
 8005200:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8005202:	7bfb      	ldrb	r3, [r7, #15]
}
 8005204:	4618      	mov	r0, r3
 8005206:	3710      	adds	r7, #16
 8005208:	46bd      	mov	sp, r7
 800520a:	bd80      	pop	{r7, pc}
 800520c:	40021000 	.word	0x40021000

08005210 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005210:	b580      	push	{r7, lr}
 8005212:	b082      	sub	sp, #8
 8005214:	af00      	add	r7, sp, #0
 8005216:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	2b00      	cmp	r3, #0
 800521c:	d101      	bne.n	8005222 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800521e:	2301      	movs	r3, #1
 8005220:	e049      	b.n	80052b6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005228:	b2db      	uxtb	r3, r3
 800522a:	2b00      	cmp	r3, #0
 800522c:	d106      	bne.n	800523c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	2200      	movs	r2, #0
 8005232:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005236:	6878      	ldr	r0, [r7, #4]
 8005238:	f000 f841 	bl	80052be <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	2202      	movs	r2, #2
 8005240:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681a      	ldr	r2, [r3, #0]
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	3304      	adds	r3, #4
 800524c:	4619      	mov	r1, r3
 800524e:	4610      	mov	r0, r2
 8005250:	f000 f9dc 	bl	800560c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	2201      	movs	r2, #1
 8005258:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	2201      	movs	r2, #1
 8005260:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	2201      	movs	r2, #1
 8005268:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	2201      	movs	r2, #1
 8005270:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	2201      	movs	r2, #1
 8005278:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	2201      	movs	r2, #1
 8005280:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	2201      	movs	r2, #1
 8005288:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	2201      	movs	r2, #1
 8005290:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	2201      	movs	r2, #1
 8005298:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	2201      	movs	r2, #1
 80052a0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	2201      	movs	r2, #1
 80052a8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	2201      	movs	r2, #1
 80052b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80052b4:	2300      	movs	r3, #0
}
 80052b6:	4618      	mov	r0, r3
 80052b8:	3708      	adds	r7, #8
 80052ba:	46bd      	mov	sp, r7
 80052bc:	bd80      	pop	{r7, pc}

080052be <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80052be:	b480      	push	{r7}
 80052c0:	b083      	sub	sp, #12
 80052c2:	af00      	add	r7, sp, #0
 80052c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80052c6:	bf00      	nop
 80052c8:	370c      	adds	r7, #12
 80052ca:	46bd      	mov	sp, r7
 80052cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d0:	4770      	bx	lr
	...

080052d4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80052d4:	b480      	push	{r7}
 80052d6:	b085      	sub	sp, #20
 80052d8:	af00      	add	r7, sp, #0
 80052da:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80052e2:	b2db      	uxtb	r3, r3
 80052e4:	2b01      	cmp	r3, #1
 80052e6:	d001      	beq.n	80052ec <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80052e8:	2301      	movs	r3, #1
 80052ea:	e03b      	b.n	8005364 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	2202      	movs	r2, #2
 80052f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	68da      	ldr	r2, [r3, #12]
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	f042 0201 	orr.w	r2, r2, #1
 8005302:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	4a19      	ldr	r2, [pc, #100]	; (8005370 <HAL_TIM_Base_Start_IT+0x9c>)
 800530a:	4293      	cmp	r3, r2
 800530c:	d009      	beq.n	8005322 <HAL_TIM_Base_Start_IT+0x4e>
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005316:	d004      	beq.n	8005322 <HAL_TIM_Base_Start_IT+0x4e>
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	4a15      	ldr	r2, [pc, #84]	; (8005374 <HAL_TIM_Base_Start_IT+0xa0>)
 800531e:	4293      	cmp	r3, r2
 8005320:	d115      	bne.n	800534e <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	689a      	ldr	r2, [r3, #8]
 8005328:	4b13      	ldr	r3, [pc, #76]	; (8005378 <HAL_TIM_Base_Start_IT+0xa4>)
 800532a:	4013      	ands	r3, r2
 800532c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	2b06      	cmp	r3, #6
 8005332:	d015      	beq.n	8005360 <HAL_TIM_Base_Start_IT+0x8c>
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800533a:	d011      	beq.n	8005360 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	681a      	ldr	r2, [r3, #0]
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	f042 0201 	orr.w	r2, r2, #1
 800534a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800534c:	e008      	b.n	8005360 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	681a      	ldr	r2, [r3, #0]
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	f042 0201 	orr.w	r2, r2, #1
 800535c:	601a      	str	r2, [r3, #0]
 800535e:	e000      	b.n	8005362 <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005360:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005362:	2300      	movs	r3, #0
}
 8005364:	4618      	mov	r0, r3
 8005366:	3714      	adds	r7, #20
 8005368:	46bd      	mov	sp, r7
 800536a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800536e:	4770      	bx	lr
 8005370:	40012c00 	.word	0x40012c00
 8005374:	40014000 	.word	0x40014000
 8005378:	00010007 	.word	0x00010007

0800537c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800537c:	b580      	push	{r7, lr}
 800537e:	b082      	sub	sp, #8
 8005380:	af00      	add	r7, sp, #0
 8005382:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	691b      	ldr	r3, [r3, #16]
 800538a:	f003 0302 	and.w	r3, r3, #2
 800538e:	2b02      	cmp	r3, #2
 8005390:	d122      	bne.n	80053d8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	68db      	ldr	r3, [r3, #12]
 8005398:	f003 0302 	and.w	r3, r3, #2
 800539c:	2b02      	cmp	r3, #2
 800539e:	d11b      	bne.n	80053d8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	f06f 0202 	mvn.w	r2, #2
 80053a8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	2201      	movs	r2, #1
 80053ae:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	699b      	ldr	r3, [r3, #24]
 80053b6:	f003 0303 	and.w	r3, r3, #3
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d003      	beq.n	80053c6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80053be:	6878      	ldr	r0, [r7, #4]
 80053c0:	f000 f905 	bl	80055ce <HAL_TIM_IC_CaptureCallback>
 80053c4:	e005      	b.n	80053d2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80053c6:	6878      	ldr	r0, [r7, #4]
 80053c8:	f000 f8f7 	bl	80055ba <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80053cc:	6878      	ldr	r0, [r7, #4]
 80053ce:	f000 f908 	bl	80055e2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	2200      	movs	r2, #0
 80053d6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	691b      	ldr	r3, [r3, #16]
 80053de:	f003 0304 	and.w	r3, r3, #4
 80053e2:	2b04      	cmp	r3, #4
 80053e4:	d122      	bne.n	800542c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	68db      	ldr	r3, [r3, #12]
 80053ec:	f003 0304 	and.w	r3, r3, #4
 80053f0:	2b04      	cmp	r3, #4
 80053f2:	d11b      	bne.n	800542c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	f06f 0204 	mvn.w	r2, #4
 80053fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	2202      	movs	r2, #2
 8005402:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	699b      	ldr	r3, [r3, #24]
 800540a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800540e:	2b00      	cmp	r3, #0
 8005410:	d003      	beq.n	800541a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005412:	6878      	ldr	r0, [r7, #4]
 8005414:	f000 f8db 	bl	80055ce <HAL_TIM_IC_CaptureCallback>
 8005418:	e005      	b.n	8005426 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800541a:	6878      	ldr	r0, [r7, #4]
 800541c:	f000 f8cd 	bl	80055ba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005420:	6878      	ldr	r0, [r7, #4]
 8005422:	f000 f8de 	bl	80055e2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	2200      	movs	r2, #0
 800542a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	691b      	ldr	r3, [r3, #16]
 8005432:	f003 0308 	and.w	r3, r3, #8
 8005436:	2b08      	cmp	r3, #8
 8005438:	d122      	bne.n	8005480 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	68db      	ldr	r3, [r3, #12]
 8005440:	f003 0308 	and.w	r3, r3, #8
 8005444:	2b08      	cmp	r3, #8
 8005446:	d11b      	bne.n	8005480 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	f06f 0208 	mvn.w	r2, #8
 8005450:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	2204      	movs	r2, #4
 8005456:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	69db      	ldr	r3, [r3, #28]
 800545e:	f003 0303 	and.w	r3, r3, #3
 8005462:	2b00      	cmp	r3, #0
 8005464:	d003      	beq.n	800546e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005466:	6878      	ldr	r0, [r7, #4]
 8005468:	f000 f8b1 	bl	80055ce <HAL_TIM_IC_CaptureCallback>
 800546c:	e005      	b.n	800547a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800546e:	6878      	ldr	r0, [r7, #4]
 8005470:	f000 f8a3 	bl	80055ba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005474:	6878      	ldr	r0, [r7, #4]
 8005476:	f000 f8b4 	bl	80055e2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	2200      	movs	r2, #0
 800547e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	691b      	ldr	r3, [r3, #16]
 8005486:	f003 0310 	and.w	r3, r3, #16
 800548a:	2b10      	cmp	r3, #16
 800548c:	d122      	bne.n	80054d4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	68db      	ldr	r3, [r3, #12]
 8005494:	f003 0310 	and.w	r3, r3, #16
 8005498:	2b10      	cmp	r3, #16
 800549a:	d11b      	bne.n	80054d4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	f06f 0210 	mvn.w	r2, #16
 80054a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	2208      	movs	r2, #8
 80054aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	69db      	ldr	r3, [r3, #28]
 80054b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d003      	beq.n	80054c2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80054ba:	6878      	ldr	r0, [r7, #4]
 80054bc:	f000 f887 	bl	80055ce <HAL_TIM_IC_CaptureCallback>
 80054c0:	e005      	b.n	80054ce <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80054c2:	6878      	ldr	r0, [r7, #4]
 80054c4:	f000 f879 	bl	80055ba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80054c8:	6878      	ldr	r0, [r7, #4]
 80054ca:	f000 f88a 	bl	80055e2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	2200      	movs	r2, #0
 80054d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	691b      	ldr	r3, [r3, #16]
 80054da:	f003 0301 	and.w	r3, r3, #1
 80054de:	2b01      	cmp	r3, #1
 80054e0:	d10e      	bne.n	8005500 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	68db      	ldr	r3, [r3, #12]
 80054e8:	f003 0301 	and.w	r3, r3, #1
 80054ec:	2b01      	cmp	r3, #1
 80054ee:	d107      	bne.n	8005500 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	f06f 0201 	mvn.w	r2, #1
 80054f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80054fa:	6878      	ldr	r0, [r7, #4]
 80054fc:	f7fb fee8 	bl	80012d0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	691b      	ldr	r3, [r3, #16]
 8005506:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800550a:	2b80      	cmp	r3, #128	; 0x80
 800550c:	d10e      	bne.n	800552c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	68db      	ldr	r3, [r3, #12]
 8005514:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005518:	2b80      	cmp	r3, #128	; 0x80
 800551a:	d107      	bne.n	800552c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005524:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005526:	6878      	ldr	r0, [r7, #4]
 8005528:	f000 f8de 	bl	80056e8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	691b      	ldr	r3, [r3, #16]
 8005532:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005536:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800553a:	d10e      	bne.n	800555a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	68db      	ldr	r3, [r3, #12]
 8005542:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005546:	2b80      	cmp	r3, #128	; 0x80
 8005548:	d107      	bne.n	800555a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005552:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005554:	6878      	ldr	r0, [r7, #4]
 8005556:	f000 f8d1 	bl	80056fc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	691b      	ldr	r3, [r3, #16]
 8005560:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005564:	2b40      	cmp	r3, #64	; 0x40
 8005566:	d10e      	bne.n	8005586 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	68db      	ldr	r3, [r3, #12]
 800556e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005572:	2b40      	cmp	r3, #64	; 0x40
 8005574:	d107      	bne.n	8005586 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800557e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005580:	6878      	ldr	r0, [r7, #4]
 8005582:	f000 f838 	bl	80055f6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	691b      	ldr	r3, [r3, #16]
 800558c:	f003 0320 	and.w	r3, r3, #32
 8005590:	2b20      	cmp	r3, #32
 8005592:	d10e      	bne.n	80055b2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	68db      	ldr	r3, [r3, #12]
 800559a:	f003 0320 	and.w	r3, r3, #32
 800559e:	2b20      	cmp	r3, #32
 80055a0:	d107      	bne.n	80055b2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	f06f 0220 	mvn.w	r2, #32
 80055aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80055ac:	6878      	ldr	r0, [r7, #4]
 80055ae:	f000 f891 	bl	80056d4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80055b2:	bf00      	nop
 80055b4:	3708      	adds	r7, #8
 80055b6:	46bd      	mov	sp, r7
 80055b8:	bd80      	pop	{r7, pc}

080055ba <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80055ba:	b480      	push	{r7}
 80055bc:	b083      	sub	sp, #12
 80055be:	af00      	add	r7, sp, #0
 80055c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80055c2:	bf00      	nop
 80055c4:	370c      	adds	r7, #12
 80055c6:	46bd      	mov	sp, r7
 80055c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055cc:	4770      	bx	lr

080055ce <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80055ce:	b480      	push	{r7}
 80055d0:	b083      	sub	sp, #12
 80055d2:	af00      	add	r7, sp, #0
 80055d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80055d6:	bf00      	nop
 80055d8:	370c      	adds	r7, #12
 80055da:	46bd      	mov	sp, r7
 80055dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e0:	4770      	bx	lr

080055e2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80055e2:	b480      	push	{r7}
 80055e4:	b083      	sub	sp, #12
 80055e6:	af00      	add	r7, sp, #0
 80055e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80055ea:	bf00      	nop
 80055ec:	370c      	adds	r7, #12
 80055ee:	46bd      	mov	sp, r7
 80055f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f4:	4770      	bx	lr

080055f6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80055f6:	b480      	push	{r7}
 80055f8:	b083      	sub	sp, #12
 80055fa:	af00      	add	r7, sp, #0
 80055fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80055fe:	bf00      	nop
 8005600:	370c      	adds	r7, #12
 8005602:	46bd      	mov	sp, r7
 8005604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005608:	4770      	bx	lr
	...

0800560c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800560c:	b480      	push	{r7}
 800560e:	b085      	sub	sp, #20
 8005610:	af00      	add	r7, sp, #0
 8005612:	6078      	str	r0, [r7, #4]
 8005614:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	4a2a      	ldr	r2, [pc, #168]	; (80056c8 <TIM_Base_SetConfig+0xbc>)
 8005620:	4293      	cmp	r3, r2
 8005622:	d003      	beq.n	800562c <TIM_Base_SetConfig+0x20>
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800562a:	d108      	bne.n	800563e <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005632:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005634:	683b      	ldr	r3, [r7, #0]
 8005636:	685b      	ldr	r3, [r3, #4]
 8005638:	68fa      	ldr	r2, [r7, #12]
 800563a:	4313      	orrs	r3, r2
 800563c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	4a21      	ldr	r2, [pc, #132]	; (80056c8 <TIM_Base_SetConfig+0xbc>)
 8005642:	4293      	cmp	r3, r2
 8005644:	d00b      	beq.n	800565e <TIM_Base_SetConfig+0x52>
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800564c:	d007      	beq.n	800565e <TIM_Base_SetConfig+0x52>
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	4a1e      	ldr	r2, [pc, #120]	; (80056cc <TIM_Base_SetConfig+0xc0>)
 8005652:	4293      	cmp	r3, r2
 8005654:	d003      	beq.n	800565e <TIM_Base_SetConfig+0x52>
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	4a1d      	ldr	r2, [pc, #116]	; (80056d0 <TIM_Base_SetConfig+0xc4>)
 800565a:	4293      	cmp	r3, r2
 800565c:	d108      	bne.n	8005670 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005664:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005666:	683b      	ldr	r3, [r7, #0]
 8005668:	68db      	ldr	r3, [r3, #12]
 800566a:	68fa      	ldr	r2, [r7, #12]
 800566c:	4313      	orrs	r3, r2
 800566e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005676:	683b      	ldr	r3, [r7, #0]
 8005678:	695b      	ldr	r3, [r3, #20]
 800567a:	4313      	orrs	r3, r2
 800567c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	68fa      	ldr	r2, [r7, #12]
 8005682:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005684:	683b      	ldr	r3, [r7, #0]
 8005686:	689a      	ldr	r2, [r3, #8]
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800568c:	683b      	ldr	r3, [r7, #0]
 800568e:	681a      	ldr	r2, [r3, #0]
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	4a0c      	ldr	r2, [pc, #48]	; (80056c8 <TIM_Base_SetConfig+0xbc>)
 8005698:	4293      	cmp	r3, r2
 800569a:	d007      	beq.n	80056ac <TIM_Base_SetConfig+0xa0>
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	4a0b      	ldr	r2, [pc, #44]	; (80056cc <TIM_Base_SetConfig+0xc0>)
 80056a0:	4293      	cmp	r3, r2
 80056a2:	d003      	beq.n	80056ac <TIM_Base_SetConfig+0xa0>
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	4a0a      	ldr	r2, [pc, #40]	; (80056d0 <TIM_Base_SetConfig+0xc4>)
 80056a8:	4293      	cmp	r3, r2
 80056aa:	d103      	bne.n	80056b4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80056ac:	683b      	ldr	r3, [r7, #0]
 80056ae:	691a      	ldr	r2, [r3, #16]
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	2201      	movs	r2, #1
 80056b8:	615a      	str	r2, [r3, #20]
}
 80056ba:	bf00      	nop
 80056bc:	3714      	adds	r7, #20
 80056be:	46bd      	mov	sp, r7
 80056c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c4:	4770      	bx	lr
 80056c6:	bf00      	nop
 80056c8:	40012c00 	.word	0x40012c00
 80056cc:	40014000 	.word	0x40014000
 80056d0:	40014400 	.word	0x40014400

080056d4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80056d4:	b480      	push	{r7}
 80056d6:	b083      	sub	sp, #12
 80056d8:	af00      	add	r7, sp, #0
 80056da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80056dc:	bf00      	nop
 80056de:	370c      	adds	r7, #12
 80056e0:	46bd      	mov	sp, r7
 80056e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e6:	4770      	bx	lr

080056e8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80056e8:	b480      	push	{r7}
 80056ea:	b083      	sub	sp, #12
 80056ec:	af00      	add	r7, sp, #0
 80056ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80056f0:	bf00      	nop
 80056f2:	370c      	adds	r7, #12
 80056f4:	46bd      	mov	sp, r7
 80056f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056fa:	4770      	bx	lr

080056fc <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80056fc:	b480      	push	{r7}
 80056fe:	b083      	sub	sp, #12
 8005700:	af00      	add	r7, sp, #0
 8005702:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005704:	bf00      	nop
 8005706:	370c      	adds	r7, #12
 8005708:	46bd      	mov	sp, r7
 800570a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800570e:	4770      	bx	lr

08005710 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005710:	b580      	push	{r7, lr}
 8005712:	b082      	sub	sp, #8
 8005714:	af00      	add	r7, sp, #0
 8005716:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	2b00      	cmp	r3, #0
 800571c:	d101      	bne.n	8005722 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800571e:	2301      	movs	r3, #1
 8005720:	e040      	b.n	80057a4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005726:	2b00      	cmp	r3, #0
 8005728:	d106      	bne.n	8005738 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	2200      	movs	r2, #0
 800572e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005732:	6878      	ldr	r0, [r7, #4]
 8005734:	f7fd face 	bl	8002cd4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	2224      	movs	r2, #36	; 0x24
 800573c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	681a      	ldr	r2, [r3, #0]
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	f022 0201 	bic.w	r2, r2, #1
 800574c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800574e:	6878      	ldr	r0, [r7, #4]
 8005750:	f000 fdb8 	bl	80062c4 <UART_SetConfig>
 8005754:	4603      	mov	r3, r0
 8005756:	2b01      	cmp	r3, #1
 8005758:	d101      	bne.n	800575e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800575a:	2301      	movs	r3, #1
 800575c:	e022      	b.n	80057a4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005762:	2b00      	cmp	r3, #0
 8005764:	d002      	beq.n	800576c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005766:	6878      	ldr	r0, [r7, #4]
 8005768:	f000 ffd8 	bl	800671c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	685a      	ldr	r2, [r3, #4]
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800577a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	689a      	ldr	r2, [r3, #8]
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800578a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	681a      	ldr	r2, [r3, #0]
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	f042 0201 	orr.w	r2, r2, #1
 800579a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800579c:	6878      	ldr	r0, [r7, #4]
 800579e:	f001 f85f 	bl	8006860 <UART_CheckIdleState>
 80057a2:	4603      	mov	r3, r0
}
 80057a4:	4618      	mov	r0, r3
 80057a6:	3708      	adds	r7, #8
 80057a8:	46bd      	mov	sp, r7
 80057aa:	bd80      	pop	{r7, pc}

080057ac <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80057ac:	b580      	push	{r7, lr}
 80057ae:	b08a      	sub	sp, #40	; 0x28
 80057b0:	af02      	add	r7, sp, #8
 80057b2:	60f8      	str	r0, [r7, #12]
 80057b4:	60b9      	str	r1, [r7, #8]
 80057b6:	603b      	str	r3, [r7, #0]
 80057b8:	4613      	mov	r3, r2
 80057ba:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80057c0:	2b20      	cmp	r3, #32
 80057c2:	f040 8082 	bne.w	80058ca <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 80057c6:	68bb      	ldr	r3, [r7, #8]
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d002      	beq.n	80057d2 <HAL_UART_Transmit+0x26>
 80057cc:	88fb      	ldrh	r3, [r7, #6]
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d101      	bne.n	80057d6 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80057d2:	2301      	movs	r3, #1
 80057d4:	e07a      	b.n	80058cc <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80057dc:	2b01      	cmp	r3, #1
 80057de:	d101      	bne.n	80057e4 <HAL_UART_Transmit+0x38>
 80057e0:	2302      	movs	r3, #2
 80057e2:	e073      	b.n	80058cc <HAL_UART_Transmit+0x120>
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	2201      	movs	r2, #1
 80057e8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	2200      	movs	r2, #0
 80057f0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	2221      	movs	r2, #33	; 0x21
 80057f8:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80057fa:	f7fd fd3f 	bl	800327c <HAL_GetTick>
 80057fe:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	88fa      	ldrh	r2, [r7, #6]
 8005804:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	88fa      	ldrh	r2, [r7, #6]
 800580c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	689b      	ldr	r3, [r3, #8]
 8005814:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005818:	d108      	bne.n	800582c <HAL_UART_Transmit+0x80>
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	691b      	ldr	r3, [r3, #16]
 800581e:	2b00      	cmp	r3, #0
 8005820:	d104      	bne.n	800582c <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8005822:	2300      	movs	r3, #0
 8005824:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005826:	68bb      	ldr	r3, [r7, #8]
 8005828:	61bb      	str	r3, [r7, #24]
 800582a:	e003      	b.n	8005834 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 800582c:	68bb      	ldr	r3, [r7, #8]
 800582e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005830:	2300      	movs	r3, #0
 8005832:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	2200      	movs	r2, #0
 8005838:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 800583c:	e02d      	b.n	800589a <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800583e:	683b      	ldr	r3, [r7, #0]
 8005840:	9300      	str	r3, [sp, #0]
 8005842:	697b      	ldr	r3, [r7, #20]
 8005844:	2200      	movs	r2, #0
 8005846:	2180      	movs	r1, #128	; 0x80
 8005848:	68f8      	ldr	r0, [r7, #12]
 800584a:	f001 f852 	bl	80068f2 <UART_WaitOnFlagUntilTimeout>
 800584e:	4603      	mov	r3, r0
 8005850:	2b00      	cmp	r3, #0
 8005852:	d001      	beq.n	8005858 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8005854:	2303      	movs	r3, #3
 8005856:	e039      	b.n	80058cc <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8005858:	69fb      	ldr	r3, [r7, #28]
 800585a:	2b00      	cmp	r3, #0
 800585c:	d10b      	bne.n	8005876 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800585e:	69bb      	ldr	r3, [r7, #24]
 8005860:	881a      	ldrh	r2, [r3, #0]
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800586a:	b292      	uxth	r2, r2
 800586c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800586e:	69bb      	ldr	r3, [r7, #24]
 8005870:	3302      	adds	r3, #2
 8005872:	61bb      	str	r3, [r7, #24]
 8005874:	e008      	b.n	8005888 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005876:	69fb      	ldr	r3, [r7, #28]
 8005878:	781a      	ldrb	r2, [r3, #0]
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	b292      	uxth	r2, r2
 8005880:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005882:	69fb      	ldr	r3, [r7, #28]
 8005884:	3301      	adds	r3, #1
 8005886:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800588e:	b29b      	uxth	r3, r3
 8005890:	3b01      	subs	r3, #1
 8005892:	b29a      	uxth	r2, r3
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80058a0:	b29b      	uxth	r3, r3
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d1cb      	bne.n	800583e <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80058a6:	683b      	ldr	r3, [r7, #0]
 80058a8:	9300      	str	r3, [sp, #0]
 80058aa:	697b      	ldr	r3, [r7, #20]
 80058ac:	2200      	movs	r2, #0
 80058ae:	2140      	movs	r1, #64	; 0x40
 80058b0:	68f8      	ldr	r0, [r7, #12]
 80058b2:	f001 f81e 	bl	80068f2 <UART_WaitOnFlagUntilTimeout>
 80058b6:	4603      	mov	r3, r0
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d001      	beq.n	80058c0 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 80058bc:	2303      	movs	r3, #3
 80058be:	e005      	b.n	80058cc <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	2220      	movs	r2, #32
 80058c4:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80058c6:	2300      	movs	r3, #0
 80058c8:	e000      	b.n	80058cc <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 80058ca:	2302      	movs	r3, #2
  }
}
 80058cc:	4618      	mov	r0, r3
 80058ce:	3720      	adds	r7, #32
 80058d0:	46bd      	mov	sp, r7
 80058d2:	bd80      	pop	{r7, pc}

080058d4 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80058d4:	b580      	push	{r7, lr}
 80058d6:	b08a      	sub	sp, #40	; 0x28
 80058d8:	af02      	add	r7, sp, #8
 80058da:	60f8      	str	r0, [r7, #12]
 80058dc:	60b9      	str	r1, [r7, #8]
 80058de:	603b      	str	r3, [r7, #0]
 80058e0:	4613      	mov	r3, r2
 80058e2:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80058e8:	2b20      	cmp	r3, #32
 80058ea:	f040 80bf 	bne.w	8005a6c <HAL_UART_Receive+0x198>
  {
    if ((pData == NULL) || (Size == 0U))
 80058ee:	68bb      	ldr	r3, [r7, #8]
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d002      	beq.n	80058fa <HAL_UART_Receive+0x26>
 80058f4:	88fb      	ldrh	r3, [r7, #6]
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d101      	bne.n	80058fe <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 80058fa:	2301      	movs	r3, #1
 80058fc:	e0b7      	b.n	8005a6e <HAL_UART_Receive+0x19a>
    }

    __HAL_LOCK(huart);
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8005904:	2b01      	cmp	r3, #1
 8005906:	d101      	bne.n	800590c <HAL_UART_Receive+0x38>
 8005908:	2302      	movs	r3, #2
 800590a:	e0b0      	b.n	8005a6e <HAL_UART_Receive+0x19a>
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	2201      	movs	r2, #1
 8005910:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	2200      	movs	r2, #0
 8005918:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	2222      	movs	r2, #34	; 0x22
 8005920:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	2200      	movs	r2, #0
 8005926:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005928:	f7fd fca8 	bl	800327c <HAL_GetTick>
 800592c:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	88fa      	ldrh	r2, [r7, #6]
 8005932:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	88fa      	ldrh	r2, [r7, #6]
 800593a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	689b      	ldr	r3, [r3, #8]
 8005942:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005946:	d10e      	bne.n	8005966 <HAL_UART_Receive+0x92>
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	691b      	ldr	r3, [r3, #16]
 800594c:	2b00      	cmp	r3, #0
 800594e:	d105      	bne.n	800595c <HAL_UART_Receive+0x88>
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	f240 12ff 	movw	r2, #511	; 0x1ff
 8005956:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800595a:	e02d      	b.n	80059b8 <HAL_UART_Receive+0xe4>
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	22ff      	movs	r2, #255	; 0xff
 8005960:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005964:	e028      	b.n	80059b8 <HAL_UART_Receive+0xe4>
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	689b      	ldr	r3, [r3, #8]
 800596a:	2b00      	cmp	r3, #0
 800596c:	d10d      	bne.n	800598a <HAL_UART_Receive+0xb6>
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	691b      	ldr	r3, [r3, #16]
 8005972:	2b00      	cmp	r3, #0
 8005974:	d104      	bne.n	8005980 <HAL_UART_Receive+0xac>
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	22ff      	movs	r2, #255	; 0xff
 800597a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800597e:	e01b      	b.n	80059b8 <HAL_UART_Receive+0xe4>
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	227f      	movs	r2, #127	; 0x7f
 8005984:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005988:	e016      	b.n	80059b8 <HAL_UART_Receive+0xe4>
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	689b      	ldr	r3, [r3, #8]
 800598e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005992:	d10d      	bne.n	80059b0 <HAL_UART_Receive+0xdc>
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	691b      	ldr	r3, [r3, #16]
 8005998:	2b00      	cmp	r3, #0
 800599a:	d104      	bne.n	80059a6 <HAL_UART_Receive+0xd2>
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	227f      	movs	r2, #127	; 0x7f
 80059a0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80059a4:	e008      	b.n	80059b8 <HAL_UART_Receive+0xe4>
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	223f      	movs	r2, #63	; 0x3f
 80059aa:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80059ae:	e003      	b.n	80059b8 <HAL_UART_Receive+0xe4>
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	2200      	movs	r2, #0
 80059b4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80059be:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	689b      	ldr	r3, [r3, #8]
 80059c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80059c8:	d108      	bne.n	80059dc <HAL_UART_Receive+0x108>
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	691b      	ldr	r3, [r3, #16]
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d104      	bne.n	80059dc <HAL_UART_Receive+0x108>
    {
      pdata8bits  = NULL;
 80059d2:	2300      	movs	r3, #0
 80059d4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80059d6:	68bb      	ldr	r3, [r7, #8]
 80059d8:	61bb      	str	r3, [r7, #24]
 80059da:	e003      	b.n	80059e4 <HAL_UART_Receive+0x110>
    }
    else
    {
      pdata8bits  = pData;
 80059dc:	68bb      	ldr	r3, [r7, #8]
 80059de:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80059e0:	2300      	movs	r3, #0
 80059e2:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	2200      	movs	r2, #0
 80059e8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 80059ec:	e033      	b.n	8005a56 <HAL_UART_Receive+0x182>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80059ee:	683b      	ldr	r3, [r7, #0]
 80059f0:	9300      	str	r3, [sp, #0]
 80059f2:	697b      	ldr	r3, [r7, #20]
 80059f4:	2200      	movs	r2, #0
 80059f6:	2120      	movs	r1, #32
 80059f8:	68f8      	ldr	r0, [r7, #12]
 80059fa:	f000 ff7a 	bl	80068f2 <UART_WaitOnFlagUntilTimeout>
 80059fe:	4603      	mov	r3, r0
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d001      	beq.n	8005a08 <HAL_UART_Receive+0x134>
      {
        return HAL_TIMEOUT;
 8005a04:	2303      	movs	r3, #3
 8005a06:	e032      	b.n	8005a6e <HAL_UART_Receive+0x19a>
      }
      if (pdata8bits == NULL)
 8005a08:	69fb      	ldr	r3, [r7, #28]
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d10c      	bne.n	8005a28 <HAL_UART_Receive+0x154>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8005a14:	b29a      	uxth	r2, r3
 8005a16:	8a7b      	ldrh	r3, [r7, #18]
 8005a18:	4013      	ands	r3, r2
 8005a1a:	b29a      	uxth	r2, r3
 8005a1c:	69bb      	ldr	r3, [r7, #24]
 8005a1e:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8005a20:	69bb      	ldr	r3, [r7, #24]
 8005a22:	3302      	adds	r3, #2
 8005a24:	61bb      	str	r3, [r7, #24]
 8005a26:	e00d      	b.n	8005a44 <HAL_UART_Receive+0x170>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8005a2e:	b29b      	uxth	r3, r3
 8005a30:	b2da      	uxtb	r2, r3
 8005a32:	8a7b      	ldrh	r3, [r7, #18]
 8005a34:	b2db      	uxtb	r3, r3
 8005a36:	4013      	ands	r3, r2
 8005a38:	b2da      	uxtb	r2, r3
 8005a3a:	69fb      	ldr	r3, [r7, #28]
 8005a3c:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8005a3e:	69fb      	ldr	r3, [r7, #28]
 8005a40:	3301      	adds	r3, #1
 8005a42:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005a4a:	b29b      	uxth	r3, r3
 8005a4c:	3b01      	subs	r3, #1
 8005a4e:	b29a      	uxth	r2, r3
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005a5c:	b29b      	uxth	r3, r3
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d1c5      	bne.n	80059ee <HAL_UART_Receive+0x11a>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	2220      	movs	r2, #32
 8005a66:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8005a68:	2300      	movs	r3, #0
 8005a6a:	e000      	b.n	8005a6e <HAL_UART_Receive+0x19a>
  }
  else
  {
    return HAL_BUSY;
 8005a6c:	2302      	movs	r3, #2
  }
}
 8005a6e:	4618      	mov	r0, r3
 8005a70:	3720      	adds	r7, #32
 8005a72:	46bd      	mov	sp, r7
 8005a74:	bd80      	pop	{r7, pc}
	...

08005a78 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8005a78:	b480      	push	{r7}
 8005a7a:	b08b      	sub	sp, #44	; 0x2c
 8005a7c:	af00      	add	r7, sp, #0
 8005a7e:	60f8      	str	r0, [r7, #12]
 8005a80:	60b9      	str	r1, [r7, #8]
 8005a82:	4613      	mov	r3, r2
 8005a84:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005a8a:	2b20      	cmp	r3, #32
 8005a8c:	d156      	bne.n	8005b3c <HAL_UART_Transmit_IT+0xc4>
  {
    if ((pData == NULL) || (Size == 0U))
 8005a8e:	68bb      	ldr	r3, [r7, #8]
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d002      	beq.n	8005a9a <HAL_UART_Transmit_IT+0x22>
 8005a94:	88fb      	ldrh	r3, [r7, #6]
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d101      	bne.n	8005a9e <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 8005a9a:	2301      	movs	r3, #1
 8005a9c:	e04f      	b.n	8005b3e <HAL_UART_Transmit_IT+0xc6>
    }

    __HAL_LOCK(huart);
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8005aa4:	2b01      	cmp	r3, #1
 8005aa6:	d101      	bne.n	8005aac <HAL_UART_Transmit_IT+0x34>
 8005aa8:	2302      	movs	r3, #2
 8005aaa:	e048      	b.n	8005b3e <HAL_UART_Transmit_IT+0xc6>
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	2201      	movs	r2, #1
 8005ab0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->pTxBuffPtr  = pData;
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	68ba      	ldr	r2, [r7, #8]
 8005ab8:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	88fa      	ldrh	r2, [r7, #6]
 8005abe:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	88fa      	ldrh	r2, [r7, #6]
 8005ac6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	2200      	movs	r2, #0
 8005ace:	669a      	str	r2, [r3, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	2200      	movs	r2, #0
 8005ad4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	2221      	movs	r2, #33	; 0x21
 8005adc:	679a      	str	r2, [r3, #120]	; 0x78
      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
    }
#else
    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	689b      	ldr	r3, [r3, #8]
 8005ae2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ae6:	d107      	bne.n	8005af8 <HAL_UART_Transmit_IT+0x80>
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	691b      	ldr	r3, [r3, #16]
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d103      	bne.n	8005af8 <HAL_UART_Transmit_IT+0x80>
    {
      huart->TxISR = UART_TxISR_16BIT;
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	4a16      	ldr	r2, [pc, #88]	; (8005b4c <HAL_UART_Transmit_IT+0xd4>)
 8005af4:	669a      	str	r2, [r3, #104]	; 0x68
 8005af6:	e002      	b.n	8005afe <HAL_UART_Transmit_IT+0x86>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	4a15      	ldr	r2, [pc, #84]	; (8005b50 <HAL_UART_Transmit_IT+0xd8>)
 8005afc:	669a      	str	r2, [r3, #104]	; 0x68
    }

    __HAL_UNLOCK(huart);
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	2200      	movs	r2, #0
 8005b02:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b0c:	697b      	ldr	r3, [r7, #20]
 8005b0e:	e853 3f00 	ldrex	r3, [r3]
 8005b12:	613b      	str	r3, [r7, #16]
   return(result);
 8005b14:	693b      	ldr	r3, [r7, #16]
 8005b16:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005b1a:	627b      	str	r3, [r7, #36]	; 0x24
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	461a      	mov	r2, r3
 8005b22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b24:	623b      	str	r3, [r7, #32]
 8005b26:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b28:	69f9      	ldr	r1, [r7, #28]
 8005b2a:	6a3a      	ldr	r2, [r7, #32]
 8005b2c:	e841 2300 	strex	r3, r2, [r1]
 8005b30:	61bb      	str	r3, [r7, #24]
   return(result);
 8005b32:	69bb      	ldr	r3, [r7, #24]
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d1e6      	bne.n	8005b06 <HAL_UART_Transmit_IT+0x8e>
#endif /* USART_CR1_FIFOEN */

    return HAL_OK;
 8005b38:	2300      	movs	r3, #0
 8005b3a:	e000      	b.n	8005b3e <HAL_UART_Transmit_IT+0xc6>
  }
  else
  {
    return HAL_BUSY;
 8005b3c:	2302      	movs	r3, #2
  }
}
 8005b3e:	4618      	mov	r0, r3
 8005b40:	372c      	adds	r7, #44	; 0x2c
 8005b42:	46bd      	mov	sp, r7
 8005b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b48:	4770      	bx	lr
 8005b4a:	bf00      	nop
 8005b4c:	0800712b 	.word	0x0800712b
 8005b50:	08007073 	.word	0x08007073

08005b54 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005b54:	b580      	push	{r7, lr}
 8005b56:	b08a      	sub	sp, #40	; 0x28
 8005b58:	af00      	add	r7, sp, #0
 8005b5a:	60f8      	str	r0, [r7, #12]
 8005b5c:	60b9      	str	r1, [r7, #8]
 8005b5e:	4613      	mov	r3, r2
 8005b60:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005b66:	2b20      	cmp	r3, #32
 8005b68:	d142      	bne.n	8005bf0 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005b6a:	68bb      	ldr	r3, [r7, #8]
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d002      	beq.n	8005b76 <HAL_UART_Receive_IT+0x22>
 8005b70:	88fb      	ldrh	r3, [r7, #6]
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d101      	bne.n	8005b7a <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 8005b76:	2301      	movs	r3, #1
 8005b78:	e03b      	b.n	8005bf2 <HAL_UART_Receive_IT+0x9e>
    }

    __HAL_LOCK(huart);
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8005b80:	2b01      	cmp	r3, #1
 8005b82:	d101      	bne.n	8005b88 <HAL_UART_Receive_IT+0x34>
 8005b84:	2302      	movs	r3, #2
 8005b86:	e034      	b.n	8005bf2 <HAL_UART_Receive_IT+0x9e>
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	2201      	movs	r2, #1
 8005b8c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	2200      	movs	r2, #0
 8005b94:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	4a18      	ldr	r2, [pc, #96]	; (8005bfc <HAL_UART_Receive_IT+0xa8>)
 8005b9c:	4293      	cmp	r3, r2
 8005b9e:	d01f      	beq.n	8005be0 <HAL_UART_Receive_IT+0x8c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	685b      	ldr	r3, [r3, #4]
 8005ba6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d018      	beq.n	8005be0 <HAL_UART_Receive_IT+0x8c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bb4:	697b      	ldr	r3, [r7, #20]
 8005bb6:	e853 3f00 	ldrex	r3, [r3]
 8005bba:	613b      	str	r3, [r7, #16]
   return(result);
 8005bbc:	693b      	ldr	r3, [r7, #16]
 8005bbe:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005bc2:	627b      	str	r3, [r7, #36]	; 0x24
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	461a      	mov	r2, r3
 8005bca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bcc:	623b      	str	r3, [r7, #32]
 8005bce:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bd0:	69f9      	ldr	r1, [r7, #28]
 8005bd2:	6a3a      	ldr	r2, [r7, #32]
 8005bd4:	e841 2300 	strex	r3, r2, [r1]
 8005bd8:	61bb      	str	r3, [r7, #24]
   return(result);
 8005bda:	69bb      	ldr	r3, [r7, #24]
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d1e6      	bne.n	8005bae <HAL_UART_Receive_IT+0x5a>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005be0:	88fb      	ldrh	r3, [r7, #6]
 8005be2:	461a      	mov	r2, r3
 8005be4:	68b9      	ldr	r1, [r7, #8]
 8005be6:	68f8      	ldr	r0, [r7, #12]
 8005be8:	f000 ff48 	bl	8006a7c <UART_Start_Receive_IT>
 8005bec:	4603      	mov	r3, r0
 8005bee:	e000      	b.n	8005bf2 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8005bf0:	2302      	movs	r3, #2
  }
}
 8005bf2:	4618      	mov	r0, r3
 8005bf4:	3728      	adds	r7, #40	; 0x28
 8005bf6:	46bd      	mov	sp, r7
 8005bf8:	bd80      	pop	{r7, pc}
 8005bfa:	bf00      	nop
 8005bfc:	40008000 	.word	0x40008000

08005c00 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005c00:	b580      	push	{r7, lr}
 8005c02:	b08a      	sub	sp, #40	; 0x28
 8005c04:	af00      	add	r7, sp, #0
 8005c06:	60f8      	str	r0, [r7, #12]
 8005c08:	60b9      	str	r1, [r7, #8]
 8005c0a:	4613      	mov	r3, r2
 8005c0c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005c12:	2b20      	cmp	r3, #32
 8005c14:	d142      	bne.n	8005c9c <HAL_UART_Receive_DMA+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005c16:	68bb      	ldr	r3, [r7, #8]
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d002      	beq.n	8005c22 <HAL_UART_Receive_DMA+0x22>
 8005c1c:	88fb      	ldrh	r3, [r7, #6]
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d101      	bne.n	8005c26 <HAL_UART_Receive_DMA+0x26>
    {
      return HAL_ERROR;
 8005c22:	2301      	movs	r3, #1
 8005c24:	e03b      	b.n	8005c9e <HAL_UART_Receive_DMA+0x9e>
    }

    __HAL_LOCK(huart);
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8005c2c:	2b01      	cmp	r3, #1
 8005c2e:	d101      	bne.n	8005c34 <HAL_UART_Receive_DMA+0x34>
 8005c30:	2302      	movs	r3, #2
 8005c32:	e034      	b.n	8005c9e <HAL_UART_Receive_DMA+0x9e>
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	2201      	movs	r2, #1
 8005c38:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	2200      	movs	r2, #0
 8005c40:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	4a18      	ldr	r2, [pc, #96]	; (8005ca8 <HAL_UART_Receive_DMA+0xa8>)
 8005c48:	4293      	cmp	r3, r2
 8005c4a:	d01f      	beq.n	8005c8c <HAL_UART_Receive_DMA+0x8c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	685b      	ldr	r3, [r3, #4]
 8005c52:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d018      	beq.n	8005c8c <HAL_UART_Receive_DMA+0x8c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c60:	697b      	ldr	r3, [r7, #20]
 8005c62:	e853 3f00 	ldrex	r3, [r3]
 8005c66:	613b      	str	r3, [r7, #16]
   return(result);
 8005c68:	693b      	ldr	r3, [r7, #16]
 8005c6a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005c6e:	627b      	str	r3, [r7, #36]	; 0x24
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	461a      	mov	r2, r3
 8005c76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c78:	623b      	str	r3, [r7, #32]
 8005c7a:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c7c:	69f9      	ldr	r1, [r7, #28]
 8005c7e:	6a3a      	ldr	r2, [r7, #32]
 8005c80:	e841 2300 	strex	r3, r2, [r1]
 8005c84:	61bb      	str	r3, [r7, #24]
   return(result);
 8005c86:	69bb      	ldr	r3, [r7, #24]
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d1e6      	bne.n	8005c5a <HAL_UART_Receive_DMA+0x5a>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8005c8c:	88fb      	ldrh	r3, [r7, #6]
 8005c8e:	461a      	mov	r2, r3
 8005c90:	68b9      	ldr	r1, [r7, #8]
 8005c92:	68f8      	ldr	r0, [r7, #12]
 8005c94:	f000 ffbc 	bl	8006c10 <UART_Start_Receive_DMA>
 8005c98:	4603      	mov	r3, r0
 8005c9a:	e000      	b.n	8005c9e <HAL_UART_Receive_DMA+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8005c9c:	2302      	movs	r3, #2
  }
}
 8005c9e:	4618      	mov	r0, r3
 8005ca0:	3728      	adds	r7, #40	; 0x28
 8005ca2:	46bd      	mov	sp, r7
 8005ca4:	bd80      	pop	{r7, pc}
 8005ca6:	bf00      	nop
 8005ca8:	40008000 	.word	0x40008000

08005cac <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005cac:	b580      	push	{r7, lr}
 8005cae:	b0ba      	sub	sp, #232	; 0xe8
 8005cb0:	af00      	add	r7, sp, #0
 8005cb2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	69db      	ldr	r3, [r3, #28]
 8005cba:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	689b      	ldr	r3, [r3, #8]
 8005cce:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005cd2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8005cd6:	f640 030f 	movw	r3, #2063	; 0x80f
 8005cda:	4013      	ands	r3, r2
 8005cdc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8005ce0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d115      	bne.n	8005d14 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8005ce8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005cec:	f003 0320 	and.w	r3, r3, #32
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d00f      	beq.n	8005d14 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005cf4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005cf8:	f003 0320 	and.w	r3, r3, #32
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d009      	beq.n	8005d14 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	f000 82a6 	beq.w	8006256 <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005d0e:	6878      	ldr	r0, [r7, #4]
 8005d10:	4798      	blx	r3
      }
      return;
 8005d12:	e2a0      	b.n	8006256 <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8005d14:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	f000 8117 	beq.w	8005f4c <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8005d1e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005d22:	f003 0301 	and.w	r3, r3, #1
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d106      	bne.n	8005d38 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8005d2a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8005d2e:	4b85      	ldr	r3, [pc, #532]	; (8005f44 <HAL_UART_IRQHandler+0x298>)
 8005d30:	4013      	ands	r3, r2
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	f000 810a 	beq.w	8005f4c <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005d38:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005d3c:	f003 0301 	and.w	r3, r3, #1
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d011      	beq.n	8005d68 <HAL_UART_IRQHandler+0xbc>
 8005d44:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005d48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d00b      	beq.n	8005d68 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	2201      	movs	r2, #1
 8005d56:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005d5e:	f043 0201 	orr.w	r2, r3, #1
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005d68:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005d6c:	f003 0302 	and.w	r3, r3, #2
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d011      	beq.n	8005d98 <HAL_UART_IRQHandler+0xec>
 8005d74:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005d78:	f003 0301 	and.w	r3, r3, #1
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d00b      	beq.n	8005d98 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	2202      	movs	r2, #2
 8005d86:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005d8e:	f043 0204 	orr.w	r2, r3, #4
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005d98:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005d9c:	f003 0304 	and.w	r3, r3, #4
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d011      	beq.n	8005dc8 <HAL_UART_IRQHandler+0x11c>
 8005da4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005da8:	f003 0301 	and.w	r3, r3, #1
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d00b      	beq.n	8005dc8 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	2204      	movs	r2, #4
 8005db6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005dbe:	f043 0202 	orr.w	r2, r3, #2
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005dc8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005dcc:	f003 0308 	and.w	r3, r3, #8
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d017      	beq.n	8005e04 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005dd4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005dd8:	f003 0320 	and.w	r3, r3, #32
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d105      	bne.n	8005dec <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8005de0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005de4:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d00b      	beq.n	8005e04 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	2208      	movs	r2, #8
 8005df2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005dfa:	f043 0208 	orr.w	r2, r3, #8
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005e04:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e08:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d012      	beq.n	8005e36 <HAL_UART_IRQHandler+0x18a>
 8005e10:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005e14:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d00c      	beq.n	8005e36 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005e24:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005e2c:	f043 0220 	orr.w	r2, r3, #32
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	f000 820c 	beq.w	800625a <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8005e42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e46:	f003 0320 	and.w	r3, r3, #32
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d00d      	beq.n	8005e6a <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005e4e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005e52:	f003 0320 	and.w	r3, r3, #32
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d007      	beq.n	8005e6a <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d003      	beq.n	8005e6a <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005e66:	6878      	ldr	r0, [r7, #4]
 8005e68:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005e70:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	689b      	ldr	r3, [r3, #8]
 8005e7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e7e:	2b40      	cmp	r3, #64	; 0x40
 8005e80:	d005      	beq.n	8005e8e <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005e82:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005e86:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d04f      	beq.n	8005f2e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005e8e:	6878      	ldr	r0, [r7, #4]
 8005e90:	f000 ff8a 	bl	8006da8 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	689b      	ldr	r3, [r3, #8]
 8005e9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e9e:	2b40      	cmp	r3, #64	; 0x40
 8005ea0:	d141      	bne.n	8005f26 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	3308      	adds	r3, #8
 8005ea8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005eac:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005eb0:	e853 3f00 	ldrex	r3, [r3]
 8005eb4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005eb8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005ebc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005ec0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	3308      	adds	r3, #8
 8005eca:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005ece:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005ed2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ed6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005eda:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005ede:	e841 2300 	strex	r3, r2, [r1]
 8005ee2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005ee6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d1d9      	bne.n	8005ea2 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d013      	beq.n	8005f1e <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005efa:	4a13      	ldr	r2, [pc, #76]	; (8005f48 <HAL_UART_IRQHandler+0x29c>)
 8005efc:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f02:	4618      	mov	r0, r3
 8005f04:	f7fd fbfe 	bl	8003704 <HAL_DMA_Abort_IT>
 8005f08:	4603      	mov	r3, r0
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d017      	beq.n	8005f3e <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f14:	687a      	ldr	r2, [r7, #4]
 8005f16:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8005f18:	4610      	mov	r0, r2
 8005f1a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f1c:	e00f      	b.n	8005f3e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005f1e:	6878      	ldr	r0, [r7, #4]
 8005f20:	f000 f9ba 	bl	8006298 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f24:	e00b      	b.n	8005f3e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005f26:	6878      	ldr	r0, [r7, #4]
 8005f28:	f000 f9b6 	bl	8006298 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f2c:	e007      	b.n	8005f3e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005f2e:	6878      	ldr	r0, [r7, #4]
 8005f30:	f000 f9b2 	bl	8006298 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	2200      	movs	r2, #0
 8005f38:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8005f3c:	e18d      	b.n	800625a <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f3e:	bf00      	nop
    return;
 8005f40:	e18b      	b.n	800625a <HAL_UART_IRQHandler+0x5ae>
 8005f42:	bf00      	nop
 8005f44:	04000120 	.word	0x04000120
 8005f48:	08007047 	.word	0x08007047

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005f50:	2b01      	cmp	r3, #1
 8005f52:	f040 8146 	bne.w	80061e2 <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005f56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005f5a:	f003 0310 	and.w	r3, r3, #16
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	f000 813f 	beq.w	80061e2 <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005f64:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005f68:	f003 0310 	and.w	r3, r3, #16
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	f000 8138 	beq.w	80061e2 <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	2210      	movs	r2, #16
 8005f78:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	689b      	ldr	r3, [r3, #8]
 8005f80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f84:	2b40      	cmp	r3, #64	; 0x40
 8005f86:	f040 80b4 	bne.w	80060f2 <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	685b      	ldr	r3, [r3, #4]
 8005f92:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005f96:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	f000 815f 	beq.w	800625e <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005fa6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005faa:	429a      	cmp	r2, r3
 8005fac:	f080 8157 	bcs.w	800625e <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005fb6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	f003 0320 	and.w	r3, r3, #32
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	f040 8085 	bne.w	80060d6 <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fd4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005fd8:	e853 3f00 	ldrex	r3, [r3]
 8005fdc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005fe0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005fe4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005fe8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	461a      	mov	r2, r3
 8005ff2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005ff6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005ffa:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ffe:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006002:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006006:	e841 2300 	strex	r3, r2, [r1]
 800600a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800600e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006012:	2b00      	cmp	r3, #0
 8006014:	d1da      	bne.n	8005fcc <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	3308      	adds	r3, #8
 800601c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800601e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006020:	e853 3f00 	ldrex	r3, [r3]
 8006024:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006026:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006028:	f023 0301 	bic.w	r3, r3, #1
 800602c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	3308      	adds	r3, #8
 8006036:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800603a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800603e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006040:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006042:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006046:	e841 2300 	strex	r3, r2, [r1]
 800604a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800604c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800604e:	2b00      	cmp	r3, #0
 8006050:	d1e1      	bne.n	8006016 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	3308      	adds	r3, #8
 8006058:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800605a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800605c:	e853 3f00 	ldrex	r3, [r3]
 8006060:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006062:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006064:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006068:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	3308      	adds	r3, #8
 8006072:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006076:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006078:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800607a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800607c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800607e:	e841 2300 	strex	r3, r2, [r1]
 8006082:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006084:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006086:	2b00      	cmp	r3, #0
 8006088:	d1e3      	bne.n	8006052 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	2220      	movs	r2, #32
 800608e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	2200      	movs	r2, #0
 8006094:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800609c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800609e:	e853 3f00 	ldrex	r3, [r3]
 80060a2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80060a4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80060a6:	f023 0310 	bic.w	r3, r3, #16
 80060aa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	461a      	mov	r2, r3
 80060b4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80060b8:	65bb      	str	r3, [r7, #88]	; 0x58
 80060ba:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060bc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80060be:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80060c0:	e841 2300 	strex	r3, r2, [r1]
 80060c4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80060c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d1e4      	bne.n	8006096 <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060d0:	4618      	mov	r0, r3
 80060d2:	f7fd fad9 	bl	8003688 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80060e2:	b29b      	uxth	r3, r3
 80060e4:	1ad3      	subs	r3, r2, r3
 80060e6:	b29b      	uxth	r3, r3
 80060e8:	4619      	mov	r1, r3
 80060ea:	6878      	ldr	r0, [r7, #4]
 80060ec:	f000 f8de 	bl	80062ac <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80060f0:	e0b5      	b.n	800625e <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80060fe:	b29b      	uxth	r3, r3
 8006100:	1ad3      	subs	r3, r2, r3
 8006102:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800610c:	b29b      	uxth	r3, r3
 800610e:	2b00      	cmp	r3, #0
 8006110:	f000 80a7 	beq.w	8006262 <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 8006114:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006118:	2b00      	cmp	r3, #0
 800611a:	f000 80a2 	beq.w	8006262 <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006124:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006126:	e853 3f00 	ldrex	r3, [r3]
 800612a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800612c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800612e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006132:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	461a      	mov	r2, r3
 800613c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006140:	647b      	str	r3, [r7, #68]	; 0x44
 8006142:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006144:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006146:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006148:	e841 2300 	strex	r3, r2, [r1]
 800614c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800614e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006150:	2b00      	cmp	r3, #0
 8006152:	d1e4      	bne.n	800611e <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	3308      	adds	r3, #8
 800615a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800615c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800615e:	e853 3f00 	ldrex	r3, [r3]
 8006162:	623b      	str	r3, [r7, #32]
   return(result);
 8006164:	6a3b      	ldr	r3, [r7, #32]
 8006166:	f023 0301 	bic.w	r3, r3, #1
 800616a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	3308      	adds	r3, #8
 8006174:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006178:	633a      	str	r2, [r7, #48]	; 0x30
 800617a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800617c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800617e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006180:	e841 2300 	strex	r3, r2, [r1]
 8006184:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006186:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006188:	2b00      	cmp	r3, #0
 800618a:	d1e3      	bne.n	8006154 <HAL_UART_IRQHandler+0x4a8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	2220      	movs	r2, #32
 8006190:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	2200      	movs	r2, #0
 8006196:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	2200      	movs	r2, #0
 800619c:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061a4:	693b      	ldr	r3, [r7, #16]
 80061a6:	e853 3f00 	ldrex	r3, [r3]
 80061aa:	60fb      	str	r3, [r7, #12]
   return(result);
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	f023 0310 	bic.w	r3, r3, #16
 80061b2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	461a      	mov	r2, r3
 80061bc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80061c0:	61fb      	str	r3, [r7, #28]
 80061c2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061c4:	69b9      	ldr	r1, [r7, #24]
 80061c6:	69fa      	ldr	r2, [r7, #28]
 80061c8:	e841 2300 	strex	r3, r2, [r1]
 80061cc:	617b      	str	r3, [r7, #20]
   return(result);
 80061ce:	697b      	ldr	r3, [r7, #20]
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d1e4      	bne.n	800619e <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80061d4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80061d8:	4619      	mov	r1, r3
 80061da:	6878      	ldr	r0, [r7, #4]
 80061dc:	f000 f866 	bl	80062ac <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80061e0:	e03f      	b.n	8006262 <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80061e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80061e6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d00e      	beq.n	800620c <HAL_UART_IRQHandler+0x560>
 80061ee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80061f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d008      	beq.n	800620c <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8006202:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006204:	6878      	ldr	r0, [r7, #4]
 8006206:	f001 f97a 	bl	80074fe <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800620a:	e02d      	b.n	8006268 <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 800620c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006210:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006214:	2b00      	cmp	r3, #0
 8006216:	d00e      	beq.n	8006236 <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8006218:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800621c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006220:	2b00      	cmp	r3, #0
 8006222:	d008      	beq.n	8006236 <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006228:	2b00      	cmp	r3, #0
 800622a:	d01c      	beq.n	8006266 <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006230:	6878      	ldr	r0, [r7, #4]
 8006232:	4798      	blx	r3
    }
    return;
 8006234:	e017      	b.n	8006266 <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006236:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800623a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800623e:	2b00      	cmp	r3, #0
 8006240:	d012      	beq.n	8006268 <HAL_UART_IRQHandler+0x5bc>
 8006242:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006246:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800624a:	2b00      	cmp	r3, #0
 800624c:	d00c      	beq.n	8006268 <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 800624e:	6878      	ldr	r0, [r7, #4]
 8006250:	f000 ffcb 	bl	80071ea <UART_EndTransmit_IT>
    return;
 8006254:	e008      	b.n	8006268 <HAL_UART_IRQHandler+0x5bc>
      return;
 8006256:	bf00      	nop
 8006258:	e006      	b.n	8006268 <HAL_UART_IRQHandler+0x5bc>
    return;
 800625a:	bf00      	nop
 800625c:	e004      	b.n	8006268 <HAL_UART_IRQHandler+0x5bc>
      return;
 800625e:	bf00      	nop
 8006260:	e002      	b.n	8006268 <HAL_UART_IRQHandler+0x5bc>
      return;
 8006262:	bf00      	nop
 8006264:	e000      	b.n	8006268 <HAL_UART_IRQHandler+0x5bc>
    return;
 8006266:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8006268:	37e8      	adds	r7, #232	; 0xe8
 800626a:	46bd      	mov	sp, r7
 800626c:	bd80      	pop	{r7, pc}
 800626e:	bf00      	nop

08006270 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006270:	b480      	push	{r7}
 8006272:	b083      	sub	sp, #12
 8006274:	af00      	add	r7, sp, #0
 8006276:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006278:	bf00      	nop
 800627a:	370c      	adds	r7, #12
 800627c:	46bd      	mov	sp, r7
 800627e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006282:	4770      	bx	lr

08006284 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006284:	b480      	push	{r7}
 8006286:	b083      	sub	sp, #12
 8006288:	af00      	add	r7, sp, #0
 800628a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800628c:	bf00      	nop
 800628e:	370c      	adds	r7, #12
 8006290:	46bd      	mov	sp, r7
 8006292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006296:	4770      	bx	lr

08006298 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006298:	b480      	push	{r7}
 800629a:	b083      	sub	sp, #12
 800629c:	af00      	add	r7, sp, #0
 800629e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80062a0:	bf00      	nop
 80062a2:	370c      	adds	r7, #12
 80062a4:	46bd      	mov	sp, r7
 80062a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062aa:	4770      	bx	lr

080062ac <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80062ac:	b480      	push	{r7}
 80062ae:	b083      	sub	sp, #12
 80062b0:	af00      	add	r7, sp, #0
 80062b2:	6078      	str	r0, [r7, #4]
 80062b4:	460b      	mov	r3, r1
 80062b6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80062b8:	bf00      	nop
 80062ba:	370c      	adds	r7, #12
 80062bc:	46bd      	mov	sp, r7
 80062be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c2:	4770      	bx	lr

080062c4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80062c4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80062c8:	b08a      	sub	sp, #40	; 0x28
 80062ca:	af00      	add	r7, sp, #0
 80062cc:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80062ce:	2300      	movs	r3, #0
 80062d0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	689a      	ldr	r2, [r3, #8]
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	691b      	ldr	r3, [r3, #16]
 80062dc:	431a      	orrs	r2, r3
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	695b      	ldr	r3, [r3, #20]
 80062e2:	431a      	orrs	r2, r3
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	69db      	ldr	r3, [r3, #28]
 80062e8:	4313      	orrs	r3, r2
 80062ea:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	681a      	ldr	r2, [r3, #0]
 80062f2:	4bb4      	ldr	r3, [pc, #720]	; (80065c4 <UART_SetConfig+0x300>)
 80062f4:	4013      	ands	r3, r2
 80062f6:	68fa      	ldr	r2, [r7, #12]
 80062f8:	6812      	ldr	r2, [r2, #0]
 80062fa:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80062fc:	430b      	orrs	r3, r1
 80062fe:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	685b      	ldr	r3, [r3, #4]
 8006306:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	68da      	ldr	r2, [r3, #12]
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	430a      	orrs	r2, r1
 8006314:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	699b      	ldr	r3, [r3, #24]
 800631a:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	4aa9      	ldr	r2, [pc, #676]	; (80065c8 <UART_SetConfig+0x304>)
 8006322:	4293      	cmp	r3, r2
 8006324:	d004      	beq.n	8006330 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	6a1b      	ldr	r3, [r3, #32]
 800632a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800632c:	4313      	orrs	r3, r2
 800632e:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	689b      	ldr	r3, [r3, #8]
 8006336:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006340:	430a      	orrs	r2, r1
 8006342:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	4aa0      	ldr	r2, [pc, #640]	; (80065cc <UART_SetConfig+0x308>)
 800634a:	4293      	cmp	r3, r2
 800634c:	d126      	bne.n	800639c <UART_SetConfig+0xd8>
 800634e:	4ba0      	ldr	r3, [pc, #640]	; (80065d0 <UART_SetConfig+0x30c>)
 8006350:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006354:	f003 0303 	and.w	r3, r3, #3
 8006358:	2b03      	cmp	r3, #3
 800635a:	d81b      	bhi.n	8006394 <UART_SetConfig+0xd0>
 800635c:	a201      	add	r2, pc, #4	; (adr r2, 8006364 <UART_SetConfig+0xa0>)
 800635e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006362:	bf00      	nop
 8006364:	08006375 	.word	0x08006375
 8006368:	08006385 	.word	0x08006385
 800636c:	0800637d 	.word	0x0800637d
 8006370:	0800638d 	.word	0x0800638d
 8006374:	2301      	movs	r3, #1
 8006376:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800637a:	e080      	b.n	800647e <UART_SetConfig+0x1ba>
 800637c:	2302      	movs	r3, #2
 800637e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006382:	e07c      	b.n	800647e <UART_SetConfig+0x1ba>
 8006384:	2304      	movs	r3, #4
 8006386:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800638a:	e078      	b.n	800647e <UART_SetConfig+0x1ba>
 800638c:	2308      	movs	r3, #8
 800638e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006392:	e074      	b.n	800647e <UART_SetConfig+0x1ba>
 8006394:	2310      	movs	r3, #16
 8006396:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800639a:	e070      	b.n	800647e <UART_SetConfig+0x1ba>
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	4a8c      	ldr	r2, [pc, #560]	; (80065d4 <UART_SetConfig+0x310>)
 80063a2:	4293      	cmp	r3, r2
 80063a4:	d138      	bne.n	8006418 <UART_SetConfig+0x154>
 80063a6:	4b8a      	ldr	r3, [pc, #552]	; (80065d0 <UART_SetConfig+0x30c>)
 80063a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80063ac:	f003 030c 	and.w	r3, r3, #12
 80063b0:	2b0c      	cmp	r3, #12
 80063b2:	d82d      	bhi.n	8006410 <UART_SetConfig+0x14c>
 80063b4:	a201      	add	r2, pc, #4	; (adr r2, 80063bc <UART_SetConfig+0xf8>)
 80063b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063ba:	bf00      	nop
 80063bc:	080063f1 	.word	0x080063f1
 80063c0:	08006411 	.word	0x08006411
 80063c4:	08006411 	.word	0x08006411
 80063c8:	08006411 	.word	0x08006411
 80063cc:	08006401 	.word	0x08006401
 80063d0:	08006411 	.word	0x08006411
 80063d4:	08006411 	.word	0x08006411
 80063d8:	08006411 	.word	0x08006411
 80063dc:	080063f9 	.word	0x080063f9
 80063e0:	08006411 	.word	0x08006411
 80063e4:	08006411 	.word	0x08006411
 80063e8:	08006411 	.word	0x08006411
 80063ec:	08006409 	.word	0x08006409
 80063f0:	2300      	movs	r3, #0
 80063f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80063f6:	e042      	b.n	800647e <UART_SetConfig+0x1ba>
 80063f8:	2302      	movs	r3, #2
 80063fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80063fe:	e03e      	b.n	800647e <UART_SetConfig+0x1ba>
 8006400:	2304      	movs	r3, #4
 8006402:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006406:	e03a      	b.n	800647e <UART_SetConfig+0x1ba>
 8006408:	2308      	movs	r3, #8
 800640a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800640e:	e036      	b.n	800647e <UART_SetConfig+0x1ba>
 8006410:	2310      	movs	r3, #16
 8006412:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006416:	e032      	b.n	800647e <UART_SetConfig+0x1ba>
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	4a6a      	ldr	r2, [pc, #424]	; (80065c8 <UART_SetConfig+0x304>)
 800641e:	4293      	cmp	r3, r2
 8006420:	d12a      	bne.n	8006478 <UART_SetConfig+0x1b4>
 8006422:	4b6b      	ldr	r3, [pc, #428]	; (80065d0 <UART_SetConfig+0x30c>)
 8006424:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006428:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800642c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006430:	d01a      	beq.n	8006468 <UART_SetConfig+0x1a4>
 8006432:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006436:	d81b      	bhi.n	8006470 <UART_SetConfig+0x1ac>
 8006438:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800643c:	d00c      	beq.n	8006458 <UART_SetConfig+0x194>
 800643e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006442:	d815      	bhi.n	8006470 <UART_SetConfig+0x1ac>
 8006444:	2b00      	cmp	r3, #0
 8006446:	d003      	beq.n	8006450 <UART_SetConfig+0x18c>
 8006448:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800644c:	d008      	beq.n	8006460 <UART_SetConfig+0x19c>
 800644e:	e00f      	b.n	8006470 <UART_SetConfig+0x1ac>
 8006450:	2300      	movs	r3, #0
 8006452:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006456:	e012      	b.n	800647e <UART_SetConfig+0x1ba>
 8006458:	2302      	movs	r3, #2
 800645a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800645e:	e00e      	b.n	800647e <UART_SetConfig+0x1ba>
 8006460:	2304      	movs	r3, #4
 8006462:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006466:	e00a      	b.n	800647e <UART_SetConfig+0x1ba>
 8006468:	2308      	movs	r3, #8
 800646a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800646e:	e006      	b.n	800647e <UART_SetConfig+0x1ba>
 8006470:	2310      	movs	r3, #16
 8006472:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006476:	e002      	b.n	800647e <UART_SetConfig+0x1ba>
 8006478:	2310      	movs	r3, #16
 800647a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	4a51      	ldr	r2, [pc, #324]	; (80065c8 <UART_SetConfig+0x304>)
 8006484:	4293      	cmp	r3, r2
 8006486:	d17a      	bne.n	800657e <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006488:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800648c:	2b08      	cmp	r3, #8
 800648e:	d824      	bhi.n	80064da <UART_SetConfig+0x216>
 8006490:	a201      	add	r2, pc, #4	; (adr r2, 8006498 <UART_SetConfig+0x1d4>)
 8006492:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006496:	bf00      	nop
 8006498:	080064bd 	.word	0x080064bd
 800649c:	080064db 	.word	0x080064db
 80064a0:	080064c5 	.word	0x080064c5
 80064a4:	080064db 	.word	0x080064db
 80064a8:	080064cb 	.word	0x080064cb
 80064ac:	080064db 	.word	0x080064db
 80064b0:	080064db 	.word	0x080064db
 80064b4:	080064db 	.word	0x080064db
 80064b8:	080064d3 	.word	0x080064d3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80064bc:	f7fe faf2 	bl	8004aa4 <HAL_RCC_GetPCLK1Freq>
 80064c0:	61f8      	str	r0, [r7, #28]
        break;
 80064c2:	e010      	b.n	80064e6 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80064c4:	4b44      	ldr	r3, [pc, #272]	; (80065d8 <UART_SetConfig+0x314>)
 80064c6:	61fb      	str	r3, [r7, #28]
        break;
 80064c8:	e00d      	b.n	80064e6 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80064ca:	f7fe fa53 	bl	8004974 <HAL_RCC_GetSysClockFreq>
 80064ce:	61f8      	str	r0, [r7, #28]
        break;
 80064d0:	e009      	b.n	80064e6 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80064d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80064d6:	61fb      	str	r3, [r7, #28]
        break;
 80064d8:	e005      	b.n	80064e6 <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 80064da:	2300      	movs	r3, #0
 80064dc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80064de:	2301      	movs	r3, #1
 80064e0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80064e4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80064e6:	69fb      	ldr	r3, [r7, #28]
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	f000 8107 	beq.w	80066fc <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	685a      	ldr	r2, [r3, #4]
 80064f2:	4613      	mov	r3, r2
 80064f4:	005b      	lsls	r3, r3, #1
 80064f6:	4413      	add	r3, r2
 80064f8:	69fa      	ldr	r2, [r7, #28]
 80064fa:	429a      	cmp	r2, r3
 80064fc:	d305      	bcc.n	800650a <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	685b      	ldr	r3, [r3, #4]
 8006502:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006504:	69fa      	ldr	r2, [r7, #28]
 8006506:	429a      	cmp	r2, r3
 8006508:	d903      	bls.n	8006512 <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 800650a:	2301      	movs	r3, #1
 800650c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006510:	e0f4      	b.n	80066fc <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8006512:	69fb      	ldr	r3, [r7, #28]
 8006514:	2200      	movs	r2, #0
 8006516:	461c      	mov	r4, r3
 8006518:	4615      	mov	r5, r2
 800651a:	f04f 0200 	mov.w	r2, #0
 800651e:	f04f 0300 	mov.w	r3, #0
 8006522:	022b      	lsls	r3, r5, #8
 8006524:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8006528:	0222      	lsls	r2, r4, #8
 800652a:	68f9      	ldr	r1, [r7, #12]
 800652c:	6849      	ldr	r1, [r1, #4]
 800652e:	0849      	lsrs	r1, r1, #1
 8006530:	2000      	movs	r0, #0
 8006532:	4688      	mov	r8, r1
 8006534:	4681      	mov	r9, r0
 8006536:	eb12 0a08 	adds.w	sl, r2, r8
 800653a:	eb43 0b09 	adc.w	fp, r3, r9
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	685b      	ldr	r3, [r3, #4]
 8006542:	2200      	movs	r2, #0
 8006544:	603b      	str	r3, [r7, #0]
 8006546:	607a      	str	r2, [r7, #4]
 8006548:	e9d7 2300 	ldrd	r2, r3, [r7]
 800654c:	4650      	mov	r0, sl
 800654e:	4659      	mov	r1, fp
 8006550:	f7fa fae4 	bl	8000b1c <__aeabi_uldivmod>
 8006554:	4602      	mov	r2, r0
 8006556:	460b      	mov	r3, r1
 8006558:	4613      	mov	r3, r2
 800655a:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800655c:	69bb      	ldr	r3, [r7, #24]
 800655e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006562:	d308      	bcc.n	8006576 <UART_SetConfig+0x2b2>
 8006564:	69bb      	ldr	r3, [r7, #24]
 8006566:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800656a:	d204      	bcs.n	8006576 <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	69ba      	ldr	r2, [r7, #24]
 8006572:	60da      	str	r2, [r3, #12]
 8006574:	e0c2      	b.n	80066fc <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 8006576:	2301      	movs	r3, #1
 8006578:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800657c:	e0be      	b.n	80066fc <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	69db      	ldr	r3, [r3, #28]
 8006582:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006586:	d16a      	bne.n	800665e <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 8006588:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800658c:	2b08      	cmp	r3, #8
 800658e:	d834      	bhi.n	80065fa <UART_SetConfig+0x336>
 8006590:	a201      	add	r2, pc, #4	; (adr r2, 8006598 <UART_SetConfig+0x2d4>)
 8006592:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006596:	bf00      	nop
 8006598:	080065bd 	.word	0x080065bd
 800659c:	080065dd 	.word	0x080065dd
 80065a0:	080065e5 	.word	0x080065e5
 80065a4:	080065fb 	.word	0x080065fb
 80065a8:	080065eb 	.word	0x080065eb
 80065ac:	080065fb 	.word	0x080065fb
 80065b0:	080065fb 	.word	0x080065fb
 80065b4:	080065fb 	.word	0x080065fb
 80065b8:	080065f3 	.word	0x080065f3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80065bc:	f7fe fa72 	bl	8004aa4 <HAL_RCC_GetPCLK1Freq>
 80065c0:	61f8      	str	r0, [r7, #28]
        break;
 80065c2:	e020      	b.n	8006606 <UART_SetConfig+0x342>
 80065c4:	efff69f3 	.word	0xefff69f3
 80065c8:	40008000 	.word	0x40008000
 80065cc:	40013800 	.word	0x40013800
 80065d0:	40021000 	.word	0x40021000
 80065d4:	40004400 	.word	0x40004400
 80065d8:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80065dc:	f7fe fa78 	bl	8004ad0 <HAL_RCC_GetPCLK2Freq>
 80065e0:	61f8      	str	r0, [r7, #28]
        break;
 80065e2:	e010      	b.n	8006606 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80065e4:	4b4c      	ldr	r3, [pc, #304]	; (8006718 <UART_SetConfig+0x454>)
 80065e6:	61fb      	str	r3, [r7, #28]
        break;
 80065e8:	e00d      	b.n	8006606 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80065ea:	f7fe f9c3 	bl	8004974 <HAL_RCC_GetSysClockFreq>
 80065ee:	61f8      	str	r0, [r7, #28]
        break;
 80065f0:	e009      	b.n	8006606 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80065f2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80065f6:	61fb      	str	r3, [r7, #28]
        break;
 80065f8:	e005      	b.n	8006606 <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 80065fa:	2300      	movs	r3, #0
 80065fc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80065fe:	2301      	movs	r3, #1
 8006600:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006604:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006606:	69fb      	ldr	r3, [r7, #28]
 8006608:	2b00      	cmp	r3, #0
 800660a:	d077      	beq.n	80066fc <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800660c:	69fb      	ldr	r3, [r7, #28]
 800660e:	005a      	lsls	r2, r3, #1
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	685b      	ldr	r3, [r3, #4]
 8006614:	085b      	lsrs	r3, r3, #1
 8006616:	441a      	add	r2, r3
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	685b      	ldr	r3, [r3, #4]
 800661c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006620:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006622:	69bb      	ldr	r3, [r7, #24]
 8006624:	2b0f      	cmp	r3, #15
 8006626:	d916      	bls.n	8006656 <UART_SetConfig+0x392>
 8006628:	69bb      	ldr	r3, [r7, #24]
 800662a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800662e:	d212      	bcs.n	8006656 <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006630:	69bb      	ldr	r3, [r7, #24]
 8006632:	b29b      	uxth	r3, r3
 8006634:	f023 030f 	bic.w	r3, r3, #15
 8006638:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800663a:	69bb      	ldr	r3, [r7, #24]
 800663c:	085b      	lsrs	r3, r3, #1
 800663e:	b29b      	uxth	r3, r3
 8006640:	f003 0307 	and.w	r3, r3, #7
 8006644:	b29a      	uxth	r2, r3
 8006646:	8afb      	ldrh	r3, [r7, #22]
 8006648:	4313      	orrs	r3, r2
 800664a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	8afa      	ldrh	r2, [r7, #22]
 8006652:	60da      	str	r2, [r3, #12]
 8006654:	e052      	b.n	80066fc <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8006656:	2301      	movs	r3, #1
 8006658:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800665c:	e04e      	b.n	80066fc <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 800665e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006662:	2b08      	cmp	r3, #8
 8006664:	d827      	bhi.n	80066b6 <UART_SetConfig+0x3f2>
 8006666:	a201      	add	r2, pc, #4	; (adr r2, 800666c <UART_SetConfig+0x3a8>)
 8006668:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800666c:	08006691 	.word	0x08006691
 8006670:	08006699 	.word	0x08006699
 8006674:	080066a1 	.word	0x080066a1
 8006678:	080066b7 	.word	0x080066b7
 800667c:	080066a7 	.word	0x080066a7
 8006680:	080066b7 	.word	0x080066b7
 8006684:	080066b7 	.word	0x080066b7
 8006688:	080066b7 	.word	0x080066b7
 800668c:	080066af 	.word	0x080066af
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006690:	f7fe fa08 	bl	8004aa4 <HAL_RCC_GetPCLK1Freq>
 8006694:	61f8      	str	r0, [r7, #28]
        break;
 8006696:	e014      	b.n	80066c2 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006698:	f7fe fa1a 	bl	8004ad0 <HAL_RCC_GetPCLK2Freq>
 800669c:	61f8      	str	r0, [r7, #28]
        break;
 800669e:	e010      	b.n	80066c2 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80066a0:	4b1d      	ldr	r3, [pc, #116]	; (8006718 <UART_SetConfig+0x454>)
 80066a2:	61fb      	str	r3, [r7, #28]
        break;
 80066a4:	e00d      	b.n	80066c2 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80066a6:	f7fe f965 	bl	8004974 <HAL_RCC_GetSysClockFreq>
 80066aa:	61f8      	str	r0, [r7, #28]
        break;
 80066ac:	e009      	b.n	80066c2 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80066ae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80066b2:	61fb      	str	r3, [r7, #28]
        break;
 80066b4:	e005      	b.n	80066c2 <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 80066b6:	2300      	movs	r3, #0
 80066b8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80066ba:	2301      	movs	r3, #1
 80066bc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80066c0:	bf00      	nop
    }

    if (pclk != 0U)
 80066c2:	69fb      	ldr	r3, [r7, #28]
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d019      	beq.n	80066fc <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	685b      	ldr	r3, [r3, #4]
 80066cc:	085a      	lsrs	r2, r3, #1
 80066ce:	69fb      	ldr	r3, [r7, #28]
 80066d0:	441a      	add	r2, r3
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	685b      	ldr	r3, [r3, #4]
 80066d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80066da:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80066dc:	69bb      	ldr	r3, [r7, #24]
 80066de:	2b0f      	cmp	r3, #15
 80066e0:	d909      	bls.n	80066f6 <UART_SetConfig+0x432>
 80066e2:	69bb      	ldr	r3, [r7, #24]
 80066e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80066e8:	d205      	bcs.n	80066f6 <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80066ea:	69bb      	ldr	r3, [r7, #24]
 80066ec:	b29a      	uxth	r2, r3
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	60da      	str	r2, [r3, #12]
 80066f4:	e002      	b.n	80066fc <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 80066f6:	2301      	movs	r3, #1
 80066f8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	2200      	movs	r2, #0
 8006700:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	2200      	movs	r2, #0
 8006706:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8006708:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 800670c:	4618      	mov	r0, r3
 800670e:	3728      	adds	r7, #40	; 0x28
 8006710:	46bd      	mov	sp, r7
 8006712:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006716:	bf00      	nop
 8006718:	00f42400 	.word	0x00f42400

0800671c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800671c:	b480      	push	{r7}
 800671e:	b083      	sub	sp, #12
 8006720:	af00      	add	r7, sp, #0
 8006722:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006728:	f003 0301 	and.w	r3, r3, #1
 800672c:	2b00      	cmp	r3, #0
 800672e:	d00a      	beq.n	8006746 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	685b      	ldr	r3, [r3, #4]
 8006736:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	430a      	orrs	r2, r1
 8006744:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800674a:	f003 0302 	and.w	r3, r3, #2
 800674e:	2b00      	cmp	r3, #0
 8006750:	d00a      	beq.n	8006768 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	685b      	ldr	r3, [r3, #4]
 8006758:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	430a      	orrs	r2, r1
 8006766:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800676c:	f003 0304 	and.w	r3, r3, #4
 8006770:	2b00      	cmp	r3, #0
 8006772:	d00a      	beq.n	800678a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	685b      	ldr	r3, [r3, #4]
 800677a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	430a      	orrs	r2, r1
 8006788:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800678e:	f003 0308 	and.w	r3, r3, #8
 8006792:	2b00      	cmp	r3, #0
 8006794:	d00a      	beq.n	80067ac <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	685b      	ldr	r3, [r3, #4]
 800679c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	430a      	orrs	r2, r1
 80067aa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067b0:	f003 0310 	and.w	r3, r3, #16
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d00a      	beq.n	80067ce <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	689b      	ldr	r3, [r3, #8]
 80067be:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	430a      	orrs	r2, r1
 80067cc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067d2:	f003 0320 	and.w	r3, r3, #32
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d00a      	beq.n	80067f0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	689b      	ldr	r3, [r3, #8]
 80067e0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	430a      	orrs	r2, r1
 80067ee:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d01a      	beq.n	8006832 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	685b      	ldr	r3, [r3, #4]
 8006802:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	430a      	orrs	r2, r1
 8006810:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006816:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800681a:	d10a      	bne.n	8006832 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	685b      	ldr	r3, [r3, #4]
 8006822:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	430a      	orrs	r2, r1
 8006830:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006836:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800683a:	2b00      	cmp	r3, #0
 800683c:	d00a      	beq.n	8006854 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	685b      	ldr	r3, [r3, #4]
 8006844:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	430a      	orrs	r2, r1
 8006852:	605a      	str	r2, [r3, #4]
  }
}
 8006854:	bf00      	nop
 8006856:	370c      	adds	r7, #12
 8006858:	46bd      	mov	sp, r7
 800685a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800685e:	4770      	bx	lr

08006860 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006860:	b580      	push	{r7, lr}
 8006862:	b086      	sub	sp, #24
 8006864:	af02      	add	r7, sp, #8
 8006866:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	2200      	movs	r2, #0
 800686c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006870:	f7fc fd04 	bl	800327c <HAL_GetTick>
 8006874:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	f003 0308 	and.w	r3, r3, #8
 8006880:	2b08      	cmp	r3, #8
 8006882:	d10e      	bne.n	80068a2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006884:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006888:	9300      	str	r3, [sp, #0]
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	2200      	movs	r2, #0
 800688e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006892:	6878      	ldr	r0, [r7, #4]
 8006894:	f000 f82d 	bl	80068f2 <UART_WaitOnFlagUntilTimeout>
 8006898:	4603      	mov	r3, r0
 800689a:	2b00      	cmp	r3, #0
 800689c:	d001      	beq.n	80068a2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800689e:	2303      	movs	r3, #3
 80068a0:	e023      	b.n	80068ea <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	f003 0304 	and.w	r3, r3, #4
 80068ac:	2b04      	cmp	r3, #4
 80068ae:	d10e      	bne.n	80068ce <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80068b0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80068b4:	9300      	str	r3, [sp, #0]
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	2200      	movs	r2, #0
 80068ba:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80068be:	6878      	ldr	r0, [r7, #4]
 80068c0:	f000 f817 	bl	80068f2 <UART_WaitOnFlagUntilTimeout>
 80068c4:	4603      	mov	r3, r0
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d001      	beq.n	80068ce <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80068ca:	2303      	movs	r3, #3
 80068cc:	e00d      	b.n	80068ea <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	2220      	movs	r2, #32
 80068d2:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	2220      	movs	r2, #32
 80068d8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	2200      	movs	r2, #0
 80068de:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	2200      	movs	r2, #0
 80068e4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80068e8:	2300      	movs	r3, #0
}
 80068ea:	4618      	mov	r0, r3
 80068ec:	3710      	adds	r7, #16
 80068ee:	46bd      	mov	sp, r7
 80068f0:	bd80      	pop	{r7, pc}

080068f2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80068f2:	b580      	push	{r7, lr}
 80068f4:	b09c      	sub	sp, #112	; 0x70
 80068f6:	af00      	add	r7, sp, #0
 80068f8:	60f8      	str	r0, [r7, #12]
 80068fa:	60b9      	str	r1, [r7, #8]
 80068fc:	603b      	str	r3, [r7, #0]
 80068fe:	4613      	mov	r3, r2
 8006900:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006902:	e0a5      	b.n	8006a50 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006904:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006906:	f1b3 3fff 	cmp.w	r3, #4294967295
 800690a:	f000 80a1 	beq.w	8006a50 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800690e:	f7fc fcb5 	bl	800327c <HAL_GetTick>
 8006912:	4602      	mov	r2, r0
 8006914:	683b      	ldr	r3, [r7, #0]
 8006916:	1ad3      	subs	r3, r2, r3
 8006918:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800691a:	429a      	cmp	r2, r3
 800691c:	d302      	bcc.n	8006924 <UART_WaitOnFlagUntilTimeout+0x32>
 800691e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006920:	2b00      	cmp	r3, #0
 8006922:	d13e      	bne.n	80069a2 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800692a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800692c:	e853 3f00 	ldrex	r3, [r3]
 8006930:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006932:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006934:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006938:	667b      	str	r3, [r7, #100]	; 0x64
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	461a      	mov	r2, r3
 8006940:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006942:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006944:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006946:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006948:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800694a:	e841 2300 	strex	r3, r2, [r1]
 800694e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006950:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006952:	2b00      	cmp	r3, #0
 8006954:	d1e6      	bne.n	8006924 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	3308      	adds	r3, #8
 800695c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800695e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006960:	e853 3f00 	ldrex	r3, [r3]
 8006964:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006966:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006968:	f023 0301 	bic.w	r3, r3, #1
 800696c:	663b      	str	r3, [r7, #96]	; 0x60
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	3308      	adds	r3, #8
 8006974:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006976:	64ba      	str	r2, [r7, #72]	; 0x48
 8006978:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800697a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800697c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800697e:	e841 2300 	strex	r3, r2, [r1]
 8006982:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006984:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006986:	2b00      	cmp	r3, #0
 8006988:	d1e5      	bne.n	8006956 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	2220      	movs	r2, #32
 800698e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	2220      	movs	r2, #32
 8006994:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	2200      	movs	r2, #0
 800699a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800699e:	2303      	movs	r3, #3
 80069a0:	e067      	b.n	8006a72 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	f003 0304 	and.w	r3, r3, #4
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d04f      	beq.n	8006a50 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	69db      	ldr	r3, [r3, #28]
 80069b6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80069ba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80069be:	d147      	bne.n	8006a50 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80069c8:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069d2:	e853 3f00 	ldrex	r3, [r3]
 80069d6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80069d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069da:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80069de:	66fb      	str	r3, [r7, #108]	; 0x6c
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	461a      	mov	r2, r3
 80069e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80069e8:	637b      	str	r3, [r7, #52]	; 0x34
 80069ea:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069ec:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80069ee:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80069f0:	e841 2300 	strex	r3, r2, [r1]
 80069f4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80069f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d1e6      	bne.n	80069ca <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	3308      	adds	r3, #8
 8006a02:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a04:	697b      	ldr	r3, [r7, #20]
 8006a06:	e853 3f00 	ldrex	r3, [r3]
 8006a0a:	613b      	str	r3, [r7, #16]
   return(result);
 8006a0c:	693b      	ldr	r3, [r7, #16]
 8006a0e:	f023 0301 	bic.w	r3, r3, #1
 8006a12:	66bb      	str	r3, [r7, #104]	; 0x68
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	3308      	adds	r3, #8
 8006a1a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006a1c:	623a      	str	r2, [r7, #32]
 8006a1e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a20:	69f9      	ldr	r1, [r7, #28]
 8006a22:	6a3a      	ldr	r2, [r7, #32]
 8006a24:	e841 2300 	strex	r3, r2, [r1]
 8006a28:	61bb      	str	r3, [r7, #24]
   return(result);
 8006a2a:	69bb      	ldr	r3, [r7, #24]
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d1e5      	bne.n	80069fc <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	2220      	movs	r2, #32
 8006a34:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	2220      	movs	r2, #32
 8006a3a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	2220      	movs	r2, #32
 8006a40:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	2200      	movs	r2, #0
 8006a48:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8006a4c:	2303      	movs	r3, #3
 8006a4e:	e010      	b.n	8006a72 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	69da      	ldr	r2, [r3, #28]
 8006a56:	68bb      	ldr	r3, [r7, #8]
 8006a58:	4013      	ands	r3, r2
 8006a5a:	68ba      	ldr	r2, [r7, #8]
 8006a5c:	429a      	cmp	r2, r3
 8006a5e:	bf0c      	ite	eq
 8006a60:	2301      	moveq	r3, #1
 8006a62:	2300      	movne	r3, #0
 8006a64:	b2db      	uxtb	r3, r3
 8006a66:	461a      	mov	r2, r3
 8006a68:	79fb      	ldrb	r3, [r7, #7]
 8006a6a:	429a      	cmp	r2, r3
 8006a6c:	f43f af4a 	beq.w	8006904 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006a70:	2300      	movs	r3, #0
}
 8006a72:	4618      	mov	r0, r3
 8006a74:	3770      	adds	r7, #112	; 0x70
 8006a76:	46bd      	mov	sp, r7
 8006a78:	bd80      	pop	{r7, pc}
	...

08006a7c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006a7c:	b480      	push	{r7}
 8006a7e:	b097      	sub	sp, #92	; 0x5c
 8006a80:	af00      	add	r7, sp, #0
 8006a82:	60f8      	str	r0, [r7, #12]
 8006a84:	60b9      	str	r1, [r7, #8]
 8006a86:	4613      	mov	r3, r2
 8006a88:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	68ba      	ldr	r2, [r7, #8]
 8006a8e:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	88fa      	ldrh	r2, [r7, #6]
 8006a94:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	88fa      	ldrh	r2, [r7, #6]
 8006a9c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	2200      	movs	r2, #0
 8006aa4:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	689b      	ldr	r3, [r3, #8]
 8006aaa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006aae:	d10e      	bne.n	8006ace <UART_Start_Receive_IT+0x52>
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	691b      	ldr	r3, [r3, #16]
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d105      	bne.n	8006ac4 <UART_Start_Receive_IT+0x48>
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	f240 12ff 	movw	r2, #511	; 0x1ff
 8006abe:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006ac2:	e02d      	b.n	8006b20 <UART_Start_Receive_IT+0xa4>
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	22ff      	movs	r2, #255	; 0xff
 8006ac8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006acc:	e028      	b.n	8006b20 <UART_Start_Receive_IT+0xa4>
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	689b      	ldr	r3, [r3, #8]
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d10d      	bne.n	8006af2 <UART_Start_Receive_IT+0x76>
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	691b      	ldr	r3, [r3, #16]
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d104      	bne.n	8006ae8 <UART_Start_Receive_IT+0x6c>
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	22ff      	movs	r2, #255	; 0xff
 8006ae2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006ae6:	e01b      	b.n	8006b20 <UART_Start_Receive_IT+0xa4>
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	227f      	movs	r2, #127	; 0x7f
 8006aec:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006af0:	e016      	b.n	8006b20 <UART_Start_Receive_IT+0xa4>
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	689b      	ldr	r3, [r3, #8]
 8006af6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006afa:	d10d      	bne.n	8006b18 <UART_Start_Receive_IT+0x9c>
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	691b      	ldr	r3, [r3, #16]
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d104      	bne.n	8006b0e <UART_Start_Receive_IT+0x92>
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	227f      	movs	r2, #127	; 0x7f
 8006b08:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006b0c:	e008      	b.n	8006b20 <UART_Start_Receive_IT+0xa4>
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	223f      	movs	r2, #63	; 0x3f
 8006b12:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006b16:	e003      	b.n	8006b20 <UART_Start_Receive_IT+0xa4>
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	2200      	movs	r2, #0
 8006b1c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	2200      	movs	r2, #0
 8006b24:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	2222      	movs	r2, #34	; 0x22
 8006b2c:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	3308      	adds	r3, #8
 8006b34:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006b38:	e853 3f00 	ldrex	r3, [r3]
 8006b3c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006b3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b40:	f043 0301 	orr.w	r3, r3, #1
 8006b44:	657b      	str	r3, [r7, #84]	; 0x54
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	3308      	adds	r3, #8
 8006b4c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006b4e:	64ba      	str	r2, [r7, #72]	; 0x48
 8006b50:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b52:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006b54:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006b56:	e841 2300 	strex	r3, r2, [r1]
 8006b5a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006b5c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d1e5      	bne.n	8006b2e <UART_Start_Receive_IT+0xb2>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	689b      	ldr	r3, [r3, #8]
 8006b66:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006b6a:	d107      	bne.n	8006b7c <UART_Start_Receive_IT+0x100>
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	691b      	ldr	r3, [r3, #16]
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d103      	bne.n	8006b7c <UART_Start_Receive_IT+0x100>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	4a24      	ldr	r2, [pc, #144]	; (8006c08 <UART_Start_Receive_IT+0x18c>)
 8006b78:	665a      	str	r2, [r3, #100]	; 0x64
 8006b7a:	e002      	b.n	8006b82 <UART_Start_Receive_IT+0x106>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	4a23      	ldr	r2, [pc, #140]	; (8006c0c <UART_Start_Receive_IT+0x190>)
 8006b80:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	2200      	movs	r2, #0
 8006b86:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	691b      	ldr	r3, [r3, #16]
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d019      	beq.n	8006bc6 <UART_Start_Receive_IT+0x14a>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b9a:	e853 3f00 	ldrex	r3, [r3]
 8006b9e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006ba0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ba2:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8006ba6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	461a      	mov	r2, r3
 8006bae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006bb0:	637b      	str	r3, [r7, #52]	; 0x34
 8006bb2:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bb4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006bb6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006bb8:	e841 2300 	strex	r3, r2, [r1]
 8006bbc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006bbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d1e6      	bne.n	8006b92 <UART_Start_Receive_IT+0x116>
 8006bc4:	e018      	b.n	8006bf8 <UART_Start_Receive_IT+0x17c>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bcc:	697b      	ldr	r3, [r7, #20]
 8006bce:	e853 3f00 	ldrex	r3, [r3]
 8006bd2:	613b      	str	r3, [r7, #16]
   return(result);
 8006bd4:	693b      	ldr	r3, [r7, #16]
 8006bd6:	f043 0320 	orr.w	r3, r3, #32
 8006bda:	653b      	str	r3, [r7, #80]	; 0x50
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	461a      	mov	r2, r3
 8006be2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006be4:	623b      	str	r3, [r7, #32]
 8006be6:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006be8:	69f9      	ldr	r1, [r7, #28]
 8006bea:	6a3a      	ldr	r2, [r7, #32]
 8006bec:	e841 2300 	strex	r3, r2, [r1]
 8006bf0:	61bb      	str	r3, [r7, #24]
   return(result);
 8006bf2:	69bb      	ldr	r3, [r7, #24]
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d1e6      	bne.n	8006bc6 <UART_Start_Receive_IT+0x14a>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 8006bf8:	2300      	movs	r3, #0
}
 8006bfa:	4618      	mov	r0, r3
 8006bfc:	375c      	adds	r7, #92	; 0x5c
 8006bfe:	46bd      	mov	sp, r7
 8006c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c04:	4770      	bx	lr
 8006c06:	bf00      	nop
 8006c08:	0800739f 	.word	0x0800739f
 8006c0c:	0800723f 	.word	0x0800723f

08006c10 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006c10:	b580      	push	{r7, lr}
 8006c12:	b096      	sub	sp, #88	; 0x58
 8006c14:	af00      	add	r7, sp, #0
 8006c16:	60f8      	str	r0, [r7, #12]
 8006c18:	60b9      	str	r1, [r7, #8]
 8006c1a:	4613      	mov	r3, r2
 8006c1c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	68ba      	ldr	r2, [r7, #8]
 8006c22:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	88fa      	ldrh	r2, [r7, #6]
 8006c28:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	2200      	movs	r2, #0
 8006c30:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	2222      	movs	r2, #34	; 0x22
 8006c38:	67da      	str	r2, [r3, #124]	; 0x7c

  if (huart->hdmarx != NULL)
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d02b      	beq.n	8006c9a <UART_Start_Receive_DMA+0x8a>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c46:	4a42      	ldr	r2, [pc, #264]	; (8006d50 <UART_Start_Receive_DMA+0x140>)
 8006c48:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c4e:	4a41      	ldr	r2, [pc, #260]	; (8006d54 <UART_Start_Receive_DMA+0x144>)
 8006c50:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c56:	4a40      	ldr	r2, [pc, #256]	; (8006d58 <UART_Start_Receive_DMA+0x148>)
 8006c58:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c5e:	2200      	movs	r2, #0
 8006c60:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	6f18      	ldr	r0, [r3, #112]	; 0x70
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	3324      	adds	r3, #36	; 0x24
 8006c6c:	4619      	mov	r1, r3
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c72:	461a      	mov	r2, r3
 8006c74:	88fb      	ldrh	r3, [r7, #6]
 8006c76:	f7fc fca7 	bl	80035c8 <HAL_DMA_Start_IT>
 8006c7a:	4603      	mov	r3, r0
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d00c      	beq.n	8006c9a <UART_Start_Receive_DMA+0x8a>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	2210      	movs	r2, #16
 8006c84:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	2200      	movs	r2, #0
 8006c8c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	2220      	movs	r2, #32
 8006c94:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_ERROR;
 8006c96:	2301      	movs	r3, #1
 8006c98:	e055      	b.n	8006d46 <UART_Start_Receive_DMA+0x136>
    }
  }
  __HAL_UNLOCK(huart);
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	2200      	movs	r2, #0
 8006c9e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	691b      	ldr	r3, [r3, #16]
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d018      	beq.n	8006cdc <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cb0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006cb2:	e853 3f00 	ldrex	r3, [r3]
 8006cb6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006cb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006cbe:	657b      	str	r3, [r7, #84]	; 0x54
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	461a      	mov	r2, r3
 8006cc6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006cc8:	64bb      	str	r3, [r7, #72]	; 0x48
 8006cca:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ccc:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006cce:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006cd0:	e841 2300 	strex	r3, r2, [r1]
 8006cd4:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006cd6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d1e6      	bne.n	8006caa <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	3308      	adds	r3, #8
 8006ce2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ce4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ce6:	e853 3f00 	ldrex	r3, [r3]
 8006cea:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006cec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cee:	f043 0301 	orr.w	r3, r3, #1
 8006cf2:	653b      	str	r3, [r7, #80]	; 0x50
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	3308      	adds	r3, #8
 8006cfa:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006cfc:	637a      	str	r2, [r7, #52]	; 0x34
 8006cfe:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d00:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006d02:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006d04:	e841 2300 	strex	r3, r2, [r1]
 8006d08:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006d0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d1e5      	bne.n	8006cdc <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	3308      	adds	r3, #8
 8006d16:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d18:	697b      	ldr	r3, [r7, #20]
 8006d1a:	e853 3f00 	ldrex	r3, [r3]
 8006d1e:	613b      	str	r3, [r7, #16]
   return(result);
 8006d20:	693b      	ldr	r3, [r7, #16]
 8006d22:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006d26:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	3308      	adds	r3, #8
 8006d2e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006d30:	623a      	str	r2, [r7, #32]
 8006d32:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d34:	69f9      	ldr	r1, [r7, #28]
 8006d36:	6a3a      	ldr	r2, [r7, #32]
 8006d38:	e841 2300 	strex	r3, r2, [r1]
 8006d3c:	61bb      	str	r3, [r7, #24]
   return(result);
 8006d3e:	69bb      	ldr	r3, [r7, #24]
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d1e5      	bne.n	8006d10 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 8006d44:	2300      	movs	r3, #0
}
 8006d46:	4618      	mov	r0, r3
 8006d48:	3758      	adds	r7, #88	; 0x58
 8006d4a:	46bd      	mov	sp, r7
 8006d4c:	bd80      	pop	{r7, pc}
 8006d4e:	bf00      	nop
 8006d50:	08006e6f 	.word	0x08006e6f
 8006d54:	08006f93 	.word	0x08006f93
 8006d58:	08006fcb 	.word	0x08006fcb

08006d5c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8006d5c:	b480      	push	{r7}
 8006d5e:	b089      	sub	sp, #36	; 0x24
 8006d60:	af00      	add	r7, sp, #0
 8006d62:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
#else
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	e853 3f00 	ldrex	r3, [r3]
 8006d70:	60bb      	str	r3, [r7, #8]
   return(result);
 8006d72:	68bb      	ldr	r3, [r7, #8]
 8006d74:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8006d78:	61fb      	str	r3, [r7, #28]
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	461a      	mov	r2, r3
 8006d80:	69fb      	ldr	r3, [r7, #28]
 8006d82:	61bb      	str	r3, [r7, #24]
 8006d84:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d86:	6979      	ldr	r1, [r7, #20]
 8006d88:	69ba      	ldr	r2, [r7, #24]
 8006d8a:	e841 2300 	strex	r3, r2, [r1]
 8006d8e:	613b      	str	r3, [r7, #16]
   return(result);
 8006d90:	693b      	ldr	r3, [r7, #16]
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d1e6      	bne.n	8006d64 <UART_EndTxTransfer+0x8>
#endif /* USART_CR1_FIFOEN */

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	2220      	movs	r2, #32
 8006d9a:	679a      	str	r2, [r3, #120]	; 0x78
}
 8006d9c:	bf00      	nop
 8006d9e:	3724      	adds	r7, #36	; 0x24
 8006da0:	46bd      	mov	sp, r7
 8006da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006da6:	4770      	bx	lr

08006da8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006da8:	b480      	push	{r7}
 8006daa:	b095      	sub	sp, #84	; 0x54
 8006dac:	af00      	add	r7, sp, #0
 8006dae:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006db6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006db8:	e853 3f00 	ldrex	r3, [r3]
 8006dbc:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006dbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dc0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006dc4:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	461a      	mov	r2, r3
 8006dcc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006dce:	643b      	str	r3, [r7, #64]	; 0x40
 8006dd0:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dd2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006dd4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006dd6:	e841 2300 	strex	r3, r2, [r1]
 8006dda:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006ddc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d1e6      	bne.n	8006db0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	3308      	adds	r3, #8
 8006de8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dea:	6a3b      	ldr	r3, [r7, #32]
 8006dec:	e853 3f00 	ldrex	r3, [r3]
 8006df0:	61fb      	str	r3, [r7, #28]
   return(result);
 8006df2:	69fb      	ldr	r3, [r7, #28]
 8006df4:	f023 0301 	bic.w	r3, r3, #1
 8006df8:	64bb      	str	r3, [r7, #72]	; 0x48
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	3308      	adds	r3, #8
 8006e00:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006e02:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006e04:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e06:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006e08:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006e0a:	e841 2300 	strex	r3, r2, [r1]
 8006e0e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006e10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d1e5      	bne.n	8006de2 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006e1a:	2b01      	cmp	r3, #1
 8006e1c:	d118      	bne.n	8006e50 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	e853 3f00 	ldrex	r3, [r3]
 8006e2a:	60bb      	str	r3, [r7, #8]
   return(result);
 8006e2c:	68bb      	ldr	r3, [r7, #8]
 8006e2e:	f023 0310 	bic.w	r3, r3, #16
 8006e32:	647b      	str	r3, [r7, #68]	; 0x44
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	461a      	mov	r2, r3
 8006e3a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006e3c:	61bb      	str	r3, [r7, #24]
 8006e3e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e40:	6979      	ldr	r1, [r7, #20]
 8006e42:	69ba      	ldr	r2, [r7, #24]
 8006e44:	e841 2300 	strex	r3, r2, [r1]
 8006e48:	613b      	str	r3, [r7, #16]
   return(result);
 8006e4a:	693b      	ldr	r3, [r7, #16]
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d1e6      	bne.n	8006e1e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	2220      	movs	r2, #32
 8006e54:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	2200      	movs	r2, #0
 8006e5a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	2200      	movs	r2, #0
 8006e60:	665a      	str	r2, [r3, #100]	; 0x64
}
 8006e62:	bf00      	nop
 8006e64:	3754      	adds	r7, #84	; 0x54
 8006e66:	46bd      	mov	sp, r7
 8006e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e6c:	4770      	bx	lr

08006e6e <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006e6e:	b580      	push	{r7, lr}
 8006e70:	b09c      	sub	sp, #112	; 0x70
 8006e72:	af00      	add	r7, sp, #0
 8006e74:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e7a:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	f003 0320 	and.w	r3, r3, #32
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d170      	bne.n	8006f6c <UART_DMAReceiveCplt+0xfe>
  {
    huart->RxXferCount = 0U;
 8006e8a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006e8c:	2200      	movs	r2, #0
 8006e8e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006e92:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e98:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006e9a:	e853 3f00 	ldrex	r3, [r3]
 8006e9e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006ea0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006ea2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006ea6:	66bb      	str	r3, [r7, #104]	; 0x68
 8006ea8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	461a      	mov	r2, r3
 8006eae:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006eb0:	65bb      	str	r3, [r7, #88]	; 0x58
 8006eb2:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006eb4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006eb6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006eb8:	e841 2300 	strex	r3, r2, [r1]
 8006ebc:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006ebe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d1e6      	bne.n	8006e92 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006ec4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	3308      	adds	r3, #8
 8006eca:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ecc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ece:	e853 3f00 	ldrex	r3, [r3]
 8006ed2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006ed4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ed6:	f023 0301 	bic.w	r3, r3, #1
 8006eda:	667b      	str	r3, [r7, #100]	; 0x64
 8006edc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	3308      	adds	r3, #8
 8006ee2:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8006ee4:	647a      	str	r2, [r7, #68]	; 0x44
 8006ee6:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ee8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006eea:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006eec:	e841 2300 	strex	r3, r2, [r1]
 8006ef0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006ef2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d1e5      	bne.n	8006ec4 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006ef8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	3308      	adds	r3, #8
 8006efe:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f02:	e853 3f00 	ldrex	r3, [r3]
 8006f06:	623b      	str	r3, [r7, #32]
   return(result);
 8006f08:	6a3b      	ldr	r3, [r7, #32]
 8006f0a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006f0e:	663b      	str	r3, [r7, #96]	; 0x60
 8006f10:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	3308      	adds	r3, #8
 8006f16:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006f18:	633a      	str	r2, [r7, #48]	; 0x30
 8006f1a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f1c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006f1e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006f20:	e841 2300 	strex	r3, r2, [r1]
 8006f24:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006f26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d1e5      	bne.n	8006ef8 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006f2c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006f2e:	2220      	movs	r2, #32
 8006f30:	67da      	str	r2, [r3, #124]	; 0x7c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006f32:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006f34:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006f36:	2b01      	cmp	r3, #1
 8006f38:	d118      	bne.n	8006f6c <UART_DMAReceiveCplt+0xfe>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006f3a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f40:	693b      	ldr	r3, [r7, #16]
 8006f42:	e853 3f00 	ldrex	r3, [r3]
 8006f46:	60fb      	str	r3, [r7, #12]
   return(result);
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	f023 0310 	bic.w	r3, r3, #16
 8006f4e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006f50:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	461a      	mov	r2, r3
 8006f56:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006f58:	61fb      	str	r3, [r7, #28]
 8006f5a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f5c:	69b9      	ldr	r1, [r7, #24]
 8006f5e:	69fa      	ldr	r2, [r7, #28]
 8006f60:	e841 2300 	strex	r3, r2, [r1]
 8006f64:	617b      	str	r3, [r7, #20]
   return(result);
 8006f66:	697b      	ldr	r3, [r7, #20]
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d1e6      	bne.n	8006f3a <UART_DMAReceiveCplt+0xcc>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006f6c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006f6e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006f70:	2b01      	cmp	r3, #1
 8006f72:	d107      	bne.n	8006f84 <UART_DMAReceiveCplt+0x116>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006f74:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006f76:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006f7a:	4619      	mov	r1, r3
 8006f7c:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8006f7e:	f7ff f995 	bl	80062ac <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006f82:	e002      	b.n	8006f8a <UART_DMAReceiveCplt+0x11c>
    HAL_UART_RxCpltCallback(huart);
 8006f84:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8006f86:	f7fc f8db 	bl	8003140 <HAL_UART_RxCpltCallback>
}
 8006f8a:	bf00      	nop
 8006f8c:	3770      	adds	r7, #112	; 0x70
 8006f8e:	46bd      	mov	sp, r7
 8006f90:	bd80      	pop	{r7, pc}

08006f92 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006f92:	b580      	push	{r7, lr}
 8006f94:	b084      	sub	sp, #16
 8006f96:	af00      	add	r7, sp, #0
 8006f98:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f9e:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006fa4:	2b01      	cmp	r3, #1
 8006fa6:	d109      	bne.n	8006fbc <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006fae:	085b      	lsrs	r3, r3, #1
 8006fb0:	b29b      	uxth	r3, r3
 8006fb2:	4619      	mov	r1, r3
 8006fb4:	68f8      	ldr	r0, [r7, #12]
 8006fb6:	f7ff f979 	bl	80062ac <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006fba:	e002      	b.n	8006fc2 <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 8006fbc:	68f8      	ldr	r0, [r7, #12]
 8006fbe:	f7ff f961 	bl	8006284 <HAL_UART_RxHalfCpltCallback>
}
 8006fc2:	bf00      	nop
 8006fc4:	3710      	adds	r7, #16
 8006fc6:	46bd      	mov	sp, r7
 8006fc8:	bd80      	pop	{r7, pc}

08006fca <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8006fca:	b580      	push	{r7, lr}
 8006fcc:	b086      	sub	sp, #24
 8006fce:	af00      	add	r7, sp, #0
 8006fd0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006fd6:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8006fd8:	697b      	ldr	r3, [r7, #20]
 8006fda:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006fdc:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8006fde:	697b      	ldr	r3, [r7, #20]
 8006fe0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006fe2:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8006fe4:	697b      	ldr	r3, [r7, #20]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	689b      	ldr	r3, [r3, #8]
 8006fea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006fee:	2b80      	cmp	r3, #128	; 0x80
 8006ff0:	d109      	bne.n	8007006 <UART_DMAError+0x3c>
 8006ff2:	693b      	ldr	r3, [r7, #16]
 8006ff4:	2b21      	cmp	r3, #33	; 0x21
 8006ff6:	d106      	bne.n	8007006 <UART_DMAError+0x3c>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8006ff8:	697b      	ldr	r3, [r7, #20]
 8006ffa:	2200      	movs	r2, #0
 8006ffc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 8007000:	6978      	ldr	r0, [r7, #20]
 8007002:	f7ff feab 	bl	8006d5c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8007006:	697b      	ldr	r3, [r7, #20]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	689b      	ldr	r3, [r3, #8]
 800700c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007010:	2b40      	cmp	r3, #64	; 0x40
 8007012:	d109      	bne.n	8007028 <UART_DMAError+0x5e>
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	2b22      	cmp	r3, #34	; 0x22
 8007018:	d106      	bne.n	8007028 <UART_DMAError+0x5e>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800701a:	697b      	ldr	r3, [r7, #20]
 800701c:	2200      	movs	r2, #0
 800701e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 8007022:	6978      	ldr	r0, [r7, #20]
 8007024:	f7ff fec0 	bl	8006da8 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8007028:	697b      	ldr	r3, [r7, #20]
 800702a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800702e:	f043 0210 	orr.w	r2, r3, #16
 8007032:	697b      	ldr	r3, [r7, #20]
 8007034:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007038:	6978      	ldr	r0, [r7, #20]
 800703a:	f7ff f92d 	bl	8006298 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800703e:	bf00      	nop
 8007040:	3718      	adds	r7, #24
 8007042:	46bd      	mov	sp, r7
 8007044:	bd80      	pop	{r7, pc}

08007046 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007046:	b580      	push	{r7, lr}
 8007048:	b084      	sub	sp, #16
 800704a:	af00      	add	r7, sp, #0
 800704c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007052:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	2200      	movs	r2, #0
 8007058:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	2200      	movs	r2, #0
 8007060:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007064:	68f8      	ldr	r0, [r7, #12]
 8007066:	f7ff f917 	bl	8006298 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800706a:	bf00      	nop
 800706c:	3710      	adds	r7, #16
 800706e:	46bd      	mov	sp, r7
 8007070:	bd80      	pop	{r7, pc}

08007072 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8007072:	b480      	push	{r7}
 8007074:	b08f      	sub	sp, #60	; 0x3c
 8007076:	af00      	add	r7, sp, #0
 8007078:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800707e:	2b21      	cmp	r3, #33	; 0x21
 8007080:	d14d      	bne.n	800711e <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007088:	b29b      	uxth	r3, r3
 800708a:	2b00      	cmp	r3, #0
 800708c:	d132      	bne.n	80070f4 <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007094:	6a3b      	ldr	r3, [r7, #32]
 8007096:	e853 3f00 	ldrex	r3, [r3]
 800709a:	61fb      	str	r3, [r7, #28]
   return(result);
 800709c:	69fb      	ldr	r3, [r7, #28]
 800709e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80070a2:	637b      	str	r3, [r7, #52]	; 0x34
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	461a      	mov	r2, r3
 80070aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80070ac:	62fb      	str	r3, [r7, #44]	; 0x2c
 80070ae:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070b0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80070b2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80070b4:	e841 2300 	strex	r3, r2, [r1]
 80070b8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80070ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d1e6      	bne.n	800708e <UART_TxISR_8BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	e853 3f00 	ldrex	r3, [r3]
 80070cc:	60bb      	str	r3, [r7, #8]
   return(result);
 80070ce:	68bb      	ldr	r3, [r7, #8]
 80070d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80070d4:	633b      	str	r3, [r7, #48]	; 0x30
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	461a      	mov	r2, r3
 80070dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070de:	61bb      	str	r3, [r7, #24]
 80070e0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070e2:	6979      	ldr	r1, [r7, #20]
 80070e4:	69ba      	ldr	r2, [r7, #24]
 80070e6:	e841 2300 	strex	r3, r2, [r1]
 80070ea:	613b      	str	r3, [r7, #16]
   return(result);
 80070ec:	693b      	ldr	r3, [r7, #16]
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d1e6      	bne.n	80070c0 <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 80070f2:	e014      	b.n	800711e <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80070f8:	781a      	ldrb	r2, [r3, #0]
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	b292      	uxth	r2, r2
 8007100:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007106:	1c5a      	adds	r2, r3, #1
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007112:	b29b      	uxth	r3, r3
 8007114:	3b01      	subs	r3, #1
 8007116:	b29a      	uxth	r2, r3
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 800711e:	bf00      	nop
 8007120:	373c      	adds	r7, #60	; 0x3c
 8007122:	46bd      	mov	sp, r7
 8007124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007128:	4770      	bx	lr

0800712a <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 800712a:	b480      	push	{r7}
 800712c:	b091      	sub	sp, #68	; 0x44
 800712e:	af00      	add	r7, sp, #0
 8007130:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007136:	2b21      	cmp	r3, #33	; 0x21
 8007138:	d151      	bne.n	80071de <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007140:	b29b      	uxth	r3, r3
 8007142:	2b00      	cmp	r3, #0
 8007144:	d132      	bne.n	80071ac <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800714c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800714e:	e853 3f00 	ldrex	r3, [r3]
 8007152:	623b      	str	r3, [r7, #32]
   return(result);
 8007154:	6a3b      	ldr	r3, [r7, #32]
 8007156:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800715a:	63bb      	str	r3, [r7, #56]	; 0x38
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	461a      	mov	r2, r3
 8007162:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007164:	633b      	str	r3, [r7, #48]	; 0x30
 8007166:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007168:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800716a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800716c:	e841 2300 	strex	r3, r2, [r1]
 8007170:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007172:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007174:	2b00      	cmp	r3, #0
 8007176:	d1e6      	bne.n	8007146 <UART_TxISR_16BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800717e:	693b      	ldr	r3, [r7, #16]
 8007180:	e853 3f00 	ldrex	r3, [r3]
 8007184:	60fb      	str	r3, [r7, #12]
   return(result);
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800718c:	637b      	str	r3, [r7, #52]	; 0x34
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	461a      	mov	r2, r3
 8007194:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007196:	61fb      	str	r3, [r7, #28]
 8007198:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800719a:	69b9      	ldr	r1, [r7, #24]
 800719c:	69fa      	ldr	r2, [r7, #28]
 800719e:	e841 2300 	strex	r3, r2, [r1]
 80071a2:	617b      	str	r3, [r7, #20]
   return(result);
 80071a4:	697b      	ldr	r3, [r7, #20]
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d1e6      	bne.n	8007178 <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 80071aa:	e018      	b.n	80071de <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80071b0:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 80071b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80071b4:	881a      	ldrh	r2, [r3, #0]
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80071be:	b292      	uxth	r2, r2
 80071c0:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80071c6:	1c9a      	adds	r2, r3, #2
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80071d2:	b29b      	uxth	r3, r3
 80071d4:	3b01      	subs	r3, #1
 80071d6:	b29a      	uxth	r2, r3
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 80071de:	bf00      	nop
 80071e0:	3744      	adds	r7, #68	; 0x44
 80071e2:	46bd      	mov	sp, r7
 80071e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071e8:	4770      	bx	lr

080071ea <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80071ea:	b580      	push	{r7, lr}
 80071ec:	b088      	sub	sp, #32
 80071ee:	af00      	add	r7, sp, #0
 80071f0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	e853 3f00 	ldrex	r3, [r3]
 80071fe:	60bb      	str	r3, [r7, #8]
   return(result);
 8007200:	68bb      	ldr	r3, [r7, #8]
 8007202:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007206:	61fb      	str	r3, [r7, #28]
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	461a      	mov	r2, r3
 800720e:	69fb      	ldr	r3, [r7, #28]
 8007210:	61bb      	str	r3, [r7, #24]
 8007212:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007214:	6979      	ldr	r1, [r7, #20]
 8007216:	69ba      	ldr	r2, [r7, #24]
 8007218:	e841 2300 	strex	r3, r2, [r1]
 800721c:	613b      	str	r3, [r7, #16]
   return(result);
 800721e:	693b      	ldr	r3, [r7, #16]
 8007220:	2b00      	cmp	r3, #0
 8007222:	d1e6      	bne.n	80071f2 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	2220      	movs	r2, #32
 8007228:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	2200      	movs	r2, #0
 800722e:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007230:	6878      	ldr	r0, [r7, #4]
 8007232:	f7ff f81d 	bl	8006270 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007236:	bf00      	nop
 8007238:	3720      	adds	r7, #32
 800723a:	46bd      	mov	sp, r7
 800723c:	bd80      	pop	{r7, pc}

0800723e <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800723e:	b580      	push	{r7, lr}
 8007240:	b096      	sub	sp, #88	; 0x58
 8007242:	af00      	add	r7, sp, #0
 8007244:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800724c:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007254:	2b22      	cmp	r3, #34	; 0x22
 8007256:	f040 8094 	bne.w	8007382 <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8007260:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007264:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8007268:	b2d9      	uxtb	r1, r3
 800726a:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800726e:	b2da      	uxtb	r2, r3
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007274:	400a      	ands	r2, r1
 8007276:	b2d2      	uxtb	r2, r2
 8007278:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800727e:	1c5a      	adds	r2, r3, #1
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800728a:	b29b      	uxth	r3, r3
 800728c:	3b01      	subs	r3, #1
 800728e:	b29a      	uxth	r2, r3
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800729c:	b29b      	uxth	r3, r3
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d179      	bne.n	8007396 <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072aa:	e853 3f00 	ldrex	r3, [r3]
 80072ae:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80072b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80072b2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80072b6:	653b      	str	r3, [r7, #80]	; 0x50
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	461a      	mov	r2, r3
 80072be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80072c0:	647b      	str	r3, [r7, #68]	; 0x44
 80072c2:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072c4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80072c6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80072c8:	e841 2300 	strex	r3, r2, [r1]
 80072cc:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80072ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d1e6      	bne.n	80072a2 <UART_RxISR_8BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	3308      	adds	r3, #8
 80072da:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072de:	e853 3f00 	ldrex	r3, [r3]
 80072e2:	623b      	str	r3, [r7, #32]
   return(result);
 80072e4:	6a3b      	ldr	r3, [r7, #32]
 80072e6:	f023 0301 	bic.w	r3, r3, #1
 80072ea:	64fb      	str	r3, [r7, #76]	; 0x4c
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	3308      	adds	r3, #8
 80072f2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80072f4:	633a      	str	r2, [r7, #48]	; 0x30
 80072f6:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072f8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80072fa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80072fc:	e841 2300 	strex	r3, r2, [r1]
 8007300:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007302:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007304:	2b00      	cmp	r3, #0
 8007306:	d1e5      	bne.n	80072d4 <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	2220      	movs	r2, #32
 800730c:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	2200      	movs	r2, #0
 8007312:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007318:	2b01      	cmp	r3, #1
 800731a:	d12e      	bne.n	800737a <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	2200      	movs	r2, #0
 8007320:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007328:	693b      	ldr	r3, [r7, #16]
 800732a:	e853 3f00 	ldrex	r3, [r3]
 800732e:	60fb      	str	r3, [r7, #12]
   return(result);
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	f023 0310 	bic.w	r3, r3, #16
 8007336:	64bb      	str	r3, [r7, #72]	; 0x48
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	461a      	mov	r2, r3
 800733e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007340:	61fb      	str	r3, [r7, #28]
 8007342:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007344:	69b9      	ldr	r1, [r7, #24]
 8007346:	69fa      	ldr	r2, [r7, #28]
 8007348:	e841 2300 	strex	r3, r2, [r1]
 800734c:	617b      	str	r3, [r7, #20]
   return(result);
 800734e:	697b      	ldr	r3, [r7, #20]
 8007350:	2b00      	cmp	r3, #0
 8007352:	d1e6      	bne.n	8007322 <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	69db      	ldr	r3, [r3, #28]
 800735a:	f003 0310 	and.w	r3, r3, #16
 800735e:	2b10      	cmp	r3, #16
 8007360:	d103      	bne.n	800736a <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	2210      	movs	r2, #16
 8007368:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8007370:	4619      	mov	r1, r3
 8007372:	6878      	ldr	r0, [r7, #4]
 8007374:	f7fe ff9a 	bl	80062ac <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007378:	e00d      	b.n	8007396 <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 800737a:	6878      	ldr	r0, [r7, #4]
 800737c:	f7fb fee0 	bl	8003140 <HAL_UART_RxCpltCallback>
}
 8007380:	e009      	b.n	8007396 <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	8b1b      	ldrh	r3, [r3, #24]
 8007388:	b29a      	uxth	r2, r3
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	f042 0208 	orr.w	r2, r2, #8
 8007392:	b292      	uxth	r2, r2
 8007394:	831a      	strh	r2, [r3, #24]
}
 8007396:	bf00      	nop
 8007398:	3758      	adds	r7, #88	; 0x58
 800739a:	46bd      	mov	sp, r7
 800739c:	bd80      	pop	{r7, pc}

0800739e <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800739e:	b580      	push	{r7, lr}
 80073a0:	b096      	sub	sp, #88	; 0x58
 80073a2:	af00      	add	r7, sp, #0
 80073a4:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80073ac:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80073b4:	2b22      	cmp	r3, #34	; 0x22
 80073b6:	f040 8094 	bne.w	80074e2 <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80073c0:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80073c8:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 80073ca:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 80073ce:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80073d2:	4013      	ands	r3, r2
 80073d4:	b29a      	uxth	r2, r3
 80073d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80073d8:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80073de:	1c9a      	adds	r2, r3, #2
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80073ea:	b29b      	uxth	r3, r3
 80073ec:	3b01      	subs	r3, #1
 80073ee:	b29a      	uxth	r2, r3
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80073fc:	b29b      	uxth	r3, r3
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d179      	bne.n	80074f6 <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007408:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800740a:	e853 3f00 	ldrex	r3, [r3]
 800740e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007410:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007412:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007416:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	461a      	mov	r2, r3
 800741e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007420:	643b      	str	r3, [r7, #64]	; 0x40
 8007422:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007424:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007426:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007428:	e841 2300 	strex	r3, r2, [r1]
 800742c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800742e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007430:	2b00      	cmp	r3, #0
 8007432:	d1e6      	bne.n	8007402 <UART_RxISR_16BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	3308      	adds	r3, #8
 800743a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800743c:	6a3b      	ldr	r3, [r7, #32]
 800743e:	e853 3f00 	ldrex	r3, [r3]
 8007442:	61fb      	str	r3, [r7, #28]
   return(result);
 8007444:	69fb      	ldr	r3, [r7, #28]
 8007446:	f023 0301 	bic.w	r3, r3, #1
 800744a:	64bb      	str	r3, [r7, #72]	; 0x48
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	3308      	adds	r3, #8
 8007452:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007454:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007456:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007458:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800745a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800745c:	e841 2300 	strex	r3, r2, [r1]
 8007460:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007462:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007464:	2b00      	cmp	r3, #0
 8007466:	d1e5      	bne.n	8007434 <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	2220      	movs	r2, #32
 800746c:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	2200      	movs	r2, #0
 8007472:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007478:	2b01      	cmp	r3, #1
 800747a:	d12e      	bne.n	80074da <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	2200      	movs	r2, #0
 8007480:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	e853 3f00 	ldrex	r3, [r3]
 800748e:	60bb      	str	r3, [r7, #8]
   return(result);
 8007490:	68bb      	ldr	r3, [r7, #8]
 8007492:	f023 0310 	bic.w	r3, r3, #16
 8007496:	647b      	str	r3, [r7, #68]	; 0x44
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	461a      	mov	r2, r3
 800749e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80074a0:	61bb      	str	r3, [r7, #24]
 80074a2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074a4:	6979      	ldr	r1, [r7, #20]
 80074a6:	69ba      	ldr	r2, [r7, #24]
 80074a8:	e841 2300 	strex	r3, r2, [r1]
 80074ac:	613b      	str	r3, [r7, #16]
   return(result);
 80074ae:	693b      	ldr	r3, [r7, #16]
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d1e6      	bne.n	8007482 <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	69db      	ldr	r3, [r3, #28]
 80074ba:	f003 0310 	and.w	r3, r3, #16
 80074be:	2b10      	cmp	r3, #16
 80074c0:	d103      	bne.n	80074ca <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	2210      	movs	r2, #16
 80074c8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80074d0:	4619      	mov	r1, r3
 80074d2:	6878      	ldr	r0, [r7, #4]
 80074d4:	f7fe feea 	bl	80062ac <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80074d8:	e00d      	b.n	80074f6 <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 80074da:	6878      	ldr	r0, [r7, #4]
 80074dc:	f7fb fe30 	bl	8003140 <HAL_UART_RxCpltCallback>
}
 80074e0:	e009      	b.n	80074f6 <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	8b1b      	ldrh	r3, [r3, #24]
 80074e8:	b29a      	uxth	r2, r3
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	f042 0208 	orr.w	r2, r2, #8
 80074f2:	b292      	uxth	r2, r2
 80074f4:	831a      	strh	r2, [r3, #24]
}
 80074f6:	bf00      	nop
 80074f8:	3758      	adds	r7, #88	; 0x58
 80074fa:	46bd      	mov	sp, r7
 80074fc:	bd80      	pop	{r7, pc}

080074fe <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80074fe:	b480      	push	{r7}
 8007500:	b083      	sub	sp, #12
 8007502:	af00      	add	r7, sp, #0
 8007504:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007506:	bf00      	nop
 8007508:	370c      	adds	r7, #12
 800750a:	46bd      	mov	sp, r7
 800750c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007510:	4770      	bx	lr
	...

08007514 <__NVIC_SetPriority>:
{
 8007514:	b480      	push	{r7}
 8007516:	b083      	sub	sp, #12
 8007518:	af00      	add	r7, sp, #0
 800751a:	4603      	mov	r3, r0
 800751c:	6039      	str	r1, [r7, #0]
 800751e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007520:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007524:	2b00      	cmp	r3, #0
 8007526:	db0a      	blt.n	800753e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007528:	683b      	ldr	r3, [r7, #0]
 800752a:	b2da      	uxtb	r2, r3
 800752c:	490c      	ldr	r1, [pc, #48]	; (8007560 <__NVIC_SetPriority+0x4c>)
 800752e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007532:	0112      	lsls	r2, r2, #4
 8007534:	b2d2      	uxtb	r2, r2
 8007536:	440b      	add	r3, r1
 8007538:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800753c:	e00a      	b.n	8007554 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800753e:	683b      	ldr	r3, [r7, #0]
 8007540:	b2da      	uxtb	r2, r3
 8007542:	4908      	ldr	r1, [pc, #32]	; (8007564 <__NVIC_SetPriority+0x50>)
 8007544:	79fb      	ldrb	r3, [r7, #7]
 8007546:	f003 030f 	and.w	r3, r3, #15
 800754a:	3b04      	subs	r3, #4
 800754c:	0112      	lsls	r2, r2, #4
 800754e:	b2d2      	uxtb	r2, r2
 8007550:	440b      	add	r3, r1
 8007552:	761a      	strb	r2, [r3, #24]
}
 8007554:	bf00      	nop
 8007556:	370c      	adds	r7, #12
 8007558:	46bd      	mov	sp, r7
 800755a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800755e:	4770      	bx	lr
 8007560:	e000e100 	.word	0xe000e100
 8007564:	e000ed00 	.word	0xe000ed00

08007568 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8007568:	b580      	push	{r7, lr}
 800756a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800756c:	4b05      	ldr	r3, [pc, #20]	; (8007584 <SysTick_Handler+0x1c>)
 800756e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8007570:	f001 fe4e 	bl	8009210 <xTaskGetSchedulerState>
 8007574:	4603      	mov	r3, r0
 8007576:	2b01      	cmp	r3, #1
 8007578:	d001      	beq.n	800757e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800757a:	f002 fd7d 	bl	800a078 <xPortSysTickHandler>
  }
}
 800757e:	bf00      	nop
 8007580:	bd80      	pop	{r7, pc}
 8007582:	bf00      	nop
 8007584:	e000e010 	.word	0xe000e010

08007588 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8007588:	b580      	push	{r7, lr}
 800758a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800758c:	2100      	movs	r1, #0
 800758e:	f06f 0004 	mvn.w	r0, #4
 8007592:	f7ff ffbf 	bl	8007514 <__NVIC_SetPriority>
#endif
}
 8007596:	bf00      	nop
 8007598:	bd80      	pop	{r7, pc}
	...

0800759c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800759c:	b480      	push	{r7}
 800759e:	b083      	sub	sp, #12
 80075a0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80075a2:	f3ef 8305 	mrs	r3, IPSR
 80075a6:	603b      	str	r3, [r7, #0]
  return(result);
 80075a8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d003      	beq.n	80075b6 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80075ae:	f06f 0305 	mvn.w	r3, #5
 80075b2:	607b      	str	r3, [r7, #4]
 80075b4:	e00c      	b.n	80075d0 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80075b6:	4b0a      	ldr	r3, [pc, #40]	; (80075e0 <osKernelInitialize+0x44>)
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d105      	bne.n	80075ca <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80075be:	4b08      	ldr	r3, [pc, #32]	; (80075e0 <osKernelInitialize+0x44>)
 80075c0:	2201      	movs	r2, #1
 80075c2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80075c4:	2300      	movs	r3, #0
 80075c6:	607b      	str	r3, [r7, #4]
 80075c8:	e002      	b.n	80075d0 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80075ca:	f04f 33ff 	mov.w	r3, #4294967295
 80075ce:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80075d0:	687b      	ldr	r3, [r7, #4]
}
 80075d2:	4618      	mov	r0, r3
 80075d4:	370c      	adds	r7, #12
 80075d6:	46bd      	mov	sp, r7
 80075d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075dc:	4770      	bx	lr
 80075de:	bf00      	nop
 80075e0:	20002328 	.word	0x20002328

080075e4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80075e4:	b580      	push	{r7, lr}
 80075e6:	b082      	sub	sp, #8
 80075e8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80075ea:	f3ef 8305 	mrs	r3, IPSR
 80075ee:	603b      	str	r3, [r7, #0]
  return(result);
 80075f0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d003      	beq.n	80075fe <osKernelStart+0x1a>
    stat = osErrorISR;
 80075f6:	f06f 0305 	mvn.w	r3, #5
 80075fa:	607b      	str	r3, [r7, #4]
 80075fc:	e010      	b.n	8007620 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80075fe:	4b0b      	ldr	r3, [pc, #44]	; (800762c <osKernelStart+0x48>)
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	2b01      	cmp	r3, #1
 8007604:	d109      	bne.n	800761a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8007606:	f7ff ffbf 	bl	8007588 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800760a:	4b08      	ldr	r3, [pc, #32]	; (800762c <osKernelStart+0x48>)
 800760c:	2202      	movs	r2, #2
 800760e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8007610:	f001 f9a2 	bl	8008958 <vTaskStartScheduler>
      stat = osOK;
 8007614:	2300      	movs	r3, #0
 8007616:	607b      	str	r3, [r7, #4]
 8007618:	e002      	b.n	8007620 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800761a:	f04f 33ff 	mov.w	r3, #4294967295
 800761e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8007620:	687b      	ldr	r3, [r7, #4]
}
 8007622:	4618      	mov	r0, r3
 8007624:	3708      	adds	r7, #8
 8007626:	46bd      	mov	sp, r7
 8007628:	bd80      	pop	{r7, pc}
 800762a:	bf00      	nop
 800762c:	20002328 	.word	0x20002328

08007630 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8007630:	b580      	push	{r7, lr}
 8007632:	b08e      	sub	sp, #56	; 0x38
 8007634:	af04      	add	r7, sp, #16
 8007636:	60f8      	str	r0, [r7, #12]
 8007638:	60b9      	str	r1, [r7, #8]
 800763a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800763c:	2300      	movs	r3, #0
 800763e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007640:	f3ef 8305 	mrs	r3, IPSR
 8007644:	617b      	str	r3, [r7, #20]
  return(result);
 8007646:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8007648:	2b00      	cmp	r3, #0
 800764a:	d17f      	bne.n	800774c <osThreadNew+0x11c>
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	2b00      	cmp	r3, #0
 8007650:	d07c      	beq.n	800774c <osThreadNew+0x11c>
    stack = configMINIMAL_STACK_SIZE;
 8007652:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007656:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8007658:	2318      	movs	r3, #24
 800765a:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800765c:	2300      	movs	r3, #0
 800765e:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8007660:	f04f 33ff 	mov.w	r3, #4294967295
 8007664:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	2b00      	cmp	r3, #0
 800766a:	d045      	beq.n	80076f8 <osThreadNew+0xc8>
      if (attr->name != NULL) {
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	2b00      	cmp	r3, #0
 8007672:	d002      	beq.n	800767a <osThreadNew+0x4a>
        name = attr->name;
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	699b      	ldr	r3, [r3, #24]
 800767e:	2b00      	cmp	r3, #0
 8007680:	d002      	beq.n	8007688 <osThreadNew+0x58>
        prio = (UBaseType_t)attr->priority;
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	699b      	ldr	r3, [r3, #24]
 8007686:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8007688:	69fb      	ldr	r3, [r7, #28]
 800768a:	2b00      	cmp	r3, #0
 800768c:	d008      	beq.n	80076a0 <osThreadNew+0x70>
 800768e:	69fb      	ldr	r3, [r7, #28]
 8007690:	2b38      	cmp	r3, #56	; 0x38
 8007692:	d805      	bhi.n	80076a0 <osThreadNew+0x70>
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	685b      	ldr	r3, [r3, #4]
 8007698:	f003 0301 	and.w	r3, r3, #1
 800769c:	2b00      	cmp	r3, #0
 800769e:	d001      	beq.n	80076a4 <osThreadNew+0x74>
        return (NULL);
 80076a0:	2300      	movs	r3, #0
 80076a2:	e054      	b.n	800774e <osThreadNew+0x11e>
      }

      if (attr->stack_size > 0U) {
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	695b      	ldr	r3, [r3, #20]
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d003      	beq.n	80076b4 <osThreadNew+0x84>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	695b      	ldr	r3, [r3, #20]
 80076b0:	089b      	lsrs	r3, r3, #2
 80076b2:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	689b      	ldr	r3, [r3, #8]
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d00e      	beq.n	80076da <osThreadNew+0xaa>
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	68db      	ldr	r3, [r3, #12]
 80076c0:	2bbb      	cmp	r3, #187	; 0xbb
 80076c2:	d90a      	bls.n	80076da <osThreadNew+0xaa>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d006      	beq.n	80076da <osThreadNew+0xaa>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	695b      	ldr	r3, [r3, #20]
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	d002      	beq.n	80076da <osThreadNew+0xaa>
        mem = 1;
 80076d4:	2301      	movs	r3, #1
 80076d6:	61bb      	str	r3, [r7, #24]
 80076d8:	e010      	b.n	80076fc <osThreadNew+0xcc>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	689b      	ldr	r3, [r3, #8]
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d10c      	bne.n	80076fc <osThreadNew+0xcc>
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	68db      	ldr	r3, [r3, #12]
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d108      	bne.n	80076fc <osThreadNew+0xcc>
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	691b      	ldr	r3, [r3, #16]
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d104      	bne.n	80076fc <osThreadNew+0xcc>
          mem = 0;
 80076f2:	2300      	movs	r3, #0
 80076f4:	61bb      	str	r3, [r7, #24]
 80076f6:	e001      	b.n	80076fc <osThreadNew+0xcc>
        }
      }
    }
    else {
      mem = 0;
 80076f8:	2300      	movs	r3, #0
 80076fa:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80076fc:	69bb      	ldr	r3, [r7, #24]
 80076fe:	2b01      	cmp	r3, #1
 8007700:	d110      	bne.n	8007724 <osThreadNew+0xf4>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8007706:	687a      	ldr	r2, [r7, #4]
 8007708:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800770a:	9202      	str	r2, [sp, #8]
 800770c:	9301      	str	r3, [sp, #4]
 800770e:	69fb      	ldr	r3, [r7, #28]
 8007710:	9300      	str	r3, [sp, #0]
 8007712:	68bb      	ldr	r3, [r7, #8]
 8007714:	6a3a      	ldr	r2, [r7, #32]
 8007716:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007718:	68f8      	ldr	r0, [r7, #12]
 800771a:	f000 febf 	bl	800849c <xTaskCreateStatic>
 800771e:	4603      	mov	r3, r0
 8007720:	613b      	str	r3, [r7, #16]
 8007722:	e013      	b.n	800774c <osThreadNew+0x11c>
      #endif
    }
    else {
      if (mem == 0) {
 8007724:	69bb      	ldr	r3, [r7, #24]
 8007726:	2b00      	cmp	r3, #0
 8007728:	d110      	bne.n	800774c <osThreadNew+0x11c>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800772a:	6a3b      	ldr	r3, [r7, #32]
 800772c:	b29a      	uxth	r2, r3
 800772e:	f107 0310 	add.w	r3, r7, #16
 8007732:	9301      	str	r3, [sp, #4]
 8007734:	69fb      	ldr	r3, [r7, #28]
 8007736:	9300      	str	r3, [sp, #0]
 8007738:	68bb      	ldr	r3, [r7, #8]
 800773a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800773c:	68f8      	ldr	r0, [r7, #12]
 800773e:	f000 ff0a 	bl	8008556 <xTaskCreate>
 8007742:	4603      	mov	r3, r0
 8007744:	2b01      	cmp	r3, #1
 8007746:	d001      	beq.n	800774c <osThreadNew+0x11c>
            hTask = NULL;
 8007748:	2300      	movs	r3, #0
 800774a:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800774c:	693b      	ldr	r3, [r7, #16]
}
 800774e:	4618      	mov	r0, r3
 8007750:	3728      	adds	r7, #40	; 0x28
 8007752:	46bd      	mov	sp, r7
 8007754:	bd80      	pop	{r7, pc}

08007756 <osThreadExit>:

  return (stat);
}
#endif /* (configUSE_OS2_THREAD_SUSPEND_RESUME == 1) */

__NO_RETURN void osThreadExit (void) {
 8007756:	b580      	push	{r7, lr}
 8007758:	af00      	add	r7, sp, #0
#ifndef USE_FreeRTOS_HEAP_1
  vTaskDelete (NULL);
 800775a:	2000      	movs	r0, #0
 800775c:	f001 f856 	bl	800880c <vTaskDelete>
#endif
  for (;;);
 8007760:	e7fe      	b.n	8007760 <osThreadExit+0xa>

08007762 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8007762:	b580      	push	{r7, lr}
 8007764:	b084      	sub	sp, #16
 8007766:	af00      	add	r7, sp, #0
 8007768:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800776a:	f3ef 8305 	mrs	r3, IPSR
 800776e:	60bb      	str	r3, [r7, #8]
  return(result);
 8007770:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007772:	2b00      	cmp	r3, #0
 8007774:	d003      	beq.n	800777e <osDelay+0x1c>
    stat = osErrorISR;
 8007776:	f06f 0305 	mvn.w	r3, #5
 800777a:	60fb      	str	r3, [r7, #12]
 800777c:	e007      	b.n	800778e <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800777e:	2300      	movs	r3, #0
 8007780:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	2b00      	cmp	r3, #0
 8007786:	d002      	beq.n	800778e <osDelay+0x2c>
      vTaskDelay(ticks);
 8007788:	6878      	ldr	r0, [r7, #4]
 800778a:	f001 f8b1 	bl	80088f0 <vTaskDelay>
    }
  }

  return (stat);
 800778e:	68fb      	ldr	r3, [r7, #12]
}
 8007790:	4618      	mov	r0, r3
 8007792:	3710      	adds	r7, #16
 8007794:	46bd      	mov	sp, r7
 8007796:	bd80      	pop	{r7, pc}

08007798 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8007798:	b580      	push	{r7, lr}
 800779a:	b08a      	sub	sp, #40	; 0x28
 800779c:	af02      	add	r7, sp, #8
 800779e:	60f8      	str	r0, [r7, #12]
 80077a0:	60b9      	str	r1, [r7, #8]
 80077a2:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 80077a4:	2300      	movs	r3, #0
 80077a6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80077a8:	f3ef 8305 	mrs	r3, IPSR
 80077ac:	613b      	str	r3, [r7, #16]
  return(result);
 80077ae:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d15f      	bne.n	8007874 <osMessageQueueNew+0xdc>
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d05c      	beq.n	8007874 <osMessageQueueNew+0xdc>
 80077ba:	68bb      	ldr	r3, [r7, #8]
 80077bc:	2b00      	cmp	r3, #0
 80077be:	d059      	beq.n	8007874 <osMessageQueueNew+0xdc>
    mem = -1;
 80077c0:	f04f 33ff 	mov.w	r3, #4294967295
 80077c4:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d029      	beq.n	8007820 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	689b      	ldr	r3, [r3, #8]
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	d012      	beq.n	80077fa <osMessageQueueNew+0x62>
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	68db      	ldr	r3, [r3, #12]
 80077d8:	2b4f      	cmp	r3, #79	; 0x4f
 80077da:	d90e      	bls.n	80077fa <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d00a      	beq.n	80077fa <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	695a      	ldr	r2, [r3, #20]
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	68b9      	ldr	r1, [r7, #8]
 80077ec:	fb01 f303 	mul.w	r3, r1, r3
 80077f0:	429a      	cmp	r2, r3
 80077f2:	d302      	bcc.n	80077fa <osMessageQueueNew+0x62>
        mem = 1;
 80077f4:	2301      	movs	r3, #1
 80077f6:	61bb      	str	r3, [r7, #24]
 80077f8:	e014      	b.n	8007824 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	689b      	ldr	r3, [r3, #8]
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d110      	bne.n	8007824 <osMessageQueueNew+0x8c>
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	68db      	ldr	r3, [r3, #12]
 8007806:	2b00      	cmp	r3, #0
 8007808:	d10c      	bne.n	8007824 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800780e:	2b00      	cmp	r3, #0
 8007810:	d108      	bne.n	8007824 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	695b      	ldr	r3, [r3, #20]
 8007816:	2b00      	cmp	r3, #0
 8007818:	d104      	bne.n	8007824 <osMessageQueueNew+0x8c>
          mem = 0;
 800781a:	2300      	movs	r3, #0
 800781c:	61bb      	str	r3, [r7, #24]
 800781e:	e001      	b.n	8007824 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8007820:	2300      	movs	r3, #0
 8007822:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8007824:	69bb      	ldr	r3, [r7, #24]
 8007826:	2b01      	cmp	r3, #1
 8007828:	d10b      	bne.n	8007842 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	691a      	ldr	r2, [r3, #16]
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	689b      	ldr	r3, [r3, #8]
 8007832:	2100      	movs	r1, #0
 8007834:	9100      	str	r1, [sp, #0]
 8007836:	68b9      	ldr	r1, [r7, #8]
 8007838:	68f8      	ldr	r0, [r7, #12]
 800783a:	f000 f971 	bl	8007b20 <xQueueGenericCreateStatic>
 800783e:	61f8      	str	r0, [r7, #28]
 8007840:	e008      	b.n	8007854 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8007842:	69bb      	ldr	r3, [r7, #24]
 8007844:	2b00      	cmp	r3, #0
 8007846:	d105      	bne.n	8007854 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8007848:	2200      	movs	r2, #0
 800784a:	68b9      	ldr	r1, [r7, #8]
 800784c:	68f8      	ldr	r0, [r7, #12]
 800784e:	f000 f9df 	bl	8007c10 <xQueueGenericCreate>
 8007852:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8007854:	69fb      	ldr	r3, [r7, #28]
 8007856:	2b00      	cmp	r3, #0
 8007858:	d00c      	beq.n	8007874 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	2b00      	cmp	r3, #0
 800785e:	d003      	beq.n	8007868 <osMessageQueueNew+0xd0>
        name = attr->name;
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	617b      	str	r3, [r7, #20]
 8007866:	e001      	b.n	800786c <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8007868:	2300      	movs	r3, #0
 800786a:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 800786c:	6979      	ldr	r1, [r7, #20]
 800786e:	69f8      	ldr	r0, [r7, #28]
 8007870:	f000 fdb6 	bl	80083e0 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8007874:	69fb      	ldr	r3, [r7, #28]
}
 8007876:	4618      	mov	r0, r3
 8007878:	3720      	adds	r7, #32
 800787a:	46bd      	mov	sp, r7
 800787c:	bd80      	pop	{r7, pc}
	...

08007880 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8007880:	b480      	push	{r7}
 8007882:	b085      	sub	sp, #20
 8007884:	af00      	add	r7, sp, #0
 8007886:	60f8      	str	r0, [r7, #12]
 8007888:	60b9      	str	r1, [r7, #8]
 800788a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	4a07      	ldr	r2, [pc, #28]	; (80078ac <vApplicationGetIdleTaskMemory+0x2c>)
 8007890:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8007892:	68bb      	ldr	r3, [r7, #8]
 8007894:	4a06      	ldr	r2, [pc, #24]	; (80078b0 <vApplicationGetIdleTaskMemory+0x30>)
 8007896:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800789e:	601a      	str	r2, [r3, #0]
}
 80078a0:	bf00      	nop
 80078a2:	3714      	adds	r7, #20
 80078a4:	46bd      	mov	sp, r7
 80078a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078aa:	4770      	bx	lr
 80078ac:	2000232c 	.word	0x2000232c
 80078b0:	200023e8 	.word	0x200023e8

080078b4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80078b4:	b480      	push	{r7}
 80078b6:	b085      	sub	sp, #20
 80078b8:	af00      	add	r7, sp, #0
 80078ba:	60f8      	str	r0, [r7, #12]
 80078bc:	60b9      	str	r1, [r7, #8]
 80078be:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	4a07      	ldr	r2, [pc, #28]	; (80078e0 <vApplicationGetTimerTaskMemory+0x2c>)
 80078c4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80078c6:	68bb      	ldr	r3, [r7, #8]
 80078c8:	4a06      	ldr	r2, [pc, #24]	; (80078e4 <vApplicationGetTimerTaskMemory+0x30>)
 80078ca:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	f44f 7200 	mov.w	r2, #512	; 0x200
 80078d2:	601a      	str	r2, [r3, #0]
}
 80078d4:	bf00      	nop
 80078d6:	3714      	adds	r7, #20
 80078d8:	46bd      	mov	sp, r7
 80078da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078de:	4770      	bx	lr
 80078e0:	200027e8 	.word	0x200027e8
 80078e4:	200028a4 	.word	0x200028a4

080078e8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80078e8:	b480      	push	{r7}
 80078ea:	b083      	sub	sp, #12
 80078ec:	af00      	add	r7, sp, #0
 80078ee:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	f103 0208 	add.w	r2, r3, #8
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	f04f 32ff 	mov.w	r2, #4294967295
 8007900:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	f103 0208 	add.w	r2, r3, #8
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	f103 0208 	add.w	r2, r3, #8
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	2200      	movs	r2, #0
 800791a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800791c:	bf00      	nop
 800791e:	370c      	adds	r7, #12
 8007920:	46bd      	mov	sp, r7
 8007922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007926:	4770      	bx	lr

08007928 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007928:	b480      	push	{r7}
 800792a:	b083      	sub	sp, #12
 800792c:	af00      	add	r7, sp, #0
 800792e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	2200      	movs	r2, #0
 8007934:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007936:	bf00      	nop
 8007938:	370c      	adds	r7, #12
 800793a:	46bd      	mov	sp, r7
 800793c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007940:	4770      	bx	lr

08007942 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007942:	b480      	push	{r7}
 8007944:	b085      	sub	sp, #20
 8007946:	af00      	add	r7, sp, #0
 8007948:	6078      	str	r0, [r7, #4]
 800794a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	685b      	ldr	r3, [r3, #4]
 8007950:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007952:	683b      	ldr	r3, [r7, #0]
 8007954:	68fa      	ldr	r2, [r7, #12]
 8007956:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	689a      	ldr	r2, [r3, #8]
 800795c:	683b      	ldr	r3, [r7, #0]
 800795e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	689b      	ldr	r3, [r3, #8]
 8007964:	683a      	ldr	r2, [r7, #0]
 8007966:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	683a      	ldr	r2, [r7, #0]
 800796c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800796e:	683b      	ldr	r3, [r7, #0]
 8007970:	687a      	ldr	r2, [r7, #4]
 8007972:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	1c5a      	adds	r2, r3, #1
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	601a      	str	r2, [r3, #0]
}
 800797e:	bf00      	nop
 8007980:	3714      	adds	r7, #20
 8007982:	46bd      	mov	sp, r7
 8007984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007988:	4770      	bx	lr

0800798a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800798a:	b480      	push	{r7}
 800798c:	b085      	sub	sp, #20
 800798e:	af00      	add	r7, sp, #0
 8007990:	6078      	str	r0, [r7, #4]
 8007992:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007994:	683b      	ldr	r3, [r7, #0]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800799a:	68bb      	ldr	r3, [r7, #8]
 800799c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80079a0:	d103      	bne.n	80079aa <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	691b      	ldr	r3, [r3, #16]
 80079a6:	60fb      	str	r3, [r7, #12]
 80079a8:	e00c      	b.n	80079c4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	3308      	adds	r3, #8
 80079ae:	60fb      	str	r3, [r7, #12]
 80079b0:	e002      	b.n	80079b8 <vListInsert+0x2e>
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	685b      	ldr	r3, [r3, #4]
 80079b6:	60fb      	str	r3, [r7, #12]
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	685b      	ldr	r3, [r3, #4]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	68ba      	ldr	r2, [r7, #8]
 80079c0:	429a      	cmp	r2, r3
 80079c2:	d2f6      	bcs.n	80079b2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	685a      	ldr	r2, [r3, #4]
 80079c8:	683b      	ldr	r3, [r7, #0]
 80079ca:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80079cc:	683b      	ldr	r3, [r7, #0]
 80079ce:	685b      	ldr	r3, [r3, #4]
 80079d0:	683a      	ldr	r2, [r7, #0]
 80079d2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80079d4:	683b      	ldr	r3, [r7, #0]
 80079d6:	68fa      	ldr	r2, [r7, #12]
 80079d8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	683a      	ldr	r2, [r7, #0]
 80079de:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80079e0:	683b      	ldr	r3, [r7, #0]
 80079e2:	687a      	ldr	r2, [r7, #4]
 80079e4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	1c5a      	adds	r2, r3, #1
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	601a      	str	r2, [r3, #0]
}
 80079f0:	bf00      	nop
 80079f2:	3714      	adds	r7, #20
 80079f4:	46bd      	mov	sp, r7
 80079f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079fa:	4770      	bx	lr

080079fc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80079fc:	b480      	push	{r7}
 80079fe:	b085      	sub	sp, #20
 8007a00:	af00      	add	r7, sp, #0
 8007a02:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	691b      	ldr	r3, [r3, #16]
 8007a08:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	685b      	ldr	r3, [r3, #4]
 8007a0e:	687a      	ldr	r2, [r7, #4]
 8007a10:	6892      	ldr	r2, [r2, #8]
 8007a12:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	689b      	ldr	r3, [r3, #8]
 8007a18:	687a      	ldr	r2, [r7, #4]
 8007a1a:	6852      	ldr	r2, [r2, #4]
 8007a1c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	685b      	ldr	r3, [r3, #4]
 8007a22:	687a      	ldr	r2, [r7, #4]
 8007a24:	429a      	cmp	r2, r3
 8007a26:	d103      	bne.n	8007a30 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	689a      	ldr	r2, [r3, #8]
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	2200      	movs	r2, #0
 8007a34:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	1e5a      	subs	r2, r3, #1
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	681b      	ldr	r3, [r3, #0]
}
 8007a44:	4618      	mov	r0, r3
 8007a46:	3714      	adds	r7, #20
 8007a48:	46bd      	mov	sp, r7
 8007a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a4e:	4770      	bx	lr

08007a50 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8007a50:	b580      	push	{r7, lr}
 8007a52:	b084      	sub	sp, #16
 8007a54:	af00      	add	r7, sp, #0
 8007a56:	6078      	str	r0, [r7, #4]
 8007a58:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	d10a      	bne.n	8007a7a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007a64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a68:	f383 8811 	msr	BASEPRI, r3
 8007a6c:	f3bf 8f6f 	isb	sy
 8007a70:	f3bf 8f4f 	dsb	sy
 8007a74:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8007a76:	bf00      	nop
 8007a78:	e7fe      	b.n	8007a78 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8007a7a:	f002 fa6b 	bl	8009f54 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	681a      	ldr	r2, [r3, #0]
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a86:	68f9      	ldr	r1, [r7, #12]
 8007a88:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007a8a:	fb01 f303 	mul.w	r3, r1, r3
 8007a8e:	441a      	add	r2, r3
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	2200      	movs	r2, #0
 8007a98:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	681a      	ldr	r2, [r3, #0]
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	681a      	ldr	r2, [r3, #0]
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007aaa:	3b01      	subs	r3, #1
 8007aac:	68f9      	ldr	r1, [r7, #12]
 8007aae:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007ab0:	fb01 f303 	mul.w	r3, r1, r3
 8007ab4:	441a      	add	r2, r3
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	22ff      	movs	r2, #255	; 0xff
 8007abe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	22ff      	movs	r2, #255	; 0xff
 8007ac6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8007aca:	683b      	ldr	r3, [r7, #0]
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d114      	bne.n	8007afa <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	691b      	ldr	r3, [r3, #16]
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	d01a      	beq.n	8007b0e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	3310      	adds	r3, #16
 8007adc:	4618      	mov	r0, r3
 8007ade:	f001 f9d5 	bl	8008e8c <xTaskRemoveFromEventList>
 8007ae2:	4603      	mov	r3, r0
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d012      	beq.n	8007b0e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8007ae8:	4b0c      	ldr	r3, [pc, #48]	; (8007b1c <xQueueGenericReset+0xcc>)
 8007aea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007aee:	601a      	str	r2, [r3, #0]
 8007af0:	f3bf 8f4f 	dsb	sy
 8007af4:	f3bf 8f6f 	isb	sy
 8007af8:	e009      	b.n	8007b0e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	3310      	adds	r3, #16
 8007afe:	4618      	mov	r0, r3
 8007b00:	f7ff fef2 	bl	80078e8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	3324      	adds	r3, #36	; 0x24
 8007b08:	4618      	mov	r0, r3
 8007b0a:	f7ff feed 	bl	80078e8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8007b0e:	f002 fa51 	bl	8009fb4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8007b12:	2301      	movs	r3, #1
}
 8007b14:	4618      	mov	r0, r3
 8007b16:	3710      	adds	r7, #16
 8007b18:	46bd      	mov	sp, r7
 8007b1a:	bd80      	pop	{r7, pc}
 8007b1c:	e000ed04 	.word	0xe000ed04

08007b20 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8007b20:	b580      	push	{r7, lr}
 8007b22:	b08e      	sub	sp, #56	; 0x38
 8007b24:	af02      	add	r7, sp, #8
 8007b26:	60f8      	str	r0, [r7, #12]
 8007b28:	60b9      	str	r1, [r7, #8]
 8007b2a:	607a      	str	r2, [r7, #4]
 8007b2c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d10a      	bne.n	8007b4a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8007b34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b38:	f383 8811 	msr	BASEPRI, r3
 8007b3c:	f3bf 8f6f 	isb	sy
 8007b40:	f3bf 8f4f 	dsb	sy
 8007b44:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007b46:	bf00      	nop
 8007b48:	e7fe      	b.n	8007b48 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8007b4a:	683b      	ldr	r3, [r7, #0]
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d10a      	bne.n	8007b66 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8007b50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b54:	f383 8811 	msr	BASEPRI, r3
 8007b58:	f3bf 8f6f 	isb	sy
 8007b5c:	f3bf 8f4f 	dsb	sy
 8007b60:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007b62:	bf00      	nop
 8007b64:	e7fe      	b.n	8007b64 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	d002      	beq.n	8007b72 <xQueueGenericCreateStatic+0x52>
 8007b6c:	68bb      	ldr	r3, [r7, #8]
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d001      	beq.n	8007b76 <xQueueGenericCreateStatic+0x56>
 8007b72:	2301      	movs	r3, #1
 8007b74:	e000      	b.n	8007b78 <xQueueGenericCreateStatic+0x58>
 8007b76:	2300      	movs	r3, #0
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	d10a      	bne.n	8007b92 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8007b7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b80:	f383 8811 	msr	BASEPRI, r3
 8007b84:	f3bf 8f6f 	isb	sy
 8007b88:	f3bf 8f4f 	dsb	sy
 8007b8c:	623b      	str	r3, [r7, #32]
}
 8007b8e:	bf00      	nop
 8007b90:	e7fe      	b.n	8007b90 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d102      	bne.n	8007b9e <xQueueGenericCreateStatic+0x7e>
 8007b98:	68bb      	ldr	r3, [r7, #8]
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d101      	bne.n	8007ba2 <xQueueGenericCreateStatic+0x82>
 8007b9e:	2301      	movs	r3, #1
 8007ba0:	e000      	b.n	8007ba4 <xQueueGenericCreateStatic+0x84>
 8007ba2:	2300      	movs	r3, #0
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	d10a      	bne.n	8007bbe <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8007ba8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bac:	f383 8811 	msr	BASEPRI, r3
 8007bb0:	f3bf 8f6f 	isb	sy
 8007bb4:	f3bf 8f4f 	dsb	sy
 8007bb8:	61fb      	str	r3, [r7, #28]
}
 8007bba:	bf00      	nop
 8007bbc:	e7fe      	b.n	8007bbc <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8007bbe:	2350      	movs	r3, #80	; 0x50
 8007bc0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8007bc2:	697b      	ldr	r3, [r7, #20]
 8007bc4:	2b50      	cmp	r3, #80	; 0x50
 8007bc6:	d00a      	beq.n	8007bde <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8007bc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bcc:	f383 8811 	msr	BASEPRI, r3
 8007bd0:	f3bf 8f6f 	isb	sy
 8007bd4:	f3bf 8f4f 	dsb	sy
 8007bd8:	61bb      	str	r3, [r7, #24]
}
 8007bda:	bf00      	nop
 8007bdc:	e7fe      	b.n	8007bdc <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8007bde:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007be0:	683b      	ldr	r3, [r7, #0]
 8007be2:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8007be4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d00d      	beq.n	8007c06 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8007bea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bec:	2201      	movs	r2, #1
 8007bee:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007bf2:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8007bf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bf8:	9300      	str	r3, [sp, #0]
 8007bfa:	4613      	mov	r3, r2
 8007bfc:	687a      	ldr	r2, [r7, #4]
 8007bfe:	68b9      	ldr	r1, [r7, #8]
 8007c00:	68f8      	ldr	r0, [r7, #12]
 8007c02:	f000 f83f 	bl	8007c84 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007c06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8007c08:	4618      	mov	r0, r3
 8007c0a:	3730      	adds	r7, #48	; 0x30
 8007c0c:	46bd      	mov	sp, r7
 8007c0e:	bd80      	pop	{r7, pc}

08007c10 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8007c10:	b580      	push	{r7, lr}
 8007c12:	b08a      	sub	sp, #40	; 0x28
 8007c14:	af02      	add	r7, sp, #8
 8007c16:	60f8      	str	r0, [r7, #12]
 8007c18:	60b9      	str	r1, [r7, #8]
 8007c1a:	4613      	mov	r3, r2
 8007c1c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	d10a      	bne.n	8007c3a <xQueueGenericCreate+0x2a>
	__asm volatile
 8007c24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c28:	f383 8811 	msr	BASEPRI, r3
 8007c2c:	f3bf 8f6f 	isb	sy
 8007c30:	f3bf 8f4f 	dsb	sy
 8007c34:	613b      	str	r3, [r7, #16]
}
 8007c36:	bf00      	nop
 8007c38:	e7fe      	b.n	8007c38 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	68ba      	ldr	r2, [r7, #8]
 8007c3e:	fb02 f303 	mul.w	r3, r2, r3
 8007c42:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8007c44:	69fb      	ldr	r3, [r7, #28]
 8007c46:	3350      	adds	r3, #80	; 0x50
 8007c48:	4618      	mov	r0, r3
 8007c4a:	f002 faa5 	bl	800a198 <pvPortMalloc>
 8007c4e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8007c50:	69bb      	ldr	r3, [r7, #24]
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d011      	beq.n	8007c7a <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8007c56:	69bb      	ldr	r3, [r7, #24]
 8007c58:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007c5a:	697b      	ldr	r3, [r7, #20]
 8007c5c:	3350      	adds	r3, #80	; 0x50
 8007c5e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8007c60:	69bb      	ldr	r3, [r7, #24]
 8007c62:	2200      	movs	r2, #0
 8007c64:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007c68:	79fa      	ldrb	r2, [r7, #7]
 8007c6a:	69bb      	ldr	r3, [r7, #24]
 8007c6c:	9300      	str	r3, [sp, #0]
 8007c6e:	4613      	mov	r3, r2
 8007c70:	697a      	ldr	r2, [r7, #20]
 8007c72:	68b9      	ldr	r1, [r7, #8]
 8007c74:	68f8      	ldr	r0, [r7, #12]
 8007c76:	f000 f805 	bl	8007c84 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007c7a:	69bb      	ldr	r3, [r7, #24]
	}
 8007c7c:	4618      	mov	r0, r3
 8007c7e:	3720      	adds	r7, #32
 8007c80:	46bd      	mov	sp, r7
 8007c82:	bd80      	pop	{r7, pc}

08007c84 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8007c84:	b580      	push	{r7, lr}
 8007c86:	b084      	sub	sp, #16
 8007c88:	af00      	add	r7, sp, #0
 8007c8a:	60f8      	str	r0, [r7, #12]
 8007c8c:	60b9      	str	r1, [r7, #8]
 8007c8e:	607a      	str	r2, [r7, #4]
 8007c90:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8007c92:	68bb      	ldr	r3, [r7, #8]
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d103      	bne.n	8007ca0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007c98:	69bb      	ldr	r3, [r7, #24]
 8007c9a:	69ba      	ldr	r2, [r7, #24]
 8007c9c:	601a      	str	r2, [r3, #0]
 8007c9e:	e002      	b.n	8007ca6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8007ca0:	69bb      	ldr	r3, [r7, #24]
 8007ca2:	687a      	ldr	r2, [r7, #4]
 8007ca4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8007ca6:	69bb      	ldr	r3, [r7, #24]
 8007ca8:	68fa      	ldr	r2, [r7, #12]
 8007caa:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8007cac:	69bb      	ldr	r3, [r7, #24]
 8007cae:	68ba      	ldr	r2, [r7, #8]
 8007cb0:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007cb2:	2101      	movs	r1, #1
 8007cb4:	69b8      	ldr	r0, [r7, #24]
 8007cb6:	f7ff fecb 	bl	8007a50 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8007cba:	69bb      	ldr	r3, [r7, #24]
 8007cbc:	78fa      	ldrb	r2, [r7, #3]
 8007cbe:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8007cc2:	bf00      	nop
 8007cc4:	3710      	adds	r7, #16
 8007cc6:	46bd      	mov	sp, r7
 8007cc8:	bd80      	pop	{r7, pc}
	...

08007ccc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8007ccc:	b580      	push	{r7, lr}
 8007cce:	b08e      	sub	sp, #56	; 0x38
 8007cd0:	af00      	add	r7, sp, #0
 8007cd2:	60f8      	str	r0, [r7, #12]
 8007cd4:	60b9      	str	r1, [r7, #8]
 8007cd6:	607a      	str	r2, [r7, #4]
 8007cd8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8007cda:	2300      	movs	r3, #0
 8007cdc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007ce2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	d10a      	bne.n	8007cfe <xQueueGenericSend+0x32>
	__asm volatile
 8007ce8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cec:	f383 8811 	msr	BASEPRI, r3
 8007cf0:	f3bf 8f6f 	isb	sy
 8007cf4:	f3bf 8f4f 	dsb	sy
 8007cf8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007cfa:	bf00      	nop
 8007cfc:	e7fe      	b.n	8007cfc <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007cfe:	68bb      	ldr	r3, [r7, #8]
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d103      	bne.n	8007d0c <xQueueGenericSend+0x40>
 8007d04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	d101      	bne.n	8007d10 <xQueueGenericSend+0x44>
 8007d0c:	2301      	movs	r3, #1
 8007d0e:	e000      	b.n	8007d12 <xQueueGenericSend+0x46>
 8007d10:	2300      	movs	r3, #0
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d10a      	bne.n	8007d2c <xQueueGenericSend+0x60>
	__asm volatile
 8007d16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d1a:	f383 8811 	msr	BASEPRI, r3
 8007d1e:	f3bf 8f6f 	isb	sy
 8007d22:	f3bf 8f4f 	dsb	sy
 8007d26:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007d28:	bf00      	nop
 8007d2a:	e7fe      	b.n	8007d2a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007d2c:	683b      	ldr	r3, [r7, #0]
 8007d2e:	2b02      	cmp	r3, #2
 8007d30:	d103      	bne.n	8007d3a <xQueueGenericSend+0x6e>
 8007d32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d36:	2b01      	cmp	r3, #1
 8007d38:	d101      	bne.n	8007d3e <xQueueGenericSend+0x72>
 8007d3a:	2301      	movs	r3, #1
 8007d3c:	e000      	b.n	8007d40 <xQueueGenericSend+0x74>
 8007d3e:	2300      	movs	r3, #0
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	d10a      	bne.n	8007d5a <xQueueGenericSend+0x8e>
	__asm volatile
 8007d44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d48:	f383 8811 	msr	BASEPRI, r3
 8007d4c:	f3bf 8f6f 	isb	sy
 8007d50:	f3bf 8f4f 	dsb	sy
 8007d54:	623b      	str	r3, [r7, #32]
}
 8007d56:	bf00      	nop
 8007d58:	e7fe      	b.n	8007d58 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007d5a:	f001 fa59 	bl	8009210 <xTaskGetSchedulerState>
 8007d5e:	4603      	mov	r3, r0
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d102      	bne.n	8007d6a <xQueueGenericSend+0x9e>
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d101      	bne.n	8007d6e <xQueueGenericSend+0xa2>
 8007d6a:	2301      	movs	r3, #1
 8007d6c:	e000      	b.n	8007d70 <xQueueGenericSend+0xa4>
 8007d6e:	2300      	movs	r3, #0
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	d10a      	bne.n	8007d8a <xQueueGenericSend+0xbe>
	__asm volatile
 8007d74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d78:	f383 8811 	msr	BASEPRI, r3
 8007d7c:	f3bf 8f6f 	isb	sy
 8007d80:	f3bf 8f4f 	dsb	sy
 8007d84:	61fb      	str	r3, [r7, #28]
}
 8007d86:	bf00      	nop
 8007d88:	e7fe      	b.n	8007d88 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007d8a:	f002 f8e3 	bl	8009f54 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007d8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d90:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007d92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d96:	429a      	cmp	r2, r3
 8007d98:	d302      	bcc.n	8007da0 <xQueueGenericSend+0xd4>
 8007d9a:	683b      	ldr	r3, [r7, #0]
 8007d9c:	2b02      	cmp	r3, #2
 8007d9e:	d129      	bne.n	8007df4 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007da0:	683a      	ldr	r2, [r7, #0]
 8007da2:	68b9      	ldr	r1, [r7, #8]
 8007da4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007da6:	f000 fa0b 	bl	80081c0 <prvCopyDataToQueue>
 8007daa:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007dac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007dae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	d010      	beq.n	8007dd6 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007db4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007db6:	3324      	adds	r3, #36	; 0x24
 8007db8:	4618      	mov	r0, r3
 8007dba:	f001 f867 	bl	8008e8c <xTaskRemoveFromEventList>
 8007dbe:	4603      	mov	r3, r0
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	d013      	beq.n	8007dec <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8007dc4:	4b3f      	ldr	r3, [pc, #252]	; (8007ec4 <xQueueGenericSend+0x1f8>)
 8007dc6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007dca:	601a      	str	r2, [r3, #0]
 8007dcc:	f3bf 8f4f 	dsb	sy
 8007dd0:	f3bf 8f6f 	isb	sy
 8007dd4:	e00a      	b.n	8007dec <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8007dd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	d007      	beq.n	8007dec <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8007ddc:	4b39      	ldr	r3, [pc, #228]	; (8007ec4 <xQueueGenericSend+0x1f8>)
 8007dde:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007de2:	601a      	str	r2, [r3, #0]
 8007de4:	f3bf 8f4f 	dsb	sy
 8007de8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8007dec:	f002 f8e2 	bl	8009fb4 <vPortExitCritical>
				return pdPASS;
 8007df0:	2301      	movs	r3, #1
 8007df2:	e063      	b.n	8007ebc <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d103      	bne.n	8007e02 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007dfa:	f002 f8db 	bl	8009fb4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8007dfe:	2300      	movs	r3, #0
 8007e00:	e05c      	b.n	8007ebc <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007e02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d106      	bne.n	8007e16 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007e08:	f107 0314 	add.w	r3, r7, #20
 8007e0c:	4618      	mov	r0, r3
 8007e0e:	f001 f8a1 	bl	8008f54 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007e12:	2301      	movs	r3, #1
 8007e14:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007e16:	f002 f8cd 	bl	8009fb4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007e1a:	f000 fe0d 	bl	8008a38 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007e1e:	f002 f899 	bl	8009f54 <vPortEnterCritical>
 8007e22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e24:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007e28:	b25b      	sxtb	r3, r3
 8007e2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e2e:	d103      	bne.n	8007e38 <xQueueGenericSend+0x16c>
 8007e30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e32:	2200      	movs	r2, #0
 8007e34:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007e38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e3a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007e3e:	b25b      	sxtb	r3, r3
 8007e40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e44:	d103      	bne.n	8007e4e <xQueueGenericSend+0x182>
 8007e46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e48:	2200      	movs	r2, #0
 8007e4a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007e4e:	f002 f8b1 	bl	8009fb4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007e52:	1d3a      	adds	r2, r7, #4
 8007e54:	f107 0314 	add.w	r3, r7, #20
 8007e58:	4611      	mov	r1, r2
 8007e5a:	4618      	mov	r0, r3
 8007e5c:	f001 f890 	bl	8008f80 <xTaskCheckForTimeOut>
 8007e60:	4603      	mov	r3, r0
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	d124      	bne.n	8007eb0 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8007e66:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007e68:	f000 faa2 	bl	80083b0 <prvIsQueueFull>
 8007e6c:	4603      	mov	r3, r0
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	d018      	beq.n	8007ea4 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8007e72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e74:	3310      	adds	r3, #16
 8007e76:	687a      	ldr	r2, [r7, #4]
 8007e78:	4611      	mov	r1, r2
 8007e7a:	4618      	mov	r0, r3
 8007e7c:	f000 ffb6 	bl	8008dec <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8007e80:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007e82:	f000 fa2d 	bl	80082e0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8007e86:	f000 fde5 	bl	8008a54 <xTaskResumeAll>
 8007e8a:	4603      	mov	r3, r0
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	f47f af7c 	bne.w	8007d8a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8007e92:	4b0c      	ldr	r3, [pc, #48]	; (8007ec4 <xQueueGenericSend+0x1f8>)
 8007e94:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007e98:	601a      	str	r2, [r3, #0]
 8007e9a:	f3bf 8f4f 	dsb	sy
 8007e9e:	f3bf 8f6f 	isb	sy
 8007ea2:	e772      	b.n	8007d8a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8007ea4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007ea6:	f000 fa1b 	bl	80082e0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007eaa:	f000 fdd3 	bl	8008a54 <xTaskResumeAll>
 8007eae:	e76c      	b.n	8007d8a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8007eb0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007eb2:	f000 fa15 	bl	80082e0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007eb6:	f000 fdcd 	bl	8008a54 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8007eba:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8007ebc:	4618      	mov	r0, r3
 8007ebe:	3738      	adds	r7, #56	; 0x38
 8007ec0:	46bd      	mov	sp, r7
 8007ec2:	bd80      	pop	{r7, pc}
 8007ec4:	e000ed04 	.word	0xe000ed04

08007ec8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8007ec8:	b580      	push	{r7, lr}
 8007eca:	b090      	sub	sp, #64	; 0x40
 8007ecc:	af00      	add	r7, sp, #0
 8007ece:	60f8      	str	r0, [r7, #12]
 8007ed0:	60b9      	str	r1, [r7, #8]
 8007ed2:	607a      	str	r2, [r7, #4]
 8007ed4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8007eda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	d10a      	bne.n	8007ef6 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8007ee0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ee4:	f383 8811 	msr	BASEPRI, r3
 8007ee8:	f3bf 8f6f 	isb	sy
 8007eec:	f3bf 8f4f 	dsb	sy
 8007ef0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007ef2:	bf00      	nop
 8007ef4:	e7fe      	b.n	8007ef4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007ef6:	68bb      	ldr	r3, [r7, #8]
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	d103      	bne.n	8007f04 <xQueueGenericSendFromISR+0x3c>
 8007efc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007efe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	d101      	bne.n	8007f08 <xQueueGenericSendFromISR+0x40>
 8007f04:	2301      	movs	r3, #1
 8007f06:	e000      	b.n	8007f0a <xQueueGenericSendFromISR+0x42>
 8007f08:	2300      	movs	r3, #0
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	d10a      	bne.n	8007f24 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8007f0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f12:	f383 8811 	msr	BASEPRI, r3
 8007f16:	f3bf 8f6f 	isb	sy
 8007f1a:	f3bf 8f4f 	dsb	sy
 8007f1e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007f20:	bf00      	nop
 8007f22:	e7fe      	b.n	8007f22 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007f24:	683b      	ldr	r3, [r7, #0]
 8007f26:	2b02      	cmp	r3, #2
 8007f28:	d103      	bne.n	8007f32 <xQueueGenericSendFromISR+0x6a>
 8007f2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007f2e:	2b01      	cmp	r3, #1
 8007f30:	d101      	bne.n	8007f36 <xQueueGenericSendFromISR+0x6e>
 8007f32:	2301      	movs	r3, #1
 8007f34:	e000      	b.n	8007f38 <xQueueGenericSendFromISR+0x70>
 8007f36:	2300      	movs	r3, #0
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	d10a      	bne.n	8007f52 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8007f3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f40:	f383 8811 	msr	BASEPRI, r3
 8007f44:	f3bf 8f6f 	isb	sy
 8007f48:	f3bf 8f4f 	dsb	sy
 8007f4c:	623b      	str	r3, [r7, #32]
}
 8007f4e:	bf00      	nop
 8007f50:	e7fe      	b.n	8007f50 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007f52:	f002 f8e1 	bl	800a118 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8007f56:	f3ef 8211 	mrs	r2, BASEPRI
 8007f5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f5e:	f383 8811 	msr	BASEPRI, r3
 8007f62:	f3bf 8f6f 	isb	sy
 8007f66:	f3bf 8f4f 	dsb	sy
 8007f6a:	61fa      	str	r2, [r7, #28]
 8007f6c:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8007f6e:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007f70:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007f72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f74:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007f76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007f7a:	429a      	cmp	r2, r3
 8007f7c:	d302      	bcc.n	8007f84 <xQueueGenericSendFromISR+0xbc>
 8007f7e:	683b      	ldr	r3, [r7, #0]
 8007f80:	2b02      	cmp	r3, #2
 8007f82:	d12f      	bne.n	8007fe4 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007f84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f86:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007f8a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007f8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f92:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007f94:	683a      	ldr	r2, [r7, #0]
 8007f96:	68b9      	ldr	r1, [r7, #8]
 8007f98:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007f9a:	f000 f911 	bl	80081c0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007f9e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8007fa2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007fa6:	d112      	bne.n	8007fce <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007fa8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007faa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	d016      	beq.n	8007fde <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007fb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fb2:	3324      	adds	r3, #36	; 0x24
 8007fb4:	4618      	mov	r0, r3
 8007fb6:	f000 ff69 	bl	8008e8c <xTaskRemoveFromEventList>
 8007fba:	4603      	mov	r3, r0
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	d00e      	beq.n	8007fde <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	d00b      	beq.n	8007fde <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	2201      	movs	r2, #1
 8007fca:	601a      	str	r2, [r3, #0]
 8007fcc:	e007      	b.n	8007fde <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007fce:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8007fd2:	3301      	adds	r3, #1
 8007fd4:	b2db      	uxtb	r3, r3
 8007fd6:	b25a      	sxtb	r2, r3
 8007fd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fda:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8007fde:	2301      	movs	r3, #1
 8007fe0:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8007fe2:	e001      	b.n	8007fe8 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007fe4:	2300      	movs	r3, #0
 8007fe6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007fe8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007fea:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007fec:	697b      	ldr	r3, [r7, #20]
 8007fee:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8007ff2:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007ff4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8007ff6:	4618      	mov	r0, r3
 8007ff8:	3740      	adds	r7, #64	; 0x40
 8007ffa:	46bd      	mov	sp, r7
 8007ffc:	bd80      	pop	{r7, pc}
	...

08008000 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8008000:	b580      	push	{r7, lr}
 8008002:	b08c      	sub	sp, #48	; 0x30
 8008004:	af00      	add	r7, sp, #0
 8008006:	60f8      	str	r0, [r7, #12]
 8008008:	60b9      	str	r1, [r7, #8]
 800800a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800800c:	2300      	movs	r3, #0
 800800e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008014:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008016:	2b00      	cmp	r3, #0
 8008018:	d10a      	bne.n	8008030 <xQueueReceive+0x30>
	__asm volatile
 800801a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800801e:	f383 8811 	msr	BASEPRI, r3
 8008022:	f3bf 8f6f 	isb	sy
 8008026:	f3bf 8f4f 	dsb	sy
 800802a:	623b      	str	r3, [r7, #32]
}
 800802c:	bf00      	nop
 800802e:	e7fe      	b.n	800802e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008030:	68bb      	ldr	r3, [r7, #8]
 8008032:	2b00      	cmp	r3, #0
 8008034:	d103      	bne.n	800803e <xQueueReceive+0x3e>
 8008036:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008038:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800803a:	2b00      	cmp	r3, #0
 800803c:	d101      	bne.n	8008042 <xQueueReceive+0x42>
 800803e:	2301      	movs	r3, #1
 8008040:	e000      	b.n	8008044 <xQueueReceive+0x44>
 8008042:	2300      	movs	r3, #0
 8008044:	2b00      	cmp	r3, #0
 8008046:	d10a      	bne.n	800805e <xQueueReceive+0x5e>
	__asm volatile
 8008048:	f04f 0350 	mov.w	r3, #80	; 0x50
 800804c:	f383 8811 	msr	BASEPRI, r3
 8008050:	f3bf 8f6f 	isb	sy
 8008054:	f3bf 8f4f 	dsb	sy
 8008058:	61fb      	str	r3, [r7, #28]
}
 800805a:	bf00      	nop
 800805c:	e7fe      	b.n	800805c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800805e:	f001 f8d7 	bl	8009210 <xTaskGetSchedulerState>
 8008062:	4603      	mov	r3, r0
 8008064:	2b00      	cmp	r3, #0
 8008066:	d102      	bne.n	800806e <xQueueReceive+0x6e>
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	2b00      	cmp	r3, #0
 800806c:	d101      	bne.n	8008072 <xQueueReceive+0x72>
 800806e:	2301      	movs	r3, #1
 8008070:	e000      	b.n	8008074 <xQueueReceive+0x74>
 8008072:	2300      	movs	r3, #0
 8008074:	2b00      	cmp	r3, #0
 8008076:	d10a      	bne.n	800808e <xQueueReceive+0x8e>
	__asm volatile
 8008078:	f04f 0350 	mov.w	r3, #80	; 0x50
 800807c:	f383 8811 	msr	BASEPRI, r3
 8008080:	f3bf 8f6f 	isb	sy
 8008084:	f3bf 8f4f 	dsb	sy
 8008088:	61bb      	str	r3, [r7, #24]
}
 800808a:	bf00      	nop
 800808c:	e7fe      	b.n	800808c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800808e:	f001 ff61 	bl	8009f54 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008092:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008094:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008096:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008098:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800809a:	2b00      	cmp	r3, #0
 800809c:	d01f      	beq.n	80080de <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800809e:	68b9      	ldr	r1, [r7, #8]
 80080a0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80080a2:	f000 f8f7 	bl	8008294 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80080a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080a8:	1e5a      	subs	r2, r3, #1
 80080aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080ac:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80080ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080b0:	691b      	ldr	r3, [r3, #16]
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	d00f      	beq.n	80080d6 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80080b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080b8:	3310      	adds	r3, #16
 80080ba:	4618      	mov	r0, r3
 80080bc:	f000 fee6 	bl	8008e8c <xTaskRemoveFromEventList>
 80080c0:	4603      	mov	r3, r0
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	d007      	beq.n	80080d6 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80080c6:	4b3d      	ldr	r3, [pc, #244]	; (80081bc <xQueueReceive+0x1bc>)
 80080c8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80080cc:	601a      	str	r2, [r3, #0]
 80080ce:	f3bf 8f4f 	dsb	sy
 80080d2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80080d6:	f001 ff6d 	bl	8009fb4 <vPortExitCritical>
				return pdPASS;
 80080da:	2301      	movs	r3, #1
 80080dc:	e069      	b.n	80081b2 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	d103      	bne.n	80080ec <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80080e4:	f001 ff66 	bl	8009fb4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80080e8:	2300      	movs	r3, #0
 80080ea:	e062      	b.n	80081b2 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80080ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	d106      	bne.n	8008100 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80080f2:	f107 0310 	add.w	r3, r7, #16
 80080f6:	4618      	mov	r0, r3
 80080f8:	f000 ff2c 	bl	8008f54 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80080fc:	2301      	movs	r3, #1
 80080fe:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008100:	f001 ff58 	bl	8009fb4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008104:	f000 fc98 	bl	8008a38 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008108:	f001 ff24 	bl	8009f54 <vPortEnterCritical>
 800810c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800810e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008112:	b25b      	sxtb	r3, r3
 8008114:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008118:	d103      	bne.n	8008122 <xQueueReceive+0x122>
 800811a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800811c:	2200      	movs	r2, #0
 800811e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008122:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008124:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008128:	b25b      	sxtb	r3, r3
 800812a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800812e:	d103      	bne.n	8008138 <xQueueReceive+0x138>
 8008130:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008132:	2200      	movs	r2, #0
 8008134:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008138:	f001 ff3c 	bl	8009fb4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800813c:	1d3a      	adds	r2, r7, #4
 800813e:	f107 0310 	add.w	r3, r7, #16
 8008142:	4611      	mov	r1, r2
 8008144:	4618      	mov	r0, r3
 8008146:	f000 ff1b 	bl	8008f80 <xTaskCheckForTimeOut>
 800814a:	4603      	mov	r3, r0
 800814c:	2b00      	cmp	r3, #0
 800814e:	d123      	bne.n	8008198 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008150:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008152:	f000 f917 	bl	8008384 <prvIsQueueEmpty>
 8008156:	4603      	mov	r3, r0
 8008158:	2b00      	cmp	r3, #0
 800815a:	d017      	beq.n	800818c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800815c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800815e:	3324      	adds	r3, #36	; 0x24
 8008160:	687a      	ldr	r2, [r7, #4]
 8008162:	4611      	mov	r1, r2
 8008164:	4618      	mov	r0, r3
 8008166:	f000 fe41 	bl	8008dec <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800816a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800816c:	f000 f8b8 	bl	80082e0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008170:	f000 fc70 	bl	8008a54 <xTaskResumeAll>
 8008174:	4603      	mov	r3, r0
 8008176:	2b00      	cmp	r3, #0
 8008178:	d189      	bne.n	800808e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800817a:	4b10      	ldr	r3, [pc, #64]	; (80081bc <xQueueReceive+0x1bc>)
 800817c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008180:	601a      	str	r2, [r3, #0]
 8008182:	f3bf 8f4f 	dsb	sy
 8008186:	f3bf 8f6f 	isb	sy
 800818a:	e780      	b.n	800808e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800818c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800818e:	f000 f8a7 	bl	80082e0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008192:	f000 fc5f 	bl	8008a54 <xTaskResumeAll>
 8008196:	e77a      	b.n	800808e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8008198:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800819a:	f000 f8a1 	bl	80082e0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800819e:	f000 fc59 	bl	8008a54 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80081a2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80081a4:	f000 f8ee 	bl	8008384 <prvIsQueueEmpty>
 80081a8:	4603      	mov	r3, r0
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	f43f af6f 	beq.w	800808e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80081b0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80081b2:	4618      	mov	r0, r3
 80081b4:	3730      	adds	r7, #48	; 0x30
 80081b6:	46bd      	mov	sp, r7
 80081b8:	bd80      	pop	{r7, pc}
 80081ba:	bf00      	nop
 80081bc:	e000ed04 	.word	0xe000ed04

080081c0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80081c0:	b580      	push	{r7, lr}
 80081c2:	b086      	sub	sp, #24
 80081c4:	af00      	add	r7, sp, #0
 80081c6:	60f8      	str	r0, [r7, #12]
 80081c8:	60b9      	str	r1, [r7, #8]
 80081ca:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80081cc:	2300      	movs	r3, #0
 80081ce:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80081d4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d10d      	bne.n	80081fa <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	d14d      	bne.n	8008282 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	689b      	ldr	r3, [r3, #8]
 80081ea:	4618      	mov	r0, r3
 80081ec:	f001 f82e 	bl	800924c <xTaskPriorityDisinherit>
 80081f0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	2200      	movs	r2, #0
 80081f6:	609a      	str	r2, [r3, #8]
 80081f8:	e043      	b.n	8008282 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	d119      	bne.n	8008234 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	6858      	ldr	r0, [r3, #4]
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008208:	461a      	mov	r2, r3
 800820a:	68b9      	ldr	r1, [r7, #8]
 800820c:	f002 fad1 	bl	800a7b2 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	685a      	ldr	r2, [r3, #4]
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008218:	441a      	add	r2, r3
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	685a      	ldr	r2, [r3, #4]
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	689b      	ldr	r3, [r3, #8]
 8008226:	429a      	cmp	r2, r3
 8008228:	d32b      	bcc.n	8008282 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	681a      	ldr	r2, [r3, #0]
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	605a      	str	r2, [r3, #4]
 8008232:	e026      	b.n	8008282 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8008234:	68fb      	ldr	r3, [r7, #12]
 8008236:	68d8      	ldr	r0, [r3, #12]
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800823c:	461a      	mov	r2, r3
 800823e:	68b9      	ldr	r1, [r7, #8]
 8008240:	f002 fab7 	bl	800a7b2 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8008244:	68fb      	ldr	r3, [r7, #12]
 8008246:	68da      	ldr	r2, [r3, #12]
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800824c:	425b      	negs	r3, r3
 800824e:	441a      	add	r2, r3
 8008250:	68fb      	ldr	r3, [r7, #12]
 8008252:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	68da      	ldr	r2, [r3, #12]
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	429a      	cmp	r2, r3
 800825e:	d207      	bcs.n	8008270 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	689a      	ldr	r2, [r3, #8]
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008268:	425b      	negs	r3, r3
 800826a:	441a      	add	r2, r3
 800826c:	68fb      	ldr	r3, [r7, #12]
 800826e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	2b02      	cmp	r3, #2
 8008274:	d105      	bne.n	8008282 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008276:	693b      	ldr	r3, [r7, #16]
 8008278:	2b00      	cmp	r3, #0
 800827a:	d002      	beq.n	8008282 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800827c:	693b      	ldr	r3, [r7, #16]
 800827e:	3b01      	subs	r3, #1
 8008280:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008282:	693b      	ldr	r3, [r7, #16]
 8008284:	1c5a      	adds	r2, r3, #1
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800828a:	697b      	ldr	r3, [r7, #20]
}
 800828c:	4618      	mov	r0, r3
 800828e:	3718      	adds	r7, #24
 8008290:	46bd      	mov	sp, r7
 8008292:	bd80      	pop	{r7, pc}

08008294 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8008294:	b580      	push	{r7, lr}
 8008296:	b082      	sub	sp, #8
 8008298:	af00      	add	r7, sp, #0
 800829a:	6078      	str	r0, [r7, #4]
 800829c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	d018      	beq.n	80082d8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	68da      	ldr	r2, [r3, #12]
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082ae:	441a      	add	r2, r3
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	68da      	ldr	r2, [r3, #12]
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	689b      	ldr	r3, [r3, #8]
 80082bc:	429a      	cmp	r2, r3
 80082be:	d303      	bcc.n	80082c8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	681a      	ldr	r2, [r3, #0]
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	68d9      	ldr	r1, [r3, #12]
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082d0:	461a      	mov	r2, r3
 80082d2:	6838      	ldr	r0, [r7, #0]
 80082d4:	f002 fa6d 	bl	800a7b2 <memcpy>
	}
}
 80082d8:	bf00      	nop
 80082da:	3708      	adds	r7, #8
 80082dc:	46bd      	mov	sp, r7
 80082de:	bd80      	pop	{r7, pc}

080082e0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80082e0:	b580      	push	{r7, lr}
 80082e2:	b084      	sub	sp, #16
 80082e4:	af00      	add	r7, sp, #0
 80082e6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80082e8:	f001 fe34 	bl	8009f54 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80082f2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80082f4:	e011      	b.n	800831a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	d012      	beq.n	8008324 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	3324      	adds	r3, #36	; 0x24
 8008302:	4618      	mov	r0, r3
 8008304:	f000 fdc2 	bl	8008e8c <xTaskRemoveFromEventList>
 8008308:	4603      	mov	r3, r0
 800830a:	2b00      	cmp	r3, #0
 800830c:	d001      	beq.n	8008312 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800830e:	f000 fe99 	bl	8009044 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8008312:	7bfb      	ldrb	r3, [r7, #15]
 8008314:	3b01      	subs	r3, #1
 8008316:	b2db      	uxtb	r3, r3
 8008318:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800831a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800831e:	2b00      	cmp	r3, #0
 8008320:	dce9      	bgt.n	80082f6 <prvUnlockQueue+0x16>
 8008322:	e000      	b.n	8008326 <prvUnlockQueue+0x46>
					break;
 8008324:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	22ff      	movs	r2, #255	; 0xff
 800832a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800832e:	f001 fe41 	bl	8009fb4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8008332:	f001 fe0f 	bl	8009f54 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800833c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800833e:	e011      	b.n	8008364 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	691b      	ldr	r3, [r3, #16]
 8008344:	2b00      	cmp	r3, #0
 8008346:	d012      	beq.n	800836e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	3310      	adds	r3, #16
 800834c:	4618      	mov	r0, r3
 800834e:	f000 fd9d 	bl	8008e8c <xTaskRemoveFromEventList>
 8008352:	4603      	mov	r3, r0
 8008354:	2b00      	cmp	r3, #0
 8008356:	d001      	beq.n	800835c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8008358:	f000 fe74 	bl	8009044 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800835c:	7bbb      	ldrb	r3, [r7, #14]
 800835e:	3b01      	subs	r3, #1
 8008360:	b2db      	uxtb	r3, r3
 8008362:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008364:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008368:	2b00      	cmp	r3, #0
 800836a:	dce9      	bgt.n	8008340 <prvUnlockQueue+0x60>
 800836c:	e000      	b.n	8008370 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800836e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	22ff      	movs	r2, #255	; 0xff
 8008374:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8008378:	f001 fe1c 	bl	8009fb4 <vPortExitCritical>
}
 800837c:	bf00      	nop
 800837e:	3710      	adds	r7, #16
 8008380:	46bd      	mov	sp, r7
 8008382:	bd80      	pop	{r7, pc}

08008384 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8008384:	b580      	push	{r7, lr}
 8008386:	b084      	sub	sp, #16
 8008388:	af00      	add	r7, sp, #0
 800838a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800838c:	f001 fde2 	bl	8009f54 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008394:	2b00      	cmp	r3, #0
 8008396:	d102      	bne.n	800839e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8008398:	2301      	movs	r3, #1
 800839a:	60fb      	str	r3, [r7, #12]
 800839c:	e001      	b.n	80083a2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800839e:	2300      	movs	r3, #0
 80083a0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80083a2:	f001 fe07 	bl	8009fb4 <vPortExitCritical>

	return xReturn;
 80083a6:	68fb      	ldr	r3, [r7, #12]
}
 80083a8:	4618      	mov	r0, r3
 80083aa:	3710      	adds	r7, #16
 80083ac:	46bd      	mov	sp, r7
 80083ae:	bd80      	pop	{r7, pc}

080083b0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80083b0:	b580      	push	{r7, lr}
 80083b2:	b084      	sub	sp, #16
 80083b4:	af00      	add	r7, sp, #0
 80083b6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80083b8:	f001 fdcc 	bl	8009f54 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80083c4:	429a      	cmp	r2, r3
 80083c6:	d102      	bne.n	80083ce <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80083c8:	2301      	movs	r3, #1
 80083ca:	60fb      	str	r3, [r7, #12]
 80083cc:	e001      	b.n	80083d2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80083ce:	2300      	movs	r3, #0
 80083d0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80083d2:	f001 fdef 	bl	8009fb4 <vPortExitCritical>

	return xReturn;
 80083d6:	68fb      	ldr	r3, [r7, #12]
}
 80083d8:	4618      	mov	r0, r3
 80083da:	3710      	adds	r7, #16
 80083dc:	46bd      	mov	sp, r7
 80083de:	bd80      	pop	{r7, pc}

080083e0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80083e0:	b480      	push	{r7}
 80083e2:	b085      	sub	sp, #20
 80083e4:	af00      	add	r7, sp, #0
 80083e6:	6078      	str	r0, [r7, #4]
 80083e8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80083ea:	2300      	movs	r3, #0
 80083ec:	60fb      	str	r3, [r7, #12]
 80083ee:	e014      	b.n	800841a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80083f0:	4a0f      	ldr	r2, [pc, #60]	; (8008430 <vQueueAddToRegistry+0x50>)
 80083f2:	68fb      	ldr	r3, [r7, #12]
 80083f4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	d10b      	bne.n	8008414 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80083fc:	490c      	ldr	r1, [pc, #48]	; (8008430 <vQueueAddToRegistry+0x50>)
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	683a      	ldr	r2, [r7, #0]
 8008402:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8008406:	4a0a      	ldr	r2, [pc, #40]	; (8008430 <vQueueAddToRegistry+0x50>)
 8008408:	68fb      	ldr	r3, [r7, #12]
 800840a:	00db      	lsls	r3, r3, #3
 800840c:	4413      	add	r3, r2
 800840e:	687a      	ldr	r2, [r7, #4]
 8008410:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8008412:	e006      	b.n	8008422 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	3301      	adds	r3, #1
 8008418:	60fb      	str	r3, [r7, #12]
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	2b07      	cmp	r3, #7
 800841e:	d9e7      	bls.n	80083f0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8008420:	bf00      	nop
 8008422:	bf00      	nop
 8008424:	3714      	adds	r7, #20
 8008426:	46bd      	mov	sp, r7
 8008428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800842c:	4770      	bx	lr
 800842e:	bf00      	nop
 8008430:	200030a4 	.word	0x200030a4

08008434 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008434:	b580      	push	{r7, lr}
 8008436:	b086      	sub	sp, #24
 8008438:	af00      	add	r7, sp, #0
 800843a:	60f8      	str	r0, [r7, #12]
 800843c:	60b9      	str	r1, [r7, #8]
 800843e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8008440:	68fb      	ldr	r3, [r7, #12]
 8008442:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8008444:	f001 fd86 	bl	8009f54 <vPortEnterCritical>
 8008448:	697b      	ldr	r3, [r7, #20]
 800844a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800844e:	b25b      	sxtb	r3, r3
 8008450:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008454:	d103      	bne.n	800845e <vQueueWaitForMessageRestricted+0x2a>
 8008456:	697b      	ldr	r3, [r7, #20]
 8008458:	2200      	movs	r2, #0
 800845a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800845e:	697b      	ldr	r3, [r7, #20]
 8008460:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008464:	b25b      	sxtb	r3, r3
 8008466:	f1b3 3fff 	cmp.w	r3, #4294967295
 800846a:	d103      	bne.n	8008474 <vQueueWaitForMessageRestricted+0x40>
 800846c:	697b      	ldr	r3, [r7, #20]
 800846e:	2200      	movs	r2, #0
 8008470:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008474:	f001 fd9e 	bl	8009fb4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8008478:	697b      	ldr	r3, [r7, #20]
 800847a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800847c:	2b00      	cmp	r3, #0
 800847e:	d106      	bne.n	800848e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8008480:	697b      	ldr	r3, [r7, #20]
 8008482:	3324      	adds	r3, #36	; 0x24
 8008484:	687a      	ldr	r2, [r7, #4]
 8008486:	68b9      	ldr	r1, [r7, #8]
 8008488:	4618      	mov	r0, r3
 800848a:	f000 fcd3 	bl	8008e34 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800848e:	6978      	ldr	r0, [r7, #20]
 8008490:	f7ff ff26 	bl	80082e0 <prvUnlockQueue>
	}
 8008494:	bf00      	nop
 8008496:	3718      	adds	r7, #24
 8008498:	46bd      	mov	sp, r7
 800849a:	bd80      	pop	{r7, pc}

0800849c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800849c:	b580      	push	{r7, lr}
 800849e:	b08e      	sub	sp, #56	; 0x38
 80084a0:	af04      	add	r7, sp, #16
 80084a2:	60f8      	str	r0, [r7, #12]
 80084a4:	60b9      	str	r1, [r7, #8]
 80084a6:	607a      	str	r2, [r7, #4]
 80084a8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80084aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80084ac:	2b00      	cmp	r3, #0
 80084ae:	d10a      	bne.n	80084c6 <xTaskCreateStatic+0x2a>
	__asm volatile
 80084b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084b4:	f383 8811 	msr	BASEPRI, r3
 80084b8:	f3bf 8f6f 	isb	sy
 80084bc:	f3bf 8f4f 	dsb	sy
 80084c0:	623b      	str	r3, [r7, #32]
}
 80084c2:	bf00      	nop
 80084c4:	e7fe      	b.n	80084c4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80084c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	d10a      	bne.n	80084e2 <xTaskCreateStatic+0x46>
	__asm volatile
 80084cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084d0:	f383 8811 	msr	BASEPRI, r3
 80084d4:	f3bf 8f6f 	isb	sy
 80084d8:	f3bf 8f4f 	dsb	sy
 80084dc:	61fb      	str	r3, [r7, #28]
}
 80084de:	bf00      	nop
 80084e0:	e7fe      	b.n	80084e0 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80084e2:	23bc      	movs	r3, #188	; 0xbc
 80084e4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80084e6:	693b      	ldr	r3, [r7, #16]
 80084e8:	2bbc      	cmp	r3, #188	; 0xbc
 80084ea:	d00a      	beq.n	8008502 <xTaskCreateStatic+0x66>
	__asm volatile
 80084ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084f0:	f383 8811 	msr	BASEPRI, r3
 80084f4:	f3bf 8f6f 	isb	sy
 80084f8:	f3bf 8f4f 	dsb	sy
 80084fc:	61bb      	str	r3, [r7, #24]
}
 80084fe:	bf00      	nop
 8008500:	e7fe      	b.n	8008500 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8008502:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8008504:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008506:	2b00      	cmp	r3, #0
 8008508:	d01e      	beq.n	8008548 <xTaskCreateStatic+0xac>
 800850a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800850c:	2b00      	cmp	r3, #0
 800850e:	d01b      	beq.n	8008548 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008510:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008512:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008514:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008516:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008518:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800851a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800851c:	2202      	movs	r2, #2
 800851e:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8008522:	2300      	movs	r3, #0
 8008524:	9303      	str	r3, [sp, #12]
 8008526:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008528:	9302      	str	r3, [sp, #8]
 800852a:	f107 0314 	add.w	r3, r7, #20
 800852e:	9301      	str	r3, [sp, #4]
 8008530:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008532:	9300      	str	r3, [sp, #0]
 8008534:	683b      	ldr	r3, [r7, #0]
 8008536:	687a      	ldr	r2, [r7, #4]
 8008538:	68b9      	ldr	r1, [r7, #8]
 800853a:	68f8      	ldr	r0, [r7, #12]
 800853c:	f000 f850 	bl	80085e0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008540:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008542:	f000 f8f3 	bl	800872c <prvAddNewTaskToReadyList>
 8008546:	e001      	b.n	800854c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8008548:	2300      	movs	r3, #0
 800854a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800854c:	697b      	ldr	r3, [r7, #20]
	}
 800854e:	4618      	mov	r0, r3
 8008550:	3728      	adds	r7, #40	; 0x28
 8008552:	46bd      	mov	sp, r7
 8008554:	bd80      	pop	{r7, pc}

08008556 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8008556:	b580      	push	{r7, lr}
 8008558:	b08c      	sub	sp, #48	; 0x30
 800855a:	af04      	add	r7, sp, #16
 800855c:	60f8      	str	r0, [r7, #12]
 800855e:	60b9      	str	r1, [r7, #8]
 8008560:	603b      	str	r3, [r7, #0]
 8008562:	4613      	mov	r3, r2
 8008564:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8008566:	88fb      	ldrh	r3, [r7, #6]
 8008568:	009b      	lsls	r3, r3, #2
 800856a:	4618      	mov	r0, r3
 800856c:	f001 fe14 	bl	800a198 <pvPortMalloc>
 8008570:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8008572:	697b      	ldr	r3, [r7, #20]
 8008574:	2b00      	cmp	r3, #0
 8008576:	d00e      	beq.n	8008596 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8008578:	20bc      	movs	r0, #188	; 0xbc
 800857a:	f001 fe0d 	bl	800a198 <pvPortMalloc>
 800857e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8008580:	69fb      	ldr	r3, [r7, #28]
 8008582:	2b00      	cmp	r3, #0
 8008584:	d003      	beq.n	800858e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8008586:	69fb      	ldr	r3, [r7, #28]
 8008588:	697a      	ldr	r2, [r7, #20]
 800858a:	631a      	str	r2, [r3, #48]	; 0x30
 800858c:	e005      	b.n	800859a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800858e:	6978      	ldr	r0, [r7, #20]
 8008590:	f001 fece 	bl	800a330 <vPortFree>
 8008594:	e001      	b.n	800859a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8008596:	2300      	movs	r3, #0
 8008598:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800859a:	69fb      	ldr	r3, [r7, #28]
 800859c:	2b00      	cmp	r3, #0
 800859e:	d017      	beq.n	80085d0 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80085a0:	69fb      	ldr	r3, [r7, #28]
 80085a2:	2200      	movs	r2, #0
 80085a4:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80085a8:	88fa      	ldrh	r2, [r7, #6]
 80085aa:	2300      	movs	r3, #0
 80085ac:	9303      	str	r3, [sp, #12]
 80085ae:	69fb      	ldr	r3, [r7, #28]
 80085b0:	9302      	str	r3, [sp, #8]
 80085b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085b4:	9301      	str	r3, [sp, #4]
 80085b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085b8:	9300      	str	r3, [sp, #0]
 80085ba:	683b      	ldr	r3, [r7, #0]
 80085bc:	68b9      	ldr	r1, [r7, #8]
 80085be:	68f8      	ldr	r0, [r7, #12]
 80085c0:	f000 f80e 	bl	80085e0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80085c4:	69f8      	ldr	r0, [r7, #28]
 80085c6:	f000 f8b1 	bl	800872c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80085ca:	2301      	movs	r3, #1
 80085cc:	61bb      	str	r3, [r7, #24]
 80085ce:	e002      	b.n	80085d6 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80085d0:	f04f 33ff 	mov.w	r3, #4294967295
 80085d4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80085d6:	69bb      	ldr	r3, [r7, #24]
	}
 80085d8:	4618      	mov	r0, r3
 80085da:	3720      	adds	r7, #32
 80085dc:	46bd      	mov	sp, r7
 80085de:	bd80      	pop	{r7, pc}

080085e0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80085e0:	b580      	push	{r7, lr}
 80085e2:	b088      	sub	sp, #32
 80085e4:	af00      	add	r7, sp, #0
 80085e6:	60f8      	str	r0, [r7, #12]
 80085e8:	60b9      	str	r1, [r7, #8]
 80085ea:	607a      	str	r2, [r7, #4]
 80085ec:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80085ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085f0:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	009b      	lsls	r3, r3, #2
 80085f6:	461a      	mov	r2, r3
 80085f8:	21a5      	movs	r1, #165	; 0xa5
 80085fa:	f002 f8e8 	bl	800a7ce <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80085fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008600:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8008608:	3b01      	subs	r3, #1
 800860a:	009b      	lsls	r3, r3, #2
 800860c:	4413      	add	r3, r2
 800860e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8008610:	69bb      	ldr	r3, [r7, #24]
 8008612:	f023 0307 	bic.w	r3, r3, #7
 8008616:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008618:	69bb      	ldr	r3, [r7, #24]
 800861a:	f003 0307 	and.w	r3, r3, #7
 800861e:	2b00      	cmp	r3, #0
 8008620:	d00a      	beq.n	8008638 <prvInitialiseNewTask+0x58>
	__asm volatile
 8008622:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008626:	f383 8811 	msr	BASEPRI, r3
 800862a:	f3bf 8f6f 	isb	sy
 800862e:	f3bf 8f4f 	dsb	sy
 8008632:	617b      	str	r3, [r7, #20]
}
 8008634:	bf00      	nop
 8008636:	e7fe      	b.n	8008636 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8008638:	68bb      	ldr	r3, [r7, #8]
 800863a:	2b00      	cmp	r3, #0
 800863c:	d01f      	beq.n	800867e <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800863e:	2300      	movs	r3, #0
 8008640:	61fb      	str	r3, [r7, #28]
 8008642:	e012      	b.n	800866a <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008644:	68ba      	ldr	r2, [r7, #8]
 8008646:	69fb      	ldr	r3, [r7, #28]
 8008648:	4413      	add	r3, r2
 800864a:	7819      	ldrb	r1, [r3, #0]
 800864c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800864e:	69fb      	ldr	r3, [r7, #28]
 8008650:	4413      	add	r3, r2
 8008652:	3334      	adds	r3, #52	; 0x34
 8008654:	460a      	mov	r2, r1
 8008656:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8008658:	68ba      	ldr	r2, [r7, #8]
 800865a:	69fb      	ldr	r3, [r7, #28]
 800865c:	4413      	add	r3, r2
 800865e:	781b      	ldrb	r3, [r3, #0]
 8008660:	2b00      	cmp	r3, #0
 8008662:	d006      	beq.n	8008672 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008664:	69fb      	ldr	r3, [r7, #28]
 8008666:	3301      	adds	r3, #1
 8008668:	61fb      	str	r3, [r7, #28]
 800866a:	69fb      	ldr	r3, [r7, #28]
 800866c:	2b0f      	cmp	r3, #15
 800866e:	d9e9      	bls.n	8008644 <prvInitialiseNewTask+0x64>
 8008670:	e000      	b.n	8008674 <prvInitialiseNewTask+0x94>
			{
				break;
 8008672:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008674:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008676:	2200      	movs	r2, #0
 8008678:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800867c:	e003      	b.n	8008686 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800867e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008680:	2200      	movs	r2, #0
 8008682:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008686:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008688:	2b37      	cmp	r3, #55	; 0x37
 800868a:	d901      	bls.n	8008690 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800868c:	2337      	movs	r3, #55	; 0x37
 800868e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8008690:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008692:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008694:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8008696:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008698:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800869a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800869c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800869e:	2200      	movs	r2, #0
 80086a0:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80086a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086a4:	3304      	adds	r3, #4
 80086a6:	4618      	mov	r0, r3
 80086a8:	f7ff f93e 	bl	8007928 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80086ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086ae:	3318      	adds	r3, #24
 80086b0:	4618      	mov	r0, r3
 80086b2:	f7ff f939 	bl	8007928 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80086b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80086ba:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80086bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086be:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80086c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086c4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80086c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80086ca:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80086cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086ce:	2200      	movs	r2, #0
 80086d0:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80086d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086d6:	2200      	movs	r2, #0
 80086d8:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80086dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086de:	3354      	adds	r3, #84	; 0x54
 80086e0:	2260      	movs	r2, #96	; 0x60
 80086e2:	2100      	movs	r1, #0
 80086e4:	4618      	mov	r0, r3
 80086e6:	f002 f872 	bl	800a7ce <memset>
 80086ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086ec:	4a0c      	ldr	r2, [pc, #48]	; (8008720 <prvInitialiseNewTask+0x140>)
 80086ee:	659a      	str	r2, [r3, #88]	; 0x58
 80086f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086f2:	4a0c      	ldr	r2, [pc, #48]	; (8008724 <prvInitialiseNewTask+0x144>)
 80086f4:	65da      	str	r2, [r3, #92]	; 0x5c
 80086f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086f8:	4a0b      	ldr	r2, [pc, #44]	; (8008728 <prvInitialiseNewTask+0x148>)
 80086fa:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80086fc:	683a      	ldr	r2, [r7, #0]
 80086fe:	68f9      	ldr	r1, [r7, #12]
 8008700:	69b8      	ldr	r0, [r7, #24]
 8008702:	f001 faf7 	bl	8009cf4 <pxPortInitialiseStack>
 8008706:	4602      	mov	r2, r0
 8008708:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800870a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800870c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800870e:	2b00      	cmp	r3, #0
 8008710:	d002      	beq.n	8008718 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008712:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008714:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008716:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008718:	bf00      	nop
 800871a:	3720      	adds	r7, #32
 800871c:	46bd      	mov	sp, r7
 800871e:	bd80      	pop	{r7, pc}
 8008720:	0800b1f0 	.word	0x0800b1f0
 8008724:	0800b210 	.word	0x0800b210
 8008728:	0800b1d0 	.word	0x0800b1d0

0800872c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800872c:	b580      	push	{r7, lr}
 800872e:	b082      	sub	sp, #8
 8008730:	af00      	add	r7, sp, #0
 8008732:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008734:	f001 fc0e 	bl	8009f54 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008738:	4b2d      	ldr	r3, [pc, #180]	; (80087f0 <prvAddNewTaskToReadyList+0xc4>)
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	3301      	adds	r3, #1
 800873e:	4a2c      	ldr	r2, [pc, #176]	; (80087f0 <prvAddNewTaskToReadyList+0xc4>)
 8008740:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8008742:	4b2c      	ldr	r3, [pc, #176]	; (80087f4 <prvAddNewTaskToReadyList+0xc8>)
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	2b00      	cmp	r3, #0
 8008748:	d109      	bne.n	800875e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800874a:	4a2a      	ldr	r2, [pc, #168]	; (80087f4 <prvAddNewTaskToReadyList+0xc8>)
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008750:	4b27      	ldr	r3, [pc, #156]	; (80087f0 <prvAddNewTaskToReadyList+0xc4>)
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	2b01      	cmp	r3, #1
 8008756:	d110      	bne.n	800877a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008758:	f000 fc98 	bl	800908c <prvInitialiseTaskLists>
 800875c:	e00d      	b.n	800877a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800875e:	4b26      	ldr	r3, [pc, #152]	; (80087f8 <prvAddNewTaskToReadyList+0xcc>)
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	2b00      	cmp	r3, #0
 8008764:	d109      	bne.n	800877a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008766:	4b23      	ldr	r3, [pc, #140]	; (80087f4 <prvAddNewTaskToReadyList+0xc8>)
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008770:	429a      	cmp	r2, r3
 8008772:	d802      	bhi.n	800877a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008774:	4a1f      	ldr	r2, [pc, #124]	; (80087f4 <prvAddNewTaskToReadyList+0xc8>)
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800877a:	4b20      	ldr	r3, [pc, #128]	; (80087fc <prvAddNewTaskToReadyList+0xd0>)
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	3301      	adds	r3, #1
 8008780:	4a1e      	ldr	r2, [pc, #120]	; (80087fc <prvAddNewTaskToReadyList+0xd0>)
 8008782:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8008784:	4b1d      	ldr	r3, [pc, #116]	; (80087fc <prvAddNewTaskToReadyList+0xd0>)
 8008786:	681a      	ldr	r2, [r3, #0]
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008790:	4b1b      	ldr	r3, [pc, #108]	; (8008800 <prvAddNewTaskToReadyList+0xd4>)
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	429a      	cmp	r2, r3
 8008796:	d903      	bls.n	80087a0 <prvAddNewTaskToReadyList+0x74>
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800879c:	4a18      	ldr	r2, [pc, #96]	; (8008800 <prvAddNewTaskToReadyList+0xd4>)
 800879e:	6013      	str	r3, [r2, #0]
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80087a4:	4613      	mov	r3, r2
 80087a6:	009b      	lsls	r3, r3, #2
 80087a8:	4413      	add	r3, r2
 80087aa:	009b      	lsls	r3, r3, #2
 80087ac:	4a15      	ldr	r2, [pc, #84]	; (8008804 <prvAddNewTaskToReadyList+0xd8>)
 80087ae:	441a      	add	r2, r3
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	3304      	adds	r3, #4
 80087b4:	4619      	mov	r1, r3
 80087b6:	4610      	mov	r0, r2
 80087b8:	f7ff f8c3 	bl	8007942 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80087bc:	f001 fbfa 	bl	8009fb4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80087c0:	4b0d      	ldr	r3, [pc, #52]	; (80087f8 <prvAddNewTaskToReadyList+0xcc>)
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	2b00      	cmp	r3, #0
 80087c6:	d00e      	beq.n	80087e6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80087c8:	4b0a      	ldr	r3, [pc, #40]	; (80087f4 <prvAddNewTaskToReadyList+0xc8>)
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087d2:	429a      	cmp	r2, r3
 80087d4:	d207      	bcs.n	80087e6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80087d6:	4b0c      	ldr	r3, [pc, #48]	; (8008808 <prvAddNewTaskToReadyList+0xdc>)
 80087d8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80087dc:	601a      	str	r2, [r3, #0]
 80087de:	f3bf 8f4f 	dsb	sy
 80087e2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80087e6:	bf00      	nop
 80087e8:	3708      	adds	r7, #8
 80087ea:	46bd      	mov	sp, r7
 80087ec:	bd80      	pop	{r7, pc}
 80087ee:	bf00      	nop
 80087f0:	200035b8 	.word	0x200035b8
 80087f4:	200030e4 	.word	0x200030e4
 80087f8:	200035c4 	.word	0x200035c4
 80087fc:	200035d4 	.word	0x200035d4
 8008800:	200035c0 	.word	0x200035c0
 8008804:	200030e8 	.word	0x200030e8
 8008808:	e000ed04 	.word	0xe000ed04

0800880c <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 800880c:	b580      	push	{r7, lr}
 800880e:	b084      	sub	sp, #16
 8008810:	af00      	add	r7, sp, #0
 8008812:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8008814:	f001 fb9e 	bl	8009f54 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	2b00      	cmp	r3, #0
 800881c:	d102      	bne.n	8008824 <vTaskDelete+0x18>
 800881e:	4b2c      	ldr	r3, [pc, #176]	; (80088d0 <vTaskDelete+0xc4>)
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	e000      	b.n	8008826 <vTaskDelete+0x1a>
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready/delayed list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008828:	68fb      	ldr	r3, [r7, #12]
 800882a:	3304      	adds	r3, #4
 800882c:	4618      	mov	r0, r3
 800882e:	f7ff f8e5 	bl	80079fc <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008832:	68fb      	ldr	r3, [r7, #12]
 8008834:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008836:	2b00      	cmp	r3, #0
 8008838:	d004      	beq.n	8008844 <vTaskDelete+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800883a:	68fb      	ldr	r3, [r7, #12]
 800883c:	3318      	adds	r3, #24
 800883e:	4618      	mov	r0, r3
 8008840:	f7ff f8dc 	bl	80079fc <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 8008844:	4b23      	ldr	r3, [pc, #140]	; (80088d4 <vTaskDelete+0xc8>)
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	3301      	adds	r3, #1
 800884a:	4a22      	ldr	r2, [pc, #136]	; (80088d4 <vTaskDelete+0xc8>)
 800884c:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 800884e:	4b20      	ldr	r3, [pc, #128]	; (80088d0 <vTaskDelete+0xc4>)
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	68fa      	ldr	r2, [r7, #12]
 8008854:	429a      	cmp	r2, r3
 8008856:	d10b      	bne.n	8008870 <vTaskDelete+0x64>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 8008858:	68fb      	ldr	r3, [r7, #12]
 800885a:	3304      	adds	r3, #4
 800885c:	4619      	mov	r1, r3
 800885e:	481e      	ldr	r0, [pc, #120]	; (80088d8 <vTaskDelete+0xcc>)
 8008860:	f7ff f86f 	bl	8007942 <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 8008864:	4b1d      	ldr	r3, [pc, #116]	; (80088dc <vTaskDelete+0xd0>)
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	3301      	adds	r3, #1
 800886a:	4a1c      	ldr	r2, [pc, #112]	; (80088dc <vTaskDelete+0xd0>)
 800886c:	6013      	str	r3, [r2, #0]
 800886e:	e009      	b.n	8008884 <vTaskDelete+0x78>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 8008870:	4b1b      	ldr	r3, [pc, #108]	; (80088e0 <vTaskDelete+0xd4>)
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	3b01      	subs	r3, #1
 8008876:	4a1a      	ldr	r2, [pc, #104]	; (80088e0 <vTaskDelete+0xd4>)
 8008878:	6013      	str	r3, [r2, #0]
				traceTASK_DELETE( pxTCB );
				prvDeleteTCB( pxTCB );
 800887a:	68f8      	ldr	r0, [r7, #12]
 800887c:	f000 fc74 	bl	8009168 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 8008880:	f000 fca6 	bl	80091d0 <prvResetNextTaskUnblockTime>
			}
		}
		taskEXIT_CRITICAL();
 8008884:	f001 fb96 	bl	8009fb4 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 8008888:	4b16      	ldr	r3, [pc, #88]	; (80088e4 <vTaskDelete+0xd8>)
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	2b00      	cmp	r3, #0
 800888e:	d01b      	beq.n	80088c8 <vTaskDelete+0xbc>
		{
			if( pxTCB == pxCurrentTCB )
 8008890:	4b0f      	ldr	r3, [pc, #60]	; (80088d0 <vTaskDelete+0xc4>)
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	68fa      	ldr	r2, [r7, #12]
 8008896:	429a      	cmp	r2, r3
 8008898:	d116      	bne.n	80088c8 <vTaskDelete+0xbc>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 800889a:	4b13      	ldr	r3, [pc, #76]	; (80088e8 <vTaskDelete+0xdc>)
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	2b00      	cmp	r3, #0
 80088a0:	d00a      	beq.n	80088b8 <vTaskDelete+0xac>
	__asm volatile
 80088a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088a6:	f383 8811 	msr	BASEPRI, r3
 80088aa:	f3bf 8f6f 	isb	sy
 80088ae:	f3bf 8f4f 	dsb	sy
 80088b2:	60bb      	str	r3, [r7, #8]
}
 80088b4:	bf00      	nop
 80088b6:	e7fe      	b.n	80088b6 <vTaskDelete+0xaa>
				portYIELD_WITHIN_API();
 80088b8:	4b0c      	ldr	r3, [pc, #48]	; (80088ec <vTaskDelete+0xe0>)
 80088ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80088be:	601a      	str	r2, [r3, #0]
 80088c0:	f3bf 8f4f 	dsb	sy
 80088c4:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80088c8:	bf00      	nop
 80088ca:	3710      	adds	r7, #16
 80088cc:	46bd      	mov	sp, r7
 80088ce:	bd80      	pop	{r7, pc}
 80088d0:	200030e4 	.word	0x200030e4
 80088d4:	200035d4 	.word	0x200035d4
 80088d8:	2000358c 	.word	0x2000358c
 80088dc:	200035a0 	.word	0x200035a0
 80088e0:	200035b8 	.word	0x200035b8
 80088e4:	200035c4 	.word	0x200035c4
 80088e8:	200035e0 	.word	0x200035e0
 80088ec:	e000ed04 	.word	0xe000ed04

080088f0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80088f0:	b580      	push	{r7, lr}
 80088f2:	b084      	sub	sp, #16
 80088f4:	af00      	add	r7, sp, #0
 80088f6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80088f8:	2300      	movs	r3, #0
 80088fa:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	2b00      	cmp	r3, #0
 8008900:	d017      	beq.n	8008932 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8008902:	4b13      	ldr	r3, [pc, #76]	; (8008950 <vTaskDelay+0x60>)
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	2b00      	cmp	r3, #0
 8008908:	d00a      	beq.n	8008920 <vTaskDelay+0x30>
	__asm volatile
 800890a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800890e:	f383 8811 	msr	BASEPRI, r3
 8008912:	f3bf 8f6f 	isb	sy
 8008916:	f3bf 8f4f 	dsb	sy
 800891a:	60bb      	str	r3, [r7, #8]
}
 800891c:	bf00      	nop
 800891e:	e7fe      	b.n	800891e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8008920:	f000 f88a 	bl	8008a38 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8008924:	2100      	movs	r1, #0
 8008926:	6878      	ldr	r0, [r7, #4]
 8008928:	f000 fe42 	bl	80095b0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800892c:	f000 f892 	bl	8008a54 <xTaskResumeAll>
 8008930:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8008932:	68fb      	ldr	r3, [r7, #12]
 8008934:	2b00      	cmp	r3, #0
 8008936:	d107      	bne.n	8008948 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8008938:	4b06      	ldr	r3, [pc, #24]	; (8008954 <vTaskDelay+0x64>)
 800893a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800893e:	601a      	str	r2, [r3, #0]
 8008940:	f3bf 8f4f 	dsb	sy
 8008944:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008948:	bf00      	nop
 800894a:	3710      	adds	r7, #16
 800894c:	46bd      	mov	sp, r7
 800894e:	bd80      	pop	{r7, pc}
 8008950:	200035e0 	.word	0x200035e0
 8008954:	e000ed04 	.word	0xe000ed04

08008958 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008958:	b580      	push	{r7, lr}
 800895a:	b08a      	sub	sp, #40	; 0x28
 800895c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800895e:	2300      	movs	r3, #0
 8008960:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8008962:	2300      	movs	r3, #0
 8008964:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8008966:	463a      	mov	r2, r7
 8008968:	1d39      	adds	r1, r7, #4
 800896a:	f107 0308 	add.w	r3, r7, #8
 800896e:	4618      	mov	r0, r3
 8008970:	f7fe ff86 	bl	8007880 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008974:	6839      	ldr	r1, [r7, #0]
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	68ba      	ldr	r2, [r7, #8]
 800897a:	9202      	str	r2, [sp, #8]
 800897c:	9301      	str	r3, [sp, #4]
 800897e:	2300      	movs	r3, #0
 8008980:	9300      	str	r3, [sp, #0]
 8008982:	2300      	movs	r3, #0
 8008984:	460a      	mov	r2, r1
 8008986:	4924      	ldr	r1, [pc, #144]	; (8008a18 <vTaskStartScheduler+0xc0>)
 8008988:	4824      	ldr	r0, [pc, #144]	; (8008a1c <vTaskStartScheduler+0xc4>)
 800898a:	f7ff fd87 	bl	800849c <xTaskCreateStatic>
 800898e:	4603      	mov	r3, r0
 8008990:	4a23      	ldr	r2, [pc, #140]	; (8008a20 <vTaskStartScheduler+0xc8>)
 8008992:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8008994:	4b22      	ldr	r3, [pc, #136]	; (8008a20 <vTaskStartScheduler+0xc8>)
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	2b00      	cmp	r3, #0
 800899a:	d002      	beq.n	80089a2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800899c:	2301      	movs	r3, #1
 800899e:	617b      	str	r3, [r7, #20]
 80089a0:	e001      	b.n	80089a6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80089a2:	2300      	movs	r3, #0
 80089a4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80089a6:	697b      	ldr	r3, [r7, #20]
 80089a8:	2b01      	cmp	r3, #1
 80089aa:	d102      	bne.n	80089b2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80089ac:	f000 fe54 	bl	8009658 <xTimerCreateTimerTask>
 80089b0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80089b2:	697b      	ldr	r3, [r7, #20]
 80089b4:	2b01      	cmp	r3, #1
 80089b6:	d11b      	bne.n	80089f0 <vTaskStartScheduler+0x98>
	__asm volatile
 80089b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089bc:	f383 8811 	msr	BASEPRI, r3
 80089c0:	f3bf 8f6f 	isb	sy
 80089c4:	f3bf 8f4f 	dsb	sy
 80089c8:	613b      	str	r3, [r7, #16]
}
 80089ca:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80089cc:	4b15      	ldr	r3, [pc, #84]	; (8008a24 <vTaskStartScheduler+0xcc>)
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	3354      	adds	r3, #84	; 0x54
 80089d2:	4a15      	ldr	r2, [pc, #84]	; (8008a28 <vTaskStartScheduler+0xd0>)
 80089d4:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80089d6:	4b15      	ldr	r3, [pc, #84]	; (8008a2c <vTaskStartScheduler+0xd4>)
 80089d8:	f04f 32ff 	mov.w	r2, #4294967295
 80089dc:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80089de:	4b14      	ldr	r3, [pc, #80]	; (8008a30 <vTaskStartScheduler+0xd8>)
 80089e0:	2201      	movs	r2, #1
 80089e2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80089e4:	4b13      	ldr	r3, [pc, #76]	; (8008a34 <vTaskStartScheduler+0xdc>)
 80089e6:	2200      	movs	r2, #0
 80089e8:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80089ea:	f001 fa11 	bl	8009e10 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80089ee:	e00e      	b.n	8008a0e <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80089f0:	697b      	ldr	r3, [r7, #20]
 80089f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80089f6:	d10a      	bne.n	8008a0e <vTaskStartScheduler+0xb6>
	__asm volatile
 80089f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089fc:	f383 8811 	msr	BASEPRI, r3
 8008a00:	f3bf 8f6f 	isb	sy
 8008a04:	f3bf 8f4f 	dsb	sy
 8008a08:	60fb      	str	r3, [r7, #12]
}
 8008a0a:	bf00      	nop
 8008a0c:	e7fe      	b.n	8008a0c <vTaskStartScheduler+0xb4>
}
 8008a0e:	bf00      	nop
 8008a10:	3718      	adds	r7, #24
 8008a12:	46bd      	mov	sp, r7
 8008a14:	bd80      	pop	{r7, pc}
 8008a16:	bf00      	nop
 8008a18:	0800b0a4 	.word	0x0800b0a4
 8008a1c:	0800905d 	.word	0x0800905d
 8008a20:	200035dc 	.word	0x200035dc
 8008a24:	200030e4 	.word	0x200030e4
 8008a28:	20000018 	.word	0x20000018
 8008a2c:	200035d8 	.word	0x200035d8
 8008a30:	200035c4 	.word	0x200035c4
 8008a34:	200035bc 	.word	0x200035bc

08008a38 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008a38:	b480      	push	{r7}
 8008a3a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8008a3c:	4b04      	ldr	r3, [pc, #16]	; (8008a50 <vTaskSuspendAll+0x18>)
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	3301      	adds	r3, #1
 8008a42:	4a03      	ldr	r2, [pc, #12]	; (8008a50 <vTaskSuspendAll+0x18>)
 8008a44:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8008a46:	bf00      	nop
 8008a48:	46bd      	mov	sp, r7
 8008a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a4e:	4770      	bx	lr
 8008a50:	200035e0 	.word	0x200035e0

08008a54 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008a54:	b580      	push	{r7, lr}
 8008a56:	b084      	sub	sp, #16
 8008a58:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8008a5a:	2300      	movs	r3, #0
 8008a5c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8008a5e:	2300      	movs	r3, #0
 8008a60:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8008a62:	4b42      	ldr	r3, [pc, #264]	; (8008b6c <xTaskResumeAll+0x118>)
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	2b00      	cmp	r3, #0
 8008a68:	d10a      	bne.n	8008a80 <xTaskResumeAll+0x2c>
	__asm volatile
 8008a6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a6e:	f383 8811 	msr	BASEPRI, r3
 8008a72:	f3bf 8f6f 	isb	sy
 8008a76:	f3bf 8f4f 	dsb	sy
 8008a7a:	603b      	str	r3, [r7, #0]
}
 8008a7c:	bf00      	nop
 8008a7e:	e7fe      	b.n	8008a7e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008a80:	f001 fa68 	bl	8009f54 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8008a84:	4b39      	ldr	r3, [pc, #228]	; (8008b6c <xTaskResumeAll+0x118>)
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	3b01      	subs	r3, #1
 8008a8a:	4a38      	ldr	r2, [pc, #224]	; (8008b6c <xTaskResumeAll+0x118>)
 8008a8c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008a8e:	4b37      	ldr	r3, [pc, #220]	; (8008b6c <xTaskResumeAll+0x118>)
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	2b00      	cmp	r3, #0
 8008a94:	d162      	bne.n	8008b5c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008a96:	4b36      	ldr	r3, [pc, #216]	; (8008b70 <xTaskResumeAll+0x11c>)
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	2b00      	cmp	r3, #0
 8008a9c:	d05e      	beq.n	8008b5c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008a9e:	e02f      	b.n	8008b00 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008aa0:	4b34      	ldr	r3, [pc, #208]	; (8008b74 <xTaskResumeAll+0x120>)
 8008aa2:	68db      	ldr	r3, [r3, #12]
 8008aa4:	68db      	ldr	r3, [r3, #12]
 8008aa6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008aa8:	68fb      	ldr	r3, [r7, #12]
 8008aaa:	3318      	adds	r3, #24
 8008aac:	4618      	mov	r0, r3
 8008aae:	f7fe ffa5 	bl	80079fc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008ab2:	68fb      	ldr	r3, [r7, #12]
 8008ab4:	3304      	adds	r3, #4
 8008ab6:	4618      	mov	r0, r3
 8008ab8:	f7fe ffa0 	bl	80079fc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008abc:	68fb      	ldr	r3, [r7, #12]
 8008abe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ac0:	4b2d      	ldr	r3, [pc, #180]	; (8008b78 <xTaskResumeAll+0x124>)
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	429a      	cmp	r2, r3
 8008ac6:	d903      	bls.n	8008ad0 <xTaskResumeAll+0x7c>
 8008ac8:	68fb      	ldr	r3, [r7, #12]
 8008aca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008acc:	4a2a      	ldr	r2, [pc, #168]	; (8008b78 <xTaskResumeAll+0x124>)
 8008ace:	6013      	str	r3, [r2, #0]
 8008ad0:	68fb      	ldr	r3, [r7, #12]
 8008ad2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ad4:	4613      	mov	r3, r2
 8008ad6:	009b      	lsls	r3, r3, #2
 8008ad8:	4413      	add	r3, r2
 8008ada:	009b      	lsls	r3, r3, #2
 8008adc:	4a27      	ldr	r2, [pc, #156]	; (8008b7c <xTaskResumeAll+0x128>)
 8008ade:	441a      	add	r2, r3
 8008ae0:	68fb      	ldr	r3, [r7, #12]
 8008ae2:	3304      	adds	r3, #4
 8008ae4:	4619      	mov	r1, r3
 8008ae6:	4610      	mov	r0, r2
 8008ae8:	f7fe ff2b 	bl	8007942 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008aec:	68fb      	ldr	r3, [r7, #12]
 8008aee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008af0:	4b23      	ldr	r3, [pc, #140]	; (8008b80 <xTaskResumeAll+0x12c>)
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008af6:	429a      	cmp	r2, r3
 8008af8:	d302      	bcc.n	8008b00 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8008afa:	4b22      	ldr	r3, [pc, #136]	; (8008b84 <xTaskResumeAll+0x130>)
 8008afc:	2201      	movs	r2, #1
 8008afe:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008b00:	4b1c      	ldr	r3, [pc, #112]	; (8008b74 <xTaskResumeAll+0x120>)
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	2b00      	cmp	r3, #0
 8008b06:	d1cb      	bne.n	8008aa0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8008b08:	68fb      	ldr	r3, [r7, #12]
 8008b0a:	2b00      	cmp	r3, #0
 8008b0c:	d001      	beq.n	8008b12 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008b0e:	f000 fb5f 	bl	80091d0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8008b12:	4b1d      	ldr	r3, [pc, #116]	; (8008b88 <xTaskResumeAll+0x134>)
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	d010      	beq.n	8008b40 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008b1e:	f000 f847 	bl	8008bb0 <xTaskIncrementTick>
 8008b22:	4603      	mov	r3, r0
 8008b24:	2b00      	cmp	r3, #0
 8008b26:	d002      	beq.n	8008b2e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8008b28:	4b16      	ldr	r3, [pc, #88]	; (8008b84 <xTaskResumeAll+0x130>)
 8008b2a:	2201      	movs	r2, #1
 8008b2c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	3b01      	subs	r3, #1
 8008b32:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	d1f1      	bne.n	8008b1e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8008b3a:	4b13      	ldr	r3, [pc, #76]	; (8008b88 <xTaskResumeAll+0x134>)
 8008b3c:	2200      	movs	r2, #0
 8008b3e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008b40:	4b10      	ldr	r3, [pc, #64]	; (8008b84 <xTaskResumeAll+0x130>)
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	2b00      	cmp	r3, #0
 8008b46:	d009      	beq.n	8008b5c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8008b48:	2301      	movs	r3, #1
 8008b4a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008b4c:	4b0f      	ldr	r3, [pc, #60]	; (8008b8c <xTaskResumeAll+0x138>)
 8008b4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008b52:	601a      	str	r2, [r3, #0]
 8008b54:	f3bf 8f4f 	dsb	sy
 8008b58:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008b5c:	f001 fa2a 	bl	8009fb4 <vPortExitCritical>

	return xAlreadyYielded;
 8008b60:	68bb      	ldr	r3, [r7, #8]
}
 8008b62:	4618      	mov	r0, r3
 8008b64:	3710      	adds	r7, #16
 8008b66:	46bd      	mov	sp, r7
 8008b68:	bd80      	pop	{r7, pc}
 8008b6a:	bf00      	nop
 8008b6c:	200035e0 	.word	0x200035e0
 8008b70:	200035b8 	.word	0x200035b8
 8008b74:	20003578 	.word	0x20003578
 8008b78:	200035c0 	.word	0x200035c0
 8008b7c:	200030e8 	.word	0x200030e8
 8008b80:	200030e4 	.word	0x200030e4
 8008b84:	200035cc 	.word	0x200035cc
 8008b88:	200035c8 	.word	0x200035c8
 8008b8c:	e000ed04 	.word	0xe000ed04

08008b90 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8008b90:	b480      	push	{r7}
 8008b92:	b083      	sub	sp, #12
 8008b94:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8008b96:	4b05      	ldr	r3, [pc, #20]	; (8008bac <xTaskGetTickCount+0x1c>)
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8008b9c:	687b      	ldr	r3, [r7, #4]
}
 8008b9e:	4618      	mov	r0, r3
 8008ba0:	370c      	adds	r7, #12
 8008ba2:	46bd      	mov	sp, r7
 8008ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ba8:	4770      	bx	lr
 8008baa:	bf00      	nop
 8008bac:	200035bc 	.word	0x200035bc

08008bb0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008bb0:	b580      	push	{r7, lr}
 8008bb2:	b086      	sub	sp, #24
 8008bb4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8008bb6:	2300      	movs	r3, #0
 8008bb8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008bba:	4b4f      	ldr	r3, [pc, #316]	; (8008cf8 <xTaskIncrementTick+0x148>)
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	f040 808f 	bne.w	8008ce2 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008bc4:	4b4d      	ldr	r3, [pc, #308]	; (8008cfc <xTaskIncrementTick+0x14c>)
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	3301      	adds	r3, #1
 8008bca:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008bcc:	4a4b      	ldr	r2, [pc, #300]	; (8008cfc <xTaskIncrementTick+0x14c>)
 8008bce:	693b      	ldr	r3, [r7, #16]
 8008bd0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008bd2:	693b      	ldr	r3, [r7, #16]
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	d120      	bne.n	8008c1a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8008bd8:	4b49      	ldr	r3, [pc, #292]	; (8008d00 <xTaskIncrementTick+0x150>)
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	2b00      	cmp	r3, #0
 8008be0:	d00a      	beq.n	8008bf8 <xTaskIncrementTick+0x48>
	__asm volatile
 8008be2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008be6:	f383 8811 	msr	BASEPRI, r3
 8008bea:	f3bf 8f6f 	isb	sy
 8008bee:	f3bf 8f4f 	dsb	sy
 8008bf2:	603b      	str	r3, [r7, #0]
}
 8008bf4:	bf00      	nop
 8008bf6:	e7fe      	b.n	8008bf6 <xTaskIncrementTick+0x46>
 8008bf8:	4b41      	ldr	r3, [pc, #260]	; (8008d00 <xTaskIncrementTick+0x150>)
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	60fb      	str	r3, [r7, #12]
 8008bfe:	4b41      	ldr	r3, [pc, #260]	; (8008d04 <xTaskIncrementTick+0x154>)
 8008c00:	681b      	ldr	r3, [r3, #0]
 8008c02:	4a3f      	ldr	r2, [pc, #252]	; (8008d00 <xTaskIncrementTick+0x150>)
 8008c04:	6013      	str	r3, [r2, #0]
 8008c06:	4a3f      	ldr	r2, [pc, #252]	; (8008d04 <xTaskIncrementTick+0x154>)
 8008c08:	68fb      	ldr	r3, [r7, #12]
 8008c0a:	6013      	str	r3, [r2, #0]
 8008c0c:	4b3e      	ldr	r3, [pc, #248]	; (8008d08 <xTaskIncrementTick+0x158>)
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	3301      	adds	r3, #1
 8008c12:	4a3d      	ldr	r2, [pc, #244]	; (8008d08 <xTaskIncrementTick+0x158>)
 8008c14:	6013      	str	r3, [r2, #0]
 8008c16:	f000 fadb 	bl	80091d0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008c1a:	4b3c      	ldr	r3, [pc, #240]	; (8008d0c <xTaskIncrementTick+0x15c>)
 8008c1c:	681b      	ldr	r3, [r3, #0]
 8008c1e:	693a      	ldr	r2, [r7, #16]
 8008c20:	429a      	cmp	r2, r3
 8008c22:	d349      	bcc.n	8008cb8 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008c24:	4b36      	ldr	r3, [pc, #216]	; (8008d00 <xTaskIncrementTick+0x150>)
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	2b00      	cmp	r3, #0
 8008c2c:	d104      	bne.n	8008c38 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008c2e:	4b37      	ldr	r3, [pc, #220]	; (8008d0c <xTaskIncrementTick+0x15c>)
 8008c30:	f04f 32ff 	mov.w	r2, #4294967295
 8008c34:	601a      	str	r2, [r3, #0]
					break;
 8008c36:	e03f      	b.n	8008cb8 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008c38:	4b31      	ldr	r3, [pc, #196]	; (8008d00 <xTaskIncrementTick+0x150>)
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	68db      	ldr	r3, [r3, #12]
 8008c3e:	68db      	ldr	r3, [r3, #12]
 8008c40:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008c42:	68bb      	ldr	r3, [r7, #8]
 8008c44:	685b      	ldr	r3, [r3, #4]
 8008c46:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008c48:	693a      	ldr	r2, [r7, #16]
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	429a      	cmp	r2, r3
 8008c4e:	d203      	bcs.n	8008c58 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008c50:	4a2e      	ldr	r2, [pc, #184]	; (8008d0c <xTaskIncrementTick+0x15c>)
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8008c56:	e02f      	b.n	8008cb8 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008c58:	68bb      	ldr	r3, [r7, #8]
 8008c5a:	3304      	adds	r3, #4
 8008c5c:	4618      	mov	r0, r3
 8008c5e:	f7fe fecd 	bl	80079fc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008c62:	68bb      	ldr	r3, [r7, #8]
 8008c64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c66:	2b00      	cmp	r3, #0
 8008c68:	d004      	beq.n	8008c74 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008c6a:	68bb      	ldr	r3, [r7, #8]
 8008c6c:	3318      	adds	r3, #24
 8008c6e:	4618      	mov	r0, r3
 8008c70:	f7fe fec4 	bl	80079fc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008c74:	68bb      	ldr	r3, [r7, #8]
 8008c76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008c78:	4b25      	ldr	r3, [pc, #148]	; (8008d10 <xTaskIncrementTick+0x160>)
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	429a      	cmp	r2, r3
 8008c7e:	d903      	bls.n	8008c88 <xTaskIncrementTick+0xd8>
 8008c80:	68bb      	ldr	r3, [r7, #8]
 8008c82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c84:	4a22      	ldr	r2, [pc, #136]	; (8008d10 <xTaskIncrementTick+0x160>)
 8008c86:	6013      	str	r3, [r2, #0]
 8008c88:	68bb      	ldr	r3, [r7, #8]
 8008c8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008c8c:	4613      	mov	r3, r2
 8008c8e:	009b      	lsls	r3, r3, #2
 8008c90:	4413      	add	r3, r2
 8008c92:	009b      	lsls	r3, r3, #2
 8008c94:	4a1f      	ldr	r2, [pc, #124]	; (8008d14 <xTaskIncrementTick+0x164>)
 8008c96:	441a      	add	r2, r3
 8008c98:	68bb      	ldr	r3, [r7, #8]
 8008c9a:	3304      	adds	r3, #4
 8008c9c:	4619      	mov	r1, r3
 8008c9e:	4610      	mov	r0, r2
 8008ca0:	f7fe fe4f 	bl	8007942 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008ca4:	68bb      	ldr	r3, [r7, #8]
 8008ca6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ca8:	4b1b      	ldr	r3, [pc, #108]	; (8008d18 <xTaskIncrementTick+0x168>)
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cae:	429a      	cmp	r2, r3
 8008cb0:	d3b8      	bcc.n	8008c24 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8008cb2:	2301      	movs	r3, #1
 8008cb4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008cb6:	e7b5      	b.n	8008c24 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008cb8:	4b17      	ldr	r3, [pc, #92]	; (8008d18 <xTaskIncrementTick+0x168>)
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008cbe:	4915      	ldr	r1, [pc, #84]	; (8008d14 <xTaskIncrementTick+0x164>)
 8008cc0:	4613      	mov	r3, r2
 8008cc2:	009b      	lsls	r3, r3, #2
 8008cc4:	4413      	add	r3, r2
 8008cc6:	009b      	lsls	r3, r3, #2
 8008cc8:	440b      	add	r3, r1
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	2b01      	cmp	r3, #1
 8008cce:	d901      	bls.n	8008cd4 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8008cd0:	2301      	movs	r3, #1
 8008cd2:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8008cd4:	4b11      	ldr	r3, [pc, #68]	; (8008d1c <xTaskIncrementTick+0x16c>)
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	2b00      	cmp	r3, #0
 8008cda:	d007      	beq.n	8008cec <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8008cdc:	2301      	movs	r3, #1
 8008cde:	617b      	str	r3, [r7, #20]
 8008ce0:	e004      	b.n	8008cec <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8008ce2:	4b0f      	ldr	r3, [pc, #60]	; (8008d20 <xTaskIncrementTick+0x170>)
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	3301      	adds	r3, #1
 8008ce8:	4a0d      	ldr	r2, [pc, #52]	; (8008d20 <xTaskIncrementTick+0x170>)
 8008cea:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8008cec:	697b      	ldr	r3, [r7, #20]
}
 8008cee:	4618      	mov	r0, r3
 8008cf0:	3718      	adds	r7, #24
 8008cf2:	46bd      	mov	sp, r7
 8008cf4:	bd80      	pop	{r7, pc}
 8008cf6:	bf00      	nop
 8008cf8:	200035e0 	.word	0x200035e0
 8008cfc:	200035bc 	.word	0x200035bc
 8008d00:	20003570 	.word	0x20003570
 8008d04:	20003574 	.word	0x20003574
 8008d08:	200035d0 	.word	0x200035d0
 8008d0c:	200035d8 	.word	0x200035d8
 8008d10:	200035c0 	.word	0x200035c0
 8008d14:	200030e8 	.word	0x200030e8
 8008d18:	200030e4 	.word	0x200030e4
 8008d1c:	200035cc 	.word	0x200035cc
 8008d20:	200035c8 	.word	0x200035c8

08008d24 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008d24:	b480      	push	{r7}
 8008d26:	b085      	sub	sp, #20
 8008d28:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008d2a:	4b2a      	ldr	r3, [pc, #168]	; (8008dd4 <vTaskSwitchContext+0xb0>)
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	2b00      	cmp	r3, #0
 8008d30:	d003      	beq.n	8008d3a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8008d32:	4b29      	ldr	r3, [pc, #164]	; (8008dd8 <vTaskSwitchContext+0xb4>)
 8008d34:	2201      	movs	r2, #1
 8008d36:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008d38:	e046      	b.n	8008dc8 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8008d3a:	4b27      	ldr	r3, [pc, #156]	; (8008dd8 <vTaskSwitchContext+0xb4>)
 8008d3c:	2200      	movs	r2, #0
 8008d3e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008d40:	4b26      	ldr	r3, [pc, #152]	; (8008ddc <vTaskSwitchContext+0xb8>)
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	60fb      	str	r3, [r7, #12]
 8008d46:	e010      	b.n	8008d6a <vTaskSwitchContext+0x46>
 8008d48:	68fb      	ldr	r3, [r7, #12]
 8008d4a:	2b00      	cmp	r3, #0
 8008d4c:	d10a      	bne.n	8008d64 <vTaskSwitchContext+0x40>
	__asm volatile
 8008d4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d52:	f383 8811 	msr	BASEPRI, r3
 8008d56:	f3bf 8f6f 	isb	sy
 8008d5a:	f3bf 8f4f 	dsb	sy
 8008d5e:	607b      	str	r3, [r7, #4]
}
 8008d60:	bf00      	nop
 8008d62:	e7fe      	b.n	8008d62 <vTaskSwitchContext+0x3e>
 8008d64:	68fb      	ldr	r3, [r7, #12]
 8008d66:	3b01      	subs	r3, #1
 8008d68:	60fb      	str	r3, [r7, #12]
 8008d6a:	491d      	ldr	r1, [pc, #116]	; (8008de0 <vTaskSwitchContext+0xbc>)
 8008d6c:	68fa      	ldr	r2, [r7, #12]
 8008d6e:	4613      	mov	r3, r2
 8008d70:	009b      	lsls	r3, r3, #2
 8008d72:	4413      	add	r3, r2
 8008d74:	009b      	lsls	r3, r3, #2
 8008d76:	440b      	add	r3, r1
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	2b00      	cmp	r3, #0
 8008d7c:	d0e4      	beq.n	8008d48 <vTaskSwitchContext+0x24>
 8008d7e:	68fa      	ldr	r2, [r7, #12]
 8008d80:	4613      	mov	r3, r2
 8008d82:	009b      	lsls	r3, r3, #2
 8008d84:	4413      	add	r3, r2
 8008d86:	009b      	lsls	r3, r3, #2
 8008d88:	4a15      	ldr	r2, [pc, #84]	; (8008de0 <vTaskSwitchContext+0xbc>)
 8008d8a:	4413      	add	r3, r2
 8008d8c:	60bb      	str	r3, [r7, #8]
 8008d8e:	68bb      	ldr	r3, [r7, #8]
 8008d90:	685b      	ldr	r3, [r3, #4]
 8008d92:	685a      	ldr	r2, [r3, #4]
 8008d94:	68bb      	ldr	r3, [r7, #8]
 8008d96:	605a      	str	r2, [r3, #4]
 8008d98:	68bb      	ldr	r3, [r7, #8]
 8008d9a:	685a      	ldr	r2, [r3, #4]
 8008d9c:	68bb      	ldr	r3, [r7, #8]
 8008d9e:	3308      	adds	r3, #8
 8008da0:	429a      	cmp	r2, r3
 8008da2:	d104      	bne.n	8008dae <vTaskSwitchContext+0x8a>
 8008da4:	68bb      	ldr	r3, [r7, #8]
 8008da6:	685b      	ldr	r3, [r3, #4]
 8008da8:	685a      	ldr	r2, [r3, #4]
 8008daa:	68bb      	ldr	r3, [r7, #8]
 8008dac:	605a      	str	r2, [r3, #4]
 8008dae:	68bb      	ldr	r3, [r7, #8]
 8008db0:	685b      	ldr	r3, [r3, #4]
 8008db2:	68db      	ldr	r3, [r3, #12]
 8008db4:	4a0b      	ldr	r2, [pc, #44]	; (8008de4 <vTaskSwitchContext+0xc0>)
 8008db6:	6013      	str	r3, [r2, #0]
 8008db8:	4a08      	ldr	r2, [pc, #32]	; (8008ddc <vTaskSwitchContext+0xb8>)
 8008dba:	68fb      	ldr	r3, [r7, #12]
 8008dbc:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008dbe:	4b09      	ldr	r3, [pc, #36]	; (8008de4 <vTaskSwitchContext+0xc0>)
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	3354      	adds	r3, #84	; 0x54
 8008dc4:	4a08      	ldr	r2, [pc, #32]	; (8008de8 <vTaskSwitchContext+0xc4>)
 8008dc6:	6013      	str	r3, [r2, #0]
}
 8008dc8:	bf00      	nop
 8008dca:	3714      	adds	r7, #20
 8008dcc:	46bd      	mov	sp, r7
 8008dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dd2:	4770      	bx	lr
 8008dd4:	200035e0 	.word	0x200035e0
 8008dd8:	200035cc 	.word	0x200035cc
 8008ddc:	200035c0 	.word	0x200035c0
 8008de0:	200030e8 	.word	0x200030e8
 8008de4:	200030e4 	.word	0x200030e4
 8008de8:	20000018 	.word	0x20000018

08008dec <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8008dec:	b580      	push	{r7, lr}
 8008dee:	b084      	sub	sp, #16
 8008df0:	af00      	add	r7, sp, #0
 8008df2:	6078      	str	r0, [r7, #4]
 8008df4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	2b00      	cmp	r3, #0
 8008dfa:	d10a      	bne.n	8008e12 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8008dfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e00:	f383 8811 	msr	BASEPRI, r3
 8008e04:	f3bf 8f6f 	isb	sy
 8008e08:	f3bf 8f4f 	dsb	sy
 8008e0c:	60fb      	str	r3, [r7, #12]
}
 8008e0e:	bf00      	nop
 8008e10:	e7fe      	b.n	8008e10 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008e12:	4b07      	ldr	r3, [pc, #28]	; (8008e30 <vTaskPlaceOnEventList+0x44>)
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	3318      	adds	r3, #24
 8008e18:	4619      	mov	r1, r3
 8008e1a:	6878      	ldr	r0, [r7, #4]
 8008e1c:	f7fe fdb5 	bl	800798a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008e20:	2101      	movs	r1, #1
 8008e22:	6838      	ldr	r0, [r7, #0]
 8008e24:	f000 fbc4 	bl	80095b0 <prvAddCurrentTaskToDelayedList>
}
 8008e28:	bf00      	nop
 8008e2a:	3710      	adds	r7, #16
 8008e2c:	46bd      	mov	sp, r7
 8008e2e:	bd80      	pop	{r7, pc}
 8008e30:	200030e4 	.word	0x200030e4

08008e34 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008e34:	b580      	push	{r7, lr}
 8008e36:	b086      	sub	sp, #24
 8008e38:	af00      	add	r7, sp, #0
 8008e3a:	60f8      	str	r0, [r7, #12]
 8008e3c:	60b9      	str	r1, [r7, #8]
 8008e3e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8008e40:	68fb      	ldr	r3, [r7, #12]
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	d10a      	bne.n	8008e5c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8008e46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e4a:	f383 8811 	msr	BASEPRI, r3
 8008e4e:	f3bf 8f6f 	isb	sy
 8008e52:	f3bf 8f4f 	dsb	sy
 8008e56:	617b      	str	r3, [r7, #20]
}
 8008e58:	bf00      	nop
 8008e5a:	e7fe      	b.n	8008e5a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008e5c:	4b0a      	ldr	r3, [pc, #40]	; (8008e88 <vTaskPlaceOnEventListRestricted+0x54>)
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	3318      	adds	r3, #24
 8008e62:	4619      	mov	r1, r3
 8008e64:	68f8      	ldr	r0, [r7, #12]
 8008e66:	f7fe fd6c 	bl	8007942 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	2b00      	cmp	r3, #0
 8008e6e:	d002      	beq.n	8008e76 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8008e70:	f04f 33ff 	mov.w	r3, #4294967295
 8008e74:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8008e76:	6879      	ldr	r1, [r7, #4]
 8008e78:	68b8      	ldr	r0, [r7, #8]
 8008e7a:	f000 fb99 	bl	80095b0 <prvAddCurrentTaskToDelayedList>
	}
 8008e7e:	bf00      	nop
 8008e80:	3718      	adds	r7, #24
 8008e82:	46bd      	mov	sp, r7
 8008e84:	bd80      	pop	{r7, pc}
 8008e86:	bf00      	nop
 8008e88:	200030e4 	.word	0x200030e4

08008e8c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8008e8c:	b580      	push	{r7, lr}
 8008e8e:	b086      	sub	sp, #24
 8008e90:	af00      	add	r7, sp, #0
 8008e92:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	68db      	ldr	r3, [r3, #12]
 8008e98:	68db      	ldr	r3, [r3, #12]
 8008e9a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8008e9c:	693b      	ldr	r3, [r7, #16]
 8008e9e:	2b00      	cmp	r3, #0
 8008ea0:	d10a      	bne.n	8008eb8 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8008ea2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ea6:	f383 8811 	msr	BASEPRI, r3
 8008eaa:	f3bf 8f6f 	isb	sy
 8008eae:	f3bf 8f4f 	dsb	sy
 8008eb2:	60fb      	str	r3, [r7, #12]
}
 8008eb4:	bf00      	nop
 8008eb6:	e7fe      	b.n	8008eb6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8008eb8:	693b      	ldr	r3, [r7, #16]
 8008eba:	3318      	adds	r3, #24
 8008ebc:	4618      	mov	r0, r3
 8008ebe:	f7fe fd9d 	bl	80079fc <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008ec2:	4b1e      	ldr	r3, [pc, #120]	; (8008f3c <xTaskRemoveFromEventList+0xb0>)
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	2b00      	cmp	r3, #0
 8008ec8:	d11d      	bne.n	8008f06 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8008eca:	693b      	ldr	r3, [r7, #16]
 8008ecc:	3304      	adds	r3, #4
 8008ece:	4618      	mov	r0, r3
 8008ed0:	f7fe fd94 	bl	80079fc <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8008ed4:	693b      	ldr	r3, [r7, #16]
 8008ed6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ed8:	4b19      	ldr	r3, [pc, #100]	; (8008f40 <xTaskRemoveFromEventList+0xb4>)
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	429a      	cmp	r2, r3
 8008ede:	d903      	bls.n	8008ee8 <xTaskRemoveFromEventList+0x5c>
 8008ee0:	693b      	ldr	r3, [r7, #16]
 8008ee2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ee4:	4a16      	ldr	r2, [pc, #88]	; (8008f40 <xTaskRemoveFromEventList+0xb4>)
 8008ee6:	6013      	str	r3, [r2, #0]
 8008ee8:	693b      	ldr	r3, [r7, #16]
 8008eea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008eec:	4613      	mov	r3, r2
 8008eee:	009b      	lsls	r3, r3, #2
 8008ef0:	4413      	add	r3, r2
 8008ef2:	009b      	lsls	r3, r3, #2
 8008ef4:	4a13      	ldr	r2, [pc, #76]	; (8008f44 <xTaskRemoveFromEventList+0xb8>)
 8008ef6:	441a      	add	r2, r3
 8008ef8:	693b      	ldr	r3, [r7, #16]
 8008efa:	3304      	adds	r3, #4
 8008efc:	4619      	mov	r1, r3
 8008efe:	4610      	mov	r0, r2
 8008f00:	f7fe fd1f 	bl	8007942 <vListInsertEnd>
 8008f04:	e005      	b.n	8008f12 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008f06:	693b      	ldr	r3, [r7, #16]
 8008f08:	3318      	adds	r3, #24
 8008f0a:	4619      	mov	r1, r3
 8008f0c:	480e      	ldr	r0, [pc, #56]	; (8008f48 <xTaskRemoveFromEventList+0xbc>)
 8008f0e:	f7fe fd18 	bl	8007942 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008f12:	693b      	ldr	r3, [r7, #16]
 8008f14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f16:	4b0d      	ldr	r3, [pc, #52]	; (8008f4c <xTaskRemoveFromEventList+0xc0>)
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f1c:	429a      	cmp	r2, r3
 8008f1e:	d905      	bls.n	8008f2c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8008f20:	2301      	movs	r3, #1
 8008f22:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8008f24:	4b0a      	ldr	r3, [pc, #40]	; (8008f50 <xTaskRemoveFromEventList+0xc4>)
 8008f26:	2201      	movs	r2, #1
 8008f28:	601a      	str	r2, [r3, #0]
 8008f2a:	e001      	b.n	8008f30 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8008f2c:	2300      	movs	r3, #0
 8008f2e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8008f30:	697b      	ldr	r3, [r7, #20]
}
 8008f32:	4618      	mov	r0, r3
 8008f34:	3718      	adds	r7, #24
 8008f36:	46bd      	mov	sp, r7
 8008f38:	bd80      	pop	{r7, pc}
 8008f3a:	bf00      	nop
 8008f3c:	200035e0 	.word	0x200035e0
 8008f40:	200035c0 	.word	0x200035c0
 8008f44:	200030e8 	.word	0x200030e8
 8008f48:	20003578 	.word	0x20003578
 8008f4c:	200030e4 	.word	0x200030e4
 8008f50:	200035cc 	.word	0x200035cc

08008f54 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008f54:	b480      	push	{r7}
 8008f56:	b083      	sub	sp, #12
 8008f58:	af00      	add	r7, sp, #0
 8008f5a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008f5c:	4b06      	ldr	r3, [pc, #24]	; (8008f78 <vTaskInternalSetTimeOutState+0x24>)
 8008f5e:	681a      	ldr	r2, [r3, #0]
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008f64:	4b05      	ldr	r3, [pc, #20]	; (8008f7c <vTaskInternalSetTimeOutState+0x28>)
 8008f66:	681a      	ldr	r2, [r3, #0]
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	605a      	str	r2, [r3, #4]
}
 8008f6c:	bf00      	nop
 8008f6e:	370c      	adds	r7, #12
 8008f70:	46bd      	mov	sp, r7
 8008f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f76:	4770      	bx	lr
 8008f78:	200035d0 	.word	0x200035d0
 8008f7c:	200035bc 	.word	0x200035bc

08008f80 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8008f80:	b580      	push	{r7, lr}
 8008f82:	b088      	sub	sp, #32
 8008f84:	af00      	add	r7, sp, #0
 8008f86:	6078      	str	r0, [r7, #4]
 8008f88:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	2b00      	cmp	r3, #0
 8008f8e:	d10a      	bne.n	8008fa6 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8008f90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f94:	f383 8811 	msr	BASEPRI, r3
 8008f98:	f3bf 8f6f 	isb	sy
 8008f9c:	f3bf 8f4f 	dsb	sy
 8008fa0:	613b      	str	r3, [r7, #16]
}
 8008fa2:	bf00      	nop
 8008fa4:	e7fe      	b.n	8008fa4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8008fa6:	683b      	ldr	r3, [r7, #0]
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	d10a      	bne.n	8008fc2 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8008fac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fb0:	f383 8811 	msr	BASEPRI, r3
 8008fb4:	f3bf 8f6f 	isb	sy
 8008fb8:	f3bf 8f4f 	dsb	sy
 8008fbc:	60fb      	str	r3, [r7, #12]
}
 8008fbe:	bf00      	nop
 8008fc0:	e7fe      	b.n	8008fc0 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8008fc2:	f000 ffc7 	bl	8009f54 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8008fc6:	4b1d      	ldr	r3, [pc, #116]	; (800903c <xTaskCheckForTimeOut+0xbc>)
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	685b      	ldr	r3, [r3, #4]
 8008fd0:	69ba      	ldr	r2, [r7, #24]
 8008fd2:	1ad3      	subs	r3, r2, r3
 8008fd4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8008fd6:	683b      	ldr	r3, [r7, #0]
 8008fd8:	681b      	ldr	r3, [r3, #0]
 8008fda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008fde:	d102      	bne.n	8008fe6 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8008fe0:	2300      	movs	r3, #0
 8008fe2:	61fb      	str	r3, [r7, #28]
 8008fe4:	e023      	b.n	800902e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	681a      	ldr	r2, [r3, #0]
 8008fea:	4b15      	ldr	r3, [pc, #84]	; (8009040 <xTaskCheckForTimeOut+0xc0>)
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	429a      	cmp	r2, r3
 8008ff0:	d007      	beq.n	8009002 <xTaskCheckForTimeOut+0x82>
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	685b      	ldr	r3, [r3, #4]
 8008ff6:	69ba      	ldr	r2, [r7, #24]
 8008ff8:	429a      	cmp	r2, r3
 8008ffa:	d302      	bcc.n	8009002 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8008ffc:	2301      	movs	r3, #1
 8008ffe:	61fb      	str	r3, [r7, #28]
 8009000:	e015      	b.n	800902e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8009002:	683b      	ldr	r3, [r7, #0]
 8009004:	681b      	ldr	r3, [r3, #0]
 8009006:	697a      	ldr	r2, [r7, #20]
 8009008:	429a      	cmp	r2, r3
 800900a:	d20b      	bcs.n	8009024 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800900c:	683b      	ldr	r3, [r7, #0]
 800900e:	681a      	ldr	r2, [r3, #0]
 8009010:	697b      	ldr	r3, [r7, #20]
 8009012:	1ad2      	subs	r2, r2, r3
 8009014:	683b      	ldr	r3, [r7, #0]
 8009016:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8009018:	6878      	ldr	r0, [r7, #4]
 800901a:	f7ff ff9b 	bl	8008f54 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800901e:	2300      	movs	r3, #0
 8009020:	61fb      	str	r3, [r7, #28]
 8009022:	e004      	b.n	800902e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8009024:	683b      	ldr	r3, [r7, #0]
 8009026:	2200      	movs	r2, #0
 8009028:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800902a:	2301      	movs	r3, #1
 800902c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800902e:	f000 ffc1 	bl	8009fb4 <vPortExitCritical>

	return xReturn;
 8009032:	69fb      	ldr	r3, [r7, #28]
}
 8009034:	4618      	mov	r0, r3
 8009036:	3720      	adds	r7, #32
 8009038:	46bd      	mov	sp, r7
 800903a:	bd80      	pop	{r7, pc}
 800903c:	200035bc 	.word	0x200035bc
 8009040:	200035d0 	.word	0x200035d0

08009044 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8009044:	b480      	push	{r7}
 8009046:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8009048:	4b03      	ldr	r3, [pc, #12]	; (8009058 <vTaskMissedYield+0x14>)
 800904a:	2201      	movs	r2, #1
 800904c:	601a      	str	r2, [r3, #0]
}
 800904e:	bf00      	nop
 8009050:	46bd      	mov	sp, r7
 8009052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009056:	4770      	bx	lr
 8009058:	200035cc 	.word	0x200035cc

0800905c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800905c:	b580      	push	{r7, lr}
 800905e:	b082      	sub	sp, #8
 8009060:	af00      	add	r7, sp, #0
 8009062:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8009064:	f000 f852 	bl	800910c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8009068:	4b06      	ldr	r3, [pc, #24]	; (8009084 <prvIdleTask+0x28>)
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	2b01      	cmp	r3, #1
 800906e:	d9f9      	bls.n	8009064 <prvIdleTask+0x8>
			{
				taskYIELD();
 8009070:	4b05      	ldr	r3, [pc, #20]	; (8009088 <prvIdleTask+0x2c>)
 8009072:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009076:	601a      	str	r2, [r3, #0]
 8009078:	f3bf 8f4f 	dsb	sy
 800907c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8009080:	e7f0      	b.n	8009064 <prvIdleTask+0x8>
 8009082:	bf00      	nop
 8009084:	200030e8 	.word	0x200030e8
 8009088:	e000ed04 	.word	0xe000ed04

0800908c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800908c:	b580      	push	{r7, lr}
 800908e:	b082      	sub	sp, #8
 8009090:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009092:	2300      	movs	r3, #0
 8009094:	607b      	str	r3, [r7, #4]
 8009096:	e00c      	b.n	80090b2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8009098:	687a      	ldr	r2, [r7, #4]
 800909a:	4613      	mov	r3, r2
 800909c:	009b      	lsls	r3, r3, #2
 800909e:	4413      	add	r3, r2
 80090a0:	009b      	lsls	r3, r3, #2
 80090a2:	4a12      	ldr	r2, [pc, #72]	; (80090ec <prvInitialiseTaskLists+0x60>)
 80090a4:	4413      	add	r3, r2
 80090a6:	4618      	mov	r0, r3
 80090a8:	f7fe fc1e 	bl	80078e8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	3301      	adds	r3, #1
 80090b0:	607b      	str	r3, [r7, #4]
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	2b37      	cmp	r3, #55	; 0x37
 80090b6:	d9ef      	bls.n	8009098 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80090b8:	480d      	ldr	r0, [pc, #52]	; (80090f0 <prvInitialiseTaskLists+0x64>)
 80090ba:	f7fe fc15 	bl	80078e8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80090be:	480d      	ldr	r0, [pc, #52]	; (80090f4 <prvInitialiseTaskLists+0x68>)
 80090c0:	f7fe fc12 	bl	80078e8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80090c4:	480c      	ldr	r0, [pc, #48]	; (80090f8 <prvInitialiseTaskLists+0x6c>)
 80090c6:	f7fe fc0f 	bl	80078e8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80090ca:	480c      	ldr	r0, [pc, #48]	; (80090fc <prvInitialiseTaskLists+0x70>)
 80090cc:	f7fe fc0c 	bl	80078e8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80090d0:	480b      	ldr	r0, [pc, #44]	; (8009100 <prvInitialiseTaskLists+0x74>)
 80090d2:	f7fe fc09 	bl	80078e8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80090d6:	4b0b      	ldr	r3, [pc, #44]	; (8009104 <prvInitialiseTaskLists+0x78>)
 80090d8:	4a05      	ldr	r2, [pc, #20]	; (80090f0 <prvInitialiseTaskLists+0x64>)
 80090da:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80090dc:	4b0a      	ldr	r3, [pc, #40]	; (8009108 <prvInitialiseTaskLists+0x7c>)
 80090de:	4a05      	ldr	r2, [pc, #20]	; (80090f4 <prvInitialiseTaskLists+0x68>)
 80090e0:	601a      	str	r2, [r3, #0]
}
 80090e2:	bf00      	nop
 80090e4:	3708      	adds	r7, #8
 80090e6:	46bd      	mov	sp, r7
 80090e8:	bd80      	pop	{r7, pc}
 80090ea:	bf00      	nop
 80090ec:	200030e8 	.word	0x200030e8
 80090f0:	20003548 	.word	0x20003548
 80090f4:	2000355c 	.word	0x2000355c
 80090f8:	20003578 	.word	0x20003578
 80090fc:	2000358c 	.word	0x2000358c
 8009100:	200035a4 	.word	0x200035a4
 8009104:	20003570 	.word	0x20003570
 8009108:	20003574 	.word	0x20003574

0800910c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800910c:	b580      	push	{r7, lr}
 800910e:	b082      	sub	sp, #8
 8009110:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009112:	e019      	b.n	8009148 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8009114:	f000 ff1e 	bl	8009f54 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009118:	4b10      	ldr	r3, [pc, #64]	; (800915c <prvCheckTasksWaitingTermination+0x50>)
 800911a:	68db      	ldr	r3, [r3, #12]
 800911c:	68db      	ldr	r3, [r3, #12]
 800911e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	3304      	adds	r3, #4
 8009124:	4618      	mov	r0, r3
 8009126:	f7fe fc69 	bl	80079fc <uxListRemove>
				--uxCurrentNumberOfTasks;
 800912a:	4b0d      	ldr	r3, [pc, #52]	; (8009160 <prvCheckTasksWaitingTermination+0x54>)
 800912c:	681b      	ldr	r3, [r3, #0]
 800912e:	3b01      	subs	r3, #1
 8009130:	4a0b      	ldr	r2, [pc, #44]	; (8009160 <prvCheckTasksWaitingTermination+0x54>)
 8009132:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8009134:	4b0b      	ldr	r3, [pc, #44]	; (8009164 <prvCheckTasksWaitingTermination+0x58>)
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	3b01      	subs	r3, #1
 800913a:	4a0a      	ldr	r2, [pc, #40]	; (8009164 <prvCheckTasksWaitingTermination+0x58>)
 800913c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800913e:	f000 ff39 	bl	8009fb4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8009142:	6878      	ldr	r0, [r7, #4]
 8009144:	f000 f810 	bl	8009168 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009148:	4b06      	ldr	r3, [pc, #24]	; (8009164 <prvCheckTasksWaitingTermination+0x58>)
 800914a:	681b      	ldr	r3, [r3, #0]
 800914c:	2b00      	cmp	r3, #0
 800914e:	d1e1      	bne.n	8009114 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8009150:	bf00      	nop
 8009152:	bf00      	nop
 8009154:	3708      	adds	r7, #8
 8009156:	46bd      	mov	sp, r7
 8009158:	bd80      	pop	{r7, pc}
 800915a:	bf00      	nop
 800915c:	2000358c 	.word	0x2000358c
 8009160:	200035b8 	.word	0x200035b8
 8009164:	200035a0 	.word	0x200035a0

08009168 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8009168:	b580      	push	{r7, lr}
 800916a:	b084      	sub	sp, #16
 800916c:	af00      	add	r7, sp, #0
 800916e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	3354      	adds	r3, #84	; 0x54
 8009174:	4618      	mov	r0, r3
 8009176:	f001 fbd5 	bl	800a924 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8009180:	2b00      	cmp	r3, #0
 8009182:	d108      	bne.n	8009196 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009188:	4618      	mov	r0, r3
 800918a:	f001 f8d1 	bl	800a330 <vPortFree>
				vPortFree( pxTCB );
 800918e:	6878      	ldr	r0, [r7, #4]
 8009190:	f001 f8ce 	bl	800a330 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8009194:	e018      	b.n	80091c8 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800919c:	2b01      	cmp	r3, #1
 800919e:	d103      	bne.n	80091a8 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80091a0:	6878      	ldr	r0, [r7, #4]
 80091a2:	f001 f8c5 	bl	800a330 <vPortFree>
	}
 80091a6:	e00f      	b.n	80091c8 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80091ae:	2b02      	cmp	r3, #2
 80091b0:	d00a      	beq.n	80091c8 <prvDeleteTCB+0x60>
	__asm volatile
 80091b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091b6:	f383 8811 	msr	BASEPRI, r3
 80091ba:	f3bf 8f6f 	isb	sy
 80091be:	f3bf 8f4f 	dsb	sy
 80091c2:	60fb      	str	r3, [r7, #12]
}
 80091c4:	bf00      	nop
 80091c6:	e7fe      	b.n	80091c6 <prvDeleteTCB+0x5e>
	}
 80091c8:	bf00      	nop
 80091ca:	3710      	adds	r7, #16
 80091cc:	46bd      	mov	sp, r7
 80091ce:	bd80      	pop	{r7, pc}

080091d0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80091d0:	b480      	push	{r7}
 80091d2:	b083      	sub	sp, #12
 80091d4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80091d6:	4b0c      	ldr	r3, [pc, #48]	; (8009208 <prvResetNextTaskUnblockTime+0x38>)
 80091d8:	681b      	ldr	r3, [r3, #0]
 80091da:	681b      	ldr	r3, [r3, #0]
 80091dc:	2b00      	cmp	r3, #0
 80091de:	d104      	bne.n	80091ea <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80091e0:	4b0a      	ldr	r3, [pc, #40]	; (800920c <prvResetNextTaskUnblockTime+0x3c>)
 80091e2:	f04f 32ff 	mov.w	r2, #4294967295
 80091e6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80091e8:	e008      	b.n	80091fc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80091ea:	4b07      	ldr	r3, [pc, #28]	; (8009208 <prvResetNextTaskUnblockTime+0x38>)
 80091ec:	681b      	ldr	r3, [r3, #0]
 80091ee:	68db      	ldr	r3, [r3, #12]
 80091f0:	68db      	ldr	r3, [r3, #12]
 80091f2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	685b      	ldr	r3, [r3, #4]
 80091f8:	4a04      	ldr	r2, [pc, #16]	; (800920c <prvResetNextTaskUnblockTime+0x3c>)
 80091fa:	6013      	str	r3, [r2, #0]
}
 80091fc:	bf00      	nop
 80091fe:	370c      	adds	r7, #12
 8009200:	46bd      	mov	sp, r7
 8009202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009206:	4770      	bx	lr
 8009208:	20003570 	.word	0x20003570
 800920c:	200035d8 	.word	0x200035d8

08009210 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8009210:	b480      	push	{r7}
 8009212:	b083      	sub	sp, #12
 8009214:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8009216:	4b0b      	ldr	r3, [pc, #44]	; (8009244 <xTaskGetSchedulerState+0x34>)
 8009218:	681b      	ldr	r3, [r3, #0]
 800921a:	2b00      	cmp	r3, #0
 800921c:	d102      	bne.n	8009224 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800921e:	2301      	movs	r3, #1
 8009220:	607b      	str	r3, [r7, #4]
 8009222:	e008      	b.n	8009236 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009224:	4b08      	ldr	r3, [pc, #32]	; (8009248 <xTaskGetSchedulerState+0x38>)
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	2b00      	cmp	r3, #0
 800922a:	d102      	bne.n	8009232 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800922c:	2302      	movs	r3, #2
 800922e:	607b      	str	r3, [r7, #4]
 8009230:	e001      	b.n	8009236 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8009232:	2300      	movs	r3, #0
 8009234:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8009236:	687b      	ldr	r3, [r7, #4]
	}
 8009238:	4618      	mov	r0, r3
 800923a:	370c      	adds	r7, #12
 800923c:	46bd      	mov	sp, r7
 800923e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009242:	4770      	bx	lr
 8009244:	200035c4 	.word	0x200035c4
 8009248:	200035e0 	.word	0x200035e0

0800924c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800924c:	b580      	push	{r7, lr}
 800924e:	b086      	sub	sp, #24
 8009250:	af00      	add	r7, sp, #0
 8009252:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8009258:	2300      	movs	r3, #0
 800925a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	2b00      	cmp	r3, #0
 8009260:	d056      	beq.n	8009310 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8009262:	4b2e      	ldr	r3, [pc, #184]	; (800931c <xTaskPriorityDisinherit+0xd0>)
 8009264:	681b      	ldr	r3, [r3, #0]
 8009266:	693a      	ldr	r2, [r7, #16]
 8009268:	429a      	cmp	r2, r3
 800926a:	d00a      	beq.n	8009282 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800926c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009270:	f383 8811 	msr	BASEPRI, r3
 8009274:	f3bf 8f6f 	isb	sy
 8009278:	f3bf 8f4f 	dsb	sy
 800927c:	60fb      	str	r3, [r7, #12]
}
 800927e:	bf00      	nop
 8009280:	e7fe      	b.n	8009280 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8009282:	693b      	ldr	r3, [r7, #16]
 8009284:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009286:	2b00      	cmp	r3, #0
 8009288:	d10a      	bne.n	80092a0 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800928a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800928e:	f383 8811 	msr	BASEPRI, r3
 8009292:	f3bf 8f6f 	isb	sy
 8009296:	f3bf 8f4f 	dsb	sy
 800929a:	60bb      	str	r3, [r7, #8]
}
 800929c:	bf00      	nop
 800929e:	e7fe      	b.n	800929e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80092a0:	693b      	ldr	r3, [r7, #16]
 80092a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80092a4:	1e5a      	subs	r2, r3, #1
 80092a6:	693b      	ldr	r3, [r7, #16]
 80092a8:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80092aa:	693b      	ldr	r3, [r7, #16]
 80092ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80092ae:	693b      	ldr	r3, [r7, #16]
 80092b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80092b2:	429a      	cmp	r2, r3
 80092b4:	d02c      	beq.n	8009310 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80092b6:	693b      	ldr	r3, [r7, #16]
 80092b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80092ba:	2b00      	cmp	r3, #0
 80092bc:	d128      	bne.n	8009310 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80092be:	693b      	ldr	r3, [r7, #16]
 80092c0:	3304      	adds	r3, #4
 80092c2:	4618      	mov	r0, r3
 80092c4:	f7fe fb9a 	bl	80079fc <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80092c8:	693b      	ldr	r3, [r7, #16]
 80092ca:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80092cc:	693b      	ldr	r3, [r7, #16]
 80092ce:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80092d0:	693b      	ldr	r3, [r7, #16]
 80092d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092d4:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80092d8:	693b      	ldr	r3, [r7, #16]
 80092da:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80092dc:	693b      	ldr	r3, [r7, #16]
 80092de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80092e0:	4b0f      	ldr	r3, [pc, #60]	; (8009320 <xTaskPriorityDisinherit+0xd4>)
 80092e2:	681b      	ldr	r3, [r3, #0]
 80092e4:	429a      	cmp	r2, r3
 80092e6:	d903      	bls.n	80092f0 <xTaskPriorityDisinherit+0xa4>
 80092e8:	693b      	ldr	r3, [r7, #16]
 80092ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092ec:	4a0c      	ldr	r2, [pc, #48]	; (8009320 <xTaskPriorityDisinherit+0xd4>)
 80092ee:	6013      	str	r3, [r2, #0]
 80092f0:	693b      	ldr	r3, [r7, #16]
 80092f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80092f4:	4613      	mov	r3, r2
 80092f6:	009b      	lsls	r3, r3, #2
 80092f8:	4413      	add	r3, r2
 80092fa:	009b      	lsls	r3, r3, #2
 80092fc:	4a09      	ldr	r2, [pc, #36]	; (8009324 <xTaskPriorityDisinherit+0xd8>)
 80092fe:	441a      	add	r2, r3
 8009300:	693b      	ldr	r3, [r7, #16]
 8009302:	3304      	adds	r3, #4
 8009304:	4619      	mov	r1, r3
 8009306:	4610      	mov	r0, r2
 8009308:	f7fe fb1b 	bl	8007942 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800930c:	2301      	movs	r3, #1
 800930e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009310:	697b      	ldr	r3, [r7, #20]
	}
 8009312:	4618      	mov	r0, r3
 8009314:	3718      	adds	r7, #24
 8009316:	46bd      	mov	sp, r7
 8009318:	bd80      	pop	{r7, pc}
 800931a:	bf00      	nop
 800931c:	200030e4 	.word	0x200030e4
 8009320:	200035c0 	.word	0x200035c0
 8009324:	200030e8 	.word	0x200030e8

08009328 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 8009328:	b580      	push	{r7, lr}
 800932a:	b086      	sub	sp, #24
 800932c:	af00      	add	r7, sp, #0
 800932e:	60f8      	str	r0, [r7, #12]
 8009330:	60b9      	str	r1, [r7, #8]
 8009332:	607a      	str	r2, [r7, #4]
 8009334:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 8009336:	f000 fe0d 	bl	8009f54 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800933a:	4b29      	ldr	r3, [pc, #164]	; (80093e0 <xTaskNotifyWait+0xb8>)
 800933c:	681b      	ldr	r3, [r3, #0]
 800933e:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 8009342:	b2db      	uxtb	r3, r3
 8009344:	2b02      	cmp	r3, #2
 8009346:	d01c      	beq.n	8009382 <xTaskNotifyWait+0x5a>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 8009348:	4b25      	ldr	r3, [pc, #148]	; (80093e0 <xTaskNotifyWait+0xb8>)
 800934a:	681b      	ldr	r3, [r3, #0]
 800934c:	f8d3 10b4 	ldr.w	r1, [r3, #180]	; 0xb4
 8009350:	68fa      	ldr	r2, [r7, #12]
 8009352:	43d2      	mvns	r2, r2
 8009354:	400a      	ands	r2, r1
 8009356:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 800935a:	4b21      	ldr	r3, [pc, #132]	; (80093e0 <xTaskNotifyWait+0xb8>)
 800935c:	681b      	ldr	r3, [r3, #0]
 800935e:	2201      	movs	r2, #1
 8009360:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8

				if( xTicksToWait > ( TickType_t ) 0 )
 8009364:	683b      	ldr	r3, [r7, #0]
 8009366:	2b00      	cmp	r3, #0
 8009368:	d00b      	beq.n	8009382 <xTaskNotifyWait+0x5a>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800936a:	2101      	movs	r1, #1
 800936c:	6838      	ldr	r0, [r7, #0]
 800936e:	f000 f91f 	bl	80095b0 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 8009372:	4b1c      	ldr	r3, [pc, #112]	; (80093e4 <xTaskNotifyWait+0xbc>)
 8009374:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009378:	601a      	str	r2, [r3, #0]
 800937a:	f3bf 8f4f 	dsb	sy
 800937e:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8009382:	f000 fe17 	bl	8009fb4 <vPortExitCritical>

		taskENTER_CRITICAL();
 8009386:	f000 fde5 	bl	8009f54 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	2b00      	cmp	r3, #0
 800938e:	d005      	beq.n	800939c <xTaskNotifyWait+0x74>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 8009390:	4b13      	ldr	r3, [pc, #76]	; (80093e0 <xTaskNotifyWait+0xb8>)
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800939c:	4b10      	ldr	r3, [pc, #64]	; (80093e0 <xTaskNotifyWait+0xb8>)
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 80093a4:	b2db      	uxtb	r3, r3
 80093a6:	2b02      	cmp	r3, #2
 80093a8:	d002      	beq.n	80093b0 <xTaskNotifyWait+0x88>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 80093aa:	2300      	movs	r3, #0
 80093ac:	617b      	str	r3, [r7, #20]
 80093ae:	e00a      	b.n	80093c6 <xTaskNotifyWait+0x9e>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 80093b0:	4b0b      	ldr	r3, [pc, #44]	; (80093e0 <xTaskNotifyWait+0xb8>)
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	f8d3 10b4 	ldr.w	r1, [r3, #180]	; 0xb4
 80093b8:	68ba      	ldr	r2, [r7, #8]
 80093ba:	43d2      	mvns	r2, r2
 80093bc:	400a      	ands	r2, r1
 80093be:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
				xReturn = pdTRUE;
 80093c2:	2301      	movs	r3, #1
 80093c4:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80093c6:	4b06      	ldr	r3, [pc, #24]	; (80093e0 <xTaskNotifyWait+0xb8>)
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	2200      	movs	r2, #0
 80093cc:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
		}
		taskEXIT_CRITICAL();
 80093d0:	f000 fdf0 	bl	8009fb4 <vPortExitCritical>

		return xReturn;
 80093d4:	697b      	ldr	r3, [r7, #20]
	}
 80093d6:	4618      	mov	r0, r3
 80093d8:	3718      	adds	r7, #24
 80093da:	46bd      	mov	sp, r7
 80093dc:	bd80      	pop	{r7, pc}
 80093de:	bf00      	nop
 80093e0:	200030e4 	.word	0x200030e4
 80093e4:	e000ed04 	.word	0xe000ed04

080093e8 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 80093e8:	b580      	push	{r7, lr}
 80093ea:	b08e      	sub	sp, #56	; 0x38
 80093ec:	af00      	add	r7, sp, #0
 80093ee:	60f8      	str	r0, [r7, #12]
 80093f0:	60b9      	str	r1, [r7, #8]
 80093f2:	603b      	str	r3, [r7, #0]
 80093f4:	4613      	mov	r3, r2
 80093f6:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 80093f8:	2301      	movs	r3, #1
 80093fa:	637b      	str	r3, [r7, #52]	; 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 80093fc:	68fb      	ldr	r3, [r7, #12]
 80093fe:	2b00      	cmp	r3, #0
 8009400:	d10a      	bne.n	8009418 <xTaskGenericNotifyFromISR+0x30>
	__asm volatile
 8009402:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009406:	f383 8811 	msr	BASEPRI, r3
 800940a:	f3bf 8f6f 	isb	sy
 800940e:	f3bf 8f4f 	dsb	sy
 8009412:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009414:	bf00      	nop
 8009416:	e7fe      	b.n	8009416 <xTaskGenericNotifyFromISR+0x2e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009418:	f000 fe7e 	bl	800a118 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 800941c:	68fb      	ldr	r3, [r7, #12]
 800941e:	633b      	str	r3, [r7, #48]	; 0x30
	__asm volatile
 8009420:	f3ef 8211 	mrs	r2, BASEPRI
 8009424:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009428:	f383 8811 	msr	BASEPRI, r3
 800942c:	f3bf 8f6f 	isb	sy
 8009430:	f3bf 8f4f 	dsb	sy
 8009434:	623a      	str	r2, [r7, #32]
 8009436:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 8009438:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800943a:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 800943c:	683b      	ldr	r3, [r7, #0]
 800943e:	2b00      	cmp	r3, #0
 8009440:	d004      	beq.n	800944c <xTaskGenericNotifyFromISR+0x64>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8009442:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009444:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 8009448:	683b      	ldr	r3, [r7, #0]
 800944a:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800944c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800944e:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 8009452:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8009456:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009458:	2202      	movs	r2, #2
 800945a:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8

			switch( eAction )
 800945e:	79fb      	ldrb	r3, [r7, #7]
 8009460:	2b04      	cmp	r3, #4
 8009462:	d82f      	bhi.n	80094c4 <xTaskGenericNotifyFromISR+0xdc>
 8009464:	a201      	add	r2, pc, #4	; (adr r2, 800946c <xTaskGenericNotifyFromISR+0x84>)
 8009466:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800946a:	bf00      	nop
 800946c:	080094e7 	.word	0x080094e7
 8009470:	08009481 	.word	0x08009481
 8009474:	08009493 	.word	0x08009493
 8009478:	080094a3 	.word	0x080094a3
 800947c:	080094ad 	.word	0x080094ad
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8009480:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009482:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 8009486:	68bb      	ldr	r3, [r7, #8]
 8009488:	431a      	orrs	r2, r3
 800948a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800948c:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					break;
 8009490:	e02c      	b.n	80094ec <xTaskGenericNotifyFromISR+0x104>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8009492:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009494:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8009498:	1c5a      	adds	r2, r3, #1
 800949a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800949c:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					break;
 80094a0:	e024      	b.n	80094ec <xTaskGenericNotifyFromISR+0x104>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 80094a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094a4:	68ba      	ldr	r2, [r7, #8]
 80094a6:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					break;
 80094aa:	e01f      	b.n	80094ec <xTaskGenericNotifyFromISR+0x104>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 80094ac:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80094b0:	2b02      	cmp	r3, #2
 80094b2:	d004      	beq.n	80094be <xTaskGenericNotifyFromISR+0xd6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 80094b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094b6:	68ba      	ldr	r2, [r7, #8]
 80094b8:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 80094bc:	e016      	b.n	80094ec <xTaskGenericNotifyFromISR+0x104>
						xReturn = pdFAIL;
 80094be:	2300      	movs	r3, #0
 80094c0:	637b      	str	r3, [r7, #52]	; 0x34
					break;
 80094c2:	e013      	b.n	80094ec <xTaskGenericNotifyFromISR+0x104>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 80094c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094c6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80094ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80094ce:	d00c      	beq.n	80094ea <xTaskGenericNotifyFromISR+0x102>
	__asm volatile
 80094d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094d4:	f383 8811 	msr	BASEPRI, r3
 80094d8:	f3bf 8f6f 	isb	sy
 80094dc:	f3bf 8f4f 	dsb	sy
 80094e0:	61bb      	str	r3, [r7, #24]
}
 80094e2:	bf00      	nop
 80094e4:	e7fe      	b.n	80094e4 <xTaskGenericNotifyFromISR+0xfc>
					break;
 80094e6:	bf00      	nop
 80094e8:	e000      	b.n	80094ec <xTaskGenericNotifyFromISR+0x104>
					break;
 80094ea:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 80094ec:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80094f0:	2b01      	cmp	r3, #1
 80094f2:	d146      	bne.n	8009582 <xTaskGenericNotifyFromISR+0x19a>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 80094f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80094f8:	2b00      	cmp	r3, #0
 80094fa:	d00a      	beq.n	8009512 <xTaskGenericNotifyFromISR+0x12a>
	__asm volatile
 80094fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009500:	f383 8811 	msr	BASEPRI, r3
 8009504:	f3bf 8f6f 	isb	sy
 8009508:	f3bf 8f4f 	dsb	sy
 800950c:	617b      	str	r3, [r7, #20]
}
 800950e:	bf00      	nop
 8009510:	e7fe      	b.n	8009510 <xTaskGenericNotifyFromISR+0x128>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009512:	4b21      	ldr	r3, [pc, #132]	; (8009598 <xTaskGenericNotifyFromISR+0x1b0>)
 8009514:	681b      	ldr	r3, [r3, #0]
 8009516:	2b00      	cmp	r3, #0
 8009518:	d11d      	bne.n	8009556 <xTaskGenericNotifyFromISR+0x16e>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800951a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800951c:	3304      	adds	r3, #4
 800951e:	4618      	mov	r0, r3
 8009520:	f7fe fa6c 	bl	80079fc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009524:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009526:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009528:	4b1c      	ldr	r3, [pc, #112]	; (800959c <xTaskGenericNotifyFromISR+0x1b4>)
 800952a:	681b      	ldr	r3, [r3, #0]
 800952c:	429a      	cmp	r2, r3
 800952e:	d903      	bls.n	8009538 <xTaskGenericNotifyFromISR+0x150>
 8009530:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009532:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009534:	4a19      	ldr	r2, [pc, #100]	; (800959c <xTaskGenericNotifyFromISR+0x1b4>)
 8009536:	6013      	str	r3, [r2, #0]
 8009538:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800953a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800953c:	4613      	mov	r3, r2
 800953e:	009b      	lsls	r3, r3, #2
 8009540:	4413      	add	r3, r2
 8009542:	009b      	lsls	r3, r3, #2
 8009544:	4a16      	ldr	r2, [pc, #88]	; (80095a0 <xTaskGenericNotifyFromISR+0x1b8>)
 8009546:	441a      	add	r2, r3
 8009548:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800954a:	3304      	adds	r3, #4
 800954c:	4619      	mov	r1, r3
 800954e:	4610      	mov	r0, r2
 8009550:	f7fe f9f7 	bl	8007942 <vListInsertEnd>
 8009554:	e005      	b.n	8009562 <xTaskGenericNotifyFromISR+0x17a>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8009556:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009558:	3318      	adds	r3, #24
 800955a:	4619      	mov	r1, r3
 800955c:	4811      	ldr	r0, [pc, #68]	; (80095a4 <xTaskGenericNotifyFromISR+0x1bc>)
 800955e:	f7fe f9f0 	bl	8007942 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009562:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009564:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009566:	4b10      	ldr	r3, [pc, #64]	; (80095a8 <xTaskGenericNotifyFromISR+0x1c0>)
 8009568:	681b      	ldr	r3, [r3, #0]
 800956a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800956c:	429a      	cmp	r2, r3
 800956e:	d908      	bls.n	8009582 <xTaskGenericNotifyFromISR+0x19a>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 8009570:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009572:	2b00      	cmp	r3, #0
 8009574:	d002      	beq.n	800957c <xTaskGenericNotifyFromISR+0x194>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 8009576:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009578:	2201      	movs	r2, #1
 800957a:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 800957c:	4b0b      	ldr	r3, [pc, #44]	; (80095ac <xTaskGenericNotifyFromISR+0x1c4>)
 800957e:	2201      	movs	r2, #1
 8009580:	601a      	str	r2, [r3, #0]
 8009582:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009584:	613b      	str	r3, [r7, #16]
	__asm volatile
 8009586:	693b      	ldr	r3, [r7, #16]
 8009588:	f383 8811 	msr	BASEPRI, r3
}
 800958c:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 800958e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	}
 8009590:	4618      	mov	r0, r3
 8009592:	3738      	adds	r7, #56	; 0x38
 8009594:	46bd      	mov	sp, r7
 8009596:	bd80      	pop	{r7, pc}
 8009598:	200035e0 	.word	0x200035e0
 800959c:	200035c0 	.word	0x200035c0
 80095a0:	200030e8 	.word	0x200030e8
 80095a4:	20003578 	.word	0x20003578
 80095a8:	200030e4 	.word	0x200030e4
 80095ac:	200035cc 	.word	0x200035cc

080095b0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80095b0:	b580      	push	{r7, lr}
 80095b2:	b084      	sub	sp, #16
 80095b4:	af00      	add	r7, sp, #0
 80095b6:	6078      	str	r0, [r7, #4]
 80095b8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80095ba:	4b21      	ldr	r3, [pc, #132]	; (8009640 <prvAddCurrentTaskToDelayedList+0x90>)
 80095bc:	681b      	ldr	r3, [r3, #0]
 80095be:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80095c0:	4b20      	ldr	r3, [pc, #128]	; (8009644 <prvAddCurrentTaskToDelayedList+0x94>)
 80095c2:	681b      	ldr	r3, [r3, #0]
 80095c4:	3304      	adds	r3, #4
 80095c6:	4618      	mov	r0, r3
 80095c8:	f7fe fa18 	bl	80079fc <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80095d2:	d10a      	bne.n	80095ea <prvAddCurrentTaskToDelayedList+0x3a>
 80095d4:	683b      	ldr	r3, [r7, #0]
 80095d6:	2b00      	cmp	r3, #0
 80095d8:	d007      	beq.n	80095ea <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80095da:	4b1a      	ldr	r3, [pc, #104]	; (8009644 <prvAddCurrentTaskToDelayedList+0x94>)
 80095dc:	681b      	ldr	r3, [r3, #0]
 80095de:	3304      	adds	r3, #4
 80095e0:	4619      	mov	r1, r3
 80095e2:	4819      	ldr	r0, [pc, #100]	; (8009648 <prvAddCurrentTaskToDelayedList+0x98>)
 80095e4:	f7fe f9ad 	bl	8007942 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80095e8:	e026      	b.n	8009638 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80095ea:	68fa      	ldr	r2, [r7, #12]
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	4413      	add	r3, r2
 80095f0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80095f2:	4b14      	ldr	r3, [pc, #80]	; (8009644 <prvAddCurrentTaskToDelayedList+0x94>)
 80095f4:	681b      	ldr	r3, [r3, #0]
 80095f6:	68ba      	ldr	r2, [r7, #8]
 80095f8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80095fa:	68ba      	ldr	r2, [r7, #8]
 80095fc:	68fb      	ldr	r3, [r7, #12]
 80095fe:	429a      	cmp	r2, r3
 8009600:	d209      	bcs.n	8009616 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009602:	4b12      	ldr	r3, [pc, #72]	; (800964c <prvAddCurrentTaskToDelayedList+0x9c>)
 8009604:	681a      	ldr	r2, [r3, #0]
 8009606:	4b0f      	ldr	r3, [pc, #60]	; (8009644 <prvAddCurrentTaskToDelayedList+0x94>)
 8009608:	681b      	ldr	r3, [r3, #0]
 800960a:	3304      	adds	r3, #4
 800960c:	4619      	mov	r1, r3
 800960e:	4610      	mov	r0, r2
 8009610:	f7fe f9bb 	bl	800798a <vListInsert>
}
 8009614:	e010      	b.n	8009638 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009616:	4b0e      	ldr	r3, [pc, #56]	; (8009650 <prvAddCurrentTaskToDelayedList+0xa0>)
 8009618:	681a      	ldr	r2, [r3, #0]
 800961a:	4b0a      	ldr	r3, [pc, #40]	; (8009644 <prvAddCurrentTaskToDelayedList+0x94>)
 800961c:	681b      	ldr	r3, [r3, #0]
 800961e:	3304      	adds	r3, #4
 8009620:	4619      	mov	r1, r3
 8009622:	4610      	mov	r0, r2
 8009624:	f7fe f9b1 	bl	800798a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009628:	4b0a      	ldr	r3, [pc, #40]	; (8009654 <prvAddCurrentTaskToDelayedList+0xa4>)
 800962a:	681b      	ldr	r3, [r3, #0]
 800962c:	68ba      	ldr	r2, [r7, #8]
 800962e:	429a      	cmp	r2, r3
 8009630:	d202      	bcs.n	8009638 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8009632:	4a08      	ldr	r2, [pc, #32]	; (8009654 <prvAddCurrentTaskToDelayedList+0xa4>)
 8009634:	68bb      	ldr	r3, [r7, #8]
 8009636:	6013      	str	r3, [r2, #0]
}
 8009638:	bf00      	nop
 800963a:	3710      	adds	r7, #16
 800963c:	46bd      	mov	sp, r7
 800963e:	bd80      	pop	{r7, pc}
 8009640:	200035bc 	.word	0x200035bc
 8009644:	200030e4 	.word	0x200030e4
 8009648:	200035a4 	.word	0x200035a4
 800964c:	20003574 	.word	0x20003574
 8009650:	20003570 	.word	0x20003570
 8009654:	200035d8 	.word	0x200035d8

08009658 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8009658:	b580      	push	{r7, lr}
 800965a:	b08a      	sub	sp, #40	; 0x28
 800965c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800965e:	2300      	movs	r3, #0
 8009660:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8009662:	f000 fb07 	bl	8009c74 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8009666:	4b1c      	ldr	r3, [pc, #112]	; (80096d8 <xTimerCreateTimerTask+0x80>)
 8009668:	681b      	ldr	r3, [r3, #0]
 800966a:	2b00      	cmp	r3, #0
 800966c:	d021      	beq.n	80096b2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800966e:	2300      	movs	r3, #0
 8009670:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8009672:	2300      	movs	r3, #0
 8009674:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8009676:	1d3a      	adds	r2, r7, #4
 8009678:	f107 0108 	add.w	r1, r7, #8
 800967c:	f107 030c 	add.w	r3, r7, #12
 8009680:	4618      	mov	r0, r3
 8009682:	f7fe f917 	bl	80078b4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8009686:	6879      	ldr	r1, [r7, #4]
 8009688:	68bb      	ldr	r3, [r7, #8]
 800968a:	68fa      	ldr	r2, [r7, #12]
 800968c:	9202      	str	r2, [sp, #8]
 800968e:	9301      	str	r3, [sp, #4]
 8009690:	2305      	movs	r3, #5
 8009692:	9300      	str	r3, [sp, #0]
 8009694:	2300      	movs	r3, #0
 8009696:	460a      	mov	r2, r1
 8009698:	4910      	ldr	r1, [pc, #64]	; (80096dc <xTimerCreateTimerTask+0x84>)
 800969a:	4811      	ldr	r0, [pc, #68]	; (80096e0 <xTimerCreateTimerTask+0x88>)
 800969c:	f7fe fefe 	bl	800849c <xTaskCreateStatic>
 80096a0:	4603      	mov	r3, r0
 80096a2:	4a10      	ldr	r2, [pc, #64]	; (80096e4 <xTimerCreateTimerTask+0x8c>)
 80096a4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80096a6:	4b0f      	ldr	r3, [pc, #60]	; (80096e4 <xTimerCreateTimerTask+0x8c>)
 80096a8:	681b      	ldr	r3, [r3, #0]
 80096aa:	2b00      	cmp	r3, #0
 80096ac:	d001      	beq.n	80096b2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80096ae:	2301      	movs	r3, #1
 80096b0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80096b2:	697b      	ldr	r3, [r7, #20]
 80096b4:	2b00      	cmp	r3, #0
 80096b6:	d10a      	bne.n	80096ce <xTimerCreateTimerTask+0x76>
	__asm volatile
 80096b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096bc:	f383 8811 	msr	BASEPRI, r3
 80096c0:	f3bf 8f6f 	isb	sy
 80096c4:	f3bf 8f4f 	dsb	sy
 80096c8:	613b      	str	r3, [r7, #16]
}
 80096ca:	bf00      	nop
 80096cc:	e7fe      	b.n	80096cc <xTimerCreateTimerTask+0x74>
	return xReturn;
 80096ce:	697b      	ldr	r3, [r7, #20]
}
 80096d0:	4618      	mov	r0, r3
 80096d2:	3718      	adds	r7, #24
 80096d4:	46bd      	mov	sp, r7
 80096d6:	bd80      	pop	{r7, pc}
 80096d8:	20003614 	.word	0x20003614
 80096dc:	0800b0ac 	.word	0x0800b0ac
 80096e0:	0800981d 	.word	0x0800981d
 80096e4:	20003618 	.word	0x20003618

080096e8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80096e8:	b580      	push	{r7, lr}
 80096ea:	b08a      	sub	sp, #40	; 0x28
 80096ec:	af00      	add	r7, sp, #0
 80096ee:	60f8      	str	r0, [r7, #12]
 80096f0:	60b9      	str	r1, [r7, #8]
 80096f2:	607a      	str	r2, [r7, #4]
 80096f4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80096f6:	2300      	movs	r3, #0
 80096f8:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80096fa:	68fb      	ldr	r3, [r7, #12]
 80096fc:	2b00      	cmp	r3, #0
 80096fe:	d10a      	bne.n	8009716 <xTimerGenericCommand+0x2e>
	__asm volatile
 8009700:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009704:	f383 8811 	msr	BASEPRI, r3
 8009708:	f3bf 8f6f 	isb	sy
 800970c:	f3bf 8f4f 	dsb	sy
 8009710:	623b      	str	r3, [r7, #32]
}
 8009712:	bf00      	nop
 8009714:	e7fe      	b.n	8009714 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8009716:	4b1a      	ldr	r3, [pc, #104]	; (8009780 <xTimerGenericCommand+0x98>)
 8009718:	681b      	ldr	r3, [r3, #0]
 800971a:	2b00      	cmp	r3, #0
 800971c:	d02a      	beq.n	8009774 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800971e:	68bb      	ldr	r3, [r7, #8]
 8009720:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8009726:	68fb      	ldr	r3, [r7, #12]
 8009728:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800972a:	68bb      	ldr	r3, [r7, #8]
 800972c:	2b05      	cmp	r3, #5
 800972e:	dc18      	bgt.n	8009762 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8009730:	f7ff fd6e 	bl	8009210 <xTaskGetSchedulerState>
 8009734:	4603      	mov	r3, r0
 8009736:	2b02      	cmp	r3, #2
 8009738:	d109      	bne.n	800974e <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800973a:	4b11      	ldr	r3, [pc, #68]	; (8009780 <xTimerGenericCommand+0x98>)
 800973c:	6818      	ldr	r0, [r3, #0]
 800973e:	f107 0110 	add.w	r1, r7, #16
 8009742:	2300      	movs	r3, #0
 8009744:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009746:	f7fe fac1 	bl	8007ccc <xQueueGenericSend>
 800974a:	6278      	str	r0, [r7, #36]	; 0x24
 800974c:	e012      	b.n	8009774 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800974e:	4b0c      	ldr	r3, [pc, #48]	; (8009780 <xTimerGenericCommand+0x98>)
 8009750:	6818      	ldr	r0, [r3, #0]
 8009752:	f107 0110 	add.w	r1, r7, #16
 8009756:	2300      	movs	r3, #0
 8009758:	2200      	movs	r2, #0
 800975a:	f7fe fab7 	bl	8007ccc <xQueueGenericSend>
 800975e:	6278      	str	r0, [r7, #36]	; 0x24
 8009760:	e008      	b.n	8009774 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8009762:	4b07      	ldr	r3, [pc, #28]	; (8009780 <xTimerGenericCommand+0x98>)
 8009764:	6818      	ldr	r0, [r3, #0]
 8009766:	f107 0110 	add.w	r1, r7, #16
 800976a:	2300      	movs	r3, #0
 800976c:	683a      	ldr	r2, [r7, #0]
 800976e:	f7fe fbab 	bl	8007ec8 <xQueueGenericSendFromISR>
 8009772:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8009774:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009776:	4618      	mov	r0, r3
 8009778:	3728      	adds	r7, #40	; 0x28
 800977a:	46bd      	mov	sp, r7
 800977c:	bd80      	pop	{r7, pc}
 800977e:	bf00      	nop
 8009780:	20003614 	.word	0x20003614

08009784 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8009784:	b580      	push	{r7, lr}
 8009786:	b088      	sub	sp, #32
 8009788:	af02      	add	r7, sp, #8
 800978a:	6078      	str	r0, [r7, #4]
 800978c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800978e:	4b22      	ldr	r3, [pc, #136]	; (8009818 <prvProcessExpiredTimer+0x94>)
 8009790:	681b      	ldr	r3, [r3, #0]
 8009792:	68db      	ldr	r3, [r3, #12]
 8009794:	68db      	ldr	r3, [r3, #12]
 8009796:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009798:	697b      	ldr	r3, [r7, #20]
 800979a:	3304      	adds	r3, #4
 800979c:	4618      	mov	r0, r3
 800979e:	f7fe f92d 	bl	80079fc <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80097a2:	697b      	ldr	r3, [r7, #20]
 80097a4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80097a8:	f003 0304 	and.w	r3, r3, #4
 80097ac:	2b00      	cmp	r3, #0
 80097ae:	d022      	beq.n	80097f6 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80097b0:	697b      	ldr	r3, [r7, #20]
 80097b2:	699a      	ldr	r2, [r3, #24]
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	18d1      	adds	r1, r2, r3
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	683a      	ldr	r2, [r7, #0]
 80097bc:	6978      	ldr	r0, [r7, #20]
 80097be:	f000 f8d1 	bl	8009964 <prvInsertTimerInActiveList>
 80097c2:	4603      	mov	r3, r0
 80097c4:	2b00      	cmp	r3, #0
 80097c6:	d01f      	beq.n	8009808 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80097c8:	2300      	movs	r3, #0
 80097ca:	9300      	str	r3, [sp, #0]
 80097cc:	2300      	movs	r3, #0
 80097ce:	687a      	ldr	r2, [r7, #4]
 80097d0:	2100      	movs	r1, #0
 80097d2:	6978      	ldr	r0, [r7, #20]
 80097d4:	f7ff ff88 	bl	80096e8 <xTimerGenericCommand>
 80097d8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80097da:	693b      	ldr	r3, [r7, #16]
 80097dc:	2b00      	cmp	r3, #0
 80097de:	d113      	bne.n	8009808 <prvProcessExpiredTimer+0x84>
	__asm volatile
 80097e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097e4:	f383 8811 	msr	BASEPRI, r3
 80097e8:	f3bf 8f6f 	isb	sy
 80097ec:	f3bf 8f4f 	dsb	sy
 80097f0:	60fb      	str	r3, [r7, #12]
}
 80097f2:	bf00      	nop
 80097f4:	e7fe      	b.n	80097f4 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80097f6:	697b      	ldr	r3, [r7, #20]
 80097f8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80097fc:	f023 0301 	bic.w	r3, r3, #1
 8009800:	b2da      	uxtb	r2, r3
 8009802:	697b      	ldr	r3, [r7, #20]
 8009804:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009808:	697b      	ldr	r3, [r7, #20]
 800980a:	6a1b      	ldr	r3, [r3, #32]
 800980c:	6978      	ldr	r0, [r7, #20]
 800980e:	4798      	blx	r3
}
 8009810:	bf00      	nop
 8009812:	3718      	adds	r7, #24
 8009814:	46bd      	mov	sp, r7
 8009816:	bd80      	pop	{r7, pc}
 8009818:	2000360c 	.word	0x2000360c

0800981c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800981c:	b580      	push	{r7, lr}
 800981e:	b084      	sub	sp, #16
 8009820:	af00      	add	r7, sp, #0
 8009822:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009824:	f107 0308 	add.w	r3, r7, #8
 8009828:	4618      	mov	r0, r3
 800982a:	f000 f857 	bl	80098dc <prvGetNextExpireTime>
 800982e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8009830:	68bb      	ldr	r3, [r7, #8]
 8009832:	4619      	mov	r1, r3
 8009834:	68f8      	ldr	r0, [r7, #12]
 8009836:	f000 f803 	bl	8009840 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800983a:	f000 f8d5 	bl	80099e8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800983e:	e7f1      	b.n	8009824 <prvTimerTask+0x8>

08009840 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8009840:	b580      	push	{r7, lr}
 8009842:	b084      	sub	sp, #16
 8009844:	af00      	add	r7, sp, #0
 8009846:	6078      	str	r0, [r7, #4]
 8009848:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800984a:	f7ff f8f5 	bl	8008a38 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800984e:	f107 0308 	add.w	r3, r7, #8
 8009852:	4618      	mov	r0, r3
 8009854:	f000 f866 	bl	8009924 <prvSampleTimeNow>
 8009858:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800985a:	68bb      	ldr	r3, [r7, #8]
 800985c:	2b00      	cmp	r3, #0
 800985e:	d130      	bne.n	80098c2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8009860:	683b      	ldr	r3, [r7, #0]
 8009862:	2b00      	cmp	r3, #0
 8009864:	d10a      	bne.n	800987c <prvProcessTimerOrBlockTask+0x3c>
 8009866:	687a      	ldr	r2, [r7, #4]
 8009868:	68fb      	ldr	r3, [r7, #12]
 800986a:	429a      	cmp	r2, r3
 800986c:	d806      	bhi.n	800987c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800986e:	f7ff f8f1 	bl	8008a54 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8009872:	68f9      	ldr	r1, [r7, #12]
 8009874:	6878      	ldr	r0, [r7, #4]
 8009876:	f7ff ff85 	bl	8009784 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800987a:	e024      	b.n	80098c6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800987c:	683b      	ldr	r3, [r7, #0]
 800987e:	2b00      	cmp	r3, #0
 8009880:	d008      	beq.n	8009894 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8009882:	4b13      	ldr	r3, [pc, #76]	; (80098d0 <prvProcessTimerOrBlockTask+0x90>)
 8009884:	681b      	ldr	r3, [r3, #0]
 8009886:	681b      	ldr	r3, [r3, #0]
 8009888:	2b00      	cmp	r3, #0
 800988a:	d101      	bne.n	8009890 <prvProcessTimerOrBlockTask+0x50>
 800988c:	2301      	movs	r3, #1
 800988e:	e000      	b.n	8009892 <prvProcessTimerOrBlockTask+0x52>
 8009890:	2300      	movs	r3, #0
 8009892:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8009894:	4b0f      	ldr	r3, [pc, #60]	; (80098d4 <prvProcessTimerOrBlockTask+0x94>)
 8009896:	6818      	ldr	r0, [r3, #0]
 8009898:	687a      	ldr	r2, [r7, #4]
 800989a:	68fb      	ldr	r3, [r7, #12]
 800989c:	1ad3      	subs	r3, r2, r3
 800989e:	683a      	ldr	r2, [r7, #0]
 80098a0:	4619      	mov	r1, r3
 80098a2:	f7fe fdc7 	bl	8008434 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80098a6:	f7ff f8d5 	bl	8008a54 <xTaskResumeAll>
 80098aa:	4603      	mov	r3, r0
 80098ac:	2b00      	cmp	r3, #0
 80098ae:	d10a      	bne.n	80098c6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80098b0:	4b09      	ldr	r3, [pc, #36]	; (80098d8 <prvProcessTimerOrBlockTask+0x98>)
 80098b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80098b6:	601a      	str	r2, [r3, #0]
 80098b8:	f3bf 8f4f 	dsb	sy
 80098bc:	f3bf 8f6f 	isb	sy
}
 80098c0:	e001      	b.n	80098c6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80098c2:	f7ff f8c7 	bl	8008a54 <xTaskResumeAll>
}
 80098c6:	bf00      	nop
 80098c8:	3710      	adds	r7, #16
 80098ca:	46bd      	mov	sp, r7
 80098cc:	bd80      	pop	{r7, pc}
 80098ce:	bf00      	nop
 80098d0:	20003610 	.word	0x20003610
 80098d4:	20003614 	.word	0x20003614
 80098d8:	e000ed04 	.word	0xe000ed04

080098dc <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80098dc:	b480      	push	{r7}
 80098de:	b085      	sub	sp, #20
 80098e0:	af00      	add	r7, sp, #0
 80098e2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80098e4:	4b0e      	ldr	r3, [pc, #56]	; (8009920 <prvGetNextExpireTime+0x44>)
 80098e6:	681b      	ldr	r3, [r3, #0]
 80098e8:	681b      	ldr	r3, [r3, #0]
 80098ea:	2b00      	cmp	r3, #0
 80098ec:	d101      	bne.n	80098f2 <prvGetNextExpireTime+0x16>
 80098ee:	2201      	movs	r2, #1
 80098f0:	e000      	b.n	80098f4 <prvGetNextExpireTime+0x18>
 80098f2:	2200      	movs	r2, #0
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	681b      	ldr	r3, [r3, #0]
 80098fc:	2b00      	cmp	r3, #0
 80098fe:	d105      	bne.n	800990c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009900:	4b07      	ldr	r3, [pc, #28]	; (8009920 <prvGetNextExpireTime+0x44>)
 8009902:	681b      	ldr	r3, [r3, #0]
 8009904:	68db      	ldr	r3, [r3, #12]
 8009906:	681b      	ldr	r3, [r3, #0]
 8009908:	60fb      	str	r3, [r7, #12]
 800990a:	e001      	b.n	8009910 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800990c:	2300      	movs	r3, #0
 800990e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8009910:	68fb      	ldr	r3, [r7, #12]
}
 8009912:	4618      	mov	r0, r3
 8009914:	3714      	adds	r7, #20
 8009916:	46bd      	mov	sp, r7
 8009918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800991c:	4770      	bx	lr
 800991e:	bf00      	nop
 8009920:	2000360c 	.word	0x2000360c

08009924 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8009924:	b580      	push	{r7, lr}
 8009926:	b084      	sub	sp, #16
 8009928:	af00      	add	r7, sp, #0
 800992a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800992c:	f7ff f930 	bl	8008b90 <xTaskGetTickCount>
 8009930:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8009932:	4b0b      	ldr	r3, [pc, #44]	; (8009960 <prvSampleTimeNow+0x3c>)
 8009934:	681b      	ldr	r3, [r3, #0]
 8009936:	68fa      	ldr	r2, [r7, #12]
 8009938:	429a      	cmp	r2, r3
 800993a:	d205      	bcs.n	8009948 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800993c:	f000 f936 	bl	8009bac <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	2201      	movs	r2, #1
 8009944:	601a      	str	r2, [r3, #0]
 8009946:	e002      	b.n	800994e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	2200      	movs	r2, #0
 800994c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800994e:	4a04      	ldr	r2, [pc, #16]	; (8009960 <prvSampleTimeNow+0x3c>)
 8009950:	68fb      	ldr	r3, [r7, #12]
 8009952:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8009954:	68fb      	ldr	r3, [r7, #12]
}
 8009956:	4618      	mov	r0, r3
 8009958:	3710      	adds	r7, #16
 800995a:	46bd      	mov	sp, r7
 800995c:	bd80      	pop	{r7, pc}
 800995e:	bf00      	nop
 8009960:	2000361c 	.word	0x2000361c

08009964 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8009964:	b580      	push	{r7, lr}
 8009966:	b086      	sub	sp, #24
 8009968:	af00      	add	r7, sp, #0
 800996a:	60f8      	str	r0, [r7, #12]
 800996c:	60b9      	str	r1, [r7, #8]
 800996e:	607a      	str	r2, [r7, #4]
 8009970:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8009972:	2300      	movs	r3, #0
 8009974:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8009976:	68fb      	ldr	r3, [r7, #12]
 8009978:	68ba      	ldr	r2, [r7, #8]
 800997a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800997c:	68fb      	ldr	r3, [r7, #12]
 800997e:	68fa      	ldr	r2, [r7, #12]
 8009980:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8009982:	68ba      	ldr	r2, [r7, #8]
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	429a      	cmp	r2, r3
 8009988:	d812      	bhi.n	80099b0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800998a:	687a      	ldr	r2, [r7, #4]
 800998c:	683b      	ldr	r3, [r7, #0]
 800998e:	1ad2      	subs	r2, r2, r3
 8009990:	68fb      	ldr	r3, [r7, #12]
 8009992:	699b      	ldr	r3, [r3, #24]
 8009994:	429a      	cmp	r2, r3
 8009996:	d302      	bcc.n	800999e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8009998:	2301      	movs	r3, #1
 800999a:	617b      	str	r3, [r7, #20]
 800999c:	e01b      	b.n	80099d6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800999e:	4b10      	ldr	r3, [pc, #64]	; (80099e0 <prvInsertTimerInActiveList+0x7c>)
 80099a0:	681a      	ldr	r2, [r3, #0]
 80099a2:	68fb      	ldr	r3, [r7, #12]
 80099a4:	3304      	adds	r3, #4
 80099a6:	4619      	mov	r1, r3
 80099a8:	4610      	mov	r0, r2
 80099aa:	f7fd ffee 	bl	800798a <vListInsert>
 80099ae:	e012      	b.n	80099d6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80099b0:	687a      	ldr	r2, [r7, #4]
 80099b2:	683b      	ldr	r3, [r7, #0]
 80099b4:	429a      	cmp	r2, r3
 80099b6:	d206      	bcs.n	80099c6 <prvInsertTimerInActiveList+0x62>
 80099b8:	68ba      	ldr	r2, [r7, #8]
 80099ba:	683b      	ldr	r3, [r7, #0]
 80099bc:	429a      	cmp	r2, r3
 80099be:	d302      	bcc.n	80099c6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80099c0:	2301      	movs	r3, #1
 80099c2:	617b      	str	r3, [r7, #20]
 80099c4:	e007      	b.n	80099d6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80099c6:	4b07      	ldr	r3, [pc, #28]	; (80099e4 <prvInsertTimerInActiveList+0x80>)
 80099c8:	681a      	ldr	r2, [r3, #0]
 80099ca:	68fb      	ldr	r3, [r7, #12]
 80099cc:	3304      	adds	r3, #4
 80099ce:	4619      	mov	r1, r3
 80099d0:	4610      	mov	r0, r2
 80099d2:	f7fd ffda 	bl	800798a <vListInsert>
		}
	}

	return xProcessTimerNow;
 80099d6:	697b      	ldr	r3, [r7, #20]
}
 80099d8:	4618      	mov	r0, r3
 80099da:	3718      	adds	r7, #24
 80099dc:	46bd      	mov	sp, r7
 80099de:	bd80      	pop	{r7, pc}
 80099e0:	20003610 	.word	0x20003610
 80099e4:	2000360c 	.word	0x2000360c

080099e8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80099e8:	b580      	push	{r7, lr}
 80099ea:	b08e      	sub	sp, #56	; 0x38
 80099ec:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80099ee:	e0ca      	b.n	8009b86 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	2b00      	cmp	r3, #0
 80099f4:	da18      	bge.n	8009a28 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80099f6:	1d3b      	adds	r3, r7, #4
 80099f8:	3304      	adds	r3, #4
 80099fa:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80099fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80099fe:	2b00      	cmp	r3, #0
 8009a00:	d10a      	bne.n	8009a18 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8009a02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a06:	f383 8811 	msr	BASEPRI, r3
 8009a0a:	f3bf 8f6f 	isb	sy
 8009a0e:	f3bf 8f4f 	dsb	sy
 8009a12:	61fb      	str	r3, [r7, #28]
}
 8009a14:	bf00      	nop
 8009a16:	e7fe      	b.n	8009a16 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8009a18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a1a:	681b      	ldr	r3, [r3, #0]
 8009a1c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009a1e:	6850      	ldr	r0, [r2, #4]
 8009a20:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009a22:	6892      	ldr	r2, [r2, #8]
 8009a24:	4611      	mov	r1, r2
 8009a26:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	2b00      	cmp	r3, #0
 8009a2c:	f2c0 80aa 	blt.w	8009b84 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8009a30:	68fb      	ldr	r3, [r7, #12]
 8009a32:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8009a34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a36:	695b      	ldr	r3, [r3, #20]
 8009a38:	2b00      	cmp	r3, #0
 8009a3a:	d004      	beq.n	8009a46 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009a3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a3e:	3304      	adds	r3, #4
 8009a40:	4618      	mov	r0, r3
 8009a42:	f7fd ffdb 	bl	80079fc <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009a46:	463b      	mov	r3, r7
 8009a48:	4618      	mov	r0, r3
 8009a4a:	f7ff ff6b 	bl	8009924 <prvSampleTimeNow>
 8009a4e:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	2b09      	cmp	r3, #9
 8009a54:	f200 8097 	bhi.w	8009b86 <prvProcessReceivedCommands+0x19e>
 8009a58:	a201      	add	r2, pc, #4	; (adr r2, 8009a60 <prvProcessReceivedCommands+0x78>)
 8009a5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a5e:	bf00      	nop
 8009a60:	08009a89 	.word	0x08009a89
 8009a64:	08009a89 	.word	0x08009a89
 8009a68:	08009a89 	.word	0x08009a89
 8009a6c:	08009afd 	.word	0x08009afd
 8009a70:	08009b11 	.word	0x08009b11
 8009a74:	08009b5b 	.word	0x08009b5b
 8009a78:	08009a89 	.word	0x08009a89
 8009a7c:	08009a89 	.word	0x08009a89
 8009a80:	08009afd 	.word	0x08009afd
 8009a84:	08009b11 	.word	0x08009b11
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009a88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a8a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009a8e:	f043 0301 	orr.w	r3, r3, #1
 8009a92:	b2da      	uxtb	r2, r3
 8009a94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a96:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8009a9a:	68ba      	ldr	r2, [r7, #8]
 8009a9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a9e:	699b      	ldr	r3, [r3, #24]
 8009aa0:	18d1      	adds	r1, r2, r3
 8009aa2:	68bb      	ldr	r3, [r7, #8]
 8009aa4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009aa6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009aa8:	f7ff ff5c 	bl	8009964 <prvInsertTimerInActiveList>
 8009aac:	4603      	mov	r3, r0
 8009aae:	2b00      	cmp	r3, #0
 8009ab0:	d069      	beq.n	8009b86 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009ab2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ab4:	6a1b      	ldr	r3, [r3, #32]
 8009ab6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009ab8:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009aba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009abc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009ac0:	f003 0304 	and.w	r3, r3, #4
 8009ac4:	2b00      	cmp	r3, #0
 8009ac6:	d05e      	beq.n	8009b86 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8009ac8:	68ba      	ldr	r2, [r7, #8]
 8009aca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009acc:	699b      	ldr	r3, [r3, #24]
 8009ace:	441a      	add	r2, r3
 8009ad0:	2300      	movs	r3, #0
 8009ad2:	9300      	str	r3, [sp, #0]
 8009ad4:	2300      	movs	r3, #0
 8009ad6:	2100      	movs	r1, #0
 8009ad8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009ada:	f7ff fe05 	bl	80096e8 <xTimerGenericCommand>
 8009ade:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8009ae0:	6a3b      	ldr	r3, [r7, #32]
 8009ae2:	2b00      	cmp	r3, #0
 8009ae4:	d14f      	bne.n	8009b86 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8009ae6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009aea:	f383 8811 	msr	BASEPRI, r3
 8009aee:	f3bf 8f6f 	isb	sy
 8009af2:	f3bf 8f4f 	dsb	sy
 8009af6:	61bb      	str	r3, [r7, #24]
}
 8009af8:	bf00      	nop
 8009afa:	e7fe      	b.n	8009afa <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009afc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009afe:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009b02:	f023 0301 	bic.w	r3, r3, #1
 8009b06:	b2da      	uxtb	r2, r3
 8009b08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b0a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8009b0e:	e03a      	b.n	8009b86 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009b10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b12:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009b16:	f043 0301 	orr.w	r3, r3, #1
 8009b1a:	b2da      	uxtb	r2, r3
 8009b1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b1e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8009b22:	68ba      	ldr	r2, [r7, #8]
 8009b24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b26:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8009b28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b2a:	699b      	ldr	r3, [r3, #24]
 8009b2c:	2b00      	cmp	r3, #0
 8009b2e:	d10a      	bne.n	8009b46 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8009b30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b34:	f383 8811 	msr	BASEPRI, r3
 8009b38:	f3bf 8f6f 	isb	sy
 8009b3c:	f3bf 8f4f 	dsb	sy
 8009b40:	617b      	str	r3, [r7, #20]
}
 8009b42:	bf00      	nop
 8009b44:	e7fe      	b.n	8009b44 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8009b46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b48:	699a      	ldr	r2, [r3, #24]
 8009b4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b4c:	18d1      	adds	r1, r2, r3
 8009b4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009b52:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009b54:	f7ff ff06 	bl	8009964 <prvInsertTimerInActiveList>
					break;
 8009b58:	e015      	b.n	8009b86 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8009b5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b5c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009b60:	f003 0302 	and.w	r3, r3, #2
 8009b64:	2b00      	cmp	r3, #0
 8009b66:	d103      	bne.n	8009b70 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8009b68:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009b6a:	f000 fbe1 	bl	800a330 <vPortFree>
 8009b6e:	e00a      	b.n	8009b86 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009b70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b72:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009b76:	f023 0301 	bic.w	r3, r3, #1
 8009b7a:	b2da      	uxtb	r2, r3
 8009b7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b7e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8009b82:	e000      	b.n	8009b86 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8009b84:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009b86:	4b08      	ldr	r3, [pc, #32]	; (8009ba8 <prvProcessReceivedCommands+0x1c0>)
 8009b88:	681b      	ldr	r3, [r3, #0]
 8009b8a:	1d39      	adds	r1, r7, #4
 8009b8c:	2200      	movs	r2, #0
 8009b8e:	4618      	mov	r0, r3
 8009b90:	f7fe fa36 	bl	8008000 <xQueueReceive>
 8009b94:	4603      	mov	r3, r0
 8009b96:	2b00      	cmp	r3, #0
 8009b98:	f47f af2a 	bne.w	80099f0 <prvProcessReceivedCommands+0x8>
	}
}
 8009b9c:	bf00      	nop
 8009b9e:	bf00      	nop
 8009ba0:	3730      	adds	r7, #48	; 0x30
 8009ba2:	46bd      	mov	sp, r7
 8009ba4:	bd80      	pop	{r7, pc}
 8009ba6:	bf00      	nop
 8009ba8:	20003614 	.word	0x20003614

08009bac <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8009bac:	b580      	push	{r7, lr}
 8009bae:	b088      	sub	sp, #32
 8009bb0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009bb2:	e048      	b.n	8009c46 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009bb4:	4b2d      	ldr	r3, [pc, #180]	; (8009c6c <prvSwitchTimerLists+0xc0>)
 8009bb6:	681b      	ldr	r3, [r3, #0]
 8009bb8:	68db      	ldr	r3, [r3, #12]
 8009bba:	681b      	ldr	r3, [r3, #0]
 8009bbc:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009bbe:	4b2b      	ldr	r3, [pc, #172]	; (8009c6c <prvSwitchTimerLists+0xc0>)
 8009bc0:	681b      	ldr	r3, [r3, #0]
 8009bc2:	68db      	ldr	r3, [r3, #12]
 8009bc4:	68db      	ldr	r3, [r3, #12]
 8009bc6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009bc8:	68fb      	ldr	r3, [r7, #12]
 8009bca:	3304      	adds	r3, #4
 8009bcc:	4618      	mov	r0, r3
 8009bce:	f7fd ff15 	bl	80079fc <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009bd2:	68fb      	ldr	r3, [r7, #12]
 8009bd4:	6a1b      	ldr	r3, [r3, #32]
 8009bd6:	68f8      	ldr	r0, [r7, #12]
 8009bd8:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009bda:	68fb      	ldr	r3, [r7, #12]
 8009bdc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009be0:	f003 0304 	and.w	r3, r3, #4
 8009be4:	2b00      	cmp	r3, #0
 8009be6:	d02e      	beq.n	8009c46 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8009be8:	68fb      	ldr	r3, [r7, #12]
 8009bea:	699b      	ldr	r3, [r3, #24]
 8009bec:	693a      	ldr	r2, [r7, #16]
 8009bee:	4413      	add	r3, r2
 8009bf0:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8009bf2:	68ba      	ldr	r2, [r7, #8]
 8009bf4:	693b      	ldr	r3, [r7, #16]
 8009bf6:	429a      	cmp	r2, r3
 8009bf8:	d90e      	bls.n	8009c18 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8009bfa:	68fb      	ldr	r3, [r7, #12]
 8009bfc:	68ba      	ldr	r2, [r7, #8]
 8009bfe:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009c00:	68fb      	ldr	r3, [r7, #12]
 8009c02:	68fa      	ldr	r2, [r7, #12]
 8009c04:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009c06:	4b19      	ldr	r3, [pc, #100]	; (8009c6c <prvSwitchTimerLists+0xc0>)
 8009c08:	681a      	ldr	r2, [r3, #0]
 8009c0a:	68fb      	ldr	r3, [r7, #12]
 8009c0c:	3304      	adds	r3, #4
 8009c0e:	4619      	mov	r1, r3
 8009c10:	4610      	mov	r0, r2
 8009c12:	f7fd feba 	bl	800798a <vListInsert>
 8009c16:	e016      	b.n	8009c46 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009c18:	2300      	movs	r3, #0
 8009c1a:	9300      	str	r3, [sp, #0]
 8009c1c:	2300      	movs	r3, #0
 8009c1e:	693a      	ldr	r2, [r7, #16]
 8009c20:	2100      	movs	r1, #0
 8009c22:	68f8      	ldr	r0, [r7, #12]
 8009c24:	f7ff fd60 	bl	80096e8 <xTimerGenericCommand>
 8009c28:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	2b00      	cmp	r3, #0
 8009c2e:	d10a      	bne.n	8009c46 <prvSwitchTimerLists+0x9a>
	__asm volatile
 8009c30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c34:	f383 8811 	msr	BASEPRI, r3
 8009c38:	f3bf 8f6f 	isb	sy
 8009c3c:	f3bf 8f4f 	dsb	sy
 8009c40:	603b      	str	r3, [r7, #0]
}
 8009c42:	bf00      	nop
 8009c44:	e7fe      	b.n	8009c44 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009c46:	4b09      	ldr	r3, [pc, #36]	; (8009c6c <prvSwitchTimerLists+0xc0>)
 8009c48:	681b      	ldr	r3, [r3, #0]
 8009c4a:	681b      	ldr	r3, [r3, #0]
 8009c4c:	2b00      	cmp	r3, #0
 8009c4e:	d1b1      	bne.n	8009bb4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8009c50:	4b06      	ldr	r3, [pc, #24]	; (8009c6c <prvSwitchTimerLists+0xc0>)
 8009c52:	681b      	ldr	r3, [r3, #0]
 8009c54:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8009c56:	4b06      	ldr	r3, [pc, #24]	; (8009c70 <prvSwitchTimerLists+0xc4>)
 8009c58:	681b      	ldr	r3, [r3, #0]
 8009c5a:	4a04      	ldr	r2, [pc, #16]	; (8009c6c <prvSwitchTimerLists+0xc0>)
 8009c5c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8009c5e:	4a04      	ldr	r2, [pc, #16]	; (8009c70 <prvSwitchTimerLists+0xc4>)
 8009c60:	697b      	ldr	r3, [r7, #20]
 8009c62:	6013      	str	r3, [r2, #0]
}
 8009c64:	bf00      	nop
 8009c66:	3718      	adds	r7, #24
 8009c68:	46bd      	mov	sp, r7
 8009c6a:	bd80      	pop	{r7, pc}
 8009c6c:	2000360c 	.word	0x2000360c
 8009c70:	20003610 	.word	0x20003610

08009c74 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8009c74:	b580      	push	{r7, lr}
 8009c76:	b082      	sub	sp, #8
 8009c78:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8009c7a:	f000 f96b 	bl	8009f54 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8009c7e:	4b15      	ldr	r3, [pc, #84]	; (8009cd4 <prvCheckForValidListAndQueue+0x60>)
 8009c80:	681b      	ldr	r3, [r3, #0]
 8009c82:	2b00      	cmp	r3, #0
 8009c84:	d120      	bne.n	8009cc8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8009c86:	4814      	ldr	r0, [pc, #80]	; (8009cd8 <prvCheckForValidListAndQueue+0x64>)
 8009c88:	f7fd fe2e 	bl	80078e8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8009c8c:	4813      	ldr	r0, [pc, #76]	; (8009cdc <prvCheckForValidListAndQueue+0x68>)
 8009c8e:	f7fd fe2b 	bl	80078e8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8009c92:	4b13      	ldr	r3, [pc, #76]	; (8009ce0 <prvCheckForValidListAndQueue+0x6c>)
 8009c94:	4a10      	ldr	r2, [pc, #64]	; (8009cd8 <prvCheckForValidListAndQueue+0x64>)
 8009c96:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8009c98:	4b12      	ldr	r3, [pc, #72]	; (8009ce4 <prvCheckForValidListAndQueue+0x70>)
 8009c9a:	4a10      	ldr	r2, [pc, #64]	; (8009cdc <prvCheckForValidListAndQueue+0x68>)
 8009c9c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8009c9e:	2300      	movs	r3, #0
 8009ca0:	9300      	str	r3, [sp, #0]
 8009ca2:	4b11      	ldr	r3, [pc, #68]	; (8009ce8 <prvCheckForValidListAndQueue+0x74>)
 8009ca4:	4a11      	ldr	r2, [pc, #68]	; (8009cec <prvCheckForValidListAndQueue+0x78>)
 8009ca6:	2110      	movs	r1, #16
 8009ca8:	200a      	movs	r0, #10
 8009caa:	f7fd ff39 	bl	8007b20 <xQueueGenericCreateStatic>
 8009cae:	4603      	mov	r3, r0
 8009cb0:	4a08      	ldr	r2, [pc, #32]	; (8009cd4 <prvCheckForValidListAndQueue+0x60>)
 8009cb2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8009cb4:	4b07      	ldr	r3, [pc, #28]	; (8009cd4 <prvCheckForValidListAndQueue+0x60>)
 8009cb6:	681b      	ldr	r3, [r3, #0]
 8009cb8:	2b00      	cmp	r3, #0
 8009cba:	d005      	beq.n	8009cc8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8009cbc:	4b05      	ldr	r3, [pc, #20]	; (8009cd4 <prvCheckForValidListAndQueue+0x60>)
 8009cbe:	681b      	ldr	r3, [r3, #0]
 8009cc0:	490b      	ldr	r1, [pc, #44]	; (8009cf0 <prvCheckForValidListAndQueue+0x7c>)
 8009cc2:	4618      	mov	r0, r3
 8009cc4:	f7fe fb8c 	bl	80083e0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009cc8:	f000 f974 	bl	8009fb4 <vPortExitCritical>
}
 8009ccc:	bf00      	nop
 8009cce:	46bd      	mov	sp, r7
 8009cd0:	bd80      	pop	{r7, pc}
 8009cd2:	bf00      	nop
 8009cd4:	20003614 	.word	0x20003614
 8009cd8:	200035e4 	.word	0x200035e4
 8009cdc:	200035f8 	.word	0x200035f8
 8009ce0:	2000360c 	.word	0x2000360c
 8009ce4:	20003610 	.word	0x20003610
 8009ce8:	200036c0 	.word	0x200036c0
 8009cec:	20003620 	.word	0x20003620
 8009cf0:	0800b0b4 	.word	0x0800b0b4

08009cf4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009cf4:	b480      	push	{r7}
 8009cf6:	b085      	sub	sp, #20
 8009cf8:	af00      	add	r7, sp, #0
 8009cfa:	60f8      	str	r0, [r7, #12]
 8009cfc:	60b9      	str	r1, [r7, #8]
 8009cfe:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8009d00:	68fb      	ldr	r3, [r7, #12]
 8009d02:	3b04      	subs	r3, #4
 8009d04:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8009d06:	68fb      	ldr	r3, [r7, #12]
 8009d08:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8009d0c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009d0e:	68fb      	ldr	r3, [r7, #12]
 8009d10:	3b04      	subs	r3, #4
 8009d12:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009d14:	68bb      	ldr	r3, [r7, #8]
 8009d16:	f023 0201 	bic.w	r2, r3, #1
 8009d1a:	68fb      	ldr	r3, [r7, #12]
 8009d1c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009d1e:	68fb      	ldr	r3, [r7, #12]
 8009d20:	3b04      	subs	r3, #4
 8009d22:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009d24:	4a0c      	ldr	r2, [pc, #48]	; (8009d58 <pxPortInitialiseStack+0x64>)
 8009d26:	68fb      	ldr	r3, [r7, #12]
 8009d28:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8009d2a:	68fb      	ldr	r3, [r7, #12]
 8009d2c:	3b14      	subs	r3, #20
 8009d2e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009d30:	687a      	ldr	r2, [r7, #4]
 8009d32:	68fb      	ldr	r3, [r7, #12]
 8009d34:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8009d36:	68fb      	ldr	r3, [r7, #12]
 8009d38:	3b04      	subs	r3, #4
 8009d3a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8009d3c:	68fb      	ldr	r3, [r7, #12]
 8009d3e:	f06f 0202 	mvn.w	r2, #2
 8009d42:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8009d44:	68fb      	ldr	r3, [r7, #12]
 8009d46:	3b20      	subs	r3, #32
 8009d48:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8009d4a:	68fb      	ldr	r3, [r7, #12]
}
 8009d4c:	4618      	mov	r0, r3
 8009d4e:	3714      	adds	r7, #20
 8009d50:	46bd      	mov	sp, r7
 8009d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d56:	4770      	bx	lr
 8009d58:	08009d5d 	.word	0x08009d5d

08009d5c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009d5c:	b480      	push	{r7}
 8009d5e:	b085      	sub	sp, #20
 8009d60:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8009d62:	2300      	movs	r3, #0
 8009d64:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8009d66:	4b12      	ldr	r3, [pc, #72]	; (8009db0 <prvTaskExitError+0x54>)
 8009d68:	681b      	ldr	r3, [r3, #0]
 8009d6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d6e:	d00a      	beq.n	8009d86 <prvTaskExitError+0x2a>
	__asm volatile
 8009d70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d74:	f383 8811 	msr	BASEPRI, r3
 8009d78:	f3bf 8f6f 	isb	sy
 8009d7c:	f3bf 8f4f 	dsb	sy
 8009d80:	60fb      	str	r3, [r7, #12]
}
 8009d82:	bf00      	nop
 8009d84:	e7fe      	b.n	8009d84 <prvTaskExitError+0x28>
	__asm volatile
 8009d86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d8a:	f383 8811 	msr	BASEPRI, r3
 8009d8e:	f3bf 8f6f 	isb	sy
 8009d92:	f3bf 8f4f 	dsb	sy
 8009d96:	60bb      	str	r3, [r7, #8]
}
 8009d98:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8009d9a:	bf00      	nop
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	2b00      	cmp	r3, #0
 8009da0:	d0fc      	beq.n	8009d9c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8009da2:	bf00      	nop
 8009da4:	bf00      	nop
 8009da6:	3714      	adds	r7, #20
 8009da8:	46bd      	mov	sp, r7
 8009daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dae:	4770      	bx	lr
 8009db0:	20000014 	.word	0x20000014
	...

08009dc0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009dc0:	4b07      	ldr	r3, [pc, #28]	; (8009de0 <pxCurrentTCBConst2>)
 8009dc2:	6819      	ldr	r1, [r3, #0]
 8009dc4:	6808      	ldr	r0, [r1, #0]
 8009dc6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009dca:	f380 8809 	msr	PSP, r0
 8009dce:	f3bf 8f6f 	isb	sy
 8009dd2:	f04f 0000 	mov.w	r0, #0
 8009dd6:	f380 8811 	msr	BASEPRI, r0
 8009dda:	4770      	bx	lr
 8009ddc:	f3af 8000 	nop.w

08009de0 <pxCurrentTCBConst2>:
 8009de0:	200030e4 	.word	0x200030e4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009de4:	bf00      	nop
 8009de6:	bf00      	nop

08009de8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009de8:	4808      	ldr	r0, [pc, #32]	; (8009e0c <prvPortStartFirstTask+0x24>)
 8009dea:	6800      	ldr	r0, [r0, #0]
 8009dec:	6800      	ldr	r0, [r0, #0]
 8009dee:	f380 8808 	msr	MSP, r0
 8009df2:	f04f 0000 	mov.w	r0, #0
 8009df6:	f380 8814 	msr	CONTROL, r0
 8009dfa:	b662      	cpsie	i
 8009dfc:	b661      	cpsie	f
 8009dfe:	f3bf 8f4f 	dsb	sy
 8009e02:	f3bf 8f6f 	isb	sy
 8009e06:	df00      	svc	0
 8009e08:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8009e0a:	bf00      	nop
 8009e0c:	e000ed08 	.word	0xe000ed08

08009e10 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009e10:	b580      	push	{r7, lr}
 8009e12:	b086      	sub	sp, #24
 8009e14:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8009e16:	4b46      	ldr	r3, [pc, #280]	; (8009f30 <xPortStartScheduler+0x120>)
 8009e18:	681b      	ldr	r3, [r3, #0]
 8009e1a:	4a46      	ldr	r2, [pc, #280]	; (8009f34 <xPortStartScheduler+0x124>)
 8009e1c:	4293      	cmp	r3, r2
 8009e1e:	d10a      	bne.n	8009e36 <xPortStartScheduler+0x26>
	__asm volatile
 8009e20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e24:	f383 8811 	msr	BASEPRI, r3
 8009e28:	f3bf 8f6f 	isb	sy
 8009e2c:	f3bf 8f4f 	dsb	sy
 8009e30:	613b      	str	r3, [r7, #16]
}
 8009e32:	bf00      	nop
 8009e34:	e7fe      	b.n	8009e34 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8009e36:	4b3e      	ldr	r3, [pc, #248]	; (8009f30 <xPortStartScheduler+0x120>)
 8009e38:	681b      	ldr	r3, [r3, #0]
 8009e3a:	4a3f      	ldr	r2, [pc, #252]	; (8009f38 <xPortStartScheduler+0x128>)
 8009e3c:	4293      	cmp	r3, r2
 8009e3e:	d10a      	bne.n	8009e56 <xPortStartScheduler+0x46>
	__asm volatile
 8009e40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e44:	f383 8811 	msr	BASEPRI, r3
 8009e48:	f3bf 8f6f 	isb	sy
 8009e4c:	f3bf 8f4f 	dsb	sy
 8009e50:	60fb      	str	r3, [r7, #12]
}
 8009e52:	bf00      	nop
 8009e54:	e7fe      	b.n	8009e54 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8009e56:	4b39      	ldr	r3, [pc, #228]	; (8009f3c <xPortStartScheduler+0x12c>)
 8009e58:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8009e5a:	697b      	ldr	r3, [r7, #20]
 8009e5c:	781b      	ldrb	r3, [r3, #0]
 8009e5e:	b2db      	uxtb	r3, r3
 8009e60:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009e62:	697b      	ldr	r3, [r7, #20]
 8009e64:	22ff      	movs	r2, #255	; 0xff
 8009e66:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009e68:	697b      	ldr	r3, [r7, #20]
 8009e6a:	781b      	ldrb	r3, [r3, #0]
 8009e6c:	b2db      	uxtb	r3, r3
 8009e6e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009e70:	78fb      	ldrb	r3, [r7, #3]
 8009e72:	b2db      	uxtb	r3, r3
 8009e74:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8009e78:	b2da      	uxtb	r2, r3
 8009e7a:	4b31      	ldr	r3, [pc, #196]	; (8009f40 <xPortStartScheduler+0x130>)
 8009e7c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8009e7e:	4b31      	ldr	r3, [pc, #196]	; (8009f44 <xPortStartScheduler+0x134>)
 8009e80:	2207      	movs	r2, #7
 8009e82:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009e84:	e009      	b.n	8009e9a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8009e86:	4b2f      	ldr	r3, [pc, #188]	; (8009f44 <xPortStartScheduler+0x134>)
 8009e88:	681b      	ldr	r3, [r3, #0]
 8009e8a:	3b01      	subs	r3, #1
 8009e8c:	4a2d      	ldr	r2, [pc, #180]	; (8009f44 <xPortStartScheduler+0x134>)
 8009e8e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009e90:	78fb      	ldrb	r3, [r7, #3]
 8009e92:	b2db      	uxtb	r3, r3
 8009e94:	005b      	lsls	r3, r3, #1
 8009e96:	b2db      	uxtb	r3, r3
 8009e98:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009e9a:	78fb      	ldrb	r3, [r7, #3]
 8009e9c:	b2db      	uxtb	r3, r3
 8009e9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009ea2:	2b80      	cmp	r3, #128	; 0x80
 8009ea4:	d0ef      	beq.n	8009e86 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8009ea6:	4b27      	ldr	r3, [pc, #156]	; (8009f44 <xPortStartScheduler+0x134>)
 8009ea8:	681b      	ldr	r3, [r3, #0]
 8009eaa:	f1c3 0307 	rsb	r3, r3, #7
 8009eae:	2b04      	cmp	r3, #4
 8009eb0:	d00a      	beq.n	8009ec8 <xPortStartScheduler+0xb8>
	__asm volatile
 8009eb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009eb6:	f383 8811 	msr	BASEPRI, r3
 8009eba:	f3bf 8f6f 	isb	sy
 8009ebe:	f3bf 8f4f 	dsb	sy
 8009ec2:	60bb      	str	r3, [r7, #8]
}
 8009ec4:	bf00      	nop
 8009ec6:	e7fe      	b.n	8009ec6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8009ec8:	4b1e      	ldr	r3, [pc, #120]	; (8009f44 <xPortStartScheduler+0x134>)
 8009eca:	681b      	ldr	r3, [r3, #0]
 8009ecc:	021b      	lsls	r3, r3, #8
 8009ece:	4a1d      	ldr	r2, [pc, #116]	; (8009f44 <xPortStartScheduler+0x134>)
 8009ed0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009ed2:	4b1c      	ldr	r3, [pc, #112]	; (8009f44 <xPortStartScheduler+0x134>)
 8009ed4:	681b      	ldr	r3, [r3, #0]
 8009ed6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009eda:	4a1a      	ldr	r2, [pc, #104]	; (8009f44 <xPortStartScheduler+0x134>)
 8009edc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	b2da      	uxtb	r2, r3
 8009ee2:	697b      	ldr	r3, [r7, #20]
 8009ee4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8009ee6:	4b18      	ldr	r3, [pc, #96]	; (8009f48 <xPortStartScheduler+0x138>)
 8009ee8:	681b      	ldr	r3, [r3, #0]
 8009eea:	4a17      	ldr	r2, [pc, #92]	; (8009f48 <xPortStartScheduler+0x138>)
 8009eec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8009ef0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009ef2:	4b15      	ldr	r3, [pc, #84]	; (8009f48 <xPortStartScheduler+0x138>)
 8009ef4:	681b      	ldr	r3, [r3, #0]
 8009ef6:	4a14      	ldr	r2, [pc, #80]	; (8009f48 <xPortStartScheduler+0x138>)
 8009ef8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8009efc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8009efe:	f000 f8dd 	bl	800a0bc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009f02:	4b12      	ldr	r3, [pc, #72]	; (8009f4c <xPortStartScheduler+0x13c>)
 8009f04:	2200      	movs	r2, #0
 8009f06:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8009f08:	f000 f8fc 	bl	800a104 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8009f0c:	4b10      	ldr	r3, [pc, #64]	; (8009f50 <xPortStartScheduler+0x140>)
 8009f0e:	681b      	ldr	r3, [r3, #0]
 8009f10:	4a0f      	ldr	r2, [pc, #60]	; (8009f50 <xPortStartScheduler+0x140>)
 8009f12:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8009f16:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8009f18:	f7ff ff66 	bl	8009de8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8009f1c:	f7fe ff02 	bl	8008d24 <vTaskSwitchContext>
	prvTaskExitError();
 8009f20:	f7ff ff1c 	bl	8009d5c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8009f24:	2300      	movs	r3, #0
}
 8009f26:	4618      	mov	r0, r3
 8009f28:	3718      	adds	r7, #24
 8009f2a:	46bd      	mov	sp, r7
 8009f2c:	bd80      	pop	{r7, pc}
 8009f2e:	bf00      	nop
 8009f30:	e000ed00 	.word	0xe000ed00
 8009f34:	410fc271 	.word	0x410fc271
 8009f38:	410fc270 	.word	0x410fc270
 8009f3c:	e000e400 	.word	0xe000e400
 8009f40:	20003710 	.word	0x20003710
 8009f44:	20003714 	.word	0x20003714
 8009f48:	e000ed20 	.word	0xe000ed20
 8009f4c:	20000014 	.word	0x20000014
 8009f50:	e000ef34 	.word	0xe000ef34

08009f54 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009f54:	b480      	push	{r7}
 8009f56:	b083      	sub	sp, #12
 8009f58:	af00      	add	r7, sp, #0
	__asm volatile
 8009f5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f5e:	f383 8811 	msr	BASEPRI, r3
 8009f62:	f3bf 8f6f 	isb	sy
 8009f66:	f3bf 8f4f 	dsb	sy
 8009f6a:	607b      	str	r3, [r7, #4]
}
 8009f6c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8009f6e:	4b0f      	ldr	r3, [pc, #60]	; (8009fac <vPortEnterCritical+0x58>)
 8009f70:	681b      	ldr	r3, [r3, #0]
 8009f72:	3301      	adds	r3, #1
 8009f74:	4a0d      	ldr	r2, [pc, #52]	; (8009fac <vPortEnterCritical+0x58>)
 8009f76:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8009f78:	4b0c      	ldr	r3, [pc, #48]	; (8009fac <vPortEnterCritical+0x58>)
 8009f7a:	681b      	ldr	r3, [r3, #0]
 8009f7c:	2b01      	cmp	r3, #1
 8009f7e:	d10f      	bne.n	8009fa0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009f80:	4b0b      	ldr	r3, [pc, #44]	; (8009fb0 <vPortEnterCritical+0x5c>)
 8009f82:	681b      	ldr	r3, [r3, #0]
 8009f84:	b2db      	uxtb	r3, r3
 8009f86:	2b00      	cmp	r3, #0
 8009f88:	d00a      	beq.n	8009fa0 <vPortEnterCritical+0x4c>
	__asm volatile
 8009f8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f8e:	f383 8811 	msr	BASEPRI, r3
 8009f92:	f3bf 8f6f 	isb	sy
 8009f96:	f3bf 8f4f 	dsb	sy
 8009f9a:	603b      	str	r3, [r7, #0]
}
 8009f9c:	bf00      	nop
 8009f9e:	e7fe      	b.n	8009f9e <vPortEnterCritical+0x4a>
	}
}
 8009fa0:	bf00      	nop
 8009fa2:	370c      	adds	r7, #12
 8009fa4:	46bd      	mov	sp, r7
 8009fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009faa:	4770      	bx	lr
 8009fac:	20000014 	.word	0x20000014
 8009fb0:	e000ed04 	.word	0xe000ed04

08009fb4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009fb4:	b480      	push	{r7}
 8009fb6:	b083      	sub	sp, #12
 8009fb8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8009fba:	4b12      	ldr	r3, [pc, #72]	; (800a004 <vPortExitCritical+0x50>)
 8009fbc:	681b      	ldr	r3, [r3, #0]
 8009fbe:	2b00      	cmp	r3, #0
 8009fc0:	d10a      	bne.n	8009fd8 <vPortExitCritical+0x24>
	__asm volatile
 8009fc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fc6:	f383 8811 	msr	BASEPRI, r3
 8009fca:	f3bf 8f6f 	isb	sy
 8009fce:	f3bf 8f4f 	dsb	sy
 8009fd2:	607b      	str	r3, [r7, #4]
}
 8009fd4:	bf00      	nop
 8009fd6:	e7fe      	b.n	8009fd6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8009fd8:	4b0a      	ldr	r3, [pc, #40]	; (800a004 <vPortExitCritical+0x50>)
 8009fda:	681b      	ldr	r3, [r3, #0]
 8009fdc:	3b01      	subs	r3, #1
 8009fde:	4a09      	ldr	r2, [pc, #36]	; (800a004 <vPortExitCritical+0x50>)
 8009fe0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009fe2:	4b08      	ldr	r3, [pc, #32]	; (800a004 <vPortExitCritical+0x50>)
 8009fe4:	681b      	ldr	r3, [r3, #0]
 8009fe6:	2b00      	cmp	r3, #0
 8009fe8:	d105      	bne.n	8009ff6 <vPortExitCritical+0x42>
 8009fea:	2300      	movs	r3, #0
 8009fec:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009fee:	683b      	ldr	r3, [r7, #0]
 8009ff0:	f383 8811 	msr	BASEPRI, r3
}
 8009ff4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8009ff6:	bf00      	nop
 8009ff8:	370c      	adds	r7, #12
 8009ffa:	46bd      	mov	sp, r7
 8009ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a000:	4770      	bx	lr
 800a002:	bf00      	nop
 800a004:	20000014 	.word	0x20000014
	...

0800a010 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800a010:	f3ef 8009 	mrs	r0, PSP
 800a014:	f3bf 8f6f 	isb	sy
 800a018:	4b15      	ldr	r3, [pc, #84]	; (800a070 <pxCurrentTCBConst>)
 800a01a:	681a      	ldr	r2, [r3, #0]
 800a01c:	f01e 0f10 	tst.w	lr, #16
 800a020:	bf08      	it	eq
 800a022:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800a026:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a02a:	6010      	str	r0, [r2, #0]
 800a02c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800a030:	f04f 0050 	mov.w	r0, #80	; 0x50
 800a034:	f380 8811 	msr	BASEPRI, r0
 800a038:	f3bf 8f4f 	dsb	sy
 800a03c:	f3bf 8f6f 	isb	sy
 800a040:	f7fe fe70 	bl	8008d24 <vTaskSwitchContext>
 800a044:	f04f 0000 	mov.w	r0, #0
 800a048:	f380 8811 	msr	BASEPRI, r0
 800a04c:	bc09      	pop	{r0, r3}
 800a04e:	6819      	ldr	r1, [r3, #0]
 800a050:	6808      	ldr	r0, [r1, #0]
 800a052:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a056:	f01e 0f10 	tst.w	lr, #16
 800a05a:	bf08      	it	eq
 800a05c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800a060:	f380 8809 	msr	PSP, r0
 800a064:	f3bf 8f6f 	isb	sy
 800a068:	4770      	bx	lr
 800a06a:	bf00      	nop
 800a06c:	f3af 8000 	nop.w

0800a070 <pxCurrentTCBConst>:
 800a070:	200030e4 	.word	0x200030e4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800a074:	bf00      	nop
 800a076:	bf00      	nop

0800a078 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800a078:	b580      	push	{r7, lr}
 800a07a:	b082      	sub	sp, #8
 800a07c:	af00      	add	r7, sp, #0
	__asm volatile
 800a07e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a082:	f383 8811 	msr	BASEPRI, r3
 800a086:	f3bf 8f6f 	isb	sy
 800a08a:	f3bf 8f4f 	dsb	sy
 800a08e:	607b      	str	r3, [r7, #4]
}
 800a090:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800a092:	f7fe fd8d 	bl	8008bb0 <xTaskIncrementTick>
 800a096:	4603      	mov	r3, r0
 800a098:	2b00      	cmp	r3, #0
 800a09a:	d003      	beq.n	800a0a4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800a09c:	4b06      	ldr	r3, [pc, #24]	; (800a0b8 <xPortSysTickHandler+0x40>)
 800a09e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a0a2:	601a      	str	r2, [r3, #0]
 800a0a4:	2300      	movs	r3, #0
 800a0a6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a0a8:	683b      	ldr	r3, [r7, #0]
 800a0aa:	f383 8811 	msr	BASEPRI, r3
}
 800a0ae:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800a0b0:	bf00      	nop
 800a0b2:	3708      	adds	r7, #8
 800a0b4:	46bd      	mov	sp, r7
 800a0b6:	bd80      	pop	{r7, pc}
 800a0b8:	e000ed04 	.word	0xe000ed04

0800a0bc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800a0bc:	b480      	push	{r7}
 800a0be:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800a0c0:	4b0b      	ldr	r3, [pc, #44]	; (800a0f0 <vPortSetupTimerInterrupt+0x34>)
 800a0c2:	2200      	movs	r2, #0
 800a0c4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800a0c6:	4b0b      	ldr	r3, [pc, #44]	; (800a0f4 <vPortSetupTimerInterrupt+0x38>)
 800a0c8:	2200      	movs	r2, #0
 800a0ca:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800a0cc:	4b0a      	ldr	r3, [pc, #40]	; (800a0f8 <vPortSetupTimerInterrupt+0x3c>)
 800a0ce:	681b      	ldr	r3, [r3, #0]
 800a0d0:	4a0a      	ldr	r2, [pc, #40]	; (800a0fc <vPortSetupTimerInterrupt+0x40>)
 800a0d2:	fba2 2303 	umull	r2, r3, r2, r3
 800a0d6:	099b      	lsrs	r3, r3, #6
 800a0d8:	4a09      	ldr	r2, [pc, #36]	; (800a100 <vPortSetupTimerInterrupt+0x44>)
 800a0da:	3b01      	subs	r3, #1
 800a0dc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800a0de:	4b04      	ldr	r3, [pc, #16]	; (800a0f0 <vPortSetupTimerInterrupt+0x34>)
 800a0e0:	2207      	movs	r2, #7
 800a0e2:	601a      	str	r2, [r3, #0]
}
 800a0e4:	bf00      	nop
 800a0e6:	46bd      	mov	sp, r7
 800a0e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0ec:	4770      	bx	lr
 800a0ee:	bf00      	nop
 800a0f0:	e000e010 	.word	0xe000e010
 800a0f4:	e000e018 	.word	0xe000e018
 800a0f8:	20000000 	.word	0x20000000
 800a0fc:	10624dd3 	.word	0x10624dd3
 800a100:	e000e014 	.word	0xe000e014

0800a104 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800a104:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800a114 <vPortEnableVFP+0x10>
 800a108:	6801      	ldr	r1, [r0, #0]
 800a10a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800a10e:	6001      	str	r1, [r0, #0]
 800a110:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800a112:	bf00      	nop
 800a114:	e000ed88 	.word	0xe000ed88

0800a118 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800a118:	b480      	push	{r7}
 800a11a:	b085      	sub	sp, #20
 800a11c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800a11e:	f3ef 8305 	mrs	r3, IPSR
 800a122:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800a124:	68fb      	ldr	r3, [r7, #12]
 800a126:	2b0f      	cmp	r3, #15
 800a128:	d914      	bls.n	800a154 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800a12a:	4a17      	ldr	r2, [pc, #92]	; (800a188 <vPortValidateInterruptPriority+0x70>)
 800a12c:	68fb      	ldr	r3, [r7, #12]
 800a12e:	4413      	add	r3, r2
 800a130:	781b      	ldrb	r3, [r3, #0]
 800a132:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800a134:	4b15      	ldr	r3, [pc, #84]	; (800a18c <vPortValidateInterruptPriority+0x74>)
 800a136:	781b      	ldrb	r3, [r3, #0]
 800a138:	7afa      	ldrb	r2, [r7, #11]
 800a13a:	429a      	cmp	r2, r3
 800a13c:	d20a      	bcs.n	800a154 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800a13e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a142:	f383 8811 	msr	BASEPRI, r3
 800a146:	f3bf 8f6f 	isb	sy
 800a14a:	f3bf 8f4f 	dsb	sy
 800a14e:	607b      	str	r3, [r7, #4]
}
 800a150:	bf00      	nop
 800a152:	e7fe      	b.n	800a152 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800a154:	4b0e      	ldr	r3, [pc, #56]	; (800a190 <vPortValidateInterruptPriority+0x78>)
 800a156:	681b      	ldr	r3, [r3, #0]
 800a158:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800a15c:	4b0d      	ldr	r3, [pc, #52]	; (800a194 <vPortValidateInterruptPriority+0x7c>)
 800a15e:	681b      	ldr	r3, [r3, #0]
 800a160:	429a      	cmp	r2, r3
 800a162:	d90a      	bls.n	800a17a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800a164:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a168:	f383 8811 	msr	BASEPRI, r3
 800a16c:	f3bf 8f6f 	isb	sy
 800a170:	f3bf 8f4f 	dsb	sy
 800a174:	603b      	str	r3, [r7, #0]
}
 800a176:	bf00      	nop
 800a178:	e7fe      	b.n	800a178 <vPortValidateInterruptPriority+0x60>
	}
 800a17a:	bf00      	nop
 800a17c:	3714      	adds	r7, #20
 800a17e:	46bd      	mov	sp, r7
 800a180:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a184:	4770      	bx	lr
 800a186:	bf00      	nop
 800a188:	e000e3f0 	.word	0xe000e3f0
 800a18c:	20003710 	.word	0x20003710
 800a190:	e000ed0c 	.word	0xe000ed0c
 800a194:	20003714 	.word	0x20003714

0800a198 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800a198:	b580      	push	{r7, lr}
 800a19a:	b08a      	sub	sp, #40	; 0x28
 800a19c:	af00      	add	r7, sp, #0
 800a19e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800a1a0:	2300      	movs	r3, #0
 800a1a2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800a1a4:	f7fe fc48 	bl	8008a38 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800a1a8:	4b5b      	ldr	r3, [pc, #364]	; (800a318 <pvPortMalloc+0x180>)
 800a1aa:	681b      	ldr	r3, [r3, #0]
 800a1ac:	2b00      	cmp	r3, #0
 800a1ae:	d101      	bne.n	800a1b4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800a1b0:	f000 f920 	bl	800a3f4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800a1b4:	4b59      	ldr	r3, [pc, #356]	; (800a31c <pvPortMalloc+0x184>)
 800a1b6:	681a      	ldr	r2, [r3, #0]
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	4013      	ands	r3, r2
 800a1bc:	2b00      	cmp	r3, #0
 800a1be:	f040 8093 	bne.w	800a2e8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	2b00      	cmp	r3, #0
 800a1c6:	d01d      	beq.n	800a204 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800a1c8:	2208      	movs	r2, #8
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	4413      	add	r3, r2
 800a1ce:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	f003 0307 	and.w	r3, r3, #7
 800a1d6:	2b00      	cmp	r3, #0
 800a1d8:	d014      	beq.n	800a204 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	f023 0307 	bic.w	r3, r3, #7
 800a1e0:	3308      	adds	r3, #8
 800a1e2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	f003 0307 	and.w	r3, r3, #7
 800a1ea:	2b00      	cmp	r3, #0
 800a1ec:	d00a      	beq.n	800a204 <pvPortMalloc+0x6c>
	__asm volatile
 800a1ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1f2:	f383 8811 	msr	BASEPRI, r3
 800a1f6:	f3bf 8f6f 	isb	sy
 800a1fa:	f3bf 8f4f 	dsb	sy
 800a1fe:	617b      	str	r3, [r7, #20]
}
 800a200:	bf00      	nop
 800a202:	e7fe      	b.n	800a202 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	2b00      	cmp	r3, #0
 800a208:	d06e      	beq.n	800a2e8 <pvPortMalloc+0x150>
 800a20a:	4b45      	ldr	r3, [pc, #276]	; (800a320 <pvPortMalloc+0x188>)
 800a20c:	681b      	ldr	r3, [r3, #0]
 800a20e:	687a      	ldr	r2, [r7, #4]
 800a210:	429a      	cmp	r2, r3
 800a212:	d869      	bhi.n	800a2e8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800a214:	4b43      	ldr	r3, [pc, #268]	; (800a324 <pvPortMalloc+0x18c>)
 800a216:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800a218:	4b42      	ldr	r3, [pc, #264]	; (800a324 <pvPortMalloc+0x18c>)
 800a21a:	681b      	ldr	r3, [r3, #0]
 800a21c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a21e:	e004      	b.n	800a22a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800a220:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a222:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800a224:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a226:	681b      	ldr	r3, [r3, #0]
 800a228:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a22a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a22c:	685b      	ldr	r3, [r3, #4]
 800a22e:	687a      	ldr	r2, [r7, #4]
 800a230:	429a      	cmp	r2, r3
 800a232:	d903      	bls.n	800a23c <pvPortMalloc+0xa4>
 800a234:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a236:	681b      	ldr	r3, [r3, #0]
 800a238:	2b00      	cmp	r3, #0
 800a23a:	d1f1      	bne.n	800a220 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800a23c:	4b36      	ldr	r3, [pc, #216]	; (800a318 <pvPortMalloc+0x180>)
 800a23e:	681b      	ldr	r3, [r3, #0]
 800a240:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a242:	429a      	cmp	r2, r3
 800a244:	d050      	beq.n	800a2e8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800a246:	6a3b      	ldr	r3, [r7, #32]
 800a248:	681b      	ldr	r3, [r3, #0]
 800a24a:	2208      	movs	r2, #8
 800a24c:	4413      	add	r3, r2
 800a24e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a252:	681a      	ldr	r2, [r3, #0]
 800a254:	6a3b      	ldr	r3, [r7, #32]
 800a256:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a258:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a25a:	685a      	ldr	r2, [r3, #4]
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	1ad2      	subs	r2, r2, r3
 800a260:	2308      	movs	r3, #8
 800a262:	005b      	lsls	r3, r3, #1
 800a264:	429a      	cmp	r2, r3
 800a266:	d91f      	bls.n	800a2a8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800a268:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	4413      	add	r3, r2
 800a26e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a270:	69bb      	ldr	r3, [r7, #24]
 800a272:	f003 0307 	and.w	r3, r3, #7
 800a276:	2b00      	cmp	r3, #0
 800a278:	d00a      	beq.n	800a290 <pvPortMalloc+0xf8>
	__asm volatile
 800a27a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a27e:	f383 8811 	msr	BASEPRI, r3
 800a282:	f3bf 8f6f 	isb	sy
 800a286:	f3bf 8f4f 	dsb	sy
 800a28a:	613b      	str	r3, [r7, #16]
}
 800a28c:	bf00      	nop
 800a28e:	e7fe      	b.n	800a28e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800a290:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a292:	685a      	ldr	r2, [r3, #4]
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	1ad2      	subs	r2, r2, r3
 800a298:	69bb      	ldr	r3, [r7, #24]
 800a29a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800a29c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a29e:	687a      	ldr	r2, [r7, #4]
 800a2a0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800a2a2:	69b8      	ldr	r0, [r7, #24]
 800a2a4:	f000 f908 	bl	800a4b8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a2a8:	4b1d      	ldr	r3, [pc, #116]	; (800a320 <pvPortMalloc+0x188>)
 800a2aa:	681a      	ldr	r2, [r3, #0]
 800a2ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2ae:	685b      	ldr	r3, [r3, #4]
 800a2b0:	1ad3      	subs	r3, r2, r3
 800a2b2:	4a1b      	ldr	r2, [pc, #108]	; (800a320 <pvPortMalloc+0x188>)
 800a2b4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a2b6:	4b1a      	ldr	r3, [pc, #104]	; (800a320 <pvPortMalloc+0x188>)
 800a2b8:	681a      	ldr	r2, [r3, #0]
 800a2ba:	4b1b      	ldr	r3, [pc, #108]	; (800a328 <pvPortMalloc+0x190>)
 800a2bc:	681b      	ldr	r3, [r3, #0]
 800a2be:	429a      	cmp	r2, r3
 800a2c0:	d203      	bcs.n	800a2ca <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800a2c2:	4b17      	ldr	r3, [pc, #92]	; (800a320 <pvPortMalloc+0x188>)
 800a2c4:	681b      	ldr	r3, [r3, #0]
 800a2c6:	4a18      	ldr	r2, [pc, #96]	; (800a328 <pvPortMalloc+0x190>)
 800a2c8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800a2ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2cc:	685a      	ldr	r2, [r3, #4]
 800a2ce:	4b13      	ldr	r3, [pc, #76]	; (800a31c <pvPortMalloc+0x184>)
 800a2d0:	681b      	ldr	r3, [r3, #0]
 800a2d2:	431a      	orrs	r2, r3
 800a2d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2d6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800a2d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2da:	2200      	movs	r2, #0
 800a2dc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800a2de:	4b13      	ldr	r3, [pc, #76]	; (800a32c <pvPortMalloc+0x194>)
 800a2e0:	681b      	ldr	r3, [r3, #0]
 800a2e2:	3301      	adds	r3, #1
 800a2e4:	4a11      	ldr	r2, [pc, #68]	; (800a32c <pvPortMalloc+0x194>)
 800a2e6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800a2e8:	f7fe fbb4 	bl	8008a54 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800a2ec:	69fb      	ldr	r3, [r7, #28]
 800a2ee:	f003 0307 	and.w	r3, r3, #7
 800a2f2:	2b00      	cmp	r3, #0
 800a2f4:	d00a      	beq.n	800a30c <pvPortMalloc+0x174>
	__asm volatile
 800a2f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2fa:	f383 8811 	msr	BASEPRI, r3
 800a2fe:	f3bf 8f6f 	isb	sy
 800a302:	f3bf 8f4f 	dsb	sy
 800a306:	60fb      	str	r3, [r7, #12]
}
 800a308:	bf00      	nop
 800a30a:	e7fe      	b.n	800a30a <pvPortMalloc+0x172>
	return pvReturn;
 800a30c:	69fb      	ldr	r3, [r7, #28]
}
 800a30e:	4618      	mov	r0, r3
 800a310:	3728      	adds	r7, #40	; 0x28
 800a312:	46bd      	mov	sp, r7
 800a314:	bd80      	pop	{r7, pc}
 800a316:	bf00      	nop
 800a318:	20005e30 	.word	0x20005e30
 800a31c:	20005e44 	.word	0x20005e44
 800a320:	20005e34 	.word	0x20005e34
 800a324:	20005e28 	.word	0x20005e28
 800a328:	20005e38 	.word	0x20005e38
 800a32c:	20005e3c 	.word	0x20005e3c

0800a330 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800a330:	b580      	push	{r7, lr}
 800a332:	b086      	sub	sp, #24
 800a334:	af00      	add	r7, sp, #0
 800a336:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	2b00      	cmp	r3, #0
 800a340:	d04d      	beq.n	800a3de <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800a342:	2308      	movs	r3, #8
 800a344:	425b      	negs	r3, r3
 800a346:	697a      	ldr	r2, [r7, #20]
 800a348:	4413      	add	r3, r2
 800a34a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800a34c:	697b      	ldr	r3, [r7, #20]
 800a34e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800a350:	693b      	ldr	r3, [r7, #16]
 800a352:	685a      	ldr	r2, [r3, #4]
 800a354:	4b24      	ldr	r3, [pc, #144]	; (800a3e8 <vPortFree+0xb8>)
 800a356:	681b      	ldr	r3, [r3, #0]
 800a358:	4013      	ands	r3, r2
 800a35a:	2b00      	cmp	r3, #0
 800a35c:	d10a      	bne.n	800a374 <vPortFree+0x44>
	__asm volatile
 800a35e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a362:	f383 8811 	msr	BASEPRI, r3
 800a366:	f3bf 8f6f 	isb	sy
 800a36a:	f3bf 8f4f 	dsb	sy
 800a36e:	60fb      	str	r3, [r7, #12]
}
 800a370:	bf00      	nop
 800a372:	e7fe      	b.n	800a372 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800a374:	693b      	ldr	r3, [r7, #16]
 800a376:	681b      	ldr	r3, [r3, #0]
 800a378:	2b00      	cmp	r3, #0
 800a37a:	d00a      	beq.n	800a392 <vPortFree+0x62>
	__asm volatile
 800a37c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a380:	f383 8811 	msr	BASEPRI, r3
 800a384:	f3bf 8f6f 	isb	sy
 800a388:	f3bf 8f4f 	dsb	sy
 800a38c:	60bb      	str	r3, [r7, #8]
}
 800a38e:	bf00      	nop
 800a390:	e7fe      	b.n	800a390 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800a392:	693b      	ldr	r3, [r7, #16]
 800a394:	685a      	ldr	r2, [r3, #4]
 800a396:	4b14      	ldr	r3, [pc, #80]	; (800a3e8 <vPortFree+0xb8>)
 800a398:	681b      	ldr	r3, [r3, #0]
 800a39a:	4013      	ands	r3, r2
 800a39c:	2b00      	cmp	r3, #0
 800a39e:	d01e      	beq.n	800a3de <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800a3a0:	693b      	ldr	r3, [r7, #16]
 800a3a2:	681b      	ldr	r3, [r3, #0]
 800a3a4:	2b00      	cmp	r3, #0
 800a3a6:	d11a      	bne.n	800a3de <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800a3a8:	693b      	ldr	r3, [r7, #16]
 800a3aa:	685a      	ldr	r2, [r3, #4]
 800a3ac:	4b0e      	ldr	r3, [pc, #56]	; (800a3e8 <vPortFree+0xb8>)
 800a3ae:	681b      	ldr	r3, [r3, #0]
 800a3b0:	43db      	mvns	r3, r3
 800a3b2:	401a      	ands	r2, r3
 800a3b4:	693b      	ldr	r3, [r7, #16]
 800a3b6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800a3b8:	f7fe fb3e 	bl	8008a38 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800a3bc:	693b      	ldr	r3, [r7, #16]
 800a3be:	685a      	ldr	r2, [r3, #4]
 800a3c0:	4b0a      	ldr	r3, [pc, #40]	; (800a3ec <vPortFree+0xbc>)
 800a3c2:	681b      	ldr	r3, [r3, #0]
 800a3c4:	4413      	add	r3, r2
 800a3c6:	4a09      	ldr	r2, [pc, #36]	; (800a3ec <vPortFree+0xbc>)
 800a3c8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a3ca:	6938      	ldr	r0, [r7, #16]
 800a3cc:	f000 f874 	bl	800a4b8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800a3d0:	4b07      	ldr	r3, [pc, #28]	; (800a3f0 <vPortFree+0xc0>)
 800a3d2:	681b      	ldr	r3, [r3, #0]
 800a3d4:	3301      	adds	r3, #1
 800a3d6:	4a06      	ldr	r2, [pc, #24]	; (800a3f0 <vPortFree+0xc0>)
 800a3d8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800a3da:	f7fe fb3b 	bl	8008a54 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800a3de:	bf00      	nop
 800a3e0:	3718      	adds	r7, #24
 800a3e2:	46bd      	mov	sp, r7
 800a3e4:	bd80      	pop	{r7, pc}
 800a3e6:	bf00      	nop
 800a3e8:	20005e44 	.word	0x20005e44
 800a3ec:	20005e34 	.word	0x20005e34
 800a3f0:	20005e40 	.word	0x20005e40

0800a3f4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800a3f4:	b480      	push	{r7}
 800a3f6:	b085      	sub	sp, #20
 800a3f8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800a3fa:	f242 7310 	movw	r3, #10000	; 0x2710
 800a3fe:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800a400:	4b27      	ldr	r3, [pc, #156]	; (800a4a0 <prvHeapInit+0xac>)
 800a402:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800a404:	68fb      	ldr	r3, [r7, #12]
 800a406:	f003 0307 	and.w	r3, r3, #7
 800a40a:	2b00      	cmp	r3, #0
 800a40c:	d00c      	beq.n	800a428 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800a40e:	68fb      	ldr	r3, [r7, #12]
 800a410:	3307      	adds	r3, #7
 800a412:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a414:	68fb      	ldr	r3, [r7, #12]
 800a416:	f023 0307 	bic.w	r3, r3, #7
 800a41a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800a41c:	68ba      	ldr	r2, [r7, #8]
 800a41e:	68fb      	ldr	r3, [r7, #12]
 800a420:	1ad3      	subs	r3, r2, r3
 800a422:	4a1f      	ldr	r2, [pc, #124]	; (800a4a0 <prvHeapInit+0xac>)
 800a424:	4413      	add	r3, r2
 800a426:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800a428:	68fb      	ldr	r3, [r7, #12]
 800a42a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a42c:	4a1d      	ldr	r2, [pc, #116]	; (800a4a4 <prvHeapInit+0xb0>)
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800a432:	4b1c      	ldr	r3, [pc, #112]	; (800a4a4 <prvHeapInit+0xb0>)
 800a434:	2200      	movs	r2, #0
 800a436:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	68ba      	ldr	r2, [r7, #8]
 800a43c:	4413      	add	r3, r2
 800a43e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800a440:	2208      	movs	r2, #8
 800a442:	68fb      	ldr	r3, [r7, #12]
 800a444:	1a9b      	subs	r3, r3, r2
 800a446:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a448:	68fb      	ldr	r3, [r7, #12]
 800a44a:	f023 0307 	bic.w	r3, r3, #7
 800a44e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800a450:	68fb      	ldr	r3, [r7, #12]
 800a452:	4a15      	ldr	r2, [pc, #84]	; (800a4a8 <prvHeapInit+0xb4>)
 800a454:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800a456:	4b14      	ldr	r3, [pc, #80]	; (800a4a8 <prvHeapInit+0xb4>)
 800a458:	681b      	ldr	r3, [r3, #0]
 800a45a:	2200      	movs	r2, #0
 800a45c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800a45e:	4b12      	ldr	r3, [pc, #72]	; (800a4a8 <prvHeapInit+0xb4>)
 800a460:	681b      	ldr	r3, [r3, #0]
 800a462:	2200      	movs	r2, #0
 800a464:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800a46a:	683b      	ldr	r3, [r7, #0]
 800a46c:	68fa      	ldr	r2, [r7, #12]
 800a46e:	1ad2      	subs	r2, r2, r3
 800a470:	683b      	ldr	r3, [r7, #0]
 800a472:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800a474:	4b0c      	ldr	r3, [pc, #48]	; (800a4a8 <prvHeapInit+0xb4>)
 800a476:	681a      	ldr	r2, [r3, #0]
 800a478:	683b      	ldr	r3, [r7, #0]
 800a47a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a47c:	683b      	ldr	r3, [r7, #0]
 800a47e:	685b      	ldr	r3, [r3, #4]
 800a480:	4a0a      	ldr	r2, [pc, #40]	; (800a4ac <prvHeapInit+0xb8>)
 800a482:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a484:	683b      	ldr	r3, [r7, #0]
 800a486:	685b      	ldr	r3, [r3, #4]
 800a488:	4a09      	ldr	r2, [pc, #36]	; (800a4b0 <prvHeapInit+0xbc>)
 800a48a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a48c:	4b09      	ldr	r3, [pc, #36]	; (800a4b4 <prvHeapInit+0xc0>)
 800a48e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800a492:	601a      	str	r2, [r3, #0]
}
 800a494:	bf00      	nop
 800a496:	3714      	adds	r7, #20
 800a498:	46bd      	mov	sp, r7
 800a49a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a49e:	4770      	bx	lr
 800a4a0:	20003718 	.word	0x20003718
 800a4a4:	20005e28 	.word	0x20005e28
 800a4a8:	20005e30 	.word	0x20005e30
 800a4ac:	20005e38 	.word	0x20005e38
 800a4b0:	20005e34 	.word	0x20005e34
 800a4b4:	20005e44 	.word	0x20005e44

0800a4b8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800a4b8:	b480      	push	{r7}
 800a4ba:	b085      	sub	sp, #20
 800a4bc:	af00      	add	r7, sp, #0
 800a4be:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a4c0:	4b28      	ldr	r3, [pc, #160]	; (800a564 <prvInsertBlockIntoFreeList+0xac>)
 800a4c2:	60fb      	str	r3, [r7, #12]
 800a4c4:	e002      	b.n	800a4cc <prvInsertBlockIntoFreeList+0x14>
 800a4c6:	68fb      	ldr	r3, [r7, #12]
 800a4c8:	681b      	ldr	r3, [r3, #0]
 800a4ca:	60fb      	str	r3, [r7, #12]
 800a4cc:	68fb      	ldr	r3, [r7, #12]
 800a4ce:	681b      	ldr	r3, [r3, #0]
 800a4d0:	687a      	ldr	r2, [r7, #4]
 800a4d2:	429a      	cmp	r2, r3
 800a4d4:	d8f7      	bhi.n	800a4c6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800a4d6:	68fb      	ldr	r3, [r7, #12]
 800a4d8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800a4da:	68fb      	ldr	r3, [r7, #12]
 800a4dc:	685b      	ldr	r3, [r3, #4]
 800a4de:	68ba      	ldr	r2, [r7, #8]
 800a4e0:	4413      	add	r3, r2
 800a4e2:	687a      	ldr	r2, [r7, #4]
 800a4e4:	429a      	cmp	r2, r3
 800a4e6:	d108      	bne.n	800a4fa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800a4e8:	68fb      	ldr	r3, [r7, #12]
 800a4ea:	685a      	ldr	r2, [r3, #4]
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	685b      	ldr	r3, [r3, #4]
 800a4f0:	441a      	add	r2, r3
 800a4f2:	68fb      	ldr	r3, [r7, #12]
 800a4f4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800a4f6:	68fb      	ldr	r3, [r7, #12]
 800a4f8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	685b      	ldr	r3, [r3, #4]
 800a502:	68ba      	ldr	r2, [r7, #8]
 800a504:	441a      	add	r2, r3
 800a506:	68fb      	ldr	r3, [r7, #12]
 800a508:	681b      	ldr	r3, [r3, #0]
 800a50a:	429a      	cmp	r2, r3
 800a50c:	d118      	bne.n	800a540 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800a50e:	68fb      	ldr	r3, [r7, #12]
 800a510:	681a      	ldr	r2, [r3, #0]
 800a512:	4b15      	ldr	r3, [pc, #84]	; (800a568 <prvInsertBlockIntoFreeList+0xb0>)
 800a514:	681b      	ldr	r3, [r3, #0]
 800a516:	429a      	cmp	r2, r3
 800a518:	d00d      	beq.n	800a536 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	685a      	ldr	r2, [r3, #4]
 800a51e:	68fb      	ldr	r3, [r7, #12]
 800a520:	681b      	ldr	r3, [r3, #0]
 800a522:	685b      	ldr	r3, [r3, #4]
 800a524:	441a      	add	r2, r3
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800a52a:	68fb      	ldr	r3, [r7, #12]
 800a52c:	681b      	ldr	r3, [r3, #0]
 800a52e:	681a      	ldr	r2, [r3, #0]
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	601a      	str	r2, [r3, #0]
 800a534:	e008      	b.n	800a548 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800a536:	4b0c      	ldr	r3, [pc, #48]	; (800a568 <prvInsertBlockIntoFreeList+0xb0>)
 800a538:	681a      	ldr	r2, [r3, #0]
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	601a      	str	r2, [r3, #0]
 800a53e:	e003      	b.n	800a548 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800a540:	68fb      	ldr	r3, [r7, #12]
 800a542:	681a      	ldr	r2, [r3, #0]
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800a548:	68fa      	ldr	r2, [r7, #12]
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	429a      	cmp	r2, r3
 800a54e:	d002      	beq.n	800a556 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800a550:	68fb      	ldr	r3, [r7, #12]
 800a552:	687a      	ldr	r2, [r7, #4]
 800a554:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a556:	bf00      	nop
 800a558:	3714      	adds	r7, #20
 800a55a:	46bd      	mov	sp, r7
 800a55c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a560:	4770      	bx	lr
 800a562:	bf00      	nop
 800a564:	20005e28 	.word	0x20005e28
 800a568:	20005e30 	.word	0x20005e30

0800a56c <__errno>:
 800a56c:	4b01      	ldr	r3, [pc, #4]	; (800a574 <__errno+0x8>)
 800a56e:	6818      	ldr	r0, [r3, #0]
 800a570:	4770      	bx	lr
 800a572:	bf00      	nop
 800a574:	20000018 	.word	0x20000018

0800a578 <std>:
 800a578:	2300      	movs	r3, #0
 800a57a:	b510      	push	{r4, lr}
 800a57c:	4604      	mov	r4, r0
 800a57e:	e9c0 3300 	strd	r3, r3, [r0]
 800a582:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a586:	6083      	str	r3, [r0, #8]
 800a588:	8181      	strh	r1, [r0, #12]
 800a58a:	6643      	str	r3, [r0, #100]	; 0x64
 800a58c:	81c2      	strh	r2, [r0, #14]
 800a58e:	6183      	str	r3, [r0, #24]
 800a590:	4619      	mov	r1, r3
 800a592:	2208      	movs	r2, #8
 800a594:	305c      	adds	r0, #92	; 0x5c
 800a596:	f000 f91a 	bl	800a7ce <memset>
 800a59a:	4b05      	ldr	r3, [pc, #20]	; (800a5b0 <std+0x38>)
 800a59c:	6263      	str	r3, [r4, #36]	; 0x24
 800a59e:	4b05      	ldr	r3, [pc, #20]	; (800a5b4 <std+0x3c>)
 800a5a0:	62a3      	str	r3, [r4, #40]	; 0x28
 800a5a2:	4b05      	ldr	r3, [pc, #20]	; (800a5b8 <std+0x40>)
 800a5a4:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a5a6:	4b05      	ldr	r3, [pc, #20]	; (800a5bc <std+0x44>)
 800a5a8:	6224      	str	r4, [r4, #32]
 800a5aa:	6323      	str	r3, [r4, #48]	; 0x30
 800a5ac:	bd10      	pop	{r4, pc}
 800a5ae:	bf00      	nop
 800a5b0:	0800ab89 	.word	0x0800ab89
 800a5b4:	0800abab 	.word	0x0800abab
 800a5b8:	0800abe3 	.word	0x0800abe3
 800a5bc:	0800ac07 	.word	0x0800ac07

0800a5c0 <_cleanup_r>:
 800a5c0:	4901      	ldr	r1, [pc, #4]	; (800a5c8 <_cleanup_r+0x8>)
 800a5c2:	f000 b8af 	b.w	800a724 <_fwalk_reent>
 800a5c6:	bf00      	nop
 800a5c8:	0800ad61 	.word	0x0800ad61

0800a5cc <__sfmoreglue>:
 800a5cc:	b570      	push	{r4, r5, r6, lr}
 800a5ce:	2268      	movs	r2, #104	; 0x68
 800a5d0:	1e4d      	subs	r5, r1, #1
 800a5d2:	4355      	muls	r5, r2
 800a5d4:	460e      	mov	r6, r1
 800a5d6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800a5da:	f000 f921 	bl	800a820 <_malloc_r>
 800a5de:	4604      	mov	r4, r0
 800a5e0:	b140      	cbz	r0, 800a5f4 <__sfmoreglue+0x28>
 800a5e2:	2100      	movs	r1, #0
 800a5e4:	e9c0 1600 	strd	r1, r6, [r0]
 800a5e8:	300c      	adds	r0, #12
 800a5ea:	60a0      	str	r0, [r4, #8]
 800a5ec:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800a5f0:	f000 f8ed 	bl	800a7ce <memset>
 800a5f4:	4620      	mov	r0, r4
 800a5f6:	bd70      	pop	{r4, r5, r6, pc}

0800a5f8 <__sfp_lock_acquire>:
 800a5f8:	4801      	ldr	r0, [pc, #4]	; (800a600 <__sfp_lock_acquire+0x8>)
 800a5fa:	f000 b8d8 	b.w	800a7ae <__retarget_lock_acquire_recursive>
 800a5fe:	bf00      	nop
 800a600:	20005e49 	.word	0x20005e49

0800a604 <__sfp_lock_release>:
 800a604:	4801      	ldr	r0, [pc, #4]	; (800a60c <__sfp_lock_release+0x8>)
 800a606:	f000 b8d3 	b.w	800a7b0 <__retarget_lock_release_recursive>
 800a60a:	bf00      	nop
 800a60c:	20005e49 	.word	0x20005e49

0800a610 <__sinit_lock_acquire>:
 800a610:	4801      	ldr	r0, [pc, #4]	; (800a618 <__sinit_lock_acquire+0x8>)
 800a612:	f000 b8cc 	b.w	800a7ae <__retarget_lock_acquire_recursive>
 800a616:	bf00      	nop
 800a618:	20005e4a 	.word	0x20005e4a

0800a61c <__sinit_lock_release>:
 800a61c:	4801      	ldr	r0, [pc, #4]	; (800a624 <__sinit_lock_release+0x8>)
 800a61e:	f000 b8c7 	b.w	800a7b0 <__retarget_lock_release_recursive>
 800a622:	bf00      	nop
 800a624:	20005e4a 	.word	0x20005e4a

0800a628 <__sinit>:
 800a628:	b510      	push	{r4, lr}
 800a62a:	4604      	mov	r4, r0
 800a62c:	f7ff fff0 	bl	800a610 <__sinit_lock_acquire>
 800a630:	69a3      	ldr	r3, [r4, #24]
 800a632:	b11b      	cbz	r3, 800a63c <__sinit+0x14>
 800a634:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a638:	f7ff bff0 	b.w	800a61c <__sinit_lock_release>
 800a63c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800a640:	6523      	str	r3, [r4, #80]	; 0x50
 800a642:	4b13      	ldr	r3, [pc, #76]	; (800a690 <__sinit+0x68>)
 800a644:	4a13      	ldr	r2, [pc, #76]	; (800a694 <__sinit+0x6c>)
 800a646:	681b      	ldr	r3, [r3, #0]
 800a648:	62a2      	str	r2, [r4, #40]	; 0x28
 800a64a:	42a3      	cmp	r3, r4
 800a64c:	bf04      	itt	eq
 800a64e:	2301      	moveq	r3, #1
 800a650:	61a3      	streq	r3, [r4, #24]
 800a652:	4620      	mov	r0, r4
 800a654:	f000 f820 	bl	800a698 <__sfp>
 800a658:	6060      	str	r0, [r4, #4]
 800a65a:	4620      	mov	r0, r4
 800a65c:	f000 f81c 	bl	800a698 <__sfp>
 800a660:	60a0      	str	r0, [r4, #8]
 800a662:	4620      	mov	r0, r4
 800a664:	f000 f818 	bl	800a698 <__sfp>
 800a668:	2200      	movs	r2, #0
 800a66a:	60e0      	str	r0, [r4, #12]
 800a66c:	2104      	movs	r1, #4
 800a66e:	6860      	ldr	r0, [r4, #4]
 800a670:	f7ff ff82 	bl	800a578 <std>
 800a674:	68a0      	ldr	r0, [r4, #8]
 800a676:	2201      	movs	r2, #1
 800a678:	2109      	movs	r1, #9
 800a67a:	f7ff ff7d 	bl	800a578 <std>
 800a67e:	68e0      	ldr	r0, [r4, #12]
 800a680:	2202      	movs	r2, #2
 800a682:	2112      	movs	r1, #18
 800a684:	f7ff ff78 	bl	800a578 <std>
 800a688:	2301      	movs	r3, #1
 800a68a:	61a3      	str	r3, [r4, #24]
 800a68c:	e7d2      	b.n	800a634 <__sinit+0xc>
 800a68e:	bf00      	nop
 800a690:	0800b230 	.word	0x0800b230
 800a694:	0800a5c1 	.word	0x0800a5c1

0800a698 <__sfp>:
 800a698:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a69a:	4607      	mov	r7, r0
 800a69c:	f7ff ffac 	bl	800a5f8 <__sfp_lock_acquire>
 800a6a0:	4b1e      	ldr	r3, [pc, #120]	; (800a71c <__sfp+0x84>)
 800a6a2:	681e      	ldr	r6, [r3, #0]
 800a6a4:	69b3      	ldr	r3, [r6, #24]
 800a6a6:	b913      	cbnz	r3, 800a6ae <__sfp+0x16>
 800a6a8:	4630      	mov	r0, r6
 800a6aa:	f7ff ffbd 	bl	800a628 <__sinit>
 800a6ae:	3648      	adds	r6, #72	; 0x48
 800a6b0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800a6b4:	3b01      	subs	r3, #1
 800a6b6:	d503      	bpl.n	800a6c0 <__sfp+0x28>
 800a6b8:	6833      	ldr	r3, [r6, #0]
 800a6ba:	b30b      	cbz	r3, 800a700 <__sfp+0x68>
 800a6bc:	6836      	ldr	r6, [r6, #0]
 800a6be:	e7f7      	b.n	800a6b0 <__sfp+0x18>
 800a6c0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800a6c4:	b9d5      	cbnz	r5, 800a6fc <__sfp+0x64>
 800a6c6:	4b16      	ldr	r3, [pc, #88]	; (800a720 <__sfp+0x88>)
 800a6c8:	60e3      	str	r3, [r4, #12]
 800a6ca:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a6ce:	6665      	str	r5, [r4, #100]	; 0x64
 800a6d0:	f000 f86c 	bl	800a7ac <__retarget_lock_init_recursive>
 800a6d4:	f7ff ff96 	bl	800a604 <__sfp_lock_release>
 800a6d8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800a6dc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800a6e0:	6025      	str	r5, [r4, #0]
 800a6e2:	61a5      	str	r5, [r4, #24]
 800a6e4:	2208      	movs	r2, #8
 800a6e6:	4629      	mov	r1, r5
 800a6e8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800a6ec:	f000 f86f 	bl	800a7ce <memset>
 800a6f0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800a6f4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800a6f8:	4620      	mov	r0, r4
 800a6fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a6fc:	3468      	adds	r4, #104	; 0x68
 800a6fe:	e7d9      	b.n	800a6b4 <__sfp+0x1c>
 800a700:	2104      	movs	r1, #4
 800a702:	4638      	mov	r0, r7
 800a704:	f7ff ff62 	bl	800a5cc <__sfmoreglue>
 800a708:	4604      	mov	r4, r0
 800a70a:	6030      	str	r0, [r6, #0]
 800a70c:	2800      	cmp	r0, #0
 800a70e:	d1d5      	bne.n	800a6bc <__sfp+0x24>
 800a710:	f7ff ff78 	bl	800a604 <__sfp_lock_release>
 800a714:	230c      	movs	r3, #12
 800a716:	603b      	str	r3, [r7, #0]
 800a718:	e7ee      	b.n	800a6f8 <__sfp+0x60>
 800a71a:	bf00      	nop
 800a71c:	0800b230 	.word	0x0800b230
 800a720:	ffff0001 	.word	0xffff0001

0800a724 <_fwalk_reent>:
 800a724:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a728:	4606      	mov	r6, r0
 800a72a:	4688      	mov	r8, r1
 800a72c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800a730:	2700      	movs	r7, #0
 800a732:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a736:	f1b9 0901 	subs.w	r9, r9, #1
 800a73a:	d505      	bpl.n	800a748 <_fwalk_reent+0x24>
 800a73c:	6824      	ldr	r4, [r4, #0]
 800a73e:	2c00      	cmp	r4, #0
 800a740:	d1f7      	bne.n	800a732 <_fwalk_reent+0xe>
 800a742:	4638      	mov	r0, r7
 800a744:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a748:	89ab      	ldrh	r3, [r5, #12]
 800a74a:	2b01      	cmp	r3, #1
 800a74c:	d907      	bls.n	800a75e <_fwalk_reent+0x3a>
 800a74e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a752:	3301      	adds	r3, #1
 800a754:	d003      	beq.n	800a75e <_fwalk_reent+0x3a>
 800a756:	4629      	mov	r1, r5
 800a758:	4630      	mov	r0, r6
 800a75a:	47c0      	blx	r8
 800a75c:	4307      	orrs	r7, r0
 800a75e:	3568      	adds	r5, #104	; 0x68
 800a760:	e7e9      	b.n	800a736 <_fwalk_reent+0x12>
	...

0800a764 <__libc_init_array>:
 800a764:	b570      	push	{r4, r5, r6, lr}
 800a766:	4d0d      	ldr	r5, [pc, #52]	; (800a79c <__libc_init_array+0x38>)
 800a768:	4c0d      	ldr	r4, [pc, #52]	; (800a7a0 <__libc_init_array+0x3c>)
 800a76a:	1b64      	subs	r4, r4, r5
 800a76c:	10a4      	asrs	r4, r4, #2
 800a76e:	2600      	movs	r6, #0
 800a770:	42a6      	cmp	r6, r4
 800a772:	d109      	bne.n	800a788 <__libc_init_array+0x24>
 800a774:	4d0b      	ldr	r5, [pc, #44]	; (800a7a4 <__libc_init_array+0x40>)
 800a776:	4c0c      	ldr	r4, [pc, #48]	; (800a7a8 <__libc_init_array+0x44>)
 800a778:	f000 fbea 	bl	800af50 <_init>
 800a77c:	1b64      	subs	r4, r4, r5
 800a77e:	10a4      	asrs	r4, r4, #2
 800a780:	2600      	movs	r6, #0
 800a782:	42a6      	cmp	r6, r4
 800a784:	d105      	bne.n	800a792 <__libc_init_array+0x2e>
 800a786:	bd70      	pop	{r4, r5, r6, pc}
 800a788:	f855 3b04 	ldr.w	r3, [r5], #4
 800a78c:	4798      	blx	r3
 800a78e:	3601      	adds	r6, #1
 800a790:	e7ee      	b.n	800a770 <__libc_init_array+0xc>
 800a792:	f855 3b04 	ldr.w	r3, [r5], #4
 800a796:	4798      	blx	r3
 800a798:	3601      	adds	r6, #1
 800a79a:	e7f2      	b.n	800a782 <__libc_init_array+0x1e>
 800a79c:	0800b23c 	.word	0x0800b23c
 800a7a0:	0800b23c 	.word	0x0800b23c
 800a7a4:	0800b23c 	.word	0x0800b23c
 800a7a8:	0800b240 	.word	0x0800b240

0800a7ac <__retarget_lock_init_recursive>:
 800a7ac:	4770      	bx	lr

0800a7ae <__retarget_lock_acquire_recursive>:
 800a7ae:	4770      	bx	lr

0800a7b0 <__retarget_lock_release_recursive>:
 800a7b0:	4770      	bx	lr

0800a7b2 <memcpy>:
 800a7b2:	440a      	add	r2, r1
 800a7b4:	4291      	cmp	r1, r2
 800a7b6:	f100 33ff 	add.w	r3, r0, #4294967295
 800a7ba:	d100      	bne.n	800a7be <memcpy+0xc>
 800a7bc:	4770      	bx	lr
 800a7be:	b510      	push	{r4, lr}
 800a7c0:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a7c4:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a7c8:	4291      	cmp	r1, r2
 800a7ca:	d1f9      	bne.n	800a7c0 <memcpy+0xe>
 800a7cc:	bd10      	pop	{r4, pc}

0800a7ce <memset>:
 800a7ce:	4402      	add	r2, r0
 800a7d0:	4603      	mov	r3, r0
 800a7d2:	4293      	cmp	r3, r2
 800a7d4:	d100      	bne.n	800a7d8 <memset+0xa>
 800a7d6:	4770      	bx	lr
 800a7d8:	f803 1b01 	strb.w	r1, [r3], #1
 800a7dc:	e7f9      	b.n	800a7d2 <memset+0x4>
	...

0800a7e0 <sbrk_aligned>:
 800a7e0:	b570      	push	{r4, r5, r6, lr}
 800a7e2:	4e0e      	ldr	r6, [pc, #56]	; (800a81c <sbrk_aligned+0x3c>)
 800a7e4:	460c      	mov	r4, r1
 800a7e6:	6831      	ldr	r1, [r6, #0]
 800a7e8:	4605      	mov	r5, r0
 800a7ea:	b911      	cbnz	r1, 800a7f2 <sbrk_aligned+0x12>
 800a7ec:	f000 f8f6 	bl	800a9dc <_sbrk_r>
 800a7f0:	6030      	str	r0, [r6, #0]
 800a7f2:	4621      	mov	r1, r4
 800a7f4:	4628      	mov	r0, r5
 800a7f6:	f000 f8f1 	bl	800a9dc <_sbrk_r>
 800a7fa:	1c43      	adds	r3, r0, #1
 800a7fc:	d00a      	beq.n	800a814 <sbrk_aligned+0x34>
 800a7fe:	1cc4      	adds	r4, r0, #3
 800a800:	f024 0403 	bic.w	r4, r4, #3
 800a804:	42a0      	cmp	r0, r4
 800a806:	d007      	beq.n	800a818 <sbrk_aligned+0x38>
 800a808:	1a21      	subs	r1, r4, r0
 800a80a:	4628      	mov	r0, r5
 800a80c:	f000 f8e6 	bl	800a9dc <_sbrk_r>
 800a810:	3001      	adds	r0, #1
 800a812:	d101      	bne.n	800a818 <sbrk_aligned+0x38>
 800a814:	f04f 34ff 	mov.w	r4, #4294967295
 800a818:	4620      	mov	r0, r4
 800a81a:	bd70      	pop	{r4, r5, r6, pc}
 800a81c:	20005e50 	.word	0x20005e50

0800a820 <_malloc_r>:
 800a820:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a824:	1ccd      	adds	r5, r1, #3
 800a826:	f025 0503 	bic.w	r5, r5, #3
 800a82a:	3508      	adds	r5, #8
 800a82c:	2d0c      	cmp	r5, #12
 800a82e:	bf38      	it	cc
 800a830:	250c      	movcc	r5, #12
 800a832:	2d00      	cmp	r5, #0
 800a834:	4607      	mov	r7, r0
 800a836:	db01      	blt.n	800a83c <_malloc_r+0x1c>
 800a838:	42a9      	cmp	r1, r5
 800a83a:	d905      	bls.n	800a848 <_malloc_r+0x28>
 800a83c:	230c      	movs	r3, #12
 800a83e:	603b      	str	r3, [r7, #0]
 800a840:	2600      	movs	r6, #0
 800a842:	4630      	mov	r0, r6
 800a844:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a848:	4e2e      	ldr	r6, [pc, #184]	; (800a904 <_malloc_r+0xe4>)
 800a84a:	f000 fb05 	bl	800ae58 <__malloc_lock>
 800a84e:	6833      	ldr	r3, [r6, #0]
 800a850:	461c      	mov	r4, r3
 800a852:	bb34      	cbnz	r4, 800a8a2 <_malloc_r+0x82>
 800a854:	4629      	mov	r1, r5
 800a856:	4638      	mov	r0, r7
 800a858:	f7ff ffc2 	bl	800a7e0 <sbrk_aligned>
 800a85c:	1c43      	adds	r3, r0, #1
 800a85e:	4604      	mov	r4, r0
 800a860:	d14d      	bne.n	800a8fe <_malloc_r+0xde>
 800a862:	6834      	ldr	r4, [r6, #0]
 800a864:	4626      	mov	r6, r4
 800a866:	2e00      	cmp	r6, #0
 800a868:	d140      	bne.n	800a8ec <_malloc_r+0xcc>
 800a86a:	6823      	ldr	r3, [r4, #0]
 800a86c:	4631      	mov	r1, r6
 800a86e:	4638      	mov	r0, r7
 800a870:	eb04 0803 	add.w	r8, r4, r3
 800a874:	f000 f8b2 	bl	800a9dc <_sbrk_r>
 800a878:	4580      	cmp	r8, r0
 800a87a:	d13a      	bne.n	800a8f2 <_malloc_r+0xd2>
 800a87c:	6821      	ldr	r1, [r4, #0]
 800a87e:	3503      	adds	r5, #3
 800a880:	1a6d      	subs	r5, r5, r1
 800a882:	f025 0503 	bic.w	r5, r5, #3
 800a886:	3508      	adds	r5, #8
 800a888:	2d0c      	cmp	r5, #12
 800a88a:	bf38      	it	cc
 800a88c:	250c      	movcc	r5, #12
 800a88e:	4629      	mov	r1, r5
 800a890:	4638      	mov	r0, r7
 800a892:	f7ff ffa5 	bl	800a7e0 <sbrk_aligned>
 800a896:	3001      	adds	r0, #1
 800a898:	d02b      	beq.n	800a8f2 <_malloc_r+0xd2>
 800a89a:	6823      	ldr	r3, [r4, #0]
 800a89c:	442b      	add	r3, r5
 800a89e:	6023      	str	r3, [r4, #0]
 800a8a0:	e00e      	b.n	800a8c0 <_malloc_r+0xa0>
 800a8a2:	6822      	ldr	r2, [r4, #0]
 800a8a4:	1b52      	subs	r2, r2, r5
 800a8a6:	d41e      	bmi.n	800a8e6 <_malloc_r+0xc6>
 800a8a8:	2a0b      	cmp	r2, #11
 800a8aa:	d916      	bls.n	800a8da <_malloc_r+0xba>
 800a8ac:	1961      	adds	r1, r4, r5
 800a8ae:	42a3      	cmp	r3, r4
 800a8b0:	6025      	str	r5, [r4, #0]
 800a8b2:	bf18      	it	ne
 800a8b4:	6059      	strne	r1, [r3, #4]
 800a8b6:	6863      	ldr	r3, [r4, #4]
 800a8b8:	bf08      	it	eq
 800a8ba:	6031      	streq	r1, [r6, #0]
 800a8bc:	5162      	str	r2, [r4, r5]
 800a8be:	604b      	str	r3, [r1, #4]
 800a8c0:	4638      	mov	r0, r7
 800a8c2:	f104 060b 	add.w	r6, r4, #11
 800a8c6:	f000 facd 	bl	800ae64 <__malloc_unlock>
 800a8ca:	f026 0607 	bic.w	r6, r6, #7
 800a8ce:	1d23      	adds	r3, r4, #4
 800a8d0:	1af2      	subs	r2, r6, r3
 800a8d2:	d0b6      	beq.n	800a842 <_malloc_r+0x22>
 800a8d4:	1b9b      	subs	r3, r3, r6
 800a8d6:	50a3      	str	r3, [r4, r2]
 800a8d8:	e7b3      	b.n	800a842 <_malloc_r+0x22>
 800a8da:	6862      	ldr	r2, [r4, #4]
 800a8dc:	42a3      	cmp	r3, r4
 800a8de:	bf0c      	ite	eq
 800a8e0:	6032      	streq	r2, [r6, #0]
 800a8e2:	605a      	strne	r2, [r3, #4]
 800a8e4:	e7ec      	b.n	800a8c0 <_malloc_r+0xa0>
 800a8e6:	4623      	mov	r3, r4
 800a8e8:	6864      	ldr	r4, [r4, #4]
 800a8ea:	e7b2      	b.n	800a852 <_malloc_r+0x32>
 800a8ec:	4634      	mov	r4, r6
 800a8ee:	6876      	ldr	r6, [r6, #4]
 800a8f0:	e7b9      	b.n	800a866 <_malloc_r+0x46>
 800a8f2:	230c      	movs	r3, #12
 800a8f4:	603b      	str	r3, [r7, #0]
 800a8f6:	4638      	mov	r0, r7
 800a8f8:	f000 fab4 	bl	800ae64 <__malloc_unlock>
 800a8fc:	e7a1      	b.n	800a842 <_malloc_r+0x22>
 800a8fe:	6025      	str	r5, [r4, #0]
 800a900:	e7de      	b.n	800a8c0 <_malloc_r+0xa0>
 800a902:	bf00      	nop
 800a904:	20005e4c 	.word	0x20005e4c

0800a908 <cleanup_glue>:
 800a908:	b538      	push	{r3, r4, r5, lr}
 800a90a:	460c      	mov	r4, r1
 800a90c:	6809      	ldr	r1, [r1, #0]
 800a90e:	4605      	mov	r5, r0
 800a910:	b109      	cbz	r1, 800a916 <cleanup_glue+0xe>
 800a912:	f7ff fff9 	bl	800a908 <cleanup_glue>
 800a916:	4621      	mov	r1, r4
 800a918:	4628      	mov	r0, r5
 800a91a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a91e:	f000 baa7 	b.w	800ae70 <_free_r>
	...

0800a924 <_reclaim_reent>:
 800a924:	4b2c      	ldr	r3, [pc, #176]	; (800a9d8 <_reclaim_reent+0xb4>)
 800a926:	681b      	ldr	r3, [r3, #0]
 800a928:	4283      	cmp	r3, r0
 800a92a:	b570      	push	{r4, r5, r6, lr}
 800a92c:	4604      	mov	r4, r0
 800a92e:	d051      	beq.n	800a9d4 <_reclaim_reent+0xb0>
 800a930:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800a932:	b143      	cbz	r3, 800a946 <_reclaim_reent+0x22>
 800a934:	68db      	ldr	r3, [r3, #12]
 800a936:	2b00      	cmp	r3, #0
 800a938:	d14a      	bne.n	800a9d0 <_reclaim_reent+0xac>
 800a93a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a93c:	6819      	ldr	r1, [r3, #0]
 800a93e:	b111      	cbz	r1, 800a946 <_reclaim_reent+0x22>
 800a940:	4620      	mov	r0, r4
 800a942:	f000 fa95 	bl	800ae70 <_free_r>
 800a946:	6961      	ldr	r1, [r4, #20]
 800a948:	b111      	cbz	r1, 800a950 <_reclaim_reent+0x2c>
 800a94a:	4620      	mov	r0, r4
 800a94c:	f000 fa90 	bl	800ae70 <_free_r>
 800a950:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800a952:	b111      	cbz	r1, 800a95a <_reclaim_reent+0x36>
 800a954:	4620      	mov	r0, r4
 800a956:	f000 fa8b 	bl	800ae70 <_free_r>
 800a95a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800a95c:	b111      	cbz	r1, 800a964 <_reclaim_reent+0x40>
 800a95e:	4620      	mov	r0, r4
 800a960:	f000 fa86 	bl	800ae70 <_free_r>
 800a964:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800a966:	b111      	cbz	r1, 800a96e <_reclaim_reent+0x4a>
 800a968:	4620      	mov	r0, r4
 800a96a:	f000 fa81 	bl	800ae70 <_free_r>
 800a96e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800a970:	b111      	cbz	r1, 800a978 <_reclaim_reent+0x54>
 800a972:	4620      	mov	r0, r4
 800a974:	f000 fa7c 	bl	800ae70 <_free_r>
 800a978:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800a97a:	b111      	cbz	r1, 800a982 <_reclaim_reent+0x5e>
 800a97c:	4620      	mov	r0, r4
 800a97e:	f000 fa77 	bl	800ae70 <_free_r>
 800a982:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800a984:	b111      	cbz	r1, 800a98c <_reclaim_reent+0x68>
 800a986:	4620      	mov	r0, r4
 800a988:	f000 fa72 	bl	800ae70 <_free_r>
 800a98c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a98e:	b111      	cbz	r1, 800a996 <_reclaim_reent+0x72>
 800a990:	4620      	mov	r0, r4
 800a992:	f000 fa6d 	bl	800ae70 <_free_r>
 800a996:	69a3      	ldr	r3, [r4, #24]
 800a998:	b1e3      	cbz	r3, 800a9d4 <_reclaim_reent+0xb0>
 800a99a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800a99c:	4620      	mov	r0, r4
 800a99e:	4798      	blx	r3
 800a9a0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800a9a2:	b1b9      	cbz	r1, 800a9d4 <_reclaim_reent+0xb0>
 800a9a4:	4620      	mov	r0, r4
 800a9a6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800a9aa:	f7ff bfad 	b.w	800a908 <cleanup_glue>
 800a9ae:	5949      	ldr	r1, [r1, r5]
 800a9b0:	b941      	cbnz	r1, 800a9c4 <_reclaim_reent+0xa0>
 800a9b2:	3504      	adds	r5, #4
 800a9b4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a9b6:	2d80      	cmp	r5, #128	; 0x80
 800a9b8:	68d9      	ldr	r1, [r3, #12]
 800a9ba:	d1f8      	bne.n	800a9ae <_reclaim_reent+0x8a>
 800a9bc:	4620      	mov	r0, r4
 800a9be:	f000 fa57 	bl	800ae70 <_free_r>
 800a9c2:	e7ba      	b.n	800a93a <_reclaim_reent+0x16>
 800a9c4:	680e      	ldr	r6, [r1, #0]
 800a9c6:	4620      	mov	r0, r4
 800a9c8:	f000 fa52 	bl	800ae70 <_free_r>
 800a9cc:	4631      	mov	r1, r6
 800a9ce:	e7ef      	b.n	800a9b0 <_reclaim_reent+0x8c>
 800a9d0:	2500      	movs	r5, #0
 800a9d2:	e7ef      	b.n	800a9b4 <_reclaim_reent+0x90>
 800a9d4:	bd70      	pop	{r4, r5, r6, pc}
 800a9d6:	bf00      	nop
 800a9d8:	20000018 	.word	0x20000018

0800a9dc <_sbrk_r>:
 800a9dc:	b538      	push	{r3, r4, r5, lr}
 800a9de:	4d06      	ldr	r5, [pc, #24]	; (800a9f8 <_sbrk_r+0x1c>)
 800a9e0:	2300      	movs	r3, #0
 800a9e2:	4604      	mov	r4, r0
 800a9e4:	4608      	mov	r0, r1
 800a9e6:	602b      	str	r3, [r5, #0]
 800a9e8:	f7f8 f8ca 	bl	8002b80 <_sbrk>
 800a9ec:	1c43      	adds	r3, r0, #1
 800a9ee:	d102      	bne.n	800a9f6 <_sbrk_r+0x1a>
 800a9f0:	682b      	ldr	r3, [r5, #0]
 800a9f2:	b103      	cbz	r3, 800a9f6 <_sbrk_r+0x1a>
 800a9f4:	6023      	str	r3, [r4, #0]
 800a9f6:	bd38      	pop	{r3, r4, r5, pc}
 800a9f8:	20005e54 	.word	0x20005e54

0800a9fc <setvbuf>:
 800a9fc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800aa00:	461d      	mov	r5, r3
 800aa02:	4b5d      	ldr	r3, [pc, #372]	; (800ab78 <setvbuf+0x17c>)
 800aa04:	681f      	ldr	r7, [r3, #0]
 800aa06:	4604      	mov	r4, r0
 800aa08:	460e      	mov	r6, r1
 800aa0a:	4690      	mov	r8, r2
 800aa0c:	b127      	cbz	r7, 800aa18 <setvbuf+0x1c>
 800aa0e:	69bb      	ldr	r3, [r7, #24]
 800aa10:	b913      	cbnz	r3, 800aa18 <setvbuf+0x1c>
 800aa12:	4638      	mov	r0, r7
 800aa14:	f7ff fe08 	bl	800a628 <__sinit>
 800aa18:	4b58      	ldr	r3, [pc, #352]	; (800ab7c <setvbuf+0x180>)
 800aa1a:	429c      	cmp	r4, r3
 800aa1c:	d167      	bne.n	800aaee <setvbuf+0xf2>
 800aa1e:	687c      	ldr	r4, [r7, #4]
 800aa20:	f1b8 0f02 	cmp.w	r8, #2
 800aa24:	d006      	beq.n	800aa34 <setvbuf+0x38>
 800aa26:	f1b8 0f01 	cmp.w	r8, #1
 800aa2a:	f200 809f 	bhi.w	800ab6c <setvbuf+0x170>
 800aa2e:	2d00      	cmp	r5, #0
 800aa30:	f2c0 809c 	blt.w	800ab6c <setvbuf+0x170>
 800aa34:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800aa36:	07db      	lsls	r3, r3, #31
 800aa38:	d405      	bmi.n	800aa46 <setvbuf+0x4a>
 800aa3a:	89a3      	ldrh	r3, [r4, #12]
 800aa3c:	0598      	lsls	r0, r3, #22
 800aa3e:	d402      	bmi.n	800aa46 <setvbuf+0x4a>
 800aa40:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800aa42:	f7ff feb4 	bl	800a7ae <__retarget_lock_acquire_recursive>
 800aa46:	4621      	mov	r1, r4
 800aa48:	4638      	mov	r0, r7
 800aa4a:	f000 f989 	bl	800ad60 <_fflush_r>
 800aa4e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800aa50:	b141      	cbz	r1, 800aa64 <setvbuf+0x68>
 800aa52:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800aa56:	4299      	cmp	r1, r3
 800aa58:	d002      	beq.n	800aa60 <setvbuf+0x64>
 800aa5a:	4638      	mov	r0, r7
 800aa5c:	f000 fa08 	bl	800ae70 <_free_r>
 800aa60:	2300      	movs	r3, #0
 800aa62:	6363      	str	r3, [r4, #52]	; 0x34
 800aa64:	2300      	movs	r3, #0
 800aa66:	61a3      	str	r3, [r4, #24]
 800aa68:	6063      	str	r3, [r4, #4]
 800aa6a:	89a3      	ldrh	r3, [r4, #12]
 800aa6c:	0619      	lsls	r1, r3, #24
 800aa6e:	d503      	bpl.n	800aa78 <setvbuf+0x7c>
 800aa70:	6921      	ldr	r1, [r4, #16]
 800aa72:	4638      	mov	r0, r7
 800aa74:	f000 f9fc 	bl	800ae70 <_free_r>
 800aa78:	89a3      	ldrh	r3, [r4, #12]
 800aa7a:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 800aa7e:	f023 0303 	bic.w	r3, r3, #3
 800aa82:	f1b8 0f02 	cmp.w	r8, #2
 800aa86:	81a3      	strh	r3, [r4, #12]
 800aa88:	d06c      	beq.n	800ab64 <setvbuf+0x168>
 800aa8a:	ab01      	add	r3, sp, #4
 800aa8c:	466a      	mov	r2, sp
 800aa8e:	4621      	mov	r1, r4
 800aa90:	4638      	mov	r0, r7
 800aa92:	f000 f9b3 	bl	800adfc <__swhatbuf_r>
 800aa96:	89a3      	ldrh	r3, [r4, #12]
 800aa98:	4318      	orrs	r0, r3
 800aa9a:	81a0      	strh	r0, [r4, #12]
 800aa9c:	2d00      	cmp	r5, #0
 800aa9e:	d130      	bne.n	800ab02 <setvbuf+0x106>
 800aaa0:	9d00      	ldr	r5, [sp, #0]
 800aaa2:	4628      	mov	r0, r5
 800aaa4:	f000 f9d0 	bl	800ae48 <malloc>
 800aaa8:	4606      	mov	r6, r0
 800aaaa:	2800      	cmp	r0, #0
 800aaac:	d155      	bne.n	800ab5a <setvbuf+0x15e>
 800aaae:	f8dd 9000 	ldr.w	r9, [sp]
 800aab2:	45a9      	cmp	r9, r5
 800aab4:	d14a      	bne.n	800ab4c <setvbuf+0x150>
 800aab6:	f04f 35ff 	mov.w	r5, #4294967295
 800aaba:	2200      	movs	r2, #0
 800aabc:	60a2      	str	r2, [r4, #8]
 800aabe:	f104 0247 	add.w	r2, r4, #71	; 0x47
 800aac2:	6022      	str	r2, [r4, #0]
 800aac4:	6122      	str	r2, [r4, #16]
 800aac6:	2201      	movs	r2, #1
 800aac8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800aacc:	6162      	str	r2, [r4, #20]
 800aace:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800aad0:	f043 0302 	orr.w	r3, r3, #2
 800aad4:	07d2      	lsls	r2, r2, #31
 800aad6:	81a3      	strh	r3, [r4, #12]
 800aad8:	d405      	bmi.n	800aae6 <setvbuf+0xea>
 800aada:	f413 7f00 	tst.w	r3, #512	; 0x200
 800aade:	d102      	bne.n	800aae6 <setvbuf+0xea>
 800aae0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800aae2:	f7ff fe65 	bl	800a7b0 <__retarget_lock_release_recursive>
 800aae6:	4628      	mov	r0, r5
 800aae8:	b003      	add	sp, #12
 800aaea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800aaee:	4b24      	ldr	r3, [pc, #144]	; (800ab80 <setvbuf+0x184>)
 800aaf0:	429c      	cmp	r4, r3
 800aaf2:	d101      	bne.n	800aaf8 <setvbuf+0xfc>
 800aaf4:	68bc      	ldr	r4, [r7, #8]
 800aaf6:	e793      	b.n	800aa20 <setvbuf+0x24>
 800aaf8:	4b22      	ldr	r3, [pc, #136]	; (800ab84 <setvbuf+0x188>)
 800aafa:	429c      	cmp	r4, r3
 800aafc:	bf08      	it	eq
 800aafe:	68fc      	ldreq	r4, [r7, #12]
 800ab00:	e78e      	b.n	800aa20 <setvbuf+0x24>
 800ab02:	2e00      	cmp	r6, #0
 800ab04:	d0cd      	beq.n	800aaa2 <setvbuf+0xa6>
 800ab06:	69bb      	ldr	r3, [r7, #24]
 800ab08:	b913      	cbnz	r3, 800ab10 <setvbuf+0x114>
 800ab0a:	4638      	mov	r0, r7
 800ab0c:	f7ff fd8c 	bl	800a628 <__sinit>
 800ab10:	f1b8 0f01 	cmp.w	r8, #1
 800ab14:	bf08      	it	eq
 800ab16:	89a3      	ldrheq	r3, [r4, #12]
 800ab18:	6026      	str	r6, [r4, #0]
 800ab1a:	bf04      	itt	eq
 800ab1c:	f043 0301 	orreq.w	r3, r3, #1
 800ab20:	81a3      	strheq	r3, [r4, #12]
 800ab22:	89a2      	ldrh	r2, [r4, #12]
 800ab24:	f012 0308 	ands.w	r3, r2, #8
 800ab28:	e9c4 6504 	strd	r6, r5, [r4, #16]
 800ab2c:	d01c      	beq.n	800ab68 <setvbuf+0x16c>
 800ab2e:	07d3      	lsls	r3, r2, #31
 800ab30:	bf41      	itttt	mi
 800ab32:	2300      	movmi	r3, #0
 800ab34:	426d      	negmi	r5, r5
 800ab36:	60a3      	strmi	r3, [r4, #8]
 800ab38:	61a5      	strmi	r5, [r4, #24]
 800ab3a:	bf58      	it	pl
 800ab3c:	60a5      	strpl	r5, [r4, #8]
 800ab3e:	6e65      	ldr	r5, [r4, #100]	; 0x64
 800ab40:	f015 0501 	ands.w	r5, r5, #1
 800ab44:	d115      	bne.n	800ab72 <setvbuf+0x176>
 800ab46:	f412 7f00 	tst.w	r2, #512	; 0x200
 800ab4a:	e7c8      	b.n	800aade <setvbuf+0xe2>
 800ab4c:	4648      	mov	r0, r9
 800ab4e:	f000 f97b 	bl	800ae48 <malloc>
 800ab52:	4606      	mov	r6, r0
 800ab54:	2800      	cmp	r0, #0
 800ab56:	d0ae      	beq.n	800aab6 <setvbuf+0xba>
 800ab58:	464d      	mov	r5, r9
 800ab5a:	89a3      	ldrh	r3, [r4, #12]
 800ab5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ab60:	81a3      	strh	r3, [r4, #12]
 800ab62:	e7d0      	b.n	800ab06 <setvbuf+0x10a>
 800ab64:	2500      	movs	r5, #0
 800ab66:	e7a8      	b.n	800aaba <setvbuf+0xbe>
 800ab68:	60a3      	str	r3, [r4, #8]
 800ab6a:	e7e8      	b.n	800ab3e <setvbuf+0x142>
 800ab6c:	f04f 35ff 	mov.w	r5, #4294967295
 800ab70:	e7b9      	b.n	800aae6 <setvbuf+0xea>
 800ab72:	2500      	movs	r5, #0
 800ab74:	e7b7      	b.n	800aae6 <setvbuf+0xea>
 800ab76:	bf00      	nop
 800ab78:	20000018 	.word	0x20000018
 800ab7c:	0800b1f0 	.word	0x0800b1f0
 800ab80:	0800b210 	.word	0x0800b210
 800ab84:	0800b1d0 	.word	0x0800b1d0

0800ab88 <__sread>:
 800ab88:	b510      	push	{r4, lr}
 800ab8a:	460c      	mov	r4, r1
 800ab8c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ab90:	f000 f9ba 	bl	800af08 <_read_r>
 800ab94:	2800      	cmp	r0, #0
 800ab96:	bfab      	itete	ge
 800ab98:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800ab9a:	89a3      	ldrhlt	r3, [r4, #12]
 800ab9c:	181b      	addge	r3, r3, r0
 800ab9e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800aba2:	bfac      	ite	ge
 800aba4:	6563      	strge	r3, [r4, #84]	; 0x54
 800aba6:	81a3      	strhlt	r3, [r4, #12]
 800aba8:	bd10      	pop	{r4, pc}

0800abaa <__swrite>:
 800abaa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800abae:	461f      	mov	r7, r3
 800abb0:	898b      	ldrh	r3, [r1, #12]
 800abb2:	05db      	lsls	r3, r3, #23
 800abb4:	4605      	mov	r5, r0
 800abb6:	460c      	mov	r4, r1
 800abb8:	4616      	mov	r6, r2
 800abba:	d505      	bpl.n	800abc8 <__swrite+0x1e>
 800abbc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800abc0:	2302      	movs	r3, #2
 800abc2:	2200      	movs	r2, #0
 800abc4:	f000 f908 	bl	800add8 <_lseek_r>
 800abc8:	89a3      	ldrh	r3, [r4, #12]
 800abca:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800abce:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800abd2:	81a3      	strh	r3, [r4, #12]
 800abd4:	4632      	mov	r2, r6
 800abd6:	463b      	mov	r3, r7
 800abd8:	4628      	mov	r0, r5
 800abda:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800abde:	f000 b817 	b.w	800ac10 <_write_r>

0800abe2 <__sseek>:
 800abe2:	b510      	push	{r4, lr}
 800abe4:	460c      	mov	r4, r1
 800abe6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800abea:	f000 f8f5 	bl	800add8 <_lseek_r>
 800abee:	1c43      	adds	r3, r0, #1
 800abf0:	89a3      	ldrh	r3, [r4, #12]
 800abf2:	bf15      	itete	ne
 800abf4:	6560      	strne	r0, [r4, #84]	; 0x54
 800abf6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800abfa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800abfe:	81a3      	strheq	r3, [r4, #12]
 800ac00:	bf18      	it	ne
 800ac02:	81a3      	strhne	r3, [r4, #12]
 800ac04:	bd10      	pop	{r4, pc}

0800ac06 <__sclose>:
 800ac06:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ac0a:	f000 b813 	b.w	800ac34 <_close_r>
	...

0800ac10 <_write_r>:
 800ac10:	b538      	push	{r3, r4, r5, lr}
 800ac12:	4d07      	ldr	r5, [pc, #28]	; (800ac30 <_write_r+0x20>)
 800ac14:	4604      	mov	r4, r0
 800ac16:	4608      	mov	r0, r1
 800ac18:	4611      	mov	r1, r2
 800ac1a:	2200      	movs	r2, #0
 800ac1c:	602a      	str	r2, [r5, #0]
 800ac1e:	461a      	mov	r2, r3
 800ac20:	f7f7 fde0 	bl	80027e4 <_write>
 800ac24:	1c43      	adds	r3, r0, #1
 800ac26:	d102      	bne.n	800ac2e <_write_r+0x1e>
 800ac28:	682b      	ldr	r3, [r5, #0]
 800ac2a:	b103      	cbz	r3, 800ac2e <_write_r+0x1e>
 800ac2c:	6023      	str	r3, [r4, #0]
 800ac2e:	bd38      	pop	{r3, r4, r5, pc}
 800ac30:	20005e54 	.word	0x20005e54

0800ac34 <_close_r>:
 800ac34:	b538      	push	{r3, r4, r5, lr}
 800ac36:	4d06      	ldr	r5, [pc, #24]	; (800ac50 <_close_r+0x1c>)
 800ac38:	2300      	movs	r3, #0
 800ac3a:	4604      	mov	r4, r0
 800ac3c:	4608      	mov	r0, r1
 800ac3e:	602b      	str	r3, [r5, #0]
 800ac40:	f7f7 fdfc 	bl	800283c <_close>
 800ac44:	1c43      	adds	r3, r0, #1
 800ac46:	d102      	bne.n	800ac4e <_close_r+0x1a>
 800ac48:	682b      	ldr	r3, [r5, #0]
 800ac4a:	b103      	cbz	r3, 800ac4e <_close_r+0x1a>
 800ac4c:	6023      	str	r3, [r4, #0]
 800ac4e:	bd38      	pop	{r3, r4, r5, pc}
 800ac50:	20005e54 	.word	0x20005e54

0800ac54 <__sflush_r>:
 800ac54:	898a      	ldrh	r2, [r1, #12]
 800ac56:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ac5a:	4605      	mov	r5, r0
 800ac5c:	0710      	lsls	r0, r2, #28
 800ac5e:	460c      	mov	r4, r1
 800ac60:	d458      	bmi.n	800ad14 <__sflush_r+0xc0>
 800ac62:	684b      	ldr	r3, [r1, #4]
 800ac64:	2b00      	cmp	r3, #0
 800ac66:	dc05      	bgt.n	800ac74 <__sflush_r+0x20>
 800ac68:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800ac6a:	2b00      	cmp	r3, #0
 800ac6c:	dc02      	bgt.n	800ac74 <__sflush_r+0x20>
 800ac6e:	2000      	movs	r0, #0
 800ac70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ac74:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ac76:	2e00      	cmp	r6, #0
 800ac78:	d0f9      	beq.n	800ac6e <__sflush_r+0x1a>
 800ac7a:	2300      	movs	r3, #0
 800ac7c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800ac80:	682f      	ldr	r7, [r5, #0]
 800ac82:	602b      	str	r3, [r5, #0]
 800ac84:	d032      	beq.n	800acec <__sflush_r+0x98>
 800ac86:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800ac88:	89a3      	ldrh	r3, [r4, #12]
 800ac8a:	075a      	lsls	r2, r3, #29
 800ac8c:	d505      	bpl.n	800ac9a <__sflush_r+0x46>
 800ac8e:	6863      	ldr	r3, [r4, #4]
 800ac90:	1ac0      	subs	r0, r0, r3
 800ac92:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ac94:	b10b      	cbz	r3, 800ac9a <__sflush_r+0x46>
 800ac96:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ac98:	1ac0      	subs	r0, r0, r3
 800ac9a:	2300      	movs	r3, #0
 800ac9c:	4602      	mov	r2, r0
 800ac9e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800aca0:	6a21      	ldr	r1, [r4, #32]
 800aca2:	4628      	mov	r0, r5
 800aca4:	47b0      	blx	r6
 800aca6:	1c43      	adds	r3, r0, #1
 800aca8:	89a3      	ldrh	r3, [r4, #12]
 800acaa:	d106      	bne.n	800acba <__sflush_r+0x66>
 800acac:	6829      	ldr	r1, [r5, #0]
 800acae:	291d      	cmp	r1, #29
 800acb0:	d82c      	bhi.n	800ad0c <__sflush_r+0xb8>
 800acb2:	4a2a      	ldr	r2, [pc, #168]	; (800ad5c <__sflush_r+0x108>)
 800acb4:	40ca      	lsrs	r2, r1
 800acb6:	07d6      	lsls	r6, r2, #31
 800acb8:	d528      	bpl.n	800ad0c <__sflush_r+0xb8>
 800acba:	2200      	movs	r2, #0
 800acbc:	6062      	str	r2, [r4, #4]
 800acbe:	04d9      	lsls	r1, r3, #19
 800acc0:	6922      	ldr	r2, [r4, #16]
 800acc2:	6022      	str	r2, [r4, #0]
 800acc4:	d504      	bpl.n	800acd0 <__sflush_r+0x7c>
 800acc6:	1c42      	adds	r2, r0, #1
 800acc8:	d101      	bne.n	800acce <__sflush_r+0x7a>
 800acca:	682b      	ldr	r3, [r5, #0]
 800accc:	b903      	cbnz	r3, 800acd0 <__sflush_r+0x7c>
 800acce:	6560      	str	r0, [r4, #84]	; 0x54
 800acd0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800acd2:	602f      	str	r7, [r5, #0]
 800acd4:	2900      	cmp	r1, #0
 800acd6:	d0ca      	beq.n	800ac6e <__sflush_r+0x1a>
 800acd8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800acdc:	4299      	cmp	r1, r3
 800acde:	d002      	beq.n	800ace6 <__sflush_r+0x92>
 800ace0:	4628      	mov	r0, r5
 800ace2:	f000 f8c5 	bl	800ae70 <_free_r>
 800ace6:	2000      	movs	r0, #0
 800ace8:	6360      	str	r0, [r4, #52]	; 0x34
 800acea:	e7c1      	b.n	800ac70 <__sflush_r+0x1c>
 800acec:	6a21      	ldr	r1, [r4, #32]
 800acee:	2301      	movs	r3, #1
 800acf0:	4628      	mov	r0, r5
 800acf2:	47b0      	blx	r6
 800acf4:	1c41      	adds	r1, r0, #1
 800acf6:	d1c7      	bne.n	800ac88 <__sflush_r+0x34>
 800acf8:	682b      	ldr	r3, [r5, #0]
 800acfa:	2b00      	cmp	r3, #0
 800acfc:	d0c4      	beq.n	800ac88 <__sflush_r+0x34>
 800acfe:	2b1d      	cmp	r3, #29
 800ad00:	d001      	beq.n	800ad06 <__sflush_r+0xb2>
 800ad02:	2b16      	cmp	r3, #22
 800ad04:	d101      	bne.n	800ad0a <__sflush_r+0xb6>
 800ad06:	602f      	str	r7, [r5, #0]
 800ad08:	e7b1      	b.n	800ac6e <__sflush_r+0x1a>
 800ad0a:	89a3      	ldrh	r3, [r4, #12]
 800ad0c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ad10:	81a3      	strh	r3, [r4, #12]
 800ad12:	e7ad      	b.n	800ac70 <__sflush_r+0x1c>
 800ad14:	690f      	ldr	r7, [r1, #16]
 800ad16:	2f00      	cmp	r7, #0
 800ad18:	d0a9      	beq.n	800ac6e <__sflush_r+0x1a>
 800ad1a:	0793      	lsls	r3, r2, #30
 800ad1c:	680e      	ldr	r6, [r1, #0]
 800ad1e:	bf08      	it	eq
 800ad20:	694b      	ldreq	r3, [r1, #20]
 800ad22:	600f      	str	r7, [r1, #0]
 800ad24:	bf18      	it	ne
 800ad26:	2300      	movne	r3, #0
 800ad28:	eba6 0807 	sub.w	r8, r6, r7
 800ad2c:	608b      	str	r3, [r1, #8]
 800ad2e:	f1b8 0f00 	cmp.w	r8, #0
 800ad32:	dd9c      	ble.n	800ac6e <__sflush_r+0x1a>
 800ad34:	6a21      	ldr	r1, [r4, #32]
 800ad36:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800ad38:	4643      	mov	r3, r8
 800ad3a:	463a      	mov	r2, r7
 800ad3c:	4628      	mov	r0, r5
 800ad3e:	47b0      	blx	r6
 800ad40:	2800      	cmp	r0, #0
 800ad42:	dc06      	bgt.n	800ad52 <__sflush_r+0xfe>
 800ad44:	89a3      	ldrh	r3, [r4, #12]
 800ad46:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ad4a:	81a3      	strh	r3, [r4, #12]
 800ad4c:	f04f 30ff 	mov.w	r0, #4294967295
 800ad50:	e78e      	b.n	800ac70 <__sflush_r+0x1c>
 800ad52:	4407      	add	r7, r0
 800ad54:	eba8 0800 	sub.w	r8, r8, r0
 800ad58:	e7e9      	b.n	800ad2e <__sflush_r+0xda>
 800ad5a:	bf00      	nop
 800ad5c:	20400001 	.word	0x20400001

0800ad60 <_fflush_r>:
 800ad60:	b538      	push	{r3, r4, r5, lr}
 800ad62:	690b      	ldr	r3, [r1, #16]
 800ad64:	4605      	mov	r5, r0
 800ad66:	460c      	mov	r4, r1
 800ad68:	b913      	cbnz	r3, 800ad70 <_fflush_r+0x10>
 800ad6a:	2500      	movs	r5, #0
 800ad6c:	4628      	mov	r0, r5
 800ad6e:	bd38      	pop	{r3, r4, r5, pc}
 800ad70:	b118      	cbz	r0, 800ad7a <_fflush_r+0x1a>
 800ad72:	6983      	ldr	r3, [r0, #24]
 800ad74:	b90b      	cbnz	r3, 800ad7a <_fflush_r+0x1a>
 800ad76:	f7ff fc57 	bl	800a628 <__sinit>
 800ad7a:	4b14      	ldr	r3, [pc, #80]	; (800adcc <_fflush_r+0x6c>)
 800ad7c:	429c      	cmp	r4, r3
 800ad7e:	d11b      	bne.n	800adb8 <_fflush_r+0x58>
 800ad80:	686c      	ldr	r4, [r5, #4]
 800ad82:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ad86:	2b00      	cmp	r3, #0
 800ad88:	d0ef      	beq.n	800ad6a <_fflush_r+0xa>
 800ad8a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800ad8c:	07d0      	lsls	r0, r2, #31
 800ad8e:	d404      	bmi.n	800ad9a <_fflush_r+0x3a>
 800ad90:	0599      	lsls	r1, r3, #22
 800ad92:	d402      	bmi.n	800ad9a <_fflush_r+0x3a>
 800ad94:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ad96:	f7ff fd0a 	bl	800a7ae <__retarget_lock_acquire_recursive>
 800ad9a:	4628      	mov	r0, r5
 800ad9c:	4621      	mov	r1, r4
 800ad9e:	f7ff ff59 	bl	800ac54 <__sflush_r>
 800ada2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ada4:	07da      	lsls	r2, r3, #31
 800ada6:	4605      	mov	r5, r0
 800ada8:	d4e0      	bmi.n	800ad6c <_fflush_r+0xc>
 800adaa:	89a3      	ldrh	r3, [r4, #12]
 800adac:	059b      	lsls	r3, r3, #22
 800adae:	d4dd      	bmi.n	800ad6c <_fflush_r+0xc>
 800adb0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800adb2:	f7ff fcfd 	bl	800a7b0 <__retarget_lock_release_recursive>
 800adb6:	e7d9      	b.n	800ad6c <_fflush_r+0xc>
 800adb8:	4b05      	ldr	r3, [pc, #20]	; (800add0 <_fflush_r+0x70>)
 800adba:	429c      	cmp	r4, r3
 800adbc:	d101      	bne.n	800adc2 <_fflush_r+0x62>
 800adbe:	68ac      	ldr	r4, [r5, #8]
 800adc0:	e7df      	b.n	800ad82 <_fflush_r+0x22>
 800adc2:	4b04      	ldr	r3, [pc, #16]	; (800add4 <_fflush_r+0x74>)
 800adc4:	429c      	cmp	r4, r3
 800adc6:	bf08      	it	eq
 800adc8:	68ec      	ldreq	r4, [r5, #12]
 800adca:	e7da      	b.n	800ad82 <_fflush_r+0x22>
 800adcc:	0800b1f0 	.word	0x0800b1f0
 800add0:	0800b210 	.word	0x0800b210
 800add4:	0800b1d0 	.word	0x0800b1d0

0800add8 <_lseek_r>:
 800add8:	b538      	push	{r3, r4, r5, lr}
 800adda:	4d07      	ldr	r5, [pc, #28]	; (800adf8 <_lseek_r+0x20>)
 800addc:	4604      	mov	r4, r0
 800adde:	4608      	mov	r0, r1
 800ade0:	4611      	mov	r1, r2
 800ade2:	2200      	movs	r2, #0
 800ade4:	602a      	str	r2, [r5, #0]
 800ade6:	461a      	mov	r2, r3
 800ade8:	f7f7 fd3f 	bl	800286a <_lseek>
 800adec:	1c43      	adds	r3, r0, #1
 800adee:	d102      	bne.n	800adf6 <_lseek_r+0x1e>
 800adf0:	682b      	ldr	r3, [r5, #0]
 800adf2:	b103      	cbz	r3, 800adf6 <_lseek_r+0x1e>
 800adf4:	6023      	str	r3, [r4, #0]
 800adf6:	bd38      	pop	{r3, r4, r5, pc}
 800adf8:	20005e54 	.word	0x20005e54

0800adfc <__swhatbuf_r>:
 800adfc:	b570      	push	{r4, r5, r6, lr}
 800adfe:	460e      	mov	r6, r1
 800ae00:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ae04:	2900      	cmp	r1, #0
 800ae06:	b096      	sub	sp, #88	; 0x58
 800ae08:	4614      	mov	r4, r2
 800ae0a:	461d      	mov	r5, r3
 800ae0c:	da08      	bge.n	800ae20 <__swhatbuf_r+0x24>
 800ae0e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800ae12:	2200      	movs	r2, #0
 800ae14:	602a      	str	r2, [r5, #0]
 800ae16:	061a      	lsls	r2, r3, #24
 800ae18:	d410      	bmi.n	800ae3c <__swhatbuf_r+0x40>
 800ae1a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ae1e:	e00e      	b.n	800ae3e <__swhatbuf_r+0x42>
 800ae20:	466a      	mov	r2, sp
 800ae22:	f000 f883 	bl	800af2c <_fstat_r>
 800ae26:	2800      	cmp	r0, #0
 800ae28:	dbf1      	blt.n	800ae0e <__swhatbuf_r+0x12>
 800ae2a:	9a01      	ldr	r2, [sp, #4]
 800ae2c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800ae30:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800ae34:	425a      	negs	r2, r3
 800ae36:	415a      	adcs	r2, r3
 800ae38:	602a      	str	r2, [r5, #0]
 800ae3a:	e7ee      	b.n	800ae1a <__swhatbuf_r+0x1e>
 800ae3c:	2340      	movs	r3, #64	; 0x40
 800ae3e:	2000      	movs	r0, #0
 800ae40:	6023      	str	r3, [r4, #0]
 800ae42:	b016      	add	sp, #88	; 0x58
 800ae44:	bd70      	pop	{r4, r5, r6, pc}
	...

0800ae48 <malloc>:
 800ae48:	4b02      	ldr	r3, [pc, #8]	; (800ae54 <malloc+0xc>)
 800ae4a:	4601      	mov	r1, r0
 800ae4c:	6818      	ldr	r0, [r3, #0]
 800ae4e:	f7ff bce7 	b.w	800a820 <_malloc_r>
 800ae52:	bf00      	nop
 800ae54:	20000018 	.word	0x20000018

0800ae58 <__malloc_lock>:
 800ae58:	4801      	ldr	r0, [pc, #4]	; (800ae60 <__malloc_lock+0x8>)
 800ae5a:	f7ff bca8 	b.w	800a7ae <__retarget_lock_acquire_recursive>
 800ae5e:	bf00      	nop
 800ae60:	20005e48 	.word	0x20005e48

0800ae64 <__malloc_unlock>:
 800ae64:	4801      	ldr	r0, [pc, #4]	; (800ae6c <__malloc_unlock+0x8>)
 800ae66:	f7ff bca3 	b.w	800a7b0 <__retarget_lock_release_recursive>
 800ae6a:	bf00      	nop
 800ae6c:	20005e48 	.word	0x20005e48

0800ae70 <_free_r>:
 800ae70:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ae72:	2900      	cmp	r1, #0
 800ae74:	d044      	beq.n	800af00 <_free_r+0x90>
 800ae76:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ae7a:	9001      	str	r0, [sp, #4]
 800ae7c:	2b00      	cmp	r3, #0
 800ae7e:	f1a1 0404 	sub.w	r4, r1, #4
 800ae82:	bfb8      	it	lt
 800ae84:	18e4      	addlt	r4, r4, r3
 800ae86:	f7ff ffe7 	bl	800ae58 <__malloc_lock>
 800ae8a:	4a1e      	ldr	r2, [pc, #120]	; (800af04 <_free_r+0x94>)
 800ae8c:	9801      	ldr	r0, [sp, #4]
 800ae8e:	6813      	ldr	r3, [r2, #0]
 800ae90:	b933      	cbnz	r3, 800aea0 <_free_r+0x30>
 800ae92:	6063      	str	r3, [r4, #4]
 800ae94:	6014      	str	r4, [r2, #0]
 800ae96:	b003      	add	sp, #12
 800ae98:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ae9c:	f7ff bfe2 	b.w	800ae64 <__malloc_unlock>
 800aea0:	42a3      	cmp	r3, r4
 800aea2:	d908      	bls.n	800aeb6 <_free_r+0x46>
 800aea4:	6825      	ldr	r5, [r4, #0]
 800aea6:	1961      	adds	r1, r4, r5
 800aea8:	428b      	cmp	r3, r1
 800aeaa:	bf01      	itttt	eq
 800aeac:	6819      	ldreq	r1, [r3, #0]
 800aeae:	685b      	ldreq	r3, [r3, #4]
 800aeb0:	1949      	addeq	r1, r1, r5
 800aeb2:	6021      	streq	r1, [r4, #0]
 800aeb4:	e7ed      	b.n	800ae92 <_free_r+0x22>
 800aeb6:	461a      	mov	r2, r3
 800aeb8:	685b      	ldr	r3, [r3, #4]
 800aeba:	b10b      	cbz	r3, 800aec0 <_free_r+0x50>
 800aebc:	42a3      	cmp	r3, r4
 800aebe:	d9fa      	bls.n	800aeb6 <_free_r+0x46>
 800aec0:	6811      	ldr	r1, [r2, #0]
 800aec2:	1855      	adds	r5, r2, r1
 800aec4:	42a5      	cmp	r5, r4
 800aec6:	d10b      	bne.n	800aee0 <_free_r+0x70>
 800aec8:	6824      	ldr	r4, [r4, #0]
 800aeca:	4421      	add	r1, r4
 800aecc:	1854      	adds	r4, r2, r1
 800aece:	42a3      	cmp	r3, r4
 800aed0:	6011      	str	r1, [r2, #0]
 800aed2:	d1e0      	bne.n	800ae96 <_free_r+0x26>
 800aed4:	681c      	ldr	r4, [r3, #0]
 800aed6:	685b      	ldr	r3, [r3, #4]
 800aed8:	6053      	str	r3, [r2, #4]
 800aeda:	4421      	add	r1, r4
 800aedc:	6011      	str	r1, [r2, #0]
 800aede:	e7da      	b.n	800ae96 <_free_r+0x26>
 800aee0:	d902      	bls.n	800aee8 <_free_r+0x78>
 800aee2:	230c      	movs	r3, #12
 800aee4:	6003      	str	r3, [r0, #0]
 800aee6:	e7d6      	b.n	800ae96 <_free_r+0x26>
 800aee8:	6825      	ldr	r5, [r4, #0]
 800aeea:	1961      	adds	r1, r4, r5
 800aeec:	428b      	cmp	r3, r1
 800aeee:	bf04      	itt	eq
 800aef0:	6819      	ldreq	r1, [r3, #0]
 800aef2:	685b      	ldreq	r3, [r3, #4]
 800aef4:	6063      	str	r3, [r4, #4]
 800aef6:	bf04      	itt	eq
 800aef8:	1949      	addeq	r1, r1, r5
 800aefa:	6021      	streq	r1, [r4, #0]
 800aefc:	6054      	str	r4, [r2, #4]
 800aefe:	e7ca      	b.n	800ae96 <_free_r+0x26>
 800af00:	b003      	add	sp, #12
 800af02:	bd30      	pop	{r4, r5, pc}
 800af04:	20005e4c 	.word	0x20005e4c

0800af08 <_read_r>:
 800af08:	b538      	push	{r3, r4, r5, lr}
 800af0a:	4d07      	ldr	r5, [pc, #28]	; (800af28 <_read_r+0x20>)
 800af0c:	4604      	mov	r4, r0
 800af0e:	4608      	mov	r0, r1
 800af10:	4611      	mov	r1, r2
 800af12:	2200      	movs	r2, #0
 800af14:	602a      	str	r2, [r5, #0]
 800af16:	461a      	mov	r2, r3
 800af18:	f7f7 fcb8 	bl	800288c <_read>
 800af1c:	1c43      	adds	r3, r0, #1
 800af1e:	d102      	bne.n	800af26 <_read_r+0x1e>
 800af20:	682b      	ldr	r3, [r5, #0]
 800af22:	b103      	cbz	r3, 800af26 <_read_r+0x1e>
 800af24:	6023      	str	r3, [r4, #0]
 800af26:	bd38      	pop	{r3, r4, r5, pc}
 800af28:	20005e54 	.word	0x20005e54

0800af2c <_fstat_r>:
 800af2c:	b538      	push	{r3, r4, r5, lr}
 800af2e:	4d07      	ldr	r5, [pc, #28]	; (800af4c <_fstat_r+0x20>)
 800af30:	2300      	movs	r3, #0
 800af32:	4604      	mov	r4, r0
 800af34:	4608      	mov	r0, r1
 800af36:	4611      	mov	r1, r2
 800af38:	602b      	str	r3, [r5, #0]
 800af3a:	f7f7 fccf 	bl	80028dc <_fstat>
 800af3e:	1c43      	adds	r3, r0, #1
 800af40:	d102      	bne.n	800af48 <_fstat_r+0x1c>
 800af42:	682b      	ldr	r3, [r5, #0]
 800af44:	b103      	cbz	r3, 800af48 <_fstat_r+0x1c>
 800af46:	6023      	str	r3, [r4, #0]
 800af48:	bd38      	pop	{r3, r4, r5, pc}
 800af4a:	bf00      	nop
 800af4c:	20005e54 	.word	0x20005e54

0800af50 <_init>:
 800af50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af52:	bf00      	nop
 800af54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800af56:	bc08      	pop	{r3}
 800af58:	469e      	mov	lr, r3
 800af5a:	4770      	bx	lr

0800af5c <_fini>:
 800af5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af5e:	bf00      	nop
 800af60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800af62:	bc08      	pop	{r3}
 800af64:	469e      	mov	lr, r3
 800af66:	4770      	bx	lr
