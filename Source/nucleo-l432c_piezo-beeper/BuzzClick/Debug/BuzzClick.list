
BuzzClick.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006c50  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f0  08006de0  08006de0  00016de0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006ed0  08006ed0  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08006ed0  08006ed0  00016ed0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006ed8  08006ed8  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006ed8  08006ed8  00016ed8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006edc  08006edc  00016edc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08006ee0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001b5c  20000074  08006f54  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001bd0  08006f54  00021bd0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001c800  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003674  00000000  00000000  0003c8a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000016d0  00000000  00000000  0003ff18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001598  00000000  00000000  000415e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00003644  00000000  00000000  00042b80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000189d6  00000000  00000000  000461c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d51bb  00000000  00000000  0005eb9a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00133d55  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006344  00000000  00000000  00133da8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006dc8 	.word	0x08006dc8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	08006dc8 	.word	0x08006dc8

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295
 80001e4:	f000 b974 	b.w	80004d0 <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9d08      	ldr	r5, [sp, #32]
 8000206:	4604      	mov	r4, r0
 8000208:	468e      	mov	lr, r1
 800020a:	2b00      	cmp	r3, #0
 800020c:	d14d      	bne.n	80002aa <__udivmoddi4+0xaa>
 800020e:	428a      	cmp	r2, r1
 8000210:	4694      	mov	ip, r2
 8000212:	d969      	bls.n	80002e8 <__udivmoddi4+0xe8>
 8000214:	fab2 f282 	clz	r2, r2
 8000218:	b152      	cbz	r2, 8000230 <__udivmoddi4+0x30>
 800021a:	fa01 f302 	lsl.w	r3, r1, r2
 800021e:	f1c2 0120 	rsb	r1, r2, #32
 8000222:	fa20 f101 	lsr.w	r1, r0, r1
 8000226:	fa0c fc02 	lsl.w	ip, ip, r2
 800022a:	ea41 0e03 	orr.w	lr, r1, r3
 800022e:	4094      	lsls	r4, r2
 8000230:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000234:	0c21      	lsrs	r1, r4, #16
 8000236:	fbbe f6f8 	udiv	r6, lr, r8
 800023a:	fa1f f78c 	uxth.w	r7, ip
 800023e:	fb08 e316 	mls	r3, r8, r6, lr
 8000242:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000246:	fb06 f107 	mul.w	r1, r6, r7
 800024a:	4299      	cmp	r1, r3
 800024c:	d90a      	bls.n	8000264 <__udivmoddi4+0x64>
 800024e:	eb1c 0303 	adds.w	r3, ip, r3
 8000252:	f106 30ff 	add.w	r0, r6, #4294967295
 8000256:	f080 811f 	bcs.w	8000498 <__udivmoddi4+0x298>
 800025a:	4299      	cmp	r1, r3
 800025c:	f240 811c 	bls.w	8000498 <__udivmoddi4+0x298>
 8000260:	3e02      	subs	r6, #2
 8000262:	4463      	add	r3, ip
 8000264:	1a5b      	subs	r3, r3, r1
 8000266:	b2a4      	uxth	r4, r4
 8000268:	fbb3 f0f8 	udiv	r0, r3, r8
 800026c:	fb08 3310 	mls	r3, r8, r0, r3
 8000270:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000274:	fb00 f707 	mul.w	r7, r0, r7
 8000278:	42a7      	cmp	r7, r4
 800027a:	d90a      	bls.n	8000292 <__udivmoddi4+0x92>
 800027c:	eb1c 0404 	adds.w	r4, ip, r4
 8000280:	f100 33ff 	add.w	r3, r0, #4294967295
 8000284:	f080 810a 	bcs.w	800049c <__udivmoddi4+0x29c>
 8000288:	42a7      	cmp	r7, r4
 800028a:	f240 8107 	bls.w	800049c <__udivmoddi4+0x29c>
 800028e:	4464      	add	r4, ip
 8000290:	3802      	subs	r0, #2
 8000292:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000296:	1be4      	subs	r4, r4, r7
 8000298:	2600      	movs	r6, #0
 800029a:	b11d      	cbz	r5, 80002a4 <__udivmoddi4+0xa4>
 800029c:	40d4      	lsrs	r4, r2
 800029e:	2300      	movs	r3, #0
 80002a0:	e9c5 4300 	strd	r4, r3, [r5]
 80002a4:	4631      	mov	r1, r6
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	428b      	cmp	r3, r1
 80002ac:	d909      	bls.n	80002c2 <__udivmoddi4+0xc2>
 80002ae:	2d00      	cmp	r5, #0
 80002b0:	f000 80ef 	beq.w	8000492 <__udivmoddi4+0x292>
 80002b4:	2600      	movs	r6, #0
 80002b6:	e9c5 0100 	strd	r0, r1, [r5]
 80002ba:	4630      	mov	r0, r6
 80002bc:	4631      	mov	r1, r6
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	fab3 f683 	clz	r6, r3
 80002c6:	2e00      	cmp	r6, #0
 80002c8:	d14a      	bne.n	8000360 <__udivmoddi4+0x160>
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d302      	bcc.n	80002d4 <__udivmoddi4+0xd4>
 80002ce:	4282      	cmp	r2, r0
 80002d0:	f200 80f9 	bhi.w	80004c6 <__udivmoddi4+0x2c6>
 80002d4:	1a84      	subs	r4, r0, r2
 80002d6:	eb61 0303 	sbc.w	r3, r1, r3
 80002da:	2001      	movs	r0, #1
 80002dc:	469e      	mov	lr, r3
 80002de:	2d00      	cmp	r5, #0
 80002e0:	d0e0      	beq.n	80002a4 <__udivmoddi4+0xa4>
 80002e2:	e9c5 4e00 	strd	r4, lr, [r5]
 80002e6:	e7dd      	b.n	80002a4 <__udivmoddi4+0xa4>
 80002e8:	b902      	cbnz	r2, 80002ec <__udivmoddi4+0xec>
 80002ea:	deff      	udf	#255	; 0xff
 80002ec:	fab2 f282 	clz	r2, r2
 80002f0:	2a00      	cmp	r2, #0
 80002f2:	f040 8092 	bne.w	800041a <__udivmoddi4+0x21a>
 80002f6:	eba1 010c 	sub.w	r1, r1, ip
 80002fa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002fe:	fa1f fe8c 	uxth.w	lr, ip
 8000302:	2601      	movs	r6, #1
 8000304:	0c20      	lsrs	r0, r4, #16
 8000306:	fbb1 f3f7 	udiv	r3, r1, r7
 800030a:	fb07 1113 	mls	r1, r7, r3, r1
 800030e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000312:	fb0e f003 	mul.w	r0, lr, r3
 8000316:	4288      	cmp	r0, r1
 8000318:	d908      	bls.n	800032c <__udivmoddi4+0x12c>
 800031a:	eb1c 0101 	adds.w	r1, ip, r1
 800031e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x12a>
 8000324:	4288      	cmp	r0, r1
 8000326:	f200 80cb 	bhi.w	80004c0 <__udivmoddi4+0x2c0>
 800032a:	4643      	mov	r3, r8
 800032c:	1a09      	subs	r1, r1, r0
 800032e:	b2a4      	uxth	r4, r4
 8000330:	fbb1 f0f7 	udiv	r0, r1, r7
 8000334:	fb07 1110 	mls	r1, r7, r0, r1
 8000338:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800033c:	fb0e fe00 	mul.w	lr, lr, r0
 8000340:	45a6      	cmp	lr, r4
 8000342:	d908      	bls.n	8000356 <__udivmoddi4+0x156>
 8000344:	eb1c 0404 	adds.w	r4, ip, r4
 8000348:	f100 31ff 	add.w	r1, r0, #4294967295
 800034c:	d202      	bcs.n	8000354 <__udivmoddi4+0x154>
 800034e:	45a6      	cmp	lr, r4
 8000350:	f200 80bb 	bhi.w	80004ca <__udivmoddi4+0x2ca>
 8000354:	4608      	mov	r0, r1
 8000356:	eba4 040e 	sub.w	r4, r4, lr
 800035a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800035e:	e79c      	b.n	800029a <__udivmoddi4+0x9a>
 8000360:	f1c6 0720 	rsb	r7, r6, #32
 8000364:	40b3      	lsls	r3, r6
 8000366:	fa22 fc07 	lsr.w	ip, r2, r7
 800036a:	ea4c 0c03 	orr.w	ip, ip, r3
 800036e:	fa20 f407 	lsr.w	r4, r0, r7
 8000372:	fa01 f306 	lsl.w	r3, r1, r6
 8000376:	431c      	orrs	r4, r3
 8000378:	40f9      	lsrs	r1, r7
 800037a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800037e:	fa00 f306 	lsl.w	r3, r0, r6
 8000382:	fbb1 f8f9 	udiv	r8, r1, r9
 8000386:	0c20      	lsrs	r0, r4, #16
 8000388:	fa1f fe8c 	uxth.w	lr, ip
 800038c:	fb09 1118 	mls	r1, r9, r8, r1
 8000390:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000394:	fb08 f00e 	mul.w	r0, r8, lr
 8000398:	4288      	cmp	r0, r1
 800039a:	fa02 f206 	lsl.w	r2, r2, r6
 800039e:	d90b      	bls.n	80003b8 <__udivmoddi4+0x1b8>
 80003a0:	eb1c 0101 	adds.w	r1, ip, r1
 80003a4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a8:	f080 8088 	bcs.w	80004bc <__udivmoddi4+0x2bc>
 80003ac:	4288      	cmp	r0, r1
 80003ae:	f240 8085 	bls.w	80004bc <__udivmoddi4+0x2bc>
 80003b2:	f1a8 0802 	sub.w	r8, r8, #2
 80003b6:	4461      	add	r1, ip
 80003b8:	1a09      	subs	r1, r1, r0
 80003ba:	b2a4      	uxth	r4, r4
 80003bc:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c0:	fb09 1110 	mls	r1, r9, r0, r1
 80003c4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c8:	fb00 fe0e 	mul.w	lr, r0, lr
 80003cc:	458e      	cmp	lr, r1
 80003ce:	d908      	bls.n	80003e2 <__udivmoddi4+0x1e2>
 80003d0:	eb1c 0101 	adds.w	r1, ip, r1
 80003d4:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d8:	d26c      	bcs.n	80004b4 <__udivmoddi4+0x2b4>
 80003da:	458e      	cmp	lr, r1
 80003dc:	d96a      	bls.n	80004b4 <__udivmoddi4+0x2b4>
 80003de:	3802      	subs	r0, #2
 80003e0:	4461      	add	r1, ip
 80003e2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003e6:	fba0 9402 	umull	r9, r4, r0, r2
 80003ea:	eba1 010e 	sub.w	r1, r1, lr
 80003ee:	42a1      	cmp	r1, r4
 80003f0:	46c8      	mov	r8, r9
 80003f2:	46a6      	mov	lr, r4
 80003f4:	d356      	bcc.n	80004a4 <__udivmoddi4+0x2a4>
 80003f6:	d053      	beq.n	80004a0 <__udivmoddi4+0x2a0>
 80003f8:	b15d      	cbz	r5, 8000412 <__udivmoddi4+0x212>
 80003fa:	ebb3 0208 	subs.w	r2, r3, r8
 80003fe:	eb61 010e 	sbc.w	r1, r1, lr
 8000402:	fa01 f707 	lsl.w	r7, r1, r7
 8000406:	fa22 f306 	lsr.w	r3, r2, r6
 800040a:	40f1      	lsrs	r1, r6
 800040c:	431f      	orrs	r7, r3
 800040e:	e9c5 7100 	strd	r7, r1, [r5]
 8000412:	2600      	movs	r6, #0
 8000414:	4631      	mov	r1, r6
 8000416:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800041a:	f1c2 0320 	rsb	r3, r2, #32
 800041e:	40d8      	lsrs	r0, r3
 8000420:	fa0c fc02 	lsl.w	ip, ip, r2
 8000424:	fa21 f303 	lsr.w	r3, r1, r3
 8000428:	4091      	lsls	r1, r2
 800042a:	4301      	orrs	r1, r0
 800042c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000430:	fa1f fe8c 	uxth.w	lr, ip
 8000434:	fbb3 f0f7 	udiv	r0, r3, r7
 8000438:	fb07 3610 	mls	r6, r7, r0, r3
 800043c:	0c0b      	lsrs	r3, r1, #16
 800043e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000442:	fb00 f60e 	mul.w	r6, r0, lr
 8000446:	429e      	cmp	r6, r3
 8000448:	fa04 f402 	lsl.w	r4, r4, r2
 800044c:	d908      	bls.n	8000460 <__udivmoddi4+0x260>
 800044e:	eb1c 0303 	adds.w	r3, ip, r3
 8000452:	f100 38ff 	add.w	r8, r0, #4294967295
 8000456:	d22f      	bcs.n	80004b8 <__udivmoddi4+0x2b8>
 8000458:	429e      	cmp	r6, r3
 800045a:	d92d      	bls.n	80004b8 <__udivmoddi4+0x2b8>
 800045c:	3802      	subs	r0, #2
 800045e:	4463      	add	r3, ip
 8000460:	1b9b      	subs	r3, r3, r6
 8000462:	b289      	uxth	r1, r1
 8000464:	fbb3 f6f7 	udiv	r6, r3, r7
 8000468:	fb07 3316 	mls	r3, r7, r6, r3
 800046c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000470:	fb06 f30e 	mul.w	r3, r6, lr
 8000474:	428b      	cmp	r3, r1
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x28a>
 8000478:	eb1c 0101 	adds.w	r1, ip, r1
 800047c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000480:	d216      	bcs.n	80004b0 <__udivmoddi4+0x2b0>
 8000482:	428b      	cmp	r3, r1
 8000484:	d914      	bls.n	80004b0 <__udivmoddi4+0x2b0>
 8000486:	3e02      	subs	r6, #2
 8000488:	4461      	add	r1, ip
 800048a:	1ac9      	subs	r1, r1, r3
 800048c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000490:	e738      	b.n	8000304 <__udivmoddi4+0x104>
 8000492:	462e      	mov	r6, r5
 8000494:	4628      	mov	r0, r5
 8000496:	e705      	b.n	80002a4 <__udivmoddi4+0xa4>
 8000498:	4606      	mov	r6, r0
 800049a:	e6e3      	b.n	8000264 <__udivmoddi4+0x64>
 800049c:	4618      	mov	r0, r3
 800049e:	e6f8      	b.n	8000292 <__udivmoddi4+0x92>
 80004a0:	454b      	cmp	r3, r9
 80004a2:	d2a9      	bcs.n	80003f8 <__udivmoddi4+0x1f8>
 80004a4:	ebb9 0802 	subs.w	r8, r9, r2
 80004a8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004ac:	3801      	subs	r0, #1
 80004ae:	e7a3      	b.n	80003f8 <__udivmoddi4+0x1f8>
 80004b0:	4646      	mov	r6, r8
 80004b2:	e7ea      	b.n	800048a <__udivmoddi4+0x28a>
 80004b4:	4620      	mov	r0, r4
 80004b6:	e794      	b.n	80003e2 <__udivmoddi4+0x1e2>
 80004b8:	4640      	mov	r0, r8
 80004ba:	e7d1      	b.n	8000460 <__udivmoddi4+0x260>
 80004bc:	46d0      	mov	r8, sl
 80004be:	e77b      	b.n	80003b8 <__udivmoddi4+0x1b8>
 80004c0:	3b02      	subs	r3, #2
 80004c2:	4461      	add	r1, ip
 80004c4:	e732      	b.n	800032c <__udivmoddi4+0x12c>
 80004c6:	4630      	mov	r0, r6
 80004c8:	e709      	b.n	80002de <__udivmoddi4+0xde>
 80004ca:	4464      	add	r4, ip
 80004cc:	3802      	subs	r0, #2
 80004ce:	e742      	b.n	8000356 <__udivmoddi4+0x156>

080004d0 <__aeabi_idiv0>:
 80004d0:	4770      	bx	lr
 80004d2:	bf00      	nop

080004d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004d4:	b580      	push	{r7, lr}
 80004d6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004d8:	f000 fbe5 	bl	8000ca6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004dc:	f000 f81c 	bl	8000518 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004e0:	f000 f978 	bl	80007d4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80004e4:	f000 f946 	bl	8000774 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 80004e8:	f000 f878 	bl	80005dc <MX_TIM1_Init>
  MX_TIM2_Init();
 80004ec:	f000 f8ca 	bl	8000684 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80004f0:	f003 fdf2 	bl	80040d8 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80004f4:	4a05      	ldr	r2, [pc, #20]	; (800050c <main+0x38>)
 80004f6:	2100      	movs	r1, #0
 80004f8:	4805      	ldr	r0, [pc, #20]	; (8000510 <main+0x3c>)
 80004fa:	f003 fe37 	bl	800416c <osThreadNew>
 80004fe:	4603      	mov	r3, r0
 8000500:	4a04      	ldr	r2, [pc, #16]	; (8000514 <main+0x40>)
 8000502:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000504:	f003 fe0c 	bl	8004120 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000508:	e7fe      	b.n	8000508 <main+0x34>
 800050a:	bf00      	nop
 800050c:	08006e04 	.word	0x08006e04
 8000510:	08000869 	.word	0x08000869
 8000514:	200001ac 	.word	0x200001ac

08000518 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000518:	b580      	push	{r7, lr}
 800051a:	b096      	sub	sp, #88	; 0x58
 800051c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800051e:	f107 0314 	add.w	r3, r7, #20
 8000522:	2244      	movs	r2, #68	; 0x44
 8000524:	2100      	movs	r1, #0
 8000526:	4618      	mov	r0, r3
 8000528:	f006 fb84 	bl	8006c34 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800052c:	463b      	mov	r3, r7
 800052e:	2200      	movs	r2, #0
 8000530:	601a      	str	r2, [r3, #0]
 8000532:	605a      	str	r2, [r3, #4]
 8000534:	609a      	str	r2, [r3, #8]
 8000536:	60da      	str	r2, [r3, #12]
 8000538:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800053a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800053e:	f000 fe6d 	bl	800121c <HAL_PWREx_ControlVoltageScaling>
 8000542:	4603      	mov	r3, r0
 8000544:	2b00      	cmp	r3, #0
 8000546:	d001      	beq.n	800054c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000548:	f000 f9da 	bl	8000900 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800054c:	f000 fe48 	bl	80011e0 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000550:	4b21      	ldr	r3, [pc, #132]	; (80005d8 <SystemClock_Config+0xc0>)
 8000552:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000556:	4a20      	ldr	r2, [pc, #128]	; (80005d8 <SystemClock_Config+0xc0>)
 8000558:	f023 0318 	bic.w	r3, r3, #24
 800055c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8000560:	2314      	movs	r3, #20
 8000562:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000564:	2301      	movs	r3, #1
 8000566:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000568:	2301      	movs	r3, #1
 800056a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800056c:	2300      	movs	r3, #0
 800056e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000570:	2360      	movs	r3, #96	; 0x60
 8000572:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000574:	2302      	movs	r3, #2
 8000576:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000578:	2301      	movs	r3, #1
 800057a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800057c:	2301      	movs	r3, #1
 800057e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 16;
 8000580:	2310      	movs	r3, #16
 8000582:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000584:	2307      	movs	r3, #7
 8000586:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000588:	2302      	movs	r3, #2
 800058a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800058c:	2302      	movs	r3, #2
 800058e:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000590:	f107 0314 	add.w	r3, r7, #20
 8000594:	4618      	mov	r0, r3
 8000596:	f000 fe97 	bl	80012c8 <HAL_RCC_OscConfig>
 800059a:	4603      	mov	r3, r0
 800059c:	2b00      	cmp	r3, #0
 800059e:	d001      	beq.n	80005a4 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 80005a0:	f000 f9ae 	bl	8000900 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005a4:	230f      	movs	r3, #15
 80005a6:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005a8:	2303      	movs	r3, #3
 80005aa:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005ac:	2300      	movs	r3, #0
 80005ae:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005b0:	2300      	movs	r3, #0
 80005b2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005b4:	2300      	movs	r3, #0
 80005b6:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80005b8:	463b      	mov	r3, r7
 80005ba:	2101      	movs	r1, #1
 80005bc:	4618      	mov	r0, r3
 80005be:	f001 fa97 	bl	8001af0 <HAL_RCC_ClockConfig>
 80005c2:	4603      	mov	r3, r0
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	d001      	beq.n	80005cc <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80005c8:	f000 f99a 	bl	8000900 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 80005cc:	f001 fedc 	bl	8002388 <HAL_RCCEx_EnableMSIPLLMode>
}
 80005d0:	bf00      	nop
 80005d2:	3758      	adds	r7, #88	; 0x58
 80005d4:	46bd      	mov	sp, r7
 80005d6:	bd80      	pop	{r7, pc}
 80005d8:	40021000 	.word	0x40021000

080005dc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b088      	sub	sp, #32
 80005e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80005e2:	f107 0310 	add.w	r3, r7, #16
 80005e6:	2200      	movs	r2, #0
 80005e8:	601a      	str	r2, [r3, #0]
 80005ea:	605a      	str	r2, [r3, #4]
 80005ec:	609a      	str	r2, [r3, #8]
 80005ee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80005f0:	1d3b      	adds	r3, r7, #4
 80005f2:	2200      	movs	r2, #0
 80005f4:	601a      	str	r2, [r3, #0]
 80005f6:	605a      	str	r2, [r3, #4]
 80005f8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80005fa:	4b20      	ldr	r3, [pc, #128]	; (800067c <MX_TIM1_Init+0xa0>)
 80005fc:	4a20      	ldr	r2, [pc, #128]	; (8000680 <MX_TIM1_Init+0xa4>)
 80005fe:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 263-1;
 8000600:	4b1e      	ldr	r3, [pc, #120]	; (800067c <MX_TIM1_Init+0xa0>)
 8000602:	f44f 7283 	mov.w	r2, #262	; 0x106
 8000606:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000608:	4b1c      	ldr	r3, [pc, #112]	; (800067c <MX_TIM1_Init+0xa0>)
 800060a:	2200      	movs	r2, #0
 800060c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000-1;
 800060e:	4b1b      	ldr	r3, [pc, #108]	; (800067c <MX_TIM1_Init+0xa0>)
 8000610:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000614:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000616:	4b19      	ldr	r3, [pc, #100]	; (800067c <MX_TIM1_Init+0xa0>)
 8000618:	2200      	movs	r2, #0
 800061a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800061c:	4b17      	ldr	r3, [pc, #92]	; (800067c <MX_TIM1_Init+0xa0>)
 800061e:	2200      	movs	r2, #0
 8000620:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000622:	4b16      	ldr	r3, [pc, #88]	; (800067c <MX_TIM1_Init+0xa0>)
 8000624:	2200      	movs	r2, #0
 8000626:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000628:	4814      	ldr	r0, [pc, #80]	; (800067c <MX_TIM1_Init+0xa0>)
 800062a:	f001 ffaf 	bl	800258c <HAL_TIM_Base_Init>
 800062e:	4603      	mov	r3, r0
 8000630:	2b00      	cmp	r3, #0
 8000632:	d001      	beq.n	8000638 <MX_TIM1_Init+0x5c>
  {
    Error_Handler();
 8000634:	f000 f964 	bl	8000900 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000638:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800063c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800063e:	f107 0310 	add.w	r3, r7, #16
 8000642:	4619      	mov	r1, r3
 8000644:	480d      	ldr	r0, [pc, #52]	; (800067c <MX_TIM1_Init+0xa0>)
 8000646:	f002 fbc1 	bl	8002dcc <HAL_TIM_ConfigClockSource>
 800064a:	4603      	mov	r3, r0
 800064c:	2b00      	cmp	r3, #0
 800064e:	d001      	beq.n	8000654 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8000650:	f000 f956 	bl	8000900 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000654:	2300      	movs	r3, #0
 8000656:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000658:	2300      	movs	r3, #0
 800065a:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800065c:	2300      	movs	r3, #0
 800065e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000660:	1d3b      	adds	r3, r7, #4
 8000662:	4619      	mov	r1, r3
 8000664:	4805      	ldr	r0, [pc, #20]	; (800067c <MX_TIM1_Init+0xa0>)
 8000666:	f003 f845 	bl	80036f4 <HAL_TIMEx_MasterConfigSynchronization>
 800066a:	4603      	mov	r3, r0
 800066c:	2b00      	cmp	r3, #0
 800066e:	d001      	beq.n	8000674 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8000670:	f000 f946 	bl	8000900 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000674:	bf00      	nop
 8000676:	3720      	adds	r7, #32
 8000678:	46bd      	mov	sp, r7
 800067a:	bd80      	pop	{r7, pc}
 800067c:	20000090 	.word	0x20000090
 8000680:	40012c00 	.word	0x40012c00

08000684 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	b08e      	sub	sp, #56	; 0x38
 8000688:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800068a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800068e:	2200      	movs	r2, #0
 8000690:	601a      	str	r2, [r3, #0]
 8000692:	605a      	str	r2, [r3, #4]
 8000694:	609a      	str	r2, [r3, #8]
 8000696:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000698:	f107 031c 	add.w	r3, r7, #28
 800069c:	2200      	movs	r2, #0
 800069e:	601a      	str	r2, [r3, #0]
 80006a0:	605a      	str	r2, [r3, #4]
 80006a2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80006a4:	463b      	mov	r3, r7
 80006a6:	2200      	movs	r2, #0
 80006a8:	601a      	str	r2, [r3, #0]
 80006aa:	605a      	str	r2, [r3, #4]
 80006ac:	609a      	str	r2, [r3, #8]
 80006ae:	60da      	str	r2, [r3, #12]
 80006b0:	611a      	str	r2, [r3, #16]
 80006b2:	615a      	str	r2, [r3, #20]
 80006b4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80006b6:	4b2e      	ldr	r3, [pc, #184]	; (8000770 <MX_TIM2_Init+0xec>)
 80006b8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80006bc:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 32 -1;
 80006be:	4b2c      	ldr	r3, [pc, #176]	; (8000770 <MX_TIM2_Init+0xec>)
 80006c0:	221f      	movs	r2, #31
 80006c2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006c4:	4b2a      	ldr	r3, [pc, #168]	; (8000770 <MX_TIM2_Init+0xec>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000 -1;
 80006ca:	4b29      	ldr	r3, [pc, #164]	; (8000770 <MX_TIM2_Init+0xec>)
 80006cc:	f240 32e7 	movw	r2, #999	; 0x3e7
 80006d0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80006d2:	4b27      	ldr	r3, [pc, #156]	; (8000770 <MX_TIM2_Init+0xec>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006d8:	4b25      	ldr	r3, [pc, #148]	; (8000770 <MX_TIM2_Init+0xec>)
 80006da:	2200      	movs	r2, #0
 80006dc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80006de:	4824      	ldr	r0, [pc, #144]	; (8000770 <MX_TIM2_Init+0xec>)
 80006e0:	f001 ff54 	bl	800258c <HAL_TIM_Base_Init>
 80006e4:	4603      	mov	r3, r0
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d001      	beq.n	80006ee <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 80006ea:	f000 f909 	bl	8000900 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80006ee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006f2:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80006f4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80006f8:	4619      	mov	r1, r3
 80006fa:	481d      	ldr	r0, [pc, #116]	; (8000770 <MX_TIM2_Init+0xec>)
 80006fc:	f002 fb66 	bl	8002dcc <HAL_TIM_ConfigClockSource>
 8000700:	4603      	mov	r3, r0
 8000702:	2b00      	cmp	r3, #0
 8000704:	d001      	beq.n	800070a <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8000706:	f000 f8fb 	bl	8000900 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800070a:	4819      	ldr	r0, [pc, #100]	; (8000770 <MX_TIM2_Init+0xec>)
 800070c:	f001 ffea 	bl	80026e4 <HAL_TIM_PWM_Init>
 8000710:	4603      	mov	r3, r0
 8000712:	2b00      	cmp	r3, #0
 8000714:	d001      	beq.n	800071a <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8000716:	f000 f8f3 	bl	8000900 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800071a:	2300      	movs	r3, #0
 800071c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800071e:	2300      	movs	r3, #0
 8000720:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000722:	f107 031c 	add.w	r3, r7, #28
 8000726:	4619      	mov	r1, r3
 8000728:	4811      	ldr	r0, [pc, #68]	; (8000770 <MX_TIM2_Init+0xec>)
 800072a:	f002 ffe3 	bl	80036f4 <HAL_TIMEx_MasterConfigSynchronization>
 800072e:	4603      	mov	r3, r0
 8000730:	2b00      	cmp	r3, #0
 8000732:	d001      	beq.n	8000738 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8000734:	f000 f8e4 	bl	8000900 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000738:	2360      	movs	r3, #96	; 0x60
 800073a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 500;
 800073c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000740:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000742:	2300      	movs	r3, #0
 8000744:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000746:	2300      	movs	r3, #0
 8000748:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800074a:	463b      	mov	r3, r7
 800074c:	2200      	movs	r2, #0
 800074e:	4619      	mov	r1, r3
 8000750:	4807      	ldr	r0, [pc, #28]	; (8000770 <MX_TIM2_Init+0xec>)
 8000752:	f002 fa27 	bl	8002ba4 <HAL_TIM_PWM_ConfigChannel>
 8000756:	4603      	mov	r3, r0
 8000758:	2b00      	cmp	r3, #0
 800075a:	d001      	beq.n	8000760 <MX_TIM2_Init+0xdc>
  {
    Error_Handler();
 800075c:	f000 f8d0 	bl	8000900 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000760:	4803      	ldr	r0, [pc, #12]	; (8000770 <MX_TIM2_Init+0xec>)
 8000762:	f000 f92d 	bl	80009c0 <HAL_TIM_MspPostInit>

}
 8000766:	bf00      	nop
 8000768:	3738      	adds	r7, #56	; 0x38
 800076a:	46bd      	mov	sp, r7
 800076c:	bd80      	pop	{r7, pc}
 800076e:	bf00      	nop
 8000770:	200000dc 	.word	0x200000dc

08000774 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000778:	4b14      	ldr	r3, [pc, #80]	; (80007cc <MX_USART2_UART_Init+0x58>)
 800077a:	4a15      	ldr	r2, [pc, #84]	; (80007d0 <MX_USART2_UART_Init+0x5c>)
 800077c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800077e:	4b13      	ldr	r3, [pc, #76]	; (80007cc <MX_USART2_UART_Init+0x58>)
 8000780:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000784:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000786:	4b11      	ldr	r3, [pc, #68]	; (80007cc <MX_USART2_UART_Init+0x58>)
 8000788:	2200      	movs	r2, #0
 800078a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800078c:	4b0f      	ldr	r3, [pc, #60]	; (80007cc <MX_USART2_UART_Init+0x58>)
 800078e:	2200      	movs	r2, #0
 8000790:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000792:	4b0e      	ldr	r3, [pc, #56]	; (80007cc <MX_USART2_UART_Init+0x58>)
 8000794:	2200      	movs	r2, #0
 8000796:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000798:	4b0c      	ldr	r3, [pc, #48]	; (80007cc <MX_USART2_UART_Init+0x58>)
 800079a:	220c      	movs	r2, #12
 800079c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800079e:	4b0b      	ldr	r3, [pc, #44]	; (80007cc <MX_USART2_UART_Init+0x58>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80007a4:	4b09      	ldr	r3, [pc, #36]	; (80007cc <MX_USART2_UART_Init+0x58>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007aa:	4b08      	ldr	r3, [pc, #32]	; (80007cc <MX_USART2_UART_Init+0x58>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007b0:	4b06      	ldr	r3, [pc, #24]	; (80007cc <MX_USART2_UART_Init+0x58>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80007b6:	4805      	ldr	r0, [pc, #20]	; (80007cc <MX_USART2_UART_Init+0x58>)
 80007b8:	f003 f820 	bl	80037fc <HAL_UART_Init>
 80007bc:	4603      	mov	r3, r0
 80007be:	2b00      	cmp	r3, #0
 80007c0:	d001      	beq.n	80007c6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80007c2:	f000 f89d 	bl	8000900 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80007c6:	bf00      	nop
 80007c8:	bd80      	pop	{r7, pc}
 80007ca:	bf00      	nop
 80007cc:	20000128 	.word	0x20000128
 80007d0:	40004400 	.word	0x40004400

080007d4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b088      	sub	sp, #32
 80007d8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007da:	f107 030c 	add.w	r3, r7, #12
 80007de:	2200      	movs	r2, #0
 80007e0:	601a      	str	r2, [r3, #0]
 80007e2:	605a      	str	r2, [r3, #4]
 80007e4:	609a      	str	r2, [r3, #8]
 80007e6:	60da      	str	r2, [r3, #12]
 80007e8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007ea:	4b1d      	ldr	r3, [pc, #116]	; (8000860 <MX_GPIO_Init+0x8c>)
 80007ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007ee:	4a1c      	ldr	r2, [pc, #112]	; (8000860 <MX_GPIO_Init+0x8c>)
 80007f0:	f043 0304 	orr.w	r3, r3, #4
 80007f4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007f6:	4b1a      	ldr	r3, [pc, #104]	; (8000860 <MX_GPIO_Init+0x8c>)
 80007f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007fa:	f003 0304 	and.w	r3, r3, #4
 80007fe:	60bb      	str	r3, [r7, #8]
 8000800:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000802:	4b17      	ldr	r3, [pc, #92]	; (8000860 <MX_GPIO_Init+0x8c>)
 8000804:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000806:	4a16      	ldr	r2, [pc, #88]	; (8000860 <MX_GPIO_Init+0x8c>)
 8000808:	f043 0301 	orr.w	r3, r3, #1
 800080c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800080e:	4b14      	ldr	r3, [pc, #80]	; (8000860 <MX_GPIO_Init+0x8c>)
 8000810:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000812:	f003 0301 	and.w	r3, r3, #1
 8000816:	607b      	str	r3, [r7, #4]
 8000818:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800081a:	4b11      	ldr	r3, [pc, #68]	; (8000860 <MX_GPIO_Init+0x8c>)
 800081c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800081e:	4a10      	ldr	r2, [pc, #64]	; (8000860 <MX_GPIO_Init+0x8c>)
 8000820:	f043 0302 	orr.w	r3, r3, #2
 8000824:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000826:	4b0e      	ldr	r3, [pc, #56]	; (8000860 <MX_GPIO_Init+0x8c>)
 8000828:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800082a:	f003 0302 	and.w	r3, r3, #2
 800082e:	603b      	str	r3, [r7, #0]
 8000830:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8000832:	2200      	movs	r2, #0
 8000834:	2108      	movs	r1, #8
 8000836:	480b      	ldr	r0, [pc, #44]	; (8000864 <MX_GPIO_Init+0x90>)
 8000838:	f000 fcba 	bl	80011b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 800083c:	2308      	movs	r3, #8
 800083e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000840:	2301      	movs	r3, #1
 8000842:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000844:	2300      	movs	r3, #0
 8000846:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000848:	2300      	movs	r3, #0
 800084a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 800084c:	f107 030c 	add.w	r3, r7, #12
 8000850:	4619      	mov	r1, r3
 8000852:	4804      	ldr	r0, [pc, #16]	; (8000864 <MX_GPIO_Init+0x90>)
 8000854:	f000 fb42 	bl	8000edc <HAL_GPIO_Init>

}
 8000858:	bf00      	nop
 800085a:	3720      	adds	r7, #32
 800085c:	46bd      	mov	sp, r7
 800085e:	bd80      	pop	{r7, pc}
 8000860:	40021000 	.word	0x40021000
 8000864:	48000400 	.word	0x48000400

08000868 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	b084      	sub	sp, #16
 800086c:	af00      	add	r7, sp, #0
 800086e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	int x = 1;
 8000870:	2301      	movs	r3, #1
 8000872:	60fb      	str	r3, [r7, #12]
	//HAL_TIM_Base_Start(&htim1);
	if (HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1) != HAL_OK){
 8000874:	2100      	movs	r1, #0
 8000876:	4818      	ldr	r0, [pc, #96]	; (80008d8 <StartDefaultTask+0x70>)
 8000878:	f001 ff96 	bl	80027a8 <HAL_TIM_PWM_Start>
	 * HAL_TIM_PWM_Start_IT(&htim1, TIM_CHANNEL_1);
	 */
  /* Infinite loop */
  for(;;)
  {
	  if (x == 0)
 800087c:	68fb      	ldr	r3, [r7, #12]
 800087e:	2b00      	cmp	r3, #0
 8000880:	d10a      	bne.n	8000898 <StartDefaultTask+0x30>
	  {
		  TIM2 -> ARR = 1000;
 8000882:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000886:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800088a:	62da      	str	r2, [r3, #44]	; 0x2c
		  TIM2 -> CCR1 = 500;
 800088c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000890:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000894:	635a      	str	r2, [r3, #52]	; 0x34
 8000896:	e01a      	b.n	80008ce <StartDefaultTask+0x66>
	  }
	  else if(x == 1)
 8000898:	68fb      	ldr	r3, [r7, #12]
 800089a:	2b01      	cmp	r3, #1
 800089c:	d10a      	bne.n	80008b4 <StartDefaultTask+0x4c>
	  {
		  TIM2 -> ARR = 2000;
 800089e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80008a2:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80008a6:	62da      	str	r2, [r3, #44]	; 0x2c
		  TIM2 -> CCR1 = 1000;
 80008a8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80008ac:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80008b0:	635a      	str	r2, [r3, #52]	; 0x34
 80008b2:	e00c      	b.n	80008ce <StartDefaultTask+0x66>
	  }
	  else if(x == -1)
 80008b4:	68fb      	ldr	r3, [r7, #12]
 80008b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80008ba:	d108      	bne.n	80008ce <StartDefaultTask+0x66>
	  {
		  //HAL_TIM_PWM_ConfigChannel(htim, sConfig, Channel)
		  TIM2 -> ARR = 500;
 80008bc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80008c0:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80008c4:	62da      	str	r2, [r3, #44]	; 0x2c
		  TIM2 -> CCR1 = 250;
 80008c6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80008ca:	22fa      	movs	r2, #250	; 0xfa
 80008cc:	635a      	str	r2, [r3, #52]	; 0x34
	  {
		  //TIM2 -> ARR = 2000;
		  //Errorhandling: send ErrorMsg to WifiClick
	  }

    osDelay(1);
 80008ce:	2001      	movs	r0, #1
 80008d0:	f003 fcde 	bl	8004290 <osDelay>
	  if (x == 0)
 80008d4:	e7d2      	b.n	800087c <StartDefaultTask+0x14>
 80008d6:	bf00      	nop
 80008d8:	200000dc 	.word	0x200000dc

080008dc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	b082      	sub	sp, #8
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	4a04      	ldr	r2, [pc, #16]	; (80008fc <HAL_TIM_PeriodElapsedCallback+0x20>)
 80008ea:	4293      	cmp	r3, r2
 80008ec:	d101      	bne.n	80008f2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80008ee:	f000 f9f3 	bl	8000cd8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80008f2:	bf00      	nop
 80008f4:	3708      	adds	r7, #8
 80008f6:	46bd      	mov	sp, r7
 80008f8:	bd80      	pop	{r7, pc}
 80008fa:	bf00      	nop
 80008fc:	40001000 	.word	0x40001000

08000900 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000900:	b480      	push	{r7}
 8000902:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000904:	b672      	cpsid	i
}
 8000906:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000908:	e7fe      	b.n	8000908 <Error_Handler+0x8>
	...

0800090c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	b082      	sub	sp, #8
 8000910:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000912:	4b11      	ldr	r3, [pc, #68]	; (8000958 <HAL_MspInit+0x4c>)
 8000914:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000916:	4a10      	ldr	r2, [pc, #64]	; (8000958 <HAL_MspInit+0x4c>)
 8000918:	f043 0301 	orr.w	r3, r3, #1
 800091c:	6613      	str	r3, [r2, #96]	; 0x60
 800091e:	4b0e      	ldr	r3, [pc, #56]	; (8000958 <HAL_MspInit+0x4c>)
 8000920:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000922:	f003 0301 	and.w	r3, r3, #1
 8000926:	607b      	str	r3, [r7, #4]
 8000928:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800092a:	4b0b      	ldr	r3, [pc, #44]	; (8000958 <HAL_MspInit+0x4c>)
 800092c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800092e:	4a0a      	ldr	r2, [pc, #40]	; (8000958 <HAL_MspInit+0x4c>)
 8000930:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000934:	6593      	str	r3, [r2, #88]	; 0x58
 8000936:	4b08      	ldr	r3, [pc, #32]	; (8000958 <HAL_MspInit+0x4c>)
 8000938:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800093a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800093e:	603b      	str	r3, [r7, #0]
 8000940:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000942:	2200      	movs	r2, #0
 8000944:	210f      	movs	r1, #15
 8000946:	f06f 0001 	mvn.w	r0, #1
 800094a:	f000 fa9d 	bl	8000e88 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800094e:	bf00      	nop
 8000950:	3708      	adds	r7, #8
 8000952:	46bd      	mov	sp, r7
 8000954:	bd80      	pop	{r7, pc}
 8000956:	bf00      	nop
 8000958:	40021000 	.word	0x40021000

0800095c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800095c:	b480      	push	{r7}
 800095e:	b085      	sub	sp, #20
 8000960:	af00      	add	r7, sp, #0
 8000962:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	4a13      	ldr	r2, [pc, #76]	; (80009b8 <HAL_TIM_Base_MspInit+0x5c>)
 800096a:	4293      	cmp	r3, r2
 800096c:	d10c      	bne.n	8000988 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800096e:	4b13      	ldr	r3, [pc, #76]	; (80009bc <HAL_TIM_Base_MspInit+0x60>)
 8000970:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000972:	4a12      	ldr	r2, [pc, #72]	; (80009bc <HAL_TIM_Base_MspInit+0x60>)
 8000974:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000978:	6613      	str	r3, [r2, #96]	; 0x60
 800097a:	4b10      	ldr	r3, [pc, #64]	; (80009bc <HAL_TIM_Base_MspInit+0x60>)
 800097c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800097e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000982:	60fb      	str	r3, [r7, #12]
 8000984:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000986:	e010      	b.n	80009aa <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM2)
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000990:	d10b      	bne.n	80009aa <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000992:	4b0a      	ldr	r3, [pc, #40]	; (80009bc <HAL_TIM_Base_MspInit+0x60>)
 8000994:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000996:	4a09      	ldr	r2, [pc, #36]	; (80009bc <HAL_TIM_Base_MspInit+0x60>)
 8000998:	f043 0301 	orr.w	r3, r3, #1
 800099c:	6593      	str	r3, [r2, #88]	; 0x58
 800099e:	4b07      	ldr	r3, [pc, #28]	; (80009bc <HAL_TIM_Base_MspInit+0x60>)
 80009a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009a2:	f003 0301 	and.w	r3, r3, #1
 80009a6:	60bb      	str	r3, [r7, #8]
 80009a8:	68bb      	ldr	r3, [r7, #8]
}
 80009aa:	bf00      	nop
 80009ac:	3714      	adds	r7, #20
 80009ae:	46bd      	mov	sp, r7
 80009b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b4:	4770      	bx	lr
 80009b6:	bf00      	nop
 80009b8:	40012c00 	.word	0x40012c00
 80009bc:	40021000 	.word	0x40021000

080009c0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b088      	sub	sp, #32
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009c8:	f107 030c 	add.w	r3, r7, #12
 80009cc:	2200      	movs	r2, #0
 80009ce:	601a      	str	r2, [r3, #0]
 80009d0:	605a      	str	r2, [r3, #4]
 80009d2:	609a      	str	r2, [r3, #8]
 80009d4:	60da      	str	r2, [r3, #12]
 80009d6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80009e0:	d11c      	bne.n	8000a1c <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009e2:	4b10      	ldr	r3, [pc, #64]	; (8000a24 <HAL_TIM_MspPostInit+0x64>)
 80009e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009e6:	4a0f      	ldr	r2, [pc, #60]	; (8000a24 <HAL_TIM_MspPostInit+0x64>)
 80009e8:	f043 0301 	orr.w	r3, r3, #1
 80009ec:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009ee:	4b0d      	ldr	r3, [pc, #52]	; (8000a24 <HAL_TIM_MspPostInit+0x64>)
 80009f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009f2:	f003 0301 	and.w	r3, r3, #1
 80009f6:	60bb      	str	r3, [r7, #8]
 80009f8:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80009fa:	2320      	movs	r3, #32
 80009fc:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009fe:	2302      	movs	r3, #2
 8000a00:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a02:	2300      	movs	r3, #0
 8000a04:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a06:	2300      	movs	r3, #0
 8000a08:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000a0a:	2301      	movs	r3, #1
 8000a0c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a0e:	f107 030c 	add.w	r3, r7, #12
 8000a12:	4619      	mov	r1, r3
 8000a14:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a18:	f000 fa60 	bl	8000edc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000a1c:	bf00      	nop
 8000a1e:	3720      	adds	r7, #32
 8000a20:	46bd      	mov	sp, r7
 8000a22:	bd80      	pop	{r7, pc}
 8000a24:	40021000 	.word	0x40021000

08000a28 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b09e      	sub	sp, #120	; 0x78
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a30:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000a34:	2200      	movs	r2, #0
 8000a36:	601a      	str	r2, [r3, #0]
 8000a38:	605a      	str	r2, [r3, #4]
 8000a3a:	609a      	str	r2, [r3, #8]
 8000a3c:	60da      	str	r2, [r3, #12]
 8000a3e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a40:	f107 0310 	add.w	r3, r7, #16
 8000a44:	2254      	movs	r2, #84	; 0x54
 8000a46:	2100      	movs	r1, #0
 8000a48:	4618      	mov	r0, r3
 8000a4a:	f006 f8f3 	bl	8006c34 <memset>
  if(huart->Instance==USART2)
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	681b      	ldr	r3, [r3, #0]
 8000a52:	4a28      	ldr	r2, [pc, #160]	; (8000af4 <HAL_UART_MspInit+0xcc>)
 8000a54:	4293      	cmp	r3, r2
 8000a56:	d148      	bne.n	8000aea <HAL_UART_MspInit+0xc2>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000a58:	2302      	movs	r3, #2
 8000a5a:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a60:	f107 0310 	add.w	r3, r7, #16
 8000a64:	4618      	mov	r0, r3
 8000a66:	f001 fa99 	bl	8001f9c <HAL_RCCEx_PeriphCLKConfig>
 8000a6a:	4603      	mov	r3, r0
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d001      	beq.n	8000a74 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000a70:	f7ff ff46 	bl	8000900 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a74:	4b20      	ldr	r3, [pc, #128]	; (8000af8 <HAL_UART_MspInit+0xd0>)
 8000a76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a78:	4a1f      	ldr	r2, [pc, #124]	; (8000af8 <HAL_UART_MspInit+0xd0>)
 8000a7a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a7e:	6593      	str	r3, [r2, #88]	; 0x58
 8000a80:	4b1d      	ldr	r3, [pc, #116]	; (8000af8 <HAL_UART_MspInit+0xd0>)
 8000a82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a88:	60fb      	str	r3, [r7, #12]
 8000a8a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a8c:	4b1a      	ldr	r3, [pc, #104]	; (8000af8 <HAL_UART_MspInit+0xd0>)
 8000a8e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a90:	4a19      	ldr	r2, [pc, #100]	; (8000af8 <HAL_UART_MspInit+0xd0>)
 8000a92:	f043 0301 	orr.w	r3, r3, #1
 8000a96:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a98:	4b17      	ldr	r3, [pc, #92]	; (8000af8 <HAL_UART_MspInit+0xd0>)
 8000a9a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a9c:	f003 0301 	and.w	r3, r3, #1
 8000aa0:	60bb      	str	r3, [r7, #8]
 8000aa2:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8000aa4:	2304      	movs	r3, #4
 8000aa6:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aa8:	2302      	movs	r3, #2
 8000aaa:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aac:	2300      	movs	r3, #0
 8000aae:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ab0:	2303      	movs	r3, #3
 8000ab2:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000ab4:	2307      	movs	r3, #7
 8000ab6:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8000ab8:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000abc:	4619      	mov	r1, r3
 8000abe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ac2:	f000 fa0b 	bl	8000edc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8000ac6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000aca:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000acc:	2302      	movs	r3, #2
 8000ace:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ad4:	2303      	movs	r3, #3
 8000ad6:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8000ad8:	2303      	movs	r3, #3
 8000ada:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8000adc:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ae6:	f000 f9f9 	bl	8000edc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000aea:	bf00      	nop
 8000aec:	3778      	adds	r7, #120	; 0x78
 8000aee:	46bd      	mov	sp, r7
 8000af0:	bd80      	pop	{r7, pc}
 8000af2:	bf00      	nop
 8000af4:	40004400 	.word	0x40004400
 8000af8:	40021000 	.word	0x40021000

08000afc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b08e      	sub	sp, #56	; 0x38
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8000b04:	2300      	movs	r3, #0
 8000b06:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000b0a:	4b34      	ldr	r3, [pc, #208]	; (8000bdc <HAL_InitTick+0xe0>)
 8000b0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b0e:	4a33      	ldr	r2, [pc, #204]	; (8000bdc <HAL_InitTick+0xe0>)
 8000b10:	f043 0310 	orr.w	r3, r3, #16
 8000b14:	6593      	str	r3, [r2, #88]	; 0x58
 8000b16:	4b31      	ldr	r3, [pc, #196]	; (8000bdc <HAL_InitTick+0xe0>)
 8000b18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b1a:	f003 0310 	and.w	r3, r3, #16
 8000b1e:	60fb      	str	r3, [r7, #12]
 8000b20:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000b22:	f107 0210 	add.w	r2, r7, #16
 8000b26:	f107 0314 	add.w	r3, r7, #20
 8000b2a:	4611      	mov	r1, r2
 8000b2c:	4618      	mov	r0, r3
 8000b2e:	f001 f9a3 	bl	8001e78 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000b32:	6a3b      	ldr	r3, [r7, #32]
 8000b34:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000b36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d103      	bne.n	8000b44 <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000b3c:	f001 f970 	bl	8001e20 <HAL_RCC_GetPCLK1Freq>
 8000b40:	6378      	str	r0, [r7, #52]	; 0x34
 8000b42:	e004      	b.n	8000b4e <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000b44:	f001 f96c 	bl	8001e20 <HAL_RCC_GetPCLK1Freq>
 8000b48:	4603      	mov	r3, r0
 8000b4a:	005b      	lsls	r3, r3, #1
 8000b4c:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000b4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000b50:	4a23      	ldr	r2, [pc, #140]	; (8000be0 <HAL_InitTick+0xe4>)
 8000b52:	fba2 2303 	umull	r2, r3, r2, r3
 8000b56:	0c9b      	lsrs	r3, r3, #18
 8000b58:	3b01      	subs	r3, #1
 8000b5a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000b5c:	4b21      	ldr	r3, [pc, #132]	; (8000be4 <HAL_InitTick+0xe8>)
 8000b5e:	4a22      	ldr	r2, [pc, #136]	; (8000be8 <HAL_InitTick+0xec>)
 8000b60:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000b62:	4b20      	ldr	r3, [pc, #128]	; (8000be4 <HAL_InitTick+0xe8>)
 8000b64:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000b68:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000b6a:	4a1e      	ldr	r2, [pc, #120]	; (8000be4 <HAL_InitTick+0xe8>)
 8000b6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b6e:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000b70:	4b1c      	ldr	r3, [pc, #112]	; (8000be4 <HAL_InitTick+0xe8>)
 8000b72:	2200      	movs	r2, #0
 8000b74:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b76:	4b1b      	ldr	r3, [pc, #108]	; (8000be4 <HAL_InitTick+0xe8>)
 8000b78:	2200      	movs	r2, #0
 8000b7a:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b7c:	4b19      	ldr	r3, [pc, #100]	; (8000be4 <HAL_InitTick+0xe8>)
 8000b7e:	2200      	movs	r2, #0
 8000b80:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000b82:	4818      	ldr	r0, [pc, #96]	; (8000be4 <HAL_InitTick+0xe8>)
 8000b84:	f001 fd02 	bl	800258c <HAL_TIM_Base_Init>
 8000b88:	4603      	mov	r3, r0
 8000b8a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000b8e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d11b      	bne.n	8000bce <HAL_InitTick+0xd2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000b96:	4813      	ldr	r0, [pc, #76]	; (8000be4 <HAL_InitTick+0xe8>)
 8000b98:	f001 fd50 	bl	800263c <HAL_TIM_Base_Start_IT>
 8000b9c:	4603      	mov	r3, r0
 8000b9e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000ba2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d111      	bne.n	8000bce <HAL_InitTick+0xd2>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000baa:	2036      	movs	r0, #54	; 0x36
 8000bac:	f000 f988 	bl	8000ec0 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	2b0f      	cmp	r3, #15
 8000bb4:	d808      	bhi.n	8000bc8 <HAL_InitTick+0xcc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	6879      	ldr	r1, [r7, #4]
 8000bba:	2036      	movs	r0, #54	; 0x36
 8000bbc:	f000 f964 	bl	8000e88 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000bc0:	4a0a      	ldr	r2, [pc, #40]	; (8000bec <HAL_InitTick+0xf0>)
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	6013      	str	r3, [r2, #0]
 8000bc6:	e002      	b.n	8000bce <HAL_InitTick+0xd2>
      }
      else
      {
        status = HAL_ERROR;
 8000bc8:	2301      	movs	r3, #1
 8000bca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000bce:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000bd2:	4618      	mov	r0, r3
 8000bd4:	3738      	adds	r7, #56	; 0x38
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	bd80      	pop	{r7, pc}
 8000bda:	bf00      	nop
 8000bdc:	40021000 	.word	0x40021000
 8000be0:	431bde83 	.word	0x431bde83
 8000be4:	200001b0 	.word	0x200001b0
 8000be8:	40001000 	.word	0x40001000
 8000bec:	20000004 	.word	0x20000004

08000bf0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000bf4:	e7fe      	b.n	8000bf4 <NMI_Handler+0x4>

08000bf6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bf6:	b480      	push	{r7}
 8000bf8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bfa:	e7fe      	b.n	8000bfa <HardFault_Handler+0x4>

08000bfc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c00:	e7fe      	b.n	8000c00 <MemManage_Handler+0x4>

08000c02 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c02:	b480      	push	{r7}
 8000c04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c06:	e7fe      	b.n	8000c06 <BusFault_Handler+0x4>

08000c08 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c0c:	e7fe      	b.n	8000c0c <UsageFault_Handler+0x4>

08000c0e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c0e:	b480      	push	{r7}
 8000c10:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c12:	bf00      	nop
 8000c14:	46bd      	mov	sp, r7
 8000c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1a:	4770      	bx	lr

08000c1c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000c20:	4802      	ldr	r0, [pc, #8]	; (8000c2c <TIM6_DAC_IRQHandler+0x10>)
 8000c22:	f001 fe9f 	bl	8002964 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000c26:	bf00      	nop
 8000c28:	bd80      	pop	{r7, pc}
 8000c2a:	bf00      	nop
 8000c2c:	200001b0 	.word	0x200001b0

08000c30 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000c30:	b480      	push	{r7}
 8000c32:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000c34:	4b06      	ldr	r3, [pc, #24]	; (8000c50 <SystemInit+0x20>)
 8000c36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c3a:	4a05      	ldr	r2, [pc, #20]	; (8000c50 <SystemInit+0x20>)
 8000c3c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c40:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000c44:	bf00      	nop
 8000c46:	46bd      	mov	sp, r7
 8000c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4c:	4770      	bx	lr
 8000c4e:	bf00      	nop
 8000c50:	e000ed00 	.word	0xe000ed00

08000c54 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000c54:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c8c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000c58:	f7ff ffea 	bl	8000c30 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c5c:	480c      	ldr	r0, [pc, #48]	; (8000c90 <LoopForever+0x6>)
  ldr r1, =_edata
 8000c5e:	490d      	ldr	r1, [pc, #52]	; (8000c94 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000c60:	4a0d      	ldr	r2, [pc, #52]	; (8000c98 <LoopForever+0xe>)
  movs r3, #0
 8000c62:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c64:	e002      	b.n	8000c6c <LoopCopyDataInit>

08000c66 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c66:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c68:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c6a:	3304      	adds	r3, #4

08000c6c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c6c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c6e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c70:	d3f9      	bcc.n	8000c66 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c72:	4a0a      	ldr	r2, [pc, #40]	; (8000c9c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000c74:	4c0a      	ldr	r4, [pc, #40]	; (8000ca0 <LoopForever+0x16>)
  movs r3, #0
 8000c76:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c78:	e001      	b.n	8000c7e <LoopFillZerobss>

08000c7a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c7a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c7c:	3204      	adds	r2, #4

08000c7e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c7e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c80:	d3fb      	bcc.n	8000c7a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000c82:	f005 ffa3 	bl	8006bcc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000c86:	f7ff fc25 	bl	80004d4 <main>

08000c8a <LoopForever>:

LoopForever:
    b LoopForever
 8000c8a:	e7fe      	b.n	8000c8a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000c8c:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000c90:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c94:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000c98:	08006ee0 	.word	0x08006ee0
  ldr r2, =_sbss
 8000c9c:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000ca0:	20001bd0 	.word	0x20001bd0

08000ca4 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000ca4:	e7fe      	b.n	8000ca4 <ADC1_IRQHandler>

08000ca6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ca6:	b580      	push	{r7, lr}
 8000ca8:	b082      	sub	sp, #8
 8000caa:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000cac:	2300      	movs	r3, #0
 8000cae:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cb0:	2003      	movs	r0, #3
 8000cb2:	f000 f8de 	bl	8000e72 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000cb6:	200f      	movs	r0, #15
 8000cb8:	f7ff ff20 	bl	8000afc <HAL_InitTick>
 8000cbc:	4603      	mov	r3, r0
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d002      	beq.n	8000cc8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000cc2:	2301      	movs	r3, #1
 8000cc4:	71fb      	strb	r3, [r7, #7]
 8000cc6:	e001      	b.n	8000ccc <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000cc8:	f7ff fe20 	bl	800090c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000ccc:	79fb      	ldrb	r3, [r7, #7]
}
 8000cce:	4618      	mov	r0, r3
 8000cd0:	3708      	adds	r7, #8
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	bd80      	pop	{r7, pc}
	...

08000cd8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000cdc:	4b06      	ldr	r3, [pc, #24]	; (8000cf8 <HAL_IncTick+0x20>)
 8000cde:	781b      	ldrb	r3, [r3, #0]
 8000ce0:	461a      	mov	r2, r3
 8000ce2:	4b06      	ldr	r3, [pc, #24]	; (8000cfc <HAL_IncTick+0x24>)
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	4413      	add	r3, r2
 8000ce8:	4a04      	ldr	r2, [pc, #16]	; (8000cfc <HAL_IncTick+0x24>)
 8000cea:	6013      	str	r3, [r2, #0]
}
 8000cec:	bf00      	nop
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf4:	4770      	bx	lr
 8000cf6:	bf00      	nop
 8000cf8:	20000008 	.word	0x20000008
 8000cfc:	200001fc 	.word	0x200001fc

08000d00 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d00:	b480      	push	{r7}
 8000d02:	af00      	add	r7, sp, #0
  return uwTick;
 8000d04:	4b03      	ldr	r3, [pc, #12]	; (8000d14 <HAL_GetTick+0x14>)
 8000d06:	681b      	ldr	r3, [r3, #0]
}
 8000d08:	4618      	mov	r0, r3
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d10:	4770      	bx	lr
 8000d12:	bf00      	nop
 8000d14:	200001fc 	.word	0x200001fc

08000d18 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	b085      	sub	sp, #20
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	f003 0307 	and.w	r3, r3, #7
 8000d26:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d28:	4b0c      	ldr	r3, [pc, #48]	; (8000d5c <__NVIC_SetPriorityGrouping+0x44>)
 8000d2a:	68db      	ldr	r3, [r3, #12]
 8000d2c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d2e:	68ba      	ldr	r2, [r7, #8]
 8000d30:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d34:	4013      	ands	r3, r2
 8000d36:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d38:	68fb      	ldr	r3, [r7, #12]
 8000d3a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d3c:	68bb      	ldr	r3, [r7, #8]
 8000d3e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d40:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d44:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d48:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d4a:	4a04      	ldr	r2, [pc, #16]	; (8000d5c <__NVIC_SetPriorityGrouping+0x44>)
 8000d4c:	68bb      	ldr	r3, [r7, #8]
 8000d4e:	60d3      	str	r3, [r2, #12]
}
 8000d50:	bf00      	nop
 8000d52:	3714      	adds	r7, #20
 8000d54:	46bd      	mov	sp, r7
 8000d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5a:	4770      	bx	lr
 8000d5c:	e000ed00 	.word	0xe000ed00

08000d60 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d60:	b480      	push	{r7}
 8000d62:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d64:	4b04      	ldr	r3, [pc, #16]	; (8000d78 <__NVIC_GetPriorityGrouping+0x18>)
 8000d66:	68db      	ldr	r3, [r3, #12]
 8000d68:	0a1b      	lsrs	r3, r3, #8
 8000d6a:	f003 0307 	and.w	r3, r3, #7
}
 8000d6e:	4618      	mov	r0, r3
 8000d70:	46bd      	mov	sp, r7
 8000d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d76:	4770      	bx	lr
 8000d78:	e000ed00 	.word	0xe000ed00

08000d7c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	b083      	sub	sp, #12
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	4603      	mov	r3, r0
 8000d84:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	db0b      	blt.n	8000da6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d8e:	79fb      	ldrb	r3, [r7, #7]
 8000d90:	f003 021f 	and.w	r2, r3, #31
 8000d94:	4907      	ldr	r1, [pc, #28]	; (8000db4 <__NVIC_EnableIRQ+0x38>)
 8000d96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d9a:	095b      	lsrs	r3, r3, #5
 8000d9c:	2001      	movs	r0, #1
 8000d9e:	fa00 f202 	lsl.w	r2, r0, r2
 8000da2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000da6:	bf00      	nop
 8000da8:	370c      	adds	r7, #12
 8000daa:	46bd      	mov	sp, r7
 8000dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db0:	4770      	bx	lr
 8000db2:	bf00      	nop
 8000db4:	e000e100 	.word	0xe000e100

08000db8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000db8:	b480      	push	{r7}
 8000dba:	b083      	sub	sp, #12
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	6039      	str	r1, [r7, #0]
 8000dc2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dc4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	db0a      	blt.n	8000de2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dcc:	683b      	ldr	r3, [r7, #0]
 8000dce:	b2da      	uxtb	r2, r3
 8000dd0:	490c      	ldr	r1, [pc, #48]	; (8000e04 <__NVIC_SetPriority+0x4c>)
 8000dd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dd6:	0112      	lsls	r2, r2, #4
 8000dd8:	b2d2      	uxtb	r2, r2
 8000dda:	440b      	add	r3, r1
 8000ddc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000de0:	e00a      	b.n	8000df8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000de2:	683b      	ldr	r3, [r7, #0]
 8000de4:	b2da      	uxtb	r2, r3
 8000de6:	4908      	ldr	r1, [pc, #32]	; (8000e08 <__NVIC_SetPriority+0x50>)
 8000de8:	79fb      	ldrb	r3, [r7, #7]
 8000dea:	f003 030f 	and.w	r3, r3, #15
 8000dee:	3b04      	subs	r3, #4
 8000df0:	0112      	lsls	r2, r2, #4
 8000df2:	b2d2      	uxtb	r2, r2
 8000df4:	440b      	add	r3, r1
 8000df6:	761a      	strb	r2, [r3, #24]
}
 8000df8:	bf00      	nop
 8000dfa:	370c      	adds	r7, #12
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e02:	4770      	bx	lr
 8000e04:	e000e100 	.word	0xe000e100
 8000e08:	e000ed00 	.word	0xe000ed00

08000e0c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	b089      	sub	sp, #36	; 0x24
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	60f8      	str	r0, [r7, #12]
 8000e14:	60b9      	str	r1, [r7, #8]
 8000e16:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e18:	68fb      	ldr	r3, [r7, #12]
 8000e1a:	f003 0307 	and.w	r3, r3, #7
 8000e1e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e20:	69fb      	ldr	r3, [r7, #28]
 8000e22:	f1c3 0307 	rsb	r3, r3, #7
 8000e26:	2b04      	cmp	r3, #4
 8000e28:	bf28      	it	cs
 8000e2a:	2304      	movcs	r3, #4
 8000e2c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e2e:	69fb      	ldr	r3, [r7, #28]
 8000e30:	3304      	adds	r3, #4
 8000e32:	2b06      	cmp	r3, #6
 8000e34:	d902      	bls.n	8000e3c <NVIC_EncodePriority+0x30>
 8000e36:	69fb      	ldr	r3, [r7, #28]
 8000e38:	3b03      	subs	r3, #3
 8000e3a:	e000      	b.n	8000e3e <NVIC_EncodePriority+0x32>
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e40:	f04f 32ff 	mov.w	r2, #4294967295
 8000e44:	69bb      	ldr	r3, [r7, #24]
 8000e46:	fa02 f303 	lsl.w	r3, r2, r3
 8000e4a:	43da      	mvns	r2, r3
 8000e4c:	68bb      	ldr	r3, [r7, #8]
 8000e4e:	401a      	ands	r2, r3
 8000e50:	697b      	ldr	r3, [r7, #20]
 8000e52:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e54:	f04f 31ff 	mov.w	r1, #4294967295
 8000e58:	697b      	ldr	r3, [r7, #20]
 8000e5a:	fa01 f303 	lsl.w	r3, r1, r3
 8000e5e:	43d9      	mvns	r1, r3
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e64:	4313      	orrs	r3, r2
         );
}
 8000e66:	4618      	mov	r0, r3
 8000e68:	3724      	adds	r7, #36	; 0x24
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e70:	4770      	bx	lr

08000e72 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e72:	b580      	push	{r7, lr}
 8000e74:	b082      	sub	sp, #8
 8000e76:	af00      	add	r7, sp, #0
 8000e78:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e7a:	6878      	ldr	r0, [r7, #4]
 8000e7c:	f7ff ff4c 	bl	8000d18 <__NVIC_SetPriorityGrouping>
}
 8000e80:	bf00      	nop
 8000e82:	3708      	adds	r7, #8
 8000e84:	46bd      	mov	sp, r7
 8000e86:	bd80      	pop	{r7, pc}

08000e88 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b086      	sub	sp, #24
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	4603      	mov	r3, r0
 8000e90:	60b9      	str	r1, [r7, #8]
 8000e92:	607a      	str	r2, [r7, #4]
 8000e94:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000e96:	2300      	movs	r3, #0
 8000e98:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000e9a:	f7ff ff61 	bl	8000d60 <__NVIC_GetPriorityGrouping>
 8000e9e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ea0:	687a      	ldr	r2, [r7, #4]
 8000ea2:	68b9      	ldr	r1, [r7, #8]
 8000ea4:	6978      	ldr	r0, [r7, #20]
 8000ea6:	f7ff ffb1 	bl	8000e0c <NVIC_EncodePriority>
 8000eaa:	4602      	mov	r2, r0
 8000eac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000eb0:	4611      	mov	r1, r2
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	f7ff ff80 	bl	8000db8 <__NVIC_SetPriority>
}
 8000eb8:	bf00      	nop
 8000eba:	3718      	adds	r7, #24
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	bd80      	pop	{r7, pc}

08000ec0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b082      	sub	sp, #8
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000eca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ece:	4618      	mov	r0, r3
 8000ed0:	f7ff ff54 	bl	8000d7c <__NVIC_EnableIRQ>
}
 8000ed4:	bf00      	nop
 8000ed6:	3708      	adds	r7, #8
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	bd80      	pop	{r7, pc}

08000edc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000edc:	b480      	push	{r7}
 8000ede:	b087      	sub	sp, #28
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]
 8000ee4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000eea:	e148      	b.n	800117e <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000eec:	683b      	ldr	r3, [r7, #0]
 8000eee:	681a      	ldr	r2, [r3, #0]
 8000ef0:	2101      	movs	r1, #1
 8000ef2:	697b      	ldr	r3, [r7, #20]
 8000ef4:	fa01 f303 	lsl.w	r3, r1, r3
 8000ef8:	4013      	ands	r3, r2
 8000efa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000efc:	68fb      	ldr	r3, [r7, #12]
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	f000 813a 	beq.w	8001178 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000f04:	683b      	ldr	r3, [r7, #0]
 8000f06:	685b      	ldr	r3, [r3, #4]
 8000f08:	f003 0303 	and.w	r3, r3, #3
 8000f0c:	2b01      	cmp	r3, #1
 8000f0e:	d005      	beq.n	8000f1c <HAL_GPIO_Init+0x40>
 8000f10:	683b      	ldr	r3, [r7, #0]
 8000f12:	685b      	ldr	r3, [r3, #4]
 8000f14:	f003 0303 	and.w	r3, r3, #3
 8000f18:	2b02      	cmp	r3, #2
 8000f1a:	d130      	bne.n	8000f7e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	689b      	ldr	r3, [r3, #8]
 8000f20:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000f22:	697b      	ldr	r3, [r7, #20]
 8000f24:	005b      	lsls	r3, r3, #1
 8000f26:	2203      	movs	r2, #3
 8000f28:	fa02 f303 	lsl.w	r3, r2, r3
 8000f2c:	43db      	mvns	r3, r3
 8000f2e:	693a      	ldr	r2, [r7, #16]
 8000f30:	4013      	ands	r3, r2
 8000f32:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000f34:	683b      	ldr	r3, [r7, #0]
 8000f36:	68da      	ldr	r2, [r3, #12]
 8000f38:	697b      	ldr	r3, [r7, #20]
 8000f3a:	005b      	lsls	r3, r3, #1
 8000f3c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f40:	693a      	ldr	r2, [r7, #16]
 8000f42:	4313      	orrs	r3, r2
 8000f44:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	693a      	ldr	r2, [r7, #16]
 8000f4a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	685b      	ldr	r3, [r3, #4]
 8000f50:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000f52:	2201      	movs	r2, #1
 8000f54:	697b      	ldr	r3, [r7, #20]
 8000f56:	fa02 f303 	lsl.w	r3, r2, r3
 8000f5a:	43db      	mvns	r3, r3
 8000f5c:	693a      	ldr	r2, [r7, #16]
 8000f5e:	4013      	ands	r3, r2
 8000f60:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f62:	683b      	ldr	r3, [r7, #0]
 8000f64:	685b      	ldr	r3, [r3, #4]
 8000f66:	091b      	lsrs	r3, r3, #4
 8000f68:	f003 0201 	and.w	r2, r3, #1
 8000f6c:	697b      	ldr	r3, [r7, #20]
 8000f6e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f72:	693a      	ldr	r2, [r7, #16]
 8000f74:	4313      	orrs	r3, r2
 8000f76:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	693a      	ldr	r2, [r7, #16]
 8000f7c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f7e:	683b      	ldr	r3, [r7, #0]
 8000f80:	685b      	ldr	r3, [r3, #4]
 8000f82:	f003 0303 	and.w	r3, r3, #3
 8000f86:	2b03      	cmp	r3, #3
 8000f88:	d017      	beq.n	8000fba <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	68db      	ldr	r3, [r3, #12]
 8000f8e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000f90:	697b      	ldr	r3, [r7, #20]
 8000f92:	005b      	lsls	r3, r3, #1
 8000f94:	2203      	movs	r2, #3
 8000f96:	fa02 f303 	lsl.w	r3, r2, r3
 8000f9a:	43db      	mvns	r3, r3
 8000f9c:	693a      	ldr	r2, [r7, #16]
 8000f9e:	4013      	ands	r3, r2
 8000fa0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000fa2:	683b      	ldr	r3, [r7, #0]
 8000fa4:	689a      	ldr	r2, [r3, #8]
 8000fa6:	697b      	ldr	r3, [r7, #20]
 8000fa8:	005b      	lsls	r3, r3, #1
 8000faa:	fa02 f303 	lsl.w	r3, r2, r3
 8000fae:	693a      	ldr	r2, [r7, #16]
 8000fb0:	4313      	orrs	r3, r2
 8000fb2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	693a      	ldr	r2, [r7, #16]
 8000fb8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000fba:	683b      	ldr	r3, [r7, #0]
 8000fbc:	685b      	ldr	r3, [r3, #4]
 8000fbe:	f003 0303 	and.w	r3, r3, #3
 8000fc2:	2b02      	cmp	r3, #2
 8000fc4:	d123      	bne.n	800100e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000fc6:	697b      	ldr	r3, [r7, #20]
 8000fc8:	08da      	lsrs	r2, r3, #3
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	3208      	adds	r2, #8
 8000fce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000fd2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000fd4:	697b      	ldr	r3, [r7, #20]
 8000fd6:	f003 0307 	and.w	r3, r3, #7
 8000fda:	009b      	lsls	r3, r3, #2
 8000fdc:	220f      	movs	r2, #15
 8000fde:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe2:	43db      	mvns	r3, r3
 8000fe4:	693a      	ldr	r2, [r7, #16]
 8000fe6:	4013      	ands	r3, r2
 8000fe8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000fea:	683b      	ldr	r3, [r7, #0]
 8000fec:	691a      	ldr	r2, [r3, #16]
 8000fee:	697b      	ldr	r3, [r7, #20]
 8000ff0:	f003 0307 	and.w	r3, r3, #7
 8000ff4:	009b      	lsls	r3, r3, #2
 8000ff6:	fa02 f303 	lsl.w	r3, r2, r3
 8000ffa:	693a      	ldr	r2, [r7, #16]
 8000ffc:	4313      	orrs	r3, r2
 8000ffe:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001000:	697b      	ldr	r3, [r7, #20]
 8001002:	08da      	lsrs	r2, r3, #3
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	3208      	adds	r2, #8
 8001008:	6939      	ldr	r1, [r7, #16]
 800100a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001014:	697b      	ldr	r3, [r7, #20]
 8001016:	005b      	lsls	r3, r3, #1
 8001018:	2203      	movs	r2, #3
 800101a:	fa02 f303 	lsl.w	r3, r2, r3
 800101e:	43db      	mvns	r3, r3
 8001020:	693a      	ldr	r2, [r7, #16]
 8001022:	4013      	ands	r3, r2
 8001024:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001026:	683b      	ldr	r3, [r7, #0]
 8001028:	685b      	ldr	r3, [r3, #4]
 800102a:	f003 0203 	and.w	r2, r3, #3
 800102e:	697b      	ldr	r3, [r7, #20]
 8001030:	005b      	lsls	r3, r3, #1
 8001032:	fa02 f303 	lsl.w	r3, r2, r3
 8001036:	693a      	ldr	r2, [r7, #16]
 8001038:	4313      	orrs	r3, r2
 800103a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	693a      	ldr	r2, [r7, #16]
 8001040:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001042:	683b      	ldr	r3, [r7, #0]
 8001044:	685b      	ldr	r3, [r3, #4]
 8001046:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800104a:	2b00      	cmp	r3, #0
 800104c:	f000 8094 	beq.w	8001178 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001050:	4b52      	ldr	r3, [pc, #328]	; (800119c <HAL_GPIO_Init+0x2c0>)
 8001052:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001054:	4a51      	ldr	r2, [pc, #324]	; (800119c <HAL_GPIO_Init+0x2c0>)
 8001056:	f043 0301 	orr.w	r3, r3, #1
 800105a:	6613      	str	r3, [r2, #96]	; 0x60
 800105c:	4b4f      	ldr	r3, [pc, #316]	; (800119c <HAL_GPIO_Init+0x2c0>)
 800105e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001060:	f003 0301 	and.w	r3, r3, #1
 8001064:	60bb      	str	r3, [r7, #8]
 8001066:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001068:	4a4d      	ldr	r2, [pc, #308]	; (80011a0 <HAL_GPIO_Init+0x2c4>)
 800106a:	697b      	ldr	r3, [r7, #20]
 800106c:	089b      	lsrs	r3, r3, #2
 800106e:	3302      	adds	r3, #2
 8001070:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001074:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001076:	697b      	ldr	r3, [r7, #20]
 8001078:	f003 0303 	and.w	r3, r3, #3
 800107c:	009b      	lsls	r3, r3, #2
 800107e:	220f      	movs	r2, #15
 8001080:	fa02 f303 	lsl.w	r3, r2, r3
 8001084:	43db      	mvns	r3, r3
 8001086:	693a      	ldr	r2, [r7, #16]
 8001088:	4013      	ands	r3, r2
 800108a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001092:	d00d      	beq.n	80010b0 <HAL_GPIO_Init+0x1d4>
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	4a43      	ldr	r2, [pc, #268]	; (80011a4 <HAL_GPIO_Init+0x2c8>)
 8001098:	4293      	cmp	r3, r2
 800109a:	d007      	beq.n	80010ac <HAL_GPIO_Init+0x1d0>
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	4a42      	ldr	r2, [pc, #264]	; (80011a8 <HAL_GPIO_Init+0x2cc>)
 80010a0:	4293      	cmp	r3, r2
 80010a2:	d101      	bne.n	80010a8 <HAL_GPIO_Init+0x1cc>
 80010a4:	2302      	movs	r3, #2
 80010a6:	e004      	b.n	80010b2 <HAL_GPIO_Init+0x1d6>
 80010a8:	2307      	movs	r3, #7
 80010aa:	e002      	b.n	80010b2 <HAL_GPIO_Init+0x1d6>
 80010ac:	2301      	movs	r3, #1
 80010ae:	e000      	b.n	80010b2 <HAL_GPIO_Init+0x1d6>
 80010b0:	2300      	movs	r3, #0
 80010b2:	697a      	ldr	r2, [r7, #20]
 80010b4:	f002 0203 	and.w	r2, r2, #3
 80010b8:	0092      	lsls	r2, r2, #2
 80010ba:	4093      	lsls	r3, r2
 80010bc:	693a      	ldr	r2, [r7, #16]
 80010be:	4313      	orrs	r3, r2
 80010c0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80010c2:	4937      	ldr	r1, [pc, #220]	; (80011a0 <HAL_GPIO_Init+0x2c4>)
 80010c4:	697b      	ldr	r3, [r7, #20]
 80010c6:	089b      	lsrs	r3, r3, #2
 80010c8:	3302      	adds	r3, #2
 80010ca:	693a      	ldr	r2, [r7, #16]
 80010cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80010d0:	4b36      	ldr	r3, [pc, #216]	; (80011ac <HAL_GPIO_Init+0x2d0>)
 80010d2:	689b      	ldr	r3, [r3, #8]
 80010d4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010d6:	68fb      	ldr	r3, [r7, #12]
 80010d8:	43db      	mvns	r3, r3
 80010da:	693a      	ldr	r2, [r7, #16]
 80010dc:	4013      	ands	r3, r2
 80010de:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80010e0:	683b      	ldr	r3, [r7, #0]
 80010e2:	685b      	ldr	r3, [r3, #4]
 80010e4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d003      	beq.n	80010f4 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 80010ec:	693a      	ldr	r2, [r7, #16]
 80010ee:	68fb      	ldr	r3, [r7, #12]
 80010f0:	4313      	orrs	r3, r2
 80010f2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80010f4:	4a2d      	ldr	r2, [pc, #180]	; (80011ac <HAL_GPIO_Init+0x2d0>)
 80010f6:	693b      	ldr	r3, [r7, #16]
 80010f8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80010fa:	4b2c      	ldr	r3, [pc, #176]	; (80011ac <HAL_GPIO_Init+0x2d0>)
 80010fc:	68db      	ldr	r3, [r3, #12]
 80010fe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001100:	68fb      	ldr	r3, [r7, #12]
 8001102:	43db      	mvns	r3, r3
 8001104:	693a      	ldr	r2, [r7, #16]
 8001106:	4013      	ands	r3, r2
 8001108:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800110a:	683b      	ldr	r3, [r7, #0]
 800110c:	685b      	ldr	r3, [r3, #4]
 800110e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001112:	2b00      	cmp	r3, #0
 8001114:	d003      	beq.n	800111e <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8001116:	693a      	ldr	r2, [r7, #16]
 8001118:	68fb      	ldr	r3, [r7, #12]
 800111a:	4313      	orrs	r3, r2
 800111c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800111e:	4a23      	ldr	r2, [pc, #140]	; (80011ac <HAL_GPIO_Init+0x2d0>)
 8001120:	693b      	ldr	r3, [r7, #16]
 8001122:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001124:	4b21      	ldr	r3, [pc, #132]	; (80011ac <HAL_GPIO_Init+0x2d0>)
 8001126:	685b      	ldr	r3, [r3, #4]
 8001128:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800112a:	68fb      	ldr	r3, [r7, #12]
 800112c:	43db      	mvns	r3, r3
 800112e:	693a      	ldr	r2, [r7, #16]
 8001130:	4013      	ands	r3, r2
 8001132:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001134:	683b      	ldr	r3, [r7, #0]
 8001136:	685b      	ldr	r3, [r3, #4]
 8001138:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800113c:	2b00      	cmp	r3, #0
 800113e:	d003      	beq.n	8001148 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8001140:	693a      	ldr	r2, [r7, #16]
 8001142:	68fb      	ldr	r3, [r7, #12]
 8001144:	4313      	orrs	r3, r2
 8001146:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001148:	4a18      	ldr	r2, [pc, #96]	; (80011ac <HAL_GPIO_Init+0x2d0>)
 800114a:	693b      	ldr	r3, [r7, #16]
 800114c:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800114e:	4b17      	ldr	r3, [pc, #92]	; (80011ac <HAL_GPIO_Init+0x2d0>)
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	43db      	mvns	r3, r3
 8001158:	693a      	ldr	r2, [r7, #16]
 800115a:	4013      	ands	r3, r2
 800115c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800115e:	683b      	ldr	r3, [r7, #0]
 8001160:	685b      	ldr	r3, [r3, #4]
 8001162:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001166:	2b00      	cmp	r3, #0
 8001168:	d003      	beq.n	8001172 <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 800116a:	693a      	ldr	r2, [r7, #16]
 800116c:	68fb      	ldr	r3, [r7, #12]
 800116e:	4313      	orrs	r3, r2
 8001170:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001172:	4a0e      	ldr	r2, [pc, #56]	; (80011ac <HAL_GPIO_Init+0x2d0>)
 8001174:	693b      	ldr	r3, [r7, #16]
 8001176:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001178:	697b      	ldr	r3, [r7, #20]
 800117a:	3301      	adds	r3, #1
 800117c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800117e:	683b      	ldr	r3, [r7, #0]
 8001180:	681a      	ldr	r2, [r3, #0]
 8001182:	697b      	ldr	r3, [r7, #20]
 8001184:	fa22 f303 	lsr.w	r3, r2, r3
 8001188:	2b00      	cmp	r3, #0
 800118a:	f47f aeaf 	bne.w	8000eec <HAL_GPIO_Init+0x10>
  }
}
 800118e:	bf00      	nop
 8001190:	bf00      	nop
 8001192:	371c      	adds	r7, #28
 8001194:	46bd      	mov	sp, r7
 8001196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119a:	4770      	bx	lr
 800119c:	40021000 	.word	0x40021000
 80011a0:	40010000 	.word	0x40010000
 80011a4:	48000400 	.word	0x48000400
 80011a8:	48000800 	.word	0x48000800
 80011ac:	40010400 	.word	0x40010400

080011b0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80011b0:	b480      	push	{r7}
 80011b2:	b083      	sub	sp, #12
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
 80011b8:	460b      	mov	r3, r1
 80011ba:	807b      	strh	r3, [r7, #2]
 80011bc:	4613      	mov	r3, r2
 80011be:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80011c0:	787b      	ldrb	r3, [r7, #1]
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d003      	beq.n	80011ce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80011c6:	887a      	ldrh	r2, [r7, #2]
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80011cc:	e002      	b.n	80011d4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80011ce:	887a      	ldrh	r2, [r7, #2]
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80011d4:	bf00      	nop
 80011d6:	370c      	adds	r7, #12
 80011d8:	46bd      	mov	sp, r7
 80011da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011de:	4770      	bx	lr

080011e0 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80011e0:	b480      	push	{r7}
 80011e2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80011e4:	4b05      	ldr	r3, [pc, #20]	; (80011fc <HAL_PWR_EnableBkUpAccess+0x1c>)
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	4a04      	ldr	r2, [pc, #16]	; (80011fc <HAL_PWR_EnableBkUpAccess+0x1c>)
 80011ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011ee:	6013      	str	r3, [r2, #0]
}
 80011f0:	bf00      	nop
 80011f2:	46bd      	mov	sp, r7
 80011f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f8:	4770      	bx	lr
 80011fa:	bf00      	nop
 80011fc:	40007000 	.word	0x40007000

08001200 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001200:	b480      	push	{r7}
 8001202:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001204:	4b04      	ldr	r3, [pc, #16]	; (8001218 <HAL_PWREx_GetVoltageRange+0x18>)
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 800120c:	4618      	mov	r0, r3
 800120e:	46bd      	mov	sp, r7
 8001210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001214:	4770      	bx	lr
 8001216:	bf00      	nop
 8001218:	40007000 	.word	0x40007000

0800121c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800121c:	b480      	push	{r7}
 800121e:	b085      	sub	sp, #20
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800122a:	d130      	bne.n	800128e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800122c:	4b23      	ldr	r3, [pc, #140]	; (80012bc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001234:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001238:	d038      	beq.n	80012ac <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800123a:	4b20      	ldr	r3, [pc, #128]	; (80012bc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001242:	4a1e      	ldr	r2, [pc, #120]	; (80012bc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001244:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001248:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800124a:	4b1d      	ldr	r3, [pc, #116]	; (80012c0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	2232      	movs	r2, #50	; 0x32
 8001250:	fb02 f303 	mul.w	r3, r2, r3
 8001254:	4a1b      	ldr	r2, [pc, #108]	; (80012c4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001256:	fba2 2303 	umull	r2, r3, r2, r3
 800125a:	0c9b      	lsrs	r3, r3, #18
 800125c:	3301      	adds	r3, #1
 800125e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001260:	e002      	b.n	8001268 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001262:	68fb      	ldr	r3, [r7, #12]
 8001264:	3b01      	subs	r3, #1
 8001266:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001268:	4b14      	ldr	r3, [pc, #80]	; (80012bc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800126a:	695b      	ldr	r3, [r3, #20]
 800126c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001270:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001274:	d102      	bne.n	800127c <HAL_PWREx_ControlVoltageScaling+0x60>
 8001276:	68fb      	ldr	r3, [r7, #12]
 8001278:	2b00      	cmp	r3, #0
 800127a:	d1f2      	bne.n	8001262 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800127c:	4b0f      	ldr	r3, [pc, #60]	; (80012bc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800127e:	695b      	ldr	r3, [r3, #20]
 8001280:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001284:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001288:	d110      	bne.n	80012ac <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800128a:	2303      	movs	r3, #3
 800128c:	e00f      	b.n	80012ae <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800128e:	4b0b      	ldr	r3, [pc, #44]	; (80012bc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001296:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800129a:	d007      	beq.n	80012ac <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800129c:	4b07      	ldr	r3, [pc, #28]	; (80012bc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80012a4:	4a05      	ldr	r2, [pc, #20]	; (80012bc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80012a6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80012aa:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80012ac:	2300      	movs	r3, #0
}
 80012ae:	4618      	mov	r0, r3
 80012b0:	3714      	adds	r7, #20
 80012b2:	46bd      	mov	sp, r7
 80012b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b8:	4770      	bx	lr
 80012ba:	bf00      	nop
 80012bc:	40007000 	.word	0x40007000
 80012c0:	20000000 	.word	0x20000000
 80012c4:	431bde83 	.word	0x431bde83

080012c8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b088      	sub	sp, #32
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d102      	bne.n	80012dc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80012d6:	2301      	movs	r3, #1
 80012d8:	f000 bc02 	b.w	8001ae0 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80012dc:	4b96      	ldr	r3, [pc, #600]	; (8001538 <HAL_RCC_OscConfig+0x270>)
 80012de:	689b      	ldr	r3, [r3, #8]
 80012e0:	f003 030c 	and.w	r3, r3, #12
 80012e4:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80012e6:	4b94      	ldr	r3, [pc, #592]	; (8001538 <HAL_RCC_OscConfig+0x270>)
 80012e8:	68db      	ldr	r3, [r3, #12]
 80012ea:	f003 0303 	and.w	r3, r3, #3
 80012ee:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	f003 0310 	and.w	r3, r3, #16
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	f000 80e4 	beq.w	80014c6 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80012fe:	69bb      	ldr	r3, [r7, #24]
 8001300:	2b00      	cmp	r3, #0
 8001302:	d007      	beq.n	8001314 <HAL_RCC_OscConfig+0x4c>
 8001304:	69bb      	ldr	r3, [r7, #24]
 8001306:	2b0c      	cmp	r3, #12
 8001308:	f040 808b 	bne.w	8001422 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800130c:	697b      	ldr	r3, [r7, #20]
 800130e:	2b01      	cmp	r3, #1
 8001310:	f040 8087 	bne.w	8001422 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001314:	4b88      	ldr	r3, [pc, #544]	; (8001538 <HAL_RCC_OscConfig+0x270>)
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	f003 0302 	and.w	r3, r3, #2
 800131c:	2b00      	cmp	r3, #0
 800131e:	d005      	beq.n	800132c <HAL_RCC_OscConfig+0x64>
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	699b      	ldr	r3, [r3, #24]
 8001324:	2b00      	cmp	r3, #0
 8001326:	d101      	bne.n	800132c <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8001328:	2301      	movs	r3, #1
 800132a:	e3d9      	b.n	8001ae0 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	6a1a      	ldr	r2, [r3, #32]
 8001330:	4b81      	ldr	r3, [pc, #516]	; (8001538 <HAL_RCC_OscConfig+0x270>)
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	f003 0308 	and.w	r3, r3, #8
 8001338:	2b00      	cmp	r3, #0
 800133a:	d004      	beq.n	8001346 <HAL_RCC_OscConfig+0x7e>
 800133c:	4b7e      	ldr	r3, [pc, #504]	; (8001538 <HAL_RCC_OscConfig+0x270>)
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001344:	e005      	b.n	8001352 <HAL_RCC_OscConfig+0x8a>
 8001346:	4b7c      	ldr	r3, [pc, #496]	; (8001538 <HAL_RCC_OscConfig+0x270>)
 8001348:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800134c:	091b      	lsrs	r3, r3, #4
 800134e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001352:	4293      	cmp	r3, r2
 8001354:	d223      	bcs.n	800139e <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	6a1b      	ldr	r3, [r3, #32]
 800135a:	4618      	mov	r0, r3
 800135c:	f000 fdbe 	bl	8001edc <RCC_SetFlashLatencyFromMSIRange>
 8001360:	4603      	mov	r3, r0
 8001362:	2b00      	cmp	r3, #0
 8001364:	d001      	beq.n	800136a <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8001366:	2301      	movs	r3, #1
 8001368:	e3ba      	b.n	8001ae0 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800136a:	4b73      	ldr	r3, [pc, #460]	; (8001538 <HAL_RCC_OscConfig+0x270>)
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	4a72      	ldr	r2, [pc, #456]	; (8001538 <HAL_RCC_OscConfig+0x270>)
 8001370:	f043 0308 	orr.w	r3, r3, #8
 8001374:	6013      	str	r3, [r2, #0]
 8001376:	4b70      	ldr	r3, [pc, #448]	; (8001538 <HAL_RCC_OscConfig+0x270>)
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	6a1b      	ldr	r3, [r3, #32]
 8001382:	496d      	ldr	r1, [pc, #436]	; (8001538 <HAL_RCC_OscConfig+0x270>)
 8001384:	4313      	orrs	r3, r2
 8001386:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001388:	4b6b      	ldr	r3, [pc, #428]	; (8001538 <HAL_RCC_OscConfig+0x270>)
 800138a:	685b      	ldr	r3, [r3, #4]
 800138c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	69db      	ldr	r3, [r3, #28]
 8001394:	021b      	lsls	r3, r3, #8
 8001396:	4968      	ldr	r1, [pc, #416]	; (8001538 <HAL_RCC_OscConfig+0x270>)
 8001398:	4313      	orrs	r3, r2
 800139a:	604b      	str	r3, [r1, #4]
 800139c:	e025      	b.n	80013ea <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800139e:	4b66      	ldr	r3, [pc, #408]	; (8001538 <HAL_RCC_OscConfig+0x270>)
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	4a65      	ldr	r2, [pc, #404]	; (8001538 <HAL_RCC_OscConfig+0x270>)
 80013a4:	f043 0308 	orr.w	r3, r3, #8
 80013a8:	6013      	str	r3, [r2, #0]
 80013aa:	4b63      	ldr	r3, [pc, #396]	; (8001538 <HAL_RCC_OscConfig+0x270>)
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	6a1b      	ldr	r3, [r3, #32]
 80013b6:	4960      	ldr	r1, [pc, #384]	; (8001538 <HAL_RCC_OscConfig+0x270>)
 80013b8:	4313      	orrs	r3, r2
 80013ba:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80013bc:	4b5e      	ldr	r3, [pc, #376]	; (8001538 <HAL_RCC_OscConfig+0x270>)
 80013be:	685b      	ldr	r3, [r3, #4]
 80013c0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	69db      	ldr	r3, [r3, #28]
 80013c8:	021b      	lsls	r3, r3, #8
 80013ca:	495b      	ldr	r1, [pc, #364]	; (8001538 <HAL_RCC_OscConfig+0x270>)
 80013cc:	4313      	orrs	r3, r2
 80013ce:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80013d0:	69bb      	ldr	r3, [r7, #24]
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d109      	bne.n	80013ea <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	6a1b      	ldr	r3, [r3, #32]
 80013da:	4618      	mov	r0, r3
 80013dc:	f000 fd7e 	bl	8001edc <RCC_SetFlashLatencyFromMSIRange>
 80013e0:	4603      	mov	r3, r0
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d001      	beq.n	80013ea <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80013e6:	2301      	movs	r3, #1
 80013e8:	e37a      	b.n	8001ae0 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80013ea:	f000 fc81 	bl	8001cf0 <HAL_RCC_GetSysClockFreq>
 80013ee:	4602      	mov	r2, r0
 80013f0:	4b51      	ldr	r3, [pc, #324]	; (8001538 <HAL_RCC_OscConfig+0x270>)
 80013f2:	689b      	ldr	r3, [r3, #8]
 80013f4:	091b      	lsrs	r3, r3, #4
 80013f6:	f003 030f 	and.w	r3, r3, #15
 80013fa:	4950      	ldr	r1, [pc, #320]	; (800153c <HAL_RCC_OscConfig+0x274>)
 80013fc:	5ccb      	ldrb	r3, [r1, r3]
 80013fe:	f003 031f 	and.w	r3, r3, #31
 8001402:	fa22 f303 	lsr.w	r3, r2, r3
 8001406:	4a4e      	ldr	r2, [pc, #312]	; (8001540 <HAL_RCC_OscConfig+0x278>)
 8001408:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800140a:	4b4e      	ldr	r3, [pc, #312]	; (8001544 <HAL_RCC_OscConfig+0x27c>)
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	4618      	mov	r0, r3
 8001410:	f7ff fb74 	bl	8000afc <HAL_InitTick>
 8001414:	4603      	mov	r3, r0
 8001416:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001418:	7bfb      	ldrb	r3, [r7, #15]
 800141a:	2b00      	cmp	r3, #0
 800141c:	d052      	beq.n	80014c4 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800141e:	7bfb      	ldrb	r3, [r7, #15]
 8001420:	e35e      	b.n	8001ae0 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	699b      	ldr	r3, [r3, #24]
 8001426:	2b00      	cmp	r3, #0
 8001428:	d032      	beq.n	8001490 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800142a:	4b43      	ldr	r3, [pc, #268]	; (8001538 <HAL_RCC_OscConfig+0x270>)
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	4a42      	ldr	r2, [pc, #264]	; (8001538 <HAL_RCC_OscConfig+0x270>)
 8001430:	f043 0301 	orr.w	r3, r3, #1
 8001434:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001436:	f7ff fc63 	bl	8000d00 <HAL_GetTick>
 800143a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800143c:	e008      	b.n	8001450 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800143e:	f7ff fc5f 	bl	8000d00 <HAL_GetTick>
 8001442:	4602      	mov	r2, r0
 8001444:	693b      	ldr	r3, [r7, #16]
 8001446:	1ad3      	subs	r3, r2, r3
 8001448:	2b02      	cmp	r3, #2
 800144a:	d901      	bls.n	8001450 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 800144c:	2303      	movs	r3, #3
 800144e:	e347      	b.n	8001ae0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001450:	4b39      	ldr	r3, [pc, #228]	; (8001538 <HAL_RCC_OscConfig+0x270>)
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	f003 0302 	and.w	r3, r3, #2
 8001458:	2b00      	cmp	r3, #0
 800145a:	d0f0      	beq.n	800143e <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800145c:	4b36      	ldr	r3, [pc, #216]	; (8001538 <HAL_RCC_OscConfig+0x270>)
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	4a35      	ldr	r2, [pc, #212]	; (8001538 <HAL_RCC_OscConfig+0x270>)
 8001462:	f043 0308 	orr.w	r3, r3, #8
 8001466:	6013      	str	r3, [r2, #0]
 8001468:	4b33      	ldr	r3, [pc, #204]	; (8001538 <HAL_RCC_OscConfig+0x270>)
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	6a1b      	ldr	r3, [r3, #32]
 8001474:	4930      	ldr	r1, [pc, #192]	; (8001538 <HAL_RCC_OscConfig+0x270>)
 8001476:	4313      	orrs	r3, r2
 8001478:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800147a:	4b2f      	ldr	r3, [pc, #188]	; (8001538 <HAL_RCC_OscConfig+0x270>)
 800147c:	685b      	ldr	r3, [r3, #4]
 800147e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	69db      	ldr	r3, [r3, #28]
 8001486:	021b      	lsls	r3, r3, #8
 8001488:	492b      	ldr	r1, [pc, #172]	; (8001538 <HAL_RCC_OscConfig+0x270>)
 800148a:	4313      	orrs	r3, r2
 800148c:	604b      	str	r3, [r1, #4]
 800148e:	e01a      	b.n	80014c6 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001490:	4b29      	ldr	r3, [pc, #164]	; (8001538 <HAL_RCC_OscConfig+0x270>)
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	4a28      	ldr	r2, [pc, #160]	; (8001538 <HAL_RCC_OscConfig+0x270>)
 8001496:	f023 0301 	bic.w	r3, r3, #1
 800149a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800149c:	f7ff fc30 	bl	8000d00 <HAL_GetTick>
 80014a0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80014a2:	e008      	b.n	80014b6 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80014a4:	f7ff fc2c 	bl	8000d00 <HAL_GetTick>
 80014a8:	4602      	mov	r2, r0
 80014aa:	693b      	ldr	r3, [r7, #16]
 80014ac:	1ad3      	subs	r3, r2, r3
 80014ae:	2b02      	cmp	r3, #2
 80014b0:	d901      	bls.n	80014b6 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80014b2:	2303      	movs	r3, #3
 80014b4:	e314      	b.n	8001ae0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80014b6:	4b20      	ldr	r3, [pc, #128]	; (8001538 <HAL_RCC_OscConfig+0x270>)
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	f003 0302 	and.w	r3, r3, #2
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d1f0      	bne.n	80014a4 <HAL_RCC_OscConfig+0x1dc>
 80014c2:	e000      	b.n	80014c6 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80014c4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	f003 0301 	and.w	r3, r3, #1
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d073      	beq.n	80015ba <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80014d2:	69bb      	ldr	r3, [r7, #24]
 80014d4:	2b08      	cmp	r3, #8
 80014d6:	d005      	beq.n	80014e4 <HAL_RCC_OscConfig+0x21c>
 80014d8:	69bb      	ldr	r3, [r7, #24]
 80014da:	2b0c      	cmp	r3, #12
 80014dc:	d10e      	bne.n	80014fc <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80014de:	697b      	ldr	r3, [r7, #20]
 80014e0:	2b03      	cmp	r3, #3
 80014e2:	d10b      	bne.n	80014fc <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014e4:	4b14      	ldr	r3, [pc, #80]	; (8001538 <HAL_RCC_OscConfig+0x270>)
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d063      	beq.n	80015b8 <HAL_RCC_OscConfig+0x2f0>
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	685b      	ldr	r3, [r3, #4]
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d15f      	bne.n	80015b8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80014f8:	2301      	movs	r3, #1
 80014fa:	e2f1      	b.n	8001ae0 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	685b      	ldr	r3, [r3, #4]
 8001500:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001504:	d106      	bne.n	8001514 <HAL_RCC_OscConfig+0x24c>
 8001506:	4b0c      	ldr	r3, [pc, #48]	; (8001538 <HAL_RCC_OscConfig+0x270>)
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	4a0b      	ldr	r2, [pc, #44]	; (8001538 <HAL_RCC_OscConfig+0x270>)
 800150c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001510:	6013      	str	r3, [r2, #0]
 8001512:	e025      	b.n	8001560 <HAL_RCC_OscConfig+0x298>
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	685b      	ldr	r3, [r3, #4]
 8001518:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800151c:	d114      	bne.n	8001548 <HAL_RCC_OscConfig+0x280>
 800151e:	4b06      	ldr	r3, [pc, #24]	; (8001538 <HAL_RCC_OscConfig+0x270>)
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	4a05      	ldr	r2, [pc, #20]	; (8001538 <HAL_RCC_OscConfig+0x270>)
 8001524:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001528:	6013      	str	r3, [r2, #0]
 800152a:	4b03      	ldr	r3, [pc, #12]	; (8001538 <HAL_RCC_OscConfig+0x270>)
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	4a02      	ldr	r2, [pc, #8]	; (8001538 <HAL_RCC_OscConfig+0x270>)
 8001530:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001534:	6013      	str	r3, [r2, #0]
 8001536:	e013      	b.n	8001560 <HAL_RCC_OscConfig+0x298>
 8001538:	40021000 	.word	0x40021000
 800153c:	08006e28 	.word	0x08006e28
 8001540:	20000000 	.word	0x20000000
 8001544:	20000004 	.word	0x20000004
 8001548:	4ba0      	ldr	r3, [pc, #640]	; (80017cc <HAL_RCC_OscConfig+0x504>)
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	4a9f      	ldr	r2, [pc, #636]	; (80017cc <HAL_RCC_OscConfig+0x504>)
 800154e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001552:	6013      	str	r3, [r2, #0]
 8001554:	4b9d      	ldr	r3, [pc, #628]	; (80017cc <HAL_RCC_OscConfig+0x504>)
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	4a9c      	ldr	r2, [pc, #624]	; (80017cc <HAL_RCC_OscConfig+0x504>)
 800155a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800155e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	685b      	ldr	r3, [r3, #4]
 8001564:	2b00      	cmp	r3, #0
 8001566:	d013      	beq.n	8001590 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001568:	f7ff fbca 	bl	8000d00 <HAL_GetTick>
 800156c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800156e:	e008      	b.n	8001582 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001570:	f7ff fbc6 	bl	8000d00 <HAL_GetTick>
 8001574:	4602      	mov	r2, r0
 8001576:	693b      	ldr	r3, [r7, #16]
 8001578:	1ad3      	subs	r3, r2, r3
 800157a:	2b64      	cmp	r3, #100	; 0x64
 800157c:	d901      	bls.n	8001582 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800157e:	2303      	movs	r3, #3
 8001580:	e2ae      	b.n	8001ae0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001582:	4b92      	ldr	r3, [pc, #584]	; (80017cc <HAL_RCC_OscConfig+0x504>)
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800158a:	2b00      	cmp	r3, #0
 800158c:	d0f0      	beq.n	8001570 <HAL_RCC_OscConfig+0x2a8>
 800158e:	e014      	b.n	80015ba <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001590:	f7ff fbb6 	bl	8000d00 <HAL_GetTick>
 8001594:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001596:	e008      	b.n	80015aa <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001598:	f7ff fbb2 	bl	8000d00 <HAL_GetTick>
 800159c:	4602      	mov	r2, r0
 800159e:	693b      	ldr	r3, [r7, #16]
 80015a0:	1ad3      	subs	r3, r2, r3
 80015a2:	2b64      	cmp	r3, #100	; 0x64
 80015a4:	d901      	bls.n	80015aa <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80015a6:	2303      	movs	r3, #3
 80015a8:	e29a      	b.n	8001ae0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80015aa:	4b88      	ldr	r3, [pc, #544]	; (80017cc <HAL_RCC_OscConfig+0x504>)
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d1f0      	bne.n	8001598 <HAL_RCC_OscConfig+0x2d0>
 80015b6:	e000      	b.n	80015ba <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	f003 0302 	and.w	r3, r3, #2
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d060      	beq.n	8001688 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80015c6:	69bb      	ldr	r3, [r7, #24]
 80015c8:	2b04      	cmp	r3, #4
 80015ca:	d005      	beq.n	80015d8 <HAL_RCC_OscConfig+0x310>
 80015cc:	69bb      	ldr	r3, [r7, #24]
 80015ce:	2b0c      	cmp	r3, #12
 80015d0:	d119      	bne.n	8001606 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80015d2:	697b      	ldr	r3, [r7, #20]
 80015d4:	2b02      	cmp	r3, #2
 80015d6:	d116      	bne.n	8001606 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80015d8:	4b7c      	ldr	r3, [pc, #496]	; (80017cc <HAL_RCC_OscConfig+0x504>)
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d005      	beq.n	80015f0 <HAL_RCC_OscConfig+0x328>
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	68db      	ldr	r3, [r3, #12]
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d101      	bne.n	80015f0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80015ec:	2301      	movs	r3, #1
 80015ee:	e277      	b.n	8001ae0 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015f0:	4b76      	ldr	r3, [pc, #472]	; (80017cc <HAL_RCC_OscConfig+0x504>)
 80015f2:	685b      	ldr	r3, [r3, #4]
 80015f4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	691b      	ldr	r3, [r3, #16]
 80015fc:	061b      	lsls	r3, r3, #24
 80015fe:	4973      	ldr	r1, [pc, #460]	; (80017cc <HAL_RCC_OscConfig+0x504>)
 8001600:	4313      	orrs	r3, r2
 8001602:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001604:	e040      	b.n	8001688 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	68db      	ldr	r3, [r3, #12]
 800160a:	2b00      	cmp	r3, #0
 800160c:	d023      	beq.n	8001656 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800160e:	4b6f      	ldr	r3, [pc, #444]	; (80017cc <HAL_RCC_OscConfig+0x504>)
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	4a6e      	ldr	r2, [pc, #440]	; (80017cc <HAL_RCC_OscConfig+0x504>)
 8001614:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001618:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800161a:	f7ff fb71 	bl	8000d00 <HAL_GetTick>
 800161e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001620:	e008      	b.n	8001634 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001622:	f7ff fb6d 	bl	8000d00 <HAL_GetTick>
 8001626:	4602      	mov	r2, r0
 8001628:	693b      	ldr	r3, [r7, #16]
 800162a:	1ad3      	subs	r3, r2, r3
 800162c:	2b02      	cmp	r3, #2
 800162e:	d901      	bls.n	8001634 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001630:	2303      	movs	r3, #3
 8001632:	e255      	b.n	8001ae0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001634:	4b65      	ldr	r3, [pc, #404]	; (80017cc <HAL_RCC_OscConfig+0x504>)
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800163c:	2b00      	cmp	r3, #0
 800163e:	d0f0      	beq.n	8001622 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001640:	4b62      	ldr	r3, [pc, #392]	; (80017cc <HAL_RCC_OscConfig+0x504>)
 8001642:	685b      	ldr	r3, [r3, #4]
 8001644:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	691b      	ldr	r3, [r3, #16]
 800164c:	061b      	lsls	r3, r3, #24
 800164e:	495f      	ldr	r1, [pc, #380]	; (80017cc <HAL_RCC_OscConfig+0x504>)
 8001650:	4313      	orrs	r3, r2
 8001652:	604b      	str	r3, [r1, #4]
 8001654:	e018      	b.n	8001688 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001656:	4b5d      	ldr	r3, [pc, #372]	; (80017cc <HAL_RCC_OscConfig+0x504>)
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	4a5c      	ldr	r2, [pc, #368]	; (80017cc <HAL_RCC_OscConfig+0x504>)
 800165c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001660:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001662:	f7ff fb4d 	bl	8000d00 <HAL_GetTick>
 8001666:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001668:	e008      	b.n	800167c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800166a:	f7ff fb49 	bl	8000d00 <HAL_GetTick>
 800166e:	4602      	mov	r2, r0
 8001670:	693b      	ldr	r3, [r7, #16]
 8001672:	1ad3      	subs	r3, r2, r3
 8001674:	2b02      	cmp	r3, #2
 8001676:	d901      	bls.n	800167c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001678:	2303      	movs	r3, #3
 800167a:	e231      	b.n	8001ae0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800167c:	4b53      	ldr	r3, [pc, #332]	; (80017cc <HAL_RCC_OscConfig+0x504>)
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001684:	2b00      	cmp	r3, #0
 8001686:	d1f0      	bne.n	800166a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	f003 0308 	and.w	r3, r3, #8
 8001690:	2b00      	cmp	r3, #0
 8001692:	d03c      	beq.n	800170e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	695b      	ldr	r3, [r3, #20]
 8001698:	2b00      	cmp	r3, #0
 800169a:	d01c      	beq.n	80016d6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800169c:	4b4b      	ldr	r3, [pc, #300]	; (80017cc <HAL_RCC_OscConfig+0x504>)
 800169e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80016a2:	4a4a      	ldr	r2, [pc, #296]	; (80017cc <HAL_RCC_OscConfig+0x504>)
 80016a4:	f043 0301 	orr.w	r3, r3, #1
 80016a8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016ac:	f7ff fb28 	bl	8000d00 <HAL_GetTick>
 80016b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80016b2:	e008      	b.n	80016c6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80016b4:	f7ff fb24 	bl	8000d00 <HAL_GetTick>
 80016b8:	4602      	mov	r2, r0
 80016ba:	693b      	ldr	r3, [r7, #16]
 80016bc:	1ad3      	subs	r3, r2, r3
 80016be:	2b02      	cmp	r3, #2
 80016c0:	d901      	bls.n	80016c6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80016c2:	2303      	movs	r3, #3
 80016c4:	e20c      	b.n	8001ae0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80016c6:	4b41      	ldr	r3, [pc, #260]	; (80017cc <HAL_RCC_OscConfig+0x504>)
 80016c8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80016cc:	f003 0302 	and.w	r3, r3, #2
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d0ef      	beq.n	80016b4 <HAL_RCC_OscConfig+0x3ec>
 80016d4:	e01b      	b.n	800170e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80016d6:	4b3d      	ldr	r3, [pc, #244]	; (80017cc <HAL_RCC_OscConfig+0x504>)
 80016d8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80016dc:	4a3b      	ldr	r2, [pc, #236]	; (80017cc <HAL_RCC_OscConfig+0x504>)
 80016de:	f023 0301 	bic.w	r3, r3, #1
 80016e2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016e6:	f7ff fb0b 	bl	8000d00 <HAL_GetTick>
 80016ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80016ec:	e008      	b.n	8001700 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80016ee:	f7ff fb07 	bl	8000d00 <HAL_GetTick>
 80016f2:	4602      	mov	r2, r0
 80016f4:	693b      	ldr	r3, [r7, #16]
 80016f6:	1ad3      	subs	r3, r2, r3
 80016f8:	2b02      	cmp	r3, #2
 80016fa:	d901      	bls.n	8001700 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80016fc:	2303      	movs	r3, #3
 80016fe:	e1ef      	b.n	8001ae0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001700:	4b32      	ldr	r3, [pc, #200]	; (80017cc <HAL_RCC_OscConfig+0x504>)
 8001702:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001706:	f003 0302 	and.w	r3, r3, #2
 800170a:	2b00      	cmp	r3, #0
 800170c:	d1ef      	bne.n	80016ee <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	f003 0304 	and.w	r3, r3, #4
 8001716:	2b00      	cmp	r3, #0
 8001718:	f000 80a6 	beq.w	8001868 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800171c:	2300      	movs	r3, #0
 800171e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001720:	4b2a      	ldr	r3, [pc, #168]	; (80017cc <HAL_RCC_OscConfig+0x504>)
 8001722:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001724:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001728:	2b00      	cmp	r3, #0
 800172a:	d10d      	bne.n	8001748 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800172c:	4b27      	ldr	r3, [pc, #156]	; (80017cc <HAL_RCC_OscConfig+0x504>)
 800172e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001730:	4a26      	ldr	r2, [pc, #152]	; (80017cc <HAL_RCC_OscConfig+0x504>)
 8001732:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001736:	6593      	str	r3, [r2, #88]	; 0x58
 8001738:	4b24      	ldr	r3, [pc, #144]	; (80017cc <HAL_RCC_OscConfig+0x504>)
 800173a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800173c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001740:	60bb      	str	r3, [r7, #8]
 8001742:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001744:	2301      	movs	r3, #1
 8001746:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001748:	4b21      	ldr	r3, [pc, #132]	; (80017d0 <HAL_RCC_OscConfig+0x508>)
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001750:	2b00      	cmp	r3, #0
 8001752:	d118      	bne.n	8001786 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001754:	4b1e      	ldr	r3, [pc, #120]	; (80017d0 <HAL_RCC_OscConfig+0x508>)
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	4a1d      	ldr	r2, [pc, #116]	; (80017d0 <HAL_RCC_OscConfig+0x508>)
 800175a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800175e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001760:	f7ff face 	bl	8000d00 <HAL_GetTick>
 8001764:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001766:	e008      	b.n	800177a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001768:	f7ff faca 	bl	8000d00 <HAL_GetTick>
 800176c:	4602      	mov	r2, r0
 800176e:	693b      	ldr	r3, [r7, #16]
 8001770:	1ad3      	subs	r3, r2, r3
 8001772:	2b02      	cmp	r3, #2
 8001774:	d901      	bls.n	800177a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001776:	2303      	movs	r3, #3
 8001778:	e1b2      	b.n	8001ae0 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800177a:	4b15      	ldr	r3, [pc, #84]	; (80017d0 <HAL_RCC_OscConfig+0x508>)
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001782:	2b00      	cmp	r3, #0
 8001784:	d0f0      	beq.n	8001768 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	689b      	ldr	r3, [r3, #8]
 800178a:	2b01      	cmp	r3, #1
 800178c:	d108      	bne.n	80017a0 <HAL_RCC_OscConfig+0x4d8>
 800178e:	4b0f      	ldr	r3, [pc, #60]	; (80017cc <HAL_RCC_OscConfig+0x504>)
 8001790:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001794:	4a0d      	ldr	r2, [pc, #52]	; (80017cc <HAL_RCC_OscConfig+0x504>)
 8001796:	f043 0301 	orr.w	r3, r3, #1
 800179a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800179e:	e029      	b.n	80017f4 <HAL_RCC_OscConfig+0x52c>
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	689b      	ldr	r3, [r3, #8]
 80017a4:	2b05      	cmp	r3, #5
 80017a6:	d115      	bne.n	80017d4 <HAL_RCC_OscConfig+0x50c>
 80017a8:	4b08      	ldr	r3, [pc, #32]	; (80017cc <HAL_RCC_OscConfig+0x504>)
 80017aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80017ae:	4a07      	ldr	r2, [pc, #28]	; (80017cc <HAL_RCC_OscConfig+0x504>)
 80017b0:	f043 0304 	orr.w	r3, r3, #4
 80017b4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80017b8:	4b04      	ldr	r3, [pc, #16]	; (80017cc <HAL_RCC_OscConfig+0x504>)
 80017ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80017be:	4a03      	ldr	r2, [pc, #12]	; (80017cc <HAL_RCC_OscConfig+0x504>)
 80017c0:	f043 0301 	orr.w	r3, r3, #1
 80017c4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80017c8:	e014      	b.n	80017f4 <HAL_RCC_OscConfig+0x52c>
 80017ca:	bf00      	nop
 80017cc:	40021000 	.word	0x40021000
 80017d0:	40007000 	.word	0x40007000
 80017d4:	4b9a      	ldr	r3, [pc, #616]	; (8001a40 <HAL_RCC_OscConfig+0x778>)
 80017d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80017da:	4a99      	ldr	r2, [pc, #612]	; (8001a40 <HAL_RCC_OscConfig+0x778>)
 80017dc:	f023 0301 	bic.w	r3, r3, #1
 80017e0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80017e4:	4b96      	ldr	r3, [pc, #600]	; (8001a40 <HAL_RCC_OscConfig+0x778>)
 80017e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80017ea:	4a95      	ldr	r2, [pc, #596]	; (8001a40 <HAL_RCC_OscConfig+0x778>)
 80017ec:	f023 0304 	bic.w	r3, r3, #4
 80017f0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	689b      	ldr	r3, [r3, #8]
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d016      	beq.n	800182a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017fc:	f7ff fa80 	bl	8000d00 <HAL_GetTick>
 8001800:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001802:	e00a      	b.n	800181a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001804:	f7ff fa7c 	bl	8000d00 <HAL_GetTick>
 8001808:	4602      	mov	r2, r0
 800180a:	693b      	ldr	r3, [r7, #16]
 800180c:	1ad3      	subs	r3, r2, r3
 800180e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001812:	4293      	cmp	r3, r2
 8001814:	d901      	bls.n	800181a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001816:	2303      	movs	r3, #3
 8001818:	e162      	b.n	8001ae0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800181a:	4b89      	ldr	r3, [pc, #548]	; (8001a40 <HAL_RCC_OscConfig+0x778>)
 800181c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001820:	f003 0302 	and.w	r3, r3, #2
 8001824:	2b00      	cmp	r3, #0
 8001826:	d0ed      	beq.n	8001804 <HAL_RCC_OscConfig+0x53c>
 8001828:	e015      	b.n	8001856 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800182a:	f7ff fa69 	bl	8000d00 <HAL_GetTick>
 800182e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001830:	e00a      	b.n	8001848 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001832:	f7ff fa65 	bl	8000d00 <HAL_GetTick>
 8001836:	4602      	mov	r2, r0
 8001838:	693b      	ldr	r3, [r7, #16]
 800183a:	1ad3      	subs	r3, r2, r3
 800183c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001840:	4293      	cmp	r3, r2
 8001842:	d901      	bls.n	8001848 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001844:	2303      	movs	r3, #3
 8001846:	e14b      	b.n	8001ae0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001848:	4b7d      	ldr	r3, [pc, #500]	; (8001a40 <HAL_RCC_OscConfig+0x778>)
 800184a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800184e:	f003 0302 	and.w	r3, r3, #2
 8001852:	2b00      	cmp	r3, #0
 8001854:	d1ed      	bne.n	8001832 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001856:	7ffb      	ldrb	r3, [r7, #31]
 8001858:	2b01      	cmp	r3, #1
 800185a:	d105      	bne.n	8001868 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800185c:	4b78      	ldr	r3, [pc, #480]	; (8001a40 <HAL_RCC_OscConfig+0x778>)
 800185e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001860:	4a77      	ldr	r2, [pc, #476]	; (8001a40 <HAL_RCC_OscConfig+0x778>)
 8001862:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001866:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	f003 0320 	and.w	r3, r3, #32
 8001870:	2b00      	cmp	r3, #0
 8001872:	d03c      	beq.n	80018ee <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001878:	2b00      	cmp	r3, #0
 800187a:	d01c      	beq.n	80018b6 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800187c:	4b70      	ldr	r3, [pc, #448]	; (8001a40 <HAL_RCC_OscConfig+0x778>)
 800187e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001882:	4a6f      	ldr	r2, [pc, #444]	; (8001a40 <HAL_RCC_OscConfig+0x778>)
 8001884:	f043 0301 	orr.w	r3, r3, #1
 8001888:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800188c:	f7ff fa38 	bl	8000d00 <HAL_GetTick>
 8001890:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001892:	e008      	b.n	80018a6 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001894:	f7ff fa34 	bl	8000d00 <HAL_GetTick>
 8001898:	4602      	mov	r2, r0
 800189a:	693b      	ldr	r3, [r7, #16]
 800189c:	1ad3      	subs	r3, r2, r3
 800189e:	2b02      	cmp	r3, #2
 80018a0:	d901      	bls.n	80018a6 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80018a2:	2303      	movs	r3, #3
 80018a4:	e11c      	b.n	8001ae0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80018a6:	4b66      	ldr	r3, [pc, #408]	; (8001a40 <HAL_RCC_OscConfig+0x778>)
 80018a8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80018ac:	f003 0302 	and.w	r3, r3, #2
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d0ef      	beq.n	8001894 <HAL_RCC_OscConfig+0x5cc>
 80018b4:	e01b      	b.n	80018ee <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80018b6:	4b62      	ldr	r3, [pc, #392]	; (8001a40 <HAL_RCC_OscConfig+0x778>)
 80018b8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80018bc:	4a60      	ldr	r2, [pc, #384]	; (8001a40 <HAL_RCC_OscConfig+0x778>)
 80018be:	f023 0301 	bic.w	r3, r3, #1
 80018c2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018c6:	f7ff fa1b 	bl	8000d00 <HAL_GetTick>
 80018ca:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80018cc:	e008      	b.n	80018e0 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80018ce:	f7ff fa17 	bl	8000d00 <HAL_GetTick>
 80018d2:	4602      	mov	r2, r0
 80018d4:	693b      	ldr	r3, [r7, #16]
 80018d6:	1ad3      	subs	r3, r2, r3
 80018d8:	2b02      	cmp	r3, #2
 80018da:	d901      	bls.n	80018e0 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80018dc:	2303      	movs	r3, #3
 80018de:	e0ff      	b.n	8001ae0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80018e0:	4b57      	ldr	r3, [pc, #348]	; (8001a40 <HAL_RCC_OscConfig+0x778>)
 80018e2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80018e6:	f003 0302 	and.w	r3, r3, #2
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d1ef      	bne.n	80018ce <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	f000 80f3 	beq.w	8001ade <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018fc:	2b02      	cmp	r3, #2
 80018fe:	f040 80c9 	bne.w	8001a94 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001902:	4b4f      	ldr	r3, [pc, #316]	; (8001a40 <HAL_RCC_OscConfig+0x778>)
 8001904:	68db      	ldr	r3, [r3, #12]
 8001906:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001908:	697b      	ldr	r3, [r7, #20]
 800190a:	f003 0203 	and.w	r2, r3, #3
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001912:	429a      	cmp	r2, r3
 8001914:	d12c      	bne.n	8001970 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001916:	697b      	ldr	r3, [r7, #20]
 8001918:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001920:	3b01      	subs	r3, #1
 8001922:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001924:	429a      	cmp	r2, r3
 8001926:	d123      	bne.n	8001970 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001928:	697b      	ldr	r3, [r7, #20]
 800192a:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001932:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001934:	429a      	cmp	r2, r3
 8001936:	d11b      	bne.n	8001970 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001938:	697b      	ldr	r3, [r7, #20]
 800193a:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001942:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001944:	429a      	cmp	r2, r3
 8001946:	d113      	bne.n	8001970 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001948:	697b      	ldr	r3, [r7, #20]
 800194a:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001952:	085b      	lsrs	r3, r3, #1
 8001954:	3b01      	subs	r3, #1
 8001956:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001958:	429a      	cmp	r2, r3
 800195a:	d109      	bne.n	8001970 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800195c:	697b      	ldr	r3, [r7, #20]
 800195e:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001966:	085b      	lsrs	r3, r3, #1
 8001968:	3b01      	subs	r3, #1
 800196a:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800196c:	429a      	cmp	r2, r3
 800196e:	d06b      	beq.n	8001a48 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001970:	69bb      	ldr	r3, [r7, #24]
 8001972:	2b0c      	cmp	r3, #12
 8001974:	d062      	beq.n	8001a3c <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001976:	4b32      	ldr	r3, [pc, #200]	; (8001a40 <HAL_RCC_OscConfig+0x778>)
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800197e:	2b00      	cmp	r3, #0
 8001980:	d001      	beq.n	8001986 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8001982:	2301      	movs	r3, #1
 8001984:	e0ac      	b.n	8001ae0 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001986:	4b2e      	ldr	r3, [pc, #184]	; (8001a40 <HAL_RCC_OscConfig+0x778>)
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	4a2d      	ldr	r2, [pc, #180]	; (8001a40 <HAL_RCC_OscConfig+0x778>)
 800198c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001990:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001992:	f7ff f9b5 	bl	8000d00 <HAL_GetTick>
 8001996:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001998:	e008      	b.n	80019ac <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800199a:	f7ff f9b1 	bl	8000d00 <HAL_GetTick>
 800199e:	4602      	mov	r2, r0
 80019a0:	693b      	ldr	r3, [r7, #16]
 80019a2:	1ad3      	subs	r3, r2, r3
 80019a4:	2b02      	cmp	r3, #2
 80019a6:	d901      	bls.n	80019ac <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 80019a8:	2303      	movs	r3, #3
 80019aa:	e099      	b.n	8001ae0 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80019ac:	4b24      	ldr	r3, [pc, #144]	; (8001a40 <HAL_RCC_OscConfig+0x778>)
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d1f0      	bne.n	800199a <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80019b8:	4b21      	ldr	r3, [pc, #132]	; (8001a40 <HAL_RCC_OscConfig+0x778>)
 80019ba:	68da      	ldr	r2, [r3, #12]
 80019bc:	4b21      	ldr	r3, [pc, #132]	; (8001a44 <HAL_RCC_OscConfig+0x77c>)
 80019be:	4013      	ands	r3, r2
 80019c0:	687a      	ldr	r2, [r7, #4]
 80019c2:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80019c4:	687a      	ldr	r2, [r7, #4]
 80019c6:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80019c8:	3a01      	subs	r2, #1
 80019ca:	0112      	lsls	r2, r2, #4
 80019cc:	4311      	orrs	r1, r2
 80019ce:	687a      	ldr	r2, [r7, #4]
 80019d0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80019d2:	0212      	lsls	r2, r2, #8
 80019d4:	4311      	orrs	r1, r2
 80019d6:	687a      	ldr	r2, [r7, #4]
 80019d8:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80019da:	0852      	lsrs	r2, r2, #1
 80019dc:	3a01      	subs	r2, #1
 80019de:	0552      	lsls	r2, r2, #21
 80019e0:	4311      	orrs	r1, r2
 80019e2:	687a      	ldr	r2, [r7, #4]
 80019e4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80019e6:	0852      	lsrs	r2, r2, #1
 80019e8:	3a01      	subs	r2, #1
 80019ea:	0652      	lsls	r2, r2, #25
 80019ec:	4311      	orrs	r1, r2
 80019ee:	687a      	ldr	r2, [r7, #4]
 80019f0:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80019f2:	06d2      	lsls	r2, r2, #27
 80019f4:	430a      	orrs	r2, r1
 80019f6:	4912      	ldr	r1, [pc, #72]	; (8001a40 <HAL_RCC_OscConfig+0x778>)
 80019f8:	4313      	orrs	r3, r2
 80019fa:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80019fc:	4b10      	ldr	r3, [pc, #64]	; (8001a40 <HAL_RCC_OscConfig+0x778>)
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	4a0f      	ldr	r2, [pc, #60]	; (8001a40 <HAL_RCC_OscConfig+0x778>)
 8001a02:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001a06:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001a08:	4b0d      	ldr	r3, [pc, #52]	; (8001a40 <HAL_RCC_OscConfig+0x778>)
 8001a0a:	68db      	ldr	r3, [r3, #12]
 8001a0c:	4a0c      	ldr	r2, [pc, #48]	; (8001a40 <HAL_RCC_OscConfig+0x778>)
 8001a0e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001a12:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001a14:	f7ff f974 	bl	8000d00 <HAL_GetTick>
 8001a18:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a1a:	e008      	b.n	8001a2e <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a1c:	f7ff f970 	bl	8000d00 <HAL_GetTick>
 8001a20:	4602      	mov	r2, r0
 8001a22:	693b      	ldr	r3, [r7, #16]
 8001a24:	1ad3      	subs	r3, r2, r3
 8001a26:	2b02      	cmp	r3, #2
 8001a28:	d901      	bls.n	8001a2e <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8001a2a:	2303      	movs	r3, #3
 8001a2c:	e058      	b.n	8001ae0 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a2e:	4b04      	ldr	r3, [pc, #16]	; (8001a40 <HAL_RCC_OscConfig+0x778>)
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d0f0      	beq.n	8001a1c <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001a3a:	e050      	b.n	8001ade <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001a3c:	2301      	movs	r3, #1
 8001a3e:	e04f      	b.n	8001ae0 <HAL_RCC_OscConfig+0x818>
 8001a40:	40021000 	.word	0x40021000
 8001a44:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a48:	4b27      	ldr	r3, [pc, #156]	; (8001ae8 <HAL_RCC_OscConfig+0x820>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d144      	bne.n	8001ade <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001a54:	4b24      	ldr	r3, [pc, #144]	; (8001ae8 <HAL_RCC_OscConfig+0x820>)
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	4a23      	ldr	r2, [pc, #140]	; (8001ae8 <HAL_RCC_OscConfig+0x820>)
 8001a5a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001a5e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001a60:	4b21      	ldr	r3, [pc, #132]	; (8001ae8 <HAL_RCC_OscConfig+0x820>)
 8001a62:	68db      	ldr	r3, [r3, #12]
 8001a64:	4a20      	ldr	r2, [pc, #128]	; (8001ae8 <HAL_RCC_OscConfig+0x820>)
 8001a66:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001a6a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001a6c:	f7ff f948 	bl	8000d00 <HAL_GetTick>
 8001a70:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a72:	e008      	b.n	8001a86 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a74:	f7ff f944 	bl	8000d00 <HAL_GetTick>
 8001a78:	4602      	mov	r2, r0
 8001a7a:	693b      	ldr	r3, [r7, #16]
 8001a7c:	1ad3      	subs	r3, r2, r3
 8001a7e:	2b02      	cmp	r3, #2
 8001a80:	d901      	bls.n	8001a86 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8001a82:	2303      	movs	r3, #3
 8001a84:	e02c      	b.n	8001ae0 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a86:	4b18      	ldr	r3, [pc, #96]	; (8001ae8 <HAL_RCC_OscConfig+0x820>)
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d0f0      	beq.n	8001a74 <HAL_RCC_OscConfig+0x7ac>
 8001a92:	e024      	b.n	8001ade <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001a94:	69bb      	ldr	r3, [r7, #24]
 8001a96:	2b0c      	cmp	r3, #12
 8001a98:	d01f      	beq.n	8001ada <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a9a:	4b13      	ldr	r3, [pc, #76]	; (8001ae8 <HAL_RCC_OscConfig+0x820>)
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	4a12      	ldr	r2, [pc, #72]	; (8001ae8 <HAL_RCC_OscConfig+0x820>)
 8001aa0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001aa4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001aa6:	f7ff f92b 	bl	8000d00 <HAL_GetTick>
 8001aaa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001aac:	e008      	b.n	8001ac0 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001aae:	f7ff f927 	bl	8000d00 <HAL_GetTick>
 8001ab2:	4602      	mov	r2, r0
 8001ab4:	693b      	ldr	r3, [r7, #16]
 8001ab6:	1ad3      	subs	r3, r2, r3
 8001ab8:	2b02      	cmp	r3, #2
 8001aba:	d901      	bls.n	8001ac0 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8001abc:	2303      	movs	r3, #3
 8001abe:	e00f      	b.n	8001ae0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ac0:	4b09      	ldr	r3, [pc, #36]	; (8001ae8 <HAL_RCC_OscConfig+0x820>)
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d1f0      	bne.n	8001aae <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8001acc:	4b06      	ldr	r3, [pc, #24]	; (8001ae8 <HAL_RCC_OscConfig+0x820>)
 8001ace:	68da      	ldr	r2, [r3, #12]
 8001ad0:	4905      	ldr	r1, [pc, #20]	; (8001ae8 <HAL_RCC_OscConfig+0x820>)
 8001ad2:	4b06      	ldr	r3, [pc, #24]	; (8001aec <HAL_RCC_OscConfig+0x824>)
 8001ad4:	4013      	ands	r3, r2
 8001ad6:	60cb      	str	r3, [r1, #12]
 8001ad8:	e001      	b.n	8001ade <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001ada:	2301      	movs	r3, #1
 8001adc:	e000      	b.n	8001ae0 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8001ade:	2300      	movs	r3, #0
}
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	3720      	adds	r7, #32
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	bd80      	pop	{r7, pc}
 8001ae8:	40021000 	.word	0x40021000
 8001aec:	feeefffc 	.word	0xfeeefffc

08001af0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b084      	sub	sp, #16
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
 8001af8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d101      	bne.n	8001b04 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001b00:	2301      	movs	r3, #1
 8001b02:	e0e7      	b.n	8001cd4 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001b04:	4b75      	ldr	r3, [pc, #468]	; (8001cdc <HAL_RCC_ClockConfig+0x1ec>)
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	f003 0307 	and.w	r3, r3, #7
 8001b0c:	683a      	ldr	r2, [r7, #0]
 8001b0e:	429a      	cmp	r2, r3
 8001b10:	d910      	bls.n	8001b34 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b12:	4b72      	ldr	r3, [pc, #456]	; (8001cdc <HAL_RCC_ClockConfig+0x1ec>)
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f023 0207 	bic.w	r2, r3, #7
 8001b1a:	4970      	ldr	r1, [pc, #448]	; (8001cdc <HAL_RCC_ClockConfig+0x1ec>)
 8001b1c:	683b      	ldr	r3, [r7, #0]
 8001b1e:	4313      	orrs	r3, r2
 8001b20:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b22:	4b6e      	ldr	r3, [pc, #440]	; (8001cdc <HAL_RCC_ClockConfig+0x1ec>)
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	f003 0307 	and.w	r3, r3, #7
 8001b2a:	683a      	ldr	r2, [r7, #0]
 8001b2c:	429a      	cmp	r2, r3
 8001b2e:	d001      	beq.n	8001b34 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001b30:	2301      	movs	r3, #1
 8001b32:	e0cf      	b.n	8001cd4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	f003 0302 	and.w	r3, r3, #2
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d010      	beq.n	8001b62 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	689a      	ldr	r2, [r3, #8]
 8001b44:	4b66      	ldr	r3, [pc, #408]	; (8001ce0 <HAL_RCC_ClockConfig+0x1f0>)
 8001b46:	689b      	ldr	r3, [r3, #8]
 8001b48:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001b4c:	429a      	cmp	r2, r3
 8001b4e:	d908      	bls.n	8001b62 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b50:	4b63      	ldr	r3, [pc, #396]	; (8001ce0 <HAL_RCC_ClockConfig+0x1f0>)
 8001b52:	689b      	ldr	r3, [r3, #8]
 8001b54:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	689b      	ldr	r3, [r3, #8]
 8001b5c:	4960      	ldr	r1, [pc, #384]	; (8001ce0 <HAL_RCC_ClockConfig+0x1f0>)
 8001b5e:	4313      	orrs	r3, r2
 8001b60:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	f003 0301 	and.w	r3, r3, #1
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d04c      	beq.n	8001c08 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	685b      	ldr	r3, [r3, #4]
 8001b72:	2b03      	cmp	r3, #3
 8001b74:	d107      	bne.n	8001b86 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b76:	4b5a      	ldr	r3, [pc, #360]	; (8001ce0 <HAL_RCC_ClockConfig+0x1f0>)
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d121      	bne.n	8001bc6 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001b82:	2301      	movs	r3, #1
 8001b84:	e0a6      	b.n	8001cd4 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	685b      	ldr	r3, [r3, #4]
 8001b8a:	2b02      	cmp	r3, #2
 8001b8c:	d107      	bne.n	8001b9e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001b8e:	4b54      	ldr	r3, [pc, #336]	; (8001ce0 <HAL_RCC_ClockConfig+0x1f0>)
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d115      	bne.n	8001bc6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001b9a:	2301      	movs	r3, #1
 8001b9c:	e09a      	b.n	8001cd4 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	685b      	ldr	r3, [r3, #4]
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d107      	bne.n	8001bb6 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001ba6:	4b4e      	ldr	r3, [pc, #312]	; (8001ce0 <HAL_RCC_ClockConfig+0x1f0>)
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	f003 0302 	and.w	r3, r3, #2
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d109      	bne.n	8001bc6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001bb2:	2301      	movs	r3, #1
 8001bb4:	e08e      	b.n	8001cd4 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001bb6:	4b4a      	ldr	r3, [pc, #296]	; (8001ce0 <HAL_RCC_ClockConfig+0x1f0>)
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d101      	bne.n	8001bc6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001bc2:	2301      	movs	r3, #1
 8001bc4:	e086      	b.n	8001cd4 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001bc6:	4b46      	ldr	r3, [pc, #280]	; (8001ce0 <HAL_RCC_ClockConfig+0x1f0>)
 8001bc8:	689b      	ldr	r3, [r3, #8]
 8001bca:	f023 0203 	bic.w	r2, r3, #3
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	685b      	ldr	r3, [r3, #4]
 8001bd2:	4943      	ldr	r1, [pc, #268]	; (8001ce0 <HAL_RCC_ClockConfig+0x1f0>)
 8001bd4:	4313      	orrs	r3, r2
 8001bd6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001bd8:	f7ff f892 	bl	8000d00 <HAL_GetTick>
 8001bdc:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bde:	e00a      	b.n	8001bf6 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001be0:	f7ff f88e 	bl	8000d00 <HAL_GetTick>
 8001be4:	4602      	mov	r2, r0
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	1ad3      	subs	r3, r2, r3
 8001bea:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bee:	4293      	cmp	r3, r2
 8001bf0:	d901      	bls.n	8001bf6 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001bf2:	2303      	movs	r3, #3
 8001bf4:	e06e      	b.n	8001cd4 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bf6:	4b3a      	ldr	r3, [pc, #232]	; (8001ce0 <HAL_RCC_ClockConfig+0x1f0>)
 8001bf8:	689b      	ldr	r3, [r3, #8]
 8001bfa:	f003 020c 	and.w	r2, r3, #12
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	685b      	ldr	r3, [r3, #4]
 8001c02:	009b      	lsls	r3, r3, #2
 8001c04:	429a      	cmp	r2, r3
 8001c06:	d1eb      	bne.n	8001be0 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	f003 0302 	and.w	r3, r3, #2
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d010      	beq.n	8001c36 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	689a      	ldr	r2, [r3, #8]
 8001c18:	4b31      	ldr	r3, [pc, #196]	; (8001ce0 <HAL_RCC_ClockConfig+0x1f0>)
 8001c1a:	689b      	ldr	r3, [r3, #8]
 8001c1c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001c20:	429a      	cmp	r2, r3
 8001c22:	d208      	bcs.n	8001c36 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c24:	4b2e      	ldr	r3, [pc, #184]	; (8001ce0 <HAL_RCC_ClockConfig+0x1f0>)
 8001c26:	689b      	ldr	r3, [r3, #8]
 8001c28:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	689b      	ldr	r3, [r3, #8]
 8001c30:	492b      	ldr	r1, [pc, #172]	; (8001ce0 <HAL_RCC_ClockConfig+0x1f0>)
 8001c32:	4313      	orrs	r3, r2
 8001c34:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001c36:	4b29      	ldr	r3, [pc, #164]	; (8001cdc <HAL_RCC_ClockConfig+0x1ec>)
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	f003 0307 	and.w	r3, r3, #7
 8001c3e:	683a      	ldr	r2, [r7, #0]
 8001c40:	429a      	cmp	r2, r3
 8001c42:	d210      	bcs.n	8001c66 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c44:	4b25      	ldr	r3, [pc, #148]	; (8001cdc <HAL_RCC_ClockConfig+0x1ec>)
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	f023 0207 	bic.w	r2, r3, #7
 8001c4c:	4923      	ldr	r1, [pc, #140]	; (8001cdc <HAL_RCC_ClockConfig+0x1ec>)
 8001c4e:	683b      	ldr	r3, [r7, #0]
 8001c50:	4313      	orrs	r3, r2
 8001c52:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c54:	4b21      	ldr	r3, [pc, #132]	; (8001cdc <HAL_RCC_ClockConfig+0x1ec>)
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	f003 0307 	and.w	r3, r3, #7
 8001c5c:	683a      	ldr	r2, [r7, #0]
 8001c5e:	429a      	cmp	r2, r3
 8001c60:	d001      	beq.n	8001c66 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001c62:	2301      	movs	r3, #1
 8001c64:	e036      	b.n	8001cd4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	f003 0304 	and.w	r3, r3, #4
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d008      	beq.n	8001c84 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001c72:	4b1b      	ldr	r3, [pc, #108]	; (8001ce0 <HAL_RCC_ClockConfig+0x1f0>)
 8001c74:	689b      	ldr	r3, [r3, #8]
 8001c76:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	68db      	ldr	r3, [r3, #12]
 8001c7e:	4918      	ldr	r1, [pc, #96]	; (8001ce0 <HAL_RCC_ClockConfig+0x1f0>)
 8001c80:	4313      	orrs	r3, r2
 8001c82:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f003 0308 	and.w	r3, r3, #8
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d009      	beq.n	8001ca4 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001c90:	4b13      	ldr	r3, [pc, #76]	; (8001ce0 <HAL_RCC_ClockConfig+0x1f0>)
 8001c92:	689b      	ldr	r3, [r3, #8]
 8001c94:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	691b      	ldr	r3, [r3, #16]
 8001c9c:	00db      	lsls	r3, r3, #3
 8001c9e:	4910      	ldr	r1, [pc, #64]	; (8001ce0 <HAL_RCC_ClockConfig+0x1f0>)
 8001ca0:	4313      	orrs	r3, r2
 8001ca2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001ca4:	f000 f824 	bl	8001cf0 <HAL_RCC_GetSysClockFreq>
 8001ca8:	4602      	mov	r2, r0
 8001caa:	4b0d      	ldr	r3, [pc, #52]	; (8001ce0 <HAL_RCC_ClockConfig+0x1f0>)
 8001cac:	689b      	ldr	r3, [r3, #8]
 8001cae:	091b      	lsrs	r3, r3, #4
 8001cb0:	f003 030f 	and.w	r3, r3, #15
 8001cb4:	490b      	ldr	r1, [pc, #44]	; (8001ce4 <HAL_RCC_ClockConfig+0x1f4>)
 8001cb6:	5ccb      	ldrb	r3, [r1, r3]
 8001cb8:	f003 031f 	and.w	r3, r3, #31
 8001cbc:	fa22 f303 	lsr.w	r3, r2, r3
 8001cc0:	4a09      	ldr	r2, [pc, #36]	; (8001ce8 <HAL_RCC_ClockConfig+0x1f8>)
 8001cc2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001cc4:	4b09      	ldr	r3, [pc, #36]	; (8001cec <HAL_RCC_ClockConfig+0x1fc>)
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	4618      	mov	r0, r3
 8001cca:	f7fe ff17 	bl	8000afc <HAL_InitTick>
 8001cce:	4603      	mov	r3, r0
 8001cd0:	72fb      	strb	r3, [r7, #11]

  return status;
 8001cd2:	7afb      	ldrb	r3, [r7, #11]
}
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	3710      	adds	r7, #16
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	bd80      	pop	{r7, pc}
 8001cdc:	40022000 	.word	0x40022000
 8001ce0:	40021000 	.word	0x40021000
 8001ce4:	08006e28 	.word	0x08006e28
 8001ce8:	20000000 	.word	0x20000000
 8001cec:	20000004 	.word	0x20000004

08001cf0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001cf0:	b480      	push	{r7}
 8001cf2:	b089      	sub	sp, #36	; 0x24
 8001cf4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	61fb      	str	r3, [r7, #28]
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001cfe:	4b3e      	ldr	r3, [pc, #248]	; (8001df8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d00:	689b      	ldr	r3, [r3, #8]
 8001d02:	f003 030c 	and.w	r3, r3, #12
 8001d06:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001d08:	4b3b      	ldr	r3, [pc, #236]	; (8001df8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d0a:	68db      	ldr	r3, [r3, #12]
 8001d0c:	f003 0303 	and.w	r3, r3, #3
 8001d10:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001d12:	693b      	ldr	r3, [r7, #16]
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d005      	beq.n	8001d24 <HAL_RCC_GetSysClockFreq+0x34>
 8001d18:	693b      	ldr	r3, [r7, #16]
 8001d1a:	2b0c      	cmp	r3, #12
 8001d1c:	d121      	bne.n	8001d62 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	2b01      	cmp	r3, #1
 8001d22:	d11e      	bne.n	8001d62 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001d24:	4b34      	ldr	r3, [pc, #208]	; (8001df8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	f003 0308 	and.w	r3, r3, #8
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d107      	bne.n	8001d40 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001d30:	4b31      	ldr	r3, [pc, #196]	; (8001df8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d32:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d36:	0a1b      	lsrs	r3, r3, #8
 8001d38:	f003 030f 	and.w	r3, r3, #15
 8001d3c:	61fb      	str	r3, [r7, #28]
 8001d3e:	e005      	b.n	8001d4c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001d40:	4b2d      	ldr	r3, [pc, #180]	; (8001df8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	091b      	lsrs	r3, r3, #4
 8001d46:	f003 030f 	and.w	r3, r3, #15
 8001d4a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001d4c:	4a2b      	ldr	r2, [pc, #172]	; (8001dfc <HAL_RCC_GetSysClockFreq+0x10c>)
 8001d4e:	69fb      	ldr	r3, [r7, #28]
 8001d50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d54:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001d56:	693b      	ldr	r3, [r7, #16]
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d10d      	bne.n	8001d78 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001d5c:	69fb      	ldr	r3, [r7, #28]
 8001d5e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001d60:	e00a      	b.n	8001d78 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001d62:	693b      	ldr	r3, [r7, #16]
 8001d64:	2b04      	cmp	r3, #4
 8001d66:	d102      	bne.n	8001d6e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001d68:	4b25      	ldr	r3, [pc, #148]	; (8001e00 <HAL_RCC_GetSysClockFreq+0x110>)
 8001d6a:	61bb      	str	r3, [r7, #24]
 8001d6c:	e004      	b.n	8001d78 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001d6e:	693b      	ldr	r3, [r7, #16]
 8001d70:	2b08      	cmp	r3, #8
 8001d72:	d101      	bne.n	8001d78 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001d74:	4b23      	ldr	r3, [pc, #140]	; (8001e04 <HAL_RCC_GetSysClockFreq+0x114>)
 8001d76:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001d78:	693b      	ldr	r3, [r7, #16]
 8001d7a:	2b0c      	cmp	r3, #12
 8001d7c:	d134      	bne.n	8001de8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001d7e:	4b1e      	ldr	r3, [pc, #120]	; (8001df8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d80:	68db      	ldr	r3, [r3, #12]
 8001d82:	f003 0303 	and.w	r3, r3, #3
 8001d86:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001d88:	68bb      	ldr	r3, [r7, #8]
 8001d8a:	2b02      	cmp	r3, #2
 8001d8c:	d003      	beq.n	8001d96 <HAL_RCC_GetSysClockFreq+0xa6>
 8001d8e:	68bb      	ldr	r3, [r7, #8]
 8001d90:	2b03      	cmp	r3, #3
 8001d92:	d003      	beq.n	8001d9c <HAL_RCC_GetSysClockFreq+0xac>
 8001d94:	e005      	b.n	8001da2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001d96:	4b1a      	ldr	r3, [pc, #104]	; (8001e00 <HAL_RCC_GetSysClockFreq+0x110>)
 8001d98:	617b      	str	r3, [r7, #20]
      break;
 8001d9a:	e005      	b.n	8001da8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001d9c:	4b19      	ldr	r3, [pc, #100]	; (8001e04 <HAL_RCC_GetSysClockFreq+0x114>)
 8001d9e:	617b      	str	r3, [r7, #20]
      break;
 8001da0:	e002      	b.n	8001da8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001da2:	69fb      	ldr	r3, [r7, #28]
 8001da4:	617b      	str	r3, [r7, #20]
      break;
 8001da6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001da8:	4b13      	ldr	r3, [pc, #76]	; (8001df8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001daa:	68db      	ldr	r3, [r3, #12]
 8001dac:	091b      	lsrs	r3, r3, #4
 8001dae:	f003 0307 	and.w	r3, r3, #7
 8001db2:	3301      	adds	r3, #1
 8001db4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001db6:	4b10      	ldr	r3, [pc, #64]	; (8001df8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001db8:	68db      	ldr	r3, [r3, #12]
 8001dba:	0a1b      	lsrs	r3, r3, #8
 8001dbc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001dc0:	697a      	ldr	r2, [r7, #20]
 8001dc2:	fb03 f202 	mul.w	r2, r3, r2
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dcc:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001dce:	4b0a      	ldr	r3, [pc, #40]	; (8001df8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001dd0:	68db      	ldr	r3, [r3, #12]
 8001dd2:	0e5b      	lsrs	r3, r3, #25
 8001dd4:	f003 0303 	and.w	r3, r3, #3
 8001dd8:	3301      	adds	r3, #1
 8001dda:	005b      	lsls	r3, r3, #1
 8001ddc:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001dde:	697a      	ldr	r2, [r7, #20]
 8001de0:	683b      	ldr	r3, [r7, #0]
 8001de2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001de6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001de8:	69bb      	ldr	r3, [r7, #24]
}
 8001dea:	4618      	mov	r0, r3
 8001dec:	3724      	adds	r7, #36	; 0x24
 8001dee:	46bd      	mov	sp, r7
 8001df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df4:	4770      	bx	lr
 8001df6:	bf00      	nop
 8001df8:	40021000 	.word	0x40021000
 8001dfc:	08006e40 	.word	0x08006e40
 8001e00:	00f42400 	.word	0x00f42400
 8001e04:	007a1200 	.word	0x007a1200

08001e08 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001e08:	b480      	push	{r7}
 8001e0a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001e0c:	4b03      	ldr	r3, [pc, #12]	; (8001e1c <HAL_RCC_GetHCLKFreq+0x14>)
 8001e0e:	681b      	ldr	r3, [r3, #0]
}
 8001e10:	4618      	mov	r0, r3
 8001e12:	46bd      	mov	sp, r7
 8001e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e18:	4770      	bx	lr
 8001e1a:	bf00      	nop
 8001e1c:	20000000 	.word	0x20000000

08001e20 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001e24:	f7ff fff0 	bl	8001e08 <HAL_RCC_GetHCLKFreq>
 8001e28:	4602      	mov	r2, r0
 8001e2a:	4b06      	ldr	r3, [pc, #24]	; (8001e44 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001e2c:	689b      	ldr	r3, [r3, #8]
 8001e2e:	0a1b      	lsrs	r3, r3, #8
 8001e30:	f003 0307 	and.w	r3, r3, #7
 8001e34:	4904      	ldr	r1, [pc, #16]	; (8001e48 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001e36:	5ccb      	ldrb	r3, [r1, r3]
 8001e38:	f003 031f 	and.w	r3, r3, #31
 8001e3c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e40:	4618      	mov	r0, r3
 8001e42:	bd80      	pop	{r7, pc}
 8001e44:	40021000 	.word	0x40021000
 8001e48:	08006e38 	.word	0x08006e38

08001e4c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001e50:	f7ff ffda 	bl	8001e08 <HAL_RCC_GetHCLKFreq>
 8001e54:	4602      	mov	r2, r0
 8001e56:	4b06      	ldr	r3, [pc, #24]	; (8001e70 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001e58:	689b      	ldr	r3, [r3, #8]
 8001e5a:	0adb      	lsrs	r3, r3, #11
 8001e5c:	f003 0307 	and.w	r3, r3, #7
 8001e60:	4904      	ldr	r1, [pc, #16]	; (8001e74 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001e62:	5ccb      	ldrb	r3, [r1, r3]
 8001e64:	f003 031f 	and.w	r3, r3, #31
 8001e68:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	bd80      	pop	{r7, pc}
 8001e70:	40021000 	.word	0x40021000
 8001e74:	08006e38 	.word	0x08006e38

08001e78 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001e78:	b480      	push	{r7}
 8001e7a:	b083      	sub	sp, #12
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
 8001e80:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	220f      	movs	r2, #15
 8001e86:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8001e88:	4b12      	ldr	r3, [pc, #72]	; (8001ed4 <HAL_RCC_GetClockConfig+0x5c>)
 8001e8a:	689b      	ldr	r3, [r3, #8]
 8001e8c:	f003 0203 	and.w	r2, r3, #3
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8001e94:	4b0f      	ldr	r3, [pc, #60]	; (8001ed4 <HAL_RCC_GetClockConfig+0x5c>)
 8001e96:	689b      	ldr	r3, [r3, #8]
 8001e98:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8001ea0:	4b0c      	ldr	r3, [pc, #48]	; (8001ed4 <HAL_RCC_GetClockConfig+0x5c>)
 8001ea2:	689b      	ldr	r3, [r3, #8]
 8001ea4:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8001eac:	4b09      	ldr	r3, [pc, #36]	; (8001ed4 <HAL_RCC_GetClockConfig+0x5c>)
 8001eae:	689b      	ldr	r3, [r3, #8]
 8001eb0:	08db      	lsrs	r3, r3, #3
 8001eb2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8001eba:	4b07      	ldr	r3, [pc, #28]	; (8001ed8 <HAL_RCC_GetClockConfig+0x60>)
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f003 0207 	and.w	r2, r3, #7
 8001ec2:	683b      	ldr	r3, [r7, #0]
 8001ec4:	601a      	str	r2, [r3, #0]
}
 8001ec6:	bf00      	nop
 8001ec8:	370c      	adds	r7, #12
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed0:	4770      	bx	lr
 8001ed2:	bf00      	nop
 8001ed4:	40021000 	.word	0x40021000
 8001ed8:	40022000 	.word	0x40022000

08001edc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	b086      	sub	sp, #24
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001ee8:	4b2a      	ldr	r3, [pc, #168]	; (8001f94 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001eea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001eec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d003      	beq.n	8001efc <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001ef4:	f7ff f984 	bl	8001200 <HAL_PWREx_GetVoltageRange>
 8001ef8:	6178      	str	r0, [r7, #20]
 8001efa:	e014      	b.n	8001f26 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001efc:	4b25      	ldr	r3, [pc, #148]	; (8001f94 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001efe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f00:	4a24      	ldr	r2, [pc, #144]	; (8001f94 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f02:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f06:	6593      	str	r3, [r2, #88]	; 0x58
 8001f08:	4b22      	ldr	r3, [pc, #136]	; (8001f94 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f0c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f10:	60fb      	str	r3, [r7, #12]
 8001f12:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001f14:	f7ff f974 	bl	8001200 <HAL_PWREx_GetVoltageRange>
 8001f18:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001f1a:	4b1e      	ldr	r3, [pc, #120]	; (8001f94 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f1e:	4a1d      	ldr	r2, [pc, #116]	; (8001f94 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f20:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001f24:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001f26:	697b      	ldr	r3, [r7, #20]
 8001f28:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001f2c:	d10b      	bne.n	8001f46 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	2b80      	cmp	r3, #128	; 0x80
 8001f32:	d919      	bls.n	8001f68 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	2ba0      	cmp	r3, #160	; 0xa0
 8001f38:	d902      	bls.n	8001f40 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001f3a:	2302      	movs	r3, #2
 8001f3c:	613b      	str	r3, [r7, #16]
 8001f3e:	e013      	b.n	8001f68 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001f40:	2301      	movs	r3, #1
 8001f42:	613b      	str	r3, [r7, #16]
 8001f44:	e010      	b.n	8001f68 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	2b80      	cmp	r3, #128	; 0x80
 8001f4a:	d902      	bls.n	8001f52 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001f4c:	2303      	movs	r3, #3
 8001f4e:	613b      	str	r3, [r7, #16]
 8001f50:	e00a      	b.n	8001f68 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	2b80      	cmp	r3, #128	; 0x80
 8001f56:	d102      	bne.n	8001f5e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001f58:	2302      	movs	r3, #2
 8001f5a:	613b      	str	r3, [r7, #16]
 8001f5c:	e004      	b.n	8001f68 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	2b70      	cmp	r3, #112	; 0x70
 8001f62:	d101      	bne.n	8001f68 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001f64:	2301      	movs	r3, #1
 8001f66:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001f68:	4b0b      	ldr	r3, [pc, #44]	; (8001f98 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f023 0207 	bic.w	r2, r3, #7
 8001f70:	4909      	ldr	r1, [pc, #36]	; (8001f98 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001f72:	693b      	ldr	r3, [r7, #16]
 8001f74:	4313      	orrs	r3, r2
 8001f76:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001f78:	4b07      	ldr	r3, [pc, #28]	; (8001f98 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f003 0307 	and.w	r3, r3, #7
 8001f80:	693a      	ldr	r2, [r7, #16]
 8001f82:	429a      	cmp	r2, r3
 8001f84:	d001      	beq.n	8001f8a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001f86:	2301      	movs	r3, #1
 8001f88:	e000      	b.n	8001f8c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001f8a:	2300      	movs	r3, #0
}
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	3718      	adds	r7, #24
 8001f90:	46bd      	mov	sp, r7
 8001f92:	bd80      	pop	{r7, pc}
 8001f94:	40021000 	.word	0x40021000
 8001f98:	40022000 	.word	0x40022000

08001f9c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	b086      	sub	sp, #24
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001fa4:	2300      	movs	r3, #0
 8001fa6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001fa8:	2300      	movs	r3, #0
 8001faa:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d031      	beq.n	800201c <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fbc:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8001fc0:	d01a      	beq.n	8001ff8 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8001fc2:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8001fc6:	d814      	bhi.n	8001ff2 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d009      	beq.n	8001fe0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8001fcc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001fd0:	d10f      	bne.n	8001ff2 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8001fd2:	4b5d      	ldr	r3, [pc, #372]	; (8002148 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001fd4:	68db      	ldr	r3, [r3, #12]
 8001fd6:	4a5c      	ldr	r2, [pc, #368]	; (8002148 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001fd8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001fdc:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001fde:	e00c      	b.n	8001ffa <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	3304      	adds	r3, #4
 8001fe4:	2100      	movs	r1, #0
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	f000 f9de 	bl	80023a8 <RCCEx_PLLSAI1_Config>
 8001fec:	4603      	mov	r3, r0
 8001fee:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001ff0:	e003      	b.n	8001ffa <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001ff2:	2301      	movs	r3, #1
 8001ff4:	74fb      	strb	r3, [r7, #19]
      break;
 8001ff6:	e000      	b.n	8001ffa <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8001ff8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001ffa:	7cfb      	ldrb	r3, [r7, #19]
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d10b      	bne.n	8002018 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002000:	4b51      	ldr	r3, [pc, #324]	; (8002148 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002002:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002006:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800200e:	494e      	ldr	r1, [pc, #312]	; (8002148 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002010:	4313      	orrs	r3, r2
 8002012:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002016:	e001      	b.n	800201c <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002018:	7cfb      	ldrb	r3, [r7, #19]
 800201a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002024:	2b00      	cmp	r3, #0
 8002026:	f000 809e 	beq.w	8002166 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 800202a:	2300      	movs	r3, #0
 800202c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800202e:	4b46      	ldr	r3, [pc, #280]	; (8002148 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002030:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002032:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002036:	2b00      	cmp	r3, #0
 8002038:	d101      	bne.n	800203e <HAL_RCCEx_PeriphCLKConfig+0xa2>
 800203a:	2301      	movs	r3, #1
 800203c:	e000      	b.n	8002040 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 800203e:	2300      	movs	r3, #0
 8002040:	2b00      	cmp	r3, #0
 8002042:	d00d      	beq.n	8002060 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002044:	4b40      	ldr	r3, [pc, #256]	; (8002148 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002046:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002048:	4a3f      	ldr	r2, [pc, #252]	; (8002148 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800204a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800204e:	6593      	str	r3, [r2, #88]	; 0x58
 8002050:	4b3d      	ldr	r3, [pc, #244]	; (8002148 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002052:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002054:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002058:	60bb      	str	r3, [r7, #8]
 800205a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800205c:	2301      	movs	r3, #1
 800205e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002060:	4b3a      	ldr	r3, [pc, #232]	; (800214c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	4a39      	ldr	r2, [pc, #228]	; (800214c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002066:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800206a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800206c:	f7fe fe48 	bl	8000d00 <HAL_GetTick>
 8002070:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002072:	e009      	b.n	8002088 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002074:	f7fe fe44 	bl	8000d00 <HAL_GetTick>
 8002078:	4602      	mov	r2, r0
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	1ad3      	subs	r3, r2, r3
 800207e:	2b02      	cmp	r3, #2
 8002080:	d902      	bls.n	8002088 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8002082:	2303      	movs	r3, #3
 8002084:	74fb      	strb	r3, [r7, #19]
        break;
 8002086:	e005      	b.n	8002094 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002088:	4b30      	ldr	r3, [pc, #192]	; (800214c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002090:	2b00      	cmp	r3, #0
 8002092:	d0ef      	beq.n	8002074 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8002094:	7cfb      	ldrb	r3, [r7, #19]
 8002096:	2b00      	cmp	r3, #0
 8002098:	d15a      	bne.n	8002150 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800209a:	4b2b      	ldr	r3, [pc, #172]	; (8002148 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800209c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020a0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80020a4:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80020a6:	697b      	ldr	r3, [r7, #20]
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d01e      	beq.n	80020ea <HAL_RCCEx_PeriphCLKConfig+0x14e>
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80020b0:	697a      	ldr	r2, [r7, #20]
 80020b2:	429a      	cmp	r2, r3
 80020b4:	d019      	beq.n	80020ea <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80020b6:	4b24      	ldr	r3, [pc, #144]	; (8002148 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80020b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80020c0:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80020c2:	4b21      	ldr	r3, [pc, #132]	; (8002148 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80020c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020c8:	4a1f      	ldr	r2, [pc, #124]	; (8002148 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80020ca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020ce:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80020d2:	4b1d      	ldr	r3, [pc, #116]	; (8002148 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80020d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020d8:	4a1b      	ldr	r2, [pc, #108]	; (8002148 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80020da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80020de:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80020e2:	4a19      	ldr	r2, [pc, #100]	; (8002148 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80020e4:	697b      	ldr	r3, [r7, #20]
 80020e6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80020ea:	697b      	ldr	r3, [r7, #20]
 80020ec:	f003 0301 	and.w	r3, r3, #1
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d016      	beq.n	8002122 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020f4:	f7fe fe04 	bl	8000d00 <HAL_GetTick>
 80020f8:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80020fa:	e00b      	b.n	8002114 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020fc:	f7fe fe00 	bl	8000d00 <HAL_GetTick>
 8002100:	4602      	mov	r2, r0
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	1ad3      	subs	r3, r2, r3
 8002106:	f241 3288 	movw	r2, #5000	; 0x1388
 800210a:	4293      	cmp	r3, r2
 800210c:	d902      	bls.n	8002114 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 800210e:	2303      	movs	r3, #3
 8002110:	74fb      	strb	r3, [r7, #19]
            break;
 8002112:	e006      	b.n	8002122 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002114:	4b0c      	ldr	r3, [pc, #48]	; (8002148 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002116:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800211a:	f003 0302 	and.w	r3, r3, #2
 800211e:	2b00      	cmp	r3, #0
 8002120:	d0ec      	beq.n	80020fc <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8002122:	7cfb      	ldrb	r3, [r7, #19]
 8002124:	2b00      	cmp	r3, #0
 8002126:	d10b      	bne.n	8002140 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002128:	4b07      	ldr	r3, [pc, #28]	; (8002148 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800212a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800212e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002136:	4904      	ldr	r1, [pc, #16]	; (8002148 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002138:	4313      	orrs	r3, r2
 800213a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800213e:	e009      	b.n	8002154 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002140:	7cfb      	ldrb	r3, [r7, #19]
 8002142:	74bb      	strb	r3, [r7, #18]
 8002144:	e006      	b.n	8002154 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8002146:	bf00      	nop
 8002148:	40021000 	.word	0x40021000
 800214c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002150:	7cfb      	ldrb	r3, [r7, #19]
 8002152:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002154:	7c7b      	ldrb	r3, [r7, #17]
 8002156:	2b01      	cmp	r3, #1
 8002158:	d105      	bne.n	8002166 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800215a:	4b8a      	ldr	r3, [pc, #552]	; (8002384 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800215c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800215e:	4a89      	ldr	r2, [pc, #548]	; (8002384 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002160:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002164:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f003 0301 	and.w	r3, r3, #1
 800216e:	2b00      	cmp	r3, #0
 8002170:	d00a      	beq.n	8002188 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002172:	4b84      	ldr	r3, [pc, #528]	; (8002384 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002174:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002178:	f023 0203 	bic.w	r2, r3, #3
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	6a1b      	ldr	r3, [r3, #32]
 8002180:	4980      	ldr	r1, [pc, #512]	; (8002384 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002182:	4313      	orrs	r3, r2
 8002184:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f003 0302 	and.w	r3, r3, #2
 8002190:	2b00      	cmp	r3, #0
 8002192:	d00a      	beq.n	80021aa <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002194:	4b7b      	ldr	r3, [pc, #492]	; (8002384 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002196:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800219a:	f023 020c 	bic.w	r2, r3, #12
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021a2:	4978      	ldr	r1, [pc, #480]	; (8002384 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80021a4:	4313      	orrs	r3, r2
 80021a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f003 0320 	and.w	r3, r3, #32
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d00a      	beq.n	80021cc <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80021b6:	4b73      	ldr	r3, [pc, #460]	; (8002384 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80021b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021bc:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021c4:	496f      	ldr	r1, [pc, #444]	; (8002384 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80021c6:	4313      	orrs	r3, r2
 80021c8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d00a      	beq.n	80021ee <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80021d8:	4b6a      	ldr	r3, [pc, #424]	; (8002384 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80021da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021de:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021e6:	4967      	ldr	r1, [pc, #412]	; (8002384 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80021e8:	4313      	orrs	r3, r2
 80021ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d00a      	beq.n	8002210 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80021fa:	4b62      	ldr	r3, [pc, #392]	; (8002384 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80021fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002200:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002208:	495e      	ldr	r1, [pc, #376]	; (8002384 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800220a:	4313      	orrs	r3, r2
 800220c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002218:	2b00      	cmp	r3, #0
 800221a:	d00a      	beq.n	8002232 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800221c:	4b59      	ldr	r3, [pc, #356]	; (8002384 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800221e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002222:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800222a:	4956      	ldr	r1, [pc, #344]	; (8002384 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800222c:	4313      	orrs	r3, r2
 800222e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800223a:	2b00      	cmp	r3, #0
 800223c:	d00a      	beq.n	8002254 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800223e:	4b51      	ldr	r3, [pc, #324]	; (8002384 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002240:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002244:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800224c:	494d      	ldr	r1, [pc, #308]	; (8002384 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800224e:	4313      	orrs	r3, r2
 8002250:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800225c:	2b00      	cmp	r3, #0
 800225e:	d028      	beq.n	80022b2 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002260:	4b48      	ldr	r3, [pc, #288]	; (8002384 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002262:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002266:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800226e:	4945      	ldr	r1, [pc, #276]	; (8002384 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002270:	4313      	orrs	r3, r2
 8002272:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800227a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800227e:	d106      	bne.n	800228e <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002280:	4b40      	ldr	r3, [pc, #256]	; (8002384 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002282:	68db      	ldr	r3, [r3, #12]
 8002284:	4a3f      	ldr	r2, [pc, #252]	; (8002384 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002286:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800228a:	60d3      	str	r3, [r2, #12]
 800228c:	e011      	b.n	80022b2 <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002292:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002296:	d10c      	bne.n	80022b2 <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	3304      	adds	r3, #4
 800229c:	2101      	movs	r1, #1
 800229e:	4618      	mov	r0, r3
 80022a0:	f000 f882 	bl	80023a8 <RCCEx_PLLSAI1_Config>
 80022a4:	4603      	mov	r3, r0
 80022a6:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80022a8:	7cfb      	ldrb	r3, [r7, #19]
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d001      	beq.n	80022b2 <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 80022ae:	7cfb      	ldrb	r3, [r7, #19]
 80022b0:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d028      	beq.n	8002310 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80022be:	4b31      	ldr	r3, [pc, #196]	; (8002384 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80022c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022c4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022cc:	492d      	ldr	r1, [pc, #180]	; (8002384 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80022ce:	4313      	orrs	r3, r2
 80022d0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022d8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80022dc:	d106      	bne.n	80022ec <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80022de:	4b29      	ldr	r3, [pc, #164]	; (8002384 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80022e0:	68db      	ldr	r3, [r3, #12]
 80022e2:	4a28      	ldr	r2, [pc, #160]	; (8002384 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80022e4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80022e8:	60d3      	str	r3, [r2, #12]
 80022ea:	e011      	b.n	8002310 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022f0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80022f4:	d10c      	bne.n	8002310 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	3304      	adds	r3, #4
 80022fa:	2101      	movs	r1, #1
 80022fc:	4618      	mov	r0, r3
 80022fe:	f000 f853 	bl	80023a8 <RCCEx_PLLSAI1_Config>
 8002302:	4603      	mov	r3, r0
 8002304:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002306:	7cfb      	ldrb	r3, [r7, #19]
 8002308:	2b00      	cmp	r3, #0
 800230a:	d001      	beq.n	8002310 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 800230c:	7cfb      	ldrb	r3, [r7, #19]
 800230e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002318:	2b00      	cmp	r3, #0
 800231a:	d01c      	beq.n	8002356 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800231c:	4b19      	ldr	r3, [pc, #100]	; (8002384 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800231e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002322:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800232a:	4916      	ldr	r1, [pc, #88]	; (8002384 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800232c:	4313      	orrs	r3, r2
 800232e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002336:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800233a:	d10c      	bne.n	8002356 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	3304      	adds	r3, #4
 8002340:	2102      	movs	r1, #2
 8002342:	4618      	mov	r0, r3
 8002344:	f000 f830 	bl	80023a8 <RCCEx_PLLSAI1_Config>
 8002348:	4603      	mov	r3, r0
 800234a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800234c:	7cfb      	ldrb	r3, [r7, #19]
 800234e:	2b00      	cmp	r3, #0
 8002350:	d001      	beq.n	8002356 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 8002352:	7cfb      	ldrb	r3, [r7, #19]
 8002354:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800235e:	2b00      	cmp	r3, #0
 8002360:	d00a      	beq.n	8002378 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002362:	4b08      	ldr	r3, [pc, #32]	; (8002384 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002364:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002368:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002370:	4904      	ldr	r1, [pc, #16]	; (8002384 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002372:	4313      	orrs	r3, r2
 8002374:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002378:	7cbb      	ldrb	r3, [r7, #18]
}
 800237a:	4618      	mov	r0, r3
 800237c:	3718      	adds	r7, #24
 800237e:	46bd      	mov	sp, r7
 8002380:	bd80      	pop	{r7, pc}
 8002382:	bf00      	nop
 8002384:	40021000 	.word	0x40021000

08002388 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8002388:	b480      	push	{r7}
 800238a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 800238c:	4b05      	ldr	r3, [pc, #20]	; (80023a4 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	4a04      	ldr	r2, [pc, #16]	; (80023a4 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8002392:	f043 0304 	orr.w	r3, r3, #4
 8002396:	6013      	str	r3, [r2, #0]
}
 8002398:	bf00      	nop
 800239a:	46bd      	mov	sp, r7
 800239c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a0:	4770      	bx	lr
 80023a2:	bf00      	nop
 80023a4:	40021000 	.word	0x40021000

080023a8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	b084      	sub	sp, #16
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
 80023b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80023b2:	2300      	movs	r3, #0
 80023b4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80023b6:	4b74      	ldr	r3, [pc, #464]	; (8002588 <RCCEx_PLLSAI1_Config+0x1e0>)
 80023b8:	68db      	ldr	r3, [r3, #12]
 80023ba:	f003 0303 	and.w	r3, r3, #3
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d018      	beq.n	80023f4 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80023c2:	4b71      	ldr	r3, [pc, #452]	; (8002588 <RCCEx_PLLSAI1_Config+0x1e0>)
 80023c4:	68db      	ldr	r3, [r3, #12]
 80023c6:	f003 0203 	and.w	r2, r3, #3
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	429a      	cmp	r2, r3
 80023d0:	d10d      	bne.n	80023ee <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
       ||
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d009      	beq.n	80023ee <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80023da:	4b6b      	ldr	r3, [pc, #428]	; (8002588 <RCCEx_PLLSAI1_Config+0x1e0>)
 80023dc:	68db      	ldr	r3, [r3, #12]
 80023de:	091b      	lsrs	r3, r3, #4
 80023e0:	f003 0307 	and.w	r3, r3, #7
 80023e4:	1c5a      	adds	r2, r3, #1
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	685b      	ldr	r3, [r3, #4]
       ||
 80023ea:	429a      	cmp	r2, r3
 80023ec:	d047      	beq.n	800247e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80023ee:	2301      	movs	r3, #1
 80023f0:	73fb      	strb	r3, [r7, #15]
 80023f2:	e044      	b.n	800247e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	2b03      	cmp	r3, #3
 80023fa:	d018      	beq.n	800242e <RCCEx_PLLSAI1_Config+0x86>
 80023fc:	2b03      	cmp	r3, #3
 80023fe:	d825      	bhi.n	800244c <RCCEx_PLLSAI1_Config+0xa4>
 8002400:	2b01      	cmp	r3, #1
 8002402:	d002      	beq.n	800240a <RCCEx_PLLSAI1_Config+0x62>
 8002404:	2b02      	cmp	r3, #2
 8002406:	d009      	beq.n	800241c <RCCEx_PLLSAI1_Config+0x74>
 8002408:	e020      	b.n	800244c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800240a:	4b5f      	ldr	r3, [pc, #380]	; (8002588 <RCCEx_PLLSAI1_Config+0x1e0>)
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f003 0302 	and.w	r3, r3, #2
 8002412:	2b00      	cmp	r3, #0
 8002414:	d11d      	bne.n	8002452 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002416:	2301      	movs	r3, #1
 8002418:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800241a:	e01a      	b.n	8002452 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800241c:	4b5a      	ldr	r3, [pc, #360]	; (8002588 <RCCEx_PLLSAI1_Config+0x1e0>)
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002424:	2b00      	cmp	r3, #0
 8002426:	d116      	bne.n	8002456 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002428:	2301      	movs	r3, #1
 800242a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800242c:	e013      	b.n	8002456 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800242e:	4b56      	ldr	r3, [pc, #344]	; (8002588 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002436:	2b00      	cmp	r3, #0
 8002438:	d10f      	bne.n	800245a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800243a:	4b53      	ldr	r3, [pc, #332]	; (8002588 <RCCEx_PLLSAI1_Config+0x1e0>)
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002442:	2b00      	cmp	r3, #0
 8002444:	d109      	bne.n	800245a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002446:	2301      	movs	r3, #1
 8002448:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800244a:	e006      	b.n	800245a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 800244c:	2301      	movs	r3, #1
 800244e:	73fb      	strb	r3, [r7, #15]
      break;
 8002450:	e004      	b.n	800245c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002452:	bf00      	nop
 8002454:	e002      	b.n	800245c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002456:	bf00      	nop
 8002458:	e000      	b.n	800245c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800245a:	bf00      	nop
    }

    if(status == HAL_OK)
 800245c:	7bfb      	ldrb	r3, [r7, #15]
 800245e:	2b00      	cmp	r3, #0
 8002460:	d10d      	bne.n	800247e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002462:	4b49      	ldr	r3, [pc, #292]	; (8002588 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002464:	68db      	ldr	r3, [r3, #12]
 8002466:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	6819      	ldr	r1, [r3, #0]
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	685b      	ldr	r3, [r3, #4]
 8002472:	3b01      	subs	r3, #1
 8002474:	011b      	lsls	r3, r3, #4
 8002476:	430b      	orrs	r3, r1
 8002478:	4943      	ldr	r1, [pc, #268]	; (8002588 <RCCEx_PLLSAI1_Config+0x1e0>)
 800247a:	4313      	orrs	r3, r2
 800247c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800247e:	7bfb      	ldrb	r3, [r7, #15]
 8002480:	2b00      	cmp	r3, #0
 8002482:	d17c      	bne.n	800257e <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002484:	4b40      	ldr	r3, [pc, #256]	; (8002588 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	4a3f      	ldr	r2, [pc, #252]	; (8002588 <RCCEx_PLLSAI1_Config+0x1e0>)
 800248a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800248e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002490:	f7fe fc36 	bl	8000d00 <HAL_GetTick>
 8002494:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002496:	e009      	b.n	80024ac <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002498:	f7fe fc32 	bl	8000d00 <HAL_GetTick>
 800249c:	4602      	mov	r2, r0
 800249e:	68bb      	ldr	r3, [r7, #8]
 80024a0:	1ad3      	subs	r3, r2, r3
 80024a2:	2b02      	cmp	r3, #2
 80024a4:	d902      	bls.n	80024ac <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80024a6:	2303      	movs	r3, #3
 80024a8:	73fb      	strb	r3, [r7, #15]
        break;
 80024aa:	e005      	b.n	80024b8 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80024ac:	4b36      	ldr	r3, [pc, #216]	; (8002588 <RCCEx_PLLSAI1_Config+0x1e0>)
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d1ef      	bne.n	8002498 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80024b8:	7bfb      	ldrb	r3, [r7, #15]
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d15f      	bne.n	800257e <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80024be:	683b      	ldr	r3, [r7, #0]
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d110      	bne.n	80024e6 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80024c4:	4b30      	ldr	r3, [pc, #192]	; (8002588 <RCCEx_PLLSAI1_Config+0x1e0>)
 80024c6:	691b      	ldr	r3, [r3, #16]
 80024c8:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 80024cc:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80024d0:	687a      	ldr	r2, [r7, #4]
 80024d2:	6892      	ldr	r2, [r2, #8]
 80024d4:	0211      	lsls	r1, r2, #8
 80024d6:	687a      	ldr	r2, [r7, #4]
 80024d8:	68d2      	ldr	r2, [r2, #12]
 80024da:	06d2      	lsls	r2, r2, #27
 80024dc:	430a      	orrs	r2, r1
 80024de:	492a      	ldr	r1, [pc, #168]	; (8002588 <RCCEx_PLLSAI1_Config+0x1e0>)
 80024e0:	4313      	orrs	r3, r2
 80024e2:	610b      	str	r3, [r1, #16]
 80024e4:	e027      	b.n	8002536 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80024e6:	683b      	ldr	r3, [r7, #0]
 80024e8:	2b01      	cmp	r3, #1
 80024ea:	d112      	bne.n	8002512 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80024ec:	4b26      	ldr	r3, [pc, #152]	; (8002588 <RCCEx_PLLSAI1_Config+0x1e0>)
 80024ee:	691b      	ldr	r3, [r3, #16]
 80024f0:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80024f4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80024f8:	687a      	ldr	r2, [r7, #4]
 80024fa:	6892      	ldr	r2, [r2, #8]
 80024fc:	0211      	lsls	r1, r2, #8
 80024fe:	687a      	ldr	r2, [r7, #4]
 8002500:	6912      	ldr	r2, [r2, #16]
 8002502:	0852      	lsrs	r2, r2, #1
 8002504:	3a01      	subs	r2, #1
 8002506:	0552      	lsls	r2, r2, #21
 8002508:	430a      	orrs	r2, r1
 800250a:	491f      	ldr	r1, [pc, #124]	; (8002588 <RCCEx_PLLSAI1_Config+0x1e0>)
 800250c:	4313      	orrs	r3, r2
 800250e:	610b      	str	r3, [r1, #16]
 8002510:	e011      	b.n	8002536 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002512:	4b1d      	ldr	r3, [pc, #116]	; (8002588 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002514:	691b      	ldr	r3, [r3, #16]
 8002516:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800251a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800251e:	687a      	ldr	r2, [r7, #4]
 8002520:	6892      	ldr	r2, [r2, #8]
 8002522:	0211      	lsls	r1, r2, #8
 8002524:	687a      	ldr	r2, [r7, #4]
 8002526:	6952      	ldr	r2, [r2, #20]
 8002528:	0852      	lsrs	r2, r2, #1
 800252a:	3a01      	subs	r2, #1
 800252c:	0652      	lsls	r2, r2, #25
 800252e:	430a      	orrs	r2, r1
 8002530:	4915      	ldr	r1, [pc, #84]	; (8002588 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002532:	4313      	orrs	r3, r2
 8002534:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002536:	4b14      	ldr	r3, [pc, #80]	; (8002588 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	4a13      	ldr	r2, [pc, #76]	; (8002588 <RCCEx_PLLSAI1_Config+0x1e0>)
 800253c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002540:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002542:	f7fe fbdd 	bl	8000d00 <HAL_GetTick>
 8002546:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002548:	e009      	b.n	800255e <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800254a:	f7fe fbd9 	bl	8000d00 <HAL_GetTick>
 800254e:	4602      	mov	r2, r0
 8002550:	68bb      	ldr	r3, [r7, #8]
 8002552:	1ad3      	subs	r3, r2, r3
 8002554:	2b02      	cmp	r3, #2
 8002556:	d902      	bls.n	800255e <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8002558:	2303      	movs	r3, #3
 800255a:	73fb      	strb	r3, [r7, #15]
          break;
 800255c:	e005      	b.n	800256a <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800255e:	4b0a      	ldr	r3, [pc, #40]	; (8002588 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002566:	2b00      	cmp	r3, #0
 8002568:	d0ef      	beq.n	800254a <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 800256a:	7bfb      	ldrb	r3, [r7, #15]
 800256c:	2b00      	cmp	r3, #0
 800256e:	d106      	bne.n	800257e <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002570:	4b05      	ldr	r3, [pc, #20]	; (8002588 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002572:	691a      	ldr	r2, [r3, #16]
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	699b      	ldr	r3, [r3, #24]
 8002578:	4903      	ldr	r1, [pc, #12]	; (8002588 <RCCEx_PLLSAI1_Config+0x1e0>)
 800257a:	4313      	orrs	r3, r2
 800257c:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800257e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002580:	4618      	mov	r0, r3
 8002582:	3710      	adds	r7, #16
 8002584:	46bd      	mov	sp, r7
 8002586:	bd80      	pop	{r7, pc}
 8002588:	40021000 	.word	0x40021000

0800258c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800258c:	b580      	push	{r7, lr}
 800258e:	b082      	sub	sp, #8
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	2b00      	cmp	r3, #0
 8002598:	d101      	bne.n	800259e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800259a:	2301      	movs	r3, #1
 800259c:	e049      	b.n	8002632 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80025a4:	b2db      	uxtb	r3, r3
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d106      	bne.n	80025b8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	2200      	movs	r2, #0
 80025ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80025b2:	6878      	ldr	r0, [r7, #4]
 80025b4:	f7fe f9d2 	bl	800095c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	2202      	movs	r2, #2
 80025bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681a      	ldr	r2, [r3, #0]
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	3304      	adds	r3, #4
 80025c8:	4619      	mov	r1, r3
 80025ca:	4610      	mov	r0, r2
 80025cc:	f000 fcf0 	bl	8002fb0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	2201      	movs	r2, #1
 80025d4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	2201      	movs	r2, #1
 80025dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	2201      	movs	r2, #1
 80025e4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	2201      	movs	r2, #1
 80025ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	2201      	movs	r2, #1
 80025f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	2201      	movs	r2, #1
 80025fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	2201      	movs	r2, #1
 8002604:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	2201      	movs	r2, #1
 800260c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	2201      	movs	r2, #1
 8002614:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	2201      	movs	r2, #1
 800261c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	2201      	movs	r2, #1
 8002624:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	2201      	movs	r2, #1
 800262c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002630:	2300      	movs	r3, #0
}
 8002632:	4618      	mov	r0, r3
 8002634:	3708      	adds	r7, #8
 8002636:	46bd      	mov	sp, r7
 8002638:	bd80      	pop	{r7, pc}
	...

0800263c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800263c:	b480      	push	{r7}
 800263e:	b085      	sub	sp, #20
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800264a:	b2db      	uxtb	r3, r3
 800264c:	2b01      	cmp	r3, #1
 800264e:	d001      	beq.n	8002654 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002650:	2301      	movs	r3, #1
 8002652:	e03b      	b.n	80026cc <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	2202      	movs	r2, #2
 8002658:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	68da      	ldr	r2, [r3, #12]
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f042 0201 	orr.w	r2, r2, #1
 800266a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	4a19      	ldr	r2, [pc, #100]	; (80026d8 <HAL_TIM_Base_Start_IT+0x9c>)
 8002672:	4293      	cmp	r3, r2
 8002674:	d009      	beq.n	800268a <HAL_TIM_Base_Start_IT+0x4e>
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800267e:	d004      	beq.n	800268a <HAL_TIM_Base_Start_IT+0x4e>
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	4a15      	ldr	r2, [pc, #84]	; (80026dc <HAL_TIM_Base_Start_IT+0xa0>)
 8002686:	4293      	cmp	r3, r2
 8002688:	d115      	bne.n	80026b6 <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	689a      	ldr	r2, [r3, #8]
 8002690:	4b13      	ldr	r3, [pc, #76]	; (80026e0 <HAL_TIM_Base_Start_IT+0xa4>)
 8002692:	4013      	ands	r3, r2
 8002694:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	2b06      	cmp	r3, #6
 800269a:	d015      	beq.n	80026c8 <HAL_TIM_Base_Start_IT+0x8c>
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80026a2:	d011      	beq.n	80026c8 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	681a      	ldr	r2, [r3, #0]
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f042 0201 	orr.w	r2, r2, #1
 80026b2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80026b4:	e008      	b.n	80026c8 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	681a      	ldr	r2, [r3, #0]
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f042 0201 	orr.w	r2, r2, #1
 80026c4:	601a      	str	r2, [r3, #0]
 80026c6:	e000      	b.n	80026ca <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80026c8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80026ca:	2300      	movs	r3, #0
}
 80026cc:	4618      	mov	r0, r3
 80026ce:	3714      	adds	r7, #20
 80026d0:	46bd      	mov	sp, r7
 80026d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d6:	4770      	bx	lr
 80026d8:	40012c00 	.word	0x40012c00
 80026dc:	40014000 	.word	0x40014000
 80026e0:	00010007 	.word	0x00010007

080026e4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80026e4:	b580      	push	{r7, lr}
 80026e6:	b082      	sub	sp, #8
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d101      	bne.n	80026f6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80026f2:	2301      	movs	r3, #1
 80026f4:	e049      	b.n	800278a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80026fc:	b2db      	uxtb	r3, r3
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d106      	bne.n	8002710 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	2200      	movs	r2, #0
 8002706:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800270a:	6878      	ldr	r0, [r7, #4]
 800270c:	f000 f841 	bl	8002792 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	2202      	movs	r2, #2
 8002714:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681a      	ldr	r2, [r3, #0]
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	3304      	adds	r3, #4
 8002720:	4619      	mov	r1, r3
 8002722:	4610      	mov	r0, r2
 8002724:	f000 fc44 	bl	8002fb0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	2201      	movs	r2, #1
 800272c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	2201      	movs	r2, #1
 8002734:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	2201      	movs	r2, #1
 800273c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	2201      	movs	r2, #1
 8002744:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	2201      	movs	r2, #1
 800274c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	2201      	movs	r2, #1
 8002754:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	2201      	movs	r2, #1
 800275c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	2201      	movs	r2, #1
 8002764:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	2201      	movs	r2, #1
 800276c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	2201      	movs	r2, #1
 8002774:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	2201      	movs	r2, #1
 800277c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	2201      	movs	r2, #1
 8002784:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002788:	2300      	movs	r3, #0
}
 800278a:	4618      	mov	r0, r3
 800278c:	3708      	adds	r7, #8
 800278e:	46bd      	mov	sp, r7
 8002790:	bd80      	pop	{r7, pc}

08002792 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002792:	b480      	push	{r7}
 8002794:	b083      	sub	sp, #12
 8002796:	af00      	add	r7, sp, #0
 8002798:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800279a:	bf00      	nop
 800279c:	370c      	adds	r7, #12
 800279e:	46bd      	mov	sp, r7
 80027a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a4:	4770      	bx	lr
	...

080027a8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80027a8:	b580      	push	{r7, lr}
 80027aa:	b084      	sub	sp, #16
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	6078      	str	r0, [r7, #4]
 80027b0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80027b2:	683b      	ldr	r3, [r7, #0]
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d109      	bne.n	80027cc <HAL_TIM_PWM_Start+0x24>
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80027be:	b2db      	uxtb	r3, r3
 80027c0:	2b01      	cmp	r3, #1
 80027c2:	bf14      	ite	ne
 80027c4:	2301      	movne	r3, #1
 80027c6:	2300      	moveq	r3, #0
 80027c8:	b2db      	uxtb	r3, r3
 80027ca:	e03c      	b.n	8002846 <HAL_TIM_PWM_Start+0x9e>
 80027cc:	683b      	ldr	r3, [r7, #0]
 80027ce:	2b04      	cmp	r3, #4
 80027d0:	d109      	bne.n	80027e6 <HAL_TIM_PWM_Start+0x3e>
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80027d8:	b2db      	uxtb	r3, r3
 80027da:	2b01      	cmp	r3, #1
 80027dc:	bf14      	ite	ne
 80027de:	2301      	movne	r3, #1
 80027e0:	2300      	moveq	r3, #0
 80027e2:	b2db      	uxtb	r3, r3
 80027e4:	e02f      	b.n	8002846 <HAL_TIM_PWM_Start+0x9e>
 80027e6:	683b      	ldr	r3, [r7, #0]
 80027e8:	2b08      	cmp	r3, #8
 80027ea:	d109      	bne.n	8002800 <HAL_TIM_PWM_Start+0x58>
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80027f2:	b2db      	uxtb	r3, r3
 80027f4:	2b01      	cmp	r3, #1
 80027f6:	bf14      	ite	ne
 80027f8:	2301      	movne	r3, #1
 80027fa:	2300      	moveq	r3, #0
 80027fc:	b2db      	uxtb	r3, r3
 80027fe:	e022      	b.n	8002846 <HAL_TIM_PWM_Start+0x9e>
 8002800:	683b      	ldr	r3, [r7, #0]
 8002802:	2b0c      	cmp	r3, #12
 8002804:	d109      	bne.n	800281a <HAL_TIM_PWM_Start+0x72>
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800280c:	b2db      	uxtb	r3, r3
 800280e:	2b01      	cmp	r3, #1
 8002810:	bf14      	ite	ne
 8002812:	2301      	movne	r3, #1
 8002814:	2300      	moveq	r3, #0
 8002816:	b2db      	uxtb	r3, r3
 8002818:	e015      	b.n	8002846 <HAL_TIM_PWM_Start+0x9e>
 800281a:	683b      	ldr	r3, [r7, #0]
 800281c:	2b10      	cmp	r3, #16
 800281e:	d109      	bne.n	8002834 <HAL_TIM_PWM_Start+0x8c>
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002826:	b2db      	uxtb	r3, r3
 8002828:	2b01      	cmp	r3, #1
 800282a:	bf14      	ite	ne
 800282c:	2301      	movne	r3, #1
 800282e:	2300      	moveq	r3, #0
 8002830:	b2db      	uxtb	r3, r3
 8002832:	e008      	b.n	8002846 <HAL_TIM_PWM_Start+0x9e>
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800283a:	b2db      	uxtb	r3, r3
 800283c:	2b01      	cmp	r3, #1
 800283e:	bf14      	ite	ne
 8002840:	2301      	movne	r3, #1
 8002842:	2300      	moveq	r3, #0
 8002844:	b2db      	uxtb	r3, r3
 8002846:	2b00      	cmp	r3, #0
 8002848:	d001      	beq.n	800284e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800284a:	2301      	movs	r3, #1
 800284c:	e07e      	b.n	800294c <HAL_TIM_PWM_Start+0x1a4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800284e:	683b      	ldr	r3, [r7, #0]
 8002850:	2b00      	cmp	r3, #0
 8002852:	d104      	bne.n	800285e <HAL_TIM_PWM_Start+0xb6>
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	2202      	movs	r2, #2
 8002858:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800285c:	e023      	b.n	80028a6 <HAL_TIM_PWM_Start+0xfe>
 800285e:	683b      	ldr	r3, [r7, #0]
 8002860:	2b04      	cmp	r3, #4
 8002862:	d104      	bne.n	800286e <HAL_TIM_PWM_Start+0xc6>
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	2202      	movs	r2, #2
 8002868:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800286c:	e01b      	b.n	80028a6 <HAL_TIM_PWM_Start+0xfe>
 800286e:	683b      	ldr	r3, [r7, #0]
 8002870:	2b08      	cmp	r3, #8
 8002872:	d104      	bne.n	800287e <HAL_TIM_PWM_Start+0xd6>
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	2202      	movs	r2, #2
 8002878:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800287c:	e013      	b.n	80028a6 <HAL_TIM_PWM_Start+0xfe>
 800287e:	683b      	ldr	r3, [r7, #0]
 8002880:	2b0c      	cmp	r3, #12
 8002882:	d104      	bne.n	800288e <HAL_TIM_PWM_Start+0xe6>
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	2202      	movs	r2, #2
 8002888:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800288c:	e00b      	b.n	80028a6 <HAL_TIM_PWM_Start+0xfe>
 800288e:	683b      	ldr	r3, [r7, #0]
 8002890:	2b10      	cmp	r3, #16
 8002892:	d104      	bne.n	800289e <HAL_TIM_PWM_Start+0xf6>
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	2202      	movs	r2, #2
 8002898:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800289c:	e003      	b.n	80028a6 <HAL_TIM_PWM_Start+0xfe>
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	2202      	movs	r2, #2
 80028a2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	2201      	movs	r2, #1
 80028ac:	6839      	ldr	r1, [r7, #0]
 80028ae:	4618      	mov	r0, r3
 80028b0:	f000 fefa 	bl	80036a8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	4a26      	ldr	r2, [pc, #152]	; (8002954 <HAL_TIM_PWM_Start+0x1ac>)
 80028ba:	4293      	cmp	r3, r2
 80028bc:	d009      	beq.n	80028d2 <HAL_TIM_PWM_Start+0x12a>
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	4a25      	ldr	r2, [pc, #148]	; (8002958 <HAL_TIM_PWM_Start+0x1b0>)
 80028c4:	4293      	cmp	r3, r2
 80028c6:	d004      	beq.n	80028d2 <HAL_TIM_PWM_Start+0x12a>
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	4a23      	ldr	r2, [pc, #140]	; (800295c <HAL_TIM_PWM_Start+0x1b4>)
 80028ce:	4293      	cmp	r3, r2
 80028d0:	d101      	bne.n	80028d6 <HAL_TIM_PWM_Start+0x12e>
 80028d2:	2301      	movs	r3, #1
 80028d4:	e000      	b.n	80028d8 <HAL_TIM_PWM_Start+0x130>
 80028d6:	2300      	movs	r3, #0
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d007      	beq.n	80028ec <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80028ea:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	4a18      	ldr	r2, [pc, #96]	; (8002954 <HAL_TIM_PWM_Start+0x1ac>)
 80028f2:	4293      	cmp	r3, r2
 80028f4:	d009      	beq.n	800290a <HAL_TIM_PWM_Start+0x162>
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028fe:	d004      	beq.n	800290a <HAL_TIM_PWM_Start+0x162>
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	4a14      	ldr	r2, [pc, #80]	; (8002958 <HAL_TIM_PWM_Start+0x1b0>)
 8002906:	4293      	cmp	r3, r2
 8002908:	d115      	bne.n	8002936 <HAL_TIM_PWM_Start+0x18e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	689a      	ldr	r2, [r3, #8]
 8002910:	4b13      	ldr	r3, [pc, #76]	; (8002960 <HAL_TIM_PWM_Start+0x1b8>)
 8002912:	4013      	ands	r3, r2
 8002914:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	2b06      	cmp	r3, #6
 800291a:	d015      	beq.n	8002948 <HAL_TIM_PWM_Start+0x1a0>
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002922:	d011      	beq.n	8002948 <HAL_TIM_PWM_Start+0x1a0>
    {
      __HAL_TIM_ENABLE(htim);
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	681a      	ldr	r2, [r3, #0]
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f042 0201 	orr.w	r2, r2, #1
 8002932:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002934:	e008      	b.n	8002948 <HAL_TIM_PWM_Start+0x1a0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	681a      	ldr	r2, [r3, #0]
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f042 0201 	orr.w	r2, r2, #1
 8002944:	601a      	str	r2, [r3, #0]
 8002946:	e000      	b.n	800294a <HAL_TIM_PWM_Start+0x1a2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002948:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800294a:	2300      	movs	r3, #0
}
 800294c:	4618      	mov	r0, r3
 800294e:	3710      	adds	r7, #16
 8002950:	46bd      	mov	sp, r7
 8002952:	bd80      	pop	{r7, pc}
 8002954:	40012c00 	.word	0x40012c00
 8002958:	40014000 	.word	0x40014000
 800295c:	40014400 	.word	0x40014400
 8002960:	00010007 	.word	0x00010007

08002964 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002964:	b580      	push	{r7, lr}
 8002966:	b082      	sub	sp, #8
 8002968:	af00      	add	r7, sp, #0
 800296a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	691b      	ldr	r3, [r3, #16]
 8002972:	f003 0302 	and.w	r3, r3, #2
 8002976:	2b02      	cmp	r3, #2
 8002978:	d122      	bne.n	80029c0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	68db      	ldr	r3, [r3, #12]
 8002980:	f003 0302 	and.w	r3, r3, #2
 8002984:	2b02      	cmp	r3, #2
 8002986:	d11b      	bne.n	80029c0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f06f 0202 	mvn.w	r2, #2
 8002990:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	2201      	movs	r2, #1
 8002996:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	699b      	ldr	r3, [r3, #24]
 800299e:	f003 0303 	and.w	r3, r3, #3
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d003      	beq.n	80029ae <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80029a6:	6878      	ldr	r0, [r7, #4]
 80029a8:	f000 fae3 	bl	8002f72 <HAL_TIM_IC_CaptureCallback>
 80029ac:	e005      	b.n	80029ba <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80029ae:	6878      	ldr	r0, [r7, #4]
 80029b0:	f000 fad5 	bl	8002f5e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80029b4:	6878      	ldr	r0, [r7, #4]
 80029b6:	f000 fae6 	bl	8002f86 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	2200      	movs	r2, #0
 80029be:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	691b      	ldr	r3, [r3, #16]
 80029c6:	f003 0304 	and.w	r3, r3, #4
 80029ca:	2b04      	cmp	r3, #4
 80029cc:	d122      	bne.n	8002a14 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	68db      	ldr	r3, [r3, #12]
 80029d4:	f003 0304 	and.w	r3, r3, #4
 80029d8:	2b04      	cmp	r3, #4
 80029da:	d11b      	bne.n	8002a14 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f06f 0204 	mvn.w	r2, #4
 80029e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	2202      	movs	r2, #2
 80029ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	699b      	ldr	r3, [r3, #24]
 80029f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d003      	beq.n	8002a02 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80029fa:	6878      	ldr	r0, [r7, #4]
 80029fc:	f000 fab9 	bl	8002f72 <HAL_TIM_IC_CaptureCallback>
 8002a00:	e005      	b.n	8002a0e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a02:	6878      	ldr	r0, [r7, #4]
 8002a04:	f000 faab 	bl	8002f5e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a08:	6878      	ldr	r0, [r7, #4]
 8002a0a:	f000 fabc 	bl	8002f86 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	2200      	movs	r2, #0
 8002a12:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	691b      	ldr	r3, [r3, #16]
 8002a1a:	f003 0308 	and.w	r3, r3, #8
 8002a1e:	2b08      	cmp	r3, #8
 8002a20:	d122      	bne.n	8002a68 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	68db      	ldr	r3, [r3, #12]
 8002a28:	f003 0308 	and.w	r3, r3, #8
 8002a2c:	2b08      	cmp	r3, #8
 8002a2e:	d11b      	bne.n	8002a68 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f06f 0208 	mvn.w	r2, #8
 8002a38:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	2204      	movs	r2, #4
 8002a3e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	69db      	ldr	r3, [r3, #28]
 8002a46:	f003 0303 	and.w	r3, r3, #3
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d003      	beq.n	8002a56 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a4e:	6878      	ldr	r0, [r7, #4]
 8002a50:	f000 fa8f 	bl	8002f72 <HAL_TIM_IC_CaptureCallback>
 8002a54:	e005      	b.n	8002a62 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a56:	6878      	ldr	r0, [r7, #4]
 8002a58:	f000 fa81 	bl	8002f5e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a5c:	6878      	ldr	r0, [r7, #4]
 8002a5e:	f000 fa92 	bl	8002f86 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	2200      	movs	r2, #0
 8002a66:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	691b      	ldr	r3, [r3, #16]
 8002a6e:	f003 0310 	and.w	r3, r3, #16
 8002a72:	2b10      	cmp	r3, #16
 8002a74:	d122      	bne.n	8002abc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	68db      	ldr	r3, [r3, #12]
 8002a7c:	f003 0310 	and.w	r3, r3, #16
 8002a80:	2b10      	cmp	r3, #16
 8002a82:	d11b      	bne.n	8002abc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f06f 0210 	mvn.w	r2, #16
 8002a8c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	2208      	movs	r2, #8
 8002a92:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	69db      	ldr	r3, [r3, #28]
 8002a9a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d003      	beq.n	8002aaa <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002aa2:	6878      	ldr	r0, [r7, #4]
 8002aa4:	f000 fa65 	bl	8002f72 <HAL_TIM_IC_CaptureCallback>
 8002aa8:	e005      	b.n	8002ab6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002aaa:	6878      	ldr	r0, [r7, #4]
 8002aac:	f000 fa57 	bl	8002f5e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ab0:	6878      	ldr	r0, [r7, #4]
 8002ab2:	f000 fa68 	bl	8002f86 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	2200      	movs	r2, #0
 8002aba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	691b      	ldr	r3, [r3, #16]
 8002ac2:	f003 0301 	and.w	r3, r3, #1
 8002ac6:	2b01      	cmp	r3, #1
 8002ac8:	d10e      	bne.n	8002ae8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	68db      	ldr	r3, [r3, #12]
 8002ad0:	f003 0301 	and.w	r3, r3, #1
 8002ad4:	2b01      	cmp	r3, #1
 8002ad6:	d107      	bne.n	8002ae8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f06f 0201 	mvn.w	r2, #1
 8002ae0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002ae2:	6878      	ldr	r0, [r7, #4]
 8002ae4:	f7fd fefa 	bl	80008dc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	691b      	ldr	r3, [r3, #16]
 8002aee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002af2:	2b80      	cmp	r3, #128	; 0x80
 8002af4:	d10e      	bne.n	8002b14 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	68db      	ldr	r3, [r3, #12]
 8002afc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b00:	2b80      	cmp	r3, #128	; 0x80
 8002b02:	d107      	bne.n	8002b14 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002b0c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002b0e:	6878      	ldr	r0, [r7, #4]
 8002b10:	f000 fe60 	bl	80037d4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	691b      	ldr	r3, [r3, #16]
 8002b1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b1e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002b22:	d10e      	bne.n	8002b42 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	68db      	ldr	r3, [r3, #12]
 8002b2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b2e:	2b80      	cmp	r3, #128	; 0x80
 8002b30:	d107      	bne.n	8002b42 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002b3a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002b3c:	6878      	ldr	r0, [r7, #4]
 8002b3e:	f000 fe53 	bl	80037e8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	691b      	ldr	r3, [r3, #16]
 8002b48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b4c:	2b40      	cmp	r3, #64	; 0x40
 8002b4e:	d10e      	bne.n	8002b6e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	68db      	ldr	r3, [r3, #12]
 8002b56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b5a:	2b40      	cmp	r3, #64	; 0x40
 8002b5c:	d107      	bne.n	8002b6e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002b66:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002b68:	6878      	ldr	r0, [r7, #4]
 8002b6a:	f000 fa16 	bl	8002f9a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	691b      	ldr	r3, [r3, #16]
 8002b74:	f003 0320 	and.w	r3, r3, #32
 8002b78:	2b20      	cmp	r3, #32
 8002b7a:	d10e      	bne.n	8002b9a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	68db      	ldr	r3, [r3, #12]
 8002b82:	f003 0320 	and.w	r3, r3, #32
 8002b86:	2b20      	cmp	r3, #32
 8002b88:	d107      	bne.n	8002b9a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f06f 0220 	mvn.w	r2, #32
 8002b92:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002b94:	6878      	ldr	r0, [r7, #4]
 8002b96:	f000 fe13 	bl	80037c0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002b9a:	bf00      	nop
 8002b9c:	3708      	adds	r7, #8
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	bd80      	pop	{r7, pc}
	...

08002ba4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002ba4:	b580      	push	{r7, lr}
 8002ba6:	b086      	sub	sp, #24
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	60f8      	str	r0, [r7, #12]
 8002bac:	60b9      	str	r1, [r7, #8]
 8002bae:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002bb0:	2300      	movs	r3, #0
 8002bb2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002bba:	2b01      	cmp	r3, #1
 8002bbc:	d101      	bne.n	8002bc2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002bbe:	2302      	movs	r3, #2
 8002bc0:	e0ff      	b.n	8002dc2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	2201      	movs	r2, #1
 8002bc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	2b14      	cmp	r3, #20
 8002bce:	f200 80f0 	bhi.w	8002db2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8002bd2:	a201      	add	r2, pc, #4	; (adr r2, 8002bd8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002bd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bd8:	08002c2d 	.word	0x08002c2d
 8002bdc:	08002db3 	.word	0x08002db3
 8002be0:	08002db3 	.word	0x08002db3
 8002be4:	08002db3 	.word	0x08002db3
 8002be8:	08002c6d 	.word	0x08002c6d
 8002bec:	08002db3 	.word	0x08002db3
 8002bf0:	08002db3 	.word	0x08002db3
 8002bf4:	08002db3 	.word	0x08002db3
 8002bf8:	08002caf 	.word	0x08002caf
 8002bfc:	08002db3 	.word	0x08002db3
 8002c00:	08002db3 	.word	0x08002db3
 8002c04:	08002db3 	.word	0x08002db3
 8002c08:	08002cef 	.word	0x08002cef
 8002c0c:	08002db3 	.word	0x08002db3
 8002c10:	08002db3 	.word	0x08002db3
 8002c14:	08002db3 	.word	0x08002db3
 8002c18:	08002d31 	.word	0x08002d31
 8002c1c:	08002db3 	.word	0x08002db3
 8002c20:	08002db3 	.word	0x08002db3
 8002c24:	08002db3 	.word	0x08002db3
 8002c28:	08002d71 	.word	0x08002d71
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	68b9      	ldr	r1, [r7, #8]
 8002c32:	4618      	mov	r0, r3
 8002c34:	f000 fa20 	bl	8003078 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	699a      	ldr	r2, [r3, #24]
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f042 0208 	orr.w	r2, r2, #8
 8002c46:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	699a      	ldr	r2, [r3, #24]
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f022 0204 	bic.w	r2, r2, #4
 8002c56:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	6999      	ldr	r1, [r3, #24]
 8002c5e:	68bb      	ldr	r3, [r7, #8]
 8002c60:	691a      	ldr	r2, [r3, #16]
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	430a      	orrs	r2, r1
 8002c68:	619a      	str	r2, [r3, #24]
      break;
 8002c6a:	e0a5      	b.n	8002db8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	68b9      	ldr	r1, [r7, #8]
 8002c72:	4618      	mov	r0, r3
 8002c74:	f000 fa7c 	bl	8003170 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	699a      	ldr	r2, [r3, #24]
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002c86:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	699a      	ldr	r2, [r3, #24]
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002c96:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	6999      	ldr	r1, [r3, #24]
 8002c9e:	68bb      	ldr	r3, [r7, #8]
 8002ca0:	691b      	ldr	r3, [r3, #16]
 8002ca2:	021a      	lsls	r2, r3, #8
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	430a      	orrs	r2, r1
 8002caa:	619a      	str	r2, [r3, #24]
      break;
 8002cac:	e084      	b.n	8002db8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	68b9      	ldr	r1, [r7, #8]
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	f000 fad5 	bl	8003264 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	69da      	ldr	r2, [r3, #28]
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f042 0208 	orr.w	r2, r2, #8
 8002cc8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	69da      	ldr	r2, [r3, #28]
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f022 0204 	bic.w	r2, r2, #4
 8002cd8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	69d9      	ldr	r1, [r3, #28]
 8002ce0:	68bb      	ldr	r3, [r7, #8]
 8002ce2:	691a      	ldr	r2, [r3, #16]
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	430a      	orrs	r2, r1
 8002cea:	61da      	str	r2, [r3, #28]
      break;
 8002cec:	e064      	b.n	8002db8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	68b9      	ldr	r1, [r7, #8]
 8002cf4:	4618      	mov	r0, r3
 8002cf6:	f000 fb2d 	bl	8003354 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	69da      	ldr	r2, [r3, #28]
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002d08:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	69da      	ldr	r2, [r3, #28]
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002d18:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	69d9      	ldr	r1, [r3, #28]
 8002d20:	68bb      	ldr	r3, [r7, #8]
 8002d22:	691b      	ldr	r3, [r3, #16]
 8002d24:	021a      	lsls	r2, r3, #8
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	430a      	orrs	r2, r1
 8002d2c:	61da      	str	r2, [r3, #28]
      break;
 8002d2e:	e043      	b.n	8002db8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	68b9      	ldr	r1, [r7, #8]
 8002d36:	4618      	mov	r0, r3
 8002d38:	f000 fb6a 	bl	8003410 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f042 0208 	orr.w	r2, r2, #8
 8002d4a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f022 0204 	bic.w	r2, r2, #4
 8002d5a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8002d62:	68bb      	ldr	r3, [r7, #8]
 8002d64:	691a      	ldr	r2, [r3, #16]
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	430a      	orrs	r2, r1
 8002d6c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8002d6e:	e023      	b.n	8002db8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	68b9      	ldr	r1, [r7, #8]
 8002d76:	4618      	mov	r0, r3
 8002d78:	f000 fba2 	bl	80034c0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002d8a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002d9a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8002da2:	68bb      	ldr	r3, [r7, #8]
 8002da4:	691b      	ldr	r3, [r3, #16]
 8002da6:	021a      	lsls	r2, r3, #8
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	430a      	orrs	r2, r1
 8002dae:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8002db0:	e002      	b.n	8002db8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8002db2:	2301      	movs	r3, #1
 8002db4:	75fb      	strb	r3, [r7, #23]
      break;
 8002db6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	2200      	movs	r2, #0
 8002dbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002dc0:	7dfb      	ldrb	r3, [r7, #23]
}
 8002dc2:	4618      	mov	r0, r3
 8002dc4:	3718      	adds	r7, #24
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	bd80      	pop	{r7, pc}
 8002dca:	bf00      	nop

08002dcc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	b084      	sub	sp, #16
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	6078      	str	r0, [r7, #4]
 8002dd4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002dd6:	2300      	movs	r3, #0
 8002dd8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002de0:	2b01      	cmp	r3, #1
 8002de2:	d101      	bne.n	8002de8 <HAL_TIM_ConfigClockSource+0x1c>
 8002de4:	2302      	movs	r3, #2
 8002de6:	e0b6      	b.n	8002f56 <HAL_TIM_ConfigClockSource+0x18a>
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	2201      	movs	r2, #1
 8002dec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	2202      	movs	r2, #2
 8002df4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	689b      	ldr	r3, [r3, #8]
 8002dfe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002e00:	68bb      	ldr	r3, [r7, #8]
 8002e02:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e06:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002e0a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002e0c:	68bb      	ldr	r3, [r7, #8]
 8002e0e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002e12:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	68ba      	ldr	r2, [r7, #8]
 8002e1a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002e1c:	683b      	ldr	r3, [r7, #0]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002e24:	d03e      	beq.n	8002ea4 <HAL_TIM_ConfigClockSource+0xd8>
 8002e26:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002e2a:	f200 8087 	bhi.w	8002f3c <HAL_TIM_ConfigClockSource+0x170>
 8002e2e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e32:	f000 8086 	beq.w	8002f42 <HAL_TIM_ConfigClockSource+0x176>
 8002e36:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e3a:	d87f      	bhi.n	8002f3c <HAL_TIM_ConfigClockSource+0x170>
 8002e3c:	2b70      	cmp	r3, #112	; 0x70
 8002e3e:	d01a      	beq.n	8002e76 <HAL_TIM_ConfigClockSource+0xaa>
 8002e40:	2b70      	cmp	r3, #112	; 0x70
 8002e42:	d87b      	bhi.n	8002f3c <HAL_TIM_ConfigClockSource+0x170>
 8002e44:	2b60      	cmp	r3, #96	; 0x60
 8002e46:	d050      	beq.n	8002eea <HAL_TIM_ConfigClockSource+0x11e>
 8002e48:	2b60      	cmp	r3, #96	; 0x60
 8002e4a:	d877      	bhi.n	8002f3c <HAL_TIM_ConfigClockSource+0x170>
 8002e4c:	2b50      	cmp	r3, #80	; 0x50
 8002e4e:	d03c      	beq.n	8002eca <HAL_TIM_ConfigClockSource+0xfe>
 8002e50:	2b50      	cmp	r3, #80	; 0x50
 8002e52:	d873      	bhi.n	8002f3c <HAL_TIM_ConfigClockSource+0x170>
 8002e54:	2b40      	cmp	r3, #64	; 0x40
 8002e56:	d058      	beq.n	8002f0a <HAL_TIM_ConfigClockSource+0x13e>
 8002e58:	2b40      	cmp	r3, #64	; 0x40
 8002e5a:	d86f      	bhi.n	8002f3c <HAL_TIM_ConfigClockSource+0x170>
 8002e5c:	2b30      	cmp	r3, #48	; 0x30
 8002e5e:	d064      	beq.n	8002f2a <HAL_TIM_ConfigClockSource+0x15e>
 8002e60:	2b30      	cmp	r3, #48	; 0x30
 8002e62:	d86b      	bhi.n	8002f3c <HAL_TIM_ConfigClockSource+0x170>
 8002e64:	2b20      	cmp	r3, #32
 8002e66:	d060      	beq.n	8002f2a <HAL_TIM_ConfigClockSource+0x15e>
 8002e68:	2b20      	cmp	r3, #32
 8002e6a:	d867      	bhi.n	8002f3c <HAL_TIM_ConfigClockSource+0x170>
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d05c      	beq.n	8002f2a <HAL_TIM_ConfigClockSource+0x15e>
 8002e70:	2b10      	cmp	r3, #16
 8002e72:	d05a      	beq.n	8002f2a <HAL_TIM_ConfigClockSource+0x15e>
 8002e74:	e062      	b.n	8002f3c <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	6818      	ldr	r0, [r3, #0]
 8002e7a:	683b      	ldr	r3, [r7, #0]
 8002e7c:	6899      	ldr	r1, [r3, #8]
 8002e7e:	683b      	ldr	r3, [r7, #0]
 8002e80:	685a      	ldr	r2, [r3, #4]
 8002e82:	683b      	ldr	r3, [r7, #0]
 8002e84:	68db      	ldr	r3, [r3, #12]
 8002e86:	f000 fbef 	bl	8003668 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	689b      	ldr	r3, [r3, #8]
 8002e90:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002e92:	68bb      	ldr	r3, [r7, #8]
 8002e94:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002e98:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	68ba      	ldr	r2, [r7, #8]
 8002ea0:	609a      	str	r2, [r3, #8]
      break;
 8002ea2:	e04f      	b.n	8002f44 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	6818      	ldr	r0, [r3, #0]
 8002ea8:	683b      	ldr	r3, [r7, #0]
 8002eaa:	6899      	ldr	r1, [r3, #8]
 8002eac:	683b      	ldr	r3, [r7, #0]
 8002eae:	685a      	ldr	r2, [r3, #4]
 8002eb0:	683b      	ldr	r3, [r7, #0]
 8002eb2:	68db      	ldr	r3, [r3, #12]
 8002eb4:	f000 fbd8 	bl	8003668 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	689a      	ldr	r2, [r3, #8]
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002ec6:	609a      	str	r2, [r3, #8]
      break;
 8002ec8:	e03c      	b.n	8002f44 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	6818      	ldr	r0, [r3, #0]
 8002ece:	683b      	ldr	r3, [r7, #0]
 8002ed0:	6859      	ldr	r1, [r3, #4]
 8002ed2:	683b      	ldr	r3, [r7, #0]
 8002ed4:	68db      	ldr	r3, [r3, #12]
 8002ed6:	461a      	mov	r2, r3
 8002ed8:	f000 fb4c 	bl	8003574 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	2150      	movs	r1, #80	; 0x50
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	f000 fba5 	bl	8003632 <TIM_ITRx_SetConfig>
      break;
 8002ee8:	e02c      	b.n	8002f44 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	6818      	ldr	r0, [r3, #0]
 8002eee:	683b      	ldr	r3, [r7, #0]
 8002ef0:	6859      	ldr	r1, [r3, #4]
 8002ef2:	683b      	ldr	r3, [r7, #0]
 8002ef4:	68db      	ldr	r3, [r3, #12]
 8002ef6:	461a      	mov	r2, r3
 8002ef8:	f000 fb6b 	bl	80035d2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	2160      	movs	r1, #96	; 0x60
 8002f02:	4618      	mov	r0, r3
 8002f04:	f000 fb95 	bl	8003632 <TIM_ITRx_SetConfig>
      break;
 8002f08:	e01c      	b.n	8002f44 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	6818      	ldr	r0, [r3, #0]
 8002f0e:	683b      	ldr	r3, [r7, #0]
 8002f10:	6859      	ldr	r1, [r3, #4]
 8002f12:	683b      	ldr	r3, [r7, #0]
 8002f14:	68db      	ldr	r3, [r3, #12]
 8002f16:	461a      	mov	r2, r3
 8002f18:	f000 fb2c 	bl	8003574 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	2140      	movs	r1, #64	; 0x40
 8002f22:	4618      	mov	r0, r3
 8002f24:	f000 fb85 	bl	8003632 <TIM_ITRx_SetConfig>
      break;
 8002f28:	e00c      	b.n	8002f44 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681a      	ldr	r2, [r3, #0]
 8002f2e:	683b      	ldr	r3, [r7, #0]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	4619      	mov	r1, r3
 8002f34:	4610      	mov	r0, r2
 8002f36:	f000 fb7c 	bl	8003632 <TIM_ITRx_SetConfig>
      break;
 8002f3a:	e003      	b.n	8002f44 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8002f3c:	2301      	movs	r3, #1
 8002f3e:	73fb      	strb	r3, [r7, #15]
      break;
 8002f40:	e000      	b.n	8002f44 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8002f42:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	2201      	movs	r2, #1
 8002f48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	2200      	movs	r2, #0
 8002f50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002f54:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f56:	4618      	mov	r0, r3
 8002f58:	3710      	adds	r7, #16
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	bd80      	pop	{r7, pc}

08002f5e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002f5e:	b480      	push	{r7}
 8002f60:	b083      	sub	sp, #12
 8002f62:	af00      	add	r7, sp, #0
 8002f64:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002f66:	bf00      	nop
 8002f68:	370c      	adds	r7, #12
 8002f6a:	46bd      	mov	sp, r7
 8002f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f70:	4770      	bx	lr

08002f72 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002f72:	b480      	push	{r7}
 8002f74:	b083      	sub	sp, #12
 8002f76:	af00      	add	r7, sp, #0
 8002f78:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002f7a:	bf00      	nop
 8002f7c:	370c      	adds	r7, #12
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f84:	4770      	bx	lr

08002f86 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002f86:	b480      	push	{r7}
 8002f88:	b083      	sub	sp, #12
 8002f8a:	af00      	add	r7, sp, #0
 8002f8c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002f8e:	bf00      	nop
 8002f90:	370c      	adds	r7, #12
 8002f92:	46bd      	mov	sp, r7
 8002f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f98:	4770      	bx	lr

08002f9a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002f9a:	b480      	push	{r7}
 8002f9c:	b083      	sub	sp, #12
 8002f9e:	af00      	add	r7, sp, #0
 8002fa0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002fa2:	bf00      	nop
 8002fa4:	370c      	adds	r7, #12
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fac:	4770      	bx	lr
	...

08002fb0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002fb0:	b480      	push	{r7}
 8002fb2:	b085      	sub	sp, #20
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	6078      	str	r0, [r7, #4]
 8002fb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	4a2a      	ldr	r2, [pc, #168]	; (800306c <TIM_Base_SetConfig+0xbc>)
 8002fc4:	4293      	cmp	r3, r2
 8002fc6:	d003      	beq.n	8002fd0 <TIM_Base_SetConfig+0x20>
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002fce:	d108      	bne.n	8002fe2 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002fd6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002fd8:	683b      	ldr	r3, [r7, #0]
 8002fda:	685b      	ldr	r3, [r3, #4]
 8002fdc:	68fa      	ldr	r2, [r7, #12]
 8002fde:	4313      	orrs	r3, r2
 8002fe0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	4a21      	ldr	r2, [pc, #132]	; (800306c <TIM_Base_SetConfig+0xbc>)
 8002fe6:	4293      	cmp	r3, r2
 8002fe8:	d00b      	beq.n	8003002 <TIM_Base_SetConfig+0x52>
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ff0:	d007      	beq.n	8003002 <TIM_Base_SetConfig+0x52>
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	4a1e      	ldr	r2, [pc, #120]	; (8003070 <TIM_Base_SetConfig+0xc0>)
 8002ff6:	4293      	cmp	r3, r2
 8002ff8:	d003      	beq.n	8003002 <TIM_Base_SetConfig+0x52>
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	4a1d      	ldr	r2, [pc, #116]	; (8003074 <TIM_Base_SetConfig+0xc4>)
 8002ffe:	4293      	cmp	r3, r2
 8003000:	d108      	bne.n	8003014 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003008:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800300a:	683b      	ldr	r3, [r7, #0]
 800300c:	68db      	ldr	r3, [r3, #12]
 800300e:	68fa      	ldr	r2, [r7, #12]
 8003010:	4313      	orrs	r3, r2
 8003012:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800301a:	683b      	ldr	r3, [r7, #0]
 800301c:	695b      	ldr	r3, [r3, #20]
 800301e:	4313      	orrs	r3, r2
 8003020:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	68fa      	ldr	r2, [r7, #12]
 8003026:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003028:	683b      	ldr	r3, [r7, #0]
 800302a:	689a      	ldr	r2, [r3, #8]
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003030:	683b      	ldr	r3, [r7, #0]
 8003032:	681a      	ldr	r2, [r3, #0]
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	4a0c      	ldr	r2, [pc, #48]	; (800306c <TIM_Base_SetConfig+0xbc>)
 800303c:	4293      	cmp	r3, r2
 800303e:	d007      	beq.n	8003050 <TIM_Base_SetConfig+0xa0>
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	4a0b      	ldr	r2, [pc, #44]	; (8003070 <TIM_Base_SetConfig+0xc0>)
 8003044:	4293      	cmp	r3, r2
 8003046:	d003      	beq.n	8003050 <TIM_Base_SetConfig+0xa0>
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	4a0a      	ldr	r2, [pc, #40]	; (8003074 <TIM_Base_SetConfig+0xc4>)
 800304c:	4293      	cmp	r3, r2
 800304e:	d103      	bne.n	8003058 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003050:	683b      	ldr	r3, [r7, #0]
 8003052:	691a      	ldr	r2, [r3, #16]
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	2201      	movs	r2, #1
 800305c:	615a      	str	r2, [r3, #20]
}
 800305e:	bf00      	nop
 8003060:	3714      	adds	r7, #20
 8003062:	46bd      	mov	sp, r7
 8003064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003068:	4770      	bx	lr
 800306a:	bf00      	nop
 800306c:	40012c00 	.word	0x40012c00
 8003070:	40014000 	.word	0x40014000
 8003074:	40014400 	.word	0x40014400

08003078 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003078:	b480      	push	{r7}
 800307a:	b087      	sub	sp, #28
 800307c:	af00      	add	r7, sp, #0
 800307e:	6078      	str	r0, [r7, #4]
 8003080:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	6a1b      	ldr	r3, [r3, #32]
 8003086:	f023 0201 	bic.w	r2, r3, #1
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	6a1b      	ldr	r3, [r3, #32]
 8003092:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	685b      	ldr	r3, [r3, #4]
 8003098:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	699b      	ldr	r3, [r3, #24]
 800309e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80030a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80030aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	f023 0303 	bic.w	r3, r3, #3
 80030b2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80030b4:	683b      	ldr	r3, [r7, #0]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	68fa      	ldr	r2, [r7, #12]
 80030ba:	4313      	orrs	r3, r2
 80030bc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80030be:	697b      	ldr	r3, [r7, #20]
 80030c0:	f023 0302 	bic.w	r3, r3, #2
 80030c4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80030c6:	683b      	ldr	r3, [r7, #0]
 80030c8:	689b      	ldr	r3, [r3, #8]
 80030ca:	697a      	ldr	r2, [r7, #20]
 80030cc:	4313      	orrs	r3, r2
 80030ce:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	4a24      	ldr	r2, [pc, #144]	; (8003164 <TIM_OC1_SetConfig+0xec>)
 80030d4:	4293      	cmp	r3, r2
 80030d6:	d007      	beq.n	80030e8 <TIM_OC1_SetConfig+0x70>
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	4a23      	ldr	r2, [pc, #140]	; (8003168 <TIM_OC1_SetConfig+0xf0>)
 80030dc:	4293      	cmp	r3, r2
 80030de:	d003      	beq.n	80030e8 <TIM_OC1_SetConfig+0x70>
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	4a22      	ldr	r2, [pc, #136]	; (800316c <TIM_OC1_SetConfig+0xf4>)
 80030e4:	4293      	cmp	r3, r2
 80030e6:	d10c      	bne.n	8003102 <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80030e8:	697b      	ldr	r3, [r7, #20]
 80030ea:	f023 0308 	bic.w	r3, r3, #8
 80030ee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80030f0:	683b      	ldr	r3, [r7, #0]
 80030f2:	68db      	ldr	r3, [r3, #12]
 80030f4:	697a      	ldr	r2, [r7, #20]
 80030f6:	4313      	orrs	r3, r2
 80030f8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80030fa:	697b      	ldr	r3, [r7, #20]
 80030fc:	f023 0304 	bic.w	r3, r3, #4
 8003100:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	4a17      	ldr	r2, [pc, #92]	; (8003164 <TIM_OC1_SetConfig+0xec>)
 8003106:	4293      	cmp	r3, r2
 8003108:	d007      	beq.n	800311a <TIM_OC1_SetConfig+0xa2>
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	4a16      	ldr	r2, [pc, #88]	; (8003168 <TIM_OC1_SetConfig+0xf0>)
 800310e:	4293      	cmp	r3, r2
 8003110:	d003      	beq.n	800311a <TIM_OC1_SetConfig+0xa2>
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	4a15      	ldr	r2, [pc, #84]	; (800316c <TIM_OC1_SetConfig+0xf4>)
 8003116:	4293      	cmp	r3, r2
 8003118:	d111      	bne.n	800313e <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800311a:	693b      	ldr	r3, [r7, #16]
 800311c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003120:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003122:	693b      	ldr	r3, [r7, #16]
 8003124:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003128:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800312a:	683b      	ldr	r3, [r7, #0]
 800312c:	695b      	ldr	r3, [r3, #20]
 800312e:	693a      	ldr	r2, [r7, #16]
 8003130:	4313      	orrs	r3, r2
 8003132:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003134:	683b      	ldr	r3, [r7, #0]
 8003136:	699b      	ldr	r3, [r3, #24]
 8003138:	693a      	ldr	r2, [r7, #16]
 800313a:	4313      	orrs	r3, r2
 800313c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	693a      	ldr	r2, [r7, #16]
 8003142:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	68fa      	ldr	r2, [r7, #12]
 8003148:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800314a:	683b      	ldr	r3, [r7, #0]
 800314c:	685a      	ldr	r2, [r3, #4]
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	697a      	ldr	r2, [r7, #20]
 8003156:	621a      	str	r2, [r3, #32]
}
 8003158:	bf00      	nop
 800315a:	371c      	adds	r7, #28
 800315c:	46bd      	mov	sp, r7
 800315e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003162:	4770      	bx	lr
 8003164:	40012c00 	.word	0x40012c00
 8003168:	40014000 	.word	0x40014000
 800316c:	40014400 	.word	0x40014400

08003170 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003170:	b480      	push	{r7}
 8003172:	b087      	sub	sp, #28
 8003174:	af00      	add	r7, sp, #0
 8003176:	6078      	str	r0, [r7, #4]
 8003178:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	6a1b      	ldr	r3, [r3, #32]
 800317e:	f023 0210 	bic.w	r2, r3, #16
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	6a1b      	ldr	r3, [r3, #32]
 800318a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	685b      	ldr	r3, [r3, #4]
 8003190:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	699b      	ldr	r3, [r3, #24]
 8003196:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800319e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80031a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80031aa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80031ac:	683b      	ldr	r3, [r7, #0]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	021b      	lsls	r3, r3, #8
 80031b2:	68fa      	ldr	r2, [r7, #12]
 80031b4:	4313      	orrs	r3, r2
 80031b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80031b8:	697b      	ldr	r3, [r7, #20]
 80031ba:	f023 0320 	bic.w	r3, r3, #32
 80031be:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80031c0:	683b      	ldr	r3, [r7, #0]
 80031c2:	689b      	ldr	r3, [r3, #8]
 80031c4:	011b      	lsls	r3, r3, #4
 80031c6:	697a      	ldr	r2, [r7, #20]
 80031c8:	4313      	orrs	r3, r2
 80031ca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	4a22      	ldr	r2, [pc, #136]	; (8003258 <TIM_OC2_SetConfig+0xe8>)
 80031d0:	4293      	cmp	r3, r2
 80031d2:	d10d      	bne.n	80031f0 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80031d4:	697b      	ldr	r3, [r7, #20]
 80031d6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80031da:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80031dc:	683b      	ldr	r3, [r7, #0]
 80031de:	68db      	ldr	r3, [r3, #12]
 80031e0:	011b      	lsls	r3, r3, #4
 80031e2:	697a      	ldr	r2, [r7, #20]
 80031e4:	4313      	orrs	r3, r2
 80031e6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80031e8:	697b      	ldr	r3, [r7, #20]
 80031ea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80031ee:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	4a19      	ldr	r2, [pc, #100]	; (8003258 <TIM_OC2_SetConfig+0xe8>)
 80031f4:	4293      	cmp	r3, r2
 80031f6:	d007      	beq.n	8003208 <TIM_OC2_SetConfig+0x98>
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	4a18      	ldr	r2, [pc, #96]	; (800325c <TIM_OC2_SetConfig+0xec>)
 80031fc:	4293      	cmp	r3, r2
 80031fe:	d003      	beq.n	8003208 <TIM_OC2_SetConfig+0x98>
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	4a17      	ldr	r2, [pc, #92]	; (8003260 <TIM_OC2_SetConfig+0xf0>)
 8003204:	4293      	cmp	r3, r2
 8003206:	d113      	bne.n	8003230 <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003208:	693b      	ldr	r3, [r7, #16]
 800320a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800320e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003210:	693b      	ldr	r3, [r7, #16]
 8003212:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003216:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003218:	683b      	ldr	r3, [r7, #0]
 800321a:	695b      	ldr	r3, [r3, #20]
 800321c:	009b      	lsls	r3, r3, #2
 800321e:	693a      	ldr	r2, [r7, #16]
 8003220:	4313      	orrs	r3, r2
 8003222:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003224:	683b      	ldr	r3, [r7, #0]
 8003226:	699b      	ldr	r3, [r3, #24]
 8003228:	009b      	lsls	r3, r3, #2
 800322a:	693a      	ldr	r2, [r7, #16]
 800322c:	4313      	orrs	r3, r2
 800322e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	693a      	ldr	r2, [r7, #16]
 8003234:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	68fa      	ldr	r2, [r7, #12]
 800323a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800323c:	683b      	ldr	r3, [r7, #0]
 800323e:	685a      	ldr	r2, [r3, #4]
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	697a      	ldr	r2, [r7, #20]
 8003248:	621a      	str	r2, [r3, #32]
}
 800324a:	bf00      	nop
 800324c:	371c      	adds	r7, #28
 800324e:	46bd      	mov	sp, r7
 8003250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003254:	4770      	bx	lr
 8003256:	bf00      	nop
 8003258:	40012c00 	.word	0x40012c00
 800325c:	40014000 	.word	0x40014000
 8003260:	40014400 	.word	0x40014400

08003264 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003264:	b480      	push	{r7}
 8003266:	b087      	sub	sp, #28
 8003268:	af00      	add	r7, sp, #0
 800326a:	6078      	str	r0, [r7, #4]
 800326c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	6a1b      	ldr	r3, [r3, #32]
 8003272:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	6a1b      	ldr	r3, [r3, #32]
 800327e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	685b      	ldr	r3, [r3, #4]
 8003284:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	69db      	ldr	r3, [r3, #28]
 800328a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003292:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003296:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	f023 0303 	bic.w	r3, r3, #3
 800329e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80032a0:	683b      	ldr	r3, [r7, #0]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	68fa      	ldr	r2, [r7, #12]
 80032a6:	4313      	orrs	r3, r2
 80032a8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80032aa:	697b      	ldr	r3, [r7, #20]
 80032ac:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80032b0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80032b2:	683b      	ldr	r3, [r7, #0]
 80032b4:	689b      	ldr	r3, [r3, #8]
 80032b6:	021b      	lsls	r3, r3, #8
 80032b8:	697a      	ldr	r2, [r7, #20]
 80032ba:	4313      	orrs	r3, r2
 80032bc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	4a21      	ldr	r2, [pc, #132]	; (8003348 <TIM_OC3_SetConfig+0xe4>)
 80032c2:	4293      	cmp	r3, r2
 80032c4:	d10d      	bne.n	80032e2 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80032c6:	697b      	ldr	r3, [r7, #20]
 80032c8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80032cc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80032ce:	683b      	ldr	r3, [r7, #0]
 80032d0:	68db      	ldr	r3, [r3, #12]
 80032d2:	021b      	lsls	r3, r3, #8
 80032d4:	697a      	ldr	r2, [r7, #20]
 80032d6:	4313      	orrs	r3, r2
 80032d8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80032da:	697b      	ldr	r3, [r7, #20]
 80032dc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80032e0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	4a18      	ldr	r2, [pc, #96]	; (8003348 <TIM_OC3_SetConfig+0xe4>)
 80032e6:	4293      	cmp	r3, r2
 80032e8:	d007      	beq.n	80032fa <TIM_OC3_SetConfig+0x96>
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	4a17      	ldr	r2, [pc, #92]	; (800334c <TIM_OC3_SetConfig+0xe8>)
 80032ee:	4293      	cmp	r3, r2
 80032f0:	d003      	beq.n	80032fa <TIM_OC3_SetConfig+0x96>
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	4a16      	ldr	r2, [pc, #88]	; (8003350 <TIM_OC3_SetConfig+0xec>)
 80032f6:	4293      	cmp	r3, r2
 80032f8:	d113      	bne.n	8003322 <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80032fa:	693b      	ldr	r3, [r7, #16]
 80032fc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003300:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003302:	693b      	ldr	r3, [r7, #16]
 8003304:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003308:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800330a:	683b      	ldr	r3, [r7, #0]
 800330c:	695b      	ldr	r3, [r3, #20]
 800330e:	011b      	lsls	r3, r3, #4
 8003310:	693a      	ldr	r2, [r7, #16]
 8003312:	4313      	orrs	r3, r2
 8003314:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003316:	683b      	ldr	r3, [r7, #0]
 8003318:	699b      	ldr	r3, [r3, #24]
 800331a:	011b      	lsls	r3, r3, #4
 800331c:	693a      	ldr	r2, [r7, #16]
 800331e:	4313      	orrs	r3, r2
 8003320:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	693a      	ldr	r2, [r7, #16]
 8003326:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	68fa      	ldr	r2, [r7, #12]
 800332c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800332e:	683b      	ldr	r3, [r7, #0]
 8003330:	685a      	ldr	r2, [r3, #4]
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	697a      	ldr	r2, [r7, #20]
 800333a:	621a      	str	r2, [r3, #32]
}
 800333c:	bf00      	nop
 800333e:	371c      	adds	r7, #28
 8003340:	46bd      	mov	sp, r7
 8003342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003346:	4770      	bx	lr
 8003348:	40012c00 	.word	0x40012c00
 800334c:	40014000 	.word	0x40014000
 8003350:	40014400 	.word	0x40014400

08003354 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003354:	b480      	push	{r7}
 8003356:	b087      	sub	sp, #28
 8003358:	af00      	add	r7, sp, #0
 800335a:	6078      	str	r0, [r7, #4]
 800335c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	6a1b      	ldr	r3, [r3, #32]
 8003362:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	6a1b      	ldr	r3, [r3, #32]
 800336e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	685b      	ldr	r3, [r3, #4]
 8003374:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	69db      	ldr	r3, [r3, #28]
 800337a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003382:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003386:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800338e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003390:	683b      	ldr	r3, [r7, #0]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	021b      	lsls	r3, r3, #8
 8003396:	68fa      	ldr	r2, [r7, #12]
 8003398:	4313      	orrs	r3, r2
 800339a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800339c:	693b      	ldr	r3, [r7, #16]
 800339e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80033a2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80033a4:	683b      	ldr	r3, [r7, #0]
 80033a6:	689b      	ldr	r3, [r3, #8]
 80033a8:	031b      	lsls	r3, r3, #12
 80033aa:	693a      	ldr	r2, [r7, #16]
 80033ac:	4313      	orrs	r3, r2
 80033ae:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	4a14      	ldr	r2, [pc, #80]	; (8003404 <TIM_OC4_SetConfig+0xb0>)
 80033b4:	4293      	cmp	r3, r2
 80033b6:	d007      	beq.n	80033c8 <TIM_OC4_SetConfig+0x74>
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	4a13      	ldr	r2, [pc, #76]	; (8003408 <TIM_OC4_SetConfig+0xb4>)
 80033bc:	4293      	cmp	r3, r2
 80033be:	d003      	beq.n	80033c8 <TIM_OC4_SetConfig+0x74>
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	4a12      	ldr	r2, [pc, #72]	; (800340c <TIM_OC4_SetConfig+0xb8>)
 80033c4:	4293      	cmp	r3, r2
 80033c6:	d109      	bne.n	80033dc <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80033c8:	697b      	ldr	r3, [r7, #20]
 80033ca:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80033ce:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80033d0:	683b      	ldr	r3, [r7, #0]
 80033d2:	695b      	ldr	r3, [r3, #20]
 80033d4:	019b      	lsls	r3, r3, #6
 80033d6:	697a      	ldr	r2, [r7, #20]
 80033d8:	4313      	orrs	r3, r2
 80033da:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	697a      	ldr	r2, [r7, #20]
 80033e0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	68fa      	ldr	r2, [r7, #12]
 80033e6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80033e8:	683b      	ldr	r3, [r7, #0]
 80033ea:	685a      	ldr	r2, [r3, #4]
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	693a      	ldr	r2, [r7, #16]
 80033f4:	621a      	str	r2, [r3, #32]
}
 80033f6:	bf00      	nop
 80033f8:	371c      	adds	r7, #28
 80033fa:	46bd      	mov	sp, r7
 80033fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003400:	4770      	bx	lr
 8003402:	bf00      	nop
 8003404:	40012c00 	.word	0x40012c00
 8003408:	40014000 	.word	0x40014000
 800340c:	40014400 	.word	0x40014400

08003410 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003410:	b480      	push	{r7}
 8003412:	b087      	sub	sp, #28
 8003414:	af00      	add	r7, sp, #0
 8003416:	6078      	str	r0, [r7, #4]
 8003418:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	6a1b      	ldr	r3, [r3, #32]
 800341e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	6a1b      	ldr	r3, [r3, #32]
 800342a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	685b      	ldr	r3, [r3, #4]
 8003430:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003436:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800343e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003442:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003444:	683b      	ldr	r3, [r7, #0]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	68fa      	ldr	r2, [r7, #12]
 800344a:	4313      	orrs	r3, r2
 800344c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800344e:	693b      	ldr	r3, [r7, #16]
 8003450:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8003454:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8003456:	683b      	ldr	r3, [r7, #0]
 8003458:	689b      	ldr	r3, [r3, #8]
 800345a:	041b      	lsls	r3, r3, #16
 800345c:	693a      	ldr	r2, [r7, #16]
 800345e:	4313      	orrs	r3, r2
 8003460:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	4a13      	ldr	r2, [pc, #76]	; (80034b4 <TIM_OC5_SetConfig+0xa4>)
 8003466:	4293      	cmp	r3, r2
 8003468:	d007      	beq.n	800347a <TIM_OC5_SetConfig+0x6a>
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	4a12      	ldr	r2, [pc, #72]	; (80034b8 <TIM_OC5_SetConfig+0xa8>)
 800346e:	4293      	cmp	r3, r2
 8003470:	d003      	beq.n	800347a <TIM_OC5_SetConfig+0x6a>
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	4a11      	ldr	r2, [pc, #68]	; (80034bc <TIM_OC5_SetConfig+0xac>)
 8003476:	4293      	cmp	r3, r2
 8003478:	d109      	bne.n	800348e <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800347a:	697b      	ldr	r3, [r7, #20]
 800347c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003480:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8003482:	683b      	ldr	r3, [r7, #0]
 8003484:	695b      	ldr	r3, [r3, #20]
 8003486:	021b      	lsls	r3, r3, #8
 8003488:	697a      	ldr	r2, [r7, #20]
 800348a:	4313      	orrs	r3, r2
 800348c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	697a      	ldr	r2, [r7, #20]
 8003492:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	68fa      	ldr	r2, [r7, #12]
 8003498:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800349a:	683b      	ldr	r3, [r7, #0]
 800349c:	685a      	ldr	r2, [r3, #4]
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	693a      	ldr	r2, [r7, #16]
 80034a6:	621a      	str	r2, [r3, #32]
}
 80034a8:	bf00      	nop
 80034aa:	371c      	adds	r7, #28
 80034ac:	46bd      	mov	sp, r7
 80034ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b2:	4770      	bx	lr
 80034b4:	40012c00 	.word	0x40012c00
 80034b8:	40014000 	.word	0x40014000
 80034bc:	40014400 	.word	0x40014400

080034c0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80034c0:	b480      	push	{r7}
 80034c2:	b087      	sub	sp, #28
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	6078      	str	r0, [r7, #4]
 80034c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	6a1b      	ldr	r3, [r3, #32]
 80034ce:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	6a1b      	ldr	r3, [r3, #32]
 80034da:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	685b      	ldr	r3, [r3, #4]
 80034e0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80034ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80034f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80034f4:	683b      	ldr	r3, [r7, #0]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	021b      	lsls	r3, r3, #8
 80034fa:	68fa      	ldr	r2, [r7, #12]
 80034fc:	4313      	orrs	r3, r2
 80034fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003500:	693b      	ldr	r3, [r7, #16]
 8003502:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003506:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003508:	683b      	ldr	r3, [r7, #0]
 800350a:	689b      	ldr	r3, [r3, #8]
 800350c:	051b      	lsls	r3, r3, #20
 800350e:	693a      	ldr	r2, [r7, #16]
 8003510:	4313      	orrs	r3, r2
 8003512:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	4a14      	ldr	r2, [pc, #80]	; (8003568 <TIM_OC6_SetConfig+0xa8>)
 8003518:	4293      	cmp	r3, r2
 800351a:	d007      	beq.n	800352c <TIM_OC6_SetConfig+0x6c>
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	4a13      	ldr	r2, [pc, #76]	; (800356c <TIM_OC6_SetConfig+0xac>)
 8003520:	4293      	cmp	r3, r2
 8003522:	d003      	beq.n	800352c <TIM_OC6_SetConfig+0x6c>
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	4a12      	ldr	r2, [pc, #72]	; (8003570 <TIM_OC6_SetConfig+0xb0>)
 8003528:	4293      	cmp	r3, r2
 800352a:	d109      	bne.n	8003540 <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800352c:	697b      	ldr	r3, [r7, #20]
 800352e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003532:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003534:	683b      	ldr	r3, [r7, #0]
 8003536:	695b      	ldr	r3, [r3, #20]
 8003538:	029b      	lsls	r3, r3, #10
 800353a:	697a      	ldr	r2, [r7, #20]
 800353c:	4313      	orrs	r3, r2
 800353e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	697a      	ldr	r2, [r7, #20]
 8003544:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	68fa      	ldr	r2, [r7, #12]
 800354a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800354c:	683b      	ldr	r3, [r7, #0]
 800354e:	685a      	ldr	r2, [r3, #4]
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	693a      	ldr	r2, [r7, #16]
 8003558:	621a      	str	r2, [r3, #32]
}
 800355a:	bf00      	nop
 800355c:	371c      	adds	r7, #28
 800355e:	46bd      	mov	sp, r7
 8003560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003564:	4770      	bx	lr
 8003566:	bf00      	nop
 8003568:	40012c00 	.word	0x40012c00
 800356c:	40014000 	.word	0x40014000
 8003570:	40014400 	.word	0x40014400

08003574 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003574:	b480      	push	{r7}
 8003576:	b087      	sub	sp, #28
 8003578:	af00      	add	r7, sp, #0
 800357a:	60f8      	str	r0, [r7, #12]
 800357c:	60b9      	str	r1, [r7, #8]
 800357e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	6a1b      	ldr	r3, [r3, #32]
 8003584:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	6a1b      	ldr	r3, [r3, #32]
 800358a:	f023 0201 	bic.w	r2, r3, #1
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	699b      	ldr	r3, [r3, #24]
 8003596:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003598:	693b      	ldr	r3, [r7, #16]
 800359a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800359e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	011b      	lsls	r3, r3, #4
 80035a4:	693a      	ldr	r2, [r7, #16]
 80035a6:	4313      	orrs	r3, r2
 80035a8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80035aa:	697b      	ldr	r3, [r7, #20]
 80035ac:	f023 030a 	bic.w	r3, r3, #10
 80035b0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80035b2:	697a      	ldr	r2, [r7, #20]
 80035b4:	68bb      	ldr	r3, [r7, #8]
 80035b6:	4313      	orrs	r3, r2
 80035b8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	693a      	ldr	r2, [r7, #16]
 80035be:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	697a      	ldr	r2, [r7, #20]
 80035c4:	621a      	str	r2, [r3, #32]
}
 80035c6:	bf00      	nop
 80035c8:	371c      	adds	r7, #28
 80035ca:	46bd      	mov	sp, r7
 80035cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d0:	4770      	bx	lr

080035d2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80035d2:	b480      	push	{r7}
 80035d4:	b087      	sub	sp, #28
 80035d6:	af00      	add	r7, sp, #0
 80035d8:	60f8      	str	r0, [r7, #12]
 80035da:	60b9      	str	r1, [r7, #8]
 80035dc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	6a1b      	ldr	r3, [r3, #32]
 80035e2:	f023 0210 	bic.w	r2, r3, #16
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	699b      	ldr	r3, [r3, #24]
 80035ee:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	6a1b      	ldr	r3, [r3, #32]
 80035f4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80035f6:	697b      	ldr	r3, [r7, #20]
 80035f8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80035fc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	031b      	lsls	r3, r3, #12
 8003602:	697a      	ldr	r2, [r7, #20]
 8003604:	4313      	orrs	r3, r2
 8003606:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003608:	693b      	ldr	r3, [r7, #16]
 800360a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800360e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003610:	68bb      	ldr	r3, [r7, #8]
 8003612:	011b      	lsls	r3, r3, #4
 8003614:	693a      	ldr	r2, [r7, #16]
 8003616:	4313      	orrs	r3, r2
 8003618:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	697a      	ldr	r2, [r7, #20]
 800361e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	693a      	ldr	r2, [r7, #16]
 8003624:	621a      	str	r2, [r3, #32]
}
 8003626:	bf00      	nop
 8003628:	371c      	adds	r7, #28
 800362a:	46bd      	mov	sp, r7
 800362c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003630:	4770      	bx	lr

08003632 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003632:	b480      	push	{r7}
 8003634:	b085      	sub	sp, #20
 8003636:	af00      	add	r7, sp, #0
 8003638:	6078      	str	r0, [r7, #4]
 800363a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	689b      	ldr	r3, [r3, #8]
 8003640:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003648:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800364a:	683a      	ldr	r2, [r7, #0]
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	4313      	orrs	r3, r2
 8003650:	f043 0307 	orr.w	r3, r3, #7
 8003654:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	68fa      	ldr	r2, [r7, #12]
 800365a:	609a      	str	r2, [r3, #8]
}
 800365c:	bf00      	nop
 800365e:	3714      	adds	r7, #20
 8003660:	46bd      	mov	sp, r7
 8003662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003666:	4770      	bx	lr

08003668 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003668:	b480      	push	{r7}
 800366a:	b087      	sub	sp, #28
 800366c:	af00      	add	r7, sp, #0
 800366e:	60f8      	str	r0, [r7, #12]
 8003670:	60b9      	str	r1, [r7, #8]
 8003672:	607a      	str	r2, [r7, #4]
 8003674:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	689b      	ldr	r3, [r3, #8]
 800367a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800367c:	697b      	ldr	r3, [r7, #20]
 800367e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003682:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003684:	683b      	ldr	r3, [r7, #0]
 8003686:	021a      	lsls	r2, r3, #8
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	431a      	orrs	r2, r3
 800368c:	68bb      	ldr	r3, [r7, #8]
 800368e:	4313      	orrs	r3, r2
 8003690:	697a      	ldr	r2, [r7, #20]
 8003692:	4313      	orrs	r3, r2
 8003694:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	697a      	ldr	r2, [r7, #20]
 800369a:	609a      	str	r2, [r3, #8]
}
 800369c:	bf00      	nop
 800369e:	371c      	adds	r7, #28
 80036a0:	46bd      	mov	sp, r7
 80036a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a6:	4770      	bx	lr

080036a8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80036a8:	b480      	push	{r7}
 80036aa:	b087      	sub	sp, #28
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	60f8      	str	r0, [r7, #12]
 80036b0:	60b9      	str	r1, [r7, #8]
 80036b2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80036b4:	68bb      	ldr	r3, [r7, #8]
 80036b6:	f003 031f 	and.w	r3, r3, #31
 80036ba:	2201      	movs	r2, #1
 80036bc:	fa02 f303 	lsl.w	r3, r2, r3
 80036c0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	6a1a      	ldr	r2, [r3, #32]
 80036c6:	697b      	ldr	r3, [r7, #20]
 80036c8:	43db      	mvns	r3, r3
 80036ca:	401a      	ands	r2, r3
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	6a1a      	ldr	r2, [r3, #32]
 80036d4:	68bb      	ldr	r3, [r7, #8]
 80036d6:	f003 031f 	and.w	r3, r3, #31
 80036da:	6879      	ldr	r1, [r7, #4]
 80036dc:	fa01 f303 	lsl.w	r3, r1, r3
 80036e0:	431a      	orrs	r2, r3
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	621a      	str	r2, [r3, #32]
}
 80036e6:	bf00      	nop
 80036e8:	371c      	adds	r7, #28
 80036ea:	46bd      	mov	sp, r7
 80036ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f0:	4770      	bx	lr
	...

080036f4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80036f4:	b480      	push	{r7}
 80036f6:	b085      	sub	sp, #20
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	6078      	str	r0, [r7, #4]
 80036fc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003704:	2b01      	cmp	r3, #1
 8003706:	d101      	bne.n	800370c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003708:	2302      	movs	r3, #2
 800370a:	e04f      	b.n	80037ac <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	2201      	movs	r2, #1
 8003710:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	2202      	movs	r2, #2
 8003718:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	685b      	ldr	r3, [r3, #4]
 8003722:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	689b      	ldr	r3, [r3, #8]
 800372a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	4a21      	ldr	r2, [pc, #132]	; (80037b8 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8003732:	4293      	cmp	r3, r2
 8003734:	d108      	bne.n	8003748 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800373c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800373e:	683b      	ldr	r3, [r7, #0]
 8003740:	685b      	ldr	r3, [r3, #4]
 8003742:	68fa      	ldr	r2, [r7, #12]
 8003744:	4313      	orrs	r3, r2
 8003746:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800374e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003750:	683b      	ldr	r3, [r7, #0]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	68fa      	ldr	r2, [r7, #12]
 8003756:	4313      	orrs	r3, r2
 8003758:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	68fa      	ldr	r2, [r7, #12]
 8003760:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	4a14      	ldr	r2, [pc, #80]	; (80037b8 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8003768:	4293      	cmp	r3, r2
 800376a:	d009      	beq.n	8003780 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003774:	d004      	beq.n	8003780 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	4a10      	ldr	r2, [pc, #64]	; (80037bc <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800377c:	4293      	cmp	r3, r2
 800377e:	d10c      	bne.n	800379a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003780:	68bb      	ldr	r3, [r7, #8]
 8003782:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003786:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003788:	683b      	ldr	r3, [r7, #0]
 800378a:	689b      	ldr	r3, [r3, #8]
 800378c:	68ba      	ldr	r2, [r7, #8]
 800378e:	4313      	orrs	r3, r2
 8003790:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	68ba      	ldr	r2, [r7, #8]
 8003798:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	2201      	movs	r2, #1
 800379e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	2200      	movs	r2, #0
 80037a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80037aa:	2300      	movs	r3, #0
}
 80037ac:	4618      	mov	r0, r3
 80037ae:	3714      	adds	r7, #20
 80037b0:	46bd      	mov	sp, r7
 80037b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b6:	4770      	bx	lr
 80037b8:	40012c00 	.word	0x40012c00
 80037bc:	40014000 	.word	0x40014000

080037c0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80037c0:	b480      	push	{r7}
 80037c2:	b083      	sub	sp, #12
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80037c8:	bf00      	nop
 80037ca:	370c      	adds	r7, #12
 80037cc:	46bd      	mov	sp, r7
 80037ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d2:	4770      	bx	lr

080037d4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80037d4:	b480      	push	{r7}
 80037d6:	b083      	sub	sp, #12
 80037d8:	af00      	add	r7, sp, #0
 80037da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80037dc:	bf00      	nop
 80037de:	370c      	adds	r7, #12
 80037e0:	46bd      	mov	sp, r7
 80037e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e6:	4770      	bx	lr

080037e8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80037e8:	b480      	push	{r7}
 80037ea:	b083      	sub	sp, #12
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80037f0:	bf00      	nop
 80037f2:	370c      	adds	r7, #12
 80037f4:	46bd      	mov	sp, r7
 80037f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037fa:	4770      	bx	lr

080037fc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80037fc:	b580      	push	{r7, lr}
 80037fe:	b082      	sub	sp, #8
 8003800:	af00      	add	r7, sp, #0
 8003802:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	2b00      	cmp	r3, #0
 8003808:	d101      	bne.n	800380e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800380a:	2301      	movs	r3, #1
 800380c:	e040      	b.n	8003890 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003812:	2b00      	cmp	r3, #0
 8003814:	d106      	bne.n	8003824 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	2200      	movs	r2, #0
 800381a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800381e:	6878      	ldr	r0, [r7, #4]
 8003820:	f7fd f902 	bl	8000a28 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	2224      	movs	r2, #36	; 0x24
 8003828:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	681a      	ldr	r2, [r3, #0]
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f022 0201 	bic.w	r2, r2, #1
 8003838:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800383a:	6878      	ldr	r0, [r7, #4]
 800383c:	f000 f82c 	bl	8003898 <UART_SetConfig>
 8003840:	4603      	mov	r3, r0
 8003842:	2b01      	cmp	r3, #1
 8003844:	d101      	bne.n	800384a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003846:	2301      	movs	r3, #1
 8003848:	e022      	b.n	8003890 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800384e:	2b00      	cmp	r3, #0
 8003850:	d002      	beq.n	8003858 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003852:	6878      	ldr	r0, [r7, #4]
 8003854:	f000 fa4c 	bl	8003cf0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	685a      	ldr	r2, [r3, #4]
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003866:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	689a      	ldr	r2, [r3, #8]
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003876:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	681a      	ldr	r2, [r3, #0]
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f042 0201 	orr.w	r2, r2, #1
 8003886:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003888:	6878      	ldr	r0, [r7, #4]
 800388a:	f000 fad3 	bl	8003e34 <UART_CheckIdleState>
 800388e:	4603      	mov	r3, r0
}
 8003890:	4618      	mov	r0, r3
 8003892:	3708      	adds	r7, #8
 8003894:	46bd      	mov	sp, r7
 8003896:	bd80      	pop	{r7, pc}

08003898 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003898:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800389c:	b08a      	sub	sp, #40	; 0x28
 800389e:	af00      	add	r7, sp, #0
 80038a0:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80038a2:	2300      	movs	r3, #0
 80038a4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	689a      	ldr	r2, [r3, #8]
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	691b      	ldr	r3, [r3, #16]
 80038b0:	431a      	orrs	r2, r3
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	695b      	ldr	r3, [r3, #20]
 80038b6:	431a      	orrs	r2, r3
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	69db      	ldr	r3, [r3, #28]
 80038bc:	4313      	orrs	r3, r2
 80038be:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	681a      	ldr	r2, [r3, #0]
 80038c6:	4bb4      	ldr	r3, [pc, #720]	; (8003b98 <UART_SetConfig+0x300>)
 80038c8:	4013      	ands	r3, r2
 80038ca:	68fa      	ldr	r2, [r7, #12]
 80038cc:	6812      	ldr	r2, [r2, #0]
 80038ce:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80038d0:	430b      	orrs	r3, r1
 80038d2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	685b      	ldr	r3, [r3, #4]
 80038da:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	68da      	ldr	r2, [r3, #12]
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	430a      	orrs	r2, r1
 80038e8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	699b      	ldr	r3, [r3, #24]
 80038ee:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	4aa9      	ldr	r2, [pc, #676]	; (8003b9c <UART_SetConfig+0x304>)
 80038f6:	4293      	cmp	r3, r2
 80038f8:	d004      	beq.n	8003904 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	6a1b      	ldr	r3, [r3, #32]
 80038fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003900:	4313      	orrs	r3, r2
 8003902:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	689b      	ldr	r3, [r3, #8]
 800390a:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003914:	430a      	orrs	r2, r1
 8003916:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	4aa0      	ldr	r2, [pc, #640]	; (8003ba0 <UART_SetConfig+0x308>)
 800391e:	4293      	cmp	r3, r2
 8003920:	d126      	bne.n	8003970 <UART_SetConfig+0xd8>
 8003922:	4ba0      	ldr	r3, [pc, #640]	; (8003ba4 <UART_SetConfig+0x30c>)
 8003924:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003928:	f003 0303 	and.w	r3, r3, #3
 800392c:	2b03      	cmp	r3, #3
 800392e:	d81b      	bhi.n	8003968 <UART_SetConfig+0xd0>
 8003930:	a201      	add	r2, pc, #4	; (adr r2, 8003938 <UART_SetConfig+0xa0>)
 8003932:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003936:	bf00      	nop
 8003938:	08003949 	.word	0x08003949
 800393c:	08003959 	.word	0x08003959
 8003940:	08003951 	.word	0x08003951
 8003944:	08003961 	.word	0x08003961
 8003948:	2301      	movs	r3, #1
 800394a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800394e:	e080      	b.n	8003a52 <UART_SetConfig+0x1ba>
 8003950:	2302      	movs	r3, #2
 8003952:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003956:	e07c      	b.n	8003a52 <UART_SetConfig+0x1ba>
 8003958:	2304      	movs	r3, #4
 800395a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800395e:	e078      	b.n	8003a52 <UART_SetConfig+0x1ba>
 8003960:	2308      	movs	r3, #8
 8003962:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003966:	e074      	b.n	8003a52 <UART_SetConfig+0x1ba>
 8003968:	2310      	movs	r3, #16
 800396a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800396e:	e070      	b.n	8003a52 <UART_SetConfig+0x1ba>
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	4a8c      	ldr	r2, [pc, #560]	; (8003ba8 <UART_SetConfig+0x310>)
 8003976:	4293      	cmp	r3, r2
 8003978:	d138      	bne.n	80039ec <UART_SetConfig+0x154>
 800397a:	4b8a      	ldr	r3, [pc, #552]	; (8003ba4 <UART_SetConfig+0x30c>)
 800397c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003980:	f003 030c 	and.w	r3, r3, #12
 8003984:	2b0c      	cmp	r3, #12
 8003986:	d82d      	bhi.n	80039e4 <UART_SetConfig+0x14c>
 8003988:	a201      	add	r2, pc, #4	; (adr r2, 8003990 <UART_SetConfig+0xf8>)
 800398a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800398e:	bf00      	nop
 8003990:	080039c5 	.word	0x080039c5
 8003994:	080039e5 	.word	0x080039e5
 8003998:	080039e5 	.word	0x080039e5
 800399c:	080039e5 	.word	0x080039e5
 80039a0:	080039d5 	.word	0x080039d5
 80039a4:	080039e5 	.word	0x080039e5
 80039a8:	080039e5 	.word	0x080039e5
 80039ac:	080039e5 	.word	0x080039e5
 80039b0:	080039cd 	.word	0x080039cd
 80039b4:	080039e5 	.word	0x080039e5
 80039b8:	080039e5 	.word	0x080039e5
 80039bc:	080039e5 	.word	0x080039e5
 80039c0:	080039dd 	.word	0x080039dd
 80039c4:	2300      	movs	r3, #0
 80039c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80039ca:	e042      	b.n	8003a52 <UART_SetConfig+0x1ba>
 80039cc:	2302      	movs	r3, #2
 80039ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80039d2:	e03e      	b.n	8003a52 <UART_SetConfig+0x1ba>
 80039d4:	2304      	movs	r3, #4
 80039d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80039da:	e03a      	b.n	8003a52 <UART_SetConfig+0x1ba>
 80039dc:	2308      	movs	r3, #8
 80039de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80039e2:	e036      	b.n	8003a52 <UART_SetConfig+0x1ba>
 80039e4:	2310      	movs	r3, #16
 80039e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80039ea:	e032      	b.n	8003a52 <UART_SetConfig+0x1ba>
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	4a6a      	ldr	r2, [pc, #424]	; (8003b9c <UART_SetConfig+0x304>)
 80039f2:	4293      	cmp	r3, r2
 80039f4:	d12a      	bne.n	8003a4c <UART_SetConfig+0x1b4>
 80039f6:	4b6b      	ldr	r3, [pc, #428]	; (8003ba4 <UART_SetConfig+0x30c>)
 80039f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039fc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003a00:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003a04:	d01a      	beq.n	8003a3c <UART_SetConfig+0x1a4>
 8003a06:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003a0a:	d81b      	bhi.n	8003a44 <UART_SetConfig+0x1ac>
 8003a0c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003a10:	d00c      	beq.n	8003a2c <UART_SetConfig+0x194>
 8003a12:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003a16:	d815      	bhi.n	8003a44 <UART_SetConfig+0x1ac>
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d003      	beq.n	8003a24 <UART_SetConfig+0x18c>
 8003a1c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a20:	d008      	beq.n	8003a34 <UART_SetConfig+0x19c>
 8003a22:	e00f      	b.n	8003a44 <UART_SetConfig+0x1ac>
 8003a24:	2300      	movs	r3, #0
 8003a26:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a2a:	e012      	b.n	8003a52 <UART_SetConfig+0x1ba>
 8003a2c:	2302      	movs	r3, #2
 8003a2e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a32:	e00e      	b.n	8003a52 <UART_SetConfig+0x1ba>
 8003a34:	2304      	movs	r3, #4
 8003a36:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a3a:	e00a      	b.n	8003a52 <UART_SetConfig+0x1ba>
 8003a3c:	2308      	movs	r3, #8
 8003a3e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a42:	e006      	b.n	8003a52 <UART_SetConfig+0x1ba>
 8003a44:	2310      	movs	r3, #16
 8003a46:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a4a:	e002      	b.n	8003a52 <UART_SetConfig+0x1ba>
 8003a4c:	2310      	movs	r3, #16
 8003a4e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	4a51      	ldr	r2, [pc, #324]	; (8003b9c <UART_SetConfig+0x304>)
 8003a58:	4293      	cmp	r3, r2
 8003a5a:	d17a      	bne.n	8003b52 <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003a5c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003a60:	2b08      	cmp	r3, #8
 8003a62:	d824      	bhi.n	8003aae <UART_SetConfig+0x216>
 8003a64:	a201      	add	r2, pc, #4	; (adr r2, 8003a6c <UART_SetConfig+0x1d4>)
 8003a66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a6a:	bf00      	nop
 8003a6c:	08003a91 	.word	0x08003a91
 8003a70:	08003aaf 	.word	0x08003aaf
 8003a74:	08003a99 	.word	0x08003a99
 8003a78:	08003aaf 	.word	0x08003aaf
 8003a7c:	08003a9f 	.word	0x08003a9f
 8003a80:	08003aaf 	.word	0x08003aaf
 8003a84:	08003aaf 	.word	0x08003aaf
 8003a88:	08003aaf 	.word	0x08003aaf
 8003a8c:	08003aa7 	.word	0x08003aa7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003a90:	f7fe f9c6 	bl	8001e20 <HAL_RCC_GetPCLK1Freq>
 8003a94:	61f8      	str	r0, [r7, #28]
        break;
 8003a96:	e010      	b.n	8003aba <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003a98:	4b44      	ldr	r3, [pc, #272]	; (8003bac <UART_SetConfig+0x314>)
 8003a9a:	61fb      	str	r3, [r7, #28]
        break;
 8003a9c:	e00d      	b.n	8003aba <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003a9e:	f7fe f927 	bl	8001cf0 <HAL_RCC_GetSysClockFreq>
 8003aa2:	61f8      	str	r0, [r7, #28]
        break;
 8003aa4:	e009      	b.n	8003aba <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003aa6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003aaa:	61fb      	str	r3, [r7, #28]
        break;
 8003aac:	e005      	b.n	8003aba <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 8003aae:	2300      	movs	r3, #0
 8003ab0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003ab2:	2301      	movs	r3, #1
 8003ab4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003ab8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003aba:	69fb      	ldr	r3, [r7, #28]
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	f000 8107 	beq.w	8003cd0 <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	685a      	ldr	r2, [r3, #4]
 8003ac6:	4613      	mov	r3, r2
 8003ac8:	005b      	lsls	r3, r3, #1
 8003aca:	4413      	add	r3, r2
 8003acc:	69fa      	ldr	r2, [r7, #28]
 8003ace:	429a      	cmp	r2, r3
 8003ad0:	d305      	bcc.n	8003ade <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	685b      	ldr	r3, [r3, #4]
 8003ad6:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003ad8:	69fa      	ldr	r2, [r7, #28]
 8003ada:	429a      	cmp	r2, r3
 8003adc:	d903      	bls.n	8003ae6 <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 8003ade:	2301      	movs	r3, #1
 8003ae0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003ae4:	e0f4      	b.n	8003cd0 <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003ae6:	69fb      	ldr	r3, [r7, #28]
 8003ae8:	2200      	movs	r2, #0
 8003aea:	461c      	mov	r4, r3
 8003aec:	4615      	mov	r5, r2
 8003aee:	f04f 0200 	mov.w	r2, #0
 8003af2:	f04f 0300 	mov.w	r3, #0
 8003af6:	022b      	lsls	r3, r5, #8
 8003af8:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8003afc:	0222      	lsls	r2, r4, #8
 8003afe:	68f9      	ldr	r1, [r7, #12]
 8003b00:	6849      	ldr	r1, [r1, #4]
 8003b02:	0849      	lsrs	r1, r1, #1
 8003b04:	2000      	movs	r0, #0
 8003b06:	4688      	mov	r8, r1
 8003b08:	4681      	mov	r9, r0
 8003b0a:	eb12 0a08 	adds.w	sl, r2, r8
 8003b0e:	eb43 0b09 	adc.w	fp, r3, r9
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	685b      	ldr	r3, [r3, #4]
 8003b16:	2200      	movs	r2, #0
 8003b18:	603b      	str	r3, [r7, #0]
 8003b1a:	607a      	str	r2, [r7, #4]
 8003b1c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003b20:	4650      	mov	r0, sl
 8003b22:	4659      	mov	r1, fp
 8003b24:	f7fc fb54 	bl	80001d0 <__aeabi_uldivmod>
 8003b28:	4602      	mov	r2, r0
 8003b2a:	460b      	mov	r3, r1
 8003b2c:	4613      	mov	r3, r2
 8003b2e:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003b30:	69bb      	ldr	r3, [r7, #24]
 8003b32:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003b36:	d308      	bcc.n	8003b4a <UART_SetConfig+0x2b2>
 8003b38:	69bb      	ldr	r3, [r7, #24]
 8003b3a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003b3e:	d204      	bcs.n	8003b4a <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	69ba      	ldr	r2, [r7, #24]
 8003b46:	60da      	str	r2, [r3, #12]
 8003b48:	e0c2      	b.n	8003cd0 <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 8003b4a:	2301      	movs	r3, #1
 8003b4c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003b50:	e0be      	b.n	8003cd0 <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	69db      	ldr	r3, [r3, #28]
 8003b56:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003b5a:	d16a      	bne.n	8003c32 <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 8003b5c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003b60:	2b08      	cmp	r3, #8
 8003b62:	d834      	bhi.n	8003bce <UART_SetConfig+0x336>
 8003b64:	a201      	add	r2, pc, #4	; (adr r2, 8003b6c <UART_SetConfig+0x2d4>)
 8003b66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b6a:	bf00      	nop
 8003b6c:	08003b91 	.word	0x08003b91
 8003b70:	08003bb1 	.word	0x08003bb1
 8003b74:	08003bb9 	.word	0x08003bb9
 8003b78:	08003bcf 	.word	0x08003bcf
 8003b7c:	08003bbf 	.word	0x08003bbf
 8003b80:	08003bcf 	.word	0x08003bcf
 8003b84:	08003bcf 	.word	0x08003bcf
 8003b88:	08003bcf 	.word	0x08003bcf
 8003b8c:	08003bc7 	.word	0x08003bc7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003b90:	f7fe f946 	bl	8001e20 <HAL_RCC_GetPCLK1Freq>
 8003b94:	61f8      	str	r0, [r7, #28]
        break;
 8003b96:	e020      	b.n	8003bda <UART_SetConfig+0x342>
 8003b98:	efff69f3 	.word	0xefff69f3
 8003b9c:	40008000 	.word	0x40008000
 8003ba0:	40013800 	.word	0x40013800
 8003ba4:	40021000 	.word	0x40021000
 8003ba8:	40004400 	.word	0x40004400
 8003bac:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003bb0:	f7fe f94c 	bl	8001e4c <HAL_RCC_GetPCLK2Freq>
 8003bb4:	61f8      	str	r0, [r7, #28]
        break;
 8003bb6:	e010      	b.n	8003bda <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003bb8:	4b4c      	ldr	r3, [pc, #304]	; (8003cec <UART_SetConfig+0x454>)
 8003bba:	61fb      	str	r3, [r7, #28]
        break;
 8003bbc:	e00d      	b.n	8003bda <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003bbe:	f7fe f897 	bl	8001cf0 <HAL_RCC_GetSysClockFreq>
 8003bc2:	61f8      	str	r0, [r7, #28]
        break;
 8003bc4:	e009      	b.n	8003bda <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003bc6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003bca:	61fb      	str	r3, [r7, #28]
        break;
 8003bcc:	e005      	b.n	8003bda <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 8003bce:	2300      	movs	r3, #0
 8003bd0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003bd2:	2301      	movs	r3, #1
 8003bd4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003bd8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003bda:	69fb      	ldr	r3, [r7, #28]
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d077      	beq.n	8003cd0 <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003be0:	69fb      	ldr	r3, [r7, #28]
 8003be2:	005a      	lsls	r2, r3, #1
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	685b      	ldr	r3, [r3, #4]
 8003be8:	085b      	lsrs	r3, r3, #1
 8003bea:	441a      	add	r2, r3
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	685b      	ldr	r3, [r3, #4]
 8003bf0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bf4:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003bf6:	69bb      	ldr	r3, [r7, #24]
 8003bf8:	2b0f      	cmp	r3, #15
 8003bfa:	d916      	bls.n	8003c2a <UART_SetConfig+0x392>
 8003bfc:	69bb      	ldr	r3, [r7, #24]
 8003bfe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c02:	d212      	bcs.n	8003c2a <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003c04:	69bb      	ldr	r3, [r7, #24]
 8003c06:	b29b      	uxth	r3, r3
 8003c08:	f023 030f 	bic.w	r3, r3, #15
 8003c0c:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003c0e:	69bb      	ldr	r3, [r7, #24]
 8003c10:	085b      	lsrs	r3, r3, #1
 8003c12:	b29b      	uxth	r3, r3
 8003c14:	f003 0307 	and.w	r3, r3, #7
 8003c18:	b29a      	uxth	r2, r3
 8003c1a:	8afb      	ldrh	r3, [r7, #22]
 8003c1c:	4313      	orrs	r3, r2
 8003c1e:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	8afa      	ldrh	r2, [r7, #22]
 8003c26:	60da      	str	r2, [r3, #12]
 8003c28:	e052      	b.n	8003cd0 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8003c2a:	2301      	movs	r3, #1
 8003c2c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003c30:	e04e      	b.n	8003cd0 <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003c32:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003c36:	2b08      	cmp	r3, #8
 8003c38:	d827      	bhi.n	8003c8a <UART_SetConfig+0x3f2>
 8003c3a:	a201      	add	r2, pc, #4	; (adr r2, 8003c40 <UART_SetConfig+0x3a8>)
 8003c3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c40:	08003c65 	.word	0x08003c65
 8003c44:	08003c6d 	.word	0x08003c6d
 8003c48:	08003c75 	.word	0x08003c75
 8003c4c:	08003c8b 	.word	0x08003c8b
 8003c50:	08003c7b 	.word	0x08003c7b
 8003c54:	08003c8b 	.word	0x08003c8b
 8003c58:	08003c8b 	.word	0x08003c8b
 8003c5c:	08003c8b 	.word	0x08003c8b
 8003c60:	08003c83 	.word	0x08003c83
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003c64:	f7fe f8dc 	bl	8001e20 <HAL_RCC_GetPCLK1Freq>
 8003c68:	61f8      	str	r0, [r7, #28]
        break;
 8003c6a:	e014      	b.n	8003c96 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003c6c:	f7fe f8ee 	bl	8001e4c <HAL_RCC_GetPCLK2Freq>
 8003c70:	61f8      	str	r0, [r7, #28]
        break;
 8003c72:	e010      	b.n	8003c96 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003c74:	4b1d      	ldr	r3, [pc, #116]	; (8003cec <UART_SetConfig+0x454>)
 8003c76:	61fb      	str	r3, [r7, #28]
        break;
 8003c78:	e00d      	b.n	8003c96 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003c7a:	f7fe f839 	bl	8001cf0 <HAL_RCC_GetSysClockFreq>
 8003c7e:	61f8      	str	r0, [r7, #28]
        break;
 8003c80:	e009      	b.n	8003c96 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003c82:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003c86:	61fb      	str	r3, [r7, #28]
        break;
 8003c88:	e005      	b.n	8003c96 <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 8003c8a:	2300      	movs	r3, #0
 8003c8c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003c8e:	2301      	movs	r3, #1
 8003c90:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003c94:	bf00      	nop
    }

    if (pclk != 0U)
 8003c96:	69fb      	ldr	r3, [r7, #28]
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d019      	beq.n	8003cd0 <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	685b      	ldr	r3, [r3, #4]
 8003ca0:	085a      	lsrs	r2, r3, #1
 8003ca2:	69fb      	ldr	r3, [r7, #28]
 8003ca4:	441a      	add	r2, r3
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	685b      	ldr	r3, [r3, #4]
 8003caa:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cae:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003cb0:	69bb      	ldr	r3, [r7, #24]
 8003cb2:	2b0f      	cmp	r3, #15
 8003cb4:	d909      	bls.n	8003cca <UART_SetConfig+0x432>
 8003cb6:	69bb      	ldr	r3, [r7, #24]
 8003cb8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003cbc:	d205      	bcs.n	8003cca <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003cbe:	69bb      	ldr	r3, [r7, #24]
 8003cc0:	b29a      	uxth	r2, r3
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	60da      	str	r2, [r3, #12]
 8003cc8:	e002      	b.n	8003cd0 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8003cca:	2301      	movs	r3, #1
 8003ccc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	2200      	movs	r2, #0
 8003cd4:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	2200      	movs	r2, #0
 8003cda:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003cdc:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8003ce0:	4618      	mov	r0, r3
 8003ce2:	3728      	adds	r7, #40	; 0x28
 8003ce4:	46bd      	mov	sp, r7
 8003ce6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003cea:	bf00      	nop
 8003cec:	00f42400 	.word	0x00f42400

08003cf0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003cf0:	b480      	push	{r7}
 8003cf2:	b083      	sub	sp, #12
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cfc:	f003 0301 	and.w	r3, r3, #1
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d00a      	beq.n	8003d1a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	685b      	ldr	r3, [r3, #4]
 8003d0a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	430a      	orrs	r2, r1
 8003d18:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d1e:	f003 0302 	and.w	r3, r3, #2
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d00a      	beq.n	8003d3c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	685b      	ldr	r3, [r3, #4]
 8003d2c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	430a      	orrs	r2, r1
 8003d3a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d40:	f003 0304 	and.w	r3, r3, #4
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d00a      	beq.n	8003d5e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	685b      	ldr	r3, [r3, #4]
 8003d4e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	430a      	orrs	r2, r1
 8003d5c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d62:	f003 0308 	and.w	r3, r3, #8
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d00a      	beq.n	8003d80 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	685b      	ldr	r3, [r3, #4]
 8003d70:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	430a      	orrs	r2, r1
 8003d7e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d84:	f003 0310 	and.w	r3, r3, #16
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d00a      	beq.n	8003da2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	689b      	ldr	r3, [r3, #8]
 8003d92:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	430a      	orrs	r2, r1
 8003da0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003da6:	f003 0320 	and.w	r3, r3, #32
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d00a      	beq.n	8003dc4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	689b      	ldr	r3, [r3, #8]
 8003db4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	430a      	orrs	r2, r1
 8003dc2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dc8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d01a      	beq.n	8003e06 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	685b      	ldr	r3, [r3, #4]
 8003dd6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	430a      	orrs	r2, r1
 8003de4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dea:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003dee:	d10a      	bne.n	8003e06 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	685b      	ldr	r3, [r3, #4]
 8003df6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	430a      	orrs	r2, r1
 8003e04:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d00a      	beq.n	8003e28 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	685b      	ldr	r3, [r3, #4]
 8003e18:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	430a      	orrs	r2, r1
 8003e26:	605a      	str	r2, [r3, #4]
  }
}
 8003e28:	bf00      	nop
 8003e2a:	370c      	adds	r7, #12
 8003e2c:	46bd      	mov	sp, r7
 8003e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e32:	4770      	bx	lr

08003e34 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003e34:	b580      	push	{r7, lr}
 8003e36:	b086      	sub	sp, #24
 8003e38:	af02      	add	r7, sp, #8
 8003e3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	2200      	movs	r2, #0
 8003e40:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003e44:	f7fc ff5c 	bl	8000d00 <HAL_GetTick>
 8003e48:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	f003 0308 	and.w	r3, r3, #8
 8003e54:	2b08      	cmp	r3, #8
 8003e56:	d10e      	bne.n	8003e76 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003e58:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003e5c:	9300      	str	r3, [sp, #0]
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	2200      	movs	r2, #0
 8003e62:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003e66:	6878      	ldr	r0, [r7, #4]
 8003e68:	f000 f82d 	bl	8003ec6 <UART_WaitOnFlagUntilTimeout>
 8003e6c:	4603      	mov	r3, r0
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d001      	beq.n	8003e76 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003e72:	2303      	movs	r3, #3
 8003e74:	e023      	b.n	8003ebe <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	f003 0304 	and.w	r3, r3, #4
 8003e80:	2b04      	cmp	r3, #4
 8003e82:	d10e      	bne.n	8003ea2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003e84:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003e88:	9300      	str	r3, [sp, #0]
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	2200      	movs	r2, #0
 8003e8e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003e92:	6878      	ldr	r0, [r7, #4]
 8003e94:	f000 f817 	bl	8003ec6 <UART_WaitOnFlagUntilTimeout>
 8003e98:	4603      	mov	r3, r0
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d001      	beq.n	8003ea2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003e9e:	2303      	movs	r3, #3
 8003ea0:	e00d      	b.n	8003ebe <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	2220      	movs	r2, #32
 8003ea6:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	2220      	movs	r2, #32
 8003eac:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	2200      	movs	r2, #0
 8003eb2:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	2200      	movs	r2, #0
 8003eb8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8003ebc:	2300      	movs	r3, #0
}
 8003ebe:	4618      	mov	r0, r3
 8003ec0:	3710      	adds	r7, #16
 8003ec2:	46bd      	mov	sp, r7
 8003ec4:	bd80      	pop	{r7, pc}

08003ec6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003ec6:	b580      	push	{r7, lr}
 8003ec8:	b09c      	sub	sp, #112	; 0x70
 8003eca:	af00      	add	r7, sp, #0
 8003ecc:	60f8      	str	r0, [r7, #12]
 8003ece:	60b9      	str	r1, [r7, #8]
 8003ed0:	603b      	str	r3, [r7, #0]
 8003ed2:	4613      	mov	r3, r2
 8003ed4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003ed6:	e0a5      	b.n	8004024 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ed8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003eda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ede:	f000 80a1 	beq.w	8004024 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ee2:	f7fc ff0d 	bl	8000d00 <HAL_GetTick>
 8003ee6:	4602      	mov	r2, r0
 8003ee8:	683b      	ldr	r3, [r7, #0]
 8003eea:	1ad3      	subs	r3, r2, r3
 8003eec:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8003eee:	429a      	cmp	r2, r3
 8003ef0:	d302      	bcc.n	8003ef8 <UART_WaitOnFlagUntilTimeout+0x32>
 8003ef2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d13e      	bne.n	8003f76 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003efe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003f00:	e853 3f00 	ldrex	r3, [r3]
 8003f04:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003f06:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003f08:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003f0c:	667b      	str	r3, [r7, #100]	; 0x64
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	461a      	mov	r2, r3
 8003f14:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003f16:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003f18:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f1a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003f1c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003f1e:	e841 2300 	strex	r3, r2, [r1]
 8003f22:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8003f24:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d1e6      	bne.n	8003ef8 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	3308      	adds	r3, #8
 8003f30:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f32:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f34:	e853 3f00 	ldrex	r3, [r3]
 8003f38:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003f3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f3c:	f023 0301 	bic.w	r3, r3, #1
 8003f40:	663b      	str	r3, [r7, #96]	; 0x60
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	3308      	adds	r3, #8
 8003f48:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003f4a:	64ba      	str	r2, [r7, #72]	; 0x48
 8003f4c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f4e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003f50:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003f52:	e841 2300 	strex	r3, r2, [r1]
 8003f56:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003f58:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d1e5      	bne.n	8003f2a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	2220      	movs	r2, #32
 8003f62:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	2220      	movs	r2, #32
 8003f68:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	2200      	movs	r2, #0
 8003f6e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8003f72:	2303      	movs	r3, #3
 8003f74:	e067      	b.n	8004046 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	f003 0304 	and.w	r3, r3, #4
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d04f      	beq.n	8004024 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	69db      	ldr	r3, [r3, #28]
 8003f8a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003f8e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003f92:	d147      	bne.n	8004024 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003f9c:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fa6:	e853 3f00 	ldrex	r3, [r3]
 8003faa:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003fac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fae:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003fb2:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	461a      	mov	r2, r3
 8003fba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003fbc:	637b      	str	r3, [r7, #52]	; 0x34
 8003fbe:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fc0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003fc2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003fc4:	e841 2300 	strex	r3, r2, [r1]
 8003fc8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003fca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d1e6      	bne.n	8003f9e <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	3308      	adds	r3, #8
 8003fd6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fd8:	697b      	ldr	r3, [r7, #20]
 8003fda:	e853 3f00 	ldrex	r3, [r3]
 8003fde:	613b      	str	r3, [r7, #16]
   return(result);
 8003fe0:	693b      	ldr	r3, [r7, #16]
 8003fe2:	f023 0301 	bic.w	r3, r3, #1
 8003fe6:	66bb      	str	r3, [r7, #104]	; 0x68
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	3308      	adds	r3, #8
 8003fee:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003ff0:	623a      	str	r2, [r7, #32]
 8003ff2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ff4:	69f9      	ldr	r1, [r7, #28]
 8003ff6:	6a3a      	ldr	r2, [r7, #32]
 8003ff8:	e841 2300 	strex	r3, r2, [r1]
 8003ffc:	61bb      	str	r3, [r7, #24]
   return(result);
 8003ffe:	69bb      	ldr	r3, [r7, #24]
 8004000:	2b00      	cmp	r3, #0
 8004002:	d1e5      	bne.n	8003fd0 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	2220      	movs	r2, #32
 8004008:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	2220      	movs	r2, #32
 800400e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	2220      	movs	r2, #32
 8004014:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	2200      	movs	r2, #0
 800401c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8004020:	2303      	movs	r3, #3
 8004022:	e010      	b.n	8004046 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	69da      	ldr	r2, [r3, #28]
 800402a:	68bb      	ldr	r3, [r7, #8]
 800402c:	4013      	ands	r3, r2
 800402e:	68ba      	ldr	r2, [r7, #8]
 8004030:	429a      	cmp	r2, r3
 8004032:	bf0c      	ite	eq
 8004034:	2301      	moveq	r3, #1
 8004036:	2300      	movne	r3, #0
 8004038:	b2db      	uxtb	r3, r3
 800403a:	461a      	mov	r2, r3
 800403c:	79fb      	ldrb	r3, [r7, #7]
 800403e:	429a      	cmp	r2, r3
 8004040:	f43f af4a 	beq.w	8003ed8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004044:	2300      	movs	r3, #0
}
 8004046:	4618      	mov	r0, r3
 8004048:	3770      	adds	r7, #112	; 0x70
 800404a:	46bd      	mov	sp, r7
 800404c:	bd80      	pop	{r7, pc}
	...

08004050 <__NVIC_SetPriority>:
{
 8004050:	b480      	push	{r7}
 8004052:	b083      	sub	sp, #12
 8004054:	af00      	add	r7, sp, #0
 8004056:	4603      	mov	r3, r0
 8004058:	6039      	str	r1, [r7, #0]
 800405a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800405c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004060:	2b00      	cmp	r3, #0
 8004062:	db0a      	blt.n	800407a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004064:	683b      	ldr	r3, [r7, #0]
 8004066:	b2da      	uxtb	r2, r3
 8004068:	490c      	ldr	r1, [pc, #48]	; (800409c <__NVIC_SetPriority+0x4c>)
 800406a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800406e:	0112      	lsls	r2, r2, #4
 8004070:	b2d2      	uxtb	r2, r2
 8004072:	440b      	add	r3, r1
 8004074:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8004078:	e00a      	b.n	8004090 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800407a:	683b      	ldr	r3, [r7, #0]
 800407c:	b2da      	uxtb	r2, r3
 800407e:	4908      	ldr	r1, [pc, #32]	; (80040a0 <__NVIC_SetPriority+0x50>)
 8004080:	79fb      	ldrb	r3, [r7, #7]
 8004082:	f003 030f 	and.w	r3, r3, #15
 8004086:	3b04      	subs	r3, #4
 8004088:	0112      	lsls	r2, r2, #4
 800408a:	b2d2      	uxtb	r2, r2
 800408c:	440b      	add	r3, r1
 800408e:	761a      	strb	r2, [r3, #24]
}
 8004090:	bf00      	nop
 8004092:	370c      	adds	r7, #12
 8004094:	46bd      	mov	sp, r7
 8004096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800409a:	4770      	bx	lr
 800409c:	e000e100 	.word	0xe000e100
 80040a0:	e000ed00 	.word	0xe000ed00

080040a4 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80040a4:	b580      	push	{r7, lr}
 80040a6:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80040a8:	4b05      	ldr	r3, [pc, #20]	; (80040c0 <SysTick_Handler+0x1c>)
 80040aa:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80040ac:	f001 fd28 	bl	8005b00 <xTaskGetSchedulerState>
 80040b0:	4603      	mov	r3, r0
 80040b2:	2b01      	cmp	r3, #1
 80040b4:	d001      	beq.n	80040ba <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80040b6:	f002 fb0f 	bl	80066d8 <xPortSysTickHandler>
  }
}
 80040ba:	bf00      	nop
 80040bc:	bd80      	pop	{r7, pc}
 80040be:	bf00      	nop
 80040c0:	e000e010 	.word	0xe000e010

080040c4 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80040c4:	b580      	push	{r7, lr}
 80040c6:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80040c8:	2100      	movs	r1, #0
 80040ca:	f06f 0004 	mvn.w	r0, #4
 80040ce:	f7ff ffbf 	bl	8004050 <__NVIC_SetPriority>
#endif
}
 80040d2:	bf00      	nop
 80040d4:	bd80      	pop	{r7, pc}
	...

080040d8 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80040d8:	b480      	push	{r7}
 80040da:	b083      	sub	sp, #12
 80040dc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80040de:	f3ef 8305 	mrs	r3, IPSR
 80040e2:	603b      	str	r3, [r7, #0]
  return(result);
 80040e4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d003      	beq.n	80040f2 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80040ea:	f06f 0305 	mvn.w	r3, #5
 80040ee:	607b      	str	r3, [r7, #4]
 80040f0:	e00c      	b.n	800410c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80040f2:	4b0a      	ldr	r3, [pc, #40]	; (800411c <osKernelInitialize+0x44>)
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d105      	bne.n	8004106 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80040fa:	4b08      	ldr	r3, [pc, #32]	; (800411c <osKernelInitialize+0x44>)
 80040fc:	2201      	movs	r2, #1
 80040fe:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8004100:	2300      	movs	r3, #0
 8004102:	607b      	str	r3, [r7, #4]
 8004104:	e002      	b.n	800410c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8004106:	f04f 33ff 	mov.w	r3, #4294967295
 800410a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800410c:	687b      	ldr	r3, [r7, #4]
}
 800410e:	4618      	mov	r0, r3
 8004110:	370c      	adds	r7, #12
 8004112:	46bd      	mov	sp, r7
 8004114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004118:	4770      	bx	lr
 800411a:	bf00      	nop
 800411c:	20000200 	.word	0x20000200

08004120 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8004120:	b580      	push	{r7, lr}
 8004122:	b082      	sub	sp, #8
 8004124:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004126:	f3ef 8305 	mrs	r3, IPSR
 800412a:	603b      	str	r3, [r7, #0]
  return(result);
 800412c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800412e:	2b00      	cmp	r3, #0
 8004130:	d003      	beq.n	800413a <osKernelStart+0x1a>
    stat = osErrorISR;
 8004132:	f06f 0305 	mvn.w	r3, #5
 8004136:	607b      	str	r3, [r7, #4]
 8004138:	e010      	b.n	800415c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800413a:	4b0b      	ldr	r3, [pc, #44]	; (8004168 <osKernelStart+0x48>)
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	2b01      	cmp	r3, #1
 8004140:	d109      	bne.n	8004156 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8004142:	f7ff ffbf 	bl	80040c4 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8004146:	4b08      	ldr	r3, [pc, #32]	; (8004168 <osKernelStart+0x48>)
 8004148:	2202      	movs	r2, #2
 800414a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800414c:	f001 f87c 	bl	8005248 <vTaskStartScheduler>
      stat = osOK;
 8004150:	2300      	movs	r3, #0
 8004152:	607b      	str	r3, [r7, #4]
 8004154:	e002      	b.n	800415c <osKernelStart+0x3c>
    } else {
      stat = osError;
 8004156:	f04f 33ff 	mov.w	r3, #4294967295
 800415a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800415c:	687b      	ldr	r3, [r7, #4]
}
 800415e:	4618      	mov	r0, r3
 8004160:	3708      	adds	r7, #8
 8004162:	46bd      	mov	sp, r7
 8004164:	bd80      	pop	{r7, pc}
 8004166:	bf00      	nop
 8004168:	20000200 	.word	0x20000200

0800416c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800416c:	b580      	push	{r7, lr}
 800416e:	b08e      	sub	sp, #56	; 0x38
 8004170:	af04      	add	r7, sp, #16
 8004172:	60f8      	str	r0, [r7, #12]
 8004174:	60b9      	str	r1, [r7, #8]
 8004176:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8004178:	2300      	movs	r3, #0
 800417a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800417c:	f3ef 8305 	mrs	r3, IPSR
 8004180:	617b      	str	r3, [r7, #20]
  return(result);
 8004182:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8004184:	2b00      	cmp	r3, #0
 8004186:	d17e      	bne.n	8004286 <osThreadNew+0x11a>
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	2b00      	cmp	r3, #0
 800418c:	d07b      	beq.n	8004286 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800418e:	2380      	movs	r3, #128	; 0x80
 8004190:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8004192:	2318      	movs	r3, #24
 8004194:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8004196:	2300      	movs	r3, #0
 8004198:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800419a:	f04f 33ff 	mov.w	r3, #4294967295
 800419e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d045      	beq.n	8004232 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d002      	beq.n	80041b4 <osThreadNew+0x48>
        name = attr->name;
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	699b      	ldr	r3, [r3, #24]
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d002      	beq.n	80041c2 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	699b      	ldr	r3, [r3, #24]
 80041c0:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80041c2:	69fb      	ldr	r3, [r7, #28]
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d008      	beq.n	80041da <osThreadNew+0x6e>
 80041c8:	69fb      	ldr	r3, [r7, #28]
 80041ca:	2b38      	cmp	r3, #56	; 0x38
 80041cc:	d805      	bhi.n	80041da <osThreadNew+0x6e>
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	685b      	ldr	r3, [r3, #4]
 80041d2:	f003 0301 	and.w	r3, r3, #1
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d001      	beq.n	80041de <osThreadNew+0x72>
        return (NULL);
 80041da:	2300      	movs	r3, #0
 80041dc:	e054      	b.n	8004288 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	695b      	ldr	r3, [r3, #20]
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d003      	beq.n	80041ee <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	695b      	ldr	r3, [r3, #20]
 80041ea:	089b      	lsrs	r3, r3, #2
 80041ec:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	689b      	ldr	r3, [r3, #8]
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d00e      	beq.n	8004214 <osThreadNew+0xa8>
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	68db      	ldr	r3, [r3, #12]
 80041fa:	2bbb      	cmp	r3, #187	; 0xbb
 80041fc:	d90a      	bls.n	8004214 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004202:	2b00      	cmp	r3, #0
 8004204:	d006      	beq.n	8004214 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	695b      	ldr	r3, [r3, #20]
 800420a:	2b00      	cmp	r3, #0
 800420c:	d002      	beq.n	8004214 <osThreadNew+0xa8>
        mem = 1;
 800420e:	2301      	movs	r3, #1
 8004210:	61bb      	str	r3, [r7, #24]
 8004212:	e010      	b.n	8004236 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	689b      	ldr	r3, [r3, #8]
 8004218:	2b00      	cmp	r3, #0
 800421a:	d10c      	bne.n	8004236 <osThreadNew+0xca>
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	68db      	ldr	r3, [r3, #12]
 8004220:	2b00      	cmp	r3, #0
 8004222:	d108      	bne.n	8004236 <osThreadNew+0xca>
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	691b      	ldr	r3, [r3, #16]
 8004228:	2b00      	cmp	r3, #0
 800422a:	d104      	bne.n	8004236 <osThreadNew+0xca>
          mem = 0;
 800422c:	2300      	movs	r3, #0
 800422e:	61bb      	str	r3, [r7, #24]
 8004230:	e001      	b.n	8004236 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8004232:	2300      	movs	r3, #0
 8004234:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8004236:	69bb      	ldr	r3, [r7, #24]
 8004238:	2b01      	cmp	r3, #1
 800423a:	d110      	bne.n	800425e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8004240:	687a      	ldr	r2, [r7, #4]
 8004242:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004244:	9202      	str	r2, [sp, #8]
 8004246:	9301      	str	r3, [sp, #4]
 8004248:	69fb      	ldr	r3, [r7, #28]
 800424a:	9300      	str	r3, [sp, #0]
 800424c:	68bb      	ldr	r3, [r7, #8]
 800424e:	6a3a      	ldr	r2, [r7, #32]
 8004250:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004252:	68f8      	ldr	r0, [r7, #12]
 8004254:	f000 fe0c 	bl	8004e70 <xTaskCreateStatic>
 8004258:	4603      	mov	r3, r0
 800425a:	613b      	str	r3, [r7, #16]
 800425c:	e013      	b.n	8004286 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800425e:	69bb      	ldr	r3, [r7, #24]
 8004260:	2b00      	cmp	r3, #0
 8004262:	d110      	bne.n	8004286 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8004264:	6a3b      	ldr	r3, [r7, #32]
 8004266:	b29a      	uxth	r2, r3
 8004268:	f107 0310 	add.w	r3, r7, #16
 800426c:	9301      	str	r3, [sp, #4]
 800426e:	69fb      	ldr	r3, [r7, #28]
 8004270:	9300      	str	r3, [sp, #0]
 8004272:	68bb      	ldr	r3, [r7, #8]
 8004274:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004276:	68f8      	ldr	r0, [r7, #12]
 8004278:	f000 fe57 	bl	8004f2a <xTaskCreate>
 800427c:	4603      	mov	r3, r0
 800427e:	2b01      	cmp	r3, #1
 8004280:	d001      	beq.n	8004286 <osThreadNew+0x11a>
            hTask = NULL;
 8004282:	2300      	movs	r3, #0
 8004284:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8004286:	693b      	ldr	r3, [r7, #16]
}
 8004288:	4618      	mov	r0, r3
 800428a:	3728      	adds	r7, #40	; 0x28
 800428c:	46bd      	mov	sp, r7
 800428e:	bd80      	pop	{r7, pc}

08004290 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8004290:	b580      	push	{r7, lr}
 8004292:	b084      	sub	sp, #16
 8004294:	af00      	add	r7, sp, #0
 8004296:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004298:	f3ef 8305 	mrs	r3, IPSR
 800429c:	60bb      	str	r3, [r7, #8]
  return(result);
 800429e:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d003      	beq.n	80042ac <osDelay+0x1c>
    stat = osErrorISR;
 80042a4:	f06f 0305 	mvn.w	r3, #5
 80042a8:	60fb      	str	r3, [r7, #12]
 80042aa:	e007      	b.n	80042bc <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80042ac:	2300      	movs	r3, #0
 80042ae:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d002      	beq.n	80042bc <osDelay+0x2c>
      vTaskDelay(ticks);
 80042b6:	6878      	ldr	r0, [r7, #4]
 80042b8:	f000 ff92 	bl	80051e0 <vTaskDelay>
    }
  }

  return (stat);
 80042bc:	68fb      	ldr	r3, [r7, #12]
}
 80042be:	4618      	mov	r0, r3
 80042c0:	3710      	adds	r7, #16
 80042c2:	46bd      	mov	sp, r7
 80042c4:	bd80      	pop	{r7, pc}
	...

080042c8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80042c8:	b480      	push	{r7}
 80042ca:	b085      	sub	sp, #20
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	60f8      	str	r0, [r7, #12]
 80042d0:	60b9      	str	r1, [r7, #8]
 80042d2:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	4a07      	ldr	r2, [pc, #28]	; (80042f4 <vApplicationGetIdleTaskMemory+0x2c>)
 80042d8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80042da:	68bb      	ldr	r3, [r7, #8]
 80042dc:	4a06      	ldr	r2, [pc, #24]	; (80042f8 <vApplicationGetIdleTaskMemory+0x30>)
 80042de:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	2280      	movs	r2, #128	; 0x80
 80042e4:	601a      	str	r2, [r3, #0]
}
 80042e6:	bf00      	nop
 80042e8:	3714      	adds	r7, #20
 80042ea:	46bd      	mov	sp, r7
 80042ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f0:	4770      	bx	lr
 80042f2:	bf00      	nop
 80042f4:	20000204 	.word	0x20000204
 80042f8:	200002c0 	.word	0x200002c0

080042fc <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80042fc:	b480      	push	{r7}
 80042fe:	b085      	sub	sp, #20
 8004300:	af00      	add	r7, sp, #0
 8004302:	60f8      	str	r0, [r7, #12]
 8004304:	60b9      	str	r1, [r7, #8]
 8004306:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	4a07      	ldr	r2, [pc, #28]	; (8004328 <vApplicationGetTimerTaskMemory+0x2c>)
 800430c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800430e:	68bb      	ldr	r3, [r7, #8]
 8004310:	4a06      	ldr	r2, [pc, #24]	; (800432c <vApplicationGetTimerTaskMemory+0x30>)
 8004312:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	f44f 7280 	mov.w	r2, #256	; 0x100
 800431a:	601a      	str	r2, [r3, #0]
}
 800431c:	bf00      	nop
 800431e:	3714      	adds	r7, #20
 8004320:	46bd      	mov	sp, r7
 8004322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004326:	4770      	bx	lr
 8004328:	200004c0 	.word	0x200004c0
 800432c:	2000057c 	.word	0x2000057c

08004330 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004330:	b480      	push	{r7}
 8004332:	b083      	sub	sp, #12
 8004334:	af00      	add	r7, sp, #0
 8004336:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	f103 0208 	add.w	r2, r3, #8
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	f04f 32ff 	mov.w	r2, #4294967295
 8004348:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	f103 0208 	add.w	r2, r3, #8
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	f103 0208 	add.w	r2, r3, #8
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	2200      	movs	r2, #0
 8004362:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004364:	bf00      	nop
 8004366:	370c      	adds	r7, #12
 8004368:	46bd      	mov	sp, r7
 800436a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800436e:	4770      	bx	lr

08004370 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004370:	b480      	push	{r7}
 8004372:	b083      	sub	sp, #12
 8004374:	af00      	add	r7, sp, #0
 8004376:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	2200      	movs	r2, #0
 800437c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800437e:	bf00      	nop
 8004380:	370c      	adds	r7, #12
 8004382:	46bd      	mov	sp, r7
 8004384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004388:	4770      	bx	lr

0800438a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800438a:	b480      	push	{r7}
 800438c:	b085      	sub	sp, #20
 800438e:	af00      	add	r7, sp, #0
 8004390:	6078      	str	r0, [r7, #4]
 8004392:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	685b      	ldr	r3, [r3, #4]
 8004398:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800439a:	683b      	ldr	r3, [r7, #0]
 800439c:	68fa      	ldr	r2, [r7, #12]
 800439e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	689a      	ldr	r2, [r3, #8]
 80043a4:	683b      	ldr	r3, [r7, #0]
 80043a6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	689b      	ldr	r3, [r3, #8]
 80043ac:	683a      	ldr	r2, [r7, #0]
 80043ae:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	683a      	ldr	r2, [r7, #0]
 80043b4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80043b6:	683b      	ldr	r3, [r7, #0]
 80043b8:	687a      	ldr	r2, [r7, #4]
 80043ba:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	1c5a      	adds	r2, r3, #1
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	601a      	str	r2, [r3, #0]
}
 80043c6:	bf00      	nop
 80043c8:	3714      	adds	r7, #20
 80043ca:	46bd      	mov	sp, r7
 80043cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d0:	4770      	bx	lr

080043d2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80043d2:	b480      	push	{r7}
 80043d4:	b085      	sub	sp, #20
 80043d6:	af00      	add	r7, sp, #0
 80043d8:	6078      	str	r0, [r7, #4]
 80043da:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80043dc:	683b      	ldr	r3, [r7, #0]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80043e2:	68bb      	ldr	r3, [r7, #8]
 80043e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043e8:	d103      	bne.n	80043f2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	691b      	ldr	r3, [r3, #16]
 80043ee:	60fb      	str	r3, [r7, #12]
 80043f0:	e00c      	b.n	800440c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	3308      	adds	r3, #8
 80043f6:	60fb      	str	r3, [r7, #12]
 80043f8:	e002      	b.n	8004400 <vListInsert+0x2e>
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	685b      	ldr	r3, [r3, #4]
 80043fe:	60fb      	str	r3, [r7, #12]
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	685b      	ldr	r3, [r3, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	68ba      	ldr	r2, [r7, #8]
 8004408:	429a      	cmp	r2, r3
 800440a:	d2f6      	bcs.n	80043fa <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	685a      	ldr	r2, [r3, #4]
 8004410:	683b      	ldr	r3, [r7, #0]
 8004412:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004414:	683b      	ldr	r3, [r7, #0]
 8004416:	685b      	ldr	r3, [r3, #4]
 8004418:	683a      	ldr	r2, [r7, #0]
 800441a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800441c:	683b      	ldr	r3, [r7, #0]
 800441e:	68fa      	ldr	r2, [r7, #12]
 8004420:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	683a      	ldr	r2, [r7, #0]
 8004426:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004428:	683b      	ldr	r3, [r7, #0]
 800442a:	687a      	ldr	r2, [r7, #4]
 800442c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	1c5a      	adds	r2, r3, #1
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	601a      	str	r2, [r3, #0]
}
 8004438:	bf00      	nop
 800443a:	3714      	adds	r7, #20
 800443c:	46bd      	mov	sp, r7
 800443e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004442:	4770      	bx	lr

08004444 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004444:	b480      	push	{r7}
 8004446:	b085      	sub	sp, #20
 8004448:	af00      	add	r7, sp, #0
 800444a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	691b      	ldr	r3, [r3, #16]
 8004450:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	685b      	ldr	r3, [r3, #4]
 8004456:	687a      	ldr	r2, [r7, #4]
 8004458:	6892      	ldr	r2, [r2, #8]
 800445a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	689b      	ldr	r3, [r3, #8]
 8004460:	687a      	ldr	r2, [r7, #4]
 8004462:	6852      	ldr	r2, [r2, #4]
 8004464:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	685b      	ldr	r3, [r3, #4]
 800446a:	687a      	ldr	r2, [r7, #4]
 800446c:	429a      	cmp	r2, r3
 800446e:	d103      	bne.n	8004478 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	689a      	ldr	r2, [r3, #8]
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	2200      	movs	r2, #0
 800447c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	1e5a      	subs	r2, r3, #1
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	681b      	ldr	r3, [r3, #0]
}
 800448c:	4618      	mov	r0, r3
 800448e:	3714      	adds	r7, #20
 8004490:	46bd      	mov	sp, r7
 8004492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004496:	4770      	bx	lr

08004498 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004498:	b580      	push	{r7, lr}
 800449a:	b084      	sub	sp, #16
 800449c:	af00      	add	r7, sp, #0
 800449e:	6078      	str	r0, [r7, #4]
 80044a0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d10a      	bne.n	80044c2 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80044ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044b0:	f383 8811 	msr	BASEPRI, r3
 80044b4:	f3bf 8f6f 	isb	sy
 80044b8:	f3bf 8f4f 	dsb	sy
 80044bc:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80044be:	bf00      	nop
 80044c0:	e7fe      	b.n	80044c0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80044c2:	f002 f877 	bl	80065b4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	681a      	ldr	r2, [r3, #0]
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044ce:	68f9      	ldr	r1, [r7, #12]
 80044d0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80044d2:	fb01 f303 	mul.w	r3, r1, r3
 80044d6:	441a      	add	r2, r3
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	2200      	movs	r2, #0
 80044e0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	681a      	ldr	r2, [r3, #0]
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	681a      	ldr	r2, [r3, #0]
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044f2:	3b01      	subs	r3, #1
 80044f4:	68f9      	ldr	r1, [r7, #12]
 80044f6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80044f8:	fb01 f303 	mul.w	r3, r1, r3
 80044fc:	441a      	add	r2, r3
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	22ff      	movs	r2, #255	; 0xff
 8004506:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	22ff      	movs	r2, #255	; 0xff
 800450e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8004512:	683b      	ldr	r3, [r7, #0]
 8004514:	2b00      	cmp	r3, #0
 8004516:	d114      	bne.n	8004542 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	691b      	ldr	r3, [r3, #16]
 800451c:	2b00      	cmp	r3, #0
 800451e:	d01a      	beq.n	8004556 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	3310      	adds	r3, #16
 8004524:	4618      	mov	r0, r3
 8004526:	f001 f929 	bl	800577c <xTaskRemoveFromEventList>
 800452a:	4603      	mov	r3, r0
 800452c:	2b00      	cmp	r3, #0
 800452e:	d012      	beq.n	8004556 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004530:	4b0c      	ldr	r3, [pc, #48]	; (8004564 <xQueueGenericReset+0xcc>)
 8004532:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004536:	601a      	str	r2, [r3, #0]
 8004538:	f3bf 8f4f 	dsb	sy
 800453c:	f3bf 8f6f 	isb	sy
 8004540:	e009      	b.n	8004556 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	3310      	adds	r3, #16
 8004546:	4618      	mov	r0, r3
 8004548:	f7ff fef2 	bl	8004330 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	3324      	adds	r3, #36	; 0x24
 8004550:	4618      	mov	r0, r3
 8004552:	f7ff feed 	bl	8004330 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004556:	f002 f85d 	bl	8006614 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800455a:	2301      	movs	r3, #1
}
 800455c:	4618      	mov	r0, r3
 800455e:	3710      	adds	r7, #16
 8004560:	46bd      	mov	sp, r7
 8004562:	bd80      	pop	{r7, pc}
 8004564:	e000ed04 	.word	0xe000ed04

08004568 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004568:	b580      	push	{r7, lr}
 800456a:	b08e      	sub	sp, #56	; 0x38
 800456c:	af02      	add	r7, sp, #8
 800456e:	60f8      	str	r0, [r7, #12]
 8004570:	60b9      	str	r1, [r7, #8]
 8004572:	607a      	str	r2, [r7, #4]
 8004574:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	2b00      	cmp	r3, #0
 800457a:	d10a      	bne.n	8004592 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800457c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004580:	f383 8811 	msr	BASEPRI, r3
 8004584:	f3bf 8f6f 	isb	sy
 8004588:	f3bf 8f4f 	dsb	sy
 800458c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800458e:	bf00      	nop
 8004590:	e7fe      	b.n	8004590 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004592:	683b      	ldr	r3, [r7, #0]
 8004594:	2b00      	cmp	r3, #0
 8004596:	d10a      	bne.n	80045ae <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8004598:	f04f 0350 	mov.w	r3, #80	; 0x50
 800459c:	f383 8811 	msr	BASEPRI, r3
 80045a0:	f3bf 8f6f 	isb	sy
 80045a4:	f3bf 8f4f 	dsb	sy
 80045a8:	627b      	str	r3, [r7, #36]	; 0x24
}
 80045aa:	bf00      	nop
 80045ac:	e7fe      	b.n	80045ac <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d002      	beq.n	80045ba <xQueueGenericCreateStatic+0x52>
 80045b4:	68bb      	ldr	r3, [r7, #8]
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d001      	beq.n	80045be <xQueueGenericCreateStatic+0x56>
 80045ba:	2301      	movs	r3, #1
 80045bc:	e000      	b.n	80045c0 <xQueueGenericCreateStatic+0x58>
 80045be:	2300      	movs	r3, #0
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d10a      	bne.n	80045da <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80045c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045c8:	f383 8811 	msr	BASEPRI, r3
 80045cc:	f3bf 8f6f 	isb	sy
 80045d0:	f3bf 8f4f 	dsb	sy
 80045d4:	623b      	str	r3, [r7, #32]
}
 80045d6:	bf00      	nop
 80045d8:	e7fe      	b.n	80045d8 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d102      	bne.n	80045e6 <xQueueGenericCreateStatic+0x7e>
 80045e0:	68bb      	ldr	r3, [r7, #8]
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d101      	bne.n	80045ea <xQueueGenericCreateStatic+0x82>
 80045e6:	2301      	movs	r3, #1
 80045e8:	e000      	b.n	80045ec <xQueueGenericCreateStatic+0x84>
 80045ea:	2300      	movs	r3, #0
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d10a      	bne.n	8004606 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80045f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045f4:	f383 8811 	msr	BASEPRI, r3
 80045f8:	f3bf 8f6f 	isb	sy
 80045fc:	f3bf 8f4f 	dsb	sy
 8004600:	61fb      	str	r3, [r7, #28]
}
 8004602:	bf00      	nop
 8004604:	e7fe      	b.n	8004604 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004606:	2350      	movs	r3, #80	; 0x50
 8004608:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800460a:	697b      	ldr	r3, [r7, #20]
 800460c:	2b50      	cmp	r3, #80	; 0x50
 800460e:	d00a      	beq.n	8004626 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8004610:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004614:	f383 8811 	msr	BASEPRI, r3
 8004618:	f3bf 8f6f 	isb	sy
 800461c:	f3bf 8f4f 	dsb	sy
 8004620:	61bb      	str	r3, [r7, #24]
}
 8004622:	bf00      	nop
 8004624:	e7fe      	b.n	8004624 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8004626:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004628:	683b      	ldr	r3, [r7, #0]
 800462a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800462c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800462e:	2b00      	cmp	r3, #0
 8004630:	d00d      	beq.n	800464e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004632:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004634:	2201      	movs	r2, #1
 8004636:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800463a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800463e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004640:	9300      	str	r3, [sp, #0]
 8004642:	4613      	mov	r3, r2
 8004644:	687a      	ldr	r2, [r7, #4]
 8004646:	68b9      	ldr	r1, [r7, #8]
 8004648:	68f8      	ldr	r0, [r7, #12]
 800464a:	f000 f805 	bl	8004658 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800464e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8004650:	4618      	mov	r0, r3
 8004652:	3730      	adds	r7, #48	; 0x30
 8004654:	46bd      	mov	sp, r7
 8004656:	bd80      	pop	{r7, pc}

08004658 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004658:	b580      	push	{r7, lr}
 800465a:	b084      	sub	sp, #16
 800465c:	af00      	add	r7, sp, #0
 800465e:	60f8      	str	r0, [r7, #12]
 8004660:	60b9      	str	r1, [r7, #8]
 8004662:	607a      	str	r2, [r7, #4]
 8004664:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004666:	68bb      	ldr	r3, [r7, #8]
 8004668:	2b00      	cmp	r3, #0
 800466a:	d103      	bne.n	8004674 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800466c:	69bb      	ldr	r3, [r7, #24]
 800466e:	69ba      	ldr	r2, [r7, #24]
 8004670:	601a      	str	r2, [r3, #0]
 8004672:	e002      	b.n	800467a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004674:	69bb      	ldr	r3, [r7, #24]
 8004676:	687a      	ldr	r2, [r7, #4]
 8004678:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800467a:	69bb      	ldr	r3, [r7, #24]
 800467c:	68fa      	ldr	r2, [r7, #12]
 800467e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004680:	69bb      	ldr	r3, [r7, #24]
 8004682:	68ba      	ldr	r2, [r7, #8]
 8004684:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004686:	2101      	movs	r1, #1
 8004688:	69b8      	ldr	r0, [r7, #24]
 800468a:	f7ff ff05 	bl	8004498 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800468e:	69bb      	ldr	r3, [r7, #24]
 8004690:	78fa      	ldrb	r2, [r7, #3]
 8004692:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004696:	bf00      	nop
 8004698:	3710      	adds	r7, #16
 800469a:	46bd      	mov	sp, r7
 800469c:	bd80      	pop	{r7, pc}
	...

080046a0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80046a0:	b580      	push	{r7, lr}
 80046a2:	b08e      	sub	sp, #56	; 0x38
 80046a4:	af00      	add	r7, sp, #0
 80046a6:	60f8      	str	r0, [r7, #12]
 80046a8:	60b9      	str	r1, [r7, #8]
 80046aa:	607a      	str	r2, [r7, #4]
 80046ac:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80046ae:	2300      	movs	r3, #0
 80046b0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80046b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d10a      	bne.n	80046d2 <xQueueGenericSend+0x32>
	__asm volatile
 80046bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046c0:	f383 8811 	msr	BASEPRI, r3
 80046c4:	f3bf 8f6f 	isb	sy
 80046c8:	f3bf 8f4f 	dsb	sy
 80046cc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80046ce:	bf00      	nop
 80046d0:	e7fe      	b.n	80046d0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80046d2:	68bb      	ldr	r3, [r7, #8]
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d103      	bne.n	80046e0 <xQueueGenericSend+0x40>
 80046d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d101      	bne.n	80046e4 <xQueueGenericSend+0x44>
 80046e0:	2301      	movs	r3, #1
 80046e2:	e000      	b.n	80046e6 <xQueueGenericSend+0x46>
 80046e4:	2300      	movs	r3, #0
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d10a      	bne.n	8004700 <xQueueGenericSend+0x60>
	__asm volatile
 80046ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046ee:	f383 8811 	msr	BASEPRI, r3
 80046f2:	f3bf 8f6f 	isb	sy
 80046f6:	f3bf 8f4f 	dsb	sy
 80046fa:	627b      	str	r3, [r7, #36]	; 0x24
}
 80046fc:	bf00      	nop
 80046fe:	e7fe      	b.n	80046fe <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004700:	683b      	ldr	r3, [r7, #0]
 8004702:	2b02      	cmp	r3, #2
 8004704:	d103      	bne.n	800470e <xQueueGenericSend+0x6e>
 8004706:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004708:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800470a:	2b01      	cmp	r3, #1
 800470c:	d101      	bne.n	8004712 <xQueueGenericSend+0x72>
 800470e:	2301      	movs	r3, #1
 8004710:	e000      	b.n	8004714 <xQueueGenericSend+0x74>
 8004712:	2300      	movs	r3, #0
 8004714:	2b00      	cmp	r3, #0
 8004716:	d10a      	bne.n	800472e <xQueueGenericSend+0x8e>
	__asm volatile
 8004718:	f04f 0350 	mov.w	r3, #80	; 0x50
 800471c:	f383 8811 	msr	BASEPRI, r3
 8004720:	f3bf 8f6f 	isb	sy
 8004724:	f3bf 8f4f 	dsb	sy
 8004728:	623b      	str	r3, [r7, #32]
}
 800472a:	bf00      	nop
 800472c:	e7fe      	b.n	800472c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800472e:	f001 f9e7 	bl	8005b00 <xTaskGetSchedulerState>
 8004732:	4603      	mov	r3, r0
 8004734:	2b00      	cmp	r3, #0
 8004736:	d102      	bne.n	800473e <xQueueGenericSend+0x9e>
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	2b00      	cmp	r3, #0
 800473c:	d101      	bne.n	8004742 <xQueueGenericSend+0xa2>
 800473e:	2301      	movs	r3, #1
 8004740:	e000      	b.n	8004744 <xQueueGenericSend+0xa4>
 8004742:	2300      	movs	r3, #0
 8004744:	2b00      	cmp	r3, #0
 8004746:	d10a      	bne.n	800475e <xQueueGenericSend+0xbe>
	__asm volatile
 8004748:	f04f 0350 	mov.w	r3, #80	; 0x50
 800474c:	f383 8811 	msr	BASEPRI, r3
 8004750:	f3bf 8f6f 	isb	sy
 8004754:	f3bf 8f4f 	dsb	sy
 8004758:	61fb      	str	r3, [r7, #28]
}
 800475a:	bf00      	nop
 800475c:	e7fe      	b.n	800475c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800475e:	f001 ff29 	bl	80065b4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004762:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004764:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004766:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004768:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800476a:	429a      	cmp	r2, r3
 800476c:	d302      	bcc.n	8004774 <xQueueGenericSend+0xd4>
 800476e:	683b      	ldr	r3, [r7, #0]
 8004770:	2b02      	cmp	r3, #2
 8004772:	d129      	bne.n	80047c8 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004774:	683a      	ldr	r2, [r7, #0]
 8004776:	68b9      	ldr	r1, [r7, #8]
 8004778:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800477a:	f000 fa0b 	bl	8004b94 <prvCopyDataToQueue>
 800477e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004780:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004782:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004784:	2b00      	cmp	r3, #0
 8004786:	d010      	beq.n	80047aa <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004788:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800478a:	3324      	adds	r3, #36	; 0x24
 800478c:	4618      	mov	r0, r3
 800478e:	f000 fff5 	bl	800577c <xTaskRemoveFromEventList>
 8004792:	4603      	mov	r3, r0
 8004794:	2b00      	cmp	r3, #0
 8004796:	d013      	beq.n	80047c0 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004798:	4b3f      	ldr	r3, [pc, #252]	; (8004898 <xQueueGenericSend+0x1f8>)
 800479a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800479e:	601a      	str	r2, [r3, #0]
 80047a0:	f3bf 8f4f 	dsb	sy
 80047a4:	f3bf 8f6f 	isb	sy
 80047a8:	e00a      	b.n	80047c0 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80047aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d007      	beq.n	80047c0 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80047b0:	4b39      	ldr	r3, [pc, #228]	; (8004898 <xQueueGenericSend+0x1f8>)
 80047b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80047b6:	601a      	str	r2, [r3, #0]
 80047b8:	f3bf 8f4f 	dsb	sy
 80047bc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80047c0:	f001 ff28 	bl	8006614 <vPortExitCritical>
				return pdPASS;
 80047c4:	2301      	movs	r3, #1
 80047c6:	e063      	b.n	8004890 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d103      	bne.n	80047d6 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80047ce:	f001 ff21 	bl	8006614 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80047d2:	2300      	movs	r3, #0
 80047d4:	e05c      	b.n	8004890 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80047d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d106      	bne.n	80047ea <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80047dc:	f107 0314 	add.w	r3, r7, #20
 80047e0:	4618      	mov	r0, r3
 80047e2:	f001 f82f 	bl	8005844 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80047e6:	2301      	movs	r3, #1
 80047e8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80047ea:	f001 ff13 	bl	8006614 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80047ee:	f000 fd9b 	bl	8005328 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80047f2:	f001 fedf 	bl	80065b4 <vPortEnterCritical>
 80047f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047f8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80047fc:	b25b      	sxtb	r3, r3
 80047fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004802:	d103      	bne.n	800480c <xQueueGenericSend+0x16c>
 8004804:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004806:	2200      	movs	r2, #0
 8004808:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800480c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800480e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004812:	b25b      	sxtb	r3, r3
 8004814:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004818:	d103      	bne.n	8004822 <xQueueGenericSend+0x182>
 800481a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800481c:	2200      	movs	r2, #0
 800481e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004822:	f001 fef7 	bl	8006614 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004826:	1d3a      	adds	r2, r7, #4
 8004828:	f107 0314 	add.w	r3, r7, #20
 800482c:	4611      	mov	r1, r2
 800482e:	4618      	mov	r0, r3
 8004830:	f001 f81e 	bl	8005870 <xTaskCheckForTimeOut>
 8004834:	4603      	mov	r3, r0
 8004836:	2b00      	cmp	r3, #0
 8004838:	d124      	bne.n	8004884 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800483a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800483c:	f000 faa2 	bl	8004d84 <prvIsQueueFull>
 8004840:	4603      	mov	r3, r0
 8004842:	2b00      	cmp	r3, #0
 8004844:	d018      	beq.n	8004878 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004846:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004848:	3310      	adds	r3, #16
 800484a:	687a      	ldr	r2, [r7, #4]
 800484c:	4611      	mov	r1, r2
 800484e:	4618      	mov	r0, r3
 8004850:	f000 ff44 	bl	80056dc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004854:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004856:	f000 fa2d 	bl	8004cb4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800485a:	f000 fd73 	bl	8005344 <xTaskResumeAll>
 800485e:	4603      	mov	r3, r0
 8004860:	2b00      	cmp	r3, #0
 8004862:	f47f af7c 	bne.w	800475e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8004866:	4b0c      	ldr	r3, [pc, #48]	; (8004898 <xQueueGenericSend+0x1f8>)
 8004868:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800486c:	601a      	str	r2, [r3, #0]
 800486e:	f3bf 8f4f 	dsb	sy
 8004872:	f3bf 8f6f 	isb	sy
 8004876:	e772      	b.n	800475e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004878:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800487a:	f000 fa1b 	bl	8004cb4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800487e:	f000 fd61 	bl	8005344 <xTaskResumeAll>
 8004882:	e76c      	b.n	800475e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004884:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004886:	f000 fa15 	bl	8004cb4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800488a:	f000 fd5b 	bl	8005344 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800488e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8004890:	4618      	mov	r0, r3
 8004892:	3738      	adds	r7, #56	; 0x38
 8004894:	46bd      	mov	sp, r7
 8004896:	bd80      	pop	{r7, pc}
 8004898:	e000ed04 	.word	0xe000ed04

0800489c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800489c:	b580      	push	{r7, lr}
 800489e:	b090      	sub	sp, #64	; 0x40
 80048a0:	af00      	add	r7, sp, #0
 80048a2:	60f8      	str	r0, [r7, #12]
 80048a4:	60b9      	str	r1, [r7, #8]
 80048a6:	607a      	str	r2, [r7, #4]
 80048a8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80048ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d10a      	bne.n	80048ca <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80048b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048b8:	f383 8811 	msr	BASEPRI, r3
 80048bc:	f3bf 8f6f 	isb	sy
 80048c0:	f3bf 8f4f 	dsb	sy
 80048c4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80048c6:	bf00      	nop
 80048c8:	e7fe      	b.n	80048c8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80048ca:	68bb      	ldr	r3, [r7, #8]
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d103      	bne.n	80048d8 <xQueueGenericSendFromISR+0x3c>
 80048d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d101      	bne.n	80048dc <xQueueGenericSendFromISR+0x40>
 80048d8:	2301      	movs	r3, #1
 80048da:	e000      	b.n	80048de <xQueueGenericSendFromISR+0x42>
 80048dc:	2300      	movs	r3, #0
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d10a      	bne.n	80048f8 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80048e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048e6:	f383 8811 	msr	BASEPRI, r3
 80048ea:	f3bf 8f6f 	isb	sy
 80048ee:	f3bf 8f4f 	dsb	sy
 80048f2:	627b      	str	r3, [r7, #36]	; 0x24
}
 80048f4:	bf00      	nop
 80048f6:	e7fe      	b.n	80048f6 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80048f8:	683b      	ldr	r3, [r7, #0]
 80048fa:	2b02      	cmp	r3, #2
 80048fc:	d103      	bne.n	8004906 <xQueueGenericSendFromISR+0x6a>
 80048fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004900:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004902:	2b01      	cmp	r3, #1
 8004904:	d101      	bne.n	800490a <xQueueGenericSendFromISR+0x6e>
 8004906:	2301      	movs	r3, #1
 8004908:	e000      	b.n	800490c <xQueueGenericSendFromISR+0x70>
 800490a:	2300      	movs	r3, #0
 800490c:	2b00      	cmp	r3, #0
 800490e:	d10a      	bne.n	8004926 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8004910:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004914:	f383 8811 	msr	BASEPRI, r3
 8004918:	f3bf 8f6f 	isb	sy
 800491c:	f3bf 8f4f 	dsb	sy
 8004920:	623b      	str	r3, [r7, #32]
}
 8004922:	bf00      	nop
 8004924:	e7fe      	b.n	8004924 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004926:	f001 ff27 	bl	8006778 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800492a:	f3ef 8211 	mrs	r2, BASEPRI
 800492e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004932:	f383 8811 	msr	BASEPRI, r3
 8004936:	f3bf 8f6f 	isb	sy
 800493a:	f3bf 8f4f 	dsb	sy
 800493e:	61fa      	str	r2, [r7, #28]
 8004940:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004942:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004944:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004946:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004948:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800494a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800494c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800494e:	429a      	cmp	r2, r3
 8004950:	d302      	bcc.n	8004958 <xQueueGenericSendFromISR+0xbc>
 8004952:	683b      	ldr	r3, [r7, #0]
 8004954:	2b02      	cmp	r3, #2
 8004956:	d12f      	bne.n	80049b8 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004958:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800495a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800495e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004962:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004964:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004966:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004968:	683a      	ldr	r2, [r7, #0]
 800496a:	68b9      	ldr	r1, [r7, #8]
 800496c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800496e:	f000 f911 	bl	8004b94 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004972:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8004976:	f1b3 3fff 	cmp.w	r3, #4294967295
 800497a:	d112      	bne.n	80049a2 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800497c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800497e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004980:	2b00      	cmp	r3, #0
 8004982:	d016      	beq.n	80049b2 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004984:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004986:	3324      	adds	r3, #36	; 0x24
 8004988:	4618      	mov	r0, r3
 800498a:	f000 fef7 	bl	800577c <xTaskRemoveFromEventList>
 800498e:	4603      	mov	r3, r0
 8004990:	2b00      	cmp	r3, #0
 8004992:	d00e      	beq.n	80049b2 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	2b00      	cmp	r3, #0
 8004998:	d00b      	beq.n	80049b2 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	2201      	movs	r2, #1
 800499e:	601a      	str	r2, [r3, #0]
 80049a0:	e007      	b.n	80049b2 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80049a2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80049a6:	3301      	adds	r3, #1
 80049a8:	b2db      	uxtb	r3, r3
 80049aa:	b25a      	sxtb	r2, r3
 80049ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049ae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80049b2:	2301      	movs	r3, #1
 80049b4:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80049b6:	e001      	b.n	80049bc <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80049b8:	2300      	movs	r3, #0
 80049ba:	63fb      	str	r3, [r7, #60]	; 0x3c
 80049bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049be:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80049c0:	697b      	ldr	r3, [r7, #20]
 80049c2:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80049c6:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80049c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80049ca:	4618      	mov	r0, r3
 80049cc:	3740      	adds	r7, #64	; 0x40
 80049ce:	46bd      	mov	sp, r7
 80049d0:	bd80      	pop	{r7, pc}
	...

080049d4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80049d4:	b580      	push	{r7, lr}
 80049d6:	b08c      	sub	sp, #48	; 0x30
 80049d8:	af00      	add	r7, sp, #0
 80049da:	60f8      	str	r0, [r7, #12]
 80049dc:	60b9      	str	r1, [r7, #8]
 80049de:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80049e0:	2300      	movs	r3, #0
 80049e2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80049e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d10a      	bne.n	8004a04 <xQueueReceive+0x30>
	__asm volatile
 80049ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049f2:	f383 8811 	msr	BASEPRI, r3
 80049f6:	f3bf 8f6f 	isb	sy
 80049fa:	f3bf 8f4f 	dsb	sy
 80049fe:	623b      	str	r3, [r7, #32]
}
 8004a00:	bf00      	nop
 8004a02:	e7fe      	b.n	8004a02 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004a04:	68bb      	ldr	r3, [r7, #8]
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d103      	bne.n	8004a12 <xQueueReceive+0x3e>
 8004a0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d101      	bne.n	8004a16 <xQueueReceive+0x42>
 8004a12:	2301      	movs	r3, #1
 8004a14:	e000      	b.n	8004a18 <xQueueReceive+0x44>
 8004a16:	2300      	movs	r3, #0
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d10a      	bne.n	8004a32 <xQueueReceive+0x5e>
	__asm volatile
 8004a1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a20:	f383 8811 	msr	BASEPRI, r3
 8004a24:	f3bf 8f6f 	isb	sy
 8004a28:	f3bf 8f4f 	dsb	sy
 8004a2c:	61fb      	str	r3, [r7, #28]
}
 8004a2e:	bf00      	nop
 8004a30:	e7fe      	b.n	8004a30 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004a32:	f001 f865 	bl	8005b00 <xTaskGetSchedulerState>
 8004a36:	4603      	mov	r3, r0
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d102      	bne.n	8004a42 <xQueueReceive+0x6e>
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d101      	bne.n	8004a46 <xQueueReceive+0x72>
 8004a42:	2301      	movs	r3, #1
 8004a44:	e000      	b.n	8004a48 <xQueueReceive+0x74>
 8004a46:	2300      	movs	r3, #0
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d10a      	bne.n	8004a62 <xQueueReceive+0x8e>
	__asm volatile
 8004a4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a50:	f383 8811 	msr	BASEPRI, r3
 8004a54:	f3bf 8f6f 	isb	sy
 8004a58:	f3bf 8f4f 	dsb	sy
 8004a5c:	61bb      	str	r3, [r7, #24]
}
 8004a5e:	bf00      	nop
 8004a60:	e7fe      	b.n	8004a60 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004a62:	f001 fda7 	bl	80065b4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004a66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a6a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004a6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d01f      	beq.n	8004ab2 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004a72:	68b9      	ldr	r1, [r7, #8]
 8004a74:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004a76:	f000 f8f7 	bl	8004c68 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004a7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a7c:	1e5a      	subs	r2, r3, #1
 8004a7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a80:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004a82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a84:	691b      	ldr	r3, [r3, #16]
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d00f      	beq.n	8004aaa <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004a8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a8c:	3310      	adds	r3, #16
 8004a8e:	4618      	mov	r0, r3
 8004a90:	f000 fe74 	bl	800577c <xTaskRemoveFromEventList>
 8004a94:	4603      	mov	r3, r0
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d007      	beq.n	8004aaa <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004a9a:	4b3d      	ldr	r3, [pc, #244]	; (8004b90 <xQueueReceive+0x1bc>)
 8004a9c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004aa0:	601a      	str	r2, [r3, #0]
 8004aa2:	f3bf 8f4f 	dsb	sy
 8004aa6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004aaa:	f001 fdb3 	bl	8006614 <vPortExitCritical>
				return pdPASS;
 8004aae:	2301      	movs	r3, #1
 8004ab0:	e069      	b.n	8004b86 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d103      	bne.n	8004ac0 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004ab8:	f001 fdac 	bl	8006614 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004abc:	2300      	movs	r3, #0
 8004abe:	e062      	b.n	8004b86 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004ac0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d106      	bne.n	8004ad4 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004ac6:	f107 0310 	add.w	r3, r7, #16
 8004aca:	4618      	mov	r0, r3
 8004acc:	f000 feba 	bl	8005844 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004ad0:	2301      	movs	r3, #1
 8004ad2:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004ad4:	f001 fd9e 	bl	8006614 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004ad8:	f000 fc26 	bl	8005328 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004adc:	f001 fd6a 	bl	80065b4 <vPortEnterCritical>
 8004ae0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ae2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004ae6:	b25b      	sxtb	r3, r3
 8004ae8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004aec:	d103      	bne.n	8004af6 <xQueueReceive+0x122>
 8004aee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004af0:	2200      	movs	r2, #0
 8004af2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004af6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004af8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004afc:	b25b      	sxtb	r3, r3
 8004afe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b02:	d103      	bne.n	8004b0c <xQueueReceive+0x138>
 8004b04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b06:	2200      	movs	r2, #0
 8004b08:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004b0c:	f001 fd82 	bl	8006614 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004b10:	1d3a      	adds	r2, r7, #4
 8004b12:	f107 0310 	add.w	r3, r7, #16
 8004b16:	4611      	mov	r1, r2
 8004b18:	4618      	mov	r0, r3
 8004b1a:	f000 fea9 	bl	8005870 <xTaskCheckForTimeOut>
 8004b1e:	4603      	mov	r3, r0
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d123      	bne.n	8004b6c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004b24:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004b26:	f000 f917 	bl	8004d58 <prvIsQueueEmpty>
 8004b2a:	4603      	mov	r3, r0
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d017      	beq.n	8004b60 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004b30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b32:	3324      	adds	r3, #36	; 0x24
 8004b34:	687a      	ldr	r2, [r7, #4]
 8004b36:	4611      	mov	r1, r2
 8004b38:	4618      	mov	r0, r3
 8004b3a:	f000 fdcf 	bl	80056dc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004b3e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004b40:	f000 f8b8 	bl	8004cb4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004b44:	f000 fbfe 	bl	8005344 <xTaskResumeAll>
 8004b48:	4603      	mov	r3, r0
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d189      	bne.n	8004a62 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8004b4e:	4b10      	ldr	r3, [pc, #64]	; (8004b90 <xQueueReceive+0x1bc>)
 8004b50:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004b54:	601a      	str	r2, [r3, #0]
 8004b56:	f3bf 8f4f 	dsb	sy
 8004b5a:	f3bf 8f6f 	isb	sy
 8004b5e:	e780      	b.n	8004a62 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004b60:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004b62:	f000 f8a7 	bl	8004cb4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004b66:	f000 fbed 	bl	8005344 <xTaskResumeAll>
 8004b6a:	e77a      	b.n	8004a62 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004b6c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004b6e:	f000 f8a1 	bl	8004cb4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004b72:	f000 fbe7 	bl	8005344 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004b76:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004b78:	f000 f8ee 	bl	8004d58 <prvIsQueueEmpty>
 8004b7c:	4603      	mov	r3, r0
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	f43f af6f 	beq.w	8004a62 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004b84:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004b86:	4618      	mov	r0, r3
 8004b88:	3730      	adds	r7, #48	; 0x30
 8004b8a:	46bd      	mov	sp, r7
 8004b8c:	bd80      	pop	{r7, pc}
 8004b8e:	bf00      	nop
 8004b90:	e000ed04 	.word	0xe000ed04

08004b94 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004b94:	b580      	push	{r7, lr}
 8004b96:	b086      	sub	sp, #24
 8004b98:	af00      	add	r7, sp, #0
 8004b9a:	60f8      	str	r0, [r7, #12]
 8004b9c:	60b9      	str	r1, [r7, #8]
 8004b9e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004ba0:	2300      	movs	r3, #0
 8004ba2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ba8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d10d      	bne.n	8004bce <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d14d      	bne.n	8004c56 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	689b      	ldr	r3, [r3, #8]
 8004bbe:	4618      	mov	r0, r3
 8004bc0:	f000 ffbc 	bl	8005b3c <xTaskPriorityDisinherit>
 8004bc4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	2200      	movs	r2, #0
 8004bca:	609a      	str	r2, [r3, #8]
 8004bcc:	e043      	b.n	8004c56 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d119      	bne.n	8004c08 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	6858      	ldr	r0, [r3, #4]
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bdc:	461a      	mov	r2, r3
 8004bde:	68b9      	ldr	r1, [r7, #8]
 8004be0:	f002 f81a 	bl	8006c18 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	685a      	ldr	r2, [r3, #4]
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bec:	441a      	add	r2, r3
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	685a      	ldr	r2, [r3, #4]
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	689b      	ldr	r3, [r3, #8]
 8004bfa:	429a      	cmp	r2, r3
 8004bfc:	d32b      	bcc.n	8004c56 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	681a      	ldr	r2, [r3, #0]
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	605a      	str	r2, [r3, #4]
 8004c06:	e026      	b.n	8004c56 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	68d8      	ldr	r0, [r3, #12]
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c10:	461a      	mov	r2, r3
 8004c12:	68b9      	ldr	r1, [r7, #8]
 8004c14:	f002 f800 	bl	8006c18 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	68da      	ldr	r2, [r3, #12]
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c20:	425b      	negs	r3, r3
 8004c22:	441a      	add	r2, r3
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	68da      	ldr	r2, [r3, #12]
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	429a      	cmp	r2, r3
 8004c32:	d207      	bcs.n	8004c44 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	689a      	ldr	r2, [r3, #8]
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c3c:	425b      	negs	r3, r3
 8004c3e:	441a      	add	r2, r3
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	2b02      	cmp	r3, #2
 8004c48:	d105      	bne.n	8004c56 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004c4a:	693b      	ldr	r3, [r7, #16]
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d002      	beq.n	8004c56 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004c50:	693b      	ldr	r3, [r7, #16]
 8004c52:	3b01      	subs	r3, #1
 8004c54:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004c56:	693b      	ldr	r3, [r7, #16]
 8004c58:	1c5a      	adds	r2, r3, #1
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8004c5e:	697b      	ldr	r3, [r7, #20]
}
 8004c60:	4618      	mov	r0, r3
 8004c62:	3718      	adds	r7, #24
 8004c64:	46bd      	mov	sp, r7
 8004c66:	bd80      	pop	{r7, pc}

08004c68 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004c68:	b580      	push	{r7, lr}
 8004c6a:	b082      	sub	sp, #8
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	6078      	str	r0, [r7, #4]
 8004c70:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d018      	beq.n	8004cac <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	68da      	ldr	r2, [r3, #12]
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c82:	441a      	add	r2, r3
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	68da      	ldr	r2, [r3, #12]
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	689b      	ldr	r3, [r3, #8]
 8004c90:	429a      	cmp	r2, r3
 8004c92:	d303      	bcc.n	8004c9c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681a      	ldr	r2, [r3, #0]
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	68d9      	ldr	r1, [r3, #12]
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ca4:	461a      	mov	r2, r3
 8004ca6:	6838      	ldr	r0, [r7, #0]
 8004ca8:	f001 ffb6 	bl	8006c18 <memcpy>
	}
}
 8004cac:	bf00      	nop
 8004cae:	3708      	adds	r7, #8
 8004cb0:	46bd      	mov	sp, r7
 8004cb2:	bd80      	pop	{r7, pc}

08004cb4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004cb4:	b580      	push	{r7, lr}
 8004cb6:	b084      	sub	sp, #16
 8004cb8:	af00      	add	r7, sp, #0
 8004cba:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004cbc:	f001 fc7a 	bl	80065b4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004cc6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004cc8:	e011      	b.n	8004cee <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d012      	beq.n	8004cf8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	3324      	adds	r3, #36	; 0x24
 8004cd6:	4618      	mov	r0, r3
 8004cd8:	f000 fd50 	bl	800577c <xTaskRemoveFromEventList>
 8004cdc:	4603      	mov	r3, r0
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d001      	beq.n	8004ce6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004ce2:	f000 fe27 	bl	8005934 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004ce6:	7bfb      	ldrb	r3, [r7, #15]
 8004ce8:	3b01      	subs	r3, #1
 8004cea:	b2db      	uxtb	r3, r3
 8004cec:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004cee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	dce9      	bgt.n	8004cca <prvUnlockQueue+0x16>
 8004cf6:	e000      	b.n	8004cfa <prvUnlockQueue+0x46>
					break;
 8004cf8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	22ff      	movs	r2, #255	; 0xff
 8004cfe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8004d02:	f001 fc87 	bl	8006614 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004d06:	f001 fc55 	bl	80065b4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004d10:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004d12:	e011      	b.n	8004d38 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	691b      	ldr	r3, [r3, #16]
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d012      	beq.n	8004d42 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	3310      	adds	r3, #16
 8004d20:	4618      	mov	r0, r3
 8004d22:	f000 fd2b 	bl	800577c <xTaskRemoveFromEventList>
 8004d26:	4603      	mov	r3, r0
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d001      	beq.n	8004d30 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004d2c:	f000 fe02 	bl	8005934 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004d30:	7bbb      	ldrb	r3, [r7, #14]
 8004d32:	3b01      	subs	r3, #1
 8004d34:	b2db      	uxtb	r3, r3
 8004d36:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004d38:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	dce9      	bgt.n	8004d14 <prvUnlockQueue+0x60>
 8004d40:	e000      	b.n	8004d44 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004d42:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	22ff      	movs	r2, #255	; 0xff
 8004d48:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8004d4c:	f001 fc62 	bl	8006614 <vPortExitCritical>
}
 8004d50:	bf00      	nop
 8004d52:	3710      	adds	r7, #16
 8004d54:	46bd      	mov	sp, r7
 8004d56:	bd80      	pop	{r7, pc}

08004d58 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004d58:	b580      	push	{r7, lr}
 8004d5a:	b084      	sub	sp, #16
 8004d5c:	af00      	add	r7, sp, #0
 8004d5e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004d60:	f001 fc28 	bl	80065b4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d102      	bne.n	8004d72 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004d6c:	2301      	movs	r3, #1
 8004d6e:	60fb      	str	r3, [r7, #12]
 8004d70:	e001      	b.n	8004d76 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004d72:	2300      	movs	r3, #0
 8004d74:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004d76:	f001 fc4d 	bl	8006614 <vPortExitCritical>

	return xReturn;
 8004d7a:	68fb      	ldr	r3, [r7, #12]
}
 8004d7c:	4618      	mov	r0, r3
 8004d7e:	3710      	adds	r7, #16
 8004d80:	46bd      	mov	sp, r7
 8004d82:	bd80      	pop	{r7, pc}

08004d84 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004d84:	b580      	push	{r7, lr}
 8004d86:	b084      	sub	sp, #16
 8004d88:	af00      	add	r7, sp, #0
 8004d8a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004d8c:	f001 fc12 	bl	80065b4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d98:	429a      	cmp	r2, r3
 8004d9a:	d102      	bne.n	8004da2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004d9c:	2301      	movs	r3, #1
 8004d9e:	60fb      	str	r3, [r7, #12]
 8004da0:	e001      	b.n	8004da6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004da2:	2300      	movs	r3, #0
 8004da4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004da6:	f001 fc35 	bl	8006614 <vPortExitCritical>

	return xReturn;
 8004daa:	68fb      	ldr	r3, [r7, #12]
}
 8004dac:	4618      	mov	r0, r3
 8004dae:	3710      	adds	r7, #16
 8004db0:	46bd      	mov	sp, r7
 8004db2:	bd80      	pop	{r7, pc}

08004db4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8004db4:	b480      	push	{r7}
 8004db6:	b085      	sub	sp, #20
 8004db8:	af00      	add	r7, sp, #0
 8004dba:	6078      	str	r0, [r7, #4]
 8004dbc:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004dbe:	2300      	movs	r3, #0
 8004dc0:	60fb      	str	r3, [r7, #12]
 8004dc2:	e014      	b.n	8004dee <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004dc4:	4a0f      	ldr	r2, [pc, #60]	; (8004e04 <vQueueAddToRegistry+0x50>)
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d10b      	bne.n	8004de8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004dd0:	490c      	ldr	r1, [pc, #48]	; (8004e04 <vQueueAddToRegistry+0x50>)
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	683a      	ldr	r2, [r7, #0]
 8004dd6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8004dda:	4a0a      	ldr	r2, [pc, #40]	; (8004e04 <vQueueAddToRegistry+0x50>)
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	00db      	lsls	r3, r3, #3
 8004de0:	4413      	add	r3, r2
 8004de2:	687a      	ldr	r2, [r7, #4]
 8004de4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8004de6:	e006      	b.n	8004df6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	3301      	adds	r3, #1
 8004dec:	60fb      	str	r3, [r7, #12]
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	2b07      	cmp	r3, #7
 8004df2:	d9e7      	bls.n	8004dc4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8004df4:	bf00      	nop
 8004df6:	bf00      	nop
 8004df8:	3714      	adds	r7, #20
 8004dfa:	46bd      	mov	sp, r7
 8004dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e00:	4770      	bx	lr
 8004e02:	bf00      	nop
 8004e04:	2000097c 	.word	0x2000097c

08004e08 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004e08:	b580      	push	{r7, lr}
 8004e0a:	b086      	sub	sp, #24
 8004e0c:	af00      	add	r7, sp, #0
 8004e0e:	60f8      	str	r0, [r7, #12]
 8004e10:	60b9      	str	r1, [r7, #8]
 8004e12:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8004e18:	f001 fbcc 	bl	80065b4 <vPortEnterCritical>
 8004e1c:	697b      	ldr	r3, [r7, #20]
 8004e1e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004e22:	b25b      	sxtb	r3, r3
 8004e24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e28:	d103      	bne.n	8004e32 <vQueueWaitForMessageRestricted+0x2a>
 8004e2a:	697b      	ldr	r3, [r7, #20]
 8004e2c:	2200      	movs	r2, #0
 8004e2e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004e32:	697b      	ldr	r3, [r7, #20]
 8004e34:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004e38:	b25b      	sxtb	r3, r3
 8004e3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e3e:	d103      	bne.n	8004e48 <vQueueWaitForMessageRestricted+0x40>
 8004e40:	697b      	ldr	r3, [r7, #20]
 8004e42:	2200      	movs	r2, #0
 8004e44:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004e48:	f001 fbe4 	bl	8006614 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004e4c:	697b      	ldr	r3, [r7, #20]
 8004e4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d106      	bne.n	8004e62 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8004e54:	697b      	ldr	r3, [r7, #20]
 8004e56:	3324      	adds	r3, #36	; 0x24
 8004e58:	687a      	ldr	r2, [r7, #4]
 8004e5a:	68b9      	ldr	r1, [r7, #8]
 8004e5c:	4618      	mov	r0, r3
 8004e5e:	f000 fc61 	bl	8005724 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8004e62:	6978      	ldr	r0, [r7, #20]
 8004e64:	f7ff ff26 	bl	8004cb4 <prvUnlockQueue>
	}
 8004e68:	bf00      	nop
 8004e6a:	3718      	adds	r7, #24
 8004e6c:	46bd      	mov	sp, r7
 8004e6e:	bd80      	pop	{r7, pc}

08004e70 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004e70:	b580      	push	{r7, lr}
 8004e72:	b08e      	sub	sp, #56	; 0x38
 8004e74:	af04      	add	r7, sp, #16
 8004e76:	60f8      	str	r0, [r7, #12]
 8004e78:	60b9      	str	r1, [r7, #8]
 8004e7a:	607a      	str	r2, [r7, #4]
 8004e7c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004e7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d10a      	bne.n	8004e9a <xTaskCreateStatic+0x2a>
	__asm volatile
 8004e84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e88:	f383 8811 	msr	BASEPRI, r3
 8004e8c:	f3bf 8f6f 	isb	sy
 8004e90:	f3bf 8f4f 	dsb	sy
 8004e94:	623b      	str	r3, [r7, #32]
}
 8004e96:	bf00      	nop
 8004e98:	e7fe      	b.n	8004e98 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8004e9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d10a      	bne.n	8004eb6 <xTaskCreateStatic+0x46>
	__asm volatile
 8004ea0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ea4:	f383 8811 	msr	BASEPRI, r3
 8004ea8:	f3bf 8f6f 	isb	sy
 8004eac:	f3bf 8f4f 	dsb	sy
 8004eb0:	61fb      	str	r3, [r7, #28]
}
 8004eb2:	bf00      	nop
 8004eb4:	e7fe      	b.n	8004eb4 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004eb6:	23bc      	movs	r3, #188	; 0xbc
 8004eb8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004eba:	693b      	ldr	r3, [r7, #16]
 8004ebc:	2bbc      	cmp	r3, #188	; 0xbc
 8004ebe:	d00a      	beq.n	8004ed6 <xTaskCreateStatic+0x66>
	__asm volatile
 8004ec0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ec4:	f383 8811 	msr	BASEPRI, r3
 8004ec8:	f3bf 8f6f 	isb	sy
 8004ecc:	f3bf 8f4f 	dsb	sy
 8004ed0:	61bb      	str	r3, [r7, #24]
}
 8004ed2:	bf00      	nop
 8004ed4:	e7fe      	b.n	8004ed4 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8004ed6:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004ed8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d01e      	beq.n	8004f1c <xTaskCreateStatic+0xac>
 8004ede:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d01b      	beq.n	8004f1c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004ee4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ee6:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004ee8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eea:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004eec:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004eee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ef0:	2202      	movs	r2, #2
 8004ef2:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004ef6:	2300      	movs	r3, #0
 8004ef8:	9303      	str	r3, [sp, #12]
 8004efa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004efc:	9302      	str	r3, [sp, #8]
 8004efe:	f107 0314 	add.w	r3, r7, #20
 8004f02:	9301      	str	r3, [sp, #4]
 8004f04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f06:	9300      	str	r3, [sp, #0]
 8004f08:	683b      	ldr	r3, [r7, #0]
 8004f0a:	687a      	ldr	r2, [r7, #4]
 8004f0c:	68b9      	ldr	r1, [r7, #8]
 8004f0e:	68f8      	ldr	r0, [r7, #12]
 8004f10:	f000 f850 	bl	8004fb4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004f14:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004f16:	f000 f8f3 	bl	8005100 <prvAddNewTaskToReadyList>
 8004f1a:	e001      	b.n	8004f20 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8004f1c:	2300      	movs	r3, #0
 8004f1e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004f20:	697b      	ldr	r3, [r7, #20]
	}
 8004f22:	4618      	mov	r0, r3
 8004f24:	3728      	adds	r7, #40	; 0x28
 8004f26:	46bd      	mov	sp, r7
 8004f28:	bd80      	pop	{r7, pc}

08004f2a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004f2a:	b580      	push	{r7, lr}
 8004f2c:	b08c      	sub	sp, #48	; 0x30
 8004f2e:	af04      	add	r7, sp, #16
 8004f30:	60f8      	str	r0, [r7, #12]
 8004f32:	60b9      	str	r1, [r7, #8]
 8004f34:	603b      	str	r3, [r7, #0]
 8004f36:	4613      	mov	r3, r2
 8004f38:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004f3a:	88fb      	ldrh	r3, [r7, #6]
 8004f3c:	009b      	lsls	r3, r3, #2
 8004f3e:	4618      	mov	r0, r3
 8004f40:	f001 fc5a 	bl	80067f8 <pvPortMalloc>
 8004f44:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004f46:	697b      	ldr	r3, [r7, #20]
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d00e      	beq.n	8004f6a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004f4c:	20bc      	movs	r0, #188	; 0xbc
 8004f4e:	f001 fc53 	bl	80067f8 <pvPortMalloc>
 8004f52:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004f54:	69fb      	ldr	r3, [r7, #28]
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d003      	beq.n	8004f62 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004f5a:	69fb      	ldr	r3, [r7, #28]
 8004f5c:	697a      	ldr	r2, [r7, #20]
 8004f5e:	631a      	str	r2, [r3, #48]	; 0x30
 8004f60:	e005      	b.n	8004f6e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004f62:	6978      	ldr	r0, [r7, #20]
 8004f64:	f001 fd14 	bl	8006990 <vPortFree>
 8004f68:	e001      	b.n	8004f6e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004f6a:	2300      	movs	r3, #0
 8004f6c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004f6e:	69fb      	ldr	r3, [r7, #28]
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d017      	beq.n	8004fa4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004f74:	69fb      	ldr	r3, [r7, #28]
 8004f76:	2200      	movs	r2, #0
 8004f78:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004f7c:	88fa      	ldrh	r2, [r7, #6]
 8004f7e:	2300      	movs	r3, #0
 8004f80:	9303      	str	r3, [sp, #12]
 8004f82:	69fb      	ldr	r3, [r7, #28]
 8004f84:	9302      	str	r3, [sp, #8]
 8004f86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f88:	9301      	str	r3, [sp, #4]
 8004f8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f8c:	9300      	str	r3, [sp, #0]
 8004f8e:	683b      	ldr	r3, [r7, #0]
 8004f90:	68b9      	ldr	r1, [r7, #8]
 8004f92:	68f8      	ldr	r0, [r7, #12]
 8004f94:	f000 f80e 	bl	8004fb4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004f98:	69f8      	ldr	r0, [r7, #28]
 8004f9a:	f000 f8b1 	bl	8005100 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004f9e:	2301      	movs	r3, #1
 8004fa0:	61bb      	str	r3, [r7, #24]
 8004fa2:	e002      	b.n	8004faa <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004fa4:	f04f 33ff 	mov.w	r3, #4294967295
 8004fa8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004faa:	69bb      	ldr	r3, [r7, #24]
	}
 8004fac:	4618      	mov	r0, r3
 8004fae:	3720      	adds	r7, #32
 8004fb0:	46bd      	mov	sp, r7
 8004fb2:	bd80      	pop	{r7, pc}

08004fb4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004fb4:	b580      	push	{r7, lr}
 8004fb6:	b088      	sub	sp, #32
 8004fb8:	af00      	add	r7, sp, #0
 8004fba:	60f8      	str	r0, [r7, #12]
 8004fbc:	60b9      	str	r1, [r7, #8]
 8004fbe:	607a      	str	r2, [r7, #4]
 8004fc0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8004fc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fc4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	009b      	lsls	r3, r3, #2
 8004fca:	461a      	mov	r2, r3
 8004fcc:	21a5      	movs	r1, #165	; 0xa5
 8004fce:	f001 fe31 	bl	8006c34 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004fd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fd4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004fdc:	3b01      	subs	r3, #1
 8004fde:	009b      	lsls	r3, r3, #2
 8004fe0:	4413      	add	r3, r2
 8004fe2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004fe4:	69bb      	ldr	r3, [r7, #24]
 8004fe6:	f023 0307 	bic.w	r3, r3, #7
 8004fea:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004fec:	69bb      	ldr	r3, [r7, #24]
 8004fee:	f003 0307 	and.w	r3, r3, #7
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d00a      	beq.n	800500c <prvInitialiseNewTask+0x58>
	__asm volatile
 8004ff6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ffa:	f383 8811 	msr	BASEPRI, r3
 8004ffe:	f3bf 8f6f 	isb	sy
 8005002:	f3bf 8f4f 	dsb	sy
 8005006:	617b      	str	r3, [r7, #20]
}
 8005008:	bf00      	nop
 800500a:	e7fe      	b.n	800500a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800500c:	68bb      	ldr	r3, [r7, #8]
 800500e:	2b00      	cmp	r3, #0
 8005010:	d01f      	beq.n	8005052 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005012:	2300      	movs	r3, #0
 8005014:	61fb      	str	r3, [r7, #28]
 8005016:	e012      	b.n	800503e <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005018:	68ba      	ldr	r2, [r7, #8]
 800501a:	69fb      	ldr	r3, [r7, #28]
 800501c:	4413      	add	r3, r2
 800501e:	7819      	ldrb	r1, [r3, #0]
 8005020:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005022:	69fb      	ldr	r3, [r7, #28]
 8005024:	4413      	add	r3, r2
 8005026:	3334      	adds	r3, #52	; 0x34
 8005028:	460a      	mov	r2, r1
 800502a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800502c:	68ba      	ldr	r2, [r7, #8]
 800502e:	69fb      	ldr	r3, [r7, #28]
 8005030:	4413      	add	r3, r2
 8005032:	781b      	ldrb	r3, [r3, #0]
 8005034:	2b00      	cmp	r3, #0
 8005036:	d006      	beq.n	8005046 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005038:	69fb      	ldr	r3, [r7, #28]
 800503a:	3301      	adds	r3, #1
 800503c:	61fb      	str	r3, [r7, #28]
 800503e:	69fb      	ldr	r3, [r7, #28]
 8005040:	2b0f      	cmp	r3, #15
 8005042:	d9e9      	bls.n	8005018 <prvInitialiseNewTask+0x64>
 8005044:	e000      	b.n	8005048 <prvInitialiseNewTask+0x94>
			{
				break;
 8005046:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005048:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800504a:	2200      	movs	r2, #0
 800504c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005050:	e003      	b.n	800505a <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005052:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005054:	2200      	movs	r2, #0
 8005056:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800505a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800505c:	2b37      	cmp	r3, #55	; 0x37
 800505e:	d901      	bls.n	8005064 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005060:	2337      	movs	r3, #55	; 0x37
 8005062:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005064:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005066:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005068:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800506a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800506c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800506e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8005070:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005072:	2200      	movs	r2, #0
 8005074:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005076:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005078:	3304      	adds	r3, #4
 800507a:	4618      	mov	r0, r3
 800507c:	f7ff f978 	bl	8004370 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005080:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005082:	3318      	adds	r3, #24
 8005084:	4618      	mov	r0, r3
 8005086:	f7ff f973 	bl	8004370 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800508a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800508c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800508e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005090:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005092:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005096:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005098:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800509a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800509c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800509e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80050a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050a2:	2200      	movs	r2, #0
 80050a4:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80050a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050aa:	2200      	movs	r2, #0
 80050ac:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80050b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050b2:	3354      	adds	r3, #84	; 0x54
 80050b4:	2260      	movs	r2, #96	; 0x60
 80050b6:	2100      	movs	r1, #0
 80050b8:	4618      	mov	r0, r3
 80050ba:	f001 fdbb 	bl	8006c34 <memset>
 80050be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050c0:	4a0c      	ldr	r2, [pc, #48]	; (80050f4 <prvInitialiseNewTask+0x140>)
 80050c2:	659a      	str	r2, [r3, #88]	; 0x58
 80050c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050c6:	4a0c      	ldr	r2, [pc, #48]	; (80050f8 <prvInitialiseNewTask+0x144>)
 80050c8:	65da      	str	r2, [r3, #92]	; 0x5c
 80050ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050cc:	4a0b      	ldr	r2, [pc, #44]	; (80050fc <prvInitialiseNewTask+0x148>)
 80050ce:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80050d0:	683a      	ldr	r2, [r7, #0]
 80050d2:	68f9      	ldr	r1, [r7, #12]
 80050d4:	69b8      	ldr	r0, [r7, #24]
 80050d6:	f001 f941 	bl	800635c <pxPortInitialiseStack>
 80050da:	4602      	mov	r2, r0
 80050dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050de:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80050e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d002      	beq.n	80050ec <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80050e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80050ea:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80050ec:	bf00      	nop
 80050ee:	3720      	adds	r7, #32
 80050f0:	46bd      	mov	sp, r7
 80050f2:	bd80      	pop	{r7, pc}
 80050f4:	08006e90 	.word	0x08006e90
 80050f8:	08006eb0 	.word	0x08006eb0
 80050fc:	08006e70 	.word	0x08006e70

08005100 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005100:	b580      	push	{r7, lr}
 8005102:	b082      	sub	sp, #8
 8005104:	af00      	add	r7, sp, #0
 8005106:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005108:	f001 fa54 	bl	80065b4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800510c:	4b2d      	ldr	r3, [pc, #180]	; (80051c4 <prvAddNewTaskToReadyList+0xc4>)
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	3301      	adds	r3, #1
 8005112:	4a2c      	ldr	r2, [pc, #176]	; (80051c4 <prvAddNewTaskToReadyList+0xc4>)
 8005114:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005116:	4b2c      	ldr	r3, [pc, #176]	; (80051c8 <prvAddNewTaskToReadyList+0xc8>)
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	2b00      	cmp	r3, #0
 800511c:	d109      	bne.n	8005132 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800511e:	4a2a      	ldr	r2, [pc, #168]	; (80051c8 <prvAddNewTaskToReadyList+0xc8>)
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005124:	4b27      	ldr	r3, [pc, #156]	; (80051c4 <prvAddNewTaskToReadyList+0xc4>)
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	2b01      	cmp	r3, #1
 800512a:	d110      	bne.n	800514e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800512c:	f000 fc26 	bl	800597c <prvInitialiseTaskLists>
 8005130:	e00d      	b.n	800514e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005132:	4b26      	ldr	r3, [pc, #152]	; (80051cc <prvAddNewTaskToReadyList+0xcc>)
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	2b00      	cmp	r3, #0
 8005138:	d109      	bne.n	800514e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800513a:	4b23      	ldr	r3, [pc, #140]	; (80051c8 <prvAddNewTaskToReadyList+0xc8>)
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005144:	429a      	cmp	r2, r3
 8005146:	d802      	bhi.n	800514e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005148:	4a1f      	ldr	r2, [pc, #124]	; (80051c8 <prvAddNewTaskToReadyList+0xc8>)
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800514e:	4b20      	ldr	r3, [pc, #128]	; (80051d0 <prvAddNewTaskToReadyList+0xd0>)
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	3301      	adds	r3, #1
 8005154:	4a1e      	ldr	r2, [pc, #120]	; (80051d0 <prvAddNewTaskToReadyList+0xd0>)
 8005156:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005158:	4b1d      	ldr	r3, [pc, #116]	; (80051d0 <prvAddNewTaskToReadyList+0xd0>)
 800515a:	681a      	ldr	r2, [r3, #0]
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005164:	4b1b      	ldr	r3, [pc, #108]	; (80051d4 <prvAddNewTaskToReadyList+0xd4>)
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	429a      	cmp	r2, r3
 800516a:	d903      	bls.n	8005174 <prvAddNewTaskToReadyList+0x74>
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005170:	4a18      	ldr	r2, [pc, #96]	; (80051d4 <prvAddNewTaskToReadyList+0xd4>)
 8005172:	6013      	str	r3, [r2, #0]
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005178:	4613      	mov	r3, r2
 800517a:	009b      	lsls	r3, r3, #2
 800517c:	4413      	add	r3, r2
 800517e:	009b      	lsls	r3, r3, #2
 8005180:	4a15      	ldr	r2, [pc, #84]	; (80051d8 <prvAddNewTaskToReadyList+0xd8>)
 8005182:	441a      	add	r2, r3
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	3304      	adds	r3, #4
 8005188:	4619      	mov	r1, r3
 800518a:	4610      	mov	r0, r2
 800518c:	f7ff f8fd 	bl	800438a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005190:	f001 fa40 	bl	8006614 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005194:	4b0d      	ldr	r3, [pc, #52]	; (80051cc <prvAddNewTaskToReadyList+0xcc>)
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	2b00      	cmp	r3, #0
 800519a:	d00e      	beq.n	80051ba <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800519c:	4b0a      	ldr	r3, [pc, #40]	; (80051c8 <prvAddNewTaskToReadyList+0xc8>)
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051a6:	429a      	cmp	r2, r3
 80051a8:	d207      	bcs.n	80051ba <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80051aa:	4b0c      	ldr	r3, [pc, #48]	; (80051dc <prvAddNewTaskToReadyList+0xdc>)
 80051ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80051b0:	601a      	str	r2, [r3, #0]
 80051b2:	f3bf 8f4f 	dsb	sy
 80051b6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80051ba:	bf00      	nop
 80051bc:	3708      	adds	r7, #8
 80051be:	46bd      	mov	sp, r7
 80051c0:	bd80      	pop	{r7, pc}
 80051c2:	bf00      	nop
 80051c4:	20000e90 	.word	0x20000e90
 80051c8:	200009bc 	.word	0x200009bc
 80051cc:	20000e9c 	.word	0x20000e9c
 80051d0:	20000eac 	.word	0x20000eac
 80051d4:	20000e98 	.word	0x20000e98
 80051d8:	200009c0 	.word	0x200009c0
 80051dc:	e000ed04 	.word	0xe000ed04

080051e0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80051e0:	b580      	push	{r7, lr}
 80051e2:	b084      	sub	sp, #16
 80051e4:	af00      	add	r7, sp, #0
 80051e6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80051e8:	2300      	movs	r3, #0
 80051ea:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d017      	beq.n	8005222 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80051f2:	4b13      	ldr	r3, [pc, #76]	; (8005240 <vTaskDelay+0x60>)
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d00a      	beq.n	8005210 <vTaskDelay+0x30>
	__asm volatile
 80051fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051fe:	f383 8811 	msr	BASEPRI, r3
 8005202:	f3bf 8f6f 	isb	sy
 8005206:	f3bf 8f4f 	dsb	sy
 800520a:	60bb      	str	r3, [r7, #8]
}
 800520c:	bf00      	nop
 800520e:	e7fe      	b.n	800520e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8005210:	f000 f88a 	bl	8005328 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005214:	2100      	movs	r1, #0
 8005216:	6878      	ldr	r0, [r7, #4]
 8005218:	f000 fcfe 	bl	8005c18 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800521c:	f000 f892 	bl	8005344 <xTaskResumeAll>
 8005220:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	2b00      	cmp	r3, #0
 8005226:	d107      	bne.n	8005238 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8005228:	4b06      	ldr	r3, [pc, #24]	; (8005244 <vTaskDelay+0x64>)
 800522a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800522e:	601a      	str	r2, [r3, #0]
 8005230:	f3bf 8f4f 	dsb	sy
 8005234:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005238:	bf00      	nop
 800523a:	3710      	adds	r7, #16
 800523c:	46bd      	mov	sp, r7
 800523e:	bd80      	pop	{r7, pc}
 8005240:	20000eb8 	.word	0x20000eb8
 8005244:	e000ed04 	.word	0xe000ed04

08005248 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005248:	b580      	push	{r7, lr}
 800524a:	b08a      	sub	sp, #40	; 0x28
 800524c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800524e:	2300      	movs	r3, #0
 8005250:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005252:	2300      	movs	r3, #0
 8005254:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005256:	463a      	mov	r2, r7
 8005258:	1d39      	adds	r1, r7, #4
 800525a:	f107 0308 	add.w	r3, r7, #8
 800525e:	4618      	mov	r0, r3
 8005260:	f7ff f832 	bl	80042c8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005264:	6839      	ldr	r1, [r7, #0]
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	68ba      	ldr	r2, [r7, #8]
 800526a:	9202      	str	r2, [sp, #8]
 800526c:	9301      	str	r3, [sp, #4]
 800526e:	2300      	movs	r3, #0
 8005270:	9300      	str	r3, [sp, #0]
 8005272:	2300      	movs	r3, #0
 8005274:	460a      	mov	r2, r1
 8005276:	4924      	ldr	r1, [pc, #144]	; (8005308 <vTaskStartScheduler+0xc0>)
 8005278:	4824      	ldr	r0, [pc, #144]	; (800530c <vTaskStartScheduler+0xc4>)
 800527a:	f7ff fdf9 	bl	8004e70 <xTaskCreateStatic>
 800527e:	4603      	mov	r3, r0
 8005280:	4a23      	ldr	r2, [pc, #140]	; (8005310 <vTaskStartScheduler+0xc8>)
 8005282:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005284:	4b22      	ldr	r3, [pc, #136]	; (8005310 <vTaskStartScheduler+0xc8>)
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	2b00      	cmp	r3, #0
 800528a:	d002      	beq.n	8005292 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800528c:	2301      	movs	r3, #1
 800528e:	617b      	str	r3, [r7, #20]
 8005290:	e001      	b.n	8005296 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005292:	2300      	movs	r3, #0
 8005294:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8005296:	697b      	ldr	r3, [r7, #20]
 8005298:	2b01      	cmp	r3, #1
 800529a:	d102      	bne.n	80052a2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800529c:	f000 fd10 	bl	8005cc0 <xTimerCreateTimerTask>
 80052a0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80052a2:	697b      	ldr	r3, [r7, #20]
 80052a4:	2b01      	cmp	r3, #1
 80052a6:	d11b      	bne.n	80052e0 <vTaskStartScheduler+0x98>
	__asm volatile
 80052a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052ac:	f383 8811 	msr	BASEPRI, r3
 80052b0:	f3bf 8f6f 	isb	sy
 80052b4:	f3bf 8f4f 	dsb	sy
 80052b8:	613b      	str	r3, [r7, #16]
}
 80052ba:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80052bc:	4b15      	ldr	r3, [pc, #84]	; (8005314 <vTaskStartScheduler+0xcc>)
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	3354      	adds	r3, #84	; 0x54
 80052c2:	4a15      	ldr	r2, [pc, #84]	; (8005318 <vTaskStartScheduler+0xd0>)
 80052c4:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80052c6:	4b15      	ldr	r3, [pc, #84]	; (800531c <vTaskStartScheduler+0xd4>)
 80052c8:	f04f 32ff 	mov.w	r2, #4294967295
 80052cc:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80052ce:	4b14      	ldr	r3, [pc, #80]	; (8005320 <vTaskStartScheduler+0xd8>)
 80052d0:	2201      	movs	r2, #1
 80052d2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80052d4:	4b13      	ldr	r3, [pc, #76]	; (8005324 <vTaskStartScheduler+0xdc>)
 80052d6:	2200      	movs	r2, #0
 80052d8:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80052da:	f001 f8c9 	bl	8006470 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80052de:	e00e      	b.n	80052fe <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80052e0:	697b      	ldr	r3, [r7, #20]
 80052e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052e6:	d10a      	bne.n	80052fe <vTaskStartScheduler+0xb6>
	__asm volatile
 80052e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052ec:	f383 8811 	msr	BASEPRI, r3
 80052f0:	f3bf 8f6f 	isb	sy
 80052f4:	f3bf 8f4f 	dsb	sy
 80052f8:	60fb      	str	r3, [r7, #12]
}
 80052fa:	bf00      	nop
 80052fc:	e7fe      	b.n	80052fc <vTaskStartScheduler+0xb4>
}
 80052fe:	bf00      	nop
 8005300:	3718      	adds	r7, #24
 8005302:	46bd      	mov	sp, r7
 8005304:	bd80      	pop	{r7, pc}
 8005306:	bf00      	nop
 8005308:	08006dec 	.word	0x08006dec
 800530c:	0800594d 	.word	0x0800594d
 8005310:	20000eb4 	.word	0x20000eb4
 8005314:	200009bc 	.word	0x200009bc
 8005318:	20000010 	.word	0x20000010
 800531c:	20000eb0 	.word	0x20000eb0
 8005320:	20000e9c 	.word	0x20000e9c
 8005324:	20000e94 	.word	0x20000e94

08005328 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005328:	b480      	push	{r7}
 800532a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800532c:	4b04      	ldr	r3, [pc, #16]	; (8005340 <vTaskSuspendAll+0x18>)
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	3301      	adds	r3, #1
 8005332:	4a03      	ldr	r2, [pc, #12]	; (8005340 <vTaskSuspendAll+0x18>)
 8005334:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8005336:	bf00      	nop
 8005338:	46bd      	mov	sp, r7
 800533a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800533e:	4770      	bx	lr
 8005340:	20000eb8 	.word	0x20000eb8

08005344 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005344:	b580      	push	{r7, lr}
 8005346:	b084      	sub	sp, #16
 8005348:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800534a:	2300      	movs	r3, #0
 800534c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800534e:	2300      	movs	r3, #0
 8005350:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005352:	4b42      	ldr	r3, [pc, #264]	; (800545c <xTaskResumeAll+0x118>)
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	2b00      	cmp	r3, #0
 8005358:	d10a      	bne.n	8005370 <xTaskResumeAll+0x2c>
	__asm volatile
 800535a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800535e:	f383 8811 	msr	BASEPRI, r3
 8005362:	f3bf 8f6f 	isb	sy
 8005366:	f3bf 8f4f 	dsb	sy
 800536a:	603b      	str	r3, [r7, #0]
}
 800536c:	bf00      	nop
 800536e:	e7fe      	b.n	800536e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005370:	f001 f920 	bl	80065b4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005374:	4b39      	ldr	r3, [pc, #228]	; (800545c <xTaskResumeAll+0x118>)
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	3b01      	subs	r3, #1
 800537a:	4a38      	ldr	r2, [pc, #224]	; (800545c <xTaskResumeAll+0x118>)
 800537c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800537e:	4b37      	ldr	r3, [pc, #220]	; (800545c <xTaskResumeAll+0x118>)
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	2b00      	cmp	r3, #0
 8005384:	d162      	bne.n	800544c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005386:	4b36      	ldr	r3, [pc, #216]	; (8005460 <xTaskResumeAll+0x11c>)
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	2b00      	cmp	r3, #0
 800538c:	d05e      	beq.n	800544c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800538e:	e02f      	b.n	80053f0 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005390:	4b34      	ldr	r3, [pc, #208]	; (8005464 <xTaskResumeAll+0x120>)
 8005392:	68db      	ldr	r3, [r3, #12]
 8005394:	68db      	ldr	r3, [r3, #12]
 8005396:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	3318      	adds	r3, #24
 800539c:	4618      	mov	r0, r3
 800539e:	f7ff f851 	bl	8004444 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	3304      	adds	r3, #4
 80053a6:	4618      	mov	r0, r3
 80053a8:	f7ff f84c 	bl	8004444 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80053b0:	4b2d      	ldr	r3, [pc, #180]	; (8005468 <xTaskResumeAll+0x124>)
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	429a      	cmp	r2, r3
 80053b6:	d903      	bls.n	80053c0 <xTaskResumeAll+0x7c>
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053bc:	4a2a      	ldr	r2, [pc, #168]	; (8005468 <xTaskResumeAll+0x124>)
 80053be:	6013      	str	r3, [r2, #0]
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80053c4:	4613      	mov	r3, r2
 80053c6:	009b      	lsls	r3, r3, #2
 80053c8:	4413      	add	r3, r2
 80053ca:	009b      	lsls	r3, r3, #2
 80053cc:	4a27      	ldr	r2, [pc, #156]	; (800546c <xTaskResumeAll+0x128>)
 80053ce:	441a      	add	r2, r3
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	3304      	adds	r3, #4
 80053d4:	4619      	mov	r1, r3
 80053d6:	4610      	mov	r0, r2
 80053d8:	f7fe ffd7 	bl	800438a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80053e0:	4b23      	ldr	r3, [pc, #140]	; (8005470 <xTaskResumeAll+0x12c>)
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053e6:	429a      	cmp	r2, r3
 80053e8:	d302      	bcc.n	80053f0 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80053ea:	4b22      	ldr	r3, [pc, #136]	; (8005474 <xTaskResumeAll+0x130>)
 80053ec:	2201      	movs	r2, #1
 80053ee:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80053f0:	4b1c      	ldr	r3, [pc, #112]	; (8005464 <xTaskResumeAll+0x120>)
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d1cb      	bne.n	8005390 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d001      	beq.n	8005402 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80053fe:	f000 fb5f 	bl	8005ac0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8005402:	4b1d      	ldr	r3, [pc, #116]	; (8005478 <xTaskResumeAll+0x134>)
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	2b00      	cmp	r3, #0
 800540c:	d010      	beq.n	8005430 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800540e:	f000 f847 	bl	80054a0 <xTaskIncrementTick>
 8005412:	4603      	mov	r3, r0
 8005414:	2b00      	cmp	r3, #0
 8005416:	d002      	beq.n	800541e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8005418:	4b16      	ldr	r3, [pc, #88]	; (8005474 <xTaskResumeAll+0x130>)
 800541a:	2201      	movs	r2, #1
 800541c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	3b01      	subs	r3, #1
 8005422:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	2b00      	cmp	r3, #0
 8005428:	d1f1      	bne.n	800540e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800542a:	4b13      	ldr	r3, [pc, #76]	; (8005478 <xTaskResumeAll+0x134>)
 800542c:	2200      	movs	r2, #0
 800542e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005430:	4b10      	ldr	r3, [pc, #64]	; (8005474 <xTaskResumeAll+0x130>)
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	2b00      	cmp	r3, #0
 8005436:	d009      	beq.n	800544c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005438:	2301      	movs	r3, #1
 800543a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800543c:	4b0f      	ldr	r3, [pc, #60]	; (800547c <xTaskResumeAll+0x138>)
 800543e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005442:	601a      	str	r2, [r3, #0]
 8005444:	f3bf 8f4f 	dsb	sy
 8005448:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800544c:	f001 f8e2 	bl	8006614 <vPortExitCritical>

	return xAlreadyYielded;
 8005450:	68bb      	ldr	r3, [r7, #8]
}
 8005452:	4618      	mov	r0, r3
 8005454:	3710      	adds	r7, #16
 8005456:	46bd      	mov	sp, r7
 8005458:	bd80      	pop	{r7, pc}
 800545a:	bf00      	nop
 800545c:	20000eb8 	.word	0x20000eb8
 8005460:	20000e90 	.word	0x20000e90
 8005464:	20000e50 	.word	0x20000e50
 8005468:	20000e98 	.word	0x20000e98
 800546c:	200009c0 	.word	0x200009c0
 8005470:	200009bc 	.word	0x200009bc
 8005474:	20000ea4 	.word	0x20000ea4
 8005478:	20000ea0 	.word	0x20000ea0
 800547c:	e000ed04 	.word	0xe000ed04

08005480 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005480:	b480      	push	{r7}
 8005482:	b083      	sub	sp, #12
 8005484:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8005486:	4b05      	ldr	r3, [pc, #20]	; (800549c <xTaskGetTickCount+0x1c>)
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800548c:	687b      	ldr	r3, [r7, #4]
}
 800548e:	4618      	mov	r0, r3
 8005490:	370c      	adds	r7, #12
 8005492:	46bd      	mov	sp, r7
 8005494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005498:	4770      	bx	lr
 800549a:	bf00      	nop
 800549c:	20000e94 	.word	0x20000e94

080054a0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80054a0:	b580      	push	{r7, lr}
 80054a2:	b086      	sub	sp, #24
 80054a4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80054a6:	2300      	movs	r3, #0
 80054a8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80054aa:	4b4f      	ldr	r3, [pc, #316]	; (80055e8 <xTaskIncrementTick+0x148>)
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	f040 808f 	bne.w	80055d2 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80054b4:	4b4d      	ldr	r3, [pc, #308]	; (80055ec <xTaskIncrementTick+0x14c>)
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	3301      	adds	r3, #1
 80054ba:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80054bc:	4a4b      	ldr	r2, [pc, #300]	; (80055ec <xTaskIncrementTick+0x14c>)
 80054be:	693b      	ldr	r3, [r7, #16]
 80054c0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80054c2:	693b      	ldr	r3, [r7, #16]
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d120      	bne.n	800550a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80054c8:	4b49      	ldr	r3, [pc, #292]	; (80055f0 <xTaskIncrementTick+0x150>)
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d00a      	beq.n	80054e8 <xTaskIncrementTick+0x48>
	__asm volatile
 80054d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054d6:	f383 8811 	msr	BASEPRI, r3
 80054da:	f3bf 8f6f 	isb	sy
 80054de:	f3bf 8f4f 	dsb	sy
 80054e2:	603b      	str	r3, [r7, #0]
}
 80054e4:	bf00      	nop
 80054e6:	e7fe      	b.n	80054e6 <xTaskIncrementTick+0x46>
 80054e8:	4b41      	ldr	r3, [pc, #260]	; (80055f0 <xTaskIncrementTick+0x150>)
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	60fb      	str	r3, [r7, #12]
 80054ee:	4b41      	ldr	r3, [pc, #260]	; (80055f4 <xTaskIncrementTick+0x154>)
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	4a3f      	ldr	r2, [pc, #252]	; (80055f0 <xTaskIncrementTick+0x150>)
 80054f4:	6013      	str	r3, [r2, #0]
 80054f6:	4a3f      	ldr	r2, [pc, #252]	; (80055f4 <xTaskIncrementTick+0x154>)
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	6013      	str	r3, [r2, #0]
 80054fc:	4b3e      	ldr	r3, [pc, #248]	; (80055f8 <xTaskIncrementTick+0x158>)
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	3301      	adds	r3, #1
 8005502:	4a3d      	ldr	r2, [pc, #244]	; (80055f8 <xTaskIncrementTick+0x158>)
 8005504:	6013      	str	r3, [r2, #0]
 8005506:	f000 fadb 	bl	8005ac0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800550a:	4b3c      	ldr	r3, [pc, #240]	; (80055fc <xTaskIncrementTick+0x15c>)
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	693a      	ldr	r2, [r7, #16]
 8005510:	429a      	cmp	r2, r3
 8005512:	d349      	bcc.n	80055a8 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005514:	4b36      	ldr	r3, [pc, #216]	; (80055f0 <xTaskIncrementTick+0x150>)
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	2b00      	cmp	r3, #0
 800551c:	d104      	bne.n	8005528 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800551e:	4b37      	ldr	r3, [pc, #220]	; (80055fc <xTaskIncrementTick+0x15c>)
 8005520:	f04f 32ff 	mov.w	r2, #4294967295
 8005524:	601a      	str	r2, [r3, #0]
					break;
 8005526:	e03f      	b.n	80055a8 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005528:	4b31      	ldr	r3, [pc, #196]	; (80055f0 <xTaskIncrementTick+0x150>)
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	68db      	ldr	r3, [r3, #12]
 800552e:	68db      	ldr	r3, [r3, #12]
 8005530:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005532:	68bb      	ldr	r3, [r7, #8]
 8005534:	685b      	ldr	r3, [r3, #4]
 8005536:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005538:	693a      	ldr	r2, [r7, #16]
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	429a      	cmp	r2, r3
 800553e:	d203      	bcs.n	8005548 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005540:	4a2e      	ldr	r2, [pc, #184]	; (80055fc <xTaskIncrementTick+0x15c>)
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005546:	e02f      	b.n	80055a8 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005548:	68bb      	ldr	r3, [r7, #8]
 800554a:	3304      	adds	r3, #4
 800554c:	4618      	mov	r0, r3
 800554e:	f7fe ff79 	bl	8004444 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005552:	68bb      	ldr	r3, [r7, #8]
 8005554:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005556:	2b00      	cmp	r3, #0
 8005558:	d004      	beq.n	8005564 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800555a:	68bb      	ldr	r3, [r7, #8]
 800555c:	3318      	adds	r3, #24
 800555e:	4618      	mov	r0, r3
 8005560:	f7fe ff70 	bl	8004444 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005564:	68bb      	ldr	r3, [r7, #8]
 8005566:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005568:	4b25      	ldr	r3, [pc, #148]	; (8005600 <xTaskIncrementTick+0x160>)
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	429a      	cmp	r2, r3
 800556e:	d903      	bls.n	8005578 <xTaskIncrementTick+0xd8>
 8005570:	68bb      	ldr	r3, [r7, #8]
 8005572:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005574:	4a22      	ldr	r2, [pc, #136]	; (8005600 <xTaskIncrementTick+0x160>)
 8005576:	6013      	str	r3, [r2, #0]
 8005578:	68bb      	ldr	r3, [r7, #8]
 800557a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800557c:	4613      	mov	r3, r2
 800557e:	009b      	lsls	r3, r3, #2
 8005580:	4413      	add	r3, r2
 8005582:	009b      	lsls	r3, r3, #2
 8005584:	4a1f      	ldr	r2, [pc, #124]	; (8005604 <xTaskIncrementTick+0x164>)
 8005586:	441a      	add	r2, r3
 8005588:	68bb      	ldr	r3, [r7, #8]
 800558a:	3304      	adds	r3, #4
 800558c:	4619      	mov	r1, r3
 800558e:	4610      	mov	r0, r2
 8005590:	f7fe fefb 	bl	800438a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005594:	68bb      	ldr	r3, [r7, #8]
 8005596:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005598:	4b1b      	ldr	r3, [pc, #108]	; (8005608 <xTaskIncrementTick+0x168>)
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800559e:	429a      	cmp	r2, r3
 80055a0:	d3b8      	bcc.n	8005514 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80055a2:	2301      	movs	r3, #1
 80055a4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80055a6:	e7b5      	b.n	8005514 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80055a8:	4b17      	ldr	r3, [pc, #92]	; (8005608 <xTaskIncrementTick+0x168>)
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80055ae:	4915      	ldr	r1, [pc, #84]	; (8005604 <xTaskIncrementTick+0x164>)
 80055b0:	4613      	mov	r3, r2
 80055b2:	009b      	lsls	r3, r3, #2
 80055b4:	4413      	add	r3, r2
 80055b6:	009b      	lsls	r3, r3, #2
 80055b8:	440b      	add	r3, r1
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	2b01      	cmp	r3, #1
 80055be:	d901      	bls.n	80055c4 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80055c0:	2301      	movs	r3, #1
 80055c2:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80055c4:	4b11      	ldr	r3, [pc, #68]	; (800560c <xTaskIncrementTick+0x16c>)
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d007      	beq.n	80055dc <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80055cc:	2301      	movs	r3, #1
 80055ce:	617b      	str	r3, [r7, #20]
 80055d0:	e004      	b.n	80055dc <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80055d2:	4b0f      	ldr	r3, [pc, #60]	; (8005610 <xTaskIncrementTick+0x170>)
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	3301      	adds	r3, #1
 80055d8:	4a0d      	ldr	r2, [pc, #52]	; (8005610 <xTaskIncrementTick+0x170>)
 80055da:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80055dc:	697b      	ldr	r3, [r7, #20]
}
 80055de:	4618      	mov	r0, r3
 80055e0:	3718      	adds	r7, #24
 80055e2:	46bd      	mov	sp, r7
 80055e4:	bd80      	pop	{r7, pc}
 80055e6:	bf00      	nop
 80055e8:	20000eb8 	.word	0x20000eb8
 80055ec:	20000e94 	.word	0x20000e94
 80055f0:	20000e48 	.word	0x20000e48
 80055f4:	20000e4c 	.word	0x20000e4c
 80055f8:	20000ea8 	.word	0x20000ea8
 80055fc:	20000eb0 	.word	0x20000eb0
 8005600:	20000e98 	.word	0x20000e98
 8005604:	200009c0 	.word	0x200009c0
 8005608:	200009bc 	.word	0x200009bc
 800560c:	20000ea4 	.word	0x20000ea4
 8005610:	20000ea0 	.word	0x20000ea0

08005614 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005614:	b480      	push	{r7}
 8005616:	b085      	sub	sp, #20
 8005618:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800561a:	4b2a      	ldr	r3, [pc, #168]	; (80056c4 <vTaskSwitchContext+0xb0>)
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	2b00      	cmp	r3, #0
 8005620:	d003      	beq.n	800562a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005622:	4b29      	ldr	r3, [pc, #164]	; (80056c8 <vTaskSwitchContext+0xb4>)
 8005624:	2201      	movs	r2, #1
 8005626:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005628:	e046      	b.n	80056b8 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800562a:	4b27      	ldr	r3, [pc, #156]	; (80056c8 <vTaskSwitchContext+0xb4>)
 800562c:	2200      	movs	r2, #0
 800562e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005630:	4b26      	ldr	r3, [pc, #152]	; (80056cc <vTaskSwitchContext+0xb8>)
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	60fb      	str	r3, [r7, #12]
 8005636:	e010      	b.n	800565a <vTaskSwitchContext+0x46>
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	2b00      	cmp	r3, #0
 800563c:	d10a      	bne.n	8005654 <vTaskSwitchContext+0x40>
	__asm volatile
 800563e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005642:	f383 8811 	msr	BASEPRI, r3
 8005646:	f3bf 8f6f 	isb	sy
 800564a:	f3bf 8f4f 	dsb	sy
 800564e:	607b      	str	r3, [r7, #4]
}
 8005650:	bf00      	nop
 8005652:	e7fe      	b.n	8005652 <vTaskSwitchContext+0x3e>
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	3b01      	subs	r3, #1
 8005658:	60fb      	str	r3, [r7, #12]
 800565a:	491d      	ldr	r1, [pc, #116]	; (80056d0 <vTaskSwitchContext+0xbc>)
 800565c:	68fa      	ldr	r2, [r7, #12]
 800565e:	4613      	mov	r3, r2
 8005660:	009b      	lsls	r3, r3, #2
 8005662:	4413      	add	r3, r2
 8005664:	009b      	lsls	r3, r3, #2
 8005666:	440b      	add	r3, r1
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	2b00      	cmp	r3, #0
 800566c:	d0e4      	beq.n	8005638 <vTaskSwitchContext+0x24>
 800566e:	68fa      	ldr	r2, [r7, #12]
 8005670:	4613      	mov	r3, r2
 8005672:	009b      	lsls	r3, r3, #2
 8005674:	4413      	add	r3, r2
 8005676:	009b      	lsls	r3, r3, #2
 8005678:	4a15      	ldr	r2, [pc, #84]	; (80056d0 <vTaskSwitchContext+0xbc>)
 800567a:	4413      	add	r3, r2
 800567c:	60bb      	str	r3, [r7, #8]
 800567e:	68bb      	ldr	r3, [r7, #8]
 8005680:	685b      	ldr	r3, [r3, #4]
 8005682:	685a      	ldr	r2, [r3, #4]
 8005684:	68bb      	ldr	r3, [r7, #8]
 8005686:	605a      	str	r2, [r3, #4]
 8005688:	68bb      	ldr	r3, [r7, #8]
 800568a:	685a      	ldr	r2, [r3, #4]
 800568c:	68bb      	ldr	r3, [r7, #8]
 800568e:	3308      	adds	r3, #8
 8005690:	429a      	cmp	r2, r3
 8005692:	d104      	bne.n	800569e <vTaskSwitchContext+0x8a>
 8005694:	68bb      	ldr	r3, [r7, #8]
 8005696:	685b      	ldr	r3, [r3, #4]
 8005698:	685a      	ldr	r2, [r3, #4]
 800569a:	68bb      	ldr	r3, [r7, #8]
 800569c:	605a      	str	r2, [r3, #4]
 800569e:	68bb      	ldr	r3, [r7, #8]
 80056a0:	685b      	ldr	r3, [r3, #4]
 80056a2:	68db      	ldr	r3, [r3, #12]
 80056a4:	4a0b      	ldr	r2, [pc, #44]	; (80056d4 <vTaskSwitchContext+0xc0>)
 80056a6:	6013      	str	r3, [r2, #0]
 80056a8:	4a08      	ldr	r2, [pc, #32]	; (80056cc <vTaskSwitchContext+0xb8>)
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80056ae:	4b09      	ldr	r3, [pc, #36]	; (80056d4 <vTaskSwitchContext+0xc0>)
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	3354      	adds	r3, #84	; 0x54
 80056b4:	4a08      	ldr	r2, [pc, #32]	; (80056d8 <vTaskSwitchContext+0xc4>)
 80056b6:	6013      	str	r3, [r2, #0]
}
 80056b8:	bf00      	nop
 80056ba:	3714      	adds	r7, #20
 80056bc:	46bd      	mov	sp, r7
 80056be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c2:	4770      	bx	lr
 80056c4:	20000eb8 	.word	0x20000eb8
 80056c8:	20000ea4 	.word	0x20000ea4
 80056cc:	20000e98 	.word	0x20000e98
 80056d0:	200009c0 	.word	0x200009c0
 80056d4:	200009bc 	.word	0x200009bc
 80056d8:	20000010 	.word	0x20000010

080056dc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80056dc:	b580      	push	{r7, lr}
 80056de:	b084      	sub	sp, #16
 80056e0:	af00      	add	r7, sp, #0
 80056e2:	6078      	str	r0, [r7, #4]
 80056e4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d10a      	bne.n	8005702 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80056ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056f0:	f383 8811 	msr	BASEPRI, r3
 80056f4:	f3bf 8f6f 	isb	sy
 80056f8:	f3bf 8f4f 	dsb	sy
 80056fc:	60fb      	str	r3, [r7, #12]
}
 80056fe:	bf00      	nop
 8005700:	e7fe      	b.n	8005700 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005702:	4b07      	ldr	r3, [pc, #28]	; (8005720 <vTaskPlaceOnEventList+0x44>)
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	3318      	adds	r3, #24
 8005708:	4619      	mov	r1, r3
 800570a:	6878      	ldr	r0, [r7, #4]
 800570c:	f7fe fe61 	bl	80043d2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005710:	2101      	movs	r1, #1
 8005712:	6838      	ldr	r0, [r7, #0]
 8005714:	f000 fa80 	bl	8005c18 <prvAddCurrentTaskToDelayedList>
}
 8005718:	bf00      	nop
 800571a:	3710      	adds	r7, #16
 800571c:	46bd      	mov	sp, r7
 800571e:	bd80      	pop	{r7, pc}
 8005720:	200009bc 	.word	0x200009bc

08005724 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005724:	b580      	push	{r7, lr}
 8005726:	b086      	sub	sp, #24
 8005728:	af00      	add	r7, sp, #0
 800572a:	60f8      	str	r0, [r7, #12]
 800572c:	60b9      	str	r1, [r7, #8]
 800572e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	2b00      	cmp	r3, #0
 8005734:	d10a      	bne.n	800574c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8005736:	f04f 0350 	mov.w	r3, #80	; 0x50
 800573a:	f383 8811 	msr	BASEPRI, r3
 800573e:	f3bf 8f6f 	isb	sy
 8005742:	f3bf 8f4f 	dsb	sy
 8005746:	617b      	str	r3, [r7, #20]
}
 8005748:	bf00      	nop
 800574a:	e7fe      	b.n	800574a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800574c:	4b0a      	ldr	r3, [pc, #40]	; (8005778 <vTaskPlaceOnEventListRestricted+0x54>)
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	3318      	adds	r3, #24
 8005752:	4619      	mov	r1, r3
 8005754:	68f8      	ldr	r0, [r7, #12]
 8005756:	f7fe fe18 	bl	800438a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	2b00      	cmp	r3, #0
 800575e:	d002      	beq.n	8005766 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8005760:	f04f 33ff 	mov.w	r3, #4294967295
 8005764:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005766:	6879      	ldr	r1, [r7, #4]
 8005768:	68b8      	ldr	r0, [r7, #8]
 800576a:	f000 fa55 	bl	8005c18 <prvAddCurrentTaskToDelayedList>
	}
 800576e:	bf00      	nop
 8005770:	3718      	adds	r7, #24
 8005772:	46bd      	mov	sp, r7
 8005774:	bd80      	pop	{r7, pc}
 8005776:	bf00      	nop
 8005778:	200009bc 	.word	0x200009bc

0800577c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800577c:	b580      	push	{r7, lr}
 800577e:	b086      	sub	sp, #24
 8005780:	af00      	add	r7, sp, #0
 8005782:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	68db      	ldr	r3, [r3, #12]
 8005788:	68db      	ldr	r3, [r3, #12]
 800578a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800578c:	693b      	ldr	r3, [r7, #16]
 800578e:	2b00      	cmp	r3, #0
 8005790:	d10a      	bne.n	80057a8 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8005792:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005796:	f383 8811 	msr	BASEPRI, r3
 800579a:	f3bf 8f6f 	isb	sy
 800579e:	f3bf 8f4f 	dsb	sy
 80057a2:	60fb      	str	r3, [r7, #12]
}
 80057a4:	bf00      	nop
 80057a6:	e7fe      	b.n	80057a6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80057a8:	693b      	ldr	r3, [r7, #16]
 80057aa:	3318      	adds	r3, #24
 80057ac:	4618      	mov	r0, r3
 80057ae:	f7fe fe49 	bl	8004444 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80057b2:	4b1e      	ldr	r3, [pc, #120]	; (800582c <xTaskRemoveFromEventList+0xb0>)
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d11d      	bne.n	80057f6 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80057ba:	693b      	ldr	r3, [r7, #16]
 80057bc:	3304      	adds	r3, #4
 80057be:	4618      	mov	r0, r3
 80057c0:	f7fe fe40 	bl	8004444 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80057c4:	693b      	ldr	r3, [r7, #16]
 80057c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80057c8:	4b19      	ldr	r3, [pc, #100]	; (8005830 <xTaskRemoveFromEventList+0xb4>)
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	429a      	cmp	r2, r3
 80057ce:	d903      	bls.n	80057d8 <xTaskRemoveFromEventList+0x5c>
 80057d0:	693b      	ldr	r3, [r7, #16]
 80057d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057d4:	4a16      	ldr	r2, [pc, #88]	; (8005830 <xTaskRemoveFromEventList+0xb4>)
 80057d6:	6013      	str	r3, [r2, #0]
 80057d8:	693b      	ldr	r3, [r7, #16]
 80057da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80057dc:	4613      	mov	r3, r2
 80057de:	009b      	lsls	r3, r3, #2
 80057e0:	4413      	add	r3, r2
 80057e2:	009b      	lsls	r3, r3, #2
 80057e4:	4a13      	ldr	r2, [pc, #76]	; (8005834 <xTaskRemoveFromEventList+0xb8>)
 80057e6:	441a      	add	r2, r3
 80057e8:	693b      	ldr	r3, [r7, #16]
 80057ea:	3304      	adds	r3, #4
 80057ec:	4619      	mov	r1, r3
 80057ee:	4610      	mov	r0, r2
 80057f0:	f7fe fdcb 	bl	800438a <vListInsertEnd>
 80057f4:	e005      	b.n	8005802 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80057f6:	693b      	ldr	r3, [r7, #16]
 80057f8:	3318      	adds	r3, #24
 80057fa:	4619      	mov	r1, r3
 80057fc:	480e      	ldr	r0, [pc, #56]	; (8005838 <xTaskRemoveFromEventList+0xbc>)
 80057fe:	f7fe fdc4 	bl	800438a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005802:	693b      	ldr	r3, [r7, #16]
 8005804:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005806:	4b0d      	ldr	r3, [pc, #52]	; (800583c <xTaskRemoveFromEventList+0xc0>)
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800580c:	429a      	cmp	r2, r3
 800580e:	d905      	bls.n	800581c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005810:	2301      	movs	r3, #1
 8005812:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005814:	4b0a      	ldr	r3, [pc, #40]	; (8005840 <xTaskRemoveFromEventList+0xc4>)
 8005816:	2201      	movs	r2, #1
 8005818:	601a      	str	r2, [r3, #0]
 800581a:	e001      	b.n	8005820 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800581c:	2300      	movs	r3, #0
 800581e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8005820:	697b      	ldr	r3, [r7, #20]
}
 8005822:	4618      	mov	r0, r3
 8005824:	3718      	adds	r7, #24
 8005826:	46bd      	mov	sp, r7
 8005828:	bd80      	pop	{r7, pc}
 800582a:	bf00      	nop
 800582c:	20000eb8 	.word	0x20000eb8
 8005830:	20000e98 	.word	0x20000e98
 8005834:	200009c0 	.word	0x200009c0
 8005838:	20000e50 	.word	0x20000e50
 800583c:	200009bc 	.word	0x200009bc
 8005840:	20000ea4 	.word	0x20000ea4

08005844 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005844:	b480      	push	{r7}
 8005846:	b083      	sub	sp, #12
 8005848:	af00      	add	r7, sp, #0
 800584a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800584c:	4b06      	ldr	r3, [pc, #24]	; (8005868 <vTaskInternalSetTimeOutState+0x24>)
 800584e:	681a      	ldr	r2, [r3, #0]
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005854:	4b05      	ldr	r3, [pc, #20]	; (800586c <vTaskInternalSetTimeOutState+0x28>)
 8005856:	681a      	ldr	r2, [r3, #0]
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	605a      	str	r2, [r3, #4]
}
 800585c:	bf00      	nop
 800585e:	370c      	adds	r7, #12
 8005860:	46bd      	mov	sp, r7
 8005862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005866:	4770      	bx	lr
 8005868:	20000ea8 	.word	0x20000ea8
 800586c:	20000e94 	.word	0x20000e94

08005870 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005870:	b580      	push	{r7, lr}
 8005872:	b088      	sub	sp, #32
 8005874:	af00      	add	r7, sp, #0
 8005876:	6078      	str	r0, [r7, #4]
 8005878:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	2b00      	cmp	r3, #0
 800587e:	d10a      	bne.n	8005896 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8005880:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005884:	f383 8811 	msr	BASEPRI, r3
 8005888:	f3bf 8f6f 	isb	sy
 800588c:	f3bf 8f4f 	dsb	sy
 8005890:	613b      	str	r3, [r7, #16]
}
 8005892:	bf00      	nop
 8005894:	e7fe      	b.n	8005894 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8005896:	683b      	ldr	r3, [r7, #0]
 8005898:	2b00      	cmp	r3, #0
 800589a:	d10a      	bne.n	80058b2 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800589c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058a0:	f383 8811 	msr	BASEPRI, r3
 80058a4:	f3bf 8f6f 	isb	sy
 80058a8:	f3bf 8f4f 	dsb	sy
 80058ac:	60fb      	str	r3, [r7, #12]
}
 80058ae:	bf00      	nop
 80058b0:	e7fe      	b.n	80058b0 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80058b2:	f000 fe7f 	bl	80065b4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80058b6:	4b1d      	ldr	r3, [pc, #116]	; (800592c <xTaskCheckForTimeOut+0xbc>)
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	685b      	ldr	r3, [r3, #4]
 80058c0:	69ba      	ldr	r2, [r7, #24]
 80058c2:	1ad3      	subs	r3, r2, r3
 80058c4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80058c6:	683b      	ldr	r3, [r7, #0]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058ce:	d102      	bne.n	80058d6 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80058d0:	2300      	movs	r3, #0
 80058d2:	61fb      	str	r3, [r7, #28]
 80058d4:	e023      	b.n	800591e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681a      	ldr	r2, [r3, #0]
 80058da:	4b15      	ldr	r3, [pc, #84]	; (8005930 <xTaskCheckForTimeOut+0xc0>)
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	429a      	cmp	r2, r3
 80058e0:	d007      	beq.n	80058f2 <xTaskCheckForTimeOut+0x82>
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	685b      	ldr	r3, [r3, #4]
 80058e6:	69ba      	ldr	r2, [r7, #24]
 80058e8:	429a      	cmp	r2, r3
 80058ea:	d302      	bcc.n	80058f2 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80058ec:	2301      	movs	r3, #1
 80058ee:	61fb      	str	r3, [r7, #28]
 80058f0:	e015      	b.n	800591e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80058f2:	683b      	ldr	r3, [r7, #0]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	697a      	ldr	r2, [r7, #20]
 80058f8:	429a      	cmp	r2, r3
 80058fa:	d20b      	bcs.n	8005914 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80058fc:	683b      	ldr	r3, [r7, #0]
 80058fe:	681a      	ldr	r2, [r3, #0]
 8005900:	697b      	ldr	r3, [r7, #20]
 8005902:	1ad2      	subs	r2, r2, r3
 8005904:	683b      	ldr	r3, [r7, #0]
 8005906:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005908:	6878      	ldr	r0, [r7, #4]
 800590a:	f7ff ff9b 	bl	8005844 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800590e:	2300      	movs	r3, #0
 8005910:	61fb      	str	r3, [r7, #28]
 8005912:	e004      	b.n	800591e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8005914:	683b      	ldr	r3, [r7, #0]
 8005916:	2200      	movs	r2, #0
 8005918:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800591a:	2301      	movs	r3, #1
 800591c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800591e:	f000 fe79 	bl	8006614 <vPortExitCritical>

	return xReturn;
 8005922:	69fb      	ldr	r3, [r7, #28]
}
 8005924:	4618      	mov	r0, r3
 8005926:	3720      	adds	r7, #32
 8005928:	46bd      	mov	sp, r7
 800592a:	bd80      	pop	{r7, pc}
 800592c:	20000e94 	.word	0x20000e94
 8005930:	20000ea8 	.word	0x20000ea8

08005934 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005934:	b480      	push	{r7}
 8005936:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005938:	4b03      	ldr	r3, [pc, #12]	; (8005948 <vTaskMissedYield+0x14>)
 800593a:	2201      	movs	r2, #1
 800593c:	601a      	str	r2, [r3, #0]
}
 800593e:	bf00      	nop
 8005940:	46bd      	mov	sp, r7
 8005942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005946:	4770      	bx	lr
 8005948:	20000ea4 	.word	0x20000ea4

0800594c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800594c:	b580      	push	{r7, lr}
 800594e:	b082      	sub	sp, #8
 8005950:	af00      	add	r7, sp, #0
 8005952:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005954:	f000 f852 	bl	80059fc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005958:	4b06      	ldr	r3, [pc, #24]	; (8005974 <prvIdleTask+0x28>)
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	2b01      	cmp	r3, #1
 800595e:	d9f9      	bls.n	8005954 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005960:	4b05      	ldr	r3, [pc, #20]	; (8005978 <prvIdleTask+0x2c>)
 8005962:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005966:	601a      	str	r2, [r3, #0]
 8005968:	f3bf 8f4f 	dsb	sy
 800596c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005970:	e7f0      	b.n	8005954 <prvIdleTask+0x8>
 8005972:	bf00      	nop
 8005974:	200009c0 	.word	0x200009c0
 8005978:	e000ed04 	.word	0xe000ed04

0800597c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800597c:	b580      	push	{r7, lr}
 800597e:	b082      	sub	sp, #8
 8005980:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005982:	2300      	movs	r3, #0
 8005984:	607b      	str	r3, [r7, #4]
 8005986:	e00c      	b.n	80059a2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005988:	687a      	ldr	r2, [r7, #4]
 800598a:	4613      	mov	r3, r2
 800598c:	009b      	lsls	r3, r3, #2
 800598e:	4413      	add	r3, r2
 8005990:	009b      	lsls	r3, r3, #2
 8005992:	4a12      	ldr	r2, [pc, #72]	; (80059dc <prvInitialiseTaskLists+0x60>)
 8005994:	4413      	add	r3, r2
 8005996:	4618      	mov	r0, r3
 8005998:	f7fe fcca 	bl	8004330 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	3301      	adds	r3, #1
 80059a0:	607b      	str	r3, [r7, #4]
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	2b37      	cmp	r3, #55	; 0x37
 80059a6:	d9ef      	bls.n	8005988 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80059a8:	480d      	ldr	r0, [pc, #52]	; (80059e0 <prvInitialiseTaskLists+0x64>)
 80059aa:	f7fe fcc1 	bl	8004330 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80059ae:	480d      	ldr	r0, [pc, #52]	; (80059e4 <prvInitialiseTaskLists+0x68>)
 80059b0:	f7fe fcbe 	bl	8004330 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80059b4:	480c      	ldr	r0, [pc, #48]	; (80059e8 <prvInitialiseTaskLists+0x6c>)
 80059b6:	f7fe fcbb 	bl	8004330 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80059ba:	480c      	ldr	r0, [pc, #48]	; (80059ec <prvInitialiseTaskLists+0x70>)
 80059bc:	f7fe fcb8 	bl	8004330 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80059c0:	480b      	ldr	r0, [pc, #44]	; (80059f0 <prvInitialiseTaskLists+0x74>)
 80059c2:	f7fe fcb5 	bl	8004330 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80059c6:	4b0b      	ldr	r3, [pc, #44]	; (80059f4 <prvInitialiseTaskLists+0x78>)
 80059c8:	4a05      	ldr	r2, [pc, #20]	; (80059e0 <prvInitialiseTaskLists+0x64>)
 80059ca:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80059cc:	4b0a      	ldr	r3, [pc, #40]	; (80059f8 <prvInitialiseTaskLists+0x7c>)
 80059ce:	4a05      	ldr	r2, [pc, #20]	; (80059e4 <prvInitialiseTaskLists+0x68>)
 80059d0:	601a      	str	r2, [r3, #0]
}
 80059d2:	bf00      	nop
 80059d4:	3708      	adds	r7, #8
 80059d6:	46bd      	mov	sp, r7
 80059d8:	bd80      	pop	{r7, pc}
 80059da:	bf00      	nop
 80059dc:	200009c0 	.word	0x200009c0
 80059e0:	20000e20 	.word	0x20000e20
 80059e4:	20000e34 	.word	0x20000e34
 80059e8:	20000e50 	.word	0x20000e50
 80059ec:	20000e64 	.word	0x20000e64
 80059f0:	20000e7c 	.word	0x20000e7c
 80059f4:	20000e48 	.word	0x20000e48
 80059f8:	20000e4c 	.word	0x20000e4c

080059fc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80059fc:	b580      	push	{r7, lr}
 80059fe:	b082      	sub	sp, #8
 8005a00:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005a02:	e019      	b.n	8005a38 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005a04:	f000 fdd6 	bl	80065b4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005a08:	4b10      	ldr	r3, [pc, #64]	; (8005a4c <prvCheckTasksWaitingTermination+0x50>)
 8005a0a:	68db      	ldr	r3, [r3, #12]
 8005a0c:	68db      	ldr	r3, [r3, #12]
 8005a0e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	3304      	adds	r3, #4
 8005a14:	4618      	mov	r0, r3
 8005a16:	f7fe fd15 	bl	8004444 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005a1a:	4b0d      	ldr	r3, [pc, #52]	; (8005a50 <prvCheckTasksWaitingTermination+0x54>)
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	3b01      	subs	r3, #1
 8005a20:	4a0b      	ldr	r2, [pc, #44]	; (8005a50 <prvCheckTasksWaitingTermination+0x54>)
 8005a22:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005a24:	4b0b      	ldr	r3, [pc, #44]	; (8005a54 <prvCheckTasksWaitingTermination+0x58>)
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	3b01      	subs	r3, #1
 8005a2a:	4a0a      	ldr	r2, [pc, #40]	; (8005a54 <prvCheckTasksWaitingTermination+0x58>)
 8005a2c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005a2e:	f000 fdf1 	bl	8006614 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005a32:	6878      	ldr	r0, [r7, #4]
 8005a34:	f000 f810 	bl	8005a58 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005a38:	4b06      	ldr	r3, [pc, #24]	; (8005a54 <prvCheckTasksWaitingTermination+0x58>)
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d1e1      	bne.n	8005a04 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005a40:	bf00      	nop
 8005a42:	bf00      	nop
 8005a44:	3708      	adds	r7, #8
 8005a46:	46bd      	mov	sp, r7
 8005a48:	bd80      	pop	{r7, pc}
 8005a4a:	bf00      	nop
 8005a4c:	20000e64 	.word	0x20000e64
 8005a50:	20000e90 	.word	0x20000e90
 8005a54:	20000e78 	.word	0x20000e78

08005a58 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005a58:	b580      	push	{r7, lr}
 8005a5a:	b084      	sub	sp, #16
 8005a5c:	af00      	add	r7, sp, #0
 8005a5e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	3354      	adds	r3, #84	; 0x54
 8005a64:	4618      	mov	r0, r3
 8005a66:	f001 f8fb 	bl	8006c60 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d108      	bne.n	8005a86 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a78:	4618      	mov	r0, r3
 8005a7a:	f000 ff89 	bl	8006990 <vPortFree>
				vPortFree( pxTCB );
 8005a7e:	6878      	ldr	r0, [r7, #4]
 8005a80:	f000 ff86 	bl	8006990 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005a84:	e018      	b.n	8005ab8 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8005a8c:	2b01      	cmp	r3, #1
 8005a8e:	d103      	bne.n	8005a98 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8005a90:	6878      	ldr	r0, [r7, #4]
 8005a92:	f000 ff7d 	bl	8006990 <vPortFree>
	}
 8005a96:	e00f      	b.n	8005ab8 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8005a9e:	2b02      	cmp	r3, #2
 8005aa0:	d00a      	beq.n	8005ab8 <prvDeleteTCB+0x60>
	__asm volatile
 8005aa2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005aa6:	f383 8811 	msr	BASEPRI, r3
 8005aaa:	f3bf 8f6f 	isb	sy
 8005aae:	f3bf 8f4f 	dsb	sy
 8005ab2:	60fb      	str	r3, [r7, #12]
}
 8005ab4:	bf00      	nop
 8005ab6:	e7fe      	b.n	8005ab6 <prvDeleteTCB+0x5e>
	}
 8005ab8:	bf00      	nop
 8005aba:	3710      	adds	r7, #16
 8005abc:	46bd      	mov	sp, r7
 8005abe:	bd80      	pop	{r7, pc}

08005ac0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005ac0:	b480      	push	{r7}
 8005ac2:	b083      	sub	sp, #12
 8005ac4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005ac6:	4b0c      	ldr	r3, [pc, #48]	; (8005af8 <prvResetNextTaskUnblockTime+0x38>)
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d104      	bne.n	8005ada <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005ad0:	4b0a      	ldr	r3, [pc, #40]	; (8005afc <prvResetNextTaskUnblockTime+0x3c>)
 8005ad2:	f04f 32ff 	mov.w	r2, #4294967295
 8005ad6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005ad8:	e008      	b.n	8005aec <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005ada:	4b07      	ldr	r3, [pc, #28]	; (8005af8 <prvResetNextTaskUnblockTime+0x38>)
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	68db      	ldr	r3, [r3, #12]
 8005ae0:	68db      	ldr	r3, [r3, #12]
 8005ae2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	685b      	ldr	r3, [r3, #4]
 8005ae8:	4a04      	ldr	r2, [pc, #16]	; (8005afc <prvResetNextTaskUnblockTime+0x3c>)
 8005aea:	6013      	str	r3, [r2, #0]
}
 8005aec:	bf00      	nop
 8005aee:	370c      	adds	r7, #12
 8005af0:	46bd      	mov	sp, r7
 8005af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af6:	4770      	bx	lr
 8005af8:	20000e48 	.word	0x20000e48
 8005afc:	20000eb0 	.word	0x20000eb0

08005b00 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005b00:	b480      	push	{r7}
 8005b02:	b083      	sub	sp, #12
 8005b04:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005b06:	4b0b      	ldr	r3, [pc, #44]	; (8005b34 <xTaskGetSchedulerState+0x34>)
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d102      	bne.n	8005b14 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005b0e:	2301      	movs	r3, #1
 8005b10:	607b      	str	r3, [r7, #4]
 8005b12:	e008      	b.n	8005b26 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005b14:	4b08      	ldr	r3, [pc, #32]	; (8005b38 <xTaskGetSchedulerState+0x38>)
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d102      	bne.n	8005b22 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005b1c:	2302      	movs	r3, #2
 8005b1e:	607b      	str	r3, [r7, #4]
 8005b20:	e001      	b.n	8005b26 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005b22:	2300      	movs	r3, #0
 8005b24:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005b26:	687b      	ldr	r3, [r7, #4]
	}
 8005b28:	4618      	mov	r0, r3
 8005b2a:	370c      	adds	r7, #12
 8005b2c:	46bd      	mov	sp, r7
 8005b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b32:	4770      	bx	lr
 8005b34:	20000e9c 	.word	0x20000e9c
 8005b38:	20000eb8 	.word	0x20000eb8

08005b3c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005b3c:	b580      	push	{r7, lr}
 8005b3e:	b086      	sub	sp, #24
 8005b40:	af00      	add	r7, sp, #0
 8005b42:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005b48:	2300      	movs	r3, #0
 8005b4a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d056      	beq.n	8005c00 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005b52:	4b2e      	ldr	r3, [pc, #184]	; (8005c0c <xTaskPriorityDisinherit+0xd0>)
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	693a      	ldr	r2, [r7, #16]
 8005b58:	429a      	cmp	r2, r3
 8005b5a:	d00a      	beq.n	8005b72 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8005b5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b60:	f383 8811 	msr	BASEPRI, r3
 8005b64:	f3bf 8f6f 	isb	sy
 8005b68:	f3bf 8f4f 	dsb	sy
 8005b6c:	60fb      	str	r3, [r7, #12]
}
 8005b6e:	bf00      	nop
 8005b70:	e7fe      	b.n	8005b70 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8005b72:	693b      	ldr	r3, [r7, #16]
 8005b74:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d10a      	bne.n	8005b90 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8005b7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b7e:	f383 8811 	msr	BASEPRI, r3
 8005b82:	f3bf 8f6f 	isb	sy
 8005b86:	f3bf 8f4f 	dsb	sy
 8005b8a:	60bb      	str	r3, [r7, #8]
}
 8005b8c:	bf00      	nop
 8005b8e:	e7fe      	b.n	8005b8e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8005b90:	693b      	ldr	r3, [r7, #16]
 8005b92:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b94:	1e5a      	subs	r2, r3, #1
 8005b96:	693b      	ldr	r3, [r7, #16]
 8005b98:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005b9a:	693b      	ldr	r3, [r7, #16]
 8005b9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b9e:	693b      	ldr	r3, [r7, #16]
 8005ba0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005ba2:	429a      	cmp	r2, r3
 8005ba4:	d02c      	beq.n	8005c00 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005ba6:	693b      	ldr	r3, [r7, #16]
 8005ba8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d128      	bne.n	8005c00 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005bae:	693b      	ldr	r3, [r7, #16]
 8005bb0:	3304      	adds	r3, #4
 8005bb2:	4618      	mov	r0, r3
 8005bb4:	f7fe fc46 	bl	8004444 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005bb8:	693b      	ldr	r3, [r7, #16]
 8005bba:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005bbc:	693b      	ldr	r3, [r7, #16]
 8005bbe:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005bc0:	693b      	ldr	r3, [r7, #16]
 8005bc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bc4:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005bc8:	693b      	ldr	r3, [r7, #16]
 8005bca:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005bcc:	693b      	ldr	r3, [r7, #16]
 8005bce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005bd0:	4b0f      	ldr	r3, [pc, #60]	; (8005c10 <xTaskPriorityDisinherit+0xd4>)
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	429a      	cmp	r2, r3
 8005bd6:	d903      	bls.n	8005be0 <xTaskPriorityDisinherit+0xa4>
 8005bd8:	693b      	ldr	r3, [r7, #16]
 8005bda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bdc:	4a0c      	ldr	r2, [pc, #48]	; (8005c10 <xTaskPriorityDisinherit+0xd4>)
 8005bde:	6013      	str	r3, [r2, #0]
 8005be0:	693b      	ldr	r3, [r7, #16]
 8005be2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005be4:	4613      	mov	r3, r2
 8005be6:	009b      	lsls	r3, r3, #2
 8005be8:	4413      	add	r3, r2
 8005bea:	009b      	lsls	r3, r3, #2
 8005bec:	4a09      	ldr	r2, [pc, #36]	; (8005c14 <xTaskPriorityDisinherit+0xd8>)
 8005bee:	441a      	add	r2, r3
 8005bf0:	693b      	ldr	r3, [r7, #16]
 8005bf2:	3304      	adds	r3, #4
 8005bf4:	4619      	mov	r1, r3
 8005bf6:	4610      	mov	r0, r2
 8005bf8:	f7fe fbc7 	bl	800438a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005bfc:	2301      	movs	r3, #1
 8005bfe:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005c00:	697b      	ldr	r3, [r7, #20]
	}
 8005c02:	4618      	mov	r0, r3
 8005c04:	3718      	adds	r7, #24
 8005c06:	46bd      	mov	sp, r7
 8005c08:	bd80      	pop	{r7, pc}
 8005c0a:	bf00      	nop
 8005c0c:	200009bc 	.word	0x200009bc
 8005c10:	20000e98 	.word	0x20000e98
 8005c14:	200009c0 	.word	0x200009c0

08005c18 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005c18:	b580      	push	{r7, lr}
 8005c1a:	b084      	sub	sp, #16
 8005c1c:	af00      	add	r7, sp, #0
 8005c1e:	6078      	str	r0, [r7, #4]
 8005c20:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005c22:	4b21      	ldr	r3, [pc, #132]	; (8005ca8 <prvAddCurrentTaskToDelayedList+0x90>)
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005c28:	4b20      	ldr	r3, [pc, #128]	; (8005cac <prvAddCurrentTaskToDelayedList+0x94>)
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	3304      	adds	r3, #4
 8005c2e:	4618      	mov	r0, r3
 8005c30:	f7fe fc08 	bl	8004444 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c3a:	d10a      	bne.n	8005c52 <prvAddCurrentTaskToDelayedList+0x3a>
 8005c3c:	683b      	ldr	r3, [r7, #0]
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d007      	beq.n	8005c52 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005c42:	4b1a      	ldr	r3, [pc, #104]	; (8005cac <prvAddCurrentTaskToDelayedList+0x94>)
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	3304      	adds	r3, #4
 8005c48:	4619      	mov	r1, r3
 8005c4a:	4819      	ldr	r0, [pc, #100]	; (8005cb0 <prvAddCurrentTaskToDelayedList+0x98>)
 8005c4c:	f7fe fb9d 	bl	800438a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005c50:	e026      	b.n	8005ca0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005c52:	68fa      	ldr	r2, [r7, #12]
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	4413      	add	r3, r2
 8005c58:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005c5a:	4b14      	ldr	r3, [pc, #80]	; (8005cac <prvAddCurrentTaskToDelayedList+0x94>)
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	68ba      	ldr	r2, [r7, #8]
 8005c60:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005c62:	68ba      	ldr	r2, [r7, #8]
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	429a      	cmp	r2, r3
 8005c68:	d209      	bcs.n	8005c7e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005c6a:	4b12      	ldr	r3, [pc, #72]	; (8005cb4 <prvAddCurrentTaskToDelayedList+0x9c>)
 8005c6c:	681a      	ldr	r2, [r3, #0]
 8005c6e:	4b0f      	ldr	r3, [pc, #60]	; (8005cac <prvAddCurrentTaskToDelayedList+0x94>)
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	3304      	adds	r3, #4
 8005c74:	4619      	mov	r1, r3
 8005c76:	4610      	mov	r0, r2
 8005c78:	f7fe fbab 	bl	80043d2 <vListInsert>
}
 8005c7c:	e010      	b.n	8005ca0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005c7e:	4b0e      	ldr	r3, [pc, #56]	; (8005cb8 <prvAddCurrentTaskToDelayedList+0xa0>)
 8005c80:	681a      	ldr	r2, [r3, #0]
 8005c82:	4b0a      	ldr	r3, [pc, #40]	; (8005cac <prvAddCurrentTaskToDelayedList+0x94>)
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	3304      	adds	r3, #4
 8005c88:	4619      	mov	r1, r3
 8005c8a:	4610      	mov	r0, r2
 8005c8c:	f7fe fba1 	bl	80043d2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005c90:	4b0a      	ldr	r3, [pc, #40]	; (8005cbc <prvAddCurrentTaskToDelayedList+0xa4>)
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	68ba      	ldr	r2, [r7, #8]
 8005c96:	429a      	cmp	r2, r3
 8005c98:	d202      	bcs.n	8005ca0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8005c9a:	4a08      	ldr	r2, [pc, #32]	; (8005cbc <prvAddCurrentTaskToDelayedList+0xa4>)
 8005c9c:	68bb      	ldr	r3, [r7, #8]
 8005c9e:	6013      	str	r3, [r2, #0]
}
 8005ca0:	bf00      	nop
 8005ca2:	3710      	adds	r7, #16
 8005ca4:	46bd      	mov	sp, r7
 8005ca6:	bd80      	pop	{r7, pc}
 8005ca8:	20000e94 	.word	0x20000e94
 8005cac:	200009bc 	.word	0x200009bc
 8005cb0:	20000e7c 	.word	0x20000e7c
 8005cb4:	20000e4c 	.word	0x20000e4c
 8005cb8:	20000e48 	.word	0x20000e48
 8005cbc:	20000eb0 	.word	0x20000eb0

08005cc0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8005cc0:	b580      	push	{r7, lr}
 8005cc2:	b08a      	sub	sp, #40	; 0x28
 8005cc4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8005cc6:	2300      	movs	r3, #0
 8005cc8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8005cca:	f000 fb07 	bl	80062dc <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8005cce:	4b1c      	ldr	r3, [pc, #112]	; (8005d40 <xTimerCreateTimerTask+0x80>)
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d021      	beq.n	8005d1a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8005cd6:	2300      	movs	r3, #0
 8005cd8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8005cda:	2300      	movs	r3, #0
 8005cdc:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8005cde:	1d3a      	adds	r2, r7, #4
 8005ce0:	f107 0108 	add.w	r1, r7, #8
 8005ce4:	f107 030c 	add.w	r3, r7, #12
 8005ce8:	4618      	mov	r0, r3
 8005cea:	f7fe fb07 	bl	80042fc <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8005cee:	6879      	ldr	r1, [r7, #4]
 8005cf0:	68bb      	ldr	r3, [r7, #8]
 8005cf2:	68fa      	ldr	r2, [r7, #12]
 8005cf4:	9202      	str	r2, [sp, #8]
 8005cf6:	9301      	str	r3, [sp, #4]
 8005cf8:	2302      	movs	r3, #2
 8005cfa:	9300      	str	r3, [sp, #0]
 8005cfc:	2300      	movs	r3, #0
 8005cfe:	460a      	mov	r2, r1
 8005d00:	4910      	ldr	r1, [pc, #64]	; (8005d44 <xTimerCreateTimerTask+0x84>)
 8005d02:	4811      	ldr	r0, [pc, #68]	; (8005d48 <xTimerCreateTimerTask+0x88>)
 8005d04:	f7ff f8b4 	bl	8004e70 <xTaskCreateStatic>
 8005d08:	4603      	mov	r3, r0
 8005d0a:	4a10      	ldr	r2, [pc, #64]	; (8005d4c <xTimerCreateTimerTask+0x8c>)
 8005d0c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8005d0e:	4b0f      	ldr	r3, [pc, #60]	; (8005d4c <xTimerCreateTimerTask+0x8c>)
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d001      	beq.n	8005d1a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8005d16:	2301      	movs	r3, #1
 8005d18:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8005d1a:	697b      	ldr	r3, [r7, #20]
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d10a      	bne.n	8005d36 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8005d20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d24:	f383 8811 	msr	BASEPRI, r3
 8005d28:	f3bf 8f6f 	isb	sy
 8005d2c:	f3bf 8f4f 	dsb	sy
 8005d30:	613b      	str	r3, [r7, #16]
}
 8005d32:	bf00      	nop
 8005d34:	e7fe      	b.n	8005d34 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8005d36:	697b      	ldr	r3, [r7, #20]
}
 8005d38:	4618      	mov	r0, r3
 8005d3a:	3718      	adds	r7, #24
 8005d3c:	46bd      	mov	sp, r7
 8005d3e:	bd80      	pop	{r7, pc}
 8005d40:	20000eec 	.word	0x20000eec
 8005d44:	08006df4 	.word	0x08006df4
 8005d48:	08005e85 	.word	0x08005e85
 8005d4c:	20000ef0 	.word	0x20000ef0

08005d50 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8005d50:	b580      	push	{r7, lr}
 8005d52:	b08a      	sub	sp, #40	; 0x28
 8005d54:	af00      	add	r7, sp, #0
 8005d56:	60f8      	str	r0, [r7, #12]
 8005d58:	60b9      	str	r1, [r7, #8]
 8005d5a:	607a      	str	r2, [r7, #4]
 8005d5c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8005d5e:	2300      	movs	r3, #0
 8005d60:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d10a      	bne.n	8005d7e <xTimerGenericCommand+0x2e>
	__asm volatile
 8005d68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d6c:	f383 8811 	msr	BASEPRI, r3
 8005d70:	f3bf 8f6f 	isb	sy
 8005d74:	f3bf 8f4f 	dsb	sy
 8005d78:	623b      	str	r3, [r7, #32]
}
 8005d7a:	bf00      	nop
 8005d7c:	e7fe      	b.n	8005d7c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8005d7e:	4b1a      	ldr	r3, [pc, #104]	; (8005de8 <xTimerGenericCommand+0x98>)
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d02a      	beq.n	8005ddc <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8005d86:	68bb      	ldr	r3, [r7, #8]
 8005d88:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8005d92:	68bb      	ldr	r3, [r7, #8]
 8005d94:	2b05      	cmp	r3, #5
 8005d96:	dc18      	bgt.n	8005dca <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8005d98:	f7ff feb2 	bl	8005b00 <xTaskGetSchedulerState>
 8005d9c:	4603      	mov	r3, r0
 8005d9e:	2b02      	cmp	r3, #2
 8005da0:	d109      	bne.n	8005db6 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8005da2:	4b11      	ldr	r3, [pc, #68]	; (8005de8 <xTimerGenericCommand+0x98>)
 8005da4:	6818      	ldr	r0, [r3, #0]
 8005da6:	f107 0110 	add.w	r1, r7, #16
 8005daa:	2300      	movs	r3, #0
 8005dac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005dae:	f7fe fc77 	bl	80046a0 <xQueueGenericSend>
 8005db2:	6278      	str	r0, [r7, #36]	; 0x24
 8005db4:	e012      	b.n	8005ddc <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8005db6:	4b0c      	ldr	r3, [pc, #48]	; (8005de8 <xTimerGenericCommand+0x98>)
 8005db8:	6818      	ldr	r0, [r3, #0]
 8005dba:	f107 0110 	add.w	r1, r7, #16
 8005dbe:	2300      	movs	r3, #0
 8005dc0:	2200      	movs	r2, #0
 8005dc2:	f7fe fc6d 	bl	80046a0 <xQueueGenericSend>
 8005dc6:	6278      	str	r0, [r7, #36]	; 0x24
 8005dc8:	e008      	b.n	8005ddc <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8005dca:	4b07      	ldr	r3, [pc, #28]	; (8005de8 <xTimerGenericCommand+0x98>)
 8005dcc:	6818      	ldr	r0, [r3, #0]
 8005dce:	f107 0110 	add.w	r1, r7, #16
 8005dd2:	2300      	movs	r3, #0
 8005dd4:	683a      	ldr	r2, [r7, #0]
 8005dd6:	f7fe fd61 	bl	800489c <xQueueGenericSendFromISR>
 8005dda:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8005ddc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005dde:	4618      	mov	r0, r3
 8005de0:	3728      	adds	r7, #40	; 0x28
 8005de2:	46bd      	mov	sp, r7
 8005de4:	bd80      	pop	{r7, pc}
 8005de6:	bf00      	nop
 8005de8:	20000eec 	.word	0x20000eec

08005dec <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8005dec:	b580      	push	{r7, lr}
 8005dee:	b088      	sub	sp, #32
 8005df0:	af02      	add	r7, sp, #8
 8005df2:	6078      	str	r0, [r7, #4]
 8005df4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005df6:	4b22      	ldr	r3, [pc, #136]	; (8005e80 <prvProcessExpiredTimer+0x94>)
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	68db      	ldr	r3, [r3, #12]
 8005dfc:	68db      	ldr	r3, [r3, #12]
 8005dfe:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005e00:	697b      	ldr	r3, [r7, #20]
 8005e02:	3304      	adds	r3, #4
 8005e04:	4618      	mov	r0, r3
 8005e06:	f7fe fb1d 	bl	8004444 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005e0a:	697b      	ldr	r3, [r7, #20]
 8005e0c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005e10:	f003 0304 	and.w	r3, r3, #4
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d022      	beq.n	8005e5e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8005e18:	697b      	ldr	r3, [r7, #20]
 8005e1a:	699a      	ldr	r2, [r3, #24]
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	18d1      	adds	r1, r2, r3
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	683a      	ldr	r2, [r7, #0]
 8005e24:	6978      	ldr	r0, [r7, #20]
 8005e26:	f000 f8d1 	bl	8005fcc <prvInsertTimerInActiveList>
 8005e2a:	4603      	mov	r3, r0
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d01f      	beq.n	8005e70 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005e30:	2300      	movs	r3, #0
 8005e32:	9300      	str	r3, [sp, #0]
 8005e34:	2300      	movs	r3, #0
 8005e36:	687a      	ldr	r2, [r7, #4]
 8005e38:	2100      	movs	r1, #0
 8005e3a:	6978      	ldr	r0, [r7, #20]
 8005e3c:	f7ff ff88 	bl	8005d50 <xTimerGenericCommand>
 8005e40:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8005e42:	693b      	ldr	r3, [r7, #16]
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d113      	bne.n	8005e70 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8005e48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e4c:	f383 8811 	msr	BASEPRI, r3
 8005e50:	f3bf 8f6f 	isb	sy
 8005e54:	f3bf 8f4f 	dsb	sy
 8005e58:	60fb      	str	r3, [r7, #12]
}
 8005e5a:	bf00      	nop
 8005e5c:	e7fe      	b.n	8005e5c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005e5e:	697b      	ldr	r3, [r7, #20]
 8005e60:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005e64:	f023 0301 	bic.w	r3, r3, #1
 8005e68:	b2da      	uxtb	r2, r3
 8005e6a:	697b      	ldr	r3, [r7, #20]
 8005e6c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005e70:	697b      	ldr	r3, [r7, #20]
 8005e72:	6a1b      	ldr	r3, [r3, #32]
 8005e74:	6978      	ldr	r0, [r7, #20]
 8005e76:	4798      	blx	r3
}
 8005e78:	bf00      	nop
 8005e7a:	3718      	adds	r7, #24
 8005e7c:	46bd      	mov	sp, r7
 8005e7e:	bd80      	pop	{r7, pc}
 8005e80:	20000ee4 	.word	0x20000ee4

08005e84 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8005e84:	b580      	push	{r7, lr}
 8005e86:	b084      	sub	sp, #16
 8005e88:	af00      	add	r7, sp, #0
 8005e8a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005e8c:	f107 0308 	add.w	r3, r7, #8
 8005e90:	4618      	mov	r0, r3
 8005e92:	f000 f857 	bl	8005f44 <prvGetNextExpireTime>
 8005e96:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8005e98:	68bb      	ldr	r3, [r7, #8]
 8005e9a:	4619      	mov	r1, r3
 8005e9c:	68f8      	ldr	r0, [r7, #12]
 8005e9e:	f000 f803 	bl	8005ea8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8005ea2:	f000 f8d5 	bl	8006050 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005ea6:	e7f1      	b.n	8005e8c <prvTimerTask+0x8>

08005ea8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8005ea8:	b580      	push	{r7, lr}
 8005eaa:	b084      	sub	sp, #16
 8005eac:	af00      	add	r7, sp, #0
 8005eae:	6078      	str	r0, [r7, #4]
 8005eb0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8005eb2:	f7ff fa39 	bl	8005328 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005eb6:	f107 0308 	add.w	r3, r7, #8
 8005eba:	4618      	mov	r0, r3
 8005ebc:	f000 f866 	bl	8005f8c <prvSampleTimeNow>
 8005ec0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8005ec2:	68bb      	ldr	r3, [r7, #8]
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d130      	bne.n	8005f2a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8005ec8:	683b      	ldr	r3, [r7, #0]
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d10a      	bne.n	8005ee4 <prvProcessTimerOrBlockTask+0x3c>
 8005ece:	687a      	ldr	r2, [r7, #4]
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	429a      	cmp	r2, r3
 8005ed4:	d806      	bhi.n	8005ee4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8005ed6:	f7ff fa35 	bl	8005344 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8005eda:	68f9      	ldr	r1, [r7, #12]
 8005edc:	6878      	ldr	r0, [r7, #4]
 8005ede:	f7ff ff85 	bl	8005dec <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8005ee2:	e024      	b.n	8005f2e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8005ee4:	683b      	ldr	r3, [r7, #0]
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d008      	beq.n	8005efc <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8005eea:	4b13      	ldr	r3, [pc, #76]	; (8005f38 <prvProcessTimerOrBlockTask+0x90>)
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d101      	bne.n	8005ef8 <prvProcessTimerOrBlockTask+0x50>
 8005ef4:	2301      	movs	r3, #1
 8005ef6:	e000      	b.n	8005efa <prvProcessTimerOrBlockTask+0x52>
 8005ef8:	2300      	movs	r3, #0
 8005efa:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8005efc:	4b0f      	ldr	r3, [pc, #60]	; (8005f3c <prvProcessTimerOrBlockTask+0x94>)
 8005efe:	6818      	ldr	r0, [r3, #0]
 8005f00:	687a      	ldr	r2, [r7, #4]
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	1ad3      	subs	r3, r2, r3
 8005f06:	683a      	ldr	r2, [r7, #0]
 8005f08:	4619      	mov	r1, r3
 8005f0a:	f7fe ff7d 	bl	8004e08 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8005f0e:	f7ff fa19 	bl	8005344 <xTaskResumeAll>
 8005f12:	4603      	mov	r3, r0
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d10a      	bne.n	8005f2e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8005f18:	4b09      	ldr	r3, [pc, #36]	; (8005f40 <prvProcessTimerOrBlockTask+0x98>)
 8005f1a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005f1e:	601a      	str	r2, [r3, #0]
 8005f20:	f3bf 8f4f 	dsb	sy
 8005f24:	f3bf 8f6f 	isb	sy
}
 8005f28:	e001      	b.n	8005f2e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8005f2a:	f7ff fa0b 	bl	8005344 <xTaskResumeAll>
}
 8005f2e:	bf00      	nop
 8005f30:	3710      	adds	r7, #16
 8005f32:	46bd      	mov	sp, r7
 8005f34:	bd80      	pop	{r7, pc}
 8005f36:	bf00      	nop
 8005f38:	20000ee8 	.word	0x20000ee8
 8005f3c:	20000eec 	.word	0x20000eec
 8005f40:	e000ed04 	.word	0xe000ed04

08005f44 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8005f44:	b480      	push	{r7}
 8005f46:	b085      	sub	sp, #20
 8005f48:	af00      	add	r7, sp, #0
 8005f4a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005f4c:	4b0e      	ldr	r3, [pc, #56]	; (8005f88 <prvGetNextExpireTime+0x44>)
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d101      	bne.n	8005f5a <prvGetNextExpireTime+0x16>
 8005f56:	2201      	movs	r2, #1
 8005f58:	e000      	b.n	8005f5c <prvGetNextExpireTime+0x18>
 8005f5a:	2200      	movs	r2, #0
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d105      	bne.n	8005f74 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005f68:	4b07      	ldr	r3, [pc, #28]	; (8005f88 <prvGetNextExpireTime+0x44>)
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	68db      	ldr	r3, [r3, #12]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	60fb      	str	r3, [r7, #12]
 8005f72:	e001      	b.n	8005f78 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8005f74:	2300      	movs	r3, #0
 8005f76:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8005f78:	68fb      	ldr	r3, [r7, #12]
}
 8005f7a:	4618      	mov	r0, r3
 8005f7c:	3714      	adds	r7, #20
 8005f7e:	46bd      	mov	sp, r7
 8005f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f84:	4770      	bx	lr
 8005f86:	bf00      	nop
 8005f88:	20000ee4 	.word	0x20000ee4

08005f8c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8005f8c:	b580      	push	{r7, lr}
 8005f8e:	b084      	sub	sp, #16
 8005f90:	af00      	add	r7, sp, #0
 8005f92:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8005f94:	f7ff fa74 	bl	8005480 <xTaskGetTickCount>
 8005f98:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8005f9a:	4b0b      	ldr	r3, [pc, #44]	; (8005fc8 <prvSampleTimeNow+0x3c>)
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	68fa      	ldr	r2, [r7, #12]
 8005fa0:	429a      	cmp	r2, r3
 8005fa2:	d205      	bcs.n	8005fb0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8005fa4:	f000 f936 	bl	8006214 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	2201      	movs	r2, #1
 8005fac:	601a      	str	r2, [r3, #0]
 8005fae:	e002      	b.n	8005fb6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	2200      	movs	r2, #0
 8005fb4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8005fb6:	4a04      	ldr	r2, [pc, #16]	; (8005fc8 <prvSampleTimeNow+0x3c>)
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8005fbc:	68fb      	ldr	r3, [r7, #12]
}
 8005fbe:	4618      	mov	r0, r3
 8005fc0:	3710      	adds	r7, #16
 8005fc2:	46bd      	mov	sp, r7
 8005fc4:	bd80      	pop	{r7, pc}
 8005fc6:	bf00      	nop
 8005fc8:	20000ef4 	.word	0x20000ef4

08005fcc <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8005fcc:	b580      	push	{r7, lr}
 8005fce:	b086      	sub	sp, #24
 8005fd0:	af00      	add	r7, sp, #0
 8005fd2:	60f8      	str	r0, [r7, #12]
 8005fd4:	60b9      	str	r1, [r7, #8]
 8005fd6:	607a      	str	r2, [r7, #4]
 8005fd8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8005fda:	2300      	movs	r3, #0
 8005fdc:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	68ba      	ldr	r2, [r7, #8]
 8005fe2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	68fa      	ldr	r2, [r7, #12]
 8005fe8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8005fea:	68ba      	ldr	r2, [r7, #8]
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	429a      	cmp	r2, r3
 8005ff0:	d812      	bhi.n	8006018 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005ff2:	687a      	ldr	r2, [r7, #4]
 8005ff4:	683b      	ldr	r3, [r7, #0]
 8005ff6:	1ad2      	subs	r2, r2, r3
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	699b      	ldr	r3, [r3, #24]
 8005ffc:	429a      	cmp	r2, r3
 8005ffe:	d302      	bcc.n	8006006 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8006000:	2301      	movs	r3, #1
 8006002:	617b      	str	r3, [r7, #20]
 8006004:	e01b      	b.n	800603e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8006006:	4b10      	ldr	r3, [pc, #64]	; (8006048 <prvInsertTimerInActiveList+0x7c>)
 8006008:	681a      	ldr	r2, [r3, #0]
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	3304      	adds	r3, #4
 800600e:	4619      	mov	r1, r3
 8006010:	4610      	mov	r0, r2
 8006012:	f7fe f9de 	bl	80043d2 <vListInsert>
 8006016:	e012      	b.n	800603e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006018:	687a      	ldr	r2, [r7, #4]
 800601a:	683b      	ldr	r3, [r7, #0]
 800601c:	429a      	cmp	r2, r3
 800601e:	d206      	bcs.n	800602e <prvInsertTimerInActiveList+0x62>
 8006020:	68ba      	ldr	r2, [r7, #8]
 8006022:	683b      	ldr	r3, [r7, #0]
 8006024:	429a      	cmp	r2, r3
 8006026:	d302      	bcc.n	800602e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8006028:	2301      	movs	r3, #1
 800602a:	617b      	str	r3, [r7, #20]
 800602c:	e007      	b.n	800603e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800602e:	4b07      	ldr	r3, [pc, #28]	; (800604c <prvInsertTimerInActiveList+0x80>)
 8006030:	681a      	ldr	r2, [r3, #0]
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	3304      	adds	r3, #4
 8006036:	4619      	mov	r1, r3
 8006038:	4610      	mov	r0, r2
 800603a:	f7fe f9ca 	bl	80043d2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800603e:	697b      	ldr	r3, [r7, #20]
}
 8006040:	4618      	mov	r0, r3
 8006042:	3718      	adds	r7, #24
 8006044:	46bd      	mov	sp, r7
 8006046:	bd80      	pop	{r7, pc}
 8006048:	20000ee8 	.word	0x20000ee8
 800604c:	20000ee4 	.word	0x20000ee4

08006050 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8006050:	b580      	push	{r7, lr}
 8006052:	b08e      	sub	sp, #56	; 0x38
 8006054:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006056:	e0ca      	b.n	80061ee <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	2b00      	cmp	r3, #0
 800605c:	da18      	bge.n	8006090 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800605e:	1d3b      	adds	r3, r7, #4
 8006060:	3304      	adds	r3, #4
 8006062:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8006064:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006066:	2b00      	cmp	r3, #0
 8006068:	d10a      	bne.n	8006080 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800606a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800606e:	f383 8811 	msr	BASEPRI, r3
 8006072:	f3bf 8f6f 	isb	sy
 8006076:	f3bf 8f4f 	dsb	sy
 800607a:	61fb      	str	r3, [r7, #28]
}
 800607c:	bf00      	nop
 800607e:	e7fe      	b.n	800607e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8006080:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006086:	6850      	ldr	r0, [r2, #4]
 8006088:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800608a:	6892      	ldr	r2, [r2, #8]
 800608c:	4611      	mov	r1, r2
 800608e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	2b00      	cmp	r3, #0
 8006094:	f2c0 80aa 	blt.w	80061ec <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800609c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800609e:	695b      	ldr	r3, [r3, #20]
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d004      	beq.n	80060ae <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80060a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060a6:	3304      	adds	r3, #4
 80060a8:	4618      	mov	r0, r3
 80060aa:	f7fe f9cb 	bl	8004444 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80060ae:	463b      	mov	r3, r7
 80060b0:	4618      	mov	r0, r3
 80060b2:	f7ff ff6b 	bl	8005f8c <prvSampleTimeNow>
 80060b6:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	2b09      	cmp	r3, #9
 80060bc:	f200 8097 	bhi.w	80061ee <prvProcessReceivedCommands+0x19e>
 80060c0:	a201      	add	r2, pc, #4	; (adr r2, 80060c8 <prvProcessReceivedCommands+0x78>)
 80060c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060c6:	bf00      	nop
 80060c8:	080060f1 	.word	0x080060f1
 80060cc:	080060f1 	.word	0x080060f1
 80060d0:	080060f1 	.word	0x080060f1
 80060d4:	08006165 	.word	0x08006165
 80060d8:	08006179 	.word	0x08006179
 80060dc:	080061c3 	.word	0x080061c3
 80060e0:	080060f1 	.word	0x080060f1
 80060e4:	080060f1 	.word	0x080060f1
 80060e8:	08006165 	.word	0x08006165
 80060ec:	08006179 	.word	0x08006179
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80060f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060f2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80060f6:	f043 0301 	orr.w	r3, r3, #1
 80060fa:	b2da      	uxtb	r2, r3
 80060fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060fe:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8006102:	68ba      	ldr	r2, [r7, #8]
 8006104:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006106:	699b      	ldr	r3, [r3, #24]
 8006108:	18d1      	adds	r1, r2, r3
 800610a:	68bb      	ldr	r3, [r7, #8]
 800610c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800610e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006110:	f7ff ff5c 	bl	8005fcc <prvInsertTimerInActiveList>
 8006114:	4603      	mov	r3, r0
 8006116:	2b00      	cmp	r3, #0
 8006118:	d069      	beq.n	80061ee <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800611a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800611c:	6a1b      	ldr	r3, [r3, #32]
 800611e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006120:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006122:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006124:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006128:	f003 0304 	and.w	r3, r3, #4
 800612c:	2b00      	cmp	r3, #0
 800612e:	d05e      	beq.n	80061ee <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006130:	68ba      	ldr	r2, [r7, #8]
 8006132:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006134:	699b      	ldr	r3, [r3, #24]
 8006136:	441a      	add	r2, r3
 8006138:	2300      	movs	r3, #0
 800613a:	9300      	str	r3, [sp, #0]
 800613c:	2300      	movs	r3, #0
 800613e:	2100      	movs	r1, #0
 8006140:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006142:	f7ff fe05 	bl	8005d50 <xTimerGenericCommand>
 8006146:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8006148:	6a3b      	ldr	r3, [r7, #32]
 800614a:	2b00      	cmp	r3, #0
 800614c:	d14f      	bne.n	80061ee <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800614e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006152:	f383 8811 	msr	BASEPRI, r3
 8006156:	f3bf 8f6f 	isb	sy
 800615a:	f3bf 8f4f 	dsb	sy
 800615e:	61bb      	str	r3, [r7, #24]
}
 8006160:	bf00      	nop
 8006162:	e7fe      	b.n	8006162 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006164:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006166:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800616a:	f023 0301 	bic.w	r3, r3, #1
 800616e:	b2da      	uxtb	r2, r3
 8006170:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006172:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8006176:	e03a      	b.n	80061ee <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006178:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800617a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800617e:	f043 0301 	orr.w	r3, r3, #1
 8006182:	b2da      	uxtb	r2, r3
 8006184:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006186:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800618a:	68ba      	ldr	r2, [r7, #8]
 800618c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800618e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006190:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006192:	699b      	ldr	r3, [r3, #24]
 8006194:	2b00      	cmp	r3, #0
 8006196:	d10a      	bne.n	80061ae <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8006198:	f04f 0350 	mov.w	r3, #80	; 0x50
 800619c:	f383 8811 	msr	BASEPRI, r3
 80061a0:	f3bf 8f6f 	isb	sy
 80061a4:	f3bf 8f4f 	dsb	sy
 80061a8:	617b      	str	r3, [r7, #20]
}
 80061aa:	bf00      	nop
 80061ac:	e7fe      	b.n	80061ac <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80061ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061b0:	699a      	ldr	r2, [r3, #24]
 80061b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061b4:	18d1      	adds	r1, r2, r3
 80061b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80061ba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80061bc:	f7ff ff06 	bl	8005fcc <prvInsertTimerInActiveList>
					break;
 80061c0:	e015      	b.n	80061ee <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80061c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061c4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80061c8:	f003 0302 	and.w	r3, r3, #2
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d103      	bne.n	80061d8 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 80061d0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80061d2:	f000 fbdd 	bl	8006990 <vPortFree>
 80061d6:	e00a      	b.n	80061ee <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80061d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061da:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80061de:	f023 0301 	bic.w	r3, r3, #1
 80061e2:	b2da      	uxtb	r2, r3
 80061e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061e6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80061ea:	e000      	b.n	80061ee <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80061ec:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80061ee:	4b08      	ldr	r3, [pc, #32]	; (8006210 <prvProcessReceivedCommands+0x1c0>)
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	1d39      	adds	r1, r7, #4
 80061f4:	2200      	movs	r2, #0
 80061f6:	4618      	mov	r0, r3
 80061f8:	f7fe fbec 	bl	80049d4 <xQueueReceive>
 80061fc:	4603      	mov	r3, r0
 80061fe:	2b00      	cmp	r3, #0
 8006200:	f47f af2a 	bne.w	8006058 <prvProcessReceivedCommands+0x8>
	}
}
 8006204:	bf00      	nop
 8006206:	bf00      	nop
 8006208:	3730      	adds	r7, #48	; 0x30
 800620a:	46bd      	mov	sp, r7
 800620c:	bd80      	pop	{r7, pc}
 800620e:	bf00      	nop
 8006210:	20000eec 	.word	0x20000eec

08006214 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8006214:	b580      	push	{r7, lr}
 8006216:	b088      	sub	sp, #32
 8006218:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800621a:	e048      	b.n	80062ae <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800621c:	4b2d      	ldr	r3, [pc, #180]	; (80062d4 <prvSwitchTimerLists+0xc0>)
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	68db      	ldr	r3, [r3, #12]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006226:	4b2b      	ldr	r3, [pc, #172]	; (80062d4 <prvSwitchTimerLists+0xc0>)
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	68db      	ldr	r3, [r3, #12]
 800622c:	68db      	ldr	r3, [r3, #12]
 800622e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	3304      	adds	r3, #4
 8006234:	4618      	mov	r0, r3
 8006236:	f7fe f905 	bl	8004444 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	6a1b      	ldr	r3, [r3, #32]
 800623e:	68f8      	ldr	r0, [r7, #12]
 8006240:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006248:	f003 0304 	and.w	r3, r3, #4
 800624c:	2b00      	cmp	r3, #0
 800624e:	d02e      	beq.n	80062ae <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	699b      	ldr	r3, [r3, #24]
 8006254:	693a      	ldr	r2, [r7, #16]
 8006256:	4413      	add	r3, r2
 8006258:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800625a:	68ba      	ldr	r2, [r7, #8]
 800625c:	693b      	ldr	r3, [r7, #16]
 800625e:	429a      	cmp	r2, r3
 8006260:	d90e      	bls.n	8006280 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	68ba      	ldr	r2, [r7, #8]
 8006266:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	68fa      	ldr	r2, [r7, #12]
 800626c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800626e:	4b19      	ldr	r3, [pc, #100]	; (80062d4 <prvSwitchTimerLists+0xc0>)
 8006270:	681a      	ldr	r2, [r3, #0]
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	3304      	adds	r3, #4
 8006276:	4619      	mov	r1, r3
 8006278:	4610      	mov	r0, r2
 800627a:	f7fe f8aa 	bl	80043d2 <vListInsert>
 800627e:	e016      	b.n	80062ae <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006280:	2300      	movs	r3, #0
 8006282:	9300      	str	r3, [sp, #0]
 8006284:	2300      	movs	r3, #0
 8006286:	693a      	ldr	r2, [r7, #16]
 8006288:	2100      	movs	r1, #0
 800628a:	68f8      	ldr	r0, [r7, #12]
 800628c:	f7ff fd60 	bl	8005d50 <xTimerGenericCommand>
 8006290:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	2b00      	cmp	r3, #0
 8006296:	d10a      	bne.n	80062ae <prvSwitchTimerLists+0x9a>
	__asm volatile
 8006298:	f04f 0350 	mov.w	r3, #80	; 0x50
 800629c:	f383 8811 	msr	BASEPRI, r3
 80062a0:	f3bf 8f6f 	isb	sy
 80062a4:	f3bf 8f4f 	dsb	sy
 80062a8:	603b      	str	r3, [r7, #0]
}
 80062aa:	bf00      	nop
 80062ac:	e7fe      	b.n	80062ac <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80062ae:	4b09      	ldr	r3, [pc, #36]	; (80062d4 <prvSwitchTimerLists+0xc0>)
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d1b1      	bne.n	800621c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80062b8:	4b06      	ldr	r3, [pc, #24]	; (80062d4 <prvSwitchTimerLists+0xc0>)
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80062be:	4b06      	ldr	r3, [pc, #24]	; (80062d8 <prvSwitchTimerLists+0xc4>)
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	4a04      	ldr	r2, [pc, #16]	; (80062d4 <prvSwitchTimerLists+0xc0>)
 80062c4:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80062c6:	4a04      	ldr	r2, [pc, #16]	; (80062d8 <prvSwitchTimerLists+0xc4>)
 80062c8:	697b      	ldr	r3, [r7, #20]
 80062ca:	6013      	str	r3, [r2, #0]
}
 80062cc:	bf00      	nop
 80062ce:	3718      	adds	r7, #24
 80062d0:	46bd      	mov	sp, r7
 80062d2:	bd80      	pop	{r7, pc}
 80062d4:	20000ee4 	.word	0x20000ee4
 80062d8:	20000ee8 	.word	0x20000ee8

080062dc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80062dc:	b580      	push	{r7, lr}
 80062de:	b082      	sub	sp, #8
 80062e0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80062e2:	f000 f967 	bl	80065b4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80062e6:	4b15      	ldr	r3, [pc, #84]	; (800633c <prvCheckForValidListAndQueue+0x60>)
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d120      	bne.n	8006330 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80062ee:	4814      	ldr	r0, [pc, #80]	; (8006340 <prvCheckForValidListAndQueue+0x64>)
 80062f0:	f7fe f81e 	bl	8004330 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80062f4:	4813      	ldr	r0, [pc, #76]	; (8006344 <prvCheckForValidListAndQueue+0x68>)
 80062f6:	f7fe f81b 	bl	8004330 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80062fa:	4b13      	ldr	r3, [pc, #76]	; (8006348 <prvCheckForValidListAndQueue+0x6c>)
 80062fc:	4a10      	ldr	r2, [pc, #64]	; (8006340 <prvCheckForValidListAndQueue+0x64>)
 80062fe:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8006300:	4b12      	ldr	r3, [pc, #72]	; (800634c <prvCheckForValidListAndQueue+0x70>)
 8006302:	4a10      	ldr	r2, [pc, #64]	; (8006344 <prvCheckForValidListAndQueue+0x68>)
 8006304:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8006306:	2300      	movs	r3, #0
 8006308:	9300      	str	r3, [sp, #0]
 800630a:	4b11      	ldr	r3, [pc, #68]	; (8006350 <prvCheckForValidListAndQueue+0x74>)
 800630c:	4a11      	ldr	r2, [pc, #68]	; (8006354 <prvCheckForValidListAndQueue+0x78>)
 800630e:	2110      	movs	r1, #16
 8006310:	200a      	movs	r0, #10
 8006312:	f7fe f929 	bl	8004568 <xQueueGenericCreateStatic>
 8006316:	4603      	mov	r3, r0
 8006318:	4a08      	ldr	r2, [pc, #32]	; (800633c <prvCheckForValidListAndQueue+0x60>)
 800631a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800631c:	4b07      	ldr	r3, [pc, #28]	; (800633c <prvCheckForValidListAndQueue+0x60>)
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	2b00      	cmp	r3, #0
 8006322:	d005      	beq.n	8006330 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006324:	4b05      	ldr	r3, [pc, #20]	; (800633c <prvCheckForValidListAndQueue+0x60>)
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	490b      	ldr	r1, [pc, #44]	; (8006358 <prvCheckForValidListAndQueue+0x7c>)
 800632a:	4618      	mov	r0, r3
 800632c:	f7fe fd42 	bl	8004db4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006330:	f000 f970 	bl	8006614 <vPortExitCritical>
}
 8006334:	bf00      	nop
 8006336:	46bd      	mov	sp, r7
 8006338:	bd80      	pop	{r7, pc}
 800633a:	bf00      	nop
 800633c:	20000eec 	.word	0x20000eec
 8006340:	20000ebc 	.word	0x20000ebc
 8006344:	20000ed0 	.word	0x20000ed0
 8006348:	20000ee4 	.word	0x20000ee4
 800634c:	20000ee8 	.word	0x20000ee8
 8006350:	20000f98 	.word	0x20000f98
 8006354:	20000ef8 	.word	0x20000ef8
 8006358:	08006dfc 	.word	0x08006dfc

0800635c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800635c:	b480      	push	{r7}
 800635e:	b085      	sub	sp, #20
 8006360:	af00      	add	r7, sp, #0
 8006362:	60f8      	str	r0, [r7, #12]
 8006364:	60b9      	str	r1, [r7, #8]
 8006366:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	3b04      	subs	r3, #4
 800636c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006374:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	3b04      	subs	r3, #4
 800637a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800637c:	68bb      	ldr	r3, [r7, #8]
 800637e:	f023 0201 	bic.w	r2, r3, #1
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	3b04      	subs	r3, #4
 800638a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800638c:	4a0c      	ldr	r2, [pc, #48]	; (80063c0 <pxPortInitialiseStack+0x64>)
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	3b14      	subs	r3, #20
 8006396:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006398:	687a      	ldr	r2, [r7, #4]
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	3b04      	subs	r3, #4
 80063a2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	f06f 0202 	mvn.w	r2, #2
 80063aa:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	3b20      	subs	r3, #32
 80063b0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80063b2:	68fb      	ldr	r3, [r7, #12]
}
 80063b4:	4618      	mov	r0, r3
 80063b6:	3714      	adds	r7, #20
 80063b8:	46bd      	mov	sp, r7
 80063ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063be:	4770      	bx	lr
 80063c0:	080063c5 	.word	0x080063c5

080063c4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80063c4:	b480      	push	{r7}
 80063c6:	b085      	sub	sp, #20
 80063c8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80063ca:	2300      	movs	r3, #0
 80063cc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80063ce:	4b12      	ldr	r3, [pc, #72]	; (8006418 <prvTaskExitError+0x54>)
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063d6:	d00a      	beq.n	80063ee <prvTaskExitError+0x2a>
	__asm volatile
 80063d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063dc:	f383 8811 	msr	BASEPRI, r3
 80063e0:	f3bf 8f6f 	isb	sy
 80063e4:	f3bf 8f4f 	dsb	sy
 80063e8:	60fb      	str	r3, [r7, #12]
}
 80063ea:	bf00      	nop
 80063ec:	e7fe      	b.n	80063ec <prvTaskExitError+0x28>
	__asm volatile
 80063ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063f2:	f383 8811 	msr	BASEPRI, r3
 80063f6:	f3bf 8f6f 	isb	sy
 80063fa:	f3bf 8f4f 	dsb	sy
 80063fe:	60bb      	str	r3, [r7, #8]
}
 8006400:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006402:	bf00      	nop
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	2b00      	cmp	r3, #0
 8006408:	d0fc      	beq.n	8006404 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800640a:	bf00      	nop
 800640c:	bf00      	nop
 800640e:	3714      	adds	r7, #20
 8006410:	46bd      	mov	sp, r7
 8006412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006416:	4770      	bx	lr
 8006418:	2000000c 	.word	0x2000000c
 800641c:	00000000 	.word	0x00000000

08006420 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006420:	4b07      	ldr	r3, [pc, #28]	; (8006440 <pxCurrentTCBConst2>)
 8006422:	6819      	ldr	r1, [r3, #0]
 8006424:	6808      	ldr	r0, [r1, #0]
 8006426:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800642a:	f380 8809 	msr	PSP, r0
 800642e:	f3bf 8f6f 	isb	sy
 8006432:	f04f 0000 	mov.w	r0, #0
 8006436:	f380 8811 	msr	BASEPRI, r0
 800643a:	4770      	bx	lr
 800643c:	f3af 8000 	nop.w

08006440 <pxCurrentTCBConst2>:
 8006440:	200009bc 	.word	0x200009bc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006444:	bf00      	nop
 8006446:	bf00      	nop

08006448 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006448:	4808      	ldr	r0, [pc, #32]	; (800646c <prvPortStartFirstTask+0x24>)
 800644a:	6800      	ldr	r0, [r0, #0]
 800644c:	6800      	ldr	r0, [r0, #0]
 800644e:	f380 8808 	msr	MSP, r0
 8006452:	f04f 0000 	mov.w	r0, #0
 8006456:	f380 8814 	msr	CONTROL, r0
 800645a:	b662      	cpsie	i
 800645c:	b661      	cpsie	f
 800645e:	f3bf 8f4f 	dsb	sy
 8006462:	f3bf 8f6f 	isb	sy
 8006466:	df00      	svc	0
 8006468:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800646a:	bf00      	nop
 800646c:	e000ed08 	.word	0xe000ed08

08006470 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006470:	b580      	push	{r7, lr}
 8006472:	b086      	sub	sp, #24
 8006474:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006476:	4b46      	ldr	r3, [pc, #280]	; (8006590 <xPortStartScheduler+0x120>)
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	4a46      	ldr	r2, [pc, #280]	; (8006594 <xPortStartScheduler+0x124>)
 800647c:	4293      	cmp	r3, r2
 800647e:	d10a      	bne.n	8006496 <xPortStartScheduler+0x26>
	__asm volatile
 8006480:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006484:	f383 8811 	msr	BASEPRI, r3
 8006488:	f3bf 8f6f 	isb	sy
 800648c:	f3bf 8f4f 	dsb	sy
 8006490:	613b      	str	r3, [r7, #16]
}
 8006492:	bf00      	nop
 8006494:	e7fe      	b.n	8006494 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006496:	4b3e      	ldr	r3, [pc, #248]	; (8006590 <xPortStartScheduler+0x120>)
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	4a3f      	ldr	r2, [pc, #252]	; (8006598 <xPortStartScheduler+0x128>)
 800649c:	4293      	cmp	r3, r2
 800649e:	d10a      	bne.n	80064b6 <xPortStartScheduler+0x46>
	__asm volatile
 80064a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064a4:	f383 8811 	msr	BASEPRI, r3
 80064a8:	f3bf 8f6f 	isb	sy
 80064ac:	f3bf 8f4f 	dsb	sy
 80064b0:	60fb      	str	r3, [r7, #12]
}
 80064b2:	bf00      	nop
 80064b4:	e7fe      	b.n	80064b4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80064b6:	4b39      	ldr	r3, [pc, #228]	; (800659c <xPortStartScheduler+0x12c>)
 80064b8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80064ba:	697b      	ldr	r3, [r7, #20]
 80064bc:	781b      	ldrb	r3, [r3, #0]
 80064be:	b2db      	uxtb	r3, r3
 80064c0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80064c2:	697b      	ldr	r3, [r7, #20]
 80064c4:	22ff      	movs	r2, #255	; 0xff
 80064c6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80064c8:	697b      	ldr	r3, [r7, #20]
 80064ca:	781b      	ldrb	r3, [r3, #0]
 80064cc:	b2db      	uxtb	r3, r3
 80064ce:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80064d0:	78fb      	ldrb	r3, [r7, #3]
 80064d2:	b2db      	uxtb	r3, r3
 80064d4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80064d8:	b2da      	uxtb	r2, r3
 80064da:	4b31      	ldr	r3, [pc, #196]	; (80065a0 <xPortStartScheduler+0x130>)
 80064dc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80064de:	4b31      	ldr	r3, [pc, #196]	; (80065a4 <xPortStartScheduler+0x134>)
 80064e0:	2207      	movs	r2, #7
 80064e2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80064e4:	e009      	b.n	80064fa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80064e6:	4b2f      	ldr	r3, [pc, #188]	; (80065a4 <xPortStartScheduler+0x134>)
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	3b01      	subs	r3, #1
 80064ec:	4a2d      	ldr	r2, [pc, #180]	; (80065a4 <xPortStartScheduler+0x134>)
 80064ee:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80064f0:	78fb      	ldrb	r3, [r7, #3]
 80064f2:	b2db      	uxtb	r3, r3
 80064f4:	005b      	lsls	r3, r3, #1
 80064f6:	b2db      	uxtb	r3, r3
 80064f8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80064fa:	78fb      	ldrb	r3, [r7, #3]
 80064fc:	b2db      	uxtb	r3, r3
 80064fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006502:	2b80      	cmp	r3, #128	; 0x80
 8006504:	d0ef      	beq.n	80064e6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006506:	4b27      	ldr	r3, [pc, #156]	; (80065a4 <xPortStartScheduler+0x134>)
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	f1c3 0307 	rsb	r3, r3, #7
 800650e:	2b04      	cmp	r3, #4
 8006510:	d00a      	beq.n	8006528 <xPortStartScheduler+0xb8>
	__asm volatile
 8006512:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006516:	f383 8811 	msr	BASEPRI, r3
 800651a:	f3bf 8f6f 	isb	sy
 800651e:	f3bf 8f4f 	dsb	sy
 8006522:	60bb      	str	r3, [r7, #8]
}
 8006524:	bf00      	nop
 8006526:	e7fe      	b.n	8006526 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006528:	4b1e      	ldr	r3, [pc, #120]	; (80065a4 <xPortStartScheduler+0x134>)
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	021b      	lsls	r3, r3, #8
 800652e:	4a1d      	ldr	r2, [pc, #116]	; (80065a4 <xPortStartScheduler+0x134>)
 8006530:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006532:	4b1c      	ldr	r3, [pc, #112]	; (80065a4 <xPortStartScheduler+0x134>)
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800653a:	4a1a      	ldr	r2, [pc, #104]	; (80065a4 <xPortStartScheduler+0x134>)
 800653c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	b2da      	uxtb	r2, r3
 8006542:	697b      	ldr	r3, [r7, #20]
 8006544:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006546:	4b18      	ldr	r3, [pc, #96]	; (80065a8 <xPortStartScheduler+0x138>)
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	4a17      	ldr	r2, [pc, #92]	; (80065a8 <xPortStartScheduler+0x138>)
 800654c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006550:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006552:	4b15      	ldr	r3, [pc, #84]	; (80065a8 <xPortStartScheduler+0x138>)
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	4a14      	ldr	r2, [pc, #80]	; (80065a8 <xPortStartScheduler+0x138>)
 8006558:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800655c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800655e:	f000 f8dd 	bl	800671c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006562:	4b12      	ldr	r3, [pc, #72]	; (80065ac <xPortStartScheduler+0x13c>)
 8006564:	2200      	movs	r2, #0
 8006566:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006568:	f000 f8fc 	bl	8006764 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800656c:	4b10      	ldr	r3, [pc, #64]	; (80065b0 <xPortStartScheduler+0x140>)
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	4a0f      	ldr	r2, [pc, #60]	; (80065b0 <xPortStartScheduler+0x140>)
 8006572:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8006576:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006578:	f7ff ff66 	bl	8006448 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800657c:	f7ff f84a 	bl	8005614 <vTaskSwitchContext>
	prvTaskExitError();
 8006580:	f7ff ff20 	bl	80063c4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006584:	2300      	movs	r3, #0
}
 8006586:	4618      	mov	r0, r3
 8006588:	3718      	adds	r7, #24
 800658a:	46bd      	mov	sp, r7
 800658c:	bd80      	pop	{r7, pc}
 800658e:	bf00      	nop
 8006590:	e000ed00 	.word	0xe000ed00
 8006594:	410fc271 	.word	0x410fc271
 8006598:	410fc270 	.word	0x410fc270
 800659c:	e000e400 	.word	0xe000e400
 80065a0:	20000fe8 	.word	0x20000fe8
 80065a4:	20000fec 	.word	0x20000fec
 80065a8:	e000ed20 	.word	0xe000ed20
 80065ac:	2000000c 	.word	0x2000000c
 80065b0:	e000ef34 	.word	0xe000ef34

080065b4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80065b4:	b480      	push	{r7}
 80065b6:	b083      	sub	sp, #12
 80065b8:	af00      	add	r7, sp, #0
	__asm volatile
 80065ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065be:	f383 8811 	msr	BASEPRI, r3
 80065c2:	f3bf 8f6f 	isb	sy
 80065c6:	f3bf 8f4f 	dsb	sy
 80065ca:	607b      	str	r3, [r7, #4]
}
 80065cc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80065ce:	4b0f      	ldr	r3, [pc, #60]	; (800660c <vPortEnterCritical+0x58>)
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	3301      	adds	r3, #1
 80065d4:	4a0d      	ldr	r2, [pc, #52]	; (800660c <vPortEnterCritical+0x58>)
 80065d6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80065d8:	4b0c      	ldr	r3, [pc, #48]	; (800660c <vPortEnterCritical+0x58>)
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	2b01      	cmp	r3, #1
 80065de:	d10f      	bne.n	8006600 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80065e0:	4b0b      	ldr	r3, [pc, #44]	; (8006610 <vPortEnterCritical+0x5c>)
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	b2db      	uxtb	r3, r3
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d00a      	beq.n	8006600 <vPortEnterCritical+0x4c>
	__asm volatile
 80065ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065ee:	f383 8811 	msr	BASEPRI, r3
 80065f2:	f3bf 8f6f 	isb	sy
 80065f6:	f3bf 8f4f 	dsb	sy
 80065fa:	603b      	str	r3, [r7, #0]
}
 80065fc:	bf00      	nop
 80065fe:	e7fe      	b.n	80065fe <vPortEnterCritical+0x4a>
	}
}
 8006600:	bf00      	nop
 8006602:	370c      	adds	r7, #12
 8006604:	46bd      	mov	sp, r7
 8006606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800660a:	4770      	bx	lr
 800660c:	2000000c 	.word	0x2000000c
 8006610:	e000ed04 	.word	0xe000ed04

08006614 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006614:	b480      	push	{r7}
 8006616:	b083      	sub	sp, #12
 8006618:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800661a:	4b12      	ldr	r3, [pc, #72]	; (8006664 <vPortExitCritical+0x50>)
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	2b00      	cmp	r3, #0
 8006620:	d10a      	bne.n	8006638 <vPortExitCritical+0x24>
	__asm volatile
 8006622:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006626:	f383 8811 	msr	BASEPRI, r3
 800662a:	f3bf 8f6f 	isb	sy
 800662e:	f3bf 8f4f 	dsb	sy
 8006632:	607b      	str	r3, [r7, #4]
}
 8006634:	bf00      	nop
 8006636:	e7fe      	b.n	8006636 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006638:	4b0a      	ldr	r3, [pc, #40]	; (8006664 <vPortExitCritical+0x50>)
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	3b01      	subs	r3, #1
 800663e:	4a09      	ldr	r2, [pc, #36]	; (8006664 <vPortExitCritical+0x50>)
 8006640:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006642:	4b08      	ldr	r3, [pc, #32]	; (8006664 <vPortExitCritical+0x50>)
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	2b00      	cmp	r3, #0
 8006648:	d105      	bne.n	8006656 <vPortExitCritical+0x42>
 800664a:	2300      	movs	r3, #0
 800664c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800664e:	683b      	ldr	r3, [r7, #0]
 8006650:	f383 8811 	msr	BASEPRI, r3
}
 8006654:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006656:	bf00      	nop
 8006658:	370c      	adds	r7, #12
 800665a:	46bd      	mov	sp, r7
 800665c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006660:	4770      	bx	lr
 8006662:	bf00      	nop
 8006664:	2000000c 	.word	0x2000000c
	...

08006670 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006670:	f3ef 8009 	mrs	r0, PSP
 8006674:	f3bf 8f6f 	isb	sy
 8006678:	4b15      	ldr	r3, [pc, #84]	; (80066d0 <pxCurrentTCBConst>)
 800667a:	681a      	ldr	r2, [r3, #0]
 800667c:	f01e 0f10 	tst.w	lr, #16
 8006680:	bf08      	it	eq
 8006682:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006686:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800668a:	6010      	str	r0, [r2, #0]
 800668c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006690:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006694:	f380 8811 	msr	BASEPRI, r0
 8006698:	f3bf 8f4f 	dsb	sy
 800669c:	f3bf 8f6f 	isb	sy
 80066a0:	f7fe ffb8 	bl	8005614 <vTaskSwitchContext>
 80066a4:	f04f 0000 	mov.w	r0, #0
 80066a8:	f380 8811 	msr	BASEPRI, r0
 80066ac:	bc09      	pop	{r0, r3}
 80066ae:	6819      	ldr	r1, [r3, #0]
 80066b0:	6808      	ldr	r0, [r1, #0]
 80066b2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80066b6:	f01e 0f10 	tst.w	lr, #16
 80066ba:	bf08      	it	eq
 80066bc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80066c0:	f380 8809 	msr	PSP, r0
 80066c4:	f3bf 8f6f 	isb	sy
 80066c8:	4770      	bx	lr
 80066ca:	bf00      	nop
 80066cc:	f3af 8000 	nop.w

080066d0 <pxCurrentTCBConst>:
 80066d0:	200009bc 	.word	0x200009bc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80066d4:	bf00      	nop
 80066d6:	bf00      	nop

080066d8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80066d8:	b580      	push	{r7, lr}
 80066da:	b082      	sub	sp, #8
 80066dc:	af00      	add	r7, sp, #0
	__asm volatile
 80066de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066e2:	f383 8811 	msr	BASEPRI, r3
 80066e6:	f3bf 8f6f 	isb	sy
 80066ea:	f3bf 8f4f 	dsb	sy
 80066ee:	607b      	str	r3, [r7, #4]
}
 80066f0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80066f2:	f7fe fed5 	bl	80054a0 <xTaskIncrementTick>
 80066f6:	4603      	mov	r3, r0
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d003      	beq.n	8006704 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80066fc:	4b06      	ldr	r3, [pc, #24]	; (8006718 <xPortSysTickHandler+0x40>)
 80066fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006702:	601a      	str	r2, [r3, #0]
 8006704:	2300      	movs	r3, #0
 8006706:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006708:	683b      	ldr	r3, [r7, #0]
 800670a:	f383 8811 	msr	BASEPRI, r3
}
 800670e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006710:	bf00      	nop
 8006712:	3708      	adds	r7, #8
 8006714:	46bd      	mov	sp, r7
 8006716:	bd80      	pop	{r7, pc}
 8006718:	e000ed04 	.word	0xe000ed04

0800671c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800671c:	b480      	push	{r7}
 800671e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006720:	4b0b      	ldr	r3, [pc, #44]	; (8006750 <vPortSetupTimerInterrupt+0x34>)
 8006722:	2200      	movs	r2, #0
 8006724:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006726:	4b0b      	ldr	r3, [pc, #44]	; (8006754 <vPortSetupTimerInterrupt+0x38>)
 8006728:	2200      	movs	r2, #0
 800672a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800672c:	4b0a      	ldr	r3, [pc, #40]	; (8006758 <vPortSetupTimerInterrupt+0x3c>)
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	4a0a      	ldr	r2, [pc, #40]	; (800675c <vPortSetupTimerInterrupt+0x40>)
 8006732:	fba2 2303 	umull	r2, r3, r2, r3
 8006736:	099b      	lsrs	r3, r3, #6
 8006738:	4a09      	ldr	r2, [pc, #36]	; (8006760 <vPortSetupTimerInterrupt+0x44>)
 800673a:	3b01      	subs	r3, #1
 800673c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800673e:	4b04      	ldr	r3, [pc, #16]	; (8006750 <vPortSetupTimerInterrupt+0x34>)
 8006740:	2207      	movs	r2, #7
 8006742:	601a      	str	r2, [r3, #0]
}
 8006744:	bf00      	nop
 8006746:	46bd      	mov	sp, r7
 8006748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800674c:	4770      	bx	lr
 800674e:	bf00      	nop
 8006750:	e000e010 	.word	0xe000e010
 8006754:	e000e018 	.word	0xe000e018
 8006758:	20000000 	.word	0x20000000
 800675c:	10624dd3 	.word	0x10624dd3
 8006760:	e000e014 	.word	0xe000e014

08006764 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006764:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006774 <vPortEnableVFP+0x10>
 8006768:	6801      	ldr	r1, [r0, #0]
 800676a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800676e:	6001      	str	r1, [r0, #0]
 8006770:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006772:	bf00      	nop
 8006774:	e000ed88 	.word	0xe000ed88

08006778 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006778:	b480      	push	{r7}
 800677a:	b085      	sub	sp, #20
 800677c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800677e:	f3ef 8305 	mrs	r3, IPSR
 8006782:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	2b0f      	cmp	r3, #15
 8006788:	d914      	bls.n	80067b4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800678a:	4a17      	ldr	r2, [pc, #92]	; (80067e8 <vPortValidateInterruptPriority+0x70>)
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	4413      	add	r3, r2
 8006790:	781b      	ldrb	r3, [r3, #0]
 8006792:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006794:	4b15      	ldr	r3, [pc, #84]	; (80067ec <vPortValidateInterruptPriority+0x74>)
 8006796:	781b      	ldrb	r3, [r3, #0]
 8006798:	7afa      	ldrb	r2, [r7, #11]
 800679a:	429a      	cmp	r2, r3
 800679c:	d20a      	bcs.n	80067b4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800679e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067a2:	f383 8811 	msr	BASEPRI, r3
 80067a6:	f3bf 8f6f 	isb	sy
 80067aa:	f3bf 8f4f 	dsb	sy
 80067ae:	607b      	str	r3, [r7, #4]
}
 80067b0:	bf00      	nop
 80067b2:	e7fe      	b.n	80067b2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80067b4:	4b0e      	ldr	r3, [pc, #56]	; (80067f0 <vPortValidateInterruptPriority+0x78>)
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80067bc:	4b0d      	ldr	r3, [pc, #52]	; (80067f4 <vPortValidateInterruptPriority+0x7c>)
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	429a      	cmp	r2, r3
 80067c2:	d90a      	bls.n	80067da <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80067c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067c8:	f383 8811 	msr	BASEPRI, r3
 80067cc:	f3bf 8f6f 	isb	sy
 80067d0:	f3bf 8f4f 	dsb	sy
 80067d4:	603b      	str	r3, [r7, #0]
}
 80067d6:	bf00      	nop
 80067d8:	e7fe      	b.n	80067d8 <vPortValidateInterruptPriority+0x60>
	}
 80067da:	bf00      	nop
 80067dc:	3714      	adds	r7, #20
 80067de:	46bd      	mov	sp, r7
 80067e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e4:	4770      	bx	lr
 80067e6:	bf00      	nop
 80067e8:	e000e3f0 	.word	0xe000e3f0
 80067ec:	20000fe8 	.word	0x20000fe8
 80067f0:	e000ed0c 	.word	0xe000ed0c
 80067f4:	20000fec 	.word	0x20000fec

080067f8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80067f8:	b580      	push	{r7, lr}
 80067fa:	b08a      	sub	sp, #40	; 0x28
 80067fc:	af00      	add	r7, sp, #0
 80067fe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006800:	2300      	movs	r3, #0
 8006802:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006804:	f7fe fd90 	bl	8005328 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006808:	4b5b      	ldr	r3, [pc, #364]	; (8006978 <pvPortMalloc+0x180>)
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	2b00      	cmp	r3, #0
 800680e:	d101      	bne.n	8006814 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006810:	f000 f920 	bl	8006a54 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006814:	4b59      	ldr	r3, [pc, #356]	; (800697c <pvPortMalloc+0x184>)
 8006816:	681a      	ldr	r2, [r3, #0]
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	4013      	ands	r3, r2
 800681c:	2b00      	cmp	r3, #0
 800681e:	f040 8093 	bne.w	8006948 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	2b00      	cmp	r3, #0
 8006826:	d01d      	beq.n	8006864 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8006828:	2208      	movs	r2, #8
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	4413      	add	r3, r2
 800682e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	f003 0307 	and.w	r3, r3, #7
 8006836:	2b00      	cmp	r3, #0
 8006838:	d014      	beq.n	8006864 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	f023 0307 	bic.w	r3, r3, #7
 8006840:	3308      	adds	r3, #8
 8006842:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	f003 0307 	and.w	r3, r3, #7
 800684a:	2b00      	cmp	r3, #0
 800684c:	d00a      	beq.n	8006864 <pvPortMalloc+0x6c>
	__asm volatile
 800684e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006852:	f383 8811 	msr	BASEPRI, r3
 8006856:	f3bf 8f6f 	isb	sy
 800685a:	f3bf 8f4f 	dsb	sy
 800685e:	617b      	str	r3, [r7, #20]
}
 8006860:	bf00      	nop
 8006862:	e7fe      	b.n	8006862 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	2b00      	cmp	r3, #0
 8006868:	d06e      	beq.n	8006948 <pvPortMalloc+0x150>
 800686a:	4b45      	ldr	r3, [pc, #276]	; (8006980 <pvPortMalloc+0x188>)
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	687a      	ldr	r2, [r7, #4]
 8006870:	429a      	cmp	r2, r3
 8006872:	d869      	bhi.n	8006948 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006874:	4b43      	ldr	r3, [pc, #268]	; (8006984 <pvPortMalloc+0x18c>)
 8006876:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006878:	4b42      	ldr	r3, [pc, #264]	; (8006984 <pvPortMalloc+0x18c>)
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800687e:	e004      	b.n	800688a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8006880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006882:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006884:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800688a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800688c:	685b      	ldr	r3, [r3, #4]
 800688e:	687a      	ldr	r2, [r7, #4]
 8006890:	429a      	cmp	r2, r3
 8006892:	d903      	bls.n	800689c <pvPortMalloc+0xa4>
 8006894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	2b00      	cmp	r3, #0
 800689a:	d1f1      	bne.n	8006880 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800689c:	4b36      	ldr	r3, [pc, #216]	; (8006978 <pvPortMalloc+0x180>)
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80068a2:	429a      	cmp	r2, r3
 80068a4:	d050      	beq.n	8006948 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80068a6:	6a3b      	ldr	r3, [r7, #32]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	2208      	movs	r2, #8
 80068ac:	4413      	add	r3, r2
 80068ae:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80068b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068b2:	681a      	ldr	r2, [r3, #0]
 80068b4:	6a3b      	ldr	r3, [r7, #32]
 80068b6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80068b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068ba:	685a      	ldr	r2, [r3, #4]
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	1ad2      	subs	r2, r2, r3
 80068c0:	2308      	movs	r3, #8
 80068c2:	005b      	lsls	r3, r3, #1
 80068c4:	429a      	cmp	r2, r3
 80068c6:	d91f      	bls.n	8006908 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80068c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	4413      	add	r3, r2
 80068ce:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80068d0:	69bb      	ldr	r3, [r7, #24]
 80068d2:	f003 0307 	and.w	r3, r3, #7
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d00a      	beq.n	80068f0 <pvPortMalloc+0xf8>
	__asm volatile
 80068da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068de:	f383 8811 	msr	BASEPRI, r3
 80068e2:	f3bf 8f6f 	isb	sy
 80068e6:	f3bf 8f4f 	dsb	sy
 80068ea:	613b      	str	r3, [r7, #16]
}
 80068ec:	bf00      	nop
 80068ee:	e7fe      	b.n	80068ee <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80068f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068f2:	685a      	ldr	r2, [r3, #4]
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	1ad2      	subs	r2, r2, r3
 80068f8:	69bb      	ldr	r3, [r7, #24]
 80068fa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80068fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068fe:	687a      	ldr	r2, [r7, #4]
 8006900:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006902:	69b8      	ldr	r0, [r7, #24]
 8006904:	f000 f908 	bl	8006b18 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006908:	4b1d      	ldr	r3, [pc, #116]	; (8006980 <pvPortMalloc+0x188>)
 800690a:	681a      	ldr	r2, [r3, #0]
 800690c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800690e:	685b      	ldr	r3, [r3, #4]
 8006910:	1ad3      	subs	r3, r2, r3
 8006912:	4a1b      	ldr	r2, [pc, #108]	; (8006980 <pvPortMalloc+0x188>)
 8006914:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006916:	4b1a      	ldr	r3, [pc, #104]	; (8006980 <pvPortMalloc+0x188>)
 8006918:	681a      	ldr	r2, [r3, #0]
 800691a:	4b1b      	ldr	r3, [pc, #108]	; (8006988 <pvPortMalloc+0x190>)
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	429a      	cmp	r2, r3
 8006920:	d203      	bcs.n	800692a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006922:	4b17      	ldr	r3, [pc, #92]	; (8006980 <pvPortMalloc+0x188>)
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	4a18      	ldr	r2, [pc, #96]	; (8006988 <pvPortMalloc+0x190>)
 8006928:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800692a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800692c:	685a      	ldr	r2, [r3, #4]
 800692e:	4b13      	ldr	r3, [pc, #76]	; (800697c <pvPortMalloc+0x184>)
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	431a      	orrs	r2, r3
 8006934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006936:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006938:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800693a:	2200      	movs	r2, #0
 800693c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800693e:	4b13      	ldr	r3, [pc, #76]	; (800698c <pvPortMalloc+0x194>)
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	3301      	adds	r3, #1
 8006944:	4a11      	ldr	r2, [pc, #68]	; (800698c <pvPortMalloc+0x194>)
 8006946:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006948:	f7fe fcfc 	bl	8005344 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800694c:	69fb      	ldr	r3, [r7, #28]
 800694e:	f003 0307 	and.w	r3, r3, #7
 8006952:	2b00      	cmp	r3, #0
 8006954:	d00a      	beq.n	800696c <pvPortMalloc+0x174>
	__asm volatile
 8006956:	f04f 0350 	mov.w	r3, #80	; 0x50
 800695a:	f383 8811 	msr	BASEPRI, r3
 800695e:	f3bf 8f6f 	isb	sy
 8006962:	f3bf 8f4f 	dsb	sy
 8006966:	60fb      	str	r3, [r7, #12]
}
 8006968:	bf00      	nop
 800696a:	e7fe      	b.n	800696a <pvPortMalloc+0x172>
	return pvReturn;
 800696c:	69fb      	ldr	r3, [r7, #28]
}
 800696e:	4618      	mov	r0, r3
 8006970:	3728      	adds	r7, #40	; 0x28
 8006972:	46bd      	mov	sp, r7
 8006974:	bd80      	pop	{r7, pc}
 8006976:	bf00      	nop
 8006978:	20001bb0 	.word	0x20001bb0
 800697c:	20001bc4 	.word	0x20001bc4
 8006980:	20001bb4 	.word	0x20001bb4
 8006984:	20001ba8 	.word	0x20001ba8
 8006988:	20001bb8 	.word	0x20001bb8
 800698c:	20001bbc 	.word	0x20001bbc

08006990 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006990:	b580      	push	{r7, lr}
 8006992:	b086      	sub	sp, #24
 8006994:	af00      	add	r7, sp, #0
 8006996:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d04d      	beq.n	8006a3e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80069a2:	2308      	movs	r3, #8
 80069a4:	425b      	negs	r3, r3
 80069a6:	697a      	ldr	r2, [r7, #20]
 80069a8:	4413      	add	r3, r2
 80069aa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80069ac:	697b      	ldr	r3, [r7, #20]
 80069ae:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80069b0:	693b      	ldr	r3, [r7, #16]
 80069b2:	685a      	ldr	r2, [r3, #4]
 80069b4:	4b24      	ldr	r3, [pc, #144]	; (8006a48 <vPortFree+0xb8>)
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	4013      	ands	r3, r2
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d10a      	bne.n	80069d4 <vPortFree+0x44>
	__asm volatile
 80069be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069c2:	f383 8811 	msr	BASEPRI, r3
 80069c6:	f3bf 8f6f 	isb	sy
 80069ca:	f3bf 8f4f 	dsb	sy
 80069ce:	60fb      	str	r3, [r7, #12]
}
 80069d0:	bf00      	nop
 80069d2:	e7fe      	b.n	80069d2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80069d4:	693b      	ldr	r3, [r7, #16]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d00a      	beq.n	80069f2 <vPortFree+0x62>
	__asm volatile
 80069dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069e0:	f383 8811 	msr	BASEPRI, r3
 80069e4:	f3bf 8f6f 	isb	sy
 80069e8:	f3bf 8f4f 	dsb	sy
 80069ec:	60bb      	str	r3, [r7, #8]
}
 80069ee:	bf00      	nop
 80069f0:	e7fe      	b.n	80069f0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80069f2:	693b      	ldr	r3, [r7, #16]
 80069f4:	685a      	ldr	r2, [r3, #4]
 80069f6:	4b14      	ldr	r3, [pc, #80]	; (8006a48 <vPortFree+0xb8>)
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	4013      	ands	r3, r2
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d01e      	beq.n	8006a3e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006a00:	693b      	ldr	r3, [r7, #16]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d11a      	bne.n	8006a3e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006a08:	693b      	ldr	r3, [r7, #16]
 8006a0a:	685a      	ldr	r2, [r3, #4]
 8006a0c:	4b0e      	ldr	r3, [pc, #56]	; (8006a48 <vPortFree+0xb8>)
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	43db      	mvns	r3, r3
 8006a12:	401a      	ands	r2, r3
 8006a14:	693b      	ldr	r3, [r7, #16]
 8006a16:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006a18:	f7fe fc86 	bl	8005328 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006a1c:	693b      	ldr	r3, [r7, #16]
 8006a1e:	685a      	ldr	r2, [r3, #4]
 8006a20:	4b0a      	ldr	r3, [pc, #40]	; (8006a4c <vPortFree+0xbc>)
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	4413      	add	r3, r2
 8006a26:	4a09      	ldr	r2, [pc, #36]	; (8006a4c <vPortFree+0xbc>)
 8006a28:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006a2a:	6938      	ldr	r0, [r7, #16]
 8006a2c:	f000 f874 	bl	8006b18 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8006a30:	4b07      	ldr	r3, [pc, #28]	; (8006a50 <vPortFree+0xc0>)
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	3301      	adds	r3, #1
 8006a36:	4a06      	ldr	r2, [pc, #24]	; (8006a50 <vPortFree+0xc0>)
 8006a38:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8006a3a:	f7fe fc83 	bl	8005344 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006a3e:	bf00      	nop
 8006a40:	3718      	adds	r7, #24
 8006a42:	46bd      	mov	sp, r7
 8006a44:	bd80      	pop	{r7, pc}
 8006a46:	bf00      	nop
 8006a48:	20001bc4 	.word	0x20001bc4
 8006a4c:	20001bb4 	.word	0x20001bb4
 8006a50:	20001bc0 	.word	0x20001bc0

08006a54 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006a54:	b480      	push	{r7}
 8006a56:	b085      	sub	sp, #20
 8006a58:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006a5a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8006a5e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006a60:	4b27      	ldr	r3, [pc, #156]	; (8006b00 <prvHeapInit+0xac>)
 8006a62:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	f003 0307 	and.w	r3, r3, #7
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d00c      	beq.n	8006a88 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	3307      	adds	r3, #7
 8006a72:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	f023 0307 	bic.w	r3, r3, #7
 8006a7a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006a7c:	68ba      	ldr	r2, [r7, #8]
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	1ad3      	subs	r3, r2, r3
 8006a82:	4a1f      	ldr	r2, [pc, #124]	; (8006b00 <prvHeapInit+0xac>)
 8006a84:	4413      	add	r3, r2
 8006a86:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006a8c:	4a1d      	ldr	r2, [pc, #116]	; (8006b04 <prvHeapInit+0xb0>)
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006a92:	4b1c      	ldr	r3, [pc, #112]	; (8006b04 <prvHeapInit+0xb0>)
 8006a94:	2200      	movs	r2, #0
 8006a96:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	68ba      	ldr	r2, [r7, #8]
 8006a9c:	4413      	add	r3, r2
 8006a9e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006aa0:	2208      	movs	r2, #8
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	1a9b      	subs	r3, r3, r2
 8006aa6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	f023 0307 	bic.w	r3, r3, #7
 8006aae:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	4a15      	ldr	r2, [pc, #84]	; (8006b08 <prvHeapInit+0xb4>)
 8006ab4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006ab6:	4b14      	ldr	r3, [pc, #80]	; (8006b08 <prvHeapInit+0xb4>)
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	2200      	movs	r2, #0
 8006abc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006abe:	4b12      	ldr	r3, [pc, #72]	; (8006b08 <prvHeapInit+0xb4>)
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	2200      	movs	r2, #0
 8006ac4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006aca:	683b      	ldr	r3, [r7, #0]
 8006acc:	68fa      	ldr	r2, [r7, #12]
 8006ace:	1ad2      	subs	r2, r2, r3
 8006ad0:	683b      	ldr	r3, [r7, #0]
 8006ad2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006ad4:	4b0c      	ldr	r3, [pc, #48]	; (8006b08 <prvHeapInit+0xb4>)
 8006ad6:	681a      	ldr	r2, [r3, #0]
 8006ad8:	683b      	ldr	r3, [r7, #0]
 8006ada:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006adc:	683b      	ldr	r3, [r7, #0]
 8006ade:	685b      	ldr	r3, [r3, #4]
 8006ae0:	4a0a      	ldr	r2, [pc, #40]	; (8006b0c <prvHeapInit+0xb8>)
 8006ae2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006ae4:	683b      	ldr	r3, [r7, #0]
 8006ae6:	685b      	ldr	r3, [r3, #4]
 8006ae8:	4a09      	ldr	r2, [pc, #36]	; (8006b10 <prvHeapInit+0xbc>)
 8006aea:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006aec:	4b09      	ldr	r3, [pc, #36]	; (8006b14 <prvHeapInit+0xc0>)
 8006aee:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006af2:	601a      	str	r2, [r3, #0]
}
 8006af4:	bf00      	nop
 8006af6:	3714      	adds	r7, #20
 8006af8:	46bd      	mov	sp, r7
 8006afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006afe:	4770      	bx	lr
 8006b00:	20000ff0 	.word	0x20000ff0
 8006b04:	20001ba8 	.word	0x20001ba8
 8006b08:	20001bb0 	.word	0x20001bb0
 8006b0c:	20001bb8 	.word	0x20001bb8
 8006b10:	20001bb4 	.word	0x20001bb4
 8006b14:	20001bc4 	.word	0x20001bc4

08006b18 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006b18:	b480      	push	{r7}
 8006b1a:	b085      	sub	sp, #20
 8006b1c:	af00      	add	r7, sp, #0
 8006b1e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006b20:	4b28      	ldr	r3, [pc, #160]	; (8006bc4 <prvInsertBlockIntoFreeList+0xac>)
 8006b22:	60fb      	str	r3, [r7, #12]
 8006b24:	e002      	b.n	8006b2c <prvInsertBlockIntoFreeList+0x14>
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	60fb      	str	r3, [r7, #12]
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	687a      	ldr	r2, [r7, #4]
 8006b32:	429a      	cmp	r2, r3
 8006b34:	d8f7      	bhi.n	8006b26 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	685b      	ldr	r3, [r3, #4]
 8006b3e:	68ba      	ldr	r2, [r7, #8]
 8006b40:	4413      	add	r3, r2
 8006b42:	687a      	ldr	r2, [r7, #4]
 8006b44:	429a      	cmp	r2, r3
 8006b46:	d108      	bne.n	8006b5a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	685a      	ldr	r2, [r3, #4]
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	685b      	ldr	r3, [r3, #4]
 8006b50:	441a      	add	r2, r3
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	685b      	ldr	r3, [r3, #4]
 8006b62:	68ba      	ldr	r2, [r7, #8]
 8006b64:	441a      	add	r2, r3
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	429a      	cmp	r2, r3
 8006b6c:	d118      	bne.n	8006ba0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	681a      	ldr	r2, [r3, #0]
 8006b72:	4b15      	ldr	r3, [pc, #84]	; (8006bc8 <prvInsertBlockIntoFreeList+0xb0>)
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	429a      	cmp	r2, r3
 8006b78:	d00d      	beq.n	8006b96 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	685a      	ldr	r2, [r3, #4]
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	685b      	ldr	r3, [r3, #4]
 8006b84:	441a      	add	r2, r3
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	681a      	ldr	r2, [r3, #0]
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	601a      	str	r2, [r3, #0]
 8006b94:	e008      	b.n	8006ba8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006b96:	4b0c      	ldr	r3, [pc, #48]	; (8006bc8 <prvInsertBlockIntoFreeList+0xb0>)
 8006b98:	681a      	ldr	r2, [r3, #0]
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	601a      	str	r2, [r3, #0]
 8006b9e:	e003      	b.n	8006ba8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	681a      	ldr	r2, [r3, #0]
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006ba8:	68fa      	ldr	r2, [r7, #12]
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	429a      	cmp	r2, r3
 8006bae:	d002      	beq.n	8006bb6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	687a      	ldr	r2, [r7, #4]
 8006bb4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006bb6:	bf00      	nop
 8006bb8:	3714      	adds	r7, #20
 8006bba:	46bd      	mov	sp, r7
 8006bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bc0:	4770      	bx	lr
 8006bc2:	bf00      	nop
 8006bc4:	20001ba8 	.word	0x20001ba8
 8006bc8:	20001bb0 	.word	0x20001bb0

08006bcc <__libc_init_array>:
 8006bcc:	b570      	push	{r4, r5, r6, lr}
 8006bce:	4d0d      	ldr	r5, [pc, #52]	; (8006c04 <__libc_init_array+0x38>)
 8006bd0:	4c0d      	ldr	r4, [pc, #52]	; (8006c08 <__libc_init_array+0x3c>)
 8006bd2:	1b64      	subs	r4, r4, r5
 8006bd4:	10a4      	asrs	r4, r4, #2
 8006bd6:	2600      	movs	r6, #0
 8006bd8:	42a6      	cmp	r6, r4
 8006bda:	d109      	bne.n	8006bf0 <__libc_init_array+0x24>
 8006bdc:	4d0b      	ldr	r5, [pc, #44]	; (8006c0c <__libc_init_array+0x40>)
 8006bde:	4c0c      	ldr	r4, [pc, #48]	; (8006c10 <__libc_init_array+0x44>)
 8006be0:	f000 f8f2 	bl	8006dc8 <_init>
 8006be4:	1b64      	subs	r4, r4, r5
 8006be6:	10a4      	asrs	r4, r4, #2
 8006be8:	2600      	movs	r6, #0
 8006bea:	42a6      	cmp	r6, r4
 8006bec:	d105      	bne.n	8006bfa <__libc_init_array+0x2e>
 8006bee:	bd70      	pop	{r4, r5, r6, pc}
 8006bf0:	f855 3b04 	ldr.w	r3, [r5], #4
 8006bf4:	4798      	blx	r3
 8006bf6:	3601      	adds	r6, #1
 8006bf8:	e7ee      	b.n	8006bd8 <__libc_init_array+0xc>
 8006bfa:	f855 3b04 	ldr.w	r3, [r5], #4
 8006bfe:	4798      	blx	r3
 8006c00:	3601      	adds	r6, #1
 8006c02:	e7f2      	b.n	8006bea <__libc_init_array+0x1e>
 8006c04:	08006ed8 	.word	0x08006ed8
 8006c08:	08006ed8 	.word	0x08006ed8
 8006c0c:	08006ed8 	.word	0x08006ed8
 8006c10:	08006edc 	.word	0x08006edc

08006c14 <__retarget_lock_acquire_recursive>:
 8006c14:	4770      	bx	lr

08006c16 <__retarget_lock_release_recursive>:
 8006c16:	4770      	bx	lr

08006c18 <memcpy>:
 8006c18:	440a      	add	r2, r1
 8006c1a:	4291      	cmp	r1, r2
 8006c1c:	f100 33ff 	add.w	r3, r0, #4294967295
 8006c20:	d100      	bne.n	8006c24 <memcpy+0xc>
 8006c22:	4770      	bx	lr
 8006c24:	b510      	push	{r4, lr}
 8006c26:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006c2a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006c2e:	4291      	cmp	r1, r2
 8006c30:	d1f9      	bne.n	8006c26 <memcpy+0xe>
 8006c32:	bd10      	pop	{r4, pc}

08006c34 <memset>:
 8006c34:	4402      	add	r2, r0
 8006c36:	4603      	mov	r3, r0
 8006c38:	4293      	cmp	r3, r2
 8006c3a:	d100      	bne.n	8006c3e <memset+0xa>
 8006c3c:	4770      	bx	lr
 8006c3e:	f803 1b01 	strb.w	r1, [r3], #1
 8006c42:	e7f9      	b.n	8006c38 <memset+0x4>

08006c44 <cleanup_glue>:
 8006c44:	b538      	push	{r3, r4, r5, lr}
 8006c46:	460c      	mov	r4, r1
 8006c48:	6809      	ldr	r1, [r1, #0]
 8006c4a:	4605      	mov	r5, r0
 8006c4c:	b109      	cbz	r1, 8006c52 <cleanup_glue+0xe>
 8006c4e:	f7ff fff9 	bl	8006c44 <cleanup_glue>
 8006c52:	4621      	mov	r1, r4
 8006c54:	4628      	mov	r0, r5
 8006c56:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006c5a:	f000 b869 	b.w	8006d30 <_free_r>
	...

08006c60 <_reclaim_reent>:
 8006c60:	4b2c      	ldr	r3, [pc, #176]	; (8006d14 <_reclaim_reent+0xb4>)
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	4283      	cmp	r3, r0
 8006c66:	b570      	push	{r4, r5, r6, lr}
 8006c68:	4604      	mov	r4, r0
 8006c6a:	d051      	beq.n	8006d10 <_reclaim_reent+0xb0>
 8006c6c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8006c6e:	b143      	cbz	r3, 8006c82 <_reclaim_reent+0x22>
 8006c70:	68db      	ldr	r3, [r3, #12]
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d14a      	bne.n	8006d0c <_reclaim_reent+0xac>
 8006c76:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006c78:	6819      	ldr	r1, [r3, #0]
 8006c7a:	b111      	cbz	r1, 8006c82 <_reclaim_reent+0x22>
 8006c7c:	4620      	mov	r0, r4
 8006c7e:	f000 f857 	bl	8006d30 <_free_r>
 8006c82:	6961      	ldr	r1, [r4, #20]
 8006c84:	b111      	cbz	r1, 8006c8c <_reclaim_reent+0x2c>
 8006c86:	4620      	mov	r0, r4
 8006c88:	f000 f852 	bl	8006d30 <_free_r>
 8006c8c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8006c8e:	b111      	cbz	r1, 8006c96 <_reclaim_reent+0x36>
 8006c90:	4620      	mov	r0, r4
 8006c92:	f000 f84d 	bl	8006d30 <_free_r>
 8006c96:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8006c98:	b111      	cbz	r1, 8006ca0 <_reclaim_reent+0x40>
 8006c9a:	4620      	mov	r0, r4
 8006c9c:	f000 f848 	bl	8006d30 <_free_r>
 8006ca0:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8006ca2:	b111      	cbz	r1, 8006caa <_reclaim_reent+0x4a>
 8006ca4:	4620      	mov	r0, r4
 8006ca6:	f000 f843 	bl	8006d30 <_free_r>
 8006caa:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8006cac:	b111      	cbz	r1, 8006cb4 <_reclaim_reent+0x54>
 8006cae:	4620      	mov	r0, r4
 8006cb0:	f000 f83e 	bl	8006d30 <_free_r>
 8006cb4:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8006cb6:	b111      	cbz	r1, 8006cbe <_reclaim_reent+0x5e>
 8006cb8:	4620      	mov	r0, r4
 8006cba:	f000 f839 	bl	8006d30 <_free_r>
 8006cbe:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8006cc0:	b111      	cbz	r1, 8006cc8 <_reclaim_reent+0x68>
 8006cc2:	4620      	mov	r0, r4
 8006cc4:	f000 f834 	bl	8006d30 <_free_r>
 8006cc8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006cca:	b111      	cbz	r1, 8006cd2 <_reclaim_reent+0x72>
 8006ccc:	4620      	mov	r0, r4
 8006cce:	f000 f82f 	bl	8006d30 <_free_r>
 8006cd2:	69a3      	ldr	r3, [r4, #24]
 8006cd4:	b1e3      	cbz	r3, 8006d10 <_reclaim_reent+0xb0>
 8006cd6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8006cd8:	4620      	mov	r0, r4
 8006cda:	4798      	blx	r3
 8006cdc:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8006cde:	b1b9      	cbz	r1, 8006d10 <_reclaim_reent+0xb0>
 8006ce0:	4620      	mov	r0, r4
 8006ce2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8006ce6:	f7ff bfad 	b.w	8006c44 <cleanup_glue>
 8006cea:	5949      	ldr	r1, [r1, r5]
 8006cec:	b941      	cbnz	r1, 8006d00 <_reclaim_reent+0xa0>
 8006cee:	3504      	adds	r5, #4
 8006cf0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006cf2:	2d80      	cmp	r5, #128	; 0x80
 8006cf4:	68d9      	ldr	r1, [r3, #12]
 8006cf6:	d1f8      	bne.n	8006cea <_reclaim_reent+0x8a>
 8006cf8:	4620      	mov	r0, r4
 8006cfa:	f000 f819 	bl	8006d30 <_free_r>
 8006cfe:	e7ba      	b.n	8006c76 <_reclaim_reent+0x16>
 8006d00:	680e      	ldr	r6, [r1, #0]
 8006d02:	4620      	mov	r0, r4
 8006d04:	f000 f814 	bl	8006d30 <_free_r>
 8006d08:	4631      	mov	r1, r6
 8006d0a:	e7ef      	b.n	8006cec <_reclaim_reent+0x8c>
 8006d0c:	2500      	movs	r5, #0
 8006d0e:	e7ef      	b.n	8006cf0 <_reclaim_reent+0x90>
 8006d10:	bd70      	pop	{r4, r5, r6, pc}
 8006d12:	bf00      	nop
 8006d14:	20000010 	.word	0x20000010

08006d18 <__malloc_lock>:
 8006d18:	4801      	ldr	r0, [pc, #4]	; (8006d20 <__malloc_lock+0x8>)
 8006d1a:	f7ff bf7b 	b.w	8006c14 <__retarget_lock_acquire_recursive>
 8006d1e:	bf00      	nop
 8006d20:	20001bc8 	.word	0x20001bc8

08006d24 <__malloc_unlock>:
 8006d24:	4801      	ldr	r0, [pc, #4]	; (8006d2c <__malloc_unlock+0x8>)
 8006d26:	f7ff bf76 	b.w	8006c16 <__retarget_lock_release_recursive>
 8006d2a:	bf00      	nop
 8006d2c:	20001bc8 	.word	0x20001bc8

08006d30 <_free_r>:
 8006d30:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006d32:	2900      	cmp	r1, #0
 8006d34:	d044      	beq.n	8006dc0 <_free_r+0x90>
 8006d36:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006d3a:	9001      	str	r0, [sp, #4]
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	f1a1 0404 	sub.w	r4, r1, #4
 8006d42:	bfb8      	it	lt
 8006d44:	18e4      	addlt	r4, r4, r3
 8006d46:	f7ff ffe7 	bl	8006d18 <__malloc_lock>
 8006d4a:	4a1e      	ldr	r2, [pc, #120]	; (8006dc4 <_free_r+0x94>)
 8006d4c:	9801      	ldr	r0, [sp, #4]
 8006d4e:	6813      	ldr	r3, [r2, #0]
 8006d50:	b933      	cbnz	r3, 8006d60 <_free_r+0x30>
 8006d52:	6063      	str	r3, [r4, #4]
 8006d54:	6014      	str	r4, [r2, #0]
 8006d56:	b003      	add	sp, #12
 8006d58:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006d5c:	f7ff bfe2 	b.w	8006d24 <__malloc_unlock>
 8006d60:	42a3      	cmp	r3, r4
 8006d62:	d908      	bls.n	8006d76 <_free_r+0x46>
 8006d64:	6825      	ldr	r5, [r4, #0]
 8006d66:	1961      	adds	r1, r4, r5
 8006d68:	428b      	cmp	r3, r1
 8006d6a:	bf01      	itttt	eq
 8006d6c:	6819      	ldreq	r1, [r3, #0]
 8006d6e:	685b      	ldreq	r3, [r3, #4]
 8006d70:	1949      	addeq	r1, r1, r5
 8006d72:	6021      	streq	r1, [r4, #0]
 8006d74:	e7ed      	b.n	8006d52 <_free_r+0x22>
 8006d76:	461a      	mov	r2, r3
 8006d78:	685b      	ldr	r3, [r3, #4]
 8006d7a:	b10b      	cbz	r3, 8006d80 <_free_r+0x50>
 8006d7c:	42a3      	cmp	r3, r4
 8006d7e:	d9fa      	bls.n	8006d76 <_free_r+0x46>
 8006d80:	6811      	ldr	r1, [r2, #0]
 8006d82:	1855      	adds	r5, r2, r1
 8006d84:	42a5      	cmp	r5, r4
 8006d86:	d10b      	bne.n	8006da0 <_free_r+0x70>
 8006d88:	6824      	ldr	r4, [r4, #0]
 8006d8a:	4421      	add	r1, r4
 8006d8c:	1854      	adds	r4, r2, r1
 8006d8e:	42a3      	cmp	r3, r4
 8006d90:	6011      	str	r1, [r2, #0]
 8006d92:	d1e0      	bne.n	8006d56 <_free_r+0x26>
 8006d94:	681c      	ldr	r4, [r3, #0]
 8006d96:	685b      	ldr	r3, [r3, #4]
 8006d98:	6053      	str	r3, [r2, #4]
 8006d9a:	4421      	add	r1, r4
 8006d9c:	6011      	str	r1, [r2, #0]
 8006d9e:	e7da      	b.n	8006d56 <_free_r+0x26>
 8006da0:	d902      	bls.n	8006da8 <_free_r+0x78>
 8006da2:	230c      	movs	r3, #12
 8006da4:	6003      	str	r3, [r0, #0]
 8006da6:	e7d6      	b.n	8006d56 <_free_r+0x26>
 8006da8:	6825      	ldr	r5, [r4, #0]
 8006daa:	1961      	adds	r1, r4, r5
 8006dac:	428b      	cmp	r3, r1
 8006dae:	bf04      	itt	eq
 8006db0:	6819      	ldreq	r1, [r3, #0]
 8006db2:	685b      	ldreq	r3, [r3, #4]
 8006db4:	6063      	str	r3, [r4, #4]
 8006db6:	bf04      	itt	eq
 8006db8:	1949      	addeq	r1, r1, r5
 8006dba:	6021      	streq	r1, [r4, #0]
 8006dbc:	6054      	str	r4, [r2, #4]
 8006dbe:	e7ca      	b.n	8006d56 <_free_r+0x26>
 8006dc0:	b003      	add	sp, #12
 8006dc2:	bd30      	pop	{r4, r5, pc}
 8006dc4:	20001bcc 	.word	0x20001bcc

08006dc8 <_init>:
 8006dc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006dca:	bf00      	nop
 8006dcc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006dce:	bc08      	pop	{r3}
 8006dd0:	469e      	mov	lr, r3
 8006dd2:	4770      	bx	lr

08006dd4 <_fini>:
 8006dd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006dd6:	bf00      	nop
 8006dd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006dda:	bc08      	pop	{r3}
 8006ddc:	469e      	mov	lr, r3
 8006dde:	4770      	bx	lr
