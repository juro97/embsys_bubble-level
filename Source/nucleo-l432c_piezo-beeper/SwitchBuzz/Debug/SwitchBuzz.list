
SwitchBuzz.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009678  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001d0  08009808  08009808  00019808  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080099d8  080099d8  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  080099d8  080099d8  000199d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080099e0  080099e0  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080099e0  080099e0  000199e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080099e4  080099e4  000199e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  080099e8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001c00  20000078  08009a60  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001c78  08009a60  00021c78  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   00020007  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000412a  00000000  00000000  000400af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001930  00000000  00000000  000441e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000017a8  00000000  00000000  00045b10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00005eb3  00000000  00000000  000472b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001c25e  00000000  00000000  0004d16b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000da31c  00000000  00000000  000693c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001436e5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007134  00000000  00000000  00143738  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000078 	.word	0x20000078
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080097f0 	.word	0x080097f0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000007c 	.word	0x2000007c
 80001cc:	080097f0 	.word	0x080097f0

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b974 	b.w	8000570 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468e      	mov	lr, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d14d      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ae:	428a      	cmp	r2, r1
 80002b0:	4694      	mov	ip, r2
 80002b2:	d969      	bls.n	8000388 <__udivmoddi4+0xe8>
 80002b4:	fab2 f282 	clz	r2, r2
 80002b8:	b152      	cbz	r2, 80002d0 <__udivmoddi4+0x30>
 80002ba:	fa01 f302 	lsl.w	r3, r1, r2
 80002be:	f1c2 0120 	rsb	r1, r2, #32
 80002c2:	fa20 f101 	lsr.w	r1, r0, r1
 80002c6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ca:	ea41 0e03 	orr.w	lr, r1, r3
 80002ce:	4094      	lsls	r4, r2
 80002d0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002d4:	0c21      	lsrs	r1, r4, #16
 80002d6:	fbbe f6f8 	udiv	r6, lr, r8
 80002da:	fa1f f78c 	uxth.w	r7, ip
 80002de:	fb08 e316 	mls	r3, r8, r6, lr
 80002e2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002e6:	fb06 f107 	mul.w	r1, r6, r7
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f106 30ff 	add.w	r0, r6, #4294967295
 80002f6:	f080 811f 	bcs.w	8000538 <__udivmoddi4+0x298>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 811c 	bls.w	8000538 <__udivmoddi4+0x298>
 8000300:	3e02      	subs	r6, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a5b      	subs	r3, r3, r1
 8000306:	b2a4      	uxth	r4, r4
 8000308:	fbb3 f0f8 	udiv	r0, r3, r8
 800030c:	fb08 3310 	mls	r3, r8, r0, r3
 8000310:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000314:	fb00 f707 	mul.w	r7, r0, r7
 8000318:	42a7      	cmp	r7, r4
 800031a:	d90a      	bls.n	8000332 <__udivmoddi4+0x92>
 800031c:	eb1c 0404 	adds.w	r4, ip, r4
 8000320:	f100 33ff 	add.w	r3, r0, #4294967295
 8000324:	f080 810a 	bcs.w	800053c <__udivmoddi4+0x29c>
 8000328:	42a7      	cmp	r7, r4
 800032a:	f240 8107 	bls.w	800053c <__udivmoddi4+0x29c>
 800032e:	4464      	add	r4, ip
 8000330:	3802      	subs	r0, #2
 8000332:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000336:	1be4      	subs	r4, r4, r7
 8000338:	2600      	movs	r6, #0
 800033a:	b11d      	cbz	r5, 8000344 <__udivmoddi4+0xa4>
 800033c:	40d4      	lsrs	r4, r2
 800033e:	2300      	movs	r3, #0
 8000340:	e9c5 4300 	strd	r4, r3, [r5]
 8000344:	4631      	mov	r1, r6
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d909      	bls.n	8000362 <__udivmoddi4+0xc2>
 800034e:	2d00      	cmp	r5, #0
 8000350:	f000 80ef 	beq.w	8000532 <__udivmoddi4+0x292>
 8000354:	2600      	movs	r6, #0
 8000356:	e9c5 0100 	strd	r0, r1, [r5]
 800035a:	4630      	mov	r0, r6
 800035c:	4631      	mov	r1, r6
 800035e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000362:	fab3 f683 	clz	r6, r3
 8000366:	2e00      	cmp	r6, #0
 8000368:	d14a      	bne.n	8000400 <__udivmoddi4+0x160>
 800036a:	428b      	cmp	r3, r1
 800036c:	d302      	bcc.n	8000374 <__udivmoddi4+0xd4>
 800036e:	4282      	cmp	r2, r0
 8000370:	f200 80f9 	bhi.w	8000566 <__udivmoddi4+0x2c6>
 8000374:	1a84      	subs	r4, r0, r2
 8000376:	eb61 0303 	sbc.w	r3, r1, r3
 800037a:	2001      	movs	r0, #1
 800037c:	469e      	mov	lr, r3
 800037e:	2d00      	cmp	r5, #0
 8000380:	d0e0      	beq.n	8000344 <__udivmoddi4+0xa4>
 8000382:	e9c5 4e00 	strd	r4, lr, [r5]
 8000386:	e7dd      	b.n	8000344 <__udivmoddi4+0xa4>
 8000388:	b902      	cbnz	r2, 800038c <__udivmoddi4+0xec>
 800038a:	deff      	udf	#255	; 0xff
 800038c:	fab2 f282 	clz	r2, r2
 8000390:	2a00      	cmp	r2, #0
 8000392:	f040 8092 	bne.w	80004ba <__udivmoddi4+0x21a>
 8000396:	eba1 010c 	sub.w	r1, r1, ip
 800039a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800039e:	fa1f fe8c 	uxth.w	lr, ip
 80003a2:	2601      	movs	r6, #1
 80003a4:	0c20      	lsrs	r0, r4, #16
 80003a6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003aa:	fb07 1113 	mls	r1, r7, r3, r1
 80003ae:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b2:	fb0e f003 	mul.w	r0, lr, r3
 80003b6:	4288      	cmp	r0, r1
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x12c>
 80003ba:	eb1c 0101 	adds.w	r1, ip, r1
 80003be:	f103 38ff 	add.w	r8, r3, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x12a>
 80003c4:	4288      	cmp	r0, r1
 80003c6:	f200 80cb 	bhi.w	8000560 <__udivmoddi4+0x2c0>
 80003ca:	4643      	mov	r3, r8
 80003cc:	1a09      	subs	r1, r1, r0
 80003ce:	b2a4      	uxth	r4, r4
 80003d0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003d4:	fb07 1110 	mls	r1, r7, r0, r1
 80003d8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003dc:	fb0e fe00 	mul.w	lr, lr, r0
 80003e0:	45a6      	cmp	lr, r4
 80003e2:	d908      	bls.n	80003f6 <__udivmoddi4+0x156>
 80003e4:	eb1c 0404 	adds.w	r4, ip, r4
 80003e8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003ec:	d202      	bcs.n	80003f4 <__udivmoddi4+0x154>
 80003ee:	45a6      	cmp	lr, r4
 80003f0:	f200 80bb 	bhi.w	800056a <__udivmoddi4+0x2ca>
 80003f4:	4608      	mov	r0, r1
 80003f6:	eba4 040e 	sub.w	r4, r4, lr
 80003fa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003fe:	e79c      	b.n	800033a <__udivmoddi4+0x9a>
 8000400:	f1c6 0720 	rsb	r7, r6, #32
 8000404:	40b3      	lsls	r3, r6
 8000406:	fa22 fc07 	lsr.w	ip, r2, r7
 800040a:	ea4c 0c03 	orr.w	ip, ip, r3
 800040e:	fa20 f407 	lsr.w	r4, r0, r7
 8000412:	fa01 f306 	lsl.w	r3, r1, r6
 8000416:	431c      	orrs	r4, r3
 8000418:	40f9      	lsrs	r1, r7
 800041a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800041e:	fa00 f306 	lsl.w	r3, r0, r6
 8000422:	fbb1 f8f9 	udiv	r8, r1, r9
 8000426:	0c20      	lsrs	r0, r4, #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fb09 1118 	mls	r1, r9, r8, r1
 8000430:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000434:	fb08 f00e 	mul.w	r0, r8, lr
 8000438:	4288      	cmp	r0, r1
 800043a:	fa02 f206 	lsl.w	r2, r2, r6
 800043e:	d90b      	bls.n	8000458 <__udivmoddi4+0x1b8>
 8000440:	eb1c 0101 	adds.w	r1, ip, r1
 8000444:	f108 3aff 	add.w	sl, r8, #4294967295
 8000448:	f080 8088 	bcs.w	800055c <__udivmoddi4+0x2bc>
 800044c:	4288      	cmp	r0, r1
 800044e:	f240 8085 	bls.w	800055c <__udivmoddi4+0x2bc>
 8000452:	f1a8 0802 	sub.w	r8, r8, #2
 8000456:	4461      	add	r1, ip
 8000458:	1a09      	subs	r1, r1, r0
 800045a:	b2a4      	uxth	r4, r4
 800045c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000460:	fb09 1110 	mls	r1, r9, r0, r1
 8000464:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000468:	fb00 fe0e 	mul.w	lr, r0, lr
 800046c:	458e      	cmp	lr, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x1e2>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f100 34ff 	add.w	r4, r0, #4294967295
 8000478:	d26c      	bcs.n	8000554 <__udivmoddi4+0x2b4>
 800047a:	458e      	cmp	lr, r1
 800047c:	d96a      	bls.n	8000554 <__udivmoddi4+0x2b4>
 800047e:	3802      	subs	r0, #2
 8000480:	4461      	add	r1, ip
 8000482:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000486:	fba0 9402 	umull	r9, r4, r0, r2
 800048a:	eba1 010e 	sub.w	r1, r1, lr
 800048e:	42a1      	cmp	r1, r4
 8000490:	46c8      	mov	r8, r9
 8000492:	46a6      	mov	lr, r4
 8000494:	d356      	bcc.n	8000544 <__udivmoddi4+0x2a4>
 8000496:	d053      	beq.n	8000540 <__udivmoddi4+0x2a0>
 8000498:	b15d      	cbz	r5, 80004b2 <__udivmoddi4+0x212>
 800049a:	ebb3 0208 	subs.w	r2, r3, r8
 800049e:	eb61 010e 	sbc.w	r1, r1, lr
 80004a2:	fa01 f707 	lsl.w	r7, r1, r7
 80004a6:	fa22 f306 	lsr.w	r3, r2, r6
 80004aa:	40f1      	lsrs	r1, r6
 80004ac:	431f      	orrs	r7, r3
 80004ae:	e9c5 7100 	strd	r7, r1, [r5]
 80004b2:	2600      	movs	r6, #0
 80004b4:	4631      	mov	r1, r6
 80004b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	40d8      	lsrs	r0, r3
 80004c0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c4:	fa21 f303 	lsr.w	r3, r1, r3
 80004c8:	4091      	lsls	r1, r2
 80004ca:	4301      	orrs	r1, r0
 80004cc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d0:	fa1f fe8c 	uxth.w	lr, ip
 80004d4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004d8:	fb07 3610 	mls	r6, r7, r0, r3
 80004dc:	0c0b      	lsrs	r3, r1, #16
 80004de:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004e2:	fb00 f60e 	mul.w	r6, r0, lr
 80004e6:	429e      	cmp	r6, r3
 80004e8:	fa04 f402 	lsl.w	r4, r4, r2
 80004ec:	d908      	bls.n	8000500 <__udivmoddi4+0x260>
 80004ee:	eb1c 0303 	adds.w	r3, ip, r3
 80004f2:	f100 38ff 	add.w	r8, r0, #4294967295
 80004f6:	d22f      	bcs.n	8000558 <__udivmoddi4+0x2b8>
 80004f8:	429e      	cmp	r6, r3
 80004fa:	d92d      	bls.n	8000558 <__udivmoddi4+0x2b8>
 80004fc:	3802      	subs	r0, #2
 80004fe:	4463      	add	r3, ip
 8000500:	1b9b      	subs	r3, r3, r6
 8000502:	b289      	uxth	r1, r1
 8000504:	fbb3 f6f7 	udiv	r6, r3, r7
 8000508:	fb07 3316 	mls	r3, r7, r6, r3
 800050c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000510:	fb06 f30e 	mul.w	r3, r6, lr
 8000514:	428b      	cmp	r3, r1
 8000516:	d908      	bls.n	800052a <__udivmoddi4+0x28a>
 8000518:	eb1c 0101 	adds.w	r1, ip, r1
 800051c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000520:	d216      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 8000522:	428b      	cmp	r3, r1
 8000524:	d914      	bls.n	8000550 <__udivmoddi4+0x2b0>
 8000526:	3e02      	subs	r6, #2
 8000528:	4461      	add	r1, ip
 800052a:	1ac9      	subs	r1, r1, r3
 800052c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000530:	e738      	b.n	80003a4 <__udivmoddi4+0x104>
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e705      	b.n	8000344 <__udivmoddi4+0xa4>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e3      	b.n	8000304 <__udivmoddi4+0x64>
 800053c:	4618      	mov	r0, r3
 800053e:	e6f8      	b.n	8000332 <__udivmoddi4+0x92>
 8000540:	454b      	cmp	r3, r9
 8000542:	d2a9      	bcs.n	8000498 <__udivmoddi4+0x1f8>
 8000544:	ebb9 0802 	subs.w	r8, r9, r2
 8000548:	eb64 0e0c 	sbc.w	lr, r4, ip
 800054c:	3801      	subs	r0, #1
 800054e:	e7a3      	b.n	8000498 <__udivmoddi4+0x1f8>
 8000550:	4646      	mov	r6, r8
 8000552:	e7ea      	b.n	800052a <__udivmoddi4+0x28a>
 8000554:	4620      	mov	r0, r4
 8000556:	e794      	b.n	8000482 <__udivmoddi4+0x1e2>
 8000558:	4640      	mov	r0, r8
 800055a:	e7d1      	b.n	8000500 <__udivmoddi4+0x260>
 800055c:	46d0      	mov	r8, sl
 800055e:	e77b      	b.n	8000458 <__udivmoddi4+0x1b8>
 8000560:	3b02      	subs	r3, #2
 8000562:	4461      	add	r1, ip
 8000564:	e732      	b.n	80003cc <__udivmoddi4+0x12c>
 8000566:	4630      	mov	r0, r6
 8000568:	e709      	b.n	800037e <__udivmoddi4+0xde>
 800056a:	4464      	add	r4, ip
 800056c:	3802      	subs	r0, #2
 800056e:	e742      	b.n	80003f6 <__udivmoddi4+0x156>

08000570 <__aeabi_idiv0>:
 8000570:	4770      	bx	lr
 8000572:	bf00      	nop

08000574 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000578:	f000 ff81 	bl	800147e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800057c:	f000 f848 	bl	8000610 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000580:	f000 f9d4 	bl	800092c <MX_GPIO_Init>
  MX_DMA_Init();
 8000584:	f000 f9b4 	bl	80008f0 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000588:	f000 f982 	bl	8000890 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 800058c:	f000 f8a2 	bl	80006d4 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 8000590:	f000 f94e 	bl	8000830 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000594:	f005 fa1a 	bl	80059cc <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of t1_Buzzer */
  t1_BuzzerHandle = osThreadNew(START_Buzzer, NULL, &t1_Buzzer_attributes);
 8000598:	4a11      	ldr	r2, [pc, #68]	; (80005e0 <main+0x6c>)
 800059a:	2100      	movs	r1, #0
 800059c:	4811      	ldr	r0, [pc, #68]	; (80005e4 <main+0x70>)
 800059e:	f005 fa5f 	bl	8005a60 <osThreadNew>
 80005a2:	4603      	mov	r3, r0
 80005a4:	4a10      	ldr	r2, [pc, #64]	; (80005e8 <main+0x74>)
 80005a6:	6013      	str	r3, [r2, #0]

  /* creation of t2_Listener */
  t2_ListenerHandle = osThreadNew(START_Listener, NULL, &t2_Listener_attributes);
 80005a8:	4a10      	ldr	r2, [pc, #64]	; (80005ec <main+0x78>)
 80005aa:	2100      	movs	r1, #0
 80005ac:	4810      	ldr	r0, [pc, #64]	; (80005f0 <main+0x7c>)
 80005ae:	f005 fa57 	bl	8005a60 <osThreadNew>
 80005b2:	4603      	mov	r3, r0
 80005b4:	4a0f      	ldr	r2, [pc, #60]	; (80005f4 <main+0x80>)
 80005b6:	6013      	str	r3, [r2, #0]

  /* creation of t3_Wifi_Listene */
  t3_Wifi_ListeneHandle = osThreadNew(START_Wifi_Listener, NULL, &t3_Wifi_Listene_attributes);
 80005b8:	4a0f      	ldr	r2, [pc, #60]	; (80005f8 <main+0x84>)
 80005ba:	2100      	movs	r1, #0
 80005bc:	480f      	ldr	r0, [pc, #60]	; (80005fc <main+0x88>)
 80005be:	f005 fa4f 	bl	8005a60 <osThreadNew>
 80005c2:	4603      	mov	r3, r0
 80005c4:	4a0e      	ldr	r2, [pc, #56]	; (8000600 <main+0x8c>)
 80005c6:	6013      	str	r3, [r2, #0]

  /* creation of t4_Wifi_Starter */
  t4_Wifi_StarterHandle = osThreadNew(START_Wifi_Starter, NULL, &t4_Wifi_Starter_attributes);
 80005c8:	4a0e      	ldr	r2, [pc, #56]	; (8000604 <main+0x90>)
 80005ca:	2100      	movs	r1, #0
 80005cc:	480e      	ldr	r0, [pc, #56]	; (8000608 <main+0x94>)
 80005ce:	f005 fa47 	bl	8005a60 <osThreadNew>
 80005d2:	4603      	mov	r3, r0
 80005d4:	4a0d      	ldr	r2, [pc, #52]	; (800060c <main+0x98>)
 80005d6:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80005d8:	f005 fa1c 	bl	8005a14 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005dc:	e7fe      	b.n	80005dc <main+0x68>
 80005de:	bf00      	nop
 80005e0:	08009868 	.word	0x08009868
 80005e4:	08000a09 	.word	0x08000a09
 80005e8:	20000230 	.word	0x20000230
 80005ec:	0800988c 	.word	0x0800988c
 80005f0:	08000b75 	.word	0x08000b75
 80005f4:	20000234 	.word	0x20000234
 80005f8:	080098b0 	.word	0x080098b0
 80005fc:	08000bb5 	.word	0x08000bb5
 8000600:	20000238 	.word	0x20000238
 8000604:	080098d4 	.word	0x080098d4
 8000608:	08000d1d 	.word	0x08000d1d
 800060c:	2000023c 	.word	0x2000023c

08000610 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	b096      	sub	sp, #88	; 0x58
 8000614:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000616:	f107 0314 	add.w	r3, r7, #20
 800061a:	2244      	movs	r2, #68	; 0x44
 800061c:	2100      	movs	r1, #0
 800061e:	4618      	mov	r0, r3
 8000620:	f008 f9dd 	bl	80089de <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000624:	463b      	mov	r3, r7
 8000626:	2200      	movs	r2, #0
 8000628:	601a      	str	r2, [r3, #0]
 800062a:	605a      	str	r2, [r3, #4]
 800062c:	609a      	str	r2, [r3, #8]
 800062e:	60da      	str	r2, [r3, #12]
 8000630:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000632:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000636:	f001 fbc3 	bl	8001dc0 <HAL_PWREx_ControlVoltageScaling>
 800063a:	4603      	mov	r3, r0
 800063c:	2b00      	cmp	r3, #0
 800063e:	d001      	beq.n	8000644 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000640:	f000 fb84 	bl	8000d4c <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000644:	f001 fb9e 	bl	8001d84 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000648:	4b21      	ldr	r3, [pc, #132]	; (80006d0 <SystemClock_Config+0xc0>)
 800064a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800064e:	4a20      	ldr	r2, [pc, #128]	; (80006d0 <SystemClock_Config+0xc0>)
 8000650:	f023 0318 	bic.w	r3, r3, #24
 8000654:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8000658:	2314      	movs	r3, #20
 800065a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800065c:	2301      	movs	r3, #1
 800065e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000660:	2301      	movs	r3, #1
 8000662:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000664:	2300      	movs	r3, #0
 8000666:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000668:	2360      	movs	r3, #96	; 0x60
 800066a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800066c:	2302      	movs	r3, #2
 800066e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000670:	2301      	movs	r3, #1
 8000672:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000674:	2301      	movs	r3, #1
 8000676:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 16;
 8000678:	2310      	movs	r3, #16
 800067a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800067c:	2307      	movs	r3, #7
 800067e:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000680:	2302      	movs	r3, #2
 8000682:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000684:	2302      	movs	r3, #2
 8000686:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000688:	f107 0314 	add.w	r3, r7, #20
 800068c:	4618      	mov	r0, r3
 800068e:	f001 fbed 	bl	8001e6c <HAL_RCC_OscConfig>
 8000692:	4603      	mov	r3, r0
 8000694:	2b00      	cmp	r3, #0
 8000696:	d001      	beq.n	800069c <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000698:	f000 fb58 	bl	8000d4c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800069c:	230f      	movs	r3, #15
 800069e:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006a0:	2303      	movs	r3, #3
 80006a2:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006a4:	2300      	movs	r3, #0
 80006a6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006a8:	2300      	movs	r3, #0
 80006aa:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006ac:	2300      	movs	r3, #0
 80006ae:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80006b0:	463b      	mov	r3, r7
 80006b2:	2101      	movs	r1, #1
 80006b4:	4618      	mov	r0, r3
 80006b6:	f001 ffed 	bl	8002694 <HAL_RCC_ClockConfig>
 80006ba:	4603      	mov	r3, r0
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d001      	beq.n	80006c4 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80006c0:	f000 fb44 	bl	8000d4c <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 80006c4:	f002 fc32 	bl	8002f2c <HAL_RCCEx_EnableMSIPLLMode>
}
 80006c8:	bf00      	nop
 80006ca:	3758      	adds	r7, #88	; 0x58
 80006cc:	46bd      	mov	sp, r7
 80006ce:	bd80      	pop	{r7, pc}
 80006d0:	40021000 	.word	0x40021000

080006d4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b09a      	sub	sp, #104	; 0x68
 80006d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80006da:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80006de:	2200      	movs	r2, #0
 80006e0:	601a      	str	r2, [r3, #0]
 80006e2:	605a      	str	r2, [r3, #4]
 80006e4:	609a      	str	r2, [r3, #8]
 80006e6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006e8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80006ec:	2200      	movs	r2, #0
 80006ee:	601a      	str	r2, [r3, #0]
 80006f0:	605a      	str	r2, [r3, #4]
 80006f2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80006f4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80006f8:	2200      	movs	r2, #0
 80006fa:	601a      	str	r2, [r3, #0]
 80006fc:	605a      	str	r2, [r3, #4]
 80006fe:	609a      	str	r2, [r3, #8]
 8000700:	60da      	str	r2, [r3, #12]
 8000702:	611a      	str	r2, [r3, #16]
 8000704:	615a      	str	r2, [r3, #20]
 8000706:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000708:	1d3b      	adds	r3, r7, #4
 800070a:	222c      	movs	r2, #44	; 0x2c
 800070c:	2100      	movs	r1, #0
 800070e:	4618      	mov	r0, r3
 8000710:	f008 f965 	bl	80089de <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000714:	4b44      	ldr	r3, [pc, #272]	; (8000828 <MX_TIM1_Init+0x154>)
 8000716:	4a45      	ldr	r2, [pc, #276]	; (800082c <MX_TIM1_Init+0x158>)
 8000718:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 32;
 800071a:	4b43      	ldr	r3, [pc, #268]	; (8000828 <MX_TIM1_Init+0x154>)
 800071c:	2220      	movs	r2, #32
 800071e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000720:	4b41      	ldr	r3, [pc, #260]	; (8000828 <MX_TIM1_Init+0x154>)
 8000722:	2200      	movs	r2, #0
 8000724:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 2000;
 8000726:	4b40      	ldr	r3, [pc, #256]	; (8000828 <MX_TIM1_Init+0x154>)
 8000728:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800072c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800072e:	4b3e      	ldr	r3, [pc, #248]	; (8000828 <MX_TIM1_Init+0x154>)
 8000730:	2200      	movs	r2, #0
 8000732:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000734:	4b3c      	ldr	r3, [pc, #240]	; (8000828 <MX_TIM1_Init+0x154>)
 8000736:	2200      	movs	r2, #0
 8000738:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800073a:	4b3b      	ldr	r3, [pc, #236]	; (8000828 <MX_TIM1_Init+0x154>)
 800073c:	2200      	movs	r2, #0
 800073e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000740:	4839      	ldr	r0, [pc, #228]	; (8000828 <MX_TIM1_Init+0x154>)
 8000742:	f002 fcf5 	bl	8003130 <HAL_TIM_Base_Init>
 8000746:	4603      	mov	r3, r0
 8000748:	2b00      	cmp	r3, #0
 800074a:	d001      	beq.n	8000750 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 800074c:	f000 fafe 	bl	8000d4c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000750:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000754:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000756:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800075a:	4619      	mov	r1, r3
 800075c:	4832      	ldr	r0, [pc, #200]	; (8000828 <MX_TIM1_Init+0x154>)
 800075e:	f003 f907 	bl	8003970 <HAL_TIM_ConfigClockSource>
 8000762:	4603      	mov	r3, r0
 8000764:	2b00      	cmp	r3, #0
 8000766:	d001      	beq.n	800076c <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8000768:	f000 faf0 	bl	8000d4c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800076c:	482e      	ldr	r0, [pc, #184]	; (8000828 <MX_TIM1_Init+0x154>)
 800076e:	f002 fd8b 	bl	8003288 <HAL_TIM_PWM_Init>
 8000772:	4603      	mov	r3, r0
 8000774:	2b00      	cmp	r3, #0
 8000776:	d001      	beq.n	800077c <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8000778:	f000 fae8 	bl	8000d4c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800077c:	2300      	movs	r3, #0
 800077e:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000780:	2300      	movs	r3, #0
 8000782:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000784:	2300      	movs	r3, #0
 8000786:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000788:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800078c:	4619      	mov	r1, r3
 800078e:	4826      	ldr	r0, [pc, #152]	; (8000828 <MX_TIM1_Init+0x154>)
 8000790:	f003 fd82 	bl	8004298 <HAL_TIMEx_MasterConfigSynchronization>
 8000794:	4603      	mov	r3, r0
 8000796:	2b00      	cmp	r3, #0
 8000798:	d001      	beq.n	800079e <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 800079a:	f000 fad7 	bl	8000d4c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800079e:	2360      	movs	r3, #96	; 0x60
 80007a0:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 500-1;
 80007a2:	f240 13f3 	movw	r3, #499	; 0x1f3
 80007a6:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80007a8:	2300      	movs	r3, #0
 80007aa:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80007ac:	2300      	movs	r3, #0
 80007ae:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80007b0:	2300      	movs	r3, #0
 80007b2:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80007b4:	2300      	movs	r3, #0
 80007b6:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80007b8:	2300      	movs	r3, #0
 80007ba:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80007bc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80007c0:	2208      	movs	r2, #8
 80007c2:	4619      	mov	r1, r3
 80007c4:	4818      	ldr	r0, [pc, #96]	; (8000828 <MX_TIM1_Init+0x154>)
 80007c6:	f002 ffbf 	bl	8003748 <HAL_TIM_PWM_ConfigChannel>
 80007ca:	4603      	mov	r3, r0
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d001      	beq.n	80007d4 <MX_TIM1_Init+0x100>
  {
    Error_Handler();
 80007d0:	f000 fabc 	bl	8000d4c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80007d4:	2300      	movs	r3, #0
 80007d6:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80007d8:	2300      	movs	r3, #0
 80007da:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80007dc:	2300      	movs	r3, #0
 80007de:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80007e0:	2300      	movs	r3, #0
 80007e2:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80007e4:	2300      	movs	r3, #0
 80007e6:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80007e8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80007ec:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80007ee:	2300      	movs	r3, #0
 80007f0:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80007f2:	2300      	movs	r3, #0
 80007f4:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80007f6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80007fa:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80007fc:	2300      	movs	r3, #0
 80007fe:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000800:	2300      	movs	r3, #0
 8000802:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000804:	1d3b      	adds	r3, r7, #4
 8000806:	4619      	mov	r1, r3
 8000808:	4807      	ldr	r0, [pc, #28]	; (8000828 <MX_TIM1_Init+0x154>)
 800080a:	f003 fdab 	bl	8004364 <HAL_TIMEx_ConfigBreakDeadTime>
 800080e:	4603      	mov	r3, r0
 8000810:	2b00      	cmp	r3, #0
 8000812:	d001      	beq.n	8000818 <MX_TIM1_Init+0x144>
  {
    Error_Handler();
 8000814:	f000 fa9a 	bl	8000d4c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000818:	4803      	ldr	r0, [pc, #12]	; (8000828 <MX_TIM1_Init+0x154>)
 800081a:	f000 fae5 	bl	8000de8 <HAL_TIM_MspPostInit>

}
 800081e:	bf00      	nop
 8000820:	3768      	adds	r7, #104	; 0x68
 8000822:	46bd      	mov	sp, r7
 8000824:	bd80      	pop	{r7, pc}
 8000826:	bf00      	nop
 8000828:	20000094 	.word	0x20000094
 800082c:	40012c00 	.word	0x40012c00

08000830 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000834:	4b14      	ldr	r3, [pc, #80]	; (8000888 <MX_USART1_UART_Init+0x58>)
 8000836:	4a15      	ldr	r2, [pc, #84]	; (800088c <MX_USART1_UART_Init+0x5c>)
 8000838:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800083a:	4b13      	ldr	r3, [pc, #76]	; (8000888 <MX_USART1_UART_Init+0x58>)
 800083c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000840:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000842:	4b11      	ldr	r3, [pc, #68]	; (8000888 <MX_USART1_UART_Init+0x58>)
 8000844:	2200      	movs	r2, #0
 8000846:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000848:	4b0f      	ldr	r3, [pc, #60]	; (8000888 <MX_USART1_UART_Init+0x58>)
 800084a:	2200      	movs	r2, #0
 800084c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800084e:	4b0e      	ldr	r3, [pc, #56]	; (8000888 <MX_USART1_UART_Init+0x58>)
 8000850:	2200      	movs	r2, #0
 8000852:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000854:	4b0c      	ldr	r3, [pc, #48]	; (8000888 <MX_USART1_UART_Init+0x58>)
 8000856:	220c      	movs	r2, #12
 8000858:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800085a:	4b0b      	ldr	r3, [pc, #44]	; (8000888 <MX_USART1_UART_Init+0x58>)
 800085c:	2200      	movs	r2, #0
 800085e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000860:	4b09      	ldr	r3, [pc, #36]	; (8000888 <MX_USART1_UART_Init+0x58>)
 8000862:	2200      	movs	r2, #0
 8000864:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000866:	4b08      	ldr	r3, [pc, #32]	; (8000888 <MX_USART1_UART_Init+0x58>)
 8000868:	2200      	movs	r2, #0
 800086a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800086c:	4b06      	ldr	r3, [pc, #24]	; (8000888 <MX_USART1_UART_Init+0x58>)
 800086e:	2200      	movs	r2, #0
 8000870:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000872:	4805      	ldr	r0, [pc, #20]	; (8000888 <MX_USART1_UART_Init+0x58>)
 8000874:	f003 fe0c 	bl	8004490 <HAL_UART_Init>
 8000878:	4603      	mov	r3, r0
 800087a:	2b00      	cmp	r3, #0
 800087c:	d001      	beq.n	8000882 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800087e:	f000 fa65 	bl	8000d4c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000882:	bf00      	nop
 8000884:	bd80      	pop	{r7, pc}
 8000886:	bf00      	nop
 8000888:	200000e0 	.word	0x200000e0
 800088c:	40013800 	.word	0x40013800

08000890 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000894:	4b14      	ldr	r3, [pc, #80]	; (80008e8 <MX_USART2_UART_Init+0x58>)
 8000896:	4a15      	ldr	r2, [pc, #84]	; (80008ec <MX_USART2_UART_Init+0x5c>)
 8000898:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800089a:	4b13      	ldr	r3, [pc, #76]	; (80008e8 <MX_USART2_UART_Init+0x58>)
 800089c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80008a0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80008a2:	4b11      	ldr	r3, [pc, #68]	; (80008e8 <MX_USART2_UART_Init+0x58>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80008a8:	4b0f      	ldr	r3, [pc, #60]	; (80008e8 <MX_USART2_UART_Init+0x58>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80008ae:	4b0e      	ldr	r3, [pc, #56]	; (80008e8 <MX_USART2_UART_Init+0x58>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80008b4:	4b0c      	ldr	r3, [pc, #48]	; (80008e8 <MX_USART2_UART_Init+0x58>)
 80008b6:	220c      	movs	r2, #12
 80008b8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008ba:	4b0b      	ldr	r3, [pc, #44]	; (80008e8 <MX_USART2_UART_Init+0x58>)
 80008bc:	2200      	movs	r2, #0
 80008be:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80008c0:	4b09      	ldr	r3, [pc, #36]	; (80008e8 <MX_USART2_UART_Init+0x58>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008c6:	4b08      	ldr	r3, [pc, #32]	; (80008e8 <MX_USART2_UART_Init+0x58>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008cc:	4b06      	ldr	r3, [pc, #24]	; (80008e8 <MX_USART2_UART_Init+0x58>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80008d2:	4805      	ldr	r0, [pc, #20]	; (80008e8 <MX_USART2_UART_Init+0x58>)
 80008d4:	f003 fddc 	bl	8004490 <HAL_UART_Init>
 80008d8:	4603      	mov	r3, r0
 80008da:	2b00      	cmp	r3, #0
 80008dc:	d001      	beq.n	80008e2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80008de:	f000 fa35 	bl	8000d4c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80008e2:	bf00      	nop
 80008e4:	bd80      	pop	{r7, pc}
 80008e6:	bf00      	nop
 80008e8:	20000164 	.word	0x20000164
 80008ec:	40004400 	.word	0x40004400

080008f0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b082      	sub	sp, #8
 80008f4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80008f6:	4b0c      	ldr	r3, [pc, #48]	; (8000928 <MX_DMA_Init+0x38>)
 80008f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80008fa:	4a0b      	ldr	r2, [pc, #44]	; (8000928 <MX_DMA_Init+0x38>)
 80008fc:	f043 0301 	orr.w	r3, r3, #1
 8000900:	6493      	str	r3, [r2, #72]	; 0x48
 8000902:	4b09      	ldr	r3, [pc, #36]	; (8000928 <MX_DMA_Init+0x38>)
 8000904:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000906:	f003 0301 	and.w	r3, r3, #1
 800090a:	607b      	str	r3, [r7, #4]
 800090c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 5, 0);
 800090e:	2200      	movs	r2, #0
 8000910:	2105      	movs	r1, #5
 8000912:	200f      	movs	r0, #15
 8000914:	f000 fea4 	bl	8001660 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8000918:	200f      	movs	r0, #15
 800091a:	f000 febd 	bl	8001698 <HAL_NVIC_EnableIRQ>

}
 800091e:	bf00      	nop
 8000920:	3708      	adds	r7, #8
 8000922:	46bd      	mov	sp, r7
 8000924:	bd80      	pop	{r7, pc}
 8000926:	bf00      	nop
 8000928:	40021000 	.word	0x40021000

0800092c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	b088      	sub	sp, #32
 8000930:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000932:	f107 030c 	add.w	r3, r7, #12
 8000936:	2200      	movs	r2, #0
 8000938:	601a      	str	r2, [r3, #0]
 800093a:	605a      	str	r2, [r3, #4]
 800093c:	609a      	str	r2, [r3, #8]
 800093e:	60da      	str	r2, [r3, #12]
 8000940:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000942:	4b1d      	ldr	r3, [pc, #116]	; (80009b8 <MX_GPIO_Init+0x8c>)
 8000944:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000946:	4a1c      	ldr	r2, [pc, #112]	; (80009b8 <MX_GPIO_Init+0x8c>)
 8000948:	f043 0304 	orr.w	r3, r3, #4
 800094c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800094e:	4b1a      	ldr	r3, [pc, #104]	; (80009b8 <MX_GPIO_Init+0x8c>)
 8000950:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000952:	f003 0304 	and.w	r3, r3, #4
 8000956:	60bb      	str	r3, [r7, #8]
 8000958:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800095a:	4b17      	ldr	r3, [pc, #92]	; (80009b8 <MX_GPIO_Init+0x8c>)
 800095c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800095e:	4a16      	ldr	r2, [pc, #88]	; (80009b8 <MX_GPIO_Init+0x8c>)
 8000960:	f043 0301 	orr.w	r3, r3, #1
 8000964:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000966:	4b14      	ldr	r3, [pc, #80]	; (80009b8 <MX_GPIO_Init+0x8c>)
 8000968:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800096a:	f003 0301 	and.w	r3, r3, #1
 800096e:	607b      	str	r3, [r7, #4]
 8000970:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000972:	4b11      	ldr	r3, [pc, #68]	; (80009b8 <MX_GPIO_Init+0x8c>)
 8000974:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000976:	4a10      	ldr	r2, [pc, #64]	; (80009b8 <MX_GPIO_Init+0x8c>)
 8000978:	f043 0302 	orr.w	r3, r3, #2
 800097c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800097e:	4b0e      	ldr	r3, [pc, #56]	; (80009b8 <MX_GPIO_Init+0x8c>)
 8000980:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000982:	f003 0302 	and.w	r3, r3, #2
 8000986:	603b      	str	r3, [r7, #0]
 8000988:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 800098a:	2200      	movs	r2, #0
 800098c:	2108      	movs	r1, #8
 800098e:	480b      	ldr	r0, [pc, #44]	; (80009bc <MX_GPIO_Init+0x90>)
 8000990:	f001 f9e0 	bl	8001d54 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 8000994:	2308      	movs	r3, #8
 8000996:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000998:	2301      	movs	r3, #1
 800099a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800099c:	2300      	movs	r3, #0
 800099e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009a0:	2300      	movs	r3, #0
 80009a2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 80009a4:	f107 030c 	add.w	r3, r7, #12
 80009a8:	4619      	mov	r1, r3
 80009aa:	4804      	ldr	r0, [pc, #16]	; (80009bc <MX_GPIO_Init+0x90>)
 80009ac:	f001 f868 	bl	8001a80 <HAL_GPIO_Init>

}
 80009b0:	bf00      	nop
 80009b2:	3720      	adds	r7, #32
 80009b4:	46bd      	mov	sp, r7
 80009b6:	bd80      	pop	{r7, pc}
 80009b8:	40021000 	.word	0x40021000
 80009bc:	48000400 	.word	0x48000400

080009c0 <f4_set_TIM_Register>:

/* USER CODE BEGIN 4 */
void f4_set_TIM_Register(int x)
{
 80009c0:	b480      	push	{r7}
 80009c2:	b083      	sub	sp, #12
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	6078      	str	r0, [r7, #4]
	{
		TIM1 -> ARR = x;
		TIM1 -> CCR1 = (x/2);
	}
	*/
	TIM1 -> ARR = 1000;
 80009c8:	4b06      	ldr	r3, [pc, #24]	; (80009e4 <f4_set_TIM_Register+0x24>)
 80009ca:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80009ce:	62da      	str	r2, [r3, #44]	; 0x2c
	TIM1 -> CCR3 = 500;
 80009d0:	4b04      	ldr	r3, [pc, #16]	; (80009e4 <f4_set_TIM_Register+0x24>)
 80009d2:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80009d6:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80009d8:	bf00      	nop
 80009da:	370c      	adds	r7, #12
 80009dc:	46bd      	mov	sp, r7
 80009de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e2:	4770      	bx	lr
 80009e4:	40012c00 	.word	0x40012c00

080009e8 <f4_send_UART>:

void f4_send_UART()
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	af00      	add	r7, sp, #0
	printf("Hello World %c\n", rx_uart);
 80009ec:	4b04      	ldr	r3, [pc, #16]	; (8000a00 <f4_send_UART+0x18>)
 80009ee:	781b      	ldrb	r3, [r3, #0]
 80009f0:	b2db      	uxtb	r3, r3
 80009f2:	4619      	mov	r1, r3
 80009f4:	4803      	ldr	r0, [pc, #12]	; (8000a04 <f4_send_UART+0x1c>)
 80009f6:	f008 f88f 	bl	8008b18 <iprintf>
}
 80009fa:	bf00      	nop
 80009fc:	bd80      	pop	{r7, pc}
 80009fe:	bf00      	nop
 8000a00:	20000000 	.word	0x20000000
 8000a04:	08009840 	.word	0x08009840

08000a08 <START_Buzzer>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_START_Buzzer */
void START_Buzzer(void *argument)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b082      	sub	sp, #8
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	if (HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3) != HAL_OK){
 8000a10:	2108      	movs	r1, #8
 8000a12:	4856      	ldr	r0, [pc, #344]	; (8000b6c <START_Buzzer+0x164>)
 8000a14:	f002 fc9a 	bl	800334c <HAL_TIM_PWM_Start>
		//ErrorHandling
	}
  /* Infinite loop */
  for(;;)
  {
    switch(rx_uart)
 8000a18:	4b55      	ldr	r3, [pc, #340]	; (8000b70 <START_Buzzer+0x168>)
 8000a1a:	781b      	ldrb	r3, [r3, #0]
 8000a1c:	b2db      	uxtb	r3, r3
 8000a1e:	3b61      	subs	r3, #97	; 0x61
 8000a20:	2b12      	cmp	r3, #18
 8000a22:	f200 809b 	bhi.w	8000b5c <START_Buzzer+0x154>
 8000a26:	a201      	add	r2, pc, #4	; (adr r2, 8000a2c <START_Buzzer+0x24>)
 8000a28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a2c:	08000a79 	.word	0x08000a79
 8000a30:	08000a85 	.word	0x08000a85
 8000a34:	08000a91 	.word	0x08000a91
 8000a38:	08000a9d 	.word	0x08000a9d
 8000a3c:	08000aa9 	.word	0x08000aa9
 8000a40:	08000ab5 	.word	0x08000ab5
 8000a44:	08000ac1 	.word	0x08000ac1
 8000a48:	08000acd 	.word	0x08000acd
 8000a4c:	08000ad9 	.word	0x08000ad9
 8000a50:	08000ae5 	.word	0x08000ae5
 8000a54:	08000af1 	.word	0x08000af1
 8000a58:	08000afd 	.word	0x08000afd
 8000a5c:	08000b09 	.word	0x08000b09
 8000a60:	08000b15 	.word	0x08000b15
 8000a64:	08000b21 	.word	0x08000b21
 8000a68:	08000b2d 	.word	0x08000b2d
 8000a6c:	08000b39 	.word	0x08000b39
 8000a70:	08000b45 	.word	0x08000b45
 8000a74:	08000b51 	.word	0x08000b51
    {
    case 'a': f4_set_TIM_Register(rx_a); continue;
 8000a78:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000a7c:	4618      	mov	r0, r3
 8000a7e:	f7ff ff9f 	bl	80009c0 <f4_set_TIM_Register>
 8000a82:	e072      	b.n	8000b6a <START_Buzzer+0x162>
    case 'b': f4_set_TIM_Register(rx_b); continue;
 8000a84:	f241 3388 	movw	r3, #5000	; 0x1388
 8000a88:	4618      	mov	r0, r3
 8000a8a:	f7ff ff99 	bl	80009c0 <f4_set_TIM_Register>
 8000a8e:	e06c      	b.n	8000b6a <START_Buzzer+0x162>
    case 'c': f4_set_TIM_Register(rx_c); continue;
 8000a90:	f242 7310 	movw	r3, #10000	; 0x2710
 8000a94:	4618      	mov	r0, r3
 8000a96:	f7ff ff93 	bl	80009c0 <f4_set_TIM_Register>
 8000a9a:	e066      	b.n	8000b6a <START_Buzzer+0x162>
    case 'd': f4_set_TIM_Register(rx_d); continue;
 8000a9c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000aa0:	4618      	mov	r0, r3
 8000aa2:	f7ff ff8d 	bl	80009c0 <f4_set_TIM_Register>
 8000aa6:	e060      	b.n	8000b6a <START_Buzzer+0x162>
    case 'e': f4_set_TIM_Register(rx_e); continue;
 8000aa8:	f240 33be 	movw	r3, #958	; 0x3be
 8000aac:	4618      	mov	r0, r3
 8000aae:	f7ff ff87 	bl	80009c0 <f4_set_TIM_Register>
 8000ab2:	e05a      	b.n	8000b6a <START_Buzzer+0x162>
    case 'f': f4_set_TIM_Register(rx_f); continue;
 8000ab4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ab8:	4618      	mov	r0, r3
 8000aba:	f7ff ff81 	bl	80009c0 <f4_set_TIM_Register>
 8000abe:	e054      	b.n	8000b6a <START_Buzzer+0x162>
    case 'g': f4_set_TIM_Register(rx_g); continue;
 8000ac0:	f240 33be 	movw	r3, #958	; 0x3be
 8000ac4:	4618      	mov	r0, r3
 8000ac6:	f7ff ff7b 	bl	80009c0 <f4_set_TIM_Register>
 8000aca:	e04e      	b.n	8000b6a <START_Buzzer+0x162>
    case 'h': f4_set_TIM_Register(rx_h); continue;
 8000acc:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000ad0:	4618      	mov	r0, r3
 8000ad2:	f7ff ff75 	bl	80009c0 <f4_set_TIM_Register>
 8000ad6:	e048      	b.n	8000b6a <START_Buzzer+0x162>
    case 'i': f4_set_TIM_Register(rx_i); continue;
 8000ad8:	f240 737c 	movw	r3, #1916	; 0x77c
 8000adc:	4618      	mov	r0, r3
 8000ade:	f7ff ff6f 	bl	80009c0 <f4_set_TIM_Register>
 8000ae2:	e042      	b.n	8000b6a <START_Buzzer+0x162>
    case 'j': f4_set_TIM_Register(rx_j); continue;
 8000ae4:	f44f 63e5 	mov.w	r3, #1832	; 0x728
 8000ae8:	4618      	mov	r0, r3
 8000aea:	f7ff ff69 	bl	80009c0 <f4_set_TIM_Register>
 8000aee:	e03c      	b.n	8000b6a <START_Buzzer+0x162>
    case 'k': f4_set_TIM_Register(rx_k); continue;
 8000af0:	f240 63d4 	movw	r3, #1748	; 0x6d4
 8000af4:	4618      	mov	r0, r3
 8000af6:	f7ff ff63 	bl	80009c0 <f4_set_TIM_Register>
 8000afa:	e036      	b.n	8000b6a <START_Buzzer+0x162>
    case 'l': f4_set_TIM_Register(rx_l); continue;
 8000afc:	f44f 63d0 	mov.w	r3, #1664	; 0x680
 8000b00:	4618      	mov	r0, r3
 8000b02:	f7ff ff5d 	bl	80009c0 <f4_set_TIM_Register>
 8000b06:	e030      	b.n	8000b6a <START_Buzzer+0x162>
    case 'm': f4_set_TIM_Register(rx_m); continue;
 8000b08:	f240 632c 	movw	r3, #1580	; 0x62c
 8000b0c:	4618      	mov	r0, r3
 8000b0e:	f7ff ff57 	bl	80009c0 <f4_set_TIM_Register>
 8000b12:	e02a      	b.n	8000b6a <START_Buzzer+0x162>
    case 'n': f4_set_TIM_Register(rx_n); continue;
 8000b14:	f44f 63d0 	mov.w	r3, #1664	; 0x680
 8000b18:	4618      	mov	r0, r3
 8000b1a:	f7ff ff51 	bl	80009c0 <f4_set_TIM_Register>
 8000b1e:	e024      	b.n	8000b6a <START_Buzzer+0x162>
    case 'o': f4_set_TIM_Register(rx_o); continue;
 8000b20:	f240 632c 	movw	r3, #1580	; 0x62c
 8000b24:	4618      	mov	r0, r3
 8000b26:	f7ff ff4b 	bl	80009c0 <f4_set_TIM_Register>
 8000b2a:	e01e      	b.n	8000b6a <START_Buzzer+0x162>
    case 'p': f4_set_TIM_Register(rx_p); continue;
 8000b2c:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000b30:	4618      	mov	r0, r3
 8000b32:	f7ff ff45 	bl	80009c0 <f4_set_TIM_Register>
 8000b36:	e018      	b.n	8000b6a <START_Buzzer+0x162>
    case 'q': f4_set_TIM_Register(rx_q); continue;
 8000b38:	f240 737c 	movw	r3, #1916	; 0x77c
 8000b3c:	4618      	mov	r0, r3
 8000b3e:	f7ff ff3f 	bl	80009c0 <f4_set_TIM_Register>
 8000b42:	e012      	b.n	8000b6a <START_Buzzer+0x162>
    case 'r': f4_set_TIM_Register(rx_r); continue;
 8000b44:	f44f 63e5 	mov.w	r3, #1832	; 0x728
 8000b48:	4618      	mov	r0, r3
 8000b4a:	f7ff ff39 	bl	80009c0 <f4_set_TIM_Register>
 8000b4e:	e00c      	b.n	8000b6a <START_Buzzer+0x162>
    case 's': f4_set_TIM_Register(rx_s); continue;
 8000b50:	f240 63d4 	movw	r3, #1748	; 0x6d4
 8000b54:	4618      	mov	r0, r3
 8000b56:	f7ff ff33 	bl	80009c0 <f4_set_TIM_Register>
 8000b5a:	e006      	b.n	8000b6a <START_Buzzer+0x162>
    default: f4_set_TIM_Register(0); osDelay(1000);
 8000b5c:	2000      	movs	r0, #0
 8000b5e:	f7ff ff2f 	bl	80009c0 <f4_set_TIM_Register>
 8000b62:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000b66:	f005 f813 	bl	8005b90 <osDelay>
    switch(rx_uart)
 8000b6a:	e755      	b.n	8000a18 <START_Buzzer+0x10>
 8000b6c:	20000094 	.word	0x20000094
 8000b70:	20000000 	.word	0x20000000

08000b74 <START_Listener>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_START_Listener */
void START_Listener(void *argument)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b084      	sub	sp, #16
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN START_Listener */
uint8_t buff;
f4_send_UART(rx_uart);
 8000b7c:	4b0b      	ldr	r3, [pc, #44]	; (8000bac <START_Listener+0x38>)
 8000b7e:	781b      	ldrb	r3, [r3, #0]
 8000b80:	b2db      	uxtb	r3, r3
 8000b82:	4618      	mov	r0, r3
 8000b84:	f7ff ff30 	bl	80009e8 <f4_send_UART>
  for(;;)
  {
    osDelay(1);
 8000b88:	2001      	movs	r0, #1
 8000b8a:	f005 f801 	bl	8005b90 <osDelay>
// if(HAL_UART_Receive_IT(&huart2, &buff, 1)))
    if(HAL_UART_Receive_IT(&huart2, &buff, 1))
 8000b8e:	f107 030f 	add.w	r3, r7, #15
 8000b92:	2201      	movs	r2, #1
 8000b94:	4619      	mov	r1, r3
 8000b96:	4806      	ldr	r0, [pc, #24]	; (8000bb0 <START_Listener+0x3c>)
 8000b98:	f003 fcc8 	bl	800452c <HAL_UART_Receive_IT>
 8000b9c:	4603      	mov	r3, r0
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d0f2      	beq.n	8000b88 <START_Listener+0x14>
    	{
    	rx_uart = (char)buff;
 8000ba2:	7bfa      	ldrb	r2, [r7, #15]
 8000ba4:	4b01      	ldr	r3, [pc, #4]	; (8000bac <START_Listener+0x38>)
 8000ba6:	701a      	strb	r2, [r3, #0]
    osDelay(1);
 8000ba8:	e7ee      	b.n	8000b88 <START_Listener+0x14>
 8000baa:	bf00      	nop
 8000bac:	20000000 	.word	0x20000000
 8000bb0:	20000164 	.word	0x20000164

08000bb4 <START_Wifi_Listener>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_START_Wifi_Listener */
void START_Wifi_Listener(void *argument)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b082      	sub	sp, #8
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN START_Wifi_Listener */
  /* Infinite loop */
  for(;;)
  {

    osDelay(1);
 8000bbc:	2001      	movs	r0, #1
 8000bbe:	f004 ffe7 	bl	8005b90 <osDelay>
    switch(rx_wifi)
 8000bc2:	4b55      	ldr	r3, [pc, #340]	; (8000d18 <START_Wifi_Listener+0x164>)
 8000bc4:	781b      	ldrb	r3, [r3, #0]
 8000bc6:	b2db      	uxtb	r3, r3
 8000bc8:	3b61      	subs	r3, #97	; 0x61
 8000bca:	2b12      	cmp	r3, #18
 8000bcc:	f200 809c 	bhi.w	8000d08 <START_Wifi_Listener+0x154>
 8000bd0:	a201      	add	r2, pc, #4	; (adr r2, 8000bd8 <START_Wifi_Listener+0x24>)
 8000bd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000bd6:	bf00      	nop
 8000bd8:	08000c25 	.word	0x08000c25
 8000bdc:	08000c31 	.word	0x08000c31
 8000be0:	08000c3d 	.word	0x08000c3d
 8000be4:	08000c49 	.word	0x08000c49
 8000be8:	08000c55 	.word	0x08000c55
 8000bec:	08000c61 	.word	0x08000c61
 8000bf0:	08000c6d 	.word	0x08000c6d
 8000bf4:	08000c79 	.word	0x08000c79
 8000bf8:	08000c85 	.word	0x08000c85
 8000bfc:	08000c91 	.word	0x08000c91
 8000c00:	08000c9d 	.word	0x08000c9d
 8000c04:	08000ca9 	.word	0x08000ca9
 8000c08:	08000cb5 	.word	0x08000cb5
 8000c0c:	08000cc1 	.word	0x08000cc1
 8000c10:	08000ccd 	.word	0x08000ccd
 8000c14:	08000cd9 	.word	0x08000cd9
 8000c18:	08000ce5 	.word	0x08000ce5
 8000c1c:	08000cf1 	.word	0x08000cf1
 8000c20:	08000cfd 	.word	0x08000cfd
       {
       case 'a': f4_set_TIM_Register(rx_a); continue;
 8000c24:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000c28:	4618      	mov	r0, r3
 8000c2a:	f7ff fec9 	bl	80009c0 <f4_set_TIM_Register>
 8000c2e:	e072      	b.n	8000d16 <START_Wifi_Listener+0x162>
       case 'b': f4_set_TIM_Register(rx_b); continue;
 8000c30:	f241 3388 	movw	r3, #5000	; 0x1388
 8000c34:	4618      	mov	r0, r3
 8000c36:	f7ff fec3 	bl	80009c0 <f4_set_TIM_Register>
 8000c3a:	e06c      	b.n	8000d16 <START_Wifi_Listener+0x162>
       case 'c': f4_set_TIM_Register(rx_c); continue;
 8000c3c:	f242 7310 	movw	r3, #10000	; 0x2710
 8000c40:	4618      	mov	r0, r3
 8000c42:	f7ff febd 	bl	80009c0 <f4_set_TIM_Register>
 8000c46:	e066      	b.n	8000d16 <START_Wifi_Listener+0x162>
       case 'd': f4_set_TIM_Register(rx_d); continue;
 8000c48:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c4c:	4618      	mov	r0, r3
 8000c4e:	f7ff feb7 	bl	80009c0 <f4_set_TIM_Register>
 8000c52:	e060      	b.n	8000d16 <START_Wifi_Listener+0x162>
       case 'e': f4_set_TIM_Register(rx_e); continue;
 8000c54:	f240 33be 	movw	r3, #958	; 0x3be
 8000c58:	4618      	mov	r0, r3
 8000c5a:	f7ff feb1 	bl	80009c0 <f4_set_TIM_Register>
 8000c5e:	e05a      	b.n	8000d16 <START_Wifi_Listener+0x162>
       case 'f': f4_set_TIM_Register(rx_f); continue;
 8000c60:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c64:	4618      	mov	r0, r3
 8000c66:	f7ff feab 	bl	80009c0 <f4_set_TIM_Register>
 8000c6a:	e054      	b.n	8000d16 <START_Wifi_Listener+0x162>
       case 'g': f4_set_TIM_Register(rx_g); continue;
 8000c6c:	f240 33be 	movw	r3, #958	; 0x3be
 8000c70:	4618      	mov	r0, r3
 8000c72:	f7ff fea5 	bl	80009c0 <f4_set_TIM_Register>
 8000c76:	e04e      	b.n	8000d16 <START_Wifi_Listener+0x162>
       case 'h': f4_set_TIM_Register(rx_h); continue;
 8000c78:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000c7c:	4618      	mov	r0, r3
 8000c7e:	f7ff fe9f 	bl	80009c0 <f4_set_TIM_Register>
 8000c82:	e048      	b.n	8000d16 <START_Wifi_Listener+0x162>
       case 'i': f4_set_TIM_Register(rx_i); continue;
 8000c84:	f240 737c 	movw	r3, #1916	; 0x77c
 8000c88:	4618      	mov	r0, r3
 8000c8a:	f7ff fe99 	bl	80009c0 <f4_set_TIM_Register>
 8000c8e:	e042      	b.n	8000d16 <START_Wifi_Listener+0x162>
       case 'j': f4_set_TIM_Register(rx_j); continue;
 8000c90:	f44f 63e5 	mov.w	r3, #1832	; 0x728
 8000c94:	4618      	mov	r0, r3
 8000c96:	f7ff fe93 	bl	80009c0 <f4_set_TIM_Register>
 8000c9a:	e03c      	b.n	8000d16 <START_Wifi_Listener+0x162>
       case 'k': f4_set_TIM_Register(rx_k); continue;
 8000c9c:	f240 63d4 	movw	r3, #1748	; 0x6d4
 8000ca0:	4618      	mov	r0, r3
 8000ca2:	f7ff fe8d 	bl	80009c0 <f4_set_TIM_Register>
 8000ca6:	e036      	b.n	8000d16 <START_Wifi_Listener+0x162>
       case 'l': f4_set_TIM_Register(rx_l); continue;
 8000ca8:	f44f 63d0 	mov.w	r3, #1664	; 0x680
 8000cac:	4618      	mov	r0, r3
 8000cae:	f7ff fe87 	bl	80009c0 <f4_set_TIM_Register>
 8000cb2:	e030      	b.n	8000d16 <START_Wifi_Listener+0x162>
       case 'm': f4_set_TIM_Register(rx_m); continue;
 8000cb4:	f240 632c 	movw	r3, #1580	; 0x62c
 8000cb8:	4618      	mov	r0, r3
 8000cba:	f7ff fe81 	bl	80009c0 <f4_set_TIM_Register>
 8000cbe:	e02a      	b.n	8000d16 <START_Wifi_Listener+0x162>
       case 'n': f4_set_TIM_Register(rx_n); continue;
 8000cc0:	f44f 63d0 	mov.w	r3, #1664	; 0x680
 8000cc4:	4618      	mov	r0, r3
 8000cc6:	f7ff fe7b 	bl	80009c0 <f4_set_TIM_Register>
 8000cca:	e024      	b.n	8000d16 <START_Wifi_Listener+0x162>
       case 'o': f4_set_TIM_Register(rx_o); continue;
 8000ccc:	f240 632c 	movw	r3, #1580	; 0x62c
 8000cd0:	4618      	mov	r0, r3
 8000cd2:	f7ff fe75 	bl	80009c0 <f4_set_TIM_Register>
 8000cd6:	e01e      	b.n	8000d16 <START_Wifi_Listener+0x162>
       case 'p': f4_set_TIM_Register(rx_p); continue;
 8000cd8:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000cdc:	4618      	mov	r0, r3
 8000cde:	f7ff fe6f 	bl	80009c0 <f4_set_TIM_Register>
 8000ce2:	e018      	b.n	8000d16 <START_Wifi_Listener+0x162>
       case 'q': f4_set_TIM_Register(rx_q); continue;
 8000ce4:	f240 737c 	movw	r3, #1916	; 0x77c
 8000ce8:	4618      	mov	r0, r3
 8000cea:	f7ff fe69 	bl	80009c0 <f4_set_TIM_Register>
 8000cee:	e012      	b.n	8000d16 <START_Wifi_Listener+0x162>
       case 'r': f4_set_TIM_Register(rx_r); continue;
 8000cf0:	f44f 63e5 	mov.w	r3, #1832	; 0x728
 8000cf4:	4618      	mov	r0, r3
 8000cf6:	f7ff fe63 	bl	80009c0 <f4_set_TIM_Register>
 8000cfa:	e00c      	b.n	8000d16 <START_Wifi_Listener+0x162>
       case 's': f4_set_TIM_Register(rx_s); continue;
 8000cfc:	f240 63d4 	movw	r3, #1748	; 0x6d4
 8000d00:	4618      	mov	r0, r3
 8000d02:	f7ff fe5d 	bl	80009c0 <f4_set_TIM_Register>
 8000d06:	e006      	b.n	8000d16 <START_Wifi_Listener+0x162>
       default: f4_set_TIM_Register(0); osDelay(1000);
 8000d08:	2000      	movs	r0, #0
 8000d0a:	f7ff fe59 	bl	80009c0 <f4_set_TIM_Register>
 8000d0e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000d12:	f004 ff3d 	bl	8005b90 <osDelay>
    osDelay(1);
 8000d16:	e751      	b.n	8000bbc <START_Wifi_Listener+0x8>
 8000d18:	20000240 	.word	0x20000240

08000d1c <START_Wifi_Starter>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_START_Wifi_Starter */
void START_Wifi_Starter(void *argument)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b082      	sub	sp, #8
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN START_Wifi_Starter */
	//StartWifiClick(argument);
	osThreadExit();
 8000d24:	f004 ff2e 	bl	8005b84 <osThreadExit>

08000d28 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b082      	sub	sp, #8
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	4a04      	ldr	r2, [pc, #16]	; (8000d48 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000d36:	4293      	cmp	r3, r2
 8000d38:	d101      	bne.n	8000d3e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000d3a:	f000 fbb9 	bl	80014b0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000d3e:	bf00      	nop
 8000d40:	3708      	adds	r7, #8
 8000d42:	46bd      	mov	sp, r7
 8000d44:	bd80      	pop	{r7, pc}
 8000d46:	bf00      	nop
 8000d48:	40001000 	.word	0x40001000

08000d4c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d50:	b672      	cpsid	i
}
 8000d52:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d54:	e7fe      	b.n	8000d54 <Error_Handler+0x8>
	...

08000d58 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b082      	sub	sp, #8
 8000d5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d5e:	4b11      	ldr	r3, [pc, #68]	; (8000da4 <HAL_MspInit+0x4c>)
 8000d60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d62:	4a10      	ldr	r2, [pc, #64]	; (8000da4 <HAL_MspInit+0x4c>)
 8000d64:	f043 0301 	orr.w	r3, r3, #1
 8000d68:	6613      	str	r3, [r2, #96]	; 0x60
 8000d6a:	4b0e      	ldr	r3, [pc, #56]	; (8000da4 <HAL_MspInit+0x4c>)
 8000d6c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d6e:	f003 0301 	and.w	r3, r3, #1
 8000d72:	607b      	str	r3, [r7, #4]
 8000d74:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d76:	4b0b      	ldr	r3, [pc, #44]	; (8000da4 <HAL_MspInit+0x4c>)
 8000d78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d7a:	4a0a      	ldr	r2, [pc, #40]	; (8000da4 <HAL_MspInit+0x4c>)
 8000d7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d80:	6593      	str	r3, [r2, #88]	; 0x58
 8000d82:	4b08      	ldr	r3, [pc, #32]	; (8000da4 <HAL_MspInit+0x4c>)
 8000d84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d8a:	603b      	str	r3, [r7, #0]
 8000d8c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000d8e:	2200      	movs	r2, #0
 8000d90:	210f      	movs	r1, #15
 8000d92:	f06f 0001 	mvn.w	r0, #1
 8000d96:	f000 fc63 	bl	8001660 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d9a:	bf00      	nop
 8000d9c:	3708      	adds	r7, #8
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	bd80      	pop	{r7, pc}
 8000da2:	bf00      	nop
 8000da4:	40021000 	.word	0x40021000

08000da8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000da8:	b480      	push	{r7}
 8000daa:	b085      	sub	sp, #20
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	4a0a      	ldr	r2, [pc, #40]	; (8000de0 <HAL_TIM_Base_MspInit+0x38>)
 8000db6:	4293      	cmp	r3, r2
 8000db8:	d10b      	bne.n	8000dd2 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000dba:	4b0a      	ldr	r3, [pc, #40]	; (8000de4 <HAL_TIM_Base_MspInit+0x3c>)
 8000dbc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000dbe:	4a09      	ldr	r2, [pc, #36]	; (8000de4 <HAL_TIM_Base_MspInit+0x3c>)
 8000dc0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000dc4:	6613      	str	r3, [r2, #96]	; 0x60
 8000dc6:	4b07      	ldr	r3, [pc, #28]	; (8000de4 <HAL_TIM_Base_MspInit+0x3c>)
 8000dc8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000dca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000dce:	60fb      	str	r3, [r7, #12]
 8000dd0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000dd2:	bf00      	nop
 8000dd4:	3714      	adds	r7, #20
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ddc:	4770      	bx	lr
 8000dde:	bf00      	nop
 8000de0:	40012c00 	.word	0x40012c00
 8000de4:	40021000 	.word	0x40021000

08000de8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b088      	sub	sp, #32
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000df0:	f107 030c 	add.w	r3, r7, #12
 8000df4:	2200      	movs	r2, #0
 8000df6:	601a      	str	r2, [r3, #0]
 8000df8:	605a      	str	r2, [r3, #4]
 8000dfa:	609a      	str	r2, [r3, #8]
 8000dfc:	60da      	str	r2, [r3, #12]
 8000dfe:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	4a11      	ldr	r2, [pc, #68]	; (8000e4c <HAL_TIM_MspPostInit+0x64>)
 8000e06:	4293      	cmp	r3, r2
 8000e08:	d11b      	bne.n	8000e42 <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e0a:	4b11      	ldr	r3, [pc, #68]	; (8000e50 <HAL_TIM_MspPostInit+0x68>)
 8000e0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e0e:	4a10      	ldr	r2, [pc, #64]	; (8000e50 <HAL_TIM_MspPostInit+0x68>)
 8000e10:	f043 0302 	orr.w	r3, r3, #2
 8000e14:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e16:	4b0e      	ldr	r3, [pc, #56]	; (8000e50 <HAL_TIM_MspPostInit+0x68>)
 8000e18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e1a:	f003 0302 	and.w	r3, r3, #2
 8000e1e:	60bb      	str	r3, [r7, #8]
 8000e20:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PB1     ------> TIM1_CH3N
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000e22:	2302      	movs	r3, #2
 8000e24:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e26:	2302      	movs	r3, #2
 8000e28:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e2e:	2300      	movs	r3, #0
 8000e30:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000e32:	2301      	movs	r3, #1
 8000e34:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e36:	f107 030c 	add.w	r3, r7, #12
 8000e3a:	4619      	mov	r1, r3
 8000e3c:	4805      	ldr	r0, [pc, #20]	; (8000e54 <HAL_TIM_MspPostInit+0x6c>)
 8000e3e:	f000 fe1f 	bl	8001a80 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000e42:	bf00      	nop
 8000e44:	3720      	adds	r7, #32
 8000e46:	46bd      	mov	sp, r7
 8000e48:	bd80      	pop	{r7, pc}
 8000e4a:	bf00      	nop
 8000e4c:	40012c00 	.word	0x40012c00
 8000e50:	40021000 	.word	0x40021000
 8000e54:	48000400 	.word	0x48000400

08000e58 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b0a0      	sub	sp, #128	; 0x80
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e60:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000e64:	2200      	movs	r2, #0
 8000e66:	601a      	str	r2, [r3, #0]
 8000e68:	605a      	str	r2, [r3, #4]
 8000e6a:	609a      	str	r2, [r3, #8]
 8000e6c:	60da      	str	r2, [r3, #12]
 8000e6e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000e70:	f107 0318 	add.w	r3, r7, #24
 8000e74:	2254      	movs	r2, #84	; 0x54
 8000e76:	2100      	movs	r1, #0
 8000e78:	4618      	mov	r0, r3
 8000e7a:	f007 fdb0 	bl	80089de <memset>
  if(huart->Instance==USART1)
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	4a63      	ldr	r2, [pc, #396]	; (8001010 <HAL_UART_MspInit+0x1b8>)
 8000e84:	4293      	cmp	r3, r2
 8000e86:	d169      	bne.n	8000f5c <HAL_UART_MspInit+0x104>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000e88:	2301      	movs	r3, #1
 8000e8a:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e90:	f107 0318 	add.w	r3, r7, #24
 8000e94:	4618      	mov	r0, r3
 8000e96:	f001 fe53 	bl	8002b40 <HAL_RCCEx_PeriphCLKConfig>
 8000e9a:	4603      	mov	r3, r0
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d001      	beq.n	8000ea4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000ea0:	f7ff ff54 	bl	8000d4c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000ea4:	4b5b      	ldr	r3, [pc, #364]	; (8001014 <HAL_UART_MspInit+0x1bc>)
 8000ea6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ea8:	4a5a      	ldr	r2, [pc, #360]	; (8001014 <HAL_UART_MspInit+0x1bc>)
 8000eaa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000eae:	6613      	str	r3, [r2, #96]	; 0x60
 8000eb0:	4b58      	ldr	r3, [pc, #352]	; (8001014 <HAL_UART_MspInit+0x1bc>)
 8000eb2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000eb4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000eb8:	617b      	str	r3, [r7, #20]
 8000eba:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ebc:	4b55      	ldr	r3, [pc, #340]	; (8001014 <HAL_UART_MspInit+0x1bc>)
 8000ebe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ec0:	4a54      	ldr	r2, [pc, #336]	; (8001014 <HAL_UART_MspInit+0x1bc>)
 8000ec2:	f043 0301 	orr.w	r3, r3, #1
 8000ec6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ec8:	4b52      	ldr	r3, [pc, #328]	; (8001014 <HAL_UART_MspInit+0x1bc>)
 8000eca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ecc:	f003 0301 	and.w	r3, r3, #1
 8000ed0:	613b      	str	r3, [r7, #16]
 8000ed2:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000ed4:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000ed8:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eda:	2302      	movs	r3, #2
 8000edc:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ede:	2300      	movs	r3, #0
 8000ee0:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ee2:	2303      	movs	r3, #3
 8000ee4:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000ee6:	2307      	movs	r3, #7
 8000ee8:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000eea:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000eee:	4619      	mov	r1, r3
 8000ef0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ef4:	f000 fdc4 	bl	8001a80 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8000ef8:	4b47      	ldr	r3, [pc, #284]	; (8001018 <HAL_UART_MspInit+0x1c0>)
 8000efa:	4a48      	ldr	r2, [pc, #288]	; (800101c <HAL_UART_MspInit+0x1c4>)
 8000efc:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_2;
 8000efe:	4b46      	ldr	r3, [pc, #280]	; (8001018 <HAL_UART_MspInit+0x1c0>)
 8000f00:	2202      	movs	r2, #2
 8000f02:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000f04:	4b44      	ldr	r3, [pc, #272]	; (8001018 <HAL_UART_MspInit+0x1c0>)
 8000f06:	2200      	movs	r2, #0
 8000f08:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f0a:	4b43      	ldr	r3, [pc, #268]	; (8001018 <HAL_UART_MspInit+0x1c0>)
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000f10:	4b41      	ldr	r3, [pc, #260]	; (8001018 <HAL_UART_MspInit+0x1c0>)
 8000f12:	2280      	movs	r2, #128	; 0x80
 8000f14:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000f16:	4b40      	ldr	r3, [pc, #256]	; (8001018 <HAL_UART_MspInit+0x1c0>)
 8000f18:	2200      	movs	r2, #0
 8000f1a:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000f1c:	4b3e      	ldr	r3, [pc, #248]	; (8001018 <HAL_UART_MspInit+0x1c0>)
 8000f1e:	2200      	movs	r2, #0
 8000f20:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8000f22:	4b3d      	ldr	r3, [pc, #244]	; (8001018 <HAL_UART_MspInit+0x1c0>)
 8000f24:	2220      	movs	r2, #32
 8000f26:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000f28:	4b3b      	ldr	r3, [pc, #236]	; (8001018 <HAL_UART_MspInit+0x1c0>)
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8000f2e:	483a      	ldr	r0, [pc, #232]	; (8001018 <HAL_UART_MspInit+0x1c0>)
 8000f30:	f000 fbc0 	bl	80016b4 <HAL_DMA_Init>
 8000f34:	4603      	mov	r3, r0
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d001      	beq.n	8000f3e <HAL_UART_MspInit+0xe6>
    {
      Error_Handler();
 8000f3a:	f7ff ff07 	bl	8000d4c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	4a35      	ldr	r2, [pc, #212]	; (8001018 <HAL_UART_MspInit+0x1c0>)
 8000f42:	671a      	str	r2, [r3, #112]	; 0x70
 8000f44:	4a34      	ldr	r2, [pc, #208]	; (8001018 <HAL_UART_MspInit+0x1c0>)
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	2105      	movs	r1, #5
 8000f4e:	2025      	movs	r0, #37	; 0x25
 8000f50:	f000 fb86 	bl	8001660 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000f54:	2025      	movs	r0, #37	; 0x25
 8000f56:	f000 fb9f 	bl	8001698 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000f5a:	e055      	b.n	8001008 <HAL_UART_MspInit+0x1b0>
  else if(huart->Instance==USART2)
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	4a2f      	ldr	r2, [pc, #188]	; (8001020 <HAL_UART_MspInit+0x1c8>)
 8000f62:	4293      	cmp	r3, r2
 8000f64:	d150      	bne.n	8001008 <HAL_UART_MspInit+0x1b0>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000f66:	2302      	movs	r3, #2
 8000f68:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f6e:	f107 0318 	add.w	r3, r7, #24
 8000f72:	4618      	mov	r0, r3
 8000f74:	f001 fde4 	bl	8002b40 <HAL_RCCEx_PeriphCLKConfig>
 8000f78:	4603      	mov	r3, r0
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d001      	beq.n	8000f82 <HAL_UART_MspInit+0x12a>
      Error_Handler();
 8000f7e:	f7ff fee5 	bl	8000d4c <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000f82:	4b24      	ldr	r3, [pc, #144]	; (8001014 <HAL_UART_MspInit+0x1bc>)
 8000f84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f86:	4a23      	ldr	r2, [pc, #140]	; (8001014 <HAL_UART_MspInit+0x1bc>)
 8000f88:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f8c:	6593      	str	r3, [r2, #88]	; 0x58
 8000f8e:	4b21      	ldr	r3, [pc, #132]	; (8001014 <HAL_UART_MspInit+0x1bc>)
 8000f90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f96:	60fb      	str	r3, [r7, #12]
 8000f98:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f9a:	4b1e      	ldr	r3, [pc, #120]	; (8001014 <HAL_UART_MspInit+0x1bc>)
 8000f9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f9e:	4a1d      	ldr	r2, [pc, #116]	; (8001014 <HAL_UART_MspInit+0x1bc>)
 8000fa0:	f043 0301 	orr.w	r3, r3, #1
 8000fa4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fa6:	4b1b      	ldr	r3, [pc, #108]	; (8001014 <HAL_UART_MspInit+0x1bc>)
 8000fa8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000faa:	f003 0301 	and.w	r3, r3, #1
 8000fae:	60bb      	str	r3, [r7, #8]
 8000fb0:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8000fb2:	2304      	movs	r3, #4
 8000fb4:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fb6:	2302      	movs	r3, #2
 8000fb8:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fbe:	2303      	movs	r3, #3
 8000fc0:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000fc2:	2307      	movs	r3, #7
 8000fc4:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8000fc6:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000fca:	4619      	mov	r1, r3
 8000fcc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fd0:	f000 fd56 	bl	8001a80 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8000fd4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000fd8:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fda:	2302      	movs	r3, #2
 8000fdc:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fe2:	2303      	movs	r3, #3
 8000fe4:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8000fe6:	2303      	movs	r3, #3
 8000fe8:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8000fea:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000fee:	4619      	mov	r1, r3
 8000ff0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ff4:	f000 fd44 	bl	8001a80 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	2105      	movs	r1, #5
 8000ffc:	2026      	movs	r0, #38	; 0x26
 8000ffe:	f000 fb2f 	bl	8001660 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001002:	2026      	movs	r0, #38	; 0x26
 8001004:	f000 fb48 	bl	8001698 <HAL_NVIC_EnableIRQ>
}
 8001008:	bf00      	nop
 800100a:	3780      	adds	r7, #128	; 0x80
 800100c:	46bd      	mov	sp, r7
 800100e:	bd80      	pop	{r7, pc}
 8001010:	40013800 	.word	0x40013800
 8001014:	40021000 	.word	0x40021000
 8001018:	200001e8 	.word	0x200001e8
 800101c:	40020058 	.word	0x40020058
 8001020:	40004400 	.word	0x40004400

08001024 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b08e      	sub	sp, #56	; 0x38
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 800102c:	2300      	movs	r3, #0
 800102e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001032:	4b34      	ldr	r3, [pc, #208]	; (8001104 <HAL_InitTick+0xe0>)
 8001034:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001036:	4a33      	ldr	r2, [pc, #204]	; (8001104 <HAL_InitTick+0xe0>)
 8001038:	f043 0310 	orr.w	r3, r3, #16
 800103c:	6593      	str	r3, [r2, #88]	; 0x58
 800103e:	4b31      	ldr	r3, [pc, #196]	; (8001104 <HAL_InitTick+0xe0>)
 8001040:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001042:	f003 0310 	and.w	r3, r3, #16
 8001046:	60fb      	str	r3, [r7, #12]
 8001048:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800104a:	f107 0210 	add.w	r2, r7, #16
 800104e:	f107 0314 	add.w	r3, r7, #20
 8001052:	4611      	mov	r1, r2
 8001054:	4618      	mov	r0, r3
 8001056:	f001 fce1 	bl	8002a1c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800105a:	6a3b      	ldr	r3, [r7, #32]
 800105c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800105e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001060:	2b00      	cmp	r3, #0
 8001062:	d103      	bne.n	800106c <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001064:	f001 fcae 	bl	80029c4 <HAL_RCC_GetPCLK1Freq>
 8001068:	6378      	str	r0, [r7, #52]	; 0x34
 800106a:	e004      	b.n	8001076 <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800106c:	f001 fcaa 	bl	80029c4 <HAL_RCC_GetPCLK1Freq>
 8001070:	4603      	mov	r3, r0
 8001072:	005b      	lsls	r3, r3, #1
 8001074:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001076:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001078:	4a23      	ldr	r2, [pc, #140]	; (8001108 <HAL_InitTick+0xe4>)
 800107a:	fba2 2303 	umull	r2, r3, r2, r3
 800107e:	0c9b      	lsrs	r3, r3, #18
 8001080:	3b01      	subs	r3, #1
 8001082:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001084:	4b21      	ldr	r3, [pc, #132]	; (800110c <HAL_InitTick+0xe8>)
 8001086:	4a22      	ldr	r2, [pc, #136]	; (8001110 <HAL_InitTick+0xec>)
 8001088:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800108a:	4b20      	ldr	r3, [pc, #128]	; (800110c <HAL_InitTick+0xe8>)
 800108c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001090:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001092:	4a1e      	ldr	r2, [pc, #120]	; (800110c <HAL_InitTick+0xe8>)
 8001094:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001096:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001098:	4b1c      	ldr	r3, [pc, #112]	; (800110c <HAL_InitTick+0xe8>)
 800109a:	2200      	movs	r2, #0
 800109c:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800109e:	4b1b      	ldr	r3, [pc, #108]	; (800110c <HAL_InitTick+0xe8>)
 80010a0:	2200      	movs	r2, #0
 80010a2:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010a4:	4b19      	ldr	r3, [pc, #100]	; (800110c <HAL_InitTick+0xe8>)
 80010a6:	2200      	movs	r2, #0
 80010a8:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 80010aa:	4818      	ldr	r0, [pc, #96]	; (800110c <HAL_InitTick+0xe8>)
 80010ac:	f002 f840 	bl	8003130 <HAL_TIM_Base_Init>
 80010b0:	4603      	mov	r3, r0
 80010b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 80010b6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d11b      	bne.n	80010f6 <HAL_InitTick+0xd2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 80010be:	4813      	ldr	r0, [pc, #76]	; (800110c <HAL_InitTick+0xe8>)
 80010c0:	f002 f88e 	bl	80031e0 <HAL_TIM_Base_Start_IT>
 80010c4:	4603      	mov	r3, r0
 80010c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 80010ca:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d111      	bne.n	80010f6 <HAL_InitTick+0xd2>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80010d2:	2036      	movs	r0, #54	; 0x36
 80010d4:	f000 fae0 	bl	8001698 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	2b0f      	cmp	r3, #15
 80010dc:	d808      	bhi.n	80010f0 <HAL_InitTick+0xcc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 80010de:	2200      	movs	r2, #0
 80010e0:	6879      	ldr	r1, [r7, #4]
 80010e2:	2036      	movs	r0, #54	; 0x36
 80010e4:	f000 fabc 	bl	8001660 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80010e8:	4a0a      	ldr	r2, [pc, #40]	; (8001114 <HAL_InitTick+0xf0>)
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	6013      	str	r3, [r2, #0]
 80010ee:	e002      	b.n	80010f6 <HAL_InitTick+0xd2>
      }
      else
      {
        status = HAL_ERROR;
 80010f0:	2301      	movs	r3, #1
 80010f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80010f6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 80010fa:	4618      	mov	r0, r3
 80010fc:	3738      	adds	r7, #56	; 0x38
 80010fe:	46bd      	mov	sp, r7
 8001100:	bd80      	pop	{r7, pc}
 8001102:	bf00      	nop
 8001104:	40021000 	.word	0x40021000
 8001108:	431bde83 	.word	0x431bde83
 800110c:	20000244 	.word	0x20000244
 8001110:	40001000 	.word	0x40001000
 8001114:	20000008 	.word	0x20000008

08001118 <LL_USART_IsActiveFlag_IDLE>:
  * @rmtoll ISR          IDLE          LL_USART_IsActiveFlag_IDLE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_IDLE(const USART_TypeDef *USARTx)
{
 8001118:	b480      	push	{r7}
 800111a:	b083      	sub	sp, #12
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_IDLE) == (USART_ISR_IDLE)) ? 1UL : 0UL);
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	69db      	ldr	r3, [r3, #28]
 8001124:	f003 0310 	and.w	r3, r3, #16
 8001128:	2b10      	cmp	r3, #16
 800112a:	d101      	bne.n	8001130 <LL_USART_IsActiveFlag_IDLE+0x18>
 800112c:	2301      	movs	r3, #1
 800112e:	e000      	b.n	8001132 <LL_USART_IsActiveFlag_IDLE+0x1a>
 8001130:	2300      	movs	r3, #0
}
 8001132:	4618      	mov	r0, r3
 8001134:	370c      	adds	r7, #12
 8001136:	46bd      	mov	sp, r7
 8001138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113c:	4770      	bx	lr

0800113e <LL_USART_ClearFlag_IDLE>:
  * @rmtoll ICR          IDLECF        LL_USART_ClearFlag_IDLE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ClearFlag_IDLE(USART_TypeDef *USARTx)
{
 800113e:	b480      	push	{r7}
 8001140:	b083      	sub	sp, #12
 8001142:	af00      	add	r7, sp, #0
 8001144:	6078      	str	r0, [r7, #4]
  WRITE_REG(USARTx->ICR, USART_ICR_IDLECF);
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	2210      	movs	r2, #16
 800114a:	621a      	str	r2, [r3, #32]
}
 800114c:	bf00      	nop
 800114e:	370c      	adds	r7, #12
 8001150:	46bd      	mov	sp, r7
 8001152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001156:	4770      	bx	lr

08001158 <LL_USART_IsEnabledIT_IDLE>:
  * @rmtoll CR1          IDLEIE        LL_USART_IsEnabledIT_IDLE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsEnabledIT_IDLE(const USART_TypeDef *USARTx)
{
 8001158:	b480      	push	{r7}
 800115a:	b083      	sub	sp, #12
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_IDLEIE) == (USART_CR1_IDLEIE)) ? 1UL : 0UL);
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	f003 0310 	and.w	r3, r3, #16
 8001168:	2b10      	cmp	r3, #16
 800116a:	d101      	bne.n	8001170 <LL_USART_IsEnabledIT_IDLE+0x18>
 800116c:	2301      	movs	r3, #1
 800116e:	e000      	b.n	8001172 <LL_USART_IsEnabledIT_IDLE+0x1a>
 8001170:	2300      	movs	r3, #0
}
 8001172:	4618      	mov	r0, r3
 8001174:	370c      	adds	r7, #12
 8001176:	46bd      	mov	sp, r7
 8001178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117c:	4770      	bx	lr

0800117e <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800117e:	b480      	push	{r7}
 8001180:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001182:	e7fe      	b.n	8001182 <NMI_Handler+0x4>

08001184 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001184:	b480      	push	{r7}
 8001186:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001188:	e7fe      	b.n	8001188 <HardFault_Handler+0x4>

0800118a <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800118a:	b480      	push	{r7}
 800118c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800118e:	e7fe      	b.n	800118e <MemManage_Handler+0x4>

08001190 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001190:	b480      	push	{r7}
 8001192:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001194:	e7fe      	b.n	8001194 <BusFault_Handler+0x4>

08001196 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001196:	b480      	push	{r7}
 8001198:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800119a:	e7fe      	b.n	800119a <UsageFault_Handler+0x4>

0800119c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800119c:	b480      	push	{r7}
 800119e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80011a0:	bf00      	nop
 80011a2:	46bd      	mov	sp, r7
 80011a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a8:	4770      	bx	lr
	...

080011ac <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80011b0:	4802      	ldr	r0, [pc, #8]	; (80011bc <DMA1_Channel5_IRQHandler+0x10>)
 80011b2:	f000 fbb6 	bl	8001922 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 80011b6:	bf00      	nop
 80011b8:	bd80      	pop	{r7, pc}
 80011ba:	bf00      	nop
 80011bc:	200001e8 	.word	0x200001e8

080011c0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b084      	sub	sp, #16
 80011c4:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80011c6:	4816      	ldr	r0, [pc, #88]	; (8001220 <USART1_IRQHandler+0x60>)
 80011c8:	f003 fa06 	bl	80045d8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */
      if(LL_USART_IsEnabledIT_IDLE(USART1) && LL_USART_IsActiveFlag_IDLE(USART1))
 80011cc:	4815      	ldr	r0, [pc, #84]	; (8001224 <USART1_IRQHandler+0x64>)
 80011ce:	f7ff ffc3 	bl	8001158 <LL_USART_IsEnabledIT_IDLE>
 80011d2:	4603      	mov	r3, r0
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d01e      	beq.n	8001216 <USART1_IRQHandler+0x56>
 80011d8:	4812      	ldr	r0, [pc, #72]	; (8001224 <USART1_IRQHandler+0x64>)
 80011da:	f7ff ff9d 	bl	8001118 <LL_USART_IsActiveFlag_IDLE>
 80011de:	4603      	mov	r3, r0
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d018      	beq.n	8001216 <USART1_IRQHandler+0x56>
      {
          LL_USART_ClearFlag_IDLE(USART1);        /* Clear IDLE line flag */
 80011e4:	480f      	ldr	r0, [pc, #60]	; (8001224 <USART1_IRQHandler+0x64>)
 80011e6:	f7ff ffaa 	bl	800113e <LL_USART_ClearFlag_IDLE>
          // Give a task notification to the UART2 Task
          BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 80011ea:	2300      	movs	r3, #0
 80011ec:	607b      	str	r3, [r7, #4]
          xTaskNotifyFromISR(xUartTaskHandle, UART1_IDLE_EVENT, eSetBits, &xHigherPriorityTaskWoken);
 80011ee:	4b0e      	ldr	r3, [pc, #56]	; (8001228 <USART1_IRQHandler+0x68>)
 80011f0:	6818      	ldr	r0, [r3, #0]
 80011f2:	1d3b      	adds	r3, r7, #4
 80011f4:	9300      	str	r3, [sp, #0]
 80011f6:	2300      	movs	r3, #0
 80011f8:	2201      	movs	r2, #1
 80011fa:	2101      	movs	r1, #1
 80011fc:	f006 f9fe 	bl	80075fc <xTaskGenericNotifyFromISR>
          portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	2b00      	cmp	r3, #0
 8001204:	d007      	beq.n	8001216 <USART1_IRQHandler+0x56>
 8001206:	4b09      	ldr	r3, [pc, #36]	; (800122c <USART1_IRQHandler+0x6c>)
 8001208:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800120c:	601a      	str	r2, [r3, #0]
 800120e:	f3bf 8f4f 	dsb	sy
 8001212:	f3bf 8f6f 	isb	sy
      }
  /* USER CODE END USART1_IRQn 1 */
}
 8001216:	bf00      	nop
 8001218:	3708      	adds	r7, #8
 800121a:	46bd      	mov	sp, r7
 800121c:	bd80      	pop	{r7, pc}
 800121e:	bf00      	nop
 8001220:	200000e0 	.word	0x200000e0
 8001224:	40013800 	.word	0x40013800
 8001228:	20000298 	.word	0x20000298
 800122c:	e000ed04 	.word	0xe000ed04

08001230 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001234:	4802      	ldr	r0, [pc, #8]	; (8001240 <USART2_IRQHandler+0x10>)
 8001236:	f003 f9cf 	bl	80045d8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800123a:	bf00      	nop
 800123c:	bd80      	pop	{r7, pc}
 800123e:	bf00      	nop
 8001240:	20000164 	.word	0x20000164

08001244 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001248:	4802      	ldr	r0, [pc, #8]	; (8001254 <TIM6_DAC_IRQHandler+0x10>)
 800124a:	f002 f95d 	bl	8003508 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800124e:	bf00      	nop
 8001250:	bd80      	pop	{r7, pc}
 8001252:	bf00      	nop
 8001254:	20000244 	.word	0x20000244

08001258 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b086      	sub	sp, #24
 800125c:	af00      	add	r7, sp, #0
 800125e:	60f8      	str	r0, [r7, #12]
 8001260:	60b9      	str	r1, [r7, #8]
 8001262:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001264:	2300      	movs	r3, #0
 8001266:	617b      	str	r3, [r7, #20]
 8001268:	e00a      	b.n	8001280 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800126a:	f3af 8000 	nop.w
 800126e:	4601      	mov	r1, r0
 8001270:	68bb      	ldr	r3, [r7, #8]
 8001272:	1c5a      	adds	r2, r3, #1
 8001274:	60ba      	str	r2, [r7, #8]
 8001276:	b2ca      	uxtb	r2, r1
 8001278:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800127a:	697b      	ldr	r3, [r7, #20]
 800127c:	3301      	adds	r3, #1
 800127e:	617b      	str	r3, [r7, #20]
 8001280:	697a      	ldr	r2, [r7, #20]
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	429a      	cmp	r2, r3
 8001286:	dbf0      	blt.n	800126a <_read+0x12>
	}

return len;
 8001288:	687b      	ldr	r3, [r7, #4]
}
 800128a:	4618      	mov	r0, r3
 800128c:	3718      	adds	r7, #24
 800128e:	46bd      	mov	sp, r7
 8001290:	bd80      	pop	{r7, pc}

08001292 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001292:	b580      	push	{r7, lr}
 8001294:	b086      	sub	sp, #24
 8001296:	af00      	add	r7, sp, #0
 8001298:	60f8      	str	r0, [r7, #12]
 800129a:	60b9      	str	r1, [r7, #8]
 800129c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800129e:	2300      	movs	r3, #0
 80012a0:	617b      	str	r3, [r7, #20]
 80012a2:	e009      	b.n	80012b8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80012a4:	68bb      	ldr	r3, [r7, #8]
 80012a6:	1c5a      	adds	r2, r3, #1
 80012a8:	60ba      	str	r2, [r7, #8]
 80012aa:	781b      	ldrb	r3, [r3, #0]
 80012ac:	4618      	mov	r0, r3
 80012ae:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012b2:	697b      	ldr	r3, [r7, #20]
 80012b4:	3301      	adds	r3, #1
 80012b6:	617b      	str	r3, [r7, #20]
 80012b8:	697a      	ldr	r2, [r7, #20]
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	429a      	cmp	r2, r3
 80012be:	dbf1      	blt.n	80012a4 <_write+0x12>
	}
	return len;
 80012c0:	687b      	ldr	r3, [r7, #4]
}
 80012c2:	4618      	mov	r0, r3
 80012c4:	3718      	adds	r7, #24
 80012c6:	46bd      	mov	sp, r7
 80012c8:	bd80      	pop	{r7, pc}

080012ca <_close>:

int _close(int file)
{
 80012ca:	b480      	push	{r7}
 80012cc:	b083      	sub	sp, #12
 80012ce:	af00      	add	r7, sp, #0
 80012d0:	6078      	str	r0, [r7, #4]
	return -1;
 80012d2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80012d6:	4618      	mov	r0, r3
 80012d8:	370c      	adds	r7, #12
 80012da:	46bd      	mov	sp, r7
 80012dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e0:	4770      	bx	lr

080012e2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80012e2:	b480      	push	{r7}
 80012e4:	b083      	sub	sp, #12
 80012e6:	af00      	add	r7, sp, #0
 80012e8:	6078      	str	r0, [r7, #4]
 80012ea:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80012ec:	683b      	ldr	r3, [r7, #0]
 80012ee:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80012f2:	605a      	str	r2, [r3, #4]
	return 0;
 80012f4:	2300      	movs	r3, #0
}
 80012f6:	4618      	mov	r0, r3
 80012f8:	370c      	adds	r7, #12
 80012fa:	46bd      	mov	sp, r7
 80012fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001300:	4770      	bx	lr

08001302 <_isatty>:

int _isatty(int file)
{
 8001302:	b480      	push	{r7}
 8001304:	b083      	sub	sp, #12
 8001306:	af00      	add	r7, sp, #0
 8001308:	6078      	str	r0, [r7, #4]
	return 1;
 800130a:	2301      	movs	r3, #1
}
 800130c:	4618      	mov	r0, r3
 800130e:	370c      	adds	r7, #12
 8001310:	46bd      	mov	sp, r7
 8001312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001316:	4770      	bx	lr

08001318 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001318:	b480      	push	{r7}
 800131a:	b085      	sub	sp, #20
 800131c:	af00      	add	r7, sp, #0
 800131e:	60f8      	str	r0, [r7, #12]
 8001320:	60b9      	str	r1, [r7, #8]
 8001322:	607a      	str	r2, [r7, #4]
	return 0;
 8001324:	2300      	movs	r3, #0
}
 8001326:	4618      	mov	r0, r3
 8001328:	3714      	adds	r7, #20
 800132a:	46bd      	mov	sp, r7
 800132c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001330:	4770      	bx	lr
	...

08001334 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b086      	sub	sp, #24
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800133c:	4a14      	ldr	r2, [pc, #80]	; (8001390 <_sbrk+0x5c>)
 800133e:	4b15      	ldr	r3, [pc, #84]	; (8001394 <_sbrk+0x60>)
 8001340:	1ad3      	subs	r3, r2, r3
 8001342:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001344:	697b      	ldr	r3, [r7, #20]
 8001346:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001348:	4b13      	ldr	r3, [pc, #76]	; (8001398 <_sbrk+0x64>)
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	2b00      	cmp	r3, #0
 800134e:	d102      	bne.n	8001356 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001350:	4b11      	ldr	r3, [pc, #68]	; (8001398 <_sbrk+0x64>)
 8001352:	4a12      	ldr	r2, [pc, #72]	; (800139c <_sbrk+0x68>)
 8001354:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001356:	4b10      	ldr	r3, [pc, #64]	; (8001398 <_sbrk+0x64>)
 8001358:	681a      	ldr	r2, [r3, #0]
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	4413      	add	r3, r2
 800135e:	693a      	ldr	r2, [r7, #16]
 8001360:	429a      	cmp	r2, r3
 8001362:	d207      	bcs.n	8001374 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001364:	f007 fa0a 	bl	800877c <__errno>
 8001368:	4603      	mov	r3, r0
 800136a:	220c      	movs	r2, #12
 800136c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800136e:	f04f 33ff 	mov.w	r3, #4294967295
 8001372:	e009      	b.n	8001388 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001374:	4b08      	ldr	r3, [pc, #32]	; (8001398 <_sbrk+0x64>)
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800137a:	4b07      	ldr	r3, [pc, #28]	; (8001398 <_sbrk+0x64>)
 800137c:	681a      	ldr	r2, [r3, #0]
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	4413      	add	r3, r2
 8001382:	4a05      	ldr	r2, [pc, #20]	; (8001398 <_sbrk+0x64>)
 8001384:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001386:	68fb      	ldr	r3, [r7, #12]
}
 8001388:	4618      	mov	r0, r3
 800138a:	3718      	adds	r7, #24
 800138c:	46bd      	mov	sp, r7
 800138e:	bd80      	pop	{r7, pc}
 8001390:	20010000 	.word	0x20010000
 8001394:	00000400 	.word	0x00000400
 8001398:	20000290 	.word	0x20000290
 800139c:	20001c78 	.word	0x20001c78

080013a0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80013a0:	b480      	push	{r7}
 80013a2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80013a4:	4b06      	ldr	r3, [pc, #24]	; (80013c0 <SystemInit+0x20>)
 80013a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80013aa:	4a05      	ldr	r2, [pc, #20]	; (80013c0 <SystemInit+0x20>)
 80013ac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80013b0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80013b4:	bf00      	nop
 80013b6:	46bd      	mov	sp, r7
 80013b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013bc:	4770      	bx	lr
 80013be:	bf00      	nop
 80013c0:	e000ed00 	.word	0xe000ed00

080013c4 <HAL_UART_RxCpltCallback>:
	}
}

// Interrupt callback routine for UART
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b086      	sub	sp, #24
 80013c8:	af02      	add	r7, sp, #8
 80013ca:	6078      	str	r0, [r7, #4]
  if(huart->Instance == USART2) {
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	4a11      	ldr	r2, [pc, #68]	; (8001418 <HAL_UART_RxCpltCallback+0x54>)
 80013d2:	4293      	cmp	r3, r2
 80013d4:	d11b      	bne.n	800140e <HAL_UART_RxCpltCallback+0x4a>
	  BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 80013d6:	2300      	movs	r3, #0
 80013d8:	60fb      	str	r3, [r7, #12]
	  xTaskNotifyFromISR(xUartTaskHandle, UART2_EVENT, eSetBits, &xHigherPriorityTaskWoken);
 80013da:	4b10      	ldr	r3, [pc, #64]	; (800141c <HAL_UART_RxCpltCallback+0x58>)
 80013dc:	6818      	ldr	r0, [r3, #0]
 80013de:	f107 030c 	add.w	r3, r7, #12
 80013e2:	9300      	str	r3, [sp, #0]
 80013e4:	2300      	movs	r3, #0
 80013e6:	2201      	movs	r2, #1
 80013e8:	2102      	movs	r1, #2
 80013ea:	f006 f907 	bl	80075fc <xTaskGenericNotifyFromISR>
	  portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 80013ee:	68fb      	ldr	r3, [r7, #12]
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d007      	beq.n	8001404 <HAL_UART_RxCpltCallback+0x40>
 80013f4:	4b0a      	ldr	r3, [pc, #40]	; (8001420 <HAL_UART_RxCpltCallback+0x5c>)
 80013f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80013fa:	601a      	str	r2, [r3, #0]
 80013fc:	f3bf 8f4f 	dsb	sy
 8001400:	f3bf 8f6f 	isb	sy

	  HAL_UART_Receive_IT(&huart2, &uart2_rx_char, 1);
 8001404:	2201      	movs	r2, #1
 8001406:	4907      	ldr	r1, [pc, #28]	; (8001424 <HAL_UART_RxCpltCallback+0x60>)
 8001408:	4807      	ldr	r0, [pc, #28]	; (8001428 <HAL_UART_RxCpltCallback+0x64>)
 800140a:	f003 f88f 	bl	800452c <HAL_UART_Receive_IT>
  }
}
 800140e:	bf00      	nop
 8001410:	3710      	adds	r7, #16
 8001412:	46bd      	mov	sp, r7
 8001414:	bd80      	pop	{r7, pc}
 8001416:	bf00      	nop
 8001418:	40004400 	.word	0x40004400
 800141c:	20000298 	.word	0x20000298
 8001420:	e000ed04 	.word	0xe000ed04
 8001424:	20000294 	.word	0x20000294
 8001428:	20000164 	.word	0x20000164

0800142c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800142c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001464 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001430:	f7ff ffb6 	bl	80013a0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001434:	480c      	ldr	r0, [pc, #48]	; (8001468 <LoopForever+0x6>)
  ldr r1, =_edata
 8001436:	490d      	ldr	r1, [pc, #52]	; (800146c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001438:	4a0d      	ldr	r2, [pc, #52]	; (8001470 <LoopForever+0xe>)
  movs r3, #0
 800143a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800143c:	e002      	b.n	8001444 <LoopCopyDataInit>

0800143e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800143e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001440:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001442:	3304      	adds	r3, #4

08001444 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001444:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001446:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001448:	d3f9      	bcc.n	800143e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800144a:	4a0a      	ldr	r2, [pc, #40]	; (8001474 <LoopForever+0x12>)
  ldr r4, =_ebss
 800144c:	4c0a      	ldr	r4, [pc, #40]	; (8001478 <LoopForever+0x16>)
  movs r3, #0
 800144e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001450:	e001      	b.n	8001456 <LoopFillZerobss>

08001452 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001452:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001454:	3204      	adds	r2, #4

08001456 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001456:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001458:	d3fb      	bcc.n	8001452 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800145a:	f007 fa8b 	bl	8008974 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800145e:	f7ff f889 	bl	8000574 <main>

08001462 <LoopForever>:

LoopForever:
    b LoopForever
 8001462:	e7fe      	b.n	8001462 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001464:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001468:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800146c:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8001470:	080099e8 	.word	0x080099e8
  ldr r2, =_sbss
 8001474:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8001478:	20001c78 	.word	0x20001c78

0800147c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800147c:	e7fe      	b.n	800147c <ADC1_IRQHandler>

0800147e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800147e:	b580      	push	{r7, lr}
 8001480:	b082      	sub	sp, #8
 8001482:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001484:	2300      	movs	r3, #0
 8001486:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001488:	2003      	movs	r0, #3
 800148a:	f000 f8de 	bl	800164a <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800148e:	200f      	movs	r0, #15
 8001490:	f7ff fdc8 	bl	8001024 <HAL_InitTick>
 8001494:	4603      	mov	r3, r0
 8001496:	2b00      	cmp	r3, #0
 8001498:	d002      	beq.n	80014a0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800149a:	2301      	movs	r3, #1
 800149c:	71fb      	strb	r3, [r7, #7]
 800149e:	e001      	b.n	80014a4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80014a0:	f7ff fc5a 	bl	8000d58 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80014a4:	79fb      	ldrb	r3, [r7, #7]
}
 80014a6:	4618      	mov	r0, r3
 80014a8:	3708      	adds	r7, #8
 80014aa:	46bd      	mov	sp, r7
 80014ac:	bd80      	pop	{r7, pc}
	...

080014b0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014b0:	b480      	push	{r7}
 80014b2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80014b4:	4b06      	ldr	r3, [pc, #24]	; (80014d0 <HAL_IncTick+0x20>)
 80014b6:	781b      	ldrb	r3, [r3, #0]
 80014b8:	461a      	mov	r2, r3
 80014ba:	4b06      	ldr	r3, [pc, #24]	; (80014d4 <HAL_IncTick+0x24>)
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	4413      	add	r3, r2
 80014c0:	4a04      	ldr	r2, [pc, #16]	; (80014d4 <HAL_IncTick+0x24>)
 80014c2:	6013      	str	r3, [r2, #0]
}
 80014c4:	bf00      	nop
 80014c6:	46bd      	mov	sp, r7
 80014c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014cc:	4770      	bx	lr
 80014ce:	bf00      	nop
 80014d0:	2000000c 	.word	0x2000000c
 80014d4:	2000029c 	.word	0x2000029c

080014d8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014d8:	b480      	push	{r7}
 80014da:	af00      	add	r7, sp, #0
  return uwTick;
 80014dc:	4b03      	ldr	r3, [pc, #12]	; (80014ec <HAL_GetTick+0x14>)
 80014de:	681b      	ldr	r3, [r3, #0]
}
 80014e0:	4618      	mov	r0, r3
 80014e2:	46bd      	mov	sp, r7
 80014e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e8:	4770      	bx	lr
 80014ea:	bf00      	nop
 80014ec:	2000029c 	.word	0x2000029c

080014f0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014f0:	b480      	push	{r7}
 80014f2:	b085      	sub	sp, #20
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	f003 0307 	and.w	r3, r3, #7
 80014fe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001500:	4b0c      	ldr	r3, [pc, #48]	; (8001534 <__NVIC_SetPriorityGrouping+0x44>)
 8001502:	68db      	ldr	r3, [r3, #12]
 8001504:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001506:	68ba      	ldr	r2, [r7, #8]
 8001508:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800150c:	4013      	ands	r3, r2
 800150e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001514:	68bb      	ldr	r3, [r7, #8]
 8001516:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001518:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800151c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001520:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001522:	4a04      	ldr	r2, [pc, #16]	; (8001534 <__NVIC_SetPriorityGrouping+0x44>)
 8001524:	68bb      	ldr	r3, [r7, #8]
 8001526:	60d3      	str	r3, [r2, #12]
}
 8001528:	bf00      	nop
 800152a:	3714      	adds	r7, #20
 800152c:	46bd      	mov	sp, r7
 800152e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001532:	4770      	bx	lr
 8001534:	e000ed00 	.word	0xe000ed00

08001538 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001538:	b480      	push	{r7}
 800153a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800153c:	4b04      	ldr	r3, [pc, #16]	; (8001550 <__NVIC_GetPriorityGrouping+0x18>)
 800153e:	68db      	ldr	r3, [r3, #12]
 8001540:	0a1b      	lsrs	r3, r3, #8
 8001542:	f003 0307 	and.w	r3, r3, #7
}
 8001546:	4618      	mov	r0, r3
 8001548:	46bd      	mov	sp, r7
 800154a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154e:	4770      	bx	lr
 8001550:	e000ed00 	.word	0xe000ed00

08001554 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001554:	b480      	push	{r7}
 8001556:	b083      	sub	sp, #12
 8001558:	af00      	add	r7, sp, #0
 800155a:	4603      	mov	r3, r0
 800155c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800155e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001562:	2b00      	cmp	r3, #0
 8001564:	db0b      	blt.n	800157e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001566:	79fb      	ldrb	r3, [r7, #7]
 8001568:	f003 021f 	and.w	r2, r3, #31
 800156c:	4907      	ldr	r1, [pc, #28]	; (800158c <__NVIC_EnableIRQ+0x38>)
 800156e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001572:	095b      	lsrs	r3, r3, #5
 8001574:	2001      	movs	r0, #1
 8001576:	fa00 f202 	lsl.w	r2, r0, r2
 800157a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800157e:	bf00      	nop
 8001580:	370c      	adds	r7, #12
 8001582:	46bd      	mov	sp, r7
 8001584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001588:	4770      	bx	lr
 800158a:	bf00      	nop
 800158c:	e000e100 	.word	0xe000e100

08001590 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001590:	b480      	push	{r7}
 8001592:	b083      	sub	sp, #12
 8001594:	af00      	add	r7, sp, #0
 8001596:	4603      	mov	r3, r0
 8001598:	6039      	str	r1, [r7, #0]
 800159a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800159c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	db0a      	blt.n	80015ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015a4:	683b      	ldr	r3, [r7, #0]
 80015a6:	b2da      	uxtb	r2, r3
 80015a8:	490c      	ldr	r1, [pc, #48]	; (80015dc <__NVIC_SetPriority+0x4c>)
 80015aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015ae:	0112      	lsls	r2, r2, #4
 80015b0:	b2d2      	uxtb	r2, r2
 80015b2:	440b      	add	r3, r1
 80015b4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80015b8:	e00a      	b.n	80015d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015ba:	683b      	ldr	r3, [r7, #0]
 80015bc:	b2da      	uxtb	r2, r3
 80015be:	4908      	ldr	r1, [pc, #32]	; (80015e0 <__NVIC_SetPriority+0x50>)
 80015c0:	79fb      	ldrb	r3, [r7, #7]
 80015c2:	f003 030f 	and.w	r3, r3, #15
 80015c6:	3b04      	subs	r3, #4
 80015c8:	0112      	lsls	r2, r2, #4
 80015ca:	b2d2      	uxtb	r2, r2
 80015cc:	440b      	add	r3, r1
 80015ce:	761a      	strb	r2, [r3, #24]
}
 80015d0:	bf00      	nop
 80015d2:	370c      	adds	r7, #12
 80015d4:	46bd      	mov	sp, r7
 80015d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015da:	4770      	bx	lr
 80015dc:	e000e100 	.word	0xe000e100
 80015e0:	e000ed00 	.word	0xe000ed00

080015e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015e4:	b480      	push	{r7}
 80015e6:	b089      	sub	sp, #36	; 0x24
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	60f8      	str	r0, [r7, #12]
 80015ec:	60b9      	str	r1, [r7, #8]
 80015ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	f003 0307 	and.w	r3, r3, #7
 80015f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80015f8:	69fb      	ldr	r3, [r7, #28]
 80015fa:	f1c3 0307 	rsb	r3, r3, #7
 80015fe:	2b04      	cmp	r3, #4
 8001600:	bf28      	it	cs
 8001602:	2304      	movcs	r3, #4
 8001604:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001606:	69fb      	ldr	r3, [r7, #28]
 8001608:	3304      	adds	r3, #4
 800160a:	2b06      	cmp	r3, #6
 800160c:	d902      	bls.n	8001614 <NVIC_EncodePriority+0x30>
 800160e:	69fb      	ldr	r3, [r7, #28]
 8001610:	3b03      	subs	r3, #3
 8001612:	e000      	b.n	8001616 <NVIC_EncodePriority+0x32>
 8001614:	2300      	movs	r3, #0
 8001616:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001618:	f04f 32ff 	mov.w	r2, #4294967295
 800161c:	69bb      	ldr	r3, [r7, #24]
 800161e:	fa02 f303 	lsl.w	r3, r2, r3
 8001622:	43da      	mvns	r2, r3
 8001624:	68bb      	ldr	r3, [r7, #8]
 8001626:	401a      	ands	r2, r3
 8001628:	697b      	ldr	r3, [r7, #20]
 800162a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800162c:	f04f 31ff 	mov.w	r1, #4294967295
 8001630:	697b      	ldr	r3, [r7, #20]
 8001632:	fa01 f303 	lsl.w	r3, r1, r3
 8001636:	43d9      	mvns	r1, r3
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800163c:	4313      	orrs	r3, r2
         );
}
 800163e:	4618      	mov	r0, r3
 8001640:	3724      	adds	r7, #36	; 0x24
 8001642:	46bd      	mov	sp, r7
 8001644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001648:	4770      	bx	lr

0800164a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800164a:	b580      	push	{r7, lr}
 800164c:	b082      	sub	sp, #8
 800164e:	af00      	add	r7, sp, #0
 8001650:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001652:	6878      	ldr	r0, [r7, #4]
 8001654:	f7ff ff4c 	bl	80014f0 <__NVIC_SetPriorityGrouping>
}
 8001658:	bf00      	nop
 800165a:	3708      	adds	r7, #8
 800165c:	46bd      	mov	sp, r7
 800165e:	bd80      	pop	{r7, pc}

08001660 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b086      	sub	sp, #24
 8001664:	af00      	add	r7, sp, #0
 8001666:	4603      	mov	r3, r0
 8001668:	60b9      	str	r1, [r7, #8]
 800166a:	607a      	str	r2, [r7, #4]
 800166c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800166e:	2300      	movs	r3, #0
 8001670:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001672:	f7ff ff61 	bl	8001538 <__NVIC_GetPriorityGrouping>
 8001676:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001678:	687a      	ldr	r2, [r7, #4]
 800167a:	68b9      	ldr	r1, [r7, #8]
 800167c:	6978      	ldr	r0, [r7, #20]
 800167e:	f7ff ffb1 	bl	80015e4 <NVIC_EncodePriority>
 8001682:	4602      	mov	r2, r0
 8001684:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001688:	4611      	mov	r1, r2
 800168a:	4618      	mov	r0, r3
 800168c:	f7ff ff80 	bl	8001590 <__NVIC_SetPriority>
}
 8001690:	bf00      	nop
 8001692:	3718      	adds	r7, #24
 8001694:	46bd      	mov	sp, r7
 8001696:	bd80      	pop	{r7, pc}

08001698 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b082      	sub	sp, #8
 800169c:	af00      	add	r7, sp, #0
 800169e:	4603      	mov	r3, r0
 80016a0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80016a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016a6:	4618      	mov	r0, r3
 80016a8:	f7ff ff54 	bl	8001554 <__NVIC_EnableIRQ>
}
 80016ac:	bf00      	nop
 80016ae:	3708      	adds	r7, #8
 80016b0:	46bd      	mov	sp, r7
 80016b2:	bd80      	pop	{r7, pc}

080016b4 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80016b4:	b480      	push	{r7}
 80016b6:	b085      	sub	sp, #20
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d101      	bne.n	80016c6 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80016c2:	2301      	movs	r3, #1
 80016c4:	e098      	b.n	80017f8 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	461a      	mov	r2, r3
 80016cc:	4b4d      	ldr	r3, [pc, #308]	; (8001804 <HAL_DMA_Init+0x150>)
 80016ce:	429a      	cmp	r2, r3
 80016d0:	d80f      	bhi.n	80016f2 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	461a      	mov	r2, r3
 80016d8:	4b4b      	ldr	r3, [pc, #300]	; (8001808 <HAL_DMA_Init+0x154>)
 80016da:	4413      	add	r3, r2
 80016dc:	4a4b      	ldr	r2, [pc, #300]	; (800180c <HAL_DMA_Init+0x158>)
 80016de:	fba2 2303 	umull	r2, r3, r2, r3
 80016e2:	091b      	lsrs	r3, r3, #4
 80016e4:	009a      	lsls	r2, r3, #2
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	4a48      	ldr	r2, [pc, #288]	; (8001810 <HAL_DMA_Init+0x15c>)
 80016ee:	641a      	str	r2, [r3, #64]	; 0x40
 80016f0:	e00e      	b.n	8001710 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	461a      	mov	r2, r3
 80016f8:	4b46      	ldr	r3, [pc, #280]	; (8001814 <HAL_DMA_Init+0x160>)
 80016fa:	4413      	add	r3, r2
 80016fc:	4a43      	ldr	r2, [pc, #268]	; (800180c <HAL_DMA_Init+0x158>)
 80016fe:	fba2 2303 	umull	r2, r3, r2, r3
 8001702:	091b      	lsrs	r3, r3, #4
 8001704:	009a      	lsls	r2, r3, #2
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	4a42      	ldr	r2, [pc, #264]	; (8001818 <HAL_DMA_Init+0x164>)
 800170e:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	2202      	movs	r2, #2
 8001714:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8001726:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800172a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8001734:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	691b      	ldr	r3, [r3, #16]
 800173a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001740:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	699b      	ldr	r3, [r3, #24]
 8001746:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800174c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	6a1b      	ldr	r3, [r3, #32]
 8001752:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001754:	68fa      	ldr	r2, [r7, #12]
 8001756:	4313      	orrs	r3, r2
 8001758:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	68fa      	ldr	r2, [r7, #12]
 8001760:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	689b      	ldr	r3, [r3, #8]
 8001766:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800176a:	d039      	beq.n	80017e0 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001770:	4a27      	ldr	r2, [pc, #156]	; (8001810 <HAL_DMA_Init+0x15c>)
 8001772:	4293      	cmp	r3, r2
 8001774:	d11a      	bne.n	80017ac <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8001776:	4b29      	ldr	r3, [pc, #164]	; (800181c <HAL_DMA_Init+0x168>)
 8001778:	681a      	ldr	r2, [r3, #0]
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800177e:	f003 031c 	and.w	r3, r3, #28
 8001782:	210f      	movs	r1, #15
 8001784:	fa01 f303 	lsl.w	r3, r1, r3
 8001788:	43db      	mvns	r3, r3
 800178a:	4924      	ldr	r1, [pc, #144]	; (800181c <HAL_DMA_Init+0x168>)
 800178c:	4013      	ands	r3, r2
 800178e:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8001790:	4b22      	ldr	r3, [pc, #136]	; (800181c <HAL_DMA_Init+0x168>)
 8001792:	681a      	ldr	r2, [r3, #0]
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	6859      	ldr	r1, [r3, #4]
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800179c:	f003 031c 	and.w	r3, r3, #28
 80017a0:	fa01 f303 	lsl.w	r3, r1, r3
 80017a4:	491d      	ldr	r1, [pc, #116]	; (800181c <HAL_DMA_Init+0x168>)
 80017a6:	4313      	orrs	r3, r2
 80017a8:	600b      	str	r3, [r1, #0]
 80017aa:	e019      	b.n	80017e0 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80017ac:	4b1c      	ldr	r3, [pc, #112]	; (8001820 <HAL_DMA_Init+0x16c>)
 80017ae:	681a      	ldr	r2, [r3, #0]
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017b4:	f003 031c 	and.w	r3, r3, #28
 80017b8:	210f      	movs	r1, #15
 80017ba:	fa01 f303 	lsl.w	r3, r1, r3
 80017be:	43db      	mvns	r3, r3
 80017c0:	4917      	ldr	r1, [pc, #92]	; (8001820 <HAL_DMA_Init+0x16c>)
 80017c2:	4013      	ands	r3, r2
 80017c4:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80017c6:	4b16      	ldr	r3, [pc, #88]	; (8001820 <HAL_DMA_Init+0x16c>)
 80017c8:	681a      	ldr	r2, [r3, #0]
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	6859      	ldr	r1, [r3, #4]
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017d2:	f003 031c 	and.w	r3, r3, #28
 80017d6:	fa01 f303 	lsl.w	r3, r1, r3
 80017da:	4911      	ldr	r1, [pc, #68]	; (8001820 <HAL_DMA_Init+0x16c>)
 80017dc:	4313      	orrs	r3, r2
 80017de:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	2200      	movs	r2, #0
 80017e4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	2201      	movs	r2, #1
 80017ea:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	2200      	movs	r2, #0
 80017f2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80017f6:	2300      	movs	r3, #0
}
 80017f8:	4618      	mov	r0, r3
 80017fa:	3714      	adds	r7, #20
 80017fc:	46bd      	mov	sp, r7
 80017fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001802:	4770      	bx	lr
 8001804:	40020407 	.word	0x40020407
 8001808:	bffdfff8 	.word	0xbffdfff8
 800180c:	cccccccd 	.word	0xcccccccd
 8001810:	40020000 	.word	0x40020000
 8001814:	bffdfbf8 	.word	0xbffdfbf8
 8001818:	40020400 	.word	0x40020400
 800181c:	400200a8 	.word	0x400200a8
 8001820:	400204a8 	.word	0x400204a8

08001824 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001824:	b480      	push	{r7}
 8001826:	b085      	sub	sp, #20
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800182c:	2300      	movs	r3, #0
 800182e:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001836:	b2db      	uxtb	r3, r3
 8001838:	2b02      	cmp	r3, #2
 800183a:	d008      	beq.n	800184e <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	2204      	movs	r2, #4
 8001840:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	2200      	movs	r2, #0
 8001846:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800184a:	2301      	movs	r3, #1
 800184c:	e022      	b.n	8001894 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	681a      	ldr	r2, [r3, #0]
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	f022 020e 	bic.w	r2, r2, #14
 800185c:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	681a      	ldr	r2, [r3, #0]
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	f022 0201 	bic.w	r2, r2, #1
 800186c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001872:	f003 021c 	and.w	r2, r3, #28
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800187a:	2101      	movs	r1, #1
 800187c:	fa01 f202 	lsl.w	r2, r1, r2
 8001880:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	2201      	movs	r2, #1
 8001886:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	2200      	movs	r2, #0
 800188e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8001892:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8001894:	4618      	mov	r0, r3
 8001896:	3714      	adds	r7, #20
 8001898:	46bd      	mov	sp, r7
 800189a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189e:	4770      	bx	lr

080018a0 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b084      	sub	sp, #16
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80018a8:	2300      	movs	r3, #0
 80018aa:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80018b2:	b2db      	uxtb	r3, r3
 80018b4:	2b02      	cmp	r3, #2
 80018b6:	d005      	beq.n	80018c4 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	2204      	movs	r2, #4
 80018bc:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80018be:	2301      	movs	r3, #1
 80018c0:	73fb      	strb	r3, [r7, #15]
 80018c2:	e029      	b.n	8001918 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	681a      	ldr	r2, [r3, #0]
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	f022 020e 	bic.w	r2, r2, #14
 80018d2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	681a      	ldr	r2, [r3, #0]
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	f022 0201 	bic.w	r2, r2, #1
 80018e2:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018e8:	f003 021c 	and.w	r2, r3, #28
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018f0:	2101      	movs	r1, #1
 80018f2:	fa01 f202 	lsl.w	r2, r1, r2
 80018f6:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	2201      	movs	r2, #1
 80018fc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	2200      	movs	r2, #0
 8001904:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800190c:	2b00      	cmp	r3, #0
 800190e:	d003      	beq.n	8001918 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001914:	6878      	ldr	r0, [r7, #4]
 8001916:	4798      	blx	r3
    }
  }
  return status;
 8001918:	7bfb      	ldrb	r3, [r7, #15]
}
 800191a:	4618      	mov	r0, r3
 800191c:	3710      	adds	r7, #16
 800191e:	46bd      	mov	sp, r7
 8001920:	bd80      	pop	{r7, pc}

08001922 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001922:	b580      	push	{r7, lr}
 8001924:	b084      	sub	sp, #16
 8001926:	af00      	add	r7, sp, #0
 8001928:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800193e:	f003 031c 	and.w	r3, r3, #28
 8001942:	2204      	movs	r2, #4
 8001944:	409a      	lsls	r2, r3
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	4013      	ands	r3, r2
 800194a:	2b00      	cmp	r3, #0
 800194c:	d026      	beq.n	800199c <HAL_DMA_IRQHandler+0x7a>
 800194e:	68bb      	ldr	r3, [r7, #8]
 8001950:	f003 0304 	and.w	r3, r3, #4
 8001954:	2b00      	cmp	r3, #0
 8001956:	d021      	beq.n	800199c <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	f003 0320 	and.w	r3, r3, #32
 8001962:	2b00      	cmp	r3, #0
 8001964:	d107      	bne.n	8001976 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	681a      	ldr	r2, [r3, #0]
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	f022 0204 	bic.w	r2, r2, #4
 8001974:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800197a:	f003 021c 	and.w	r2, r3, #28
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001982:	2104      	movs	r1, #4
 8001984:	fa01 f202 	lsl.w	r2, r1, r2
 8001988:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800198e:	2b00      	cmp	r3, #0
 8001990:	d071      	beq.n	8001a76 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001996:	6878      	ldr	r0, [r7, #4]
 8001998:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 800199a:	e06c      	b.n	8001a76 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019a0:	f003 031c 	and.w	r3, r3, #28
 80019a4:	2202      	movs	r2, #2
 80019a6:	409a      	lsls	r2, r3
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	4013      	ands	r3, r2
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d02e      	beq.n	8001a0e <HAL_DMA_IRQHandler+0xec>
 80019b0:	68bb      	ldr	r3, [r7, #8]
 80019b2:	f003 0302 	and.w	r3, r3, #2
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d029      	beq.n	8001a0e <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	f003 0320 	and.w	r3, r3, #32
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d10b      	bne.n	80019e0 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	681a      	ldr	r2, [r3, #0]
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	f022 020a 	bic.w	r2, r2, #10
 80019d6:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	2201      	movs	r2, #1
 80019dc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019e4:	f003 021c 	and.w	r2, r3, #28
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019ec:	2102      	movs	r1, #2
 80019ee:	fa01 f202 	lsl.w	r2, r1, r2
 80019f2:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	2200      	movs	r2, #0
 80019f8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d038      	beq.n	8001a76 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a08:	6878      	ldr	r0, [r7, #4]
 8001a0a:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001a0c:	e033      	b.n	8001a76 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a12:	f003 031c 	and.w	r3, r3, #28
 8001a16:	2208      	movs	r2, #8
 8001a18:	409a      	lsls	r2, r3
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	4013      	ands	r3, r2
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d02a      	beq.n	8001a78 <HAL_DMA_IRQHandler+0x156>
 8001a22:	68bb      	ldr	r3, [r7, #8]
 8001a24:	f003 0308 	and.w	r3, r3, #8
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d025      	beq.n	8001a78 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	681a      	ldr	r2, [r3, #0]
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f022 020e 	bic.w	r2, r2, #14
 8001a3a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a40:	f003 021c 	and.w	r2, r3, #28
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a48:	2101      	movs	r1, #1
 8001a4a:	fa01 f202 	lsl.w	r2, r1, r2
 8001a4e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	2201      	movs	r2, #1
 8001a54:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	2201      	movs	r2, #1
 8001a5a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	2200      	movs	r2, #0
 8001a62:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d004      	beq.n	8001a78 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a72:	6878      	ldr	r0, [r7, #4]
 8001a74:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001a76:	bf00      	nop
 8001a78:	bf00      	nop
}
 8001a7a:	3710      	adds	r7, #16
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	bd80      	pop	{r7, pc}

08001a80 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a80:	b480      	push	{r7}
 8001a82:	b087      	sub	sp, #28
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
 8001a88:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a8e:	e148      	b.n	8001d22 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001a90:	683b      	ldr	r3, [r7, #0]
 8001a92:	681a      	ldr	r2, [r3, #0]
 8001a94:	2101      	movs	r1, #1
 8001a96:	697b      	ldr	r3, [r7, #20]
 8001a98:	fa01 f303 	lsl.w	r3, r1, r3
 8001a9c:	4013      	ands	r3, r2
 8001a9e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	f000 813a 	beq.w	8001d1c <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001aa8:	683b      	ldr	r3, [r7, #0]
 8001aaa:	685b      	ldr	r3, [r3, #4]
 8001aac:	f003 0303 	and.w	r3, r3, #3
 8001ab0:	2b01      	cmp	r3, #1
 8001ab2:	d005      	beq.n	8001ac0 <HAL_GPIO_Init+0x40>
 8001ab4:	683b      	ldr	r3, [r7, #0]
 8001ab6:	685b      	ldr	r3, [r3, #4]
 8001ab8:	f003 0303 	and.w	r3, r3, #3
 8001abc:	2b02      	cmp	r3, #2
 8001abe:	d130      	bne.n	8001b22 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	689b      	ldr	r3, [r3, #8]
 8001ac4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001ac6:	697b      	ldr	r3, [r7, #20]
 8001ac8:	005b      	lsls	r3, r3, #1
 8001aca:	2203      	movs	r2, #3
 8001acc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad0:	43db      	mvns	r3, r3
 8001ad2:	693a      	ldr	r2, [r7, #16]
 8001ad4:	4013      	ands	r3, r2
 8001ad6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001ad8:	683b      	ldr	r3, [r7, #0]
 8001ada:	68da      	ldr	r2, [r3, #12]
 8001adc:	697b      	ldr	r3, [r7, #20]
 8001ade:	005b      	lsls	r3, r3, #1
 8001ae0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae4:	693a      	ldr	r2, [r7, #16]
 8001ae6:	4313      	orrs	r3, r2
 8001ae8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	693a      	ldr	r2, [r7, #16]
 8001aee:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	685b      	ldr	r3, [r3, #4]
 8001af4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001af6:	2201      	movs	r2, #1
 8001af8:	697b      	ldr	r3, [r7, #20]
 8001afa:	fa02 f303 	lsl.w	r3, r2, r3
 8001afe:	43db      	mvns	r3, r3
 8001b00:	693a      	ldr	r2, [r7, #16]
 8001b02:	4013      	ands	r3, r2
 8001b04:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001b06:	683b      	ldr	r3, [r7, #0]
 8001b08:	685b      	ldr	r3, [r3, #4]
 8001b0a:	091b      	lsrs	r3, r3, #4
 8001b0c:	f003 0201 	and.w	r2, r3, #1
 8001b10:	697b      	ldr	r3, [r7, #20]
 8001b12:	fa02 f303 	lsl.w	r3, r2, r3
 8001b16:	693a      	ldr	r2, [r7, #16]
 8001b18:	4313      	orrs	r3, r2
 8001b1a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	693a      	ldr	r2, [r7, #16]
 8001b20:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001b22:	683b      	ldr	r3, [r7, #0]
 8001b24:	685b      	ldr	r3, [r3, #4]
 8001b26:	f003 0303 	and.w	r3, r3, #3
 8001b2a:	2b03      	cmp	r3, #3
 8001b2c:	d017      	beq.n	8001b5e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	68db      	ldr	r3, [r3, #12]
 8001b32:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001b34:	697b      	ldr	r3, [r7, #20]
 8001b36:	005b      	lsls	r3, r3, #1
 8001b38:	2203      	movs	r2, #3
 8001b3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b3e:	43db      	mvns	r3, r3
 8001b40:	693a      	ldr	r2, [r7, #16]
 8001b42:	4013      	ands	r3, r2
 8001b44:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001b46:	683b      	ldr	r3, [r7, #0]
 8001b48:	689a      	ldr	r2, [r3, #8]
 8001b4a:	697b      	ldr	r3, [r7, #20]
 8001b4c:	005b      	lsls	r3, r3, #1
 8001b4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b52:	693a      	ldr	r2, [r7, #16]
 8001b54:	4313      	orrs	r3, r2
 8001b56:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	693a      	ldr	r2, [r7, #16]
 8001b5c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b5e:	683b      	ldr	r3, [r7, #0]
 8001b60:	685b      	ldr	r3, [r3, #4]
 8001b62:	f003 0303 	and.w	r3, r3, #3
 8001b66:	2b02      	cmp	r3, #2
 8001b68:	d123      	bne.n	8001bb2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001b6a:	697b      	ldr	r3, [r7, #20]
 8001b6c:	08da      	lsrs	r2, r3, #3
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	3208      	adds	r2, #8
 8001b72:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b76:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001b78:	697b      	ldr	r3, [r7, #20]
 8001b7a:	f003 0307 	and.w	r3, r3, #7
 8001b7e:	009b      	lsls	r3, r3, #2
 8001b80:	220f      	movs	r2, #15
 8001b82:	fa02 f303 	lsl.w	r3, r2, r3
 8001b86:	43db      	mvns	r3, r3
 8001b88:	693a      	ldr	r2, [r7, #16]
 8001b8a:	4013      	ands	r3, r2
 8001b8c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001b8e:	683b      	ldr	r3, [r7, #0]
 8001b90:	691a      	ldr	r2, [r3, #16]
 8001b92:	697b      	ldr	r3, [r7, #20]
 8001b94:	f003 0307 	and.w	r3, r3, #7
 8001b98:	009b      	lsls	r3, r3, #2
 8001b9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b9e:	693a      	ldr	r2, [r7, #16]
 8001ba0:	4313      	orrs	r3, r2
 8001ba2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001ba4:	697b      	ldr	r3, [r7, #20]
 8001ba6:	08da      	lsrs	r2, r3, #3
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	3208      	adds	r2, #8
 8001bac:	6939      	ldr	r1, [r7, #16]
 8001bae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001bb8:	697b      	ldr	r3, [r7, #20]
 8001bba:	005b      	lsls	r3, r3, #1
 8001bbc:	2203      	movs	r2, #3
 8001bbe:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc2:	43db      	mvns	r3, r3
 8001bc4:	693a      	ldr	r2, [r7, #16]
 8001bc6:	4013      	ands	r3, r2
 8001bc8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001bca:	683b      	ldr	r3, [r7, #0]
 8001bcc:	685b      	ldr	r3, [r3, #4]
 8001bce:	f003 0203 	and.w	r2, r3, #3
 8001bd2:	697b      	ldr	r3, [r7, #20]
 8001bd4:	005b      	lsls	r3, r3, #1
 8001bd6:	fa02 f303 	lsl.w	r3, r2, r3
 8001bda:	693a      	ldr	r2, [r7, #16]
 8001bdc:	4313      	orrs	r3, r2
 8001bde:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	693a      	ldr	r2, [r7, #16]
 8001be4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001be6:	683b      	ldr	r3, [r7, #0]
 8001be8:	685b      	ldr	r3, [r3, #4]
 8001bea:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	f000 8094 	beq.w	8001d1c <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bf4:	4b52      	ldr	r3, [pc, #328]	; (8001d40 <HAL_GPIO_Init+0x2c0>)
 8001bf6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001bf8:	4a51      	ldr	r2, [pc, #324]	; (8001d40 <HAL_GPIO_Init+0x2c0>)
 8001bfa:	f043 0301 	orr.w	r3, r3, #1
 8001bfe:	6613      	str	r3, [r2, #96]	; 0x60
 8001c00:	4b4f      	ldr	r3, [pc, #316]	; (8001d40 <HAL_GPIO_Init+0x2c0>)
 8001c02:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c04:	f003 0301 	and.w	r3, r3, #1
 8001c08:	60bb      	str	r3, [r7, #8]
 8001c0a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001c0c:	4a4d      	ldr	r2, [pc, #308]	; (8001d44 <HAL_GPIO_Init+0x2c4>)
 8001c0e:	697b      	ldr	r3, [r7, #20]
 8001c10:	089b      	lsrs	r3, r3, #2
 8001c12:	3302      	adds	r3, #2
 8001c14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c18:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001c1a:	697b      	ldr	r3, [r7, #20]
 8001c1c:	f003 0303 	and.w	r3, r3, #3
 8001c20:	009b      	lsls	r3, r3, #2
 8001c22:	220f      	movs	r2, #15
 8001c24:	fa02 f303 	lsl.w	r3, r2, r3
 8001c28:	43db      	mvns	r3, r3
 8001c2a:	693a      	ldr	r2, [r7, #16]
 8001c2c:	4013      	ands	r3, r2
 8001c2e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001c36:	d00d      	beq.n	8001c54 <HAL_GPIO_Init+0x1d4>
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	4a43      	ldr	r2, [pc, #268]	; (8001d48 <HAL_GPIO_Init+0x2c8>)
 8001c3c:	4293      	cmp	r3, r2
 8001c3e:	d007      	beq.n	8001c50 <HAL_GPIO_Init+0x1d0>
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	4a42      	ldr	r2, [pc, #264]	; (8001d4c <HAL_GPIO_Init+0x2cc>)
 8001c44:	4293      	cmp	r3, r2
 8001c46:	d101      	bne.n	8001c4c <HAL_GPIO_Init+0x1cc>
 8001c48:	2302      	movs	r3, #2
 8001c4a:	e004      	b.n	8001c56 <HAL_GPIO_Init+0x1d6>
 8001c4c:	2307      	movs	r3, #7
 8001c4e:	e002      	b.n	8001c56 <HAL_GPIO_Init+0x1d6>
 8001c50:	2301      	movs	r3, #1
 8001c52:	e000      	b.n	8001c56 <HAL_GPIO_Init+0x1d6>
 8001c54:	2300      	movs	r3, #0
 8001c56:	697a      	ldr	r2, [r7, #20]
 8001c58:	f002 0203 	and.w	r2, r2, #3
 8001c5c:	0092      	lsls	r2, r2, #2
 8001c5e:	4093      	lsls	r3, r2
 8001c60:	693a      	ldr	r2, [r7, #16]
 8001c62:	4313      	orrs	r3, r2
 8001c64:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001c66:	4937      	ldr	r1, [pc, #220]	; (8001d44 <HAL_GPIO_Init+0x2c4>)
 8001c68:	697b      	ldr	r3, [r7, #20]
 8001c6a:	089b      	lsrs	r3, r3, #2
 8001c6c:	3302      	adds	r3, #2
 8001c6e:	693a      	ldr	r2, [r7, #16]
 8001c70:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001c74:	4b36      	ldr	r3, [pc, #216]	; (8001d50 <HAL_GPIO_Init+0x2d0>)
 8001c76:	689b      	ldr	r3, [r3, #8]
 8001c78:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	43db      	mvns	r3, r3
 8001c7e:	693a      	ldr	r2, [r7, #16]
 8001c80:	4013      	ands	r3, r2
 8001c82:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001c84:	683b      	ldr	r3, [r7, #0]
 8001c86:	685b      	ldr	r3, [r3, #4]
 8001c88:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d003      	beq.n	8001c98 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8001c90:	693a      	ldr	r2, [r7, #16]
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	4313      	orrs	r3, r2
 8001c96:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001c98:	4a2d      	ldr	r2, [pc, #180]	; (8001d50 <HAL_GPIO_Init+0x2d0>)
 8001c9a:	693b      	ldr	r3, [r7, #16]
 8001c9c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001c9e:	4b2c      	ldr	r3, [pc, #176]	; (8001d50 <HAL_GPIO_Init+0x2d0>)
 8001ca0:	68db      	ldr	r3, [r3, #12]
 8001ca2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	43db      	mvns	r3, r3
 8001ca8:	693a      	ldr	r2, [r7, #16]
 8001caa:	4013      	ands	r3, r2
 8001cac:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001cae:	683b      	ldr	r3, [r7, #0]
 8001cb0:	685b      	ldr	r3, [r3, #4]
 8001cb2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d003      	beq.n	8001cc2 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8001cba:	693a      	ldr	r2, [r7, #16]
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	4313      	orrs	r3, r2
 8001cc0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001cc2:	4a23      	ldr	r2, [pc, #140]	; (8001d50 <HAL_GPIO_Init+0x2d0>)
 8001cc4:	693b      	ldr	r3, [r7, #16]
 8001cc6:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001cc8:	4b21      	ldr	r3, [pc, #132]	; (8001d50 <HAL_GPIO_Init+0x2d0>)
 8001cca:	685b      	ldr	r3, [r3, #4]
 8001ccc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	43db      	mvns	r3, r3
 8001cd2:	693a      	ldr	r2, [r7, #16]
 8001cd4:	4013      	ands	r3, r2
 8001cd6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001cd8:	683b      	ldr	r3, [r7, #0]
 8001cda:	685b      	ldr	r3, [r3, #4]
 8001cdc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d003      	beq.n	8001cec <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8001ce4:	693a      	ldr	r2, [r7, #16]
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	4313      	orrs	r3, r2
 8001cea:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001cec:	4a18      	ldr	r2, [pc, #96]	; (8001d50 <HAL_GPIO_Init+0x2d0>)
 8001cee:	693b      	ldr	r3, [r7, #16]
 8001cf0:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001cf2:	4b17      	ldr	r3, [pc, #92]	; (8001d50 <HAL_GPIO_Init+0x2d0>)
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	43db      	mvns	r3, r3
 8001cfc:	693a      	ldr	r2, [r7, #16]
 8001cfe:	4013      	ands	r3, r2
 8001d00:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001d02:	683b      	ldr	r3, [r7, #0]
 8001d04:	685b      	ldr	r3, [r3, #4]
 8001d06:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d003      	beq.n	8001d16 <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8001d0e:	693a      	ldr	r2, [r7, #16]
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	4313      	orrs	r3, r2
 8001d14:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001d16:	4a0e      	ldr	r2, [pc, #56]	; (8001d50 <HAL_GPIO_Init+0x2d0>)
 8001d18:	693b      	ldr	r3, [r7, #16]
 8001d1a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001d1c:	697b      	ldr	r3, [r7, #20]
 8001d1e:	3301      	adds	r3, #1
 8001d20:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d22:	683b      	ldr	r3, [r7, #0]
 8001d24:	681a      	ldr	r2, [r3, #0]
 8001d26:	697b      	ldr	r3, [r7, #20]
 8001d28:	fa22 f303 	lsr.w	r3, r2, r3
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	f47f aeaf 	bne.w	8001a90 <HAL_GPIO_Init+0x10>
  }
}
 8001d32:	bf00      	nop
 8001d34:	bf00      	nop
 8001d36:	371c      	adds	r7, #28
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3e:	4770      	bx	lr
 8001d40:	40021000 	.word	0x40021000
 8001d44:	40010000 	.word	0x40010000
 8001d48:	48000400 	.word	0x48000400
 8001d4c:	48000800 	.word	0x48000800
 8001d50:	40010400 	.word	0x40010400

08001d54 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d54:	b480      	push	{r7}
 8001d56:	b083      	sub	sp, #12
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
 8001d5c:	460b      	mov	r3, r1
 8001d5e:	807b      	strh	r3, [r7, #2]
 8001d60:	4613      	mov	r3, r2
 8001d62:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001d64:	787b      	ldrb	r3, [r7, #1]
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d003      	beq.n	8001d72 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001d6a:	887a      	ldrh	r2, [r7, #2]
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001d70:	e002      	b.n	8001d78 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001d72:	887a      	ldrh	r2, [r7, #2]
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001d78:	bf00      	nop
 8001d7a:	370c      	adds	r7, #12
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d82:	4770      	bx	lr

08001d84 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001d84:	b480      	push	{r7}
 8001d86:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001d88:	4b05      	ldr	r3, [pc, #20]	; (8001da0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	4a04      	ldr	r2, [pc, #16]	; (8001da0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001d8e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d92:	6013      	str	r3, [r2, #0]
}
 8001d94:	bf00      	nop
 8001d96:	46bd      	mov	sp, r7
 8001d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9c:	4770      	bx	lr
 8001d9e:	bf00      	nop
 8001da0:	40007000 	.word	0x40007000

08001da4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001da4:	b480      	push	{r7}
 8001da6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001da8:	4b04      	ldr	r3, [pc, #16]	; (8001dbc <HAL_PWREx_GetVoltageRange+0x18>)
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001db0:	4618      	mov	r0, r3
 8001db2:	46bd      	mov	sp, r7
 8001db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db8:	4770      	bx	lr
 8001dba:	bf00      	nop
 8001dbc:	40007000 	.word	0x40007000

08001dc0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001dc0:	b480      	push	{r7}
 8001dc2:	b085      	sub	sp, #20
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001dce:	d130      	bne.n	8001e32 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001dd0:	4b23      	ldr	r3, [pc, #140]	; (8001e60 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001dd8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001ddc:	d038      	beq.n	8001e50 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001dde:	4b20      	ldr	r3, [pc, #128]	; (8001e60 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001de6:	4a1e      	ldr	r2, [pc, #120]	; (8001e60 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001de8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001dec:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001dee:	4b1d      	ldr	r3, [pc, #116]	; (8001e64 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	2232      	movs	r2, #50	; 0x32
 8001df4:	fb02 f303 	mul.w	r3, r2, r3
 8001df8:	4a1b      	ldr	r2, [pc, #108]	; (8001e68 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001dfa:	fba2 2303 	umull	r2, r3, r2, r3
 8001dfe:	0c9b      	lsrs	r3, r3, #18
 8001e00:	3301      	adds	r3, #1
 8001e02:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001e04:	e002      	b.n	8001e0c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	3b01      	subs	r3, #1
 8001e0a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001e0c:	4b14      	ldr	r3, [pc, #80]	; (8001e60 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001e0e:	695b      	ldr	r3, [r3, #20]
 8001e10:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e14:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001e18:	d102      	bne.n	8001e20 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d1f2      	bne.n	8001e06 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001e20:	4b0f      	ldr	r3, [pc, #60]	; (8001e60 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001e22:	695b      	ldr	r3, [r3, #20]
 8001e24:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e28:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001e2c:	d110      	bne.n	8001e50 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001e2e:	2303      	movs	r3, #3
 8001e30:	e00f      	b.n	8001e52 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001e32:	4b0b      	ldr	r3, [pc, #44]	; (8001e60 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001e3a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001e3e:	d007      	beq.n	8001e50 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001e40:	4b07      	ldr	r3, [pc, #28]	; (8001e60 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001e48:	4a05      	ldr	r2, [pc, #20]	; (8001e60 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001e4a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001e4e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001e50:	2300      	movs	r3, #0
}
 8001e52:	4618      	mov	r0, r3
 8001e54:	3714      	adds	r7, #20
 8001e56:	46bd      	mov	sp, r7
 8001e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5c:	4770      	bx	lr
 8001e5e:	bf00      	nop
 8001e60:	40007000 	.word	0x40007000
 8001e64:	20000004 	.word	0x20000004
 8001e68:	431bde83 	.word	0x431bde83

08001e6c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b088      	sub	sp, #32
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d102      	bne.n	8001e80 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001e7a:	2301      	movs	r3, #1
 8001e7c:	f000 bc02 	b.w	8002684 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001e80:	4b96      	ldr	r3, [pc, #600]	; (80020dc <HAL_RCC_OscConfig+0x270>)
 8001e82:	689b      	ldr	r3, [r3, #8]
 8001e84:	f003 030c 	and.w	r3, r3, #12
 8001e88:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001e8a:	4b94      	ldr	r3, [pc, #592]	; (80020dc <HAL_RCC_OscConfig+0x270>)
 8001e8c:	68db      	ldr	r3, [r3, #12]
 8001e8e:	f003 0303 	and.w	r3, r3, #3
 8001e92:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f003 0310 	and.w	r3, r3, #16
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	f000 80e4 	beq.w	800206a <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001ea2:	69bb      	ldr	r3, [r7, #24]
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d007      	beq.n	8001eb8 <HAL_RCC_OscConfig+0x4c>
 8001ea8:	69bb      	ldr	r3, [r7, #24]
 8001eaa:	2b0c      	cmp	r3, #12
 8001eac:	f040 808b 	bne.w	8001fc6 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001eb0:	697b      	ldr	r3, [r7, #20]
 8001eb2:	2b01      	cmp	r3, #1
 8001eb4:	f040 8087 	bne.w	8001fc6 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001eb8:	4b88      	ldr	r3, [pc, #544]	; (80020dc <HAL_RCC_OscConfig+0x270>)
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f003 0302 	and.w	r3, r3, #2
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d005      	beq.n	8001ed0 <HAL_RCC_OscConfig+0x64>
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	699b      	ldr	r3, [r3, #24]
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d101      	bne.n	8001ed0 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8001ecc:	2301      	movs	r3, #1
 8001ece:	e3d9      	b.n	8002684 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	6a1a      	ldr	r2, [r3, #32]
 8001ed4:	4b81      	ldr	r3, [pc, #516]	; (80020dc <HAL_RCC_OscConfig+0x270>)
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f003 0308 	and.w	r3, r3, #8
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d004      	beq.n	8001eea <HAL_RCC_OscConfig+0x7e>
 8001ee0:	4b7e      	ldr	r3, [pc, #504]	; (80020dc <HAL_RCC_OscConfig+0x270>)
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001ee8:	e005      	b.n	8001ef6 <HAL_RCC_OscConfig+0x8a>
 8001eea:	4b7c      	ldr	r3, [pc, #496]	; (80020dc <HAL_RCC_OscConfig+0x270>)
 8001eec:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ef0:	091b      	lsrs	r3, r3, #4
 8001ef2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001ef6:	4293      	cmp	r3, r2
 8001ef8:	d223      	bcs.n	8001f42 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	6a1b      	ldr	r3, [r3, #32]
 8001efe:	4618      	mov	r0, r3
 8001f00:	f000 fdbe 	bl	8002a80 <RCC_SetFlashLatencyFromMSIRange>
 8001f04:	4603      	mov	r3, r0
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d001      	beq.n	8001f0e <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8001f0a:	2301      	movs	r3, #1
 8001f0c:	e3ba      	b.n	8002684 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001f0e:	4b73      	ldr	r3, [pc, #460]	; (80020dc <HAL_RCC_OscConfig+0x270>)
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	4a72      	ldr	r2, [pc, #456]	; (80020dc <HAL_RCC_OscConfig+0x270>)
 8001f14:	f043 0308 	orr.w	r3, r3, #8
 8001f18:	6013      	str	r3, [r2, #0]
 8001f1a:	4b70      	ldr	r3, [pc, #448]	; (80020dc <HAL_RCC_OscConfig+0x270>)
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	6a1b      	ldr	r3, [r3, #32]
 8001f26:	496d      	ldr	r1, [pc, #436]	; (80020dc <HAL_RCC_OscConfig+0x270>)
 8001f28:	4313      	orrs	r3, r2
 8001f2a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001f2c:	4b6b      	ldr	r3, [pc, #428]	; (80020dc <HAL_RCC_OscConfig+0x270>)
 8001f2e:	685b      	ldr	r3, [r3, #4]
 8001f30:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	69db      	ldr	r3, [r3, #28]
 8001f38:	021b      	lsls	r3, r3, #8
 8001f3a:	4968      	ldr	r1, [pc, #416]	; (80020dc <HAL_RCC_OscConfig+0x270>)
 8001f3c:	4313      	orrs	r3, r2
 8001f3e:	604b      	str	r3, [r1, #4]
 8001f40:	e025      	b.n	8001f8e <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001f42:	4b66      	ldr	r3, [pc, #408]	; (80020dc <HAL_RCC_OscConfig+0x270>)
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	4a65      	ldr	r2, [pc, #404]	; (80020dc <HAL_RCC_OscConfig+0x270>)
 8001f48:	f043 0308 	orr.w	r3, r3, #8
 8001f4c:	6013      	str	r3, [r2, #0]
 8001f4e:	4b63      	ldr	r3, [pc, #396]	; (80020dc <HAL_RCC_OscConfig+0x270>)
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	6a1b      	ldr	r3, [r3, #32]
 8001f5a:	4960      	ldr	r1, [pc, #384]	; (80020dc <HAL_RCC_OscConfig+0x270>)
 8001f5c:	4313      	orrs	r3, r2
 8001f5e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001f60:	4b5e      	ldr	r3, [pc, #376]	; (80020dc <HAL_RCC_OscConfig+0x270>)
 8001f62:	685b      	ldr	r3, [r3, #4]
 8001f64:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	69db      	ldr	r3, [r3, #28]
 8001f6c:	021b      	lsls	r3, r3, #8
 8001f6e:	495b      	ldr	r1, [pc, #364]	; (80020dc <HAL_RCC_OscConfig+0x270>)
 8001f70:	4313      	orrs	r3, r2
 8001f72:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001f74:	69bb      	ldr	r3, [r7, #24]
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d109      	bne.n	8001f8e <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	6a1b      	ldr	r3, [r3, #32]
 8001f7e:	4618      	mov	r0, r3
 8001f80:	f000 fd7e 	bl	8002a80 <RCC_SetFlashLatencyFromMSIRange>
 8001f84:	4603      	mov	r3, r0
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d001      	beq.n	8001f8e <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8001f8a:	2301      	movs	r3, #1
 8001f8c:	e37a      	b.n	8002684 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001f8e:	f000 fc81 	bl	8002894 <HAL_RCC_GetSysClockFreq>
 8001f92:	4602      	mov	r2, r0
 8001f94:	4b51      	ldr	r3, [pc, #324]	; (80020dc <HAL_RCC_OscConfig+0x270>)
 8001f96:	689b      	ldr	r3, [r3, #8]
 8001f98:	091b      	lsrs	r3, r3, #4
 8001f9a:	f003 030f 	and.w	r3, r3, #15
 8001f9e:	4950      	ldr	r1, [pc, #320]	; (80020e0 <HAL_RCC_OscConfig+0x274>)
 8001fa0:	5ccb      	ldrb	r3, [r1, r3]
 8001fa2:	f003 031f 	and.w	r3, r3, #31
 8001fa6:	fa22 f303 	lsr.w	r3, r2, r3
 8001faa:	4a4e      	ldr	r2, [pc, #312]	; (80020e4 <HAL_RCC_OscConfig+0x278>)
 8001fac:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001fae:	4b4e      	ldr	r3, [pc, #312]	; (80020e8 <HAL_RCC_OscConfig+0x27c>)
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	f7ff f836 	bl	8001024 <HAL_InitTick>
 8001fb8:	4603      	mov	r3, r0
 8001fba:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001fbc:	7bfb      	ldrb	r3, [r7, #15]
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d052      	beq.n	8002068 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8001fc2:	7bfb      	ldrb	r3, [r7, #15]
 8001fc4:	e35e      	b.n	8002684 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	699b      	ldr	r3, [r3, #24]
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d032      	beq.n	8002034 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001fce:	4b43      	ldr	r3, [pc, #268]	; (80020dc <HAL_RCC_OscConfig+0x270>)
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	4a42      	ldr	r2, [pc, #264]	; (80020dc <HAL_RCC_OscConfig+0x270>)
 8001fd4:	f043 0301 	orr.w	r3, r3, #1
 8001fd8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001fda:	f7ff fa7d 	bl	80014d8 <HAL_GetTick>
 8001fde:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001fe0:	e008      	b.n	8001ff4 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001fe2:	f7ff fa79 	bl	80014d8 <HAL_GetTick>
 8001fe6:	4602      	mov	r2, r0
 8001fe8:	693b      	ldr	r3, [r7, #16]
 8001fea:	1ad3      	subs	r3, r2, r3
 8001fec:	2b02      	cmp	r3, #2
 8001fee:	d901      	bls.n	8001ff4 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8001ff0:	2303      	movs	r3, #3
 8001ff2:	e347      	b.n	8002684 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001ff4:	4b39      	ldr	r3, [pc, #228]	; (80020dc <HAL_RCC_OscConfig+0x270>)
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f003 0302 	and.w	r3, r3, #2
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d0f0      	beq.n	8001fe2 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002000:	4b36      	ldr	r3, [pc, #216]	; (80020dc <HAL_RCC_OscConfig+0x270>)
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	4a35      	ldr	r2, [pc, #212]	; (80020dc <HAL_RCC_OscConfig+0x270>)
 8002006:	f043 0308 	orr.w	r3, r3, #8
 800200a:	6013      	str	r3, [r2, #0]
 800200c:	4b33      	ldr	r3, [pc, #204]	; (80020dc <HAL_RCC_OscConfig+0x270>)
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	6a1b      	ldr	r3, [r3, #32]
 8002018:	4930      	ldr	r1, [pc, #192]	; (80020dc <HAL_RCC_OscConfig+0x270>)
 800201a:	4313      	orrs	r3, r2
 800201c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800201e:	4b2f      	ldr	r3, [pc, #188]	; (80020dc <HAL_RCC_OscConfig+0x270>)
 8002020:	685b      	ldr	r3, [r3, #4]
 8002022:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	69db      	ldr	r3, [r3, #28]
 800202a:	021b      	lsls	r3, r3, #8
 800202c:	492b      	ldr	r1, [pc, #172]	; (80020dc <HAL_RCC_OscConfig+0x270>)
 800202e:	4313      	orrs	r3, r2
 8002030:	604b      	str	r3, [r1, #4]
 8002032:	e01a      	b.n	800206a <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002034:	4b29      	ldr	r3, [pc, #164]	; (80020dc <HAL_RCC_OscConfig+0x270>)
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	4a28      	ldr	r2, [pc, #160]	; (80020dc <HAL_RCC_OscConfig+0x270>)
 800203a:	f023 0301 	bic.w	r3, r3, #1
 800203e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002040:	f7ff fa4a 	bl	80014d8 <HAL_GetTick>
 8002044:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002046:	e008      	b.n	800205a <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002048:	f7ff fa46 	bl	80014d8 <HAL_GetTick>
 800204c:	4602      	mov	r2, r0
 800204e:	693b      	ldr	r3, [r7, #16]
 8002050:	1ad3      	subs	r3, r2, r3
 8002052:	2b02      	cmp	r3, #2
 8002054:	d901      	bls.n	800205a <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8002056:	2303      	movs	r3, #3
 8002058:	e314      	b.n	8002684 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800205a:	4b20      	ldr	r3, [pc, #128]	; (80020dc <HAL_RCC_OscConfig+0x270>)
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f003 0302 	and.w	r3, r3, #2
 8002062:	2b00      	cmp	r3, #0
 8002064:	d1f0      	bne.n	8002048 <HAL_RCC_OscConfig+0x1dc>
 8002066:	e000      	b.n	800206a <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002068:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f003 0301 	and.w	r3, r3, #1
 8002072:	2b00      	cmp	r3, #0
 8002074:	d073      	beq.n	800215e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002076:	69bb      	ldr	r3, [r7, #24]
 8002078:	2b08      	cmp	r3, #8
 800207a:	d005      	beq.n	8002088 <HAL_RCC_OscConfig+0x21c>
 800207c:	69bb      	ldr	r3, [r7, #24]
 800207e:	2b0c      	cmp	r3, #12
 8002080:	d10e      	bne.n	80020a0 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002082:	697b      	ldr	r3, [r7, #20]
 8002084:	2b03      	cmp	r3, #3
 8002086:	d10b      	bne.n	80020a0 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002088:	4b14      	ldr	r3, [pc, #80]	; (80020dc <HAL_RCC_OscConfig+0x270>)
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002090:	2b00      	cmp	r3, #0
 8002092:	d063      	beq.n	800215c <HAL_RCC_OscConfig+0x2f0>
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	685b      	ldr	r3, [r3, #4]
 8002098:	2b00      	cmp	r3, #0
 800209a:	d15f      	bne.n	800215c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800209c:	2301      	movs	r3, #1
 800209e:	e2f1      	b.n	8002684 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	685b      	ldr	r3, [r3, #4]
 80020a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80020a8:	d106      	bne.n	80020b8 <HAL_RCC_OscConfig+0x24c>
 80020aa:	4b0c      	ldr	r3, [pc, #48]	; (80020dc <HAL_RCC_OscConfig+0x270>)
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	4a0b      	ldr	r2, [pc, #44]	; (80020dc <HAL_RCC_OscConfig+0x270>)
 80020b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020b4:	6013      	str	r3, [r2, #0]
 80020b6:	e025      	b.n	8002104 <HAL_RCC_OscConfig+0x298>
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	685b      	ldr	r3, [r3, #4]
 80020bc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80020c0:	d114      	bne.n	80020ec <HAL_RCC_OscConfig+0x280>
 80020c2:	4b06      	ldr	r3, [pc, #24]	; (80020dc <HAL_RCC_OscConfig+0x270>)
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	4a05      	ldr	r2, [pc, #20]	; (80020dc <HAL_RCC_OscConfig+0x270>)
 80020c8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80020cc:	6013      	str	r3, [r2, #0]
 80020ce:	4b03      	ldr	r3, [pc, #12]	; (80020dc <HAL_RCC_OscConfig+0x270>)
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	4a02      	ldr	r2, [pc, #8]	; (80020dc <HAL_RCC_OscConfig+0x270>)
 80020d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020d8:	6013      	str	r3, [r2, #0]
 80020da:	e013      	b.n	8002104 <HAL_RCC_OscConfig+0x298>
 80020dc:	40021000 	.word	0x40021000
 80020e0:	080098f8 	.word	0x080098f8
 80020e4:	20000004 	.word	0x20000004
 80020e8:	20000008 	.word	0x20000008
 80020ec:	4ba0      	ldr	r3, [pc, #640]	; (8002370 <HAL_RCC_OscConfig+0x504>)
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	4a9f      	ldr	r2, [pc, #636]	; (8002370 <HAL_RCC_OscConfig+0x504>)
 80020f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80020f6:	6013      	str	r3, [r2, #0]
 80020f8:	4b9d      	ldr	r3, [pc, #628]	; (8002370 <HAL_RCC_OscConfig+0x504>)
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	4a9c      	ldr	r2, [pc, #624]	; (8002370 <HAL_RCC_OscConfig+0x504>)
 80020fe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002102:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	685b      	ldr	r3, [r3, #4]
 8002108:	2b00      	cmp	r3, #0
 800210a:	d013      	beq.n	8002134 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800210c:	f7ff f9e4 	bl	80014d8 <HAL_GetTick>
 8002110:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002112:	e008      	b.n	8002126 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002114:	f7ff f9e0 	bl	80014d8 <HAL_GetTick>
 8002118:	4602      	mov	r2, r0
 800211a:	693b      	ldr	r3, [r7, #16]
 800211c:	1ad3      	subs	r3, r2, r3
 800211e:	2b64      	cmp	r3, #100	; 0x64
 8002120:	d901      	bls.n	8002126 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002122:	2303      	movs	r3, #3
 8002124:	e2ae      	b.n	8002684 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002126:	4b92      	ldr	r3, [pc, #584]	; (8002370 <HAL_RCC_OscConfig+0x504>)
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800212e:	2b00      	cmp	r3, #0
 8002130:	d0f0      	beq.n	8002114 <HAL_RCC_OscConfig+0x2a8>
 8002132:	e014      	b.n	800215e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002134:	f7ff f9d0 	bl	80014d8 <HAL_GetTick>
 8002138:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800213a:	e008      	b.n	800214e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800213c:	f7ff f9cc 	bl	80014d8 <HAL_GetTick>
 8002140:	4602      	mov	r2, r0
 8002142:	693b      	ldr	r3, [r7, #16]
 8002144:	1ad3      	subs	r3, r2, r3
 8002146:	2b64      	cmp	r3, #100	; 0x64
 8002148:	d901      	bls.n	800214e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800214a:	2303      	movs	r3, #3
 800214c:	e29a      	b.n	8002684 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800214e:	4b88      	ldr	r3, [pc, #544]	; (8002370 <HAL_RCC_OscConfig+0x504>)
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002156:	2b00      	cmp	r3, #0
 8002158:	d1f0      	bne.n	800213c <HAL_RCC_OscConfig+0x2d0>
 800215a:	e000      	b.n	800215e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800215c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f003 0302 	and.w	r3, r3, #2
 8002166:	2b00      	cmp	r3, #0
 8002168:	d060      	beq.n	800222c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800216a:	69bb      	ldr	r3, [r7, #24]
 800216c:	2b04      	cmp	r3, #4
 800216e:	d005      	beq.n	800217c <HAL_RCC_OscConfig+0x310>
 8002170:	69bb      	ldr	r3, [r7, #24]
 8002172:	2b0c      	cmp	r3, #12
 8002174:	d119      	bne.n	80021aa <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002176:	697b      	ldr	r3, [r7, #20]
 8002178:	2b02      	cmp	r3, #2
 800217a:	d116      	bne.n	80021aa <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800217c:	4b7c      	ldr	r3, [pc, #496]	; (8002370 <HAL_RCC_OscConfig+0x504>)
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002184:	2b00      	cmp	r3, #0
 8002186:	d005      	beq.n	8002194 <HAL_RCC_OscConfig+0x328>
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	68db      	ldr	r3, [r3, #12]
 800218c:	2b00      	cmp	r3, #0
 800218e:	d101      	bne.n	8002194 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002190:	2301      	movs	r3, #1
 8002192:	e277      	b.n	8002684 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002194:	4b76      	ldr	r3, [pc, #472]	; (8002370 <HAL_RCC_OscConfig+0x504>)
 8002196:	685b      	ldr	r3, [r3, #4]
 8002198:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	691b      	ldr	r3, [r3, #16]
 80021a0:	061b      	lsls	r3, r3, #24
 80021a2:	4973      	ldr	r1, [pc, #460]	; (8002370 <HAL_RCC_OscConfig+0x504>)
 80021a4:	4313      	orrs	r3, r2
 80021a6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80021a8:	e040      	b.n	800222c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	68db      	ldr	r3, [r3, #12]
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d023      	beq.n	80021fa <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80021b2:	4b6f      	ldr	r3, [pc, #444]	; (8002370 <HAL_RCC_OscConfig+0x504>)
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	4a6e      	ldr	r2, [pc, #440]	; (8002370 <HAL_RCC_OscConfig+0x504>)
 80021b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021bc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021be:	f7ff f98b 	bl	80014d8 <HAL_GetTick>
 80021c2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80021c4:	e008      	b.n	80021d8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80021c6:	f7ff f987 	bl	80014d8 <HAL_GetTick>
 80021ca:	4602      	mov	r2, r0
 80021cc:	693b      	ldr	r3, [r7, #16]
 80021ce:	1ad3      	subs	r3, r2, r3
 80021d0:	2b02      	cmp	r3, #2
 80021d2:	d901      	bls.n	80021d8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80021d4:	2303      	movs	r3, #3
 80021d6:	e255      	b.n	8002684 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80021d8:	4b65      	ldr	r3, [pc, #404]	; (8002370 <HAL_RCC_OscConfig+0x504>)
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d0f0      	beq.n	80021c6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021e4:	4b62      	ldr	r3, [pc, #392]	; (8002370 <HAL_RCC_OscConfig+0x504>)
 80021e6:	685b      	ldr	r3, [r3, #4]
 80021e8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	691b      	ldr	r3, [r3, #16]
 80021f0:	061b      	lsls	r3, r3, #24
 80021f2:	495f      	ldr	r1, [pc, #380]	; (8002370 <HAL_RCC_OscConfig+0x504>)
 80021f4:	4313      	orrs	r3, r2
 80021f6:	604b      	str	r3, [r1, #4]
 80021f8:	e018      	b.n	800222c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80021fa:	4b5d      	ldr	r3, [pc, #372]	; (8002370 <HAL_RCC_OscConfig+0x504>)
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	4a5c      	ldr	r2, [pc, #368]	; (8002370 <HAL_RCC_OscConfig+0x504>)
 8002200:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002204:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002206:	f7ff f967 	bl	80014d8 <HAL_GetTick>
 800220a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800220c:	e008      	b.n	8002220 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800220e:	f7ff f963 	bl	80014d8 <HAL_GetTick>
 8002212:	4602      	mov	r2, r0
 8002214:	693b      	ldr	r3, [r7, #16]
 8002216:	1ad3      	subs	r3, r2, r3
 8002218:	2b02      	cmp	r3, #2
 800221a:	d901      	bls.n	8002220 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800221c:	2303      	movs	r3, #3
 800221e:	e231      	b.n	8002684 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002220:	4b53      	ldr	r3, [pc, #332]	; (8002370 <HAL_RCC_OscConfig+0x504>)
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002228:	2b00      	cmp	r3, #0
 800222a:	d1f0      	bne.n	800220e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f003 0308 	and.w	r3, r3, #8
 8002234:	2b00      	cmp	r3, #0
 8002236:	d03c      	beq.n	80022b2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	695b      	ldr	r3, [r3, #20]
 800223c:	2b00      	cmp	r3, #0
 800223e:	d01c      	beq.n	800227a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002240:	4b4b      	ldr	r3, [pc, #300]	; (8002370 <HAL_RCC_OscConfig+0x504>)
 8002242:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002246:	4a4a      	ldr	r2, [pc, #296]	; (8002370 <HAL_RCC_OscConfig+0x504>)
 8002248:	f043 0301 	orr.w	r3, r3, #1
 800224c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002250:	f7ff f942 	bl	80014d8 <HAL_GetTick>
 8002254:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002256:	e008      	b.n	800226a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002258:	f7ff f93e 	bl	80014d8 <HAL_GetTick>
 800225c:	4602      	mov	r2, r0
 800225e:	693b      	ldr	r3, [r7, #16]
 8002260:	1ad3      	subs	r3, r2, r3
 8002262:	2b02      	cmp	r3, #2
 8002264:	d901      	bls.n	800226a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002266:	2303      	movs	r3, #3
 8002268:	e20c      	b.n	8002684 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800226a:	4b41      	ldr	r3, [pc, #260]	; (8002370 <HAL_RCC_OscConfig+0x504>)
 800226c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002270:	f003 0302 	and.w	r3, r3, #2
 8002274:	2b00      	cmp	r3, #0
 8002276:	d0ef      	beq.n	8002258 <HAL_RCC_OscConfig+0x3ec>
 8002278:	e01b      	b.n	80022b2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800227a:	4b3d      	ldr	r3, [pc, #244]	; (8002370 <HAL_RCC_OscConfig+0x504>)
 800227c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002280:	4a3b      	ldr	r2, [pc, #236]	; (8002370 <HAL_RCC_OscConfig+0x504>)
 8002282:	f023 0301 	bic.w	r3, r3, #1
 8002286:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800228a:	f7ff f925 	bl	80014d8 <HAL_GetTick>
 800228e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002290:	e008      	b.n	80022a4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002292:	f7ff f921 	bl	80014d8 <HAL_GetTick>
 8002296:	4602      	mov	r2, r0
 8002298:	693b      	ldr	r3, [r7, #16]
 800229a:	1ad3      	subs	r3, r2, r3
 800229c:	2b02      	cmp	r3, #2
 800229e:	d901      	bls.n	80022a4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80022a0:	2303      	movs	r3, #3
 80022a2:	e1ef      	b.n	8002684 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80022a4:	4b32      	ldr	r3, [pc, #200]	; (8002370 <HAL_RCC_OscConfig+0x504>)
 80022a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80022aa:	f003 0302 	and.w	r3, r3, #2
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d1ef      	bne.n	8002292 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f003 0304 	and.w	r3, r3, #4
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	f000 80a6 	beq.w	800240c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80022c0:	2300      	movs	r3, #0
 80022c2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80022c4:	4b2a      	ldr	r3, [pc, #168]	; (8002370 <HAL_RCC_OscConfig+0x504>)
 80022c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d10d      	bne.n	80022ec <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80022d0:	4b27      	ldr	r3, [pc, #156]	; (8002370 <HAL_RCC_OscConfig+0x504>)
 80022d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022d4:	4a26      	ldr	r2, [pc, #152]	; (8002370 <HAL_RCC_OscConfig+0x504>)
 80022d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022da:	6593      	str	r3, [r2, #88]	; 0x58
 80022dc:	4b24      	ldr	r3, [pc, #144]	; (8002370 <HAL_RCC_OscConfig+0x504>)
 80022de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022e4:	60bb      	str	r3, [r7, #8]
 80022e6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80022e8:	2301      	movs	r3, #1
 80022ea:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80022ec:	4b21      	ldr	r3, [pc, #132]	; (8002374 <HAL_RCC_OscConfig+0x508>)
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d118      	bne.n	800232a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80022f8:	4b1e      	ldr	r3, [pc, #120]	; (8002374 <HAL_RCC_OscConfig+0x508>)
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	4a1d      	ldr	r2, [pc, #116]	; (8002374 <HAL_RCC_OscConfig+0x508>)
 80022fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002302:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002304:	f7ff f8e8 	bl	80014d8 <HAL_GetTick>
 8002308:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800230a:	e008      	b.n	800231e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800230c:	f7ff f8e4 	bl	80014d8 <HAL_GetTick>
 8002310:	4602      	mov	r2, r0
 8002312:	693b      	ldr	r3, [r7, #16]
 8002314:	1ad3      	subs	r3, r2, r3
 8002316:	2b02      	cmp	r3, #2
 8002318:	d901      	bls.n	800231e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800231a:	2303      	movs	r3, #3
 800231c:	e1b2      	b.n	8002684 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800231e:	4b15      	ldr	r3, [pc, #84]	; (8002374 <HAL_RCC_OscConfig+0x508>)
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002326:	2b00      	cmp	r3, #0
 8002328:	d0f0      	beq.n	800230c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	689b      	ldr	r3, [r3, #8]
 800232e:	2b01      	cmp	r3, #1
 8002330:	d108      	bne.n	8002344 <HAL_RCC_OscConfig+0x4d8>
 8002332:	4b0f      	ldr	r3, [pc, #60]	; (8002370 <HAL_RCC_OscConfig+0x504>)
 8002334:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002338:	4a0d      	ldr	r2, [pc, #52]	; (8002370 <HAL_RCC_OscConfig+0x504>)
 800233a:	f043 0301 	orr.w	r3, r3, #1
 800233e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002342:	e029      	b.n	8002398 <HAL_RCC_OscConfig+0x52c>
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	689b      	ldr	r3, [r3, #8]
 8002348:	2b05      	cmp	r3, #5
 800234a:	d115      	bne.n	8002378 <HAL_RCC_OscConfig+0x50c>
 800234c:	4b08      	ldr	r3, [pc, #32]	; (8002370 <HAL_RCC_OscConfig+0x504>)
 800234e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002352:	4a07      	ldr	r2, [pc, #28]	; (8002370 <HAL_RCC_OscConfig+0x504>)
 8002354:	f043 0304 	orr.w	r3, r3, #4
 8002358:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800235c:	4b04      	ldr	r3, [pc, #16]	; (8002370 <HAL_RCC_OscConfig+0x504>)
 800235e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002362:	4a03      	ldr	r2, [pc, #12]	; (8002370 <HAL_RCC_OscConfig+0x504>)
 8002364:	f043 0301 	orr.w	r3, r3, #1
 8002368:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800236c:	e014      	b.n	8002398 <HAL_RCC_OscConfig+0x52c>
 800236e:	bf00      	nop
 8002370:	40021000 	.word	0x40021000
 8002374:	40007000 	.word	0x40007000
 8002378:	4b9a      	ldr	r3, [pc, #616]	; (80025e4 <HAL_RCC_OscConfig+0x778>)
 800237a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800237e:	4a99      	ldr	r2, [pc, #612]	; (80025e4 <HAL_RCC_OscConfig+0x778>)
 8002380:	f023 0301 	bic.w	r3, r3, #1
 8002384:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002388:	4b96      	ldr	r3, [pc, #600]	; (80025e4 <HAL_RCC_OscConfig+0x778>)
 800238a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800238e:	4a95      	ldr	r2, [pc, #596]	; (80025e4 <HAL_RCC_OscConfig+0x778>)
 8002390:	f023 0304 	bic.w	r3, r3, #4
 8002394:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	689b      	ldr	r3, [r3, #8]
 800239c:	2b00      	cmp	r3, #0
 800239e:	d016      	beq.n	80023ce <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023a0:	f7ff f89a 	bl	80014d8 <HAL_GetTick>
 80023a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80023a6:	e00a      	b.n	80023be <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023a8:	f7ff f896 	bl	80014d8 <HAL_GetTick>
 80023ac:	4602      	mov	r2, r0
 80023ae:	693b      	ldr	r3, [r7, #16]
 80023b0:	1ad3      	subs	r3, r2, r3
 80023b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80023b6:	4293      	cmp	r3, r2
 80023b8:	d901      	bls.n	80023be <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80023ba:	2303      	movs	r3, #3
 80023bc:	e162      	b.n	8002684 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80023be:	4b89      	ldr	r3, [pc, #548]	; (80025e4 <HAL_RCC_OscConfig+0x778>)
 80023c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023c4:	f003 0302 	and.w	r3, r3, #2
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d0ed      	beq.n	80023a8 <HAL_RCC_OscConfig+0x53c>
 80023cc:	e015      	b.n	80023fa <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023ce:	f7ff f883 	bl	80014d8 <HAL_GetTick>
 80023d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80023d4:	e00a      	b.n	80023ec <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023d6:	f7ff f87f 	bl	80014d8 <HAL_GetTick>
 80023da:	4602      	mov	r2, r0
 80023dc:	693b      	ldr	r3, [r7, #16]
 80023de:	1ad3      	subs	r3, r2, r3
 80023e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80023e4:	4293      	cmp	r3, r2
 80023e6:	d901      	bls.n	80023ec <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80023e8:	2303      	movs	r3, #3
 80023ea:	e14b      	b.n	8002684 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80023ec:	4b7d      	ldr	r3, [pc, #500]	; (80025e4 <HAL_RCC_OscConfig+0x778>)
 80023ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023f2:	f003 0302 	and.w	r3, r3, #2
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d1ed      	bne.n	80023d6 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80023fa:	7ffb      	ldrb	r3, [r7, #31]
 80023fc:	2b01      	cmp	r3, #1
 80023fe:	d105      	bne.n	800240c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002400:	4b78      	ldr	r3, [pc, #480]	; (80025e4 <HAL_RCC_OscConfig+0x778>)
 8002402:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002404:	4a77      	ldr	r2, [pc, #476]	; (80025e4 <HAL_RCC_OscConfig+0x778>)
 8002406:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800240a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f003 0320 	and.w	r3, r3, #32
 8002414:	2b00      	cmp	r3, #0
 8002416:	d03c      	beq.n	8002492 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800241c:	2b00      	cmp	r3, #0
 800241e:	d01c      	beq.n	800245a <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002420:	4b70      	ldr	r3, [pc, #448]	; (80025e4 <HAL_RCC_OscConfig+0x778>)
 8002422:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002426:	4a6f      	ldr	r2, [pc, #444]	; (80025e4 <HAL_RCC_OscConfig+0x778>)
 8002428:	f043 0301 	orr.w	r3, r3, #1
 800242c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002430:	f7ff f852 	bl	80014d8 <HAL_GetTick>
 8002434:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002436:	e008      	b.n	800244a <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002438:	f7ff f84e 	bl	80014d8 <HAL_GetTick>
 800243c:	4602      	mov	r2, r0
 800243e:	693b      	ldr	r3, [r7, #16]
 8002440:	1ad3      	subs	r3, r2, r3
 8002442:	2b02      	cmp	r3, #2
 8002444:	d901      	bls.n	800244a <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8002446:	2303      	movs	r3, #3
 8002448:	e11c      	b.n	8002684 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800244a:	4b66      	ldr	r3, [pc, #408]	; (80025e4 <HAL_RCC_OscConfig+0x778>)
 800244c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002450:	f003 0302 	and.w	r3, r3, #2
 8002454:	2b00      	cmp	r3, #0
 8002456:	d0ef      	beq.n	8002438 <HAL_RCC_OscConfig+0x5cc>
 8002458:	e01b      	b.n	8002492 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800245a:	4b62      	ldr	r3, [pc, #392]	; (80025e4 <HAL_RCC_OscConfig+0x778>)
 800245c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002460:	4a60      	ldr	r2, [pc, #384]	; (80025e4 <HAL_RCC_OscConfig+0x778>)
 8002462:	f023 0301 	bic.w	r3, r3, #1
 8002466:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800246a:	f7ff f835 	bl	80014d8 <HAL_GetTick>
 800246e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002470:	e008      	b.n	8002484 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002472:	f7ff f831 	bl	80014d8 <HAL_GetTick>
 8002476:	4602      	mov	r2, r0
 8002478:	693b      	ldr	r3, [r7, #16]
 800247a:	1ad3      	subs	r3, r2, r3
 800247c:	2b02      	cmp	r3, #2
 800247e:	d901      	bls.n	8002484 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8002480:	2303      	movs	r3, #3
 8002482:	e0ff      	b.n	8002684 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002484:	4b57      	ldr	r3, [pc, #348]	; (80025e4 <HAL_RCC_OscConfig+0x778>)
 8002486:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800248a:	f003 0302 	and.w	r3, r3, #2
 800248e:	2b00      	cmp	r3, #0
 8002490:	d1ef      	bne.n	8002472 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002496:	2b00      	cmp	r3, #0
 8002498:	f000 80f3 	beq.w	8002682 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024a0:	2b02      	cmp	r3, #2
 80024a2:	f040 80c9 	bne.w	8002638 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80024a6:	4b4f      	ldr	r3, [pc, #316]	; (80025e4 <HAL_RCC_OscConfig+0x778>)
 80024a8:	68db      	ldr	r3, [r3, #12]
 80024aa:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80024ac:	697b      	ldr	r3, [r7, #20]
 80024ae:	f003 0203 	and.w	r2, r3, #3
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024b6:	429a      	cmp	r2, r3
 80024b8:	d12c      	bne.n	8002514 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80024ba:	697b      	ldr	r3, [r7, #20]
 80024bc:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024c4:	3b01      	subs	r3, #1
 80024c6:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80024c8:	429a      	cmp	r2, r3
 80024ca:	d123      	bne.n	8002514 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80024cc:	697b      	ldr	r3, [r7, #20]
 80024ce:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024d6:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80024d8:	429a      	cmp	r2, r3
 80024da:	d11b      	bne.n	8002514 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80024dc:	697b      	ldr	r3, [r7, #20]
 80024de:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024e6:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80024e8:	429a      	cmp	r2, r3
 80024ea:	d113      	bne.n	8002514 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80024ec:	697b      	ldr	r3, [r7, #20]
 80024ee:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024f6:	085b      	lsrs	r3, r3, #1
 80024f8:	3b01      	subs	r3, #1
 80024fa:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80024fc:	429a      	cmp	r2, r3
 80024fe:	d109      	bne.n	8002514 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002500:	697b      	ldr	r3, [r7, #20]
 8002502:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800250a:	085b      	lsrs	r3, r3, #1
 800250c:	3b01      	subs	r3, #1
 800250e:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002510:	429a      	cmp	r2, r3
 8002512:	d06b      	beq.n	80025ec <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002514:	69bb      	ldr	r3, [r7, #24]
 8002516:	2b0c      	cmp	r3, #12
 8002518:	d062      	beq.n	80025e0 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800251a:	4b32      	ldr	r3, [pc, #200]	; (80025e4 <HAL_RCC_OscConfig+0x778>)
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002522:	2b00      	cmp	r3, #0
 8002524:	d001      	beq.n	800252a <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8002526:	2301      	movs	r3, #1
 8002528:	e0ac      	b.n	8002684 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800252a:	4b2e      	ldr	r3, [pc, #184]	; (80025e4 <HAL_RCC_OscConfig+0x778>)
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	4a2d      	ldr	r2, [pc, #180]	; (80025e4 <HAL_RCC_OscConfig+0x778>)
 8002530:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002534:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002536:	f7fe ffcf 	bl	80014d8 <HAL_GetTick>
 800253a:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800253c:	e008      	b.n	8002550 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800253e:	f7fe ffcb 	bl	80014d8 <HAL_GetTick>
 8002542:	4602      	mov	r2, r0
 8002544:	693b      	ldr	r3, [r7, #16]
 8002546:	1ad3      	subs	r3, r2, r3
 8002548:	2b02      	cmp	r3, #2
 800254a:	d901      	bls.n	8002550 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 800254c:	2303      	movs	r3, #3
 800254e:	e099      	b.n	8002684 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002550:	4b24      	ldr	r3, [pc, #144]	; (80025e4 <HAL_RCC_OscConfig+0x778>)
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002558:	2b00      	cmp	r3, #0
 800255a:	d1f0      	bne.n	800253e <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800255c:	4b21      	ldr	r3, [pc, #132]	; (80025e4 <HAL_RCC_OscConfig+0x778>)
 800255e:	68da      	ldr	r2, [r3, #12]
 8002560:	4b21      	ldr	r3, [pc, #132]	; (80025e8 <HAL_RCC_OscConfig+0x77c>)
 8002562:	4013      	ands	r3, r2
 8002564:	687a      	ldr	r2, [r7, #4]
 8002566:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002568:	687a      	ldr	r2, [r7, #4]
 800256a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800256c:	3a01      	subs	r2, #1
 800256e:	0112      	lsls	r2, r2, #4
 8002570:	4311      	orrs	r1, r2
 8002572:	687a      	ldr	r2, [r7, #4]
 8002574:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002576:	0212      	lsls	r2, r2, #8
 8002578:	4311      	orrs	r1, r2
 800257a:	687a      	ldr	r2, [r7, #4]
 800257c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800257e:	0852      	lsrs	r2, r2, #1
 8002580:	3a01      	subs	r2, #1
 8002582:	0552      	lsls	r2, r2, #21
 8002584:	4311      	orrs	r1, r2
 8002586:	687a      	ldr	r2, [r7, #4]
 8002588:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800258a:	0852      	lsrs	r2, r2, #1
 800258c:	3a01      	subs	r2, #1
 800258e:	0652      	lsls	r2, r2, #25
 8002590:	4311      	orrs	r1, r2
 8002592:	687a      	ldr	r2, [r7, #4]
 8002594:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002596:	06d2      	lsls	r2, r2, #27
 8002598:	430a      	orrs	r2, r1
 800259a:	4912      	ldr	r1, [pc, #72]	; (80025e4 <HAL_RCC_OscConfig+0x778>)
 800259c:	4313      	orrs	r3, r2
 800259e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80025a0:	4b10      	ldr	r3, [pc, #64]	; (80025e4 <HAL_RCC_OscConfig+0x778>)
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	4a0f      	ldr	r2, [pc, #60]	; (80025e4 <HAL_RCC_OscConfig+0x778>)
 80025a6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80025aa:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80025ac:	4b0d      	ldr	r3, [pc, #52]	; (80025e4 <HAL_RCC_OscConfig+0x778>)
 80025ae:	68db      	ldr	r3, [r3, #12]
 80025b0:	4a0c      	ldr	r2, [pc, #48]	; (80025e4 <HAL_RCC_OscConfig+0x778>)
 80025b2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80025b6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80025b8:	f7fe ff8e 	bl	80014d8 <HAL_GetTick>
 80025bc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80025be:	e008      	b.n	80025d2 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025c0:	f7fe ff8a 	bl	80014d8 <HAL_GetTick>
 80025c4:	4602      	mov	r2, r0
 80025c6:	693b      	ldr	r3, [r7, #16]
 80025c8:	1ad3      	subs	r3, r2, r3
 80025ca:	2b02      	cmp	r3, #2
 80025cc:	d901      	bls.n	80025d2 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 80025ce:	2303      	movs	r3, #3
 80025d0:	e058      	b.n	8002684 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80025d2:	4b04      	ldr	r3, [pc, #16]	; (80025e4 <HAL_RCC_OscConfig+0x778>)
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d0f0      	beq.n	80025c0 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80025de:	e050      	b.n	8002682 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80025e0:	2301      	movs	r3, #1
 80025e2:	e04f      	b.n	8002684 <HAL_RCC_OscConfig+0x818>
 80025e4:	40021000 	.word	0x40021000
 80025e8:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80025ec:	4b27      	ldr	r3, [pc, #156]	; (800268c <HAL_RCC_OscConfig+0x820>)
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d144      	bne.n	8002682 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80025f8:	4b24      	ldr	r3, [pc, #144]	; (800268c <HAL_RCC_OscConfig+0x820>)
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	4a23      	ldr	r2, [pc, #140]	; (800268c <HAL_RCC_OscConfig+0x820>)
 80025fe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002602:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002604:	4b21      	ldr	r3, [pc, #132]	; (800268c <HAL_RCC_OscConfig+0x820>)
 8002606:	68db      	ldr	r3, [r3, #12]
 8002608:	4a20      	ldr	r2, [pc, #128]	; (800268c <HAL_RCC_OscConfig+0x820>)
 800260a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800260e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002610:	f7fe ff62 	bl	80014d8 <HAL_GetTick>
 8002614:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002616:	e008      	b.n	800262a <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002618:	f7fe ff5e 	bl	80014d8 <HAL_GetTick>
 800261c:	4602      	mov	r2, r0
 800261e:	693b      	ldr	r3, [r7, #16]
 8002620:	1ad3      	subs	r3, r2, r3
 8002622:	2b02      	cmp	r3, #2
 8002624:	d901      	bls.n	800262a <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8002626:	2303      	movs	r3, #3
 8002628:	e02c      	b.n	8002684 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800262a:	4b18      	ldr	r3, [pc, #96]	; (800268c <HAL_RCC_OscConfig+0x820>)
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002632:	2b00      	cmp	r3, #0
 8002634:	d0f0      	beq.n	8002618 <HAL_RCC_OscConfig+0x7ac>
 8002636:	e024      	b.n	8002682 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002638:	69bb      	ldr	r3, [r7, #24]
 800263a:	2b0c      	cmp	r3, #12
 800263c:	d01f      	beq.n	800267e <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800263e:	4b13      	ldr	r3, [pc, #76]	; (800268c <HAL_RCC_OscConfig+0x820>)
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	4a12      	ldr	r2, [pc, #72]	; (800268c <HAL_RCC_OscConfig+0x820>)
 8002644:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002648:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800264a:	f7fe ff45 	bl	80014d8 <HAL_GetTick>
 800264e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002650:	e008      	b.n	8002664 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002652:	f7fe ff41 	bl	80014d8 <HAL_GetTick>
 8002656:	4602      	mov	r2, r0
 8002658:	693b      	ldr	r3, [r7, #16]
 800265a:	1ad3      	subs	r3, r2, r3
 800265c:	2b02      	cmp	r3, #2
 800265e:	d901      	bls.n	8002664 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8002660:	2303      	movs	r3, #3
 8002662:	e00f      	b.n	8002684 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002664:	4b09      	ldr	r3, [pc, #36]	; (800268c <HAL_RCC_OscConfig+0x820>)
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800266c:	2b00      	cmp	r3, #0
 800266e:	d1f0      	bne.n	8002652 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8002670:	4b06      	ldr	r3, [pc, #24]	; (800268c <HAL_RCC_OscConfig+0x820>)
 8002672:	68da      	ldr	r2, [r3, #12]
 8002674:	4905      	ldr	r1, [pc, #20]	; (800268c <HAL_RCC_OscConfig+0x820>)
 8002676:	4b06      	ldr	r3, [pc, #24]	; (8002690 <HAL_RCC_OscConfig+0x824>)
 8002678:	4013      	ands	r3, r2
 800267a:	60cb      	str	r3, [r1, #12]
 800267c:	e001      	b.n	8002682 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800267e:	2301      	movs	r3, #1
 8002680:	e000      	b.n	8002684 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8002682:	2300      	movs	r3, #0
}
 8002684:	4618      	mov	r0, r3
 8002686:	3720      	adds	r7, #32
 8002688:	46bd      	mov	sp, r7
 800268a:	bd80      	pop	{r7, pc}
 800268c:	40021000 	.word	0x40021000
 8002690:	feeefffc 	.word	0xfeeefffc

08002694 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002694:	b580      	push	{r7, lr}
 8002696:	b084      	sub	sp, #16
 8002698:	af00      	add	r7, sp, #0
 800269a:	6078      	str	r0, [r7, #4]
 800269c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d101      	bne.n	80026a8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80026a4:	2301      	movs	r3, #1
 80026a6:	e0e7      	b.n	8002878 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80026a8:	4b75      	ldr	r3, [pc, #468]	; (8002880 <HAL_RCC_ClockConfig+0x1ec>)
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f003 0307 	and.w	r3, r3, #7
 80026b0:	683a      	ldr	r2, [r7, #0]
 80026b2:	429a      	cmp	r2, r3
 80026b4:	d910      	bls.n	80026d8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026b6:	4b72      	ldr	r3, [pc, #456]	; (8002880 <HAL_RCC_ClockConfig+0x1ec>)
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f023 0207 	bic.w	r2, r3, #7
 80026be:	4970      	ldr	r1, [pc, #448]	; (8002880 <HAL_RCC_ClockConfig+0x1ec>)
 80026c0:	683b      	ldr	r3, [r7, #0]
 80026c2:	4313      	orrs	r3, r2
 80026c4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80026c6:	4b6e      	ldr	r3, [pc, #440]	; (8002880 <HAL_RCC_ClockConfig+0x1ec>)
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f003 0307 	and.w	r3, r3, #7
 80026ce:	683a      	ldr	r2, [r7, #0]
 80026d0:	429a      	cmp	r2, r3
 80026d2:	d001      	beq.n	80026d8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80026d4:	2301      	movs	r3, #1
 80026d6:	e0cf      	b.n	8002878 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f003 0302 	and.w	r3, r3, #2
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d010      	beq.n	8002706 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	689a      	ldr	r2, [r3, #8]
 80026e8:	4b66      	ldr	r3, [pc, #408]	; (8002884 <HAL_RCC_ClockConfig+0x1f0>)
 80026ea:	689b      	ldr	r3, [r3, #8]
 80026ec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80026f0:	429a      	cmp	r2, r3
 80026f2:	d908      	bls.n	8002706 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80026f4:	4b63      	ldr	r3, [pc, #396]	; (8002884 <HAL_RCC_ClockConfig+0x1f0>)
 80026f6:	689b      	ldr	r3, [r3, #8]
 80026f8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	689b      	ldr	r3, [r3, #8]
 8002700:	4960      	ldr	r1, [pc, #384]	; (8002884 <HAL_RCC_ClockConfig+0x1f0>)
 8002702:	4313      	orrs	r3, r2
 8002704:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f003 0301 	and.w	r3, r3, #1
 800270e:	2b00      	cmp	r3, #0
 8002710:	d04c      	beq.n	80027ac <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	685b      	ldr	r3, [r3, #4]
 8002716:	2b03      	cmp	r3, #3
 8002718:	d107      	bne.n	800272a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800271a:	4b5a      	ldr	r3, [pc, #360]	; (8002884 <HAL_RCC_ClockConfig+0x1f0>)
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002722:	2b00      	cmp	r3, #0
 8002724:	d121      	bne.n	800276a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002726:	2301      	movs	r3, #1
 8002728:	e0a6      	b.n	8002878 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	685b      	ldr	r3, [r3, #4]
 800272e:	2b02      	cmp	r3, #2
 8002730:	d107      	bne.n	8002742 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002732:	4b54      	ldr	r3, [pc, #336]	; (8002884 <HAL_RCC_ClockConfig+0x1f0>)
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800273a:	2b00      	cmp	r3, #0
 800273c:	d115      	bne.n	800276a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800273e:	2301      	movs	r3, #1
 8002740:	e09a      	b.n	8002878 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	685b      	ldr	r3, [r3, #4]
 8002746:	2b00      	cmp	r3, #0
 8002748:	d107      	bne.n	800275a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800274a:	4b4e      	ldr	r3, [pc, #312]	; (8002884 <HAL_RCC_ClockConfig+0x1f0>)
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f003 0302 	and.w	r3, r3, #2
 8002752:	2b00      	cmp	r3, #0
 8002754:	d109      	bne.n	800276a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002756:	2301      	movs	r3, #1
 8002758:	e08e      	b.n	8002878 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800275a:	4b4a      	ldr	r3, [pc, #296]	; (8002884 <HAL_RCC_ClockConfig+0x1f0>)
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002762:	2b00      	cmp	r3, #0
 8002764:	d101      	bne.n	800276a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002766:	2301      	movs	r3, #1
 8002768:	e086      	b.n	8002878 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800276a:	4b46      	ldr	r3, [pc, #280]	; (8002884 <HAL_RCC_ClockConfig+0x1f0>)
 800276c:	689b      	ldr	r3, [r3, #8]
 800276e:	f023 0203 	bic.w	r2, r3, #3
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	685b      	ldr	r3, [r3, #4]
 8002776:	4943      	ldr	r1, [pc, #268]	; (8002884 <HAL_RCC_ClockConfig+0x1f0>)
 8002778:	4313      	orrs	r3, r2
 800277a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800277c:	f7fe feac 	bl	80014d8 <HAL_GetTick>
 8002780:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002782:	e00a      	b.n	800279a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002784:	f7fe fea8 	bl	80014d8 <HAL_GetTick>
 8002788:	4602      	mov	r2, r0
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	1ad3      	subs	r3, r2, r3
 800278e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002792:	4293      	cmp	r3, r2
 8002794:	d901      	bls.n	800279a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002796:	2303      	movs	r3, #3
 8002798:	e06e      	b.n	8002878 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800279a:	4b3a      	ldr	r3, [pc, #232]	; (8002884 <HAL_RCC_ClockConfig+0x1f0>)
 800279c:	689b      	ldr	r3, [r3, #8]
 800279e:	f003 020c 	and.w	r2, r3, #12
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	685b      	ldr	r3, [r3, #4]
 80027a6:	009b      	lsls	r3, r3, #2
 80027a8:	429a      	cmp	r2, r3
 80027aa:	d1eb      	bne.n	8002784 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f003 0302 	and.w	r3, r3, #2
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d010      	beq.n	80027da <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	689a      	ldr	r2, [r3, #8]
 80027bc:	4b31      	ldr	r3, [pc, #196]	; (8002884 <HAL_RCC_ClockConfig+0x1f0>)
 80027be:	689b      	ldr	r3, [r3, #8]
 80027c0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80027c4:	429a      	cmp	r2, r3
 80027c6:	d208      	bcs.n	80027da <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80027c8:	4b2e      	ldr	r3, [pc, #184]	; (8002884 <HAL_RCC_ClockConfig+0x1f0>)
 80027ca:	689b      	ldr	r3, [r3, #8]
 80027cc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	689b      	ldr	r3, [r3, #8]
 80027d4:	492b      	ldr	r1, [pc, #172]	; (8002884 <HAL_RCC_ClockConfig+0x1f0>)
 80027d6:	4313      	orrs	r3, r2
 80027d8:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80027da:	4b29      	ldr	r3, [pc, #164]	; (8002880 <HAL_RCC_ClockConfig+0x1ec>)
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f003 0307 	and.w	r3, r3, #7
 80027e2:	683a      	ldr	r2, [r7, #0]
 80027e4:	429a      	cmp	r2, r3
 80027e6:	d210      	bcs.n	800280a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027e8:	4b25      	ldr	r3, [pc, #148]	; (8002880 <HAL_RCC_ClockConfig+0x1ec>)
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f023 0207 	bic.w	r2, r3, #7
 80027f0:	4923      	ldr	r1, [pc, #140]	; (8002880 <HAL_RCC_ClockConfig+0x1ec>)
 80027f2:	683b      	ldr	r3, [r7, #0]
 80027f4:	4313      	orrs	r3, r2
 80027f6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80027f8:	4b21      	ldr	r3, [pc, #132]	; (8002880 <HAL_RCC_ClockConfig+0x1ec>)
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f003 0307 	and.w	r3, r3, #7
 8002800:	683a      	ldr	r2, [r7, #0]
 8002802:	429a      	cmp	r2, r3
 8002804:	d001      	beq.n	800280a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002806:	2301      	movs	r3, #1
 8002808:	e036      	b.n	8002878 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f003 0304 	and.w	r3, r3, #4
 8002812:	2b00      	cmp	r3, #0
 8002814:	d008      	beq.n	8002828 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002816:	4b1b      	ldr	r3, [pc, #108]	; (8002884 <HAL_RCC_ClockConfig+0x1f0>)
 8002818:	689b      	ldr	r3, [r3, #8]
 800281a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	68db      	ldr	r3, [r3, #12]
 8002822:	4918      	ldr	r1, [pc, #96]	; (8002884 <HAL_RCC_ClockConfig+0x1f0>)
 8002824:	4313      	orrs	r3, r2
 8002826:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f003 0308 	and.w	r3, r3, #8
 8002830:	2b00      	cmp	r3, #0
 8002832:	d009      	beq.n	8002848 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002834:	4b13      	ldr	r3, [pc, #76]	; (8002884 <HAL_RCC_ClockConfig+0x1f0>)
 8002836:	689b      	ldr	r3, [r3, #8]
 8002838:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	691b      	ldr	r3, [r3, #16]
 8002840:	00db      	lsls	r3, r3, #3
 8002842:	4910      	ldr	r1, [pc, #64]	; (8002884 <HAL_RCC_ClockConfig+0x1f0>)
 8002844:	4313      	orrs	r3, r2
 8002846:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002848:	f000 f824 	bl	8002894 <HAL_RCC_GetSysClockFreq>
 800284c:	4602      	mov	r2, r0
 800284e:	4b0d      	ldr	r3, [pc, #52]	; (8002884 <HAL_RCC_ClockConfig+0x1f0>)
 8002850:	689b      	ldr	r3, [r3, #8]
 8002852:	091b      	lsrs	r3, r3, #4
 8002854:	f003 030f 	and.w	r3, r3, #15
 8002858:	490b      	ldr	r1, [pc, #44]	; (8002888 <HAL_RCC_ClockConfig+0x1f4>)
 800285a:	5ccb      	ldrb	r3, [r1, r3]
 800285c:	f003 031f 	and.w	r3, r3, #31
 8002860:	fa22 f303 	lsr.w	r3, r2, r3
 8002864:	4a09      	ldr	r2, [pc, #36]	; (800288c <HAL_RCC_ClockConfig+0x1f8>)
 8002866:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002868:	4b09      	ldr	r3, [pc, #36]	; (8002890 <HAL_RCC_ClockConfig+0x1fc>)
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	4618      	mov	r0, r3
 800286e:	f7fe fbd9 	bl	8001024 <HAL_InitTick>
 8002872:	4603      	mov	r3, r0
 8002874:	72fb      	strb	r3, [r7, #11]

  return status;
 8002876:	7afb      	ldrb	r3, [r7, #11]
}
 8002878:	4618      	mov	r0, r3
 800287a:	3710      	adds	r7, #16
 800287c:	46bd      	mov	sp, r7
 800287e:	bd80      	pop	{r7, pc}
 8002880:	40022000 	.word	0x40022000
 8002884:	40021000 	.word	0x40021000
 8002888:	080098f8 	.word	0x080098f8
 800288c:	20000004 	.word	0x20000004
 8002890:	20000008 	.word	0x20000008

08002894 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002894:	b480      	push	{r7}
 8002896:	b089      	sub	sp, #36	; 0x24
 8002898:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800289a:	2300      	movs	r3, #0
 800289c:	61fb      	str	r3, [r7, #28]
 800289e:	2300      	movs	r3, #0
 80028a0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80028a2:	4b3e      	ldr	r3, [pc, #248]	; (800299c <HAL_RCC_GetSysClockFreq+0x108>)
 80028a4:	689b      	ldr	r3, [r3, #8]
 80028a6:	f003 030c 	and.w	r3, r3, #12
 80028aa:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80028ac:	4b3b      	ldr	r3, [pc, #236]	; (800299c <HAL_RCC_GetSysClockFreq+0x108>)
 80028ae:	68db      	ldr	r3, [r3, #12]
 80028b0:	f003 0303 	and.w	r3, r3, #3
 80028b4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80028b6:	693b      	ldr	r3, [r7, #16]
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d005      	beq.n	80028c8 <HAL_RCC_GetSysClockFreq+0x34>
 80028bc:	693b      	ldr	r3, [r7, #16]
 80028be:	2b0c      	cmp	r3, #12
 80028c0:	d121      	bne.n	8002906 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	2b01      	cmp	r3, #1
 80028c6:	d11e      	bne.n	8002906 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80028c8:	4b34      	ldr	r3, [pc, #208]	; (800299c <HAL_RCC_GetSysClockFreq+0x108>)
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f003 0308 	and.w	r3, r3, #8
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d107      	bne.n	80028e4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80028d4:	4b31      	ldr	r3, [pc, #196]	; (800299c <HAL_RCC_GetSysClockFreq+0x108>)
 80028d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80028da:	0a1b      	lsrs	r3, r3, #8
 80028dc:	f003 030f 	and.w	r3, r3, #15
 80028e0:	61fb      	str	r3, [r7, #28]
 80028e2:	e005      	b.n	80028f0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80028e4:	4b2d      	ldr	r3, [pc, #180]	; (800299c <HAL_RCC_GetSysClockFreq+0x108>)
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	091b      	lsrs	r3, r3, #4
 80028ea:	f003 030f 	and.w	r3, r3, #15
 80028ee:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80028f0:	4a2b      	ldr	r2, [pc, #172]	; (80029a0 <HAL_RCC_GetSysClockFreq+0x10c>)
 80028f2:	69fb      	ldr	r3, [r7, #28]
 80028f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028f8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80028fa:	693b      	ldr	r3, [r7, #16]
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d10d      	bne.n	800291c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002900:	69fb      	ldr	r3, [r7, #28]
 8002902:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002904:	e00a      	b.n	800291c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002906:	693b      	ldr	r3, [r7, #16]
 8002908:	2b04      	cmp	r3, #4
 800290a:	d102      	bne.n	8002912 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800290c:	4b25      	ldr	r3, [pc, #148]	; (80029a4 <HAL_RCC_GetSysClockFreq+0x110>)
 800290e:	61bb      	str	r3, [r7, #24]
 8002910:	e004      	b.n	800291c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002912:	693b      	ldr	r3, [r7, #16]
 8002914:	2b08      	cmp	r3, #8
 8002916:	d101      	bne.n	800291c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002918:	4b23      	ldr	r3, [pc, #140]	; (80029a8 <HAL_RCC_GetSysClockFreq+0x114>)
 800291a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800291c:	693b      	ldr	r3, [r7, #16]
 800291e:	2b0c      	cmp	r3, #12
 8002920:	d134      	bne.n	800298c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002922:	4b1e      	ldr	r3, [pc, #120]	; (800299c <HAL_RCC_GetSysClockFreq+0x108>)
 8002924:	68db      	ldr	r3, [r3, #12]
 8002926:	f003 0303 	and.w	r3, r3, #3
 800292a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800292c:	68bb      	ldr	r3, [r7, #8]
 800292e:	2b02      	cmp	r3, #2
 8002930:	d003      	beq.n	800293a <HAL_RCC_GetSysClockFreq+0xa6>
 8002932:	68bb      	ldr	r3, [r7, #8]
 8002934:	2b03      	cmp	r3, #3
 8002936:	d003      	beq.n	8002940 <HAL_RCC_GetSysClockFreq+0xac>
 8002938:	e005      	b.n	8002946 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800293a:	4b1a      	ldr	r3, [pc, #104]	; (80029a4 <HAL_RCC_GetSysClockFreq+0x110>)
 800293c:	617b      	str	r3, [r7, #20]
      break;
 800293e:	e005      	b.n	800294c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002940:	4b19      	ldr	r3, [pc, #100]	; (80029a8 <HAL_RCC_GetSysClockFreq+0x114>)
 8002942:	617b      	str	r3, [r7, #20]
      break;
 8002944:	e002      	b.n	800294c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002946:	69fb      	ldr	r3, [r7, #28]
 8002948:	617b      	str	r3, [r7, #20]
      break;
 800294a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800294c:	4b13      	ldr	r3, [pc, #76]	; (800299c <HAL_RCC_GetSysClockFreq+0x108>)
 800294e:	68db      	ldr	r3, [r3, #12]
 8002950:	091b      	lsrs	r3, r3, #4
 8002952:	f003 0307 	and.w	r3, r3, #7
 8002956:	3301      	adds	r3, #1
 8002958:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800295a:	4b10      	ldr	r3, [pc, #64]	; (800299c <HAL_RCC_GetSysClockFreq+0x108>)
 800295c:	68db      	ldr	r3, [r3, #12]
 800295e:	0a1b      	lsrs	r3, r3, #8
 8002960:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002964:	697a      	ldr	r2, [r7, #20]
 8002966:	fb03 f202 	mul.w	r2, r3, r2
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002970:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002972:	4b0a      	ldr	r3, [pc, #40]	; (800299c <HAL_RCC_GetSysClockFreq+0x108>)
 8002974:	68db      	ldr	r3, [r3, #12]
 8002976:	0e5b      	lsrs	r3, r3, #25
 8002978:	f003 0303 	and.w	r3, r3, #3
 800297c:	3301      	adds	r3, #1
 800297e:	005b      	lsls	r3, r3, #1
 8002980:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002982:	697a      	ldr	r2, [r7, #20]
 8002984:	683b      	ldr	r3, [r7, #0]
 8002986:	fbb2 f3f3 	udiv	r3, r2, r3
 800298a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800298c:	69bb      	ldr	r3, [r7, #24]
}
 800298e:	4618      	mov	r0, r3
 8002990:	3724      	adds	r7, #36	; 0x24
 8002992:	46bd      	mov	sp, r7
 8002994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002998:	4770      	bx	lr
 800299a:	bf00      	nop
 800299c:	40021000 	.word	0x40021000
 80029a0:	08009910 	.word	0x08009910
 80029a4:	00f42400 	.word	0x00f42400
 80029a8:	007a1200 	.word	0x007a1200

080029ac <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80029ac:	b480      	push	{r7}
 80029ae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80029b0:	4b03      	ldr	r3, [pc, #12]	; (80029c0 <HAL_RCC_GetHCLKFreq+0x14>)
 80029b2:	681b      	ldr	r3, [r3, #0]
}
 80029b4:	4618      	mov	r0, r3
 80029b6:	46bd      	mov	sp, r7
 80029b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029bc:	4770      	bx	lr
 80029be:	bf00      	nop
 80029c0:	20000004 	.word	0x20000004

080029c4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80029c4:	b580      	push	{r7, lr}
 80029c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80029c8:	f7ff fff0 	bl	80029ac <HAL_RCC_GetHCLKFreq>
 80029cc:	4602      	mov	r2, r0
 80029ce:	4b06      	ldr	r3, [pc, #24]	; (80029e8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80029d0:	689b      	ldr	r3, [r3, #8]
 80029d2:	0a1b      	lsrs	r3, r3, #8
 80029d4:	f003 0307 	and.w	r3, r3, #7
 80029d8:	4904      	ldr	r1, [pc, #16]	; (80029ec <HAL_RCC_GetPCLK1Freq+0x28>)
 80029da:	5ccb      	ldrb	r3, [r1, r3]
 80029dc:	f003 031f 	and.w	r3, r3, #31
 80029e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80029e4:	4618      	mov	r0, r3
 80029e6:	bd80      	pop	{r7, pc}
 80029e8:	40021000 	.word	0x40021000
 80029ec:	08009908 	.word	0x08009908

080029f0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80029f0:	b580      	push	{r7, lr}
 80029f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80029f4:	f7ff ffda 	bl	80029ac <HAL_RCC_GetHCLKFreq>
 80029f8:	4602      	mov	r2, r0
 80029fa:	4b06      	ldr	r3, [pc, #24]	; (8002a14 <HAL_RCC_GetPCLK2Freq+0x24>)
 80029fc:	689b      	ldr	r3, [r3, #8]
 80029fe:	0adb      	lsrs	r3, r3, #11
 8002a00:	f003 0307 	and.w	r3, r3, #7
 8002a04:	4904      	ldr	r1, [pc, #16]	; (8002a18 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002a06:	5ccb      	ldrb	r3, [r1, r3]
 8002a08:	f003 031f 	and.w	r3, r3, #31
 8002a0c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002a10:	4618      	mov	r0, r3
 8002a12:	bd80      	pop	{r7, pc}
 8002a14:	40021000 	.word	0x40021000
 8002a18:	08009908 	.word	0x08009908

08002a1c <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002a1c:	b480      	push	{r7}
 8002a1e:	b083      	sub	sp, #12
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	6078      	str	r0, [r7, #4]
 8002a24:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	220f      	movs	r2, #15
 8002a2a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8002a2c:	4b12      	ldr	r3, [pc, #72]	; (8002a78 <HAL_RCC_GetClockConfig+0x5c>)
 8002a2e:	689b      	ldr	r3, [r3, #8]
 8002a30:	f003 0203 	and.w	r2, r3, #3
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8002a38:	4b0f      	ldr	r3, [pc, #60]	; (8002a78 <HAL_RCC_GetClockConfig+0x5c>)
 8002a3a:	689b      	ldr	r3, [r3, #8]
 8002a3c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8002a44:	4b0c      	ldr	r3, [pc, #48]	; (8002a78 <HAL_RCC_GetClockConfig+0x5c>)
 8002a46:	689b      	ldr	r3, [r3, #8]
 8002a48:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8002a50:	4b09      	ldr	r3, [pc, #36]	; (8002a78 <HAL_RCC_GetClockConfig+0x5c>)
 8002a52:	689b      	ldr	r3, [r3, #8]
 8002a54:	08db      	lsrs	r3, r3, #3
 8002a56:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8002a5e:	4b07      	ldr	r3, [pc, #28]	; (8002a7c <HAL_RCC_GetClockConfig+0x60>)
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f003 0207 	and.w	r2, r3, #7
 8002a66:	683b      	ldr	r3, [r7, #0]
 8002a68:	601a      	str	r2, [r3, #0]
}
 8002a6a:	bf00      	nop
 8002a6c:	370c      	adds	r7, #12
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a74:	4770      	bx	lr
 8002a76:	bf00      	nop
 8002a78:	40021000 	.word	0x40021000
 8002a7c:	40022000 	.word	0x40022000

08002a80 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002a80:	b580      	push	{r7, lr}
 8002a82:	b086      	sub	sp, #24
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002a88:	2300      	movs	r3, #0
 8002a8a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002a8c:	4b2a      	ldr	r3, [pc, #168]	; (8002b38 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002a8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a90:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d003      	beq.n	8002aa0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002a98:	f7ff f984 	bl	8001da4 <HAL_PWREx_GetVoltageRange>
 8002a9c:	6178      	str	r0, [r7, #20]
 8002a9e:	e014      	b.n	8002aca <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002aa0:	4b25      	ldr	r3, [pc, #148]	; (8002b38 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002aa2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002aa4:	4a24      	ldr	r2, [pc, #144]	; (8002b38 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002aa6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002aaa:	6593      	str	r3, [r2, #88]	; 0x58
 8002aac:	4b22      	ldr	r3, [pc, #136]	; (8002b38 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002aae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ab0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ab4:	60fb      	str	r3, [r7, #12]
 8002ab6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002ab8:	f7ff f974 	bl	8001da4 <HAL_PWREx_GetVoltageRange>
 8002abc:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002abe:	4b1e      	ldr	r3, [pc, #120]	; (8002b38 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002ac0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ac2:	4a1d      	ldr	r2, [pc, #116]	; (8002b38 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002ac4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ac8:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002aca:	697b      	ldr	r3, [r7, #20]
 8002acc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002ad0:	d10b      	bne.n	8002aea <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	2b80      	cmp	r3, #128	; 0x80
 8002ad6:	d919      	bls.n	8002b0c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	2ba0      	cmp	r3, #160	; 0xa0
 8002adc:	d902      	bls.n	8002ae4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002ade:	2302      	movs	r3, #2
 8002ae0:	613b      	str	r3, [r7, #16]
 8002ae2:	e013      	b.n	8002b0c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002ae4:	2301      	movs	r3, #1
 8002ae6:	613b      	str	r3, [r7, #16]
 8002ae8:	e010      	b.n	8002b0c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	2b80      	cmp	r3, #128	; 0x80
 8002aee:	d902      	bls.n	8002af6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002af0:	2303      	movs	r3, #3
 8002af2:	613b      	str	r3, [r7, #16]
 8002af4:	e00a      	b.n	8002b0c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	2b80      	cmp	r3, #128	; 0x80
 8002afa:	d102      	bne.n	8002b02 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002afc:	2302      	movs	r3, #2
 8002afe:	613b      	str	r3, [r7, #16]
 8002b00:	e004      	b.n	8002b0c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	2b70      	cmp	r3, #112	; 0x70
 8002b06:	d101      	bne.n	8002b0c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002b08:	2301      	movs	r3, #1
 8002b0a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002b0c:	4b0b      	ldr	r3, [pc, #44]	; (8002b3c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f023 0207 	bic.w	r2, r3, #7
 8002b14:	4909      	ldr	r1, [pc, #36]	; (8002b3c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002b16:	693b      	ldr	r3, [r7, #16]
 8002b18:	4313      	orrs	r3, r2
 8002b1a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002b1c:	4b07      	ldr	r3, [pc, #28]	; (8002b3c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f003 0307 	and.w	r3, r3, #7
 8002b24:	693a      	ldr	r2, [r7, #16]
 8002b26:	429a      	cmp	r2, r3
 8002b28:	d001      	beq.n	8002b2e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002b2a:	2301      	movs	r3, #1
 8002b2c:	e000      	b.n	8002b30 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002b2e:	2300      	movs	r3, #0
}
 8002b30:	4618      	mov	r0, r3
 8002b32:	3718      	adds	r7, #24
 8002b34:	46bd      	mov	sp, r7
 8002b36:	bd80      	pop	{r7, pc}
 8002b38:	40021000 	.word	0x40021000
 8002b3c:	40022000 	.word	0x40022000

08002b40 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002b40:	b580      	push	{r7, lr}
 8002b42:	b086      	sub	sp, #24
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002b48:	2300      	movs	r3, #0
 8002b4a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002b4c:	2300      	movs	r3, #0
 8002b4e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d031      	beq.n	8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b60:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002b64:	d01a      	beq.n	8002b9c <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8002b66:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002b6a:	d814      	bhi.n	8002b96 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d009      	beq.n	8002b84 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002b70:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002b74:	d10f      	bne.n	8002b96 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8002b76:	4b5d      	ldr	r3, [pc, #372]	; (8002cec <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002b78:	68db      	ldr	r3, [r3, #12]
 8002b7a:	4a5c      	ldr	r2, [pc, #368]	; (8002cec <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002b7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b80:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002b82:	e00c      	b.n	8002b9e <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	3304      	adds	r3, #4
 8002b88:	2100      	movs	r1, #0
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	f000 f9de 	bl	8002f4c <RCCEx_PLLSAI1_Config>
 8002b90:	4603      	mov	r3, r0
 8002b92:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002b94:	e003      	b.n	8002b9e <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002b96:	2301      	movs	r3, #1
 8002b98:	74fb      	strb	r3, [r7, #19]
      break;
 8002b9a:	e000      	b.n	8002b9e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8002b9c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002b9e:	7cfb      	ldrb	r3, [r7, #19]
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d10b      	bne.n	8002bbc <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002ba4:	4b51      	ldr	r3, [pc, #324]	; (8002cec <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002ba6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002baa:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bb2:	494e      	ldr	r1, [pc, #312]	; (8002cec <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002bb4:	4313      	orrs	r3, r2
 8002bb6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002bba:	e001      	b.n	8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002bbc:	7cfb      	ldrb	r3, [r7, #19]
 8002bbe:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	f000 809e 	beq.w	8002d0a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002bce:	2300      	movs	r3, #0
 8002bd0:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002bd2:	4b46      	ldr	r3, [pc, #280]	; (8002cec <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002bd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bd6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d101      	bne.n	8002be2 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8002bde:	2301      	movs	r3, #1
 8002be0:	e000      	b.n	8002be4 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8002be2:	2300      	movs	r3, #0
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d00d      	beq.n	8002c04 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002be8:	4b40      	ldr	r3, [pc, #256]	; (8002cec <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002bea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bec:	4a3f      	ldr	r2, [pc, #252]	; (8002cec <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002bee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002bf2:	6593      	str	r3, [r2, #88]	; 0x58
 8002bf4:	4b3d      	ldr	r3, [pc, #244]	; (8002cec <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002bf6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bf8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bfc:	60bb      	str	r3, [r7, #8]
 8002bfe:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c00:	2301      	movs	r3, #1
 8002c02:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002c04:	4b3a      	ldr	r3, [pc, #232]	; (8002cf0 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	4a39      	ldr	r2, [pc, #228]	; (8002cf0 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002c0a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c0e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002c10:	f7fe fc62 	bl	80014d8 <HAL_GetTick>
 8002c14:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002c16:	e009      	b.n	8002c2c <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c18:	f7fe fc5e 	bl	80014d8 <HAL_GetTick>
 8002c1c:	4602      	mov	r2, r0
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	1ad3      	subs	r3, r2, r3
 8002c22:	2b02      	cmp	r3, #2
 8002c24:	d902      	bls.n	8002c2c <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8002c26:	2303      	movs	r3, #3
 8002c28:	74fb      	strb	r3, [r7, #19]
        break;
 8002c2a:	e005      	b.n	8002c38 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002c2c:	4b30      	ldr	r3, [pc, #192]	; (8002cf0 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d0ef      	beq.n	8002c18 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8002c38:	7cfb      	ldrb	r3, [r7, #19]
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d15a      	bne.n	8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002c3e:	4b2b      	ldr	r3, [pc, #172]	; (8002cec <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002c40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c44:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c48:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002c4a:	697b      	ldr	r3, [r7, #20]
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d01e      	beq.n	8002c8e <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c54:	697a      	ldr	r2, [r7, #20]
 8002c56:	429a      	cmp	r2, r3
 8002c58:	d019      	beq.n	8002c8e <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002c5a:	4b24      	ldr	r3, [pc, #144]	; (8002cec <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002c5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c60:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c64:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002c66:	4b21      	ldr	r3, [pc, #132]	; (8002cec <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002c68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c6c:	4a1f      	ldr	r2, [pc, #124]	; (8002cec <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002c6e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c72:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002c76:	4b1d      	ldr	r3, [pc, #116]	; (8002cec <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002c78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c7c:	4a1b      	ldr	r2, [pc, #108]	; (8002cec <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002c7e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c82:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002c86:	4a19      	ldr	r2, [pc, #100]	; (8002cec <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002c88:	697b      	ldr	r3, [r7, #20]
 8002c8a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002c8e:	697b      	ldr	r3, [r7, #20]
 8002c90:	f003 0301 	and.w	r3, r3, #1
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d016      	beq.n	8002cc6 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c98:	f7fe fc1e 	bl	80014d8 <HAL_GetTick>
 8002c9c:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002c9e:	e00b      	b.n	8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ca0:	f7fe fc1a 	bl	80014d8 <HAL_GetTick>
 8002ca4:	4602      	mov	r2, r0
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	1ad3      	subs	r3, r2, r3
 8002caa:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cae:	4293      	cmp	r3, r2
 8002cb0:	d902      	bls.n	8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8002cb2:	2303      	movs	r3, #3
 8002cb4:	74fb      	strb	r3, [r7, #19]
            break;
 8002cb6:	e006      	b.n	8002cc6 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002cb8:	4b0c      	ldr	r3, [pc, #48]	; (8002cec <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002cba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cbe:	f003 0302 	and.w	r3, r3, #2
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d0ec      	beq.n	8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8002cc6:	7cfb      	ldrb	r3, [r7, #19]
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d10b      	bne.n	8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002ccc:	4b07      	ldr	r3, [pc, #28]	; (8002cec <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002cce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cd2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002cda:	4904      	ldr	r1, [pc, #16]	; (8002cec <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002cdc:	4313      	orrs	r3, r2
 8002cde:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002ce2:	e009      	b.n	8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002ce4:	7cfb      	ldrb	r3, [r7, #19]
 8002ce6:	74bb      	strb	r3, [r7, #18]
 8002ce8:	e006      	b.n	8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8002cea:	bf00      	nop
 8002cec:	40021000 	.word	0x40021000
 8002cf0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002cf4:	7cfb      	ldrb	r3, [r7, #19]
 8002cf6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002cf8:	7c7b      	ldrb	r3, [r7, #17]
 8002cfa:	2b01      	cmp	r3, #1
 8002cfc:	d105      	bne.n	8002d0a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002cfe:	4b8a      	ldr	r3, [pc, #552]	; (8002f28 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002d00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d02:	4a89      	ldr	r2, [pc, #548]	; (8002f28 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002d04:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d08:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f003 0301 	and.w	r3, r3, #1
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d00a      	beq.n	8002d2c <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002d16:	4b84      	ldr	r3, [pc, #528]	; (8002f28 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002d18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d1c:	f023 0203 	bic.w	r2, r3, #3
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	6a1b      	ldr	r3, [r3, #32]
 8002d24:	4980      	ldr	r1, [pc, #512]	; (8002f28 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002d26:	4313      	orrs	r3, r2
 8002d28:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f003 0302 	and.w	r3, r3, #2
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d00a      	beq.n	8002d4e <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002d38:	4b7b      	ldr	r3, [pc, #492]	; (8002f28 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002d3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d3e:	f023 020c 	bic.w	r2, r3, #12
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d46:	4978      	ldr	r1, [pc, #480]	; (8002f28 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002d48:	4313      	orrs	r3, r2
 8002d4a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f003 0320 	and.w	r3, r3, #32
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d00a      	beq.n	8002d70 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002d5a:	4b73      	ldr	r3, [pc, #460]	; (8002f28 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002d5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d60:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d68:	496f      	ldr	r1, [pc, #444]	; (8002f28 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002d6a:	4313      	orrs	r3, r2
 8002d6c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d00a      	beq.n	8002d92 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002d7c:	4b6a      	ldr	r3, [pc, #424]	; (8002f28 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002d7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d82:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d8a:	4967      	ldr	r1, [pc, #412]	; (8002f28 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002d8c:	4313      	orrs	r3, r2
 8002d8e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d00a      	beq.n	8002db4 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002d9e:	4b62      	ldr	r3, [pc, #392]	; (8002f28 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002da0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002da4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dac:	495e      	ldr	r1, [pc, #376]	; (8002f28 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002dae:	4313      	orrs	r3, r2
 8002db0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d00a      	beq.n	8002dd6 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002dc0:	4b59      	ldr	r3, [pc, #356]	; (8002f28 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002dc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002dc6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dce:	4956      	ldr	r1, [pc, #344]	; (8002f28 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002dd0:	4313      	orrs	r3, r2
 8002dd2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d00a      	beq.n	8002df8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002de2:	4b51      	ldr	r3, [pc, #324]	; (8002f28 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002de4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002de8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002df0:	494d      	ldr	r1, [pc, #308]	; (8002f28 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002df2:	4313      	orrs	r3, r2
 8002df4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d028      	beq.n	8002e56 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002e04:	4b48      	ldr	r3, [pc, #288]	; (8002f28 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002e06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e0a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e12:	4945      	ldr	r1, [pc, #276]	; (8002f28 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002e14:	4313      	orrs	r3, r2
 8002e16:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e1e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002e22:	d106      	bne.n	8002e32 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002e24:	4b40      	ldr	r3, [pc, #256]	; (8002f28 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002e26:	68db      	ldr	r3, [r3, #12]
 8002e28:	4a3f      	ldr	r2, [pc, #252]	; (8002f28 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002e2a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002e2e:	60d3      	str	r3, [r2, #12]
 8002e30:	e011      	b.n	8002e56 <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e36:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002e3a:	d10c      	bne.n	8002e56 <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	3304      	adds	r3, #4
 8002e40:	2101      	movs	r1, #1
 8002e42:	4618      	mov	r0, r3
 8002e44:	f000 f882 	bl	8002f4c <RCCEx_PLLSAI1_Config>
 8002e48:	4603      	mov	r3, r0
 8002e4a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002e4c:	7cfb      	ldrb	r3, [r7, #19]
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d001      	beq.n	8002e56 <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 8002e52:	7cfb      	ldrb	r3, [r7, #19]
 8002e54:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d028      	beq.n	8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002e62:	4b31      	ldr	r3, [pc, #196]	; (8002f28 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002e64:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e68:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e70:	492d      	ldr	r1, [pc, #180]	; (8002f28 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002e72:	4313      	orrs	r3, r2
 8002e74:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e7c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002e80:	d106      	bne.n	8002e90 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002e82:	4b29      	ldr	r3, [pc, #164]	; (8002f28 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002e84:	68db      	ldr	r3, [r3, #12]
 8002e86:	4a28      	ldr	r2, [pc, #160]	; (8002f28 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002e88:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002e8c:	60d3      	str	r3, [r2, #12]
 8002e8e:	e011      	b.n	8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e94:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002e98:	d10c      	bne.n	8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	3304      	adds	r3, #4
 8002e9e:	2101      	movs	r1, #1
 8002ea0:	4618      	mov	r0, r3
 8002ea2:	f000 f853 	bl	8002f4c <RCCEx_PLLSAI1_Config>
 8002ea6:	4603      	mov	r3, r0
 8002ea8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002eaa:	7cfb      	ldrb	r3, [r7, #19]
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d001      	beq.n	8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 8002eb0:	7cfb      	ldrb	r3, [r7, #19]
 8002eb2:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d01c      	beq.n	8002efa <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002ec0:	4b19      	ldr	r3, [pc, #100]	; (8002f28 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002ec2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ec6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ece:	4916      	ldr	r1, [pc, #88]	; (8002f28 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002ed0:	4313      	orrs	r3, r2
 8002ed2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002eda:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002ede:	d10c      	bne.n	8002efa <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	3304      	adds	r3, #4
 8002ee4:	2102      	movs	r1, #2
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	f000 f830 	bl	8002f4c <RCCEx_PLLSAI1_Config>
 8002eec:	4603      	mov	r3, r0
 8002eee:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002ef0:	7cfb      	ldrb	r3, [r7, #19]
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d001      	beq.n	8002efa <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 8002ef6:	7cfb      	ldrb	r3, [r7, #19]
 8002ef8:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d00a      	beq.n	8002f1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002f06:	4b08      	ldr	r3, [pc, #32]	; (8002f28 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002f08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f0c:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f14:	4904      	ldr	r1, [pc, #16]	; (8002f28 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002f16:	4313      	orrs	r3, r2
 8002f18:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002f1c:	7cbb      	ldrb	r3, [r7, #18]
}
 8002f1e:	4618      	mov	r0, r3
 8002f20:	3718      	adds	r7, #24
 8002f22:	46bd      	mov	sp, r7
 8002f24:	bd80      	pop	{r7, pc}
 8002f26:	bf00      	nop
 8002f28:	40021000 	.word	0x40021000

08002f2c <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8002f2c:	b480      	push	{r7}
 8002f2e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8002f30:	4b05      	ldr	r3, [pc, #20]	; (8002f48 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	4a04      	ldr	r2, [pc, #16]	; (8002f48 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8002f36:	f043 0304 	orr.w	r3, r3, #4
 8002f3a:	6013      	str	r3, [r2, #0]
}
 8002f3c:	bf00      	nop
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f44:	4770      	bx	lr
 8002f46:	bf00      	nop
 8002f48:	40021000 	.word	0x40021000

08002f4c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	b084      	sub	sp, #16
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	6078      	str	r0, [r7, #4]
 8002f54:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002f56:	2300      	movs	r3, #0
 8002f58:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002f5a:	4b74      	ldr	r3, [pc, #464]	; (800312c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002f5c:	68db      	ldr	r3, [r3, #12]
 8002f5e:	f003 0303 	and.w	r3, r3, #3
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d018      	beq.n	8002f98 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002f66:	4b71      	ldr	r3, [pc, #452]	; (800312c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002f68:	68db      	ldr	r3, [r3, #12]
 8002f6a:	f003 0203 	and.w	r2, r3, #3
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	429a      	cmp	r2, r3
 8002f74:	d10d      	bne.n	8002f92 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
       ||
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d009      	beq.n	8002f92 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002f7e:	4b6b      	ldr	r3, [pc, #428]	; (800312c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002f80:	68db      	ldr	r3, [r3, #12]
 8002f82:	091b      	lsrs	r3, r3, #4
 8002f84:	f003 0307 	and.w	r3, r3, #7
 8002f88:	1c5a      	adds	r2, r3, #1
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	685b      	ldr	r3, [r3, #4]
       ||
 8002f8e:	429a      	cmp	r2, r3
 8002f90:	d047      	beq.n	8003022 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002f92:	2301      	movs	r3, #1
 8002f94:	73fb      	strb	r3, [r7, #15]
 8002f96:	e044      	b.n	8003022 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	2b03      	cmp	r3, #3
 8002f9e:	d018      	beq.n	8002fd2 <RCCEx_PLLSAI1_Config+0x86>
 8002fa0:	2b03      	cmp	r3, #3
 8002fa2:	d825      	bhi.n	8002ff0 <RCCEx_PLLSAI1_Config+0xa4>
 8002fa4:	2b01      	cmp	r3, #1
 8002fa6:	d002      	beq.n	8002fae <RCCEx_PLLSAI1_Config+0x62>
 8002fa8:	2b02      	cmp	r3, #2
 8002faa:	d009      	beq.n	8002fc0 <RCCEx_PLLSAI1_Config+0x74>
 8002fac:	e020      	b.n	8002ff0 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002fae:	4b5f      	ldr	r3, [pc, #380]	; (800312c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f003 0302 	and.w	r3, r3, #2
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d11d      	bne.n	8002ff6 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002fba:	2301      	movs	r3, #1
 8002fbc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002fbe:	e01a      	b.n	8002ff6 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002fc0:	4b5a      	ldr	r3, [pc, #360]	; (800312c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d116      	bne.n	8002ffa <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002fcc:	2301      	movs	r3, #1
 8002fce:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002fd0:	e013      	b.n	8002ffa <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002fd2:	4b56      	ldr	r3, [pc, #344]	; (800312c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d10f      	bne.n	8002ffe <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002fde:	4b53      	ldr	r3, [pc, #332]	; (800312c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d109      	bne.n	8002ffe <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002fea:	2301      	movs	r3, #1
 8002fec:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002fee:	e006      	b.n	8002ffe <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002ff0:	2301      	movs	r3, #1
 8002ff2:	73fb      	strb	r3, [r7, #15]
      break;
 8002ff4:	e004      	b.n	8003000 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002ff6:	bf00      	nop
 8002ff8:	e002      	b.n	8003000 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002ffa:	bf00      	nop
 8002ffc:	e000      	b.n	8003000 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002ffe:	bf00      	nop
    }

    if(status == HAL_OK)
 8003000:	7bfb      	ldrb	r3, [r7, #15]
 8003002:	2b00      	cmp	r3, #0
 8003004:	d10d      	bne.n	8003022 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003006:	4b49      	ldr	r3, [pc, #292]	; (800312c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003008:	68db      	ldr	r3, [r3, #12]
 800300a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	6819      	ldr	r1, [r3, #0]
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	685b      	ldr	r3, [r3, #4]
 8003016:	3b01      	subs	r3, #1
 8003018:	011b      	lsls	r3, r3, #4
 800301a:	430b      	orrs	r3, r1
 800301c:	4943      	ldr	r1, [pc, #268]	; (800312c <RCCEx_PLLSAI1_Config+0x1e0>)
 800301e:	4313      	orrs	r3, r2
 8003020:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003022:	7bfb      	ldrb	r3, [r7, #15]
 8003024:	2b00      	cmp	r3, #0
 8003026:	d17c      	bne.n	8003122 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003028:	4b40      	ldr	r3, [pc, #256]	; (800312c <RCCEx_PLLSAI1_Config+0x1e0>)
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	4a3f      	ldr	r2, [pc, #252]	; (800312c <RCCEx_PLLSAI1_Config+0x1e0>)
 800302e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003032:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003034:	f7fe fa50 	bl	80014d8 <HAL_GetTick>
 8003038:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800303a:	e009      	b.n	8003050 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800303c:	f7fe fa4c 	bl	80014d8 <HAL_GetTick>
 8003040:	4602      	mov	r2, r0
 8003042:	68bb      	ldr	r3, [r7, #8]
 8003044:	1ad3      	subs	r3, r2, r3
 8003046:	2b02      	cmp	r3, #2
 8003048:	d902      	bls.n	8003050 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800304a:	2303      	movs	r3, #3
 800304c:	73fb      	strb	r3, [r7, #15]
        break;
 800304e:	e005      	b.n	800305c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003050:	4b36      	ldr	r3, [pc, #216]	; (800312c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003058:	2b00      	cmp	r3, #0
 800305a:	d1ef      	bne.n	800303c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800305c:	7bfb      	ldrb	r3, [r7, #15]
 800305e:	2b00      	cmp	r3, #0
 8003060:	d15f      	bne.n	8003122 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003062:	683b      	ldr	r3, [r7, #0]
 8003064:	2b00      	cmp	r3, #0
 8003066:	d110      	bne.n	800308a <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003068:	4b30      	ldr	r3, [pc, #192]	; (800312c <RCCEx_PLLSAI1_Config+0x1e0>)
 800306a:	691b      	ldr	r3, [r3, #16]
 800306c:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8003070:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003074:	687a      	ldr	r2, [r7, #4]
 8003076:	6892      	ldr	r2, [r2, #8]
 8003078:	0211      	lsls	r1, r2, #8
 800307a:	687a      	ldr	r2, [r7, #4]
 800307c:	68d2      	ldr	r2, [r2, #12]
 800307e:	06d2      	lsls	r2, r2, #27
 8003080:	430a      	orrs	r2, r1
 8003082:	492a      	ldr	r1, [pc, #168]	; (800312c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003084:	4313      	orrs	r3, r2
 8003086:	610b      	str	r3, [r1, #16]
 8003088:	e027      	b.n	80030da <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800308a:	683b      	ldr	r3, [r7, #0]
 800308c:	2b01      	cmp	r3, #1
 800308e:	d112      	bne.n	80030b6 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003090:	4b26      	ldr	r3, [pc, #152]	; (800312c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003092:	691b      	ldr	r3, [r3, #16]
 8003094:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003098:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800309c:	687a      	ldr	r2, [r7, #4]
 800309e:	6892      	ldr	r2, [r2, #8]
 80030a0:	0211      	lsls	r1, r2, #8
 80030a2:	687a      	ldr	r2, [r7, #4]
 80030a4:	6912      	ldr	r2, [r2, #16]
 80030a6:	0852      	lsrs	r2, r2, #1
 80030a8:	3a01      	subs	r2, #1
 80030aa:	0552      	lsls	r2, r2, #21
 80030ac:	430a      	orrs	r2, r1
 80030ae:	491f      	ldr	r1, [pc, #124]	; (800312c <RCCEx_PLLSAI1_Config+0x1e0>)
 80030b0:	4313      	orrs	r3, r2
 80030b2:	610b      	str	r3, [r1, #16]
 80030b4:	e011      	b.n	80030da <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80030b6:	4b1d      	ldr	r3, [pc, #116]	; (800312c <RCCEx_PLLSAI1_Config+0x1e0>)
 80030b8:	691b      	ldr	r3, [r3, #16]
 80030ba:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80030be:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80030c2:	687a      	ldr	r2, [r7, #4]
 80030c4:	6892      	ldr	r2, [r2, #8]
 80030c6:	0211      	lsls	r1, r2, #8
 80030c8:	687a      	ldr	r2, [r7, #4]
 80030ca:	6952      	ldr	r2, [r2, #20]
 80030cc:	0852      	lsrs	r2, r2, #1
 80030ce:	3a01      	subs	r2, #1
 80030d0:	0652      	lsls	r2, r2, #25
 80030d2:	430a      	orrs	r2, r1
 80030d4:	4915      	ldr	r1, [pc, #84]	; (800312c <RCCEx_PLLSAI1_Config+0x1e0>)
 80030d6:	4313      	orrs	r3, r2
 80030d8:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80030da:	4b14      	ldr	r3, [pc, #80]	; (800312c <RCCEx_PLLSAI1_Config+0x1e0>)
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	4a13      	ldr	r2, [pc, #76]	; (800312c <RCCEx_PLLSAI1_Config+0x1e0>)
 80030e0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80030e4:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030e6:	f7fe f9f7 	bl	80014d8 <HAL_GetTick>
 80030ea:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80030ec:	e009      	b.n	8003102 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80030ee:	f7fe f9f3 	bl	80014d8 <HAL_GetTick>
 80030f2:	4602      	mov	r2, r0
 80030f4:	68bb      	ldr	r3, [r7, #8]
 80030f6:	1ad3      	subs	r3, r2, r3
 80030f8:	2b02      	cmp	r3, #2
 80030fa:	d902      	bls.n	8003102 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 80030fc:	2303      	movs	r3, #3
 80030fe:	73fb      	strb	r3, [r7, #15]
          break;
 8003100:	e005      	b.n	800310e <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003102:	4b0a      	ldr	r3, [pc, #40]	; (800312c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800310a:	2b00      	cmp	r3, #0
 800310c:	d0ef      	beq.n	80030ee <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 800310e:	7bfb      	ldrb	r3, [r7, #15]
 8003110:	2b00      	cmp	r3, #0
 8003112:	d106      	bne.n	8003122 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003114:	4b05      	ldr	r3, [pc, #20]	; (800312c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003116:	691a      	ldr	r2, [r3, #16]
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	699b      	ldr	r3, [r3, #24]
 800311c:	4903      	ldr	r1, [pc, #12]	; (800312c <RCCEx_PLLSAI1_Config+0x1e0>)
 800311e:	4313      	orrs	r3, r2
 8003120:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003122:	7bfb      	ldrb	r3, [r7, #15]
}
 8003124:	4618      	mov	r0, r3
 8003126:	3710      	adds	r7, #16
 8003128:	46bd      	mov	sp, r7
 800312a:	bd80      	pop	{r7, pc}
 800312c:	40021000 	.word	0x40021000

08003130 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003130:	b580      	push	{r7, lr}
 8003132:	b082      	sub	sp, #8
 8003134:	af00      	add	r7, sp, #0
 8003136:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	2b00      	cmp	r3, #0
 800313c:	d101      	bne.n	8003142 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800313e:	2301      	movs	r3, #1
 8003140:	e049      	b.n	80031d6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003148:	b2db      	uxtb	r3, r3
 800314a:	2b00      	cmp	r3, #0
 800314c:	d106      	bne.n	800315c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	2200      	movs	r2, #0
 8003152:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003156:	6878      	ldr	r0, [r7, #4]
 8003158:	f7fd fe26 	bl	8000da8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	2202      	movs	r2, #2
 8003160:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681a      	ldr	r2, [r3, #0]
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	3304      	adds	r3, #4
 800316c:	4619      	mov	r1, r3
 800316e:	4610      	mov	r0, r2
 8003170:	f000 fcf0 	bl	8003b54 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	2201      	movs	r2, #1
 8003178:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	2201      	movs	r2, #1
 8003180:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	2201      	movs	r2, #1
 8003188:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	2201      	movs	r2, #1
 8003190:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	2201      	movs	r2, #1
 8003198:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	2201      	movs	r2, #1
 80031a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	2201      	movs	r2, #1
 80031a8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	2201      	movs	r2, #1
 80031b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	2201      	movs	r2, #1
 80031b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	2201      	movs	r2, #1
 80031c0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	2201      	movs	r2, #1
 80031c8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	2201      	movs	r2, #1
 80031d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80031d4:	2300      	movs	r3, #0
}
 80031d6:	4618      	mov	r0, r3
 80031d8:	3708      	adds	r7, #8
 80031da:	46bd      	mov	sp, r7
 80031dc:	bd80      	pop	{r7, pc}
	...

080031e0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80031e0:	b480      	push	{r7}
 80031e2:	b085      	sub	sp, #20
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031ee:	b2db      	uxtb	r3, r3
 80031f0:	2b01      	cmp	r3, #1
 80031f2:	d001      	beq.n	80031f8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80031f4:	2301      	movs	r3, #1
 80031f6:	e03b      	b.n	8003270 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	2202      	movs	r2, #2
 80031fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	68da      	ldr	r2, [r3, #12]
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f042 0201 	orr.w	r2, r2, #1
 800320e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	4a19      	ldr	r2, [pc, #100]	; (800327c <HAL_TIM_Base_Start_IT+0x9c>)
 8003216:	4293      	cmp	r3, r2
 8003218:	d009      	beq.n	800322e <HAL_TIM_Base_Start_IT+0x4e>
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003222:	d004      	beq.n	800322e <HAL_TIM_Base_Start_IT+0x4e>
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	4a15      	ldr	r2, [pc, #84]	; (8003280 <HAL_TIM_Base_Start_IT+0xa0>)
 800322a:	4293      	cmp	r3, r2
 800322c:	d115      	bne.n	800325a <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	689a      	ldr	r2, [r3, #8]
 8003234:	4b13      	ldr	r3, [pc, #76]	; (8003284 <HAL_TIM_Base_Start_IT+0xa4>)
 8003236:	4013      	ands	r3, r2
 8003238:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	2b06      	cmp	r3, #6
 800323e:	d015      	beq.n	800326c <HAL_TIM_Base_Start_IT+0x8c>
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003246:	d011      	beq.n	800326c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	681a      	ldr	r2, [r3, #0]
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f042 0201 	orr.w	r2, r2, #1
 8003256:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003258:	e008      	b.n	800326c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	681a      	ldr	r2, [r3, #0]
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f042 0201 	orr.w	r2, r2, #1
 8003268:	601a      	str	r2, [r3, #0]
 800326a:	e000      	b.n	800326e <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800326c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800326e:	2300      	movs	r3, #0
}
 8003270:	4618      	mov	r0, r3
 8003272:	3714      	adds	r7, #20
 8003274:	46bd      	mov	sp, r7
 8003276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800327a:	4770      	bx	lr
 800327c:	40012c00 	.word	0x40012c00
 8003280:	40014000 	.word	0x40014000
 8003284:	00010007 	.word	0x00010007

08003288 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003288:	b580      	push	{r7, lr}
 800328a:	b082      	sub	sp, #8
 800328c:	af00      	add	r7, sp, #0
 800328e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	2b00      	cmp	r3, #0
 8003294:	d101      	bne.n	800329a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003296:	2301      	movs	r3, #1
 8003298:	e049      	b.n	800332e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032a0:	b2db      	uxtb	r3, r3
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d106      	bne.n	80032b4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	2200      	movs	r2, #0
 80032aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80032ae:	6878      	ldr	r0, [r7, #4]
 80032b0:	f000 f841 	bl	8003336 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	2202      	movs	r2, #2
 80032b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681a      	ldr	r2, [r3, #0]
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	3304      	adds	r3, #4
 80032c4:	4619      	mov	r1, r3
 80032c6:	4610      	mov	r0, r2
 80032c8:	f000 fc44 	bl	8003b54 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	2201      	movs	r2, #1
 80032d0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	2201      	movs	r2, #1
 80032d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	2201      	movs	r2, #1
 80032e0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	2201      	movs	r2, #1
 80032e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	2201      	movs	r2, #1
 80032f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	2201      	movs	r2, #1
 80032f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	2201      	movs	r2, #1
 8003300:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	2201      	movs	r2, #1
 8003308:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	2201      	movs	r2, #1
 8003310:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	2201      	movs	r2, #1
 8003318:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	2201      	movs	r2, #1
 8003320:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	2201      	movs	r2, #1
 8003328:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800332c:	2300      	movs	r3, #0
}
 800332e:	4618      	mov	r0, r3
 8003330:	3708      	adds	r7, #8
 8003332:	46bd      	mov	sp, r7
 8003334:	bd80      	pop	{r7, pc}

08003336 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003336:	b480      	push	{r7}
 8003338:	b083      	sub	sp, #12
 800333a:	af00      	add	r7, sp, #0
 800333c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800333e:	bf00      	nop
 8003340:	370c      	adds	r7, #12
 8003342:	46bd      	mov	sp, r7
 8003344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003348:	4770      	bx	lr
	...

0800334c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800334c:	b580      	push	{r7, lr}
 800334e:	b084      	sub	sp, #16
 8003350:	af00      	add	r7, sp, #0
 8003352:	6078      	str	r0, [r7, #4]
 8003354:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003356:	683b      	ldr	r3, [r7, #0]
 8003358:	2b00      	cmp	r3, #0
 800335a:	d109      	bne.n	8003370 <HAL_TIM_PWM_Start+0x24>
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003362:	b2db      	uxtb	r3, r3
 8003364:	2b01      	cmp	r3, #1
 8003366:	bf14      	ite	ne
 8003368:	2301      	movne	r3, #1
 800336a:	2300      	moveq	r3, #0
 800336c:	b2db      	uxtb	r3, r3
 800336e:	e03c      	b.n	80033ea <HAL_TIM_PWM_Start+0x9e>
 8003370:	683b      	ldr	r3, [r7, #0]
 8003372:	2b04      	cmp	r3, #4
 8003374:	d109      	bne.n	800338a <HAL_TIM_PWM_Start+0x3e>
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800337c:	b2db      	uxtb	r3, r3
 800337e:	2b01      	cmp	r3, #1
 8003380:	bf14      	ite	ne
 8003382:	2301      	movne	r3, #1
 8003384:	2300      	moveq	r3, #0
 8003386:	b2db      	uxtb	r3, r3
 8003388:	e02f      	b.n	80033ea <HAL_TIM_PWM_Start+0x9e>
 800338a:	683b      	ldr	r3, [r7, #0]
 800338c:	2b08      	cmp	r3, #8
 800338e:	d109      	bne.n	80033a4 <HAL_TIM_PWM_Start+0x58>
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003396:	b2db      	uxtb	r3, r3
 8003398:	2b01      	cmp	r3, #1
 800339a:	bf14      	ite	ne
 800339c:	2301      	movne	r3, #1
 800339e:	2300      	moveq	r3, #0
 80033a0:	b2db      	uxtb	r3, r3
 80033a2:	e022      	b.n	80033ea <HAL_TIM_PWM_Start+0x9e>
 80033a4:	683b      	ldr	r3, [r7, #0]
 80033a6:	2b0c      	cmp	r3, #12
 80033a8:	d109      	bne.n	80033be <HAL_TIM_PWM_Start+0x72>
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80033b0:	b2db      	uxtb	r3, r3
 80033b2:	2b01      	cmp	r3, #1
 80033b4:	bf14      	ite	ne
 80033b6:	2301      	movne	r3, #1
 80033b8:	2300      	moveq	r3, #0
 80033ba:	b2db      	uxtb	r3, r3
 80033bc:	e015      	b.n	80033ea <HAL_TIM_PWM_Start+0x9e>
 80033be:	683b      	ldr	r3, [r7, #0]
 80033c0:	2b10      	cmp	r3, #16
 80033c2:	d109      	bne.n	80033d8 <HAL_TIM_PWM_Start+0x8c>
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80033ca:	b2db      	uxtb	r3, r3
 80033cc:	2b01      	cmp	r3, #1
 80033ce:	bf14      	ite	ne
 80033d0:	2301      	movne	r3, #1
 80033d2:	2300      	moveq	r3, #0
 80033d4:	b2db      	uxtb	r3, r3
 80033d6:	e008      	b.n	80033ea <HAL_TIM_PWM_Start+0x9e>
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80033de:	b2db      	uxtb	r3, r3
 80033e0:	2b01      	cmp	r3, #1
 80033e2:	bf14      	ite	ne
 80033e4:	2301      	movne	r3, #1
 80033e6:	2300      	moveq	r3, #0
 80033e8:	b2db      	uxtb	r3, r3
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d001      	beq.n	80033f2 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80033ee:	2301      	movs	r3, #1
 80033f0:	e07e      	b.n	80034f0 <HAL_TIM_PWM_Start+0x1a4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80033f2:	683b      	ldr	r3, [r7, #0]
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d104      	bne.n	8003402 <HAL_TIM_PWM_Start+0xb6>
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	2202      	movs	r2, #2
 80033fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003400:	e023      	b.n	800344a <HAL_TIM_PWM_Start+0xfe>
 8003402:	683b      	ldr	r3, [r7, #0]
 8003404:	2b04      	cmp	r3, #4
 8003406:	d104      	bne.n	8003412 <HAL_TIM_PWM_Start+0xc6>
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	2202      	movs	r2, #2
 800340c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003410:	e01b      	b.n	800344a <HAL_TIM_PWM_Start+0xfe>
 8003412:	683b      	ldr	r3, [r7, #0]
 8003414:	2b08      	cmp	r3, #8
 8003416:	d104      	bne.n	8003422 <HAL_TIM_PWM_Start+0xd6>
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	2202      	movs	r2, #2
 800341c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003420:	e013      	b.n	800344a <HAL_TIM_PWM_Start+0xfe>
 8003422:	683b      	ldr	r3, [r7, #0]
 8003424:	2b0c      	cmp	r3, #12
 8003426:	d104      	bne.n	8003432 <HAL_TIM_PWM_Start+0xe6>
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	2202      	movs	r2, #2
 800342c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003430:	e00b      	b.n	800344a <HAL_TIM_PWM_Start+0xfe>
 8003432:	683b      	ldr	r3, [r7, #0]
 8003434:	2b10      	cmp	r3, #16
 8003436:	d104      	bne.n	8003442 <HAL_TIM_PWM_Start+0xf6>
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	2202      	movs	r2, #2
 800343c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003440:	e003      	b.n	800344a <HAL_TIM_PWM_Start+0xfe>
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	2202      	movs	r2, #2
 8003446:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	2201      	movs	r2, #1
 8003450:	6839      	ldr	r1, [r7, #0]
 8003452:	4618      	mov	r0, r3
 8003454:	f000 fefa 	bl	800424c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	4a26      	ldr	r2, [pc, #152]	; (80034f8 <HAL_TIM_PWM_Start+0x1ac>)
 800345e:	4293      	cmp	r3, r2
 8003460:	d009      	beq.n	8003476 <HAL_TIM_PWM_Start+0x12a>
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	4a25      	ldr	r2, [pc, #148]	; (80034fc <HAL_TIM_PWM_Start+0x1b0>)
 8003468:	4293      	cmp	r3, r2
 800346a:	d004      	beq.n	8003476 <HAL_TIM_PWM_Start+0x12a>
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	4a23      	ldr	r2, [pc, #140]	; (8003500 <HAL_TIM_PWM_Start+0x1b4>)
 8003472:	4293      	cmp	r3, r2
 8003474:	d101      	bne.n	800347a <HAL_TIM_PWM_Start+0x12e>
 8003476:	2301      	movs	r3, #1
 8003478:	e000      	b.n	800347c <HAL_TIM_PWM_Start+0x130>
 800347a:	2300      	movs	r3, #0
 800347c:	2b00      	cmp	r3, #0
 800347e:	d007      	beq.n	8003490 <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800348e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	4a18      	ldr	r2, [pc, #96]	; (80034f8 <HAL_TIM_PWM_Start+0x1ac>)
 8003496:	4293      	cmp	r3, r2
 8003498:	d009      	beq.n	80034ae <HAL_TIM_PWM_Start+0x162>
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034a2:	d004      	beq.n	80034ae <HAL_TIM_PWM_Start+0x162>
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	4a14      	ldr	r2, [pc, #80]	; (80034fc <HAL_TIM_PWM_Start+0x1b0>)
 80034aa:	4293      	cmp	r3, r2
 80034ac:	d115      	bne.n	80034da <HAL_TIM_PWM_Start+0x18e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	689a      	ldr	r2, [r3, #8]
 80034b4:	4b13      	ldr	r3, [pc, #76]	; (8003504 <HAL_TIM_PWM_Start+0x1b8>)
 80034b6:	4013      	ands	r3, r2
 80034b8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	2b06      	cmp	r3, #6
 80034be:	d015      	beq.n	80034ec <HAL_TIM_PWM_Start+0x1a0>
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80034c6:	d011      	beq.n	80034ec <HAL_TIM_PWM_Start+0x1a0>
    {
      __HAL_TIM_ENABLE(htim);
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	681a      	ldr	r2, [r3, #0]
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f042 0201 	orr.w	r2, r2, #1
 80034d6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80034d8:	e008      	b.n	80034ec <HAL_TIM_PWM_Start+0x1a0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	681a      	ldr	r2, [r3, #0]
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f042 0201 	orr.w	r2, r2, #1
 80034e8:	601a      	str	r2, [r3, #0]
 80034ea:	e000      	b.n	80034ee <HAL_TIM_PWM_Start+0x1a2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80034ec:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80034ee:	2300      	movs	r3, #0
}
 80034f0:	4618      	mov	r0, r3
 80034f2:	3710      	adds	r7, #16
 80034f4:	46bd      	mov	sp, r7
 80034f6:	bd80      	pop	{r7, pc}
 80034f8:	40012c00 	.word	0x40012c00
 80034fc:	40014000 	.word	0x40014000
 8003500:	40014400 	.word	0x40014400
 8003504:	00010007 	.word	0x00010007

08003508 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003508:	b580      	push	{r7, lr}
 800350a:	b082      	sub	sp, #8
 800350c:	af00      	add	r7, sp, #0
 800350e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	691b      	ldr	r3, [r3, #16]
 8003516:	f003 0302 	and.w	r3, r3, #2
 800351a:	2b02      	cmp	r3, #2
 800351c:	d122      	bne.n	8003564 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	68db      	ldr	r3, [r3, #12]
 8003524:	f003 0302 	and.w	r3, r3, #2
 8003528:	2b02      	cmp	r3, #2
 800352a:	d11b      	bne.n	8003564 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f06f 0202 	mvn.w	r2, #2
 8003534:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	2201      	movs	r2, #1
 800353a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	699b      	ldr	r3, [r3, #24]
 8003542:	f003 0303 	and.w	r3, r3, #3
 8003546:	2b00      	cmp	r3, #0
 8003548:	d003      	beq.n	8003552 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800354a:	6878      	ldr	r0, [r7, #4]
 800354c:	f000 fae3 	bl	8003b16 <HAL_TIM_IC_CaptureCallback>
 8003550:	e005      	b.n	800355e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003552:	6878      	ldr	r0, [r7, #4]
 8003554:	f000 fad5 	bl	8003b02 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003558:	6878      	ldr	r0, [r7, #4]
 800355a:	f000 fae6 	bl	8003b2a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	2200      	movs	r2, #0
 8003562:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	691b      	ldr	r3, [r3, #16]
 800356a:	f003 0304 	and.w	r3, r3, #4
 800356e:	2b04      	cmp	r3, #4
 8003570:	d122      	bne.n	80035b8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	68db      	ldr	r3, [r3, #12]
 8003578:	f003 0304 	and.w	r3, r3, #4
 800357c:	2b04      	cmp	r3, #4
 800357e:	d11b      	bne.n	80035b8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f06f 0204 	mvn.w	r2, #4
 8003588:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	2202      	movs	r2, #2
 800358e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	699b      	ldr	r3, [r3, #24]
 8003596:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800359a:	2b00      	cmp	r3, #0
 800359c:	d003      	beq.n	80035a6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800359e:	6878      	ldr	r0, [r7, #4]
 80035a0:	f000 fab9 	bl	8003b16 <HAL_TIM_IC_CaptureCallback>
 80035a4:	e005      	b.n	80035b2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80035a6:	6878      	ldr	r0, [r7, #4]
 80035a8:	f000 faab 	bl	8003b02 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80035ac:	6878      	ldr	r0, [r7, #4]
 80035ae:	f000 fabc 	bl	8003b2a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	2200      	movs	r2, #0
 80035b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	691b      	ldr	r3, [r3, #16]
 80035be:	f003 0308 	and.w	r3, r3, #8
 80035c2:	2b08      	cmp	r3, #8
 80035c4:	d122      	bne.n	800360c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	68db      	ldr	r3, [r3, #12]
 80035cc:	f003 0308 	and.w	r3, r3, #8
 80035d0:	2b08      	cmp	r3, #8
 80035d2:	d11b      	bne.n	800360c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f06f 0208 	mvn.w	r2, #8
 80035dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	2204      	movs	r2, #4
 80035e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	69db      	ldr	r3, [r3, #28]
 80035ea:	f003 0303 	and.w	r3, r3, #3
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d003      	beq.n	80035fa <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80035f2:	6878      	ldr	r0, [r7, #4]
 80035f4:	f000 fa8f 	bl	8003b16 <HAL_TIM_IC_CaptureCallback>
 80035f8:	e005      	b.n	8003606 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80035fa:	6878      	ldr	r0, [r7, #4]
 80035fc:	f000 fa81 	bl	8003b02 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003600:	6878      	ldr	r0, [r7, #4]
 8003602:	f000 fa92 	bl	8003b2a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	2200      	movs	r2, #0
 800360a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	691b      	ldr	r3, [r3, #16]
 8003612:	f003 0310 	and.w	r3, r3, #16
 8003616:	2b10      	cmp	r3, #16
 8003618:	d122      	bne.n	8003660 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	68db      	ldr	r3, [r3, #12]
 8003620:	f003 0310 	and.w	r3, r3, #16
 8003624:	2b10      	cmp	r3, #16
 8003626:	d11b      	bne.n	8003660 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f06f 0210 	mvn.w	r2, #16
 8003630:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	2208      	movs	r2, #8
 8003636:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	69db      	ldr	r3, [r3, #28]
 800363e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003642:	2b00      	cmp	r3, #0
 8003644:	d003      	beq.n	800364e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003646:	6878      	ldr	r0, [r7, #4]
 8003648:	f000 fa65 	bl	8003b16 <HAL_TIM_IC_CaptureCallback>
 800364c:	e005      	b.n	800365a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800364e:	6878      	ldr	r0, [r7, #4]
 8003650:	f000 fa57 	bl	8003b02 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003654:	6878      	ldr	r0, [r7, #4]
 8003656:	f000 fa68 	bl	8003b2a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	2200      	movs	r2, #0
 800365e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	691b      	ldr	r3, [r3, #16]
 8003666:	f003 0301 	and.w	r3, r3, #1
 800366a:	2b01      	cmp	r3, #1
 800366c:	d10e      	bne.n	800368c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	68db      	ldr	r3, [r3, #12]
 8003674:	f003 0301 	and.w	r3, r3, #1
 8003678:	2b01      	cmp	r3, #1
 800367a:	d107      	bne.n	800368c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f06f 0201 	mvn.w	r2, #1
 8003684:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003686:	6878      	ldr	r0, [r7, #4]
 8003688:	f7fd fb4e 	bl	8000d28 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	691b      	ldr	r3, [r3, #16]
 8003692:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003696:	2b80      	cmp	r3, #128	; 0x80
 8003698:	d10e      	bne.n	80036b8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	68db      	ldr	r3, [r3, #12]
 80036a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036a4:	2b80      	cmp	r3, #128	; 0x80
 80036a6:	d107      	bne.n	80036b8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80036b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80036b2:	6878      	ldr	r0, [r7, #4]
 80036b4:	f000 fed8 	bl	8004468 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	691b      	ldr	r3, [r3, #16]
 80036be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80036c6:	d10e      	bne.n	80036e6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	68db      	ldr	r3, [r3, #12]
 80036ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036d2:	2b80      	cmp	r3, #128	; 0x80
 80036d4:	d107      	bne.n	80036e6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80036de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80036e0:	6878      	ldr	r0, [r7, #4]
 80036e2:	f000 fecb 	bl	800447c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	691b      	ldr	r3, [r3, #16]
 80036ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036f0:	2b40      	cmp	r3, #64	; 0x40
 80036f2:	d10e      	bne.n	8003712 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	68db      	ldr	r3, [r3, #12]
 80036fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036fe:	2b40      	cmp	r3, #64	; 0x40
 8003700:	d107      	bne.n	8003712 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800370a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800370c:	6878      	ldr	r0, [r7, #4]
 800370e:	f000 fa16 	bl	8003b3e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	691b      	ldr	r3, [r3, #16]
 8003718:	f003 0320 	and.w	r3, r3, #32
 800371c:	2b20      	cmp	r3, #32
 800371e:	d10e      	bne.n	800373e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	68db      	ldr	r3, [r3, #12]
 8003726:	f003 0320 	and.w	r3, r3, #32
 800372a:	2b20      	cmp	r3, #32
 800372c:	d107      	bne.n	800373e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f06f 0220 	mvn.w	r2, #32
 8003736:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003738:	6878      	ldr	r0, [r7, #4]
 800373a:	f000 fe8b 	bl	8004454 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800373e:	bf00      	nop
 8003740:	3708      	adds	r7, #8
 8003742:	46bd      	mov	sp, r7
 8003744:	bd80      	pop	{r7, pc}
	...

08003748 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003748:	b580      	push	{r7, lr}
 800374a:	b086      	sub	sp, #24
 800374c:	af00      	add	r7, sp, #0
 800374e:	60f8      	str	r0, [r7, #12]
 8003750:	60b9      	str	r1, [r7, #8]
 8003752:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003754:	2300      	movs	r3, #0
 8003756:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800375e:	2b01      	cmp	r3, #1
 8003760:	d101      	bne.n	8003766 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003762:	2302      	movs	r3, #2
 8003764:	e0ff      	b.n	8003966 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	2201      	movs	r2, #1
 800376a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	2b14      	cmp	r3, #20
 8003772:	f200 80f0 	bhi.w	8003956 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8003776:	a201      	add	r2, pc, #4	; (adr r2, 800377c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003778:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800377c:	080037d1 	.word	0x080037d1
 8003780:	08003957 	.word	0x08003957
 8003784:	08003957 	.word	0x08003957
 8003788:	08003957 	.word	0x08003957
 800378c:	08003811 	.word	0x08003811
 8003790:	08003957 	.word	0x08003957
 8003794:	08003957 	.word	0x08003957
 8003798:	08003957 	.word	0x08003957
 800379c:	08003853 	.word	0x08003853
 80037a0:	08003957 	.word	0x08003957
 80037a4:	08003957 	.word	0x08003957
 80037a8:	08003957 	.word	0x08003957
 80037ac:	08003893 	.word	0x08003893
 80037b0:	08003957 	.word	0x08003957
 80037b4:	08003957 	.word	0x08003957
 80037b8:	08003957 	.word	0x08003957
 80037bc:	080038d5 	.word	0x080038d5
 80037c0:	08003957 	.word	0x08003957
 80037c4:	08003957 	.word	0x08003957
 80037c8:	08003957 	.word	0x08003957
 80037cc:	08003915 	.word	0x08003915
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	68b9      	ldr	r1, [r7, #8]
 80037d6:	4618      	mov	r0, r3
 80037d8:	f000 fa20 	bl	8003c1c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	699a      	ldr	r2, [r3, #24]
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f042 0208 	orr.w	r2, r2, #8
 80037ea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	699a      	ldr	r2, [r3, #24]
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f022 0204 	bic.w	r2, r2, #4
 80037fa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	6999      	ldr	r1, [r3, #24]
 8003802:	68bb      	ldr	r3, [r7, #8]
 8003804:	691a      	ldr	r2, [r3, #16]
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	430a      	orrs	r2, r1
 800380c:	619a      	str	r2, [r3, #24]
      break;
 800380e:	e0a5      	b.n	800395c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	68b9      	ldr	r1, [r7, #8]
 8003816:	4618      	mov	r0, r3
 8003818:	f000 fa7c 	bl	8003d14 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	699a      	ldr	r2, [r3, #24]
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800382a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	699a      	ldr	r2, [r3, #24]
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800383a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	6999      	ldr	r1, [r3, #24]
 8003842:	68bb      	ldr	r3, [r7, #8]
 8003844:	691b      	ldr	r3, [r3, #16]
 8003846:	021a      	lsls	r2, r3, #8
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	430a      	orrs	r2, r1
 800384e:	619a      	str	r2, [r3, #24]
      break;
 8003850:	e084      	b.n	800395c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	68b9      	ldr	r1, [r7, #8]
 8003858:	4618      	mov	r0, r3
 800385a:	f000 fad5 	bl	8003e08 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	69da      	ldr	r2, [r3, #28]
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f042 0208 	orr.w	r2, r2, #8
 800386c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	69da      	ldr	r2, [r3, #28]
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	f022 0204 	bic.w	r2, r2, #4
 800387c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	69d9      	ldr	r1, [r3, #28]
 8003884:	68bb      	ldr	r3, [r7, #8]
 8003886:	691a      	ldr	r2, [r3, #16]
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	430a      	orrs	r2, r1
 800388e:	61da      	str	r2, [r3, #28]
      break;
 8003890:	e064      	b.n	800395c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	68b9      	ldr	r1, [r7, #8]
 8003898:	4618      	mov	r0, r3
 800389a:	f000 fb2d 	bl	8003ef8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	69da      	ldr	r2, [r3, #28]
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80038ac:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	69da      	ldr	r2, [r3, #28]
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80038bc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	69d9      	ldr	r1, [r3, #28]
 80038c4:	68bb      	ldr	r3, [r7, #8]
 80038c6:	691b      	ldr	r3, [r3, #16]
 80038c8:	021a      	lsls	r2, r3, #8
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	430a      	orrs	r2, r1
 80038d0:	61da      	str	r2, [r3, #28]
      break;
 80038d2:	e043      	b.n	800395c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	68b9      	ldr	r1, [r7, #8]
 80038da:	4618      	mov	r0, r3
 80038dc:	f000 fb6a 	bl	8003fb4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f042 0208 	orr.w	r2, r2, #8
 80038ee:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f022 0204 	bic.w	r2, r2, #4
 80038fe:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003906:	68bb      	ldr	r3, [r7, #8]
 8003908:	691a      	ldr	r2, [r3, #16]
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	430a      	orrs	r2, r1
 8003910:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003912:	e023      	b.n	800395c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	68b9      	ldr	r1, [r7, #8]
 800391a:	4618      	mov	r0, r3
 800391c:	f000 fba2 	bl	8004064 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800392e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800393e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003946:	68bb      	ldr	r3, [r7, #8]
 8003948:	691b      	ldr	r3, [r3, #16]
 800394a:	021a      	lsls	r2, r3, #8
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	430a      	orrs	r2, r1
 8003952:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003954:	e002      	b.n	800395c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8003956:	2301      	movs	r3, #1
 8003958:	75fb      	strb	r3, [r7, #23]
      break;
 800395a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	2200      	movs	r2, #0
 8003960:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003964:	7dfb      	ldrb	r3, [r7, #23]
}
 8003966:	4618      	mov	r0, r3
 8003968:	3718      	adds	r7, #24
 800396a:	46bd      	mov	sp, r7
 800396c:	bd80      	pop	{r7, pc}
 800396e:	bf00      	nop

08003970 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003970:	b580      	push	{r7, lr}
 8003972:	b084      	sub	sp, #16
 8003974:	af00      	add	r7, sp, #0
 8003976:	6078      	str	r0, [r7, #4]
 8003978:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800397a:	2300      	movs	r3, #0
 800397c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003984:	2b01      	cmp	r3, #1
 8003986:	d101      	bne.n	800398c <HAL_TIM_ConfigClockSource+0x1c>
 8003988:	2302      	movs	r3, #2
 800398a:	e0b6      	b.n	8003afa <HAL_TIM_ConfigClockSource+0x18a>
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	2201      	movs	r2, #1
 8003990:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	2202      	movs	r2, #2
 8003998:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	689b      	ldr	r3, [r3, #8]
 80039a2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80039a4:	68bb      	ldr	r3, [r7, #8]
 80039a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80039aa:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80039ae:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80039b0:	68bb      	ldr	r3, [r7, #8]
 80039b2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80039b6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	68ba      	ldr	r2, [r7, #8]
 80039be:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80039c0:	683b      	ldr	r3, [r7, #0]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80039c8:	d03e      	beq.n	8003a48 <HAL_TIM_ConfigClockSource+0xd8>
 80039ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80039ce:	f200 8087 	bhi.w	8003ae0 <HAL_TIM_ConfigClockSource+0x170>
 80039d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80039d6:	f000 8086 	beq.w	8003ae6 <HAL_TIM_ConfigClockSource+0x176>
 80039da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80039de:	d87f      	bhi.n	8003ae0 <HAL_TIM_ConfigClockSource+0x170>
 80039e0:	2b70      	cmp	r3, #112	; 0x70
 80039e2:	d01a      	beq.n	8003a1a <HAL_TIM_ConfigClockSource+0xaa>
 80039e4:	2b70      	cmp	r3, #112	; 0x70
 80039e6:	d87b      	bhi.n	8003ae0 <HAL_TIM_ConfigClockSource+0x170>
 80039e8:	2b60      	cmp	r3, #96	; 0x60
 80039ea:	d050      	beq.n	8003a8e <HAL_TIM_ConfigClockSource+0x11e>
 80039ec:	2b60      	cmp	r3, #96	; 0x60
 80039ee:	d877      	bhi.n	8003ae0 <HAL_TIM_ConfigClockSource+0x170>
 80039f0:	2b50      	cmp	r3, #80	; 0x50
 80039f2:	d03c      	beq.n	8003a6e <HAL_TIM_ConfigClockSource+0xfe>
 80039f4:	2b50      	cmp	r3, #80	; 0x50
 80039f6:	d873      	bhi.n	8003ae0 <HAL_TIM_ConfigClockSource+0x170>
 80039f8:	2b40      	cmp	r3, #64	; 0x40
 80039fa:	d058      	beq.n	8003aae <HAL_TIM_ConfigClockSource+0x13e>
 80039fc:	2b40      	cmp	r3, #64	; 0x40
 80039fe:	d86f      	bhi.n	8003ae0 <HAL_TIM_ConfigClockSource+0x170>
 8003a00:	2b30      	cmp	r3, #48	; 0x30
 8003a02:	d064      	beq.n	8003ace <HAL_TIM_ConfigClockSource+0x15e>
 8003a04:	2b30      	cmp	r3, #48	; 0x30
 8003a06:	d86b      	bhi.n	8003ae0 <HAL_TIM_ConfigClockSource+0x170>
 8003a08:	2b20      	cmp	r3, #32
 8003a0a:	d060      	beq.n	8003ace <HAL_TIM_ConfigClockSource+0x15e>
 8003a0c:	2b20      	cmp	r3, #32
 8003a0e:	d867      	bhi.n	8003ae0 <HAL_TIM_ConfigClockSource+0x170>
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d05c      	beq.n	8003ace <HAL_TIM_ConfigClockSource+0x15e>
 8003a14:	2b10      	cmp	r3, #16
 8003a16:	d05a      	beq.n	8003ace <HAL_TIM_ConfigClockSource+0x15e>
 8003a18:	e062      	b.n	8003ae0 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	6818      	ldr	r0, [r3, #0]
 8003a1e:	683b      	ldr	r3, [r7, #0]
 8003a20:	6899      	ldr	r1, [r3, #8]
 8003a22:	683b      	ldr	r3, [r7, #0]
 8003a24:	685a      	ldr	r2, [r3, #4]
 8003a26:	683b      	ldr	r3, [r7, #0]
 8003a28:	68db      	ldr	r3, [r3, #12]
 8003a2a:	f000 fbef 	bl	800420c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	689b      	ldr	r3, [r3, #8]
 8003a34:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003a36:	68bb      	ldr	r3, [r7, #8]
 8003a38:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003a3c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	68ba      	ldr	r2, [r7, #8]
 8003a44:	609a      	str	r2, [r3, #8]
      break;
 8003a46:	e04f      	b.n	8003ae8 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	6818      	ldr	r0, [r3, #0]
 8003a4c:	683b      	ldr	r3, [r7, #0]
 8003a4e:	6899      	ldr	r1, [r3, #8]
 8003a50:	683b      	ldr	r3, [r7, #0]
 8003a52:	685a      	ldr	r2, [r3, #4]
 8003a54:	683b      	ldr	r3, [r7, #0]
 8003a56:	68db      	ldr	r3, [r3, #12]
 8003a58:	f000 fbd8 	bl	800420c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	689a      	ldr	r2, [r3, #8]
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003a6a:	609a      	str	r2, [r3, #8]
      break;
 8003a6c:	e03c      	b.n	8003ae8 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	6818      	ldr	r0, [r3, #0]
 8003a72:	683b      	ldr	r3, [r7, #0]
 8003a74:	6859      	ldr	r1, [r3, #4]
 8003a76:	683b      	ldr	r3, [r7, #0]
 8003a78:	68db      	ldr	r3, [r3, #12]
 8003a7a:	461a      	mov	r2, r3
 8003a7c:	f000 fb4c 	bl	8004118 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	2150      	movs	r1, #80	; 0x50
 8003a86:	4618      	mov	r0, r3
 8003a88:	f000 fba5 	bl	80041d6 <TIM_ITRx_SetConfig>
      break;
 8003a8c:	e02c      	b.n	8003ae8 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	6818      	ldr	r0, [r3, #0]
 8003a92:	683b      	ldr	r3, [r7, #0]
 8003a94:	6859      	ldr	r1, [r3, #4]
 8003a96:	683b      	ldr	r3, [r7, #0]
 8003a98:	68db      	ldr	r3, [r3, #12]
 8003a9a:	461a      	mov	r2, r3
 8003a9c:	f000 fb6b 	bl	8004176 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	2160      	movs	r1, #96	; 0x60
 8003aa6:	4618      	mov	r0, r3
 8003aa8:	f000 fb95 	bl	80041d6 <TIM_ITRx_SetConfig>
      break;
 8003aac:	e01c      	b.n	8003ae8 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	6818      	ldr	r0, [r3, #0]
 8003ab2:	683b      	ldr	r3, [r7, #0]
 8003ab4:	6859      	ldr	r1, [r3, #4]
 8003ab6:	683b      	ldr	r3, [r7, #0]
 8003ab8:	68db      	ldr	r3, [r3, #12]
 8003aba:	461a      	mov	r2, r3
 8003abc:	f000 fb2c 	bl	8004118 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	2140      	movs	r1, #64	; 0x40
 8003ac6:	4618      	mov	r0, r3
 8003ac8:	f000 fb85 	bl	80041d6 <TIM_ITRx_SetConfig>
      break;
 8003acc:	e00c      	b.n	8003ae8 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681a      	ldr	r2, [r3, #0]
 8003ad2:	683b      	ldr	r3, [r7, #0]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	4619      	mov	r1, r3
 8003ad8:	4610      	mov	r0, r2
 8003ada:	f000 fb7c 	bl	80041d6 <TIM_ITRx_SetConfig>
      break;
 8003ade:	e003      	b.n	8003ae8 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8003ae0:	2301      	movs	r3, #1
 8003ae2:	73fb      	strb	r3, [r7, #15]
      break;
 8003ae4:	e000      	b.n	8003ae8 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8003ae6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	2201      	movs	r2, #1
 8003aec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	2200      	movs	r2, #0
 8003af4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003af8:	7bfb      	ldrb	r3, [r7, #15]
}
 8003afa:	4618      	mov	r0, r3
 8003afc:	3710      	adds	r7, #16
 8003afe:	46bd      	mov	sp, r7
 8003b00:	bd80      	pop	{r7, pc}

08003b02 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003b02:	b480      	push	{r7}
 8003b04:	b083      	sub	sp, #12
 8003b06:	af00      	add	r7, sp, #0
 8003b08:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003b0a:	bf00      	nop
 8003b0c:	370c      	adds	r7, #12
 8003b0e:	46bd      	mov	sp, r7
 8003b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b14:	4770      	bx	lr

08003b16 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003b16:	b480      	push	{r7}
 8003b18:	b083      	sub	sp, #12
 8003b1a:	af00      	add	r7, sp, #0
 8003b1c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003b1e:	bf00      	nop
 8003b20:	370c      	adds	r7, #12
 8003b22:	46bd      	mov	sp, r7
 8003b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b28:	4770      	bx	lr

08003b2a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003b2a:	b480      	push	{r7}
 8003b2c:	b083      	sub	sp, #12
 8003b2e:	af00      	add	r7, sp, #0
 8003b30:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003b32:	bf00      	nop
 8003b34:	370c      	adds	r7, #12
 8003b36:	46bd      	mov	sp, r7
 8003b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b3c:	4770      	bx	lr

08003b3e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003b3e:	b480      	push	{r7}
 8003b40:	b083      	sub	sp, #12
 8003b42:	af00      	add	r7, sp, #0
 8003b44:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003b46:	bf00      	nop
 8003b48:	370c      	adds	r7, #12
 8003b4a:	46bd      	mov	sp, r7
 8003b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b50:	4770      	bx	lr
	...

08003b54 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003b54:	b480      	push	{r7}
 8003b56:	b085      	sub	sp, #20
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	6078      	str	r0, [r7, #4]
 8003b5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	4a2a      	ldr	r2, [pc, #168]	; (8003c10 <TIM_Base_SetConfig+0xbc>)
 8003b68:	4293      	cmp	r3, r2
 8003b6a:	d003      	beq.n	8003b74 <TIM_Base_SetConfig+0x20>
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b72:	d108      	bne.n	8003b86 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b7a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003b7c:	683b      	ldr	r3, [r7, #0]
 8003b7e:	685b      	ldr	r3, [r3, #4]
 8003b80:	68fa      	ldr	r2, [r7, #12]
 8003b82:	4313      	orrs	r3, r2
 8003b84:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	4a21      	ldr	r2, [pc, #132]	; (8003c10 <TIM_Base_SetConfig+0xbc>)
 8003b8a:	4293      	cmp	r3, r2
 8003b8c:	d00b      	beq.n	8003ba6 <TIM_Base_SetConfig+0x52>
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b94:	d007      	beq.n	8003ba6 <TIM_Base_SetConfig+0x52>
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	4a1e      	ldr	r2, [pc, #120]	; (8003c14 <TIM_Base_SetConfig+0xc0>)
 8003b9a:	4293      	cmp	r3, r2
 8003b9c:	d003      	beq.n	8003ba6 <TIM_Base_SetConfig+0x52>
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	4a1d      	ldr	r2, [pc, #116]	; (8003c18 <TIM_Base_SetConfig+0xc4>)
 8003ba2:	4293      	cmp	r3, r2
 8003ba4:	d108      	bne.n	8003bb8 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003bac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003bae:	683b      	ldr	r3, [r7, #0]
 8003bb0:	68db      	ldr	r3, [r3, #12]
 8003bb2:	68fa      	ldr	r2, [r7, #12]
 8003bb4:	4313      	orrs	r3, r2
 8003bb6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003bbe:	683b      	ldr	r3, [r7, #0]
 8003bc0:	695b      	ldr	r3, [r3, #20]
 8003bc2:	4313      	orrs	r3, r2
 8003bc4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	68fa      	ldr	r2, [r7, #12]
 8003bca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003bcc:	683b      	ldr	r3, [r7, #0]
 8003bce:	689a      	ldr	r2, [r3, #8]
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003bd4:	683b      	ldr	r3, [r7, #0]
 8003bd6:	681a      	ldr	r2, [r3, #0]
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	4a0c      	ldr	r2, [pc, #48]	; (8003c10 <TIM_Base_SetConfig+0xbc>)
 8003be0:	4293      	cmp	r3, r2
 8003be2:	d007      	beq.n	8003bf4 <TIM_Base_SetConfig+0xa0>
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	4a0b      	ldr	r2, [pc, #44]	; (8003c14 <TIM_Base_SetConfig+0xc0>)
 8003be8:	4293      	cmp	r3, r2
 8003bea:	d003      	beq.n	8003bf4 <TIM_Base_SetConfig+0xa0>
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	4a0a      	ldr	r2, [pc, #40]	; (8003c18 <TIM_Base_SetConfig+0xc4>)
 8003bf0:	4293      	cmp	r3, r2
 8003bf2:	d103      	bne.n	8003bfc <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003bf4:	683b      	ldr	r3, [r7, #0]
 8003bf6:	691a      	ldr	r2, [r3, #16]
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	2201      	movs	r2, #1
 8003c00:	615a      	str	r2, [r3, #20]
}
 8003c02:	bf00      	nop
 8003c04:	3714      	adds	r7, #20
 8003c06:	46bd      	mov	sp, r7
 8003c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c0c:	4770      	bx	lr
 8003c0e:	bf00      	nop
 8003c10:	40012c00 	.word	0x40012c00
 8003c14:	40014000 	.word	0x40014000
 8003c18:	40014400 	.word	0x40014400

08003c1c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003c1c:	b480      	push	{r7}
 8003c1e:	b087      	sub	sp, #28
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	6078      	str	r0, [r7, #4]
 8003c24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	6a1b      	ldr	r3, [r3, #32]
 8003c2a:	f023 0201 	bic.w	r2, r3, #1
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	6a1b      	ldr	r3, [r3, #32]
 8003c36:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	685b      	ldr	r3, [r3, #4]
 8003c3c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	699b      	ldr	r3, [r3, #24]
 8003c42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c4e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	f023 0303 	bic.w	r3, r3, #3
 8003c56:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003c58:	683b      	ldr	r3, [r7, #0]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	68fa      	ldr	r2, [r7, #12]
 8003c5e:	4313      	orrs	r3, r2
 8003c60:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003c62:	697b      	ldr	r3, [r7, #20]
 8003c64:	f023 0302 	bic.w	r3, r3, #2
 8003c68:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003c6a:	683b      	ldr	r3, [r7, #0]
 8003c6c:	689b      	ldr	r3, [r3, #8]
 8003c6e:	697a      	ldr	r2, [r7, #20]
 8003c70:	4313      	orrs	r3, r2
 8003c72:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	4a24      	ldr	r2, [pc, #144]	; (8003d08 <TIM_OC1_SetConfig+0xec>)
 8003c78:	4293      	cmp	r3, r2
 8003c7a:	d007      	beq.n	8003c8c <TIM_OC1_SetConfig+0x70>
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	4a23      	ldr	r2, [pc, #140]	; (8003d0c <TIM_OC1_SetConfig+0xf0>)
 8003c80:	4293      	cmp	r3, r2
 8003c82:	d003      	beq.n	8003c8c <TIM_OC1_SetConfig+0x70>
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	4a22      	ldr	r2, [pc, #136]	; (8003d10 <TIM_OC1_SetConfig+0xf4>)
 8003c88:	4293      	cmp	r3, r2
 8003c8a:	d10c      	bne.n	8003ca6 <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003c8c:	697b      	ldr	r3, [r7, #20]
 8003c8e:	f023 0308 	bic.w	r3, r3, #8
 8003c92:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003c94:	683b      	ldr	r3, [r7, #0]
 8003c96:	68db      	ldr	r3, [r3, #12]
 8003c98:	697a      	ldr	r2, [r7, #20]
 8003c9a:	4313      	orrs	r3, r2
 8003c9c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003c9e:	697b      	ldr	r3, [r7, #20]
 8003ca0:	f023 0304 	bic.w	r3, r3, #4
 8003ca4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	4a17      	ldr	r2, [pc, #92]	; (8003d08 <TIM_OC1_SetConfig+0xec>)
 8003caa:	4293      	cmp	r3, r2
 8003cac:	d007      	beq.n	8003cbe <TIM_OC1_SetConfig+0xa2>
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	4a16      	ldr	r2, [pc, #88]	; (8003d0c <TIM_OC1_SetConfig+0xf0>)
 8003cb2:	4293      	cmp	r3, r2
 8003cb4:	d003      	beq.n	8003cbe <TIM_OC1_SetConfig+0xa2>
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	4a15      	ldr	r2, [pc, #84]	; (8003d10 <TIM_OC1_SetConfig+0xf4>)
 8003cba:	4293      	cmp	r3, r2
 8003cbc:	d111      	bne.n	8003ce2 <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003cbe:	693b      	ldr	r3, [r7, #16]
 8003cc0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003cc4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003cc6:	693b      	ldr	r3, [r7, #16]
 8003cc8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003ccc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003cce:	683b      	ldr	r3, [r7, #0]
 8003cd0:	695b      	ldr	r3, [r3, #20]
 8003cd2:	693a      	ldr	r2, [r7, #16]
 8003cd4:	4313      	orrs	r3, r2
 8003cd6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003cd8:	683b      	ldr	r3, [r7, #0]
 8003cda:	699b      	ldr	r3, [r3, #24]
 8003cdc:	693a      	ldr	r2, [r7, #16]
 8003cde:	4313      	orrs	r3, r2
 8003ce0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	693a      	ldr	r2, [r7, #16]
 8003ce6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	68fa      	ldr	r2, [r7, #12]
 8003cec:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003cee:	683b      	ldr	r3, [r7, #0]
 8003cf0:	685a      	ldr	r2, [r3, #4]
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	697a      	ldr	r2, [r7, #20]
 8003cfa:	621a      	str	r2, [r3, #32]
}
 8003cfc:	bf00      	nop
 8003cfe:	371c      	adds	r7, #28
 8003d00:	46bd      	mov	sp, r7
 8003d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d06:	4770      	bx	lr
 8003d08:	40012c00 	.word	0x40012c00
 8003d0c:	40014000 	.word	0x40014000
 8003d10:	40014400 	.word	0x40014400

08003d14 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003d14:	b480      	push	{r7}
 8003d16:	b087      	sub	sp, #28
 8003d18:	af00      	add	r7, sp, #0
 8003d1a:	6078      	str	r0, [r7, #4]
 8003d1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	6a1b      	ldr	r3, [r3, #32]
 8003d22:	f023 0210 	bic.w	r2, r3, #16
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	6a1b      	ldr	r3, [r3, #32]
 8003d2e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	685b      	ldr	r3, [r3, #4]
 8003d34:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	699b      	ldr	r3, [r3, #24]
 8003d3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003d42:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003d46:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d4e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003d50:	683b      	ldr	r3, [r7, #0]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	021b      	lsls	r3, r3, #8
 8003d56:	68fa      	ldr	r2, [r7, #12]
 8003d58:	4313      	orrs	r3, r2
 8003d5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003d5c:	697b      	ldr	r3, [r7, #20]
 8003d5e:	f023 0320 	bic.w	r3, r3, #32
 8003d62:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003d64:	683b      	ldr	r3, [r7, #0]
 8003d66:	689b      	ldr	r3, [r3, #8]
 8003d68:	011b      	lsls	r3, r3, #4
 8003d6a:	697a      	ldr	r2, [r7, #20]
 8003d6c:	4313      	orrs	r3, r2
 8003d6e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	4a22      	ldr	r2, [pc, #136]	; (8003dfc <TIM_OC2_SetConfig+0xe8>)
 8003d74:	4293      	cmp	r3, r2
 8003d76:	d10d      	bne.n	8003d94 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003d78:	697b      	ldr	r3, [r7, #20]
 8003d7a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003d7e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003d80:	683b      	ldr	r3, [r7, #0]
 8003d82:	68db      	ldr	r3, [r3, #12]
 8003d84:	011b      	lsls	r3, r3, #4
 8003d86:	697a      	ldr	r2, [r7, #20]
 8003d88:	4313      	orrs	r3, r2
 8003d8a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003d8c:	697b      	ldr	r3, [r7, #20]
 8003d8e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003d92:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	4a19      	ldr	r2, [pc, #100]	; (8003dfc <TIM_OC2_SetConfig+0xe8>)
 8003d98:	4293      	cmp	r3, r2
 8003d9a:	d007      	beq.n	8003dac <TIM_OC2_SetConfig+0x98>
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	4a18      	ldr	r2, [pc, #96]	; (8003e00 <TIM_OC2_SetConfig+0xec>)
 8003da0:	4293      	cmp	r3, r2
 8003da2:	d003      	beq.n	8003dac <TIM_OC2_SetConfig+0x98>
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	4a17      	ldr	r2, [pc, #92]	; (8003e04 <TIM_OC2_SetConfig+0xf0>)
 8003da8:	4293      	cmp	r3, r2
 8003daa:	d113      	bne.n	8003dd4 <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003dac:	693b      	ldr	r3, [r7, #16]
 8003dae:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003db2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003db4:	693b      	ldr	r3, [r7, #16]
 8003db6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003dba:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003dbc:	683b      	ldr	r3, [r7, #0]
 8003dbe:	695b      	ldr	r3, [r3, #20]
 8003dc0:	009b      	lsls	r3, r3, #2
 8003dc2:	693a      	ldr	r2, [r7, #16]
 8003dc4:	4313      	orrs	r3, r2
 8003dc6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003dc8:	683b      	ldr	r3, [r7, #0]
 8003dca:	699b      	ldr	r3, [r3, #24]
 8003dcc:	009b      	lsls	r3, r3, #2
 8003dce:	693a      	ldr	r2, [r7, #16]
 8003dd0:	4313      	orrs	r3, r2
 8003dd2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	693a      	ldr	r2, [r7, #16]
 8003dd8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	68fa      	ldr	r2, [r7, #12]
 8003dde:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003de0:	683b      	ldr	r3, [r7, #0]
 8003de2:	685a      	ldr	r2, [r3, #4]
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	697a      	ldr	r2, [r7, #20]
 8003dec:	621a      	str	r2, [r3, #32]
}
 8003dee:	bf00      	nop
 8003df0:	371c      	adds	r7, #28
 8003df2:	46bd      	mov	sp, r7
 8003df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df8:	4770      	bx	lr
 8003dfa:	bf00      	nop
 8003dfc:	40012c00 	.word	0x40012c00
 8003e00:	40014000 	.word	0x40014000
 8003e04:	40014400 	.word	0x40014400

08003e08 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003e08:	b480      	push	{r7}
 8003e0a:	b087      	sub	sp, #28
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	6078      	str	r0, [r7, #4]
 8003e10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	6a1b      	ldr	r3, [r3, #32]
 8003e16:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	6a1b      	ldr	r3, [r3, #32]
 8003e22:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	685b      	ldr	r3, [r3, #4]
 8003e28:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	69db      	ldr	r3, [r3, #28]
 8003e2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e3a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	f023 0303 	bic.w	r3, r3, #3
 8003e42:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003e44:	683b      	ldr	r3, [r7, #0]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	68fa      	ldr	r2, [r7, #12]
 8003e4a:	4313      	orrs	r3, r2
 8003e4c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003e4e:	697b      	ldr	r3, [r7, #20]
 8003e50:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003e54:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003e56:	683b      	ldr	r3, [r7, #0]
 8003e58:	689b      	ldr	r3, [r3, #8]
 8003e5a:	021b      	lsls	r3, r3, #8
 8003e5c:	697a      	ldr	r2, [r7, #20]
 8003e5e:	4313      	orrs	r3, r2
 8003e60:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	4a21      	ldr	r2, [pc, #132]	; (8003eec <TIM_OC3_SetConfig+0xe4>)
 8003e66:	4293      	cmp	r3, r2
 8003e68:	d10d      	bne.n	8003e86 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003e6a:	697b      	ldr	r3, [r7, #20]
 8003e6c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003e70:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003e72:	683b      	ldr	r3, [r7, #0]
 8003e74:	68db      	ldr	r3, [r3, #12]
 8003e76:	021b      	lsls	r3, r3, #8
 8003e78:	697a      	ldr	r2, [r7, #20]
 8003e7a:	4313      	orrs	r3, r2
 8003e7c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003e7e:	697b      	ldr	r3, [r7, #20]
 8003e80:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003e84:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	4a18      	ldr	r2, [pc, #96]	; (8003eec <TIM_OC3_SetConfig+0xe4>)
 8003e8a:	4293      	cmp	r3, r2
 8003e8c:	d007      	beq.n	8003e9e <TIM_OC3_SetConfig+0x96>
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	4a17      	ldr	r2, [pc, #92]	; (8003ef0 <TIM_OC3_SetConfig+0xe8>)
 8003e92:	4293      	cmp	r3, r2
 8003e94:	d003      	beq.n	8003e9e <TIM_OC3_SetConfig+0x96>
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	4a16      	ldr	r2, [pc, #88]	; (8003ef4 <TIM_OC3_SetConfig+0xec>)
 8003e9a:	4293      	cmp	r3, r2
 8003e9c:	d113      	bne.n	8003ec6 <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003e9e:	693b      	ldr	r3, [r7, #16]
 8003ea0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003ea4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003ea6:	693b      	ldr	r3, [r7, #16]
 8003ea8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003eac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003eae:	683b      	ldr	r3, [r7, #0]
 8003eb0:	695b      	ldr	r3, [r3, #20]
 8003eb2:	011b      	lsls	r3, r3, #4
 8003eb4:	693a      	ldr	r2, [r7, #16]
 8003eb6:	4313      	orrs	r3, r2
 8003eb8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003eba:	683b      	ldr	r3, [r7, #0]
 8003ebc:	699b      	ldr	r3, [r3, #24]
 8003ebe:	011b      	lsls	r3, r3, #4
 8003ec0:	693a      	ldr	r2, [r7, #16]
 8003ec2:	4313      	orrs	r3, r2
 8003ec4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	693a      	ldr	r2, [r7, #16]
 8003eca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	68fa      	ldr	r2, [r7, #12]
 8003ed0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003ed2:	683b      	ldr	r3, [r7, #0]
 8003ed4:	685a      	ldr	r2, [r3, #4]
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	697a      	ldr	r2, [r7, #20]
 8003ede:	621a      	str	r2, [r3, #32]
}
 8003ee0:	bf00      	nop
 8003ee2:	371c      	adds	r7, #28
 8003ee4:	46bd      	mov	sp, r7
 8003ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eea:	4770      	bx	lr
 8003eec:	40012c00 	.word	0x40012c00
 8003ef0:	40014000 	.word	0x40014000
 8003ef4:	40014400 	.word	0x40014400

08003ef8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003ef8:	b480      	push	{r7}
 8003efa:	b087      	sub	sp, #28
 8003efc:	af00      	add	r7, sp, #0
 8003efe:	6078      	str	r0, [r7, #4]
 8003f00:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	6a1b      	ldr	r3, [r3, #32]
 8003f06:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	6a1b      	ldr	r3, [r3, #32]
 8003f12:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	685b      	ldr	r3, [r3, #4]
 8003f18:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	69db      	ldr	r3, [r3, #28]
 8003f1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003f26:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003f2a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f32:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003f34:	683b      	ldr	r3, [r7, #0]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	021b      	lsls	r3, r3, #8
 8003f3a:	68fa      	ldr	r2, [r7, #12]
 8003f3c:	4313      	orrs	r3, r2
 8003f3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003f40:	693b      	ldr	r3, [r7, #16]
 8003f42:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003f46:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003f48:	683b      	ldr	r3, [r7, #0]
 8003f4a:	689b      	ldr	r3, [r3, #8]
 8003f4c:	031b      	lsls	r3, r3, #12
 8003f4e:	693a      	ldr	r2, [r7, #16]
 8003f50:	4313      	orrs	r3, r2
 8003f52:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	4a14      	ldr	r2, [pc, #80]	; (8003fa8 <TIM_OC4_SetConfig+0xb0>)
 8003f58:	4293      	cmp	r3, r2
 8003f5a:	d007      	beq.n	8003f6c <TIM_OC4_SetConfig+0x74>
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	4a13      	ldr	r2, [pc, #76]	; (8003fac <TIM_OC4_SetConfig+0xb4>)
 8003f60:	4293      	cmp	r3, r2
 8003f62:	d003      	beq.n	8003f6c <TIM_OC4_SetConfig+0x74>
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	4a12      	ldr	r2, [pc, #72]	; (8003fb0 <TIM_OC4_SetConfig+0xb8>)
 8003f68:	4293      	cmp	r3, r2
 8003f6a:	d109      	bne.n	8003f80 <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003f6c:	697b      	ldr	r3, [r7, #20]
 8003f6e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003f72:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003f74:	683b      	ldr	r3, [r7, #0]
 8003f76:	695b      	ldr	r3, [r3, #20]
 8003f78:	019b      	lsls	r3, r3, #6
 8003f7a:	697a      	ldr	r2, [r7, #20]
 8003f7c:	4313      	orrs	r3, r2
 8003f7e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	697a      	ldr	r2, [r7, #20]
 8003f84:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	68fa      	ldr	r2, [r7, #12]
 8003f8a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003f8c:	683b      	ldr	r3, [r7, #0]
 8003f8e:	685a      	ldr	r2, [r3, #4]
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	693a      	ldr	r2, [r7, #16]
 8003f98:	621a      	str	r2, [r3, #32]
}
 8003f9a:	bf00      	nop
 8003f9c:	371c      	adds	r7, #28
 8003f9e:	46bd      	mov	sp, r7
 8003fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa4:	4770      	bx	lr
 8003fa6:	bf00      	nop
 8003fa8:	40012c00 	.word	0x40012c00
 8003fac:	40014000 	.word	0x40014000
 8003fb0:	40014400 	.word	0x40014400

08003fb4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003fb4:	b480      	push	{r7}
 8003fb6:	b087      	sub	sp, #28
 8003fb8:	af00      	add	r7, sp, #0
 8003fba:	6078      	str	r0, [r7, #4]
 8003fbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	6a1b      	ldr	r3, [r3, #32]
 8003fc2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	6a1b      	ldr	r3, [r3, #32]
 8003fce:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	685b      	ldr	r3, [r3, #4]
 8003fd4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003fe2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003fe6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003fe8:	683b      	ldr	r3, [r7, #0]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	68fa      	ldr	r2, [r7, #12]
 8003fee:	4313      	orrs	r3, r2
 8003ff0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8003ff2:	693b      	ldr	r3, [r7, #16]
 8003ff4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8003ff8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8003ffa:	683b      	ldr	r3, [r7, #0]
 8003ffc:	689b      	ldr	r3, [r3, #8]
 8003ffe:	041b      	lsls	r3, r3, #16
 8004000:	693a      	ldr	r2, [r7, #16]
 8004002:	4313      	orrs	r3, r2
 8004004:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	4a13      	ldr	r2, [pc, #76]	; (8004058 <TIM_OC5_SetConfig+0xa4>)
 800400a:	4293      	cmp	r3, r2
 800400c:	d007      	beq.n	800401e <TIM_OC5_SetConfig+0x6a>
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	4a12      	ldr	r2, [pc, #72]	; (800405c <TIM_OC5_SetConfig+0xa8>)
 8004012:	4293      	cmp	r3, r2
 8004014:	d003      	beq.n	800401e <TIM_OC5_SetConfig+0x6a>
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	4a11      	ldr	r2, [pc, #68]	; (8004060 <TIM_OC5_SetConfig+0xac>)
 800401a:	4293      	cmp	r3, r2
 800401c:	d109      	bne.n	8004032 <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800401e:	697b      	ldr	r3, [r7, #20]
 8004020:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004024:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004026:	683b      	ldr	r3, [r7, #0]
 8004028:	695b      	ldr	r3, [r3, #20]
 800402a:	021b      	lsls	r3, r3, #8
 800402c:	697a      	ldr	r2, [r7, #20]
 800402e:	4313      	orrs	r3, r2
 8004030:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	697a      	ldr	r2, [r7, #20]
 8004036:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	68fa      	ldr	r2, [r7, #12]
 800403c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800403e:	683b      	ldr	r3, [r7, #0]
 8004040:	685a      	ldr	r2, [r3, #4]
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	693a      	ldr	r2, [r7, #16]
 800404a:	621a      	str	r2, [r3, #32]
}
 800404c:	bf00      	nop
 800404e:	371c      	adds	r7, #28
 8004050:	46bd      	mov	sp, r7
 8004052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004056:	4770      	bx	lr
 8004058:	40012c00 	.word	0x40012c00
 800405c:	40014000 	.word	0x40014000
 8004060:	40014400 	.word	0x40014400

08004064 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004064:	b480      	push	{r7}
 8004066:	b087      	sub	sp, #28
 8004068:	af00      	add	r7, sp, #0
 800406a:	6078      	str	r0, [r7, #4]
 800406c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	6a1b      	ldr	r3, [r3, #32]
 8004072:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	6a1b      	ldr	r3, [r3, #32]
 800407e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	685b      	ldr	r3, [r3, #4]
 8004084:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800408a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004092:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004096:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004098:	683b      	ldr	r3, [r7, #0]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	021b      	lsls	r3, r3, #8
 800409e:	68fa      	ldr	r2, [r7, #12]
 80040a0:	4313      	orrs	r3, r2
 80040a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80040a4:	693b      	ldr	r3, [r7, #16]
 80040a6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80040aa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80040ac:	683b      	ldr	r3, [r7, #0]
 80040ae:	689b      	ldr	r3, [r3, #8]
 80040b0:	051b      	lsls	r3, r3, #20
 80040b2:	693a      	ldr	r2, [r7, #16]
 80040b4:	4313      	orrs	r3, r2
 80040b6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	4a14      	ldr	r2, [pc, #80]	; (800410c <TIM_OC6_SetConfig+0xa8>)
 80040bc:	4293      	cmp	r3, r2
 80040be:	d007      	beq.n	80040d0 <TIM_OC6_SetConfig+0x6c>
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	4a13      	ldr	r2, [pc, #76]	; (8004110 <TIM_OC6_SetConfig+0xac>)
 80040c4:	4293      	cmp	r3, r2
 80040c6:	d003      	beq.n	80040d0 <TIM_OC6_SetConfig+0x6c>
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	4a12      	ldr	r2, [pc, #72]	; (8004114 <TIM_OC6_SetConfig+0xb0>)
 80040cc:	4293      	cmp	r3, r2
 80040ce:	d109      	bne.n	80040e4 <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80040d0:	697b      	ldr	r3, [r7, #20]
 80040d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80040d6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80040d8:	683b      	ldr	r3, [r7, #0]
 80040da:	695b      	ldr	r3, [r3, #20]
 80040dc:	029b      	lsls	r3, r3, #10
 80040de:	697a      	ldr	r2, [r7, #20]
 80040e0:	4313      	orrs	r3, r2
 80040e2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	697a      	ldr	r2, [r7, #20]
 80040e8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	68fa      	ldr	r2, [r7, #12]
 80040ee:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80040f0:	683b      	ldr	r3, [r7, #0]
 80040f2:	685a      	ldr	r2, [r3, #4]
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	693a      	ldr	r2, [r7, #16]
 80040fc:	621a      	str	r2, [r3, #32]
}
 80040fe:	bf00      	nop
 8004100:	371c      	adds	r7, #28
 8004102:	46bd      	mov	sp, r7
 8004104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004108:	4770      	bx	lr
 800410a:	bf00      	nop
 800410c:	40012c00 	.word	0x40012c00
 8004110:	40014000 	.word	0x40014000
 8004114:	40014400 	.word	0x40014400

08004118 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004118:	b480      	push	{r7}
 800411a:	b087      	sub	sp, #28
 800411c:	af00      	add	r7, sp, #0
 800411e:	60f8      	str	r0, [r7, #12]
 8004120:	60b9      	str	r1, [r7, #8]
 8004122:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	6a1b      	ldr	r3, [r3, #32]
 8004128:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	6a1b      	ldr	r3, [r3, #32]
 800412e:	f023 0201 	bic.w	r2, r3, #1
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	699b      	ldr	r3, [r3, #24]
 800413a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800413c:	693b      	ldr	r3, [r7, #16]
 800413e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004142:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	011b      	lsls	r3, r3, #4
 8004148:	693a      	ldr	r2, [r7, #16]
 800414a:	4313      	orrs	r3, r2
 800414c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800414e:	697b      	ldr	r3, [r7, #20]
 8004150:	f023 030a 	bic.w	r3, r3, #10
 8004154:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004156:	697a      	ldr	r2, [r7, #20]
 8004158:	68bb      	ldr	r3, [r7, #8]
 800415a:	4313      	orrs	r3, r2
 800415c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	693a      	ldr	r2, [r7, #16]
 8004162:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	697a      	ldr	r2, [r7, #20]
 8004168:	621a      	str	r2, [r3, #32]
}
 800416a:	bf00      	nop
 800416c:	371c      	adds	r7, #28
 800416e:	46bd      	mov	sp, r7
 8004170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004174:	4770      	bx	lr

08004176 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004176:	b480      	push	{r7}
 8004178:	b087      	sub	sp, #28
 800417a:	af00      	add	r7, sp, #0
 800417c:	60f8      	str	r0, [r7, #12]
 800417e:	60b9      	str	r1, [r7, #8]
 8004180:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	6a1b      	ldr	r3, [r3, #32]
 8004186:	f023 0210 	bic.w	r2, r3, #16
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	699b      	ldr	r3, [r3, #24]
 8004192:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	6a1b      	ldr	r3, [r3, #32]
 8004198:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800419a:	697b      	ldr	r3, [r7, #20]
 800419c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80041a0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	031b      	lsls	r3, r3, #12
 80041a6:	697a      	ldr	r2, [r7, #20]
 80041a8:	4313      	orrs	r3, r2
 80041aa:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80041ac:	693b      	ldr	r3, [r7, #16]
 80041ae:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80041b2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80041b4:	68bb      	ldr	r3, [r7, #8]
 80041b6:	011b      	lsls	r3, r3, #4
 80041b8:	693a      	ldr	r2, [r7, #16]
 80041ba:	4313      	orrs	r3, r2
 80041bc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	697a      	ldr	r2, [r7, #20]
 80041c2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	693a      	ldr	r2, [r7, #16]
 80041c8:	621a      	str	r2, [r3, #32]
}
 80041ca:	bf00      	nop
 80041cc:	371c      	adds	r7, #28
 80041ce:	46bd      	mov	sp, r7
 80041d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d4:	4770      	bx	lr

080041d6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80041d6:	b480      	push	{r7}
 80041d8:	b085      	sub	sp, #20
 80041da:	af00      	add	r7, sp, #0
 80041dc:	6078      	str	r0, [r7, #4]
 80041de:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	689b      	ldr	r3, [r3, #8]
 80041e4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041ec:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80041ee:	683a      	ldr	r2, [r7, #0]
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	4313      	orrs	r3, r2
 80041f4:	f043 0307 	orr.w	r3, r3, #7
 80041f8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	68fa      	ldr	r2, [r7, #12]
 80041fe:	609a      	str	r2, [r3, #8]
}
 8004200:	bf00      	nop
 8004202:	3714      	adds	r7, #20
 8004204:	46bd      	mov	sp, r7
 8004206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800420a:	4770      	bx	lr

0800420c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800420c:	b480      	push	{r7}
 800420e:	b087      	sub	sp, #28
 8004210:	af00      	add	r7, sp, #0
 8004212:	60f8      	str	r0, [r7, #12]
 8004214:	60b9      	str	r1, [r7, #8]
 8004216:	607a      	str	r2, [r7, #4]
 8004218:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	689b      	ldr	r3, [r3, #8]
 800421e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004220:	697b      	ldr	r3, [r7, #20]
 8004222:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004226:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004228:	683b      	ldr	r3, [r7, #0]
 800422a:	021a      	lsls	r2, r3, #8
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	431a      	orrs	r2, r3
 8004230:	68bb      	ldr	r3, [r7, #8]
 8004232:	4313      	orrs	r3, r2
 8004234:	697a      	ldr	r2, [r7, #20]
 8004236:	4313      	orrs	r3, r2
 8004238:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	697a      	ldr	r2, [r7, #20]
 800423e:	609a      	str	r2, [r3, #8]
}
 8004240:	bf00      	nop
 8004242:	371c      	adds	r7, #28
 8004244:	46bd      	mov	sp, r7
 8004246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800424a:	4770      	bx	lr

0800424c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800424c:	b480      	push	{r7}
 800424e:	b087      	sub	sp, #28
 8004250:	af00      	add	r7, sp, #0
 8004252:	60f8      	str	r0, [r7, #12]
 8004254:	60b9      	str	r1, [r7, #8]
 8004256:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004258:	68bb      	ldr	r3, [r7, #8]
 800425a:	f003 031f 	and.w	r3, r3, #31
 800425e:	2201      	movs	r2, #1
 8004260:	fa02 f303 	lsl.w	r3, r2, r3
 8004264:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	6a1a      	ldr	r2, [r3, #32]
 800426a:	697b      	ldr	r3, [r7, #20]
 800426c:	43db      	mvns	r3, r3
 800426e:	401a      	ands	r2, r3
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	6a1a      	ldr	r2, [r3, #32]
 8004278:	68bb      	ldr	r3, [r7, #8]
 800427a:	f003 031f 	and.w	r3, r3, #31
 800427e:	6879      	ldr	r1, [r7, #4]
 8004280:	fa01 f303 	lsl.w	r3, r1, r3
 8004284:	431a      	orrs	r2, r3
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	621a      	str	r2, [r3, #32]
}
 800428a:	bf00      	nop
 800428c:	371c      	adds	r7, #28
 800428e:	46bd      	mov	sp, r7
 8004290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004294:	4770      	bx	lr
	...

08004298 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004298:	b480      	push	{r7}
 800429a:	b085      	sub	sp, #20
 800429c:	af00      	add	r7, sp, #0
 800429e:	6078      	str	r0, [r7, #4]
 80042a0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80042a8:	2b01      	cmp	r3, #1
 80042aa:	d101      	bne.n	80042b0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80042ac:	2302      	movs	r3, #2
 80042ae:	e04f      	b.n	8004350 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	2201      	movs	r2, #1
 80042b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	2202      	movs	r2, #2
 80042bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	685b      	ldr	r3, [r3, #4]
 80042c6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	689b      	ldr	r3, [r3, #8]
 80042ce:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	4a21      	ldr	r2, [pc, #132]	; (800435c <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80042d6:	4293      	cmp	r3, r2
 80042d8:	d108      	bne.n	80042ec <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80042e0:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80042e2:	683b      	ldr	r3, [r7, #0]
 80042e4:	685b      	ldr	r3, [r3, #4]
 80042e6:	68fa      	ldr	r2, [r7, #12]
 80042e8:	4313      	orrs	r3, r2
 80042ea:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042f2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80042f4:	683b      	ldr	r3, [r7, #0]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	68fa      	ldr	r2, [r7, #12]
 80042fa:	4313      	orrs	r3, r2
 80042fc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	68fa      	ldr	r2, [r7, #12]
 8004304:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	4a14      	ldr	r2, [pc, #80]	; (800435c <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800430c:	4293      	cmp	r3, r2
 800430e:	d009      	beq.n	8004324 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004318:	d004      	beq.n	8004324 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	4a10      	ldr	r2, [pc, #64]	; (8004360 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004320:	4293      	cmp	r3, r2
 8004322:	d10c      	bne.n	800433e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004324:	68bb      	ldr	r3, [r7, #8]
 8004326:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800432a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800432c:	683b      	ldr	r3, [r7, #0]
 800432e:	689b      	ldr	r3, [r3, #8]
 8004330:	68ba      	ldr	r2, [r7, #8]
 8004332:	4313      	orrs	r3, r2
 8004334:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	68ba      	ldr	r2, [r7, #8]
 800433c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	2201      	movs	r2, #1
 8004342:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	2200      	movs	r2, #0
 800434a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800434e:	2300      	movs	r3, #0
}
 8004350:	4618      	mov	r0, r3
 8004352:	3714      	adds	r7, #20
 8004354:	46bd      	mov	sp, r7
 8004356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800435a:	4770      	bx	lr
 800435c:	40012c00 	.word	0x40012c00
 8004360:	40014000 	.word	0x40014000

08004364 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004364:	b480      	push	{r7}
 8004366:	b085      	sub	sp, #20
 8004368:	af00      	add	r7, sp, #0
 800436a:	6078      	str	r0, [r7, #4]
 800436c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800436e:	2300      	movs	r3, #0
 8004370:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004378:	2b01      	cmp	r3, #1
 800437a:	d101      	bne.n	8004380 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800437c:	2302      	movs	r3, #2
 800437e:	e060      	b.n	8004442 <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	2201      	movs	r2, #1
 8004384:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800438e:	683b      	ldr	r3, [r7, #0]
 8004390:	68db      	ldr	r3, [r3, #12]
 8004392:	4313      	orrs	r3, r2
 8004394:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800439c:	683b      	ldr	r3, [r7, #0]
 800439e:	689b      	ldr	r3, [r3, #8]
 80043a0:	4313      	orrs	r3, r2
 80043a2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80043aa:	683b      	ldr	r3, [r7, #0]
 80043ac:	685b      	ldr	r3, [r3, #4]
 80043ae:	4313      	orrs	r3, r2
 80043b0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80043b8:	683b      	ldr	r3, [r7, #0]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	4313      	orrs	r3, r2
 80043be:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80043c6:	683b      	ldr	r3, [r7, #0]
 80043c8:	691b      	ldr	r3, [r3, #16]
 80043ca:	4313      	orrs	r3, r2
 80043cc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80043d4:	683b      	ldr	r3, [r7, #0]
 80043d6:	695b      	ldr	r3, [r3, #20]
 80043d8:	4313      	orrs	r3, r2
 80043da:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80043e2:	683b      	ldr	r3, [r7, #0]
 80043e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043e6:	4313      	orrs	r3, r2
 80043e8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 80043f0:	683b      	ldr	r3, [r7, #0]
 80043f2:	699b      	ldr	r3, [r3, #24]
 80043f4:	041b      	lsls	r3, r3, #16
 80043f6:	4313      	orrs	r3, r2
 80043f8:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	4a14      	ldr	r2, [pc, #80]	; (8004450 <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 8004400:	4293      	cmp	r3, r2
 8004402:	d115      	bne.n	8004430 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800440a:	683b      	ldr	r3, [r7, #0]
 800440c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800440e:	051b      	lsls	r3, r3, #20
 8004410:	4313      	orrs	r3, r2
 8004412:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800441a:	683b      	ldr	r3, [r7, #0]
 800441c:	69db      	ldr	r3, [r3, #28]
 800441e:	4313      	orrs	r3, r2
 8004420:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8004428:	683b      	ldr	r3, [r7, #0]
 800442a:	6a1b      	ldr	r3, [r3, #32]
 800442c:	4313      	orrs	r3, r2
 800442e:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	68fa      	ldr	r2, [r7, #12]
 8004436:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	2200      	movs	r2, #0
 800443c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004440:	2300      	movs	r3, #0
}
 8004442:	4618      	mov	r0, r3
 8004444:	3714      	adds	r7, #20
 8004446:	46bd      	mov	sp, r7
 8004448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800444c:	4770      	bx	lr
 800444e:	bf00      	nop
 8004450:	40012c00 	.word	0x40012c00

08004454 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004454:	b480      	push	{r7}
 8004456:	b083      	sub	sp, #12
 8004458:	af00      	add	r7, sp, #0
 800445a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800445c:	bf00      	nop
 800445e:	370c      	adds	r7, #12
 8004460:	46bd      	mov	sp, r7
 8004462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004466:	4770      	bx	lr

08004468 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004468:	b480      	push	{r7}
 800446a:	b083      	sub	sp, #12
 800446c:	af00      	add	r7, sp, #0
 800446e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004470:	bf00      	nop
 8004472:	370c      	adds	r7, #12
 8004474:	46bd      	mov	sp, r7
 8004476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800447a:	4770      	bx	lr

0800447c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800447c:	b480      	push	{r7}
 800447e:	b083      	sub	sp, #12
 8004480:	af00      	add	r7, sp, #0
 8004482:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004484:	bf00      	nop
 8004486:	370c      	adds	r7, #12
 8004488:	46bd      	mov	sp, r7
 800448a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800448e:	4770      	bx	lr

08004490 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004490:	b580      	push	{r7, lr}
 8004492:	b082      	sub	sp, #8
 8004494:	af00      	add	r7, sp, #0
 8004496:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	2b00      	cmp	r3, #0
 800449c:	d101      	bne.n	80044a2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800449e:	2301      	movs	r3, #1
 80044a0:	e040      	b.n	8004524 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d106      	bne.n	80044b8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	2200      	movs	r2, #0
 80044ae:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80044b2:	6878      	ldr	r0, [r7, #4]
 80044b4:	f7fc fcd0 	bl	8000e58 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	2224      	movs	r2, #36	; 0x24
 80044bc:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	681a      	ldr	r2, [r3, #0]
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	f022 0201 	bic.w	r2, r2, #1
 80044cc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80044ce:	6878      	ldr	r0, [r7, #4]
 80044d0:	f000 fb84 	bl	8004bdc <UART_SetConfig>
 80044d4:	4603      	mov	r3, r0
 80044d6:	2b01      	cmp	r3, #1
 80044d8:	d101      	bne.n	80044de <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80044da:	2301      	movs	r3, #1
 80044dc:	e022      	b.n	8004524 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d002      	beq.n	80044ec <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80044e6:	6878      	ldr	r0, [r7, #4]
 80044e8:	f000 fda4 	bl	8005034 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	685a      	ldr	r2, [r3, #4]
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80044fa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	689a      	ldr	r2, [r3, #8]
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800450a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	681a      	ldr	r2, [r3, #0]
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	f042 0201 	orr.w	r2, r2, #1
 800451a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800451c:	6878      	ldr	r0, [r7, #4]
 800451e:	f000 fe2b 	bl	8005178 <UART_CheckIdleState>
 8004522:	4603      	mov	r3, r0
}
 8004524:	4618      	mov	r0, r3
 8004526:	3708      	adds	r7, #8
 8004528:	46bd      	mov	sp, r7
 800452a:	bd80      	pop	{r7, pc}

0800452c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800452c:	b580      	push	{r7, lr}
 800452e:	b08a      	sub	sp, #40	; 0x28
 8004530:	af00      	add	r7, sp, #0
 8004532:	60f8      	str	r0, [r7, #12]
 8004534:	60b9      	str	r1, [r7, #8]
 8004536:	4613      	mov	r3, r2
 8004538:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800453e:	2b20      	cmp	r3, #32
 8004540:	d142      	bne.n	80045c8 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004542:	68bb      	ldr	r3, [r7, #8]
 8004544:	2b00      	cmp	r3, #0
 8004546:	d002      	beq.n	800454e <HAL_UART_Receive_IT+0x22>
 8004548:	88fb      	ldrh	r3, [r7, #6]
 800454a:	2b00      	cmp	r3, #0
 800454c:	d101      	bne.n	8004552 <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 800454e:	2301      	movs	r3, #1
 8004550:	e03b      	b.n	80045ca <HAL_UART_Receive_IT+0x9e>
    }

    __HAL_LOCK(huart);
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8004558:	2b01      	cmp	r3, #1
 800455a:	d101      	bne.n	8004560 <HAL_UART_Receive_IT+0x34>
 800455c:	2302      	movs	r3, #2
 800455e:	e034      	b.n	80045ca <HAL_UART_Receive_IT+0x9e>
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	2201      	movs	r2, #1
 8004564:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	2200      	movs	r2, #0
 800456c:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	4a18      	ldr	r2, [pc, #96]	; (80045d4 <HAL_UART_Receive_IT+0xa8>)
 8004574:	4293      	cmp	r3, r2
 8004576:	d01f      	beq.n	80045b8 <HAL_UART_Receive_IT+0x8c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	685b      	ldr	r3, [r3, #4]
 800457e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004582:	2b00      	cmp	r3, #0
 8004584:	d018      	beq.n	80045b8 <HAL_UART_Receive_IT+0x8c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800458c:	697b      	ldr	r3, [r7, #20]
 800458e:	e853 3f00 	ldrex	r3, [r3]
 8004592:	613b      	str	r3, [r7, #16]
   return(result);
 8004594:	693b      	ldr	r3, [r7, #16]
 8004596:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800459a:	627b      	str	r3, [r7, #36]	; 0x24
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	461a      	mov	r2, r3
 80045a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045a4:	623b      	str	r3, [r7, #32]
 80045a6:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045a8:	69f9      	ldr	r1, [r7, #28]
 80045aa:	6a3a      	ldr	r2, [r7, #32]
 80045ac:	e841 2300 	strex	r3, r2, [r1]
 80045b0:	61bb      	str	r3, [r7, #24]
   return(result);
 80045b2:	69bb      	ldr	r3, [r7, #24]
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d1e6      	bne.n	8004586 <HAL_UART_Receive_IT+0x5a>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80045b8:	88fb      	ldrh	r3, [r7, #6]
 80045ba:	461a      	mov	r2, r3
 80045bc:	68b9      	ldr	r1, [r7, #8]
 80045be:	68f8      	ldr	r0, [r7, #12]
 80045c0:	f000 fee8 	bl	8005394 <UART_Start_Receive_IT>
 80045c4:	4603      	mov	r3, r0
 80045c6:	e000      	b.n	80045ca <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 80045c8:	2302      	movs	r3, #2
  }
}
 80045ca:	4618      	mov	r0, r3
 80045cc:	3728      	adds	r7, #40	; 0x28
 80045ce:	46bd      	mov	sp, r7
 80045d0:	bd80      	pop	{r7, pc}
 80045d2:	bf00      	nop
 80045d4:	40008000 	.word	0x40008000

080045d8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80045d8:	b580      	push	{r7, lr}
 80045da:	b0ba      	sub	sp, #232	; 0xe8
 80045dc:	af00      	add	r7, sp, #0
 80045de:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	69db      	ldr	r3, [r3, #28]
 80045e6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	689b      	ldr	r3, [r3, #8]
 80045fa:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80045fe:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8004602:	f640 030f 	movw	r3, #2063	; 0x80f
 8004606:	4013      	ands	r3, r2
 8004608:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800460c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004610:	2b00      	cmp	r3, #0
 8004612:	d115      	bne.n	8004640 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8004614:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004618:	f003 0320 	and.w	r3, r3, #32
 800461c:	2b00      	cmp	r3, #0
 800461e:	d00f      	beq.n	8004640 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004620:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004624:	f003 0320 	and.w	r3, r3, #32
 8004628:	2b00      	cmp	r3, #0
 800462a:	d009      	beq.n	8004640 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004630:	2b00      	cmp	r3, #0
 8004632:	f000 82a6 	beq.w	8004b82 <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800463a:	6878      	ldr	r0, [r7, #4]
 800463c:	4798      	blx	r3
      }
      return;
 800463e:	e2a0      	b.n	8004b82 <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8004640:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004644:	2b00      	cmp	r3, #0
 8004646:	f000 8117 	beq.w	8004878 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800464a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800464e:	f003 0301 	and.w	r3, r3, #1
 8004652:	2b00      	cmp	r3, #0
 8004654:	d106      	bne.n	8004664 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8004656:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800465a:	4b85      	ldr	r3, [pc, #532]	; (8004870 <HAL_UART_IRQHandler+0x298>)
 800465c:	4013      	ands	r3, r2
 800465e:	2b00      	cmp	r3, #0
 8004660:	f000 810a 	beq.w	8004878 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004664:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004668:	f003 0301 	and.w	r3, r3, #1
 800466c:	2b00      	cmp	r3, #0
 800466e:	d011      	beq.n	8004694 <HAL_UART_IRQHandler+0xbc>
 8004670:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004674:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004678:	2b00      	cmp	r3, #0
 800467a:	d00b      	beq.n	8004694 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	2201      	movs	r2, #1
 8004682:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800468a:	f043 0201 	orr.w	r2, r3, #1
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004694:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004698:	f003 0302 	and.w	r3, r3, #2
 800469c:	2b00      	cmp	r3, #0
 800469e:	d011      	beq.n	80046c4 <HAL_UART_IRQHandler+0xec>
 80046a0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80046a4:	f003 0301 	and.w	r3, r3, #1
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d00b      	beq.n	80046c4 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	2202      	movs	r2, #2
 80046b2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80046ba:	f043 0204 	orr.w	r2, r3, #4
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80046c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80046c8:	f003 0304 	and.w	r3, r3, #4
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d011      	beq.n	80046f4 <HAL_UART_IRQHandler+0x11c>
 80046d0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80046d4:	f003 0301 	and.w	r3, r3, #1
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d00b      	beq.n	80046f4 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	2204      	movs	r2, #4
 80046e2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80046ea:	f043 0202 	orr.w	r2, r3, #2
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 80046f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80046f8:	f003 0308 	and.w	r3, r3, #8
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d017      	beq.n	8004730 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004700:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004704:	f003 0320 	and.w	r3, r3, #32
 8004708:	2b00      	cmp	r3, #0
 800470a:	d105      	bne.n	8004718 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800470c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004710:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004714:	2b00      	cmp	r3, #0
 8004716:	d00b      	beq.n	8004730 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	2208      	movs	r2, #8
 800471e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004726:	f043 0208 	orr.w	r2, r3, #8
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004730:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004734:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004738:	2b00      	cmp	r3, #0
 800473a:	d012      	beq.n	8004762 <HAL_UART_IRQHandler+0x18a>
 800473c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004740:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004744:	2b00      	cmp	r3, #0
 8004746:	d00c      	beq.n	8004762 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004750:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004758:	f043 0220 	orr.w	r2, r3, #32
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004768:	2b00      	cmp	r3, #0
 800476a:	f000 820c 	beq.w	8004b86 <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800476e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004772:	f003 0320 	and.w	r3, r3, #32
 8004776:	2b00      	cmp	r3, #0
 8004778:	d00d      	beq.n	8004796 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800477a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800477e:	f003 0320 	and.w	r3, r3, #32
 8004782:	2b00      	cmp	r3, #0
 8004784:	d007      	beq.n	8004796 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800478a:	2b00      	cmp	r3, #0
 800478c:	d003      	beq.n	8004796 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004792:	6878      	ldr	r0, [r7, #4]
 8004794:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800479c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	689b      	ldr	r3, [r3, #8]
 80047a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047aa:	2b40      	cmp	r3, #64	; 0x40
 80047ac:	d005      	beq.n	80047ba <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80047ae:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80047b2:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d04f      	beq.n	800485a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80047ba:	6878      	ldr	r0, [r7, #4]
 80047bc:	f000 feb4 	bl	8005528 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	689b      	ldr	r3, [r3, #8]
 80047c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047ca:	2b40      	cmp	r3, #64	; 0x40
 80047cc:	d141      	bne.n	8004852 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	3308      	adds	r3, #8
 80047d4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047d8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80047dc:	e853 3f00 	ldrex	r3, [r3]
 80047e0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80047e4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80047e8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80047ec:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	3308      	adds	r3, #8
 80047f6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80047fa:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80047fe:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004802:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004806:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800480a:	e841 2300 	strex	r3, r2, [r1]
 800480e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004812:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004816:	2b00      	cmp	r3, #0
 8004818:	d1d9      	bne.n	80047ce <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800481e:	2b00      	cmp	r3, #0
 8004820:	d013      	beq.n	800484a <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004826:	4a13      	ldr	r2, [pc, #76]	; (8004874 <HAL_UART_IRQHandler+0x29c>)
 8004828:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800482e:	4618      	mov	r0, r3
 8004830:	f7fd f836 	bl	80018a0 <HAL_DMA_Abort_IT>
 8004834:	4603      	mov	r3, r0
 8004836:	2b00      	cmp	r3, #0
 8004838:	d017      	beq.n	800486a <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800483e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004840:	687a      	ldr	r2, [r7, #4]
 8004842:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8004844:	4610      	mov	r0, r2
 8004846:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004848:	e00f      	b.n	800486a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800484a:	6878      	ldr	r0, [r7, #4]
 800484c:	f000 f9b0 	bl	8004bb0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004850:	e00b      	b.n	800486a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004852:	6878      	ldr	r0, [r7, #4]
 8004854:	f000 f9ac 	bl	8004bb0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004858:	e007      	b.n	800486a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800485a:	6878      	ldr	r0, [r7, #4]
 800485c:	f000 f9a8 	bl	8004bb0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	2200      	movs	r2, #0
 8004864:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8004868:	e18d      	b.n	8004b86 <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800486a:	bf00      	nop
    return;
 800486c:	e18b      	b.n	8004b86 <HAL_UART_IRQHandler+0x5ae>
 800486e:	bf00      	nop
 8004870:	04000120 	.word	0x04000120
 8004874:	080055ef 	.word	0x080055ef

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800487c:	2b01      	cmp	r3, #1
 800487e:	f040 8146 	bne.w	8004b0e <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004882:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004886:	f003 0310 	and.w	r3, r3, #16
 800488a:	2b00      	cmp	r3, #0
 800488c:	f000 813f 	beq.w	8004b0e <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004890:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004894:	f003 0310 	and.w	r3, r3, #16
 8004898:	2b00      	cmp	r3, #0
 800489a:	f000 8138 	beq.w	8004b0e <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	2210      	movs	r2, #16
 80048a4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	689b      	ldr	r3, [r3, #8]
 80048ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048b0:	2b40      	cmp	r3, #64	; 0x40
 80048b2:	f040 80b4 	bne.w	8004a1e <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	685b      	ldr	r3, [r3, #4]
 80048be:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80048c2:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	f000 815f 	beq.w	8004b8a <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80048d2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80048d6:	429a      	cmp	r2, r3
 80048d8:	f080 8157 	bcs.w	8004b8a <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80048e2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	f003 0320 	and.w	r3, r3, #32
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	f040 8085 	bne.w	8004a02 <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004900:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004904:	e853 3f00 	ldrex	r3, [r3]
 8004908:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800490c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004910:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004914:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	461a      	mov	r2, r3
 800491e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004922:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004926:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800492a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800492e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004932:	e841 2300 	strex	r3, r2, [r1]
 8004936:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800493a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800493e:	2b00      	cmp	r3, #0
 8004940:	d1da      	bne.n	80048f8 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	3308      	adds	r3, #8
 8004948:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800494a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800494c:	e853 3f00 	ldrex	r3, [r3]
 8004950:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004952:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004954:	f023 0301 	bic.w	r3, r3, #1
 8004958:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	3308      	adds	r3, #8
 8004962:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004966:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800496a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800496c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800496e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004972:	e841 2300 	strex	r3, r2, [r1]
 8004976:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004978:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800497a:	2b00      	cmp	r3, #0
 800497c:	d1e1      	bne.n	8004942 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	3308      	adds	r3, #8
 8004984:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004986:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004988:	e853 3f00 	ldrex	r3, [r3]
 800498c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800498e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004990:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004994:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	3308      	adds	r3, #8
 800499e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80049a2:	66fa      	str	r2, [r7, #108]	; 0x6c
 80049a4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049a6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80049a8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80049aa:	e841 2300 	strex	r3, r2, [r1]
 80049ae:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80049b0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d1e3      	bne.n	800497e <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	2220      	movs	r2, #32
 80049ba:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	2200      	movs	r2, #0
 80049c0:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80049ca:	e853 3f00 	ldrex	r3, [r3]
 80049ce:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80049d0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80049d2:	f023 0310 	bic.w	r3, r3, #16
 80049d6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	461a      	mov	r2, r3
 80049e0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80049e4:	65bb      	str	r3, [r7, #88]	; 0x58
 80049e6:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049e8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80049ea:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80049ec:	e841 2300 	strex	r3, r2, [r1]
 80049f0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80049f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d1e4      	bne.n	80049c2 <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049fc:	4618      	mov	r0, r3
 80049fe:	f7fc ff11 	bl	8001824 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004a0e:	b29b      	uxth	r3, r3
 8004a10:	1ad3      	subs	r3, r2, r3
 8004a12:	b29b      	uxth	r3, r3
 8004a14:	4619      	mov	r1, r3
 8004a16:	6878      	ldr	r0, [r7, #4]
 8004a18:	f000 f8d4 	bl	8004bc4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004a1c:	e0b5      	b.n	8004b8a <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004a2a:	b29b      	uxth	r3, r3
 8004a2c:	1ad3      	subs	r3, r2, r3
 8004a2e:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004a38:	b29b      	uxth	r3, r3
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	f000 80a7 	beq.w	8004b8e <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 8004a40:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	f000 80a2 	beq.w	8004b8e <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a52:	e853 3f00 	ldrex	r3, [r3]
 8004a56:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004a58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a5a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004a5e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	461a      	mov	r2, r3
 8004a68:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004a6c:	647b      	str	r3, [r7, #68]	; 0x44
 8004a6e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a70:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004a72:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004a74:	e841 2300 	strex	r3, r2, [r1]
 8004a78:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004a7a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d1e4      	bne.n	8004a4a <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	3308      	adds	r3, #8
 8004a86:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a8a:	e853 3f00 	ldrex	r3, [r3]
 8004a8e:	623b      	str	r3, [r7, #32]
   return(result);
 8004a90:	6a3b      	ldr	r3, [r7, #32]
 8004a92:	f023 0301 	bic.w	r3, r3, #1
 8004a96:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	3308      	adds	r3, #8
 8004aa0:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004aa4:	633a      	str	r2, [r7, #48]	; 0x30
 8004aa6:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004aa8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004aaa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004aac:	e841 2300 	strex	r3, r2, [r1]
 8004ab0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004ab2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d1e3      	bne.n	8004a80 <HAL_UART_IRQHandler+0x4a8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	2220      	movs	r2, #32
 8004abc:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	2200      	movs	r2, #0
 8004ac2:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	2200      	movs	r2, #0
 8004ac8:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ad0:	693b      	ldr	r3, [r7, #16]
 8004ad2:	e853 3f00 	ldrex	r3, [r3]
 8004ad6:	60fb      	str	r3, [r7, #12]
   return(result);
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	f023 0310 	bic.w	r3, r3, #16
 8004ade:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	461a      	mov	r2, r3
 8004ae8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004aec:	61fb      	str	r3, [r7, #28]
 8004aee:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004af0:	69b9      	ldr	r1, [r7, #24]
 8004af2:	69fa      	ldr	r2, [r7, #28]
 8004af4:	e841 2300 	strex	r3, r2, [r1]
 8004af8:	617b      	str	r3, [r7, #20]
   return(result);
 8004afa:	697b      	ldr	r3, [r7, #20]
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d1e4      	bne.n	8004aca <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004b00:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004b04:	4619      	mov	r1, r3
 8004b06:	6878      	ldr	r0, [r7, #4]
 8004b08:	f000 f85c 	bl	8004bc4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004b0c:	e03f      	b.n	8004b8e <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004b0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004b12:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d00e      	beq.n	8004b38 <HAL_UART_IRQHandler+0x560>
 8004b1a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004b1e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d008      	beq.n	8004b38 <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004b2e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004b30:	6878      	ldr	r0, [r7, #4]
 8004b32:	f000 fefc 	bl	800592e <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004b36:	e02d      	b.n	8004b94 <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8004b38:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004b3c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d00e      	beq.n	8004b62 <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8004b44:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004b48:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d008      	beq.n	8004b62 <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d01c      	beq.n	8004b92 <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004b5c:	6878      	ldr	r0, [r7, #4]
 8004b5e:	4798      	blx	r3
    }
    return;
 8004b60:	e017      	b.n	8004b92 <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004b62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004b66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d012      	beq.n	8004b94 <HAL_UART_IRQHandler+0x5bc>
 8004b6e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004b72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d00c      	beq.n	8004b94 <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 8004b7a:	6878      	ldr	r0, [r7, #4]
 8004b7c:	f000 fd4d 	bl	800561a <UART_EndTransmit_IT>
    return;
 8004b80:	e008      	b.n	8004b94 <HAL_UART_IRQHandler+0x5bc>
      return;
 8004b82:	bf00      	nop
 8004b84:	e006      	b.n	8004b94 <HAL_UART_IRQHandler+0x5bc>
    return;
 8004b86:	bf00      	nop
 8004b88:	e004      	b.n	8004b94 <HAL_UART_IRQHandler+0x5bc>
      return;
 8004b8a:	bf00      	nop
 8004b8c:	e002      	b.n	8004b94 <HAL_UART_IRQHandler+0x5bc>
      return;
 8004b8e:	bf00      	nop
 8004b90:	e000      	b.n	8004b94 <HAL_UART_IRQHandler+0x5bc>
    return;
 8004b92:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8004b94:	37e8      	adds	r7, #232	; 0xe8
 8004b96:	46bd      	mov	sp, r7
 8004b98:	bd80      	pop	{r7, pc}
 8004b9a:	bf00      	nop

08004b9c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004b9c:	b480      	push	{r7}
 8004b9e:	b083      	sub	sp, #12
 8004ba0:	af00      	add	r7, sp, #0
 8004ba2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004ba4:	bf00      	nop
 8004ba6:	370c      	adds	r7, #12
 8004ba8:	46bd      	mov	sp, r7
 8004baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bae:	4770      	bx	lr

08004bb0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004bb0:	b480      	push	{r7}
 8004bb2:	b083      	sub	sp, #12
 8004bb4:	af00      	add	r7, sp, #0
 8004bb6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004bb8:	bf00      	nop
 8004bba:	370c      	adds	r7, #12
 8004bbc:	46bd      	mov	sp, r7
 8004bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc2:	4770      	bx	lr

08004bc4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004bc4:	b480      	push	{r7}
 8004bc6:	b083      	sub	sp, #12
 8004bc8:	af00      	add	r7, sp, #0
 8004bca:	6078      	str	r0, [r7, #4]
 8004bcc:	460b      	mov	r3, r1
 8004bce:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004bd0:	bf00      	nop
 8004bd2:	370c      	adds	r7, #12
 8004bd4:	46bd      	mov	sp, r7
 8004bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bda:	4770      	bx	lr

08004bdc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004bdc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004be0:	b08a      	sub	sp, #40	; 0x28
 8004be2:	af00      	add	r7, sp, #0
 8004be4:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004be6:	2300      	movs	r3, #0
 8004be8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	689a      	ldr	r2, [r3, #8]
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	691b      	ldr	r3, [r3, #16]
 8004bf4:	431a      	orrs	r2, r3
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	695b      	ldr	r3, [r3, #20]
 8004bfa:	431a      	orrs	r2, r3
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	69db      	ldr	r3, [r3, #28]
 8004c00:	4313      	orrs	r3, r2
 8004c02:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	681a      	ldr	r2, [r3, #0]
 8004c0a:	4bb4      	ldr	r3, [pc, #720]	; (8004edc <UART_SetConfig+0x300>)
 8004c0c:	4013      	ands	r3, r2
 8004c0e:	68fa      	ldr	r2, [r7, #12]
 8004c10:	6812      	ldr	r2, [r2, #0]
 8004c12:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004c14:	430b      	orrs	r3, r1
 8004c16:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	685b      	ldr	r3, [r3, #4]
 8004c1e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	68da      	ldr	r2, [r3, #12]
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	430a      	orrs	r2, r1
 8004c2c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	699b      	ldr	r3, [r3, #24]
 8004c32:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	4aa9      	ldr	r2, [pc, #676]	; (8004ee0 <UART_SetConfig+0x304>)
 8004c3a:	4293      	cmp	r3, r2
 8004c3c:	d004      	beq.n	8004c48 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	6a1b      	ldr	r3, [r3, #32]
 8004c42:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c44:	4313      	orrs	r3, r2
 8004c46:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	689b      	ldr	r3, [r3, #8]
 8004c4e:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c58:	430a      	orrs	r2, r1
 8004c5a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	4aa0      	ldr	r2, [pc, #640]	; (8004ee4 <UART_SetConfig+0x308>)
 8004c62:	4293      	cmp	r3, r2
 8004c64:	d126      	bne.n	8004cb4 <UART_SetConfig+0xd8>
 8004c66:	4ba0      	ldr	r3, [pc, #640]	; (8004ee8 <UART_SetConfig+0x30c>)
 8004c68:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c6c:	f003 0303 	and.w	r3, r3, #3
 8004c70:	2b03      	cmp	r3, #3
 8004c72:	d81b      	bhi.n	8004cac <UART_SetConfig+0xd0>
 8004c74:	a201      	add	r2, pc, #4	; (adr r2, 8004c7c <UART_SetConfig+0xa0>)
 8004c76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c7a:	bf00      	nop
 8004c7c:	08004c8d 	.word	0x08004c8d
 8004c80:	08004c9d 	.word	0x08004c9d
 8004c84:	08004c95 	.word	0x08004c95
 8004c88:	08004ca5 	.word	0x08004ca5
 8004c8c:	2301      	movs	r3, #1
 8004c8e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c92:	e080      	b.n	8004d96 <UART_SetConfig+0x1ba>
 8004c94:	2302      	movs	r3, #2
 8004c96:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c9a:	e07c      	b.n	8004d96 <UART_SetConfig+0x1ba>
 8004c9c:	2304      	movs	r3, #4
 8004c9e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004ca2:	e078      	b.n	8004d96 <UART_SetConfig+0x1ba>
 8004ca4:	2308      	movs	r3, #8
 8004ca6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004caa:	e074      	b.n	8004d96 <UART_SetConfig+0x1ba>
 8004cac:	2310      	movs	r3, #16
 8004cae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004cb2:	e070      	b.n	8004d96 <UART_SetConfig+0x1ba>
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	4a8c      	ldr	r2, [pc, #560]	; (8004eec <UART_SetConfig+0x310>)
 8004cba:	4293      	cmp	r3, r2
 8004cbc:	d138      	bne.n	8004d30 <UART_SetConfig+0x154>
 8004cbe:	4b8a      	ldr	r3, [pc, #552]	; (8004ee8 <UART_SetConfig+0x30c>)
 8004cc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cc4:	f003 030c 	and.w	r3, r3, #12
 8004cc8:	2b0c      	cmp	r3, #12
 8004cca:	d82d      	bhi.n	8004d28 <UART_SetConfig+0x14c>
 8004ccc:	a201      	add	r2, pc, #4	; (adr r2, 8004cd4 <UART_SetConfig+0xf8>)
 8004cce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cd2:	bf00      	nop
 8004cd4:	08004d09 	.word	0x08004d09
 8004cd8:	08004d29 	.word	0x08004d29
 8004cdc:	08004d29 	.word	0x08004d29
 8004ce0:	08004d29 	.word	0x08004d29
 8004ce4:	08004d19 	.word	0x08004d19
 8004ce8:	08004d29 	.word	0x08004d29
 8004cec:	08004d29 	.word	0x08004d29
 8004cf0:	08004d29 	.word	0x08004d29
 8004cf4:	08004d11 	.word	0x08004d11
 8004cf8:	08004d29 	.word	0x08004d29
 8004cfc:	08004d29 	.word	0x08004d29
 8004d00:	08004d29 	.word	0x08004d29
 8004d04:	08004d21 	.word	0x08004d21
 8004d08:	2300      	movs	r3, #0
 8004d0a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d0e:	e042      	b.n	8004d96 <UART_SetConfig+0x1ba>
 8004d10:	2302      	movs	r3, #2
 8004d12:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d16:	e03e      	b.n	8004d96 <UART_SetConfig+0x1ba>
 8004d18:	2304      	movs	r3, #4
 8004d1a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d1e:	e03a      	b.n	8004d96 <UART_SetConfig+0x1ba>
 8004d20:	2308      	movs	r3, #8
 8004d22:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d26:	e036      	b.n	8004d96 <UART_SetConfig+0x1ba>
 8004d28:	2310      	movs	r3, #16
 8004d2a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d2e:	e032      	b.n	8004d96 <UART_SetConfig+0x1ba>
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	4a6a      	ldr	r2, [pc, #424]	; (8004ee0 <UART_SetConfig+0x304>)
 8004d36:	4293      	cmp	r3, r2
 8004d38:	d12a      	bne.n	8004d90 <UART_SetConfig+0x1b4>
 8004d3a:	4b6b      	ldr	r3, [pc, #428]	; (8004ee8 <UART_SetConfig+0x30c>)
 8004d3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d40:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004d44:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004d48:	d01a      	beq.n	8004d80 <UART_SetConfig+0x1a4>
 8004d4a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004d4e:	d81b      	bhi.n	8004d88 <UART_SetConfig+0x1ac>
 8004d50:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004d54:	d00c      	beq.n	8004d70 <UART_SetConfig+0x194>
 8004d56:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004d5a:	d815      	bhi.n	8004d88 <UART_SetConfig+0x1ac>
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d003      	beq.n	8004d68 <UART_SetConfig+0x18c>
 8004d60:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d64:	d008      	beq.n	8004d78 <UART_SetConfig+0x19c>
 8004d66:	e00f      	b.n	8004d88 <UART_SetConfig+0x1ac>
 8004d68:	2300      	movs	r3, #0
 8004d6a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d6e:	e012      	b.n	8004d96 <UART_SetConfig+0x1ba>
 8004d70:	2302      	movs	r3, #2
 8004d72:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d76:	e00e      	b.n	8004d96 <UART_SetConfig+0x1ba>
 8004d78:	2304      	movs	r3, #4
 8004d7a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d7e:	e00a      	b.n	8004d96 <UART_SetConfig+0x1ba>
 8004d80:	2308      	movs	r3, #8
 8004d82:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d86:	e006      	b.n	8004d96 <UART_SetConfig+0x1ba>
 8004d88:	2310      	movs	r3, #16
 8004d8a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d8e:	e002      	b.n	8004d96 <UART_SetConfig+0x1ba>
 8004d90:	2310      	movs	r3, #16
 8004d92:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	4a51      	ldr	r2, [pc, #324]	; (8004ee0 <UART_SetConfig+0x304>)
 8004d9c:	4293      	cmp	r3, r2
 8004d9e:	d17a      	bne.n	8004e96 <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004da0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004da4:	2b08      	cmp	r3, #8
 8004da6:	d824      	bhi.n	8004df2 <UART_SetConfig+0x216>
 8004da8:	a201      	add	r2, pc, #4	; (adr r2, 8004db0 <UART_SetConfig+0x1d4>)
 8004daa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004dae:	bf00      	nop
 8004db0:	08004dd5 	.word	0x08004dd5
 8004db4:	08004df3 	.word	0x08004df3
 8004db8:	08004ddd 	.word	0x08004ddd
 8004dbc:	08004df3 	.word	0x08004df3
 8004dc0:	08004de3 	.word	0x08004de3
 8004dc4:	08004df3 	.word	0x08004df3
 8004dc8:	08004df3 	.word	0x08004df3
 8004dcc:	08004df3 	.word	0x08004df3
 8004dd0:	08004deb 	.word	0x08004deb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004dd4:	f7fd fdf6 	bl	80029c4 <HAL_RCC_GetPCLK1Freq>
 8004dd8:	61f8      	str	r0, [r7, #28]
        break;
 8004dda:	e010      	b.n	8004dfe <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004ddc:	4b44      	ldr	r3, [pc, #272]	; (8004ef0 <UART_SetConfig+0x314>)
 8004dde:	61fb      	str	r3, [r7, #28]
        break;
 8004de0:	e00d      	b.n	8004dfe <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004de2:	f7fd fd57 	bl	8002894 <HAL_RCC_GetSysClockFreq>
 8004de6:	61f8      	str	r0, [r7, #28]
        break;
 8004de8:	e009      	b.n	8004dfe <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004dea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004dee:	61fb      	str	r3, [r7, #28]
        break;
 8004df0:	e005      	b.n	8004dfe <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 8004df2:	2300      	movs	r3, #0
 8004df4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004df6:	2301      	movs	r3, #1
 8004df8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004dfc:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004dfe:	69fb      	ldr	r3, [r7, #28]
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	f000 8107 	beq.w	8005014 <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	685a      	ldr	r2, [r3, #4]
 8004e0a:	4613      	mov	r3, r2
 8004e0c:	005b      	lsls	r3, r3, #1
 8004e0e:	4413      	add	r3, r2
 8004e10:	69fa      	ldr	r2, [r7, #28]
 8004e12:	429a      	cmp	r2, r3
 8004e14:	d305      	bcc.n	8004e22 <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	685b      	ldr	r3, [r3, #4]
 8004e1a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004e1c:	69fa      	ldr	r2, [r7, #28]
 8004e1e:	429a      	cmp	r2, r3
 8004e20:	d903      	bls.n	8004e2a <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 8004e22:	2301      	movs	r3, #1
 8004e24:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004e28:	e0f4      	b.n	8005014 <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004e2a:	69fb      	ldr	r3, [r7, #28]
 8004e2c:	2200      	movs	r2, #0
 8004e2e:	461c      	mov	r4, r3
 8004e30:	4615      	mov	r5, r2
 8004e32:	f04f 0200 	mov.w	r2, #0
 8004e36:	f04f 0300 	mov.w	r3, #0
 8004e3a:	022b      	lsls	r3, r5, #8
 8004e3c:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8004e40:	0222      	lsls	r2, r4, #8
 8004e42:	68f9      	ldr	r1, [r7, #12]
 8004e44:	6849      	ldr	r1, [r1, #4]
 8004e46:	0849      	lsrs	r1, r1, #1
 8004e48:	2000      	movs	r0, #0
 8004e4a:	4688      	mov	r8, r1
 8004e4c:	4681      	mov	r9, r0
 8004e4e:	eb12 0a08 	adds.w	sl, r2, r8
 8004e52:	eb43 0b09 	adc.w	fp, r3, r9
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	685b      	ldr	r3, [r3, #4]
 8004e5a:	2200      	movs	r2, #0
 8004e5c:	603b      	str	r3, [r7, #0]
 8004e5e:	607a      	str	r2, [r7, #4]
 8004e60:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004e64:	4650      	mov	r0, sl
 8004e66:	4659      	mov	r1, fp
 8004e68:	f7fb fa02 	bl	8000270 <__aeabi_uldivmod>
 8004e6c:	4602      	mov	r2, r0
 8004e6e:	460b      	mov	r3, r1
 8004e70:	4613      	mov	r3, r2
 8004e72:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004e74:	69bb      	ldr	r3, [r7, #24]
 8004e76:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004e7a:	d308      	bcc.n	8004e8e <UART_SetConfig+0x2b2>
 8004e7c:	69bb      	ldr	r3, [r7, #24]
 8004e7e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004e82:	d204      	bcs.n	8004e8e <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	69ba      	ldr	r2, [r7, #24]
 8004e8a:	60da      	str	r2, [r3, #12]
 8004e8c:	e0c2      	b.n	8005014 <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 8004e8e:	2301      	movs	r3, #1
 8004e90:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004e94:	e0be      	b.n	8005014 <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	69db      	ldr	r3, [r3, #28]
 8004e9a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004e9e:	d16a      	bne.n	8004f76 <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 8004ea0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004ea4:	2b08      	cmp	r3, #8
 8004ea6:	d834      	bhi.n	8004f12 <UART_SetConfig+0x336>
 8004ea8:	a201      	add	r2, pc, #4	; (adr r2, 8004eb0 <UART_SetConfig+0x2d4>)
 8004eaa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004eae:	bf00      	nop
 8004eb0:	08004ed5 	.word	0x08004ed5
 8004eb4:	08004ef5 	.word	0x08004ef5
 8004eb8:	08004efd 	.word	0x08004efd
 8004ebc:	08004f13 	.word	0x08004f13
 8004ec0:	08004f03 	.word	0x08004f03
 8004ec4:	08004f13 	.word	0x08004f13
 8004ec8:	08004f13 	.word	0x08004f13
 8004ecc:	08004f13 	.word	0x08004f13
 8004ed0:	08004f0b 	.word	0x08004f0b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004ed4:	f7fd fd76 	bl	80029c4 <HAL_RCC_GetPCLK1Freq>
 8004ed8:	61f8      	str	r0, [r7, #28]
        break;
 8004eda:	e020      	b.n	8004f1e <UART_SetConfig+0x342>
 8004edc:	efff69f3 	.word	0xefff69f3
 8004ee0:	40008000 	.word	0x40008000
 8004ee4:	40013800 	.word	0x40013800
 8004ee8:	40021000 	.word	0x40021000
 8004eec:	40004400 	.word	0x40004400
 8004ef0:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004ef4:	f7fd fd7c 	bl	80029f0 <HAL_RCC_GetPCLK2Freq>
 8004ef8:	61f8      	str	r0, [r7, #28]
        break;
 8004efa:	e010      	b.n	8004f1e <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004efc:	4b4c      	ldr	r3, [pc, #304]	; (8005030 <UART_SetConfig+0x454>)
 8004efe:	61fb      	str	r3, [r7, #28]
        break;
 8004f00:	e00d      	b.n	8004f1e <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004f02:	f7fd fcc7 	bl	8002894 <HAL_RCC_GetSysClockFreq>
 8004f06:	61f8      	str	r0, [r7, #28]
        break;
 8004f08:	e009      	b.n	8004f1e <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004f0a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004f0e:	61fb      	str	r3, [r7, #28]
        break;
 8004f10:	e005      	b.n	8004f1e <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 8004f12:	2300      	movs	r3, #0
 8004f14:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004f16:	2301      	movs	r3, #1
 8004f18:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004f1c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004f1e:	69fb      	ldr	r3, [r7, #28]
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d077      	beq.n	8005014 <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004f24:	69fb      	ldr	r3, [r7, #28]
 8004f26:	005a      	lsls	r2, r3, #1
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	685b      	ldr	r3, [r3, #4]
 8004f2c:	085b      	lsrs	r3, r3, #1
 8004f2e:	441a      	add	r2, r3
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	685b      	ldr	r3, [r3, #4]
 8004f34:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f38:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004f3a:	69bb      	ldr	r3, [r7, #24]
 8004f3c:	2b0f      	cmp	r3, #15
 8004f3e:	d916      	bls.n	8004f6e <UART_SetConfig+0x392>
 8004f40:	69bb      	ldr	r3, [r7, #24]
 8004f42:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004f46:	d212      	bcs.n	8004f6e <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004f48:	69bb      	ldr	r3, [r7, #24]
 8004f4a:	b29b      	uxth	r3, r3
 8004f4c:	f023 030f 	bic.w	r3, r3, #15
 8004f50:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004f52:	69bb      	ldr	r3, [r7, #24]
 8004f54:	085b      	lsrs	r3, r3, #1
 8004f56:	b29b      	uxth	r3, r3
 8004f58:	f003 0307 	and.w	r3, r3, #7
 8004f5c:	b29a      	uxth	r2, r3
 8004f5e:	8afb      	ldrh	r3, [r7, #22]
 8004f60:	4313      	orrs	r3, r2
 8004f62:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	8afa      	ldrh	r2, [r7, #22]
 8004f6a:	60da      	str	r2, [r3, #12]
 8004f6c:	e052      	b.n	8005014 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8004f6e:	2301      	movs	r3, #1
 8004f70:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004f74:	e04e      	b.n	8005014 <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004f76:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004f7a:	2b08      	cmp	r3, #8
 8004f7c:	d827      	bhi.n	8004fce <UART_SetConfig+0x3f2>
 8004f7e:	a201      	add	r2, pc, #4	; (adr r2, 8004f84 <UART_SetConfig+0x3a8>)
 8004f80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f84:	08004fa9 	.word	0x08004fa9
 8004f88:	08004fb1 	.word	0x08004fb1
 8004f8c:	08004fb9 	.word	0x08004fb9
 8004f90:	08004fcf 	.word	0x08004fcf
 8004f94:	08004fbf 	.word	0x08004fbf
 8004f98:	08004fcf 	.word	0x08004fcf
 8004f9c:	08004fcf 	.word	0x08004fcf
 8004fa0:	08004fcf 	.word	0x08004fcf
 8004fa4:	08004fc7 	.word	0x08004fc7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004fa8:	f7fd fd0c 	bl	80029c4 <HAL_RCC_GetPCLK1Freq>
 8004fac:	61f8      	str	r0, [r7, #28]
        break;
 8004fae:	e014      	b.n	8004fda <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004fb0:	f7fd fd1e 	bl	80029f0 <HAL_RCC_GetPCLK2Freq>
 8004fb4:	61f8      	str	r0, [r7, #28]
        break;
 8004fb6:	e010      	b.n	8004fda <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004fb8:	4b1d      	ldr	r3, [pc, #116]	; (8005030 <UART_SetConfig+0x454>)
 8004fba:	61fb      	str	r3, [r7, #28]
        break;
 8004fbc:	e00d      	b.n	8004fda <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004fbe:	f7fd fc69 	bl	8002894 <HAL_RCC_GetSysClockFreq>
 8004fc2:	61f8      	str	r0, [r7, #28]
        break;
 8004fc4:	e009      	b.n	8004fda <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004fc6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004fca:	61fb      	str	r3, [r7, #28]
        break;
 8004fcc:	e005      	b.n	8004fda <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 8004fce:	2300      	movs	r3, #0
 8004fd0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004fd2:	2301      	movs	r3, #1
 8004fd4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004fd8:	bf00      	nop
    }

    if (pclk != 0U)
 8004fda:	69fb      	ldr	r3, [r7, #28]
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d019      	beq.n	8005014 <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	685b      	ldr	r3, [r3, #4]
 8004fe4:	085a      	lsrs	r2, r3, #1
 8004fe6:	69fb      	ldr	r3, [r7, #28]
 8004fe8:	441a      	add	r2, r3
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	685b      	ldr	r3, [r3, #4]
 8004fee:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ff2:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004ff4:	69bb      	ldr	r3, [r7, #24]
 8004ff6:	2b0f      	cmp	r3, #15
 8004ff8:	d909      	bls.n	800500e <UART_SetConfig+0x432>
 8004ffa:	69bb      	ldr	r3, [r7, #24]
 8004ffc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005000:	d205      	bcs.n	800500e <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005002:	69bb      	ldr	r3, [r7, #24]
 8005004:	b29a      	uxth	r2, r3
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	60da      	str	r2, [r3, #12]
 800500c:	e002      	b.n	8005014 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 800500e:	2301      	movs	r3, #1
 8005010:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	2200      	movs	r2, #0
 8005018:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	2200      	movs	r2, #0
 800501e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8005020:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8005024:	4618      	mov	r0, r3
 8005026:	3728      	adds	r7, #40	; 0x28
 8005028:	46bd      	mov	sp, r7
 800502a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800502e:	bf00      	nop
 8005030:	00f42400 	.word	0x00f42400

08005034 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005034:	b480      	push	{r7}
 8005036:	b083      	sub	sp, #12
 8005038:	af00      	add	r7, sp, #0
 800503a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005040:	f003 0301 	and.w	r3, r3, #1
 8005044:	2b00      	cmp	r3, #0
 8005046:	d00a      	beq.n	800505e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	685b      	ldr	r3, [r3, #4]
 800504e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	430a      	orrs	r2, r1
 800505c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005062:	f003 0302 	and.w	r3, r3, #2
 8005066:	2b00      	cmp	r3, #0
 8005068:	d00a      	beq.n	8005080 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	685b      	ldr	r3, [r3, #4]
 8005070:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	430a      	orrs	r2, r1
 800507e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005084:	f003 0304 	and.w	r3, r3, #4
 8005088:	2b00      	cmp	r3, #0
 800508a:	d00a      	beq.n	80050a2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	685b      	ldr	r3, [r3, #4]
 8005092:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	430a      	orrs	r2, r1
 80050a0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050a6:	f003 0308 	and.w	r3, r3, #8
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d00a      	beq.n	80050c4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	685b      	ldr	r3, [r3, #4]
 80050b4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	430a      	orrs	r2, r1
 80050c2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050c8:	f003 0310 	and.w	r3, r3, #16
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d00a      	beq.n	80050e6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	689b      	ldr	r3, [r3, #8]
 80050d6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	430a      	orrs	r2, r1
 80050e4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050ea:	f003 0320 	and.w	r3, r3, #32
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d00a      	beq.n	8005108 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	689b      	ldr	r3, [r3, #8]
 80050f8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	430a      	orrs	r2, r1
 8005106:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800510c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005110:	2b00      	cmp	r3, #0
 8005112:	d01a      	beq.n	800514a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	685b      	ldr	r3, [r3, #4]
 800511a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	430a      	orrs	r2, r1
 8005128:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800512e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005132:	d10a      	bne.n	800514a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	685b      	ldr	r3, [r3, #4]
 800513a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	430a      	orrs	r2, r1
 8005148:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800514e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005152:	2b00      	cmp	r3, #0
 8005154:	d00a      	beq.n	800516c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	685b      	ldr	r3, [r3, #4]
 800515c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	430a      	orrs	r2, r1
 800516a:	605a      	str	r2, [r3, #4]
  }
}
 800516c:	bf00      	nop
 800516e:	370c      	adds	r7, #12
 8005170:	46bd      	mov	sp, r7
 8005172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005176:	4770      	bx	lr

08005178 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005178:	b580      	push	{r7, lr}
 800517a:	b086      	sub	sp, #24
 800517c:	af02      	add	r7, sp, #8
 800517e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	2200      	movs	r2, #0
 8005184:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005188:	f7fc f9a6 	bl	80014d8 <HAL_GetTick>
 800518c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	f003 0308 	and.w	r3, r3, #8
 8005198:	2b08      	cmp	r3, #8
 800519a:	d10e      	bne.n	80051ba <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800519c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80051a0:	9300      	str	r3, [sp, #0]
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	2200      	movs	r2, #0
 80051a6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80051aa:	6878      	ldr	r0, [r7, #4]
 80051ac:	f000 f82d 	bl	800520a <UART_WaitOnFlagUntilTimeout>
 80051b0:	4603      	mov	r3, r0
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d001      	beq.n	80051ba <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80051b6:	2303      	movs	r3, #3
 80051b8:	e023      	b.n	8005202 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	f003 0304 	and.w	r3, r3, #4
 80051c4:	2b04      	cmp	r3, #4
 80051c6:	d10e      	bne.n	80051e6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80051c8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80051cc:	9300      	str	r3, [sp, #0]
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	2200      	movs	r2, #0
 80051d2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80051d6:	6878      	ldr	r0, [r7, #4]
 80051d8:	f000 f817 	bl	800520a <UART_WaitOnFlagUntilTimeout>
 80051dc:	4603      	mov	r3, r0
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d001      	beq.n	80051e6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80051e2:	2303      	movs	r3, #3
 80051e4:	e00d      	b.n	8005202 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	2220      	movs	r2, #32
 80051ea:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	2220      	movs	r2, #32
 80051f0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	2200      	movs	r2, #0
 80051f6:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	2200      	movs	r2, #0
 80051fc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8005200:	2300      	movs	r3, #0
}
 8005202:	4618      	mov	r0, r3
 8005204:	3710      	adds	r7, #16
 8005206:	46bd      	mov	sp, r7
 8005208:	bd80      	pop	{r7, pc}

0800520a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800520a:	b580      	push	{r7, lr}
 800520c:	b09c      	sub	sp, #112	; 0x70
 800520e:	af00      	add	r7, sp, #0
 8005210:	60f8      	str	r0, [r7, #12]
 8005212:	60b9      	str	r1, [r7, #8]
 8005214:	603b      	str	r3, [r7, #0]
 8005216:	4613      	mov	r3, r2
 8005218:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800521a:	e0a5      	b.n	8005368 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800521c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800521e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005222:	f000 80a1 	beq.w	8005368 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005226:	f7fc f957 	bl	80014d8 <HAL_GetTick>
 800522a:	4602      	mov	r2, r0
 800522c:	683b      	ldr	r3, [r7, #0]
 800522e:	1ad3      	subs	r3, r2, r3
 8005230:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8005232:	429a      	cmp	r2, r3
 8005234:	d302      	bcc.n	800523c <UART_WaitOnFlagUntilTimeout+0x32>
 8005236:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005238:	2b00      	cmp	r3, #0
 800523a:	d13e      	bne.n	80052ba <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005242:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005244:	e853 3f00 	ldrex	r3, [r3]
 8005248:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800524a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800524c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005250:	667b      	str	r3, [r7, #100]	; 0x64
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	461a      	mov	r2, r3
 8005258:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800525a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800525c:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800525e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005260:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005262:	e841 2300 	strex	r3, r2, [r1]
 8005266:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005268:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800526a:	2b00      	cmp	r3, #0
 800526c:	d1e6      	bne.n	800523c <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	3308      	adds	r3, #8
 8005274:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005276:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005278:	e853 3f00 	ldrex	r3, [r3]
 800527c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800527e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005280:	f023 0301 	bic.w	r3, r3, #1
 8005284:	663b      	str	r3, [r7, #96]	; 0x60
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	3308      	adds	r3, #8
 800528c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800528e:	64ba      	str	r2, [r7, #72]	; 0x48
 8005290:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005292:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005294:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005296:	e841 2300 	strex	r3, r2, [r1]
 800529a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800529c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d1e5      	bne.n	800526e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	2220      	movs	r2, #32
 80052a6:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	2220      	movs	r2, #32
 80052ac:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	2200      	movs	r2, #0
 80052b2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80052b6:	2303      	movs	r3, #3
 80052b8:	e067      	b.n	800538a <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	f003 0304 	and.w	r3, r3, #4
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d04f      	beq.n	8005368 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	69db      	ldr	r3, [r3, #28]
 80052ce:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80052d2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80052d6:	d147      	bne.n	8005368 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80052e0:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052ea:	e853 3f00 	ldrex	r3, [r3]
 80052ee:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80052f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052f2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80052f6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	461a      	mov	r2, r3
 80052fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005300:	637b      	str	r3, [r7, #52]	; 0x34
 8005302:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005304:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005306:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005308:	e841 2300 	strex	r3, r2, [r1]
 800530c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800530e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005310:	2b00      	cmp	r3, #0
 8005312:	d1e6      	bne.n	80052e2 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	3308      	adds	r3, #8
 800531a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800531c:	697b      	ldr	r3, [r7, #20]
 800531e:	e853 3f00 	ldrex	r3, [r3]
 8005322:	613b      	str	r3, [r7, #16]
   return(result);
 8005324:	693b      	ldr	r3, [r7, #16]
 8005326:	f023 0301 	bic.w	r3, r3, #1
 800532a:	66bb      	str	r3, [r7, #104]	; 0x68
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	3308      	adds	r3, #8
 8005332:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005334:	623a      	str	r2, [r7, #32]
 8005336:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005338:	69f9      	ldr	r1, [r7, #28]
 800533a:	6a3a      	ldr	r2, [r7, #32]
 800533c:	e841 2300 	strex	r3, r2, [r1]
 8005340:	61bb      	str	r3, [r7, #24]
   return(result);
 8005342:	69bb      	ldr	r3, [r7, #24]
 8005344:	2b00      	cmp	r3, #0
 8005346:	d1e5      	bne.n	8005314 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	2220      	movs	r2, #32
 800534c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	2220      	movs	r2, #32
 8005352:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	2220      	movs	r2, #32
 8005358:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	2200      	movs	r2, #0
 8005360:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8005364:	2303      	movs	r3, #3
 8005366:	e010      	b.n	800538a <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	69da      	ldr	r2, [r3, #28]
 800536e:	68bb      	ldr	r3, [r7, #8]
 8005370:	4013      	ands	r3, r2
 8005372:	68ba      	ldr	r2, [r7, #8]
 8005374:	429a      	cmp	r2, r3
 8005376:	bf0c      	ite	eq
 8005378:	2301      	moveq	r3, #1
 800537a:	2300      	movne	r3, #0
 800537c:	b2db      	uxtb	r3, r3
 800537e:	461a      	mov	r2, r3
 8005380:	79fb      	ldrb	r3, [r7, #7]
 8005382:	429a      	cmp	r2, r3
 8005384:	f43f af4a 	beq.w	800521c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005388:	2300      	movs	r3, #0
}
 800538a:	4618      	mov	r0, r3
 800538c:	3770      	adds	r7, #112	; 0x70
 800538e:	46bd      	mov	sp, r7
 8005390:	bd80      	pop	{r7, pc}
	...

08005394 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005394:	b480      	push	{r7}
 8005396:	b097      	sub	sp, #92	; 0x5c
 8005398:	af00      	add	r7, sp, #0
 800539a:	60f8      	str	r0, [r7, #12]
 800539c:	60b9      	str	r1, [r7, #8]
 800539e:	4613      	mov	r3, r2
 80053a0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	68ba      	ldr	r2, [r7, #8]
 80053a6:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	88fa      	ldrh	r2, [r7, #6]
 80053ac:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	88fa      	ldrh	r2, [r7, #6]
 80053b4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	2200      	movs	r2, #0
 80053bc:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	689b      	ldr	r3, [r3, #8]
 80053c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80053c6:	d10e      	bne.n	80053e6 <UART_Start_Receive_IT+0x52>
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	691b      	ldr	r3, [r3, #16]
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d105      	bne.n	80053dc <UART_Start_Receive_IT+0x48>
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	f240 12ff 	movw	r2, #511	; 0x1ff
 80053d6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80053da:	e02d      	b.n	8005438 <UART_Start_Receive_IT+0xa4>
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	22ff      	movs	r2, #255	; 0xff
 80053e0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80053e4:	e028      	b.n	8005438 <UART_Start_Receive_IT+0xa4>
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	689b      	ldr	r3, [r3, #8]
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d10d      	bne.n	800540a <UART_Start_Receive_IT+0x76>
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	691b      	ldr	r3, [r3, #16]
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d104      	bne.n	8005400 <UART_Start_Receive_IT+0x6c>
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	22ff      	movs	r2, #255	; 0xff
 80053fa:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80053fe:	e01b      	b.n	8005438 <UART_Start_Receive_IT+0xa4>
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	227f      	movs	r2, #127	; 0x7f
 8005404:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005408:	e016      	b.n	8005438 <UART_Start_Receive_IT+0xa4>
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	689b      	ldr	r3, [r3, #8]
 800540e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005412:	d10d      	bne.n	8005430 <UART_Start_Receive_IT+0x9c>
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	691b      	ldr	r3, [r3, #16]
 8005418:	2b00      	cmp	r3, #0
 800541a:	d104      	bne.n	8005426 <UART_Start_Receive_IT+0x92>
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	227f      	movs	r2, #127	; 0x7f
 8005420:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005424:	e008      	b.n	8005438 <UART_Start_Receive_IT+0xa4>
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	223f      	movs	r2, #63	; 0x3f
 800542a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800542e:	e003      	b.n	8005438 <UART_Start_Receive_IT+0xa4>
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	2200      	movs	r2, #0
 8005434:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	2200      	movs	r2, #0
 800543c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	2222      	movs	r2, #34	; 0x22
 8005444:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	3308      	adds	r3, #8
 800544c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800544e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005450:	e853 3f00 	ldrex	r3, [r3]
 8005454:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005456:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005458:	f043 0301 	orr.w	r3, r3, #1
 800545c:	657b      	str	r3, [r7, #84]	; 0x54
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	3308      	adds	r3, #8
 8005464:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005466:	64ba      	str	r2, [r7, #72]	; 0x48
 8005468:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800546a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800546c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800546e:	e841 2300 	strex	r3, r2, [r1]
 8005472:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005474:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005476:	2b00      	cmp	r3, #0
 8005478:	d1e5      	bne.n	8005446 <UART_Start_Receive_IT+0xb2>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	689b      	ldr	r3, [r3, #8]
 800547e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005482:	d107      	bne.n	8005494 <UART_Start_Receive_IT+0x100>
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	691b      	ldr	r3, [r3, #16]
 8005488:	2b00      	cmp	r3, #0
 800548a:	d103      	bne.n	8005494 <UART_Start_Receive_IT+0x100>
  {
    huart->RxISR = UART_RxISR_16BIT;
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	4a24      	ldr	r2, [pc, #144]	; (8005520 <UART_Start_Receive_IT+0x18c>)
 8005490:	665a      	str	r2, [r3, #100]	; 0x64
 8005492:	e002      	b.n	800549a <UART_Start_Receive_IT+0x106>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	4a23      	ldr	r2, [pc, #140]	; (8005524 <UART_Start_Receive_IT+0x190>)
 8005498:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	2200      	movs	r2, #0
 800549e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	691b      	ldr	r3, [r3, #16]
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d019      	beq.n	80054de <UART_Start_Receive_IT+0x14a>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054b2:	e853 3f00 	ldrex	r3, [r3]
 80054b6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80054b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054ba:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 80054be:	64fb      	str	r3, [r7, #76]	; 0x4c
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	461a      	mov	r2, r3
 80054c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80054c8:	637b      	str	r3, [r7, #52]	; 0x34
 80054ca:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054cc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80054ce:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80054d0:	e841 2300 	strex	r3, r2, [r1]
 80054d4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80054d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d1e6      	bne.n	80054aa <UART_Start_Receive_IT+0x116>
 80054dc:	e018      	b.n	8005510 <UART_Start_Receive_IT+0x17c>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054e4:	697b      	ldr	r3, [r7, #20]
 80054e6:	e853 3f00 	ldrex	r3, [r3]
 80054ea:	613b      	str	r3, [r7, #16]
   return(result);
 80054ec:	693b      	ldr	r3, [r7, #16]
 80054ee:	f043 0320 	orr.w	r3, r3, #32
 80054f2:	653b      	str	r3, [r7, #80]	; 0x50
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	461a      	mov	r2, r3
 80054fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80054fc:	623b      	str	r3, [r7, #32]
 80054fe:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005500:	69f9      	ldr	r1, [r7, #28]
 8005502:	6a3a      	ldr	r2, [r7, #32]
 8005504:	e841 2300 	strex	r3, r2, [r1]
 8005508:	61bb      	str	r3, [r7, #24]
   return(result);
 800550a:	69bb      	ldr	r3, [r7, #24]
 800550c:	2b00      	cmp	r3, #0
 800550e:	d1e6      	bne.n	80054de <UART_Start_Receive_IT+0x14a>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 8005510:	2300      	movs	r3, #0
}
 8005512:	4618      	mov	r0, r3
 8005514:	375c      	adds	r7, #92	; 0x5c
 8005516:	46bd      	mov	sp, r7
 8005518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800551c:	4770      	bx	lr
 800551e:	bf00      	nop
 8005520:	080057cf 	.word	0x080057cf
 8005524:	0800566f 	.word	0x0800566f

08005528 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005528:	b480      	push	{r7}
 800552a:	b095      	sub	sp, #84	; 0x54
 800552c:	af00      	add	r7, sp, #0
 800552e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005536:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005538:	e853 3f00 	ldrex	r3, [r3]
 800553c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800553e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005540:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005544:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	461a      	mov	r2, r3
 800554c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800554e:	643b      	str	r3, [r7, #64]	; 0x40
 8005550:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005552:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005554:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005556:	e841 2300 	strex	r3, r2, [r1]
 800555a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800555c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800555e:	2b00      	cmp	r3, #0
 8005560:	d1e6      	bne.n	8005530 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	3308      	adds	r3, #8
 8005568:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800556a:	6a3b      	ldr	r3, [r7, #32]
 800556c:	e853 3f00 	ldrex	r3, [r3]
 8005570:	61fb      	str	r3, [r7, #28]
   return(result);
 8005572:	69fb      	ldr	r3, [r7, #28]
 8005574:	f023 0301 	bic.w	r3, r3, #1
 8005578:	64bb      	str	r3, [r7, #72]	; 0x48
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	3308      	adds	r3, #8
 8005580:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005582:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005584:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005586:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005588:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800558a:	e841 2300 	strex	r3, r2, [r1]
 800558e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005590:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005592:	2b00      	cmp	r3, #0
 8005594:	d1e5      	bne.n	8005562 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800559a:	2b01      	cmp	r3, #1
 800559c:	d118      	bne.n	80055d0 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	e853 3f00 	ldrex	r3, [r3]
 80055aa:	60bb      	str	r3, [r7, #8]
   return(result);
 80055ac:	68bb      	ldr	r3, [r7, #8]
 80055ae:	f023 0310 	bic.w	r3, r3, #16
 80055b2:	647b      	str	r3, [r7, #68]	; 0x44
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	461a      	mov	r2, r3
 80055ba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80055bc:	61bb      	str	r3, [r7, #24]
 80055be:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055c0:	6979      	ldr	r1, [r7, #20]
 80055c2:	69ba      	ldr	r2, [r7, #24]
 80055c4:	e841 2300 	strex	r3, r2, [r1]
 80055c8:	613b      	str	r3, [r7, #16]
   return(result);
 80055ca:	693b      	ldr	r3, [r7, #16]
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d1e6      	bne.n	800559e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	2220      	movs	r2, #32
 80055d4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	2200      	movs	r2, #0
 80055da:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	2200      	movs	r2, #0
 80055e0:	665a      	str	r2, [r3, #100]	; 0x64
}
 80055e2:	bf00      	nop
 80055e4:	3754      	adds	r7, #84	; 0x54
 80055e6:	46bd      	mov	sp, r7
 80055e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ec:	4770      	bx	lr

080055ee <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80055ee:	b580      	push	{r7, lr}
 80055f0:	b084      	sub	sp, #16
 80055f2:	af00      	add	r7, sp, #0
 80055f4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055fa:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	2200      	movs	r2, #0
 8005600:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	2200      	movs	r2, #0
 8005608:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800560c:	68f8      	ldr	r0, [r7, #12]
 800560e:	f7ff facf 	bl	8004bb0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005612:	bf00      	nop
 8005614:	3710      	adds	r7, #16
 8005616:	46bd      	mov	sp, r7
 8005618:	bd80      	pop	{r7, pc}

0800561a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800561a:	b580      	push	{r7, lr}
 800561c:	b088      	sub	sp, #32
 800561e:	af00      	add	r7, sp, #0
 8005620:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	e853 3f00 	ldrex	r3, [r3]
 800562e:	60bb      	str	r3, [r7, #8]
   return(result);
 8005630:	68bb      	ldr	r3, [r7, #8]
 8005632:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005636:	61fb      	str	r3, [r7, #28]
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	461a      	mov	r2, r3
 800563e:	69fb      	ldr	r3, [r7, #28]
 8005640:	61bb      	str	r3, [r7, #24]
 8005642:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005644:	6979      	ldr	r1, [r7, #20]
 8005646:	69ba      	ldr	r2, [r7, #24]
 8005648:	e841 2300 	strex	r3, r2, [r1]
 800564c:	613b      	str	r3, [r7, #16]
   return(result);
 800564e:	693b      	ldr	r3, [r7, #16]
 8005650:	2b00      	cmp	r3, #0
 8005652:	d1e6      	bne.n	8005622 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	2220      	movs	r2, #32
 8005658:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	2200      	movs	r2, #0
 800565e:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005660:	6878      	ldr	r0, [r7, #4]
 8005662:	f7ff fa9b 	bl	8004b9c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005666:	bf00      	nop
 8005668:	3720      	adds	r7, #32
 800566a:	46bd      	mov	sp, r7
 800566c:	bd80      	pop	{r7, pc}

0800566e <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800566e:	b580      	push	{r7, lr}
 8005670:	b096      	sub	sp, #88	; 0x58
 8005672:	af00      	add	r7, sp, #0
 8005674:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800567c:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005684:	2b22      	cmp	r3, #34	; 0x22
 8005686:	f040 8094 	bne.w	80057b2 <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8005690:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8005694:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8005698:	b2d9      	uxtb	r1, r3
 800569a:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800569e:	b2da      	uxtb	r2, r3
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056a4:	400a      	ands	r2, r1
 80056a6:	b2d2      	uxtb	r2, r2
 80056a8:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056ae:	1c5a      	adds	r2, r3, #1
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80056ba:	b29b      	uxth	r3, r3
 80056bc:	3b01      	subs	r3, #1
 80056be:	b29a      	uxth	r2, r3
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80056cc:	b29b      	uxth	r3, r3
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d179      	bne.n	80057c6 <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056da:	e853 3f00 	ldrex	r3, [r3]
 80056de:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80056e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056e2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80056e6:	653b      	str	r3, [r7, #80]	; 0x50
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	461a      	mov	r2, r3
 80056ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80056f0:	647b      	str	r3, [r7, #68]	; 0x44
 80056f2:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056f4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80056f6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80056f8:	e841 2300 	strex	r3, r2, [r1]
 80056fc:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80056fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005700:	2b00      	cmp	r3, #0
 8005702:	d1e6      	bne.n	80056d2 <UART_RxISR_8BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	3308      	adds	r3, #8
 800570a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800570c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800570e:	e853 3f00 	ldrex	r3, [r3]
 8005712:	623b      	str	r3, [r7, #32]
   return(result);
 8005714:	6a3b      	ldr	r3, [r7, #32]
 8005716:	f023 0301 	bic.w	r3, r3, #1
 800571a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	3308      	adds	r3, #8
 8005722:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005724:	633a      	str	r2, [r7, #48]	; 0x30
 8005726:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005728:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800572a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800572c:	e841 2300 	strex	r3, r2, [r1]
 8005730:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005732:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005734:	2b00      	cmp	r3, #0
 8005736:	d1e5      	bne.n	8005704 <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	2220      	movs	r2, #32
 800573c:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	2200      	movs	r2, #0
 8005742:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005748:	2b01      	cmp	r3, #1
 800574a:	d12e      	bne.n	80057aa <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	2200      	movs	r2, #0
 8005750:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005758:	693b      	ldr	r3, [r7, #16]
 800575a:	e853 3f00 	ldrex	r3, [r3]
 800575e:	60fb      	str	r3, [r7, #12]
   return(result);
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	f023 0310 	bic.w	r3, r3, #16
 8005766:	64bb      	str	r3, [r7, #72]	; 0x48
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	461a      	mov	r2, r3
 800576e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005770:	61fb      	str	r3, [r7, #28]
 8005772:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005774:	69b9      	ldr	r1, [r7, #24]
 8005776:	69fa      	ldr	r2, [r7, #28]
 8005778:	e841 2300 	strex	r3, r2, [r1]
 800577c:	617b      	str	r3, [r7, #20]
   return(result);
 800577e:	697b      	ldr	r3, [r7, #20]
 8005780:	2b00      	cmp	r3, #0
 8005782:	d1e6      	bne.n	8005752 <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	69db      	ldr	r3, [r3, #28]
 800578a:	f003 0310 	and.w	r3, r3, #16
 800578e:	2b10      	cmp	r3, #16
 8005790:	d103      	bne.n	800579a <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	2210      	movs	r2, #16
 8005798:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80057a0:	4619      	mov	r1, r3
 80057a2:	6878      	ldr	r0, [r7, #4]
 80057a4:	f7ff fa0e 	bl	8004bc4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80057a8:	e00d      	b.n	80057c6 <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 80057aa:	6878      	ldr	r0, [r7, #4]
 80057ac:	f7fb fe0a 	bl	80013c4 <HAL_UART_RxCpltCallback>
}
 80057b0:	e009      	b.n	80057c6 <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	8b1b      	ldrh	r3, [r3, #24]
 80057b8:	b29a      	uxth	r2, r3
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	f042 0208 	orr.w	r2, r2, #8
 80057c2:	b292      	uxth	r2, r2
 80057c4:	831a      	strh	r2, [r3, #24]
}
 80057c6:	bf00      	nop
 80057c8:	3758      	adds	r7, #88	; 0x58
 80057ca:	46bd      	mov	sp, r7
 80057cc:	bd80      	pop	{r7, pc}

080057ce <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80057ce:	b580      	push	{r7, lr}
 80057d0:	b096      	sub	sp, #88	; 0x58
 80057d2:	af00      	add	r7, sp, #0
 80057d4:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80057dc:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80057e4:	2b22      	cmp	r3, #34	; 0x22
 80057e6:	f040 8094 	bne.w	8005912 <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80057f0:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057f8:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 80057fa:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 80057fe:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8005802:	4013      	ands	r3, r2
 8005804:	b29a      	uxth	r2, r3
 8005806:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005808:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800580e:	1c9a      	adds	r2, r3, #2
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800581a:	b29b      	uxth	r3, r3
 800581c:	3b01      	subs	r3, #1
 800581e:	b29a      	uxth	r2, r3
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800582c:	b29b      	uxth	r3, r3
 800582e:	2b00      	cmp	r3, #0
 8005830:	d179      	bne.n	8005926 <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005838:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800583a:	e853 3f00 	ldrex	r3, [r3]
 800583e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005840:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005842:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005846:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	461a      	mov	r2, r3
 800584e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005850:	643b      	str	r3, [r7, #64]	; 0x40
 8005852:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005854:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005856:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005858:	e841 2300 	strex	r3, r2, [r1]
 800585c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800585e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005860:	2b00      	cmp	r3, #0
 8005862:	d1e6      	bne.n	8005832 <UART_RxISR_16BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	3308      	adds	r3, #8
 800586a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800586c:	6a3b      	ldr	r3, [r7, #32]
 800586e:	e853 3f00 	ldrex	r3, [r3]
 8005872:	61fb      	str	r3, [r7, #28]
   return(result);
 8005874:	69fb      	ldr	r3, [r7, #28]
 8005876:	f023 0301 	bic.w	r3, r3, #1
 800587a:	64bb      	str	r3, [r7, #72]	; 0x48
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	3308      	adds	r3, #8
 8005882:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005884:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005886:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005888:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800588a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800588c:	e841 2300 	strex	r3, r2, [r1]
 8005890:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005892:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005894:	2b00      	cmp	r3, #0
 8005896:	d1e5      	bne.n	8005864 <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	2220      	movs	r2, #32
 800589c:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	2200      	movs	r2, #0
 80058a2:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80058a8:	2b01      	cmp	r3, #1
 80058aa:	d12e      	bne.n	800590a <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	2200      	movs	r2, #0
 80058b0:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	e853 3f00 	ldrex	r3, [r3]
 80058be:	60bb      	str	r3, [r7, #8]
   return(result);
 80058c0:	68bb      	ldr	r3, [r7, #8]
 80058c2:	f023 0310 	bic.w	r3, r3, #16
 80058c6:	647b      	str	r3, [r7, #68]	; 0x44
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	461a      	mov	r2, r3
 80058ce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80058d0:	61bb      	str	r3, [r7, #24]
 80058d2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058d4:	6979      	ldr	r1, [r7, #20]
 80058d6:	69ba      	ldr	r2, [r7, #24]
 80058d8:	e841 2300 	strex	r3, r2, [r1]
 80058dc:	613b      	str	r3, [r7, #16]
   return(result);
 80058de:	693b      	ldr	r3, [r7, #16]
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d1e6      	bne.n	80058b2 <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	69db      	ldr	r3, [r3, #28]
 80058ea:	f003 0310 	and.w	r3, r3, #16
 80058ee:	2b10      	cmp	r3, #16
 80058f0:	d103      	bne.n	80058fa <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	2210      	movs	r2, #16
 80058f8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005900:	4619      	mov	r1, r3
 8005902:	6878      	ldr	r0, [r7, #4]
 8005904:	f7ff f95e 	bl	8004bc4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005908:	e00d      	b.n	8005926 <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 800590a:	6878      	ldr	r0, [r7, #4]
 800590c:	f7fb fd5a 	bl	80013c4 <HAL_UART_RxCpltCallback>
}
 8005910:	e009      	b.n	8005926 <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	8b1b      	ldrh	r3, [r3, #24]
 8005918:	b29a      	uxth	r2, r3
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	f042 0208 	orr.w	r2, r2, #8
 8005922:	b292      	uxth	r2, r2
 8005924:	831a      	strh	r2, [r3, #24]
}
 8005926:	bf00      	nop
 8005928:	3758      	adds	r7, #88	; 0x58
 800592a:	46bd      	mov	sp, r7
 800592c:	bd80      	pop	{r7, pc}

0800592e <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800592e:	b480      	push	{r7}
 8005930:	b083      	sub	sp, #12
 8005932:	af00      	add	r7, sp, #0
 8005934:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005936:	bf00      	nop
 8005938:	370c      	adds	r7, #12
 800593a:	46bd      	mov	sp, r7
 800593c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005940:	4770      	bx	lr
	...

08005944 <__NVIC_SetPriority>:
{
 8005944:	b480      	push	{r7}
 8005946:	b083      	sub	sp, #12
 8005948:	af00      	add	r7, sp, #0
 800594a:	4603      	mov	r3, r0
 800594c:	6039      	str	r1, [r7, #0]
 800594e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005950:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005954:	2b00      	cmp	r3, #0
 8005956:	db0a      	blt.n	800596e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005958:	683b      	ldr	r3, [r7, #0]
 800595a:	b2da      	uxtb	r2, r3
 800595c:	490c      	ldr	r1, [pc, #48]	; (8005990 <__NVIC_SetPriority+0x4c>)
 800595e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005962:	0112      	lsls	r2, r2, #4
 8005964:	b2d2      	uxtb	r2, r2
 8005966:	440b      	add	r3, r1
 8005968:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800596c:	e00a      	b.n	8005984 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800596e:	683b      	ldr	r3, [r7, #0]
 8005970:	b2da      	uxtb	r2, r3
 8005972:	4908      	ldr	r1, [pc, #32]	; (8005994 <__NVIC_SetPriority+0x50>)
 8005974:	79fb      	ldrb	r3, [r7, #7]
 8005976:	f003 030f 	and.w	r3, r3, #15
 800597a:	3b04      	subs	r3, #4
 800597c:	0112      	lsls	r2, r2, #4
 800597e:	b2d2      	uxtb	r2, r2
 8005980:	440b      	add	r3, r1
 8005982:	761a      	strb	r2, [r3, #24]
}
 8005984:	bf00      	nop
 8005986:	370c      	adds	r7, #12
 8005988:	46bd      	mov	sp, r7
 800598a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800598e:	4770      	bx	lr
 8005990:	e000e100 	.word	0xe000e100
 8005994:	e000ed00 	.word	0xe000ed00

08005998 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8005998:	b580      	push	{r7, lr}
 800599a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800599c:	4b05      	ldr	r3, [pc, #20]	; (80059b4 <SysTick_Handler+0x1c>)
 800599e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80059a0:	f001 fda0 	bl	80074e4 <xTaskGetSchedulerState>
 80059a4:	4603      	mov	r3, r0
 80059a6:	2b01      	cmp	r3, #1
 80059a8:	d001      	beq.n	80059ae <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80059aa:	f002 fc6d 	bl	8008288 <xPortSysTickHandler>
  }
}
 80059ae:	bf00      	nop
 80059b0:	bd80      	pop	{r7, pc}
 80059b2:	bf00      	nop
 80059b4:	e000e010 	.word	0xe000e010

080059b8 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80059b8:	b580      	push	{r7, lr}
 80059ba:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80059bc:	2100      	movs	r1, #0
 80059be:	f06f 0004 	mvn.w	r0, #4
 80059c2:	f7ff ffbf 	bl	8005944 <__NVIC_SetPriority>
#endif
}
 80059c6:	bf00      	nop
 80059c8:	bd80      	pop	{r7, pc}
	...

080059cc <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80059cc:	b480      	push	{r7}
 80059ce:	b083      	sub	sp, #12
 80059d0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80059d2:	f3ef 8305 	mrs	r3, IPSR
 80059d6:	603b      	str	r3, [r7, #0]
  return(result);
 80059d8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d003      	beq.n	80059e6 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80059de:	f06f 0305 	mvn.w	r3, #5
 80059e2:	607b      	str	r3, [r7, #4]
 80059e4:	e00c      	b.n	8005a00 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80059e6:	4b0a      	ldr	r3, [pc, #40]	; (8005a10 <osKernelInitialize+0x44>)
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d105      	bne.n	80059fa <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80059ee:	4b08      	ldr	r3, [pc, #32]	; (8005a10 <osKernelInitialize+0x44>)
 80059f0:	2201      	movs	r2, #1
 80059f2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80059f4:	2300      	movs	r3, #0
 80059f6:	607b      	str	r3, [r7, #4]
 80059f8:	e002      	b.n	8005a00 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80059fa:	f04f 33ff 	mov.w	r3, #4294967295
 80059fe:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005a00:	687b      	ldr	r3, [r7, #4]
}
 8005a02:	4618      	mov	r0, r3
 8005a04:	370c      	adds	r7, #12
 8005a06:	46bd      	mov	sp, r7
 8005a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a0c:	4770      	bx	lr
 8005a0e:	bf00      	nop
 8005a10:	200002a0 	.word	0x200002a0

08005a14 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8005a14:	b580      	push	{r7, lr}
 8005a16:	b082      	sub	sp, #8
 8005a18:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005a1a:	f3ef 8305 	mrs	r3, IPSR
 8005a1e:	603b      	str	r3, [r7, #0]
  return(result);
 8005a20:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d003      	beq.n	8005a2e <osKernelStart+0x1a>
    stat = osErrorISR;
 8005a26:	f06f 0305 	mvn.w	r3, #5
 8005a2a:	607b      	str	r3, [r7, #4]
 8005a2c:	e010      	b.n	8005a50 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8005a2e:	4b0b      	ldr	r3, [pc, #44]	; (8005a5c <osKernelStart+0x48>)
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	2b01      	cmp	r3, #1
 8005a34:	d109      	bne.n	8005a4a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8005a36:	f7ff ffbf 	bl	80059b8 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8005a3a:	4b08      	ldr	r3, [pc, #32]	; (8005a5c <osKernelStart+0x48>)
 8005a3c:	2202      	movs	r2, #2
 8005a3e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8005a40:	f001 f8f4 	bl	8006c2c <vTaskStartScheduler>
      stat = osOK;
 8005a44:	2300      	movs	r3, #0
 8005a46:	607b      	str	r3, [r7, #4]
 8005a48:	e002      	b.n	8005a50 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8005a4a:	f04f 33ff 	mov.w	r3, #4294967295
 8005a4e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005a50:	687b      	ldr	r3, [r7, #4]
}
 8005a52:	4618      	mov	r0, r3
 8005a54:	3708      	adds	r7, #8
 8005a56:	46bd      	mov	sp, r7
 8005a58:	bd80      	pop	{r7, pc}
 8005a5a:	bf00      	nop
 8005a5c:	200002a0 	.word	0x200002a0

08005a60 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8005a60:	b580      	push	{r7, lr}
 8005a62:	b08e      	sub	sp, #56	; 0x38
 8005a64:	af04      	add	r7, sp, #16
 8005a66:	60f8      	str	r0, [r7, #12]
 8005a68:	60b9      	str	r1, [r7, #8]
 8005a6a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8005a6c:	2300      	movs	r3, #0
 8005a6e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005a70:	f3ef 8305 	mrs	r3, IPSR
 8005a74:	617b      	str	r3, [r7, #20]
  return(result);
 8005a76:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d17e      	bne.n	8005b7a <osThreadNew+0x11a>
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d07b      	beq.n	8005b7a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8005a82:	2380      	movs	r3, #128	; 0x80
 8005a84:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8005a86:	2318      	movs	r3, #24
 8005a88:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8005a8a:	2300      	movs	r3, #0
 8005a8c:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8005a8e:	f04f 33ff 	mov.w	r3, #4294967295
 8005a92:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d045      	beq.n	8005b26 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d002      	beq.n	8005aa8 <osThreadNew+0x48>
        name = attr->name;
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	699b      	ldr	r3, [r3, #24]
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d002      	beq.n	8005ab6 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	699b      	ldr	r3, [r3, #24]
 8005ab4:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8005ab6:	69fb      	ldr	r3, [r7, #28]
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d008      	beq.n	8005ace <osThreadNew+0x6e>
 8005abc:	69fb      	ldr	r3, [r7, #28]
 8005abe:	2b38      	cmp	r3, #56	; 0x38
 8005ac0:	d805      	bhi.n	8005ace <osThreadNew+0x6e>
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	685b      	ldr	r3, [r3, #4]
 8005ac6:	f003 0301 	and.w	r3, r3, #1
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d001      	beq.n	8005ad2 <osThreadNew+0x72>
        return (NULL);
 8005ace:	2300      	movs	r3, #0
 8005ad0:	e054      	b.n	8005b7c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	695b      	ldr	r3, [r3, #20]
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d003      	beq.n	8005ae2 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	695b      	ldr	r3, [r3, #20]
 8005ade:	089b      	lsrs	r3, r3, #2
 8005ae0:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	689b      	ldr	r3, [r3, #8]
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d00e      	beq.n	8005b08 <osThreadNew+0xa8>
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	68db      	ldr	r3, [r3, #12]
 8005aee:	2bbb      	cmp	r3, #187	; 0xbb
 8005af0:	d90a      	bls.n	8005b08 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d006      	beq.n	8005b08 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	695b      	ldr	r3, [r3, #20]
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d002      	beq.n	8005b08 <osThreadNew+0xa8>
        mem = 1;
 8005b02:	2301      	movs	r3, #1
 8005b04:	61bb      	str	r3, [r7, #24]
 8005b06:	e010      	b.n	8005b2a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	689b      	ldr	r3, [r3, #8]
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d10c      	bne.n	8005b2a <osThreadNew+0xca>
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	68db      	ldr	r3, [r3, #12]
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d108      	bne.n	8005b2a <osThreadNew+0xca>
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	691b      	ldr	r3, [r3, #16]
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d104      	bne.n	8005b2a <osThreadNew+0xca>
          mem = 0;
 8005b20:	2300      	movs	r3, #0
 8005b22:	61bb      	str	r3, [r7, #24]
 8005b24:	e001      	b.n	8005b2a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8005b26:	2300      	movs	r3, #0
 8005b28:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8005b2a:	69bb      	ldr	r3, [r7, #24]
 8005b2c:	2b01      	cmp	r3, #1
 8005b2e:	d110      	bne.n	8005b52 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8005b34:	687a      	ldr	r2, [r7, #4]
 8005b36:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005b38:	9202      	str	r2, [sp, #8]
 8005b3a:	9301      	str	r3, [sp, #4]
 8005b3c:	69fb      	ldr	r3, [r7, #28]
 8005b3e:	9300      	str	r3, [sp, #0]
 8005b40:	68bb      	ldr	r3, [r7, #8]
 8005b42:	6a3a      	ldr	r2, [r7, #32]
 8005b44:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005b46:	68f8      	ldr	r0, [r7, #12]
 8005b48:	f000 fe12 	bl	8006770 <xTaskCreateStatic>
 8005b4c:	4603      	mov	r3, r0
 8005b4e:	613b      	str	r3, [r7, #16]
 8005b50:	e013      	b.n	8005b7a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8005b52:	69bb      	ldr	r3, [r7, #24]
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d110      	bne.n	8005b7a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8005b58:	6a3b      	ldr	r3, [r7, #32]
 8005b5a:	b29a      	uxth	r2, r3
 8005b5c:	f107 0310 	add.w	r3, r7, #16
 8005b60:	9301      	str	r3, [sp, #4]
 8005b62:	69fb      	ldr	r3, [r7, #28]
 8005b64:	9300      	str	r3, [sp, #0]
 8005b66:	68bb      	ldr	r3, [r7, #8]
 8005b68:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005b6a:	68f8      	ldr	r0, [r7, #12]
 8005b6c:	f000 fe5d 	bl	800682a <xTaskCreate>
 8005b70:	4603      	mov	r3, r0
 8005b72:	2b01      	cmp	r3, #1
 8005b74:	d001      	beq.n	8005b7a <osThreadNew+0x11a>
            hTask = NULL;
 8005b76:	2300      	movs	r3, #0
 8005b78:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8005b7a:	693b      	ldr	r3, [r7, #16]
}
 8005b7c:	4618      	mov	r0, r3
 8005b7e:	3728      	adds	r7, #40	; 0x28
 8005b80:	46bd      	mov	sp, r7
 8005b82:	bd80      	pop	{r7, pc}

08005b84 <osThreadExit>:

  return (stat);
}
#endif /* (configUSE_OS2_THREAD_SUSPEND_RESUME == 1) */

__NO_RETURN void osThreadExit (void) {
 8005b84:	b580      	push	{r7, lr}
 8005b86:	af00      	add	r7, sp, #0
#ifndef USE_FreeRTOS_HEAP_1
  vTaskDelete (NULL);
 8005b88:	2000      	movs	r0, #0
 8005b8a:	f000 ffa9 	bl	8006ae0 <vTaskDelete>
#endif
  for (;;);
 8005b8e:	e7fe      	b.n	8005b8e <osThreadExit+0xa>

08005b90 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8005b90:	b580      	push	{r7, lr}
 8005b92:	b084      	sub	sp, #16
 8005b94:	af00      	add	r7, sp, #0
 8005b96:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005b98:	f3ef 8305 	mrs	r3, IPSR
 8005b9c:	60bb      	str	r3, [r7, #8]
  return(result);
 8005b9e:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d003      	beq.n	8005bac <osDelay+0x1c>
    stat = osErrorISR;
 8005ba4:	f06f 0305 	mvn.w	r3, #5
 8005ba8:	60fb      	str	r3, [r7, #12]
 8005baa:	e007      	b.n	8005bbc <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8005bac:	2300      	movs	r3, #0
 8005bae:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d002      	beq.n	8005bbc <osDelay+0x2c>
      vTaskDelay(ticks);
 8005bb6:	6878      	ldr	r0, [r7, #4]
 8005bb8:	f001 f804 	bl	8006bc4 <vTaskDelay>
    }
  }

  return (stat);
 8005bbc:	68fb      	ldr	r3, [r7, #12]
}
 8005bbe:	4618      	mov	r0, r3
 8005bc0:	3710      	adds	r7, #16
 8005bc2:	46bd      	mov	sp, r7
 8005bc4:	bd80      	pop	{r7, pc}
	...

08005bc8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8005bc8:	b480      	push	{r7}
 8005bca:	b085      	sub	sp, #20
 8005bcc:	af00      	add	r7, sp, #0
 8005bce:	60f8      	str	r0, [r7, #12]
 8005bd0:	60b9      	str	r1, [r7, #8]
 8005bd2:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	4a07      	ldr	r2, [pc, #28]	; (8005bf4 <vApplicationGetIdleTaskMemory+0x2c>)
 8005bd8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8005bda:	68bb      	ldr	r3, [r7, #8]
 8005bdc:	4a06      	ldr	r2, [pc, #24]	; (8005bf8 <vApplicationGetIdleTaskMemory+0x30>)
 8005bde:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	2280      	movs	r2, #128	; 0x80
 8005be4:	601a      	str	r2, [r3, #0]
}
 8005be6:	bf00      	nop
 8005be8:	3714      	adds	r7, #20
 8005bea:	46bd      	mov	sp, r7
 8005bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf0:	4770      	bx	lr
 8005bf2:	bf00      	nop
 8005bf4:	200002a4 	.word	0x200002a4
 8005bf8:	20000360 	.word	0x20000360

08005bfc <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8005bfc:	b480      	push	{r7}
 8005bfe:	b085      	sub	sp, #20
 8005c00:	af00      	add	r7, sp, #0
 8005c02:	60f8      	str	r0, [r7, #12]
 8005c04:	60b9      	str	r1, [r7, #8]
 8005c06:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	4a07      	ldr	r2, [pc, #28]	; (8005c28 <vApplicationGetTimerTaskMemory+0x2c>)
 8005c0c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8005c0e:	68bb      	ldr	r3, [r7, #8]
 8005c10:	4a06      	ldr	r2, [pc, #24]	; (8005c2c <vApplicationGetTimerTaskMemory+0x30>)
 8005c12:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005c1a:	601a      	str	r2, [r3, #0]
}
 8005c1c:	bf00      	nop
 8005c1e:	3714      	adds	r7, #20
 8005c20:	46bd      	mov	sp, r7
 8005c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c26:	4770      	bx	lr
 8005c28:	20000560 	.word	0x20000560
 8005c2c:	2000061c 	.word	0x2000061c

08005c30 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005c30:	b480      	push	{r7}
 8005c32:	b083      	sub	sp, #12
 8005c34:	af00      	add	r7, sp, #0
 8005c36:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	f103 0208 	add.w	r2, r3, #8
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	f04f 32ff 	mov.w	r2, #4294967295
 8005c48:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	f103 0208 	add.w	r2, r3, #8
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	f103 0208 	add.w	r2, r3, #8
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	2200      	movs	r2, #0
 8005c62:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005c64:	bf00      	nop
 8005c66:	370c      	adds	r7, #12
 8005c68:	46bd      	mov	sp, r7
 8005c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c6e:	4770      	bx	lr

08005c70 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005c70:	b480      	push	{r7}
 8005c72:	b083      	sub	sp, #12
 8005c74:	af00      	add	r7, sp, #0
 8005c76:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	2200      	movs	r2, #0
 8005c7c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005c7e:	bf00      	nop
 8005c80:	370c      	adds	r7, #12
 8005c82:	46bd      	mov	sp, r7
 8005c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c88:	4770      	bx	lr

08005c8a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005c8a:	b480      	push	{r7}
 8005c8c:	b085      	sub	sp, #20
 8005c8e:	af00      	add	r7, sp, #0
 8005c90:	6078      	str	r0, [r7, #4]
 8005c92:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	685b      	ldr	r3, [r3, #4]
 8005c98:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005c9a:	683b      	ldr	r3, [r7, #0]
 8005c9c:	68fa      	ldr	r2, [r7, #12]
 8005c9e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	689a      	ldr	r2, [r3, #8]
 8005ca4:	683b      	ldr	r3, [r7, #0]
 8005ca6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	689b      	ldr	r3, [r3, #8]
 8005cac:	683a      	ldr	r2, [r7, #0]
 8005cae:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	683a      	ldr	r2, [r7, #0]
 8005cb4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005cb6:	683b      	ldr	r3, [r7, #0]
 8005cb8:	687a      	ldr	r2, [r7, #4]
 8005cba:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	1c5a      	adds	r2, r3, #1
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	601a      	str	r2, [r3, #0]
}
 8005cc6:	bf00      	nop
 8005cc8:	3714      	adds	r7, #20
 8005cca:	46bd      	mov	sp, r7
 8005ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd0:	4770      	bx	lr

08005cd2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005cd2:	b480      	push	{r7}
 8005cd4:	b085      	sub	sp, #20
 8005cd6:	af00      	add	r7, sp, #0
 8005cd8:	6078      	str	r0, [r7, #4]
 8005cda:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005cdc:	683b      	ldr	r3, [r7, #0]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005ce2:	68bb      	ldr	r3, [r7, #8]
 8005ce4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ce8:	d103      	bne.n	8005cf2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	691b      	ldr	r3, [r3, #16]
 8005cee:	60fb      	str	r3, [r7, #12]
 8005cf0:	e00c      	b.n	8005d0c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	3308      	adds	r3, #8
 8005cf6:	60fb      	str	r3, [r7, #12]
 8005cf8:	e002      	b.n	8005d00 <vListInsert+0x2e>
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	685b      	ldr	r3, [r3, #4]
 8005cfe:	60fb      	str	r3, [r7, #12]
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	685b      	ldr	r3, [r3, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	68ba      	ldr	r2, [r7, #8]
 8005d08:	429a      	cmp	r2, r3
 8005d0a:	d2f6      	bcs.n	8005cfa <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	685a      	ldr	r2, [r3, #4]
 8005d10:	683b      	ldr	r3, [r7, #0]
 8005d12:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005d14:	683b      	ldr	r3, [r7, #0]
 8005d16:	685b      	ldr	r3, [r3, #4]
 8005d18:	683a      	ldr	r2, [r7, #0]
 8005d1a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005d1c:	683b      	ldr	r3, [r7, #0]
 8005d1e:	68fa      	ldr	r2, [r7, #12]
 8005d20:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	683a      	ldr	r2, [r7, #0]
 8005d26:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005d28:	683b      	ldr	r3, [r7, #0]
 8005d2a:	687a      	ldr	r2, [r7, #4]
 8005d2c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	1c5a      	adds	r2, r3, #1
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	601a      	str	r2, [r3, #0]
}
 8005d38:	bf00      	nop
 8005d3a:	3714      	adds	r7, #20
 8005d3c:	46bd      	mov	sp, r7
 8005d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d42:	4770      	bx	lr

08005d44 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005d44:	b480      	push	{r7}
 8005d46:	b085      	sub	sp, #20
 8005d48:	af00      	add	r7, sp, #0
 8005d4a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	691b      	ldr	r3, [r3, #16]
 8005d50:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	685b      	ldr	r3, [r3, #4]
 8005d56:	687a      	ldr	r2, [r7, #4]
 8005d58:	6892      	ldr	r2, [r2, #8]
 8005d5a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	689b      	ldr	r3, [r3, #8]
 8005d60:	687a      	ldr	r2, [r7, #4]
 8005d62:	6852      	ldr	r2, [r2, #4]
 8005d64:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	685b      	ldr	r3, [r3, #4]
 8005d6a:	687a      	ldr	r2, [r7, #4]
 8005d6c:	429a      	cmp	r2, r3
 8005d6e:	d103      	bne.n	8005d78 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	689a      	ldr	r2, [r3, #8]
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	2200      	movs	r2, #0
 8005d7c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	1e5a      	subs	r2, r3, #1
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	681b      	ldr	r3, [r3, #0]
}
 8005d8c:	4618      	mov	r0, r3
 8005d8e:	3714      	adds	r7, #20
 8005d90:	46bd      	mov	sp, r7
 8005d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d96:	4770      	bx	lr

08005d98 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005d98:	b580      	push	{r7, lr}
 8005d9a:	b084      	sub	sp, #16
 8005d9c:	af00      	add	r7, sp, #0
 8005d9e:	6078      	str	r0, [r7, #4]
 8005da0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d10a      	bne.n	8005dc2 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005dac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005db0:	f383 8811 	msr	BASEPRI, r3
 8005db4:	f3bf 8f6f 	isb	sy
 8005db8:	f3bf 8f4f 	dsb	sy
 8005dbc:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005dbe:	bf00      	nop
 8005dc0:	e7fe      	b.n	8005dc0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8005dc2:	f002 f9cf 	bl	8008164 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	681a      	ldr	r2, [r3, #0]
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005dce:	68f9      	ldr	r1, [r7, #12]
 8005dd0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005dd2:	fb01 f303 	mul.w	r3, r1, r3
 8005dd6:	441a      	add	r2, r3
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	2200      	movs	r2, #0
 8005de0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	681a      	ldr	r2, [r3, #0]
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	681a      	ldr	r2, [r3, #0]
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005df2:	3b01      	subs	r3, #1
 8005df4:	68f9      	ldr	r1, [r7, #12]
 8005df6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005df8:	fb01 f303 	mul.w	r3, r1, r3
 8005dfc:	441a      	add	r2, r3
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	22ff      	movs	r2, #255	; 0xff
 8005e06:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	22ff      	movs	r2, #255	; 0xff
 8005e0e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8005e12:	683b      	ldr	r3, [r7, #0]
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d114      	bne.n	8005e42 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	691b      	ldr	r3, [r3, #16]
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d01a      	beq.n	8005e56 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	3310      	adds	r3, #16
 8005e24:	4618      	mov	r0, r3
 8005e26:	f001 f99b 	bl	8007160 <xTaskRemoveFromEventList>
 8005e2a:	4603      	mov	r3, r0
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d012      	beq.n	8005e56 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005e30:	4b0c      	ldr	r3, [pc, #48]	; (8005e64 <xQueueGenericReset+0xcc>)
 8005e32:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005e36:	601a      	str	r2, [r3, #0]
 8005e38:	f3bf 8f4f 	dsb	sy
 8005e3c:	f3bf 8f6f 	isb	sy
 8005e40:	e009      	b.n	8005e56 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	3310      	adds	r3, #16
 8005e46:	4618      	mov	r0, r3
 8005e48:	f7ff fef2 	bl	8005c30 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	3324      	adds	r3, #36	; 0x24
 8005e50:	4618      	mov	r0, r3
 8005e52:	f7ff feed 	bl	8005c30 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005e56:	f002 f9b5 	bl	80081c4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005e5a:	2301      	movs	r3, #1
}
 8005e5c:	4618      	mov	r0, r3
 8005e5e:	3710      	adds	r7, #16
 8005e60:	46bd      	mov	sp, r7
 8005e62:	bd80      	pop	{r7, pc}
 8005e64:	e000ed04 	.word	0xe000ed04

08005e68 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005e68:	b580      	push	{r7, lr}
 8005e6a:	b08e      	sub	sp, #56	; 0x38
 8005e6c:	af02      	add	r7, sp, #8
 8005e6e:	60f8      	str	r0, [r7, #12]
 8005e70:	60b9      	str	r1, [r7, #8]
 8005e72:	607a      	str	r2, [r7, #4]
 8005e74:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d10a      	bne.n	8005e92 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8005e7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e80:	f383 8811 	msr	BASEPRI, r3
 8005e84:	f3bf 8f6f 	isb	sy
 8005e88:	f3bf 8f4f 	dsb	sy
 8005e8c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005e8e:	bf00      	nop
 8005e90:	e7fe      	b.n	8005e90 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005e92:	683b      	ldr	r3, [r7, #0]
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d10a      	bne.n	8005eae <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8005e98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e9c:	f383 8811 	msr	BASEPRI, r3
 8005ea0:	f3bf 8f6f 	isb	sy
 8005ea4:	f3bf 8f4f 	dsb	sy
 8005ea8:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005eaa:	bf00      	nop
 8005eac:	e7fe      	b.n	8005eac <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d002      	beq.n	8005eba <xQueueGenericCreateStatic+0x52>
 8005eb4:	68bb      	ldr	r3, [r7, #8]
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d001      	beq.n	8005ebe <xQueueGenericCreateStatic+0x56>
 8005eba:	2301      	movs	r3, #1
 8005ebc:	e000      	b.n	8005ec0 <xQueueGenericCreateStatic+0x58>
 8005ebe:	2300      	movs	r3, #0
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d10a      	bne.n	8005eda <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8005ec4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ec8:	f383 8811 	msr	BASEPRI, r3
 8005ecc:	f3bf 8f6f 	isb	sy
 8005ed0:	f3bf 8f4f 	dsb	sy
 8005ed4:	623b      	str	r3, [r7, #32]
}
 8005ed6:	bf00      	nop
 8005ed8:	e7fe      	b.n	8005ed8 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d102      	bne.n	8005ee6 <xQueueGenericCreateStatic+0x7e>
 8005ee0:	68bb      	ldr	r3, [r7, #8]
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d101      	bne.n	8005eea <xQueueGenericCreateStatic+0x82>
 8005ee6:	2301      	movs	r3, #1
 8005ee8:	e000      	b.n	8005eec <xQueueGenericCreateStatic+0x84>
 8005eea:	2300      	movs	r3, #0
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d10a      	bne.n	8005f06 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8005ef0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ef4:	f383 8811 	msr	BASEPRI, r3
 8005ef8:	f3bf 8f6f 	isb	sy
 8005efc:	f3bf 8f4f 	dsb	sy
 8005f00:	61fb      	str	r3, [r7, #28]
}
 8005f02:	bf00      	nop
 8005f04:	e7fe      	b.n	8005f04 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8005f06:	2350      	movs	r3, #80	; 0x50
 8005f08:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8005f0a:	697b      	ldr	r3, [r7, #20]
 8005f0c:	2b50      	cmp	r3, #80	; 0x50
 8005f0e:	d00a      	beq.n	8005f26 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8005f10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f14:	f383 8811 	msr	BASEPRI, r3
 8005f18:	f3bf 8f6f 	isb	sy
 8005f1c:	f3bf 8f4f 	dsb	sy
 8005f20:	61bb      	str	r3, [r7, #24]
}
 8005f22:	bf00      	nop
 8005f24:	e7fe      	b.n	8005f24 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8005f26:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005f28:	683b      	ldr	r3, [r7, #0]
 8005f2a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8005f2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d00d      	beq.n	8005f4e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005f32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f34:	2201      	movs	r2, #1
 8005f36:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005f3a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8005f3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f40:	9300      	str	r3, [sp, #0]
 8005f42:	4613      	mov	r3, r2
 8005f44:	687a      	ldr	r2, [r7, #4]
 8005f46:	68b9      	ldr	r1, [r7, #8]
 8005f48:	68f8      	ldr	r0, [r7, #12]
 8005f4a:	f000 f805 	bl	8005f58 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005f4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8005f50:	4618      	mov	r0, r3
 8005f52:	3730      	adds	r7, #48	; 0x30
 8005f54:	46bd      	mov	sp, r7
 8005f56:	bd80      	pop	{r7, pc}

08005f58 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005f58:	b580      	push	{r7, lr}
 8005f5a:	b084      	sub	sp, #16
 8005f5c:	af00      	add	r7, sp, #0
 8005f5e:	60f8      	str	r0, [r7, #12]
 8005f60:	60b9      	str	r1, [r7, #8]
 8005f62:	607a      	str	r2, [r7, #4]
 8005f64:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005f66:	68bb      	ldr	r3, [r7, #8]
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d103      	bne.n	8005f74 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005f6c:	69bb      	ldr	r3, [r7, #24]
 8005f6e:	69ba      	ldr	r2, [r7, #24]
 8005f70:	601a      	str	r2, [r3, #0]
 8005f72:	e002      	b.n	8005f7a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005f74:	69bb      	ldr	r3, [r7, #24]
 8005f76:	687a      	ldr	r2, [r7, #4]
 8005f78:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005f7a:	69bb      	ldr	r3, [r7, #24]
 8005f7c:	68fa      	ldr	r2, [r7, #12]
 8005f7e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005f80:	69bb      	ldr	r3, [r7, #24]
 8005f82:	68ba      	ldr	r2, [r7, #8]
 8005f84:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005f86:	2101      	movs	r1, #1
 8005f88:	69b8      	ldr	r0, [r7, #24]
 8005f8a:	f7ff ff05 	bl	8005d98 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8005f8e:	69bb      	ldr	r3, [r7, #24]
 8005f90:	78fa      	ldrb	r2, [r7, #3]
 8005f92:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005f96:	bf00      	nop
 8005f98:	3710      	adds	r7, #16
 8005f9a:	46bd      	mov	sp, r7
 8005f9c:	bd80      	pop	{r7, pc}
	...

08005fa0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005fa0:	b580      	push	{r7, lr}
 8005fa2:	b08e      	sub	sp, #56	; 0x38
 8005fa4:	af00      	add	r7, sp, #0
 8005fa6:	60f8      	str	r0, [r7, #12]
 8005fa8:	60b9      	str	r1, [r7, #8]
 8005faa:	607a      	str	r2, [r7, #4]
 8005fac:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005fae:	2300      	movs	r3, #0
 8005fb0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005fb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d10a      	bne.n	8005fd2 <xQueueGenericSend+0x32>
	__asm volatile
 8005fbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fc0:	f383 8811 	msr	BASEPRI, r3
 8005fc4:	f3bf 8f6f 	isb	sy
 8005fc8:	f3bf 8f4f 	dsb	sy
 8005fcc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005fce:	bf00      	nop
 8005fd0:	e7fe      	b.n	8005fd0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005fd2:	68bb      	ldr	r3, [r7, #8]
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d103      	bne.n	8005fe0 <xQueueGenericSend+0x40>
 8005fd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d101      	bne.n	8005fe4 <xQueueGenericSend+0x44>
 8005fe0:	2301      	movs	r3, #1
 8005fe2:	e000      	b.n	8005fe6 <xQueueGenericSend+0x46>
 8005fe4:	2300      	movs	r3, #0
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d10a      	bne.n	8006000 <xQueueGenericSend+0x60>
	__asm volatile
 8005fea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fee:	f383 8811 	msr	BASEPRI, r3
 8005ff2:	f3bf 8f6f 	isb	sy
 8005ff6:	f3bf 8f4f 	dsb	sy
 8005ffa:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005ffc:	bf00      	nop
 8005ffe:	e7fe      	b.n	8005ffe <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006000:	683b      	ldr	r3, [r7, #0]
 8006002:	2b02      	cmp	r3, #2
 8006004:	d103      	bne.n	800600e <xQueueGenericSend+0x6e>
 8006006:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006008:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800600a:	2b01      	cmp	r3, #1
 800600c:	d101      	bne.n	8006012 <xQueueGenericSend+0x72>
 800600e:	2301      	movs	r3, #1
 8006010:	e000      	b.n	8006014 <xQueueGenericSend+0x74>
 8006012:	2300      	movs	r3, #0
 8006014:	2b00      	cmp	r3, #0
 8006016:	d10a      	bne.n	800602e <xQueueGenericSend+0x8e>
	__asm volatile
 8006018:	f04f 0350 	mov.w	r3, #80	; 0x50
 800601c:	f383 8811 	msr	BASEPRI, r3
 8006020:	f3bf 8f6f 	isb	sy
 8006024:	f3bf 8f4f 	dsb	sy
 8006028:	623b      	str	r3, [r7, #32]
}
 800602a:	bf00      	nop
 800602c:	e7fe      	b.n	800602c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800602e:	f001 fa59 	bl	80074e4 <xTaskGetSchedulerState>
 8006032:	4603      	mov	r3, r0
 8006034:	2b00      	cmp	r3, #0
 8006036:	d102      	bne.n	800603e <xQueueGenericSend+0x9e>
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	2b00      	cmp	r3, #0
 800603c:	d101      	bne.n	8006042 <xQueueGenericSend+0xa2>
 800603e:	2301      	movs	r3, #1
 8006040:	e000      	b.n	8006044 <xQueueGenericSend+0xa4>
 8006042:	2300      	movs	r3, #0
 8006044:	2b00      	cmp	r3, #0
 8006046:	d10a      	bne.n	800605e <xQueueGenericSend+0xbe>
	__asm volatile
 8006048:	f04f 0350 	mov.w	r3, #80	; 0x50
 800604c:	f383 8811 	msr	BASEPRI, r3
 8006050:	f3bf 8f6f 	isb	sy
 8006054:	f3bf 8f4f 	dsb	sy
 8006058:	61fb      	str	r3, [r7, #28]
}
 800605a:	bf00      	nop
 800605c:	e7fe      	b.n	800605c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800605e:	f002 f881 	bl	8008164 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006062:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006064:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006066:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006068:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800606a:	429a      	cmp	r2, r3
 800606c:	d302      	bcc.n	8006074 <xQueueGenericSend+0xd4>
 800606e:	683b      	ldr	r3, [r7, #0]
 8006070:	2b02      	cmp	r3, #2
 8006072:	d129      	bne.n	80060c8 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006074:	683a      	ldr	r2, [r7, #0]
 8006076:	68b9      	ldr	r1, [r7, #8]
 8006078:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800607a:	f000 fa0b 	bl	8006494 <prvCopyDataToQueue>
 800607e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006080:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006082:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006084:	2b00      	cmp	r3, #0
 8006086:	d010      	beq.n	80060aa <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006088:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800608a:	3324      	adds	r3, #36	; 0x24
 800608c:	4618      	mov	r0, r3
 800608e:	f001 f867 	bl	8007160 <xTaskRemoveFromEventList>
 8006092:	4603      	mov	r3, r0
 8006094:	2b00      	cmp	r3, #0
 8006096:	d013      	beq.n	80060c0 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006098:	4b3f      	ldr	r3, [pc, #252]	; (8006198 <xQueueGenericSend+0x1f8>)
 800609a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800609e:	601a      	str	r2, [r3, #0]
 80060a0:	f3bf 8f4f 	dsb	sy
 80060a4:	f3bf 8f6f 	isb	sy
 80060a8:	e00a      	b.n	80060c0 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80060aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d007      	beq.n	80060c0 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80060b0:	4b39      	ldr	r3, [pc, #228]	; (8006198 <xQueueGenericSend+0x1f8>)
 80060b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80060b6:	601a      	str	r2, [r3, #0]
 80060b8:	f3bf 8f4f 	dsb	sy
 80060bc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80060c0:	f002 f880 	bl	80081c4 <vPortExitCritical>
				return pdPASS;
 80060c4:	2301      	movs	r3, #1
 80060c6:	e063      	b.n	8006190 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d103      	bne.n	80060d6 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80060ce:	f002 f879 	bl	80081c4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80060d2:	2300      	movs	r3, #0
 80060d4:	e05c      	b.n	8006190 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80060d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d106      	bne.n	80060ea <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80060dc:	f107 0314 	add.w	r3, r7, #20
 80060e0:	4618      	mov	r0, r3
 80060e2:	f001 f8a1 	bl	8007228 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80060e6:	2301      	movs	r3, #1
 80060e8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80060ea:	f002 f86b 	bl	80081c4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80060ee:	f000 fe0d 	bl	8006d0c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80060f2:	f002 f837 	bl	8008164 <vPortEnterCritical>
 80060f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060f8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80060fc:	b25b      	sxtb	r3, r3
 80060fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006102:	d103      	bne.n	800610c <xQueueGenericSend+0x16c>
 8006104:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006106:	2200      	movs	r2, #0
 8006108:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800610c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800610e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006112:	b25b      	sxtb	r3, r3
 8006114:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006118:	d103      	bne.n	8006122 <xQueueGenericSend+0x182>
 800611a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800611c:	2200      	movs	r2, #0
 800611e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006122:	f002 f84f 	bl	80081c4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006126:	1d3a      	adds	r2, r7, #4
 8006128:	f107 0314 	add.w	r3, r7, #20
 800612c:	4611      	mov	r1, r2
 800612e:	4618      	mov	r0, r3
 8006130:	f001 f890 	bl	8007254 <xTaskCheckForTimeOut>
 8006134:	4603      	mov	r3, r0
 8006136:	2b00      	cmp	r3, #0
 8006138:	d124      	bne.n	8006184 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800613a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800613c:	f000 faa2 	bl	8006684 <prvIsQueueFull>
 8006140:	4603      	mov	r3, r0
 8006142:	2b00      	cmp	r3, #0
 8006144:	d018      	beq.n	8006178 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006146:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006148:	3310      	adds	r3, #16
 800614a:	687a      	ldr	r2, [r7, #4]
 800614c:	4611      	mov	r1, r2
 800614e:	4618      	mov	r0, r3
 8006150:	f000 ffb6 	bl	80070c0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006154:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006156:	f000 fa2d 	bl	80065b4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800615a:	f000 fde5 	bl	8006d28 <xTaskResumeAll>
 800615e:	4603      	mov	r3, r0
 8006160:	2b00      	cmp	r3, #0
 8006162:	f47f af7c 	bne.w	800605e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8006166:	4b0c      	ldr	r3, [pc, #48]	; (8006198 <xQueueGenericSend+0x1f8>)
 8006168:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800616c:	601a      	str	r2, [r3, #0]
 800616e:	f3bf 8f4f 	dsb	sy
 8006172:	f3bf 8f6f 	isb	sy
 8006176:	e772      	b.n	800605e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006178:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800617a:	f000 fa1b 	bl	80065b4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800617e:	f000 fdd3 	bl	8006d28 <xTaskResumeAll>
 8006182:	e76c      	b.n	800605e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006184:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006186:	f000 fa15 	bl	80065b4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800618a:	f000 fdcd 	bl	8006d28 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800618e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8006190:	4618      	mov	r0, r3
 8006192:	3738      	adds	r7, #56	; 0x38
 8006194:	46bd      	mov	sp, r7
 8006196:	bd80      	pop	{r7, pc}
 8006198:	e000ed04 	.word	0xe000ed04

0800619c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800619c:	b580      	push	{r7, lr}
 800619e:	b090      	sub	sp, #64	; 0x40
 80061a0:	af00      	add	r7, sp, #0
 80061a2:	60f8      	str	r0, [r7, #12]
 80061a4:	60b9      	str	r1, [r7, #8]
 80061a6:	607a      	str	r2, [r7, #4]
 80061a8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80061ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d10a      	bne.n	80061ca <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80061b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061b8:	f383 8811 	msr	BASEPRI, r3
 80061bc:	f3bf 8f6f 	isb	sy
 80061c0:	f3bf 8f4f 	dsb	sy
 80061c4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80061c6:	bf00      	nop
 80061c8:	e7fe      	b.n	80061c8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80061ca:	68bb      	ldr	r3, [r7, #8]
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d103      	bne.n	80061d8 <xQueueGenericSendFromISR+0x3c>
 80061d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d101      	bne.n	80061dc <xQueueGenericSendFromISR+0x40>
 80061d8:	2301      	movs	r3, #1
 80061da:	e000      	b.n	80061de <xQueueGenericSendFromISR+0x42>
 80061dc:	2300      	movs	r3, #0
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d10a      	bne.n	80061f8 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80061e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061e6:	f383 8811 	msr	BASEPRI, r3
 80061ea:	f3bf 8f6f 	isb	sy
 80061ee:	f3bf 8f4f 	dsb	sy
 80061f2:	627b      	str	r3, [r7, #36]	; 0x24
}
 80061f4:	bf00      	nop
 80061f6:	e7fe      	b.n	80061f6 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80061f8:	683b      	ldr	r3, [r7, #0]
 80061fa:	2b02      	cmp	r3, #2
 80061fc:	d103      	bne.n	8006206 <xQueueGenericSendFromISR+0x6a>
 80061fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006200:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006202:	2b01      	cmp	r3, #1
 8006204:	d101      	bne.n	800620a <xQueueGenericSendFromISR+0x6e>
 8006206:	2301      	movs	r3, #1
 8006208:	e000      	b.n	800620c <xQueueGenericSendFromISR+0x70>
 800620a:	2300      	movs	r3, #0
 800620c:	2b00      	cmp	r3, #0
 800620e:	d10a      	bne.n	8006226 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8006210:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006214:	f383 8811 	msr	BASEPRI, r3
 8006218:	f3bf 8f6f 	isb	sy
 800621c:	f3bf 8f4f 	dsb	sy
 8006220:	623b      	str	r3, [r7, #32]
}
 8006222:	bf00      	nop
 8006224:	e7fe      	b.n	8006224 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006226:	f002 f87f 	bl	8008328 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800622a:	f3ef 8211 	mrs	r2, BASEPRI
 800622e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006232:	f383 8811 	msr	BASEPRI, r3
 8006236:	f3bf 8f6f 	isb	sy
 800623a:	f3bf 8f4f 	dsb	sy
 800623e:	61fa      	str	r2, [r7, #28]
 8006240:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8006242:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006244:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006246:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006248:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800624a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800624c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800624e:	429a      	cmp	r2, r3
 8006250:	d302      	bcc.n	8006258 <xQueueGenericSendFromISR+0xbc>
 8006252:	683b      	ldr	r3, [r7, #0]
 8006254:	2b02      	cmp	r3, #2
 8006256:	d12f      	bne.n	80062b8 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006258:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800625a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800625e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006262:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006264:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006266:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006268:	683a      	ldr	r2, [r7, #0]
 800626a:	68b9      	ldr	r1, [r7, #8]
 800626c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800626e:	f000 f911 	bl	8006494 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006272:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8006276:	f1b3 3fff 	cmp.w	r3, #4294967295
 800627a:	d112      	bne.n	80062a2 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800627c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800627e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006280:	2b00      	cmp	r3, #0
 8006282:	d016      	beq.n	80062b2 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006284:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006286:	3324      	adds	r3, #36	; 0x24
 8006288:	4618      	mov	r0, r3
 800628a:	f000 ff69 	bl	8007160 <xTaskRemoveFromEventList>
 800628e:	4603      	mov	r3, r0
 8006290:	2b00      	cmp	r3, #0
 8006292:	d00e      	beq.n	80062b2 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	2b00      	cmp	r3, #0
 8006298:	d00b      	beq.n	80062b2 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	2201      	movs	r2, #1
 800629e:	601a      	str	r2, [r3, #0]
 80062a0:	e007      	b.n	80062b2 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80062a2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80062a6:	3301      	adds	r3, #1
 80062a8:	b2db      	uxtb	r3, r3
 80062aa:	b25a      	sxtb	r2, r3
 80062ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062ae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80062b2:	2301      	movs	r3, #1
 80062b4:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80062b6:	e001      	b.n	80062bc <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80062b8:	2300      	movs	r3, #0
 80062ba:	63fb      	str	r3, [r7, #60]	; 0x3c
 80062bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80062be:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80062c0:	697b      	ldr	r3, [r7, #20]
 80062c2:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80062c6:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80062c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80062ca:	4618      	mov	r0, r3
 80062cc:	3740      	adds	r7, #64	; 0x40
 80062ce:	46bd      	mov	sp, r7
 80062d0:	bd80      	pop	{r7, pc}
	...

080062d4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80062d4:	b580      	push	{r7, lr}
 80062d6:	b08c      	sub	sp, #48	; 0x30
 80062d8:	af00      	add	r7, sp, #0
 80062da:	60f8      	str	r0, [r7, #12]
 80062dc:	60b9      	str	r1, [r7, #8]
 80062de:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80062e0:	2300      	movs	r3, #0
 80062e2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80062e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d10a      	bne.n	8006304 <xQueueReceive+0x30>
	__asm volatile
 80062ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062f2:	f383 8811 	msr	BASEPRI, r3
 80062f6:	f3bf 8f6f 	isb	sy
 80062fa:	f3bf 8f4f 	dsb	sy
 80062fe:	623b      	str	r3, [r7, #32]
}
 8006300:	bf00      	nop
 8006302:	e7fe      	b.n	8006302 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006304:	68bb      	ldr	r3, [r7, #8]
 8006306:	2b00      	cmp	r3, #0
 8006308:	d103      	bne.n	8006312 <xQueueReceive+0x3e>
 800630a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800630c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800630e:	2b00      	cmp	r3, #0
 8006310:	d101      	bne.n	8006316 <xQueueReceive+0x42>
 8006312:	2301      	movs	r3, #1
 8006314:	e000      	b.n	8006318 <xQueueReceive+0x44>
 8006316:	2300      	movs	r3, #0
 8006318:	2b00      	cmp	r3, #0
 800631a:	d10a      	bne.n	8006332 <xQueueReceive+0x5e>
	__asm volatile
 800631c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006320:	f383 8811 	msr	BASEPRI, r3
 8006324:	f3bf 8f6f 	isb	sy
 8006328:	f3bf 8f4f 	dsb	sy
 800632c:	61fb      	str	r3, [r7, #28]
}
 800632e:	bf00      	nop
 8006330:	e7fe      	b.n	8006330 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006332:	f001 f8d7 	bl	80074e4 <xTaskGetSchedulerState>
 8006336:	4603      	mov	r3, r0
 8006338:	2b00      	cmp	r3, #0
 800633a:	d102      	bne.n	8006342 <xQueueReceive+0x6e>
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	2b00      	cmp	r3, #0
 8006340:	d101      	bne.n	8006346 <xQueueReceive+0x72>
 8006342:	2301      	movs	r3, #1
 8006344:	e000      	b.n	8006348 <xQueueReceive+0x74>
 8006346:	2300      	movs	r3, #0
 8006348:	2b00      	cmp	r3, #0
 800634a:	d10a      	bne.n	8006362 <xQueueReceive+0x8e>
	__asm volatile
 800634c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006350:	f383 8811 	msr	BASEPRI, r3
 8006354:	f3bf 8f6f 	isb	sy
 8006358:	f3bf 8f4f 	dsb	sy
 800635c:	61bb      	str	r3, [r7, #24]
}
 800635e:	bf00      	nop
 8006360:	e7fe      	b.n	8006360 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006362:	f001 feff 	bl	8008164 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006366:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006368:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800636a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800636c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800636e:	2b00      	cmp	r3, #0
 8006370:	d01f      	beq.n	80063b2 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006372:	68b9      	ldr	r1, [r7, #8]
 8006374:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006376:	f000 f8f7 	bl	8006568 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800637a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800637c:	1e5a      	subs	r2, r3, #1
 800637e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006380:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006382:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006384:	691b      	ldr	r3, [r3, #16]
 8006386:	2b00      	cmp	r3, #0
 8006388:	d00f      	beq.n	80063aa <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800638a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800638c:	3310      	adds	r3, #16
 800638e:	4618      	mov	r0, r3
 8006390:	f000 fee6 	bl	8007160 <xTaskRemoveFromEventList>
 8006394:	4603      	mov	r3, r0
 8006396:	2b00      	cmp	r3, #0
 8006398:	d007      	beq.n	80063aa <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800639a:	4b3d      	ldr	r3, [pc, #244]	; (8006490 <xQueueReceive+0x1bc>)
 800639c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80063a0:	601a      	str	r2, [r3, #0]
 80063a2:	f3bf 8f4f 	dsb	sy
 80063a6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80063aa:	f001 ff0b 	bl	80081c4 <vPortExitCritical>
				return pdPASS;
 80063ae:	2301      	movs	r3, #1
 80063b0:	e069      	b.n	8006486 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d103      	bne.n	80063c0 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80063b8:	f001 ff04 	bl	80081c4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80063bc:	2300      	movs	r3, #0
 80063be:	e062      	b.n	8006486 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80063c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d106      	bne.n	80063d4 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80063c6:	f107 0310 	add.w	r3, r7, #16
 80063ca:	4618      	mov	r0, r3
 80063cc:	f000 ff2c 	bl	8007228 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80063d0:	2301      	movs	r3, #1
 80063d2:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80063d4:	f001 fef6 	bl	80081c4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80063d8:	f000 fc98 	bl	8006d0c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80063dc:	f001 fec2 	bl	8008164 <vPortEnterCritical>
 80063e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063e2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80063e6:	b25b      	sxtb	r3, r3
 80063e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063ec:	d103      	bne.n	80063f6 <xQueueReceive+0x122>
 80063ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063f0:	2200      	movs	r2, #0
 80063f2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80063f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063f8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80063fc:	b25b      	sxtb	r3, r3
 80063fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006402:	d103      	bne.n	800640c <xQueueReceive+0x138>
 8006404:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006406:	2200      	movs	r2, #0
 8006408:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800640c:	f001 feda 	bl	80081c4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006410:	1d3a      	adds	r2, r7, #4
 8006412:	f107 0310 	add.w	r3, r7, #16
 8006416:	4611      	mov	r1, r2
 8006418:	4618      	mov	r0, r3
 800641a:	f000 ff1b 	bl	8007254 <xTaskCheckForTimeOut>
 800641e:	4603      	mov	r3, r0
 8006420:	2b00      	cmp	r3, #0
 8006422:	d123      	bne.n	800646c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006424:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006426:	f000 f917 	bl	8006658 <prvIsQueueEmpty>
 800642a:	4603      	mov	r3, r0
 800642c:	2b00      	cmp	r3, #0
 800642e:	d017      	beq.n	8006460 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006430:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006432:	3324      	adds	r3, #36	; 0x24
 8006434:	687a      	ldr	r2, [r7, #4]
 8006436:	4611      	mov	r1, r2
 8006438:	4618      	mov	r0, r3
 800643a:	f000 fe41 	bl	80070c0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800643e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006440:	f000 f8b8 	bl	80065b4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006444:	f000 fc70 	bl	8006d28 <xTaskResumeAll>
 8006448:	4603      	mov	r3, r0
 800644a:	2b00      	cmp	r3, #0
 800644c:	d189      	bne.n	8006362 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800644e:	4b10      	ldr	r3, [pc, #64]	; (8006490 <xQueueReceive+0x1bc>)
 8006450:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006454:	601a      	str	r2, [r3, #0]
 8006456:	f3bf 8f4f 	dsb	sy
 800645a:	f3bf 8f6f 	isb	sy
 800645e:	e780      	b.n	8006362 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8006460:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006462:	f000 f8a7 	bl	80065b4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006466:	f000 fc5f 	bl	8006d28 <xTaskResumeAll>
 800646a:	e77a      	b.n	8006362 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800646c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800646e:	f000 f8a1 	bl	80065b4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006472:	f000 fc59 	bl	8006d28 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006476:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006478:	f000 f8ee 	bl	8006658 <prvIsQueueEmpty>
 800647c:	4603      	mov	r3, r0
 800647e:	2b00      	cmp	r3, #0
 8006480:	f43f af6f 	beq.w	8006362 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006484:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006486:	4618      	mov	r0, r3
 8006488:	3730      	adds	r7, #48	; 0x30
 800648a:	46bd      	mov	sp, r7
 800648c:	bd80      	pop	{r7, pc}
 800648e:	bf00      	nop
 8006490:	e000ed04 	.word	0xe000ed04

08006494 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006494:	b580      	push	{r7, lr}
 8006496:	b086      	sub	sp, #24
 8006498:	af00      	add	r7, sp, #0
 800649a:	60f8      	str	r0, [r7, #12]
 800649c:	60b9      	str	r1, [r7, #8]
 800649e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80064a0:	2300      	movs	r3, #0
 80064a2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064a8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d10d      	bne.n	80064ce <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d14d      	bne.n	8006556 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	689b      	ldr	r3, [r3, #8]
 80064be:	4618      	mov	r0, r3
 80064c0:	f001 f82e 	bl	8007520 <xTaskPriorityDisinherit>
 80064c4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	2200      	movs	r2, #0
 80064ca:	609a      	str	r2, [r3, #8]
 80064cc:	e043      	b.n	8006556 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d119      	bne.n	8006508 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	6858      	ldr	r0, [r3, #4]
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064dc:	461a      	mov	r2, r3
 80064de:	68b9      	ldr	r1, [r7, #8]
 80064e0:	f002 fa6f 	bl	80089c2 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	685a      	ldr	r2, [r3, #4]
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064ec:	441a      	add	r2, r3
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	685a      	ldr	r2, [r3, #4]
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	689b      	ldr	r3, [r3, #8]
 80064fa:	429a      	cmp	r2, r3
 80064fc:	d32b      	bcc.n	8006556 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	681a      	ldr	r2, [r3, #0]
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	605a      	str	r2, [r3, #4]
 8006506:	e026      	b.n	8006556 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	68d8      	ldr	r0, [r3, #12]
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006510:	461a      	mov	r2, r3
 8006512:	68b9      	ldr	r1, [r7, #8]
 8006514:	f002 fa55 	bl	80089c2 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	68da      	ldr	r2, [r3, #12]
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006520:	425b      	negs	r3, r3
 8006522:	441a      	add	r2, r3
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	68da      	ldr	r2, [r3, #12]
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	429a      	cmp	r2, r3
 8006532:	d207      	bcs.n	8006544 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	689a      	ldr	r2, [r3, #8]
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800653c:	425b      	negs	r3, r3
 800653e:	441a      	add	r2, r3
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	2b02      	cmp	r3, #2
 8006548:	d105      	bne.n	8006556 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800654a:	693b      	ldr	r3, [r7, #16]
 800654c:	2b00      	cmp	r3, #0
 800654e:	d002      	beq.n	8006556 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006550:	693b      	ldr	r3, [r7, #16]
 8006552:	3b01      	subs	r3, #1
 8006554:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006556:	693b      	ldr	r3, [r7, #16]
 8006558:	1c5a      	adds	r2, r3, #1
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800655e:	697b      	ldr	r3, [r7, #20]
}
 8006560:	4618      	mov	r0, r3
 8006562:	3718      	adds	r7, #24
 8006564:	46bd      	mov	sp, r7
 8006566:	bd80      	pop	{r7, pc}

08006568 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006568:	b580      	push	{r7, lr}
 800656a:	b082      	sub	sp, #8
 800656c:	af00      	add	r7, sp, #0
 800656e:	6078      	str	r0, [r7, #4]
 8006570:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006576:	2b00      	cmp	r3, #0
 8006578:	d018      	beq.n	80065ac <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	68da      	ldr	r2, [r3, #12]
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006582:	441a      	add	r2, r3
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	68da      	ldr	r2, [r3, #12]
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	689b      	ldr	r3, [r3, #8]
 8006590:	429a      	cmp	r2, r3
 8006592:	d303      	bcc.n	800659c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681a      	ldr	r2, [r3, #0]
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	68d9      	ldr	r1, [r3, #12]
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065a4:	461a      	mov	r2, r3
 80065a6:	6838      	ldr	r0, [r7, #0]
 80065a8:	f002 fa0b 	bl	80089c2 <memcpy>
	}
}
 80065ac:	bf00      	nop
 80065ae:	3708      	adds	r7, #8
 80065b0:	46bd      	mov	sp, r7
 80065b2:	bd80      	pop	{r7, pc}

080065b4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80065b4:	b580      	push	{r7, lr}
 80065b6:	b084      	sub	sp, #16
 80065b8:	af00      	add	r7, sp, #0
 80065ba:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80065bc:	f001 fdd2 	bl	8008164 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80065c6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80065c8:	e011      	b.n	80065ee <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d012      	beq.n	80065f8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	3324      	adds	r3, #36	; 0x24
 80065d6:	4618      	mov	r0, r3
 80065d8:	f000 fdc2 	bl	8007160 <xTaskRemoveFromEventList>
 80065dc:	4603      	mov	r3, r0
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d001      	beq.n	80065e6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80065e2:	f000 fe99 	bl	8007318 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80065e6:	7bfb      	ldrb	r3, [r7, #15]
 80065e8:	3b01      	subs	r3, #1
 80065ea:	b2db      	uxtb	r3, r3
 80065ec:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80065ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	dce9      	bgt.n	80065ca <prvUnlockQueue+0x16>
 80065f6:	e000      	b.n	80065fa <prvUnlockQueue+0x46>
					break;
 80065f8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	22ff      	movs	r2, #255	; 0xff
 80065fe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8006602:	f001 fddf 	bl	80081c4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8006606:	f001 fdad 	bl	8008164 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006610:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006612:	e011      	b.n	8006638 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	691b      	ldr	r3, [r3, #16]
 8006618:	2b00      	cmp	r3, #0
 800661a:	d012      	beq.n	8006642 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	3310      	adds	r3, #16
 8006620:	4618      	mov	r0, r3
 8006622:	f000 fd9d 	bl	8007160 <xTaskRemoveFromEventList>
 8006626:	4603      	mov	r3, r0
 8006628:	2b00      	cmp	r3, #0
 800662a:	d001      	beq.n	8006630 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800662c:	f000 fe74 	bl	8007318 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006630:	7bbb      	ldrb	r3, [r7, #14]
 8006632:	3b01      	subs	r3, #1
 8006634:	b2db      	uxtb	r3, r3
 8006636:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006638:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800663c:	2b00      	cmp	r3, #0
 800663e:	dce9      	bgt.n	8006614 <prvUnlockQueue+0x60>
 8006640:	e000      	b.n	8006644 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8006642:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	22ff      	movs	r2, #255	; 0xff
 8006648:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800664c:	f001 fdba 	bl	80081c4 <vPortExitCritical>
}
 8006650:	bf00      	nop
 8006652:	3710      	adds	r7, #16
 8006654:	46bd      	mov	sp, r7
 8006656:	bd80      	pop	{r7, pc}

08006658 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006658:	b580      	push	{r7, lr}
 800665a:	b084      	sub	sp, #16
 800665c:	af00      	add	r7, sp, #0
 800665e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006660:	f001 fd80 	bl	8008164 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006668:	2b00      	cmp	r3, #0
 800666a:	d102      	bne.n	8006672 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800666c:	2301      	movs	r3, #1
 800666e:	60fb      	str	r3, [r7, #12]
 8006670:	e001      	b.n	8006676 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8006672:	2300      	movs	r3, #0
 8006674:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006676:	f001 fda5 	bl	80081c4 <vPortExitCritical>

	return xReturn;
 800667a:	68fb      	ldr	r3, [r7, #12]
}
 800667c:	4618      	mov	r0, r3
 800667e:	3710      	adds	r7, #16
 8006680:	46bd      	mov	sp, r7
 8006682:	bd80      	pop	{r7, pc}

08006684 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006684:	b580      	push	{r7, lr}
 8006686:	b084      	sub	sp, #16
 8006688:	af00      	add	r7, sp, #0
 800668a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800668c:	f001 fd6a 	bl	8008164 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006698:	429a      	cmp	r2, r3
 800669a:	d102      	bne.n	80066a2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800669c:	2301      	movs	r3, #1
 800669e:	60fb      	str	r3, [r7, #12]
 80066a0:	e001      	b.n	80066a6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80066a2:	2300      	movs	r3, #0
 80066a4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80066a6:	f001 fd8d 	bl	80081c4 <vPortExitCritical>

	return xReturn;
 80066aa:	68fb      	ldr	r3, [r7, #12]
}
 80066ac:	4618      	mov	r0, r3
 80066ae:	3710      	adds	r7, #16
 80066b0:	46bd      	mov	sp, r7
 80066b2:	bd80      	pop	{r7, pc}

080066b4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80066b4:	b480      	push	{r7}
 80066b6:	b085      	sub	sp, #20
 80066b8:	af00      	add	r7, sp, #0
 80066ba:	6078      	str	r0, [r7, #4]
 80066bc:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80066be:	2300      	movs	r3, #0
 80066c0:	60fb      	str	r3, [r7, #12]
 80066c2:	e014      	b.n	80066ee <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80066c4:	4a0f      	ldr	r2, [pc, #60]	; (8006704 <vQueueAddToRegistry+0x50>)
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d10b      	bne.n	80066e8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80066d0:	490c      	ldr	r1, [pc, #48]	; (8006704 <vQueueAddToRegistry+0x50>)
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	683a      	ldr	r2, [r7, #0]
 80066d6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80066da:	4a0a      	ldr	r2, [pc, #40]	; (8006704 <vQueueAddToRegistry+0x50>)
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	00db      	lsls	r3, r3, #3
 80066e0:	4413      	add	r3, r2
 80066e2:	687a      	ldr	r2, [r7, #4]
 80066e4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80066e6:	e006      	b.n	80066f6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	3301      	adds	r3, #1
 80066ec:	60fb      	str	r3, [r7, #12]
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	2b07      	cmp	r3, #7
 80066f2:	d9e7      	bls.n	80066c4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80066f4:	bf00      	nop
 80066f6:	bf00      	nop
 80066f8:	3714      	adds	r7, #20
 80066fa:	46bd      	mov	sp, r7
 80066fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006700:	4770      	bx	lr
 8006702:	bf00      	nop
 8006704:	20000a1c 	.word	0x20000a1c

08006708 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006708:	b580      	push	{r7, lr}
 800670a:	b086      	sub	sp, #24
 800670c:	af00      	add	r7, sp, #0
 800670e:	60f8      	str	r0, [r7, #12]
 8006710:	60b9      	str	r1, [r7, #8]
 8006712:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8006718:	f001 fd24 	bl	8008164 <vPortEnterCritical>
 800671c:	697b      	ldr	r3, [r7, #20]
 800671e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006722:	b25b      	sxtb	r3, r3
 8006724:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006728:	d103      	bne.n	8006732 <vQueueWaitForMessageRestricted+0x2a>
 800672a:	697b      	ldr	r3, [r7, #20]
 800672c:	2200      	movs	r2, #0
 800672e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006732:	697b      	ldr	r3, [r7, #20]
 8006734:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006738:	b25b      	sxtb	r3, r3
 800673a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800673e:	d103      	bne.n	8006748 <vQueueWaitForMessageRestricted+0x40>
 8006740:	697b      	ldr	r3, [r7, #20]
 8006742:	2200      	movs	r2, #0
 8006744:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006748:	f001 fd3c 	bl	80081c4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800674c:	697b      	ldr	r3, [r7, #20]
 800674e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006750:	2b00      	cmp	r3, #0
 8006752:	d106      	bne.n	8006762 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8006754:	697b      	ldr	r3, [r7, #20]
 8006756:	3324      	adds	r3, #36	; 0x24
 8006758:	687a      	ldr	r2, [r7, #4]
 800675a:	68b9      	ldr	r1, [r7, #8]
 800675c:	4618      	mov	r0, r3
 800675e:	f000 fcd3 	bl	8007108 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8006762:	6978      	ldr	r0, [r7, #20]
 8006764:	f7ff ff26 	bl	80065b4 <prvUnlockQueue>
	}
 8006768:	bf00      	nop
 800676a:	3718      	adds	r7, #24
 800676c:	46bd      	mov	sp, r7
 800676e:	bd80      	pop	{r7, pc}

08006770 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006770:	b580      	push	{r7, lr}
 8006772:	b08e      	sub	sp, #56	; 0x38
 8006774:	af04      	add	r7, sp, #16
 8006776:	60f8      	str	r0, [r7, #12]
 8006778:	60b9      	str	r1, [r7, #8]
 800677a:	607a      	str	r2, [r7, #4]
 800677c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800677e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006780:	2b00      	cmp	r3, #0
 8006782:	d10a      	bne.n	800679a <xTaskCreateStatic+0x2a>
	__asm volatile
 8006784:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006788:	f383 8811 	msr	BASEPRI, r3
 800678c:	f3bf 8f6f 	isb	sy
 8006790:	f3bf 8f4f 	dsb	sy
 8006794:	623b      	str	r3, [r7, #32]
}
 8006796:	bf00      	nop
 8006798:	e7fe      	b.n	8006798 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800679a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800679c:	2b00      	cmp	r3, #0
 800679e:	d10a      	bne.n	80067b6 <xTaskCreateStatic+0x46>
	__asm volatile
 80067a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067a4:	f383 8811 	msr	BASEPRI, r3
 80067a8:	f3bf 8f6f 	isb	sy
 80067ac:	f3bf 8f4f 	dsb	sy
 80067b0:	61fb      	str	r3, [r7, #28]
}
 80067b2:	bf00      	nop
 80067b4:	e7fe      	b.n	80067b4 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80067b6:	23bc      	movs	r3, #188	; 0xbc
 80067b8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80067ba:	693b      	ldr	r3, [r7, #16]
 80067bc:	2bbc      	cmp	r3, #188	; 0xbc
 80067be:	d00a      	beq.n	80067d6 <xTaskCreateStatic+0x66>
	__asm volatile
 80067c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067c4:	f383 8811 	msr	BASEPRI, r3
 80067c8:	f3bf 8f6f 	isb	sy
 80067cc:	f3bf 8f4f 	dsb	sy
 80067d0:	61bb      	str	r3, [r7, #24]
}
 80067d2:	bf00      	nop
 80067d4:	e7fe      	b.n	80067d4 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80067d6:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80067d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d01e      	beq.n	800681c <xTaskCreateStatic+0xac>
 80067de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d01b      	beq.n	800681c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80067e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067e6:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80067e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067ea:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80067ec:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80067ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067f0:	2202      	movs	r2, #2
 80067f2:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80067f6:	2300      	movs	r3, #0
 80067f8:	9303      	str	r3, [sp, #12]
 80067fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067fc:	9302      	str	r3, [sp, #8]
 80067fe:	f107 0314 	add.w	r3, r7, #20
 8006802:	9301      	str	r3, [sp, #4]
 8006804:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006806:	9300      	str	r3, [sp, #0]
 8006808:	683b      	ldr	r3, [r7, #0]
 800680a:	687a      	ldr	r2, [r7, #4]
 800680c:	68b9      	ldr	r1, [r7, #8]
 800680e:	68f8      	ldr	r0, [r7, #12]
 8006810:	f000 f850 	bl	80068b4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006814:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006816:	f000 f8f3 	bl	8006a00 <prvAddNewTaskToReadyList>
 800681a:	e001      	b.n	8006820 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800681c:	2300      	movs	r3, #0
 800681e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006820:	697b      	ldr	r3, [r7, #20]
	}
 8006822:	4618      	mov	r0, r3
 8006824:	3728      	adds	r7, #40	; 0x28
 8006826:	46bd      	mov	sp, r7
 8006828:	bd80      	pop	{r7, pc}

0800682a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800682a:	b580      	push	{r7, lr}
 800682c:	b08c      	sub	sp, #48	; 0x30
 800682e:	af04      	add	r7, sp, #16
 8006830:	60f8      	str	r0, [r7, #12]
 8006832:	60b9      	str	r1, [r7, #8]
 8006834:	603b      	str	r3, [r7, #0]
 8006836:	4613      	mov	r3, r2
 8006838:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800683a:	88fb      	ldrh	r3, [r7, #6]
 800683c:	009b      	lsls	r3, r3, #2
 800683e:	4618      	mov	r0, r3
 8006840:	f001 fdb2 	bl	80083a8 <pvPortMalloc>
 8006844:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006846:	697b      	ldr	r3, [r7, #20]
 8006848:	2b00      	cmp	r3, #0
 800684a:	d00e      	beq.n	800686a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800684c:	20bc      	movs	r0, #188	; 0xbc
 800684e:	f001 fdab 	bl	80083a8 <pvPortMalloc>
 8006852:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006854:	69fb      	ldr	r3, [r7, #28]
 8006856:	2b00      	cmp	r3, #0
 8006858:	d003      	beq.n	8006862 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800685a:	69fb      	ldr	r3, [r7, #28]
 800685c:	697a      	ldr	r2, [r7, #20]
 800685e:	631a      	str	r2, [r3, #48]	; 0x30
 8006860:	e005      	b.n	800686e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006862:	6978      	ldr	r0, [r7, #20]
 8006864:	f001 fe6c 	bl	8008540 <vPortFree>
 8006868:	e001      	b.n	800686e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800686a:	2300      	movs	r3, #0
 800686c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800686e:	69fb      	ldr	r3, [r7, #28]
 8006870:	2b00      	cmp	r3, #0
 8006872:	d017      	beq.n	80068a4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006874:	69fb      	ldr	r3, [r7, #28]
 8006876:	2200      	movs	r2, #0
 8006878:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800687c:	88fa      	ldrh	r2, [r7, #6]
 800687e:	2300      	movs	r3, #0
 8006880:	9303      	str	r3, [sp, #12]
 8006882:	69fb      	ldr	r3, [r7, #28]
 8006884:	9302      	str	r3, [sp, #8]
 8006886:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006888:	9301      	str	r3, [sp, #4]
 800688a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800688c:	9300      	str	r3, [sp, #0]
 800688e:	683b      	ldr	r3, [r7, #0]
 8006890:	68b9      	ldr	r1, [r7, #8]
 8006892:	68f8      	ldr	r0, [r7, #12]
 8006894:	f000 f80e 	bl	80068b4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006898:	69f8      	ldr	r0, [r7, #28]
 800689a:	f000 f8b1 	bl	8006a00 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800689e:	2301      	movs	r3, #1
 80068a0:	61bb      	str	r3, [r7, #24]
 80068a2:	e002      	b.n	80068aa <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80068a4:	f04f 33ff 	mov.w	r3, #4294967295
 80068a8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80068aa:	69bb      	ldr	r3, [r7, #24]
	}
 80068ac:	4618      	mov	r0, r3
 80068ae:	3720      	adds	r7, #32
 80068b0:	46bd      	mov	sp, r7
 80068b2:	bd80      	pop	{r7, pc}

080068b4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80068b4:	b580      	push	{r7, lr}
 80068b6:	b088      	sub	sp, #32
 80068b8:	af00      	add	r7, sp, #0
 80068ba:	60f8      	str	r0, [r7, #12]
 80068bc:	60b9      	str	r1, [r7, #8]
 80068be:	607a      	str	r2, [r7, #4]
 80068c0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80068c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068c4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	009b      	lsls	r3, r3, #2
 80068ca:	461a      	mov	r2, r3
 80068cc:	21a5      	movs	r1, #165	; 0xa5
 80068ce:	f002 f886 	bl	80089de <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80068d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068d4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80068dc:	3b01      	subs	r3, #1
 80068de:	009b      	lsls	r3, r3, #2
 80068e0:	4413      	add	r3, r2
 80068e2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80068e4:	69bb      	ldr	r3, [r7, #24]
 80068e6:	f023 0307 	bic.w	r3, r3, #7
 80068ea:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80068ec:	69bb      	ldr	r3, [r7, #24]
 80068ee:	f003 0307 	and.w	r3, r3, #7
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d00a      	beq.n	800690c <prvInitialiseNewTask+0x58>
	__asm volatile
 80068f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068fa:	f383 8811 	msr	BASEPRI, r3
 80068fe:	f3bf 8f6f 	isb	sy
 8006902:	f3bf 8f4f 	dsb	sy
 8006906:	617b      	str	r3, [r7, #20]
}
 8006908:	bf00      	nop
 800690a:	e7fe      	b.n	800690a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800690c:	68bb      	ldr	r3, [r7, #8]
 800690e:	2b00      	cmp	r3, #0
 8006910:	d01f      	beq.n	8006952 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006912:	2300      	movs	r3, #0
 8006914:	61fb      	str	r3, [r7, #28]
 8006916:	e012      	b.n	800693e <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006918:	68ba      	ldr	r2, [r7, #8]
 800691a:	69fb      	ldr	r3, [r7, #28]
 800691c:	4413      	add	r3, r2
 800691e:	7819      	ldrb	r1, [r3, #0]
 8006920:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006922:	69fb      	ldr	r3, [r7, #28]
 8006924:	4413      	add	r3, r2
 8006926:	3334      	adds	r3, #52	; 0x34
 8006928:	460a      	mov	r2, r1
 800692a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800692c:	68ba      	ldr	r2, [r7, #8]
 800692e:	69fb      	ldr	r3, [r7, #28]
 8006930:	4413      	add	r3, r2
 8006932:	781b      	ldrb	r3, [r3, #0]
 8006934:	2b00      	cmp	r3, #0
 8006936:	d006      	beq.n	8006946 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006938:	69fb      	ldr	r3, [r7, #28]
 800693a:	3301      	adds	r3, #1
 800693c:	61fb      	str	r3, [r7, #28]
 800693e:	69fb      	ldr	r3, [r7, #28]
 8006940:	2b0f      	cmp	r3, #15
 8006942:	d9e9      	bls.n	8006918 <prvInitialiseNewTask+0x64>
 8006944:	e000      	b.n	8006948 <prvInitialiseNewTask+0x94>
			{
				break;
 8006946:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006948:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800694a:	2200      	movs	r2, #0
 800694c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006950:	e003      	b.n	800695a <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006952:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006954:	2200      	movs	r2, #0
 8006956:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800695a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800695c:	2b37      	cmp	r3, #55	; 0x37
 800695e:	d901      	bls.n	8006964 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006960:	2337      	movs	r3, #55	; 0x37
 8006962:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006964:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006966:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006968:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800696a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800696c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800696e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8006970:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006972:	2200      	movs	r2, #0
 8006974:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006976:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006978:	3304      	adds	r3, #4
 800697a:	4618      	mov	r0, r3
 800697c:	f7ff f978 	bl	8005c70 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006980:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006982:	3318      	adds	r3, #24
 8006984:	4618      	mov	r0, r3
 8006986:	f7ff f973 	bl	8005c70 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800698a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800698c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800698e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006990:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006992:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006996:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006998:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800699a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800699c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800699e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80069a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069a2:	2200      	movs	r2, #0
 80069a4:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80069a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069aa:	2200      	movs	r2, #0
 80069ac:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80069b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069b2:	3354      	adds	r3, #84	; 0x54
 80069b4:	2260      	movs	r2, #96	; 0x60
 80069b6:	2100      	movs	r1, #0
 80069b8:	4618      	mov	r0, r3
 80069ba:	f002 f810 	bl	80089de <memset>
 80069be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069c0:	4a0c      	ldr	r2, [pc, #48]	; (80069f4 <prvInitialiseNewTask+0x140>)
 80069c2:	659a      	str	r2, [r3, #88]	; 0x58
 80069c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069c6:	4a0c      	ldr	r2, [pc, #48]	; (80069f8 <prvInitialiseNewTask+0x144>)
 80069c8:	65da      	str	r2, [r3, #92]	; 0x5c
 80069ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069cc:	4a0b      	ldr	r2, [pc, #44]	; (80069fc <prvInitialiseNewTask+0x148>)
 80069ce:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80069d0:	683a      	ldr	r2, [r7, #0]
 80069d2:	68f9      	ldr	r1, [r7, #12]
 80069d4:	69b8      	ldr	r0, [r7, #24]
 80069d6:	f001 fa97 	bl	8007f08 <pxPortInitialiseStack>
 80069da:	4602      	mov	r2, r0
 80069dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069de:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80069e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d002      	beq.n	80069ec <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80069e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80069ea:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80069ec:	bf00      	nop
 80069ee:	3720      	adds	r7, #32
 80069f0:	46bd      	mov	sp, r7
 80069f2:	bd80      	pop	{r7, pc}
 80069f4:	08009960 	.word	0x08009960
 80069f8:	08009980 	.word	0x08009980
 80069fc:	08009940 	.word	0x08009940

08006a00 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006a00:	b580      	push	{r7, lr}
 8006a02:	b082      	sub	sp, #8
 8006a04:	af00      	add	r7, sp, #0
 8006a06:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006a08:	f001 fbac 	bl	8008164 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006a0c:	4b2d      	ldr	r3, [pc, #180]	; (8006ac4 <prvAddNewTaskToReadyList+0xc4>)
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	3301      	adds	r3, #1
 8006a12:	4a2c      	ldr	r2, [pc, #176]	; (8006ac4 <prvAddNewTaskToReadyList+0xc4>)
 8006a14:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006a16:	4b2c      	ldr	r3, [pc, #176]	; (8006ac8 <prvAddNewTaskToReadyList+0xc8>)
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d109      	bne.n	8006a32 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006a1e:	4a2a      	ldr	r2, [pc, #168]	; (8006ac8 <prvAddNewTaskToReadyList+0xc8>)
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006a24:	4b27      	ldr	r3, [pc, #156]	; (8006ac4 <prvAddNewTaskToReadyList+0xc4>)
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	2b01      	cmp	r3, #1
 8006a2a:	d110      	bne.n	8006a4e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006a2c:	f000 fc98 	bl	8007360 <prvInitialiseTaskLists>
 8006a30:	e00d      	b.n	8006a4e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006a32:	4b26      	ldr	r3, [pc, #152]	; (8006acc <prvAddNewTaskToReadyList+0xcc>)
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d109      	bne.n	8006a4e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006a3a:	4b23      	ldr	r3, [pc, #140]	; (8006ac8 <prvAddNewTaskToReadyList+0xc8>)
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a44:	429a      	cmp	r2, r3
 8006a46:	d802      	bhi.n	8006a4e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006a48:	4a1f      	ldr	r2, [pc, #124]	; (8006ac8 <prvAddNewTaskToReadyList+0xc8>)
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006a4e:	4b20      	ldr	r3, [pc, #128]	; (8006ad0 <prvAddNewTaskToReadyList+0xd0>)
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	3301      	adds	r3, #1
 8006a54:	4a1e      	ldr	r2, [pc, #120]	; (8006ad0 <prvAddNewTaskToReadyList+0xd0>)
 8006a56:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8006a58:	4b1d      	ldr	r3, [pc, #116]	; (8006ad0 <prvAddNewTaskToReadyList+0xd0>)
 8006a5a:	681a      	ldr	r2, [r3, #0]
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a64:	4b1b      	ldr	r3, [pc, #108]	; (8006ad4 <prvAddNewTaskToReadyList+0xd4>)
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	429a      	cmp	r2, r3
 8006a6a:	d903      	bls.n	8006a74 <prvAddNewTaskToReadyList+0x74>
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a70:	4a18      	ldr	r2, [pc, #96]	; (8006ad4 <prvAddNewTaskToReadyList+0xd4>)
 8006a72:	6013      	str	r3, [r2, #0]
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a78:	4613      	mov	r3, r2
 8006a7a:	009b      	lsls	r3, r3, #2
 8006a7c:	4413      	add	r3, r2
 8006a7e:	009b      	lsls	r3, r3, #2
 8006a80:	4a15      	ldr	r2, [pc, #84]	; (8006ad8 <prvAddNewTaskToReadyList+0xd8>)
 8006a82:	441a      	add	r2, r3
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	3304      	adds	r3, #4
 8006a88:	4619      	mov	r1, r3
 8006a8a:	4610      	mov	r0, r2
 8006a8c:	f7ff f8fd 	bl	8005c8a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006a90:	f001 fb98 	bl	80081c4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006a94:	4b0d      	ldr	r3, [pc, #52]	; (8006acc <prvAddNewTaskToReadyList+0xcc>)
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d00e      	beq.n	8006aba <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006a9c:	4b0a      	ldr	r3, [pc, #40]	; (8006ac8 <prvAddNewTaskToReadyList+0xc8>)
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006aa6:	429a      	cmp	r2, r3
 8006aa8:	d207      	bcs.n	8006aba <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006aaa:	4b0c      	ldr	r3, [pc, #48]	; (8006adc <prvAddNewTaskToReadyList+0xdc>)
 8006aac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006ab0:	601a      	str	r2, [r3, #0]
 8006ab2:	f3bf 8f4f 	dsb	sy
 8006ab6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006aba:	bf00      	nop
 8006abc:	3708      	adds	r7, #8
 8006abe:	46bd      	mov	sp, r7
 8006ac0:	bd80      	pop	{r7, pc}
 8006ac2:	bf00      	nop
 8006ac4:	20000f30 	.word	0x20000f30
 8006ac8:	20000a5c 	.word	0x20000a5c
 8006acc:	20000f3c 	.word	0x20000f3c
 8006ad0:	20000f4c 	.word	0x20000f4c
 8006ad4:	20000f38 	.word	0x20000f38
 8006ad8:	20000a60 	.word	0x20000a60
 8006adc:	e000ed04 	.word	0xe000ed04

08006ae0 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 8006ae0:	b580      	push	{r7, lr}
 8006ae2:	b084      	sub	sp, #16
 8006ae4:	af00      	add	r7, sp, #0
 8006ae6:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8006ae8:	f001 fb3c 	bl	8008164 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d102      	bne.n	8006af8 <vTaskDelete+0x18>
 8006af2:	4b2c      	ldr	r3, [pc, #176]	; (8006ba4 <vTaskDelete+0xc4>)
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	e000      	b.n	8006afa <vTaskDelete+0x1a>
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready/delayed list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	3304      	adds	r3, #4
 8006b00:	4618      	mov	r0, r3
 8006b02:	f7ff f91f 	bl	8005d44 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d004      	beq.n	8006b18 <vTaskDelete+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	3318      	adds	r3, #24
 8006b12:	4618      	mov	r0, r3
 8006b14:	f7ff f916 	bl	8005d44 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 8006b18:	4b23      	ldr	r3, [pc, #140]	; (8006ba8 <vTaskDelete+0xc8>)
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	3301      	adds	r3, #1
 8006b1e:	4a22      	ldr	r2, [pc, #136]	; (8006ba8 <vTaskDelete+0xc8>)
 8006b20:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 8006b22:	4b20      	ldr	r3, [pc, #128]	; (8006ba4 <vTaskDelete+0xc4>)
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	68fa      	ldr	r2, [r7, #12]
 8006b28:	429a      	cmp	r2, r3
 8006b2a:	d10b      	bne.n	8006b44 <vTaskDelete+0x64>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	3304      	adds	r3, #4
 8006b30:	4619      	mov	r1, r3
 8006b32:	481e      	ldr	r0, [pc, #120]	; (8006bac <vTaskDelete+0xcc>)
 8006b34:	f7ff f8a9 	bl	8005c8a <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 8006b38:	4b1d      	ldr	r3, [pc, #116]	; (8006bb0 <vTaskDelete+0xd0>)
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	3301      	adds	r3, #1
 8006b3e:	4a1c      	ldr	r2, [pc, #112]	; (8006bb0 <vTaskDelete+0xd0>)
 8006b40:	6013      	str	r3, [r2, #0]
 8006b42:	e009      	b.n	8006b58 <vTaskDelete+0x78>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 8006b44:	4b1b      	ldr	r3, [pc, #108]	; (8006bb4 <vTaskDelete+0xd4>)
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	3b01      	subs	r3, #1
 8006b4a:	4a1a      	ldr	r2, [pc, #104]	; (8006bb4 <vTaskDelete+0xd4>)
 8006b4c:	6013      	str	r3, [r2, #0]
				traceTASK_DELETE( pxTCB );
				prvDeleteTCB( pxTCB );
 8006b4e:	68f8      	ldr	r0, [r7, #12]
 8006b50:	f000 fc74 	bl	800743c <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 8006b54:	f000 fca6 	bl	80074a4 <prvResetNextTaskUnblockTime>
			}
		}
		taskEXIT_CRITICAL();
 8006b58:	f001 fb34 	bl	80081c4 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 8006b5c:	4b16      	ldr	r3, [pc, #88]	; (8006bb8 <vTaskDelete+0xd8>)
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d01b      	beq.n	8006b9c <vTaskDelete+0xbc>
		{
			if( pxTCB == pxCurrentTCB )
 8006b64:	4b0f      	ldr	r3, [pc, #60]	; (8006ba4 <vTaskDelete+0xc4>)
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	68fa      	ldr	r2, [r7, #12]
 8006b6a:	429a      	cmp	r2, r3
 8006b6c:	d116      	bne.n	8006b9c <vTaskDelete+0xbc>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 8006b6e:	4b13      	ldr	r3, [pc, #76]	; (8006bbc <vTaskDelete+0xdc>)
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d00a      	beq.n	8006b8c <vTaskDelete+0xac>
	__asm volatile
 8006b76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b7a:	f383 8811 	msr	BASEPRI, r3
 8006b7e:	f3bf 8f6f 	isb	sy
 8006b82:	f3bf 8f4f 	dsb	sy
 8006b86:	60bb      	str	r3, [r7, #8]
}
 8006b88:	bf00      	nop
 8006b8a:	e7fe      	b.n	8006b8a <vTaskDelete+0xaa>
				portYIELD_WITHIN_API();
 8006b8c:	4b0c      	ldr	r3, [pc, #48]	; (8006bc0 <vTaskDelete+0xe0>)
 8006b8e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006b92:	601a      	str	r2, [r3, #0]
 8006b94:	f3bf 8f4f 	dsb	sy
 8006b98:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8006b9c:	bf00      	nop
 8006b9e:	3710      	adds	r7, #16
 8006ba0:	46bd      	mov	sp, r7
 8006ba2:	bd80      	pop	{r7, pc}
 8006ba4:	20000a5c 	.word	0x20000a5c
 8006ba8:	20000f4c 	.word	0x20000f4c
 8006bac:	20000f04 	.word	0x20000f04
 8006bb0:	20000f18 	.word	0x20000f18
 8006bb4:	20000f30 	.word	0x20000f30
 8006bb8:	20000f3c 	.word	0x20000f3c
 8006bbc:	20000f58 	.word	0x20000f58
 8006bc0:	e000ed04 	.word	0xe000ed04

08006bc4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006bc4:	b580      	push	{r7, lr}
 8006bc6:	b084      	sub	sp, #16
 8006bc8:	af00      	add	r7, sp, #0
 8006bca:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006bcc:	2300      	movs	r3, #0
 8006bce:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d017      	beq.n	8006c06 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006bd6:	4b13      	ldr	r3, [pc, #76]	; (8006c24 <vTaskDelay+0x60>)
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d00a      	beq.n	8006bf4 <vTaskDelay+0x30>
	__asm volatile
 8006bde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006be2:	f383 8811 	msr	BASEPRI, r3
 8006be6:	f3bf 8f6f 	isb	sy
 8006bea:	f3bf 8f4f 	dsb	sy
 8006bee:	60bb      	str	r3, [r7, #8]
}
 8006bf0:	bf00      	nop
 8006bf2:	e7fe      	b.n	8006bf2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8006bf4:	f000 f88a 	bl	8006d0c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006bf8:	2100      	movs	r1, #0
 8006bfa:	6878      	ldr	r0, [r7, #4]
 8006bfc:	f000 fde2 	bl	80077c4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006c00:	f000 f892 	bl	8006d28 <xTaskResumeAll>
 8006c04:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d107      	bne.n	8006c1c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8006c0c:	4b06      	ldr	r3, [pc, #24]	; (8006c28 <vTaskDelay+0x64>)
 8006c0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006c12:	601a      	str	r2, [r3, #0]
 8006c14:	f3bf 8f4f 	dsb	sy
 8006c18:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006c1c:	bf00      	nop
 8006c1e:	3710      	adds	r7, #16
 8006c20:	46bd      	mov	sp, r7
 8006c22:	bd80      	pop	{r7, pc}
 8006c24:	20000f58 	.word	0x20000f58
 8006c28:	e000ed04 	.word	0xe000ed04

08006c2c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006c2c:	b580      	push	{r7, lr}
 8006c2e:	b08a      	sub	sp, #40	; 0x28
 8006c30:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006c32:	2300      	movs	r3, #0
 8006c34:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006c36:	2300      	movs	r3, #0
 8006c38:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006c3a:	463a      	mov	r2, r7
 8006c3c:	1d39      	adds	r1, r7, #4
 8006c3e:	f107 0308 	add.w	r3, r7, #8
 8006c42:	4618      	mov	r0, r3
 8006c44:	f7fe ffc0 	bl	8005bc8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006c48:	6839      	ldr	r1, [r7, #0]
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	68ba      	ldr	r2, [r7, #8]
 8006c4e:	9202      	str	r2, [sp, #8]
 8006c50:	9301      	str	r3, [sp, #4]
 8006c52:	2300      	movs	r3, #0
 8006c54:	9300      	str	r3, [sp, #0]
 8006c56:	2300      	movs	r3, #0
 8006c58:	460a      	mov	r2, r1
 8006c5a:	4924      	ldr	r1, [pc, #144]	; (8006cec <vTaskStartScheduler+0xc0>)
 8006c5c:	4824      	ldr	r0, [pc, #144]	; (8006cf0 <vTaskStartScheduler+0xc4>)
 8006c5e:	f7ff fd87 	bl	8006770 <xTaskCreateStatic>
 8006c62:	4603      	mov	r3, r0
 8006c64:	4a23      	ldr	r2, [pc, #140]	; (8006cf4 <vTaskStartScheduler+0xc8>)
 8006c66:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006c68:	4b22      	ldr	r3, [pc, #136]	; (8006cf4 <vTaskStartScheduler+0xc8>)
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d002      	beq.n	8006c76 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006c70:	2301      	movs	r3, #1
 8006c72:	617b      	str	r3, [r7, #20]
 8006c74:	e001      	b.n	8006c7a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006c76:	2300      	movs	r3, #0
 8006c78:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8006c7a:	697b      	ldr	r3, [r7, #20]
 8006c7c:	2b01      	cmp	r3, #1
 8006c7e:	d102      	bne.n	8006c86 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8006c80:	f000 fdf4 	bl	800786c <xTimerCreateTimerTask>
 8006c84:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006c86:	697b      	ldr	r3, [r7, #20]
 8006c88:	2b01      	cmp	r3, #1
 8006c8a:	d11b      	bne.n	8006cc4 <vTaskStartScheduler+0x98>
	__asm volatile
 8006c8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c90:	f383 8811 	msr	BASEPRI, r3
 8006c94:	f3bf 8f6f 	isb	sy
 8006c98:	f3bf 8f4f 	dsb	sy
 8006c9c:	613b      	str	r3, [r7, #16]
}
 8006c9e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006ca0:	4b15      	ldr	r3, [pc, #84]	; (8006cf8 <vTaskStartScheduler+0xcc>)
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	3354      	adds	r3, #84	; 0x54
 8006ca6:	4a15      	ldr	r2, [pc, #84]	; (8006cfc <vTaskStartScheduler+0xd0>)
 8006ca8:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006caa:	4b15      	ldr	r3, [pc, #84]	; (8006d00 <vTaskStartScheduler+0xd4>)
 8006cac:	f04f 32ff 	mov.w	r2, #4294967295
 8006cb0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006cb2:	4b14      	ldr	r3, [pc, #80]	; (8006d04 <vTaskStartScheduler+0xd8>)
 8006cb4:	2201      	movs	r2, #1
 8006cb6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006cb8:	4b13      	ldr	r3, [pc, #76]	; (8006d08 <vTaskStartScheduler+0xdc>)
 8006cba:	2200      	movs	r2, #0
 8006cbc:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006cbe:	f001 f9af 	bl	8008020 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006cc2:	e00e      	b.n	8006ce2 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006cc4:	697b      	ldr	r3, [r7, #20]
 8006cc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006cca:	d10a      	bne.n	8006ce2 <vTaskStartScheduler+0xb6>
	__asm volatile
 8006ccc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cd0:	f383 8811 	msr	BASEPRI, r3
 8006cd4:	f3bf 8f6f 	isb	sy
 8006cd8:	f3bf 8f4f 	dsb	sy
 8006cdc:	60fb      	str	r3, [r7, #12]
}
 8006cde:	bf00      	nop
 8006ce0:	e7fe      	b.n	8006ce0 <vTaskStartScheduler+0xb4>
}
 8006ce2:	bf00      	nop
 8006ce4:	3718      	adds	r7, #24
 8006ce6:	46bd      	mov	sp, r7
 8006ce8:	bd80      	pop	{r7, pc}
 8006cea:	bf00      	nop
 8006cec:	08009850 	.word	0x08009850
 8006cf0:	08007331 	.word	0x08007331
 8006cf4:	20000f54 	.word	0x20000f54
 8006cf8:	20000a5c 	.word	0x20000a5c
 8006cfc:	20000014 	.word	0x20000014
 8006d00:	20000f50 	.word	0x20000f50
 8006d04:	20000f3c 	.word	0x20000f3c
 8006d08:	20000f34 	.word	0x20000f34

08006d0c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006d0c:	b480      	push	{r7}
 8006d0e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8006d10:	4b04      	ldr	r3, [pc, #16]	; (8006d24 <vTaskSuspendAll+0x18>)
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	3301      	adds	r3, #1
 8006d16:	4a03      	ldr	r2, [pc, #12]	; (8006d24 <vTaskSuspendAll+0x18>)
 8006d18:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8006d1a:	bf00      	nop
 8006d1c:	46bd      	mov	sp, r7
 8006d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d22:	4770      	bx	lr
 8006d24:	20000f58 	.word	0x20000f58

08006d28 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006d28:	b580      	push	{r7, lr}
 8006d2a:	b084      	sub	sp, #16
 8006d2c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006d2e:	2300      	movs	r3, #0
 8006d30:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006d32:	2300      	movs	r3, #0
 8006d34:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006d36:	4b42      	ldr	r3, [pc, #264]	; (8006e40 <xTaskResumeAll+0x118>)
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d10a      	bne.n	8006d54 <xTaskResumeAll+0x2c>
	__asm volatile
 8006d3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d42:	f383 8811 	msr	BASEPRI, r3
 8006d46:	f3bf 8f6f 	isb	sy
 8006d4a:	f3bf 8f4f 	dsb	sy
 8006d4e:	603b      	str	r3, [r7, #0]
}
 8006d50:	bf00      	nop
 8006d52:	e7fe      	b.n	8006d52 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006d54:	f001 fa06 	bl	8008164 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006d58:	4b39      	ldr	r3, [pc, #228]	; (8006e40 <xTaskResumeAll+0x118>)
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	3b01      	subs	r3, #1
 8006d5e:	4a38      	ldr	r2, [pc, #224]	; (8006e40 <xTaskResumeAll+0x118>)
 8006d60:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006d62:	4b37      	ldr	r3, [pc, #220]	; (8006e40 <xTaskResumeAll+0x118>)
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d162      	bne.n	8006e30 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006d6a:	4b36      	ldr	r3, [pc, #216]	; (8006e44 <xTaskResumeAll+0x11c>)
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d05e      	beq.n	8006e30 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006d72:	e02f      	b.n	8006dd4 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006d74:	4b34      	ldr	r3, [pc, #208]	; (8006e48 <xTaskResumeAll+0x120>)
 8006d76:	68db      	ldr	r3, [r3, #12]
 8006d78:	68db      	ldr	r3, [r3, #12]
 8006d7a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	3318      	adds	r3, #24
 8006d80:	4618      	mov	r0, r3
 8006d82:	f7fe ffdf 	bl	8005d44 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	3304      	adds	r3, #4
 8006d8a:	4618      	mov	r0, r3
 8006d8c:	f7fe ffda 	bl	8005d44 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d94:	4b2d      	ldr	r3, [pc, #180]	; (8006e4c <xTaskResumeAll+0x124>)
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	429a      	cmp	r2, r3
 8006d9a:	d903      	bls.n	8006da4 <xTaskResumeAll+0x7c>
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006da0:	4a2a      	ldr	r2, [pc, #168]	; (8006e4c <xTaskResumeAll+0x124>)
 8006da2:	6013      	str	r3, [r2, #0]
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006da8:	4613      	mov	r3, r2
 8006daa:	009b      	lsls	r3, r3, #2
 8006dac:	4413      	add	r3, r2
 8006dae:	009b      	lsls	r3, r3, #2
 8006db0:	4a27      	ldr	r2, [pc, #156]	; (8006e50 <xTaskResumeAll+0x128>)
 8006db2:	441a      	add	r2, r3
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	3304      	adds	r3, #4
 8006db8:	4619      	mov	r1, r3
 8006dba:	4610      	mov	r0, r2
 8006dbc:	f7fe ff65 	bl	8005c8a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006dc4:	4b23      	ldr	r3, [pc, #140]	; (8006e54 <xTaskResumeAll+0x12c>)
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006dca:	429a      	cmp	r2, r3
 8006dcc:	d302      	bcc.n	8006dd4 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8006dce:	4b22      	ldr	r3, [pc, #136]	; (8006e58 <xTaskResumeAll+0x130>)
 8006dd0:	2201      	movs	r2, #1
 8006dd2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006dd4:	4b1c      	ldr	r3, [pc, #112]	; (8006e48 <xTaskResumeAll+0x120>)
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d1cb      	bne.n	8006d74 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d001      	beq.n	8006de6 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006de2:	f000 fb5f 	bl	80074a4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8006de6:	4b1d      	ldr	r3, [pc, #116]	; (8006e5c <xTaskResumeAll+0x134>)
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d010      	beq.n	8006e14 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006df2:	f000 f847 	bl	8006e84 <xTaskIncrementTick>
 8006df6:	4603      	mov	r3, r0
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d002      	beq.n	8006e02 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8006dfc:	4b16      	ldr	r3, [pc, #88]	; (8006e58 <xTaskResumeAll+0x130>)
 8006dfe:	2201      	movs	r2, #1
 8006e00:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	3b01      	subs	r3, #1
 8006e06:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d1f1      	bne.n	8006df2 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8006e0e:	4b13      	ldr	r3, [pc, #76]	; (8006e5c <xTaskResumeAll+0x134>)
 8006e10:	2200      	movs	r2, #0
 8006e12:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006e14:	4b10      	ldr	r3, [pc, #64]	; (8006e58 <xTaskResumeAll+0x130>)
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d009      	beq.n	8006e30 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006e1c:	2301      	movs	r3, #1
 8006e1e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006e20:	4b0f      	ldr	r3, [pc, #60]	; (8006e60 <xTaskResumeAll+0x138>)
 8006e22:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006e26:	601a      	str	r2, [r3, #0]
 8006e28:	f3bf 8f4f 	dsb	sy
 8006e2c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006e30:	f001 f9c8 	bl	80081c4 <vPortExitCritical>

	return xAlreadyYielded;
 8006e34:	68bb      	ldr	r3, [r7, #8]
}
 8006e36:	4618      	mov	r0, r3
 8006e38:	3710      	adds	r7, #16
 8006e3a:	46bd      	mov	sp, r7
 8006e3c:	bd80      	pop	{r7, pc}
 8006e3e:	bf00      	nop
 8006e40:	20000f58 	.word	0x20000f58
 8006e44:	20000f30 	.word	0x20000f30
 8006e48:	20000ef0 	.word	0x20000ef0
 8006e4c:	20000f38 	.word	0x20000f38
 8006e50:	20000a60 	.word	0x20000a60
 8006e54:	20000a5c 	.word	0x20000a5c
 8006e58:	20000f44 	.word	0x20000f44
 8006e5c:	20000f40 	.word	0x20000f40
 8006e60:	e000ed04 	.word	0xe000ed04

08006e64 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006e64:	b480      	push	{r7}
 8006e66:	b083      	sub	sp, #12
 8006e68:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8006e6a:	4b05      	ldr	r3, [pc, #20]	; (8006e80 <xTaskGetTickCount+0x1c>)
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006e70:	687b      	ldr	r3, [r7, #4]
}
 8006e72:	4618      	mov	r0, r3
 8006e74:	370c      	adds	r7, #12
 8006e76:	46bd      	mov	sp, r7
 8006e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e7c:	4770      	bx	lr
 8006e7e:	bf00      	nop
 8006e80:	20000f34 	.word	0x20000f34

08006e84 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006e84:	b580      	push	{r7, lr}
 8006e86:	b086      	sub	sp, #24
 8006e88:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006e8a:	2300      	movs	r3, #0
 8006e8c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006e8e:	4b4f      	ldr	r3, [pc, #316]	; (8006fcc <xTaskIncrementTick+0x148>)
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	f040 808f 	bne.w	8006fb6 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006e98:	4b4d      	ldr	r3, [pc, #308]	; (8006fd0 <xTaskIncrementTick+0x14c>)
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	3301      	adds	r3, #1
 8006e9e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006ea0:	4a4b      	ldr	r2, [pc, #300]	; (8006fd0 <xTaskIncrementTick+0x14c>)
 8006ea2:	693b      	ldr	r3, [r7, #16]
 8006ea4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006ea6:	693b      	ldr	r3, [r7, #16]
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d120      	bne.n	8006eee <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8006eac:	4b49      	ldr	r3, [pc, #292]	; (8006fd4 <xTaskIncrementTick+0x150>)
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d00a      	beq.n	8006ecc <xTaskIncrementTick+0x48>
	__asm volatile
 8006eb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006eba:	f383 8811 	msr	BASEPRI, r3
 8006ebe:	f3bf 8f6f 	isb	sy
 8006ec2:	f3bf 8f4f 	dsb	sy
 8006ec6:	603b      	str	r3, [r7, #0]
}
 8006ec8:	bf00      	nop
 8006eca:	e7fe      	b.n	8006eca <xTaskIncrementTick+0x46>
 8006ecc:	4b41      	ldr	r3, [pc, #260]	; (8006fd4 <xTaskIncrementTick+0x150>)
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	60fb      	str	r3, [r7, #12]
 8006ed2:	4b41      	ldr	r3, [pc, #260]	; (8006fd8 <xTaskIncrementTick+0x154>)
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	4a3f      	ldr	r2, [pc, #252]	; (8006fd4 <xTaskIncrementTick+0x150>)
 8006ed8:	6013      	str	r3, [r2, #0]
 8006eda:	4a3f      	ldr	r2, [pc, #252]	; (8006fd8 <xTaskIncrementTick+0x154>)
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	6013      	str	r3, [r2, #0]
 8006ee0:	4b3e      	ldr	r3, [pc, #248]	; (8006fdc <xTaskIncrementTick+0x158>)
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	3301      	adds	r3, #1
 8006ee6:	4a3d      	ldr	r2, [pc, #244]	; (8006fdc <xTaskIncrementTick+0x158>)
 8006ee8:	6013      	str	r3, [r2, #0]
 8006eea:	f000 fadb 	bl	80074a4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006eee:	4b3c      	ldr	r3, [pc, #240]	; (8006fe0 <xTaskIncrementTick+0x15c>)
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	693a      	ldr	r2, [r7, #16]
 8006ef4:	429a      	cmp	r2, r3
 8006ef6:	d349      	bcc.n	8006f8c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006ef8:	4b36      	ldr	r3, [pc, #216]	; (8006fd4 <xTaskIncrementTick+0x150>)
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d104      	bne.n	8006f0c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006f02:	4b37      	ldr	r3, [pc, #220]	; (8006fe0 <xTaskIncrementTick+0x15c>)
 8006f04:	f04f 32ff 	mov.w	r2, #4294967295
 8006f08:	601a      	str	r2, [r3, #0]
					break;
 8006f0a:	e03f      	b.n	8006f8c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006f0c:	4b31      	ldr	r3, [pc, #196]	; (8006fd4 <xTaskIncrementTick+0x150>)
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	68db      	ldr	r3, [r3, #12]
 8006f12:	68db      	ldr	r3, [r3, #12]
 8006f14:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006f16:	68bb      	ldr	r3, [r7, #8]
 8006f18:	685b      	ldr	r3, [r3, #4]
 8006f1a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006f1c:	693a      	ldr	r2, [r7, #16]
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	429a      	cmp	r2, r3
 8006f22:	d203      	bcs.n	8006f2c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006f24:	4a2e      	ldr	r2, [pc, #184]	; (8006fe0 <xTaskIncrementTick+0x15c>)
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006f2a:	e02f      	b.n	8006f8c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006f2c:	68bb      	ldr	r3, [r7, #8]
 8006f2e:	3304      	adds	r3, #4
 8006f30:	4618      	mov	r0, r3
 8006f32:	f7fe ff07 	bl	8005d44 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006f36:	68bb      	ldr	r3, [r7, #8]
 8006f38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d004      	beq.n	8006f48 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006f3e:	68bb      	ldr	r3, [r7, #8]
 8006f40:	3318      	adds	r3, #24
 8006f42:	4618      	mov	r0, r3
 8006f44:	f7fe fefe 	bl	8005d44 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006f48:	68bb      	ldr	r3, [r7, #8]
 8006f4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f4c:	4b25      	ldr	r3, [pc, #148]	; (8006fe4 <xTaskIncrementTick+0x160>)
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	429a      	cmp	r2, r3
 8006f52:	d903      	bls.n	8006f5c <xTaskIncrementTick+0xd8>
 8006f54:	68bb      	ldr	r3, [r7, #8]
 8006f56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f58:	4a22      	ldr	r2, [pc, #136]	; (8006fe4 <xTaskIncrementTick+0x160>)
 8006f5a:	6013      	str	r3, [r2, #0]
 8006f5c:	68bb      	ldr	r3, [r7, #8]
 8006f5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f60:	4613      	mov	r3, r2
 8006f62:	009b      	lsls	r3, r3, #2
 8006f64:	4413      	add	r3, r2
 8006f66:	009b      	lsls	r3, r3, #2
 8006f68:	4a1f      	ldr	r2, [pc, #124]	; (8006fe8 <xTaskIncrementTick+0x164>)
 8006f6a:	441a      	add	r2, r3
 8006f6c:	68bb      	ldr	r3, [r7, #8]
 8006f6e:	3304      	adds	r3, #4
 8006f70:	4619      	mov	r1, r3
 8006f72:	4610      	mov	r0, r2
 8006f74:	f7fe fe89 	bl	8005c8a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006f78:	68bb      	ldr	r3, [r7, #8]
 8006f7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f7c:	4b1b      	ldr	r3, [pc, #108]	; (8006fec <xTaskIncrementTick+0x168>)
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f82:	429a      	cmp	r2, r3
 8006f84:	d3b8      	bcc.n	8006ef8 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8006f86:	2301      	movs	r3, #1
 8006f88:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006f8a:	e7b5      	b.n	8006ef8 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006f8c:	4b17      	ldr	r3, [pc, #92]	; (8006fec <xTaskIncrementTick+0x168>)
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f92:	4915      	ldr	r1, [pc, #84]	; (8006fe8 <xTaskIncrementTick+0x164>)
 8006f94:	4613      	mov	r3, r2
 8006f96:	009b      	lsls	r3, r3, #2
 8006f98:	4413      	add	r3, r2
 8006f9a:	009b      	lsls	r3, r3, #2
 8006f9c:	440b      	add	r3, r1
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	2b01      	cmp	r3, #1
 8006fa2:	d901      	bls.n	8006fa8 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8006fa4:	2301      	movs	r3, #1
 8006fa6:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8006fa8:	4b11      	ldr	r3, [pc, #68]	; (8006ff0 <xTaskIncrementTick+0x16c>)
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d007      	beq.n	8006fc0 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8006fb0:	2301      	movs	r3, #1
 8006fb2:	617b      	str	r3, [r7, #20]
 8006fb4:	e004      	b.n	8006fc0 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8006fb6:	4b0f      	ldr	r3, [pc, #60]	; (8006ff4 <xTaskIncrementTick+0x170>)
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	3301      	adds	r3, #1
 8006fbc:	4a0d      	ldr	r2, [pc, #52]	; (8006ff4 <xTaskIncrementTick+0x170>)
 8006fbe:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8006fc0:	697b      	ldr	r3, [r7, #20]
}
 8006fc2:	4618      	mov	r0, r3
 8006fc4:	3718      	adds	r7, #24
 8006fc6:	46bd      	mov	sp, r7
 8006fc8:	bd80      	pop	{r7, pc}
 8006fca:	bf00      	nop
 8006fcc:	20000f58 	.word	0x20000f58
 8006fd0:	20000f34 	.word	0x20000f34
 8006fd4:	20000ee8 	.word	0x20000ee8
 8006fd8:	20000eec 	.word	0x20000eec
 8006fdc:	20000f48 	.word	0x20000f48
 8006fe0:	20000f50 	.word	0x20000f50
 8006fe4:	20000f38 	.word	0x20000f38
 8006fe8:	20000a60 	.word	0x20000a60
 8006fec:	20000a5c 	.word	0x20000a5c
 8006ff0:	20000f44 	.word	0x20000f44
 8006ff4:	20000f40 	.word	0x20000f40

08006ff8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006ff8:	b480      	push	{r7}
 8006ffa:	b085      	sub	sp, #20
 8006ffc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006ffe:	4b2a      	ldr	r3, [pc, #168]	; (80070a8 <vTaskSwitchContext+0xb0>)
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	2b00      	cmp	r3, #0
 8007004:	d003      	beq.n	800700e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007006:	4b29      	ldr	r3, [pc, #164]	; (80070ac <vTaskSwitchContext+0xb4>)
 8007008:	2201      	movs	r2, #1
 800700a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800700c:	e046      	b.n	800709c <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800700e:	4b27      	ldr	r3, [pc, #156]	; (80070ac <vTaskSwitchContext+0xb4>)
 8007010:	2200      	movs	r2, #0
 8007012:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007014:	4b26      	ldr	r3, [pc, #152]	; (80070b0 <vTaskSwitchContext+0xb8>)
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	60fb      	str	r3, [r7, #12]
 800701a:	e010      	b.n	800703e <vTaskSwitchContext+0x46>
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	2b00      	cmp	r3, #0
 8007020:	d10a      	bne.n	8007038 <vTaskSwitchContext+0x40>
	__asm volatile
 8007022:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007026:	f383 8811 	msr	BASEPRI, r3
 800702a:	f3bf 8f6f 	isb	sy
 800702e:	f3bf 8f4f 	dsb	sy
 8007032:	607b      	str	r3, [r7, #4]
}
 8007034:	bf00      	nop
 8007036:	e7fe      	b.n	8007036 <vTaskSwitchContext+0x3e>
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	3b01      	subs	r3, #1
 800703c:	60fb      	str	r3, [r7, #12]
 800703e:	491d      	ldr	r1, [pc, #116]	; (80070b4 <vTaskSwitchContext+0xbc>)
 8007040:	68fa      	ldr	r2, [r7, #12]
 8007042:	4613      	mov	r3, r2
 8007044:	009b      	lsls	r3, r3, #2
 8007046:	4413      	add	r3, r2
 8007048:	009b      	lsls	r3, r3, #2
 800704a:	440b      	add	r3, r1
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	2b00      	cmp	r3, #0
 8007050:	d0e4      	beq.n	800701c <vTaskSwitchContext+0x24>
 8007052:	68fa      	ldr	r2, [r7, #12]
 8007054:	4613      	mov	r3, r2
 8007056:	009b      	lsls	r3, r3, #2
 8007058:	4413      	add	r3, r2
 800705a:	009b      	lsls	r3, r3, #2
 800705c:	4a15      	ldr	r2, [pc, #84]	; (80070b4 <vTaskSwitchContext+0xbc>)
 800705e:	4413      	add	r3, r2
 8007060:	60bb      	str	r3, [r7, #8]
 8007062:	68bb      	ldr	r3, [r7, #8]
 8007064:	685b      	ldr	r3, [r3, #4]
 8007066:	685a      	ldr	r2, [r3, #4]
 8007068:	68bb      	ldr	r3, [r7, #8]
 800706a:	605a      	str	r2, [r3, #4]
 800706c:	68bb      	ldr	r3, [r7, #8]
 800706e:	685a      	ldr	r2, [r3, #4]
 8007070:	68bb      	ldr	r3, [r7, #8]
 8007072:	3308      	adds	r3, #8
 8007074:	429a      	cmp	r2, r3
 8007076:	d104      	bne.n	8007082 <vTaskSwitchContext+0x8a>
 8007078:	68bb      	ldr	r3, [r7, #8]
 800707a:	685b      	ldr	r3, [r3, #4]
 800707c:	685a      	ldr	r2, [r3, #4]
 800707e:	68bb      	ldr	r3, [r7, #8]
 8007080:	605a      	str	r2, [r3, #4]
 8007082:	68bb      	ldr	r3, [r7, #8]
 8007084:	685b      	ldr	r3, [r3, #4]
 8007086:	68db      	ldr	r3, [r3, #12]
 8007088:	4a0b      	ldr	r2, [pc, #44]	; (80070b8 <vTaskSwitchContext+0xc0>)
 800708a:	6013      	str	r3, [r2, #0]
 800708c:	4a08      	ldr	r2, [pc, #32]	; (80070b0 <vTaskSwitchContext+0xb8>)
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007092:	4b09      	ldr	r3, [pc, #36]	; (80070b8 <vTaskSwitchContext+0xc0>)
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	3354      	adds	r3, #84	; 0x54
 8007098:	4a08      	ldr	r2, [pc, #32]	; (80070bc <vTaskSwitchContext+0xc4>)
 800709a:	6013      	str	r3, [r2, #0]
}
 800709c:	bf00      	nop
 800709e:	3714      	adds	r7, #20
 80070a0:	46bd      	mov	sp, r7
 80070a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070a6:	4770      	bx	lr
 80070a8:	20000f58 	.word	0x20000f58
 80070ac:	20000f44 	.word	0x20000f44
 80070b0:	20000f38 	.word	0x20000f38
 80070b4:	20000a60 	.word	0x20000a60
 80070b8:	20000a5c 	.word	0x20000a5c
 80070bc:	20000014 	.word	0x20000014

080070c0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80070c0:	b580      	push	{r7, lr}
 80070c2:	b084      	sub	sp, #16
 80070c4:	af00      	add	r7, sp, #0
 80070c6:	6078      	str	r0, [r7, #4]
 80070c8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d10a      	bne.n	80070e6 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80070d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070d4:	f383 8811 	msr	BASEPRI, r3
 80070d8:	f3bf 8f6f 	isb	sy
 80070dc:	f3bf 8f4f 	dsb	sy
 80070e0:	60fb      	str	r3, [r7, #12]
}
 80070e2:	bf00      	nop
 80070e4:	e7fe      	b.n	80070e4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80070e6:	4b07      	ldr	r3, [pc, #28]	; (8007104 <vTaskPlaceOnEventList+0x44>)
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	3318      	adds	r3, #24
 80070ec:	4619      	mov	r1, r3
 80070ee:	6878      	ldr	r0, [r7, #4]
 80070f0:	f7fe fdef 	bl	8005cd2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80070f4:	2101      	movs	r1, #1
 80070f6:	6838      	ldr	r0, [r7, #0]
 80070f8:	f000 fb64 	bl	80077c4 <prvAddCurrentTaskToDelayedList>
}
 80070fc:	bf00      	nop
 80070fe:	3710      	adds	r7, #16
 8007100:	46bd      	mov	sp, r7
 8007102:	bd80      	pop	{r7, pc}
 8007104:	20000a5c 	.word	0x20000a5c

08007108 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007108:	b580      	push	{r7, lr}
 800710a:	b086      	sub	sp, #24
 800710c:	af00      	add	r7, sp, #0
 800710e:	60f8      	str	r0, [r7, #12]
 8007110:	60b9      	str	r1, [r7, #8]
 8007112:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	2b00      	cmp	r3, #0
 8007118:	d10a      	bne.n	8007130 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800711a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800711e:	f383 8811 	msr	BASEPRI, r3
 8007122:	f3bf 8f6f 	isb	sy
 8007126:	f3bf 8f4f 	dsb	sy
 800712a:	617b      	str	r3, [r7, #20]
}
 800712c:	bf00      	nop
 800712e:	e7fe      	b.n	800712e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007130:	4b0a      	ldr	r3, [pc, #40]	; (800715c <vTaskPlaceOnEventListRestricted+0x54>)
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	3318      	adds	r3, #24
 8007136:	4619      	mov	r1, r3
 8007138:	68f8      	ldr	r0, [r7, #12]
 800713a:	f7fe fda6 	bl	8005c8a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	2b00      	cmp	r3, #0
 8007142:	d002      	beq.n	800714a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8007144:	f04f 33ff 	mov.w	r3, #4294967295
 8007148:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800714a:	6879      	ldr	r1, [r7, #4]
 800714c:	68b8      	ldr	r0, [r7, #8]
 800714e:	f000 fb39 	bl	80077c4 <prvAddCurrentTaskToDelayedList>
	}
 8007152:	bf00      	nop
 8007154:	3718      	adds	r7, #24
 8007156:	46bd      	mov	sp, r7
 8007158:	bd80      	pop	{r7, pc}
 800715a:	bf00      	nop
 800715c:	20000a5c 	.word	0x20000a5c

08007160 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007160:	b580      	push	{r7, lr}
 8007162:	b086      	sub	sp, #24
 8007164:	af00      	add	r7, sp, #0
 8007166:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	68db      	ldr	r3, [r3, #12]
 800716c:	68db      	ldr	r3, [r3, #12]
 800716e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007170:	693b      	ldr	r3, [r7, #16]
 8007172:	2b00      	cmp	r3, #0
 8007174:	d10a      	bne.n	800718c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8007176:	f04f 0350 	mov.w	r3, #80	; 0x50
 800717a:	f383 8811 	msr	BASEPRI, r3
 800717e:	f3bf 8f6f 	isb	sy
 8007182:	f3bf 8f4f 	dsb	sy
 8007186:	60fb      	str	r3, [r7, #12]
}
 8007188:	bf00      	nop
 800718a:	e7fe      	b.n	800718a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800718c:	693b      	ldr	r3, [r7, #16]
 800718e:	3318      	adds	r3, #24
 8007190:	4618      	mov	r0, r3
 8007192:	f7fe fdd7 	bl	8005d44 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007196:	4b1e      	ldr	r3, [pc, #120]	; (8007210 <xTaskRemoveFromEventList+0xb0>)
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	2b00      	cmp	r3, #0
 800719c:	d11d      	bne.n	80071da <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800719e:	693b      	ldr	r3, [r7, #16]
 80071a0:	3304      	adds	r3, #4
 80071a2:	4618      	mov	r0, r3
 80071a4:	f7fe fdce 	bl	8005d44 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80071a8:	693b      	ldr	r3, [r7, #16]
 80071aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80071ac:	4b19      	ldr	r3, [pc, #100]	; (8007214 <xTaskRemoveFromEventList+0xb4>)
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	429a      	cmp	r2, r3
 80071b2:	d903      	bls.n	80071bc <xTaskRemoveFromEventList+0x5c>
 80071b4:	693b      	ldr	r3, [r7, #16]
 80071b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071b8:	4a16      	ldr	r2, [pc, #88]	; (8007214 <xTaskRemoveFromEventList+0xb4>)
 80071ba:	6013      	str	r3, [r2, #0]
 80071bc:	693b      	ldr	r3, [r7, #16]
 80071be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80071c0:	4613      	mov	r3, r2
 80071c2:	009b      	lsls	r3, r3, #2
 80071c4:	4413      	add	r3, r2
 80071c6:	009b      	lsls	r3, r3, #2
 80071c8:	4a13      	ldr	r2, [pc, #76]	; (8007218 <xTaskRemoveFromEventList+0xb8>)
 80071ca:	441a      	add	r2, r3
 80071cc:	693b      	ldr	r3, [r7, #16]
 80071ce:	3304      	adds	r3, #4
 80071d0:	4619      	mov	r1, r3
 80071d2:	4610      	mov	r0, r2
 80071d4:	f7fe fd59 	bl	8005c8a <vListInsertEnd>
 80071d8:	e005      	b.n	80071e6 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80071da:	693b      	ldr	r3, [r7, #16]
 80071dc:	3318      	adds	r3, #24
 80071de:	4619      	mov	r1, r3
 80071e0:	480e      	ldr	r0, [pc, #56]	; (800721c <xTaskRemoveFromEventList+0xbc>)
 80071e2:	f7fe fd52 	bl	8005c8a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80071e6:	693b      	ldr	r3, [r7, #16]
 80071e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80071ea:	4b0d      	ldr	r3, [pc, #52]	; (8007220 <xTaskRemoveFromEventList+0xc0>)
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071f0:	429a      	cmp	r2, r3
 80071f2:	d905      	bls.n	8007200 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80071f4:	2301      	movs	r3, #1
 80071f6:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80071f8:	4b0a      	ldr	r3, [pc, #40]	; (8007224 <xTaskRemoveFromEventList+0xc4>)
 80071fa:	2201      	movs	r2, #1
 80071fc:	601a      	str	r2, [r3, #0]
 80071fe:	e001      	b.n	8007204 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8007200:	2300      	movs	r3, #0
 8007202:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8007204:	697b      	ldr	r3, [r7, #20]
}
 8007206:	4618      	mov	r0, r3
 8007208:	3718      	adds	r7, #24
 800720a:	46bd      	mov	sp, r7
 800720c:	bd80      	pop	{r7, pc}
 800720e:	bf00      	nop
 8007210:	20000f58 	.word	0x20000f58
 8007214:	20000f38 	.word	0x20000f38
 8007218:	20000a60 	.word	0x20000a60
 800721c:	20000ef0 	.word	0x20000ef0
 8007220:	20000a5c 	.word	0x20000a5c
 8007224:	20000f44 	.word	0x20000f44

08007228 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007228:	b480      	push	{r7}
 800722a:	b083      	sub	sp, #12
 800722c:	af00      	add	r7, sp, #0
 800722e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007230:	4b06      	ldr	r3, [pc, #24]	; (800724c <vTaskInternalSetTimeOutState+0x24>)
 8007232:	681a      	ldr	r2, [r3, #0]
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007238:	4b05      	ldr	r3, [pc, #20]	; (8007250 <vTaskInternalSetTimeOutState+0x28>)
 800723a:	681a      	ldr	r2, [r3, #0]
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	605a      	str	r2, [r3, #4]
}
 8007240:	bf00      	nop
 8007242:	370c      	adds	r7, #12
 8007244:	46bd      	mov	sp, r7
 8007246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800724a:	4770      	bx	lr
 800724c:	20000f48 	.word	0x20000f48
 8007250:	20000f34 	.word	0x20000f34

08007254 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007254:	b580      	push	{r7, lr}
 8007256:	b088      	sub	sp, #32
 8007258:	af00      	add	r7, sp, #0
 800725a:	6078      	str	r0, [r7, #4]
 800725c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	2b00      	cmp	r3, #0
 8007262:	d10a      	bne.n	800727a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8007264:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007268:	f383 8811 	msr	BASEPRI, r3
 800726c:	f3bf 8f6f 	isb	sy
 8007270:	f3bf 8f4f 	dsb	sy
 8007274:	613b      	str	r3, [r7, #16]
}
 8007276:	bf00      	nop
 8007278:	e7fe      	b.n	8007278 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800727a:	683b      	ldr	r3, [r7, #0]
 800727c:	2b00      	cmp	r3, #0
 800727e:	d10a      	bne.n	8007296 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8007280:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007284:	f383 8811 	msr	BASEPRI, r3
 8007288:	f3bf 8f6f 	isb	sy
 800728c:	f3bf 8f4f 	dsb	sy
 8007290:	60fb      	str	r3, [r7, #12]
}
 8007292:	bf00      	nop
 8007294:	e7fe      	b.n	8007294 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8007296:	f000 ff65 	bl	8008164 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800729a:	4b1d      	ldr	r3, [pc, #116]	; (8007310 <xTaskCheckForTimeOut+0xbc>)
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	685b      	ldr	r3, [r3, #4]
 80072a4:	69ba      	ldr	r2, [r7, #24]
 80072a6:	1ad3      	subs	r3, r2, r3
 80072a8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80072aa:	683b      	ldr	r3, [r7, #0]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80072b2:	d102      	bne.n	80072ba <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80072b4:	2300      	movs	r3, #0
 80072b6:	61fb      	str	r3, [r7, #28]
 80072b8:	e023      	b.n	8007302 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	681a      	ldr	r2, [r3, #0]
 80072be:	4b15      	ldr	r3, [pc, #84]	; (8007314 <xTaskCheckForTimeOut+0xc0>)
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	429a      	cmp	r2, r3
 80072c4:	d007      	beq.n	80072d6 <xTaskCheckForTimeOut+0x82>
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	685b      	ldr	r3, [r3, #4]
 80072ca:	69ba      	ldr	r2, [r7, #24]
 80072cc:	429a      	cmp	r2, r3
 80072ce:	d302      	bcc.n	80072d6 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80072d0:	2301      	movs	r3, #1
 80072d2:	61fb      	str	r3, [r7, #28]
 80072d4:	e015      	b.n	8007302 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80072d6:	683b      	ldr	r3, [r7, #0]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	697a      	ldr	r2, [r7, #20]
 80072dc:	429a      	cmp	r2, r3
 80072de:	d20b      	bcs.n	80072f8 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80072e0:	683b      	ldr	r3, [r7, #0]
 80072e2:	681a      	ldr	r2, [r3, #0]
 80072e4:	697b      	ldr	r3, [r7, #20]
 80072e6:	1ad2      	subs	r2, r2, r3
 80072e8:	683b      	ldr	r3, [r7, #0]
 80072ea:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80072ec:	6878      	ldr	r0, [r7, #4]
 80072ee:	f7ff ff9b 	bl	8007228 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80072f2:	2300      	movs	r3, #0
 80072f4:	61fb      	str	r3, [r7, #28]
 80072f6:	e004      	b.n	8007302 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80072f8:	683b      	ldr	r3, [r7, #0]
 80072fa:	2200      	movs	r2, #0
 80072fc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80072fe:	2301      	movs	r3, #1
 8007300:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8007302:	f000 ff5f 	bl	80081c4 <vPortExitCritical>

	return xReturn;
 8007306:	69fb      	ldr	r3, [r7, #28]
}
 8007308:	4618      	mov	r0, r3
 800730a:	3720      	adds	r7, #32
 800730c:	46bd      	mov	sp, r7
 800730e:	bd80      	pop	{r7, pc}
 8007310:	20000f34 	.word	0x20000f34
 8007314:	20000f48 	.word	0x20000f48

08007318 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007318:	b480      	push	{r7}
 800731a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800731c:	4b03      	ldr	r3, [pc, #12]	; (800732c <vTaskMissedYield+0x14>)
 800731e:	2201      	movs	r2, #1
 8007320:	601a      	str	r2, [r3, #0]
}
 8007322:	bf00      	nop
 8007324:	46bd      	mov	sp, r7
 8007326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800732a:	4770      	bx	lr
 800732c:	20000f44 	.word	0x20000f44

08007330 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007330:	b580      	push	{r7, lr}
 8007332:	b082      	sub	sp, #8
 8007334:	af00      	add	r7, sp, #0
 8007336:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007338:	f000 f852 	bl	80073e0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800733c:	4b06      	ldr	r3, [pc, #24]	; (8007358 <prvIdleTask+0x28>)
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	2b01      	cmp	r3, #1
 8007342:	d9f9      	bls.n	8007338 <prvIdleTask+0x8>
			{
				taskYIELD();
 8007344:	4b05      	ldr	r3, [pc, #20]	; (800735c <prvIdleTask+0x2c>)
 8007346:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800734a:	601a      	str	r2, [r3, #0]
 800734c:	f3bf 8f4f 	dsb	sy
 8007350:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007354:	e7f0      	b.n	8007338 <prvIdleTask+0x8>
 8007356:	bf00      	nop
 8007358:	20000a60 	.word	0x20000a60
 800735c:	e000ed04 	.word	0xe000ed04

08007360 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007360:	b580      	push	{r7, lr}
 8007362:	b082      	sub	sp, #8
 8007364:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007366:	2300      	movs	r3, #0
 8007368:	607b      	str	r3, [r7, #4]
 800736a:	e00c      	b.n	8007386 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800736c:	687a      	ldr	r2, [r7, #4]
 800736e:	4613      	mov	r3, r2
 8007370:	009b      	lsls	r3, r3, #2
 8007372:	4413      	add	r3, r2
 8007374:	009b      	lsls	r3, r3, #2
 8007376:	4a12      	ldr	r2, [pc, #72]	; (80073c0 <prvInitialiseTaskLists+0x60>)
 8007378:	4413      	add	r3, r2
 800737a:	4618      	mov	r0, r3
 800737c:	f7fe fc58 	bl	8005c30 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	3301      	adds	r3, #1
 8007384:	607b      	str	r3, [r7, #4]
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	2b37      	cmp	r3, #55	; 0x37
 800738a:	d9ef      	bls.n	800736c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800738c:	480d      	ldr	r0, [pc, #52]	; (80073c4 <prvInitialiseTaskLists+0x64>)
 800738e:	f7fe fc4f 	bl	8005c30 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007392:	480d      	ldr	r0, [pc, #52]	; (80073c8 <prvInitialiseTaskLists+0x68>)
 8007394:	f7fe fc4c 	bl	8005c30 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007398:	480c      	ldr	r0, [pc, #48]	; (80073cc <prvInitialiseTaskLists+0x6c>)
 800739a:	f7fe fc49 	bl	8005c30 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800739e:	480c      	ldr	r0, [pc, #48]	; (80073d0 <prvInitialiseTaskLists+0x70>)
 80073a0:	f7fe fc46 	bl	8005c30 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80073a4:	480b      	ldr	r0, [pc, #44]	; (80073d4 <prvInitialiseTaskLists+0x74>)
 80073a6:	f7fe fc43 	bl	8005c30 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80073aa:	4b0b      	ldr	r3, [pc, #44]	; (80073d8 <prvInitialiseTaskLists+0x78>)
 80073ac:	4a05      	ldr	r2, [pc, #20]	; (80073c4 <prvInitialiseTaskLists+0x64>)
 80073ae:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80073b0:	4b0a      	ldr	r3, [pc, #40]	; (80073dc <prvInitialiseTaskLists+0x7c>)
 80073b2:	4a05      	ldr	r2, [pc, #20]	; (80073c8 <prvInitialiseTaskLists+0x68>)
 80073b4:	601a      	str	r2, [r3, #0]
}
 80073b6:	bf00      	nop
 80073b8:	3708      	adds	r7, #8
 80073ba:	46bd      	mov	sp, r7
 80073bc:	bd80      	pop	{r7, pc}
 80073be:	bf00      	nop
 80073c0:	20000a60 	.word	0x20000a60
 80073c4:	20000ec0 	.word	0x20000ec0
 80073c8:	20000ed4 	.word	0x20000ed4
 80073cc:	20000ef0 	.word	0x20000ef0
 80073d0:	20000f04 	.word	0x20000f04
 80073d4:	20000f1c 	.word	0x20000f1c
 80073d8:	20000ee8 	.word	0x20000ee8
 80073dc:	20000eec 	.word	0x20000eec

080073e0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80073e0:	b580      	push	{r7, lr}
 80073e2:	b082      	sub	sp, #8
 80073e4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80073e6:	e019      	b.n	800741c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80073e8:	f000 febc 	bl	8008164 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80073ec:	4b10      	ldr	r3, [pc, #64]	; (8007430 <prvCheckTasksWaitingTermination+0x50>)
 80073ee:	68db      	ldr	r3, [r3, #12]
 80073f0:	68db      	ldr	r3, [r3, #12]
 80073f2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	3304      	adds	r3, #4
 80073f8:	4618      	mov	r0, r3
 80073fa:	f7fe fca3 	bl	8005d44 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80073fe:	4b0d      	ldr	r3, [pc, #52]	; (8007434 <prvCheckTasksWaitingTermination+0x54>)
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	3b01      	subs	r3, #1
 8007404:	4a0b      	ldr	r2, [pc, #44]	; (8007434 <prvCheckTasksWaitingTermination+0x54>)
 8007406:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007408:	4b0b      	ldr	r3, [pc, #44]	; (8007438 <prvCheckTasksWaitingTermination+0x58>)
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	3b01      	subs	r3, #1
 800740e:	4a0a      	ldr	r2, [pc, #40]	; (8007438 <prvCheckTasksWaitingTermination+0x58>)
 8007410:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007412:	f000 fed7 	bl	80081c4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007416:	6878      	ldr	r0, [r7, #4]
 8007418:	f000 f810 	bl	800743c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800741c:	4b06      	ldr	r3, [pc, #24]	; (8007438 <prvCheckTasksWaitingTermination+0x58>)
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	2b00      	cmp	r3, #0
 8007422:	d1e1      	bne.n	80073e8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007424:	bf00      	nop
 8007426:	bf00      	nop
 8007428:	3708      	adds	r7, #8
 800742a:	46bd      	mov	sp, r7
 800742c:	bd80      	pop	{r7, pc}
 800742e:	bf00      	nop
 8007430:	20000f04 	.word	0x20000f04
 8007434:	20000f30 	.word	0x20000f30
 8007438:	20000f18 	.word	0x20000f18

0800743c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800743c:	b580      	push	{r7, lr}
 800743e:	b084      	sub	sp, #16
 8007440:	af00      	add	r7, sp, #0
 8007442:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	3354      	adds	r3, #84	; 0x54
 8007448:	4618      	mov	r0, r3
 800744a:	f001 fb8b 	bl	8008b64 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8007454:	2b00      	cmp	r3, #0
 8007456:	d108      	bne.n	800746a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800745c:	4618      	mov	r0, r3
 800745e:	f001 f86f 	bl	8008540 <vPortFree>
				vPortFree( pxTCB );
 8007462:	6878      	ldr	r0, [r7, #4]
 8007464:	f001 f86c 	bl	8008540 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007468:	e018      	b.n	800749c <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8007470:	2b01      	cmp	r3, #1
 8007472:	d103      	bne.n	800747c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8007474:	6878      	ldr	r0, [r7, #4]
 8007476:	f001 f863 	bl	8008540 <vPortFree>
	}
 800747a:	e00f      	b.n	800749c <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8007482:	2b02      	cmp	r3, #2
 8007484:	d00a      	beq.n	800749c <prvDeleteTCB+0x60>
	__asm volatile
 8007486:	f04f 0350 	mov.w	r3, #80	; 0x50
 800748a:	f383 8811 	msr	BASEPRI, r3
 800748e:	f3bf 8f6f 	isb	sy
 8007492:	f3bf 8f4f 	dsb	sy
 8007496:	60fb      	str	r3, [r7, #12]
}
 8007498:	bf00      	nop
 800749a:	e7fe      	b.n	800749a <prvDeleteTCB+0x5e>
	}
 800749c:	bf00      	nop
 800749e:	3710      	adds	r7, #16
 80074a0:	46bd      	mov	sp, r7
 80074a2:	bd80      	pop	{r7, pc}

080074a4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80074a4:	b480      	push	{r7}
 80074a6:	b083      	sub	sp, #12
 80074a8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80074aa:	4b0c      	ldr	r3, [pc, #48]	; (80074dc <prvResetNextTaskUnblockTime+0x38>)
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d104      	bne.n	80074be <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80074b4:	4b0a      	ldr	r3, [pc, #40]	; (80074e0 <prvResetNextTaskUnblockTime+0x3c>)
 80074b6:	f04f 32ff 	mov.w	r2, #4294967295
 80074ba:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80074bc:	e008      	b.n	80074d0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80074be:	4b07      	ldr	r3, [pc, #28]	; (80074dc <prvResetNextTaskUnblockTime+0x38>)
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	68db      	ldr	r3, [r3, #12]
 80074c4:	68db      	ldr	r3, [r3, #12]
 80074c6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	685b      	ldr	r3, [r3, #4]
 80074cc:	4a04      	ldr	r2, [pc, #16]	; (80074e0 <prvResetNextTaskUnblockTime+0x3c>)
 80074ce:	6013      	str	r3, [r2, #0]
}
 80074d0:	bf00      	nop
 80074d2:	370c      	adds	r7, #12
 80074d4:	46bd      	mov	sp, r7
 80074d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074da:	4770      	bx	lr
 80074dc:	20000ee8 	.word	0x20000ee8
 80074e0:	20000f50 	.word	0x20000f50

080074e4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80074e4:	b480      	push	{r7}
 80074e6:	b083      	sub	sp, #12
 80074e8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80074ea:	4b0b      	ldr	r3, [pc, #44]	; (8007518 <xTaskGetSchedulerState+0x34>)
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d102      	bne.n	80074f8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80074f2:	2301      	movs	r3, #1
 80074f4:	607b      	str	r3, [r7, #4]
 80074f6:	e008      	b.n	800750a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80074f8:	4b08      	ldr	r3, [pc, #32]	; (800751c <xTaskGetSchedulerState+0x38>)
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d102      	bne.n	8007506 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007500:	2302      	movs	r3, #2
 8007502:	607b      	str	r3, [r7, #4]
 8007504:	e001      	b.n	800750a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8007506:	2300      	movs	r3, #0
 8007508:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800750a:	687b      	ldr	r3, [r7, #4]
	}
 800750c:	4618      	mov	r0, r3
 800750e:	370c      	adds	r7, #12
 8007510:	46bd      	mov	sp, r7
 8007512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007516:	4770      	bx	lr
 8007518:	20000f3c 	.word	0x20000f3c
 800751c:	20000f58 	.word	0x20000f58

08007520 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007520:	b580      	push	{r7, lr}
 8007522:	b086      	sub	sp, #24
 8007524:	af00      	add	r7, sp, #0
 8007526:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800752c:	2300      	movs	r3, #0
 800752e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	2b00      	cmp	r3, #0
 8007534:	d056      	beq.n	80075e4 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8007536:	4b2e      	ldr	r3, [pc, #184]	; (80075f0 <xTaskPriorityDisinherit+0xd0>)
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	693a      	ldr	r2, [r7, #16]
 800753c:	429a      	cmp	r2, r3
 800753e:	d00a      	beq.n	8007556 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8007540:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007544:	f383 8811 	msr	BASEPRI, r3
 8007548:	f3bf 8f6f 	isb	sy
 800754c:	f3bf 8f4f 	dsb	sy
 8007550:	60fb      	str	r3, [r7, #12]
}
 8007552:	bf00      	nop
 8007554:	e7fe      	b.n	8007554 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8007556:	693b      	ldr	r3, [r7, #16]
 8007558:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800755a:	2b00      	cmp	r3, #0
 800755c:	d10a      	bne.n	8007574 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800755e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007562:	f383 8811 	msr	BASEPRI, r3
 8007566:	f3bf 8f6f 	isb	sy
 800756a:	f3bf 8f4f 	dsb	sy
 800756e:	60bb      	str	r3, [r7, #8]
}
 8007570:	bf00      	nop
 8007572:	e7fe      	b.n	8007572 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8007574:	693b      	ldr	r3, [r7, #16]
 8007576:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007578:	1e5a      	subs	r2, r3, #1
 800757a:	693b      	ldr	r3, [r7, #16]
 800757c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800757e:	693b      	ldr	r3, [r7, #16]
 8007580:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007582:	693b      	ldr	r3, [r7, #16]
 8007584:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007586:	429a      	cmp	r2, r3
 8007588:	d02c      	beq.n	80075e4 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800758a:	693b      	ldr	r3, [r7, #16]
 800758c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800758e:	2b00      	cmp	r3, #0
 8007590:	d128      	bne.n	80075e4 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007592:	693b      	ldr	r3, [r7, #16]
 8007594:	3304      	adds	r3, #4
 8007596:	4618      	mov	r0, r3
 8007598:	f7fe fbd4 	bl	8005d44 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800759c:	693b      	ldr	r3, [r7, #16]
 800759e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80075a0:	693b      	ldr	r3, [r7, #16]
 80075a2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80075a4:	693b      	ldr	r3, [r7, #16]
 80075a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075a8:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80075ac:	693b      	ldr	r3, [r7, #16]
 80075ae:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80075b0:	693b      	ldr	r3, [r7, #16]
 80075b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80075b4:	4b0f      	ldr	r3, [pc, #60]	; (80075f4 <xTaskPriorityDisinherit+0xd4>)
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	429a      	cmp	r2, r3
 80075ba:	d903      	bls.n	80075c4 <xTaskPriorityDisinherit+0xa4>
 80075bc:	693b      	ldr	r3, [r7, #16]
 80075be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075c0:	4a0c      	ldr	r2, [pc, #48]	; (80075f4 <xTaskPriorityDisinherit+0xd4>)
 80075c2:	6013      	str	r3, [r2, #0]
 80075c4:	693b      	ldr	r3, [r7, #16]
 80075c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80075c8:	4613      	mov	r3, r2
 80075ca:	009b      	lsls	r3, r3, #2
 80075cc:	4413      	add	r3, r2
 80075ce:	009b      	lsls	r3, r3, #2
 80075d0:	4a09      	ldr	r2, [pc, #36]	; (80075f8 <xTaskPriorityDisinherit+0xd8>)
 80075d2:	441a      	add	r2, r3
 80075d4:	693b      	ldr	r3, [r7, #16]
 80075d6:	3304      	adds	r3, #4
 80075d8:	4619      	mov	r1, r3
 80075da:	4610      	mov	r0, r2
 80075dc:	f7fe fb55 	bl	8005c8a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80075e0:	2301      	movs	r3, #1
 80075e2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80075e4:	697b      	ldr	r3, [r7, #20]
	}
 80075e6:	4618      	mov	r0, r3
 80075e8:	3718      	adds	r7, #24
 80075ea:	46bd      	mov	sp, r7
 80075ec:	bd80      	pop	{r7, pc}
 80075ee:	bf00      	nop
 80075f0:	20000a5c 	.word	0x20000a5c
 80075f4:	20000f38 	.word	0x20000f38
 80075f8:	20000a60 	.word	0x20000a60

080075fc <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 80075fc:	b580      	push	{r7, lr}
 80075fe:	b08e      	sub	sp, #56	; 0x38
 8007600:	af00      	add	r7, sp, #0
 8007602:	60f8      	str	r0, [r7, #12]
 8007604:	60b9      	str	r1, [r7, #8]
 8007606:	603b      	str	r3, [r7, #0]
 8007608:	4613      	mov	r3, r2
 800760a:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 800760c:	2301      	movs	r3, #1
 800760e:	637b      	str	r3, [r7, #52]	; 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	2b00      	cmp	r3, #0
 8007614:	d10a      	bne.n	800762c <xTaskGenericNotifyFromISR+0x30>
	__asm volatile
 8007616:	f04f 0350 	mov.w	r3, #80	; 0x50
 800761a:	f383 8811 	msr	BASEPRI, r3
 800761e:	f3bf 8f6f 	isb	sy
 8007622:	f3bf 8f4f 	dsb	sy
 8007626:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007628:	bf00      	nop
 800762a:	e7fe      	b.n	800762a <xTaskGenericNotifyFromISR+0x2e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800762c:	f000 fe7c 	bl	8008328 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	633b      	str	r3, [r7, #48]	; 0x30
	__asm volatile
 8007634:	f3ef 8211 	mrs	r2, BASEPRI
 8007638:	f04f 0350 	mov.w	r3, #80	; 0x50
 800763c:	f383 8811 	msr	BASEPRI, r3
 8007640:	f3bf 8f6f 	isb	sy
 8007644:	f3bf 8f4f 	dsb	sy
 8007648:	623a      	str	r2, [r7, #32]
 800764a:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 800764c:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800764e:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 8007650:	683b      	ldr	r3, [r7, #0]
 8007652:	2b00      	cmp	r3, #0
 8007654:	d004      	beq.n	8007660 <xTaskGenericNotifyFromISR+0x64>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8007656:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007658:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 800765c:	683b      	ldr	r3, [r7, #0]
 800765e:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8007660:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007662:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 8007666:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800766a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800766c:	2202      	movs	r2, #2
 800766e:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8

			switch( eAction )
 8007672:	79fb      	ldrb	r3, [r7, #7]
 8007674:	2b04      	cmp	r3, #4
 8007676:	d82f      	bhi.n	80076d8 <xTaskGenericNotifyFromISR+0xdc>
 8007678:	a201      	add	r2, pc, #4	; (adr r2, 8007680 <xTaskGenericNotifyFromISR+0x84>)
 800767a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800767e:	bf00      	nop
 8007680:	080076fb 	.word	0x080076fb
 8007684:	08007695 	.word	0x08007695
 8007688:	080076a7 	.word	0x080076a7
 800768c:	080076b7 	.word	0x080076b7
 8007690:	080076c1 	.word	0x080076c1
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8007694:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007696:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 800769a:	68bb      	ldr	r3, [r7, #8]
 800769c:	431a      	orrs	r2, r3
 800769e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076a0:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					break;
 80076a4:	e02c      	b.n	8007700 <xTaskGenericNotifyFromISR+0x104>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 80076a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076a8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80076ac:	1c5a      	adds	r2, r3, #1
 80076ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076b0:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					break;
 80076b4:	e024      	b.n	8007700 <xTaskGenericNotifyFromISR+0x104>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 80076b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076b8:	68ba      	ldr	r2, [r7, #8]
 80076ba:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					break;
 80076be:	e01f      	b.n	8007700 <xTaskGenericNotifyFromISR+0x104>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 80076c0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80076c4:	2b02      	cmp	r3, #2
 80076c6:	d004      	beq.n	80076d2 <xTaskGenericNotifyFromISR+0xd6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 80076c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076ca:	68ba      	ldr	r2, [r7, #8]
 80076cc:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 80076d0:	e016      	b.n	8007700 <xTaskGenericNotifyFromISR+0x104>
						xReturn = pdFAIL;
 80076d2:	2300      	movs	r3, #0
 80076d4:	637b      	str	r3, [r7, #52]	; 0x34
					break;
 80076d6:	e013      	b.n	8007700 <xTaskGenericNotifyFromISR+0x104>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 80076d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076da:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80076de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80076e2:	d00c      	beq.n	80076fe <xTaskGenericNotifyFromISR+0x102>
	__asm volatile
 80076e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076e8:	f383 8811 	msr	BASEPRI, r3
 80076ec:	f3bf 8f6f 	isb	sy
 80076f0:	f3bf 8f4f 	dsb	sy
 80076f4:	61bb      	str	r3, [r7, #24]
}
 80076f6:	bf00      	nop
 80076f8:	e7fe      	b.n	80076f8 <xTaskGenericNotifyFromISR+0xfc>
					break;
 80076fa:	bf00      	nop
 80076fc:	e000      	b.n	8007700 <xTaskGenericNotifyFromISR+0x104>
					break;
 80076fe:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8007700:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007704:	2b01      	cmp	r3, #1
 8007706:	d146      	bne.n	8007796 <xTaskGenericNotifyFromISR+0x19a>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8007708:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800770a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800770c:	2b00      	cmp	r3, #0
 800770e:	d00a      	beq.n	8007726 <xTaskGenericNotifyFromISR+0x12a>
	__asm volatile
 8007710:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007714:	f383 8811 	msr	BASEPRI, r3
 8007718:	f3bf 8f6f 	isb	sy
 800771c:	f3bf 8f4f 	dsb	sy
 8007720:	617b      	str	r3, [r7, #20]
}
 8007722:	bf00      	nop
 8007724:	e7fe      	b.n	8007724 <xTaskGenericNotifyFromISR+0x128>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007726:	4b21      	ldr	r3, [pc, #132]	; (80077ac <xTaskGenericNotifyFromISR+0x1b0>)
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	2b00      	cmp	r3, #0
 800772c:	d11d      	bne.n	800776a <xTaskGenericNotifyFromISR+0x16e>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800772e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007730:	3304      	adds	r3, #4
 8007732:	4618      	mov	r0, r3
 8007734:	f7fe fb06 	bl	8005d44 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007738:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800773a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800773c:	4b1c      	ldr	r3, [pc, #112]	; (80077b0 <xTaskGenericNotifyFromISR+0x1b4>)
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	429a      	cmp	r2, r3
 8007742:	d903      	bls.n	800774c <xTaskGenericNotifyFromISR+0x150>
 8007744:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007746:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007748:	4a19      	ldr	r2, [pc, #100]	; (80077b0 <xTaskGenericNotifyFromISR+0x1b4>)
 800774a:	6013      	str	r3, [r2, #0]
 800774c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800774e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007750:	4613      	mov	r3, r2
 8007752:	009b      	lsls	r3, r3, #2
 8007754:	4413      	add	r3, r2
 8007756:	009b      	lsls	r3, r3, #2
 8007758:	4a16      	ldr	r2, [pc, #88]	; (80077b4 <xTaskGenericNotifyFromISR+0x1b8>)
 800775a:	441a      	add	r2, r3
 800775c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800775e:	3304      	adds	r3, #4
 8007760:	4619      	mov	r1, r3
 8007762:	4610      	mov	r0, r2
 8007764:	f7fe fa91 	bl	8005c8a <vListInsertEnd>
 8007768:	e005      	b.n	8007776 <xTaskGenericNotifyFromISR+0x17a>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 800776a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800776c:	3318      	adds	r3, #24
 800776e:	4619      	mov	r1, r3
 8007770:	4811      	ldr	r0, [pc, #68]	; (80077b8 <xTaskGenericNotifyFromISR+0x1bc>)
 8007772:	f7fe fa8a 	bl	8005c8a <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007776:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007778:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800777a:	4b10      	ldr	r3, [pc, #64]	; (80077bc <xTaskGenericNotifyFromISR+0x1c0>)
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007780:	429a      	cmp	r2, r3
 8007782:	d908      	bls.n	8007796 <xTaskGenericNotifyFromISR+0x19a>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 8007784:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007786:	2b00      	cmp	r3, #0
 8007788:	d002      	beq.n	8007790 <xTaskGenericNotifyFromISR+0x194>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 800778a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800778c:	2201      	movs	r2, #1
 800778e:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 8007790:	4b0b      	ldr	r3, [pc, #44]	; (80077c0 <xTaskGenericNotifyFromISR+0x1c4>)
 8007792:	2201      	movs	r2, #1
 8007794:	601a      	str	r2, [r3, #0]
 8007796:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007798:	613b      	str	r3, [r7, #16]
	__asm volatile
 800779a:	693b      	ldr	r3, [r7, #16]
 800779c:	f383 8811 	msr	BASEPRI, r3
}
 80077a0:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 80077a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	}
 80077a4:	4618      	mov	r0, r3
 80077a6:	3738      	adds	r7, #56	; 0x38
 80077a8:	46bd      	mov	sp, r7
 80077aa:	bd80      	pop	{r7, pc}
 80077ac:	20000f58 	.word	0x20000f58
 80077b0:	20000f38 	.word	0x20000f38
 80077b4:	20000a60 	.word	0x20000a60
 80077b8:	20000ef0 	.word	0x20000ef0
 80077bc:	20000a5c 	.word	0x20000a5c
 80077c0:	20000f44 	.word	0x20000f44

080077c4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80077c4:	b580      	push	{r7, lr}
 80077c6:	b084      	sub	sp, #16
 80077c8:	af00      	add	r7, sp, #0
 80077ca:	6078      	str	r0, [r7, #4]
 80077cc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80077ce:	4b21      	ldr	r3, [pc, #132]	; (8007854 <prvAddCurrentTaskToDelayedList+0x90>)
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80077d4:	4b20      	ldr	r3, [pc, #128]	; (8007858 <prvAddCurrentTaskToDelayedList+0x94>)
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	3304      	adds	r3, #4
 80077da:	4618      	mov	r0, r3
 80077dc:	f7fe fab2 	bl	8005d44 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80077e6:	d10a      	bne.n	80077fe <prvAddCurrentTaskToDelayedList+0x3a>
 80077e8:	683b      	ldr	r3, [r7, #0]
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d007      	beq.n	80077fe <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80077ee:	4b1a      	ldr	r3, [pc, #104]	; (8007858 <prvAddCurrentTaskToDelayedList+0x94>)
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	3304      	adds	r3, #4
 80077f4:	4619      	mov	r1, r3
 80077f6:	4819      	ldr	r0, [pc, #100]	; (800785c <prvAddCurrentTaskToDelayedList+0x98>)
 80077f8:	f7fe fa47 	bl	8005c8a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80077fc:	e026      	b.n	800784c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80077fe:	68fa      	ldr	r2, [r7, #12]
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	4413      	add	r3, r2
 8007804:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007806:	4b14      	ldr	r3, [pc, #80]	; (8007858 <prvAddCurrentTaskToDelayedList+0x94>)
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	68ba      	ldr	r2, [r7, #8]
 800780c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800780e:	68ba      	ldr	r2, [r7, #8]
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	429a      	cmp	r2, r3
 8007814:	d209      	bcs.n	800782a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007816:	4b12      	ldr	r3, [pc, #72]	; (8007860 <prvAddCurrentTaskToDelayedList+0x9c>)
 8007818:	681a      	ldr	r2, [r3, #0]
 800781a:	4b0f      	ldr	r3, [pc, #60]	; (8007858 <prvAddCurrentTaskToDelayedList+0x94>)
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	3304      	adds	r3, #4
 8007820:	4619      	mov	r1, r3
 8007822:	4610      	mov	r0, r2
 8007824:	f7fe fa55 	bl	8005cd2 <vListInsert>
}
 8007828:	e010      	b.n	800784c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800782a:	4b0e      	ldr	r3, [pc, #56]	; (8007864 <prvAddCurrentTaskToDelayedList+0xa0>)
 800782c:	681a      	ldr	r2, [r3, #0]
 800782e:	4b0a      	ldr	r3, [pc, #40]	; (8007858 <prvAddCurrentTaskToDelayedList+0x94>)
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	3304      	adds	r3, #4
 8007834:	4619      	mov	r1, r3
 8007836:	4610      	mov	r0, r2
 8007838:	f7fe fa4b 	bl	8005cd2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800783c:	4b0a      	ldr	r3, [pc, #40]	; (8007868 <prvAddCurrentTaskToDelayedList+0xa4>)
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	68ba      	ldr	r2, [r7, #8]
 8007842:	429a      	cmp	r2, r3
 8007844:	d202      	bcs.n	800784c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8007846:	4a08      	ldr	r2, [pc, #32]	; (8007868 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007848:	68bb      	ldr	r3, [r7, #8]
 800784a:	6013      	str	r3, [r2, #0]
}
 800784c:	bf00      	nop
 800784e:	3710      	adds	r7, #16
 8007850:	46bd      	mov	sp, r7
 8007852:	bd80      	pop	{r7, pc}
 8007854:	20000f34 	.word	0x20000f34
 8007858:	20000a5c 	.word	0x20000a5c
 800785c:	20000f1c 	.word	0x20000f1c
 8007860:	20000eec 	.word	0x20000eec
 8007864:	20000ee8 	.word	0x20000ee8
 8007868:	20000f50 	.word	0x20000f50

0800786c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800786c:	b580      	push	{r7, lr}
 800786e:	b08a      	sub	sp, #40	; 0x28
 8007870:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8007872:	2300      	movs	r3, #0
 8007874:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8007876:	f000 fb07 	bl	8007e88 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800787a:	4b1c      	ldr	r3, [pc, #112]	; (80078ec <xTimerCreateTimerTask+0x80>)
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	2b00      	cmp	r3, #0
 8007880:	d021      	beq.n	80078c6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8007882:	2300      	movs	r3, #0
 8007884:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8007886:	2300      	movs	r3, #0
 8007888:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800788a:	1d3a      	adds	r2, r7, #4
 800788c:	f107 0108 	add.w	r1, r7, #8
 8007890:	f107 030c 	add.w	r3, r7, #12
 8007894:	4618      	mov	r0, r3
 8007896:	f7fe f9b1 	bl	8005bfc <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800789a:	6879      	ldr	r1, [r7, #4]
 800789c:	68bb      	ldr	r3, [r7, #8]
 800789e:	68fa      	ldr	r2, [r7, #12]
 80078a0:	9202      	str	r2, [sp, #8]
 80078a2:	9301      	str	r3, [sp, #4]
 80078a4:	2302      	movs	r3, #2
 80078a6:	9300      	str	r3, [sp, #0]
 80078a8:	2300      	movs	r3, #0
 80078aa:	460a      	mov	r2, r1
 80078ac:	4910      	ldr	r1, [pc, #64]	; (80078f0 <xTimerCreateTimerTask+0x84>)
 80078ae:	4811      	ldr	r0, [pc, #68]	; (80078f4 <xTimerCreateTimerTask+0x88>)
 80078b0:	f7fe ff5e 	bl	8006770 <xTaskCreateStatic>
 80078b4:	4603      	mov	r3, r0
 80078b6:	4a10      	ldr	r2, [pc, #64]	; (80078f8 <xTimerCreateTimerTask+0x8c>)
 80078b8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80078ba:	4b0f      	ldr	r3, [pc, #60]	; (80078f8 <xTimerCreateTimerTask+0x8c>)
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d001      	beq.n	80078c6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80078c2:	2301      	movs	r3, #1
 80078c4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80078c6:	697b      	ldr	r3, [r7, #20]
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d10a      	bne.n	80078e2 <xTimerCreateTimerTask+0x76>
	__asm volatile
 80078cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078d0:	f383 8811 	msr	BASEPRI, r3
 80078d4:	f3bf 8f6f 	isb	sy
 80078d8:	f3bf 8f4f 	dsb	sy
 80078dc:	613b      	str	r3, [r7, #16]
}
 80078de:	bf00      	nop
 80078e0:	e7fe      	b.n	80078e0 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80078e2:	697b      	ldr	r3, [r7, #20]
}
 80078e4:	4618      	mov	r0, r3
 80078e6:	3718      	adds	r7, #24
 80078e8:	46bd      	mov	sp, r7
 80078ea:	bd80      	pop	{r7, pc}
 80078ec:	20000f8c 	.word	0x20000f8c
 80078f0:	08009858 	.word	0x08009858
 80078f4:	08007a31 	.word	0x08007a31
 80078f8:	20000f90 	.word	0x20000f90

080078fc <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80078fc:	b580      	push	{r7, lr}
 80078fe:	b08a      	sub	sp, #40	; 0x28
 8007900:	af00      	add	r7, sp, #0
 8007902:	60f8      	str	r0, [r7, #12]
 8007904:	60b9      	str	r1, [r7, #8]
 8007906:	607a      	str	r2, [r7, #4]
 8007908:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800790a:	2300      	movs	r3, #0
 800790c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	2b00      	cmp	r3, #0
 8007912:	d10a      	bne.n	800792a <xTimerGenericCommand+0x2e>
	__asm volatile
 8007914:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007918:	f383 8811 	msr	BASEPRI, r3
 800791c:	f3bf 8f6f 	isb	sy
 8007920:	f3bf 8f4f 	dsb	sy
 8007924:	623b      	str	r3, [r7, #32]
}
 8007926:	bf00      	nop
 8007928:	e7fe      	b.n	8007928 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800792a:	4b1a      	ldr	r3, [pc, #104]	; (8007994 <xTimerGenericCommand+0x98>)
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	2b00      	cmp	r3, #0
 8007930:	d02a      	beq.n	8007988 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8007932:	68bb      	ldr	r3, [r7, #8]
 8007934:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800793e:	68bb      	ldr	r3, [r7, #8]
 8007940:	2b05      	cmp	r3, #5
 8007942:	dc18      	bgt.n	8007976 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8007944:	f7ff fdce 	bl	80074e4 <xTaskGetSchedulerState>
 8007948:	4603      	mov	r3, r0
 800794a:	2b02      	cmp	r3, #2
 800794c:	d109      	bne.n	8007962 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800794e:	4b11      	ldr	r3, [pc, #68]	; (8007994 <xTimerGenericCommand+0x98>)
 8007950:	6818      	ldr	r0, [r3, #0]
 8007952:	f107 0110 	add.w	r1, r7, #16
 8007956:	2300      	movs	r3, #0
 8007958:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800795a:	f7fe fb21 	bl	8005fa0 <xQueueGenericSend>
 800795e:	6278      	str	r0, [r7, #36]	; 0x24
 8007960:	e012      	b.n	8007988 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8007962:	4b0c      	ldr	r3, [pc, #48]	; (8007994 <xTimerGenericCommand+0x98>)
 8007964:	6818      	ldr	r0, [r3, #0]
 8007966:	f107 0110 	add.w	r1, r7, #16
 800796a:	2300      	movs	r3, #0
 800796c:	2200      	movs	r2, #0
 800796e:	f7fe fb17 	bl	8005fa0 <xQueueGenericSend>
 8007972:	6278      	str	r0, [r7, #36]	; 0x24
 8007974:	e008      	b.n	8007988 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8007976:	4b07      	ldr	r3, [pc, #28]	; (8007994 <xTimerGenericCommand+0x98>)
 8007978:	6818      	ldr	r0, [r3, #0]
 800797a:	f107 0110 	add.w	r1, r7, #16
 800797e:	2300      	movs	r3, #0
 8007980:	683a      	ldr	r2, [r7, #0]
 8007982:	f7fe fc0b 	bl	800619c <xQueueGenericSendFromISR>
 8007986:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8007988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800798a:	4618      	mov	r0, r3
 800798c:	3728      	adds	r7, #40	; 0x28
 800798e:	46bd      	mov	sp, r7
 8007990:	bd80      	pop	{r7, pc}
 8007992:	bf00      	nop
 8007994:	20000f8c 	.word	0x20000f8c

08007998 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8007998:	b580      	push	{r7, lr}
 800799a:	b088      	sub	sp, #32
 800799c:	af02      	add	r7, sp, #8
 800799e:	6078      	str	r0, [r7, #4]
 80079a0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80079a2:	4b22      	ldr	r3, [pc, #136]	; (8007a2c <prvProcessExpiredTimer+0x94>)
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	68db      	ldr	r3, [r3, #12]
 80079a8:	68db      	ldr	r3, [r3, #12]
 80079aa:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80079ac:	697b      	ldr	r3, [r7, #20]
 80079ae:	3304      	adds	r3, #4
 80079b0:	4618      	mov	r0, r3
 80079b2:	f7fe f9c7 	bl	8005d44 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80079b6:	697b      	ldr	r3, [r7, #20]
 80079b8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80079bc:	f003 0304 	and.w	r3, r3, #4
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	d022      	beq.n	8007a0a <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80079c4:	697b      	ldr	r3, [r7, #20]
 80079c6:	699a      	ldr	r2, [r3, #24]
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	18d1      	adds	r1, r2, r3
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	683a      	ldr	r2, [r7, #0]
 80079d0:	6978      	ldr	r0, [r7, #20]
 80079d2:	f000 f8d1 	bl	8007b78 <prvInsertTimerInActiveList>
 80079d6:	4603      	mov	r3, r0
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d01f      	beq.n	8007a1c <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80079dc:	2300      	movs	r3, #0
 80079de:	9300      	str	r3, [sp, #0]
 80079e0:	2300      	movs	r3, #0
 80079e2:	687a      	ldr	r2, [r7, #4]
 80079e4:	2100      	movs	r1, #0
 80079e6:	6978      	ldr	r0, [r7, #20]
 80079e8:	f7ff ff88 	bl	80078fc <xTimerGenericCommand>
 80079ec:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80079ee:	693b      	ldr	r3, [r7, #16]
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	d113      	bne.n	8007a1c <prvProcessExpiredTimer+0x84>
	__asm volatile
 80079f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079f8:	f383 8811 	msr	BASEPRI, r3
 80079fc:	f3bf 8f6f 	isb	sy
 8007a00:	f3bf 8f4f 	dsb	sy
 8007a04:	60fb      	str	r3, [r7, #12]
}
 8007a06:	bf00      	nop
 8007a08:	e7fe      	b.n	8007a08 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007a0a:	697b      	ldr	r3, [r7, #20]
 8007a0c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007a10:	f023 0301 	bic.w	r3, r3, #1
 8007a14:	b2da      	uxtb	r2, r3
 8007a16:	697b      	ldr	r3, [r7, #20]
 8007a18:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007a1c:	697b      	ldr	r3, [r7, #20]
 8007a1e:	6a1b      	ldr	r3, [r3, #32]
 8007a20:	6978      	ldr	r0, [r7, #20]
 8007a22:	4798      	blx	r3
}
 8007a24:	bf00      	nop
 8007a26:	3718      	adds	r7, #24
 8007a28:	46bd      	mov	sp, r7
 8007a2a:	bd80      	pop	{r7, pc}
 8007a2c:	20000f84 	.word	0x20000f84

08007a30 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8007a30:	b580      	push	{r7, lr}
 8007a32:	b084      	sub	sp, #16
 8007a34:	af00      	add	r7, sp, #0
 8007a36:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007a38:	f107 0308 	add.w	r3, r7, #8
 8007a3c:	4618      	mov	r0, r3
 8007a3e:	f000 f857 	bl	8007af0 <prvGetNextExpireTime>
 8007a42:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8007a44:	68bb      	ldr	r3, [r7, #8]
 8007a46:	4619      	mov	r1, r3
 8007a48:	68f8      	ldr	r0, [r7, #12]
 8007a4a:	f000 f803 	bl	8007a54 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8007a4e:	f000 f8d5 	bl	8007bfc <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007a52:	e7f1      	b.n	8007a38 <prvTimerTask+0x8>

08007a54 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8007a54:	b580      	push	{r7, lr}
 8007a56:	b084      	sub	sp, #16
 8007a58:	af00      	add	r7, sp, #0
 8007a5a:	6078      	str	r0, [r7, #4]
 8007a5c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8007a5e:	f7ff f955 	bl	8006d0c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007a62:	f107 0308 	add.w	r3, r7, #8
 8007a66:	4618      	mov	r0, r3
 8007a68:	f000 f866 	bl	8007b38 <prvSampleTimeNow>
 8007a6c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8007a6e:	68bb      	ldr	r3, [r7, #8]
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	d130      	bne.n	8007ad6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8007a74:	683b      	ldr	r3, [r7, #0]
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d10a      	bne.n	8007a90 <prvProcessTimerOrBlockTask+0x3c>
 8007a7a:	687a      	ldr	r2, [r7, #4]
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	429a      	cmp	r2, r3
 8007a80:	d806      	bhi.n	8007a90 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8007a82:	f7ff f951 	bl	8006d28 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8007a86:	68f9      	ldr	r1, [r7, #12]
 8007a88:	6878      	ldr	r0, [r7, #4]
 8007a8a:	f7ff ff85 	bl	8007998 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8007a8e:	e024      	b.n	8007ada <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8007a90:	683b      	ldr	r3, [r7, #0]
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d008      	beq.n	8007aa8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8007a96:	4b13      	ldr	r3, [pc, #76]	; (8007ae4 <prvProcessTimerOrBlockTask+0x90>)
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	d101      	bne.n	8007aa4 <prvProcessTimerOrBlockTask+0x50>
 8007aa0:	2301      	movs	r3, #1
 8007aa2:	e000      	b.n	8007aa6 <prvProcessTimerOrBlockTask+0x52>
 8007aa4:	2300      	movs	r3, #0
 8007aa6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007aa8:	4b0f      	ldr	r3, [pc, #60]	; (8007ae8 <prvProcessTimerOrBlockTask+0x94>)
 8007aaa:	6818      	ldr	r0, [r3, #0]
 8007aac:	687a      	ldr	r2, [r7, #4]
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	1ad3      	subs	r3, r2, r3
 8007ab2:	683a      	ldr	r2, [r7, #0]
 8007ab4:	4619      	mov	r1, r3
 8007ab6:	f7fe fe27 	bl	8006708 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8007aba:	f7ff f935 	bl	8006d28 <xTaskResumeAll>
 8007abe:	4603      	mov	r3, r0
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	d10a      	bne.n	8007ada <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8007ac4:	4b09      	ldr	r3, [pc, #36]	; (8007aec <prvProcessTimerOrBlockTask+0x98>)
 8007ac6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007aca:	601a      	str	r2, [r3, #0]
 8007acc:	f3bf 8f4f 	dsb	sy
 8007ad0:	f3bf 8f6f 	isb	sy
}
 8007ad4:	e001      	b.n	8007ada <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8007ad6:	f7ff f927 	bl	8006d28 <xTaskResumeAll>
}
 8007ada:	bf00      	nop
 8007adc:	3710      	adds	r7, #16
 8007ade:	46bd      	mov	sp, r7
 8007ae0:	bd80      	pop	{r7, pc}
 8007ae2:	bf00      	nop
 8007ae4:	20000f88 	.word	0x20000f88
 8007ae8:	20000f8c 	.word	0x20000f8c
 8007aec:	e000ed04 	.word	0xe000ed04

08007af0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8007af0:	b480      	push	{r7}
 8007af2:	b085      	sub	sp, #20
 8007af4:	af00      	add	r7, sp, #0
 8007af6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8007af8:	4b0e      	ldr	r3, [pc, #56]	; (8007b34 <prvGetNextExpireTime+0x44>)
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d101      	bne.n	8007b06 <prvGetNextExpireTime+0x16>
 8007b02:	2201      	movs	r2, #1
 8007b04:	e000      	b.n	8007b08 <prvGetNextExpireTime+0x18>
 8007b06:	2200      	movs	r2, #0
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	d105      	bne.n	8007b20 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007b14:	4b07      	ldr	r3, [pc, #28]	; (8007b34 <prvGetNextExpireTime+0x44>)
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	68db      	ldr	r3, [r3, #12]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	60fb      	str	r3, [r7, #12]
 8007b1e:	e001      	b.n	8007b24 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8007b20:	2300      	movs	r3, #0
 8007b22:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8007b24:	68fb      	ldr	r3, [r7, #12]
}
 8007b26:	4618      	mov	r0, r3
 8007b28:	3714      	adds	r7, #20
 8007b2a:	46bd      	mov	sp, r7
 8007b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b30:	4770      	bx	lr
 8007b32:	bf00      	nop
 8007b34:	20000f84 	.word	0x20000f84

08007b38 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8007b38:	b580      	push	{r7, lr}
 8007b3a:	b084      	sub	sp, #16
 8007b3c:	af00      	add	r7, sp, #0
 8007b3e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8007b40:	f7ff f990 	bl	8006e64 <xTaskGetTickCount>
 8007b44:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8007b46:	4b0b      	ldr	r3, [pc, #44]	; (8007b74 <prvSampleTimeNow+0x3c>)
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	68fa      	ldr	r2, [r7, #12]
 8007b4c:	429a      	cmp	r2, r3
 8007b4e:	d205      	bcs.n	8007b5c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8007b50:	f000 f936 	bl	8007dc0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	2201      	movs	r2, #1
 8007b58:	601a      	str	r2, [r3, #0]
 8007b5a:	e002      	b.n	8007b62 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	2200      	movs	r2, #0
 8007b60:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8007b62:	4a04      	ldr	r2, [pc, #16]	; (8007b74 <prvSampleTimeNow+0x3c>)
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8007b68:	68fb      	ldr	r3, [r7, #12]
}
 8007b6a:	4618      	mov	r0, r3
 8007b6c:	3710      	adds	r7, #16
 8007b6e:	46bd      	mov	sp, r7
 8007b70:	bd80      	pop	{r7, pc}
 8007b72:	bf00      	nop
 8007b74:	20000f94 	.word	0x20000f94

08007b78 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8007b78:	b580      	push	{r7, lr}
 8007b7a:	b086      	sub	sp, #24
 8007b7c:	af00      	add	r7, sp, #0
 8007b7e:	60f8      	str	r0, [r7, #12]
 8007b80:	60b9      	str	r1, [r7, #8]
 8007b82:	607a      	str	r2, [r7, #4]
 8007b84:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8007b86:	2300      	movs	r3, #0
 8007b88:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	68ba      	ldr	r2, [r7, #8]
 8007b8e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	68fa      	ldr	r2, [r7, #12]
 8007b94:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8007b96:	68ba      	ldr	r2, [r7, #8]
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	429a      	cmp	r2, r3
 8007b9c:	d812      	bhi.n	8007bc4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007b9e:	687a      	ldr	r2, [r7, #4]
 8007ba0:	683b      	ldr	r3, [r7, #0]
 8007ba2:	1ad2      	subs	r2, r2, r3
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	699b      	ldr	r3, [r3, #24]
 8007ba8:	429a      	cmp	r2, r3
 8007baa:	d302      	bcc.n	8007bb2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8007bac:	2301      	movs	r3, #1
 8007bae:	617b      	str	r3, [r7, #20]
 8007bb0:	e01b      	b.n	8007bea <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8007bb2:	4b10      	ldr	r3, [pc, #64]	; (8007bf4 <prvInsertTimerInActiveList+0x7c>)
 8007bb4:	681a      	ldr	r2, [r3, #0]
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	3304      	adds	r3, #4
 8007bba:	4619      	mov	r1, r3
 8007bbc:	4610      	mov	r0, r2
 8007bbe:	f7fe f888 	bl	8005cd2 <vListInsert>
 8007bc2:	e012      	b.n	8007bea <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8007bc4:	687a      	ldr	r2, [r7, #4]
 8007bc6:	683b      	ldr	r3, [r7, #0]
 8007bc8:	429a      	cmp	r2, r3
 8007bca:	d206      	bcs.n	8007bda <prvInsertTimerInActiveList+0x62>
 8007bcc:	68ba      	ldr	r2, [r7, #8]
 8007bce:	683b      	ldr	r3, [r7, #0]
 8007bd0:	429a      	cmp	r2, r3
 8007bd2:	d302      	bcc.n	8007bda <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8007bd4:	2301      	movs	r3, #1
 8007bd6:	617b      	str	r3, [r7, #20]
 8007bd8:	e007      	b.n	8007bea <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007bda:	4b07      	ldr	r3, [pc, #28]	; (8007bf8 <prvInsertTimerInActiveList+0x80>)
 8007bdc:	681a      	ldr	r2, [r3, #0]
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	3304      	adds	r3, #4
 8007be2:	4619      	mov	r1, r3
 8007be4:	4610      	mov	r0, r2
 8007be6:	f7fe f874 	bl	8005cd2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8007bea:	697b      	ldr	r3, [r7, #20]
}
 8007bec:	4618      	mov	r0, r3
 8007bee:	3718      	adds	r7, #24
 8007bf0:	46bd      	mov	sp, r7
 8007bf2:	bd80      	pop	{r7, pc}
 8007bf4:	20000f88 	.word	0x20000f88
 8007bf8:	20000f84 	.word	0x20000f84

08007bfc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8007bfc:	b580      	push	{r7, lr}
 8007bfe:	b08e      	sub	sp, #56	; 0x38
 8007c00:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007c02:	e0ca      	b.n	8007d9a <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	da18      	bge.n	8007c3c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8007c0a:	1d3b      	adds	r3, r7, #4
 8007c0c:	3304      	adds	r3, #4
 8007c0e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8007c10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	d10a      	bne.n	8007c2c <prvProcessReceivedCommands+0x30>
	__asm volatile
 8007c16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c1a:	f383 8811 	msr	BASEPRI, r3
 8007c1e:	f3bf 8f6f 	isb	sy
 8007c22:	f3bf 8f4f 	dsb	sy
 8007c26:	61fb      	str	r3, [r7, #28]
}
 8007c28:	bf00      	nop
 8007c2a:	e7fe      	b.n	8007c2a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8007c2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007c32:	6850      	ldr	r0, [r2, #4]
 8007c34:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007c36:	6892      	ldr	r2, [r2, #8]
 8007c38:	4611      	mov	r1, r2
 8007c3a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	f2c0 80aa 	blt.w	8007d98 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8007c48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c4a:	695b      	ldr	r3, [r3, #20]
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	d004      	beq.n	8007c5a <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007c50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c52:	3304      	adds	r3, #4
 8007c54:	4618      	mov	r0, r3
 8007c56:	f7fe f875 	bl	8005d44 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007c5a:	463b      	mov	r3, r7
 8007c5c:	4618      	mov	r0, r3
 8007c5e:	f7ff ff6b 	bl	8007b38 <prvSampleTimeNow>
 8007c62:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	2b09      	cmp	r3, #9
 8007c68:	f200 8097 	bhi.w	8007d9a <prvProcessReceivedCommands+0x19e>
 8007c6c:	a201      	add	r2, pc, #4	; (adr r2, 8007c74 <prvProcessReceivedCommands+0x78>)
 8007c6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c72:	bf00      	nop
 8007c74:	08007c9d 	.word	0x08007c9d
 8007c78:	08007c9d 	.word	0x08007c9d
 8007c7c:	08007c9d 	.word	0x08007c9d
 8007c80:	08007d11 	.word	0x08007d11
 8007c84:	08007d25 	.word	0x08007d25
 8007c88:	08007d6f 	.word	0x08007d6f
 8007c8c:	08007c9d 	.word	0x08007c9d
 8007c90:	08007c9d 	.word	0x08007c9d
 8007c94:	08007d11 	.word	0x08007d11
 8007c98:	08007d25 	.word	0x08007d25
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007c9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c9e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007ca2:	f043 0301 	orr.w	r3, r3, #1
 8007ca6:	b2da      	uxtb	r2, r3
 8007ca8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007caa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8007cae:	68ba      	ldr	r2, [r7, #8]
 8007cb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cb2:	699b      	ldr	r3, [r3, #24]
 8007cb4:	18d1      	adds	r1, r2, r3
 8007cb6:	68bb      	ldr	r3, [r7, #8]
 8007cb8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007cba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007cbc:	f7ff ff5c 	bl	8007b78 <prvInsertTimerInActiveList>
 8007cc0:	4603      	mov	r3, r0
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d069      	beq.n	8007d9a <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007cc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cc8:	6a1b      	ldr	r3, [r3, #32]
 8007cca:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007ccc:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007cce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cd0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007cd4:	f003 0304 	and.w	r3, r3, #4
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	d05e      	beq.n	8007d9a <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8007cdc:	68ba      	ldr	r2, [r7, #8]
 8007cde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ce0:	699b      	ldr	r3, [r3, #24]
 8007ce2:	441a      	add	r2, r3
 8007ce4:	2300      	movs	r3, #0
 8007ce6:	9300      	str	r3, [sp, #0]
 8007ce8:	2300      	movs	r3, #0
 8007cea:	2100      	movs	r1, #0
 8007cec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007cee:	f7ff fe05 	bl	80078fc <xTimerGenericCommand>
 8007cf2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8007cf4:	6a3b      	ldr	r3, [r7, #32]
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	d14f      	bne.n	8007d9a <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8007cfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cfe:	f383 8811 	msr	BASEPRI, r3
 8007d02:	f3bf 8f6f 	isb	sy
 8007d06:	f3bf 8f4f 	dsb	sy
 8007d0a:	61bb      	str	r3, [r7, #24]
}
 8007d0c:	bf00      	nop
 8007d0e:	e7fe      	b.n	8007d0e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007d10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d12:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007d16:	f023 0301 	bic.w	r3, r3, #1
 8007d1a:	b2da      	uxtb	r2, r3
 8007d1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d1e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8007d22:	e03a      	b.n	8007d9a <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007d24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d26:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007d2a:	f043 0301 	orr.w	r3, r3, #1
 8007d2e:	b2da      	uxtb	r2, r3
 8007d30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d32:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8007d36:	68ba      	ldr	r2, [r7, #8]
 8007d38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d3a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8007d3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d3e:	699b      	ldr	r3, [r3, #24]
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	d10a      	bne.n	8007d5a <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8007d44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d48:	f383 8811 	msr	BASEPRI, r3
 8007d4c:	f3bf 8f6f 	isb	sy
 8007d50:	f3bf 8f4f 	dsb	sy
 8007d54:	617b      	str	r3, [r7, #20]
}
 8007d56:	bf00      	nop
 8007d58:	e7fe      	b.n	8007d58 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8007d5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d5c:	699a      	ldr	r2, [r3, #24]
 8007d5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d60:	18d1      	adds	r1, r2, r3
 8007d62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d64:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007d66:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007d68:	f7ff ff06 	bl	8007b78 <prvInsertTimerInActiveList>
					break;
 8007d6c:	e015      	b.n	8007d9a <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8007d6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d70:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007d74:	f003 0302 	and.w	r3, r3, #2
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d103      	bne.n	8007d84 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8007d7c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007d7e:	f000 fbdf 	bl	8008540 <vPortFree>
 8007d82:	e00a      	b.n	8007d9a <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007d84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d86:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007d8a:	f023 0301 	bic.w	r3, r3, #1
 8007d8e:	b2da      	uxtb	r2, r3
 8007d90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d92:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8007d96:	e000      	b.n	8007d9a <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8007d98:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007d9a:	4b08      	ldr	r3, [pc, #32]	; (8007dbc <prvProcessReceivedCommands+0x1c0>)
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	1d39      	adds	r1, r7, #4
 8007da0:	2200      	movs	r2, #0
 8007da2:	4618      	mov	r0, r3
 8007da4:	f7fe fa96 	bl	80062d4 <xQueueReceive>
 8007da8:	4603      	mov	r3, r0
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	f47f af2a 	bne.w	8007c04 <prvProcessReceivedCommands+0x8>
	}
}
 8007db0:	bf00      	nop
 8007db2:	bf00      	nop
 8007db4:	3730      	adds	r7, #48	; 0x30
 8007db6:	46bd      	mov	sp, r7
 8007db8:	bd80      	pop	{r7, pc}
 8007dba:	bf00      	nop
 8007dbc:	20000f8c 	.word	0x20000f8c

08007dc0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8007dc0:	b580      	push	{r7, lr}
 8007dc2:	b088      	sub	sp, #32
 8007dc4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007dc6:	e048      	b.n	8007e5a <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007dc8:	4b2d      	ldr	r3, [pc, #180]	; (8007e80 <prvSwitchTimerLists+0xc0>)
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	68db      	ldr	r3, [r3, #12]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007dd2:	4b2b      	ldr	r3, [pc, #172]	; (8007e80 <prvSwitchTimerLists+0xc0>)
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	68db      	ldr	r3, [r3, #12]
 8007dd8:	68db      	ldr	r3, [r3, #12]
 8007dda:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	3304      	adds	r3, #4
 8007de0:	4618      	mov	r0, r3
 8007de2:	f7fd ffaf 	bl	8005d44 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	6a1b      	ldr	r3, [r3, #32]
 8007dea:	68f8      	ldr	r0, [r7, #12]
 8007dec:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007df4:	f003 0304 	and.w	r3, r3, #4
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	d02e      	beq.n	8007e5a <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	699b      	ldr	r3, [r3, #24]
 8007e00:	693a      	ldr	r2, [r7, #16]
 8007e02:	4413      	add	r3, r2
 8007e04:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8007e06:	68ba      	ldr	r2, [r7, #8]
 8007e08:	693b      	ldr	r3, [r7, #16]
 8007e0a:	429a      	cmp	r2, r3
 8007e0c:	d90e      	bls.n	8007e2c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	68ba      	ldr	r2, [r7, #8]
 8007e12:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	68fa      	ldr	r2, [r7, #12]
 8007e18:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007e1a:	4b19      	ldr	r3, [pc, #100]	; (8007e80 <prvSwitchTimerLists+0xc0>)
 8007e1c:	681a      	ldr	r2, [r3, #0]
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	3304      	adds	r3, #4
 8007e22:	4619      	mov	r1, r3
 8007e24:	4610      	mov	r0, r2
 8007e26:	f7fd ff54 	bl	8005cd2 <vListInsert>
 8007e2a:	e016      	b.n	8007e5a <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007e2c:	2300      	movs	r3, #0
 8007e2e:	9300      	str	r3, [sp, #0]
 8007e30:	2300      	movs	r3, #0
 8007e32:	693a      	ldr	r2, [r7, #16]
 8007e34:	2100      	movs	r1, #0
 8007e36:	68f8      	ldr	r0, [r7, #12]
 8007e38:	f7ff fd60 	bl	80078fc <xTimerGenericCommand>
 8007e3c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	d10a      	bne.n	8007e5a <prvSwitchTimerLists+0x9a>
	__asm volatile
 8007e44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e48:	f383 8811 	msr	BASEPRI, r3
 8007e4c:	f3bf 8f6f 	isb	sy
 8007e50:	f3bf 8f4f 	dsb	sy
 8007e54:	603b      	str	r3, [r7, #0]
}
 8007e56:	bf00      	nop
 8007e58:	e7fe      	b.n	8007e58 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007e5a:	4b09      	ldr	r3, [pc, #36]	; (8007e80 <prvSwitchTimerLists+0xc0>)
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	d1b1      	bne.n	8007dc8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8007e64:	4b06      	ldr	r3, [pc, #24]	; (8007e80 <prvSwitchTimerLists+0xc0>)
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8007e6a:	4b06      	ldr	r3, [pc, #24]	; (8007e84 <prvSwitchTimerLists+0xc4>)
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	4a04      	ldr	r2, [pc, #16]	; (8007e80 <prvSwitchTimerLists+0xc0>)
 8007e70:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8007e72:	4a04      	ldr	r2, [pc, #16]	; (8007e84 <prvSwitchTimerLists+0xc4>)
 8007e74:	697b      	ldr	r3, [r7, #20]
 8007e76:	6013      	str	r3, [r2, #0]
}
 8007e78:	bf00      	nop
 8007e7a:	3718      	adds	r7, #24
 8007e7c:	46bd      	mov	sp, r7
 8007e7e:	bd80      	pop	{r7, pc}
 8007e80:	20000f84 	.word	0x20000f84
 8007e84:	20000f88 	.word	0x20000f88

08007e88 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8007e88:	b580      	push	{r7, lr}
 8007e8a:	b082      	sub	sp, #8
 8007e8c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8007e8e:	f000 f969 	bl	8008164 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8007e92:	4b15      	ldr	r3, [pc, #84]	; (8007ee8 <prvCheckForValidListAndQueue+0x60>)
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d120      	bne.n	8007edc <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8007e9a:	4814      	ldr	r0, [pc, #80]	; (8007eec <prvCheckForValidListAndQueue+0x64>)
 8007e9c:	f7fd fec8 	bl	8005c30 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8007ea0:	4813      	ldr	r0, [pc, #76]	; (8007ef0 <prvCheckForValidListAndQueue+0x68>)
 8007ea2:	f7fd fec5 	bl	8005c30 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8007ea6:	4b13      	ldr	r3, [pc, #76]	; (8007ef4 <prvCheckForValidListAndQueue+0x6c>)
 8007ea8:	4a10      	ldr	r2, [pc, #64]	; (8007eec <prvCheckForValidListAndQueue+0x64>)
 8007eaa:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8007eac:	4b12      	ldr	r3, [pc, #72]	; (8007ef8 <prvCheckForValidListAndQueue+0x70>)
 8007eae:	4a10      	ldr	r2, [pc, #64]	; (8007ef0 <prvCheckForValidListAndQueue+0x68>)
 8007eb0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8007eb2:	2300      	movs	r3, #0
 8007eb4:	9300      	str	r3, [sp, #0]
 8007eb6:	4b11      	ldr	r3, [pc, #68]	; (8007efc <prvCheckForValidListAndQueue+0x74>)
 8007eb8:	4a11      	ldr	r2, [pc, #68]	; (8007f00 <prvCheckForValidListAndQueue+0x78>)
 8007eba:	2110      	movs	r1, #16
 8007ebc:	200a      	movs	r0, #10
 8007ebe:	f7fd ffd3 	bl	8005e68 <xQueueGenericCreateStatic>
 8007ec2:	4603      	mov	r3, r0
 8007ec4:	4a08      	ldr	r2, [pc, #32]	; (8007ee8 <prvCheckForValidListAndQueue+0x60>)
 8007ec6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8007ec8:	4b07      	ldr	r3, [pc, #28]	; (8007ee8 <prvCheckForValidListAndQueue+0x60>)
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	d005      	beq.n	8007edc <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007ed0:	4b05      	ldr	r3, [pc, #20]	; (8007ee8 <prvCheckForValidListAndQueue+0x60>)
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	490b      	ldr	r1, [pc, #44]	; (8007f04 <prvCheckForValidListAndQueue+0x7c>)
 8007ed6:	4618      	mov	r0, r3
 8007ed8:	f7fe fbec 	bl	80066b4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007edc:	f000 f972 	bl	80081c4 <vPortExitCritical>
}
 8007ee0:	bf00      	nop
 8007ee2:	46bd      	mov	sp, r7
 8007ee4:	bd80      	pop	{r7, pc}
 8007ee6:	bf00      	nop
 8007ee8:	20000f8c 	.word	0x20000f8c
 8007eec:	20000f5c 	.word	0x20000f5c
 8007ef0:	20000f70 	.word	0x20000f70
 8007ef4:	20000f84 	.word	0x20000f84
 8007ef8:	20000f88 	.word	0x20000f88
 8007efc:	20001038 	.word	0x20001038
 8007f00:	20000f98 	.word	0x20000f98
 8007f04:	08009860 	.word	0x08009860

08007f08 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007f08:	b480      	push	{r7}
 8007f0a:	b085      	sub	sp, #20
 8007f0c:	af00      	add	r7, sp, #0
 8007f0e:	60f8      	str	r0, [r7, #12]
 8007f10:	60b9      	str	r1, [r7, #8]
 8007f12:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	3b04      	subs	r3, #4
 8007f18:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007f20:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	3b04      	subs	r3, #4
 8007f26:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007f28:	68bb      	ldr	r3, [r7, #8]
 8007f2a:	f023 0201 	bic.w	r2, r3, #1
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	3b04      	subs	r3, #4
 8007f36:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007f38:	4a0c      	ldr	r2, [pc, #48]	; (8007f6c <pxPortInitialiseStack+0x64>)
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	3b14      	subs	r3, #20
 8007f42:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007f44:	687a      	ldr	r2, [r7, #4]
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	3b04      	subs	r3, #4
 8007f4e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	f06f 0202 	mvn.w	r2, #2
 8007f56:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	3b20      	subs	r3, #32
 8007f5c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007f5e:	68fb      	ldr	r3, [r7, #12]
}
 8007f60:	4618      	mov	r0, r3
 8007f62:	3714      	adds	r7, #20
 8007f64:	46bd      	mov	sp, r7
 8007f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f6a:	4770      	bx	lr
 8007f6c:	08007f71 	.word	0x08007f71

08007f70 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007f70:	b480      	push	{r7}
 8007f72:	b085      	sub	sp, #20
 8007f74:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8007f76:	2300      	movs	r3, #0
 8007f78:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007f7a:	4b12      	ldr	r3, [pc, #72]	; (8007fc4 <prvTaskExitError+0x54>)
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f82:	d00a      	beq.n	8007f9a <prvTaskExitError+0x2a>
	__asm volatile
 8007f84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f88:	f383 8811 	msr	BASEPRI, r3
 8007f8c:	f3bf 8f6f 	isb	sy
 8007f90:	f3bf 8f4f 	dsb	sy
 8007f94:	60fb      	str	r3, [r7, #12]
}
 8007f96:	bf00      	nop
 8007f98:	e7fe      	b.n	8007f98 <prvTaskExitError+0x28>
	__asm volatile
 8007f9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f9e:	f383 8811 	msr	BASEPRI, r3
 8007fa2:	f3bf 8f6f 	isb	sy
 8007fa6:	f3bf 8f4f 	dsb	sy
 8007faa:	60bb      	str	r3, [r7, #8]
}
 8007fac:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007fae:	bf00      	nop
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	d0fc      	beq.n	8007fb0 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007fb6:	bf00      	nop
 8007fb8:	bf00      	nop
 8007fba:	3714      	adds	r7, #20
 8007fbc:	46bd      	mov	sp, r7
 8007fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fc2:	4770      	bx	lr
 8007fc4:	20000010 	.word	0x20000010
	...

08007fd0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007fd0:	4b07      	ldr	r3, [pc, #28]	; (8007ff0 <pxCurrentTCBConst2>)
 8007fd2:	6819      	ldr	r1, [r3, #0]
 8007fd4:	6808      	ldr	r0, [r1, #0]
 8007fd6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007fda:	f380 8809 	msr	PSP, r0
 8007fde:	f3bf 8f6f 	isb	sy
 8007fe2:	f04f 0000 	mov.w	r0, #0
 8007fe6:	f380 8811 	msr	BASEPRI, r0
 8007fea:	4770      	bx	lr
 8007fec:	f3af 8000 	nop.w

08007ff0 <pxCurrentTCBConst2>:
 8007ff0:	20000a5c 	.word	0x20000a5c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007ff4:	bf00      	nop
 8007ff6:	bf00      	nop

08007ff8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007ff8:	4808      	ldr	r0, [pc, #32]	; (800801c <prvPortStartFirstTask+0x24>)
 8007ffa:	6800      	ldr	r0, [r0, #0]
 8007ffc:	6800      	ldr	r0, [r0, #0]
 8007ffe:	f380 8808 	msr	MSP, r0
 8008002:	f04f 0000 	mov.w	r0, #0
 8008006:	f380 8814 	msr	CONTROL, r0
 800800a:	b662      	cpsie	i
 800800c:	b661      	cpsie	f
 800800e:	f3bf 8f4f 	dsb	sy
 8008012:	f3bf 8f6f 	isb	sy
 8008016:	df00      	svc	0
 8008018:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800801a:	bf00      	nop
 800801c:	e000ed08 	.word	0xe000ed08

08008020 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008020:	b580      	push	{r7, lr}
 8008022:	b086      	sub	sp, #24
 8008024:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008026:	4b46      	ldr	r3, [pc, #280]	; (8008140 <xPortStartScheduler+0x120>)
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	4a46      	ldr	r2, [pc, #280]	; (8008144 <xPortStartScheduler+0x124>)
 800802c:	4293      	cmp	r3, r2
 800802e:	d10a      	bne.n	8008046 <xPortStartScheduler+0x26>
	__asm volatile
 8008030:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008034:	f383 8811 	msr	BASEPRI, r3
 8008038:	f3bf 8f6f 	isb	sy
 800803c:	f3bf 8f4f 	dsb	sy
 8008040:	613b      	str	r3, [r7, #16]
}
 8008042:	bf00      	nop
 8008044:	e7fe      	b.n	8008044 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008046:	4b3e      	ldr	r3, [pc, #248]	; (8008140 <xPortStartScheduler+0x120>)
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	4a3f      	ldr	r2, [pc, #252]	; (8008148 <xPortStartScheduler+0x128>)
 800804c:	4293      	cmp	r3, r2
 800804e:	d10a      	bne.n	8008066 <xPortStartScheduler+0x46>
	__asm volatile
 8008050:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008054:	f383 8811 	msr	BASEPRI, r3
 8008058:	f3bf 8f6f 	isb	sy
 800805c:	f3bf 8f4f 	dsb	sy
 8008060:	60fb      	str	r3, [r7, #12]
}
 8008062:	bf00      	nop
 8008064:	e7fe      	b.n	8008064 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008066:	4b39      	ldr	r3, [pc, #228]	; (800814c <xPortStartScheduler+0x12c>)
 8008068:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800806a:	697b      	ldr	r3, [r7, #20]
 800806c:	781b      	ldrb	r3, [r3, #0]
 800806e:	b2db      	uxtb	r3, r3
 8008070:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008072:	697b      	ldr	r3, [r7, #20]
 8008074:	22ff      	movs	r2, #255	; 0xff
 8008076:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008078:	697b      	ldr	r3, [r7, #20]
 800807a:	781b      	ldrb	r3, [r3, #0]
 800807c:	b2db      	uxtb	r3, r3
 800807e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008080:	78fb      	ldrb	r3, [r7, #3]
 8008082:	b2db      	uxtb	r3, r3
 8008084:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008088:	b2da      	uxtb	r2, r3
 800808a:	4b31      	ldr	r3, [pc, #196]	; (8008150 <xPortStartScheduler+0x130>)
 800808c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800808e:	4b31      	ldr	r3, [pc, #196]	; (8008154 <xPortStartScheduler+0x134>)
 8008090:	2207      	movs	r2, #7
 8008092:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008094:	e009      	b.n	80080aa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8008096:	4b2f      	ldr	r3, [pc, #188]	; (8008154 <xPortStartScheduler+0x134>)
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	3b01      	subs	r3, #1
 800809c:	4a2d      	ldr	r2, [pc, #180]	; (8008154 <xPortStartScheduler+0x134>)
 800809e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80080a0:	78fb      	ldrb	r3, [r7, #3]
 80080a2:	b2db      	uxtb	r3, r3
 80080a4:	005b      	lsls	r3, r3, #1
 80080a6:	b2db      	uxtb	r3, r3
 80080a8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80080aa:	78fb      	ldrb	r3, [r7, #3]
 80080ac:	b2db      	uxtb	r3, r3
 80080ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80080b2:	2b80      	cmp	r3, #128	; 0x80
 80080b4:	d0ef      	beq.n	8008096 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80080b6:	4b27      	ldr	r3, [pc, #156]	; (8008154 <xPortStartScheduler+0x134>)
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	f1c3 0307 	rsb	r3, r3, #7
 80080be:	2b04      	cmp	r3, #4
 80080c0:	d00a      	beq.n	80080d8 <xPortStartScheduler+0xb8>
	__asm volatile
 80080c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080c6:	f383 8811 	msr	BASEPRI, r3
 80080ca:	f3bf 8f6f 	isb	sy
 80080ce:	f3bf 8f4f 	dsb	sy
 80080d2:	60bb      	str	r3, [r7, #8]
}
 80080d4:	bf00      	nop
 80080d6:	e7fe      	b.n	80080d6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80080d8:	4b1e      	ldr	r3, [pc, #120]	; (8008154 <xPortStartScheduler+0x134>)
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	021b      	lsls	r3, r3, #8
 80080de:	4a1d      	ldr	r2, [pc, #116]	; (8008154 <xPortStartScheduler+0x134>)
 80080e0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80080e2:	4b1c      	ldr	r3, [pc, #112]	; (8008154 <xPortStartScheduler+0x134>)
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80080ea:	4a1a      	ldr	r2, [pc, #104]	; (8008154 <xPortStartScheduler+0x134>)
 80080ec:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	b2da      	uxtb	r2, r3
 80080f2:	697b      	ldr	r3, [r7, #20]
 80080f4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80080f6:	4b18      	ldr	r3, [pc, #96]	; (8008158 <xPortStartScheduler+0x138>)
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	4a17      	ldr	r2, [pc, #92]	; (8008158 <xPortStartScheduler+0x138>)
 80080fc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008100:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008102:	4b15      	ldr	r3, [pc, #84]	; (8008158 <xPortStartScheduler+0x138>)
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	4a14      	ldr	r2, [pc, #80]	; (8008158 <xPortStartScheduler+0x138>)
 8008108:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800810c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800810e:	f000 f8dd 	bl	80082cc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008112:	4b12      	ldr	r3, [pc, #72]	; (800815c <xPortStartScheduler+0x13c>)
 8008114:	2200      	movs	r2, #0
 8008116:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8008118:	f000 f8fc 	bl	8008314 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800811c:	4b10      	ldr	r3, [pc, #64]	; (8008160 <xPortStartScheduler+0x140>)
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	4a0f      	ldr	r2, [pc, #60]	; (8008160 <xPortStartScheduler+0x140>)
 8008122:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8008126:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008128:	f7ff ff66 	bl	8007ff8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800812c:	f7fe ff64 	bl	8006ff8 <vTaskSwitchContext>
	prvTaskExitError();
 8008130:	f7ff ff1e 	bl	8007f70 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008134:	2300      	movs	r3, #0
}
 8008136:	4618      	mov	r0, r3
 8008138:	3718      	adds	r7, #24
 800813a:	46bd      	mov	sp, r7
 800813c:	bd80      	pop	{r7, pc}
 800813e:	bf00      	nop
 8008140:	e000ed00 	.word	0xe000ed00
 8008144:	410fc271 	.word	0x410fc271
 8008148:	410fc270 	.word	0x410fc270
 800814c:	e000e400 	.word	0xe000e400
 8008150:	20001088 	.word	0x20001088
 8008154:	2000108c 	.word	0x2000108c
 8008158:	e000ed20 	.word	0xe000ed20
 800815c:	20000010 	.word	0x20000010
 8008160:	e000ef34 	.word	0xe000ef34

08008164 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008164:	b480      	push	{r7}
 8008166:	b083      	sub	sp, #12
 8008168:	af00      	add	r7, sp, #0
	__asm volatile
 800816a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800816e:	f383 8811 	msr	BASEPRI, r3
 8008172:	f3bf 8f6f 	isb	sy
 8008176:	f3bf 8f4f 	dsb	sy
 800817a:	607b      	str	r3, [r7, #4]
}
 800817c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800817e:	4b0f      	ldr	r3, [pc, #60]	; (80081bc <vPortEnterCritical+0x58>)
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	3301      	adds	r3, #1
 8008184:	4a0d      	ldr	r2, [pc, #52]	; (80081bc <vPortEnterCritical+0x58>)
 8008186:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008188:	4b0c      	ldr	r3, [pc, #48]	; (80081bc <vPortEnterCritical+0x58>)
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	2b01      	cmp	r3, #1
 800818e:	d10f      	bne.n	80081b0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008190:	4b0b      	ldr	r3, [pc, #44]	; (80081c0 <vPortEnterCritical+0x5c>)
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	b2db      	uxtb	r3, r3
 8008196:	2b00      	cmp	r3, #0
 8008198:	d00a      	beq.n	80081b0 <vPortEnterCritical+0x4c>
	__asm volatile
 800819a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800819e:	f383 8811 	msr	BASEPRI, r3
 80081a2:	f3bf 8f6f 	isb	sy
 80081a6:	f3bf 8f4f 	dsb	sy
 80081aa:	603b      	str	r3, [r7, #0]
}
 80081ac:	bf00      	nop
 80081ae:	e7fe      	b.n	80081ae <vPortEnterCritical+0x4a>
	}
}
 80081b0:	bf00      	nop
 80081b2:	370c      	adds	r7, #12
 80081b4:	46bd      	mov	sp, r7
 80081b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ba:	4770      	bx	lr
 80081bc:	20000010 	.word	0x20000010
 80081c0:	e000ed04 	.word	0xe000ed04

080081c4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80081c4:	b480      	push	{r7}
 80081c6:	b083      	sub	sp, #12
 80081c8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80081ca:	4b12      	ldr	r3, [pc, #72]	; (8008214 <vPortExitCritical+0x50>)
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	d10a      	bne.n	80081e8 <vPortExitCritical+0x24>
	__asm volatile
 80081d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081d6:	f383 8811 	msr	BASEPRI, r3
 80081da:	f3bf 8f6f 	isb	sy
 80081de:	f3bf 8f4f 	dsb	sy
 80081e2:	607b      	str	r3, [r7, #4]
}
 80081e4:	bf00      	nop
 80081e6:	e7fe      	b.n	80081e6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80081e8:	4b0a      	ldr	r3, [pc, #40]	; (8008214 <vPortExitCritical+0x50>)
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	3b01      	subs	r3, #1
 80081ee:	4a09      	ldr	r2, [pc, #36]	; (8008214 <vPortExitCritical+0x50>)
 80081f0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80081f2:	4b08      	ldr	r3, [pc, #32]	; (8008214 <vPortExitCritical+0x50>)
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	d105      	bne.n	8008206 <vPortExitCritical+0x42>
 80081fa:	2300      	movs	r3, #0
 80081fc:	603b      	str	r3, [r7, #0]
	__asm volatile
 80081fe:	683b      	ldr	r3, [r7, #0]
 8008200:	f383 8811 	msr	BASEPRI, r3
}
 8008204:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008206:	bf00      	nop
 8008208:	370c      	adds	r7, #12
 800820a:	46bd      	mov	sp, r7
 800820c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008210:	4770      	bx	lr
 8008212:	bf00      	nop
 8008214:	20000010 	.word	0x20000010
	...

08008220 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008220:	f3ef 8009 	mrs	r0, PSP
 8008224:	f3bf 8f6f 	isb	sy
 8008228:	4b15      	ldr	r3, [pc, #84]	; (8008280 <pxCurrentTCBConst>)
 800822a:	681a      	ldr	r2, [r3, #0]
 800822c:	f01e 0f10 	tst.w	lr, #16
 8008230:	bf08      	it	eq
 8008232:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008236:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800823a:	6010      	str	r0, [r2, #0]
 800823c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008240:	f04f 0050 	mov.w	r0, #80	; 0x50
 8008244:	f380 8811 	msr	BASEPRI, r0
 8008248:	f3bf 8f4f 	dsb	sy
 800824c:	f3bf 8f6f 	isb	sy
 8008250:	f7fe fed2 	bl	8006ff8 <vTaskSwitchContext>
 8008254:	f04f 0000 	mov.w	r0, #0
 8008258:	f380 8811 	msr	BASEPRI, r0
 800825c:	bc09      	pop	{r0, r3}
 800825e:	6819      	ldr	r1, [r3, #0]
 8008260:	6808      	ldr	r0, [r1, #0]
 8008262:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008266:	f01e 0f10 	tst.w	lr, #16
 800826a:	bf08      	it	eq
 800826c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008270:	f380 8809 	msr	PSP, r0
 8008274:	f3bf 8f6f 	isb	sy
 8008278:	4770      	bx	lr
 800827a:	bf00      	nop
 800827c:	f3af 8000 	nop.w

08008280 <pxCurrentTCBConst>:
 8008280:	20000a5c 	.word	0x20000a5c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008284:	bf00      	nop
 8008286:	bf00      	nop

08008288 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008288:	b580      	push	{r7, lr}
 800828a:	b082      	sub	sp, #8
 800828c:	af00      	add	r7, sp, #0
	__asm volatile
 800828e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008292:	f383 8811 	msr	BASEPRI, r3
 8008296:	f3bf 8f6f 	isb	sy
 800829a:	f3bf 8f4f 	dsb	sy
 800829e:	607b      	str	r3, [r7, #4]
}
 80082a0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80082a2:	f7fe fdef 	bl	8006e84 <xTaskIncrementTick>
 80082a6:	4603      	mov	r3, r0
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	d003      	beq.n	80082b4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80082ac:	4b06      	ldr	r3, [pc, #24]	; (80082c8 <xPortSysTickHandler+0x40>)
 80082ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80082b2:	601a      	str	r2, [r3, #0]
 80082b4:	2300      	movs	r3, #0
 80082b6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80082b8:	683b      	ldr	r3, [r7, #0]
 80082ba:	f383 8811 	msr	BASEPRI, r3
}
 80082be:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80082c0:	bf00      	nop
 80082c2:	3708      	adds	r7, #8
 80082c4:	46bd      	mov	sp, r7
 80082c6:	bd80      	pop	{r7, pc}
 80082c8:	e000ed04 	.word	0xe000ed04

080082cc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80082cc:	b480      	push	{r7}
 80082ce:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80082d0:	4b0b      	ldr	r3, [pc, #44]	; (8008300 <vPortSetupTimerInterrupt+0x34>)
 80082d2:	2200      	movs	r2, #0
 80082d4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80082d6:	4b0b      	ldr	r3, [pc, #44]	; (8008304 <vPortSetupTimerInterrupt+0x38>)
 80082d8:	2200      	movs	r2, #0
 80082da:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80082dc:	4b0a      	ldr	r3, [pc, #40]	; (8008308 <vPortSetupTimerInterrupt+0x3c>)
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	4a0a      	ldr	r2, [pc, #40]	; (800830c <vPortSetupTimerInterrupt+0x40>)
 80082e2:	fba2 2303 	umull	r2, r3, r2, r3
 80082e6:	099b      	lsrs	r3, r3, #6
 80082e8:	4a09      	ldr	r2, [pc, #36]	; (8008310 <vPortSetupTimerInterrupt+0x44>)
 80082ea:	3b01      	subs	r3, #1
 80082ec:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80082ee:	4b04      	ldr	r3, [pc, #16]	; (8008300 <vPortSetupTimerInterrupt+0x34>)
 80082f0:	2207      	movs	r2, #7
 80082f2:	601a      	str	r2, [r3, #0]
}
 80082f4:	bf00      	nop
 80082f6:	46bd      	mov	sp, r7
 80082f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082fc:	4770      	bx	lr
 80082fe:	bf00      	nop
 8008300:	e000e010 	.word	0xe000e010
 8008304:	e000e018 	.word	0xe000e018
 8008308:	20000004 	.word	0x20000004
 800830c:	10624dd3 	.word	0x10624dd3
 8008310:	e000e014 	.word	0xe000e014

08008314 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008314:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8008324 <vPortEnableVFP+0x10>
 8008318:	6801      	ldr	r1, [r0, #0]
 800831a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800831e:	6001      	str	r1, [r0, #0]
 8008320:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008322:	bf00      	nop
 8008324:	e000ed88 	.word	0xe000ed88

08008328 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008328:	b480      	push	{r7}
 800832a:	b085      	sub	sp, #20
 800832c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800832e:	f3ef 8305 	mrs	r3, IPSR
 8008332:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	2b0f      	cmp	r3, #15
 8008338:	d914      	bls.n	8008364 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800833a:	4a17      	ldr	r2, [pc, #92]	; (8008398 <vPortValidateInterruptPriority+0x70>)
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	4413      	add	r3, r2
 8008340:	781b      	ldrb	r3, [r3, #0]
 8008342:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008344:	4b15      	ldr	r3, [pc, #84]	; (800839c <vPortValidateInterruptPriority+0x74>)
 8008346:	781b      	ldrb	r3, [r3, #0]
 8008348:	7afa      	ldrb	r2, [r7, #11]
 800834a:	429a      	cmp	r2, r3
 800834c:	d20a      	bcs.n	8008364 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800834e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008352:	f383 8811 	msr	BASEPRI, r3
 8008356:	f3bf 8f6f 	isb	sy
 800835a:	f3bf 8f4f 	dsb	sy
 800835e:	607b      	str	r3, [r7, #4]
}
 8008360:	bf00      	nop
 8008362:	e7fe      	b.n	8008362 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008364:	4b0e      	ldr	r3, [pc, #56]	; (80083a0 <vPortValidateInterruptPriority+0x78>)
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800836c:	4b0d      	ldr	r3, [pc, #52]	; (80083a4 <vPortValidateInterruptPriority+0x7c>)
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	429a      	cmp	r2, r3
 8008372:	d90a      	bls.n	800838a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8008374:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008378:	f383 8811 	msr	BASEPRI, r3
 800837c:	f3bf 8f6f 	isb	sy
 8008380:	f3bf 8f4f 	dsb	sy
 8008384:	603b      	str	r3, [r7, #0]
}
 8008386:	bf00      	nop
 8008388:	e7fe      	b.n	8008388 <vPortValidateInterruptPriority+0x60>
	}
 800838a:	bf00      	nop
 800838c:	3714      	adds	r7, #20
 800838e:	46bd      	mov	sp, r7
 8008390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008394:	4770      	bx	lr
 8008396:	bf00      	nop
 8008398:	e000e3f0 	.word	0xe000e3f0
 800839c:	20001088 	.word	0x20001088
 80083a0:	e000ed0c 	.word	0xe000ed0c
 80083a4:	2000108c 	.word	0x2000108c

080083a8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80083a8:	b580      	push	{r7, lr}
 80083aa:	b08a      	sub	sp, #40	; 0x28
 80083ac:	af00      	add	r7, sp, #0
 80083ae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80083b0:	2300      	movs	r3, #0
 80083b2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80083b4:	f7fe fcaa 	bl	8006d0c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80083b8:	4b5b      	ldr	r3, [pc, #364]	; (8008528 <pvPortMalloc+0x180>)
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	2b00      	cmp	r3, #0
 80083be:	d101      	bne.n	80083c4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80083c0:	f000 f920 	bl	8008604 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80083c4:	4b59      	ldr	r3, [pc, #356]	; (800852c <pvPortMalloc+0x184>)
 80083c6:	681a      	ldr	r2, [r3, #0]
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	4013      	ands	r3, r2
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	f040 8093 	bne.w	80084f8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	d01d      	beq.n	8008414 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80083d8:	2208      	movs	r2, #8
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	4413      	add	r3, r2
 80083de:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	f003 0307 	and.w	r3, r3, #7
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	d014      	beq.n	8008414 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	f023 0307 	bic.w	r3, r3, #7
 80083f0:	3308      	adds	r3, #8
 80083f2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	f003 0307 	and.w	r3, r3, #7
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	d00a      	beq.n	8008414 <pvPortMalloc+0x6c>
	__asm volatile
 80083fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008402:	f383 8811 	msr	BASEPRI, r3
 8008406:	f3bf 8f6f 	isb	sy
 800840a:	f3bf 8f4f 	dsb	sy
 800840e:	617b      	str	r3, [r7, #20]
}
 8008410:	bf00      	nop
 8008412:	e7fe      	b.n	8008412 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	2b00      	cmp	r3, #0
 8008418:	d06e      	beq.n	80084f8 <pvPortMalloc+0x150>
 800841a:	4b45      	ldr	r3, [pc, #276]	; (8008530 <pvPortMalloc+0x188>)
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	687a      	ldr	r2, [r7, #4]
 8008420:	429a      	cmp	r2, r3
 8008422:	d869      	bhi.n	80084f8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008424:	4b43      	ldr	r3, [pc, #268]	; (8008534 <pvPortMalloc+0x18c>)
 8008426:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008428:	4b42      	ldr	r3, [pc, #264]	; (8008534 <pvPortMalloc+0x18c>)
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800842e:	e004      	b.n	800843a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8008430:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008432:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008434:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800843a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800843c:	685b      	ldr	r3, [r3, #4]
 800843e:	687a      	ldr	r2, [r7, #4]
 8008440:	429a      	cmp	r2, r3
 8008442:	d903      	bls.n	800844c <pvPortMalloc+0xa4>
 8008444:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	2b00      	cmp	r3, #0
 800844a:	d1f1      	bne.n	8008430 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800844c:	4b36      	ldr	r3, [pc, #216]	; (8008528 <pvPortMalloc+0x180>)
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008452:	429a      	cmp	r2, r3
 8008454:	d050      	beq.n	80084f8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008456:	6a3b      	ldr	r3, [r7, #32]
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	2208      	movs	r2, #8
 800845c:	4413      	add	r3, r2
 800845e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008460:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008462:	681a      	ldr	r2, [r3, #0]
 8008464:	6a3b      	ldr	r3, [r7, #32]
 8008466:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008468:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800846a:	685a      	ldr	r2, [r3, #4]
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	1ad2      	subs	r2, r2, r3
 8008470:	2308      	movs	r3, #8
 8008472:	005b      	lsls	r3, r3, #1
 8008474:	429a      	cmp	r2, r3
 8008476:	d91f      	bls.n	80084b8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008478:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	4413      	add	r3, r2
 800847e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008480:	69bb      	ldr	r3, [r7, #24]
 8008482:	f003 0307 	and.w	r3, r3, #7
 8008486:	2b00      	cmp	r3, #0
 8008488:	d00a      	beq.n	80084a0 <pvPortMalloc+0xf8>
	__asm volatile
 800848a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800848e:	f383 8811 	msr	BASEPRI, r3
 8008492:	f3bf 8f6f 	isb	sy
 8008496:	f3bf 8f4f 	dsb	sy
 800849a:	613b      	str	r3, [r7, #16]
}
 800849c:	bf00      	nop
 800849e:	e7fe      	b.n	800849e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80084a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084a2:	685a      	ldr	r2, [r3, #4]
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	1ad2      	subs	r2, r2, r3
 80084a8:	69bb      	ldr	r3, [r7, #24]
 80084aa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80084ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084ae:	687a      	ldr	r2, [r7, #4]
 80084b0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80084b2:	69b8      	ldr	r0, [r7, #24]
 80084b4:	f000 f908 	bl	80086c8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80084b8:	4b1d      	ldr	r3, [pc, #116]	; (8008530 <pvPortMalloc+0x188>)
 80084ba:	681a      	ldr	r2, [r3, #0]
 80084bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084be:	685b      	ldr	r3, [r3, #4]
 80084c0:	1ad3      	subs	r3, r2, r3
 80084c2:	4a1b      	ldr	r2, [pc, #108]	; (8008530 <pvPortMalloc+0x188>)
 80084c4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80084c6:	4b1a      	ldr	r3, [pc, #104]	; (8008530 <pvPortMalloc+0x188>)
 80084c8:	681a      	ldr	r2, [r3, #0]
 80084ca:	4b1b      	ldr	r3, [pc, #108]	; (8008538 <pvPortMalloc+0x190>)
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	429a      	cmp	r2, r3
 80084d0:	d203      	bcs.n	80084da <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80084d2:	4b17      	ldr	r3, [pc, #92]	; (8008530 <pvPortMalloc+0x188>)
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	4a18      	ldr	r2, [pc, #96]	; (8008538 <pvPortMalloc+0x190>)
 80084d8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80084da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084dc:	685a      	ldr	r2, [r3, #4]
 80084de:	4b13      	ldr	r3, [pc, #76]	; (800852c <pvPortMalloc+0x184>)
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	431a      	orrs	r2, r3
 80084e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084e6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80084e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084ea:	2200      	movs	r2, #0
 80084ec:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80084ee:	4b13      	ldr	r3, [pc, #76]	; (800853c <pvPortMalloc+0x194>)
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	3301      	adds	r3, #1
 80084f4:	4a11      	ldr	r2, [pc, #68]	; (800853c <pvPortMalloc+0x194>)
 80084f6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80084f8:	f7fe fc16 	bl	8006d28 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80084fc:	69fb      	ldr	r3, [r7, #28]
 80084fe:	f003 0307 	and.w	r3, r3, #7
 8008502:	2b00      	cmp	r3, #0
 8008504:	d00a      	beq.n	800851c <pvPortMalloc+0x174>
	__asm volatile
 8008506:	f04f 0350 	mov.w	r3, #80	; 0x50
 800850a:	f383 8811 	msr	BASEPRI, r3
 800850e:	f3bf 8f6f 	isb	sy
 8008512:	f3bf 8f4f 	dsb	sy
 8008516:	60fb      	str	r3, [r7, #12]
}
 8008518:	bf00      	nop
 800851a:	e7fe      	b.n	800851a <pvPortMalloc+0x172>
	return pvReturn;
 800851c:	69fb      	ldr	r3, [r7, #28]
}
 800851e:	4618      	mov	r0, r3
 8008520:	3728      	adds	r7, #40	; 0x28
 8008522:	46bd      	mov	sp, r7
 8008524:	bd80      	pop	{r7, pc}
 8008526:	bf00      	nop
 8008528:	20001c50 	.word	0x20001c50
 800852c:	20001c64 	.word	0x20001c64
 8008530:	20001c54 	.word	0x20001c54
 8008534:	20001c48 	.word	0x20001c48
 8008538:	20001c58 	.word	0x20001c58
 800853c:	20001c5c 	.word	0x20001c5c

08008540 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008540:	b580      	push	{r7, lr}
 8008542:	b086      	sub	sp, #24
 8008544:	af00      	add	r7, sp, #0
 8008546:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	2b00      	cmp	r3, #0
 8008550:	d04d      	beq.n	80085ee <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008552:	2308      	movs	r3, #8
 8008554:	425b      	negs	r3, r3
 8008556:	697a      	ldr	r2, [r7, #20]
 8008558:	4413      	add	r3, r2
 800855a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800855c:	697b      	ldr	r3, [r7, #20]
 800855e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008560:	693b      	ldr	r3, [r7, #16]
 8008562:	685a      	ldr	r2, [r3, #4]
 8008564:	4b24      	ldr	r3, [pc, #144]	; (80085f8 <vPortFree+0xb8>)
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	4013      	ands	r3, r2
 800856a:	2b00      	cmp	r3, #0
 800856c:	d10a      	bne.n	8008584 <vPortFree+0x44>
	__asm volatile
 800856e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008572:	f383 8811 	msr	BASEPRI, r3
 8008576:	f3bf 8f6f 	isb	sy
 800857a:	f3bf 8f4f 	dsb	sy
 800857e:	60fb      	str	r3, [r7, #12]
}
 8008580:	bf00      	nop
 8008582:	e7fe      	b.n	8008582 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008584:	693b      	ldr	r3, [r7, #16]
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	2b00      	cmp	r3, #0
 800858a:	d00a      	beq.n	80085a2 <vPortFree+0x62>
	__asm volatile
 800858c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008590:	f383 8811 	msr	BASEPRI, r3
 8008594:	f3bf 8f6f 	isb	sy
 8008598:	f3bf 8f4f 	dsb	sy
 800859c:	60bb      	str	r3, [r7, #8]
}
 800859e:	bf00      	nop
 80085a0:	e7fe      	b.n	80085a0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80085a2:	693b      	ldr	r3, [r7, #16]
 80085a4:	685a      	ldr	r2, [r3, #4]
 80085a6:	4b14      	ldr	r3, [pc, #80]	; (80085f8 <vPortFree+0xb8>)
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	4013      	ands	r3, r2
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	d01e      	beq.n	80085ee <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80085b0:	693b      	ldr	r3, [r7, #16]
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	d11a      	bne.n	80085ee <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80085b8:	693b      	ldr	r3, [r7, #16]
 80085ba:	685a      	ldr	r2, [r3, #4]
 80085bc:	4b0e      	ldr	r3, [pc, #56]	; (80085f8 <vPortFree+0xb8>)
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	43db      	mvns	r3, r3
 80085c2:	401a      	ands	r2, r3
 80085c4:	693b      	ldr	r3, [r7, #16]
 80085c6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80085c8:	f7fe fba0 	bl	8006d0c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80085cc:	693b      	ldr	r3, [r7, #16]
 80085ce:	685a      	ldr	r2, [r3, #4]
 80085d0:	4b0a      	ldr	r3, [pc, #40]	; (80085fc <vPortFree+0xbc>)
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	4413      	add	r3, r2
 80085d6:	4a09      	ldr	r2, [pc, #36]	; (80085fc <vPortFree+0xbc>)
 80085d8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80085da:	6938      	ldr	r0, [r7, #16]
 80085dc:	f000 f874 	bl	80086c8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80085e0:	4b07      	ldr	r3, [pc, #28]	; (8008600 <vPortFree+0xc0>)
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	3301      	adds	r3, #1
 80085e6:	4a06      	ldr	r2, [pc, #24]	; (8008600 <vPortFree+0xc0>)
 80085e8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80085ea:	f7fe fb9d 	bl	8006d28 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80085ee:	bf00      	nop
 80085f0:	3718      	adds	r7, #24
 80085f2:	46bd      	mov	sp, r7
 80085f4:	bd80      	pop	{r7, pc}
 80085f6:	bf00      	nop
 80085f8:	20001c64 	.word	0x20001c64
 80085fc:	20001c54 	.word	0x20001c54
 8008600:	20001c60 	.word	0x20001c60

08008604 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008604:	b480      	push	{r7}
 8008606:	b085      	sub	sp, #20
 8008608:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800860a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800860e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008610:	4b27      	ldr	r3, [pc, #156]	; (80086b0 <prvHeapInit+0xac>)
 8008612:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	f003 0307 	and.w	r3, r3, #7
 800861a:	2b00      	cmp	r3, #0
 800861c:	d00c      	beq.n	8008638 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	3307      	adds	r3, #7
 8008622:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008624:	68fb      	ldr	r3, [r7, #12]
 8008626:	f023 0307 	bic.w	r3, r3, #7
 800862a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800862c:	68ba      	ldr	r2, [r7, #8]
 800862e:	68fb      	ldr	r3, [r7, #12]
 8008630:	1ad3      	subs	r3, r2, r3
 8008632:	4a1f      	ldr	r2, [pc, #124]	; (80086b0 <prvHeapInit+0xac>)
 8008634:	4413      	add	r3, r2
 8008636:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800863c:	4a1d      	ldr	r2, [pc, #116]	; (80086b4 <prvHeapInit+0xb0>)
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008642:	4b1c      	ldr	r3, [pc, #112]	; (80086b4 <prvHeapInit+0xb0>)
 8008644:	2200      	movs	r2, #0
 8008646:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	68ba      	ldr	r2, [r7, #8]
 800864c:	4413      	add	r3, r2
 800864e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008650:	2208      	movs	r2, #8
 8008652:	68fb      	ldr	r3, [r7, #12]
 8008654:	1a9b      	subs	r3, r3, r2
 8008656:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008658:	68fb      	ldr	r3, [r7, #12]
 800865a:	f023 0307 	bic.w	r3, r3, #7
 800865e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	4a15      	ldr	r2, [pc, #84]	; (80086b8 <prvHeapInit+0xb4>)
 8008664:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008666:	4b14      	ldr	r3, [pc, #80]	; (80086b8 <prvHeapInit+0xb4>)
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	2200      	movs	r2, #0
 800866c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800866e:	4b12      	ldr	r3, [pc, #72]	; (80086b8 <prvHeapInit+0xb4>)
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	2200      	movs	r2, #0
 8008674:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800867a:	683b      	ldr	r3, [r7, #0]
 800867c:	68fa      	ldr	r2, [r7, #12]
 800867e:	1ad2      	subs	r2, r2, r3
 8008680:	683b      	ldr	r3, [r7, #0]
 8008682:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008684:	4b0c      	ldr	r3, [pc, #48]	; (80086b8 <prvHeapInit+0xb4>)
 8008686:	681a      	ldr	r2, [r3, #0]
 8008688:	683b      	ldr	r3, [r7, #0]
 800868a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800868c:	683b      	ldr	r3, [r7, #0]
 800868e:	685b      	ldr	r3, [r3, #4]
 8008690:	4a0a      	ldr	r2, [pc, #40]	; (80086bc <prvHeapInit+0xb8>)
 8008692:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008694:	683b      	ldr	r3, [r7, #0]
 8008696:	685b      	ldr	r3, [r3, #4]
 8008698:	4a09      	ldr	r2, [pc, #36]	; (80086c0 <prvHeapInit+0xbc>)
 800869a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800869c:	4b09      	ldr	r3, [pc, #36]	; (80086c4 <prvHeapInit+0xc0>)
 800869e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80086a2:	601a      	str	r2, [r3, #0]
}
 80086a4:	bf00      	nop
 80086a6:	3714      	adds	r7, #20
 80086a8:	46bd      	mov	sp, r7
 80086aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ae:	4770      	bx	lr
 80086b0:	20001090 	.word	0x20001090
 80086b4:	20001c48 	.word	0x20001c48
 80086b8:	20001c50 	.word	0x20001c50
 80086bc:	20001c58 	.word	0x20001c58
 80086c0:	20001c54 	.word	0x20001c54
 80086c4:	20001c64 	.word	0x20001c64

080086c8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80086c8:	b480      	push	{r7}
 80086ca:	b085      	sub	sp, #20
 80086cc:	af00      	add	r7, sp, #0
 80086ce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80086d0:	4b28      	ldr	r3, [pc, #160]	; (8008774 <prvInsertBlockIntoFreeList+0xac>)
 80086d2:	60fb      	str	r3, [r7, #12]
 80086d4:	e002      	b.n	80086dc <prvInsertBlockIntoFreeList+0x14>
 80086d6:	68fb      	ldr	r3, [r7, #12]
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	60fb      	str	r3, [r7, #12]
 80086dc:	68fb      	ldr	r3, [r7, #12]
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	687a      	ldr	r2, [r7, #4]
 80086e2:	429a      	cmp	r2, r3
 80086e4:	d8f7      	bhi.n	80086d6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80086ea:	68fb      	ldr	r3, [r7, #12]
 80086ec:	685b      	ldr	r3, [r3, #4]
 80086ee:	68ba      	ldr	r2, [r7, #8]
 80086f0:	4413      	add	r3, r2
 80086f2:	687a      	ldr	r2, [r7, #4]
 80086f4:	429a      	cmp	r2, r3
 80086f6:	d108      	bne.n	800870a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80086f8:	68fb      	ldr	r3, [r7, #12]
 80086fa:	685a      	ldr	r2, [r3, #4]
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	685b      	ldr	r3, [r3, #4]
 8008700:	441a      	add	r2, r3
 8008702:	68fb      	ldr	r3, [r7, #12]
 8008704:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008706:	68fb      	ldr	r3, [r7, #12]
 8008708:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	685b      	ldr	r3, [r3, #4]
 8008712:	68ba      	ldr	r2, [r7, #8]
 8008714:	441a      	add	r2, r3
 8008716:	68fb      	ldr	r3, [r7, #12]
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	429a      	cmp	r2, r3
 800871c:	d118      	bne.n	8008750 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800871e:	68fb      	ldr	r3, [r7, #12]
 8008720:	681a      	ldr	r2, [r3, #0]
 8008722:	4b15      	ldr	r3, [pc, #84]	; (8008778 <prvInsertBlockIntoFreeList+0xb0>)
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	429a      	cmp	r2, r3
 8008728:	d00d      	beq.n	8008746 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	685a      	ldr	r2, [r3, #4]
 800872e:	68fb      	ldr	r3, [r7, #12]
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	685b      	ldr	r3, [r3, #4]
 8008734:	441a      	add	r2, r3
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800873a:	68fb      	ldr	r3, [r7, #12]
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	681a      	ldr	r2, [r3, #0]
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	601a      	str	r2, [r3, #0]
 8008744:	e008      	b.n	8008758 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008746:	4b0c      	ldr	r3, [pc, #48]	; (8008778 <prvInsertBlockIntoFreeList+0xb0>)
 8008748:	681a      	ldr	r2, [r3, #0]
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	601a      	str	r2, [r3, #0]
 800874e:	e003      	b.n	8008758 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008750:	68fb      	ldr	r3, [r7, #12]
 8008752:	681a      	ldr	r2, [r3, #0]
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008758:	68fa      	ldr	r2, [r7, #12]
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	429a      	cmp	r2, r3
 800875e:	d002      	beq.n	8008766 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008760:	68fb      	ldr	r3, [r7, #12]
 8008762:	687a      	ldr	r2, [r7, #4]
 8008764:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008766:	bf00      	nop
 8008768:	3714      	adds	r7, #20
 800876a:	46bd      	mov	sp, r7
 800876c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008770:	4770      	bx	lr
 8008772:	bf00      	nop
 8008774:	20001c48 	.word	0x20001c48
 8008778:	20001c50 	.word	0x20001c50

0800877c <__errno>:
 800877c:	4b01      	ldr	r3, [pc, #4]	; (8008784 <__errno+0x8>)
 800877e:	6818      	ldr	r0, [r3, #0]
 8008780:	4770      	bx	lr
 8008782:	bf00      	nop
 8008784:	20000014 	.word	0x20000014

08008788 <std>:
 8008788:	2300      	movs	r3, #0
 800878a:	b510      	push	{r4, lr}
 800878c:	4604      	mov	r4, r0
 800878e:	e9c0 3300 	strd	r3, r3, [r0]
 8008792:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008796:	6083      	str	r3, [r0, #8]
 8008798:	8181      	strh	r1, [r0, #12]
 800879a:	6643      	str	r3, [r0, #100]	; 0x64
 800879c:	81c2      	strh	r2, [r0, #14]
 800879e:	6183      	str	r3, [r0, #24]
 80087a0:	4619      	mov	r1, r3
 80087a2:	2208      	movs	r2, #8
 80087a4:	305c      	adds	r0, #92	; 0x5c
 80087a6:	f000 f91a 	bl	80089de <memset>
 80087aa:	4b05      	ldr	r3, [pc, #20]	; (80087c0 <std+0x38>)
 80087ac:	6263      	str	r3, [r4, #36]	; 0x24
 80087ae:	4b05      	ldr	r3, [pc, #20]	; (80087c4 <std+0x3c>)
 80087b0:	62a3      	str	r3, [r4, #40]	; 0x28
 80087b2:	4b05      	ldr	r3, [pc, #20]	; (80087c8 <std+0x40>)
 80087b4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80087b6:	4b05      	ldr	r3, [pc, #20]	; (80087cc <std+0x44>)
 80087b8:	6224      	str	r4, [r4, #32]
 80087ba:	6323      	str	r3, [r4, #48]	; 0x30
 80087bc:	bd10      	pop	{r4, pc}
 80087be:	bf00      	nop
 80087c0:	08008c3d 	.word	0x08008c3d
 80087c4:	08008c5f 	.word	0x08008c5f
 80087c8:	08008c97 	.word	0x08008c97
 80087cc:	08008cbb 	.word	0x08008cbb

080087d0 <_cleanup_r>:
 80087d0:	4901      	ldr	r1, [pc, #4]	; (80087d8 <_cleanup_r+0x8>)
 80087d2:	f000 b8af 	b.w	8008934 <_fwalk_reent>
 80087d6:	bf00      	nop
 80087d8:	08008e15 	.word	0x08008e15

080087dc <__sfmoreglue>:
 80087dc:	b570      	push	{r4, r5, r6, lr}
 80087de:	2268      	movs	r2, #104	; 0x68
 80087e0:	1e4d      	subs	r5, r1, #1
 80087e2:	4355      	muls	r5, r2
 80087e4:	460e      	mov	r6, r1
 80087e6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80087ea:	f000 f921 	bl	8008a30 <_malloc_r>
 80087ee:	4604      	mov	r4, r0
 80087f0:	b140      	cbz	r0, 8008804 <__sfmoreglue+0x28>
 80087f2:	2100      	movs	r1, #0
 80087f4:	e9c0 1600 	strd	r1, r6, [r0]
 80087f8:	300c      	adds	r0, #12
 80087fa:	60a0      	str	r0, [r4, #8]
 80087fc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008800:	f000 f8ed 	bl	80089de <memset>
 8008804:	4620      	mov	r0, r4
 8008806:	bd70      	pop	{r4, r5, r6, pc}

08008808 <__sfp_lock_acquire>:
 8008808:	4801      	ldr	r0, [pc, #4]	; (8008810 <__sfp_lock_acquire+0x8>)
 800880a:	f000 b8d8 	b.w	80089be <__retarget_lock_acquire_recursive>
 800880e:	bf00      	nop
 8008810:	20001c69 	.word	0x20001c69

08008814 <__sfp_lock_release>:
 8008814:	4801      	ldr	r0, [pc, #4]	; (800881c <__sfp_lock_release+0x8>)
 8008816:	f000 b8d3 	b.w	80089c0 <__retarget_lock_release_recursive>
 800881a:	bf00      	nop
 800881c:	20001c69 	.word	0x20001c69

08008820 <__sinit_lock_acquire>:
 8008820:	4801      	ldr	r0, [pc, #4]	; (8008828 <__sinit_lock_acquire+0x8>)
 8008822:	f000 b8cc 	b.w	80089be <__retarget_lock_acquire_recursive>
 8008826:	bf00      	nop
 8008828:	20001c6a 	.word	0x20001c6a

0800882c <__sinit_lock_release>:
 800882c:	4801      	ldr	r0, [pc, #4]	; (8008834 <__sinit_lock_release+0x8>)
 800882e:	f000 b8c7 	b.w	80089c0 <__retarget_lock_release_recursive>
 8008832:	bf00      	nop
 8008834:	20001c6a 	.word	0x20001c6a

08008838 <__sinit>:
 8008838:	b510      	push	{r4, lr}
 800883a:	4604      	mov	r4, r0
 800883c:	f7ff fff0 	bl	8008820 <__sinit_lock_acquire>
 8008840:	69a3      	ldr	r3, [r4, #24]
 8008842:	b11b      	cbz	r3, 800884c <__sinit+0x14>
 8008844:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008848:	f7ff bff0 	b.w	800882c <__sinit_lock_release>
 800884c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008850:	6523      	str	r3, [r4, #80]	; 0x50
 8008852:	4b13      	ldr	r3, [pc, #76]	; (80088a0 <__sinit+0x68>)
 8008854:	4a13      	ldr	r2, [pc, #76]	; (80088a4 <__sinit+0x6c>)
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	62a2      	str	r2, [r4, #40]	; 0x28
 800885a:	42a3      	cmp	r3, r4
 800885c:	bf04      	itt	eq
 800885e:	2301      	moveq	r3, #1
 8008860:	61a3      	streq	r3, [r4, #24]
 8008862:	4620      	mov	r0, r4
 8008864:	f000 f820 	bl	80088a8 <__sfp>
 8008868:	6060      	str	r0, [r4, #4]
 800886a:	4620      	mov	r0, r4
 800886c:	f000 f81c 	bl	80088a8 <__sfp>
 8008870:	60a0      	str	r0, [r4, #8]
 8008872:	4620      	mov	r0, r4
 8008874:	f000 f818 	bl	80088a8 <__sfp>
 8008878:	2200      	movs	r2, #0
 800887a:	60e0      	str	r0, [r4, #12]
 800887c:	2104      	movs	r1, #4
 800887e:	6860      	ldr	r0, [r4, #4]
 8008880:	f7ff ff82 	bl	8008788 <std>
 8008884:	68a0      	ldr	r0, [r4, #8]
 8008886:	2201      	movs	r2, #1
 8008888:	2109      	movs	r1, #9
 800888a:	f7ff ff7d 	bl	8008788 <std>
 800888e:	68e0      	ldr	r0, [r4, #12]
 8008890:	2202      	movs	r2, #2
 8008892:	2112      	movs	r1, #18
 8008894:	f7ff ff78 	bl	8008788 <std>
 8008898:	2301      	movs	r3, #1
 800889a:	61a3      	str	r3, [r4, #24]
 800889c:	e7d2      	b.n	8008844 <__sinit+0xc>
 800889e:	bf00      	nop
 80088a0:	080099a0 	.word	0x080099a0
 80088a4:	080087d1 	.word	0x080087d1

080088a8 <__sfp>:
 80088a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80088aa:	4607      	mov	r7, r0
 80088ac:	f7ff ffac 	bl	8008808 <__sfp_lock_acquire>
 80088b0:	4b1e      	ldr	r3, [pc, #120]	; (800892c <__sfp+0x84>)
 80088b2:	681e      	ldr	r6, [r3, #0]
 80088b4:	69b3      	ldr	r3, [r6, #24]
 80088b6:	b913      	cbnz	r3, 80088be <__sfp+0x16>
 80088b8:	4630      	mov	r0, r6
 80088ba:	f7ff ffbd 	bl	8008838 <__sinit>
 80088be:	3648      	adds	r6, #72	; 0x48
 80088c0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80088c4:	3b01      	subs	r3, #1
 80088c6:	d503      	bpl.n	80088d0 <__sfp+0x28>
 80088c8:	6833      	ldr	r3, [r6, #0]
 80088ca:	b30b      	cbz	r3, 8008910 <__sfp+0x68>
 80088cc:	6836      	ldr	r6, [r6, #0]
 80088ce:	e7f7      	b.n	80088c0 <__sfp+0x18>
 80088d0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80088d4:	b9d5      	cbnz	r5, 800890c <__sfp+0x64>
 80088d6:	4b16      	ldr	r3, [pc, #88]	; (8008930 <__sfp+0x88>)
 80088d8:	60e3      	str	r3, [r4, #12]
 80088da:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80088de:	6665      	str	r5, [r4, #100]	; 0x64
 80088e0:	f000 f86c 	bl	80089bc <__retarget_lock_init_recursive>
 80088e4:	f7ff ff96 	bl	8008814 <__sfp_lock_release>
 80088e8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80088ec:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80088f0:	6025      	str	r5, [r4, #0]
 80088f2:	61a5      	str	r5, [r4, #24]
 80088f4:	2208      	movs	r2, #8
 80088f6:	4629      	mov	r1, r5
 80088f8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80088fc:	f000 f86f 	bl	80089de <memset>
 8008900:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008904:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008908:	4620      	mov	r0, r4
 800890a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800890c:	3468      	adds	r4, #104	; 0x68
 800890e:	e7d9      	b.n	80088c4 <__sfp+0x1c>
 8008910:	2104      	movs	r1, #4
 8008912:	4638      	mov	r0, r7
 8008914:	f7ff ff62 	bl	80087dc <__sfmoreglue>
 8008918:	4604      	mov	r4, r0
 800891a:	6030      	str	r0, [r6, #0]
 800891c:	2800      	cmp	r0, #0
 800891e:	d1d5      	bne.n	80088cc <__sfp+0x24>
 8008920:	f7ff ff78 	bl	8008814 <__sfp_lock_release>
 8008924:	230c      	movs	r3, #12
 8008926:	603b      	str	r3, [r7, #0]
 8008928:	e7ee      	b.n	8008908 <__sfp+0x60>
 800892a:	bf00      	nop
 800892c:	080099a0 	.word	0x080099a0
 8008930:	ffff0001 	.word	0xffff0001

08008934 <_fwalk_reent>:
 8008934:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008938:	4606      	mov	r6, r0
 800893a:	4688      	mov	r8, r1
 800893c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008940:	2700      	movs	r7, #0
 8008942:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008946:	f1b9 0901 	subs.w	r9, r9, #1
 800894a:	d505      	bpl.n	8008958 <_fwalk_reent+0x24>
 800894c:	6824      	ldr	r4, [r4, #0]
 800894e:	2c00      	cmp	r4, #0
 8008950:	d1f7      	bne.n	8008942 <_fwalk_reent+0xe>
 8008952:	4638      	mov	r0, r7
 8008954:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008958:	89ab      	ldrh	r3, [r5, #12]
 800895a:	2b01      	cmp	r3, #1
 800895c:	d907      	bls.n	800896e <_fwalk_reent+0x3a>
 800895e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008962:	3301      	adds	r3, #1
 8008964:	d003      	beq.n	800896e <_fwalk_reent+0x3a>
 8008966:	4629      	mov	r1, r5
 8008968:	4630      	mov	r0, r6
 800896a:	47c0      	blx	r8
 800896c:	4307      	orrs	r7, r0
 800896e:	3568      	adds	r5, #104	; 0x68
 8008970:	e7e9      	b.n	8008946 <_fwalk_reent+0x12>
	...

08008974 <__libc_init_array>:
 8008974:	b570      	push	{r4, r5, r6, lr}
 8008976:	4d0d      	ldr	r5, [pc, #52]	; (80089ac <__libc_init_array+0x38>)
 8008978:	4c0d      	ldr	r4, [pc, #52]	; (80089b0 <__libc_init_array+0x3c>)
 800897a:	1b64      	subs	r4, r4, r5
 800897c:	10a4      	asrs	r4, r4, #2
 800897e:	2600      	movs	r6, #0
 8008980:	42a6      	cmp	r6, r4
 8008982:	d109      	bne.n	8008998 <__libc_init_array+0x24>
 8008984:	4d0b      	ldr	r5, [pc, #44]	; (80089b4 <__libc_init_array+0x40>)
 8008986:	4c0c      	ldr	r4, [pc, #48]	; (80089b8 <__libc_init_array+0x44>)
 8008988:	f000 ff32 	bl	80097f0 <_init>
 800898c:	1b64      	subs	r4, r4, r5
 800898e:	10a4      	asrs	r4, r4, #2
 8008990:	2600      	movs	r6, #0
 8008992:	42a6      	cmp	r6, r4
 8008994:	d105      	bne.n	80089a2 <__libc_init_array+0x2e>
 8008996:	bd70      	pop	{r4, r5, r6, pc}
 8008998:	f855 3b04 	ldr.w	r3, [r5], #4
 800899c:	4798      	blx	r3
 800899e:	3601      	adds	r6, #1
 80089a0:	e7ee      	b.n	8008980 <__libc_init_array+0xc>
 80089a2:	f855 3b04 	ldr.w	r3, [r5], #4
 80089a6:	4798      	blx	r3
 80089a8:	3601      	adds	r6, #1
 80089aa:	e7f2      	b.n	8008992 <__libc_init_array+0x1e>
 80089ac:	080099e0 	.word	0x080099e0
 80089b0:	080099e0 	.word	0x080099e0
 80089b4:	080099e0 	.word	0x080099e0
 80089b8:	080099e4 	.word	0x080099e4

080089bc <__retarget_lock_init_recursive>:
 80089bc:	4770      	bx	lr

080089be <__retarget_lock_acquire_recursive>:
 80089be:	4770      	bx	lr

080089c0 <__retarget_lock_release_recursive>:
 80089c0:	4770      	bx	lr

080089c2 <memcpy>:
 80089c2:	440a      	add	r2, r1
 80089c4:	4291      	cmp	r1, r2
 80089c6:	f100 33ff 	add.w	r3, r0, #4294967295
 80089ca:	d100      	bne.n	80089ce <memcpy+0xc>
 80089cc:	4770      	bx	lr
 80089ce:	b510      	push	{r4, lr}
 80089d0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80089d4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80089d8:	4291      	cmp	r1, r2
 80089da:	d1f9      	bne.n	80089d0 <memcpy+0xe>
 80089dc:	bd10      	pop	{r4, pc}

080089de <memset>:
 80089de:	4402      	add	r2, r0
 80089e0:	4603      	mov	r3, r0
 80089e2:	4293      	cmp	r3, r2
 80089e4:	d100      	bne.n	80089e8 <memset+0xa>
 80089e6:	4770      	bx	lr
 80089e8:	f803 1b01 	strb.w	r1, [r3], #1
 80089ec:	e7f9      	b.n	80089e2 <memset+0x4>
	...

080089f0 <sbrk_aligned>:
 80089f0:	b570      	push	{r4, r5, r6, lr}
 80089f2:	4e0e      	ldr	r6, [pc, #56]	; (8008a2c <sbrk_aligned+0x3c>)
 80089f4:	460c      	mov	r4, r1
 80089f6:	6831      	ldr	r1, [r6, #0]
 80089f8:	4605      	mov	r5, r0
 80089fa:	b911      	cbnz	r1, 8008a02 <sbrk_aligned+0x12>
 80089fc:	f000 f90e 	bl	8008c1c <_sbrk_r>
 8008a00:	6030      	str	r0, [r6, #0]
 8008a02:	4621      	mov	r1, r4
 8008a04:	4628      	mov	r0, r5
 8008a06:	f000 f909 	bl	8008c1c <_sbrk_r>
 8008a0a:	1c43      	adds	r3, r0, #1
 8008a0c:	d00a      	beq.n	8008a24 <sbrk_aligned+0x34>
 8008a0e:	1cc4      	adds	r4, r0, #3
 8008a10:	f024 0403 	bic.w	r4, r4, #3
 8008a14:	42a0      	cmp	r0, r4
 8008a16:	d007      	beq.n	8008a28 <sbrk_aligned+0x38>
 8008a18:	1a21      	subs	r1, r4, r0
 8008a1a:	4628      	mov	r0, r5
 8008a1c:	f000 f8fe 	bl	8008c1c <_sbrk_r>
 8008a20:	3001      	adds	r0, #1
 8008a22:	d101      	bne.n	8008a28 <sbrk_aligned+0x38>
 8008a24:	f04f 34ff 	mov.w	r4, #4294967295
 8008a28:	4620      	mov	r0, r4
 8008a2a:	bd70      	pop	{r4, r5, r6, pc}
 8008a2c:	20001c70 	.word	0x20001c70

08008a30 <_malloc_r>:
 8008a30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008a34:	1ccd      	adds	r5, r1, #3
 8008a36:	f025 0503 	bic.w	r5, r5, #3
 8008a3a:	3508      	adds	r5, #8
 8008a3c:	2d0c      	cmp	r5, #12
 8008a3e:	bf38      	it	cc
 8008a40:	250c      	movcc	r5, #12
 8008a42:	2d00      	cmp	r5, #0
 8008a44:	4607      	mov	r7, r0
 8008a46:	db01      	blt.n	8008a4c <_malloc_r+0x1c>
 8008a48:	42a9      	cmp	r1, r5
 8008a4a:	d905      	bls.n	8008a58 <_malloc_r+0x28>
 8008a4c:	230c      	movs	r3, #12
 8008a4e:	603b      	str	r3, [r7, #0]
 8008a50:	2600      	movs	r6, #0
 8008a52:	4630      	mov	r0, r6
 8008a54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008a58:	4e2e      	ldr	r6, [pc, #184]	; (8008b14 <_malloc_r+0xe4>)
 8008a5a:	f000 fa29 	bl	8008eb0 <__malloc_lock>
 8008a5e:	6833      	ldr	r3, [r6, #0]
 8008a60:	461c      	mov	r4, r3
 8008a62:	bb34      	cbnz	r4, 8008ab2 <_malloc_r+0x82>
 8008a64:	4629      	mov	r1, r5
 8008a66:	4638      	mov	r0, r7
 8008a68:	f7ff ffc2 	bl	80089f0 <sbrk_aligned>
 8008a6c:	1c43      	adds	r3, r0, #1
 8008a6e:	4604      	mov	r4, r0
 8008a70:	d14d      	bne.n	8008b0e <_malloc_r+0xde>
 8008a72:	6834      	ldr	r4, [r6, #0]
 8008a74:	4626      	mov	r6, r4
 8008a76:	2e00      	cmp	r6, #0
 8008a78:	d140      	bne.n	8008afc <_malloc_r+0xcc>
 8008a7a:	6823      	ldr	r3, [r4, #0]
 8008a7c:	4631      	mov	r1, r6
 8008a7e:	4638      	mov	r0, r7
 8008a80:	eb04 0803 	add.w	r8, r4, r3
 8008a84:	f000 f8ca 	bl	8008c1c <_sbrk_r>
 8008a88:	4580      	cmp	r8, r0
 8008a8a:	d13a      	bne.n	8008b02 <_malloc_r+0xd2>
 8008a8c:	6821      	ldr	r1, [r4, #0]
 8008a8e:	3503      	adds	r5, #3
 8008a90:	1a6d      	subs	r5, r5, r1
 8008a92:	f025 0503 	bic.w	r5, r5, #3
 8008a96:	3508      	adds	r5, #8
 8008a98:	2d0c      	cmp	r5, #12
 8008a9a:	bf38      	it	cc
 8008a9c:	250c      	movcc	r5, #12
 8008a9e:	4629      	mov	r1, r5
 8008aa0:	4638      	mov	r0, r7
 8008aa2:	f7ff ffa5 	bl	80089f0 <sbrk_aligned>
 8008aa6:	3001      	adds	r0, #1
 8008aa8:	d02b      	beq.n	8008b02 <_malloc_r+0xd2>
 8008aaa:	6823      	ldr	r3, [r4, #0]
 8008aac:	442b      	add	r3, r5
 8008aae:	6023      	str	r3, [r4, #0]
 8008ab0:	e00e      	b.n	8008ad0 <_malloc_r+0xa0>
 8008ab2:	6822      	ldr	r2, [r4, #0]
 8008ab4:	1b52      	subs	r2, r2, r5
 8008ab6:	d41e      	bmi.n	8008af6 <_malloc_r+0xc6>
 8008ab8:	2a0b      	cmp	r2, #11
 8008aba:	d916      	bls.n	8008aea <_malloc_r+0xba>
 8008abc:	1961      	adds	r1, r4, r5
 8008abe:	42a3      	cmp	r3, r4
 8008ac0:	6025      	str	r5, [r4, #0]
 8008ac2:	bf18      	it	ne
 8008ac4:	6059      	strne	r1, [r3, #4]
 8008ac6:	6863      	ldr	r3, [r4, #4]
 8008ac8:	bf08      	it	eq
 8008aca:	6031      	streq	r1, [r6, #0]
 8008acc:	5162      	str	r2, [r4, r5]
 8008ace:	604b      	str	r3, [r1, #4]
 8008ad0:	4638      	mov	r0, r7
 8008ad2:	f104 060b 	add.w	r6, r4, #11
 8008ad6:	f000 f9f1 	bl	8008ebc <__malloc_unlock>
 8008ada:	f026 0607 	bic.w	r6, r6, #7
 8008ade:	1d23      	adds	r3, r4, #4
 8008ae0:	1af2      	subs	r2, r6, r3
 8008ae2:	d0b6      	beq.n	8008a52 <_malloc_r+0x22>
 8008ae4:	1b9b      	subs	r3, r3, r6
 8008ae6:	50a3      	str	r3, [r4, r2]
 8008ae8:	e7b3      	b.n	8008a52 <_malloc_r+0x22>
 8008aea:	6862      	ldr	r2, [r4, #4]
 8008aec:	42a3      	cmp	r3, r4
 8008aee:	bf0c      	ite	eq
 8008af0:	6032      	streq	r2, [r6, #0]
 8008af2:	605a      	strne	r2, [r3, #4]
 8008af4:	e7ec      	b.n	8008ad0 <_malloc_r+0xa0>
 8008af6:	4623      	mov	r3, r4
 8008af8:	6864      	ldr	r4, [r4, #4]
 8008afa:	e7b2      	b.n	8008a62 <_malloc_r+0x32>
 8008afc:	4634      	mov	r4, r6
 8008afe:	6876      	ldr	r6, [r6, #4]
 8008b00:	e7b9      	b.n	8008a76 <_malloc_r+0x46>
 8008b02:	230c      	movs	r3, #12
 8008b04:	603b      	str	r3, [r7, #0]
 8008b06:	4638      	mov	r0, r7
 8008b08:	f000 f9d8 	bl	8008ebc <__malloc_unlock>
 8008b0c:	e7a1      	b.n	8008a52 <_malloc_r+0x22>
 8008b0e:	6025      	str	r5, [r4, #0]
 8008b10:	e7de      	b.n	8008ad0 <_malloc_r+0xa0>
 8008b12:	bf00      	nop
 8008b14:	20001c6c 	.word	0x20001c6c

08008b18 <iprintf>:
 8008b18:	b40f      	push	{r0, r1, r2, r3}
 8008b1a:	4b0a      	ldr	r3, [pc, #40]	; (8008b44 <iprintf+0x2c>)
 8008b1c:	b513      	push	{r0, r1, r4, lr}
 8008b1e:	681c      	ldr	r4, [r3, #0]
 8008b20:	b124      	cbz	r4, 8008b2c <iprintf+0x14>
 8008b22:	69a3      	ldr	r3, [r4, #24]
 8008b24:	b913      	cbnz	r3, 8008b2c <iprintf+0x14>
 8008b26:	4620      	mov	r0, r4
 8008b28:	f7ff fe86 	bl	8008838 <__sinit>
 8008b2c:	ab05      	add	r3, sp, #20
 8008b2e:	9a04      	ldr	r2, [sp, #16]
 8008b30:	68a1      	ldr	r1, [r4, #8]
 8008b32:	9301      	str	r3, [sp, #4]
 8008b34:	4620      	mov	r0, r4
 8008b36:	f000 fa3d 	bl	8008fb4 <_vfiprintf_r>
 8008b3a:	b002      	add	sp, #8
 8008b3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008b40:	b004      	add	sp, #16
 8008b42:	4770      	bx	lr
 8008b44:	20000014 	.word	0x20000014

08008b48 <cleanup_glue>:
 8008b48:	b538      	push	{r3, r4, r5, lr}
 8008b4a:	460c      	mov	r4, r1
 8008b4c:	6809      	ldr	r1, [r1, #0]
 8008b4e:	4605      	mov	r5, r0
 8008b50:	b109      	cbz	r1, 8008b56 <cleanup_glue+0xe>
 8008b52:	f7ff fff9 	bl	8008b48 <cleanup_glue>
 8008b56:	4621      	mov	r1, r4
 8008b58:	4628      	mov	r0, r5
 8008b5a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008b5e:	f000 b9b3 	b.w	8008ec8 <_free_r>
	...

08008b64 <_reclaim_reent>:
 8008b64:	4b2c      	ldr	r3, [pc, #176]	; (8008c18 <_reclaim_reent+0xb4>)
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	4283      	cmp	r3, r0
 8008b6a:	b570      	push	{r4, r5, r6, lr}
 8008b6c:	4604      	mov	r4, r0
 8008b6e:	d051      	beq.n	8008c14 <_reclaim_reent+0xb0>
 8008b70:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8008b72:	b143      	cbz	r3, 8008b86 <_reclaim_reent+0x22>
 8008b74:	68db      	ldr	r3, [r3, #12]
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	d14a      	bne.n	8008c10 <_reclaim_reent+0xac>
 8008b7a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008b7c:	6819      	ldr	r1, [r3, #0]
 8008b7e:	b111      	cbz	r1, 8008b86 <_reclaim_reent+0x22>
 8008b80:	4620      	mov	r0, r4
 8008b82:	f000 f9a1 	bl	8008ec8 <_free_r>
 8008b86:	6961      	ldr	r1, [r4, #20]
 8008b88:	b111      	cbz	r1, 8008b90 <_reclaim_reent+0x2c>
 8008b8a:	4620      	mov	r0, r4
 8008b8c:	f000 f99c 	bl	8008ec8 <_free_r>
 8008b90:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8008b92:	b111      	cbz	r1, 8008b9a <_reclaim_reent+0x36>
 8008b94:	4620      	mov	r0, r4
 8008b96:	f000 f997 	bl	8008ec8 <_free_r>
 8008b9a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8008b9c:	b111      	cbz	r1, 8008ba4 <_reclaim_reent+0x40>
 8008b9e:	4620      	mov	r0, r4
 8008ba0:	f000 f992 	bl	8008ec8 <_free_r>
 8008ba4:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8008ba6:	b111      	cbz	r1, 8008bae <_reclaim_reent+0x4a>
 8008ba8:	4620      	mov	r0, r4
 8008baa:	f000 f98d 	bl	8008ec8 <_free_r>
 8008bae:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8008bb0:	b111      	cbz	r1, 8008bb8 <_reclaim_reent+0x54>
 8008bb2:	4620      	mov	r0, r4
 8008bb4:	f000 f988 	bl	8008ec8 <_free_r>
 8008bb8:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8008bba:	b111      	cbz	r1, 8008bc2 <_reclaim_reent+0x5e>
 8008bbc:	4620      	mov	r0, r4
 8008bbe:	f000 f983 	bl	8008ec8 <_free_r>
 8008bc2:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8008bc4:	b111      	cbz	r1, 8008bcc <_reclaim_reent+0x68>
 8008bc6:	4620      	mov	r0, r4
 8008bc8:	f000 f97e 	bl	8008ec8 <_free_r>
 8008bcc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008bce:	b111      	cbz	r1, 8008bd6 <_reclaim_reent+0x72>
 8008bd0:	4620      	mov	r0, r4
 8008bd2:	f000 f979 	bl	8008ec8 <_free_r>
 8008bd6:	69a3      	ldr	r3, [r4, #24]
 8008bd8:	b1e3      	cbz	r3, 8008c14 <_reclaim_reent+0xb0>
 8008bda:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8008bdc:	4620      	mov	r0, r4
 8008bde:	4798      	blx	r3
 8008be0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8008be2:	b1b9      	cbz	r1, 8008c14 <_reclaim_reent+0xb0>
 8008be4:	4620      	mov	r0, r4
 8008be6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8008bea:	f7ff bfad 	b.w	8008b48 <cleanup_glue>
 8008bee:	5949      	ldr	r1, [r1, r5]
 8008bf0:	b941      	cbnz	r1, 8008c04 <_reclaim_reent+0xa0>
 8008bf2:	3504      	adds	r5, #4
 8008bf4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008bf6:	2d80      	cmp	r5, #128	; 0x80
 8008bf8:	68d9      	ldr	r1, [r3, #12]
 8008bfa:	d1f8      	bne.n	8008bee <_reclaim_reent+0x8a>
 8008bfc:	4620      	mov	r0, r4
 8008bfe:	f000 f963 	bl	8008ec8 <_free_r>
 8008c02:	e7ba      	b.n	8008b7a <_reclaim_reent+0x16>
 8008c04:	680e      	ldr	r6, [r1, #0]
 8008c06:	4620      	mov	r0, r4
 8008c08:	f000 f95e 	bl	8008ec8 <_free_r>
 8008c0c:	4631      	mov	r1, r6
 8008c0e:	e7ef      	b.n	8008bf0 <_reclaim_reent+0x8c>
 8008c10:	2500      	movs	r5, #0
 8008c12:	e7ef      	b.n	8008bf4 <_reclaim_reent+0x90>
 8008c14:	bd70      	pop	{r4, r5, r6, pc}
 8008c16:	bf00      	nop
 8008c18:	20000014 	.word	0x20000014

08008c1c <_sbrk_r>:
 8008c1c:	b538      	push	{r3, r4, r5, lr}
 8008c1e:	4d06      	ldr	r5, [pc, #24]	; (8008c38 <_sbrk_r+0x1c>)
 8008c20:	2300      	movs	r3, #0
 8008c22:	4604      	mov	r4, r0
 8008c24:	4608      	mov	r0, r1
 8008c26:	602b      	str	r3, [r5, #0]
 8008c28:	f7f8 fb84 	bl	8001334 <_sbrk>
 8008c2c:	1c43      	adds	r3, r0, #1
 8008c2e:	d102      	bne.n	8008c36 <_sbrk_r+0x1a>
 8008c30:	682b      	ldr	r3, [r5, #0]
 8008c32:	b103      	cbz	r3, 8008c36 <_sbrk_r+0x1a>
 8008c34:	6023      	str	r3, [r4, #0]
 8008c36:	bd38      	pop	{r3, r4, r5, pc}
 8008c38:	20001c74 	.word	0x20001c74

08008c3c <__sread>:
 8008c3c:	b510      	push	{r4, lr}
 8008c3e:	460c      	mov	r4, r1
 8008c40:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008c44:	f000 fc7a 	bl	800953c <_read_r>
 8008c48:	2800      	cmp	r0, #0
 8008c4a:	bfab      	itete	ge
 8008c4c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008c4e:	89a3      	ldrhlt	r3, [r4, #12]
 8008c50:	181b      	addge	r3, r3, r0
 8008c52:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008c56:	bfac      	ite	ge
 8008c58:	6563      	strge	r3, [r4, #84]	; 0x54
 8008c5a:	81a3      	strhlt	r3, [r4, #12]
 8008c5c:	bd10      	pop	{r4, pc}

08008c5e <__swrite>:
 8008c5e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008c62:	461f      	mov	r7, r3
 8008c64:	898b      	ldrh	r3, [r1, #12]
 8008c66:	05db      	lsls	r3, r3, #23
 8008c68:	4605      	mov	r5, r0
 8008c6a:	460c      	mov	r4, r1
 8008c6c:	4616      	mov	r6, r2
 8008c6e:	d505      	bpl.n	8008c7c <__swrite+0x1e>
 8008c70:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008c74:	2302      	movs	r3, #2
 8008c76:	2200      	movs	r2, #0
 8008c78:	f000 f908 	bl	8008e8c <_lseek_r>
 8008c7c:	89a3      	ldrh	r3, [r4, #12]
 8008c7e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008c82:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008c86:	81a3      	strh	r3, [r4, #12]
 8008c88:	4632      	mov	r2, r6
 8008c8a:	463b      	mov	r3, r7
 8008c8c:	4628      	mov	r0, r5
 8008c8e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008c92:	f000 b817 	b.w	8008cc4 <_write_r>

08008c96 <__sseek>:
 8008c96:	b510      	push	{r4, lr}
 8008c98:	460c      	mov	r4, r1
 8008c9a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008c9e:	f000 f8f5 	bl	8008e8c <_lseek_r>
 8008ca2:	1c43      	adds	r3, r0, #1
 8008ca4:	89a3      	ldrh	r3, [r4, #12]
 8008ca6:	bf15      	itete	ne
 8008ca8:	6560      	strne	r0, [r4, #84]	; 0x54
 8008caa:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008cae:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008cb2:	81a3      	strheq	r3, [r4, #12]
 8008cb4:	bf18      	it	ne
 8008cb6:	81a3      	strhne	r3, [r4, #12]
 8008cb8:	bd10      	pop	{r4, pc}

08008cba <__sclose>:
 8008cba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008cbe:	f000 b813 	b.w	8008ce8 <_close_r>
	...

08008cc4 <_write_r>:
 8008cc4:	b538      	push	{r3, r4, r5, lr}
 8008cc6:	4d07      	ldr	r5, [pc, #28]	; (8008ce4 <_write_r+0x20>)
 8008cc8:	4604      	mov	r4, r0
 8008cca:	4608      	mov	r0, r1
 8008ccc:	4611      	mov	r1, r2
 8008cce:	2200      	movs	r2, #0
 8008cd0:	602a      	str	r2, [r5, #0]
 8008cd2:	461a      	mov	r2, r3
 8008cd4:	f7f8 fadd 	bl	8001292 <_write>
 8008cd8:	1c43      	adds	r3, r0, #1
 8008cda:	d102      	bne.n	8008ce2 <_write_r+0x1e>
 8008cdc:	682b      	ldr	r3, [r5, #0]
 8008cde:	b103      	cbz	r3, 8008ce2 <_write_r+0x1e>
 8008ce0:	6023      	str	r3, [r4, #0]
 8008ce2:	bd38      	pop	{r3, r4, r5, pc}
 8008ce4:	20001c74 	.word	0x20001c74

08008ce8 <_close_r>:
 8008ce8:	b538      	push	{r3, r4, r5, lr}
 8008cea:	4d06      	ldr	r5, [pc, #24]	; (8008d04 <_close_r+0x1c>)
 8008cec:	2300      	movs	r3, #0
 8008cee:	4604      	mov	r4, r0
 8008cf0:	4608      	mov	r0, r1
 8008cf2:	602b      	str	r3, [r5, #0]
 8008cf4:	f7f8 fae9 	bl	80012ca <_close>
 8008cf8:	1c43      	adds	r3, r0, #1
 8008cfa:	d102      	bne.n	8008d02 <_close_r+0x1a>
 8008cfc:	682b      	ldr	r3, [r5, #0]
 8008cfe:	b103      	cbz	r3, 8008d02 <_close_r+0x1a>
 8008d00:	6023      	str	r3, [r4, #0]
 8008d02:	bd38      	pop	{r3, r4, r5, pc}
 8008d04:	20001c74 	.word	0x20001c74

08008d08 <__sflush_r>:
 8008d08:	898a      	ldrh	r2, [r1, #12]
 8008d0a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008d0e:	4605      	mov	r5, r0
 8008d10:	0710      	lsls	r0, r2, #28
 8008d12:	460c      	mov	r4, r1
 8008d14:	d458      	bmi.n	8008dc8 <__sflush_r+0xc0>
 8008d16:	684b      	ldr	r3, [r1, #4]
 8008d18:	2b00      	cmp	r3, #0
 8008d1a:	dc05      	bgt.n	8008d28 <__sflush_r+0x20>
 8008d1c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008d1e:	2b00      	cmp	r3, #0
 8008d20:	dc02      	bgt.n	8008d28 <__sflush_r+0x20>
 8008d22:	2000      	movs	r0, #0
 8008d24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008d28:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008d2a:	2e00      	cmp	r6, #0
 8008d2c:	d0f9      	beq.n	8008d22 <__sflush_r+0x1a>
 8008d2e:	2300      	movs	r3, #0
 8008d30:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008d34:	682f      	ldr	r7, [r5, #0]
 8008d36:	602b      	str	r3, [r5, #0]
 8008d38:	d032      	beq.n	8008da0 <__sflush_r+0x98>
 8008d3a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008d3c:	89a3      	ldrh	r3, [r4, #12]
 8008d3e:	075a      	lsls	r2, r3, #29
 8008d40:	d505      	bpl.n	8008d4e <__sflush_r+0x46>
 8008d42:	6863      	ldr	r3, [r4, #4]
 8008d44:	1ac0      	subs	r0, r0, r3
 8008d46:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008d48:	b10b      	cbz	r3, 8008d4e <__sflush_r+0x46>
 8008d4a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008d4c:	1ac0      	subs	r0, r0, r3
 8008d4e:	2300      	movs	r3, #0
 8008d50:	4602      	mov	r2, r0
 8008d52:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008d54:	6a21      	ldr	r1, [r4, #32]
 8008d56:	4628      	mov	r0, r5
 8008d58:	47b0      	blx	r6
 8008d5a:	1c43      	adds	r3, r0, #1
 8008d5c:	89a3      	ldrh	r3, [r4, #12]
 8008d5e:	d106      	bne.n	8008d6e <__sflush_r+0x66>
 8008d60:	6829      	ldr	r1, [r5, #0]
 8008d62:	291d      	cmp	r1, #29
 8008d64:	d82c      	bhi.n	8008dc0 <__sflush_r+0xb8>
 8008d66:	4a2a      	ldr	r2, [pc, #168]	; (8008e10 <__sflush_r+0x108>)
 8008d68:	40ca      	lsrs	r2, r1
 8008d6a:	07d6      	lsls	r6, r2, #31
 8008d6c:	d528      	bpl.n	8008dc0 <__sflush_r+0xb8>
 8008d6e:	2200      	movs	r2, #0
 8008d70:	6062      	str	r2, [r4, #4]
 8008d72:	04d9      	lsls	r1, r3, #19
 8008d74:	6922      	ldr	r2, [r4, #16]
 8008d76:	6022      	str	r2, [r4, #0]
 8008d78:	d504      	bpl.n	8008d84 <__sflush_r+0x7c>
 8008d7a:	1c42      	adds	r2, r0, #1
 8008d7c:	d101      	bne.n	8008d82 <__sflush_r+0x7a>
 8008d7e:	682b      	ldr	r3, [r5, #0]
 8008d80:	b903      	cbnz	r3, 8008d84 <__sflush_r+0x7c>
 8008d82:	6560      	str	r0, [r4, #84]	; 0x54
 8008d84:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008d86:	602f      	str	r7, [r5, #0]
 8008d88:	2900      	cmp	r1, #0
 8008d8a:	d0ca      	beq.n	8008d22 <__sflush_r+0x1a>
 8008d8c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008d90:	4299      	cmp	r1, r3
 8008d92:	d002      	beq.n	8008d9a <__sflush_r+0x92>
 8008d94:	4628      	mov	r0, r5
 8008d96:	f000 f897 	bl	8008ec8 <_free_r>
 8008d9a:	2000      	movs	r0, #0
 8008d9c:	6360      	str	r0, [r4, #52]	; 0x34
 8008d9e:	e7c1      	b.n	8008d24 <__sflush_r+0x1c>
 8008da0:	6a21      	ldr	r1, [r4, #32]
 8008da2:	2301      	movs	r3, #1
 8008da4:	4628      	mov	r0, r5
 8008da6:	47b0      	blx	r6
 8008da8:	1c41      	adds	r1, r0, #1
 8008daa:	d1c7      	bne.n	8008d3c <__sflush_r+0x34>
 8008dac:	682b      	ldr	r3, [r5, #0]
 8008dae:	2b00      	cmp	r3, #0
 8008db0:	d0c4      	beq.n	8008d3c <__sflush_r+0x34>
 8008db2:	2b1d      	cmp	r3, #29
 8008db4:	d001      	beq.n	8008dba <__sflush_r+0xb2>
 8008db6:	2b16      	cmp	r3, #22
 8008db8:	d101      	bne.n	8008dbe <__sflush_r+0xb6>
 8008dba:	602f      	str	r7, [r5, #0]
 8008dbc:	e7b1      	b.n	8008d22 <__sflush_r+0x1a>
 8008dbe:	89a3      	ldrh	r3, [r4, #12]
 8008dc0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008dc4:	81a3      	strh	r3, [r4, #12]
 8008dc6:	e7ad      	b.n	8008d24 <__sflush_r+0x1c>
 8008dc8:	690f      	ldr	r7, [r1, #16]
 8008dca:	2f00      	cmp	r7, #0
 8008dcc:	d0a9      	beq.n	8008d22 <__sflush_r+0x1a>
 8008dce:	0793      	lsls	r3, r2, #30
 8008dd0:	680e      	ldr	r6, [r1, #0]
 8008dd2:	bf08      	it	eq
 8008dd4:	694b      	ldreq	r3, [r1, #20]
 8008dd6:	600f      	str	r7, [r1, #0]
 8008dd8:	bf18      	it	ne
 8008dda:	2300      	movne	r3, #0
 8008ddc:	eba6 0807 	sub.w	r8, r6, r7
 8008de0:	608b      	str	r3, [r1, #8]
 8008de2:	f1b8 0f00 	cmp.w	r8, #0
 8008de6:	dd9c      	ble.n	8008d22 <__sflush_r+0x1a>
 8008de8:	6a21      	ldr	r1, [r4, #32]
 8008dea:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008dec:	4643      	mov	r3, r8
 8008dee:	463a      	mov	r2, r7
 8008df0:	4628      	mov	r0, r5
 8008df2:	47b0      	blx	r6
 8008df4:	2800      	cmp	r0, #0
 8008df6:	dc06      	bgt.n	8008e06 <__sflush_r+0xfe>
 8008df8:	89a3      	ldrh	r3, [r4, #12]
 8008dfa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008dfe:	81a3      	strh	r3, [r4, #12]
 8008e00:	f04f 30ff 	mov.w	r0, #4294967295
 8008e04:	e78e      	b.n	8008d24 <__sflush_r+0x1c>
 8008e06:	4407      	add	r7, r0
 8008e08:	eba8 0800 	sub.w	r8, r8, r0
 8008e0c:	e7e9      	b.n	8008de2 <__sflush_r+0xda>
 8008e0e:	bf00      	nop
 8008e10:	20400001 	.word	0x20400001

08008e14 <_fflush_r>:
 8008e14:	b538      	push	{r3, r4, r5, lr}
 8008e16:	690b      	ldr	r3, [r1, #16]
 8008e18:	4605      	mov	r5, r0
 8008e1a:	460c      	mov	r4, r1
 8008e1c:	b913      	cbnz	r3, 8008e24 <_fflush_r+0x10>
 8008e1e:	2500      	movs	r5, #0
 8008e20:	4628      	mov	r0, r5
 8008e22:	bd38      	pop	{r3, r4, r5, pc}
 8008e24:	b118      	cbz	r0, 8008e2e <_fflush_r+0x1a>
 8008e26:	6983      	ldr	r3, [r0, #24]
 8008e28:	b90b      	cbnz	r3, 8008e2e <_fflush_r+0x1a>
 8008e2a:	f7ff fd05 	bl	8008838 <__sinit>
 8008e2e:	4b14      	ldr	r3, [pc, #80]	; (8008e80 <_fflush_r+0x6c>)
 8008e30:	429c      	cmp	r4, r3
 8008e32:	d11b      	bne.n	8008e6c <_fflush_r+0x58>
 8008e34:	686c      	ldr	r4, [r5, #4]
 8008e36:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008e3a:	2b00      	cmp	r3, #0
 8008e3c:	d0ef      	beq.n	8008e1e <_fflush_r+0xa>
 8008e3e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008e40:	07d0      	lsls	r0, r2, #31
 8008e42:	d404      	bmi.n	8008e4e <_fflush_r+0x3a>
 8008e44:	0599      	lsls	r1, r3, #22
 8008e46:	d402      	bmi.n	8008e4e <_fflush_r+0x3a>
 8008e48:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008e4a:	f7ff fdb8 	bl	80089be <__retarget_lock_acquire_recursive>
 8008e4e:	4628      	mov	r0, r5
 8008e50:	4621      	mov	r1, r4
 8008e52:	f7ff ff59 	bl	8008d08 <__sflush_r>
 8008e56:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008e58:	07da      	lsls	r2, r3, #31
 8008e5a:	4605      	mov	r5, r0
 8008e5c:	d4e0      	bmi.n	8008e20 <_fflush_r+0xc>
 8008e5e:	89a3      	ldrh	r3, [r4, #12]
 8008e60:	059b      	lsls	r3, r3, #22
 8008e62:	d4dd      	bmi.n	8008e20 <_fflush_r+0xc>
 8008e64:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008e66:	f7ff fdab 	bl	80089c0 <__retarget_lock_release_recursive>
 8008e6a:	e7d9      	b.n	8008e20 <_fflush_r+0xc>
 8008e6c:	4b05      	ldr	r3, [pc, #20]	; (8008e84 <_fflush_r+0x70>)
 8008e6e:	429c      	cmp	r4, r3
 8008e70:	d101      	bne.n	8008e76 <_fflush_r+0x62>
 8008e72:	68ac      	ldr	r4, [r5, #8]
 8008e74:	e7df      	b.n	8008e36 <_fflush_r+0x22>
 8008e76:	4b04      	ldr	r3, [pc, #16]	; (8008e88 <_fflush_r+0x74>)
 8008e78:	429c      	cmp	r4, r3
 8008e7a:	bf08      	it	eq
 8008e7c:	68ec      	ldreq	r4, [r5, #12]
 8008e7e:	e7da      	b.n	8008e36 <_fflush_r+0x22>
 8008e80:	08009960 	.word	0x08009960
 8008e84:	08009980 	.word	0x08009980
 8008e88:	08009940 	.word	0x08009940

08008e8c <_lseek_r>:
 8008e8c:	b538      	push	{r3, r4, r5, lr}
 8008e8e:	4d07      	ldr	r5, [pc, #28]	; (8008eac <_lseek_r+0x20>)
 8008e90:	4604      	mov	r4, r0
 8008e92:	4608      	mov	r0, r1
 8008e94:	4611      	mov	r1, r2
 8008e96:	2200      	movs	r2, #0
 8008e98:	602a      	str	r2, [r5, #0]
 8008e9a:	461a      	mov	r2, r3
 8008e9c:	f7f8 fa3c 	bl	8001318 <_lseek>
 8008ea0:	1c43      	adds	r3, r0, #1
 8008ea2:	d102      	bne.n	8008eaa <_lseek_r+0x1e>
 8008ea4:	682b      	ldr	r3, [r5, #0]
 8008ea6:	b103      	cbz	r3, 8008eaa <_lseek_r+0x1e>
 8008ea8:	6023      	str	r3, [r4, #0]
 8008eaa:	bd38      	pop	{r3, r4, r5, pc}
 8008eac:	20001c74 	.word	0x20001c74

08008eb0 <__malloc_lock>:
 8008eb0:	4801      	ldr	r0, [pc, #4]	; (8008eb8 <__malloc_lock+0x8>)
 8008eb2:	f7ff bd84 	b.w	80089be <__retarget_lock_acquire_recursive>
 8008eb6:	bf00      	nop
 8008eb8:	20001c68 	.word	0x20001c68

08008ebc <__malloc_unlock>:
 8008ebc:	4801      	ldr	r0, [pc, #4]	; (8008ec4 <__malloc_unlock+0x8>)
 8008ebe:	f7ff bd7f 	b.w	80089c0 <__retarget_lock_release_recursive>
 8008ec2:	bf00      	nop
 8008ec4:	20001c68 	.word	0x20001c68

08008ec8 <_free_r>:
 8008ec8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008eca:	2900      	cmp	r1, #0
 8008ecc:	d044      	beq.n	8008f58 <_free_r+0x90>
 8008ece:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008ed2:	9001      	str	r0, [sp, #4]
 8008ed4:	2b00      	cmp	r3, #0
 8008ed6:	f1a1 0404 	sub.w	r4, r1, #4
 8008eda:	bfb8      	it	lt
 8008edc:	18e4      	addlt	r4, r4, r3
 8008ede:	f7ff ffe7 	bl	8008eb0 <__malloc_lock>
 8008ee2:	4a1e      	ldr	r2, [pc, #120]	; (8008f5c <_free_r+0x94>)
 8008ee4:	9801      	ldr	r0, [sp, #4]
 8008ee6:	6813      	ldr	r3, [r2, #0]
 8008ee8:	b933      	cbnz	r3, 8008ef8 <_free_r+0x30>
 8008eea:	6063      	str	r3, [r4, #4]
 8008eec:	6014      	str	r4, [r2, #0]
 8008eee:	b003      	add	sp, #12
 8008ef0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008ef4:	f7ff bfe2 	b.w	8008ebc <__malloc_unlock>
 8008ef8:	42a3      	cmp	r3, r4
 8008efa:	d908      	bls.n	8008f0e <_free_r+0x46>
 8008efc:	6825      	ldr	r5, [r4, #0]
 8008efe:	1961      	adds	r1, r4, r5
 8008f00:	428b      	cmp	r3, r1
 8008f02:	bf01      	itttt	eq
 8008f04:	6819      	ldreq	r1, [r3, #0]
 8008f06:	685b      	ldreq	r3, [r3, #4]
 8008f08:	1949      	addeq	r1, r1, r5
 8008f0a:	6021      	streq	r1, [r4, #0]
 8008f0c:	e7ed      	b.n	8008eea <_free_r+0x22>
 8008f0e:	461a      	mov	r2, r3
 8008f10:	685b      	ldr	r3, [r3, #4]
 8008f12:	b10b      	cbz	r3, 8008f18 <_free_r+0x50>
 8008f14:	42a3      	cmp	r3, r4
 8008f16:	d9fa      	bls.n	8008f0e <_free_r+0x46>
 8008f18:	6811      	ldr	r1, [r2, #0]
 8008f1a:	1855      	adds	r5, r2, r1
 8008f1c:	42a5      	cmp	r5, r4
 8008f1e:	d10b      	bne.n	8008f38 <_free_r+0x70>
 8008f20:	6824      	ldr	r4, [r4, #0]
 8008f22:	4421      	add	r1, r4
 8008f24:	1854      	adds	r4, r2, r1
 8008f26:	42a3      	cmp	r3, r4
 8008f28:	6011      	str	r1, [r2, #0]
 8008f2a:	d1e0      	bne.n	8008eee <_free_r+0x26>
 8008f2c:	681c      	ldr	r4, [r3, #0]
 8008f2e:	685b      	ldr	r3, [r3, #4]
 8008f30:	6053      	str	r3, [r2, #4]
 8008f32:	4421      	add	r1, r4
 8008f34:	6011      	str	r1, [r2, #0]
 8008f36:	e7da      	b.n	8008eee <_free_r+0x26>
 8008f38:	d902      	bls.n	8008f40 <_free_r+0x78>
 8008f3a:	230c      	movs	r3, #12
 8008f3c:	6003      	str	r3, [r0, #0]
 8008f3e:	e7d6      	b.n	8008eee <_free_r+0x26>
 8008f40:	6825      	ldr	r5, [r4, #0]
 8008f42:	1961      	adds	r1, r4, r5
 8008f44:	428b      	cmp	r3, r1
 8008f46:	bf04      	itt	eq
 8008f48:	6819      	ldreq	r1, [r3, #0]
 8008f4a:	685b      	ldreq	r3, [r3, #4]
 8008f4c:	6063      	str	r3, [r4, #4]
 8008f4e:	bf04      	itt	eq
 8008f50:	1949      	addeq	r1, r1, r5
 8008f52:	6021      	streq	r1, [r4, #0]
 8008f54:	6054      	str	r4, [r2, #4]
 8008f56:	e7ca      	b.n	8008eee <_free_r+0x26>
 8008f58:	b003      	add	sp, #12
 8008f5a:	bd30      	pop	{r4, r5, pc}
 8008f5c:	20001c6c 	.word	0x20001c6c

08008f60 <__sfputc_r>:
 8008f60:	6893      	ldr	r3, [r2, #8]
 8008f62:	3b01      	subs	r3, #1
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	b410      	push	{r4}
 8008f68:	6093      	str	r3, [r2, #8]
 8008f6a:	da08      	bge.n	8008f7e <__sfputc_r+0x1e>
 8008f6c:	6994      	ldr	r4, [r2, #24]
 8008f6e:	42a3      	cmp	r3, r4
 8008f70:	db01      	blt.n	8008f76 <__sfputc_r+0x16>
 8008f72:	290a      	cmp	r1, #10
 8008f74:	d103      	bne.n	8008f7e <__sfputc_r+0x1e>
 8008f76:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008f7a:	f000 baf1 	b.w	8009560 <__swbuf_r>
 8008f7e:	6813      	ldr	r3, [r2, #0]
 8008f80:	1c58      	adds	r0, r3, #1
 8008f82:	6010      	str	r0, [r2, #0]
 8008f84:	7019      	strb	r1, [r3, #0]
 8008f86:	4608      	mov	r0, r1
 8008f88:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008f8c:	4770      	bx	lr

08008f8e <__sfputs_r>:
 8008f8e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f90:	4606      	mov	r6, r0
 8008f92:	460f      	mov	r7, r1
 8008f94:	4614      	mov	r4, r2
 8008f96:	18d5      	adds	r5, r2, r3
 8008f98:	42ac      	cmp	r4, r5
 8008f9a:	d101      	bne.n	8008fa0 <__sfputs_r+0x12>
 8008f9c:	2000      	movs	r0, #0
 8008f9e:	e007      	b.n	8008fb0 <__sfputs_r+0x22>
 8008fa0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008fa4:	463a      	mov	r2, r7
 8008fa6:	4630      	mov	r0, r6
 8008fa8:	f7ff ffda 	bl	8008f60 <__sfputc_r>
 8008fac:	1c43      	adds	r3, r0, #1
 8008fae:	d1f3      	bne.n	8008f98 <__sfputs_r+0xa>
 8008fb0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008fb4 <_vfiprintf_r>:
 8008fb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008fb8:	460d      	mov	r5, r1
 8008fba:	b09d      	sub	sp, #116	; 0x74
 8008fbc:	4614      	mov	r4, r2
 8008fbe:	4698      	mov	r8, r3
 8008fc0:	4606      	mov	r6, r0
 8008fc2:	b118      	cbz	r0, 8008fcc <_vfiprintf_r+0x18>
 8008fc4:	6983      	ldr	r3, [r0, #24]
 8008fc6:	b90b      	cbnz	r3, 8008fcc <_vfiprintf_r+0x18>
 8008fc8:	f7ff fc36 	bl	8008838 <__sinit>
 8008fcc:	4b89      	ldr	r3, [pc, #548]	; (80091f4 <_vfiprintf_r+0x240>)
 8008fce:	429d      	cmp	r5, r3
 8008fd0:	d11b      	bne.n	800900a <_vfiprintf_r+0x56>
 8008fd2:	6875      	ldr	r5, [r6, #4]
 8008fd4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008fd6:	07d9      	lsls	r1, r3, #31
 8008fd8:	d405      	bmi.n	8008fe6 <_vfiprintf_r+0x32>
 8008fda:	89ab      	ldrh	r3, [r5, #12]
 8008fdc:	059a      	lsls	r2, r3, #22
 8008fde:	d402      	bmi.n	8008fe6 <_vfiprintf_r+0x32>
 8008fe0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008fe2:	f7ff fcec 	bl	80089be <__retarget_lock_acquire_recursive>
 8008fe6:	89ab      	ldrh	r3, [r5, #12]
 8008fe8:	071b      	lsls	r3, r3, #28
 8008fea:	d501      	bpl.n	8008ff0 <_vfiprintf_r+0x3c>
 8008fec:	692b      	ldr	r3, [r5, #16]
 8008fee:	b9eb      	cbnz	r3, 800902c <_vfiprintf_r+0x78>
 8008ff0:	4629      	mov	r1, r5
 8008ff2:	4630      	mov	r0, r6
 8008ff4:	f000 fb06 	bl	8009604 <__swsetup_r>
 8008ff8:	b1c0      	cbz	r0, 800902c <_vfiprintf_r+0x78>
 8008ffa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008ffc:	07dc      	lsls	r4, r3, #31
 8008ffe:	d50e      	bpl.n	800901e <_vfiprintf_r+0x6a>
 8009000:	f04f 30ff 	mov.w	r0, #4294967295
 8009004:	b01d      	add	sp, #116	; 0x74
 8009006:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800900a:	4b7b      	ldr	r3, [pc, #492]	; (80091f8 <_vfiprintf_r+0x244>)
 800900c:	429d      	cmp	r5, r3
 800900e:	d101      	bne.n	8009014 <_vfiprintf_r+0x60>
 8009010:	68b5      	ldr	r5, [r6, #8]
 8009012:	e7df      	b.n	8008fd4 <_vfiprintf_r+0x20>
 8009014:	4b79      	ldr	r3, [pc, #484]	; (80091fc <_vfiprintf_r+0x248>)
 8009016:	429d      	cmp	r5, r3
 8009018:	bf08      	it	eq
 800901a:	68f5      	ldreq	r5, [r6, #12]
 800901c:	e7da      	b.n	8008fd4 <_vfiprintf_r+0x20>
 800901e:	89ab      	ldrh	r3, [r5, #12]
 8009020:	0598      	lsls	r0, r3, #22
 8009022:	d4ed      	bmi.n	8009000 <_vfiprintf_r+0x4c>
 8009024:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009026:	f7ff fccb 	bl	80089c0 <__retarget_lock_release_recursive>
 800902a:	e7e9      	b.n	8009000 <_vfiprintf_r+0x4c>
 800902c:	2300      	movs	r3, #0
 800902e:	9309      	str	r3, [sp, #36]	; 0x24
 8009030:	2320      	movs	r3, #32
 8009032:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009036:	f8cd 800c 	str.w	r8, [sp, #12]
 800903a:	2330      	movs	r3, #48	; 0x30
 800903c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8009200 <_vfiprintf_r+0x24c>
 8009040:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009044:	f04f 0901 	mov.w	r9, #1
 8009048:	4623      	mov	r3, r4
 800904a:	469a      	mov	sl, r3
 800904c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009050:	b10a      	cbz	r2, 8009056 <_vfiprintf_r+0xa2>
 8009052:	2a25      	cmp	r2, #37	; 0x25
 8009054:	d1f9      	bne.n	800904a <_vfiprintf_r+0x96>
 8009056:	ebba 0b04 	subs.w	fp, sl, r4
 800905a:	d00b      	beq.n	8009074 <_vfiprintf_r+0xc0>
 800905c:	465b      	mov	r3, fp
 800905e:	4622      	mov	r2, r4
 8009060:	4629      	mov	r1, r5
 8009062:	4630      	mov	r0, r6
 8009064:	f7ff ff93 	bl	8008f8e <__sfputs_r>
 8009068:	3001      	adds	r0, #1
 800906a:	f000 80aa 	beq.w	80091c2 <_vfiprintf_r+0x20e>
 800906e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009070:	445a      	add	r2, fp
 8009072:	9209      	str	r2, [sp, #36]	; 0x24
 8009074:	f89a 3000 	ldrb.w	r3, [sl]
 8009078:	2b00      	cmp	r3, #0
 800907a:	f000 80a2 	beq.w	80091c2 <_vfiprintf_r+0x20e>
 800907e:	2300      	movs	r3, #0
 8009080:	f04f 32ff 	mov.w	r2, #4294967295
 8009084:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009088:	f10a 0a01 	add.w	sl, sl, #1
 800908c:	9304      	str	r3, [sp, #16]
 800908e:	9307      	str	r3, [sp, #28]
 8009090:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009094:	931a      	str	r3, [sp, #104]	; 0x68
 8009096:	4654      	mov	r4, sl
 8009098:	2205      	movs	r2, #5
 800909a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800909e:	4858      	ldr	r0, [pc, #352]	; (8009200 <_vfiprintf_r+0x24c>)
 80090a0:	f7f7 f896 	bl	80001d0 <memchr>
 80090a4:	9a04      	ldr	r2, [sp, #16]
 80090a6:	b9d8      	cbnz	r0, 80090e0 <_vfiprintf_r+0x12c>
 80090a8:	06d1      	lsls	r1, r2, #27
 80090aa:	bf44      	itt	mi
 80090ac:	2320      	movmi	r3, #32
 80090ae:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80090b2:	0713      	lsls	r3, r2, #28
 80090b4:	bf44      	itt	mi
 80090b6:	232b      	movmi	r3, #43	; 0x2b
 80090b8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80090bc:	f89a 3000 	ldrb.w	r3, [sl]
 80090c0:	2b2a      	cmp	r3, #42	; 0x2a
 80090c2:	d015      	beq.n	80090f0 <_vfiprintf_r+0x13c>
 80090c4:	9a07      	ldr	r2, [sp, #28]
 80090c6:	4654      	mov	r4, sl
 80090c8:	2000      	movs	r0, #0
 80090ca:	f04f 0c0a 	mov.w	ip, #10
 80090ce:	4621      	mov	r1, r4
 80090d0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80090d4:	3b30      	subs	r3, #48	; 0x30
 80090d6:	2b09      	cmp	r3, #9
 80090d8:	d94e      	bls.n	8009178 <_vfiprintf_r+0x1c4>
 80090da:	b1b0      	cbz	r0, 800910a <_vfiprintf_r+0x156>
 80090dc:	9207      	str	r2, [sp, #28]
 80090de:	e014      	b.n	800910a <_vfiprintf_r+0x156>
 80090e0:	eba0 0308 	sub.w	r3, r0, r8
 80090e4:	fa09 f303 	lsl.w	r3, r9, r3
 80090e8:	4313      	orrs	r3, r2
 80090ea:	9304      	str	r3, [sp, #16]
 80090ec:	46a2      	mov	sl, r4
 80090ee:	e7d2      	b.n	8009096 <_vfiprintf_r+0xe2>
 80090f0:	9b03      	ldr	r3, [sp, #12]
 80090f2:	1d19      	adds	r1, r3, #4
 80090f4:	681b      	ldr	r3, [r3, #0]
 80090f6:	9103      	str	r1, [sp, #12]
 80090f8:	2b00      	cmp	r3, #0
 80090fa:	bfbb      	ittet	lt
 80090fc:	425b      	neglt	r3, r3
 80090fe:	f042 0202 	orrlt.w	r2, r2, #2
 8009102:	9307      	strge	r3, [sp, #28]
 8009104:	9307      	strlt	r3, [sp, #28]
 8009106:	bfb8      	it	lt
 8009108:	9204      	strlt	r2, [sp, #16]
 800910a:	7823      	ldrb	r3, [r4, #0]
 800910c:	2b2e      	cmp	r3, #46	; 0x2e
 800910e:	d10c      	bne.n	800912a <_vfiprintf_r+0x176>
 8009110:	7863      	ldrb	r3, [r4, #1]
 8009112:	2b2a      	cmp	r3, #42	; 0x2a
 8009114:	d135      	bne.n	8009182 <_vfiprintf_r+0x1ce>
 8009116:	9b03      	ldr	r3, [sp, #12]
 8009118:	1d1a      	adds	r2, r3, #4
 800911a:	681b      	ldr	r3, [r3, #0]
 800911c:	9203      	str	r2, [sp, #12]
 800911e:	2b00      	cmp	r3, #0
 8009120:	bfb8      	it	lt
 8009122:	f04f 33ff 	movlt.w	r3, #4294967295
 8009126:	3402      	adds	r4, #2
 8009128:	9305      	str	r3, [sp, #20]
 800912a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8009210 <_vfiprintf_r+0x25c>
 800912e:	7821      	ldrb	r1, [r4, #0]
 8009130:	2203      	movs	r2, #3
 8009132:	4650      	mov	r0, sl
 8009134:	f7f7 f84c 	bl	80001d0 <memchr>
 8009138:	b140      	cbz	r0, 800914c <_vfiprintf_r+0x198>
 800913a:	2340      	movs	r3, #64	; 0x40
 800913c:	eba0 000a 	sub.w	r0, r0, sl
 8009140:	fa03 f000 	lsl.w	r0, r3, r0
 8009144:	9b04      	ldr	r3, [sp, #16]
 8009146:	4303      	orrs	r3, r0
 8009148:	3401      	adds	r4, #1
 800914a:	9304      	str	r3, [sp, #16]
 800914c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009150:	482c      	ldr	r0, [pc, #176]	; (8009204 <_vfiprintf_r+0x250>)
 8009152:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009156:	2206      	movs	r2, #6
 8009158:	f7f7 f83a 	bl	80001d0 <memchr>
 800915c:	2800      	cmp	r0, #0
 800915e:	d03f      	beq.n	80091e0 <_vfiprintf_r+0x22c>
 8009160:	4b29      	ldr	r3, [pc, #164]	; (8009208 <_vfiprintf_r+0x254>)
 8009162:	bb1b      	cbnz	r3, 80091ac <_vfiprintf_r+0x1f8>
 8009164:	9b03      	ldr	r3, [sp, #12]
 8009166:	3307      	adds	r3, #7
 8009168:	f023 0307 	bic.w	r3, r3, #7
 800916c:	3308      	adds	r3, #8
 800916e:	9303      	str	r3, [sp, #12]
 8009170:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009172:	443b      	add	r3, r7
 8009174:	9309      	str	r3, [sp, #36]	; 0x24
 8009176:	e767      	b.n	8009048 <_vfiprintf_r+0x94>
 8009178:	fb0c 3202 	mla	r2, ip, r2, r3
 800917c:	460c      	mov	r4, r1
 800917e:	2001      	movs	r0, #1
 8009180:	e7a5      	b.n	80090ce <_vfiprintf_r+0x11a>
 8009182:	2300      	movs	r3, #0
 8009184:	3401      	adds	r4, #1
 8009186:	9305      	str	r3, [sp, #20]
 8009188:	4619      	mov	r1, r3
 800918a:	f04f 0c0a 	mov.w	ip, #10
 800918e:	4620      	mov	r0, r4
 8009190:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009194:	3a30      	subs	r2, #48	; 0x30
 8009196:	2a09      	cmp	r2, #9
 8009198:	d903      	bls.n	80091a2 <_vfiprintf_r+0x1ee>
 800919a:	2b00      	cmp	r3, #0
 800919c:	d0c5      	beq.n	800912a <_vfiprintf_r+0x176>
 800919e:	9105      	str	r1, [sp, #20]
 80091a0:	e7c3      	b.n	800912a <_vfiprintf_r+0x176>
 80091a2:	fb0c 2101 	mla	r1, ip, r1, r2
 80091a6:	4604      	mov	r4, r0
 80091a8:	2301      	movs	r3, #1
 80091aa:	e7f0      	b.n	800918e <_vfiprintf_r+0x1da>
 80091ac:	ab03      	add	r3, sp, #12
 80091ae:	9300      	str	r3, [sp, #0]
 80091b0:	462a      	mov	r2, r5
 80091b2:	4b16      	ldr	r3, [pc, #88]	; (800920c <_vfiprintf_r+0x258>)
 80091b4:	a904      	add	r1, sp, #16
 80091b6:	4630      	mov	r0, r6
 80091b8:	f3af 8000 	nop.w
 80091bc:	4607      	mov	r7, r0
 80091be:	1c78      	adds	r0, r7, #1
 80091c0:	d1d6      	bne.n	8009170 <_vfiprintf_r+0x1bc>
 80091c2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80091c4:	07d9      	lsls	r1, r3, #31
 80091c6:	d405      	bmi.n	80091d4 <_vfiprintf_r+0x220>
 80091c8:	89ab      	ldrh	r3, [r5, #12]
 80091ca:	059a      	lsls	r2, r3, #22
 80091cc:	d402      	bmi.n	80091d4 <_vfiprintf_r+0x220>
 80091ce:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80091d0:	f7ff fbf6 	bl	80089c0 <__retarget_lock_release_recursive>
 80091d4:	89ab      	ldrh	r3, [r5, #12]
 80091d6:	065b      	lsls	r3, r3, #25
 80091d8:	f53f af12 	bmi.w	8009000 <_vfiprintf_r+0x4c>
 80091dc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80091de:	e711      	b.n	8009004 <_vfiprintf_r+0x50>
 80091e0:	ab03      	add	r3, sp, #12
 80091e2:	9300      	str	r3, [sp, #0]
 80091e4:	462a      	mov	r2, r5
 80091e6:	4b09      	ldr	r3, [pc, #36]	; (800920c <_vfiprintf_r+0x258>)
 80091e8:	a904      	add	r1, sp, #16
 80091ea:	4630      	mov	r0, r6
 80091ec:	f000 f880 	bl	80092f0 <_printf_i>
 80091f0:	e7e4      	b.n	80091bc <_vfiprintf_r+0x208>
 80091f2:	bf00      	nop
 80091f4:	08009960 	.word	0x08009960
 80091f8:	08009980 	.word	0x08009980
 80091fc:	08009940 	.word	0x08009940
 8009200:	080099a4 	.word	0x080099a4
 8009204:	080099ae 	.word	0x080099ae
 8009208:	00000000 	.word	0x00000000
 800920c:	08008f8f 	.word	0x08008f8f
 8009210:	080099aa 	.word	0x080099aa

08009214 <_printf_common>:
 8009214:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009218:	4616      	mov	r6, r2
 800921a:	4699      	mov	r9, r3
 800921c:	688a      	ldr	r2, [r1, #8]
 800921e:	690b      	ldr	r3, [r1, #16]
 8009220:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009224:	4293      	cmp	r3, r2
 8009226:	bfb8      	it	lt
 8009228:	4613      	movlt	r3, r2
 800922a:	6033      	str	r3, [r6, #0]
 800922c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009230:	4607      	mov	r7, r0
 8009232:	460c      	mov	r4, r1
 8009234:	b10a      	cbz	r2, 800923a <_printf_common+0x26>
 8009236:	3301      	adds	r3, #1
 8009238:	6033      	str	r3, [r6, #0]
 800923a:	6823      	ldr	r3, [r4, #0]
 800923c:	0699      	lsls	r1, r3, #26
 800923e:	bf42      	ittt	mi
 8009240:	6833      	ldrmi	r3, [r6, #0]
 8009242:	3302      	addmi	r3, #2
 8009244:	6033      	strmi	r3, [r6, #0]
 8009246:	6825      	ldr	r5, [r4, #0]
 8009248:	f015 0506 	ands.w	r5, r5, #6
 800924c:	d106      	bne.n	800925c <_printf_common+0x48>
 800924e:	f104 0a19 	add.w	sl, r4, #25
 8009252:	68e3      	ldr	r3, [r4, #12]
 8009254:	6832      	ldr	r2, [r6, #0]
 8009256:	1a9b      	subs	r3, r3, r2
 8009258:	42ab      	cmp	r3, r5
 800925a:	dc26      	bgt.n	80092aa <_printf_common+0x96>
 800925c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009260:	1e13      	subs	r3, r2, #0
 8009262:	6822      	ldr	r2, [r4, #0]
 8009264:	bf18      	it	ne
 8009266:	2301      	movne	r3, #1
 8009268:	0692      	lsls	r2, r2, #26
 800926a:	d42b      	bmi.n	80092c4 <_printf_common+0xb0>
 800926c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009270:	4649      	mov	r1, r9
 8009272:	4638      	mov	r0, r7
 8009274:	47c0      	blx	r8
 8009276:	3001      	adds	r0, #1
 8009278:	d01e      	beq.n	80092b8 <_printf_common+0xa4>
 800927a:	6823      	ldr	r3, [r4, #0]
 800927c:	68e5      	ldr	r5, [r4, #12]
 800927e:	6832      	ldr	r2, [r6, #0]
 8009280:	f003 0306 	and.w	r3, r3, #6
 8009284:	2b04      	cmp	r3, #4
 8009286:	bf08      	it	eq
 8009288:	1aad      	subeq	r5, r5, r2
 800928a:	68a3      	ldr	r3, [r4, #8]
 800928c:	6922      	ldr	r2, [r4, #16]
 800928e:	bf0c      	ite	eq
 8009290:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009294:	2500      	movne	r5, #0
 8009296:	4293      	cmp	r3, r2
 8009298:	bfc4      	itt	gt
 800929a:	1a9b      	subgt	r3, r3, r2
 800929c:	18ed      	addgt	r5, r5, r3
 800929e:	2600      	movs	r6, #0
 80092a0:	341a      	adds	r4, #26
 80092a2:	42b5      	cmp	r5, r6
 80092a4:	d11a      	bne.n	80092dc <_printf_common+0xc8>
 80092a6:	2000      	movs	r0, #0
 80092a8:	e008      	b.n	80092bc <_printf_common+0xa8>
 80092aa:	2301      	movs	r3, #1
 80092ac:	4652      	mov	r2, sl
 80092ae:	4649      	mov	r1, r9
 80092b0:	4638      	mov	r0, r7
 80092b2:	47c0      	blx	r8
 80092b4:	3001      	adds	r0, #1
 80092b6:	d103      	bne.n	80092c0 <_printf_common+0xac>
 80092b8:	f04f 30ff 	mov.w	r0, #4294967295
 80092bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80092c0:	3501      	adds	r5, #1
 80092c2:	e7c6      	b.n	8009252 <_printf_common+0x3e>
 80092c4:	18e1      	adds	r1, r4, r3
 80092c6:	1c5a      	adds	r2, r3, #1
 80092c8:	2030      	movs	r0, #48	; 0x30
 80092ca:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80092ce:	4422      	add	r2, r4
 80092d0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80092d4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80092d8:	3302      	adds	r3, #2
 80092da:	e7c7      	b.n	800926c <_printf_common+0x58>
 80092dc:	2301      	movs	r3, #1
 80092de:	4622      	mov	r2, r4
 80092e0:	4649      	mov	r1, r9
 80092e2:	4638      	mov	r0, r7
 80092e4:	47c0      	blx	r8
 80092e6:	3001      	adds	r0, #1
 80092e8:	d0e6      	beq.n	80092b8 <_printf_common+0xa4>
 80092ea:	3601      	adds	r6, #1
 80092ec:	e7d9      	b.n	80092a2 <_printf_common+0x8e>
	...

080092f0 <_printf_i>:
 80092f0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80092f4:	7e0f      	ldrb	r7, [r1, #24]
 80092f6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80092f8:	2f78      	cmp	r7, #120	; 0x78
 80092fa:	4691      	mov	r9, r2
 80092fc:	4680      	mov	r8, r0
 80092fe:	460c      	mov	r4, r1
 8009300:	469a      	mov	sl, r3
 8009302:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009306:	d807      	bhi.n	8009318 <_printf_i+0x28>
 8009308:	2f62      	cmp	r7, #98	; 0x62
 800930a:	d80a      	bhi.n	8009322 <_printf_i+0x32>
 800930c:	2f00      	cmp	r7, #0
 800930e:	f000 80d8 	beq.w	80094c2 <_printf_i+0x1d2>
 8009312:	2f58      	cmp	r7, #88	; 0x58
 8009314:	f000 80a3 	beq.w	800945e <_printf_i+0x16e>
 8009318:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800931c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009320:	e03a      	b.n	8009398 <_printf_i+0xa8>
 8009322:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009326:	2b15      	cmp	r3, #21
 8009328:	d8f6      	bhi.n	8009318 <_printf_i+0x28>
 800932a:	a101      	add	r1, pc, #4	; (adr r1, 8009330 <_printf_i+0x40>)
 800932c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009330:	08009389 	.word	0x08009389
 8009334:	0800939d 	.word	0x0800939d
 8009338:	08009319 	.word	0x08009319
 800933c:	08009319 	.word	0x08009319
 8009340:	08009319 	.word	0x08009319
 8009344:	08009319 	.word	0x08009319
 8009348:	0800939d 	.word	0x0800939d
 800934c:	08009319 	.word	0x08009319
 8009350:	08009319 	.word	0x08009319
 8009354:	08009319 	.word	0x08009319
 8009358:	08009319 	.word	0x08009319
 800935c:	080094a9 	.word	0x080094a9
 8009360:	080093cd 	.word	0x080093cd
 8009364:	0800948b 	.word	0x0800948b
 8009368:	08009319 	.word	0x08009319
 800936c:	08009319 	.word	0x08009319
 8009370:	080094cb 	.word	0x080094cb
 8009374:	08009319 	.word	0x08009319
 8009378:	080093cd 	.word	0x080093cd
 800937c:	08009319 	.word	0x08009319
 8009380:	08009319 	.word	0x08009319
 8009384:	08009493 	.word	0x08009493
 8009388:	682b      	ldr	r3, [r5, #0]
 800938a:	1d1a      	adds	r2, r3, #4
 800938c:	681b      	ldr	r3, [r3, #0]
 800938e:	602a      	str	r2, [r5, #0]
 8009390:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009394:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009398:	2301      	movs	r3, #1
 800939a:	e0a3      	b.n	80094e4 <_printf_i+0x1f4>
 800939c:	6820      	ldr	r0, [r4, #0]
 800939e:	6829      	ldr	r1, [r5, #0]
 80093a0:	0606      	lsls	r6, r0, #24
 80093a2:	f101 0304 	add.w	r3, r1, #4
 80093a6:	d50a      	bpl.n	80093be <_printf_i+0xce>
 80093a8:	680e      	ldr	r6, [r1, #0]
 80093aa:	602b      	str	r3, [r5, #0]
 80093ac:	2e00      	cmp	r6, #0
 80093ae:	da03      	bge.n	80093b8 <_printf_i+0xc8>
 80093b0:	232d      	movs	r3, #45	; 0x2d
 80093b2:	4276      	negs	r6, r6
 80093b4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80093b8:	485e      	ldr	r0, [pc, #376]	; (8009534 <_printf_i+0x244>)
 80093ba:	230a      	movs	r3, #10
 80093bc:	e019      	b.n	80093f2 <_printf_i+0x102>
 80093be:	680e      	ldr	r6, [r1, #0]
 80093c0:	602b      	str	r3, [r5, #0]
 80093c2:	f010 0f40 	tst.w	r0, #64	; 0x40
 80093c6:	bf18      	it	ne
 80093c8:	b236      	sxthne	r6, r6
 80093ca:	e7ef      	b.n	80093ac <_printf_i+0xbc>
 80093cc:	682b      	ldr	r3, [r5, #0]
 80093ce:	6820      	ldr	r0, [r4, #0]
 80093d0:	1d19      	adds	r1, r3, #4
 80093d2:	6029      	str	r1, [r5, #0]
 80093d4:	0601      	lsls	r1, r0, #24
 80093d6:	d501      	bpl.n	80093dc <_printf_i+0xec>
 80093d8:	681e      	ldr	r6, [r3, #0]
 80093da:	e002      	b.n	80093e2 <_printf_i+0xf2>
 80093dc:	0646      	lsls	r6, r0, #25
 80093de:	d5fb      	bpl.n	80093d8 <_printf_i+0xe8>
 80093e0:	881e      	ldrh	r6, [r3, #0]
 80093e2:	4854      	ldr	r0, [pc, #336]	; (8009534 <_printf_i+0x244>)
 80093e4:	2f6f      	cmp	r7, #111	; 0x6f
 80093e6:	bf0c      	ite	eq
 80093e8:	2308      	moveq	r3, #8
 80093ea:	230a      	movne	r3, #10
 80093ec:	2100      	movs	r1, #0
 80093ee:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80093f2:	6865      	ldr	r5, [r4, #4]
 80093f4:	60a5      	str	r5, [r4, #8]
 80093f6:	2d00      	cmp	r5, #0
 80093f8:	bfa2      	ittt	ge
 80093fa:	6821      	ldrge	r1, [r4, #0]
 80093fc:	f021 0104 	bicge.w	r1, r1, #4
 8009400:	6021      	strge	r1, [r4, #0]
 8009402:	b90e      	cbnz	r6, 8009408 <_printf_i+0x118>
 8009404:	2d00      	cmp	r5, #0
 8009406:	d04d      	beq.n	80094a4 <_printf_i+0x1b4>
 8009408:	4615      	mov	r5, r2
 800940a:	fbb6 f1f3 	udiv	r1, r6, r3
 800940e:	fb03 6711 	mls	r7, r3, r1, r6
 8009412:	5dc7      	ldrb	r7, [r0, r7]
 8009414:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009418:	4637      	mov	r7, r6
 800941a:	42bb      	cmp	r3, r7
 800941c:	460e      	mov	r6, r1
 800941e:	d9f4      	bls.n	800940a <_printf_i+0x11a>
 8009420:	2b08      	cmp	r3, #8
 8009422:	d10b      	bne.n	800943c <_printf_i+0x14c>
 8009424:	6823      	ldr	r3, [r4, #0]
 8009426:	07de      	lsls	r6, r3, #31
 8009428:	d508      	bpl.n	800943c <_printf_i+0x14c>
 800942a:	6923      	ldr	r3, [r4, #16]
 800942c:	6861      	ldr	r1, [r4, #4]
 800942e:	4299      	cmp	r1, r3
 8009430:	bfde      	ittt	le
 8009432:	2330      	movle	r3, #48	; 0x30
 8009434:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009438:	f105 35ff 	addle.w	r5, r5, #4294967295
 800943c:	1b52      	subs	r2, r2, r5
 800943e:	6122      	str	r2, [r4, #16]
 8009440:	f8cd a000 	str.w	sl, [sp]
 8009444:	464b      	mov	r3, r9
 8009446:	aa03      	add	r2, sp, #12
 8009448:	4621      	mov	r1, r4
 800944a:	4640      	mov	r0, r8
 800944c:	f7ff fee2 	bl	8009214 <_printf_common>
 8009450:	3001      	adds	r0, #1
 8009452:	d14c      	bne.n	80094ee <_printf_i+0x1fe>
 8009454:	f04f 30ff 	mov.w	r0, #4294967295
 8009458:	b004      	add	sp, #16
 800945a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800945e:	4835      	ldr	r0, [pc, #212]	; (8009534 <_printf_i+0x244>)
 8009460:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8009464:	6829      	ldr	r1, [r5, #0]
 8009466:	6823      	ldr	r3, [r4, #0]
 8009468:	f851 6b04 	ldr.w	r6, [r1], #4
 800946c:	6029      	str	r1, [r5, #0]
 800946e:	061d      	lsls	r5, r3, #24
 8009470:	d514      	bpl.n	800949c <_printf_i+0x1ac>
 8009472:	07df      	lsls	r7, r3, #31
 8009474:	bf44      	itt	mi
 8009476:	f043 0320 	orrmi.w	r3, r3, #32
 800947a:	6023      	strmi	r3, [r4, #0]
 800947c:	b91e      	cbnz	r6, 8009486 <_printf_i+0x196>
 800947e:	6823      	ldr	r3, [r4, #0]
 8009480:	f023 0320 	bic.w	r3, r3, #32
 8009484:	6023      	str	r3, [r4, #0]
 8009486:	2310      	movs	r3, #16
 8009488:	e7b0      	b.n	80093ec <_printf_i+0xfc>
 800948a:	6823      	ldr	r3, [r4, #0]
 800948c:	f043 0320 	orr.w	r3, r3, #32
 8009490:	6023      	str	r3, [r4, #0]
 8009492:	2378      	movs	r3, #120	; 0x78
 8009494:	4828      	ldr	r0, [pc, #160]	; (8009538 <_printf_i+0x248>)
 8009496:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800949a:	e7e3      	b.n	8009464 <_printf_i+0x174>
 800949c:	0659      	lsls	r1, r3, #25
 800949e:	bf48      	it	mi
 80094a0:	b2b6      	uxthmi	r6, r6
 80094a2:	e7e6      	b.n	8009472 <_printf_i+0x182>
 80094a4:	4615      	mov	r5, r2
 80094a6:	e7bb      	b.n	8009420 <_printf_i+0x130>
 80094a8:	682b      	ldr	r3, [r5, #0]
 80094aa:	6826      	ldr	r6, [r4, #0]
 80094ac:	6961      	ldr	r1, [r4, #20]
 80094ae:	1d18      	adds	r0, r3, #4
 80094b0:	6028      	str	r0, [r5, #0]
 80094b2:	0635      	lsls	r5, r6, #24
 80094b4:	681b      	ldr	r3, [r3, #0]
 80094b6:	d501      	bpl.n	80094bc <_printf_i+0x1cc>
 80094b8:	6019      	str	r1, [r3, #0]
 80094ba:	e002      	b.n	80094c2 <_printf_i+0x1d2>
 80094bc:	0670      	lsls	r0, r6, #25
 80094be:	d5fb      	bpl.n	80094b8 <_printf_i+0x1c8>
 80094c0:	8019      	strh	r1, [r3, #0]
 80094c2:	2300      	movs	r3, #0
 80094c4:	6123      	str	r3, [r4, #16]
 80094c6:	4615      	mov	r5, r2
 80094c8:	e7ba      	b.n	8009440 <_printf_i+0x150>
 80094ca:	682b      	ldr	r3, [r5, #0]
 80094cc:	1d1a      	adds	r2, r3, #4
 80094ce:	602a      	str	r2, [r5, #0]
 80094d0:	681d      	ldr	r5, [r3, #0]
 80094d2:	6862      	ldr	r2, [r4, #4]
 80094d4:	2100      	movs	r1, #0
 80094d6:	4628      	mov	r0, r5
 80094d8:	f7f6 fe7a 	bl	80001d0 <memchr>
 80094dc:	b108      	cbz	r0, 80094e2 <_printf_i+0x1f2>
 80094de:	1b40      	subs	r0, r0, r5
 80094e0:	6060      	str	r0, [r4, #4]
 80094e2:	6863      	ldr	r3, [r4, #4]
 80094e4:	6123      	str	r3, [r4, #16]
 80094e6:	2300      	movs	r3, #0
 80094e8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80094ec:	e7a8      	b.n	8009440 <_printf_i+0x150>
 80094ee:	6923      	ldr	r3, [r4, #16]
 80094f0:	462a      	mov	r2, r5
 80094f2:	4649      	mov	r1, r9
 80094f4:	4640      	mov	r0, r8
 80094f6:	47d0      	blx	sl
 80094f8:	3001      	adds	r0, #1
 80094fa:	d0ab      	beq.n	8009454 <_printf_i+0x164>
 80094fc:	6823      	ldr	r3, [r4, #0]
 80094fe:	079b      	lsls	r3, r3, #30
 8009500:	d413      	bmi.n	800952a <_printf_i+0x23a>
 8009502:	68e0      	ldr	r0, [r4, #12]
 8009504:	9b03      	ldr	r3, [sp, #12]
 8009506:	4298      	cmp	r0, r3
 8009508:	bfb8      	it	lt
 800950a:	4618      	movlt	r0, r3
 800950c:	e7a4      	b.n	8009458 <_printf_i+0x168>
 800950e:	2301      	movs	r3, #1
 8009510:	4632      	mov	r2, r6
 8009512:	4649      	mov	r1, r9
 8009514:	4640      	mov	r0, r8
 8009516:	47d0      	blx	sl
 8009518:	3001      	adds	r0, #1
 800951a:	d09b      	beq.n	8009454 <_printf_i+0x164>
 800951c:	3501      	adds	r5, #1
 800951e:	68e3      	ldr	r3, [r4, #12]
 8009520:	9903      	ldr	r1, [sp, #12]
 8009522:	1a5b      	subs	r3, r3, r1
 8009524:	42ab      	cmp	r3, r5
 8009526:	dcf2      	bgt.n	800950e <_printf_i+0x21e>
 8009528:	e7eb      	b.n	8009502 <_printf_i+0x212>
 800952a:	2500      	movs	r5, #0
 800952c:	f104 0619 	add.w	r6, r4, #25
 8009530:	e7f5      	b.n	800951e <_printf_i+0x22e>
 8009532:	bf00      	nop
 8009534:	080099b5 	.word	0x080099b5
 8009538:	080099c6 	.word	0x080099c6

0800953c <_read_r>:
 800953c:	b538      	push	{r3, r4, r5, lr}
 800953e:	4d07      	ldr	r5, [pc, #28]	; (800955c <_read_r+0x20>)
 8009540:	4604      	mov	r4, r0
 8009542:	4608      	mov	r0, r1
 8009544:	4611      	mov	r1, r2
 8009546:	2200      	movs	r2, #0
 8009548:	602a      	str	r2, [r5, #0]
 800954a:	461a      	mov	r2, r3
 800954c:	f7f7 fe84 	bl	8001258 <_read>
 8009550:	1c43      	adds	r3, r0, #1
 8009552:	d102      	bne.n	800955a <_read_r+0x1e>
 8009554:	682b      	ldr	r3, [r5, #0]
 8009556:	b103      	cbz	r3, 800955a <_read_r+0x1e>
 8009558:	6023      	str	r3, [r4, #0]
 800955a:	bd38      	pop	{r3, r4, r5, pc}
 800955c:	20001c74 	.word	0x20001c74

08009560 <__swbuf_r>:
 8009560:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009562:	460e      	mov	r6, r1
 8009564:	4614      	mov	r4, r2
 8009566:	4605      	mov	r5, r0
 8009568:	b118      	cbz	r0, 8009572 <__swbuf_r+0x12>
 800956a:	6983      	ldr	r3, [r0, #24]
 800956c:	b90b      	cbnz	r3, 8009572 <__swbuf_r+0x12>
 800956e:	f7ff f963 	bl	8008838 <__sinit>
 8009572:	4b21      	ldr	r3, [pc, #132]	; (80095f8 <__swbuf_r+0x98>)
 8009574:	429c      	cmp	r4, r3
 8009576:	d12b      	bne.n	80095d0 <__swbuf_r+0x70>
 8009578:	686c      	ldr	r4, [r5, #4]
 800957a:	69a3      	ldr	r3, [r4, #24]
 800957c:	60a3      	str	r3, [r4, #8]
 800957e:	89a3      	ldrh	r3, [r4, #12]
 8009580:	071a      	lsls	r2, r3, #28
 8009582:	d52f      	bpl.n	80095e4 <__swbuf_r+0x84>
 8009584:	6923      	ldr	r3, [r4, #16]
 8009586:	b36b      	cbz	r3, 80095e4 <__swbuf_r+0x84>
 8009588:	6923      	ldr	r3, [r4, #16]
 800958a:	6820      	ldr	r0, [r4, #0]
 800958c:	1ac0      	subs	r0, r0, r3
 800958e:	6963      	ldr	r3, [r4, #20]
 8009590:	b2f6      	uxtb	r6, r6
 8009592:	4283      	cmp	r3, r0
 8009594:	4637      	mov	r7, r6
 8009596:	dc04      	bgt.n	80095a2 <__swbuf_r+0x42>
 8009598:	4621      	mov	r1, r4
 800959a:	4628      	mov	r0, r5
 800959c:	f7ff fc3a 	bl	8008e14 <_fflush_r>
 80095a0:	bb30      	cbnz	r0, 80095f0 <__swbuf_r+0x90>
 80095a2:	68a3      	ldr	r3, [r4, #8]
 80095a4:	3b01      	subs	r3, #1
 80095a6:	60a3      	str	r3, [r4, #8]
 80095a8:	6823      	ldr	r3, [r4, #0]
 80095aa:	1c5a      	adds	r2, r3, #1
 80095ac:	6022      	str	r2, [r4, #0]
 80095ae:	701e      	strb	r6, [r3, #0]
 80095b0:	6963      	ldr	r3, [r4, #20]
 80095b2:	3001      	adds	r0, #1
 80095b4:	4283      	cmp	r3, r0
 80095b6:	d004      	beq.n	80095c2 <__swbuf_r+0x62>
 80095b8:	89a3      	ldrh	r3, [r4, #12]
 80095ba:	07db      	lsls	r3, r3, #31
 80095bc:	d506      	bpl.n	80095cc <__swbuf_r+0x6c>
 80095be:	2e0a      	cmp	r6, #10
 80095c0:	d104      	bne.n	80095cc <__swbuf_r+0x6c>
 80095c2:	4621      	mov	r1, r4
 80095c4:	4628      	mov	r0, r5
 80095c6:	f7ff fc25 	bl	8008e14 <_fflush_r>
 80095ca:	b988      	cbnz	r0, 80095f0 <__swbuf_r+0x90>
 80095cc:	4638      	mov	r0, r7
 80095ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80095d0:	4b0a      	ldr	r3, [pc, #40]	; (80095fc <__swbuf_r+0x9c>)
 80095d2:	429c      	cmp	r4, r3
 80095d4:	d101      	bne.n	80095da <__swbuf_r+0x7a>
 80095d6:	68ac      	ldr	r4, [r5, #8]
 80095d8:	e7cf      	b.n	800957a <__swbuf_r+0x1a>
 80095da:	4b09      	ldr	r3, [pc, #36]	; (8009600 <__swbuf_r+0xa0>)
 80095dc:	429c      	cmp	r4, r3
 80095de:	bf08      	it	eq
 80095e0:	68ec      	ldreq	r4, [r5, #12]
 80095e2:	e7ca      	b.n	800957a <__swbuf_r+0x1a>
 80095e4:	4621      	mov	r1, r4
 80095e6:	4628      	mov	r0, r5
 80095e8:	f000 f80c 	bl	8009604 <__swsetup_r>
 80095ec:	2800      	cmp	r0, #0
 80095ee:	d0cb      	beq.n	8009588 <__swbuf_r+0x28>
 80095f0:	f04f 37ff 	mov.w	r7, #4294967295
 80095f4:	e7ea      	b.n	80095cc <__swbuf_r+0x6c>
 80095f6:	bf00      	nop
 80095f8:	08009960 	.word	0x08009960
 80095fc:	08009980 	.word	0x08009980
 8009600:	08009940 	.word	0x08009940

08009604 <__swsetup_r>:
 8009604:	4b32      	ldr	r3, [pc, #200]	; (80096d0 <__swsetup_r+0xcc>)
 8009606:	b570      	push	{r4, r5, r6, lr}
 8009608:	681d      	ldr	r5, [r3, #0]
 800960a:	4606      	mov	r6, r0
 800960c:	460c      	mov	r4, r1
 800960e:	b125      	cbz	r5, 800961a <__swsetup_r+0x16>
 8009610:	69ab      	ldr	r3, [r5, #24]
 8009612:	b913      	cbnz	r3, 800961a <__swsetup_r+0x16>
 8009614:	4628      	mov	r0, r5
 8009616:	f7ff f90f 	bl	8008838 <__sinit>
 800961a:	4b2e      	ldr	r3, [pc, #184]	; (80096d4 <__swsetup_r+0xd0>)
 800961c:	429c      	cmp	r4, r3
 800961e:	d10f      	bne.n	8009640 <__swsetup_r+0x3c>
 8009620:	686c      	ldr	r4, [r5, #4]
 8009622:	89a3      	ldrh	r3, [r4, #12]
 8009624:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009628:	0719      	lsls	r1, r3, #28
 800962a:	d42c      	bmi.n	8009686 <__swsetup_r+0x82>
 800962c:	06dd      	lsls	r5, r3, #27
 800962e:	d411      	bmi.n	8009654 <__swsetup_r+0x50>
 8009630:	2309      	movs	r3, #9
 8009632:	6033      	str	r3, [r6, #0]
 8009634:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009638:	81a3      	strh	r3, [r4, #12]
 800963a:	f04f 30ff 	mov.w	r0, #4294967295
 800963e:	e03e      	b.n	80096be <__swsetup_r+0xba>
 8009640:	4b25      	ldr	r3, [pc, #148]	; (80096d8 <__swsetup_r+0xd4>)
 8009642:	429c      	cmp	r4, r3
 8009644:	d101      	bne.n	800964a <__swsetup_r+0x46>
 8009646:	68ac      	ldr	r4, [r5, #8]
 8009648:	e7eb      	b.n	8009622 <__swsetup_r+0x1e>
 800964a:	4b24      	ldr	r3, [pc, #144]	; (80096dc <__swsetup_r+0xd8>)
 800964c:	429c      	cmp	r4, r3
 800964e:	bf08      	it	eq
 8009650:	68ec      	ldreq	r4, [r5, #12]
 8009652:	e7e6      	b.n	8009622 <__swsetup_r+0x1e>
 8009654:	0758      	lsls	r0, r3, #29
 8009656:	d512      	bpl.n	800967e <__swsetup_r+0x7a>
 8009658:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800965a:	b141      	cbz	r1, 800966e <__swsetup_r+0x6a>
 800965c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009660:	4299      	cmp	r1, r3
 8009662:	d002      	beq.n	800966a <__swsetup_r+0x66>
 8009664:	4630      	mov	r0, r6
 8009666:	f7ff fc2f 	bl	8008ec8 <_free_r>
 800966a:	2300      	movs	r3, #0
 800966c:	6363      	str	r3, [r4, #52]	; 0x34
 800966e:	89a3      	ldrh	r3, [r4, #12]
 8009670:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009674:	81a3      	strh	r3, [r4, #12]
 8009676:	2300      	movs	r3, #0
 8009678:	6063      	str	r3, [r4, #4]
 800967a:	6923      	ldr	r3, [r4, #16]
 800967c:	6023      	str	r3, [r4, #0]
 800967e:	89a3      	ldrh	r3, [r4, #12]
 8009680:	f043 0308 	orr.w	r3, r3, #8
 8009684:	81a3      	strh	r3, [r4, #12]
 8009686:	6923      	ldr	r3, [r4, #16]
 8009688:	b94b      	cbnz	r3, 800969e <__swsetup_r+0x9a>
 800968a:	89a3      	ldrh	r3, [r4, #12]
 800968c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009690:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009694:	d003      	beq.n	800969e <__swsetup_r+0x9a>
 8009696:	4621      	mov	r1, r4
 8009698:	4630      	mov	r0, r6
 800969a:	f000 f847 	bl	800972c <__smakebuf_r>
 800969e:	89a0      	ldrh	r0, [r4, #12]
 80096a0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80096a4:	f010 0301 	ands.w	r3, r0, #1
 80096a8:	d00a      	beq.n	80096c0 <__swsetup_r+0xbc>
 80096aa:	2300      	movs	r3, #0
 80096ac:	60a3      	str	r3, [r4, #8]
 80096ae:	6963      	ldr	r3, [r4, #20]
 80096b0:	425b      	negs	r3, r3
 80096b2:	61a3      	str	r3, [r4, #24]
 80096b4:	6923      	ldr	r3, [r4, #16]
 80096b6:	b943      	cbnz	r3, 80096ca <__swsetup_r+0xc6>
 80096b8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80096bc:	d1ba      	bne.n	8009634 <__swsetup_r+0x30>
 80096be:	bd70      	pop	{r4, r5, r6, pc}
 80096c0:	0781      	lsls	r1, r0, #30
 80096c2:	bf58      	it	pl
 80096c4:	6963      	ldrpl	r3, [r4, #20]
 80096c6:	60a3      	str	r3, [r4, #8]
 80096c8:	e7f4      	b.n	80096b4 <__swsetup_r+0xb0>
 80096ca:	2000      	movs	r0, #0
 80096cc:	e7f7      	b.n	80096be <__swsetup_r+0xba>
 80096ce:	bf00      	nop
 80096d0:	20000014 	.word	0x20000014
 80096d4:	08009960 	.word	0x08009960
 80096d8:	08009980 	.word	0x08009980
 80096dc:	08009940 	.word	0x08009940

080096e0 <__swhatbuf_r>:
 80096e0:	b570      	push	{r4, r5, r6, lr}
 80096e2:	460e      	mov	r6, r1
 80096e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80096e8:	2900      	cmp	r1, #0
 80096ea:	b096      	sub	sp, #88	; 0x58
 80096ec:	4614      	mov	r4, r2
 80096ee:	461d      	mov	r5, r3
 80096f0:	da08      	bge.n	8009704 <__swhatbuf_r+0x24>
 80096f2:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80096f6:	2200      	movs	r2, #0
 80096f8:	602a      	str	r2, [r5, #0]
 80096fa:	061a      	lsls	r2, r3, #24
 80096fc:	d410      	bmi.n	8009720 <__swhatbuf_r+0x40>
 80096fe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009702:	e00e      	b.n	8009722 <__swhatbuf_r+0x42>
 8009704:	466a      	mov	r2, sp
 8009706:	f000 f851 	bl	80097ac <_fstat_r>
 800970a:	2800      	cmp	r0, #0
 800970c:	dbf1      	blt.n	80096f2 <__swhatbuf_r+0x12>
 800970e:	9a01      	ldr	r2, [sp, #4]
 8009710:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009714:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009718:	425a      	negs	r2, r3
 800971a:	415a      	adcs	r2, r3
 800971c:	602a      	str	r2, [r5, #0]
 800971e:	e7ee      	b.n	80096fe <__swhatbuf_r+0x1e>
 8009720:	2340      	movs	r3, #64	; 0x40
 8009722:	2000      	movs	r0, #0
 8009724:	6023      	str	r3, [r4, #0]
 8009726:	b016      	add	sp, #88	; 0x58
 8009728:	bd70      	pop	{r4, r5, r6, pc}
	...

0800972c <__smakebuf_r>:
 800972c:	898b      	ldrh	r3, [r1, #12]
 800972e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009730:	079d      	lsls	r5, r3, #30
 8009732:	4606      	mov	r6, r0
 8009734:	460c      	mov	r4, r1
 8009736:	d507      	bpl.n	8009748 <__smakebuf_r+0x1c>
 8009738:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800973c:	6023      	str	r3, [r4, #0]
 800973e:	6123      	str	r3, [r4, #16]
 8009740:	2301      	movs	r3, #1
 8009742:	6163      	str	r3, [r4, #20]
 8009744:	b002      	add	sp, #8
 8009746:	bd70      	pop	{r4, r5, r6, pc}
 8009748:	ab01      	add	r3, sp, #4
 800974a:	466a      	mov	r2, sp
 800974c:	f7ff ffc8 	bl	80096e0 <__swhatbuf_r>
 8009750:	9900      	ldr	r1, [sp, #0]
 8009752:	4605      	mov	r5, r0
 8009754:	4630      	mov	r0, r6
 8009756:	f7ff f96b 	bl	8008a30 <_malloc_r>
 800975a:	b948      	cbnz	r0, 8009770 <__smakebuf_r+0x44>
 800975c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009760:	059a      	lsls	r2, r3, #22
 8009762:	d4ef      	bmi.n	8009744 <__smakebuf_r+0x18>
 8009764:	f023 0303 	bic.w	r3, r3, #3
 8009768:	f043 0302 	orr.w	r3, r3, #2
 800976c:	81a3      	strh	r3, [r4, #12]
 800976e:	e7e3      	b.n	8009738 <__smakebuf_r+0xc>
 8009770:	4b0d      	ldr	r3, [pc, #52]	; (80097a8 <__smakebuf_r+0x7c>)
 8009772:	62b3      	str	r3, [r6, #40]	; 0x28
 8009774:	89a3      	ldrh	r3, [r4, #12]
 8009776:	6020      	str	r0, [r4, #0]
 8009778:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800977c:	81a3      	strh	r3, [r4, #12]
 800977e:	9b00      	ldr	r3, [sp, #0]
 8009780:	6163      	str	r3, [r4, #20]
 8009782:	9b01      	ldr	r3, [sp, #4]
 8009784:	6120      	str	r0, [r4, #16]
 8009786:	b15b      	cbz	r3, 80097a0 <__smakebuf_r+0x74>
 8009788:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800978c:	4630      	mov	r0, r6
 800978e:	f000 f81f 	bl	80097d0 <_isatty_r>
 8009792:	b128      	cbz	r0, 80097a0 <__smakebuf_r+0x74>
 8009794:	89a3      	ldrh	r3, [r4, #12]
 8009796:	f023 0303 	bic.w	r3, r3, #3
 800979a:	f043 0301 	orr.w	r3, r3, #1
 800979e:	81a3      	strh	r3, [r4, #12]
 80097a0:	89a0      	ldrh	r0, [r4, #12]
 80097a2:	4305      	orrs	r5, r0
 80097a4:	81a5      	strh	r5, [r4, #12]
 80097a6:	e7cd      	b.n	8009744 <__smakebuf_r+0x18>
 80097a8:	080087d1 	.word	0x080087d1

080097ac <_fstat_r>:
 80097ac:	b538      	push	{r3, r4, r5, lr}
 80097ae:	4d07      	ldr	r5, [pc, #28]	; (80097cc <_fstat_r+0x20>)
 80097b0:	2300      	movs	r3, #0
 80097b2:	4604      	mov	r4, r0
 80097b4:	4608      	mov	r0, r1
 80097b6:	4611      	mov	r1, r2
 80097b8:	602b      	str	r3, [r5, #0]
 80097ba:	f7f7 fd92 	bl	80012e2 <_fstat>
 80097be:	1c43      	adds	r3, r0, #1
 80097c0:	d102      	bne.n	80097c8 <_fstat_r+0x1c>
 80097c2:	682b      	ldr	r3, [r5, #0]
 80097c4:	b103      	cbz	r3, 80097c8 <_fstat_r+0x1c>
 80097c6:	6023      	str	r3, [r4, #0]
 80097c8:	bd38      	pop	{r3, r4, r5, pc}
 80097ca:	bf00      	nop
 80097cc:	20001c74 	.word	0x20001c74

080097d0 <_isatty_r>:
 80097d0:	b538      	push	{r3, r4, r5, lr}
 80097d2:	4d06      	ldr	r5, [pc, #24]	; (80097ec <_isatty_r+0x1c>)
 80097d4:	2300      	movs	r3, #0
 80097d6:	4604      	mov	r4, r0
 80097d8:	4608      	mov	r0, r1
 80097da:	602b      	str	r3, [r5, #0]
 80097dc:	f7f7 fd91 	bl	8001302 <_isatty>
 80097e0:	1c43      	adds	r3, r0, #1
 80097e2:	d102      	bne.n	80097ea <_isatty_r+0x1a>
 80097e4:	682b      	ldr	r3, [r5, #0]
 80097e6:	b103      	cbz	r3, 80097ea <_isatty_r+0x1a>
 80097e8:	6023      	str	r3, [r4, #0]
 80097ea:	bd38      	pop	{r3, r4, r5, pc}
 80097ec:	20001c74 	.word	0x20001c74

080097f0 <_init>:
 80097f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80097f2:	bf00      	nop
 80097f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80097f6:	bc08      	pop	{r3}
 80097f8:	469e      	mov	lr, r3
 80097fa:	4770      	bx	lr

080097fc <_fini>:
 80097fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80097fe:	bf00      	nop
 8009800:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009802:	bc08      	pop	{r3}
 8009804:	469e      	mov	lr, r3
 8009806:	4770      	bx	lr
