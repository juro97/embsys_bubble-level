
nucleo-l432kc_wifi.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009b60  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000248  08009cf0  08009cf0  00019cf0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009f38  08009f38  0002007c  2**0
                  CONTENTS
  4 .ARM          00000008  08009f38  08009f38  00019f38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009f40  08009f40  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009f40  08009f40  00019f40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009f44  08009f44  00019f44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  08009f48  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000044d4  2000007c  08009fc4  0002007c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004550  08009fc4  00024550  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002053b  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000044a7  00000000  00000000  000405e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000019b8  00000000  00000000  00044a90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001850  00000000  00000000  00046448  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002513c  00000000  00000000  00047c98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001e26e  00000000  00000000  0006cdd4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d9231  00000000  00000000  0008b042  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00164273  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007044  00000000  00000000  001642c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000007c 	.word	0x2000007c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009cd8 	.word	0x08009cd8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000080 	.word	0x20000080
 80001cc:	08009cd8 	.word	0x08009cd8

080001d0 <__aeabi_dmul>:
 80001d0:	b570      	push	{r4, r5, r6, lr}
 80001d2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80001d6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80001da:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80001de:	bf1d      	ittte	ne
 80001e0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80001e4:	ea94 0f0c 	teqne	r4, ip
 80001e8:	ea95 0f0c 	teqne	r5, ip
 80001ec:	f000 f8de 	bleq	80003ac <__aeabi_dmul+0x1dc>
 80001f0:	442c      	add	r4, r5
 80001f2:	ea81 0603 	eor.w	r6, r1, r3
 80001f6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80001fa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80001fe:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000202:	bf18      	it	ne
 8000204:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000208:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800020c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000210:	d038      	beq.n	8000284 <__aeabi_dmul+0xb4>
 8000212:	fba0 ce02 	umull	ip, lr, r0, r2
 8000216:	f04f 0500 	mov.w	r5, #0
 800021a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800021e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000222:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000226:	f04f 0600 	mov.w	r6, #0
 800022a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800022e:	f09c 0f00 	teq	ip, #0
 8000232:	bf18      	it	ne
 8000234:	f04e 0e01 	orrne.w	lr, lr, #1
 8000238:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800023c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000240:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000244:	d204      	bcs.n	8000250 <__aeabi_dmul+0x80>
 8000246:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800024a:	416d      	adcs	r5, r5
 800024c:	eb46 0606 	adc.w	r6, r6, r6
 8000250:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000254:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000258:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800025c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000260:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000264:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000268:	bf88      	it	hi
 800026a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800026e:	d81e      	bhi.n	80002ae <__aeabi_dmul+0xde>
 8000270:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000274:	bf08      	it	eq
 8000276:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800027a:	f150 0000 	adcs.w	r0, r0, #0
 800027e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000282:	bd70      	pop	{r4, r5, r6, pc}
 8000284:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000288:	ea46 0101 	orr.w	r1, r6, r1
 800028c:	ea40 0002 	orr.w	r0, r0, r2
 8000290:	ea81 0103 	eor.w	r1, r1, r3
 8000294:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000298:	bfc2      	ittt	gt
 800029a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800029e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80002a2:	bd70      	popgt	{r4, r5, r6, pc}
 80002a4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002a8:	f04f 0e00 	mov.w	lr, #0
 80002ac:	3c01      	subs	r4, #1
 80002ae:	f300 80ab 	bgt.w	8000408 <__aeabi_dmul+0x238>
 80002b2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80002b6:	bfde      	ittt	le
 80002b8:	2000      	movle	r0, #0
 80002ba:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80002be:	bd70      	pople	{r4, r5, r6, pc}
 80002c0:	f1c4 0400 	rsb	r4, r4, #0
 80002c4:	3c20      	subs	r4, #32
 80002c6:	da35      	bge.n	8000334 <__aeabi_dmul+0x164>
 80002c8:	340c      	adds	r4, #12
 80002ca:	dc1b      	bgt.n	8000304 <__aeabi_dmul+0x134>
 80002cc:	f104 0414 	add.w	r4, r4, #20
 80002d0:	f1c4 0520 	rsb	r5, r4, #32
 80002d4:	fa00 f305 	lsl.w	r3, r0, r5
 80002d8:	fa20 f004 	lsr.w	r0, r0, r4
 80002dc:	fa01 f205 	lsl.w	r2, r1, r5
 80002e0:	ea40 0002 	orr.w	r0, r0, r2
 80002e4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80002e8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80002ec:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002f0:	fa21 f604 	lsr.w	r6, r1, r4
 80002f4:	eb42 0106 	adc.w	r1, r2, r6
 80002f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002fc:	bf08      	it	eq
 80002fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000302:	bd70      	pop	{r4, r5, r6, pc}
 8000304:	f1c4 040c 	rsb	r4, r4, #12
 8000308:	f1c4 0520 	rsb	r5, r4, #32
 800030c:	fa00 f304 	lsl.w	r3, r0, r4
 8000310:	fa20 f005 	lsr.w	r0, r0, r5
 8000314:	fa01 f204 	lsl.w	r2, r1, r4
 8000318:	ea40 0002 	orr.w	r0, r0, r2
 800031c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000320:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000324:	f141 0100 	adc.w	r1, r1, #0
 8000328:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800032c:	bf08      	it	eq
 800032e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000332:	bd70      	pop	{r4, r5, r6, pc}
 8000334:	f1c4 0520 	rsb	r5, r4, #32
 8000338:	fa00 f205 	lsl.w	r2, r0, r5
 800033c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000340:	fa20 f304 	lsr.w	r3, r0, r4
 8000344:	fa01 f205 	lsl.w	r2, r1, r5
 8000348:	ea43 0302 	orr.w	r3, r3, r2
 800034c:	fa21 f004 	lsr.w	r0, r1, r4
 8000350:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000354:	fa21 f204 	lsr.w	r2, r1, r4
 8000358:	ea20 0002 	bic.w	r0, r0, r2
 800035c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000360:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000364:	bf08      	it	eq
 8000366:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800036a:	bd70      	pop	{r4, r5, r6, pc}
 800036c:	f094 0f00 	teq	r4, #0
 8000370:	d10f      	bne.n	8000392 <__aeabi_dmul+0x1c2>
 8000372:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000376:	0040      	lsls	r0, r0, #1
 8000378:	eb41 0101 	adc.w	r1, r1, r1
 800037c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000380:	bf08      	it	eq
 8000382:	3c01      	subeq	r4, #1
 8000384:	d0f7      	beq.n	8000376 <__aeabi_dmul+0x1a6>
 8000386:	ea41 0106 	orr.w	r1, r1, r6
 800038a:	f095 0f00 	teq	r5, #0
 800038e:	bf18      	it	ne
 8000390:	4770      	bxne	lr
 8000392:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000396:	0052      	lsls	r2, r2, #1
 8000398:	eb43 0303 	adc.w	r3, r3, r3
 800039c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80003a0:	bf08      	it	eq
 80003a2:	3d01      	subeq	r5, #1
 80003a4:	d0f7      	beq.n	8000396 <__aeabi_dmul+0x1c6>
 80003a6:	ea43 0306 	orr.w	r3, r3, r6
 80003aa:	4770      	bx	lr
 80003ac:	ea94 0f0c 	teq	r4, ip
 80003b0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80003b4:	bf18      	it	ne
 80003b6:	ea95 0f0c 	teqne	r5, ip
 80003ba:	d00c      	beq.n	80003d6 <__aeabi_dmul+0x206>
 80003bc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003c0:	bf18      	it	ne
 80003c2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003c6:	d1d1      	bne.n	800036c <__aeabi_dmul+0x19c>
 80003c8:	ea81 0103 	eor.w	r1, r1, r3
 80003cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003d0:	f04f 0000 	mov.w	r0, #0
 80003d4:	bd70      	pop	{r4, r5, r6, pc}
 80003d6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003da:	bf06      	itte	eq
 80003dc:	4610      	moveq	r0, r2
 80003de:	4619      	moveq	r1, r3
 80003e0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003e4:	d019      	beq.n	800041a <__aeabi_dmul+0x24a>
 80003e6:	ea94 0f0c 	teq	r4, ip
 80003ea:	d102      	bne.n	80003f2 <__aeabi_dmul+0x222>
 80003ec:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80003f0:	d113      	bne.n	800041a <__aeabi_dmul+0x24a>
 80003f2:	ea95 0f0c 	teq	r5, ip
 80003f6:	d105      	bne.n	8000404 <__aeabi_dmul+0x234>
 80003f8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80003fc:	bf1c      	itt	ne
 80003fe:	4610      	movne	r0, r2
 8000400:	4619      	movne	r1, r3
 8000402:	d10a      	bne.n	800041a <__aeabi_dmul+0x24a>
 8000404:	ea81 0103 	eor.w	r1, r1, r3
 8000408:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800040c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000410:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000414:	f04f 0000 	mov.w	r0, #0
 8000418:	bd70      	pop	{r4, r5, r6, pc}
 800041a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800041e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000422:	bd70      	pop	{r4, r5, r6, pc}

08000424 <__aeabi_drsub>:
 8000424:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000428:	e002      	b.n	8000430 <__adddf3>
 800042a:	bf00      	nop

0800042c <__aeabi_dsub>:
 800042c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000430 <__adddf3>:
 8000430:	b530      	push	{r4, r5, lr}
 8000432:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000436:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800043a:	ea94 0f05 	teq	r4, r5
 800043e:	bf08      	it	eq
 8000440:	ea90 0f02 	teqeq	r0, r2
 8000444:	bf1f      	itttt	ne
 8000446:	ea54 0c00 	orrsne.w	ip, r4, r0
 800044a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800044e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000452:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000456:	f000 80e2 	beq.w	800061e <__adddf3+0x1ee>
 800045a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800045e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000462:	bfb8      	it	lt
 8000464:	426d      	neglt	r5, r5
 8000466:	dd0c      	ble.n	8000482 <__adddf3+0x52>
 8000468:	442c      	add	r4, r5
 800046a:	ea80 0202 	eor.w	r2, r0, r2
 800046e:	ea81 0303 	eor.w	r3, r1, r3
 8000472:	ea82 0000 	eor.w	r0, r2, r0
 8000476:	ea83 0101 	eor.w	r1, r3, r1
 800047a:	ea80 0202 	eor.w	r2, r0, r2
 800047e:	ea81 0303 	eor.w	r3, r1, r3
 8000482:	2d36      	cmp	r5, #54	; 0x36
 8000484:	bf88      	it	hi
 8000486:	bd30      	pophi	{r4, r5, pc}
 8000488:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800048c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000490:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000494:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000498:	d002      	beq.n	80004a0 <__adddf3+0x70>
 800049a:	4240      	negs	r0, r0
 800049c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004a0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80004a4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80004a8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80004ac:	d002      	beq.n	80004b4 <__adddf3+0x84>
 80004ae:	4252      	negs	r2, r2
 80004b0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80004b4:	ea94 0f05 	teq	r4, r5
 80004b8:	f000 80a7 	beq.w	800060a <__adddf3+0x1da>
 80004bc:	f1a4 0401 	sub.w	r4, r4, #1
 80004c0:	f1d5 0e20 	rsbs	lr, r5, #32
 80004c4:	db0d      	blt.n	80004e2 <__adddf3+0xb2>
 80004c6:	fa02 fc0e 	lsl.w	ip, r2, lr
 80004ca:	fa22 f205 	lsr.w	r2, r2, r5
 80004ce:	1880      	adds	r0, r0, r2
 80004d0:	f141 0100 	adc.w	r1, r1, #0
 80004d4:	fa03 f20e 	lsl.w	r2, r3, lr
 80004d8:	1880      	adds	r0, r0, r2
 80004da:	fa43 f305 	asr.w	r3, r3, r5
 80004de:	4159      	adcs	r1, r3
 80004e0:	e00e      	b.n	8000500 <__adddf3+0xd0>
 80004e2:	f1a5 0520 	sub.w	r5, r5, #32
 80004e6:	f10e 0e20 	add.w	lr, lr, #32
 80004ea:	2a01      	cmp	r2, #1
 80004ec:	fa03 fc0e 	lsl.w	ip, r3, lr
 80004f0:	bf28      	it	cs
 80004f2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80004f6:	fa43 f305 	asr.w	r3, r3, r5
 80004fa:	18c0      	adds	r0, r0, r3
 80004fc:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000500:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000504:	d507      	bpl.n	8000516 <__adddf3+0xe6>
 8000506:	f04f 0e00 	mov.w	lr, #0
 800050a:	f1dc 0c00 	rsbs	ip, ip, #0
 800050e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000512:	eb6e 0101 	sbc.w	r1, lr, r1
 8000516:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800051a:	d31b      	bcc.n	8000554 <__adddf3+0x124>
 800051c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000520:	d30c      	bcc.n	800053c <__adddf3+0x10c>
 8000522:	0849      	lsrs	r1, r1, #1
 8000524:	ea5f 0030 	movs.w	r0, r0, rrx
 8000528:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800052c:	f104 0401 	add.w	r4, r4, #1
 8000530:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000534:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000538:	f080 809a 	bcs.w	8000670 <__adddf3+0x240>
 800053c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000540:	bf08      	it	eq
 8000542:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000546:	f150 0000 	adcs.w	r0, r0, #0
 800054a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800054e:	ea41 0105 	orr.w	r1, r1, r5
 8000552:	bd30      	pop	{r4, r5, pc}
 8000554:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000558:	4140      	adcs	r0, r0
 800055a:	eb41 0101 	adc.w	r1, r1, r1
 800055e:	3c01      	subs	r4, #1
 8000560:	bf28      	it	cs
 8000562:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000566:	d2e9      	bcs.n	800053c <__adddf3+0x10c>
 8000568:	f091 0f00 	teq	r1, #0
 800056c:	bf04      	itt	eq
 800056e:	4601      	moveq	r1, r0
 8000570:	2000      	moveq	r0, #0
 8000572:	fab1 f381 	clz	r3, r1
 8000576:	bf08      	it	eq
 8000578:	3320      	addeq	r3, #32
 800057a:	f1a3 030b 	sub.w	r3, r3, #11
 800057e:	f1b3 0220 	subs.w	r2, r3, #32
 8000582:	da0c      	bge.n	800059e <__adddf3+0x16e>
 8000584:	320c      	adds	r2, #12
 8000586:	dd08      	ble.n	800059a <__adddf3+0x16a>
 8000588:	f102 0c14 	add.w	ip, r2, #20
 800058c:	f1c2 020c 	rsb	r2, r2, #12
 8000590:	fa01 f00c 	lsl.w	r0, r1, ip
 8000594:	fa21 f102 	lsr.w	r1, r1, r2
 8000598:	e00c      	b.n	80005b4 <__adddf3+0x184>
 800059a:	f102 0214 	add.w	r2, r2, #20
 800059e:	bfd8      	it	le
 80005a0:	f1c2 0c20 	rsble	ip, r2, #32
 80005a4:	fa01 f102 	lsl.w	r1, r1, r2
 80005a8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80005ac:	bfdc      	itt	le
 80005ae:	ea41 010c 	orrle.w	r1, r1, ip
 80005b2:	4090      	lslle	r0, r2
 80005b4:	1ae4      	subs	r4, r4, r3
 80005b6:	bfa2      	ittt	ge
 80005b8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80005bc:	4329      	orrge	r1, r5
 80005be:	bd30      	popge	{r4, r5, pc}
 80005c0:	ea6f 0404 	mvn.w	r4, r4
 80005c4:	3c1f      	subs	r4, #31
 80005c6:	da1c      	bge.n	8000602 <__adddf3+0x1d2>
 80005c8:	340c      	adds	r4, #12
 80005ca:	dc0e      	bgt.n	80005ea <__adddf3+0x1ba>
 80005cc:	f104 0414 	add.w	r4, r4, #20
 80005d0:	f1c4 0220 	rsb	r2, r4, #32
 80005d4:	fa20 f004 	lsr.w	r0, r0, r4
 80005d8:	fa01 f302 	lsl.w	r3, r1, r2
 80005dc:	ea40 0003 	orr.w	r0, r0, r3
 80005e0:	fa21 f304 	lsr.w	r3, r1, r4
 80005e4:	ea45 0103 	orr.w	r1, r5, r3
 80005e8:	bd30      	pop	{r4, r5, pc}
 80005ea:	f1c4 040c 	rsb	r4, r4, #12
 80005ee:	f1c4 0220 	rsb	r2, r4, #32
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 f304 	lsl.w	r3, r1, r4
 80005fa:	ea40 0003 	orr.w	r0, r0, r3
 80005fe:	4629      	mov	r1, r5
 8000600:	bd30      	pop	{r4, r5, pc}
 8000602:	fa21 f004 	lsr.w	r0, r1, r4
 8000606:	4629      	mov	r1, r5
 8000608:	bd30      	pop	{r4, r5, pc}
 800060a:	f094 0f00 	teq	r4, #0
 800060e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000612:	bf06      	itte	eq
 8000614:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000618:	3401      	addeq	r4, #1
 800061a:	3d01      	subne	r5, #1
 800061c:	e74e      	b.n	80004bc <__adddf3+0x8c>
 800061e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000622:	bf18      	it	ne
 8000624:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000628:	d029      	beq.n	800067e <__adddf3+0x24e>
 800062a:	ea94 0f05 	teq	r4, r5
 800062e:	bf08      	it	eq
 8000630:	ea90 0f02 	teqeq	r0, r2
 8000634:	d005      	beq.n	8000642 <__adddf3+0x212>
 8000636:	ea54 0c00 	orrs.w	ip, r4, r0
 800063a:	bf04      	itt	eq
 800063c:	4619      	moveq	r1, r3
 800063e:	4610      	moveq	r0, r2
 8000640:	bd30      	pop	{r4, r5, pc}
 8000642:	ea91 0f03 	teq	r1, r3
 8000646:	bf1e      	ittt	ne
 8000648:	2100      	movne	r1, #0
 800064a:	2000      	movne	r0, #0
 800064c:	bd30      	popne	{r4, r5, pc}
 800064e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000652:	d105      	bne.n	8000660 <__adddf3+0x230>
 8000654:	0040      	lsls	r0, r0, #1
 8000656:	4149      	adcs	r1, r1
 8000658:	bf28      	it	cs
 800065a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800065e:	bd30      	pop	{r4, r5, pc}
 8000660:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000664:	bf3c      	itt	cc
 8000666:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800066a:	bd30      	popcc	{r4, r5, pc}
 800066c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000670:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000674:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000678:	f04f 0000 	mov.w	r0, #0
 800067c:	bd30      	pop	{r4, r5, pc}
 800067e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000682:	bf1a      	itte	ne
 8000684:	4619      	movne	r1, r3
 8000686:	4610      	movne	r0, r2
 8000688:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800068c:	bf1c      	itt	ne
 800068e:	460b      	movne	r3, r1
 8000690:	4602      	movne	r2, r0
 8000692:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000696:	bf06      	itte	eq
 8000698:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800069c:	ea91 0f03 	teqeq	r1, r3
 80006a0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80006a4:	bd30      	pop	{r4, r5, pc}
 80006a6:	bf00      	nop

080006a8 <__aeabi_ui2d>:
 80006a8:	f090 0f00 	teq	r0, #0
 80006ac:	bf04      	itt	eq
 80006ae:	2100      	moveq	r1, #0
 80006b0:	4770      	bxeq	lr
 80006b2:	b530      	push	{r4, r5, lr}
 80006b4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006b8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006bc:	f04f 0500 	mov.w	r5, #0
 80006c0:	f04f 0100 	mov.w	r1, #0
 80006c4:	e750      	b.n	8000568 <__adddf3+0x138>
 80006c6:	bf00      	nop

080006c8 <__aeabi_i2d>:
 80006c8:	f090 0f00 	teq	r0, #0
 80006cc:	bf04      	itt	eq
 80006ce:	2100      	moveq	r1, #0
 80006d0:	4770      	bxeq	lr
 80006d2:	b530      	push	{r4, r5, lr}
 80006d4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006d8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006dc:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80006e0:	bf48      	it	mi
 80006e2:	4240      	negmi	r0, r0
 80006e4:	f04f 0100 	mov.w	r1, #0
 80006e8:	e73e      	b.n	8000568 <__adddf3+0x138>
 80006ea:	bf00      	nop

080006ec <__aeabi_f2d>:
 80006ec:	0042      	lsls	r2, r0, #1
 80006ee:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80006f2:	ea4f 0131 	mov.w	r1, r1, rrx
 80006f6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80006fa:	bf1f      	itttt	ne
 80006fc:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000700:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000704:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000708:	4770      	bxne	lr
 800070a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800070e:	bf08      	it	eq
 8000710:	4770      	bxeq	lr
 8000712:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000716:	bf04      	itt	eq
 8000718:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800071c:	4770      	bxeq	lr
 800071e:	b530      	push	{r4, r5, lr}
 8000720:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000724:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000728:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800072c:	e71c      	b.n	8000568 <__adddf3+0x138>
 800072e:	bf00      	nop

08000730 <__aeabi_ul2d>:
 8000730:	ea50 0201 	orrs.w	r2, r0, r1
 8000734:	bf08      	it	eq
 8000736:	4770      	bxeq	lr
 8000738:	b530      	push	{r4, r5, lr}
 800073a:	f04f 0500 	mov.w	r5, #0
 800073e:	e00a      	b.n	8000756 <__aeabi_l2d+0x16>

08000740 <__aeabi_l2d>:
 8000740:	ea50 0201 	orrs.w	r2, r0, r1
 8000744:	bf08      	it	eq
 8000746:	4770      	bxeq	lr
 8000748:	b530      	push	{r4, r5, lr}
 800074a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800074e:	d502      	bpl.n	8000756 <__aeabi_l2d+0x16>
 8000750:	4240      	negs	r0, r0
 8000752:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000756:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800075a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800075e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000762:	f43f aed8 	beq.w	8000516 <__adddf3+0xe6>
 8000766:	f04f 0203 	mov.w	r2, #3
 800076a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800076e:	bf18      	it	ne
 8000770:	3203      	addne	r2, #3
 8000772:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000776:	bf18      	it	ne
 8000778:	3203      	addne	r2, #3
 800077a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800077e:	f1c2 0320 	rsb	r3, r2, #32
 8000782:	fa00 fc03 	lsl.w	ip, r0, r3
 8000786:	fa20 f002 	lsr.w	r0, r0, r2
 800078a:	fa01 fe03 	lsl.w	lr, r1, r3
 800078e:	ea40 000e 	orr.w	r0, r0, lr
 8000792:	fa21 f102 	lsr.w	r1, r1, r2
 8000796:	4414      	add	r4, r2
 8000798:	e6bd      	b.n	8000516 <__adddf3+0xe6>
 800079a:	bf00      	nop

0800079c <__gedf2>:
 800079c:	f04f 3cff 	mov.w	ip, #4294967295
 80007a0:	e006      	b.n	80007b0 <__cmpdf2+0x4>
 80007a2:	bf00      	nop

080007a4 <__ledf2>:
 80007a4:	f04f 0c01 	mov.w	ip, #1
 80007a8:	e002      	b.n	80007b0 <__cmpdf2+0x4>
 80007aa:	bf00      	nop

080007ac <__cmpdf2>:
 80007ac:	f04f 0c01 	mov.w	ip, #1
 80007b0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80007b4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80007b8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80007bc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80007c0:	bf18      	it	ne
 80007c2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80007c6:	d01b      	beq.n	8000800 <__cmpdf2+0x54>
 80007c8:	b001      	add	sp, #4
 80007ca:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80007ce:	bf0c      	ite	eq
 80007d0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80007d4:	ea91 0f03 	teqne	r1, r3
 80007d8:	bf02      	ittt	eq
 80007da:	ea90 0f02 	teqeq	r0, r2
 80007de:	2000      	moveq	r0, #0
 80007e0:	4770      	bxeq	lr
 80007e2:	f110 0f00 	cmn.w	r0, #0
 80007e6:	ea91 0f03 	teq	r1, r3
 80007ea:	bf58      	it	pl
 80007ec:	4299      	cmppl	r1, r3
 80007ee:	bf08      	it	eq
 80007f0:	4290      	cmpeq	r0, r2
 80007f2:	bf2c      	ite	cs
 80007f4:	17d8      	asrcs	r0, r3, #31
 80007f6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80007fa:	f040 0001 	orr.w	r0, r0, #1
 80007fe:	4770      	bx	lr
 8000800:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000804:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000808:	d102      	bne.n	8000810 <__cmpdf2+0x64>
 800080a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800080e:	d107      	bne.n	8000820 <__cmpdf2+0x74>
 8000810:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000814:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000818:	d1d6      	bne.n	80007c8 <__cmpdf2+0x1c>
 800081a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800081e:	d0d3      	beq.n	80007c8 <__cmpdf2+0x1c>
 8000820:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000824:	4770      	bx	lr
 8000826:	bf00      	nop

08000828 <__aeabi_cdrcmple>:
 8000828:	4684      	mov	ip, r0
 800082a:	4610      	mov	r0, r2
 800082c:	4662      	mov	r2, ip
 800082e:	468c      	mov	ip, r1
 8000830:	4619      	mov	r1, r3
 8000832:	4663      	mov	r3, ip
 8000834:	e000      	b.n	8000838 <__aeabi_cdcmpeq>
 8000836:	bf00      	nop

08000838 <__aeabi_cdcmpeq>:
 8000838:	b501      	push	{r0, lr}
 800083a:	f7ff ffb7 	bl	80007ac <__cmpdf2>
 800083e:	2800      	cmp	r0, #0
 8000840:	bf48      	it	mi
 8000842:	f110 0f00 	cmnmi.w	r0, #0
 8000846:	bd01      	pop	{r0, pc}

08000848 <__aeabi_dcmpeq>:
 8000848:	f84d ed08 	str.w	lr, [sp, #-8]!
 800084c:	f7ff fff4 	bl	8000838 <__aeabi_cdcmpeq>
 8000850:	bf0c      	ite	eq
 8000852:	2001      	moveq	r0, #1
 8000854:	2000      	movne	r0, #0
 8000856:	f85d fb08 	ldr.w	pc, [sp], #8
 800085a:	bf00      	nop

0800085c <__aeabi_dcmplt>:
 800085c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000860:	f7ff ffea 	bl	8000838 <__aeabi_cdcmpeq>
 8000864:	bf34      	ite	cc
 8000866:	2001      	movcc	r0, #1
 8000868:	2000      	movcs	r0, #0
 800086a:	f85d fb08 	ldr.w	pc, [sp], #8
 800086e:	bf00      	nop

08000870 <__aeabi_dcmple>:
 8000870:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000874:	f7ff ffe0 	bl	8000838 <__aeabi_cdcmpeq>
 8000878:	bf94      	ite	ls
 800087a:	2001      	movls	r0, #1
 800087c:	2000      	movhi	r0, #0
 800087e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000882:	bf00      	nop

08000884 <__aeabi_dcmpge>:
 8000884:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000888:	f7ff ffce 	bl	8000828 <__aeabi_cdrcmple>
 800088c:	bf94      	ite	ls
 800088e:	2001      	movls	r0, #1
 8000890:	2000      	movhi	r0, #0
 8000892:	f85d fb08 	ldr.w	pc, [sp], #8
 8000896:	bf00      	nop

08000898 <__aeabi_dcmpgt>:
 8000898:	f84d ed08 	str.w	lr, [sp, #-8]!
 800089c:	f7ff ffc4 	bl	8000828 <__aeabi_cdrcmple>
 80008a0:	bf34      	ite	cc
 80008a2:	2001      	movcc	r0, #1
 80008a4:	2000      	movcs	r0, #0
 80008a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80008aa:	bf00      	nop

080008ac <__aeabi_ldivmod>:
 80008ac:	b97b      	cbnz	r3, 80008ce <__aeabi_ldivmod+0x22>
 80008ae:	b972      	cbnz	r2, 80008ce <__aeabi_ldivmod+0x22>
 80008b0:	2900      	cmp	r1, #0
 80008b2:	bfbe      	ittt	lt
 80008b4:	2000      	movlt	r0, #0
 80008b6:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 80008ba:	e006      	blt.n	80008ca <__aeabi_ldivmod+0x1e>
 80008bc:	bf08      	it	eq
 80008be:	2800      	cmpeq	r0, #0
 80008c0:	bf1c      	itt	ne
 80008c2:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 80008c6:	f04f 30ff 	movne.w	r0, #4294967295
 80008ca:	f000 b9f5 	b.w	8000cb8 <__aeabi_idiv0>
 80008ce:	f1ad 0c08 	sub.w	ip, sp, #8
 80008d2:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80008d6:	2900      	cmp	r1, #0
 80008d8:	db09      	blt.n	80008ee <__aeabi_ldivmod+0x42>
 80008da:	2b00      	cmp	r3, #0
 80008dc:	db1a      	blt.n	8000914 <__aeabi_ldivmod+0x68>
 80008de:	f000 f883 	bl	80009e8 <__udivmoddi4>
 80008e2:	f8dd e004 	ldr.w	lr, [sp, #4]
 80008e6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80008ea:	b004      	add	sp, #16
 80008ec:	4770      	bx	lr
 80008ee:	4240      	negs	r0, r0
 80008f0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	db1b      	blt.n	8000930 <__aeabi_ldivmod+0x84>
 80008f8:	f000 f876 	bl	80009e8 <__udivmoddi4>
 80008fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000900:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000904:	b004      	add	sp, #16
 8000906:	4240      	negs	r0, r0
 8000908:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800090c:	4252      	negs	r2, r2
 800090e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000912:	4770      	bx	lr
 8000914:	4252      	negs	r2, r2
 8000916:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800091a:	f000 f865 	bl	80009e8 <__udivmoddi4>
 800091e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000922:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000926:	b004      	add	sp, #16
 8000928:	4240      	negs	r0, r0
 800092a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800092e:	4770      	bx	lr
 8000930:	4252      	negs	r2, r2
 8000932:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000936:	f000 f857 	bl	80009e8 <__udivmoddi4>
 800093a:	f8dd e004 	ldr.w	lr, [sp, #4]
 800093e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000942:	b004      	add	sp, #16
 8000944:	4252      	negs	r2, r2
 8000946:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800094a:	4770      	bx	lr

0800094c <__aeabi_uldivmod>:
 800094c:	b953      	cbnz	r3, 8000964 <__aeabi_uldivmod+0x18>
 800094e:	b94a      	cbnz	r2, 8000964 <__aeabi_uldivmod+0x18>
 8000950:	2900      	cmp	r1, #0
 8000952:	bf08      	it	eq
 8000954:	2800      	cmpeq	r0, #0
 8000956:	bf1c      	itt	ne
 8000958:	f04f 31ff 	movne.w	r1, #4294967295
 800095c:	f04f 30ff 	movne.w	r0, #4294967295
 8000960:	f000 b9aa 	b.w	8000cb8 <__aeabi_idiv0>
 8000964:	f1ad 0c08 	sub.w	ip, sp, #8
 8000968:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800096c:	f000 f83c 	bl	80009e8 <__udivmoddi4>
 8000970:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000974:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000978:	b004      	add	sp, #16
 800097a:	4770      	bx	lr

0800097c <__aeabi_d2lz>:
 800097c:	b538      	push	{r3, r4, r5, lr}
 800097e:	2200      	movs	r2, #0
 8000980:	2300      	movs	r3, #0
 8000982:	4604      	mov	r4, r0
 8000984:	460d      	mov	r5, r1
 8000986:	f7ff ff69 	bl	800085c <__aeabi_dcmplt>
 800098a:	b928      	cbnz	r0, 8000998 <__aeabi_d2lz+0x1c>
 800098c:	4620      	mov	r0, r4
 800098e:	4629      	mov	r1, r5
 8000990:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000994:	f000 b80a 	b.w	80009ac <__aeabi_d2ulz>
 8000998:	4620      	mov	r0, r4
 800099a:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 800099e:	f000 f805 	bl	80009ac <__aeabi_d2ulz>
 80009a2:	4240      	negs	r0, r0
 80009a4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80009a8:	bd38      	pop	{r3, r4, r5, pc}
 80009aa:	bf00      	nop

080009ac <__aeabi_d2ulz>:
 80009ac:	b5d0      	push	{r4, r6, r7, lr}
 80009ae:	4b0c      	ldr	r3, [pc, #48]	; (80009e0 <__aeabi_d2ulz+0x34>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	4606      	mov	r6, r0
 80009b4:	460f      	mov	r7, r1
 80009b6:	f7ff fc0b 	bl	80001d0 <__aeabi_dmul>
 80009ba:	f000 f97f 	bl	8000cbc <__aeabi_d2uiz>
 80009be:	4604      	mov	r4, r0
 80009c0:	f7ff fe72 	bl	80006a8 <__aeabi_ui2d>
 80009c4:	4b07      	ldr	r3, [pc, #28]	; (80009e4 <__aeabi_d2ulz+0x38>)
 80009c6:	2200      	movs	r2, #0
 80009c8:	f7ff fc02 	bl	80001d0 <__aeabi_dmul>
 80009cc:	4602      	mov	r2, r0
 80009ce:	460b      	mov	r3, r1
 80009d0:	4630      	mov	r0, r6
 80009d2:	4639      	mov	r1, r7
 80009d4:	f7ff fd2a 	bl	800042c <__aeabi_dsub>
 80009d8:	f000 f970 	bl	8000cbc <__aeabi_d2uiz>
 80009dc:	4621      	mov	r1, r4
 80009de:	bdd0      	pop	{r4, r6, r7, pc}
 80009e0:	3df00000 	.word	0x3df00000
 80009e4:	41f00000 	.word	0x41f00000

080009e8 <__udivmoddi4>:
 80009e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80009ec:	9d08      	ldr	r5, [sp, #32]
 80009ee:	4604      	mov	r4, r0
 80009f0:	468e      	mov	lr, r1
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	d14d      	bne.n	8000a92 <__udivmoddi4+0xaa>
 80009f6:	428a      	cmp	r2, r1
 80009f8:	4694      	mov	ip, r2
 80009fa:	d969      	bls.n	8000ad0 <__udivmoddi4+0xe8>
 80009fc:	fab2 f282 	clz	r2, r2
 8000a00:	b152      	cbz	r2, 8000a18 <__udivmoddi4+0x30>
 8000a02:	fa01 f302 	lsl.w	r3, r1, r2
 8000a06:	f1c2 0120 	rsb	r1, r2, #32
 8000a0a:	fa20 f101 	lsr.w	r1, r0, r1
 8000a0e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000a12:	ea41 0e03 	orr.w	lr, r1, r3
 8000a16:	4094      	lsls	r4, r2
 8000a18:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000a1c:	0c21      	lsrs	r1, r4, #16
 8000a1e:	fbbe f6f8 	udiv	r6, lr, r8
 8000a22:	fa1f f78c 	uxth.w	r7, ip
 8000a26:	fb08 e316 	mls	r3, r8, r6, lr
 8000a2a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000a2e:	fb06 f107 	mul.w	r1, r6, r7
 8000a32:	4299      	cmp	r1, r3
 8000a34:	d90a      	bls.n	8000a4c <__udivmoddi4+0x64>
 8000a36:	eb1c 0303 	adds.w	r3, ip, r3
 8000a3a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000a3e:	f080 811f 	bcs.w	8000c80 <__udivmoddi4+0x298>
 8000a42:	4299      	cmp	r1, r3
 8000a44:	f240 811c 	bls.w	8000c80 <__udivmoddi4+0x298>
 8000a48:	3e02      	subs	r6, #2
 8000a4a:	4463      	add	r3, ip
 8000a4c:	1a5b      	subs	r3, r3, r1
 8000a4e:	b2a4      	uxth	r4, r4
 8000a50:	fbb3 f0f8 	udiv	r0, r3, r8
 8000a54:	fb08 3310 	mls	r3, r8, r0, r3
 8000a58:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000a5c:	fb00 f707 	mul.w	r7, r0, r7
 8000a60:	42a7      	cmp	r7, r4
 8000a62:	d90a      	bls.n	8000a7a <__udivmoddi4+0x92>
 8000a64:	eb1c 0404 	adds.w	r4, ip, r4
 8000a68:	f100 33ff 	add.w	r3, r0, #4294967295
 8000a6c:	f080 810a 	bcs.w	8000c84 <__udivmoddi4+0x29c>
 8000a70:	42a7      	cmp	r7, r4
 8000a72:	f240 8107 	bls.w	8000c84 <__udivmoddi4+0x29c>
 8000a76:	4464      	add	r4, ip
 8000a78:	3802      	subs	r0, #2
 8000a7a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000a7e:	1be4      	subs	r4, r4, r7
 8000a80:	2600      	movs	r6, #0
 8000a82:	b11d      	cbz	r5, 8000a8c <__udivmoddi4+0xa4>
 8000a84:	40d4      	lsrs	r4, r2
 8000a86:	2300      	movs	r3, #0
 8000a88:	e9c5 4300 	strd	r4, r3, [r5]
 8000a8c:	4631      	mov	r1, r6
 8000a8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a92:	428b      	cmp	r3, r1
 8000a94:	d909      	bls.n	8000aaa <__udivmoddi4+0xc2>
 8000a96:	2d00      	cmp	r5, #0
 8000a98:	f000 80ef 	beq.w	8000c7a <__udivmoddi4+0x292>
 8000a9c:	2600      	movs	r6, #0
 8000a9e:	e9c5 0100 	strd	r0, r1, [r5]
 8000aa2:	4630      	mov	r0, r6
 8000aa4:	4631      	mov	r1, r6
 8000aa6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000aaa:	fab3 f683 	clz	r6, r3
 8000aae:	2e00      	cmp	r6, #0
 8000ab0:	d14a      	bne.n	8000b48 <__udivmoddi4+0x160>
 8000ab2:	428b      	cmp	r3, r1
 8000ab4:	d302      	bcc.n	8000abc <__udivmoddi4+0xd4>
 8000ab6:	4282      	cmp	r2, r0
 8000ab8:	f200 80f9 	bhi.w	8000cae <__udivmoddi4+0x2c6>
 8000abc:	1a84      	subs	r4, r0, r2
 8000abe:	eb61 0303 	sbc.w	r3, r1, r3
 8000ac2:	2001      	movs	r0, #1
 8000ac4:	469e      	mov	lr, r3
 8000ac6:	2d00      	cmp	r5, #0
 8000ac8:	d0e0      	beq.n	8000a8c <__udivmoddi4+0xa4>
 8000aca:	e9c5 4e00 	strd	r4, lr, [r5]
 8000ace:	e7dd      	b.n	8000a8c <__udivmoddi4+0xa4>
 8000ad0:	b902      	cbnz	r2, 8000ad4 <__udivmoddi4+0xec>
 8000ad2:	deff      	udf	#255	; 0xff
 8000ad4:	fab2 f282 	clz	r2, r2
 8000ad8:	2a00      	cmp	r2, #0
 8000ada:	f040 8092 	bne.w	8000c02 <__udivmoddi4+0x21a>
 8000ade:	eba1 010c 	sub.w	r1, r1, ip
 8000ae2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ae6:	fa1f fe8c 	uxth.w	lr, ip
 8000aea:	2601      	movs	r6, #1
 8000aec:	0c20      	lsrs	r0, r4, #16
 8000aee:	fbb1 f3f7 	udiv	r3, r1, r7
 8000af2:	fb07 1113 	mls	r1, r7, r3, r1
 8000af6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000afa:	fb0e f003 	mul.w	r0, lr, r3
 8000afe:	4288      	cmp	r0, r1
 8000b00:	d908      	bls.n	8000b14 <__udivmoddi4+0x12c>
 8000b02:	eb1c 0101 	adds.w	r1, ip, r1
 8000b06:	f103 38ff 	add.w	r8, r3, #4294967295
 8000b0a:	d202      	bcs.n	8000b12 <__udivmoddi4+0x12a>
 8000b0c:	4288      	cmp	r0, r1
 8000b0e:	f200 80cb 	bhi.w	8000ca8 <__udivmoddi4+0x2c0>
 8000b12:	4643      	mov	r3, r8
 8000b14:	1a09      	subs	r1, r1, r0
 8000b16:	b2a4      	uxth	r4, r4
 8000b18:	fbb1 f0f7 	udiv	r0, r1, r7
 8000b1c:	fb07 1110 	mls	r1, r7, r0, r1
 8000b20:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000b24:	fb0e fe00 	mul.w	lr, lr, r0
 8000b28:	45a6      	cmp	lr, r4
 8000b2a:	d908      	bls.n	8000b3e <__udivmoddi4+0x156>
 8000b2c:	eb1c 0404 	adds.w	r4, ip, r4
 8000b30:	f100 31ff 	add.w	r1, r0, #4294967295
 8000b34:	d202      	bcs.n	8000b3c <__udivmoddi4+0x154>
 8000b36:	45a6      	cmp	lr, r4
 8000b38:	f200 80bb 	bhi.w	8000cb2 <__udivmoddi4+0x2ca>
 8000b3c:	4608      	mov	r0, r1
 8000b3e:	eba4 040e 	sub.w	r4, r4, lr
 8000b42:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000b46:	e79c      	b.n	8000a82 <__udivmoddi4+0x9a>
 8000b48:	f1c6 0720 	rsb	r7, r6, #32
 8000b4c:	40b3      	lsls	r3, r6
 8000b4e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000b52:	ea4c 0c03 	orr.w	ip, ip, r3
 8000b56:	fa20 f407 	lsr.w	r4, r0, r7
 8000b5a:	fa01 f306 	lsl.w	r3, r1, r6
 8000b5e:	431c      	orrs	r4, r3
 8000b60:	40f9      	lsrs	r1, r7
 8000b62:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000b66:	fa00 f306 	lsl.w	r3, r0, r6
 8000b6a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000b6e:	0c20      	lsrs	r0, r4, #16
 8000b70:	fa1f fe8c 	uxth.w	lr, ip
 8000b74:	fb09 1118 	mls	r1, r9, r8, r1
 8000b78:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000b7c:	fb08 f00e 	mul.w	r0, r8, lr
 8000b80:	4288      	cmp	r0, r1
 8000b82:	fa02 f206 	lsl.w	r2, r2, r6
 8000b86:	d90b      	bls.n	8000ba0 <__udivmoddi4+0x1b8>
 8000b88:	eb1c 0101 	adds.w	r1, ip, r1
 8000b8c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000b90:	f080 8088 	bcs.w	8000ca4 <__udivmoddi4+0x2bc>
 8000b94:	4288      	cmp	r0, r1
 8000b96:	f240 8085 	bls.w	8000ca4 <__udivmoddi4+0x2bc>
 8000b9a:	f1a8 0802 	sub.w	r8, r8, #2
 8000b9e:	4461      	add	r1, ip
 8000ba0:	1a09      	subs	r1, r1, r0
 8000ba2:	b2a4      	uxth	r4, r4
 8000ba4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000ba8:	fb09 1110 	mls	r1, r9, r0, r1
 8000bac:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000bb0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000bb4:	458e      	cmp	lr, r1
 8000bb6:	d908      	bls.n	8000bca <__udivmoddi4+0x1e2>
 8000bb8:	eb1c 0101 	adds.w	r1, ip, r1
 8000bbc:	f100 34ff 	add.w	r4, r0, #4294967295
 8000bc0:	d26c      	bcs.n	8000c9c <__udivmoddi4+0x2b4>
 8000bc2:	458e      	cmp	lr, r1
 8000bc4:	d96a      	bls.n	8000c9c <__udivmoddi4+0x2b4>
 8000bc6:	3802      	subs	r0, #2
 8000bc8:	4461      	add	r1, ip
 8000bca:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000bce:	fba0 9402 	umull	r9, r4, r0, r2
 8000bd2:	eba1 010e 	sub.w	r1, r1, lr
 8000bd6:	42a1      	cmp	r1, r4
 8000bd8:	46c8      	mov	r8, r9
 8000bda:	46a6      	mov	lr, r4
 8000bdc:	d356      	bcc.n	8000c8c <__udivmoddi4+0x2a4>
 8000bde:	d053      	beq.n	8000c88 <__udivmoddi4+0x2a0>
 8000be0:	b15d      	cbz	r5, 8000bfa <__udivmoddi4+0x212>
 8000be2:	ebb3 0208 	subs.w	r2, r3, r8
 8000be6:	eb61 010e 	sbc.w	r1, r1, lr
 8000bea:	fa01 f707 	lsl.w	r7, r1, r7
 8000bee:	fa22 f306 	lsr.w	r3, r2, r6
 8000bf2:	40f1      	lsrs	r1, r6
 8000bf4:	431f      	orrs	r7, r3
 8000bf6:	e9c5 7100 	strd	r7, r1, [r5]
 8000bfa:	2600      	movs	r6, #0
 8000bfc:	4631      	mov	r1, r6
 8000bfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c02:	f1c2 0320 	rsb	r3, r2, #32
 8000c06:	40d8      	lsrs	r0, r3
 8000c08:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c0c:	fa21 f303 	lsr.w	r3, r1, r3
 8000c10:	4091      	lsls	r1, r2
 8000c12:	4301      	orrs	r1, r0
 8000c14:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c18:	fa1f fe8c 	uxth.w	lr, ip
 8000c1c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000c20:	fb07 3610 	mls	r6, r7, r0, r3
 8000c24:	0c0b      	lsrs	r3, r1, #16
 8000c26:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000c2a:	fb00 f60e 	mul.w	r6, r0, lr
 8000c2e:	429e      	cmp	r6, r3
 8000c30:	fa04 f402 	lsl.w	r4, r4, r2
 8000c34:	d908      	bls.n	8000c48 <__udivmoddi4+0x260>
 8000c36:	eb1c 0303 	adds.w	r3, ip, r3
 8000c3a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000c3e:	d22f      	bcs.n	8000ca0 <__udivmoddi4+0x2b8>
 8000c40:	429e      	cmp	r6, r3
 8000c42:	d92d      	bls.n	8000ca0 <__udivmoddi4+0x2b8>
 8000c44:	3802      	subs	r0, #2
 8000c46:	4463      	add	r3, ip
 8000c48:	1b9b      	subs	r3, r3, r6
 8000c4a:	b289      	uxth	r1, r1
 8000c4c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000c50:	fb07 3316 	mls	r3, r7, r6, r3
 8000c54:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c58:	fb06 f30e 	mul.w	r3, r6, lr
 8000c5c:	428b      	cmp	r3, r1
 8000c5e:	d908      	bls.n	8000c72 <__udivmoddi4+0x28a>
 8000c60:	eb1c 0101 	adds.w	r1, ip, r1
 8000c64:	f106 38ff 	add.w	r8, r6, #4294967295
 8000c68:	d216      	bcs.n	8000c98 <__udivmoddi4+0x2b0>
 8000c6a:	428b      	cmp	r3, r1
 8000c6c:	d914      	bls.n	8000c98 <__udivmoddi4+0x2b0>
 8000c6e:	3e02      	subs	r6, #2
 8000c70:	4461      	add	r1, ip
 8000c72:	1ac9      	subs	r1, r1, r3
 8000c74:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000c78:	e738      	b.n	8000aec <__udivmoddi4+0x104>
 8000c7a:	462e      	mov	r6, r5
 8000c7c:	4628      	mov	r0, r5
 8000c7e:	e705      	b.n	8000a8c <__udivmoddi4+0xa4>
 8000c80:	4606      	mov	r6, r0
 8000c82:	e6e3      	b.n	8000a4c <__udivmoddi4+0x64>
 8000c84:	4618      	mov	r0, r3
 8000c86:	e6f8      	b.n	8000a7a <__udivmoddi4+0x92>
 8000c88:	454b      	cmp	r3, r9
 8000c8a:	d2a9      	bcs.n	8000be0 <__udivmoddi4+0x1f8>
 8000c8c:	ebb9 0802 	subs.w	r8, r9, r2
 8000c90:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000c94:	3801      	subs	r0, #1
 8000c96:	e7a3      	b.n	8000be0 <__udivmoddi4+0x1f8>
 8000c98:	4646      	mov	r6, r8
 8000c9a:	e7ea      	b.n	8000c72 <__udivmoddi4+0x28a>
 8000c9c:	4620      	mov	r0, r4
 8000c9e:	e794      	b.n	8000bca <__udivmoddi4+0x1e2>
 8000ca0:	4640      	mov	r0, r8
 8000ca2:	e7d1      	b.n	8000c48 <__udivmoddi4+0x260>
 8000ca4:	46d0      	mov	r8, sl
 8000ca6:	e77b      	b.n	8000ba0 <__udivmoddi4+0x1b8>
 8000ca8:	3b02      	subs	r3, #2
 8000caa:	4461      	add	r1, ip
 8000cac:	e732      	b.n	8000b14 <__udivmoddi4+0x12c>
 8000cae:	4630      	mov	r0, r6
 8000cb0:	e709      	b.n	8000ac6 <__udivmoddi4+0xde>
 8000cb2:	4464      	add	r4, ip
 8000cb4:	3802      	subs	r0, #2
 8000cb6:	e742      	b.n	8000b3e <__udivmoddi4+0x156>

08000cb8 <__aeabi_idiv0>:
 8000cb8:	4770      	bx	lr
 8000cba:	bf00      	nop

08000cbc <__aeabi_d2uiz>:
 8000cbc:	004a      	lsls	r2, r1, #1
 8000cbe:	d211      	bcs.n	8000ce4 <__aeabi_d2uiz+0x28>
 8000cc0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000cc4:	d211      	bcs.n	8000cea <__aeabi_d2uiz+0x2e>
 8000cc6:	d50d      	bpl.n	8000ce4 <__aeabi_d2uiz+0x28>
 8000cc8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ccc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000cd0:	d40e      	bmi.n	8000cf0 <__aeabi_d2uiz+0x34>
 8000cd2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000cd6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000cda:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000cde:	fa23 f002 	lsr.w	r0, r3, r2
 8000ce2:	4770      	bx	lr
 8000ce4:	f04f 0000 	mov.w	r0, #0
 8000ce8:	4770      	bx	lr
 8000cea:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000cee:	d102      	bne.n	8000cf6 <__aeabi_d2uiz+0x3a>
 8000cf0:	f04f 30ff 	mov.w	r0, #4294967295
 8000cf4:	4770      	bx	lr
 8000cf6:	f04f 0000 	mov.w	r0, #0
 8000cfa:	4770      	bx	lr

08000cfc <at_set_command>:
		tx(buffer, length);
	}
	return length;
}

int at_set_command(char *buffer, transmit_t tx, char *cmd, const char* param_format, ...) {
 8000cfc:	b408      	push	{r3}
 8000cfe:	b580      	push	{r7, lr}
 8000d00:	b089      	sub	sp, #36	; 0x24
 8000d02:	af00      	add	r7, sp, #0
 8000d04:	60f8      	str	r0, [r7, #12]
 8000d06:	60b9      	str	r1, [r7, #8]
 8000d08:	607a      	str	r2, [r7, #4]
	va_list parameters;
	int length = 0;
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	61fb      	str	r3, [r7, #28]
	int tmp = 0;
 8000d0e:	2300      	movs	r3, #0
 8000d10:	61bb      	str	r3, [r7, #24]
	if((tmp = sprintf_(buffer, "%s=", cmd)) < 0) {
 8000d12:	687a      	ldr	r2, [r7, #4]
 8000d14:	4924      	ldr	r1, [pc, #144]	; (8000da8 <at_set_command+0xac>)
 8000d16:	68f8      	ldr	r0, [r7, #12]
 8000d18:	f001 fbba 	bl	8002490 <sprintf_>
 8000d1c:	61b8      	str	r0, [r7, #24]
 8000d1e:	69bb      	ldr	r3, [r7, #24]
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	da02      	bge.n	8000d2a <at_set_command+0x2e>
		return AT_CMD_ERROR;
 8000d24:	f04f 33ff 	mov.w	r3, #4294967295
 8000d28:	e037      	b.n	8000d9a <at_set_command+0x9e>
	}
	length += tmp;
 8000d2a:	69fa      	ldr	r2, [r7, #28]
 8000d2c:	69bb      	ldr	r3, [r7, #24]
 8000d2e:	4413      	add	r3, r2
 8000d30:	61fb      	str	r3, [r7, #28]
	tmp = 0;
 8000d32:	2300      	movs	r3, #0
 8000d34:	61bb      	str	r3, [r7, #24]
	va_start(parameters, param_format);
 8000d36:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000d3a:	617b      	str	r3, [r7, #20]
	if((tmp = vsprintf_(buffer+length, param_format, parameters)) < 0) {
 8000d3c:	69fb      	ldr	r3, [r7, #28]
 8000d3e:	68fa      	ldr	r2, [r7, #12]
 8000d40:	4413      	add	r3, r2
 8000d42:	697a      	ldr	r2, [r7, #20]
 8000d44:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8000d46:	4618      	mov	r0, r3
 8000d48:	f001 fb90 	bl	800246c <vsprintf_>
 8000d4c:	61b8      	str	r0, [r7, #24]
 8000d4e:	69bb      	ldr	r3, [r7, #24]
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	da02      	bge.n	8000d5a <at_set_command+0x5e>
		return AT_CMD_ERROR;
 8000d54:	f04f 33ff 	mov.w	r3, #4294967295
 8000d58:	e01f      	b.n	8000d9a <at_set_command+0x9e>
	}
	va_end(parameters);
	length += tmp;
 8000d5a:	69fa      	ldr	r2, [r7, #28]
 8000d5c:	69bb      	ldr	r3, [r7, #24]
 8000d5e:	4413      	add	r3, r2
 8000d60:	61fb      	str	r3, [r7, #28]
	tmp = 0;
 8000d62:	2300      	movs	r3, #0
 8000d64:	61bb      	str	r3, [r7, #24]
	if((tmp = sprintf_(buffer+length, "\r\n")) < 0) {
 8000d66:	69fb      	ldr	r3, [r7, #28]
 8000d68:	68fa      	ldr	r2, [r7, #12]
 8000d6a:	4413      	add	r3, r2
 8000d6c:	490f      	ldr	r1, [pc, #60]	; (8000dac <at_set_command+0xb0>)
 8000d6e:	4618      	mov	r0, r3
 8000d70:	f001 fb8e 	bl	8002490 <sprintf_>
 8000d74:	61b8      	str	r0, [r7, #24]
 8000d76:	69bb      	ldr	r3, [r7, #24]
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	da02      	bge.n	8000d82 <at_set_command+0x86>
		return AT_CMD_ERROR;
 8000d7c:	f04f 33ff 	mov.w	r3, #4294967295
 8000d80:	e00b      	b.n	8000d9a <at_set_command+0x9e>
	}
	length += tmp;
 8000d82:	69fa      	ldr	r2, [r7, #28]
 8000d84:	69bb      	ldr	r3, [r7, #24]
 8000d86:	4413      	add	r3, r2
 8000d88:	61fb      	str	r3, [r7, #28]
	if(tx != NULL) {
 8000d8a:	68bb      	ldr	r3, [r7, #8]
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d003      	beq.n	8000d98 <at_set_command+0x9c>
		tx(buffer, length);
 8000d90:	68bb      	ldr	r3, [r7, #8]
 8000d92:	69f9      	ldr	r1, [r7, #28]
 8000d94:	68f8      	ldr	r0, [r7, #12]
 8000d96:	4798      	blx	r3
	}
	return length;
 8000d98:	69fb      	ldr	r3, [r7, #28]
}
 8000d9a:	4618      	mov	r0, r3
 8000d9c:	3724      	adds	r7, #36	; 0x24
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000da4:	b001      	add	sp, #4
 8000da6:	4770      	bx	lr
 8000da8:	08009d00 	.word	0x08009d00
 8000dac:	08009d04 	.word	0x08009d04

08000db0 <at_execute_command>:
	}
	return length;
}


int at_execute_command(char *buffer, transmit_t tx, char *cmd) {
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b086      	sub	sp, #24
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	60f8      	str	r0, [r7, #12]
 8000db8:	60b9      	str	r1, [r7, #8]
 8000dba:	607a      	str	r2, [r7, #4]
	int length;
	if((length = sprintf_(buffer, "%s\r\n", cmd)) < 0) {
 8000dbc:	687a      	ldr	r2, [r7, #4]
 8000dbe:	490b      	ldr	r1, [pc, #44]	; (8000dec <at_execute_command+0x3c>)
 8000dc0:	68f8      	ldr	r0, [r7, #12]
 8000dc2:	f001 fb65 	bl	8002490 <sprintf_>
 8000dc6:	6178      	str	r0, [r7, #20]
 8000dc8:	697b      	ldr	r3, [r7, #20]
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	da02      	bge.n	8000dd4 <at_execute_command+0x24>
		return AT_CMD_ERROR;
 8000dce:	f04f 33ff 	mov.w	r3, #4294967295
 8000dd2:	e007      	b.n	8000de4 <at_execute_command+0x34>
	}
	if(tx != NULL) {
 8000dd4:	68bb      	ldr	r3, [r7, #8]
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d003      	beq.n	8000de2 <at_execute_command+0x32>
		tx(buffer, length);
 8000dda:	68bb      	ldr	r3, [r7, #8]
 8000ddc:	6979      	ldr	r1, [r7, #20]
 8000dde:	68f8      	ldr	r0, [r7, #12]
 8000de0:	4798      	blx	r3
	}
	return length;
 8000de2:	697b      	ldr	r3, [r7, #20]
}
 8000de4:	4618      	mov	r0, r3
 8000de6:	3718      	adds	r7, #24
 8000de8:	46bd      	mov	sp, r7
 8000dea:	bd80      	pop	{r7, pc}
 8000dec:	08009d08 	.word	0x08009d08

08000df0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b082      	sub	sp, #8
 8000df4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000df6:	4b0c      	ldr	r3, [pc, #48]	; (8000e28 <MX_DMA_Init+0x38>)
 8000df8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000dfa:	4a0b      	ldr	r2, [pc, #44]	; (8000e28 <MX_DMA_Init+0x38>)
 8000dfc:	f043 0301 	orr.w	r3, r3, #1
 8000e00:	6493      	str	r3, [r2, #72]	; 0x48
 8000e02:	4b09      	ldr	r3, [pc, #36]	; (8000e28 <MX_DMA_Init+0x38>)
 8000e04:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000e06:	f003 0301 	and.w	r3, r3, #1
 8000e0a:	607b      	str	r3, [r7, #4]
 8000e0c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 5, 0);
 8000e0e:	2200      	movs	r2, #0
 8000e10:	2105      	movs	r1, #5
 8000e12:	200f      	movs	r0, #15
 8000e14:	f002 f83c 	bl	8002e90 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8000e18:	200f      	movs	r0, #15
 8000e1a:	f002 f855 	bl	8002ec8 <HAL_NVIC_EnableIRQ>

}
 8000e1e:	bf00      	nop
 8000e20:	3708      	adds	r7, #8
 8000e22:	46bd      	mov	sp, r7
 8000e24:	bd80      	pop	{r7, pc}
 8000e26:	bf00      	nop
 8000e28:	40021000 	.word	0x40021000

08000e2c <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000e30:	4a04      	ldr	r2, [pc, #16]	; (8000e44 <MX_FREERTOS_Init+0x18>)
 8000e32:	2100      	movs	r1, #0
 8000e34:	4804      	ldr	r0, [pc, #16]	; (8000e48 <MX_FREERTOS_Init+0x1c>)
 8000e36:	f005 ff61 	bl	8006cfc <osThreadNew>
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	4a03      	ldr	r2, [pc, #12]	; (8000e4c <MX_FREERTOS_Init+0x20>)
 8000e3e:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8000e40:	bf00      	nop
 8000e42:	bd80      	pop	{r7, pc}
 8000e44:	08009ddc 	.word	0x08009ddc
 8000e48:	08002971 	.word	0x08002971
 8000e4c:	20000098 	.word	0x20000098

08000e50 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b088      	sub	sp, #32
 8000e54:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e56:	f107 030c 	add.w	r3, r7, #12
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	601a      	str	r2, [r3, #0]
 8000e5e:	605a      	str	r2, [r3, #4]
 8000e60:	609a      	str	r2, [r3, #8]
 8000e62:	60da      	str	r2, [r3, #12]
 8000e64:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e66:	4b1d      	ldr	r3, [pc, #116]	; (8000edc <MX_GPIO_Init+0x8c>)
 8000e68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e6a:	4a1c      	ldr	r2, [pc, #112]	; (8000edc <MX_GPIO_Init+0x8c>)
 8000e6c:	f043 0304 	orr.w	r3, r3, #4
 8000e70:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e72:	4b1a      	ldr	r3, [pc, #104]	; (8000edc <MX_GPIO_Init+0x8c>)
 8000e74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e76:	f003 0304 	and.w	r3, r3, #4
 8000e7a:	60bb      	str	r3, [r7, #8]
 8000e7c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e7e:	4b17      	ldr	r3, [pc, #92]	; (8000edc <MX_GPIO_Init+0x8c>)
 8000e80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e82:	4a16      	ldr	r2, [pc, #88]	; (8000edc <MX_GPIO_Init+0x8c>)
 8000e84:	f043 0301 	orr.w	r3, r3, #1
 8000e88:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e8a:	4b14      	ldr	r3, [pc, #80]	; (8000edc <MX_GPIO_Init+0x8c>)
 8000e8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e8e:	f003 0301 	and.w	r3, r3, #1
 8000e92:	607b      	str	r3, [r7, #4]
 8000e94:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e96:	4b11      	ldr	r3, [pc, #68]	; (8000edc <MX_GPIO_Init+0x8c>)
 8000e98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e9a:	4a10      	ldr	r2, [pc, #64]	; (8000edc <MX_GPIO_Init+0x8c>)
 8000e9c:	f043 0302 	orr.w	r3, r3, #2
 8000ea0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ea2:	4b0e      	ldr	r3, [pc, #56]	; (8000edc <MX_GPIO_Init+0x8c>)
 8000ea4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ea6:	f003 0302 	and.w	r3, r3, #2
 8000eaa:	603b      	str	r3, [r7, #0]
 8000eac:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BOARD_LED_GPIO_Port, BOARD_LED_Pin, GPIO_PIN_RESET);
 8000eae:	2200      	movs	r2, #0
 8000eb0:	2108      	movs	r1, #8
 8000eb2:	480b      	ldr	r0, [pc, #44]	; (8000ee0 <MX_GPIO_Init+0x90>)
 8000eb4:	f002 fbf6 	bl	80036a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BOARD_LED_Pin;
 8000eb8:	2308      	movs	r3, #8
 8000eba:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ebc:	2301      	movs	r3, #1
 8000ebe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BOARD_LED_GPIO_Port, &GPIO_InitStruct);
 8000ec8:	f107 030c 	add.w	r3, r7, #12
 8000ecc:	4619      	mov	r1, r3
 8000ece:	4804      	ldr	r0, [pc, #16]	; (8000ee0 <MX_GPIO_Init+0x90>)
 8000ed0:	f002 fa7e 	bl	80033d0 <HAL_GPIO_Init>

}
 8000ed4:	bf00      	nop
 8000ed6:	3720      	adds	r7, #32
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	bd80      	pop	{r7, pc}
 8000edc:	40021000 	.word	0x40021000
 8000ee0:	48000400 	.word	0x48000400

08000ee4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ee8:	f001 fee1 	bl	8002cae <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000eec:	f000 f810 	bl	8000f10 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ef0:	f7ff ffae 	bl	8000e50 <MX_GPIO_Init>
  MX_DMA_Init();
 8000ef4:	f7ff ff7c 	bl	8000df0 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000ef8:	f001 fc02 	bl	8002700 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 8000efc:	f001 fbd0 	bl	80026a0 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8000f00:	f005 feb2 	bl	8006c68 <osKernelInitialize>
  MX_FREERTOS_Init();
 8000f04:	f7ff ff92 	bl	8000e2c <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8000f08:	f005 fed2 	bl	8006cb0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000f0c:	e7fe      	b.n	8000f0c <main+0x28>
	...

08000f10 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b096      	sub	sp, #88	; 0x58
 8000f14:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f16:	f107 0314 	add.w	r3, r7, #20
 8000f1a:	2244      	movs	r2, #68	; 0x44
 8000f1c:	2100      	movs	r1, #0
 8000f1e:	4618      	mov	r0, r3
 8000f20:	f008 fe10 	bl	8009b44 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f24:	463b      	mov	r3, r7
 8000f26:	2200      	movs	r2, #0
 8000f28:	601a      	str	r2, [r3, #0]
 8000f2a:	605a      	str	r2, [r3, #4]
 8000f2c:	609a      	str	r2, [r3, #8]
 8000f2e:	60da      	str	r2, [r3, #12]
 8000f30:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000f32:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000f36:	f002 fbeb 	bl	8003710 <HAL_PWREx_ControlVoltageScaling>
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d001      	beq.n	8000f44 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000f40:	f000 f85a 	bl	8000ff8 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000f44:	f002 fbc6 	bl	80036d4 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000f48:	4b21      	ldr	r3, [pc, #132]	; (8000fd0 <SystemClock_Config+0xc0>)
 8000f4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000f4e:	4a20      	ldr	r2, [pc, #128]	; (8000fd0 <SystemClock_Config+0xc0>)
 8000f50:	f023 0318 	bic.w	r3, r3, #24
 8000f54:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8000f58:	2314      	movs	r3, #20
 8000f5a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000f5c:	2301      	movs	r3, #1
 8000f5e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000f60:	2301      	movs	r3, #1
 8000f62:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000f64:	2300      	movs	r3, #0
 8000f66:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000f68:	2360      	movs	r3, #96	; 0x60
 8000f6a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f6c:	2302      	movs	r3, #2
 8000f6e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000f70:	2301      	movs	r3, #1
 8000f72:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000f74:	2301      	movs	r3, #1
 8000f76:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 16;
 8000f78:	2310      	movs	r3, #16
 8000f7a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000f7c:	2307      	movs	r3, #7
 8000f7e:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000f80:	2302      	movs	r3, #2
 8000f82:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000f84:	2302      	movs	r3, #2
 8000f86:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f88:	f107 0314 	add.w	r3, r7, #20
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	f002 fc15 	bl	80037bc <HAL_RCC_OscConfig>
 8000f92:	4603      	mov	r3, r0
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d001      	beq.n	8000f9c <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000f98:	f000 f82e 	bl	8000ff8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f9c:	230f      	movs	r3, #15
 8000f9e:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000fa0:	2303      	movs	r3, #3
 8000fa2:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000fa8:	2300      	movs	r3, #0
 8000faa:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000fac:	2300      	movs	r3, #0
 8000fae:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000fb0:	463b      	mov	r3, r7
 8000fb2:	2101      	movs	r1, #1
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	f003 f815 	bl	8003fe4 <HAL_RCC_ClockConfig>
 8000fba:	4603      	mov	r3, r0
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d001      	beq.n	8000fc4 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000fc0:	f000 f81a 	bl	8000ff8 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8000fc4:	f003 fc5a 	bl	800487c <HAL_RCCEx_EnableMSIPLLMode>
}
 8000fc8:	bf00      	nop
 8000fca:	3758      	adds	r7, #88	; 0x58
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	bd80      	pop	{r7, pc}
 8000fd0:	40021000 	.word	0x40021000

08000fd4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b082      	sub	sp, #8
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	4a04      	ldr	r2, [pc, #16]	; (8000ff4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000fe2:	4293      	cmp	r3, r2
 8000fe4:	d101      	bne.n	8000fea <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000fe6:	f001 fe7b 	bl	8002ce0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000fea:	bf00      	nop
 8000fec:	3708      	adds	r7, #8
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bd80      	pop	{r7, pc}
 8000ff2:	bf00      	nop
 8000ff4:	40001000 	.word	0x40001000

08000ff8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ffc:	b672      	cpsid	i
}
 8000ffe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001000:	e7fe      	b.n	8001000 <Error_Handler+0x8>

08001002 <get_bit_access>:
// but:
// 1. Some compilers are finicky about this;
// 2. Some people may want to convert this to C89;
// 3. If you try to use it as C++, only C++20 supports compound literals
static inline double_with_bit_access get_bit_access(double x)
{
 8001002:	b480      	push	{r7}
 8001004:	b087      	sub	sp, #28
 8001006:	af00      	add	r7, sp, #0
 8001008:	60f8      	str	r0, [r7, #12]
 800100a:	e9c7 2300 	strd	r2, r3, [r7]
  double_with_bit_access dwba;
  dwba.F = x;
 800100e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001012:	e9c7 2304 	strd	r2, r3, [r7, #16]
  return dwba;
 8001016:	68f9      	ldr	r1, [r7, #12]
 8001018:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800101c:	e9c1 2300 	strd	r2, r3, [r1]
}
 8001020:	68f8      	ldr	r0, [r7, #12]
 8001022:	371c      	adds	r7, #28
 8001024:	46bd      	mov	sp, r7
 8001026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102a:	4770      	bx	lr

0800102c <get_sign_bit>:

static inline int get_sign_bit(double x)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b084      	sub	sp, #16
 8001030:	af00      	add	r7, sp, #0
 8001032:	e9c7 0100 	strd	r0, r1, [r7]
  // The sign is stored in the highest bit
  return (int) (get_bit_access(x).U >> (DOUBLE_SIZE_IN_BITS - 1));
 8001036:	f107 0108 	add.w	r1, r7, #8
 800103a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800103e:	4608      	mov	r0, r1
 8001040:	f7ff ffdf 	bl	8001002 <get_bit_access>
 8001044:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001048:	f04f 0200 	mov.w	r2, #0
 800104c:	f04f 0300 	mov.w	r3, #0
 8001050:	0fca      	lsrs	r2, r1, #31
 8001052:	2300      	movs	r3, #0
 8001054:	4613      	mov	r3, r2
}
 8001056:	4618      	mov	r0, r3
 8001058:	3710      	adds	r7, #16
 800105a:	46bd      	mov	sp, r7
 800105c:	bd80      	pop	{r7, pc}

0800105e <putchar_via_gadget>:
// Note: This function currently assumes it is not passed a '\0' c,
// or alternatively, that '\0' can be passed to the function in the output
// gadget. The former assumption holds within the printf library. It also
// assumes that the output gadget has been properly initialized.
static inline void putchar_via_gadget(output_gadget_t* gadget, char c)
{
 800105e:	b580      	push	{r7, lr}
 8001060:	b084      	sub	sp, #16
 8001062:	af00      	add	r7, sp, #0
 8001064:	6078      	str	r0, [r7, #4]
 8001066:	460b      	mov	r3, r1
 8001068:	70fb      	strb	r3, [r7, #3]
  printf_size_t write_pos = gadget->pos++;
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	68db      	ldr	r3, [r3, #12]
 800106e:	1c59      	adds	r1, r3, #1
 8001070:	687a      	ldr	r2, [r7, #4]
 8001072:	60d1      	str	r1, [r2, #12]
 8001074:	60fb      	str	r3, [r7, #12]
    // We're _always_ increasing pos, so as to count how may characters
    // _would_ have been written if not for the max_chars limitation
  if (write_pos >= gadget->max_chars) {
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	691b      	ldr	r3, [r3, #16]
 800107a:	68fa      	ldr	r2, [r7, #12]
 800107c:	429a      	cmp	r2, r3
 800107e:	d212      	bcs.n	80010a6 <putchar_via_gadget+0x48>
    return;
  }
  if (gadget->function != NULL) {
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	2b00      	cmp	r3, #0
 8001086:	d007      	beq.n	8001098 <putchar_via_gadget+0x3a>
    // No check for c == '\0' .
    gadget->function(c, gadget->extra_function_arg);
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	687a      	ldr	r2, [r7, #4]
 800108e:	6851      	ldr	r1, [r2, #4]
 8001090:	78fa      	ldrb	r2, [r7, #3]
 8001092:	4610      	mov	r0, r2
 8001094:	4798      	blx	r3
 8001096:	e007      	b.n	80010a8 <putchar_via_gadget+0x4a>
  }
  else {
    // it must be the case that gadget->buffer != NULL , due to the constraint
    // on output_gadget_t ; and note we're relying on write_pos being non-negative.
    gadget->buffer[write_pos] = c;
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	689a      	ldr	r2, [r3, #8]
 800109c:	68fb      	ldr	r3, [r7, #12]
 800109e:	4413      	add	r3, r2
 80010a0:	78fa      	ldrb	r2, [r7, #3]
 80010a2:	701a      	strb	r2, [r3, #0]
 80010a4:	e000      	b.n	80010a8 <putchar_via_gadget+0x4a>
    return;
 80010a6:	bf00      	nop
  }
}
 80010a8:	3710      	adds	r7, #16
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bd80      	pop	{r7, pc}

080010ae <append_termination_with_gadget>:

// Possibly-write the string-terminating '\0' character
static inline void append_termination_with_gadget(output_gadget_t* gadget)
{
 80010ae:	b480      	push	{r7}
 80010b0:	b085      	sub	sp, #20
 80010b2:	af00      	add	r7, sp, #0
 80010b4:	6078      	str	r0, [r7, #4]
  if (gadget->function != NULL || gadget->max_chars == 0) {
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d11b      	bne.n	80010f6 <append_termination_with_gadget+0x48>
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	691b      	ldr	r3, [r3, #16]
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d017      	beq.n	80010f6 <append_termination_with_gadget+0x48>
    return;
  }
  if (gadget->buffer == NULL) {
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	689b      	ldr	r3, [r3, #8]
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d015      	beq.n	80010fa <append_termination_with_gadget+0x4c>
    return;
  }
  printf_size_t null_char_pos = gadget->pos < gadget->max_chars ? gadget->pos : gadget->max_chars - 1;
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	68da      	ldr	r2, [r3, #12]
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	691b      	ldr	r3, [r3, #16]
 80010d6:	429a      	cmp	r2, r3
 80010d8:	d202      	bcs.n	80010e0 <append_termination_with_gadget+0x32>
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	68db      	ldr	r3, [r3, #12]
 80010de:	e002      	b.n	80010e6 <append_termination_with_gadget+0x38>
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	691b      	ldr	r3, [r3, #16]
 80010e4:	3b01      	subs	r3, #1
 80010e6:	60fb      	str	r3, [r7, #12]
  gadget->buffer[null_char_pos] = '\0';
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	689a      	ldr	r2, [r3, #8]
 80010ec:	68fb      	ldr	r3, [r7, #12]
 80010ee:	4413      	add	r3, r2
 80010f0:	2200      	movs	r2, #0
 80010f2:	701a      	strb	r2, [r3, #0]
 80010f4:	e002      	b.n	80010fc <append_termination_with_gadget+0x4e>
    return;
 80010f6:	bf00      	nop
 80010f8:	e000      	b.n	80010fc <append_termination_with_gadget+0x4e>
    return;
 80010fa:	bf00      	nop
}
 80010fc:	3714      	adds	r7, #20
 80010fe:	46bd      	mov	sp, r7
 8001100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001104:	4770      	bx	lr

08001106 <discarding_gadget>:
  (void) unused;
  putchar_(c);
}

static inline output_gadget_t discarding_gadget(void)
{
 8001106:	b4b0      	push	{r4, r5, r7}
 8001108:	b089      	sub	sp, #36	; 0x24
 800110a:	af00      	add	r7, sp, #0
 800110c:	6078      	str	r0, [r7, #4]
  output_gadget_t gadget;
  gadget.function = NULL;
 800110e:	2300      	movs	r3, #0
 8001110:	60fb      	str	r3, [r7, #12]
  gadget.extra_function_arg = NULL;
 8001112:	2300      	movs	r3, #0
 8001114:	613b      	str	r3, [r7, #16]
  gadget.buffer = NULL;
 8001116:	2300      	movs	r3, #0
 8001118:	617b      	str	r3, [r7, #20]
  gadget.pos = 0;
 800111a:	2300      	movs	r3, #0
 800111c:	61bb      	str	r3, [r7, #24]
  gadget.max_chars = 0;
 800111e:	2300      	movs	r3, #0
 8001120:	61fb      	str	r3, [r7, #28]
  return gadget;
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	461d      	mov	r5, r3
 8001126:	f107 040c 	add.w	r4, r7, #12
 800112a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800112c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800112e:	6823      	ldr	r3, [r4, #0]
 8001130:	602b      	str	r3, [r5, #0]
}
 8001132:	6878      	ldr	r0, [r7, #4]
 8001134:	3724      	adds	r7, #36	; 0x24
 8001136:	46bd      	mov	sp, r7
 8001138:	bcb0      	pop	{r4, r5, r7}
 800113a:	4770      	bx	lr

0800113c <buffer_gadget>:

static inline output_gadget_t buffer_gadget(char* buffer, size_t buffer_size)
{
 800113c:	b5b0      	push	{r4, r5, r7, lr}
 800113e:	b08a      	sub	sp, #40	; 0x28
 8001140:	af00      	add	r7, sp, #0
 8001142:	60f8      	str	r0, [r7, #12]
 8001144:	60b9      	str	r1, [r7, #8]
 8001146:	607a      	str	r2, [r7, #4]
  printf_size_t usable_buffer_size = (buffer_size > PRINTF_MAX_POSSIBLE_BUFFER_SIZE) ?
 8001148:	687b      	ldr	r3, [r7, #4]
    PRINTF_MAX_POSSIBLE_BUFFER_SIZE : (printf_size_t) buffer_size;
 800114a:	2b00      	cmp	r3, #0
 800114c:	db01      	blt.n	8001152 <buffer_gadget+0x16>
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	e001      	b.n	8001156 <buffer_gadget+0x1a>
 8001152:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
  printf_size_t usable_buffer_size = (buffer_size > PRINTF_MAX_POSSIBLE_BUFFER_SIZE) ?
 8001156:	627b      	str	r3, [r7, #36]	; 0x24
  output_gadget_t result = discarding_gadget();
 8001158:	f107 0310 	add.w	r3, r7, #16
 800115c:	4618      	mov	r0, r3
 800115e:	f7ff ffd2 	bl	8001106 <discarding_gadget>
  if (buffer != NULL) {
 8001162:	68bb      	ldr	r3, [r7, #8]
 8001164:	2b00      	cmp	r3, #0
 8001166:	d003      	beq.n	8001170 <buffer_gadget+0x34>
    result.buffer = buffer;
 8001168:	68bb      	ldr	r3, [r7, #8]
 800116a:	61bb      	str	r3, [r7, #24]
    result.max_chars = usable_buffer_size;
 800116c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800116e:	623b      	str	r3, [r7, #32]
  }
  return result;
 8001170:	68fb      	ldr	r3, [r7, #12]
 8001172:	461d      	mov	r5, r3
 8001174:	f107 0410 	add.w	r4, r7, #16
 8001178:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800117a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800117c:	6823      	ldr	r3, [r4, #0]
 800117e:	602b      	str	r3, [r5, #0]
}
 8001180:	68f8      	ldr	r0, [r7, #12]
 8001182:	3728      	adds	r7, #40	; 0x28
 8001184:	46bd      	mov	sp, r7
 8001186:	bdb0      	pop	{r4, r5, r7, pc}

08001188 <strnlen_s_>:
// internal secure strlen
// @return The length of the string (excluding the terminating 0) limited by 'maxsize'
// @note strlen uses size_t, but wes only use this function with printf_size_t
// variables - hence the signature.
static inline printf_size_t strnlen_s_(const char* str, printf_size_t maxsize)
{
 8001188:	b480      	push	{r7}
 800118a:	b085      	sub	sp, #20
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
 8001190:	6039      	str	r1, [r7, #0]
  const char* s;
  for (s = str; *s && maxsize--; ++s);
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	60fb      	str	r3, [r7, #12]
 8001196:	e002      	b.n	800119e <strnlen_s_+0x16>
 8001198:	68fb      	ldr	r3, [r7, #12]
 800119a:	3301      	adds	r3, #1
 800119c:	60fb      	str	r3, [r7, #12]
 800119e:	68fb      	ldr	r3, [r7, #12]
 80011a0:	781b      	ldrb	r3, [r3, #0]
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d004      	beq.n	80011b0 <strnlen_s_+0x28>
 80011a6:	683b      	ldr	r3, [r7, #0]
 80011a8:	1e5a      	subs	r2, r3, #1
 80011aa:	603a      	str	r2, [r7, #0]
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d1f3      	bne.n	8001198 <strnlen_s_+0x10>
  return (printf_size_t)(s - str);
 80011b0:	68fa      	ldr	r2, [r7, #12]
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	1ad3      	subs	r3, r2, r3
}
 80011b6:	4618      	mov	r0, r3
 80011b8:	3714      	adds	r7, #20
 80011ba:	46bd      	mov	sp, r7
 80011bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c0:	4770      	bx	lr

080011c2 <is_digit_>:


// internal test if char is a digit (0-9)
// @return true if char is a digit
static inline bool is_digit_(char ch)
{
 80011c2:	b480      	push	{r7}
 80011c4:	b083      	sub	sp, #12
 80011c6:	af00      	add	r7, sp, #0
 80011c8:	4603      	mov	r3, r0
 80011ca:	71fb      	strb	r3, [r7, #7]
  return (ch >= '0') && (ch <= '9');
 80011cc:	79fb      	ldrb	r3, [r7, #7]
 80011ce:	2b2f      	cmp	r3, #47	; 0x2f
 80011d0:	d904      	bls.n	80011dc <is_digit_+0x1a>
 80011d2:	79fb      	ldrb	r3, [r7, #7]
 80011d4:	2b39      	cmp	r3, #57	; 0x39
 80011d6:	d801      	bhi.n	80011dc <is_digit_+0x1a>
 80011d8:	2301      	movs	r3, #1
 80011da:	e000      	b.n	80011de <is_digit_+0x1c>
 80011dc:	2300      	movs	r3, #0
 80011de:	f003 0301 	and.w	r3, r3, #1
 80011e2:	b2db      	uxtb	r3, r3
}
 80011e4:	4618      	mov	r0, r3
 80011e6:	370c      	adds	r7, #12
 80011e8:	46bd      	mov	sp, r7
 80011ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ee:	4770      	bx	lr

080011f0 <atou_>:


// internal ASCII string to printf_size_t conversion
static printf_size_t atou_(const char** str)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b084      	sub	sp, #16
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
  printf_size_t i = 0U;
 80011f8:	2300      	movs	r3, #0
 80011fa:	60fb      	str	r3, [r7, #12]
  while (is_digit_(**str)) {
 80011fc:	e00e      	b.n	800121c <atou_+0x2c>
    i = i * 10U + (printf_size_t)(*((*str)++) - '0');
 80011fe:	68fa      	ldr	r2, [r7, #12]
 8001200:	4613      	mov	r3, r2
 8001202:	009b      	lsls	r3, r3, #2
 8001204:	4413      	add	r3, r2
 8001206:	005b      	lsls	r3, r3, #1
 8001208:	4618      	mov	r0, r3
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	1c59      	adds	r1, r3, #1
 8001210:	687a      	ldr	r2, [r7, #4]
 8001212:	6011      	str	r1, [r2, #0]
 8001214:	781b      	ldrb	r3, [r3, #0]
 8001216:	4403      	add	r3, r0
 8001218:	3b30      	subs	r3, #48	; 0x30
 800121a:	60fb      	str	r3, [r7, #12]
  while (is_digit_(**str)) {
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	781b      	ldrb	r3, [r3, #0]
 8001222:	4618      	mov	r0, r3
 8001224:	f7ff ffcd 	bl	80011c2 <is_digit_>
 8001228:	4603      	mov	r3, r0
 800122a:	2b00      	cmp	r3, #0
 800122c:	d1e7      	bne.n	80011fe <atou_+0xe>
  }
  return i;
 800122e:	68fb      	ldr	r3, [r7, #12]
}
 8001230:	4618      	mov	r0, r3
 8001232:	3710      	adds	r7, #16
 8001234:	46bd      	mov	sp, r7
 8001236:	bd80      	pop	{r7, pc}

08001238 <out_rev_>:


// output the specified string in reverse, taking care of any zero-padding
static void out_rev_(output_gadget_t* output, const char* buf, printf_size_t len, printf_size_t width, printf_flags_t flags)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b086      	sub	sp, #24
 800123c:	af00      	add	r7, sp, #0
 800123e:	60f8      	str	r0, [r7, #12]
 8001240:	60b9      	str	r1, [r7, #8]
 8001242:	607a      	str	r2, [r7, #4]
 8001244:	603b      	str	r3, [r7, #0]
  const printf_size_t start_pos = output->pos;
 8001246:	68fb      	ldr	r3, [r7, #12]
 8001248:	68db      	ldr	r3, [r3, #12]
 800124a:	613b      	str	r3, [r7, #16]

  // pad spaces up to given width
  if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
 800124c:	6a3b      	ldr	r3, [r7, #32]
 800124e:	f003 0302 	and.w	r3, r3, #2
 8001252:	2b00      	cmp	r3, #0
 8001254:	d11e      	bne.n	8001294 <out_rev_+0x5c>
 8001256:	6a3b      	ldr	r3, [r7, #32]
 8001258:	f003 0301 	and.w	r3, r3, #1
 800125c:	2b00      	cmp	r3, #0
 800125e:	d119      	bne.n	8001294 <out_rev_+0x5c>
    for (printf_size_t i = len; i < width; i++) {
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	617b      	str	r3, [r7, #20]
 8001264:	e006      	b.n	8001274 <out_rev_+0x3c>
      putchar_via_gadget(output, ' ');
 8001266:	2120      	movs	r1, #32
 8001268:	68f8      	ldr	r0, [r7, #12]
 800126a:	f7ff fef8 	bl	800105e <putchar_via_gadget>
    for (printf_size_t i = len; i < width; i++) {
 800126e:	697b      	ldr	r3, [r7, #20]
 8001270:	3301      	adds	r3, #1
 8001272:	617b      	str	r3, [r7, #20]
 8001274:	697a      	ldr	r2, [r7, #20]
 8001276:	683b      	ldr	r3, [r7, #0]
 8001278:	429a      	cmp	r2, r3
 800127a:	d3f4      	bcc.n	8001266 <out_rev_+0x2e>
    }
  }

  // reverse string
  while (len) {
 800127c:	e00a      	b.n	8001294 <out_rev_+0x5c>
    putchar_via_gadget(output, buf[--len]);
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	3b01      	subs	r3, #1
 8001282:	607b      	str	r3, [r7, #4]
 8001284:	68ba      	ldr	r2, [r7, #8]
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	4413      	add	r3, r2
 800128a:	781b      	ldrb	r3, [r3, #0]
 800128c:	4619      	mov	r1, r3
 800128e:	68f8      	ldr	r0, [r7, #12]
 8001290:	f7ff fee5 	bl	800105e <putchar_via_gadget>
  while (len) {
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	2b00      	cmp	r3, #0
 8001298:	d1f1      	bne.n	800127e <out_rev_+0x46>
  }

  // append pad spaces up to given width
  if (flags & FLAGS_LEFT) {
 800129a:	6a3b      	ldr	r3, [r7, #32]
 800129c:	f003 0302 	and.w	r3, r3, #2
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d00b      	beq.n	80012bc <out_rev_+0x84>
    while (output->pos - start_pos < width) {
 80012a4:	e003      	b.n	80012ae <out_rev_+0x76>
      putchar_via_gadget(output, ' ');
 80012a6:	2120      	movs	r1, #32
 80012a8:	68f8      	ldr	r0, [r7, #12]
 80012aa:	f7ff fed8 	bl	800105e <putchar_via_gadget>
    while (output->pos - start_pos < width) {
 80012ae:	68fb      	ldr	r3, [r7, #12]
 80012b0:	68da      	ldr	r2, [r3, #12]
 80012b2:	693b      	ldr	r3, [r7, #16]
 80012b4:	1ad3      	subs	r3, r2, r3
 80012b6:	683a      	ldr	r2, [r7, #0]
 80012b8:	429a      	cmp	r2, r3
 80012ba:	d8f4      	bhi.n	80012a6 <out_rev_+0x6e>
    }
  }
}
 80012bc:	bf00      	nop
 80012be:	3718      	adds	r7, #24
 80012c0:	46bd      	mov	sp, r7
 80012c2:	bd80      	pop	{r7, pc}

080012c4 <print_integer_finalization>:


// Invoked by print_integer after the actual number has been printed, performing necessary
// work on the number's prefix (as the number is initially printed in reverse order)
static void print_integer_finalization(output_gadget_t* output, char* buf, printf_size_t len, bool negative, numeric_base_t base, printf_size_t precision, printf_size_t width, printf_flags_t flags)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b088      	sub	sp, #32
 80012c8:	af02      	add	r7, sp, #8
 80012ca:	60f8      	str	r0, [r7, #12]
 80012cc:	60b9      	str	r1, [r7, #8]
 80012ce:	607a      	str	r2, [r7, #4]
 80012d0:	70fb      	strb	r3, [r7, #3]
  printf_size_t unpadded_len = len;
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	617b      	str	r3, [r7, #20]

  // pad with leading zeros
  {
    if (!(flags & FLAGS_LEFT)) {
 80012d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80012d8:	f003 0302 	and.w	r3, r3, #2
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d12e      	bne.n	800133e <print_integer_finalization+0x7a>
      if (width && (flags & FLAGS_ZEROPAD) && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
 80012e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d017      	beq.n	8001316 <print_integer_finalization+0x52>
 80012e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80012e8:	f003 0301 	and.w	r3, r3, #1
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d012      	beq.n	8001316 <print_integer_finalization+0x52>
 80012f0:	78fb      	ldrb	r3, [r7, #3]
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d104      	bne.n	8001300 <print_integer_finalization+0x3c>
 80012f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80012f8:	f003 030c 	and.w	r3, r3, #12
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d00a      	beq.n	8001316 <print_integer_finalization+0x52>
        width--;
 8001300:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001302:	3b01      	subs	r3, #1
 8001304:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_INTEGER_BUFFER_SIZE)) {
 8001306:	e006      	b.n	8001316 <print_integer_finalization+0x52>
        buf[len++] = '0';
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	1c5a      	adds	r2, r3, #1
 800130c:	607a      	str	r2, [r7, #4]
 800130e:	68ba      	ldr	r2, [r7, #8]
 8001310:	4413      	add	r3, r2
 8001312:	2230      	movs	r2, #48	; 0x30
 8001314:	701a      	strb	r2, [r3, #0]
      while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_INTEGER_BUFFER_SIZE)) {
 8001316:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001318:	f003 0301 	and.w	r3, r3, #1
 800131c:	2b00      	cmp	r3, #0
 800131e:	d00e      	beq.n	800133e <print_integer_finalization+0x7a>
 8001320:	687a      	ldr	r2, [r7, #4]
 8001322:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001324:	429a      	cmp	r2, r3
 8001326:	d20a      	bcs.n	800133e <print_integer_finalization+0x7a>
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	2b1f      	cmp	r3, #31
 800132c:	d9ec      	bls.n	8001308 <print_integer_finalization+0x44>
      }
    }

    while ((len < precision) && (len < PRINTF_INTEGER_BUFFER_SIZE)) {
 800132e:	e006      	b.n	800133e <print_integer_finalization+0x7a>
      buf[len++] = '0';
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	1c5a      	adds	r2, r3, #1
 8001334:	607a      	str	r2, [r7, #4]
 8001336:	68ba      	ldr	r2, [r7, #8]
 8001338:	4413      	add	r3, r2
 800133a:	2230      	movs	r2, #48	; 0x30
 800133c:	701a      	strb	r2, [r3, #0]
    while ((len < precision) && (len < PRINTF_INTEGER_BUFFER_SIZE)) {
 800133e:	687a      	ldr	r2, [r7, #4]
 8001340:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001342:	429a      	cmp	r2, r3
 8001344:	d202      	bcs.n	800134c <print_integer_finalization+0x88>
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	2b1f      	cmp	r3, #31
 800134a:	d9f1      	bls.n	8001330 <print_integer_finalization+0x6c>
    }

    if (base == BASE_OCTAL && (len > unpadded_len)) {
 800134c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001350:	2b08      	cmp	r3, #8
 8001352:	d107      	bne.n	8001364 <print_integer_finalization+0xa0>
 8001354:	687a      	ldr	r2, [r7, #4]
 8001356:	697b      	ldr	r3, [r7, #20]
 8001358:	429a      	cmp	r2, r3
 800135a:	d903      	bls.n	8001364 <print_integer_finalization+0xa0>
      // Since we've written some zeros, we've satisfied the alternative format leading space requirement
      flags &= ~FLAGS_HASH;
 800135c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800135e:	f023 0310 	bic.w	r3, r3, #16
 8001362:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }

  // handle hash
  if (flags & (FLAGS_HASH | FLAGS_POINTER)) {
 8001364:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001366:	f242 0310 	movw	r3, #8208	; 0x2010
 800136a:	4013      	ands	r3, r2
 800136c:	2b00      	cmp	r3, #0
 800136e:	d068      	beq.n	8001442 <print_integer_finalization+0x17e>
    if (!(flags & FLAGS_PRECISION) && len && ((len == precision) || (len == width))) {
 8001370:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001372:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001376:	2b00      	cmp	r3, #0
 8001378:	d123      	bne.n	80013c2 <print_integer_finalization+0xfe>
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	2b00      	cmp	r3, #0
 800137e:	d020      	beq.n	80013c2 <print_integer_finalization+0xfe>
 8001380:	687a      	ldr	r2, [r7, #4]
 8001382:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001384:	429a      	cmp	r2, r3
 8001386:	d003      	beq.n	8001390 <print_integer_finalization+0xcc>
 8001388:	687a      	ldr	r2, [r7, #4]
 800138a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800138c:	429a      	cmp	r2, r3
 800138e:	d118      	bne.n	80013c2 <print_integer_finalization+0xfe>
      // Let's take back some padding digits to fit in what will eventually
      // be the format-specific prefix
      if (unpadded_len < len) {
 8001390:	697a      	ldr	r2, [r7, #20]
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	429a      	cmp	r2, r3
 8001396:	d202      	bcs.n	800139e <print_integer_finalization+0xda>
        len--; // This should suffice for BASE_OCTAL
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	3b01      	subs	r3, #1
 800139c:	607b      	str	r3, [r7, #4]
      }
      if (len && (base == BASE_HEX || base == BASE_BINARY) && (unpadded_len < len)) {
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d00e      	beq.n	80013c2 <print_integer_finalization+0xfe>
 80013a4:	f897 3020 	ldrb.w	r3, [r7, #32]
 80013a8:	2b10      	cmp	r3, #16
 80013aa:	d003      	beq.n	80013b4 <print_integer_finalization+0xf0>
 80013ac:	f897 3020 	ldrb.w	r3, [r7, #32]
 80013b0:	2b02      	cmp	r3, #2
 80013b2:	d106      	bne.n	80013c2 <print_integer_finalization+0xfe>
 80013b4:	697a      	ldr	r2, [r7, #20]
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	429a      	cmp	r2, r3
 80013ba:	d202      	bcs.n	80013c2 <print_integer_finalization+0xfe>
        len--; // ... and an extra one for 0x or 0b
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	3b01      	subs	r3, #1
 80013c0:	607b      	str	r3, [r7, #4]
      }
    }
    if ((base == BASE_HEX) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_INTEGER_BUFFER_SIZE)) {
 80013c2:	f897 3020 	ldrb.w	r3, [r7, #32]
 80013c6:	2b10      	cmp	r3, #16
 80013c8:	d10f      	bne.n	80013ea <print_integer_finalization+0x126>
 80013ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013cc:	f003 0320 	and.w	r3, r3, #32
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d10a      	bne.n	80013ea <print_integer_finalization+0x126>
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	2b1f      	cmp	r3, #31
 80013d8:	d807      	bhi.n	80013ea <print_integer_finalization+0x126>
      buf[len++] = 'x';
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	1c5a      	adds	r2, r3, #1
 80013de:	607a      	str	r2, [r7, #4]
 80013e0:	68ba      	ldr	r2, [r7, #8]
 80013e2:	4413      	add	r3, r2
 80013e4:	2278      	movs	r2, #120	; 0x78
 80013e6:	701a      	strb	r2, [r3, #0]
 80013e8:	e021      	b.n	800142e <print_integer_finalization+0x16a>
    }
    else if ((base == BASE_HEX) && (flags & FLAGS_UPPERCASE) && (len < PRINTF_INTEGER_BUFFER_SIZE)) {
 80013ea:	f897 3020 	ldrb.w	r3, [r7, #32]
 80013ee:	2b10      	cmp	r3, #16
 80013f0:	d10f      	bne.n	8001412 <print_integer_finalization+0x14e>
 80013f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013f4:	f003 0320 	and.w	r3, r3, #32
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d00a      	beq.n	8001412 <print_integer_finalization+0x14e>
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	2b1f      	cmp	r3, #31
 8001400:	d807      	bhi.n	8001412 <print_integer_finalization+0x14e>
      buf[len++] = 'X';
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	1c5a      	adds	r2, r3, #1
 8001406:	607a      	str	r2, [r7, #4]
 8001408:	68ba      	ldr	r2, [r7, #8]
 800140a:	4413      	add	r3, r2
 800140c:	2258      	movs	r2, #88	; 0x58
 800140e:	701a      	strb	r2, [r3, #0]
 8001410:	e00d      	b.n	800142e <print_integer_finalization+0x16a>
    }
    else if ((base == BASE_BINARY) && (len < PRINTF_INTEGER_BUFFER_SIZE)) {
 8001412:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001416:	2b02      	cmp	r3, #2
 8001418:	d109      	bne.n	800142e <print_integer_finalization+0x16a>
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	2b1f      	cmp	r3, #31
 800141e:	d806      	bhi.n	800142e <print_integer_finalization+0x16a>
      buf[len++] = 'b';
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	1c5a      	adds	r2, r3, #1
 8001424:	607a      	str	r2, [r7, #4]
 8001426:	68ba      	ldr	r2, [r7, #8]
 8001428:	4413      	add	r3, r2
 800142a:	2262      	movs	r2, #98	; 0x62
 800142c:	701a      	strb	r2, [r3, #0]
    }
    if (len < PRINTF_INTEGER_BUFFER_SIZE) {
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	2b1f      	cmp	r3, #31
 8001432:	d806      	bhi.n	8001442 <print_integer_finalization+0x17e>
      buf[len++] = '0';
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	1c5a      	adds	r2, r3, #1
 8001438:	607a      	str	r2, [r7, #4]
 800143a:	68ba      	ldr	r2, [r7, #8]
 800143c:	4413      	add	r3, r2
 800143e:	2230      	movs	r2, #48	; 0x30
 8001440:	701a      	strb	r2, [r3, #0]
    }
  }

  if (len < PRINTF_INTEGER_BUFFER_SIZE) {
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	2b1f      	cmp	r3, #31
 8001446:	d823      	bhi.n	8001490 <print_integer_finalization+0x1cc>
    if (negative) {
 8001448:	78fb      	ldrb	r3, [r7, #3]
 800144a:	2b00      	cmp	r3, #0
 800144c:	d007      	beq.n	800145e <print_integer_finalization+0x19a>
      buf[len++] = '-';
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	1c5a      	adds	r2, r3, #1
 8001452:	607a      	str	r2, [r7, #4]
 8001454:	68ba      	ldr	r2, [r7, #8]
 8001456:	4413      	add	r3, r2
 8001458:	222d      	movs	r2, #45	; 0x2d
 800145a:	701a      	strb	r2, [r3, #0]
 800145c:	e018      	b.n	8001490 <print_integer_finalization+0x1cc>
    }
    else if (flags & FLAGS_PLUS) {
 800145e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001460:	f003 0304 	and.w	r3, r3, #4
 8001464:	2b00      	cmp	r3, #0
 8001466:	d007      	beq.n	8001478 <print_integer_finalization+0x1b4>
      buf[len++] = '+';  // ignore the space if the '+' exists
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	1c5a      	adds	r2, r3, #1
 800146c:	607a      	str	r2, [r7, #4]
 800146e:	68ba      	ldr	r2, [r7, #8]
 8001470:	4413      	add	r3, r2
 8001472:	222b      	movs	r2, #43	; 0x2b
 8001474:	701a      	strb	r2, [r3, #0]
 8001476:	e00b      	b.n	8001490 <print_integer_finalization+0x1cc>
    }
    else if (flags & FLAGS_SPACE) {
 8001478:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800147a:	f003 0308 	and.w	r3, r3, #8
 800147e:	2b00      	cmp	r3, #0
 8001480:	d006      	beq.n	8001490 <print_integer_finalization+0x1cc>
      buf[len++] = ' ';
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	1c5a      	adds	r2, r3, #1
 8001486:	607a      	str	r2, [r7, #4]
 8001488:	68ba      	ldr	r2, [r7, #8]
 800148a:	4413      	add	r3, r2
 800148c:	2220      	movs	r2, #32
 800148e:	701a      	strb	r2, [r3, #0]
    }
  }

  out_rev_(output, buf, len, width, flags);
 8001490:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001492:	9300      	str	r3, [sp, #0]
 8001494:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001496:	687a      	ldr	r2, [r7, #4]
 8001498:	68b9      	ldr	r1, [r7, #8]
 800149a:	68f8      	ldr	r0, [r7, #12]
 800149c:	f7ff fecc 	bl	8001238 <out_rev_>
}
 80014a0:	bf00      	nop
 80014a2:	3718      	adds	r7, #24
 80014a4:	46bd      	mov	sp, r7
 80014a6:	bd80      	pop	{r7, pc}

080014a8 <print_integer>:

// An internal itoa-like function
static void print_integer(output_gadget_t* output, printf_unsigned_value_t value, bool negative, numeric_base_t base, printf_size_t precision, printf_size_t width, printf_flags_t flags)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b092      	sub	sp, #72	; 0x48
 80014ac:	af04      	add	r7, sp, #16
 80014ae:	60f8      	str	r0, [r7, #12]
 80014b0:	60b9      	str	r1, [r7, #8]
 80014b2:	4611      	mov	r1, r2
 80014b4:	461a      	mov	r2, r3
 80014b6:	460b      	mov	r3, r1
 80014b8:	71fb      	strb	r3, [r7, #7]
 80014ba:	4613      	mov	r3, r2
 80014bc:	71bb      	strb	r3, [r7, #6]
  char buf[PRINTF_INTEGER_BUFFER_SIZE];
  printf_size_t len = 0U;
 80014be:	2300      	movs	r3, #0
 80014c0:	637b      	str	r3, [r7, #52]	; 0x34

  if (!value) {
 80014c2:	68bb      	ldr	r3, [r7, #8]
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d119      	bne.n	80014fc <print_integer+0x54>
    if ( !(flags & FLAGS_PRECISION) ) {
 80014c8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80014ca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d10c      	bne.n	80014ec <print_integer+0x44>
      buf[len++] = '0';
 80014d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80014d4:	1c5a      	adds	r2, r3, #1
 80014d6:	637a      	str	r2, [r7, #52]	; 0x34
 80014d8:	3338      	adds	r3, #56	; 0x38
 80014da:	443b      	add	r3, r7
 80014dc:	2230      	movs	r2, #48	; 0x30
 80014de:	f803 2c28 	strb.w	r2, [r3, #-40]
      flags &= ~FLAGS_HASH;
 80014e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80014e4:	f023 0310 	bic.w	r3, r3, #16
 80014e8:	64bb      	str	r3, [r7, #72]	; 0x48
 80014ea:	e039      	b.n	8001560 <print_integer+0xb8>
      // We drop this flag this since either the alternative and regular modes of the specifier
      // don't differ on 0 values, or (in the case of octal) we've already provided the special
      // handling for this mode.
    }
    else if (base == BASE_HEX) {
 80014ec:	79bb      	ldrb	r3, [r7, #6]
 80014ee:	2b10      	cmp	r3, #16
 80014f0:	d136      	bne.n	8001560 <print_integer+0xb8>
      flags &= ~FLAGS_HASH;
 80014f2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80014f4:	f023 0310 	bic.w	r3, r3, #16
 80014f8:	64bb      	str	r3, [r7, #72]	; 0x48
 80014fa:	e031      	b.n	8001560 <print_integer+0xb8>
      // don't differ on 0 values
    }
  }
  else {
    do {
      const char digit = (char)(value % base);
 80014fc:	79ba      	ldrb	r2, [r7, #6]
 80014fe:	68bb      	ldr	r3, [r7, #8]
 8001500:	fbb3 f1f2 	udiv	r1, r3, r2
 8001504:	fb01 f202 	mul.w	r2, r1, r2
 8001508:	1a9b      	subs	r3, r3, r2
 800150a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      buf[len++] = (char)(digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10);
 800150e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001512:	2b09      	cmp	r3, #9
 8001514:	d804      	bhi.n	8001520 <print_integer+0x78>
 8001516:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800151a:	3330      	adds	r3, #48	; 0x30
 800151c:	b2da      	uxtb	r2, r3
 800151e:	e00d      	b.n	800153c <print_integer+0x94>
 8001520:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001522:	f003 0320 	and.w	r3, r3, #32
 8001526:	2b00      	cmp	r3, #0
 8001528:	d001      	beq.n	800152e <print_integer+0x86>
 800152a:	2241      	movs	r2, #65	; 0x41
 800152c:	e000      	b.n	8001530 <print_integer+0x88>
 800152e:	2261      	movs	r2, #97	; 0x61
 8001530:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001534:	4413      	add	r3, r2
 8001536:	b2db      	uxtb	r3, r3
 8001538:	3b0a      	subs	r3, #10
 800153a:	b2da      	uxtb	r2, r3
 800153c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800153e:	1c59      	adds	r1, r3, #1
 8001540:	6379      	str	r1, [r7, #52]	; 0x34
 8001542:	3338      	adds	r3, #56	; 0x38
 8001544:	443b      	add	r3, r7
 8001546:	f803 2c28 	strb.w	r2, [r3, #-40]
      value /= base;
 800154a:	79bb      	ldrb	r3, [r7, #6]
 800154c:	68ba      	ldr	r2, [r7, #8]
 800154e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001552:	60bb      	str	r3, [r7, #8]
    } while (value && (len < PRINTF_INTEGER_BUFFER_SIZE));
 8001554:	68bb      	ldr	r3, [r7, #8]
 8001556:	2b00      	cmp	r3, #0
 8001558:	d002      	beq.n	8001560 <print_integer+0xb8>
 800155a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800155c:	2b1f      	cmp	r3, #31
 800155e:	d9cd      	bls.n	80014fc <print_integer+0x54>
  }

  print_integer_finalization(output, buf, len, negative, base, precision, width, flags);
 8001560:	79fa      	ldrb	r2, [r7, #7]
 8001562:	f107 0110 	add.w	r1, r7, #16
 8001566:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001568:	9303      	str	r3, [sp, #12]
 800156a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800156c:	9302      	str	r3, [sp, #8]
 800156e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001570:	9301      	str	r3, [sp, #4]
 8001572:	79bb      	ldrb	r3, [r7, #6]
 8001574:	9300      	str	r3, [sp, #0]
 8001576:	4613      	mov	r3, r2
 8001578:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800157a:	68f8      	ldr	r0, [r7, #12]
 800157c:	f7ff fea2 	bl	80012c4 <print_integer_finalization>
}
 8001580:	bf00      	nop
 8001582:	3738      	adds	r7, #56	; 0x38
 8001584:	46bd      	mov	sp, r7
 8001586:	bd80      	pop	{r7, pc}

08001588 <get_components>:

// Break up a double number - which is known to be a finite non-negative number -
// into its base-10 parts: integral - before the decimal point, and fractional - after it.
// Taken the precision into account, but does not change it even internally.
static struct double_components get_components(double number, printf_size_t precision)
{
 8001588:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800158c:	b096      	sub	sp, #88	; 0x58
 800158e:	af00      	add	r7, sp, #0
 8001590:	62f8      	str	r0, [r7, #44]	; 0x2c
 8001592:	ed87 0b08 	vstr	d0, [r7, #32]
 8001596:	62b9      	str	r1, [r7, #40]	; 0x28
  struct double_components number_;
  number_.is_negative = get_sign_bit(number);
 8001598:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800159c:	f7ff fd46 	bl	800102c <get_sign_bit>
 80015a0:	4603      	mov	r3, r0
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	bf14      	ite	ne
 80015a6:	2301      	movne	r3, #1
 80015a8:	2300      	moveq	r3, #0
 80015aa:	b2db      	uxtb	r3, r3
 80015ac:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
  double abs_number = (number_.is_negative) ? -number : number;
 80015b0:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d004      	beq.n	80015c2 <get_components+0x3a>
 80015b8:	6a3c      	ldr	r4, [r7, #32]
 80015ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015bc:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 80015c0:	e001      	b.n	80015c6 <get_components+0x3e>
 80015c2:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80015c6:	e9c7 4514 	strd	r4, r5, [r7, #80]	; 0x50
  number_.integral = (int_fast64_t)abs_number;
 80015ca:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80015ce:	f7ff f9d5 	bl	800097c <__aeabi_d2lz>
 80015d2:	4602      	mov	r2, r0
 80015d4:	460b      	mov	r3, r1
 80015d6:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
  double remainder = (abs_number - (double) number_.integral) * powers_of_10[precision];
 80015da:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80015de:	4610      	mov	r0, r2
 80015e0:	4619      	mov	r1, r3
 80015e2:	f7ff f8ad 	bl	8000740 <__aeabi_l2d>
 80015e6:	4602      	mov	r2, r0
 80015e8:	460b      	mov	r3, r1
 80015ea:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80015ee:	f7fe ff1d 	bl	800042c <__aeabi_dsub>
 80015f2:	4602      	mov	r2, r0
 80015f4:	460b      	mov	r3, r1
 80015f6:	4610      	mov	r0, r2
 80015f8:	4619      	mov	r1, r3
 80015fa:	4a69      	ldr	r2, [pc, #420]	; (80017a0 <get_components+0x218>)
 80015fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015fe:	00db      	lsls	r3, r3, #3
 8001600:	4413      	add	r3, r2
 8001602:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001606:	f7fe fde3 	bl	80001d0 <__aeabi_dmul>
 800160a:	4602      	mov	r2, r0
 800160c:	460b      	mov	r3, r1
 800160e:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
  number_.fractional = (int_fast64_t)remainder;
 8001612:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8001616:	f7ff f9b1 	bl	800097c <__aeabi_d2lz>
 800161a:	4602      	mov	r2, r0
 800161c:	460b      	mov	r3, r1
 800161e:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38

  remainder -= (double) number_.fractional;
 8001622:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8001626:	4610      	mov	r0, r2
 8001628:	4619      	mov	r1, r3
 800162a:	f7ff f889 	bl	8000740 <__aeabi_l2d>
 800162e:	4602      	mov	r2, r0
 8001630:	460b      	mov	r3, r1
 8001632:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8001636:	f7fe fef9 	bl	800042c <__aeabi_dsub>
 800163a:	4602      	mov	r2, r0
 800163c:	460b      	mov	r3, r1
 800163e:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48

  if (remainder > 0.5) {
 8001642:	f04f 0200 	mov.w	r2, #0
 8001646:	4b57      	ldr	r3, [pc, #348]	; (80017a4 <get_components+0x21c>)
 8001648:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800164c:	f7ff f924 	bl	8000898 <__aeabi_dcmpgt>
 8001650:	4603      	mov	r3, r0
 8001652:	2b00      	cmp	r3, #0
 8001654:	d02d      	beq.n	80016b2 <get_components+0x12a>
    ++number_.fractional;
 8001656:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800165a:	1c51      	adds	r1, r2, #1
 800165c:	61b9      	str	r1, [r7, #24]
 800165e:	f143 0300 	adc.w	r3, r3, #0
 8001662:	61fb      	str	r3, [r7, #28]
 8001664:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8001668:	e9c7 340e 	strd	r3, r4, [r7, #56]	; 0x38
    // handle rollover, e.g. case 0.99 with precision 1 is 1.0
    if ((double) number_.fractional >= powers_of_10[precision]) {
 800166c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8001670:	4610      	mov	r0, r2
 8001672:	4619      	mov	r1, r3
 8001674:	f7ff f864 	bl	8000740 <__aeabi_l2d>
 8001678:	4a49      	ldr	r2, [pc, #292]	; (80017a0 <get_components+0x218>)
 800167a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800167c:	00db      	lsls	r3, r3, #3
 800167e:	4413      	add	r3, r2
 8001680:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001684:	f7ff f8fe 	bl	8000884 <__aeabi_dcmpge>
 8001688:	4603      	mov	r3, r0
 800168a:	2b00      	cmp	r3, #0
 800168c:	d033      	beq.n	80016f6 <get_components+0x16e>
      number_.fractional = 0;
 800168e:	f04f 0200 	mov.w	r2, #0
 8001692:	f04f 0300 	mov.w	r3, #0
 8001696:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
      ++number_.integral;
 800169a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800169e:	1c51      	adds	r1, r2, #1
 80016a0:	6139      	str	r1, [r7, #16]
 80016a2:	f143 0300 	adc.w	r3, r3, #0
 80016a6:	617b      	str	r3, [r7, #20]
 80016a8:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 80016ac:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
 80016b0:	e021      	b.n	80016f6 <get_components+0x16e>
    }
  }
  else if ((remainder == 0.5) && ((number_.fractional == 0U) || (number_.fractional & 1U))) {
 80016b2:	f04f 0200 	mov.w	r2, #0
 80016b6:	4b3b      	ldr	r3, [pc, #236]	; (80017a4 <get_components+0x21c>)
 80016b8:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80016bc:	f7ff f8c4 	bl	8000848 <__aeabi_dcmpeq>
 80016c0:	4603      	mov	r3, r0
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d017      	beq.n	80016f6 <get_components+0x16e>
 80016c6:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80016ca:	4313      	orrs	r3, r2
 80016cc:	d008      	beq.n	80016e0 <get_components+0x158>
 80016ce:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80016d2:	f002 0a01 	and.w	sl, r2, #1
 80016d6:	f04f 0b00 	mov.w	fp, #0
 80016da:	ea5a 030b 	orrs.w	r3, sl, fp
 80016de:	d00a      	beq.n	80016f6 <get_components+0x16e>
    // if halfway, round up if odd OR if last digit is 0
    ++number_.fractional;
 80016e0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80016e4:	1c51      	adds	r1, r2, #1
 80016e6:	60b9      	str	r1, [r7, #8]
 80016e8:	f143 0300 	adc.w	r3, r3, #0
 80016ec:	60fb      	str	r3, [r7, #12]
 80016ee:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80016f2:	e9c7 340e 	strd	r3, r4, [r7, #56]	; 0x38
  }

  if (precision == 0U) {
 80016f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d141      	bne.n	8001780 <get_components+0x1f8>
    remainder = abs_number - (double) number_.integral;
 80016fc:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001700:	4610      	mov	r0, r2
 8001702:	4619      	mov	r1, r3
 8001704:	f7ff f81c 	bl	8000740 <__aeabi_l2d>
 8001708:	4602      	mov	r2, r0
 800170a:	460b      	mov	r3, r1
 800170c:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8001710:	f7fe fe8c 	bl	800042c <__aeabi_dsub>
 8001714:	4602      	mov	r2, r0
 8001716:	460b      	mov	r3, r1
 8001718:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
    if ((!(remainder < 0.5) || (remainder > 0.5)) && (number_.integral & 1)) {
 800171c:	2301      	movs	r3, #1
 800171e:	461c      	mov	r4, r3
 8001720:	f04f 0200 	mov.w	r2, #0
 8001724:	4b1f      	ldr	r3, [pc, #124]	; (80017a4 <get_components+0x21c>)
 8001726:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800172a:	f7ff f897 	bl	800085c <__aeabi_dcmplt>
 800172e:	4603      	mov	r3, r0
 8001730:	2b00      	cmp	r3, #0
 8001732:	d101      	bne.n	8001738 <get_components+0x1b0>
 8001734:	2300      	movs	r3, #0
 8001736:	461c      	mov	r4, r3
 8001738:	b2e3      	uxtb	r3, r4
 800173a:	f083 0301 	eor.w	r3, r3, #1
 800173e:	b2db      	uxtb	r3, r3
 8001740:	2b00      	cmp	r3, #0
 8001742:	d109      	bne.n	8001758 <get_components+0x1d0>
 8001744:	f04f 0200 	mov.w	r2, #0
 8001748:	4b16      	ldr	r3, [pc, #88]	; (80017a4 <get_components+0x21c>)
 800174a:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800174e:	f7ff f8a3 	bl	8000898 <__aeabi_dcmpgt>
 8001752:	4603      	mov	r3, r0
 8001754:	2b00      	cmp	r3, #0
 8001756:	d013      	beq.n	8001780 <get_components+0x1f8>
 8001758:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800175c:	f002 0801 	and.w	r8, r2, #1
 8001760:	f04f 0900 	mov.w	r9, #0
 8001764:	ea58 0309 	orrs.w	r3, r8, r9
 8001768:	d00a      	beq.n	8001780 <get_components+0x1f8>
      // exactly 0.5 and ODD, then round up
      // 1.5 -> 2, but 2.5 -> 2
      ++number_.integral;
 800176a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800176e:	1c51      	adds	r1, r2, #1
 8001770:	6039      	str	r1, [r7, #0]
 8001772:	f143 0300 	adc.w	r3, r3, #0
 8001776:	607b      	str	r3, [r7, #4]
 8001778:	e9d7 3400 	ldrd	r3, r4, [r7]
 800177c:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
    }
  }
  return number_;
 8001780:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001782:	461d      	mov	r5, r3
 8001784:	f107 0430 	add.w	r4, r7, #48	; 0x30
 8001788:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800178a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800178c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001790:	e885 0003 	stmia.w	r5, {r0, r1}
}
 8001794:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001796:	3758      	adds	r7, #88	; 0x58
 8001798:	46bd      	mov	sp, r7
 800179a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800179e:	bf00      	nop
 80017a0:	08009e00 	.word	0x08009e00
 80017a4:	3fe00000 	.word	0x3fe00000

080017a8 <print_broken_up_decimal>:
#endif // PRINTF_SUPPORT_EXPONENTIAL_SPECIFIERS

static void print_broken_up_decimal(
  struct double_components number_, output_gadget_t* output, printf_size_t precision,
  printf_size_t width, printf_flags_t flags, char *buf, printf_size_t len)
{
 80017a8:	b084      	sub	sp, #16
 80017aa:	b580      	push	{r7, lr}
 80017ac:	b086      	sub	sp, #24
 80017ae:	af02      	add	r7, sp, #8
 80017b0:	f107 0c18 	add.w	ip, r7, #24
 80017b4:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
  if (precision != 0U) {
 80017b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	f000 8087 	beq.w	80018ce <print_broken_up_decimal+0x126>
    // do fractional part, as an unsigned number

    printf_size_t count = precision;
 80017c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80017c2:	60fb      	str	r3, [r7, #12]

    // %g/%G mandates we skip the trailing 0 digits...
    if ((flags & FLAGS_ADAPT_EXP) && !(flags & FLAGS_HASH) && (number_.fractional > 0)) {
 80017c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80017c6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d029      	beq.n	8001822 <print_broken_up_decimal+0x7a>
 80017ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80017d0:	f003 0310 	and.w	r3, r3, #16
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d124      	bne.n	8001822 <print_broken_up_decimal+0x7a>
 80017d8:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80017dc:	2a01      	cmp	r2, #1
 80017de:	f173 0300 	sbcs.w	r3, r3, #0
 80017e2:	db1e      	blt.n	8001822 <print_broken_up_decimal+0x7a>
      while(true) {
        int_fast64_t digit = number_.fractional % 10U;
 80017e4:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80017e8:	f04f 020a 	mov.w	r2, #10
 80017ec:	f04f 0300 	mov.w	r3, #0
 80017f0:	f7ff f85c 	bl	80008ac <__aeabi_ldivmod>
 80017f4:	e9c7 2300 	strd	r2, r3, [r7]
        if (digit != 0) {
 80017f8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80017fc:	4313      	orrs	r3, r2
 80017fe:	d10f      	bne.n	8001820 <print_broken_up_decimal+0x78>
          break;
        }
        --count;
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	3b01      	subs	r3, #1
 8001804:	60fb      	str	r3, [r7, #12]
        number_.fractional /= 10U;
 8001806:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800180a:	f04f 020a 	mov.w	r2, #10
 800180e:	f04f 0300 	mov.w	r3, #0
 8001812:	f7ff f84b 	bl	80008ac <__aeabi_ldivmod>
 8001816:	4602      	mov	r2, r0
 8001818:	460b      	mov	r3, r1
 800181a:	e9c7 2308 	strd	r2, r3, [r7, #32]
      while(true) {
 800181e:	e7e1      	b.n	80017e4 <print_broken_up_decimal+0x3c>
          break;
 8001820:	bf00      	nop
      }
      // ... and even the decimal point if there are no
      // non-zero fractional part digits (see below)
    }

    if (number_.fractional > 0 || !(flags & FLAGS_ADAPT_EXP) || (flags & FLAGS_HASH) ) {
 8001822:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001826:	2a01      	cmp	r2, #1
 8001828:	f173 0300 	sbcs.w	r3, r3, #0
 800182c:	da2e      	bge.n	800188c <print_broken_up_decimal+0xe4>
 800182e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001830:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001834:	2b00      	cmp	r3, #0
 8001836:	d029      	beq.n	800188c <print_broken_up_decimal+0xe4>
 8001838:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800183a:	f003 0310 	and.w	r3, r3, #16
 800183e:	2b00      	cmp	r3, #0
 8001840:	d076      	beq.n	8001930 <print_broken_up_decimal+0x188>
      while (len < PRINTF_DECIMAL_BUFFER_SIZE) {
 8001842:	e023      	b.n	800188c <print_broken_up_decimal+0xe4>
        --count;
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	3b01      	subs	r3, #1
 8001848:	60fb      	str	r3, [r7, #12]
        buf[len++] = (char)('0' + number_.fractional % 10U);
 800184a:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800184e:	f04f 020a 	mov.w	r2, #10
 8001852:	f04f 0300 	mov.w	r3, #0
 8001856:	f7ff f829 	bl	80008ac <__aeabi_ldivmod>
 800185a:	b2d2      	uxtb	r2, r2
 800185c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800185e:	1c59      	adds	r1, r3, #1
 8001860:	6479      	str	r1, [r7, #68]	; 0x44
 8001862:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8001864:	440b      	add	r3, r1
 8001866:	3230      	adds	r2, #48	; 0x30
 8001868:	b2d2      	uxtb	r2, r2
 800186a:	701a      	strb	r2, [r3, #0]
        if (!(number_.fractional /= 10U)) {
 800186c:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001870:	f04f 020a 	mov.w	r2, #10
 8001874:	f04f 0300 	mov.w	r3, #0
 8001878:	f7ff f818 	bl	80008ac <__aeabi_ldivmod>
 800187c:	4602      	mov	r2, r0
 800187e:	460b      	mov	r3, r1
 8001880:	e9c7 2308 	strd	r2, r3, [r7, #32]
 8001884:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001888:	4313      	orrs	r3, r2
 800188a:	d003      	beq.n	8001894 <print_broken_up_decimal+0xec>
      while (len < PRINTF_DECIMAL_BUFFER_SIZE) {
 800188c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800188e:	2b1f      	cmp	r3, #31
 8001890:	d9d8      	bls.n	8001844 <print_broken_up_decimal+0x9c>
 8001892:	e00b      	b.n	80018ac <print_broken_up_decimal+0x104>
          break;
 8001894:	bf00      	nop
        }
      }
      // add extra 0s
      while ((len < PRINTF_DECIMAL_BUFFER_SIZE) && (count > 0U)) {
 8001896:	e009      	b.n	80018ac <print_broken_up_decimal+0x104>
        buf[len++] = '0';
 8001898:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800189a:	1c5a      	adds	r2, r3, #1
 800189c:	647a      	str	r2, [r7, #68]	; 0x44
 800189e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80018a0:	4413      	add	r3, r2
 80018a2:	2230      	movs	r2, #48	; 0x30
 80018a4:	701a      	strb	r2, [r3, #0]
        --count;
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	3b01      	subs	r3, #1
 80018aa:	60fb      	str	r3, [r7, #12]
      while ((len < PRINTF_DECIMAL_BUFFER_SIZE) && (count > 0U)) {
 80018ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80018ae:	2b1f      	cmp	r3, #31
 80018b0:	d802      	bhi.n	80018b8 <print_broken_up_decimal+0x110>
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d1ef      	bne.n	8001898 <print_broken_up_decimal+0xf0>
      }
      if (len < PRINTF_DECIMAL_BUFFER_SIZE) {
 80018b8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80018ba:	2b1f      	cmp	r3, #31
 80018bc:	d838      	bhi.n	8001930 <print_broken_up_decimal+0x188>
        buf[len++] = '.';
 80018be:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80018c0:	1c5a      	adds	r2, r3, #1
 80018c2:	647a      	str	r2, [r7, #68]	; 0x44
 80018c4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80018c6:	4413      	add	r3, r2
 80018c8:	222e      	movs	r2, #46	; 0x2e
 80018ca:	701a      	strb	r2, [r3, #0]
 80018cc:	e030      	b.n	8001930 <print_broken_up_decimal+0x188>
      }
    }
  }
  else {
    if ((flags & FLAGS_HASH) && (len < PRINTF_DECIMAL_BUFFER_SIZE)) {
 80018ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80018d0:	f003 0310 	and.w	r3, r3, #16
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d02b      	beq.n	8001930 <print_broken_up_decimal+0x188>
 80018d8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80018da:	2b1f      	cmp	r3, #31
 80018dc:	d828      	bhi.n	8001930 <print_broken_up_decimal+0x188>
      buf[len++] = '.';
 80018de:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80018e0:	1c5a      	adds	r2, r3, #1
 80018e2:	647a      	str	r2, [r7, #68]	; 0x44
 80018e4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80018e6:	4413      	add	r3, r2
 80018e8:	222e      	movs	r2, #46	; 0x2e
 80018ea:	701a      	strb	r2, [r3, #0]
    }
  }

  // Write the integer part of the number (it comes after the fractional
  // since the character order is reversed)
  while (len < PRINTF_DECIMAL_BUFFER_SIZE) {
 80018ec:	e020      	b.n	8001930 <print_broken_up_decimal+0x188>
    buf[len++] = (char)('0' + (number_.integral % 10));
 80018ee:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80018f2:	f04f 020a 	mov.w	r2, #10
 80018f6:	f04f 0300 	mov.w	r3, #0
 80018fa:	f7fe ffd7 	bl	80008ac <__aeabi_ldivmod>
 80018fe:	b2d2      	uxtb	r2, r2
 8001900:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001902:	1c59      	adds	r1, r3, #1
 8001904:	6479      	str	r1, [r7, #68]	; 0x44
 8001906:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8001908:	440b      	add	r3, r1
 800190a:	3230      	adds	r2, #48	; 0x30
 800190c:	b2d2      	uxtb	r2, r2
 800190e:	701a      	strb	r2, [r3, #0]
    if (!(number_.integral /= 10)) {
 8001910:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001914:	f04f 020a 	mov.w	r2, #10
 8001918:	f04f 0300 	mov.w	r3, #0
 800191c:	f7fe ffc6 	bl	80008ac <__aeabi_ldivmod>
 8001920:	4602      	mov	r2, r0
 8001922:	460b      	mov	r3, r1
 8001924:	e9c7 2306 	strd	r2, r3, [r7, #24]
 8001928:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800192c:	4313      	orrs	r3, r2
 800192e:	d003      	beq.n	8001938 <print_broken_up_decimal+0x190>
  while (len < PRINTF_DECIMAL_BUFFER_SIZE) {
 8001930:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001932:	2b1f      	cmp	r3, #31
 8001934:	d9db      	bls.n	80018ee <print_broken_up_decimal+0x146>
 8001936:	e000      	b.n	800193a <print_broken_up_decimal+0x192>
      break;
 8001938:	bf00      	nop
    }
  }

  // pad leading zeros
  if (!(flags & FLAGS_LEFT) && (flags & FLAGS_ZEROPAD)) {
 800193a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800193c:	f003 0302 	and.w	r3, r3, #2
 8001940:	2b00      	cmp	r3, #0
 8001942:	d122      	bne.n	800198a <print_broken_up_decimal+0x1e2>
 8001944:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001946:	f003 0301 	and.w	r3, r3, #1
 800194a:	2b00      	cmp	r3, #0
 800194c:	d01d      	beq.n	800198a <print_broken_up_decimal+0x1e2>
    if (width && (number_.is_negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
 800194e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001950:	2b00      	cmp	r3, #0
 8001952:	d013      	beq.n	800197c <print_broken_up_decimal+0x1d4>
 8001954:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001958:	2b00      	cmp	r3, #0
 800195a:	d104      	bne.n	8001966 <print_broken_up_decimal+0x1be>
 800195c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800195e:	f003 030c 	and.w	r3, r3, #12
 8001962:	2b00      	cmp	r3, #0
 8001964:	d00a      	beq.n	800197c <print_broken_up_decimal+0x1d4>
      width--;
 8001966:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001968:	3b01      	subs	r3, #1
 800196a:	63bb      	str	r3, [r7, #56]	; 0x38
    }
    while ((len < width) && (len < PRINTF_DECIMAL_BUFFER_SIZE)) {
 800196c:	e006      	b.n	800197c <print_broken_up_decimal+0x1d4>
      buf[len++] = '0';
 800196e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001970:	1c5a      	adds	r2, r3, #1
 8001972:	647a      	str	r2, [r7, #68]	; 0x44
 8001974:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001976:	4413      	add	r3, r2
 8001978:	2230      	movs	r2, #48	; 0x30
 800197a:	701a      	strb	r2, [r3, #0]
    while ((len < width) && (len < PRINTF_DECIMAL_BUFFER_SIZE)) {
 800197c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800197e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001980:	429a      	cmp	r2, r3
 8001982:	d202      	bcs.n	800198a <print_broken_up_decimal+0x1e2>
 8001984:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001986:	2b1f      	cmp	r3, #31
 8001988:	d9f1      	bls.n	800196e <print_broken_up_decimal+0x1c6>
    }
  }

  if (len < PRINTF_DECIMAL_BUFFER_SIZE) {
 800198a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800198c:	2b1f      	cmp	r3, #31
 800198e:	d824      	bhi.n	80019da <print_broken_up_decimal+0x232>
    if (number_.is_negative) {
 8001990:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001994:	2b00      	cmp	r3, #0
 8001996:	d007      	beq.n	80019a8 <print_broken_up_decimal+0x200>
      buf[len++] = '-';
 8001998:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800199a:	1c5a      	adds	r2, r3, #1
 800199c:	647a      	str	r2, [r7, #68]	; 0x44
 800199e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80019a0:	4413      	add	r3, r2
 80019a2:	222d      	movs	r2, #45	; 0x2d
 80019a4:	701a      	strb	r2, [r3, #0]
 80019a6:	e018      	b.n	80019da <print_broken_up_decimal+0x232>
    }
    else if (flags & FLAGS_PLUS) {
 80019a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80019aa:	f003 0304 	and.w	r3, r3, #4
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d007      	beq.n	80019c2 <print_broken_up_decimal+0x21a>
      buf[len++] = '+';  // ignore the space if the '+' exists
 80019b2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80019b4:	1c5a      	adds	r2, r3, #1
 80019b6:	647a      	str	r2, [r7, #68]	; 0x44
 80019b8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80019ba:	4413      	add	r3, r2
 80019bc:	222b      	movs	r2, #43	; 0x2b
 80019be:	701a      	strb	r2, [r3, #0]
 80019c0:	e00b      	b.n	80019da <print_broken_up_decimal+0x232>
    }
    else if (flags & FLAGS_SPACE) {
 80019c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80019c4:	f003 0308 	and.w	r3, r3, #8
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d006      	beq.n	80019da <print_broken_up_decimal+0x232>
      buf[len++] = ' ';
 80019cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80019ce:	1c5a      	adds	r2, r3, #1
 80019d0:	647a      	str	r2, [r7, #68]	; 0x44
 80019d2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80019d4:	4413      	add	r3, r2
 80019d6:	2220      	movs	r2, #32
 80019d8:	701a      	strb	r2, [r3, #0]
    }
  }

  out_rev_(output, buf, len, width, flags);
 80019da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80019dc:	9300      	str	r3, [sp, #0]
 80019de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80019e0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80019e2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80019e4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80019e6:	f7ff fc27 	bl	8001238 <out_rev_>
}
 80019ea:	bf00      	nop
 80019ec:	3710      	adds	r7, #16
 80019ee:	46bd      	mov	sp, r7
 80019f0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80019f4:	b004      	add	sp, #16
 80019f6:	4770      	bx	lr

080019f8 <print_decimal_number>:

      // internal ftoa for fixed decimal floating point
static void print_decimal_number(output_gadget_t* output, double number, printf_size_t precision, printf_size_t width, printf_flags_t flags, char* buf, printf_size_t len)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b094      	sub	sp, #80	; 0x50
 80019fc:	af08      	add	r7, sp, #32
 80019fe:	6178      	str	r0, [r7, #20]
 8001a00:	ed87 0b02 	vstr	d0, [r7, #8]
 8001a04:	6139      	str	r1, [r7, #16]
 8001a06:	607a      	str	r2, [r7, #4]
 8001a08:	603b      	str	r3, [r7, #0]
  struct double_components value_ = get_components(number, precision);
 8001a0a:	f107 0318 	add.w	r3, r7, #24
 8001a0e:	6939      	ldr	r1, [r7, #16]
 8001a10:	ed97 0b02 	vldr	d0, [r7, #8]
 8001a14:	4618      	mov	r0, r3
 8001a16:	f7ff fdb7 	bl	8001588 <get_components>
  print_broken_up_decimal(value_, output, precision, width, flags, buf, len);
 8001a1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001a1c:	9307      	str	r3, [sp, #28]
 8001a1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001a20:	9306      	str	r3, [sp, #24]
 8001a22:	683b      	ldr	r3, [r7, #0]
 8001a24:	9305      	str	r3, [sp, #20]
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	9304      	str	r3, [sp, #16]
 8001a2a:	693b      	ldr	r3, [r7, #16]
 8001a2c:	9303      	str	r3, [sp, #12]
 8001a2e:	697b      	ldr	r3, [r7, #20]
 8001a30:	9302      	str	r3, [sp, #8]
 8001a32:	466a      	mov	r2, sp
 8001a34:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001a38:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001a3c:	e882 0003 	stmia.w	r2, {r0, r1}
 8001a40:	f107 0318 	add.w	r3, r7, #24
 8001a44:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001a46:	f7ff feaf 	bl	80017a8 <print_broken_up_decimal>
}
 8001a4a:	bf00      	nop
 8001a4c:	3730      	adds	r7, #48	; 0x30
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	bd80      	pop	{r7, pc}
 8001a52:	0000      	movs	r0, r0
 8001a54:	0000      	movs	r0, r0
	...

08001a58 <print_floating_point>:
  }
}
#endif  // PRINTF_SUPPORT_EXPONENTIAL_SPECIFIERS

static void print_floating_point(output_gadget_t* output, double value, printf_size_t precision, printf_size_t width, printf_flags_t flags, bool prefer_exponential)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b092      	sub	sp, #72	; 0x48
 8001a5c:	af02      	add	r7, sp, #8
 8001a5e:	6178      	str	r0, [r7, #20]
 8001a60:	ed87 0b02 	vstr	d0, [r7, #8]
 8001a64:	6139      	str	r1, [r7, #16]
 8001a66:	607a      	str	r2, [r7, #4]
 8001a68:	603b      	str	r3, [r7, #0]
  char buf[PRINTF_DECIMAL_BUFFER_SIZE];
  printf_size_t len = 0U;
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	63fb      	str	r3, [r7, #60]	; 0x3c

  // test for special values
  if (value != value) {
 8001a6e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001a72:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001a76:	f7fe fee7 	bl	8000848 <__aeabi_dcmpeq>
 8001a7a:	4603      	mov	r3, r0
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d108      	bne.n	8001a92 <print_floating_point+0x3a>
    out_rev_(output, "nan", 3, width, flags);
 8001a80:	683b      	ldr	r3, [r7, #0]
 8001a82:	9300      	str	r3, [sp, #0]
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	2203      	movs	r2, #3
 8001a88:	4943      	ldr	r1, [pc, #268]	; (8001b98 <print_floating_point+0x140>)
 8001a8a:	6978      	ldr	r0, [r7, #20]
 8001a8c:	f7ff fbd4 	bl	8001238 <out_rev_>
    return;
 8001a90:	e077      	b.n	8001b82 <print_floating_point+0x12a>
  }
  if (value < -DBL_MAX) {
 8001a92:	f04f 32ff 	mov.w	r2, #4294967295
 8001a96:	f46f 1380 	mvn.w	r3, #1048576	; 0x100000
 8001a9a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001a9e:	f7fe fedd 	bl	800085c <__aeabi_dcmplt>
 8001aa2:	4603      	mov	r3, r0
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d008      	beq.n	8001aba <print_floating_point+0x62>
    out_rev_(output, "fni-", 4, width, flags);
 8001aa8:	683b      	ldr	r3, [r7, #0]
 8001aaa:	9300      	str	r3, [sp, #0]
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	2204      	movs	r2, #4
 8001ab0:	493a      	ldr	r1, [pc, #232]	; (8001b9c <print_floating_point+0x144>)
 8001ab2:	6978      	ldr	r0, [r7, #20]
 8001ab4:	f7ff fbc0 	bl	8001238 <out_rev_>
    return;
 8001ab8:	e063      	b.n	8001b82 <print_floating_point+0x12a>
  }
  if (value > DBL_MAX) {
 8001aba:	f04f 32ff 	mov.w	r2, #4294967295
 8001abe:	4b38      	ldr	r3, [pc, #224]	; (8001ba0 <print_floating_point+0x148>)
 8001ac0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001ac4:	f7fe fee8 	bl	8000898 <__aeabi_dcmpgt>
 8001ac8:	4603      	mov	r3, r0
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d016      	beq.n	8001afc <print_floating_point+0xa4>
    out_rev_(output, (flags & FLAGS_PLUS) ? "fni+" : "fni", (flags & FLAGS_PLUS) ? 4U : 3U, width, flags);
 8001ace:	683b      	ldr	r3, [r7, #0]
 8001ad0:	f003 0304 	and.w	r3, r3, #4
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d001      	beq.n	8001adc <print_floating_point+0x84>
 8001ad8:	4932      	ldr	r1, [pc, #200]	; (8001ba4 <print_floating_point+0x14c>)
 8001ada:	e000      	b.n	8001ade <print_floating_point+0x86>
 8001adc:	4932      	ldr	r1, [pc, #200]	; (8001ba8 <print_floating_point+0x150>)
 8001ade:	683b      	ldr	r3, [r7, #0]
 8001ae0:	f003 0304 	and.w	r3, r3, #4
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d001      	beq.n	8001aec <print_floating_point+0x94>
 8001ae8:	2204      	movs	r2, #4
 8001aea:	e000      	b.n	8001aee <print_floating_point+0x96>
 8001aec:	2203      	movs	r2, #3
 8001aee:	683b      	ldr	r3, [r7, #0]
 8001af0:	9300      	str	r3, [sp, #0]
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	6978      	ldr	r0, [r7, #20]
 8001af6:	f7ff fb9f 	bl	8001238 <out_rev_>
    return;
 8001afa:	e042      	b.n	8001b82 <print_floating_point+0x12a>
  }

  if (!prefer_exponential &&
 8001afc:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8001b00:	f083 0301 	eor.w	r3, r3, #1
 8001b04:	b2db      	uxtb	r3, r3
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d013      	beq.n	8001b32 <print_floating_point+0xda>
 8001b0a:	a31f      	add	r3, pc, #124	; (adr r3, 8001b88 <print_floating_point+0x130>)
 8001b0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b10:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001b14:	f7fe fec0 	bl	8000898 <__aeabi_dcmpgt>
 8001b18:	4603      	mov	r3, r0
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d130      	bne.n	8001b80 <print_floating_point+0x128>
      ((value > PRINTF_FLOAT_NOTATION_THRESHOLD) || (value < -PRINTF_FLOAT_NOTATION_THRESHOLD))) {
 8001b1e:	a31c      	add	r3, pc, #112	; (adr r3, 8001b90 <print_floating_point+0x138>)
 8001b20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b24:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001b28:	f7fe fe98 	bl	800085c <__aeabi_dcmplt>
 8001b2c:	4603      	mov	r3, r0
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d126      	bne.n	8001b80 <print_floating_point+0x128>
#endif
    return;
  }

  // set default precision, if not set explicitly
  if (!(flags & FLAGS_PRECISION)) {
 8001b32:	683b      	ldr	r3, [r7, #0]
 8001b34:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d10d      	bne.n	8001b58 <print_floating_point+0x100>
    precision = PRINTF_DEFAULT_FLOAT_PRECISION;
 8001b3c:	2306      	movs	r3, #6
 8001b3e:	613b      	str	r3, [r7, #16]
  }

  // limit precision so that our integer holding the fractional part does not overflow
  while ((len < PRINTF_DECIMAL_BUFFER_SIZE) && (precision > PRINTF_MAX_SUPPORTED_PRECISION)) {
 8001b40:	e00a      	b.n	8001b58 <print_floating_point+0x100>
    buf[len++] = '0'; // This respects the precision in terms of result length only
 8001b42:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001b44:	1c5a      	adds	r2, r3, #1
 8001b46:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001b48:	3340      	adds	r3, #64	; 0x40
 8001b4a:	443b      	add	r3, r7
 8001b4c:	2230      	movs	r2, #48	; 0x30
 8001b4e:	f803 2c24 	strb.w	r2, [r3, #-36]
    precision--;
 8001b52:	693b      	ldr	r3, [r7, #16]
 8001b54:	3b01      	subs	r3, #1
 8001b56:	613b      	str	r3, [r7, #16]
  while ((len < PRINTF_DECIMAL_BUFFER_SIZE) && (precision > PRINTF_MAX_SUPPORTED_PRECISION)) {
 8001b58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001b5a:	2b1f      	cmp	r3, #31
 8001b5c:	d802      	bhi.n	8001b64 <print_floating_point+0x10c>
 8001b5e:	693b      	ldr	r3, [r7, #16]
 8001b60:	2b11      	cmp	r3, #17
 8001b62:	d8ee      	bhi.n	8001b42 <print_floating_point+0xea>
#if PRINTF_SUPPORT_EXPONENTIAL_SPECIFIERS
  if (prefer_exponential)
    print_exponential_number(output, value, precision, width, flags, buf, len);
  else
#endif
    print_decimal_number(output, value, precision, width, flags, buf, len);
 8001b64:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001b66:	9301      	str	r3, [sp, #4]
 8001b68:	f107 031c 	add.w	r3, r7, #28
 8001b6c:	9300      	str	r3, [sp, #0]
 8001b6e:	683b      	ldr	r3, [r7, #0]
 8001b70:	687a      	ldr	r2, [r7, #4]
 8001b72:	6939      	ldr	r1, [r7, #16]
 8001b74:	ed97 0b02 	vldr	d0, [r7, #8]
 8001b78:	6978      	ldr	r0, [r7, #20]
 8001b7a:	f7ff ff3d 	bl	80019f8 <print_decimal_number>
 8001b7e:	e000      	b.n	8001b82 <print_floating_point+0x12a>
    return;
 8001b80:	bf00      	nop
}
 8001b82:	3740      	adds	r7, #64	; 0x40
 8001b84:	46bd      	mov	sp, r7
 8001b86:	bd80      	pop	{r7, pc}
 8001b88:	00000000 	.word	0x00000000
 8001b8c:	41cdcd65 	.word	0x41cdcd65
 8001b90:	00000000 	.word	0x00000000
 8001b94:	c1cdcd65 	.word	0xc1cdcd65
 8001b98:	08009d1c 	.word	0x08009d1c
 8001b9c:	08009d20 	.word	0x08009d20
 8001ba0:	7fefffff 	.word	0x7fefffff
 8001ba4:	08009d28 	.word	0x08009d28
 8001ba8:	08009d30 	.word	0x08009d30

08001bac <parse_flags>:
#endif  // (PRINTF_SUPPORT_DECIMAL_SPECIFIERS || PRINTF_SUPPORT_EXPONENTIAL_SPECIFIERS)

// Advances the format pointer past the flags, and returns the parsed flags
// due to the characters passed
static printf_flags_t parse_flags(const char** format)
{
 8001bac:	b480      	push	{r7}
 8001bae:	b085      	sub	sp, #20
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
  printf_flags_t flags = 0U;
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	60fb      	str	r3, [r7, #12]
  do {
    switch (**format) {
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	781b      	ldrb	r3, [r3, #0]
 8001bbe:	3b20      	subs	r3, #32
 8001bc0:	2b10      	cmp	r3, #16
 8001bc2:	d857      	bhi.n	8001c74 <parse_flags+0xc8>
 8001bc4:	a201      	add	r2, pc, #4	; (adr r2, 8001bcc <parse_flags+0x20>)
 8001bc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001bca:	bf00      	nop
 8001bcc:	08001c4d 	.word	0x08001c4d
 8001bd0:	08001c75 	.word	0x08001c75
 8001bd4:	08001c75 	.word	0x08001c75
 8001bd8:	08001c61 	.word	0x08001c61
 8001bdc:	08001c75 	.word	0x08001c75
 8001be0:	08001c75 	.word	0x08001c75
 8001be4:	08001c75 	.word	0x08001c75
 8001be8:	08001c75 	.word	0x08001c75
 8001bec:	08001c75 	.word	0x08001c75
 8001bf0:	08001c75 	.word	0x08001c75
 8001bf4:	08001c75 	.word	0x08001c75
 8001bf8:	08001c39 	.word	0x08001c39
 8001bfc:	08001c75 	.word	0x08001c75
 8001c00:	08001c25 	.word	0x08001c25
 8001c04:	08001c75 	.word	0x08001c75
 8001c08:	08001c75 	.word	0x08001c75
 8001c0c:	08001c11 	.word	0x08001c11
      case '0': flags |= FLAGS_ZEROPAD; (*format)++; break;
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	f043 0301 	orr.w	r3, r3, #1
 8001c16:	60fb      	str	r3, [r7, #12]
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	1c5a      	adds	r2, r3, #1
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	601a      	str	r2, [r3, #0]
 8001c22:	e029      	b.n	8001c78 <parse_flags+0xcc>
      case '-': flags |= FLAGS_LEFT;    (*format)++; break;
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	f043 0302 	orr.w	r3, r3, #2
 8001c2a:	60fb      	str	r3, [r7, #12]
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	1c5a      	adds	r2, r3, #1
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	601a      	str	r2, [r3, #0]
 8001c36:	e01f      	b.n	8001c78 <parse_flags+0xcc>
      case '+': flags |= FLAGS_PLUS;    (*format)++; break;
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	f043 0304 	orr.w	r3, r3, #4
 8001c3e:	60fb      	str	r3, [r7, #12]
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	1c5a      	adds	r2, r3, #1
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	601a      	str	r2, [r3, #0]
 8001c4a:	e015      	b.n	8001c78 <parse_flags+0xcc>
      case ' ': flags |= FLAGS_SPACE;   (*format)++; break;
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	f043 0308 	orr.w	r3, r3, #8
 8001c52:	60fb      	str	r3, [r7, #12]
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	1c5a      	adds	r2, r3, #1
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	601a      	str	r2, [r3, #0]
 8001c5e:	e00b      	b.n	8001c78 <parse_flags+0xcc>
      case '#': flags |= FLAGS_HASH;    (*format)++; break;
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	f043 0310 	orr.w	r3, r3, #16
 8001c66:	60fb      	str	r3, [r7, #12]
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	1c5a      	adds	r2, r3, #1
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	601a      	str	r2, [r3, #0]
 8001c72:	e001      	b.n	8001c78 <parse_flags+0xcc>
      default : return flags;
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	e000      	b.n	8001c7a <parse_flags+0xce>
    switch (**format) {
 8001c78:	e79e      	b.n	8001bb8 <parse_flags+0xc>
    }
  } while (true);
}
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	3714      	adds	r7, #20
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c84:	4770      	bx	lr
 8001c86:	bf00      	nop

08001c88 <format_string_loop>:

static inline void format_string_loop(output_gadget_t* output, const char* format, va_list args)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b096      	sub	sp, #88	; 0x58
 8001c8c:	af04      	add	r7, sp, #16
 8001c8e:	60f8      	str	r0, [r7, #12]
 8001c90:	60b9      	str	r1, [r7, #8]
 8001c92:	607a      	str	r2, [r7, #4]
#else
#define ADVANCE_IN_FORMAT_STRING(cptr_) (cptr_)++
#endif


  while (*format)
 8001c94:	e3a1      	b.n	80023da <format_string_loop+0x752>
  {
    if (*format != '%') {
 8001c96:	68bb      	ldr	r3, [r7, #8]
 8001c98:	781b      	ldrb	r3, [r3, #0]
 8001c9a:	2b25      	cmp	r3, #37	; 0x25
 8001c9c:	d009      	beq.n	8001cb2 <format_string_loop+0x2a>
      // A regular content character
      putchar_via_gadget(output, *format);
 8001c9e:	68bb      	ldr	r3, [r7, #8]
 8001ca0:	781b      	ldrb	r3, [r3, #0]
 8001ca2:	4619      	mov	r1, r3
 8001ca4:	68f8      	ldr	r0, [r7, #12]
 8001ca6:	f7ff f9da 	bl	800105e <putchar_via_gadget>
      format++;
 8001caa:	68bb      	ldr	r3, [r7, #8]
 8001cac:	3301      	adds	r3, #1
 8001cae:	60bb      	str	r3, [r7, #8]
      continue;
 8001cb0:	e393      	b.n	80023da <format_string_loop+0x752>
    }
    // We're parsing a format specifier: %[flags][width][.precision][length]
    ADVANCE_IN_FORMAT_STRING(format);
 8001cb2:	68bb      	ldr	r3, [r7, #8]
 8001cb4:	3301      	adds	r3, #1
 8001cb6:	60bb      	str	r3, [r7, #8]
 8001cb8:	68bb      	ldr	r3, [r7, #8]
 8001cba:	781b      	ldrb	r3, [r3, #0]
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	f000 8392 	beq.w	80023e6 <format_string_loop+0x75e>

    printf_flags_t flags = parse_flags(&format);
 8001cc2:	f107 0308 	add.w	r3, r7, #8
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	f7ff ff70 	bl	8001bac <parse_flags>
 8001ccc:	6478      	str	r0, [r7, #68]	; 0x44

    // evaluate width field
    printf_size_t width = 0U;
 8001cce:	2300      	movs	r3, #0
 8001cd0:	643b      	str	r3, [r7, #64]	; 0x40
    if (is_digit_(*format)) {
 8001cd2:	68bb      	ldr	r3, [r7, #8]
 8001cd4:	781b      	ldrb	r3, [r3, #0]
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	f7ff fa73 	bl	80011c2 <is_digit_>
 8001cdc:	4603      	mov	r3, r0
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d006      	beq.n	8001cf0 <format_string_loop+0x68>
      width = (printf_size_t) atou_(&format);
 8001ce2:	f107 0308 	add.w	r3, r7, #8
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	f7ff fa82 	bl	80011f0 <atou_>
 8001cec:	6438      	str	r0, [r7, #64]	; 0x40
 8001cee:	e01d      	b.n	8001d2c <format_string_loop+0xa4>
    }
    else if (*format == '*') {
 8001cf0:	68bb      	ldr	r3, [r7, #8]
 8001cf2:	781b      	ldrb	r3, [r3, #0]
 8001cf4:	2b2a      	cmp	r3, #42	; 0x2a
 8001cf6:	d119      	bne.n	8001d2c <format_string_loop+0xa4>
      const int w = va_arg(args, int);
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	1d1a      	adds	r2, r3, #4
 8001cfc:	607a      	str	r2, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	62bb      	str	r3, [r7, #40]	; 0x28
      if (w < 0) {
 8001d02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	da07      	bge.n	8001d18 <format_string_loop+0x90>
        flags |= FLAGS_LEFT;    // reverse padding
 8001d08:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001d0a:	f043 0302 	orr.w	r3, r3, #2
 8001d0e:	647b      	str	r3, [r7, #68]	; 0x44
        width = (printf_size_t)-w;
 8001d10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d12:	425b      	negs	r3, r3
 8001d14:	643b      	str	r3, [r7, #64]	; 0x40
 8001d16:	e001      	b.n	8001d1c <format_string_loop+0x94>
      }
      else {
        width = (printf_size_t)w;
 8001d18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d1a:	643b      	str	r3, [r7, #64]	; 0x40
      }
      ADVANCE_IN_FORMAT_STRING(format);
 8001d1c:	68bb      	ldr	r3, [r7, #8]
 8001d1e:	3301      	adds	r3, #1
 8001d20:	60bb      	str	r3, [r7, #8]
 8001d22:	68bb      	ldr	r3, [r7, #8]
 8001d24:	781b      	ldrb	r3, [r3, #0]
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	f000 835f 	beq.w	80023ea <format_string_loop+0x762>
    }

    // evaluate precision field
    printf_size_t precision = 0U;
 8001d2c:	2300      	movs	r3, #0
 8001d2e:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (*format == '.') {
 8001d30:	68bb      	ldr	r3, [r7, #8]
 8001d32:	781b      	ldrb	r3, [r3, #0]
 8001d34:	2b2e      	cmp	r3, #46	; 0x2e
 8001d36:	d12f      	bne.n	8001d98 <format_string_loop+0x110>
      flags |= FLAGS_PRECISION;
 8001d38:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001d3a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001d3e:	647b      	str	r3, [r7, #68]	; 0x44
      ADVANCE_IN_FORMAT_STRING(format);
 8001d40:	68bb      	ldr	r3, [r7, #8]
 8001d42:	3301      	adds	r3, #1
 8001d44:	60bb      	str	r3, [r7, #8]
 8001d46:	68bb      	ldr	r3, [r7, #8]
 8001d48:	781b      	ldrb	r3, [r3, #0]
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	f000 834f 	beq.w	80023ee <format_string_loop+0x766>
      if (is_digit_(*format)) {
 8001d50:	68bb      	ldr	r3, [r7, #8]
 8001d52:	781b      	ldrb	r3, [r3, #0]
 8001d54:	4618      	mov	r0, r3
 8001d56:	f7ff fa34 	bl	80011c2 <is_digit_>
 8001d5a:	4603      	mov	r3, r0
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d006      	beq.n	8001d6e <format_string_loop+0xe6>
        precision = (printf_size_t) atou_(&format);
 8001d60:	f107 0308 	add.w	r3, r7, #8
 8001d64:	4618      	mov	r0, r3
 8001d66:	f7ff fa43 	bl	80011f0 <atou_>
 8001d6a:	63f8      	str	r0, [r7, #60]	; 0x3c
 8001d6c:	e014      	b.n	8001d98 <format_string_loop+0x110>
      }
      else if (*format == '*') {
 8001d6e:	68bb      	ldr	r3, [r7, #8]
 8001d70:	781b      	ldrb	r3, [r3, #0]
 8001d72:	2b2a      	cmp	r3, #42	; 0x2a
 8001d74:	d110      	bne.n	8001d98 <format_string_loop+0x110>
        const int precision_ = va_arg(args, int);
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	1d1a      	adds	r2, r3, #4
 8001d7a:	607a      	str	r2, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	627b      	str	r3, [r7, #36]	; 0x24
        precision = precision_ > 0 ? (printf_size_t) precision_ : 0U;
 8001d80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d82:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8001d86:	63fb      	str	r3, [r7, #60]	; 0x3c
        ADVANCE_IN_FORMAT_STRING(format);
 8001d88:	68bb      	ldr	r3, [r7, #8]
 8001d8a:	3301      	adds	r3, #1
 8001d8c:	60bb      	str	r3, [r7, #8]
 8001d8e:	68bb      	ldr	r3, [r7, #8]
 8001d90:	781b      	ldrb	r3, [r3, #0]
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	f000 832d 	beq.w	80023f2 <format_string_loop+0x76a>
      }
    }

    // evaluate length field
    switch (*format) {
 8001d98:	68bb      	ldr	r3, [r7, #8]
 8001d9a:	781b      	ldrb	r3, [r3, #0]
 8001d9c:	3b68      	subs	r3, #104	; 0x68
 8001d9e:	2b12      	cmp	r3, #18
 8001da0:	f200 8087 	bhi.w	8001eb2 <format_string_loop+0x22a>
 8001da4:	a201      	add	r2, pc, #4	; (adr r2, 8001dac <format_string_loop+0x124>)
 8001da6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001daa:	bf00      	nop
 8001dac:	08001e31 	.word	0x08001e31
 8001db0:	08001eb3 	.word	0x08001eb3
 8001db4:	08001e81 	.word	0x08001e81
 8001db8:	08001eb3 	.word	0x08001eb3
 8001dbc:	08001df9 	.word	0x08001df9
 8001dc0:	08001eb3 	.word	0x08001eb3
 8001dc4:	08001eb3 	.word	0x08001eb3
 8001dc8:	08001eb3 	.word	0x08001eb3
 8001dcc:	08001eb3 	.word	0x08001eb3
 8001dd0:	08001eb3 	.word	0x08001eb3
 8001dd4:	08001eb3 	.word	0x08001eb3
 8001dd8:	08001eb3 	.word	0x08001eb3
 8001ddc:	08001e69 	.word	0x08001e69
 8001de0:	08001eb3 	.word	0x08001eb3
 8001de4:	08001eb3 	.word	0x08001eb3
 8001de8:	08001eb3 	.word	0x08001eb3
 8001dec:	08001eb3 	.word	0x08001eb3
 8001df0:	08001eb3 	.word	0x08001eb3
 8001df4:	08001e99 	.word	0x08001e99
        }
        break;
      }
#endif
      case 'l' :
        flags |= FLAGS_LONG;
 8001df8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001dfa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001dfe:	647b      	str	r3, [r7, #68]	; 0x44
        ADVANCE_IN_FORMAT_STRING(format);
 8001e00:	68bb      	ldr	r3, [r7, #8]
 8001e02:	3301      	adds	r3, #1
 8001e04:	60bb      	str	r3, [r7, #8]
 8001e06:	68bb      	ldr	r3, [r7, #8]
 8001e08:	781b      	ldrb	r3, [r3, #0]
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	f000 82f3 	beq.w	80023f6 <format_string_loop+0x76e>
        if (*format == 'l') {
 8001e10:	68bb      	ldr	r3, [r7, #8]
 8001e12:	781b      	ldrb	r3, [r3, #0]
 8001e14:	2b6c      	cmp	r3, #108	; 0x6c
 8001e16:	d14e      	bne.n	8001eb6 <format_string_loop+0x22e>
          flags |= FLAGS_LONG_LONG;
 8001e18:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001e1a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001e1e:	647b      	str	r3, [r7, #68]	; 0x44
          ADVANCE_IN_FORMAT_STRING(format);
 8001e20:	68bb      	ldr	r3, [r7, #8]
 8001e22:	3301      	adds	r3, #1
 8001e24:	60bb      	str	r3, [r7, #8]
 8001e26:	68bb      	ldr	r3, [r7, #8]
 8001e28:	781b      	ldrb	r3, [r3, #0]
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d143      	bne.n	8001eb6 <format_string_loop+0x22e>
 8001e2e:	e2e7      	b.n	8002400 <format_string_loop+0x778>
        }
        break;
      case 'h' :
        flags |= FLAGS_SHORT;
 8001e30:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001e32:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001e36:	647b      	str	r3, [r7, #68]	; 0x44
        ADVANCE_IN_FORMAT_STRING(format);
 8001e38:	68bb      	ldr	r3, [r7, #8]
 8001e3a:	3301      	adds	r3, #1
 8001e3c:	60bb      	str	r3, [r7, #8]
 8001e3e:	68bb      	ldr	r3, [r7, #8]
 8001e40:	781b      	ldrb	r3, [r3, #0]
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	f000 82d9 	beq.w	80023fa <format_string_loop+0x772>
        if (*format == 'h') {
 8001e48:	68bb      	ldr	r3, [r7, #8]
 8001e4a:	781b      	ldrb	r3, [r3, #0]
 8001e4c:	2b68      	cmp	r3, #104	; 0x68
 8001e4e:	d134      	bne.n	8001eba <format_string_loop+0x232>
          flags |= FLAGS_CHAR;
 8001e50:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001e52:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001e56:	647b      	str	r3, [r7, #68]	; 0x44
          ADVANCE_IN_FORMAT_STRING(format);
 8001e58:	68bb      	ldr	r3, [r7, #8]
 8001e5a:	3301      	adds	r3, #1
 8001e5c:	60bb      	str	r3, [r7, #8]
 8001e5e:	68bb      	ldr	r3, [r7, #8]
 8001e60:	781b      	ldrb	r3, [r3, #0]
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d129      	bne.n	8001eba <format_string_loop+0x232>
 8001e66:	e2cb      	b.n	8002400 <format_string_loop+0x778>
        }
        break;
      case 't' :
        flags |= (sizeof(ptrdiff_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 8001e68:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001e6a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001e6e:	647b      	str	r3, [r7, #68]	; 0x44
        ADVANCE_IN_FORMAT_STRING(format);
 8001e70:	68bb      	ldr	r3, [r7, #8]
 8001e72:	3301      	adds	r3, #1
 8001e74:	60bb      	str	r3, [r7, #8]
 8001e76:	68bb      	ldr	r3, [r7, #8]
 8001e78:	781b      	ldrb	r3, [r3, #0]
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d11f      	bne.n	8001ebe <format_string_loop+0x236>
 8001e7e:	e2bf      	b.n	8002400 <format_string_loop+0x778>
        break;
      case 'j' :
        flags |= (sizeof(intmax_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 8001e80:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001e82:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001e86:	647b      	str	r3, [r7, #68]	; 0x44
        ADVANCE_IN_FORMAT_STRING(format);
 8001e88:	68bb      	ldr	r3, [r7, #8]
 8001e8a:	3301      	adds	r3, #1
 8001e8c:	60bb      	str	r3, [r7, #8]
 8001e8e:	68bb      	ldr	r3, [r7, #8]
 8001e90:	781b      	ldrb	r3, [r3, #0]
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d115      	bne.n	8001ec2 <format_string_loop+0x23a>
 8001e96:	e2b3      	b.n	8002400 <format_string_loop+0x778>
        break;
      case 'z' :
        flags |= (sizeof(size_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 8001e98:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001e9a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001e9e:	647b      	str	r3, [r7, #68]	; 0x44
        ADVANCE_IN_FORMAT_STRING(format);
 8001ea0:	68bb      	ldr	r3, [r7, #8]
 8001ea2:	3301      	adds	r3, #1
 8001ea4:	60bb      	str	r3, [r7, #8]
 8001ea6:	68bb      	ldr	r3, [r7, #8]
 8001ea8:	781b      	ldrb	r3, [r3, #0]
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	f000 82a7 	beq.w	80023fe <format_string_loop+0x776>
        break;
 8001eb0:	e008      	b.n	8001ec4 <format_string_loop+0x23c>
      default:
        break;
 8001eb2:	bf00      	nop
 8001eb4:	e006      	b.n	8001ec4 <format_string_loop+0x23c>
        break;
 8001eb6:	bf00      	nop
 8001eb8:	e004      	b.n	8001ec4 <format_string_loop+0x23c>
        break;
 8001eba:	bf00      	nop
 8001ebc:	e002      	b.n	8001ec4 <format_string_loop+0x23c>
        break;
 8001ebe:	bf00      	nop
 8001ec0:	e000      	b.n	8001ec4 <format_string_loop+0x23c>
        break;
 8001ec2:	bf00      	nop
    }

    // evaluate specifier
    switch (*format) {
 8001ec4:	68bb      	ldr	r3, [r7, #8]
 8001ec6:	781b      	ldrb	r3, [r3, #0]
 8001ec8:	3b25      	subs	r3, #37	; 0x25
 8001eca:	2b53      	cmp	r3, #83	; 0x53
 8001ecc:	f200 827b 	bhi.w	80023c6 <format_string_loop+0x73e>
 8001ed0:	a201      	add	r2, pc, #4	; (adr r2, 8001ed8 <format_string_loop+0x250>)
 8001ed2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ed6:	bf00      	nop
 8001ed8:	080023b7 	.word	0x080023b7
 8001edc:	080023c7 	.word	0x080023c7
 8001ee0:	080023c7 	.word	0x080023c7
 8001ee4:	080023c7 	.word	0x080023c7
 8001ee8:	080023c7 	.word	0x080023c7
 8001eec:	080023c7 	.word	0x080023c7
 8001ef0:	080023c7 	.word	0x080023c7
 8001ef4:	080023c7 	.word	0x080023c7
 8001ef8:	080023c7 	.word	0x080023c7
 8001efc:	080023c7 	.word	0x080023c7
 8001f00:	080023c7 	.word	0x080023c7
 8001f04:	080023c7 	.word	0x080023c7
 8001f08:	080023c7 	.word	0x080023c7
 8001f0c:	080023c7 	.word	0x080023c7
 8001f10:	080023c7 	.word	0x080023c7
 8001f14:	080023c7 	.word	0x080023c7
 8001f18:	080023c7 	.word	0x080023c7
 8001f1c:	080023c7 	.word	0x080023c7
 8001f20:	080023c7 	.word	0x080023c7
 8001f24:	080023c7 	.word	0x080023c7
 8001f28:	080023c7 	.word	0x080023c7
 8001f2c:	080023c7 	.word	0x080023c7
 8001f30:	080023c7 	.word	0x080023c7
 8001f34:	080023c7 	.word	0x080023c7
 8001f38:	080023c7 	.word	0x080023c7
 8001f3c:	080023c7 	.word	0x080023c7
 8001f40:	080023c7 	.word	0x080023c7
 8001f44:	080023c7 	.word	0x080023c7
 8001f48:	080023c7 	.word	0x080023c7
 8001f4c:	080023c7 	.word	0x080023c7
 8001f50:	080023c7 	.word	0x080023c7
 8001f54:	080023c7 	.word	0x080023c7
 8001f58:	080023c7 	.word	0x080023c7
 8001f5c:	080021fd 	.word	0x080021fd
 8001f60:	080023c7 	.word	0x080023c7
 8001f64:	080023c7 	.word	0x080023c7
 8001f68:	080023c7 	.word	0x080023c7
 8001f6c:	080023c7 	.word	0x080023c7
 8001f70:	080023c7 	.word	0x080023c7
 8001f74:	080023c7 	.word	0x080023c7
 8001f78:	080023c7 	.word	0x080023c7
 8001f7c:	080023c7 	.word	0x080023c7
 8001f80:	080023c7 	.word	0x080023c7
 8001f84:	080023c7 	.word	0x080023c7
 8001f88:	080023c7 	.word	0x080023c7
 8001f8c:	080023c7 	.word	0x080023c7
 8001f90:	080023c7 	.word	0x080023c7
 8001f94:	080023c7 	.word	0x080023c7
 8001f98:	080023c7 	.word	0x080023c7
 8001f9c:	080023c7 	.word	0x080023c7
 8001fa0:	080023c7 	.word	0x080023c7
 8001fa4:	08002029 	.word	0x08002029
 8001fa8:	080023c7 	.word	0x080023c7
 8001fac:	080023c7 	.word	0x080023c7
 8001fb0:	080023c7 	.word	0x080023c7
 8001fb4:	080023c7 	.word	0x080023c7
 8001fb8:	080023c7 	.word	0x080023c7
 8001fbc:	080023c7 	.word	0x080023c7
 8001fc0:	080023c7 	.word	0x080023c7
 8001fc4:	080023c7 	.word	0x080023c7
 8001fc8:	080023c7 	.word	0x080023c7
 8001fcc:	08002029 	.word	0x08002029
 8001fd0:	0800223f 	.word	0x0800223f
 8001fd4:	08002029 	.word	0x08002029
 8001fd8:	080023c7 	.word	0x080023c7
 8001fdc:	080021fd 	.word	0x080021fd
 8001fe0:	080023c7 	.word	0x080023c7
 8001fe4:	080023c7 	.word	0x080023c7
 8001fe8:	08002029 	.word	0x08002029
 8001fec:	080023c7 	.word	0x080023c7
 8001ff0:	080023c7 	.word	0x080023c7
 8001ff4:	080023c7 	.word	0x080023c7
 8001ff8:	080023c7 	.word	0x080023c7
 8001ffc:	080023c7 	.word	0x080023c7
 8002000:	08002029 	.word	0x08002029
 8002004:	08002365 	.word	0x08002365
 8002008:	080023c7 	.word	0x080023c7
 800200c:	080023c7 	.word	0x080023c7
 8002010:	0800229d 	.word	0x0800229d
 8002014:	080023c7 	.word	0x080023c7
 8002018:	08002029 	.word	0x08002029
 800201c:	080023c7 	.word	0x080023c7
 8002020:	080023c7 	.word	0x080023c7
 8002024:	08002029 	.word	0x08002029
      case 'x' :
      case 'X' :
      case 'o' :
      case 'b' : {

        if (*format == 'd' || *format == 'i') {
 8002028:	68bb      	ldr	r3, [r7, #8]
 800202a:	781b      	ldrb	r3, [r3, #0]
 800202c:	2b64      	cmp	r3, #100	; 0x64
 800202e:	d003      	beq.n	8002038 <format_string_loop+0x3b0>
 8002030:	68bb      	ldr	r3, [r7, #8]
 8002032:	781b      	ldrb	r3, [r3, #0]
 8002034:	2b69      	cmp	r3, #105	; 0x69
 8002036:	d103      	bne.n	8002040 <format_string_loop+0x3b8>
          flags |= FLAGS_SIGNED;
 8002038:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800203a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800203e:	647b      	str	r3, [r7, #68]	; 0x44
        }

        numeric_base_t base;
        if (*format == 'x' || *format == 'X') {
 8002040:	68bb      	ldr	r3, [r7, #8]
 8002042:	781b      	ldrb	r3, [r3, #0]
 8002044:	2b78      	cmp	r3, #120	; 0x78
 8002046:	d003      	beq.n	8002050 <format_string_loop+0x3c8>
 8002048:	68bb      	ldr	r3, [r7, #8]
 800204a:	781b      	ldrb	r3, [r3, #0]
 800204c:	2b58      	cmp	r3, #88	; 0x58
 800204e:	d103      	bne.n	8002058 <format_string_loop+0x3d0>
          base = BASE_HEX;
 8002050:	2310      	movs	r3, #16
 8002052:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8002056:	e016      	b.n	8002086 <format_string_loop+0x3fe>
        }
        else if (*format == 'o') {
 8002058:	68bb      	ldr	r3, [r7, #8]
 800205a:	781b      	ldrb	r3, [r3, #0]
 800205c:	2b6f      	cmp	r3, #111	; 0x6f
 800205e:	d103      	bne.n	8002068 <format_string_loop+0x3e0>
          base =  BASE_OCTAL;
 8002060:	2308      	movs	r3, #8
 8002062:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8002066:	e00e      	b.n	8002086 <format_string_loop+0x3fe>
        }
        else if (*format == 'b') {
 8002068:	68bb      	ldr	r3, [r7, #8]
 800206a:	781b      	ldrb	r3, [r3, #0]
 800206c:	2b62      	cmp	r3, #98	; 0x62
 800206e:	d103      	bne.n	8002078 <format_string_loop+0x3f0>
          base =  BASE_BINARY;
 8002070:	2302      	movs	r3, #2
 8002072:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8002076:	e006      	b.n	8002086 <format_string_loop+0x3fe>
        }
        else {
          base = BASE_DECIMAL;
 8002078:	230a      	movs	r3, #10
 800207a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
          flags &= ~FLAGS_HASH; // decimal integers have no alternative presentation
 800207e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002080:	f023 0310 	bic.w	r3, r3, #16
 8002084:	647b      	str	r3, [r7, #68]	; 0x44
        }

        if (*format == 'X') {
 8002086:	68bb      	ldr	r3, [r7, #8]
 8002088:	781b      	ldrb	r3, [r3, #0]
 800208a:	2b58      	cmp	r3, #88	; 0x58
 800208c:	d103      	bne.n	8002096 <format_string_loop+0x40e>
          flags |= FLAGS_UPPERCASE;
 800208e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002090:	f043 0320 	orr.w	r3, r3, #32
 8002094:	647b      	str	r3, [r7, #68]	; 0x44
        }

        format++;
 8002096:	68bb      	ldr	r3, [r7, #8]
 8002098:	3301      	adds	r3, #1
 800209a:	60bb      	str	r3, [r7, #8]
        // ignore '0' flag when precision is given
        if (flags & FLAGS_PRECISION) {
 800209c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800209e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d003      	beq.n	80020ae <format_string_loop+0x426>
          flags &= ~FLAGS_ZEROPAD;
 80020a6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80020a8:	f023 0301 	bic.w	r3, r3, #1
 80020ac:	647b      	str	r3, [r7, #68]	; 0x44
        }

        if (flags & FLAGS_SIGNED) {
 80020ae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80020b0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d056      	beq.n	8002166 <format_string_loop+0x4de>
          // A signed specifier: d, i or possibly I + bit size if enabled

          if (flags & FLAGS_LONG_LONG) {
 80020b8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80020ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80020be:	2b00      	cmp	r3, #0
 80020c0:	f040 818b 	bne.w	80023da <format_string_loop+0x752>
#if PRINTF_SUPPORT_LONG_LONG
            const long long value = va_arg(args, long long);
            print_integer(output, ABS_FOR_PRINTING(value), value < 0, base, precision, width, flags);
#endif
          }
          else if (flags & FLAGS_LONG) {
 80020c4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80020c6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d01a      	beq.n	8002104 <format_string_loop+0x47c>
            const long value = va_arg(args, long);
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	1d1a      	adds	r2, r3, #4
 80020d2:	607a      	str	r2, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	617b      	str	r3, [r7, #20]
            print_integer(output, ABS_FOR_PRINTING(value), value < 0, base, precision, width, flags);
 80020d8:	697b      	ldr	r3, [r7, #20]
 80020da:	2b00      	cmp	r3, #0
 80020dc:	bfb8      	it	lt
 80020de:	425b      	neglt	r3, r3
 80020e0:	4618      	mov	r0, r3
 80020e2:	697b      	ldr	r3, [r7, #20]
 80020e4:	0fdb      	lsrs	r3, r3, #31
 80020e6:	b2da      	uxtb	r2, r3
 80020e8:	f897 103b 	ldrb.w	r1, [r7, #59]	; 0x3b
 80020ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80020ee:	9302      	str	r3, [sp, #8]
 80020f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80020f2:	9301      	str	r3, [sp, #4]
 80020f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80020f6:	9300      	str	r3, [sp, #0]
 80020f8:	460b      	mov	r3, r1
 80020fa:	4601      	mov	r1, r0
 80020fc:	68f8      	ldr	r0, [r7, #12]
 80020fe:	f7ff f9d3 	bl	80014a8 <print_integer>
 8002102:	e16a      	b.n	80023da <format_string_loop+0x752>
            // We never try to interpret the argument as something potentially-smaller than int,
            // due to integer promotion rules: Even if the user passed a short int, short unsigned
            // etc. - these will come in after promotion, as int's (or unsigned for the case of
            // short unsigned when it has the same size as int)
            const int value =
              (flags & FLAGS_CHAR) ? (signed char) va_arg(args, int) :
 8002104:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002106:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800210a:	2b00      	cmp	r3, #0
 800210c:	d005      	beq.n	800211a <format_string_loop+0x492>
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	1d1a      	adds	r2, r3, #4
 8002112:	607a      	str	r2, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	b25b      	sxtb	r3, r3
 8002118:	e00e      	b.n	8002138 <format_string_loop+0x4b0>
              (flags & FLAGS_SHORT) ? (short int) va_arg(args, int) :
 800211a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800211c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002120:	2b00      	cmp	r3, #0
 8002122:	d005      	beq.n	8002130 <format_string_loop+0x4a8>
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	1d1a      	adds	r2, r3, #4
 8002128:	607a      	str	r2, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	b21b      	sxth	r3, r3
 800212e:	e003      	b.n	8002138 <format_string_loop+0x4b0>
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	1d1a      	adds	r2, r3, #4
 8002134:	607a      	str	r2, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
            const int value =
 8002138:	61bb      	str	r3, [r7, #24]
              va_arg(args, int);
            print_integer(output, ABS_FOR_PRINTING(value), value < 0, base, precision, width, flags);
 800213a:	69bb      	ldr	r3, [r7, #24]
 800213c:	2b00      	cmp	r3, #0
 800213e:	bfb8      	it	lt
 8002140:	425b      	neglt	r3, r3
 8002142:	4618      	mov	r0, r3
 8002144:	69bb      	ldr	r3, [r7, #24]
 8002146:	0fdb      	lsrs	r3, r3, #31
 8002148:	b2da      	uxtb	r2, r3
 800214a:	f897 103b 	ldrb.w	r1, [r7, #59]	; 0x3b
 800214e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002150:	9302      	str	r3, [sp, #8]
 8002152:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002154:	9301      	str	r3, [sp, #4]
 8002156:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002158:	9300      	str	r3, [sp, #0]
 800215a:	460b      	mov	r3, r1
 800215c:	4601      	mov	r1, r0
 800215e:	68f8      	ldr	r0, [r7, #12]
 8002160:	f7ff f9a2 	bl	80014a8 <print_integer>
 8002164:	e139      	b.n	80023da <format_string_loop+0x752>
          }
        }
        else {
          // An unsigned specifier: u, x, X, o, b

          flags &= ~(FLAGS_PLUS | FLAGS_SPACE);
 8002166:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002168:	f023 030c 	bic.w	r3, r3, #12
 800216c:	647b      	str	r3, [r7, #68]	; 0x44

          if (flags & FLAGS_LONG_LONG) {
 800216e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002170:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002174:	2b00      	cmp	r3, #0
 8002176:	f040 8130 	bne.w	80023da <format_string_loop+0x752>
#if PRINTF_SUPPORT_LONG_LONG
            print_integer(output, (printf_unsigned_value_t) va_arg(args, unsigned long long), false, base, precision, width, flags);
#endif
          }
          else if (flags & FLAGS_LONG) {
 800217a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800217c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002180:	2b00      	cmp	r3, #0
 8002182:	d011      	beq.n	80021a8 <format_string_loop+0x520>
            print_integer(output, (printf_unsigned_value_t) va_arg(args, unsigned long), false, base, precision, width, flags);
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	1d1a      	adds	r2, r3, #4
 8002188:	607a      	str	r2, [r7, #4]
 800218a:	6819      	ldr	r1, [r3, #0]
 800218c:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 8002190:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002192:	9302      	str	r3, [sp, #8]
 8002194:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002196:	9301      	str	r3, [sp, #4]
 8002198:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800219a:	9300      	str	r3, [sp, #0]
 800219c:	4613      	mov	r3, r2
 800219e:	2200      	movs	r2, #0
 80021a0:	68f8      	ldr	r0, [r7, #12]
 80021a2:	f7ff f981 	bl	80014a8 <print_integer>
 80021a6:	e118      	b.n	80023da <format_string_loop+0x752>
          }
          else {
            const unsigned int value =
              (flags & FLAGS_CHAR) ? (unsigned char)va_arg(args, unsigned int) :
 80021a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80021aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d005      	beq.n	80021be <format_string_loop+0x536>
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	1d1a      	adds	r2, r3, #4
 80021b6:	607a      	str	r2, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	b2db      	uxtb	r3, r3
 80021bc:	e00e      	b.n	80021dc <format_string_loop+0x554>
              (flags & FLAGS_SHORT) ? (unsigned short int)va_arg(args, unsigned int) :
 80021be:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80021c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d005      	beq.n	80021d4 <format_string_loop+0x54c>
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	1d1a      	adds	r2, r3, #4
 80021cc:	607a      	str	r2, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	b29b      	uxth	r3, r3
 80021d2:	e003      	b.n	80021dc <format_string_loop+0x554>
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	1d1a      	adds	r2, r3, #4
 80021d8:	607a      	str	r2, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
            const unsigned int value =
 80021dc:	61fb      	str	r3, [r7, #28]
              va_arg(args, unsigned int);
            print_integer(output, (printf_unsigned_value_t) value, false, base, precision, width, flags);
 80021de:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 80021e2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80021e4:	9302      	str	r3, [sp, #8]
 80021e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80021e8:	9301      	str	r3, [sp, #4]
 80021ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80021ec:	9300      	str	r3, [sp, #0]
 80021ee:	4613      	mov	r3, r2
 80021f0:	2200      	movs	r2, #0
 80021f2:	69f9      	ldr	r1, [r7, #28]
 80021f4:	68f8      	ldr	r0, [r7, #12]
 80021f6:	f7ff f957 	bl	80014a8 <print_integer>
          }
        }
        break;
 80021fa:	e0ee      	b.n	80023da <format_string_loop+0x752>
      }
#if PRINTF_SUPPORT_DECIMAL_SPECIFIERS
      case 'f' :
      case 'F' :
        if (*format == 'F') flags |= FLAGS_UPPERCASE;
 80021fc:	68bb      	ldr	r3, [r7, #8]
 80021fe:	781b      	ldrb	r3, [r3, #0]
 8002200:	2b46      	cmp	r3, #70	; 0x46
 8002202:	d103      	bne.n	800220c <format_string_loop+0x584>
 8002204:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002206:	f043 0320 	orr.w	r3, r3, #32
 800220a:	647b      	str	r3, [r7, #68]	; 0x44
        print_floating_point(output, va_arg(args, double), precision, width, flags, PRINTF_PREFER_DECIMAL);
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	3307      	adds	r3, #7
 8002210:	f023 0307 	bic.w	r3, r3, #7
 8002214:	f103 0208 	add.w	r2, r3, #8
 8002218:	607a      	str	r2, [r7, #4]
 800221a:	ed93 7b00 	vldr	d7, [r3]
 800221e:	2300      	movs	r3, #0
 8002220:	9300      	str	r3, [sp, #0]
 8002222:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002224:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002226:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002228:	eeb0 0a47 	vmov.f32	s0, s14
 800222c:	eef0 0a67 	vmov.f32	s1, s15
 8002230:	68f8      	ldr	r0, [r7, #12]
 8002232:	f7ff fc11 	bl	8001a58 <print_floating_point>
        format++;
 8002236:	68bb      	ldr	r3, [r7, #8]
 8002238:	3301      	adds	r3, #1
 800223a:	60bb      	str	r3, [r7, #8]
        break;
 800223c:	e0cd      	b.n	80023da <format_string_loop+0x752>
        print_floating_point(output, va_arg(args, double), precision, width, flags, PRINTF_PREFER_EXPONENTIAL);
        format++;
        break;
#endif  // PRINTF_SUPPORT_EXPONENTIAL_SPECIFIERS
      case 'c' : {
        printf_size_t l = 1U;
 800223e:	2301      	movs	r3, #1
 8002240:	637b      	str	r3, [r7, #52]	; 0x34
        // pre padding
        if (!(flags & FLAGS_LEFT)) {
 8002242:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002244:	f003 0302 	and.w	r3, r3, #2
 8002248:	2b00      	cmp	r3, #0
 800224a:	d10a      	bne.n	8002262 <format_string_loop+0x5da>
          while (l++ < width) {
 800224c:	e003      	b.n	8002256 <format_string_loop+0x5ce>
            putchar_via_gadget(output, ' ');
 800224e:	2120      	movs	r1, #32
 8002250:	68f8      	ldr	r0, [r7, #12]
 8002252:	f7fe ff04 	bl	800105e <putchar_via_gadget>
          while (l++ < width) {
 8002256:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002258:	1c5a      	adds	r2, r3, #1
 800225a:	637a      	str	r2, [r7, #52]	; 0x34
 800225c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800225e:	429a      	cmp	r2, r3
 8002260:	d8f5      	bhi.n	800224e <format_string_loop+0x5c6>
          }
        }
        // char output
        putchar_via_gadget(output, (char) va_arg(args, int) );
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	1d1a      	adds	r2, r3, #4
 8002266:	607a      	str	r2, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	b2db      	uxtb	r3, r3
 800226c:	4619      	mov	r1, r3
 800226e:	68f8      	ldr	r0, [r7, #12]
 8002270:	f7fe fef5 	bl	800105e <putchar_via_gadget>
        // post padding
        if (flags & FLAGS_LEFT) {
 8002274:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002276:	f003 0302 	and.w	r3, r3, #2
 800227a:	2b00      	cmp	r3, #0
 800227c:	d00a      	beq.n	8002294 <format_string_loop+0x60c>
          while (l++ < width) {
 800227e:	e003      	b.n	8002288 <format_string_loop+0x600>
            putchar_via_gadget(output, ' ');
 8002280:	2120      	movs	r1, #32
 8002282:	68f8      	ldr	r0, [r7, #12]
 8002284:	f7fe feeb 	bl	800105e <putchar_via_gadget>
          while (l++ < width) {
 8002288:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800228a:	1c5a      	adds	r2, r3, #1
 800228c:	637a      	str	r2, [r7, #52]	; 0x34
 800228e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002290:	429a      	cmp	r2, r3
 8002292:	d8f5      	bhi.n	8002280 <format_string_loop+0x5f8>
          }
        }
        format++;
 8002294:	68bb      	ldr	r3, [r7, #8]
 8002296:	3301      	adds	r3, #1
 8002298:	60bb      	str	r3, [r7, #8]
        break;
 800229a:	e09e      	b.n	80023da <format_string_loop+0x752>
      }

      case 's' : {
        const char* p = va_arg(args, char*);
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	1d1a      	adds	r2, r3, #4
 80022a0:	607a      	str	r2, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	633b      	str	r3, [r7, #48]	; 0x30
        if (p == NULL) {
 80022a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d108      	bne.n	80022be <format_string_loop+0x636>
          out_rev_(output, ")llun(", 6, width, flags);
 80022ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80022ae:	9300      	str	r3, [sp, #0]
 80022b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80022b2:	2206      	movs	r2, #6
 80022b4:	4954      	ldr	r1, [pc, #336]	; (8002408 <format_string_loop+0x780>)
 80022b6:	68f8      	ldr	r0, [r7, #12]
 80022b8:	f7fe ffbe 	bl	8001238 <out_rev_>
 80022bc:	e04e      	b.n	800235c <format_string_loop+0x6d4>
        }
        else {
          printf_size_t l = strnlen_s_(p, precision ? precision : PRINTF_MAX_POSSIBLE_BUFFER_SIZE);
 80022be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d001      	beq.n	80022c8 <format_string_loop+0x640>
 80022c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80022c6:	e001      	b.n	80022cc <format_string_loop+0x644>
 80022c8:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80022cc:	4619      	mov	r1, r3
 80022ce:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80022d0:	f7fe ff5a 	bl	8001188 <strnlen_s_>
 80022d4:	62f8      	str	r0, [r7, #44]	; 0x2c
          // pre padding
          if (flags & FLAGS_PRECISION) {
 80022d6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80022d8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d005      	beq.n	80022ec <format_string_loop+0x664>
            l = (l < precision ? l : precision);
 80022e0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80022e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80022e4:	4293      	cmp	r3, r2
 80022e6:	bf28      	it	cs
 80022e8:	4613      	movcs	r3, r2
 80022ea:	62fb      	str	r3, [r7, #44]	; 0x2c
          }
          if (!(flags & FLAGS_LEFT)) {
 80022ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80022ee:	f003 0302 	and.w	r3, r3, #2
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d116      	bne.n	8002324 <format_string_loop+0x69c>
            while (l++ < width) {
 80022f6:	e003      	b.n	8002300 <format_string_loop+0x678>
              putchar_via_gadget(output, ' ');
 80022f8:	2120      	movs	r1, #32
 80022fa:	68f8      	ldr	r0, [r7, #12]
 80022fc:	f7fe feaf 	bl	800105e <putchar_via_gadget>
            while (l++ < width) {
 8002300:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002302:	1c5a      	adds	r2, r3, #1
 8002304:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002306:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002308:	429a      	cmp	r2, r3
 800230a:	d8f5      	bhi.n	80022f8 <format_string_loop+0x670>
            }
          }
          // string output
          while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision)) {
 800230c:	e00a      	b.n	8002324 <format_string_loop+0x69c>
            putchar_via_gadget(output, *(p++));
 800230e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002310:	1c5a      	adds	r2, r3, #1
 8002312:	633a      	str	r2, [r7, #48]	; 0x30
 8002314:	781b      	ldrb	r3, [r3, #0]
 8002316:	4619      	mov	r1, r3
 8002318:	68f8      	ldr	r0, [r7, #12]
 800231a:	f7fe fea0 	bl	800105e <putchar_via_gadget>
            --precision;
 800231e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002320:	3b01      	subs	r3, #1
 8002322:	63fb      	str	r3, [r7, #60]	; 0x3c
          while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision)) {
 8002324:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002326:	781b      	ldrb	r3, [r3, #0]
 8002328:	2b00      	cmp	r3, #0
 800232a:	d007      	beq.n	800233c <format_string_loop+0x6b4>
 800232c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800232e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002332:	2b00      	cmp	r3, #0
 8002334:	d0eb      	beq.n	800230e <format_string_loop+0x686>
 8002336:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002338:	2b00      	cmp	r3, #0
 800233a:	d1e8      	bne.n	800230e <format_string_loop+0x686>
          }
          // post padding
          if (flags & FLAGS_LEFT) {
 800233c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800233e:	f003 0302 	and.w	r3, r3, #2
 8002342:	2b00      	cmp	r3, #0
 8002344:	d00a      	beq.n	800235c <format_string_loop+0x6d4>
            while (l++ < width) {
 8002346:	e003      	b.n	8002350 <format_string_loop+0x6c8>
              putchar_via_gadget(output, ' ');
 8002348:	2120      	movs	r1, #32
 800234a:	68f8      	ldr	r0, [r7, #12]
 800234c:	f7fe fe87 	bl	800105e <putchar_via_gadget>
            while (l++ < width) {
 8002350:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002352:	1c5a      	adds	r2, r3, #1
 8002354:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002356:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002358:	429a      	cmp	r2, r3
 800235a:	d8f5      	bhi.n	8002348 <format_string_loop+0x6c0>
            }
          }
        }
        format++;
 800235c:	68bb      	ldr	r3, [r7, #8]
 800235e:	3301      	adds	r3, #1
 8002360:	60bb      	str	r3, [r7, #8]
        break;
 8002362:	e03a      	b.n	80023da <format_string_loop+0x752>
      }

      case 'p' : {
        width = sizeof(void*) * 2U + 2; // 2 hex chars per byte + the "0x" prefix
 8002364:	230a      	movs	r3, #10
 8002366:	643b      	str	r3, [r7, #64]	; 0x40
        flags |= FLAGS_ZEROPAD | FLAGS_POINTER;
 8002368:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800236a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800236e:	f043 0301 	orr.w	r3, r3, #1
 8002372:	647b      	str	r3, [r7, #68]	; 0x44
        uintptr_t value = (uintptr_t)va_arg(args, void*);
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	1d1a      	adds	r2, r3, #4
 8002378:	607a      	str	r2, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	623b      	str	r3, [r7, #32]
        (value == (uintptr_t) NULL) ?
          out_rev_(output, ")lin(", 5, width, flags) :
 800237e:	6a3b      	ldr	r3, [r7, #32]
 8002380:	2b00      	cmp	r3, #0
 8002382:	d108      	bne.n	8002396 <format_string_loop+0x70e>
 8002384:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002386:	9300      	str	r3, [sp, #0]
 8002388:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800238a:	2205      	movs	r2, #5
 800238c:	491f      	ldr	r1, [pc, #124]	; (800240c <format_string_loop+0x784>)
 800238e:	68f8      	ldr	r0, [r7, #12]
 8002390:	f7fe ff52 	bl	8001238 <out_rev_>
 8002394:	e00b      	b.n	80023ae <format_string_loop+0x726>
          print_integer(output, (printf_unsigned_value_t) value, false, BASE_HEX, precision, width, flags);
 8002396:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002398:	9302      	str	r3, [sp, #8]
 800239a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800239c:	9301      	str	r3, [sp, #4]
 800239e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80023a0:	9300      	str	r3, [sp, #0]
 80023a2:	2310      	movs	r3, #16
 80023a4:	2200      	movs	r2, #0
 80023a6:	6a39      	ldr	r1, [r7, #32]
 80023a8:	68f8      	ldr	r0, [r7, #12]
 80023aa:	f7ff f87d 	bl	80014a8 <print_integer>
        format++;
 80023ae:	68bb      	ldr	r3, [r7, #8]
 80023b0:	3301      	adds	r3, #1
 80023b2:	60bb      	str	r3, [r7, #8]
        break;
 80023b4:	e011      	b.n	80023da <format_string_loop+0x752>
      }

      case '%' :
        putchar_via_gadget(output, '%');
 80023b6:	2125      	movs	r1, #37	; 0x25
 80023b8:	68f8      	ldr	r0, [r7, #12]
 80023ba:	f7fe fe50 	bl	800105e <putchar_via_gadget>
        format++;
 80023be:	68bb      	ldr	r3, [r7, #8]
 80023c0:	3301      	adds	r3, #1
 80023c2:	60bb      	str	r3, [r7, #8]
        break;
 80023c4:	e009      	b.n	80023da <format_string_loop+0x752>
        break;
      }
#endif // PRINTF_SUPPORT_WRITEBACK_SPECIFIER

      default :
        putchar_via_gadget(output, *format);
 80023c6:	68bb      	ldr	r3, [r7, #8]
 80023c8:	781b      	ldrb	r3, [r3, #0]
 80023ca:	4619      	mov	r1, r3
 80023cc:	68f8      	ldr	r0, [r7, #12]
 80023ce:	f7fe fe46 	bl	800105e <putchar_via_gadget>
        format++;
 80023d2:	68bb      	ldr	r3, [r7, #8]
 80023d4:	3301      	adds	r3, #1
 80023d6:	60bb      	str	r3, [r7, #8]
        break;
 80023d8:	bf00      	nop
  while (*format)
 80023da:	68bb      	ldr	r3, [r7, #8]
 80023dc:	781b      	ldrb	r3, [r3, #0]
 80023de:	2b00      	cmp	r3, #0
 80023e0:	f47f ac59 	bne.w	8001c96 <format_string_loop+0xe>
 80023e4:	e00c      	b.n	8002400 <format_string_loop+0x778>
    ADVANCE_IN_FORMAT_STRING(format);
 80023e6:	bf00      	nop
 80023e8:	e00a      	b.n	8002400 <format_string_loop+0x778>
      ADVANCE_IN_FORMAT_STRING(format);
 80023ea:	bf00      	nop
 80023ec:	e008      	b.n	8002400 <format_string_loop+0x778>
      ADVANCE_IN_FORMAT_STRING(format);
 80023ee:	bf00      	nop
 80023f0:	e006      	b.n	8002400 <format_string_loop+0x778>
        ADVANCE_IN_FORMAT_STRING(format);
 80023f2:	bf00      	nop
 80023f4:	e004      	b.n	8002400 <format_string_loop+0x778>
        ADVANCE_IN_FORMAT_STRING(format);
 80023f6:	bf00      	nop
 80023f8:	e002      	b.n	8002400 <format_string_loop+0x778>
        ADVANCE_IN_FORMAT_STRING(format);
 80023fa:	bf00      	nop
 80023fc:	e000      	b.n	8002400 <format_string_loop+0x778>
        ADVANCE_IN_FORMAT_STRING(format);
 80023fe:	bf00      	nop
    }
  }
}
 8002400:	3748      	adds	r7, #72	; 0x48
 8002402:	46bd      	mov	sp, r7
 8002404:	bd80      	pop	{r7, pc}
 8002406:	bf00      	nop
 8002408:	08009d34 	.word	0x08009d34
 800240c:	08009d3c 	.word	0x08009d3c

08002410 <vsnprintf_impl>:

// internal vsnprintf - used for implementing _all library functions
static int vsnprintf_impl(output_gadget_t* output, const char* format, va_list args)
{
 8002410:	b580      	push	{r7, lr}
 8002412:	b084      	sub	sp, #16
 8002414:	af00      	add	r7, sp, #0
 8002416:	60f8      	str	r0, [r7, #12]
 8002418:	60b9      	str	r1, [r7, #8]
 800241a:	607a      	str	r2, [r7, #4]
  // Note: The library only calls vsnprintf_impl() with output->pos being 0. However, it is
  // possible to call this function with a non-zero pos value for some "remedial printing".
  format_string_loop(output, format, args);
 800241c:	687a      	ldr	r2, [r7, #4]
 800241e:	68b9      	ldr	r1, [r7, #8]
 8002420:	68f8      	ldr	r0, [r7, #12]
 8002422:	f7ff fc31 	bl	8001c88 <format_string_loop>

  // termination
  append_termination_with_gadget(output);
 8002426:	68f8      	ldr	r0, [r7, #12]
 8002428:	f7fe fe41 	bl	80010ae <append_termination_with_gadget>

  // return written chars without terminating \0
  return (int)output->pos;
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	68db      	ldr	r3, [r3, #12]
}
 8002430:	4618      	mov	r0, r3
 8002432:	3710      	adds	r7, #16
 8002434:	46bd      	mov	sp, r7
 8002436:	bd80      	pop	{r7, pc}

08002438 <vsnprintf_>:
  output_gadget_t gadget = extern_putchar_gadget();
  return vsnprintf_impl(&gadget, format, arg);
}

int vsnprintf_(char* s, size_t n, const char* format, va_list arg)
{
 8002438:	b580      	push	{r7, lr}
 800243a:	b08a      	sub	sp, #40	; 0x28
 800243c:	af00      	add	r7, sp, #0
 800243e:	60f8      	str	r0, [r7, #12]
 8002440:	60b9      	str	r1, [r7, #8]
 8002442:	607a      	str	r2, [r7, #4]
 8002444:	603b      	str	r3, [r7, #0]
  output_gadget_t gadget = buffer_gadget(s, n);
 8002446:	f107 0314 	add.w	r3, r7, #20
 800244a:	68ba      	ldr	r2, [r7, #8]
 800244c:	68f9      	ldr	r1, [r7, #12]
 800244e:	4618      	mov	r0, r3
 8002450:	f7fe fe74 	bl	800113c <buffer_gadget>
  return vsnprintf_impl(&gadget, format, arg);
 8002454:	f107 0314 	add.w	r3, r7, #20
 8002458:	683a      	ldr	r2, [r7, #0]
 800245a:	6879      	ldr	r1, [r7, #4]
 800245c:	4618      	mov	r0, r3
 800245e:	f7ff ffd7 	bl	8002410 <vsnprintf_impl>
 8002462:	4603      	mov	r3, r0
}
 8002464:	4618      	mov	r0, r3
 8002466:	3728      	adds	r7, #40	; 0x28
 8002468:	46bd      	mov	sp, r7
 800246a:	bd80      	pop	{r7, pc}

0800246c <vsprintf_>:

int vsprintf_(char* s, const char* format, va_list arg)
{
 800246c:	b580      	push	{r7, lr}
 800246e:	b084      	sub	sp, #16
 8002470:	af00      	add	r7, sp, #0
 8002472:	60f8      	str	r0, [r7, #12]
 8002474:	60b9      	str	r1, [r7, #8]
 8002476:	607a      	str	r2, [r7, #4]
  return vsnprintf_(s, PRINTF_MAX_POSSIBLE_BUFFER_SIZE, format, arg);
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	68ba      	ldr	r2, [r7, #8]
 800247c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8002480:	68f8      	ldr	r0, [r7, #12]
 8002482:	f7ff ffd9 	bl	8002438 <vsnprintf_>
 8002486:	4603      	mov	r3, r0
}
 8002488:	4618      	mov	r0, r3
 800248a:	3710      	adds	r7, #16
 800248c:	46bd      	mov	sp, r7
 800248e:	bd80      	pop	{r7, pc}

08002490 <sprintf_>:
  va_end(args);
  return ret;
}

int sprintf_(char* s, const char* format, ...)
{
 8002490:	b40e      	push	{r1, r2, r3}
 8002492:	b580      	push	{r7, lr}
 8002494:	b085      	sub	sp, #20
 8002496:	af00      	add	r7, sp, #0
 8002498:	6078      	str	r0, [r7, #4]
  va_list args;
  va_start(args, format);
 800249a:	f107 0320 	add.w	r3, r7, #32
 800249e:	60bb      	str	r3, [r7, #8]
  const int ret = vsprintf_(s, format, args);
 80024a0:	68ba      	ldr	r2, [r7, #8]
 80024a2:	69f9      	ldr	r1, [r7, #28]
 80024a4:	6878      	ldr	r0, [r7, #4]
 80024a6:	f7ff ffe1 	bl	800246c <vsprintf_>
 80024aa:	60f8      	str	r0, [r7, #12]
  va_end(args);
  return ret;
 80024ac:	68fb      	ldr	r3, [r7, #12]
}
 80024ae:	4618      	mov	r0, r3
 80024b0:	3714      	adds	r7, #20
 80024b2:	46bd      	mov	sp, r7
 80024b4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80024b8:	b003      	add	sp, #12
 80024ba:	4770      	bx	lr

080024bc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	b082      	sub	sp, #8
 80024c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80024c2:	4b11      	ldr	r3, [pc, #68]	; (8002508 <HAL_MspInit+0x4c>)
 80024c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80024c6:	4a10      	ldr	r2, [pc, #64]	; (8002508 <HAL_MspInit+0x4c>)
 80024c8:	f043 0301 	orr.w	r3, r3, #1
 80024cc:	6613      	str	r3, [r2, #96]	; 0x60
 80024ce:	4b0e      	ldr	r3, [pc, #56]	; (8002508 <HAL_MspInit+0x4c>)
 80024d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80024d2:	f003 0301 	and.w	r3, r3, #1
 80024d6:	607b      	str	r3, [r7, #4]
 80024d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80024da:	4b0b      	ldr	r3, [pc, #44]	; (8002508 <HAL_MspInit+0x4c>)
 80024dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024de:	4a0a      	ldr	r2, [pc, #40]	; (8002508 <HAL_MspInit+0x4c>)
 80024e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024e4:	6593      	str	r3, [r2, #88]	; 0x58
 80024e6:	4b08      	ldr	r3, [pc, #32]	; (8002508 <HAL_MspInit+0x4c>)
 80024e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024ee:	603b      	str	r3, [r7, #0]
 80024f0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80024f2:	2200      	movs	r2, #0
 80024f4:	210f      	movs	r1, #15
 80024f6:	f06f 0001 	mvn.w	r0, #1
 80024fa:	f000 fcc9 	bl	8002e90 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80024fe:	bf00      	nop
 8002500:	3708      	adds	r7, #8
 8002502:	46bd      	mov	sp, r7
 8002504:	bd80      	pop	{r7, pc}
 8002506:	bf00      	nop
 8002508:	40021000 	.word	0x40021000

0800250c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800250c:	b580      	push	{r7, lr}
 800250e:	b08e      	sub	sp, #56	; 0x38
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8002514:	2300      	movs	r3, #0
 8002516:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800251a:	4b34      	ldr	r3, [pc, #208]	; (80025ec <HAL_InitTick+0xe0>)
 800251c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800251e:	4a33      	ldr	r2, [pc, #204]	; (80025ec <HAL_InitTick+0xe0>)
 8002520:	f043 0310 	orr.w	r3, r3, #16
 8002524:	6593      	str	r3, [r2, #88]	; 0x58
 8002526:	4b31      	ldr	r3, [pc, #196]	; (80025ec <HAL_InitTick+0xe0>)
 8002528:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800252a:	f003 0310 	and.w	r3, r3, #16
 800252e:	60fb      	str	r3, [r7, #12]
 8002530:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002532:	f107 0210 	add.w	r2, r7, #16
 8002536:	f107 0314 	add.w	r3, r7, #20
 800253a:	4611      	mov	r1, r2
 800253c:	4618      	mov	r0, r3
 800253e:	f001 ff15 	bl	800436c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8002542:	6a3b      	ldr	r3, [r7, #32]
 8002544:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8002546:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002548:	2b00      	cmp	r3, #0
 800254a:	d103      	bne.n	8002554 <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800254c:	f001 fee2 	bl	8004314 <HAL_RCC_GetPCLK1Freq>
 8002550:	6378      	str	r0, [r7, #52]	; 0x34
 8002552:	e004      	b.n	800255e <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8002554:	f001 fede 	bl	8004314 <HAL_RCC_GetPCLK1Freq>
 8002558:	4603      	mov	r3, r0
 800255a:	005b      	lsls	r3, r3, #1
 800255c:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800255e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002560:	4a23      	ldr	r2, [pc, #140]	; (80025f0 <HAL_InitTick+0xe4>)
 8002562:	fba2 2303 	umull	r2, r3, r2, r3
 8002566:	0c9b      	lsrs	r3, r3, #18
 8002568:	3b01      	subs	r3, #1
 800256a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800256c:	4b21      	ldr	r3, [pc, #132]	; (80025f4 <HAL_InitTick+0xe8>)
 800256e:	4a22      	ldr	r2, [pc, #136]	; (80025f8 <HAL_InitTick+0xec>)
 8002570:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8002572:	4b20      	ldr	r3, [pc, #128]	; (80025f4 <HAL_InitTick+0xe8>)
 8002574:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002578:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800257a:	4a1e      	ldr	r2, [pc, #120]	; (80025f4 <HAL_InitTick+0xe8>)
 800257c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800257e:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8002580:	4b1c      	ldr	r3, [pc, #112]	; (80025f4 <HAL_InitTick+0xe8>)
 8002582:	2200      	movs	r2, #0
 8002584:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002586:	4b1b      	ldr	r3, [pc, #108]	; (80025f4 <HAL_InitTick+0xe8>)
 8002588:	2200      	movs	r2, #0
 800258a:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800258c:	4b19      	ldr	r3, [pc, #100]	; (80025f4 <HAL_InitTick+0xe8>)
 800258e:	2200      	movs	r2, #0
 8002590:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8002592:	4818      	ldr	r0, [pc, #96]	; (80025f4 <HAL_InitTick+0xe8>)
 8002594:	f002 fa74 	bl	8004a80 <HAL_TIM_Base_Init>
 8002598:	4603      	mov	r3, r0
 800259a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 800259e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d11b      	bne.n	80025de <HAL_InitTick+0xd2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 80025a6:	4813      	ldr	r0, [pc, #76]	; (80025f4 <HAL_InitTick+0xe8>)
 80025a8:	f002 facc 	bl	8004b44 <HAL_TIM_Base_Start_IT>
 80025ac:	4603      	mov	r3, r0
 80025ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 80025b2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d111      	bne.n	80025de <HAL_InitTick+0xd2>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80025ba:	2036      	movs	r0, #54	; 0x36
 80025bc:	f000 fc84 	bl	8002ec8 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	2b0f      	cmp	r3, #15
 80025c4:	d808      	bhi.n	80025d8 <HAL_InitTick+0xcc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 80025c6:	2200      	movs	r2, #0
 80025c8:	6879      	ldr	r1, [r7, #4]
 80025ca:	2036      	movs	r0, #54	; 0x36
 80025cc:	f000 fc60 	bl	8002e90 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80025d0:	4a0a      	ldr	r2, [pc, #40]	; (80025fc <HAL_InitTick+0xf0>)
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	6013      	str	r3, [r2, #0]
 80025d6:	e002      	b.n	80025de <HAL_InitTick+0xd2>
      }
      else
      {
        status = HAL_ERROR;
 80025d8:	2301      	movs	r3, #1
 80025da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80025de:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 80025e2:	4618      	mov	r0, r3
 80025e4:	3738      	adds	r7, #56	; 0x38
 80025e6:	46bd      	mov	sp, r7
 80025e8:	bd80      	pop	{r7, pc}
 80025ea:	bf00      	nop
 80025ec:	40021000 	.word	0x40021000
 80025f0:	431bde83 	.word	0x431bde83
 80025f4:	2000009c 	.word	0x2000009c
 80025f8:	40001000 	.word	0x40001000
 80025fc:	2000000c 	.word	0x2000000c

08002600 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002600:	b480      	push	{r7}
 8002602:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002604:	e7fe      	b.n	8002604 <NMI_Handler+0x4>

08002606 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002606:	b480      	push	{r7}
 8002608:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800260a:	e7fe      	b.n	800260a <HardFault_Handler+0x4>

0800260c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800260c:	b480      	push	{r7}
 800260e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002610:	e7fe      	b.n	8002610 <MemManage_Handler+0x4>

08002612 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002612:	b480      	push	{r7}
 8002614:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002616:	e7fe      	b.n	8002616 <BusFault_Handler+0x4>

08002618 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002618:	b480      	push	{r7}
 800261a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800261c:	e7fe      	b.n	800261c <UsageFault_Handler+0x4>

0800261e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800261e:	b480      	push	{r7}
 8002620:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002622:	bf00      	nop
 8002624:	46bd      	mov	sp, r7
 8002626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262a:	4770      	bx	lr

0800262c <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 800262c:	b580      	push	{r7, lr}
 800262e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8002630:	4802      	ldr	r0, [pc, #8]	; (800263c <DMA1_Channel5_IRQHandler+0x10>)
 8002632:	f000 fdee 	bl	8003212 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8002636:	bf00      	nop
 8002638:	bd80      	pop	{r7, pc}
 800263a:	bf00      	nop
 800263c:	200001f0 	.word	0x200001f0

08002640 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002640:	b580      	push	{r7, lr}
 8002642:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002644:	4802      	ldr	r0, [pc, #8]	; (8002650 <USART1_IRQHandler+0x10>)
 8002646:	f002 fe97 	bl	8005378 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800264a:	bf00      	nop
 800264c:	bd80      	pop	{r7, pc}
 800264e:	bf00      	nop
 8002650:	200000e8 	.word	0x200000e8

08002654 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002654:	b580      	push	{r7, lr}
 8002656:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002658:	4802      	ldr	r0, [pc, #8]	; (8002664 <USART2_IRQHandler+0x10>)
 800265a:	f002 fe8d 	bl	8005378 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800265e:	bf00      	nop
 8002660:	bd80      	pop	{r7, pc}
 8002662:	bf00      	nop
 8002664:	2000016c 	.word	0x2000016c

08002668 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002668:	b580      	push	{r7, lr}
 800266a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800266c:	4802      	ldr	r0, [pc, #8]	; (8002678 <TIM6_DAC_IRQHandler+0x10>)
 800266e:	f002 fabd 	bl	8004bec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002672:	bf00      	nop
 8002674:	bd80      	pop	{r7, pc}
 8002676:	bf00      	nop
 8002678:	2000009c 	.word	0x2000009c

0800267c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800267c:	b480      	push	{r7}
 800267e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002680:	4b06      	ldr	r3, [pc, #24]	; (800269c <SystemInit+0x20>)
 8002682:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002686:	4a05      	ldr	r2, [pc, #20]	; (800269c <SystemInit+0x20>)
 8002688:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800268c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8002690:	bf00      	nop
 8002692:	46bd      	mov	sp, r7
 8002694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002698:	4770      	bx	lr
 800269a:	bf00      	nop
 800269c:	e000ed00 	.word	0xe000ed00

080026a0 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_rx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80026a0:	b580      	push	{r7, lr}
 80026a2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80026a4:	4b14      	ldr	r3, [pc, #80]	; (80026f8 <MX_USART1_UART_Init+0x58>)
 80026a6:	4a15      	ldr	r2, [pc, #84]	; (80026fc <MX_USART1_UART_Init+0x5c>)
 80026a8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80026aa:	4b13      	ldr	r3, [pc, #76]	; (80026f8 <MX_USART1_UART_Init+0x58>)
 80026ac:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80026b0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80026b2:	4b11      	ldr	r3, [pc, #68]	; (80026f8 <MX_USART1_UART_Init+0x58>)
 80026b4:	2200      	movs	r2, #0
 80026b6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80026b8:	4b0f      	ldr	r3, [pc, #60]	; (80026f8 <MX_USART1_UART_Init+0x58>)
 80026ba:	2200      	movs	r2, #0
 80026bc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80026be:	4b0e      	ldr	r3, [pc, #56]	; (80026f8 <MX_USART1_UART_Init+0x58>)
 80026c0:	2200      	movs	r2, #0
 80026c2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80026c4:	4b0c      	ldr	r3, [pc, #48]	; (80026f8 <MX_USART1_UART_Init+0x58>)
 80026c6:	220c      	movs	r2, #12
 80026c8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80026ca:	4b0b      	ldr	r3, [pc, #44]	; (80026f8 <MX_USART1_UART_Init+0x58>)
 80026cc:	2200      	movs	r2, #0
 80026ce:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80026d0:	4b09      	ldr	r3, [pc, #36]	; (80026f8 <MX_USART1_UART_Init+0x58>)
 80026d2:	2200      	movs	r2, #0
 80026d4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80026d6:	4b08      	ldr	r3, [pc, #32]	; (80026f8 <MX_USART1_UART_Init+0x58>)
 80026d8:	2200      	movs	r2, #0
 80026da:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80026dc:	4b06      	ldr	r3, [pc, #24]	; (80026f8 <MX_USART1_UART_Init+0x58>)
 80026de:	2200      	movs	r2, #0
 80026e0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80026e2:	4805      	ldr	r0, [pc, #20]	; (80026f8 <MX_USART1_UART_Init+0x58>)
 80026e4:	f002 fc4c 	bl	8004f80 <HAL_UART_Init>
 80026e8:	4603      	mov	r3, r0
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d001      	beq.n	80026f2 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80026ee:	f7fe fc83 	bl	8000ff8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80026f2:	bf00      	nop
 80026f4:	bd80      	pop	{r7, pc}
 80026f6:	bf00      	nop
 80026f8:	200000e8 	.word	0x200000e8
 80026fc:	40013800 	.word	0x40013800

08002700 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002700:	b580      	push	{r7, lr}
 8002702:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002704:	4b14      	ldr	r3, [pc, #80]	; (8002758 <MX_USART2_UART_Init+0x58>)
 8002706:	4a15      	ldr	r2, [pc, #84]	; (800275c <MX_USART2_UART_Init+0x5c>)
 8002708:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800270a:	4b13      	ldr	r3, [pc, #76]	; (8002758 <MX_USART2_UART_Init+0x58>)
 800270c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002710:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002712:	4b11      	ldr	r3, [pc, #68]	; (8002758 <MX_USART2_UART_Init+0x58>)
 8002714:	2200      	movs	r2, #0
 8002716:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002718:	4b0f      	ldr	r3, [pc, #60]	; (8002758 <MX_USART2_UART_Init+0x58>)
 800271a:	2200      	movs	r2, #0
 800271c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800271e:	4b0e      	ldr	r3, [pc, #56]	; (8002758 <MX_USART2_UART_Init+0x58>)
 8002720:	2200      	movs	r2, #0
 8002722:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002724:	4b0c      	ldr	r3, [pc, #48]	; (8002758 <MX_USART2_UART_Init+0x58>)
 8002726:	220c      	movs	r2, #12
 8002728:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800272a:	4b0b      	ldr	r3, [pc, #44]	; (8002758 <MX_USART2_UART_Init+0x58>)
 800272c:	2200      	movs	r2, #0
 800272e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002730:	4b09      	ldr	r3, [pc, #36]	; (8002758 <MX_USART2_UART_Init+0x58>)
 8002732:	2200      	movs	r2, #0
 8002734:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002736:	4b08      	ldr	r3, [pc, #32]	; (8002758 <MX_USART2_UART_Init+0x58>)
 8002738:	2200      	movs	r2, #0
 800273a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800273c:	4b06      	ldr	r3, [pc, #24]	; (8002758 <MX_USART2_UART_Init+0x58>)
 800273e:	2200      	movs	r2, #0
 8002740:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002742:	4805      	ldr	r0, [pc, #20]	; (8002758 <MX_USART2_UART_Init+0x58>)
 8002744:	f002 fc1c 	bl	8004f80 <HAL_UART_Init>
 8002748:	4603      	mov	r3, r0
 800274a:	2b00      	cmp	r3, #0
 800274c:	d001      	beq.n	8002752 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800274e:	f7fe fc53 	bl	8000ff8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002752:	bf00      	nop
 8002754:	bd80      	pop	{r7, pc}
 8002756:	bf00      	nop
 8002758:	2000016c 	.word	0x2000016c
 800275c:	40004400 	.word	0x40004400

08002760 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002760:	b580      	push	{r7, lr}
 8002762:	b0a0      	sub	sp, #128	; 0x80
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002768:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800276c:	2200      	movs	r2, #0
 800276e:	601a      	str	r2, [r3, #0]
 8002770:	605a      	str	r2, [r3, #4]
 8002772:	609a      	str	r2, [r3, #8]
 8002774:	60da      	str	r2, [r3, #12]
 8002776:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002778:	f107 0318 	add.w	r3, r7, #24
 800277c:	2254      	movs	r2, #84	; 0x54
 800277e:	2100      	movs	r1, #0
 8002780:	4618      	mov	r0, r3
 8002782:	f007 f9df 	bl	8009b44 <memset>
  if(uartHandle->Instance==USART1)
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	4a63      	ldr	r2, [pc, #396]	; (8002918 <HAL_UART_MspInit+0x1b8>)
 800278c:	4293      	cmp	r3, r2
 800278e:	d169      	bne.n	8002864 <HAL_UART_MspInit+0x104>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002790:	2301      	movs	r3, #1
 8002792:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002794:	2300      	movs	r3, #0
 8002796:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002798:	f107 0318 	add.w	r3, r7, #24
 800279c:	4618      	mov	r0, r3
 800279e:	f001 fe77 	bl	8004490 <HAL_RCCEx_PeriphCLKConfig>
 80027a2:	4603      	mov	r3, r0
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d001      	beq.n	80027ac <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80027a8:	f7fe fc26 	bl	8000ff8 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80027ac:	4b5b      	ldr	r3, [pc, #364]	; (800291c <HAL_UART_MspInit+0x1bc>)
 80027ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80027b0:	4a5a      	ldr	r2, [pc, #360]	; (800291c <HAL_UART_MspInit+0x1bc>)
 80027b2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80027b6:	6613      	str	r3, [r2, #96]	; 0x60
 80027b8:	4b58      	ldr	r3, [pc, #352]	; (800291c <HAL_UART_MspInit+0x1bc>)
 80027ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80027bc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80027c0:	617b      	str	r3, [r7, #20]
 80027c2:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80027c4:	4b55      	ldr	r3, [pc, #340]	; (800291c <HAL_UART_MspInit+0x1bc>)
 80027c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027c8:	4a54      	ldr	r2, [pc, #336]	; (800291c <HAL_UART_MspInit+0x1bc>)
 80027ca:	f043 0301 	orr.w	r3, r3, #1
 80027ce:	64d3      	str	r3, [r2, #76]	; 0x4c
 80027d0:	4b52      	ldr	r3, [pc, #328]	; (800291c <HAL_UART_MspInit+0x1bc>)
 80027d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027d4:	f003 0301 	and.w	r3, r3, #1
 80027d8:	613b      	str	r3, [r7, #16]
 80027da:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80027dc:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80027e0:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027e2:	2302      	movs	r3, #2
 80027e4:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027e6:	2300      	movs	r3, #0
 80027e8:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027ea:	2303      	movs	r3, #3
 80027ec:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80027ee:	2307      	movs	r3, #7
 80027f0:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027f2:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80027f6:	4619      	mov	r1, r3
 80027f8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80027fc:	f000 fde8 	bl	80033d0 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8002800:	4b47      	ldr	r3, [pc, #284]	; (8002920 <HAL_UART_MspInit+0x1c0>)
 8002802:	4a48      	ldr	r2, [pc, #288]	; (8002924 <HAL_UART_MspInit+0x1c4>)
 8002804:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_2;
 8002806:	4b46      	ldr	r3, [pc, #280]	; (8002920 <HAL_UART_MspInit+0x1c0>)
 8002808:	2202      	movs	r2, #2
 800280a:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800280c:	4b44      	ldr	r3, [pc, #272]	; (8002920 <HAL_UART_MspInit+0x1c0>)
 800280e:	2200      	movs	r2, #0
 8002810:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002812:	4b43      	ldr	r3, [pc, #268]	; (8002920 <HAL_UART_MspInit+0x1c0>)
 8002814:	2200      	movs	r2, #0
 8002816:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002818:	4b41      	ldr	r3, [pc, #260]	; (8002920 <HAL_UART_MspInit+0x1c0>)
 800281a:	2280      	movs	r2, #128	; 0x80
 800281c:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800281e:	4b40      	ldr	r3, [pc, #256]	; (8002920 <HAL_UART_MspInit+0x1c0>)
 8002820:	2200      	movs	r2, #0
 8002822:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002824:	4b3e      	ldr	r3, [pc, #248]	; (8002920 <HAL_UART_MspInit+0x1c0>)
 8002826:	2200      	movs	r2, #0
 8002828:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 800282a:	4b3d      	ldr	r3, [pc, #244]	; (8002920 <HAL_UART_MspInit+0x1c0>)
 800282c:	2220      	movs	r2, #32
 800282e:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002830:	4b3b      	ldr	r3, [pc, #236]	; (8002920 <HAL_UART_MspInit+0x1c0>)
 8002832:	2200      	movs	r2, #0
 8002834:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8002836:	483a      	ldr	r0, [pc, #232]	; (8002920 <HAL_UART_MspInit+0x1c0>)
 8002838:	f000 fb54 	bl	8002ee4 <HAL_DMA_Init>
 800283c:	4603      	mov	r3, r0
 800283e:	2b00      	cmp	r3, #0
 8002840:	d001      	beq.n	8002846 <HAL_UART_MspInit+0xe6>
    {
      Error_Handler();
 8002842:	f7fe fbd9 	bl	8000ff8 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	4a35      	ldr	r2, [pc, #212]	; (8002920 <HAL_UART_MspInit+0x1c0>)
 800284a:	671a      	str	r2, [r3, #112]	; 0x70
 800284c:	4a34      	ldr	r2, [pc, #208]	; (8002920 <HAL_UART_MspInit+0x1c0>)
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8002852:	2200      	movs	r2, #0
 8002854:	2105      	movs	r1, #5
 8002856:	2025      	movs	r0, #37	; 0x25
 8002858:	f000 fb1a 	bl	8002e90 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800285c:	2025      	movs	r0, #37	; 0x25
 800285e:	f000 fb33 	bl	8002ec8 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8002862:	e055      	b.n	8002910 <HAL_UART_MspInit+0x1b0>
  else if(uartHandle->Instance==USART2)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	4a2f      	ldr	r2, [pc, #188]	; (8002928 <HAL_UART_MspInit+0x1c8>)
 800286a:	4293      	cmp	r3, r2
 800286c:	d150      	bne.n	8002910 <HAL_UART_MspInit+0x1b0>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800286e:	2302      	movs	r3, #2
 8002870:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002872:	2300      	movs	r3, #0
 8002874:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002876:	f107 0318 	add.w	r3, r7, #24
 800287a:	4618      	mov	r0, r3
 800287c:	f001 fe08 	bl	8004490 <HAL_RCCEx_PeriphCLKConfig>
 8002880:	4603      	mov	r3, r0
 8002882:	2b00      	cmp	r3, #0
 8002884:	d001      	beq.n	800288a <HAL_UART_MspInit+0x12a>
      Error_Handler();
 8002886:	f7fe fbb7 	bl	8000ff8 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 800288a:	4b24      	ldr	r3, [pc, #144]	; (800291c <HAL_UART_MspInit+0x1bc>)
 800288c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800288e:	4a23      	ldr	r2, [pc, #140]	; (800291c <HAL_UART_MspInit+0x1bc>)
 8002890:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002894:	6593      	str	r3, [r2, #88]	; 0x58
 8002896:	4b21      	ldr	r3, [pc, #132]	; (800291c <HAL_UART_MspInit+0x1bc>)
 8002898:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800289a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800289e:	60fb      	str	r3, [r7, #12]
 80028a0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80028a2:	4b1e      	ldr	r3, [pc, #120]	; (800291c <HAL_UART_MspInit+0x1bc>)
 80028a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028a6:	4a1d      	ldr	r2, [pc, #116]	; (800291c <HAL_UART_MspInit+0x1bc>)
 80028a8:	f043 0301 	orr.w	r3, r3, #1
 80028ac:	64d3      	str	r3, [r2, #76]	; 0x4c
 80028ae:	4b1b      	ldr	r3, [pc, #108]	; (800291c <HAL_UART_MspInit+0x1bc>)
 80028b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028b2:	f003 0301 	and.w	r3, r3, #1
 80028b6:	60bb      	str	r3, [r7, #8]
 80028b8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 80028ba:	2304      	movs	r3, #4
 80028bc:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028be:	2302      	movs	r3, #2
 80028c0:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028c2:	2300      	movs	r3, #0
 80028c4:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028c6:	2303      	movs	r3, #3
 80028c8:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80028ca:	2307      	movs	r3, #7
 80028cc:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 80028ce:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80028d2:	4619      	mov	r1, r3
 80028d4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80028d8:	f000 fd7a 	bl	80033d0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 80028dc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80028e0:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028e2:	2302      	movs	r3, #2
 80028e4:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028e6:	2300      	movs	r3, #0
 80028e8:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028ea:	2303      	movs	r3, #3
 80028ec:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 80028ee:	2303      	movs	r3, #3
 80028f0:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 80028f2:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80028f6:	4619      	mov	r1, r3
 80028f8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80028fc:	f000 fd68 	bl	80033d0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8002900:	2200      	movs	r2, #0
 8002902:	2105      	movs	r1, #5
 8002904:	2026      	movs	r0, #38	; 0x26
 8002906:	f000 fac3 	bl	8002e90 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800290a:	2026      	movs	r0, #38	; 0x26
 800290c:	f000 fadc 	bl	8002ec8 <HAL_NVIC_EnableIRQ>
}
 8002910:	bf00      	nop
 8002912:	3780      	adds	r7, #128	; 0x80
 8002914:	46bd      	mov	sp, r7
 8002916:	bd80      	pop	{r7, pc}
 8002918:	40013800 	.word	0x40013800
 800291c:	40021000 	.word	0x40021000
 8002920:	200001f0 	.word	0x200001f0
 8002924:	40020058 	.word	0x40020058
 8002928:	40004400 	.word	0x40004400

0800292c <LL_USART_EnableIT_IDLE>:
  * @rmtoll CR1          IDLEIE        LL_USART_EnableIT_IDLE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_IDLE(USART_TypeDef *USARTx)
{
 800292c:	b480      	push	{r7}
 800292e:	b089      	sub	sp, #36	; 0x24
 8002930:	af00      	add	r7, sp, #0
 8002932:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_IDLEIE);
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	60fb      	str	r3, [r7, #12]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	e853 3f00 	ldrex	r3, [r3]
 800293e:	60bb      	str	r3, [r7, #8]
   return(result);
 8002940:	68bb      	ldr	r3, [r7, #8]
 8002942:	f043 0310 	orr.w	r3, r3, #16
 8002946:	61fb      	str	r3, [r7, #28]
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	69fa      	ldr	r2, [r7, #28]
 800294c:	61ba      	str	r2, [r7, #24]
 800294e:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002950:	6979      	ldr	r1, [r7, #20]
 8002952:	69ba      	ldr	r2, [r7, #24]
 8002954:	e841 2300 	strex	r3, r2, [r1]
 8002958:	613b      	str	r3, [r7, #16]
   return(result);
 800295a:	693b      	ldr	r3, [r7, #16]
 800295c:	2b00      	cmp	r3, #0
 800295e:	d1e9      	bne.n	8002934 <LL_USART_EnableIT_IDLE+0x8>
}
 8002960:	bf00      	nop
 8002962:	bf00      	nop
 8002964:	3724      	adds	r7, #36	; 0x24
 8002966:	46bd      	mov	sp, r7
 8002968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296c:	4770      	bx	lr
	...

08002970 <StartDefaultTask>:
char at_cmd_buffer[AT_CMD_BUFFER_SIZE] = {0};

// NOTE: COPY & PASTING INTO SERIAL TERMINAL DOES NOT WORK!
// The serial terminal is meant for human input, since it is character by character via interrupts!

void StartDefaultTask(void *argument) {
 8002970:	b580      	push	{r7, lr}
 8002972:	b084      	sub	sp, #16
 8002974:	af02      	add	r7, sp, #8
 8002976:	6078      	str	r0, [r7, #4]
	// Create tasks
	//xTaskCreate(uart2Task, "Uart1Task", 128, NULL, osPriorityLow, NULL);
	xTaskCreate(UartHandlerTask, xUartHandlerTaskName, 128, NULL, osPriorityNormal1, &xUartTaskHandle);
 8002978:	4b29      	ldr	r3, [pc, #164]	; (8002a20 <StartDefaultTask+0xb0>)
 800297a:	6819      	ldr	r1, [r3, #0]
 800297c:	4b29      	ldr	r3, [pc, #164]	; (8002a24 <StartDefaultTask+0xb4>)
 800297e:	9301      	str	r3, [sp, #4]
 8002980:	2319      	movs	r3, #25
 8002982:	9300      	str	r3, [sp, #0]
 8002984:	2300      	movs	r3, #0
 8002986:	2280      	movs	r2, #128	; 0x80
 8002988:	4827      	ldr	r0, [pc, #156]	; (8002a28 <StartDefaultTask+0xb8>)
 800298a:	f005 f89c 	bl	8007ac6 <xTaskCreate>

	// Activate UART interrupts and reception
	LL_USART_EnableIT_IDLE(USART1); // Enable idle line detection (interrupt) for uart1
 800298e:	4827      	ldr	r0, [pc, #156]	; (8002a2c <StartDefaultTask+0xbc>)
 8002990:	f7ff ffcc 	bl	800292c <LL_USART_EnableIT_IDLE>
	// NOTE: Please check stm32l4xx_it.c for the USER-CODE that handles the IDLE Line Interrupt!!
	HAL_UART_Receive_DMA(&huart1, uart1Buffer, BUFFER_SIZE);
 8002994:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002998:	4925      	ldr	r1, [pc, #148]	; (8002a30 <StartDefaultTask+0xc0>)
 800299a:	4826      	ldr	r0, [pc, #152]	; (8002a34 <StartDefaultTask+0xc4>)
 800299c:	f002 fc96 	bl	80052cc <HAL_UART_Receive_DMA>
	// ... add your initial configuration commands below ...

	// Example configuration (I recommend you try these commands over serial terminal first)

	// Configure Station+AP Mode
	at_set_command(at_cmd_buffer, SendATCommand, AT_WIFI_Set_Mode, "%u", AT_WIFI_Mixed_Mode);
 80029a0:	2303      	movs	r3, #3
 80029a2:	9300      	str	r3, [sp, #0]
 80029a4:	4b24      	ldr	r3, [pc, #144]	; (8002a38 <StartDefaultTask+0xc8>)
 80029a6:	4a25      	ldr	r2, [pc, #148]	; (8002a3c <StartDefaultTask+0xcc>)
 80029a8:	4925      	ldr	r1, [pc, #148]	; (8002a40 <StartDefaultTask+0xd0>)
 80029aa:	4826      	ldr	r0, [pc, #152]	; (8002a44 <StartDefaultTask+0xd4>)
 80029ac:	f7fe f9a6 	bl	8000cfc <at_set_command>
	osDelay(10);
 80029b0:	200a      	movs	r0, #10
 80029b2:	f004 fa3b 	bl	8006e2c <osDelay>
	// Allow multiple connections
	at_set_command(at_cmd_buffer, SendATCommand, AT_IP_Set_MultiConnectionMode, "%u", AT_IP_ConnectionMode_Multiple);
 80029b6:	2301      	movs	r3, #1
 80029b8:	9300      	str	r3, [sp, #0]
 80029ba:	4b1f      	ldr	r3, [pc, #124]	; (8002a38 <StartDefaultTask+0xc8>)
 80029bc:	4a22      	ldr	r2, [pc, #136]	; (8002a48 <StartDefaultTask+0xd8>)
 80029be:	4920      	ldr	r1, [pc, #128]	; (8002a40 <StartDefaultTask+0xd0>)
 80029c0:	4820      	ldr	r0, [pc, #128]	; (8002a44 <StartDefaultTask+0xd4>)
 80029c2:	f7fe f99b 	bl	8000cfc <at_set_command>
	osDelay(10);
 80029c6:	200a      	movs	r0, #10
 80029c8:	f004 fa30 	bl	8006e2c <osDelay>
	// Start TCP server on Port 80
	at_set_command(at_cmd_buffer, SendATCommand, AT_IP_Server, "%u,%u", AT_IP_Server_Create, 80);
 80029cc:	2350      	movs	r3, #80	; 0x50
 80029ce:	9301      	str	r3, [sp, #4]
 80029d0:	2301      	movs	r3, #1
 80029d2:	9300      	str	r3, [sp, #0]
 80029d4:	4b1d      	ldr	r3, [pc, #116]	; (8002a4c <StartDefaultTask+0xdc>)
 80029d6:	4a1e      	ldr	r2, [pc, #120]	; (8002a50 <StartDefaultTask+0xe0>)
 80029d8:	4919      	ldr	r1, [pc, #100]	; (8002a40 <StartDefaultTask+0xd0>)
 80029da:	481a      	ldr	r0, [pc, #104]	; (8002a44 <StartDefaultTask+0xd4>)
 80029dc:	f7fe f98e 	bl	8000cfc <at_set_command>
	osDelay(10);
 80029e0:	200a      	movs	r0, #10
 80029e2:	f004 fa23 	bl	8006e2c <osDelay>
	// CONNECTs to YOUR-SSID with YOUR-WIFI-PWD
	at_set_command(at_cmd_buffer, SendATCommand, AT_WIFI_Connect, "\"%s\",\"%s\"", "lustig", "@Kienmayergasse62/13");
 80029e6:	4b1b      	ldr	r3, [pc, #108]	; (8002a54 <StartDefaultTask+0xe4>)
 80029e8:	9301      	str	r3, [sp, #4]
 80029ea:	4b1b      	ldr	r3, [pc, #108]	; (8002a58 <StartDefaultTask+0xe8>)
 80029ec:	9300      	str	r3, [sp, #0]
 80029ee:	4b1b      	ldr	r3, [pc, #108]	; (8002a5c <StartDefaultTask+0xec>)
 80029f0:	4a1b      	ldr	r2, [pc, #108]	; (8002a60 <StartDefaultTask+0xf0>)
 80029f2:	4913      	ldr	r1, [pc, #76]	; (8002a40 <StartDefaultTask+0xd0>)
 80029f4:	4813      	ldr	r0, [pc, #76]	; (8002a44 <StartDefaultTask+0xd4>)
 80029f6:	f7fe f981 	bl	8000cfc <at_set_command>
	osDelay(10);
 80029fa:	200a      	movs	r0, #10
 80029fc:	f004 fa16 	bl	8006e2c <osDelay>
	at_execute_command(at_cmd_buffer, SendATCommand, AT_Startup);
 8002a00:	4a18      	ldr	r2, [pc, #96]	; (8002a64 <StartDefaultTask+0xf4>)
 8002a02:	490f      	ldr	r1, [pc, #60]	; (8002a40 <StartDefaultTask+0xd0>)
 8002a04:	480f      	ldr	r0, [pc, #60]	; (8002a44 <StartDefaultTask+0xd4>)
 8002a06:	f7fe f9d3 	bl	8000db0 <at_execute_command>
	osDelay(10);
 8002a0a:	200a      	movs	r0, #10
 8002a0c:	f004 fa0e 	bl	8006e2c <osDelay>

	HAL_UART_Receive_IT(&huart2, &uart2_rx_char, 1);
 8002a10:	2201      	movs	r2, #1
 8002a12:	4915      	ldr	r1, [pc, #84]	; (8002a68 <StartDefaultTask+0xf8>)
 8002a14:	4815      	ldr	r0, [pc, #84]	; (8002a6c <StartDefaultTask+0xfc>)
 8002a16:	f002 fc03 	bl	8005220 <HAL_UART_Receive_IT>

	osThreadExit();
 8002a1a:	f004 fa01 	bl	8006e20 <osThreadExit>
 8002a1e:	bf00      	nop
 8002a20:	20000004 	.word	0x20000004
 8002a24:	2000223c 	.word	0x2000223c
 8002a28:	08002a71 	.word	0x08002a71
 8002a2c:	40013800 	.word	0x40013800
 8002a30:	20000238 	.word	0x20000238
 8002a34:	200000e8 	.word	0x200000e8
 8002a38:	08009d54 	.word	0x08009d54
 8002a3c:	08009d58 	.word	0x08009d58
 8002a40:	08002c35 	.word	0x08002c35
 8002a44:	20002240 	.word	0x20002240
 8002a48:	08009d64 	.word	0x08009d64
 8002a4c:	08009d70 	.word	0x08009d70
 8002a50:	08009d78 	.word	0x08009d78
 8002a54:	08009da0 	.word	0x08009da0
 8002a58:	08009db8 	.word	0x08009db8
 8002a5c:	08009d88 	.word	0x08009d88
 8002a60:	08009d94 	.word	0x08009d94
 8002a64:	08009dc0 	.word	0x08009dc0
 8002a68:	2000223a 	.word	0x2000223a
 8002a6c:	2000016c 	.word	0x2000016c

08002a70 <UartHandlerTask>:
}

void UartHandlerTask(void *argument) {
 8002a70:	b580      	push	{r7, lr}
 8002a72:	b086      	sub	sp, #24
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	6078      	str	r0, [r7, #4]
	static size_t old_pos = 0;  // Track the position of last character processed

	while(1)
	{
		// Wait for a task notification indicating an uart event
		if(xTaskNotifyWait(0x00, UINT32_MAX, &ulNotificationValue, portMAX_DELAY) == pdPASS) {
 8002a78:	f107 020c 	add.w	r2, r7, #12
 8002a7c:	f04f 33ff 	mov.w	r3, #4294967295
 8002a80:	f04f 31ff 	mov.w	r1, #4294967295
 8002a84:	2000      	movs	r0, #0
 8002a86:	f005 ff07 	bl	8008898 <xTaskNotifyWait>
 8002a8a:	4603      	mov	r3, r0
 8002a8c:	2b01      	cmp	r3, #1
 8002a8e:	d1f3      	bne.n	8002a78 <UartHandlerTask+0x8>

			if(ulNotificationValue & UART1_IDLE_EVENT) // Received message from UART1
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	f003 0301 	and.w	r3, r3, #1
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d03e      	beq.n	8002b18 <UartHandlerTask+0xa8>
			{
				size_t new_pos = BUFFER_SIZE - huart1.hdmarx->Instance->CNDTR;  // Compute the new position in the buffer
 8002a9a:	4b44      	ldr	r3, [pc, #272]	; (8002bac <UartHandlerTask+0x13c>)
 8002a9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	685b      	ldr	r3, [r3, #4]
 8002aa2:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
 8002aa6:	617b      	str	r3, [r7, #20]
				size_t length;

				if(new_pos != old_pos)  // Check if any new data is received
 8002aa8:	4b41      	ldr	r3, [pc, #260]	; (8002bb0 <UartHandlerTask+0x140>)
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	697a      	ldr	r2, [r7, #20]
 8002aae:	429a      	cmp	r2, r3
 8002ab0:	d032      	beq.n	8002b18 <UartHandlerTask+0xa8>
				{
					// The transmissions here are also in blocking mode, otherwise output is cutoff!
					// If received data is BIGGER than buffer size, then output will be cutoff! (=> Increase buffer size)
					if (new_pos > old_pos)  // If data does not wrap around the buffer
 8002ab2:	4b3f      	ldr	r3, [pc, #252]	; (8002bb0 <UartHandlerTask+0x140>)
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	697a      	ldr	r2, [r7, #20]
 8002ab8:	429a      	cmp	r2, r3
 8002aba:	d910      	bls.n	8002ade <UartHandlerTask+0x6e>
					{
						length = new_pos - old_pos;
 8002abc:	4b3c      	ldr	r3, [pc, #240]	; (8002bb0 <UartHandlerTask+0x140>)
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	697a      	ldr	r2, [r7, #20]
 8002ac2:	1ad3      	subs	r3, r2, r3
 8002ac4:	613b      	str	r3, [r7, #16]
						// Process your data => uart1Buffer[old_pos] TO uart1Buffer[old_pos+length] == Received DATA
						HAL_UART_Transmit(&huart2, &uart1Buffer[old_pos], length, HAL_MAX_DELAY);
 8002ac6:	4b3a      	ldr	r3, [pc, #232]	; (8002bb0 <UartHandlerTask+0x140>)
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	4a3a      	ldr	r2, [pc, #232]	; (8002bb4 <UartHandlerTask+0x144>)
 8002acc:	1899      	adds	r1, r3, r2
 8002ace:	693b      	ldr	r3, [r7, #16]
 8002ad0:	b29a      	uxth	r2, r3
 8002ad2:	f04f 33ff 	mov.w	r3, #4294967295
 8002ad6:	4838      	ldr	r0, [pc, #224]	; (8002bb8 <UartHandlerTask+0x148>)
 8002ad8:	f002 faa0 	bl	800501c <HAL_UART_Transmit>
 8002adc:	e019      	b.n	8002b12 <UartHandlerTask+0xa2>
					else  // If data wraps around the buffer
					{
						// If you process data in here, you'll need to partially construct your data

						// First transmit the data until the end of the buffer
						length = BUFFER_SIZE - old_pos;
 8002ade:	4b34      	ldr	r3, [pc, #208]	; (8002bb0 <UartHandlerTask+0x140>)
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
 8002ae6:	613b      	str	r3, [r7, #16]
						HAL_UART_Transmit(&huart2, &uart1Buffer[old_pos], length, HAL_MAX_DELAY);
 8002ae8:	4b31      	ldr	r3, [pc, #196]	; (8002bb0 <UartHandlerTask+0x140>)
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	4a31      	ldr	r2, [pc, #196]	; (8002bb4 <UartHandlerTask+0x144>)
 8002aee:	1899      	adds	r1, r3, r2
 8002af0:	693b      	ldr	r3, [r7, #16]
 8002af2:	b29a      	uxth	r2, r3
 8002af4:	f04f 33ff 	mov.w	r3, #4294967295
 8002af8:	482f      	ldr	r0, [pc, #188]	; (8002bb8 <UartHandlerTask+0x148>)
 8002afa:	f002 fa8f 	bl	800501c <HAL_UART_Transmit>

						// Then transmit the remaining data from the beginning of the buffer
						length = new_pos;
 8002afe:	697b      	ldr	r3, [r7, #20]
 8002b00:	613b      	str	r3, [r7, #16]
						HAL_UART_Transmit(&huart2, uart1Buffer, length, HAL_MAX_DELAY);
 8002b02:	693b      	ldr	r3, [r7, #16]
 8002b04:	b29a      	uxth	r2, r3
 8002b06:	f04f 33ff 	mov.w	r3, #4294967295
 8002b0a:	492a      	ldr	r1, [pc, #168]	; (8002bb4 <UartHandlerTask+0x144>)
 8002b0c:	482a      	ldr	r0, [pc, #168]	; (8002bb8 <UartHandlerTask+0x148>)
 8002b0e:	f002 fa85 	bl	800501c <HAL_UART_Transmit>
					}

					old_pos = new_pos;  // Update the position of the last character processed
 8002b12:	4a27      	ldr	r2, [pc, #156]	; (8002bb0 <UartHandlerTask+0x140>)
 8002b14:	697b      	ldr	r3, [r7, #20]
 8002b16:	6013      	str	r3, [r2, #0]
				}
			}
			if(ulNotificationValue & UART2_EVENT) // Received CHARACTER from UART2
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	f003 0302 	and.w	r3, r3, #2
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d0aa      	beq.n	8002a78 <UartHandlerTask+0x8>
			{
				char c = (char)uart2_rx_char;
 8002b22:	4b26      	ldr	r3, [pc, #152]	; (8002bbc <UartHandlerTask+0x14c>)
 8002b24:	781b      	ldrb	r3, [r3, #0]
 8002b26:	72fb      	strb	r3, [r7, #11]

				// Echo back the character to the terminal
				HAL_UART_Transmit_IT(&huart2, (uint8_t*)&c, 1);
 8002b28:	f107 030b 	add.w	r3, r7, #11
 8002b2c:	2201      	movs	r2, #1
 8002b2e:	4619      	mov	r1, r3
 8002b30:	4821      	ldr	r0, [pc, #132]	; (8002bb8 <UartHandlerTask+0x148>)
 8002b32:	f002 fb07 	bl	8005144 <HAL_UART_Transmit_IT>

				// If newline, forward the buffer to UART1 and reset buffer
				if(c == '\r')
 8002b36:	7afb      	ldrb	r3, [r7, #11]
 8002b38:	2b0d      	cmp	r3, #13
 8002b3a:	d12c      	bne.n	8002b96 <UartHandlerTask+0x126>
				{
					uart2Buffer[uart2BufferIndex++] = '\r';
 8002b3c:	4b20      	ldr	r3, [pc, #128]	; (8002bc0 <UartHandlerTask+0x150>)
 8002b3e:	881b      	ldrh	r3, [r3, #0]
 8002b40:	1c5a      	adds	r2, r3, #1
 8002b42:	b291      	uxth	r1, r2
 8002b44:	4a1e      	ldr	r2, [pc, #120]	; (8002bc0 <UartHandlerTask+0x150>)
 8002b46:	8011      	strh	r1, [r2, #0]
 8002b48:	461a      	mov	r2, r3
 8002b4a:	4b1e      	ldr	r3, [pc, #120]	; (8002bc4 <UartHandlerTask+0x154>)
 8002b4c:	210d      	movs	r1, #13
 8002b4e:	5499      	strb	r1, [r3, r2]
					uart2Buffer[uart2BufferIndex++] = '\n';
 8002b50:	4b1b      	ldr	r3, [pc, #108]	; (8002bc0 <UartHandlerTask+0x150>)
 8002b52:	881b      	ldrh	r3, [r3, #0]
 8002b54:	1c5a      	adds	r2, r3, #1
 8002b56:	b291      	uxth	r1, r2
 8002b58:	4a19      	ldr	r2, [pc, #100]	; (8002bc0 <UartHandlerTask+0x150>)
 8002b5a:	8011      	strh	r1, [r2, #0]
 8002b5c:	461a      	mov	r2, r3
 8002b5e:	4b19      	ldr	r3, [pc, #100]	; (8002bc4 <UartHandlerTask+0x154>)
 8002b60:	210a      	movs	r1, #10
 8002b62:	5499      	strb	r1, [r3, r2]
					HAL_UART_Transmit_IT(&huart2, (uint8_t*)newLine, 2);
 8002b64:	4b18      	ldr	r3, [pc, #96]	; (8002bc8 <UartHandlerTask+0x158>)
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	2202      	movs	r2, #2
 8002b6a:	4619      	mov	r1, r3
 8002b6c:	4812      	ldr	r0, [pc, #72]	; (8002bb8 <UartHandlerTask+0x148>)
 8002b6e:	f002 fae9 	bl	8005144 <HAL_UART_Transmit_IT>
					// This call will be made in blocking mode, because we'll clear the buffer!
					HAL_UART_Transmit(&huart1, uart2Buffer, uart2BufferIndex, HAL_MAX_DELAY);
 8002b72:	4b13      	ldr	r3, [pc, #76]	; (8002bc0 <UartHandlerTask+0x150>)
 8002b74:	881a      	ldrh	r2, [r3, #0]
 8002b76:	f04f 33ff 	mov.w	r3, #4294967295
 8002b7a:	4912      	ldr	r1, [pc, #72]	; (8002bc4 <UartHandlerTask+0x154>)
 8002b7c:	480b      	ldr	r0, [pc, #44]	; (8002bac <UartHandlerTask+0x13c>)
 8002b7e:	f002 fa4d 	bl	800501c <HAL_UART_Transmit>
					memset(uart2Buffer, 0, BUFFER_SIZE);
 8002b82:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002b86:	2100      	movs	r1, #0
 8002b88:	480e      	ldr	r0, [pc, #56]	; (8002bc4 <UartHandlerTask+0x154>)
 8002b8a:	f006 ffdb 	bl	8009b44 <memset>
					uart2BufferIndex = 0;
 8002b8e:	4b0c      	ldr	r3, [pc, #48]	; (8002bc0 <UartHandlerTask+0x150>)
 8002b90:	2200      	movs	r2, #0
 8002b92:	801a      	strh	r2, [r3, #0]
 8002b94:	e770      	b.n	8002a78 <UartHandlerTask+0x8>
				}
				else
				{
					// Add character to buffer
					uart2Buffer[uart2BufferIndex++] = c;
 8002b96:	4b0a      	ldr	r3, [pc, #40]	; (8002bc0 <UartHandlerTask+0x150>)
 8002b98:	881b      	ldrh	r3, [r3, #0]
 8002b9a:	1c5a      	adds	r2, r3, #1
 8002b9c:	b291      	uxth	r1, r2
 8002b9e:	4a08      	ldr	r2, [pc, #32]	; (8002bc0 <UartHandlerTask+0x150>)
 8002ba0:	8011      	strh	r1, [r2, #0]
 8002ba2:	461a      	mov	r2, r3
 8002ba4:	7af9      	ldrb	r1, [r7, #11]
 8002ba6:	4b07      	ldr	r3, [pc, #28]	; (8002bc4 <UartHandlerTask+0x154>)
 8002ba8:	5499      	strb	r1, [r3, r2]
		if(xTaskNotifyWait(0x00, UINT32_MAX, &ulNotificationValue, portMAX_DELAY) == pdPASS) {
 8002baa:	e765      	b.n	8002a78 <UartHandlerTask+0x8>
 8002bac:	200000e8 	.word	0x200000e8
 8002bb0:	200022c0 	.word	0x200022c0
 8002bb4:	20000238 	.word	0x20000238
 8002bb8:	2000016c 	.word	0x2000016c
 8002bbc:	2000223a 	.word	0x2000223a
 8002bc0:	20002238 	.word	0x20002238
 8002bc4:	20001238 	.word	0x20001238
 8002bc8:	20000008 	.word	0x20000008

08002bcc <HAL_UART_RxCpltCallback>:
		}
	}
}
// Interrupt callback routine for UART
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	b086      	sub	sp, #24
 8002bd0:	af02      	add	r7, sp, #8
 8002bd2:	6078      	str	r0, [r7, #4]
  if(huart->Instance == USART2) {
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	4a11      	ldr	r2, [pc, #68]	; (8002c20 <HAL_UART_RxCpltCallback+0x54>)
 8002bda:	4293      	cmp	r3, r2
 8002bdc:	d11b      	bne.n	8002c16 <HAL_UART_RxCpltCallback+0x4a>
	  BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8002bde:	2300      	movs	r3, #0
 8002be0:	60fb      	str	r3, [r7, #12]
	  xTaskNotifyFromISR(xUartTaskHandle, UART2_EVENT, eSetBits, &xHigherPriorityTaskWoken);
 8002be2:	4b10      	ldr	r3, [pc, #64]	; (8002c24 <HAL_UART_RxCpltCallback+0x58>)
 8002be4:	6818      	ldr	r0, [r3, #0]
 8002be6:	f107 030c 	add.w	r3, r7, #12
 8002bea:	9300      	str	r3, [sp, #0]
 8002bec:	2300      	movs	r3, #0
 8002bee:	2201      	movs	r2, #1
 8002bf0:	2102      	movs	r1, #2
 8002bf2:	f005 feb1 	bl	8008958 <xTaskGenericNotifyFromISR>
	  portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d007      	beq.n	8002c0c <HAL_UART_RxCpltCallback+0x40>
 8002bfc:	4b0a      	ldr	r3, [pc, #40]	; (8002c28 <HAL_UART_RxCpltCallback+0x5c>)
 8002bfe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002c02:	601a      	str	r2, [r3, #0]
 8002c04:	f3bf 8f4f 	dsb	sy
 8002c08:	f3bf 8f6f 	isb	sy

	  // Restart reception with interrupt
	  HAL_UART_Receive_IT(&huart2, &uart2_rx_char, 1);
 8002c0c:	2201      	movs	r2, #1
 8002c0e:	4907      	ldr	r1, [pc, #28]	; (8002c2c <HAL_UART_RxCpltCallback+0x60>)
 8002c10:	4807      	ldr	r0, [pc, #28]	; (8002c30 <HAL_UART_RxCpltCallback+0x64>)
 8002c12:	f002 fb05 	bl	8005220 <HAL_UART_Receive_IT>
  }
}
 8002c16:	bf00      	nop
 8002c18:	3710      	adds	r7, #16
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	bd80      	pop	{r7, pc}
 8002c1e:	bf00      	nop
 8002c20:	40004400 	.word	0x40004400
 8002c24:	2000223c 	.word	0x2000223c
 8002c28:	e000ed04 	.word	0xe000ed04
 8002c2c:	2000223a 	.word	0x2000223a
 8002c30:	2000016c 	.word	0x2000016c

08002c34 <SendATCommand>:

void SendATCommand(char *command, int length) {
 8002c34:	b580      	push	{r7, lr}
 8002c36:	b082      	sub	sp, #8
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	6078      	str	r0, [r7, #4]
 8002c3c:	6039      	str	r1, [r7, #0]
	uint8_t *buffer = (uint8_t*)pvPortMalloc(sizeof(char)*cmd_length+2);
	strncpy((char*)buffer, command, cmd_length);
	buffer[cmd_length] = '\r';
	buffer[cmd_length+1] = '\n';
	*/
	HAL_UART_Transmit(&huart1, (uint8_t*)command, length, HAL_MAX_DELAY);
 8002c3e:	683b      	ldr	r3, [r7, #0]
 8002c40:	b29a      	uxth	r2, r3
 8002c42:	f04f 33ff 	mov.w	r3, #4294967295
 8002c46:	6879      	ldr	r1, [r7, #4]
 8002c48:	4803      	ldr	r0, [pc, #12]	; (8002c58 <SendATCommand+0x24>)
 8002c4a:	f002 f9e7 	bl	800501c <HAL_UART_Transmit>
	//vPortFree(buffer);
}
 8002c4e:	bf00      	nop
 8002c50:	3708      	adds	r7, #8
 8002c52:	46bd      	mov	sp, r7
 8002c54:	bd80      	pop	{r7, pc}
 8002c56:	bf00      	nop
 8002c58:	200000e8 	.word	0x200000e8

08002c5c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002c5c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002c94 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002c60:	f7ff fd0c 	bl	800267c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002c64:	480c      	ldr	r0, [pc, #48]	; (8002c98 <LoopForever+0x6>)
  ldr r1, =_edata
 8002c66:	490d      	ldr	r1, [pc, #52]	; (8002c9c <LoopForever+0xa>)
  ldr r2, =_sidata
 8002c68:	4a0d      	ldr	r2, [pc, #52]	; (8002ca0 <LoopForever+0xe>)
  movs r3, #0
 8002c6a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002c6c:	e002      	b.n	8002c74 <LoopCopyDataInit>

08002c6e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002c6e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002c70:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002c72:	3304      	adds	r3, #4

08002c74 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002c74:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002c76:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002c78:	d3f9      	bcc.n	8002c6e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002c7a:	4a0a      	ldr	r2, [pc, #40]	; (8002ca4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002c7c:	4c0a      	ldr	r4, [pc, #40]	; (8002ca8 <LoopForever+0x16>)
  movs r3, #0
 8002c7e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002c80:	e001      	b.n	8002c86 <LoopFillZerobss>

08002c82 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002c82:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002c84:	3204      	adds	r2, #4

08002c86 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002c86:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002c88:	d3fb      	bcc.n	8002c82 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002c8a:	f006 ff27 	bl	8009adc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002c8e:	f7fe f929 	bl	8000ee4 <main>

08002c92 <LoopForever>:

LoopForever:
    b LoopForever
 8002c92:	e7fe      	b.n	8002c92 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002c94:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8002c98:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002c9c:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8002ca0:	08009f48 	.word	0x08009f48
  ldr r2, =_sbss
 8002ca4:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8002ca8:	20004550 	.word	0x20004550

08002cac <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002cac:	e7fe      	b.n	8002cac <ADC1_IRQHandler>

08002cae <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002cae:	b580      	push	{r7, lr}
 8002cb0:	b082      	sub	sp, #8
 8002cb2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002cb4:	2300      	movs	r3, #0
 8002cb6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002cb8:	2003      	movs	r0, #3
 8002cba:	f000 f8de 	bl	8002e7a <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002cbe:	200f      	movs	r0, #15
 8002cc0:	f7ff fc24 	bl	800250c <HAL_InitTick>
 8002cc4:	4603      	mov	r3, r0
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d002      	beq.n	8002cd0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002cca:	2301      	movs	r3, #1
 8002ccc:	71fb      	strb	r3, [r7, #7]
 8002cce:	e001      	b.n	8002cd4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002cd0:	f7ff fbf4 	bl	80024bc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002cd4:	79fb      	ldrb	r3, [r7, #7]
}
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	3708      	adds	r7, #8
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	bd80      	pop	{r7, pc}
	...

08002ce0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002ce0:	b480      	push	{r7}
 8002ce2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002ce4:	4b06      	ldr	r3, [pc, #24]	; (8002d00 <HAL_IncTick+0x20>)
 8002ce6:	781b      	ldrb	r3, [r3, #0]
 8002ce8:	461a      	mov	r2, r3
 8002cea:	4b06      	ldr	r3, [pc, #24]	; (8002d04 <HAL_IncTick+0x24>)
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	4413      	add	r3, r2
 8002cf0:	4a04      	ldr	r2, [pc, #16]	; (8002d04 <HAL_IncTick+0x24>)
 8002cf2:	6013      	str	r3, [r2, #0]
}
 8002cf4:	bf00      	nop
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfc:	4770      	bx	lr
 8002cfe:	bf00      	nop
 8002d00:	20000010 	.word	0x20000010
 8002d04:	200022c4 	.word	0x200022c4

08002d08 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002d08:	b480      	push	{r7}
 8002d0a:	af00      	add	r7, sp, #0
  return uwTick;
 8002d0c:	4b03      	ldr	r3, [pc, #12]	; (8002d1c <HAL_GetTick+0x14>)
 8002d0e:	681b      	ldr	r3, [r3, #0]
}
 8002d10:	4618      	mov	r0, r3
 8002d12:	46bd      	mov	sp, r7
 8002d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d18:	4770      	bx	lr
 8002d1a:	bf00      	nop
 8002d1c:	200022c4 	.word	0x200022c4

08002d20 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d20:	b480      	push	{r7}
 8002d22:	b085      	sub	sp, #20
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	f003 0307 	and.w	r3, r3, #7
 8002d2e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002d30:	4b0c      	ldr	r3, [pc, #48]	; (8002d64 <__NVIC_SetPriorityGrouping+0x44>)
 8002d32:	68db      	ldr	r3, [r3, #12]
 8002d34:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002d36:	68ba      	ldr	r2, [r7, #8]
 8002d38:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002d3c:	4013      	ands	r3, r2
 8002d3e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002d44:	68bb      	ldr	r3, [r7, #8]
 8002d46:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002d48:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002d4c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d50:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002d52:	4a04      	ldr	r2, [pc, #16]	; (8002d64 <__NVIC_SetPriorityGrouping+0x44>)
 8002d54:	68bb      	ldr	r3, [r7, #8]
 8002d56:	60d3      	str	r3, [r2, #12]
}
 8002d58:	bf00      	nop
 8002d5a:	3714      	adds	r7, #20
 8002d5c:	46bd      	mov	sp, r7
 8002d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d62:	4770      	bx	lr
 8002d64:	e000ed00 	.word	0xe000ed00

08002d68 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002d68:	b480      	push	{r7}
 8002d6a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002d6c:	4b04      	ldr	r3, [pc, #16]	; (8002d80 <__NVIC_GetPriorityGrouping+0x18>)
 8002d6e:	68db      	ldr	r3, [r3, #12]
 8002d70:	0a1b      	lsrs	r3, r3, #8
 8002d72:	f003 0307 	and.w	r3, r3, #7
}
 8002d76:	4618      	mov	r0, r3
 8002d78:	46bd      	mov	sp, r7
 8002d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7e:	4770      	bx	lr
 8002d80:	e000ed00 	.word	0xe000ed00

08002d84 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d84:	b480      	push	{r7}
 8002d86:	b083      	sub	sp, #12
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	4603      	mov	r3, r0
 8002d8c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	db0b      	blt.n	8002dae <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002d96:	79fb      	ldrb	r3, [r7, #7]
 8002d98:	f003 021f 	and.w	r2, r3, #31
 8002d9c:	4907      	ldr	r1, [pc, #28]	; (8002dbc <__NVIC_EnableIRQ+0x38>)
 8002d9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002da2:	095b      	lsrs	r3, r3, #5
 8002da4:	2001      	movs	r0, #1
 8002da6:	fa00 f202 	lsl.w	r2, r0, r2
 8002daa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002dae:	bf00      	nop
 8002db0:	370c      	adds	r7, #12
 8002db2:	46bd      	mov	sp, r7
 8002db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db8:	4770      	bx	lr
 8002dba:	bf00      	nop
 8002dbc:	e000e100 	.word	0xe000e100

08002dc0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002dc0:	b480      	push	{r7}
 8002dc2:	b083      	sub	sp, #12
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	4603      	mov	r3, r0
 8002dc8:	6039      	str	r1, [r7, #0]
 8002dca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002dcc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	db0a      	blt.n	8002dea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002dd4:	683b      	ldr	r3, [r7, #0]
 8002dd6:	b2da      	uxtb	r2, r3
 8002dd8:	490c      	ldr	r1, [pc, #48]	; (8002e0c <__NVIC_SetPriority+0x4c>)
 8002dda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dde:	0112      	lsls	r2, r2, #4
 8002de0:	b2d2      	uxtb	r2, r2
 8002de2:	440b      	add	r3, r1
 8002de4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002de8:	e00a      	b.n	8002e00 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002dea:	683b      	ldr	r3, [r7, #0]
 8002dec:	b2da      	uxtb	r2, r3
 8002dee:	4908      	ldr	r1, [pc, #32]	; (8002e10 <__NVIC_SetPriority+0x50>)
 8002df0:	79fb      	ldrb	r3, [r7, #7]
 8002df2:	f003 030f 	and.w	r3, r3, #15
 8002df6:	3b04      	subs	r3, #4
 8002df8:	0112      	lsls	r2, r2, #4
 8002dfa:	b2d2      	uxtb	r2, r2
 8002dfc:	440b      	add	r3, r1
 8002dfe:	761a      	strb	r2, [r3, #24]
}
 8002e00:	bf00      	nop
 8002e02:	370c      	adds	r7, #12
 8002e04:	46bd      	mov	sp, r7
 8002e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e0a:	4770      	bx	lr
 8002e0c:	e000e100 	.word	0xe000e100
 8002e10:	e000ed00 	.word	0xe000ed00

08002e14 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002e14:	b480      	push	{r7}
 8002e16:	b089      	sub	sp, #36	; 0x24
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	60f8      	str	r0, [r7, #12]
 8002e1c:	60b9      	str	r1, [r7, #8]
 8002e1e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	f003 0307 	and.w	r3, r3, #7
 8002e26:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002e28:	69fb      	ldr	r3, [r7, #28]
 8002e2a:	f1c3 0307 	rsb	r3, r3, #7
 8002e2e:	2b04      	cmp	r3, #4
 8002e30:	bf28      	it	cs
 8002e32:	2304      	movcs	r3, #4
 8002e34:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002e36:	69fb      	ldr	r3, [r7, #28]
 8002e38:	3304      	adds	r3, #4
 8002e3a:	2b06      	cmp	r3, #6
 8002e3c:	d902      	bls.n	8002e44 <NVIC_EncodePriority+0x30>
 8002e3e:	69fb      	ldr	r3, [r7, #28]
 8002e40:	3b03      	subs	r3, #3
 8002e42:	e000      	b.n	8002e46 <NVIC_EncodePriority+0x32>
 8002e44:	2300      	movs	r3, #0
 8002e46:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e48:	f04f 32ff 	mov.w	r2, #4294967295
 8002e4c:	69bb      	ldr	r3, [r7, #24]
 8002e4e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e52:	43da      	mvns	r2, r3
 8002e54:	68bb      	ldr	r3, [r7, #8]
 8002e56:	401a      	ands	r2, r3
 8002e58:	697b      	ldr	r3, [r7, #20]
 8002e5a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002e5c:	f04f 31ff 	mov.w	r1, #4294967295
 8002e60:	697b      	ldr	r3, [r7, #20]
 8002e62:	fa01 f303 	lsl.w	r3, r1, r3
 8002e66:	43d9      	mvns	r1, r3
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e6c:	4313      	orrs	r3, r2
         );
}
 8002e6e:	4618      	mov	r0, r3
 8002e70:	3724      	adds	r7, #36	; 0x24
 8002e72:	46bd      	mov	sp, r7
 8002e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e78:	4770      	bx	lr

08002e7a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e7a:	b580      	push	{r7, lr}
 8002e7c:	b082      	sub	sp, #8
 8002e7e:	af00      	add	r7, sp, #0
 8002e80:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002e82:	6878      	ldr	r0, [r7, #4]
 8002e84:	f7ff ff4c 	bl	8002d20 <__NVIC_SetPriorityGrouping>
}
 8002e88:	bf00      	nop
 8002e8a:	3708      	adds	r7, #8
 8002e8c:	46bd      	mov	sp, r7
 8002e8e:	bd80      	pop	{r7, pc}

08002e90 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002e90:	b580      	push	{r7, lr}
 8002e92:	b086      	sub	sp, #24
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	4603      	mov	r3, r0
 8002e98:	60b9      	str	r1, [r7, #8]
 8002e9a:	607a      	str	r2, [r7, #4]
 8002e9c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002e9e:	2300      	movs	r3, #0
 8002ea0:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002ea2:	f7ff ff61 	bl	8002d68 <__NVIC_GetPriorityGrouping>
 8002ea6:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002ea8:	687a      	ldr	r2, [r7, #4]
 8002eaa:	68b9      	ldr	r1, [r7, #8]
 8002eac:	6978      	ldr	r0, [r7, #20]
 8002eae:	f7ff ffb1 	bl	8002e14 <NVIC_EncodePriority>
 8002eb2:	4602      	mov	r2, r0
 8002eb4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002eb8:	4611      	mov	r1, r2
 8002eba:	4618      	mov	r0, r3
 8002ebc:	f7ff ff80 	bl	8002dc0 <__NVIC_SetPriority>
}
 8002ec0:	bf00      	nop
 8002ec2:	3718      	adds	r7, #24
 8002ec4:	46bd      	mov	sp, r7
 8002ec6:	bd80      	pop	{r7, pc}

08002ec8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ec8:	b580      	push	{r7, lr}
 8002eca:	b082      	sub	sp, #8
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	4603      	mov	r3, r0
 8002ed0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002ed2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ed6:	4618      	mov	r0, r3
 8002ed8:	f7ff ff54 	bl	8002d84 <__NVIC_EnableIRQ>
}
 8002edc:	bf00      	nop
 8002ede:	3708      	adds	r7, #8
 8002ee0:	46bd      	mov	sp, r7
 8002ee2:	bd80      	pop	{r7, pc}

08002ee4 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002ee4:	b480      	push	{r7}
 8002ee6:	b085      	sub	sp, #20
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d101      	bne.n	8002ef6 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8002ef2:	2301      	movs	r3, #1
 8002ef4:	e098      	b.n	8003028 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	461a      	mov	r2, r3
 8002efc:	4b4d      	ldr	r3, [pc, #308]	; (8003034 <HAL_DMA_Init+0x150>)
 8002efe:	429a      	cmp	r2, r3
 8002f00:	d80f      	bhi.n	8002f22 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	461a      	mov	r2, r3
 8002f08:	4b4b      	ldr	r3, [pc, #300]	; (8003038 <HAL_DMA_Init+0x154>)
 8002f0a:	4413      	add	r3, r2
 8002f0c:	4a4b      	ldr	r2, [pc, #300]	; (800303c <HAL_DMA_Init+0x158>)
 8002f0e:	fba2 2303 	umull	r2, r3, r2, r3
 8002f12:	091b      	lsrs	r3, r3, #4
 8002f14:	009a      	lsls	r2, r3, #2
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	4a48      	ldr	r2, [pc, #288]	; (8003040 <HAL_DMA_Init+0x15c>)
 8002f1e:	641a      	str	r2, [r3, #64]	; 0x40
 8002f20:	e00e      	b.n	8002f40 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	461a      	mov	r2, r3
 8002f28:	4b46      	ldr	r3, [pc, #280]	; (8003044 <HAL_DMA_Init+0x160>)
 8002f2a:	4413      	add	r3, r2
 8002f2c:	4a43      	ldr	r2, [pc, #268]	; (800303c <HAL_DMA_Init+0x158>)
 8002f2e:	fba2 2303 	umull	r2, r3, r2, r3
 8002f32:	091b      	lsrs	r3, r3, #4
 8002f34:	009a      	lsls	r2, r3, #2
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	4a42      	ldr	r2, [pc, #264]	; (8003048 <HAL_DMA_Init+0x164>)
 8002f3e:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	2202      	movs	r2, #2
 8002f44:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8002f56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f5a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8002f64:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	691b      	ldr	r3, [r3, #16]
 8002f6a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002f70:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	699b      	ldr	r3, [r3, #24]
 8002f76:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002f7c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	6a1b      	ldr	r3, [r3, #32]
 8002f82:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002f84:	68fa      	ldr	r2, [r7, #12]
 8002f86:	4313      	orrs	r3, r2
 8002f88:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	68fa      	ldr	r2, [r7, #12]
 8002f90:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	689b      	ldr	r3, [r3, #8]
 8002f96:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002f9a:	d039      	beq.n	8003010 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fa0:	4a27      	ldr	r2, [pc, #156]	; (8003040 <HAL_DMA_Init+0x15c>)
 8002fa2:	4293      	cmp	r3, r2
 8002fa4:	d11a      	bne.n	8002fdc <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002fa6:	4b29      	ldr	r3, [pc, #164]	; (800304c <HAL_DMA_Init+0x168>)
 8002fa8:	681a      	ldr	r2, [r3, #0]
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fae:	f003 031c 	and.w	r3, r3, #28
 8002fb2:	210f      	movs	r1, #15
 8002fb4:	fa01 f303 	lsl.w	r3, r1, r3
 8002fb8:	43db      	mvns	r3, r3
 8002fba:	4924      	ldr	r1, [pc, #144]	; (800304c <HAL_DMA_Init+0x168>)
 8002fbc:	4013      	ands	r3, r2
 8002fbe:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8002fc0:	4b22      	ldr	r3, [pc, #136]	; (800304c <HAL_DMA_Init+0x168>)
 8002fc2:	681a      	ldr	r2, [r3, #0]
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	6859      	ldr	r1, [r3, #4]
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fcc:	f003 031c 	and.w	r3, r3, #28
 8002fd0:	fa01 f303 	lsl.w	r3, r1, r3
 8002fd4:	491d      	ldr	r1, [pc, #116]	; (800304c <HAL_DMA_Init+0x168>)
 8002fd6:	4313      	orrs	r3, r2
 8002fd8:	600b      	str	r3, [r1, #0]
 8002fda:	e019      	b.n	8003010 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002fdc:	4b1c      	ldr	r3, [pc, #112]	; (8003050 <HAL_DMA_Init+0x16c>)
 8002fde:	681a      	ldr	r2, [r3, #0]
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fe4:	f003 031c 	and.w	r3, r3, #28
 8002fe8:	210f      	movs	r1, #15
 8002fea:	fa01 f303 	lsl.w	r3, r1, r3
 8002fee:	43db      	mvns	r3, r3
 8002ff0:	4917      	ldr	r1, [pc, #92]	; (8003050 <HAL_DMA_Init+0x16c>)
 8002ff2:	4013      	ands	r3, r2
 8002ff4:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8002ff6:	4b16      	ldr	r3, [pc, #88]	; (8003050 <HAL_DMA_Init+0x16c>)
 8002ff8:	681a      	ldr	r2, [r3, #0]
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	6859      	ldr	r1, [r3, #4]
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003002:	f003 031c 	and.w	r3, r3, #28
 8003006:	fa01 f303 	lsl.w	r3, r1, r3
 800300a:	4911      	ldr	r1, [pc, #68]	; (8003050 <HAL_DMA_Init+0x16c>)
 800300c:	4313      	orrs	r3, r2
 800300e:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	2200      	movs	r2, #0
 8003014:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	2201      	movs	r2, #1
 800301a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	2200      	movs	r2, #0
 8003022:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003026:	2300      	movs	r3, #0
}
 8003028:	4618      	mov	r0, r3
 800302a:	3714      	adds	r7, #20
 800302c:	46bd      	mov	sp, r7
 800302e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003032:	4770      	bx	lr
 8003034:	40020407 	.word	0x40020407
 8003038:	bffdfff8 	.word	0xbffdfff8
 800303c:	cccccccd 	.word	0xcccccccd
 8003040:	40020000 	.word	0x40020000
 8003044:	bffdfbf8 	.word	0xbffdfbf8
 8003048:	40020400 	.word	0x40020400
 800304c:	400200a8 	.word	0x400200a8
 8003050:	400204a8 	.word	0x400204a8

08003054 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003054:	b580      	push	{r7, lr}
 8003056:	b086      	sub	sp, #24
 8003058:	af00      	add	r7, sp, #0
 800305a:	60f8      	str	r0, [r7, #12]
 800305c:	60b9      	str	r1, [r7, #8]
 800305e:	607a      	str	r2, [r7, #4]
 8003060:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003062:	2300      	movs	r3, #0
 8003064:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800306c:	2b01      	cmp	r3, #1
 800306e:	d101      	bne.n	8003074 <HAL_DMA_Start_IT+0x20>
 8003070:	2302      	movs	r3, #2
 8003072:	e04b      	b.n	800310c <HAL_DMA_Start_IT+0xb8>
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	2201      	movs	r2, #1
 8003078:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003082:	b2db      	uxtb	r3, r3
 8003084:	2b01      	cmp	r3, #1
 8003086:	d13a      	bne.n	80030fe <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	2202      	movs	r2, #2
 800308c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	2200      	movs	r2, #0
 8003094:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	681a      	ldr	r2, [r3, #0]
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f022 0201 	bic.w	r2, r2, #1
 80030a4:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80030a6:	683b      	ldr	r3, [r7, #0]
 80030a8:	687a      	ldr	r2, [r7, #4]
 80030aa:	68b9      	ldr	r1, [r7, #8]
 80030ac:	68f8      	ldr	r0, [r7, #12]
 80030ae:	f000 f95f 	bl	8003370 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d008      	beq.n	80030cc <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	681a      	ldr	r2, [r3, #0]
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f042 020e 	orr.w	r2, r2, #14
 80030c8:	601a      	str	r2, [r3, #0]
 80030ca:	e00f      	b.n	80030ec <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	681a      	ldr	r2, [r3, #0]
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f022 0204 	bic.w	r2, r2, #4
 80030da:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	681a      	ldr	r2, [r3, #0]
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f042 020a 	orr.w	r2, r2, #10
 80030ea:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	681a      	ldr	r2, [r3, #0]
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f042 0201 	orr.w	r2, r2, #1
 80030fa:	601a      	str	r2, [r3, #0]
 80030fc:	e005      	b.n	800310a <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	2200      	movs	r2, #0
 8003102:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8003106:	2302      	movs	r3, #2
 8003108:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800310a:	7dfb      	ldrb	r3, [r7, #23]
}
 800310c:	4618      	mov	r0, r3
 800310e:	3718      	adds	r7, #24
 8003110:	46bd      	mov	sp, r7
 8003112:	bd80      	pop	{r7, pc}

08003114 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003114:	b480      	push	{r7}
 8003116:	b085      	sub	sp, #20
 8003118:	af00      	add	r7, sp, #0
 800311a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800311c:	2300      	movs	r3, #0
 800311e:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003126:	b2db      	uxtb	r3, r3
 8003128:	2b02      	cmp	r3, #2
 800312a:	d008      	beq.n	800313e <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	2204      	movs	r2, #4
 8003130:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	2200      	movs	r2, #0
 8003136:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800313a:	2301      	movs	r3, #1
 800313c:	e022      	b.n	8003184 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	681a      	ldr	r2, [r3, #0]
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f022 020e 	bic.w	r2, r2, #14
 800314c:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	681a      	ldr	r2, [r3, #0]
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f022 0201 	bic.w	r2, r2, #1
 800315c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003162:	f003 021c 	and.w	r2, r3, #28
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800316a:	2101      	movs	r1, #1
 800316c:	fa01 f202 	lsl.w	r2, r1, r2
 8003170:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	2201      	movs	r2, #1
 8003176:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	2200      	movs	r2, #0
 800317e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8003182:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8003184:	4618      	mov	r0, r3
 8003186:	3714      	adds	r7, #20
 8003188:	46bd      	mov	sp, r7
 800318a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800318e:	4770      	bx	lr

08003190 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003190:	b580      	push	{r7, lr}
 8003192:	b084      	sub	sp, #16
 8003194:	af00      	add	r7, sp, #0
 8003196:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003198:	2300      	movs	r3, #0
 800319a:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80031a2:	b2db      	uxtb	r3, r3
 80031a4:	2b02      	cmp	r3, #2
 80031a6:	d005      	beq.n	80031b4 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	2204      	movs	r2, #4
 80031ac:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80031ae:	2301      	movs	r3, #1
 80031b0:	73fb      	strb	r3, [r7, #15]
 80031b2:	e029      	b.n	8003208 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	681a      	ldr	r2, [r3, #0]
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f022 020e 	bic.w	r2, r2, #14
 80031c2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	681a      	ldr	r2, [r3, #0]
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f022 0201 	bic.w	r2, r2, #1
 80031d2:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031d8:	f003 021c 	and.w	r2, r3, #28
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031e0:	2101      	movs	r1, #1
 80031e2:	fa01 f202 	lsl.w	r2, r1, r2
 80031e6:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	2201      	movs	r2, #1
 80031ec:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	2200      	movs	r2, #0
 80031f4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d003      	beq.n	8003208 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003204:	6878      	ldr	r0, [r7, #4]
 8003206:	4798      	blx	r3
    }
  }
  return status;
 8003208:	7bfb      	ldrb	r3, [r7, #15]
}
 800320a:	4618      	mov	r0, r3
 800320c:	3710      	adds	r7, #16
 800320e:	46bd      	mov	sp, r7
 8003210:	bd80      	pop	{r7, pc}

08003212 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003212:	b580      	push	{r7, lr}
 8003214:	b084      	sub	sp, #16
 8003216:	af00      	add	r7, sp, #0
 8003218:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800322e:	f003 031c 	and.w	r3, r3, #28
 8003232:	2204      	movs	r2, #4
 8003234:	409a      	lsls	r2, r3
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	4013      	ands	r3, r2
 800323a:	2b00      	cmp	r3, #0
 800323c:	d026      	beq.n	800328c <HAL_DMA_IRQHandler+0x7a>
 800323e:	68bb      	ldr	r3, [r7, #8]
 8003240:	f003 0304 	and.w	r3, r3, #4
 8003244:	2b00      	cmp	r3, #0
 8003246:	d021      	beq.n	800328c <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f003 0320 	and.w	r3, r3, #32
 8003252:	2b00      	cmp	r3, #0
 8003254:	d107      	bne.n	8003266 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	681a      	ldr	r2, [r3, #0]
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f022 0204 	bic.w	r2, r2, #4
 8003264:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800326a:	f003 021c 	and.w	r2, r3, #28
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003272:	2104      	movs	r1, #4
 8003274:	fa01 f202 	lsl.w	r2, r1, r2
 8003278:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800327e:	2b00      	cmp	r3, #0
 8003280:	d071      	beq.n	8003366 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003286:	6878      	ldr	r0, [r7, #4]
 8003288:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 800328a:	e06c      	b.n	8003366 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003290:	f003 031c 	and.w	r3, r3, #28
 8003294:	2202      	movs	r2, #2
 8003296:	409a      	lsls	r2, r3
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	4013      	ands	r3, r2
 800329c:	2b00      	cmp	r3, #0
 800329e:	d02e      	beq.n	80032fe <HAL_DMA_IRQHandler+0xec>
 80032a0:	68bb      	ldr	r3, [r7, #8]
 80032a2:	f003 0302 	and.w	r3, r3, #2
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d029      	beq.n	80032fe <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f003 0320 	and.w	r3, r3, #32
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d10b      	bne.n	80032d0 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	681a      	ldr	r2, [r3, #0]
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f022 020a 	bic.w	r2, r2, #10
 80032c6:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	2201      	movs	r2, #1
 80032cc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032d4:	f003 021c 	and.w	r2, r3, #28
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032dc:	2102      	movs	r1, #2
 80032de:	fa01 f202 	lsl.w	r2, r1, r2
 80032e2:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	2200      	movs	r2, #0
 80032e8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d038      	beq.n	8003366 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032f8:	6878      	ldr	r0, [r7, #4]
 80032fa:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80032fc:	e033      	b.n	8003366 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003302:	f003 031c 	and.w	r3, r3, #28
 8003306:	2208      	movs	r2, #8
 8003308:	409a      	lsls	r2, r3
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	4013      	ands	r3, r2
 800330e:	2b00      	cmp	r3, #0
 8003310:	d02a      	beq.n	8003368 <HAL_DMA_IRQHandler+0x156>
 8003312:	68bb      	ldr	r3, [r7, #8]
 8003314:	f003 0308 	and.w	r3, r3, #8
 8003318:	2b00      	cmp	r3, #0
 800331a:	d025      	beq.n	8003368 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	681a      	ldr	r2, [r3, #0]
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f022 020e 	bic.w	r2, r2, #14
 800332a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003330:	f003 021c 	and.w	r2, r3, #28
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003338:	2101      	movs	r1, #1
 800333a:	fa01 f202 	lsl.w	r2, r1, r2
 800333e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	2201      	movs	r2, #1
 8003344:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	2201      	movs	r2, #1
 800334a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	2200      	movs	r2, #0
 8003352:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800335a:	2b00      	cmp	r3, #0
 800335c:	d004      	beq.n	8003368 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003362:	6878      	ldr	r0, [r7, #4]
 8003364:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003366:	bf00      	nop
 8003368:	bf00      	nop
}
 800336a:	3710      	adds	r7, #16
 800336c:	46bd      	mov	sp, r7
 800336e:	bd80      	pop	{r7, pc}

08003370 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003370:	b480      	push	{r7}
 8003372:	b085      	sub	sp, #20
 8003374:	af00      	add	r7, sp, #0
 8003376:	60f8      	str	r0, [r7, #12]
 8003378:	60b9      	str	r1, [r7, #8]
 800337a:	607a      	str	r2, [r7, #4]
 800337c:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003382:	f003 021c 	and.w	r2, r3, #28
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800338a:	2101      	movs	r1, #1
 800338c:	fa01 f202 	lsl.w	r2, r1, r2
 8003390:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	683a      	ldr	r2, [r7, #0]
 8003398:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	689b      	ldr	r3, [r3, #8]
 800339e:	2b10      	cmp	r3, #16
 80033a0:	d108      	bne.n	80033b4 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	687a      	ldr	r2, [r7, #4]
 80033a8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	68ba      	ldr	r2, [r7, #8]
 80033b0:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80033b2:	e007      	b.n	80033c4 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	68ba      	ldr	r2, [r7, #8]
 80033ba:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	687a      	ldr	r2, [r7, #4]
 80033c2:	60da      	str	r2, [r3, #12]
}
 80033c4:	bf00      	nop
 80033c6:	3714      	adds	r7, #20
 80033c8:	46bd      	mov	sp, r7
 80033ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ce:	4770      	bx	lr

080033d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80033d0:	b480      	push	{r7}
 80033d2:	b087      	sub	sp, #28
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	6078      	str	r0, [r7, #4]
 80033d8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80033da:	2300      	movs	r3, #0
 80033dc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80033de:	e148      	b.n	8003672 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80033e0:	683b      	ldr	r3, [r7, #0]
 80033e2:	681a      	ldr	r2, [r3, #0]
 80033e4:	2101      	movs	r1, #1
 80033e6:	697b      	ldr	r3, [r7, #20]
 80033e8:	fa01 f303 	lsl.w	r3, r1, r3
 80033ec:	4013      	ands	r3, r2
 80033ee:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	f000 813a 	beq.w	800366c <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80033f8:	683b      	ldr	r3, [r7, #0]
 80033fa:	685b      	ldr	r3, [r3, #4]
 80033fc:	f003 0303 	and.w	r3, r3, #3
 8003400:	2b01      	cmp	r3, #1
 8003402:	d005      	beq.n	8003410 <HAL_GPIO_Init+0x40>
 8003404:	683b      	ldr	r3, [r7, #0]
 8003406:	685b      	ldr	r3, [r3, #4]
 8003408:	f003 0303 	and.w	r3, r3, #3
 800340c:	2b02      	cmp	r3, #2
 800340e:	d130      	bne.n	8003472 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	689b      	ldr	r3, [r3, #8]
 8003414:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003416:	697b      	ldr	r3, [r7, #20]
 8003418:	005b      	lsls	r3, r3, #1
 800341a:	2203      	movs	r2, #3
 800341c:	fa02 f303 	lsl.w	r3, r2, r3
 8003420:	43db      	mvns	r3, r3
 8003422:	693a      	ldr	r2, [r7, #16]
 8003424:	4013      	ands	r3, r2
 8003426:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003428:	683b      	ldr	r3, [r7, #0]
 800342a:	68da      	ldr	r2, [r3, #12]
 800342c:	697b      	ldr	r3, [r7, #20]
 800342e:	005b      	lsls	r3, r3, #1
 8003430:	fa02 f303 	lsl.w	r3, r2, r3
 8003434:	693a      	ldr	r2, [r7, #16]
 8003436:	4313      	orrs	r3, r2
 8003438:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	693a      	ldr	r2, [r7, #16]
 800343e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	685b      	ldr	r3, [r3, #4]
 8003444:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003446:	2201      	movs	r2, #1
 8003448:	697b      	ldr	r3, [r7, #20]
 800344a:	fa02 f303 	lsl.w	r3, r2, r3
 800344e:	43db      	mvns	r3, r3
 8003450:	693a      	ldr	r2, [r7, #16]
 8003452:	4013      	ands	r3, r2
 8003454:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003456:	683b      	ldr	r3, [r7, #0]
 8003458:	685b      	ldr	r3, [r3, #4]
 800345a:	091b      	lsrs	r3, r3, #4
 800345c:	f003 0201 	and.w	r2, r3, #1
 8003460:	697b      	ldr	r3, [r7, #20]
 8003462:	fa02 f303 	lsl.w	r3, r2, r3
 8003466:	693a      	ldr	r2, [r7, #16]
 8003468:	4313      	orrs	r3, r2
 800346a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	693a      	ldr	r2, [r7, #16]
 8003470:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003472:	683b      	ldr	r3, [r7, #0]
 8003474:	685b      	ldr	r3, [r3, #4]
 8003476:	f003 0303 	and.w	r3, r3, #3
 800347a:	2b03      	cmp	r3, #3
 800347c:	d017      	beq.n	80034ae <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	68db      	ldr	r3, [r3, #12]
 8003482:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003484:	697b      	ldr	r3, [r7, #20]
 8003486:	005b      	lsls	r3, r3, #1
 8003488:	2203      	movs	r2, #3
 800348a:	fa02 f303 	lsl.w	r3, r2, r3
 800348e:	43db      	mvns	r3, r3
 8003490:	693a      	ldr	r2, [r7, #16]
 8003492:	4013      	ands	r3, r2
 8003494:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003496:	683b      	ldr	r3, [r7, #0]
 8003498:	689a      	ldr	r2, [r3, #8]
 800349a:	697b      	ldr	r3, [r7, #20]
 800349c:	005b      	lsls	r3, r3, #1
 800349e:	fa02 f303 	lsl.w	r3, r2, r3
 80034a2:	693a      	ldr	r2, [r7, #16]
 80034a4:	4313      	orrs	r3, r2
 80034a6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	693a      	ldr	r2, [r7, #16]
 80034ac:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80034ae:	683b      	ldr	r3, [r7, #0]
 80034b0:	685b      	ldr	r3, [r3, #4]
 80034b2:	f003 0303 	and.w	r3, r3, #3
 80034b6:	2b02      	cmp	r3, #2
 80034b8:	d123      	bne.n	8003502 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80034ba:	697b      	ldr	r3, [r7, #20]
 80034bc:	08da      	lsrs	r2, r3, #3
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	3208      	adds	r2, #8
 80034c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80034c6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80034c8:	697b      	ldr	r3, [r7, #20]
 80034ca:	f003 0307 	and.w	r3, r3, #7
 80034ce:	009b      	lsls	r3, r3, #2
 80034d0:	220f      	movs	r2, #15
 80034d2:	fa02 f303 	lsl.w	r3, r2, r3
 80034d6:	43db      	mvns	r3, r3
 80034d8:	693a      	ldr	r2, [r7, #16]
 80034da:	4013      	ands	r3, r2
 80034dc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80034de:	683b      	ldr	r3, [r7, #0]
 80034e0:	691a      	ldr	r2, [r3, #16]
 80034e2:	697b      	ldr	r3, [r7, #20]
 80034e4:	f003 0307 	and.w	r3, r3, #7
 80034e8:	009b      	lsls	r3, r3, #2
 80034ea:	fa02 f303 	lsl.w	r3, r2, r3
 80034ee:	693a      	ldr	r2, [r7, #16]
 80034f0:	4313      	orrs	r3, r2
 80034f2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80034f4:	697b      	ldr	r3, [r7, #20]
 80034f6:	08da      	lsrs	r2, r3, #3
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	3208      	adds	r2, #8
 80034fc:	6939      	ldr	r1, [r7, #16]
 80034fe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003508:	697b      	ldr	r3, [r7, #20]
 800350a:	005b      	lsls	r3, r3, #1
 800350c:	2203      	movs	r2, #3
 800350e:	fa02 f303 	lsl.w	r3, r2, r3
 8003512:	43db      	mvns	r3, r3
 8003514:	693a      	ldr	r2, [r7, #16]
 8003516:	4013      	ands	r3, r2
 8003518:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800351a:	683b      	ldr	r3, [r7, #0]
 800351c:	685b      	ldr	r3, [r3, #4]
 800351e:	f003 0203 	and.w	r2, r3, #3
 8003522:	697b      	ldr	r3, [r7, #20]
 8003524:	005b      	lsls	r3, r3, #1
 8003526:	fa02 f303 	lsl.w	r3, r2, r3
 800352a:	693a      	ldr	r2, [r7, #16]
 800352c:	4313      	orrs	r3, r2
 800352e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	693a      	ldr	r2, [r7, #16]
 8003534:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003536:	683b      	ldr	r3, [r7, #0]
 8003538:	685b      	ldr	r3, [r3, #4]
 800353a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800353e:	2b00      	cmp	r3, #0
 8003540:	f000 8094 	beq.w	800366c <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003544:	4b52      	ldr	r3, [pc, #328]	; (8003690 <HAL_GPIO_Init+0x2c0>)
 8003546:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003548:	4a51      	ldr	r2, [pc, #324]	; (8003690 <HAL_GPIO_Init+0x2c0>)
 800354a:	f043 0301 	orr.w	r3, r3, #1
 800354e:	6613      	str	r3, [r2, #96]	; 0x60
 8003550:	4b4f      	ldr	r3, [pc, #316]	; (8003690 <HAL_GPIO_Init+0x2c0>)
 8003552:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003554:	f003 0301 	and.w	r3, r3, #1
 8003558:	60bb      	str	r3, [r7, #8]
 800355a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800355c:	4a4d      	ldr	r2, [pc, #308]	; (8003694 <HAL_GPIO_Init+0x2c4>)
 800355e:	697b      	ldr	r3, [r7, #20]
 8003560:	089b      	lsrs	r3, r3, #2
 8003562:	3302      	adds	r3, #2
 8003564:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003568:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800356a:	697b      	ldr	r3, [r7, #20]
 800356c:	f003 0303 	and.w	r3, r3, #3
 8003570:	009b      	lsls	r3, r3, #2
 8003572:	220f      	movs	r2, #15
 8003574:	fa02 f303 	lsl.w	r3, r2, r3
 8003578:	43db      	mvns	r3, r3
 800357a:	693a      	ldr	r2, [r7, #16]
 800357c:	4013      	ands	r3, r2
 800357e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003586:	d00d      	beq.n	80035a4 <HAL_GPIO_Init+0x1d4>
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	4a43      	ldr	r2, [pc, #268]	; (8003698 <HAL_GPIO_Init+0x2c8>)
 800358c:	4293      	cmp	r3, r2
 800358e:	d007      	beq.n	80035a0 <HAL_GPIO_Init+0x1d0>
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	4a42      	ldr	r2, [pc, #264]	; (800369c <HAL_GPIO_Init+0x2cc>)
 8003594:	4293      	cmp	r3, r2
 8003596:	d101      	bne.n	800359c <HAL_GPIO_Init+0x1cc>
 8003598:	2302      	movs	r3, #2
 800359a:	e004      	b.n	80035a6 <HAL_GPIO_Init+0x1d6>
 800359c:	2307      	movs	r3, #7
 800359e:	e002      	b.n	80035a6 <HAL_GPIO_Init+0x1d6>
 80035a0:	2301      	movs	r3, #1
 80035a2:	e000      	b.n	80035a6 <HAL_GPIO_Init+0x1d6>
 80035a4:	2300      	movs	r3, #0
 80035a6:	697a      	ldr	r2, [r7, #20]
 80035a8:	f002 0203 	and.w	r2, r2, #3
 80035ac:	0092      	lsls	r2, r2, #2
 80035ae:	4093      	lsls	r3, r2
 80035b0:	693a      	ldr	r2, [r7, #16]
 80035b2:	4313      	orrs	r3, r2
 80035b4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80035b6:	4937      	ldr	r1, [pc, #220]	; (8003694 <HAL_GPIO_Init+0x2c4>)
 80035b8:	697b      	ldr	r3, [r7, #20]
 80035ba:	089b      	lsrs	r3, r3, #2
 80035bc:	3302      	adds	r3, #2
 80035be:	693a      	ldr	r2, [r7, #16]
 80035c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80035c4:	4b36      	ldr	r3, [pc, #216]	; (80036a0 <HAL_GPIO_Init+0x2d0>)
 80035c6:	689b      	ldr	r3, [r3, #8]
 80035c8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	43db      	mvns	r3, r3
 80035ce:	693a      	ldr	r2, [r7, #16]
 80035d0:	4013      	ands	r3, r2
 80035d2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80035d4:	683b      	ldr	r3, [r7, #0]
 80035d6:	685b      	ldr	r3, [r3, #4]
 80035d8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d003      	beq.n	80035e8 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 80035e0:	693a      	ldr	r2, [r7, #16]
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	4313      	orrs	r3, r2
 80035e6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80035e8:	4a2d      	ldr	r2, [pc, #180]	; (80036a0 <HAL_GPIO_Init+0x2d0>)
 80035ea:	693b      	ldr	r3, [r7, #16]
 80035ec:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80035ee:	4b2c      	ldr	r3, [pc, #176]	; (80036a0 <HAL_GPIO_Init+0x2d0>)
 80035f0:	68db      	ldr	r3, [r3, #12]
 80035f2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	43db      	mvns	r3, r3
 80035f8:	693a      	ldr	r2, [r7, #16]
 80035fa:	4013      	ands	r3, r2
 80035fc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80035fe:	683b      	ldr	r3, [r7, #0]
 8003600:	685b      	ldr	r3, [r3, #4]
 8003602:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003606:	2b00      	cmp	r3, #0
 8003608:	d003      	beq.n	8003612 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 800360a:	693a      	ldr	r2, [r7, #16]
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	4313      	orrs	r3, r2
 8003610:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003612:	4a23      	ldr	r2, [pc, #140]	; (80036a0 <HAL_GPIO_Init+0x2d0>)
 8003614:	693b      	ldr	r3, [r7, #16]
 8003616:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003618:	4b21      	ldr	r3, [pc, #132]	; (80036a0 <HAL_GPIO_Init+0x2d0>)
 800361a:	685b      	ldr	r3, [r3, #4]
 800361c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	43db      	mvns	r3, r3
 8003622:	693a      	ldr	r2, [r7, #16]
 8003624:	4013      	ands	r3, r2
 8003626:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003628:	683b      	ldr	r3, [r7, #0]
 800362a:	685b      	ldr	r3, [r3, #4]
 800362c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003630:	2b00      	cmp	r3, #0
 8003632:	d003      	beq.n	800363c <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8003634:	693a      	ldr	r2, [r7, #16]
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	4313      	orrs	r3, r2
 800363a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800363c:	4a18      	ldr	r2, [pc, #96]	; (80036a0 <HAL_GPIO_Init+0x2d0>)
 800363e:	693b      	ldr	r3, [r7, #16]
 8003640:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8003642:	4b17      	ldr	r3, [pc, #92]	; (80036a0 <HAL_GPIO_Init+0x2d0>)
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	43db      	mvns	r3, r3
 800364c:	693a      	ldr	r2, [r7, #16]
 800364e:	4013      	ands	r3, r2
 8003650:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003652:	683b      	ldr	r3, [r7, #0]
 8003654:	685b      	ldr	r3, [r3, #4]
 8003656:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800365a:	2b00      	cmp	r3, #0
 800365c:	d003      	beq.n	8003666 <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 800365e:	693a      	ldr	r2, [r7, #16]
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	4313      	orrs	r3, r2
 8003664:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003666:	4a0e      	ldr	r2, [pc, #56]	; (80036a0 <HAL_GPIO_Init+0x2d0>)
 8003668:	693b      	ldr	r3, [r7, #16]
 800366a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800366c:	697b      	ldr	r3, [r7, #20]
 800366e:	3301      	adds	r3, #1
 8003670:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003672:	683b      	ldr	r3, [r7, #0]
 8003674:	681a      	ldr	r2, [r3, #0]
 8003676:	697b      	ldr	r3, [r7, #20]
 8003678:	fa22 f303 	lsr.w	r3, r2, r3
 800367c:	2b00      	cmp	r3, #0
 800367e:	f47f aeaf 	bne.w	80033e0 <HAL_GPIO_Init+0x10>
  }
}
 8003682:	bf00      	nop
 8003684:	bf00      	nop
 8003686:	371c      	adds	r7, #28
 8003688:	46bd      	mov	sp, r7
 800368a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800368e:	4770      	bx	lr
 8003690:	40021000 	.word	0x40021000
 8003694:	40010000 	.word	0x40010000
 8003698:	48000400 	.word	0x48000400
 800369c:	48000800 	.word	0x48000800
 80036a0:	40010400 	.word	0x40010400

080036a4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80036a4:	b480      	push	{r7}
 80036a6:	b083      	sub	sp, #12
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	6078      	str	r0, [r7, #4]
 80036ac:	460b      	mov	r3, r1
 80036ae:	807b      	strh	r3, [r7, #2]
 80036b0:	4613      	mov	r3, r2
 80036b2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80036b4:	787b      	ldrb	r3, [r7, #1]
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d003      	beq.n	80036c2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80036ba:	887a      	ldrh	r2, [r7, #2]
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80036c0:	e002      	b.n	80036c8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80036c2:	887a      	ldrh	r2, [r7, #2]
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80036c8:	bf00      	nop
 80036ca:	370c      	adds	r7, #12
 80036cc:	46bd      	mov	sp, r7
 80036ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d2:	4770      	bx	lr

080036d4 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80036d4:	b480      	push	{r7}
 80036d6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80036d8:	4b05      	ldr	r3, [pc, #20]	; (80036f0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	4a04      	ldr	r2, [pc, #16]	; (80036f0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80036de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80036e2:	6013      	str	r3, [r2, #0]
}
 80036e4:	bf00      	nop
 80036e6:	46bd      	mov	sp, r7
 80036e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ec:	4770      	bx	lr
 80036ee:	bf00      	nop
 80036f0:	40007000 	.word	0x40007000

080036f4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80036f4:	b480      	push	{r7}
 80036f6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80036f8:	4b04      	ldr	r3, [pc, #16]	; (800370c <HAL_PWREx_GetVoltageRange+0x18>)
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8003700:	4618      	mov	r0, r3
 8003702:	46bd      	mov	sp, r7
 8003704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003708:	4770      	bx	lr
 800370a:	bf00      	nop
 800370c:	40007000 	.word	0x40007000

08003710 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003710:	b480      	push	{r7}
 8003712:	b085      	sub	sp, #20
 8003714:	af00      	add	r7, sp, #0
 8003716:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800371e:	d130      	bne.n	8003782 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003720:	4b23      	ldr	r3, [pc, #140]	; (80037b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003728:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800372c:	d038      	beq.n	80037a0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800372e:	4b20      	ldr	r3, [pc, #128]	; (80037b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003736:	4a1e      	ldr	r2, [pc, #120]	; (80037b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003738:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800373c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800373e:	4b1d      	ldr	r3, [pc, #116]	; (80037b4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	2232      	movs	r2, #50	; 0x32
 8003744:	fb02 f303 	mul.w	r3, r2, r3
 8003748:	4a1b      	ldr	r2, [pc, #108]	; (80037b8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800374a:	fba2 2303 	umull	r2, r3, r2, r3
 800374e:	0c9b      	lsrs	r3, r3, #18
 8003750:	3301      	adds	r3, #1
 8003752:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003754:	e002      	b.n	800375c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	3b01      	subs	r3, #1
 800375a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800375c:	4b14      	ldr	r3, [pc, #80]	; (80037b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800375e:	695b      	ldr	r3, [r3, #20]
 8003760:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003764:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003768:	d102      	bne.n	8003770 <HAL_PWREx_ControlVoltageScaling+0x60>
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	2b00      	cmp	r3, #0
 800376e:	d1f2      	bne.n	8003756 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003770:	4b0f      	ldr	r3, [pc, #60]	; (80037b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003772:	695b      	ldr	r3, [r3, #20]
 8003774:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003778:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800377c:	d110      	bne.n	80037a0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800377e:	2303      	movs	r3, #3
 8003780:	e00f      	b.n	80037a2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003782:	4b0b      	ldr	r3, [pc, #44]	; (80037b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800378a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800378e:	d007      	beq.n	80037a0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003790:	4b07      	ldr	r3, [pc, #28]	; (80037b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003798:	4a05      	ldr	r2, [pc, #20]	; (80037b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800379a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800379e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80037a0:	2300      	movs	r3, #0
}
 80037a2:	4618      	mov	r0, r3
 80037a4:	3714      	adds	r7, #20
 80037a6:	46bd      	mov	sp, r7
 80037a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ac:	4770      	bx	lr
 80037ae:	bf00      	nop
 80037b0:	40007000 	.word	0x40007000
 80037b4:	20000000 	.word	0x20000000
 80037b8:	431bde83 	.word	0x431bde83

080037bc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80037bc:	b580      	push	{r7, lr}
 80037be:	b088      	sub	sp, #32
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d102      	bne.n	80037d0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80037ca:	2301      	movs	r3, #1
 80037cc:	f000 bc02 	b.w	8003fd4 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80037d0:	4b96      	ldr	r3, [pc, #600]	; (8003a2c <HAL_RCC_OscConfig+0x270>)
 80037d2:	689b      	ldr	r3, [r3, #8]
 80037d4:	f003 030c 	and.w	r3, r3, #12
 80037d8:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80037da:	4b94      	ldr	r3, [pc, #592]	; (8003a2c <HAL_RCC_OscConfig+0x270>)
 80037dc:	68db      	ldr	r3, [r3, #12]
 80037de:	f003 0303 	and.w	r3, r3, #3
 80037e2:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f003 0310 	and.w	r3, r3, #16
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	f000 80e4 	beq.w	80039ba <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80037f2:	69bb      	ldr	r3, [r7, #24]
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d007      	beq.n	8003808 <HAL_RCC_OscConfig+0x4c>
 80037f8:	69bb      	ldr	r3, [r7, #24]
 80037fa:	2b0c      	cmp	r3, #12
 80037fc:	f040 808b 	bne.w	8003916 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003800:	697b      	ldr	r3, [r7, #20]
 8003802:	2b01      	cmp	r3, #1
 8003804:	f040 8087 	bne.w	8003916 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003808:	4b88      	ldr	r3, [pc, #544]	; (8003a2c <HAL_RCC_OscConfig+0x270>)
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f003 0302 	and.w	r3, r3, #2
 8003810:	2b00      	cmp	r3, #0
 8003812:	d005      	beq.n	8003820 <HAL_RCC_OscConfig+0x64>
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	699b      	ldr	r3, [r3, #24]
 8003818:	2b00      	cmp	r3, #0
 800381a:	d101      	bne.n	8003820 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 800381c:	2301      	movs	r3, #1
 800381e:	e3d9      	b.n	8003fd4 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	6a1a      	ldr	r2, [r3, #32]
 8003824:	4b81      	ldr	r3, [pc, #516]	; (8003a2c <HAL_RCC_OscConfig+0x270>)
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f003 0308 	and.w	r3, r3, #8
 800382c:	2b00      	cmp	r3, #0
 800382e:	d004      	beq.n	800383a <HAL_RCC_OscConfig+0x7e>
 8003830:	4b7e      	ldr	r3, [pc, #504]	; (8003a2c <HAL_RCC_OscConfig+0x270>)
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003838:	e005      	b.n	8003846 <HAL_RCC_OscConfig+0x8a>
 800383a:	4b7c      	ldr	r3, [pc, #496]	; (8003a2c <HAL_RCC_OscConfig+0x270>)
 800383c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003840:	091b      	lsrs	r3, r3, #4
 8003842:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003846:	4293      	cmp	r3, r2
 8003848:	d223      	bcs.n	8003892 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	6a1b      	ldr	r3, [r3, #32]
 800384e:	4618      	mov	r0, r3
 8003850:	f000 fdbe 	bl	80043d0 <RCC_SetFlashLatencyFromMSIRange>
 8003854:	4603      	mov	r3, r0
 8003856:	2b00      	cmp	r3, #0
 8003858:	d001      	beq.n	800385e <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800385a:	2301      	movs	r3, #1
 800385c:	e3ba      	b.n	8003fd4 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800385e:	4b73      	ldr	r3, [pc, #460]	; (8003a2c <HAL_RCC_OscConfig+0x270>)
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	4a72      	ldr	r2, [pc, #456]	; (8003a2c <HAL_RCC_OscConfig+0x270>)
 8003864:	f043 0308 	orr.w	r3, r3, #8
 8003868:	6013      	str	r3, [r2, #0]
 800386a:	4b70      	ldr	r3, [pc, #448]	; (8003a2c <HAL_RCC_OscConfig+0x270>)
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	6a1b      	ldr	r3, [r3, #32]
 8003876:	496d      	ldr	r1, [pc, #436]	; (8003a2c <HAL_RCC_OscConfig+0x270>)
 8003878:	4313      	orrs	r3, r2
 800387a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800387c:	4b6b      	ldr	r3, [pc, #428]	; (8003a2c <HAL_RCC_OscConfig+0x270>)
 800387e:	685b      	ldr	r3, [r3, #4]
 8003880:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	69db      	ldr	r3, [r3, #28]
 8003888:	021b      	lsls	r3, r3, #8
 800388a:	4968      	ldr	r1, [pc, #416]	; (8003a2c <HAL_RCC_OscConfig+0x270>)
 800388c:	4313      	orrs	r3, r2
 800388e:	604b      	str	r3, [r1, #4]
 8003890:	e025      	b.n	80038de <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003892:	4b66      	ldr	r3, [pc, #408]	; (8003a2c <HAL_RCC_OscConfig+0x270>)
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	4a65      	ldr	r2, [pc, #404]	; (8003a2c <HAL_RCC_OscConfig+0x270>)
 8003898:	f043 0308 	orr.w	r3, r3, #8
 800389c:	6013      	str	r3, [r2, #0]
 800389e:	4b63      	ldr	r3, [pc, #396]	; (8003a2c <HAL_RCC_OscConfig+0x270>)
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	6a1b      	ldr	r3, [r3, #32]
 80038aa:	4960      	ldr	r1, [pc, #384]	; (8003a2c <HAL_RCC_OscConfig+0x270>)
 80038ac:	4313      	orrs	r3, r2
 80038ae:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80038b0:	4b5e      	ldr	r3, [pc, #376]	; (8003a2c <HAL_RCC_OscConfig+0x270>)
 80038b2:	685b      	ldr	r3, [r3, #4]
 80038b4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	69db      	ldr	r3, [r3, #28]
 80038bc:	021b      	lsls	r3, r3, #8
 80038be:	495b      	ldr	r1, [pc, #364]	; (8003a2c <HAL_RCC_OscConfig+0x270>)
 80038c0:	4313      	orrs	r3, r2
 80038c2:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80038c4:	69bb      	ldr	r3, [r7, #24]
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d109      	bne.n	80038de <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	6a1b      	ldr	r3, [r3, #32]
 80038ce:	4618      	mov	r0, r3
 80038d0:	f000 fd7e 	bl	80043d0 <RCC_SetFlashLatencyFromMSIRange>
 80038d4:	4603      	mov	r3, r0
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d001      	beq.n	80038de <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80038da:	2301      	movs	r3, #1
 80038dc:	e37a      	b.n	8003fd4 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80038de:	f000 fc81 	bl	80041e4 <HAL_RCC_GetSysClockFreq>
 80038e2:	4602      	mov	r2, r0
 80038e4:	4b51      	ldr	r3, [pc, #324]	; (8003a2c <HAL_RCC_OscConfig+0x270>)
 80038e6:	689b      	ldr	r3, [r3, #8]
 80038e8:	091b      	lsrs	r3, r3, #4
 80038ea:	f003 030f 	and.w	r3, r3, #15
 80038ee:	4950      	ldr	r1, [pc, #320]	; (8003a30 <HAL_RCC_OscConfig+0x274>)
 80038f0:	5ccb      	ldrb	r3, [r1, r3]
 80038f2:	f003 031f 	and.w	r3, r3, #31
 80038f6:	fa22 f303 	lsr.w	r3, r2, r3
 80038fa:	4a4e      	ldr	r2, [pc, #312]	; (8003a34 <HAL_RCC_OscConfig+0x278>)
 80038fc:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80038fe:	4b4e      	ldr	r3, [pc, #312]	; (8003a38 <HAL_RCC_OscConfig+0x27c>)
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	4618      	mov	r0, r3
 8003904:	f7fe fe02 	bl	800250c <HAL_InitTick>
 8003908:	4603      	mov	r3, r0
 800390a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800390c:	7bfb      	ldrb	r3, [r7, #15]
 800390e:	2b00      	cmp	r3, #0
 8003910:	d052      	beq.n	80039b8 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8003912:	7bfb      	ldrb	r3, [r7, #15]
 8003914:	e35e      	b.n	8003fd4 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	699b      	ldr	r3, [r3, #24]
 800391a:	2b00      	cmp	r3, #0
 800391c:	d032      	beq.n	8003984 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800391e:	4b43      	ldr	r3, [pc, #268]	; (8003a2c <HAL_RCC_OscConfig+0x270>)
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	4a42      	ldr	r2, [pc, #264]	; (8003a2c <HAL_RCC_OscConfig+0x270>)
 8003924:	f043 0301 	orr.w	r3, r3, #1
 8003928:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800392a:	f7ff f9ed 	bl	8002d08 <HAL_GetTick>
 800392e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003930:	e008      	b.n	8003944 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003932:	f7ff f9e9 	bl	8002d08 <HAL_GetTick>
 8003936:	4602      	mov	r2, r0
 8003938:	693b      	ldr	r3, [r7, #16]
 800393a:	1ad3      	subs	r3, r2, r3
 800393c:	2b02      	cmp	r3, #2
 800393e:	d901      	bls.n	8003944 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8003940:	2303      	movs	r3, #3
 8003942:	e347      	b.n	8003fd4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003944:	4b39      	ldr	r3, [pc, #228]	; (8003a2c <HAL_RCC_OscConfig+0x270>)
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	f003 0302 	and.w	r3, r3, #2
 800394c:	2b00      	cmp	r3, #0
 800394e:	d0f0      	beq.n	8003932 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003950:	4b36      	ldr	r3, [pc, #216]	; (8003a2c <HAL_RCC_OscConfig+0x270>)
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	4a35      	ldr	r2, [pc, #212]	; (8003a2c <HAL_RCC_OscConfig+0x270>)
 8003956:	f043 0308 	orr.w	r3, r3, #8
 800395a:	6013      	str	r3, [r2, #0]
 800395c:	4b33      	ldr	r3, [pc, #204]	; (8003a2c <HAL_RCC_OscConfig+0x270>)
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	6a1b      	ldr	r3, [r3, #32]
 8003968:	4930      	ldr	r1, [pc, #192]	; (8003a2c <HAL_RCC_OscConfig+0x270>)
 800396a:	4313      	orrs	r3, r2
 800396c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800396e:	4b2f      	ldr	r3, [pc, #188]	; (8003a2c <HAL_RCC_OscConfig+0x270>)
 8003970:	685b      	ldr	r3, [r3, #4]
 8003972:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	69db      	ldr	r3, [r3, #28]
 800397a:	021b      	lsls	r3, r3, #8
 800397c:	492b      	ldr	r1, [pc, #172]	; (8003a2c <HAL_RCC_OscConfig+0x270>)
 800397e:	4313      	orrs	r3, r2
 8003980:	604b      	str	r3, [r1, #4]
 8003982:	e01a      	b.n	80039ba <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003984:	4b29      	ldr	r3, [pc, #164]	; (8003a2c <HAL_RCC_OscConfig+0x270>)
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	4a28      	ldr	r2, [pc, #160]	; (8003a2c <HAL_RCC_OscConfig+0x270>)
 800398a:	f023 0301 	bic.w	r3, r3, #1
 800398e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003990:	f7ff f9ba 	bl	8002d08 <HAL_GetTick>
 8003994:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003996:	e008      	b.n	80039aa <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003998:	f7ff f9b6 	bl	8002d08 <HAL_GetTick>
 800399c:	4602      	mov	r2, r0
 800399e:	693b      	ldr	r3, [r7, #16]
 80039a0:	1ad3      	subs	r3, r2, r3
 80039a2:	2b02      	cmp	r3, #2
 80039a4:	d901      	bls.n	80039aa <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80039a6:	2303      	movs	r3, #3
 80039a8:	e314      	b.n	8003fd4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80039aa:	4b20      	ldr	r3, [pc, #128]	; (8003a2c <HAL_RCC_OscConfig+0x270>)
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	f003 0302 	and.w	r3, r3, #2
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d1f0      	bne.n	8003998 <HAL_RCC_OscConfig+0x1dc>
 80039b6:	e000      	b.n	80039ba <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80039b8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f003 0301 	and.w	r3, r3, #1
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d073      	beq.n	8003aae <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80039c6:	69bb      	ldr	r3, [r7, #24]
 80039c8:	2b08      	cmp	r3, #8
 80039ca:	d005      	beq.n	80039d8 <HAL_RCC_OscConfig+0x21c>
 80039cc:	69bb      	ldr	r3, [r7, #24]
 80039ce:	2b0c      	cmp	r3, #12
 80039d0:	d10e      	bne.n	80039f0 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80039d2:	697b      	ldr	r3, [r7, #20]
 80039d4:	2b03      	cmp	r3, #3
 80039d6:	d10b      	bne.n	80039f0 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80039d8:	4b14      	ldr	r3, [pc, #80]	; (8003a2c <HAL_RCC_OscConfig+0x270>)
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d063      	beq.n	8003aac <HAL_RCC_OscConfig+0x2f0>
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	685b      	ldr	r3, [r3, #4]
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d15f      	bne.n	8003aac <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80039ec:	2301      	movs	r3, #1
 80039ee:	e2f1      	b.n	8003fd4 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	685b      	ldr	r3, [r3, #4]
 80039f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80039f8:	d106      	bne.n	8003a08 <HAL_RCC_OscConfig+0x24c>
 80039fa:	4b0c      	ldr	r3, [pc, #48]	; (8003a2c <HAL_RCC_OscConfig+0x270>)
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	4a0b      	ldr	r2, [pc, #44]	; (8003a2c <HAL_RCC_OscConfig+0x270>)
 8003a00:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a04:	6013      	str	r3, [r2, #0]
 8003a06:	e025      	b.n	8003a54 <HAL_RCC_OscConfig+0x298>
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	685b      	ldr	r3, [r3, #4]
 8003a0c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003a10:	d114      	bne.n	8003a3c <HAL_RCC_OscConfig+0x280>
 8003a12:	4b06      	ldr	r3, [pc, #24]	; (8003a2c <HAL_RCC_OscConfig+0x270>)
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	4a05      	ldr	r2, [pc, #20]	; (8003a2c <HAL_RCC_OscConfig+0x270>)
 8003a18:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003a1c:	6013      	str	r3, [r2, #0]
 8003a1e:	4b03      	ldr	r3, [pc, #12]	; (8003a2c <HAL_RCC_OscConfig+0x270>)
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	4a02      	ldr	r2, [pc, #8]	; (8003a2c <HAL_RCC_OscConfig+0x270>)
 8003a24:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a28:	6013      	str	r3, [r2, #0]
 8003a2a:	e013      	b.n	8003a54 <HAL_RCC_OscConfig+0x298>
 8003a2c:	40021000 	.word	0x40021000
 8003a30:	08009e90 	.word	0x08009e90
 8003a34:	20000000 	.word	0x20000000
 8003a38:	2000000c 	.word	0x2000000c
 8003a3c:	4ba0      	ldr	r3, [pc, #640]	; (8003cc0 <HAL_RCC_OscConfig+0x504>)
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	4a9f      	ldr	r2, [pc, #636]	; (8003cc0 <HAL_RCC_OscConfig+0x504>)
 8003a42:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a46:	6013      	str	r3, [r2, #0]
 8003a48:	4b9d      	ldr	r3, [pc, #628]	; (8003cc0 <HAL_RCC_OscConfig+0x504>)
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	4a9c      	ldr	r2, [pc, #624]	; (8003cc0 <HAL_RCC_OscConfig+0x504>)
 8003a4e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003a52:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	685b      	ldr	r3, [r3, #4]
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d013      	beq.n	8003a84 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a5c:	f7ff f954 	bl	8002d08 <HAL_GetTick>
 8003a60:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003a62:	e008      	b.n	8003a76 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003a64:	f7ff f950 	bl	8002d08 <HAL_GetTick>
 8003a68:	4602      	mov	r2, r0
 8003a6a:	693b      	ldr	r3, [r7, #16]
 8003a6c:	1ad3      	subs	r3, r2, r3
 8003a6e:	2b64      	cmp	r3, #100	; 0x64
 8003a70:	d901      	bls.n	8003a76 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003a72:	2303      	movs	r3, #3
 8003a74:	e2ae      	b.n	8003fd4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003a76:	4b92      	ldr	r3, [pc, #584]	; (8003cc0 <HAL_RCC_OscConfig+0x504>)
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d0f0      	beq.n	8003a64 <HAL_RCC_OscConfig+0x2a8>
 8003a82:	e014      	b.n	8003aae <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a84:	f7ff f940 	bl	8002d08 <HAL_GetTick>
 8003a88:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003a8a:	e008      	b.n	8003a9e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003a8c:	f7ff f93c 	bl	8002d08 <HAL_GetTick>
 8003a90:	4602      	mov	r2, r0
 8003a92:	693b      	ldr	r3, [r7, #16]
 8003a94:	1ad3      	subs	r3, r2, r3
 8003a96:	2b64      	cmp	r3, #100	; 0x64
 8003a98:	d901      	bls.n	8003a9e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003a9a:	2303      	movs	r3, #3
 8003a9c:	e29a      	b.n	8003fd4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003a9e:	4b88      	ldr	r3, [pc, #544]	; (8003cc0 <HAL_RCC_OscConfig+0x504>)
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d1f0      	bne.n	8003a8c <HAL_RCC_OscConfig+0x2d0>
 8003aaa:	e000      	b.n	8003aae <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003aac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f003 0302 	and.w	r3, r3, #2
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d060      	beq.n	8003b7c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003aba:	69bb      	ldr	r3, [r7, #24]
 8003abc:	2b04      	cmp	r3, #4
 8003abe:	d005      	beq.n	8003acc <HAL_RCC_OscConfig+0x310>
 8003ac0:	69bb      	ldr	r3, [r7, #24]
 8003ac2:	2b0c      	cmp	r3, #12
 8003ac4:	d119      	bne.n	8003afa <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003ac6:	697b      	ldr	r3, [r7, #20]
 8003ac8:	2b02      	cmp	r3, #2
 8003aca:	d116      	bne.n	8003afa <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003acc:	4b7c      	ldr	r3, [pc, #496]	; (8003cc0 <HAL_RCC_OscConfig+0x504>)
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d005      	beq.n	8003ae4 <HAL_RCC_OscConfig+0x328>
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	68db      	ldr	r3, [r3, #12]
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d101      	bne.n	8003ae4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003ae0:	2301      	movs	r3, #1
 8003ae2:	e277      	b.n	8003fd4 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ae4:	4b76      	ldr	r3, [pc, #472]	; (8003cc0 <HAL_RCC_OscConfig+0x504>)
 8003ae6:	685b      	ldr	r3, [r3, #4]
 8003ae8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	691b      	ldr	r3, [r3, #16]
 8003af0:	061b      	lsls	r3, r3, #24
 8003af2:	4973      	ldr	r1, [pc, #460]	; (8003cc0 <HAL_RCC_OscConfig+0x504>)
 8003af4:	4313      	orrs	r3, r2
 8003af6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003af8:	e040      	b.n	8003b7c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	68db      	ldr	r3, [r3, #12]
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d023      	beq.n	8003b4a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003b02:	4b6f      	ldr	r3, [pc, #444]	; (8003cc0 <HAL_RCC_OscConfig+0x504>)
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	4a6e      	ldr	r2, [pc, #440]	; (8003cc0 <HAL_RCC_OscConfig+0x504>)
 8003b08:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b0c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b0e:	f7ff f8fb 	bl	8002d08 <HAL_GetTick>
 8003b12:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003b14:	e008      	b.n	8003b28 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003b16:	f7ff f8f7 	bl	8002d08 <HAL_GetTick>
 8003b1a:	4602      	mov	r2, r0
 8003b1c:	693b      	ldr	r3, [r7, #16]
 8003b1e:	1ad3      	subs	r3, r2, r3
 8003b20:	2b02      	cmp	r3, #2
 8003b22:	d901      	bls.n	8003b28 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003b24:	2303      	movs	r3, #3
 8003b26:	e255      	b.n	8003fd4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003b28:	4b65      	ldr	r3, [pc, #404]	; (8003cc0 <HAL_RCC_OscConfig+0x504>)
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d0f0      	beq.n	8003b16 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b34:	4b62      	ldr	r3, [pc, #392]	; (8003cc0 <HAL_RCC_OscConfig+0x504>)
 8003b36:	685b      	ldr	r3, [r3, #4]
 8003b38:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	691b      	ldr	r3, [r3, #16]
 8003b40:	061b      	lsls	r3, r3, #24
 8003b42:	495f      	ldr	r1, [pc, #380]	; (8003cc0 <HAL_RCC_OscConfig+0x504>)
 8003b44:	4313      	orrs	r3, r2
 8003b46:	604b      	str	r3, [r1, #4]
 8003b48:	e018      	b.n	8003b7c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003b4a:	4b5d      	ldr	r3, [pc, #372]	; (8003cc0 <HAL_RCC_OscConfig+0x504>)
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	4a5c      	ldr	r2, [pc, #368]	; (8003cc0 <HAL_RCC_OscConfig+0x504>)
 8003b50:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003b54:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b56:	f7ff f8d7 	bl	8002d08 <HAL_GetTick>
 8003b5a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003b5c:	e008      	b.n	8003b70 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003b5e:	f7ff f8d3 	bl	8002d08 <HAL_GetTick>
 8003b62:	4602      	mov	r2, r0
 8003b64:	693b      	ldr	r3, [r7, #16]
 8003b66:	1ad3      	subs	r3, r2, r3
 8003b68:	2b02      	cmp	r3, #2
 8003b6a:	d901      	bls.n	8003b70 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003b6c:	2303      	movs	r3, #3
 8003b6e:	e231      	b.n	8003fd4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003b70:	4b53      	ldr	r3, [pc, #332]	; (8003cc0 <HAL_RCC_OscConfig+0x504>)
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d1f0      	bne.n	8003b5e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f003 0308 	and.w	r3, r3, #8
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d03c      	beq.n	8003c02 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	695b      	ldr	r3, [r3, #20]
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d01c      	beq.n	8003bca <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003b90:	4b4b      	ldr	r3, [pc, #300]	; (8003cc0 <HAL_RCC_OscConfig+0x504>)
 8003b92:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003b96:	4a4a      	ldr	r2, [pc, #296]	; (8003cc0 <HAL_RCC_OscConfig+0x504>)
 8003b98:	f043 0301 	orr.w	r3, r3, #1
 8003b9c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ba0:	f7ff f8b2 	bl	8002d08 <HAL_GetTick>
 8003ba4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003ba6:	e008      	b.n	8003bba <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003ba8:	f7ff f8ae 	bl	8002d08 <HAL_GetTick>
 8003bac:	4602      	mov	r2, r0
 8003bae:	693b      	ldr	r3, [r7, #16]
 8003bb0:	1ad3      	subs	r3, r2, r3
 8003bb2:	2b02      	cmp	r3, #2
 8003bb4:	d901      	bls.n	8003bba <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003bb6:	2303      	movs	r3, #3
 8003bb8:	e20c      	b.n	8003fd4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003bba:	4b41      	ldr	r3, [pc, #260]	; (8003cc0 <HAL_RCC_OscConfig+0x504>)
 8003bbc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003bc0:	f003 0302 	and.w	r3, r3, #2
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d0ef      	beq.n	8003ba8 <HAL_RCC_OscConfig+0x3ec>
 8003bc8:	e01b      	b.n	8003c02 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003bca:	4b3d      	ldr	r3, [pc, #244]	; (8003cc0 <HAL_RCC_OscConfig+0x504>)
 8003bcc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003bd0:	4a3b      	ldr	r2, [pc, #236]	; (8003cc0 <HAL_RCC_OscConfig+0x504>)
 8003bd2:	f023 0301 	bic.w	r3, r3, #1
 8003bd6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003bda:	f7ff f895 	bl	8002d08 <HAL_GetTick>
 8003bde:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003be0:	e008      	b.n	8003bf4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003be2:	f7ff f891 	bl	8002d08 <HAL_GetTick>
 8003be6:	4602      	mov	r2, r0
 8003be8:	693b      	ldr	r3, [r7, #16]
 8003bea:	1ad3      	subs	r3, r2, r3
 8003bec:	2b02      	cmp	r3, #2
 8003bee:	d901      	bls.n	8003bf4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003bf0:	2303      	movs	r3, #3
 8003bf2:	e1ef      	b.n	8003fd4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003bf4:	4b32      	ldr	r3, [pc, #200]	; (8003cc0 <HAL_RCC_OscConfig+0x504>)
 8003bf6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003bfa:	f003 0302 	and.w	r3, r3, #2
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d1ef      	bne.n	8003be2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f003 0304 	and.w	r3, r3, #4
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	f000 80a6 	beq.w	8003d5c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003c10:	2300      	movs	r3, #0
 8003c12:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003c14:	4b2a      	ldr	r3, [pc, #168]	; (8003cc0 <HAL_RCC_OscConfig+0x504>)
 8003c16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c18:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d10d      	bne.n	8003c3c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003c20:	4b27      	ldr	r3, [pc, #156]	; (8003cc0 <HAL_RCC_OscConfig+0x504>)
 8003c22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c24:	4a26      	ldr	r2, [pc, #152]	; (8003cc0 <HAL_RCC_OscConfig+0x504>)
 8003c26:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c2a:	6593      	str	r3, [r2, #88]	; 0x58
 8003c2c:	4b24      	ldr	r3, [pc, #144]	; (8003cc0 <HAL_RCC_OscConfig+0x504>)
 8003c2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c30:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c34:	60bb      	str	r3, [r7, #8]
 8003c36:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003c38:	2301      	movs	r3, #1
 8003c3a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003c3c:	4b21      	ldr	r3, [pc, #132]	; (8003cc4 <HAL_RCC_OscConfig+0x508>)
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d118      	bne.n	8003c7a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003c48:	4b1e      	ldr	r3, [pc, #120]	; (8003cc4 <HAL_RCC_OscConfig+0x508>)
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	4a1d      	ldr	r2, [pc, #116]	; (8003cc4 <HAL_RCC_OscConfig+0x508>)
 8003c4e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c52:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003c54:	f7ff f858 	bl	8002d08 <HAL_GetTick>
 8003c58:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003c5a:	e008      	b.n	8003c6e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c5c:	f7ff f854 	bl	8002d08 <HAL_GetTick>
 8003c60:	4602      	mov	r2, r0
 8003c62:	693b      	ldr	r3, [r7, #16]
 8003c64:	1ad3      	subs	r3, r2, r3
 8003c66:	2b02      	cmp	r3, #2
 8003c68:	d901      	bls.n	8003c6e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003c6a:	2303      	movs	r3, #3
 8003c6c:	e1b2      	b.n	8003fd4 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003c6e:	4b15      	ldr	r3, [pc, #84]	; (8003cc4 <HAL_RCC_OscConfig+0x508>)
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d0f0      	beq.n	8003c5c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	689b      	ldr	r3, [r3, #8]
 8003c7e:	2b01      	cmp	r3, #1
 8003c80:	d108      	bne.n	8003c94 <HAL_RCC_OscConfig+0x4d8>
 8003c82:	4b0f      	ldr	r3, [pc, #60]	; (8003cc0 <HAL_RCC_OscConfig+0x504>)
 8003c84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c88:	4a0d      	ldr	r2, [pc, #52]	; (8003cc0 <HAL_RCC_OscConfig+0x504>)
 8003c8a:	f043 0301 	orr.w	r3, r3, #1
 8003c8e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003c92:	e029      	b.n	8003ce8 <HAL_RCC_OscConfig+0x52c>
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	689b      	ldr	r3, [r3, #8]
 8003c98:	2b05      	cmp	r3, #5
 8003c9a:	d115      	bne.n	8003cc8 <HAL_RCC_OscConfig+0x50c>
 8003c9c:	4b08      	ldr	r3, [pc, #32]	; (8003cc0 <HAL_RCC_OscConfig+0x504>)
 8003c9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ca2:	4a07      	ldr	r2, [pc, #28]	; (8003cc0 <HAL_RCC_OscConfig+0x504>)
 8003ca4:	f043 0304 	orr.w	r3, r3, #4
 8003ca8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003cac:	4b04      	ldr	r3, [pc, #16]	; (8003cc0 <HAL_RCC_OscConfig+0x504>)
 8003cae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cb2:	4a03      	ldr	r2, [pc, #12]	; (8003cc0 <HAL_RCC_OscConfig+0x504>)
 8003cb4:	f043 0301 	orr.w	r3, r3, #1
 8003cb8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003cbc:	e014      	b.n	8003ce8 <HAL_RCC_OscConfig+0x52c>
 8003cbe:	bf00      	nop
 8003cc0:	40021000 	.word	0x40021000
 8003cc4:	40007000 	.word	0x40007000
 8003cc8:	4b9a      	ldr	r3, [pc, #616]	; (8003f34 <HAL_RCC_OscConfig+0x778>)
 8003cca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cce:	4a99      	ldr	r2, [pc, #612]	; (8003f34 <HAL_RCC_OscConfig+0x778>)
 8003cd0:	f023 0301 	bic.w	r3, r3, #1
 8003cd4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003cd8:	4b96      	ldr	r3, [pc, #600]	; (8003f34 <HAL_RCC_OscConfig+0x778>)
 8003cda:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cde:	4a95      	ldr	r2, [pc, #596]	; (8003f34 <HAL_RCC_OscConfig+0x778>)
 8003ce0:	f023 0304 	bic.w	r3, r3, #4
 8003ce4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	689b      	ldr	r3, [r3, #8]
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d016      	beq.n	8003d1e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cf0:	f7ff f80a 	bl	8002d08 <HAL_GetTick>
 8003cf4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003cf6:	e00a      	b.n	8003d0e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003cf8:	f7ff f806 	bl	8002d08 <HAL_GetTick>
 8003cfc:	4602      	mov	r2, r0
 8003cfe:	693b      	ldr	r3, [r7, #16]
 8003d00:	1ad3      	subs	r3, r2, r3
 8003d02:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d06:	4293      	cmp	r3, r2
 8003d08:	d901      	bls.n	8003d0e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8003d0a:	2303      	movs	r3, #3
 8003d0c:	e162      	b.n	8003fd4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003d0e:	4b89      	ldr	r3, [pc, #548]	; (8003f34 <HAL_RCC_OscConfig+0x778>)
 8003d10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d14:	f003 0302 	and.w	r3, r3, #2
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d0ed      	beq.n	8003cf8 <HAL_RCC_OscConfig+0x53c>
 8003d1c:	e015      	b.n	8003d4a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d1e:	f7fe fff3 	bl	8002d08 <HAL_GetTick>
 8003d22:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003d24:	e00a      	b.n	8003d3c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d26:	f7fe ffef 	bl	8002d08 <HAL_GetTick>
 8003d2a:	4602      	mov	r2, r0
 8003d2c:	693b      	ldr	r3, [r7, #16]
 8003d2e:	1ad3      	subs	r3, r2, r3
 8003d30:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d34:	4293      	cmp	r3, r2
 8003d36:	d901      	bls.n	8003d3c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003d38:	2303      	movs	r3, #3
 8003d3a:	e14b      	b.n	8003fd4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003d3c:	4b7d      	ldr	r3, [pc, #500]	; (8003f34 <HAL_RCC_OscConfig+0x778>)
 8003d3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d42:	f003 0302 	and.w	r3, r3, #2
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d1ed      	bne.n	8003d26 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003d4a:	7ffb      	ldrb	r3, [r7, #31]
 8003d4c:	2b01      	cmp	r3, #1
 8003d4e:	d105      	bne.n	8003d5c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d50:	4b78      	ldr	r3, [pc, #480]	; (8003f34 <HAL_RCC_OscConfig+0x778>)
 8003d52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d54:	4a77      	ldr	r2, [pc, #476]	; (8003f34 <HAL_RCC_OscConfig+0x778>)
 8003d56:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003d5a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	f003 0320 	and.w	r3, r3, #32
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d03c      	beq.n	8003de2 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d01c      	beq.n	8003daa <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003d70:	4b70      	ldr	r3, [pc, #448]	; (8003f34 <HAL_RCC_OscConfig+0x778>)
 8003d72:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003d76:	4a6f      	ldr	r2, [pc, #444]	; (8003f34 <HAL_RCC_OscConfig+0x778>)
 8003d78:	f043 0301 	orr.w	r3, r3, #1
 8003d7c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d80:	f7fe ffc2 	bl	8002d08 <HAL_GetTick>
 8003d84:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003d86:	e008      	b.n	8003d9a <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003d88:	f7fe ffbe 	bl	8002d08 <HAL_GetTick>
 8003d8c:	4602      	mov	r2, r0
 8003d8e:	693b      	ldr	r3, [r7, #16]
 8003d90:	1ad3      	subs	r3, r2, r3
 8003d92:	2b02      	cmp	r3, #2
 8003d94:	d901      	bls.n	8003d9a <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8003d96:	2303      	movs	r3, #3
 8003d98:	e11c      	b.n	8003fd4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003d9a:	4b66      	ldr	r3, [pc, #408]	; (8003f34 <HAL_RCC_OscConfig+0x778>)
 8003d9c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003da0:	f003 0302 	and.w	r3, r3, #2
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d0ef      	beq.n	8003d88 <HAL_RCC_OscConfig+0x5cc>
 8003da8:	e01b      	b.n	8003de2 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003daa:	4b62      	ldr	r3, [pc, #392]	; (8003f34 <HAL_RCC_OscConfig+0x778>)
 8003dac:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003db0:	4a60      	ldr	r2, [pc, #384]	; (8003f34 <HAL_RCC_OscConfig+0x778>)
 8003db2:	f023 0301 	bic.w	r3, r3, #1
 8003db6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003dba:	f7fe ffa5 	bl	8002d08 <HAL_GetTick>
 8003dbe:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003dc0:	e008      	b.n	8003dd4 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003dc2:	f7fe ffa1 	bl	8002d08 <HAL_GetTick>
 8003dc6:	4602      	mov	r2, r0
 8003dc8:	693b      	ldr	r3, [r7, #16]
 8003dca:	1ad3      	subs	r3, r2, r3
 8003dcc:	2b02      	cmp	r3, #2
 8003dce:	d901      	bls.n	8003dd4 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8003dd0:	2303      	movs	r3, #3
 8003dd2:	e0ff      	b.n	8003fd4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003dd4:	4b57      	ldr	r3, [pc, #348]	; (8003f34 <HAL_RCC_OscConfig+0x778>)
 8003dd6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003dda:	f003 0302 	and.w	r3, r3, #2
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d1ef      	bne.n	8003dc2 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	f000 80f3 	beq.w	8003fd2 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003df0:	2b02      	cmp	r3, #2
 8003df2:	f040 80c9 	bne.w	8003f88 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003df6:	4b4f      	ldr	r3, [pc, #316]	; (8003f34 <HAL_RCC_OscConfig+0x778>)
 8003df8:	68db      	ldr	r3, [r3, #12]
 8003dfa:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003dfc:	697b      	ldr	r3, [r7, #20]
 8003dfe:	f003 0203 	and.w	r2, r3, #3
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e06:	429a      	cmp	r2, r3
 8003e08:	d12c      	bne.n	8003e64 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003e0a:	697b      	ldr	r3, [r7, #20]
 8003e0c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e14:	3b01      	subs	r3, #1
 8003e16:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e18:	429a      	cmp	r2, r3
 8003e1a:	d123      	bne.n	8003e64 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003e1c:	697b      	ldr	r3, [r7, #20]
 8003e1e:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e26:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003e28:	429a      	cmp	r2, r3
 8003e2a:	d11b      	bne.n	8003e64 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003e2c:	697b      	ldr	r3, [r7, #20]
 8003e2e:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e36:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003e38:	429a      	cmp	r2, r3
 8003e3a:	d113      	bne.n	8003e64 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003e3c:	697b      	ldr	r3, [r7, #20]
 8003e3e:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e46:	085b      	lsrs	r3, r3, #1
 8003e48:	3b01      	subs	r3, #1
 8003e4a:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003e4c:	429a      	cmp	r2, r3
 8003e4e:	d109      	bne.n	8003e64 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003e50:	697b      	ldr	r3, [r7, #20]
 8003e52:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e5a:	085b      	lsrs	r3, r3, #1
 8003e5c:	3b01      	subs	r3, #1
 8003e5e:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003e60:	429a      	cmp	r2, r3
 8003e62:	d06b      	beq.n	8003f3c <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003e64:	69bb      	ldr	r3, [r7, #24]
 8003e66:	2b0c      	cmp	r3, #12
 8003e68:	d062      	beq.n	8003f30 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003e6a:	4b32      	ldr	r3, [pc, #200]	; (8003f34 <HAL_RCC_OscConfig+0x778>)
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d001      	beq.n	8003e7a <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8003e76:	2301      	movs	r3, #1
 8003e78:	e0ac      	b.n	8003fd4 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003e7a:	4b2e      	ldr	r3, [pc, #184]	; (8003f34 <HAL_RCC_OscConfig+0x778>)
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	4a2d      	ldr	r2, [pc, #180]	; (8003f34 <HAL_RCC_OscConfig+0x778>)
 8003e80:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003e84:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003e86:	f7fe ff3f 	bl	8002d08 <HAL_GetTick>
 8003e8a:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003e8c:	e008      	b.n	8003ea0 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e8e:	f7fe ff3b 	bl	8002d08 <HAL_GetTick>
 8003e92:	4602      	mov	r2, r0
 8003e94:	693b      	ldr	r3, [r7, #16]
 8003e96:	1ad3      	subs	r3, r2, r3
 8003e98:	2b02      	cmp	r3, #2
 8003e9a:	d901      	bls.n	8003ea0 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8003e9c:	2303      	movs	r3, #3
 8003e9e:	e099      	b.n	8003fd4 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003ea0:	4b24      	ldr	r3, [pc, #144]	; (8003f34 <HAL_RCC_OscConfig+0x778>)
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d1f0      	bne.n	8003e8e <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003eac:	4b21      	ldr	r3, [pc, #132]	; (8003f34 <HAL_RCC_OscConfig+0x778>)
 8003eae:	68da      	ldr	r2, [r3, #12]
 8003eb0:	4b21      	ldr	r3, [pc, #132]	; (8003f38 <HAL_RCC_OscConfig+0x77c>)
 8003eb2:	4013      	ands	r3, r2
 8003eb4:	687a      	ldr	r2, [r7, #4]
 8003eb6:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003eb8:	687a      	ldr	r2, [r7, #4]
 8003eba:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003ebc:	3a01      	subs	r2, #1
 8003ebe:	0112      	lsls	r2, r2, #4
 8003ec0:	4311      	orrs	r1, r2
 8003ec2:	687a      	ldr	r2, [r7, #4]
 8003ec4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003ec6:	0212      	lsls	r2, r2, #8
 8003ec8:	4311      	orrs	r1, r2
 8003eca:	687a      	ldr	r2, [r7, #4]
 8003ecc:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003ece:	0852      	lsrs	r2, r2, #1
 8003ed0:	3a01      	subs	r2, #1
 8003ed2:	0552      	lsls	r2, r2, #21
 8003ed4:	4311      	orrs	r1, r2
 8003ed6:	687a      	ldr	r2, [r7, #4]
 8003ed8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003eda:	0852      	lsrs	r2, r2, #1
 8003edc:	3a01      	subs	r2, #1
 8003ede:	0652      	lsls	r2, r2, #25
 8003ee0:	4311      	orrs	r1, r2
 8003ee2:	687a      	ldr	r2, [r7, #4]
 8003ee4:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003ee6:	06d2      	lsls	r2, r2, #27
 8003ee8:	430a      	orrs	r2, r1
 8003eea:	4912      	ldr	r1, [pc, #72]	; (8003f34 <HAL_RCC_OscConfig+0x778>)
 8003eec:	4313      	orrs	r3, r2
 8003eee:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003ef0:	4b10      	ldr	r3, [pc, #64]	; (8003f34 <HAL_RCC_OscConfig+0x778>)
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	4a0f      	ldr	r2, [pc, #60]	; (8003f34 <HAL_RCC_OscConfig+0x778>)
 8003ef6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003efa:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003efc:	4b0d      	ldr	r3, [pc, #52]	; (8003f34 <HAL_RCC_OscConfig+0x778>)
 8003efe:	68db      	ldr	r3, [r3, #12]
 8003f00:	4a0c      	ldr	r2, [pc, #48]	; (8003f34 <HAL_RCC_OscConfig+0x778>)
 8003f02:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003f06:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003f08:	f7fe fefe 	bl	8002d08 <HAL_GetTick>
 8003f0c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003f0e:	e008      	b.n	8003f22 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f10:	f7fe fefa 	bl	8002d08 <HAL_GetTick>
 8003f14:	4602      	mov	r2, r0
 8003f16:	693b      	ldr	r3, [r7, #16]
 8003f18:	1ad3      	subs	r3, r2, r3
 8003f1a:	2b02      	cmp	r3, #2
 8003f1c:	d901      	bls.n	8003f22 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8003f1e:	2303      	movs	r3, #3
 8003f20:	e058      	b.n	8003fd4 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003f22:	4b04      	ldr	r3, [pc, #16]	; (8003f34 <HAL_RCC_OscConfig+0x778>)
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d0f0      	beq.n	8003f10 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003f2e:	e050      	b.n	8003fd2 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003f30:	2301      	movs	r3, #1
 8003f32:	e04f      	b.n	8003fd4 <HAL_RCC_OscConfig+0x818>
 8003f34:	40021000 	.word	0x40021000
 8003f38:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003f3c:	4b27      	ldr	r3, [pc, #156]	; (8003fdc <HAL_RCC_OscConfig+0x820>)
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d144      	bne.n	8003fd2 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003f48:	4b24      	ldr	r3, [pc, #144]	; (8003fdc <HAL_RCC_OscConfig+0x820>)
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	4a23      	ldr	r2, [pc, #140]	; (8003fdc <HAL_RCC_OscConfig+0x820>)
 8003f4e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003f52:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003f54:	4b21      	ldr	r3, [pc, #132]	; (8003fdc <HAL_RCC_OscConfig+0x820>)
 8003f56:	68db      	ldr	r3, [r3, #12]
 8003f58:	4a20      	ldr	r2, [pc, #128]	; (8003fdc <HAL_RCC_OscConfig+0x820>)
 8003f5a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003f5e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003f60:	f7fe fed2 	bl	8002d08 <HAL_GetTick>
 8003f64:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003f66:	e008      	b.n	8003f7a <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f68:	f7fe fece 	bl	8002d08 <HAL_GetTick>
 8003f6c:	4602      	mov	r2, r0
 8003f6e:	693b      	ldr	r3, [r7, #16]
 8003f70:	1ad3      	subs	r3, r2, r3
 8003f72:	2b02      	cmp	r3, #2
 8003f74:	d901      	bls.n	8003f7a <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8003f76:	2303      	movs	r3, #3
 8003f78:	e02c      	b.n	8003fd4 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003f7a:	4b18      	ldr	r3, [pc, #96]	; (8003fdc <HAL_RCC_OscConfig+0x820>)
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d0f0      	beq.n	8003f68 <HAL_RCC_OscConfig+0x7ac>
 8003f86:	e024      	b.n	8003fd2 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003f88:	69bb      	ldr	r3, [r7, #24]
 8003f8a:	2b0c      	cmp	r3, #12
 8003f8c:	d01f      	beq.n	8003fce <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f8e:	4b13      	ldr	r3, [pc, #76]	; (8003fdc <HAL_RCC_OscConfig+0x820>)
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	4a12      	ldr	r2, [pc, #72]	; (8003fdc <HAL_RCC_OscConfig+0x820>)
 8003f94:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003f98:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f9a:	f7fe feb5 	bl	8002d08 <HAL_GetTick>
 8003f9e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003fa0:	e008      	b.n	8003fb4 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003fa2:	f7fe feb1 	bl	8002d08 <HAL_GetTick>
 8003fa6:	4602      	mov	r2, r0
 8003fa8:	693b      	ldr	r3, [r7, #16]
 8003faa:	1ad3      	subs	r3, r2, r3
 8003fac:	2b02      	cmp	r3, #2
 8003fae:	d901      	bls.n	8003fb4 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8003fb0:	2303      	movs	r3, #3
 8003fb2:	e00f      	b.n	8003fd4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003fb4:	4b09      	ldr	r3, [pc, #36]	; (8003fdc <HAL_RCC_OscConfig+0x820>)
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d1f0      	bne.n	8003fa2 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8003fc0:	4b06      	ldr	r3, [pc, #24]	; (8003fdc <HAL_RCC_OscConfig+0x820>)
 8003fc2:	68da      	ldr	r2, [r3, #12]
 8003fc4:	4905      	ldr	r1, [pc, #20]	; (8003fdc <HAL_RCC_OscConfig+0x820>)
 8003fc6:	4b06      	ldr	r3, [pc, #24]	; (8003fe0 <HAL_RCC_OscConfig+0x824>)
 8003fc8:	4013      	ands	r3, r2
 8003fca:	60cb      	str	r3, [r1, #12]
 8003fcc:	e001      	b.n	8003fd2 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003fce:	2301      	movs	r3, #1
 8003fd0:	e000      	b.n	8003fd4 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8003fd2:	2300      	movs	r3, #0
}
 8003fd4:	4618      	mov	r0, r3
 8003fd6:	3720      	adds	r7, #32
 8003fd8:	46bd      	mov	sp, r7
 8003fda:	bd80      	pop	{r7, pc}
 8003fdc:	40021000 	.word	0x40021000
 8003fe0:	feeefffc 	.word	0xfeeefffc

08003fe4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003fe4:	b580      	push	{r7, lr}
 8003fe6:	b084      	sub	sp, #16
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	6078      	str	r0, [r7, #4]
 8003fec:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d101      	bne.n	8003ff8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003ff4:	2301      	movs	r3, #1
 8003ff6:	e0e7      	b.n	80041c8 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003ff8:	4b75      	ldr	r3, [pc, #468]	; (80041d0 <HAL_RCC_ClockConfig+0x1ec>)
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	f003 0307 	and.w	r3, r3, #7
 8004000:	683a      	ldr	r2, [r7, #0]
 8004002:	429a      	cmp	r2, r3
 8004004:	d910      	bls.n	8004028 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004006:	4b72      	ldr	r3, [pc, #456]	; (80041d0 <HAL_RCC_ClockConfig+0x1ec>)
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	f023 0207 	bic.w	r2, r3, #7
 800400e:	4970      	ldr	r1, [pc, #448]	; (80041d0 <HAL_RCC_ClockConfig+0x1ec>)
 8004010:	683b      	ldr	r3, [r7, #0]
 8004012:	4313      	orrs	r3, r2
 8004014:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004016:	4b6e      	ldr	r3, [pc, #440]	; (80041d0 <HAL_RCC_ClockConfig+0x1ec>)
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f003 0307 	and.w	r3, r3, #7
 800401e:	683a      	ldr	r2, [r7, #0]
 8004020:	429a      	cmp	r2, r3
 8004022:	d001      	beq.n	8004028 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004024:	2301      	movs	r3, #1
 8004026:	e0cf      	b.n	80041c8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	f003 0302 	and.w	r3, r3, #2
 8004030:	2b00      	cmp	r3, #0
 8004032:	d010      	beq.n	8004056 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	689a      	ldr	r2, [r3, #8]
 8004038:	4b66      	ldr	r3, [pc, #408]	; (80041d4 <HAL_RCC_ClockConfig+0x1f0>)
 800403a:	689b      	ldr	r3, [r3, #8]
 800403c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004040:	429a      	cmp	r2, r3
 8004042:	d908      	bls.n	8004056 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004044:	4b63      	ldr	r3, [pc, #396]	; (80041d4 <HAL_RCC_ClockConfig+0x1f0>)
 8004046:	689b      	ldr	r3, [r3, #8]
 8004048:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	689b      	ldr	r3, [r3, #8]
 8004050:	4960      	ldr	r1, [pc, #384]	; (80041d4 <HAL_RCC_ClockConfig+0x1f0>)
 8004052:	4313      	orrs	r3, r2
 8004054:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	f003 0301 	and.w	r3, r3, #1
 800405e:	2b00      	cmp	r3, #0
 8004060:	d04c      	beq.n	80040fc <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	685b      	ldr	r3, [r3, #4]
 8004066:	2b03      	cmp	r3, #3
 8004068:	d107      	bne.n	800407a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800406a:	4b5a      	ldr	r3, [pc, #360]	; (80041d4 <HAL_RCC_ClockConfig+0x1f0>)
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004072:	2b00      	cmp	r3, #0
 8004074:	d121      	bne.n	80040ba <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8004076:	2301      	movs	r3, #1
 8004078:	e0a6      	b.n	80041c8 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	685b      	ldr	r3, [r3, #4]
 800407e:	2b02      	cmp	r3, #2
 8004080:	d107      	bne.n	8004092 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004082:	4b54      	ldr	r3, [pc, #336]	; (80041d4 <HAL_RCC_ClockConfig+0x1f0>)
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800408a:	2b00      	cmp	r3, #0
 800408c:	d115      	bne.n	80040ba <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800408e:	2301      	movs	r3, #1
 8004090:	e09a      	b.n	80041c8 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	685b      	ldr	r3, [r3, #4]
 8004096:	2b00      	cmp	r3, #0
 8004098:	d107      	bne.n	80040aa <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800409a:	4b4e      	ldr	r3, [pc, #312]	; (80041d4 <HAL_RCC_ClockConfig+0x1f0>)
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	f003 0302 	and.w	r3, r3, #2
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d109      	bne.n	80040ba <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80040a6:	2301      	movs	r3, #1
 80040a8:	e08e      	b.n	80041c8 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80040aa:	4b4a      	ldr	r3, [pc, #296]	; (80041d4 <HAL_RCC_ClockConfig+0x1f0>)
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d101      	bne.n	80040ba <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80040b6:	2301      	movs	r3, #1
 80040b8:	e086      	b.n	80041c8 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80040ba:	4b46      	ldr	r3, [pc, #280]	; (80041d4 <HAL_RCC_ClockConfig+0x1f0>)
 80040bc:	689b      	ldr	r3, [r3, #8]
 80040be:	f023 0203 	bic.w	r2, r3, #3
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	685b      	ldr	r3, [r3, #4]
 80040c6:	4943      	ldr	r1, [pc, #268]	; (80041d4 <HAL_RCC_ClockConfig+0x1f0>)
 80040c8:	4313      	orrs	r3, r2
 80040ca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80040cc:	f7fe fe1c 	bl	8002d08 <HAL_GetTick>
 80040d0:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80040d2:	e00a      	b.n	80040ea <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80040d4:	f7fe fe18 	bl	8002d08 <HAL_GetTick>
 80040d8:	4602      	mov	r2, r0
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	1ad3      	subs	r3, r2, r3
 80040de:	f241 3288 	movw	r2, #5000	; 0x1388
 80040e2:	4293      	cmp	r3, r2
 80040e4:	d901      	bls.n	80040ea <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80040e6:	2303      	movs	r3, #3
 80040e8:	e06e      	b.n	80041c8 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80040ea:	4b3a      	ldr	r3, [pc, #232]	; (80041d4 <HAL_RCC_ClockConfig+0x1f0>)
 80040ec:	689b      	ldr	r3, [r3, #8]
 80040ee:	f003 020c 	and.w	r2, r3, #12
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	685b      	ldr	r3, [r3, #4]
 80040f6:	009b      	lsls	r3, r3, #2
 80040f8:	429a      	cmp	r2, r3
 80040fa:	d1eb      	bne.n	80040d4 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f003 0302 	and.w	r3, r3, #2
 8004104:	2b00      	cmp	r3, #0
 8004106:	d010      	beq.n	800412a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	689a      	ldr	r2, [r3, #8]
 800410c:	4b31      	ldr	r3, [pc, #196]	; (80041d4 <HAL_RCC_ClockConfig+0x1f0>)
 800410e:	689b      	ldr	r3, [r3, #8]
 8004110:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004114:	429a      	cmp	r2, r3
 8004116:	d208      	bcs.n	800412a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004118:	4b2e      	ldr	r3, [pc, #184]	; (80041d4 <HAL_RCC_ClockConfig+0x1f0>)
 800411a:	689b      	ldr	r3, [r3, #8]
 800411c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	689b      	ldr	r3, [r3, #8]
 8004124:	492b      	ldr	r1, [pc, #172]	; (80041d4 <HAL_RCC_ClockConfig+0x1f0>)
 8004126:	4313      	orrs	r3, r2
 8004128:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800412a:	4b29      	ldr	r3, [pc, #164]	; (80041d0 <HAL_RCC_ClockConfig+0x1ec>)
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f003 0307 	and.w	r3, r3, #7
 8004132:	683a      	ldr	r2, [r7, #0]
 8004134:	429a      	cmp	r2, r3
 8004136:	d210      	bcs.n	800415a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004138:	4b25      	ldr	r3, [pc, #148]	; (80041d0 <HAL_RCC_ClockConfig+0x1ec>)
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	f023 0207 	bic.w	r2, r3, #7
 8004140:	4923      	ldr	r1, [pc, #140]	; (80041d0 <HAL_RCC_ClockConfig+0x1ec>)
 8004142:	683b      	ldr	r3, [r7, #0]
 8004144:	4313      	orrs	r3, r2
 8004146:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004148:	4b21      	ldr	r3, [pc, #132]	; (80041d0 <HAL_RCC_ClockConfig+0x1ec>)
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f003 0307 	and.w	r3, r3, #7
 8004150:	683a      	ldr	r2, [r7, #0]
 8004152:	429a      	cmp	r2, r3
 8004154:	d001      	beq.n	800415a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8004156:	2301      	movs	r3, #1
 8004158:	e036      	b.n	80041c8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	f003 0304 	and.w	r3, r3, #4
 8004162:	2b00      	cmp	r3, #0
 8004164:	d008      	beq.n	8004178 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004166:	4b1b      	ldr	r3, [pc, #108]	; (80041d4 <HAL_RCC_ClockConfig+0x1f0>)
 8004168:	689b      	ldr	r3, [r3, #8]
 800416a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	68db      	ldr	r3, [r3, #12]
 8004172:	4918      	ldr	r1, [pc, #96]	; (80041d4 <HAL_RCC_ClockConfig+0x1f0>)
 8004174:	4313      	orrs	r3, r2
 8004176:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	f003 0308 	and.w	r3, r3, #8
 8004180:	2b00      	cmp	r3, #0
 8004182:	d009      	beq.n	8004198 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004184:	4b13      	ldr	r3, [pc, #76]	; (80041d4 <HAL_RCC_ClockConfig+0x1f0>)
 8004186:	689b      	ldr	r3, [r3, #8]
 8004188:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	691b      	ldr	r3, [r3, #16]
 8004190:	00db      	lsls	r3, r3, #3
 8004192:	4910      	ldr	r1, [pc, #64]	; (80041d4 <HAL_RCC_ClockConfig+0x1f0>)
 8004194:	4313      	orrs	r3, r2
 8004196:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004198:	f000 f824 	bl	80041e4 <HAL_RCC_GetSysClockFreq>
 800419c:	4602      	mov	r2, r0
 800419e:	4b0d      	ldr	r3, [pc, #52]	; (80041d4 <HAL_RCC_ClockConfig+0x1f0>)
 80041a0:	689b      	ldr	r3, [r3, #8]
 80041a2:	091b      	lsrs	r3, r3, #4
 80041a4:	f003 030f 	and.w	r3, r3, #15
 80041a8:	490b      	ldr	r1, [pc, #44]	; (80041d8 <HAL_RCC_ClockConfig+0x1f4>)
 80041aa:	5ccb      	ldrb	r3, [r1, r3]
 80041ac:	f003 031f 	and.w	r3, r3, #31
 80041b0:	fa22 f303 	lsr.w	r3, r2, r3
 80041b4:	4a09      	ldr	r2, [pc, #36]	; (80041dc <HAL_RCC_ClockConfig+0x1f8>)
 80041b6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80041b8:	4b09      	ldr	r3, [pc, #36]	; (80041e0 <HAL_RCC_ClockConfig+0x1fc>)
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	4618      	mov	r0, r3
 80041be:	f7fe f9a5 	bl	800250c <HAL_InitTick>
 80041c2:	4603      	mov	r3, r0
 80041c4:	72fb      	strb	r3, [r7, #11]

  return status;
 80041c6:	7afb      	ldrb	r3, [r7, #11]
}
 80041c8:	4618      	mov	r0, r3
 80041ca:	3710      	adds	r7, #16
 80041cc:	46bd      	mov	sp, r7
 80041ce:	bd80      	pop	{r7, pc}
 80041d0:	40022000 	.word	0x40022000
 80041d4:	40021000 	.word	0x40021000
 80041d8:	08009e90 	.word	0x08009e90
 80041dc:	20000000 	.word	0x20000000
 80041e0:	2000000c 	.word	0x2000000c

080041e4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80041e4:	b480      	push	{r7}
 80041e6:	b089      	sub	sp, #36	; 0x24
 80041e8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80041ea:	2300      	movs	r3, #0
 80041ec:	61fb      	str	r3, [r7, #28]
 80041ee:	2300      	movs	r3, #0
 80041f0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80041f2:	4b3e      	ldr	r3, [pc, #248]	; (80042ec <HAL_RCC_GetSysClockFreq+0x108>)
 80041f4:	689b      	ldr	r3, [r3, #8]
 80041f6:	f003 030c 	and.w	r3, r3, #12
 80041fa:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80041fc:	4b3b      	ldr	r3, [pc, #236]	; (80042ec <HAL_RCC_GetSysClockFreq+0x108>)
 80041fe:	68db      	ldr	r3, [r3, #12]
 8004200:	f003 0303 	and.w	r3, r3, #3
 8004204:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004206:	693b      	ldr	r3, [r7, #16]
 8004208:	2b00      	cmp	r3, #0
 800420a:	d005      	beq.n	8004218 <HAL_RCC_GetSysClockFreq+0x34>
 800420c:	693b      	ldr	r3, [r7, #16]
 800420e:	2b0c      	cmp	r3, #12
 8004210:	d121      	bne.n	8004256 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	2b01      	cmp	r3, #1
 8004216:	d11e      	bne.n	8004256 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004218:	4b34      	ldr	r3, [pc, #208]	; (80042ec <HAL_RCC_GetSysClockFreq+0x108>)
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f003 0308 	and.w	r3, r3, #8
 8004220:	2b00      	cmp	r3, #0
 8004222:	d107      	bne.n	8004234 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004224:	4b31      	ldr	r3, [pc, #196]	; (80042ec <HAL_RCC_GetSysClockFreq+0x108>)
 8004226:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800422a:	0a1b      	lsrs	r3, r3, #8
 800422c:	f003 030f 	and.w	r3, r3, #15
 8004230:	61fb      	str	r3, [r7, #28]
 8004232:	e005      	b.n	8004240 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004234:	4b2d      	ldr	r3, [pc, #180]	; (80042ec <HAL_RCC_GetSysClockFreq+0x108>)
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	091b      	lsrs	r3, r3, #4
 800423a:	f003 030f 	and.w	r3, r3, #15
 800423e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004240:	4a2b      	ldr	r2, [pc, #172]	; (80042f0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004242:	69fb      	ldr	r3, [r7, #28]
 8004244:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004248:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800424a:	693b      	ldr	r3, [r7, #16]
 800424c:	2b00      	cmp	r3, #0
 800424e:	d10d      	bne.n	800426c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004250:	69fb      	ldr	r3, [r7, #28]
 8004252:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004254:	e00a      	b.n	800426c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004256:	693b      	ldr	r3, [r7, #16]
 8004258:	2b04      	cmp	r3, #4
 800425a:	d102      	bne.n	8004262 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800425c:	4b25      	ldr	r3, [pc, #148]	; (80042f4 <HAL_RCC_GetSysClockFreq+0x110>)
 800425e:	61bb      	str	r3, [r7, #24]
 8004260:	e004      	b.n	800426c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004262:	693b      	ldr	r3, [r7, #16]
 8004264:	2b08      	cmp	r3, #8
 8004266:	d101      	bne.n	800426c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004268:	4b23      	ldr	r3, [pc, #140]	; (80042f8 <HAL_RCC_GetSysClockFreq+0x114>)
 800426a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800426c:	693b      	ldr	r3, [r7, #16]
 800426e:	2b0c      	cmp	r3, #12
 8004270:	d134      	bne.n	80042dc <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004272:	4b1e      	ldr	r3, [pc, #120]	; (80042ec <HAL_RCC_GetSysClockFreq+0x108>)
 8004274:	68db      	ldr	r3, [r3, #12]
 8004276:	f003 0303 	and.w	r3, r3, #3
 800427a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800427c:	68bb      	ldr	r3, [r7, #8]
 800427e:	2b02      	cmp	r3, #2
 8004280:	d003      	beq.n	800428a <HAL_RCC_GetSysClockFreq+0xa6>
 8004282:	68bb      	ldr	r3, [r7, #8]
 8004284:	2b03      	cmp	r3, #3
 8004286:	d003      	beq.n	8004290 <HAL_RCC_GetSysClockFreq+0xac>
 8004288:	e005      	b.n	8004296 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800428a:	4b1a      	ldr	r3, [pc, #104]	; (80042f4 <HAL_RCC_GetSysClockFreq+0x110>)
 800428c:	617b      	str	r3, [r7, #20]
      break;
 800428e:	e005      	b.n	800429c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004290:	4b19      	ldr	r3, [pc, #100]	; (80042f8 <HAL_RCC_GetSysClockFreq+0x114>)
 8004292:	617b      	str	r3, [r7, #20]
      break;
 8004294:	e002      	b.n	800429c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004296:	69fb      	ldr	r3, [r7, #28]
 8004298:	617b      	str	r3, [r7, #20]
      break;
 800429a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800429c:	4b13      	ldr	r3, [pc, #76]	; (80042ec <HAL_RCC_GetSysClockFreq+0x108>)
 800429e:	68db      	ldr	r3, [r3, #12]
 80042a0:	091b      	lsrs	r3, r3, #4
 80042a2:	f003 0307 	and.w	r3, r3, #7
 80042a6:	3301      	adds	r3, #1
 80042a8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80042aa:	4b10      	ldr	r3, [pc, #64]	; (80042ec <HAL_RCC_GetSysClockFreq+0x108>)
 80042ac:	68db      	ldr	r3, [r3, #12]
 80042ae:	0a1b      	lsrs	r3, r3, #8
 80042b0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80042b4:	697a      	ldr	r2, [r7, #20]
 80042b6:	fb03 f202 	mul.w	r2, r3, r2
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80042c0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80042c2:	4b0a      	ldr	r3, [pc, #40]	; (80042ec <HAL_RCC_GetSysClockFreq+0x108>)
 80042c4:	68db      	ldr	r3, [r3, #12]
 80042c6:	0e5b      	lsrs	r3, r3, #25
 80042c8:	f003 0303 	and.w	r3, r3, #3
 80042cc:	3301      	adds	r3, #1
 80042ce:	005b      	lsls	r3, r3, #1
 80042d0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80042d2:	697a      	ldr	r2, [r7, #20]
 80042d4:	683b      	ldr	r3, [r7, #0]
 80042d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80042da:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80042dc:	69bb      	ldr	r3, [r7, #24]
}
 80042de:	4618      	mov	r0, r3
 80042e0:	3724      	adds	r7, #36	; 0x24
 80042e2:	46bd      	mov	sp, r7
 80042e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e8:	4770      	bx	lr
 80042ea:	bf00      	nop
 80042ec:	40021000 	.word	0x40021000
 80042f0:	08009ea8 	.word	0x08009ea8
 80042f4:	00f42400 	.word	0x00f42400
 80042f8:	007a1200 	.word	0x007a1200

080042fc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80042fc:	b480      	push	{r7}
 80042fe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004300:	4b03      	ldr	r3, [pc, #12]	; (8004310 <HAL_RCC_GetHCLKFreq+0x14>)
 8004302:	681b      	ldr	r3, [r3, #0]
}
 8004304:	4618      	mov	r0, r3
 8004306:	46bd      	mov	sp, r7
 8004308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800430c:	4770      	bx	lr
 800430e:	bf00      	nop
 8004310:	20000000 	.word	0x20000000

08004314 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004314:	b580      	push	{r7, lr}
 8004316:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004318:	f7ff fff0 	bl	80042fc <HAL_RCC_GetHCLKFreq>
 800431c:	4602      	mov	r2, r0
 800431e:	4b06      	ldr	r3, [pc, #24]	; (8004338 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004320:	689b      	ldr	r3, [r3, #8]
 8004322:	0a1b      	lsrs	r3, r3, #8
 8004324:	f003 0307 	and.w	r3, r3, #7
 8004328:	4904      	ldr	r1, [pc, #16]	; (800433c <HAL_RCC_GetPCLK1Freq+0x28>)
 800432a:	5ccb      	ldrb	r3, [r1, r3]
 800432c:	f003 031f 	and.w	r3, r3, #31
 8004330:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004334:	4618      	mov	r0, r3
 8004336:	bd80      	pop	{r7, pc}
 8004338:	40021000 	.word	0x40021000
 800433c:	08009ea0 	.word	0x08009ea0

08004340 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004340:	b580      	push	{r7, lr}
 8004342:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004344:	f7ff ffda 	bl	80042fc <HAL_RCC_GetHCLKFreq>
 8004348:	4602      	mov	r2, r0
 800434a:	4b06      	ldr	r3, [pc, #24]	; (8004364 <HAL_RCC_GetPCLK2Freq+0x24>)
 800434c:	689b      	ldr	r3, [r3, #8]
 800434e:	0adb      	lsrs	r3, r3, #11
 8004350:	f003 0307 	and.w	r3, r3, #7
 8004354:	4904      	ldr	r1, [pc, #16]	; (8004368 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004356:	5ccb      	ldrb	r3, [r1, r3]
 8004358:	f003 031f 	and.w	r3, r3, #31
 800435c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004360:	4618      	mov	r0, r3
 8004362:	bd80      	pop	{r7, pc}
 8004364:	40021000 	.word	0x40021000
 8004368:	08009ea0 	.word	0x08009ea0

0800436c <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800436c:	b480      	push	{r7}
 800436e:	b083      	sub	sp, #12
 8004370:	af00      	add	r7, sp, #0
 8004372:	6078      	str	r0, [r7, #4]
 8004374:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	220f      	movs	r2, #15
 800437a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 800437c:	4b12      	ldr	r3, [pc, #72]	; (80043c8 <HAL_RCC_GetClockConfig+0x5c>)
 800437e:	689b      	ldr	r3, [r3, #8]
 8004380:	f003 0203 	and.w	r2, r3, #3
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8004388:	4b0f      	ldr	r3, [pc, #60]	; (80043c8 <HAL_RCC_GetClockConfig+0x5c>)
 800438a:	689b      	ldr	r3, [r3, #8]
 800438c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8004394:	4b0c      	ldr	r3, [pc, #48]	; (80043c8 <HAL_RCC_GetClockConfig+0x5c>)
 8004396:	689b      	ldr	r3, [r3, #8]
 8004398:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 80043a0:	4b09      	ldr	r3, [pc, #36]	; (80043c8 <HAL_RCC_GetClockConfig+0x5c>)
 80043a2:	689b      	ldr	r3, [r3, #8]
 80043a4:	08db      	lsrs	r3, r3, #3
 80043a6:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 80043ae:	4b07      	ldr	r3, [pc, #28]	; (80043cc <HAL_RCC_GetClockConfig+0x60>)
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	f003 0207 	and.w	r2, r3, #7
 80043b6:	683b      	ldr	r3, [r7, #0]
 80043b8:	601a      	str	r2, [r3, #0]
}
 80043ba:	bf00      	nop
 80043bc:	370c      	adds	r7, #12
 80043be:	46bd      	mov	sp, r7
 80043c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c4:	4770      	bx	lr
 80043c6:	bf00      	nop
 80043c8:	40021000 	.word	0x40021000
 80043cc:	40022000 	.word	0x40022000

080043d0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80043d0:	b580      	push	{r7, lr}
 80043d2:	b086      	sub	sp, #24
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80043d8:	2300      	movs	r3, #0
 80043da:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80043dc:	4b2a      	ldr	r3, [pc, #168]	; (8004488 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80043de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d003      	beq.n	80043f0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80043e8:	f7ff f984 	bl	80036f4 <HAL_PWREx_GetVoltageRange>
 80043ec:	6178      	str	r0, [r7, #20]
 80043ee:	e014      	b.n	800441a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80043f0:	4b25      	ldr	r3, [pc, #148]	; (8004488 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80043f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043f4:	4a24      	ldr	r2, [pc, #144]	; (8004488 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80043f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80043fa:	6593      	str	r3, [r2, #88]	; 0x58
 80043fc:	4b22      	ldr	r3, [pc, #136]	; (8004488 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80043fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004400:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004404:	60fb      	str	r3, [r7, #12]
 8004406:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004408:	f7ff f974 	bl	80036f4 <HAL_PWREx_GetVoltageRange>
 800440c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800440e:	4b1e      	ldr	r3, [pc, #120]	; (8004488 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004410:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004412:	4a1d      	ldr	r2, [pc, #116]	; (8004488 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004414:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004418:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800441a:	697b      	ldr	r3, [r7, #20]
 800441c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004420:	d10b      	bne.n	800443a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	2b80      	cmp	r3, #128	; 0x80
 8004426:	d919      	bls.n	800445c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	2ba0      	cmp	r3, #160	; 0xa0
 800442c:	d902      	bls.n	8004434 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800442e:	2302      	movs	r3, #2
 8004430:	613b      	str	r3, [r7, #16]
 8004432:	e013      	b.n	800445c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004434:	2301      	movs	r3, #1
 8004436:	613b      	str	r3, [r7, #16]
 8004438:	e010      	b.n	800445c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	2b80      	cmp	r3, #128	; 0x80
 800443e:	d902      	bls.n	8004446 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004440:	2303      	movs	r3, #3
 8004442:	613b      	str	r3, [r7, #16]
 8004444:	e00a      	b.n	800445c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	2b80      	cmp	r3, #128	; 0x80
 800444a:	d102      	bne.n	8004452 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800444c:	2302      	movs	r3, #2
 800444e:	613b      	str	r3, [r7, #16]
 8004450:	e004      	b.n	800445c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	2b70      	cmp	r3, #112	; 0x70
 8004456:	d101      	bne.n	800445c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004458:	2301      	movs	r3, #1
 800445a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800445c:	4b0b      	ldr	r3, [pc, #44]	; (800448c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	f023 0207 	bic.w	r2, r3, #7
 8004464:	4909      	ldr	r1, [pc, #36]	; (800448c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004466:	693b      	ldr	r3, [r7, #16]
 8004468:	4313      	orrs	r3, r2
 800446a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800446c:	4b07      	ldr	r3, [pc, #28]	; (800448c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	f003 0307 	and.w	r3, r3, #7
 8004474:	693a      	ldr	r2, [r7, #16]
 8004476:	429a      	cmp	r2, r3
 8004478:	d001      	beq.n	800447e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800447a:	2301      	movs	r3, #1
 800447c:	e000      	b.n	8004480 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800447e:	2300      	movs	r3, #0
}
 8004480:	4618      	mov	r0, r3
 8004482:	3718      	adds	r7, #24
 8004484:	46bd      	mov	sp, r7
 8004486:	bd80      	pop	{r7, pc}
 8004488:	40021000 	.word	0x40021000
 800448c:	40022000 	.word	0x40022000

08004490 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004490:	b580      	push	{r7, lr}
 8004492:	b086      	sub	sp, #24
 8004494:	af00      	add	r7, sp, #0
 8004496:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004498:	2300      	movs	r3, #0
 800449a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800449c:	2300      	movs	r3, #0
 800449e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d031      	beq.n	8004510 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044b0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80044b4:	d01a      	beq.n	80044ec <HAL_RCCEx_PeriphCLKConfig+0x5c>
 80044b6:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80044ba:	d814      	bhi.n	80044e6 <HAL_RCCEx_PeriphCLKConfig+0x56>
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d009      	beq.n	80044d4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80044c0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80044c4:	d10f      	bne.n	80044e6 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 80044c6:	4b5d      	ldr	r3, [pc, #372]	; (800463c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80044c8:	68db      	ldr	r3, [r3, #12]
 80044ca:	4a5c      	ldr	r2, [pc, #368]	; (800463c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80044cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80044d0:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80044d2:	e00c      	b.n	80044ee <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	3304      	adds	r3, #4
 80044d8:	2100      	movs	r1, #0
 80044da:	4618      	mov	r0, r3
 80044dc:	f000 f9de 	bl	800489c <RCCEx_PLLSAI1_Config>
 80044e0:	4603      	mov	r3, r0
 80044e2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80044e4:	e003      	b.n	80044ee <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80044e6:	2301      	movs	r3, #1
 80044e8:	74fb      	strb	r3, [r7, #19]
      break;
 80044ea:	e000      	b.n	80044ee <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 80044ec:	bf00      	nop
    }

    if(ret == HAL_OK)
 80044ee:	7cfb      	ldrb	r3, [r7, #19]
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d10b      	bne.n	800450c <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80044f4:	4b51      	ldr	r3, [pc, #324]	; (800463c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80044f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044fa:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004502:	494e      	ldr	r1, [pc, #312]	; (800463c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004504:	4313      	orrs	r3, r2
 8004506:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800450a:	e001      	b.n	8004510 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800450c:	7cfb      	ldrb	r3, [r7, #19]
 800450e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004518:	2b00      	cmp	r3, #0
 800451a:	f000 809e 	beq.w	800465a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 800451e:	2300      	movs	r3, #0
 8004520:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004522:	4b46      	ldr	r3, [pc, #280]	; (800463c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004524:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004526:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800452a:	2b00      	cmp	r3, #0
 800452c:	d101      	bne.n	8004532 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 800452e:	2301      	movs	r3, #1
 8004530:	e000      	b.n	8004534 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8004532:	2300      	movs	r3, #0
 8004534:	2b00      	cmp	r3, #0
 8004536:	d00d      	beq.n	8004554 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004538:	4b40      	ldr	r3, [pc, #256]	; (800463c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800453a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800453c:	4a3f      	ldr	r2, [pc, #252]	; (800463c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800453e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004542:	6593      	str	r3, [r2, #88]	; 0x58
 8004544:	4b3d      	ldr	r3, [pc, #244]	; (800463c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004546:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004548:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800454c:	60bb      	str	r3, [r7, #8]
 800454e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004550:	2301      	movs	r3, #1
 8004552:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004554:	4b3a      	ldr	r3, [pc, #232]	; (8004640 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	4a39      	ldr	r2, [pc, #228]	; (8004640 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800455a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800455e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004560:	f7fe fbd2 	bl	8002d08 <HAL_GetTick>
 8004564:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004566:	e009      	b.n	800457c <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004568:	f7fe fbce 	bl	8002d08 <HAL_GetTick>
 800456c:	4602      	mov	r2, r0
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	1ad3      	subs	r3, r2, r3
 8004572:	2b02      	cmp	r3, #2
 8004574:	d902      	bls.n	800457c <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8004576:	2303      	movs	r3, #3
 8004578:	74fb      	strb	r3, [r7, #19]
        break;
 800457a:	e005      	b.n	8004588 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800457c:	4b30      	ldr	r3, [pc, #192]	; (8004640 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004584:	2b00      	cmp	r3, #0
 8004586:	d0ef      	beq.n	8004568 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8004588:	7cfb      	ldrb	r3, [r7, #19]
 800458a:	2b00      	cmp	r3, #0
 800458c:	d15a      	bne.n	8004644 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800458e:	4b2b      	ldr	r3, [pc, #172]	; (800463c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004590:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004594:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004598:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800459a:	697b      	ldr	r3, [r7, #20]
 800459c:	2b00      	cmp	r3, #0
 800459e:	d01e      	beq.n	80045de <HAL_RCCEx_PeriphCLKConfig+0x14e>
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80045a4:	697a      	ldr	r2, [r7, #20]
 80045a6:	429a      	cmp	r2, r3
 80045a8:	d019      	beq.n	80045de <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80045aa:	4b24      	ldr	r3, [pc, #144]	; (800463c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80045ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80045b4:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80045b6:	4b21      	ldr	r3, [pc, #132]	; (800463c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80045b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045bc:	4a1f      	ldr	r2, [pc, #124]	; (800463c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80045be:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80045c2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80045c6:	4b1d      	ldr	r3, [pc, #116]	; (800463c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80045c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045cc:	4a1b      	ldr	r2, [pc, #108]	; (800463c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80045ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80045d2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80045d6:	4a19      	ldr	r2, [pc, #100]	; (800463c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80045d8:	697b      	ldr	r3, [r7, #20]
 80045da:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80045de:	697b      	ldr	r3, [r7, #20]
 80045e0:	f003 0301 	and.w	r3, r3, #1
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d016      	beq.n	8004616 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045e8:	f7fe fb8e 	bl	8002d08 <HAL_GetTick>
 80045ec:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80045ee:	e00b      	b.n	8004608 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80045f0:	f7fe fb8a 	bl	8002d08 <HAL_GetTick>
 80045f4:	4602      	mov	r2, r0
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	1ad3      	subs	r3, r2, r3
 80045fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80045fe:	4293      	cmp	r3, r2
 8004600:	d902      	bls.n	8004608 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8004602:	2303      	movs	r3, #3
 8004604:	74fb      	strb	r3, [r7, #19]
            break;
 8004606:	e006      	b.n	8004616 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004608:	4b0c      	ldr	r3, [pc, #48]	; (800463c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800460a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800460e:	f003 0302 	and.w	r3, r3, #2
 8004612:	2b00      	cmp	r3, #0
 8004614:	d0ec      	beq.n	80045f0 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8004616:	7cfb      	ldrb	r3, [r7, #19]
 8004618:	2b00      	cmp	r3, #0
 800461a:	d10b      	bne.n	8004634 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800461c:	4b07      	ldr	r3, [pc, #28]	; (800463c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800461e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004622:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800462a:	4904      	ldr	r1, [pc, #16]	; (800463c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800462c:	4313      	orrs	r3, r2
 800462e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004632:	e009      	b.n	8004648 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004634:	7cfb      	ldrb	r3, [r7, #19]
 8004636:	74bb      	strb	r3, [r7, #18]
 8004638:	e006      	b.n	8004648 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 800463a:	bf00      	nop
 800463c:	40021000 	.word	0x40021000
 8004640:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004644:	7cfb      	ldrb	r3, [r7, #19]
 8004646:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004648:	7c7b      	ldrb	r3, [r7, #17]
 800464a:	2b01      	cmp	r3, #1
 800464c:	d105      	bne.n	800465a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800464e:	4b8a      	ldr	r3, [pc, #552]	; (8004878 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004650:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004652:	4a89      	ldr	r2, [pc, #548]	; (8004878 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004654:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004658:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	f003 0301 	and.w	r3, r3, #1
 8004662:	2b00      	cmp	r3, #0
 8004664:	d00a      	beq.n	800467c <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004666:	4b84      	ldr	r3, [pc, #528]	; (8004878 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004668:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800466c:	f023 0203 	bic.w	r2, r3, #3
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	6a1b      	ldr	r3, [r3, #32]
 8004674:	4980      	ldr	r1, [pc, #512]	; (8004878 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004676:	4313      	orrs	r3, r2
 8004678:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	f003 0302 	and.w	r3, r3, #2
 8004684:	2b00      	cmp	r3, #0
 8004686:	d00a      	beq.n	800469e <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004688:	4b7b      	ldr	r3, [pc, #492]	; (8004878 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800468a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800468e:	f023 020c 	bic.w	r2, r3, #12
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004696:	4978      	ldr	r1, [pc, #480]	; (8004878 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004698:	4313      	orrs	r3, r2
 800469a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	f003 0320 	and.w	r3, r3, #32
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d00a      	beq.n	80046c0 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80046aa:	4b73      	ldr	r3, [pc, #460]	; (8004878 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80046ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046b0:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046b8:	496f      	ldr	r1, [pc, #444]	; (8004878 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80046ba:	4313      	orrs	r3, r2
 80046bc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d00a      	beq.n	80046e2 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80046cc:	4b6a      	ldr	r3, [pc, #424]	; (8004878 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80046ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046d2:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046da:	4967      	ldr	r1, [pc, #412]	; (8004878 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80046dc:	4313      	orrs	r3, r2
 80046de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d00a      	beq.n	8004704 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80046ee:	4b62      	ldr	r3, [pc, #392]	; (8004878 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80046f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046f4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046fc:	495e      	ldr	r1, [pc, #376]	; (8004878 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80046fe:	4313      	orrs	r3, r2
 8004700:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800470c:	2b00      	cmp	r3, #0
 800470e:	d00a      	beq.n	8004726 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004710:	4b59      	ldr	r3, [pc, #356]	; (8004878 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004712:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004716:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800471e:	4956      	ldr	r1, [pc, #344]	; (8004878 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004720:	4313      	orrs	r3, r2
 8004722:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800472e:	2b00      	cmp	r3, #0
 8004730:	d00a      	beq.n	8004748 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004732:	4b51      	ldr	r3, [pc, #324]	; (8004878 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004734:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004738:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004740:	494d      	ldr	r1, [pc, #308]	; (8004878 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004742:	4313      	orrs	r3, r2
 8004744:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004750:	2b00      	cmp	r3, #0
 8004752:	d028      	beq.n	80047a6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004754:	4b48      	ldr	r3, [pc, #288]	; (8004878 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004756:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800475a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004762:	4945      	ldr	r1, [pc, #276]	; (8004878 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004764:	4313      	orrs	r3, r2
 8004766:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800476e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004772:	d106      	bne.n	8004782 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004774:	4b40      	ldr	r3, [pc, #256]	; (8004878 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004776:	68db      	ldr	r3, [r3, #12]
 8004778:	4a3f      	ldr	r2, [pc, #252]	; (8004878 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800477a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800477e:	60d3      	str	r3, [r2, #12]
 8004780:	e011      	b.n	80047a6 <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004786:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800478a:	d10c      	bne.n	80047a6 <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	3304      	adds	r3, #4
 8004790:	2101      	movs	r1, #1
 8004792:	4618      	mov	r0, r3
 8004794:	f000 f882 	bl	800489c <RCCEx_PLLSAI1_Config>
 8004798:	4603      	mov	r3, r0
 800479a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800479c:	7cfb      	ldrb	r3, [r7, #19]
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d001      	beq.n	80047a6 <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 80047a2:	7cfb      	ldrb	r3, [r7, #19]
 80047a4:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d028      	beq.n	8004804 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80047b2:	4b31      	ldr	r3, [pc, #196]	; (8004878 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80047b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047b8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047c0:	492d      	ldr	r1, [pc, #180]	; (8004878 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80047c2:	4313      	orrs	r3, r2
 80047c4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047cc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80047d0:	d106      	bne.n	80047e0 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80047d2:	4b29      	ldr	r3, [pc, #164]	; (8004878 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80047d4:	68db      	ldr	r3, [r3, #12]
 80047d6:	4a28      	ldr	r2, [pc, #160]	; (8004878 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80047d8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80047dc:	60d3      	str	r3, [r2, #12]
 80047de:	e011      	b.n	8004804 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047e4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80047e8:	d10c      	bne.n	8004804 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	3304      	adds	r3, #4
 80047ee:	2101      	movs	r1, #1
 80047f0:	4618      	mov	r0, r3
 80047f2:	f000 f853 	bl	800489c <RCCEx_PLLSAI1_Config>
 80047f6:	4603      	mov	r3, r0
 80047f8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80047fa:	7cfb      	ldrb	r3, [r7, #19]
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d001      	beq.n	8004804 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 8004800:	7cfb      	ldrb	r3, [r7, #19]
 8004802:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800480c:	2b00      	cmp	r3, #0
 800480e:	d01c      	beq.n	800484a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004810:	4b19      	ldr	r3, [pc, #100]	; (8004878 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004812:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004816:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800481e:	4916      	ldr	r1, [pc, #88]	; (8004878 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004820:	4313      	orrs	r3, r2
 8004822:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800482a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800482e:	d10c      	bne.n	800484a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	3304      	adds	r3, #4
 8004834:	2102      	movs	r1, #2
 8004836:	4618      	mov	r0, r3
 8004838:	f000 f830 	bl	800489c <RCCEx_PLLSAI1_Config>
 800483c:	4603      	mov	r3, r0
 800483e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004840:	7cfb      	ldrb	r3, [r7, #19]
 8004842:	2b00      	cmp	r3, #0
 8004844:	d001      	beq.n	800484a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 8004846:	7cfb      	ldrb	r3, [r7, #19]
 8004848:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004852:	2b00      	cmp	r3, #0
 8004854:	d00a      	beq.n	800486c <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004856:	4b08      	ldr	r3, [pc, #32]	; (8004878 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004858:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800485c:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004864:	4904      	ldr	r1, [pc, #16]	; (8004878 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004866:	4313      	orrs	r3, r2
 8004868:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800486c:	7cbb      	ldrb	r3, [r7, #18]
}
 800486e:	4618      	mov	r0, r3
 8004870:	3718      	adds	r7, #24
 8004872:	46bd      	mov	sp, r7
 8004874:	bd80      	pop	{r7, pc}
 8004876:	bf00      	nop
 8004878:	40021000 	.word	0x40021000

0800487c <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 800487c:	b480      	push	{r7}
 800487e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8004880:	4b05      	ldr	r3, [pc, #20]	; (8004898 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	4a04      	ldr	r2, [pc, #16]	; (8004898 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8004886:	f043 0304 	orr.w	r3, r3, #4
 800488a:	6013      	str	r3, [r2, #0]
}
 800488c:	bf00      	nop
 800488e:	46bd      	mov	sp, r7
 8004890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004894:	4770      	bx	lr
 8004896:	bf00      	nop
 8004898:	40021000 	.word	0x40021000

0800489c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800489c:	b580      	push	{r7, lr}
 800489e:	b084      	sub	sp, #16
 80048a0:	af00      	add	r7, sp, #0
 80048a2:	6078      	str	r0, [r7, #4]
 80048a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80048a6:	2300      	movs	r3, #0
 80048a8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80048aa:	4b74      	ldr	r3, [pc, #464]	; (8004a7c <RCCEx_PLLSAI1_Config+0x1e0>)
 80048ac:	68db      	ldr	r3, [r3, #12]
 80048ae:	f003 0303 	and.w	r3, r3, #3
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d018      	beq.n	80048e8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80048b6:	4b71      	ldr	r3, [pc, #452]	; (8004a7c <RCCEx_PLLSAI1_Config+0x1e0>)
 80048b8:	68db      	ldr	r3, [r3, #12]
 80048ba:	f003 0203 	and.w	r2, r3, #3
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	429a      	cmp	r2, r3
 80048c4:	d10d      	bne.n	80048e2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
       ||
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d009      	beq.n	80048e2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80048ce:	4b6b      	ldr	r3, [pc, #428]	; (8004a7c <RCCEx_PLLSAI1_Config+0x1e0>)
 80048d0:	68db      	ldr	r3, [r3, #12]
 80048d2:	091b      	lsrs	r3, r3, #4
 80048d4:	f003 0307 	and.w	r3, r3, #7
 80048d8:	1c5a      	adds	r2, r3, #1
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	685b      	ldr	r3, [r3, #4]
       ||
 80048de:	429a      	cmp	r2, r3
 80048e0:	d047      	beq.n	8004972 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80048e2:	2301      	movs	r3, #1
 80048e4:	73fb      	strb	r3, [r7, #15]
 80048e6:	e044      	b.n	8004972 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	2b03      	cmp	r3, #3
 80048ee:	d018      	beq.n	8004922 <RCCEx_PLLSAI1_Config+0x86>
 80048f0:	2b03      	cmp	r3, #3
 80048f2:	d825      	bhi.n	8004940 <RCCEx_PLLSAI1_Config+0xa4>
 80048f4:	2b01      	cmp	r3, #1
 80048f6:	d002      	beq.n	80048fe <RCCEx_PLLSAI1_Config+0x62>
 80048f8:	2b02      	cmp	r3, #2
 80048fa:	d009      	beq.n	8004910 <RCCEx_PLLSAI1_Config+0x74>
 80048fc:	e020      	b.n	8004940 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80048fe:	4b5f      	ldr	r3, [pc, #380]	; (8004a7c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	f003 0302 	and.w	r3, r3, #2
 8004906:	2b00      	cmp	r3, #0
 8004908:	d11d      	bne.n	8004946 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800490a:	2301      	movs	r3, #1
 800490c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800490e:	e01a      	b.n	8004946 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004910:	4b5a      	ldr	r3, [pc, #360]	; (8004a7c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004918:	2b00      	cmp	r3, #0
 800491a:	d116      	bne.n	800494a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800491c:	2301      	movs	r3, #1
 800491e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004920:	e013      	b.n	800494a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004922:	4b56      	ldr	r3, [pc, #344]	; (8004a7c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800492a:	2b00      	cmp	r3, #0
 800492c:	d10f      	bne.n	800494e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800492e:	4b53      	ldr	r3, [pc, #332]	; (8004a7c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004936:	2b00      	cmp	r3, #0
 8004938:	d109      	bne.n	800494e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800493a:	2301      	movs	r3, #1
 800493c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800493e:	e006      	b.n	800494e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004940:	2301      	movs	r3, #1
 8004942:	73fb      	strb	r3, [r7, #15]
      break;
 8004944:	e004      	b.n	8004950 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004946:	bf00      	nop
 8004948:	e002      	b.n	8004950 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800494a:	bf00      	nop
 800494c:	e000      	b.n	8004950 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800494e:	bf00      	nop
    }

    if(status == HAL_OK)
 8004950:	7bfb      	ldrb	r3, [r7, #15]
 8004952:	2b00      	cmp	r3, #0
 8004954:	d10d      	bne.n	8004972 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004956:	4b49      	ldr	r3, [pc, #292]	; (8004a7c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004958:	68db      	ldr	r3, [r3, #12]
 800495a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	6819      	ldr	r1, [r3, #0]
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	685b      	ldr	r3, [r3, #4]
 8004966:	3b01      	subs	r3, #1
 8004968:	011b      	lsls	r3, r3, #4
 800496a:	430b      	orrs	r3, r1
 800496c:	4943      	ldr	r1, [pc, #268]	; (8004a7c <RCCEx_PLLSAI1_Config+0x1e0>)
 800496e:	4313      	orrs	r3, r2
 8004970:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004972:	7bfb      	ldrb	r3, [r7, #15]
 8004974:	2b00      	cmp	r3, #0
 8004976:	d17c      	bne.n	8004a72 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004978:	4b40      	ldr	r3, [pc, #256]	; (8004a7c <RCCEx_PLLSAI1_Config+0x1e0>)
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	4a3f      	ldr	r2, [pc, #252]	; (8004a7c <RCCEx_PLLSAI1_Config+0x1e0>)
 800497e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004982:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004984:	f7fe f9c0 	bl	8002d08 <HAL_GetTick>
 8004988:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800498a:	e009      	b.n	80049a0 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800498c:	f7fe f9bc 	bl	8002d08 <HAL_GetTick>
 8004990:	4602      	mov	r2, r0
 8004992:	68bb      	ldr	r3, [r7, #8]
 8004994:	1ad3      	subs	r3, r2, r3
 8004996:	2b02      	cmp	r3, #2
 8004998:	d902      	bls.n	80049a0 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800499a:	2303      	movs	r3, #3
 800499c:	73fb      	strb	r3, [r7, #15]
        break;
 800499e:	e005      	b.n	80049ac <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80049a0:	4b36      	ldr	r3, [pc, #216]	; (8004a7c <RCCEx_PLLSAI1_Config+0x1e0>)
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d1ef      	bne.n	800498c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80049ac:	7bfb      	ldrb	r3, [r7, #15]
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d15f      	bne.n	8004a72 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80049b2:	683b      	ldr	r3, [r7, #0]
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d110      	bne.n	80049da <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80049b8:	4b30      	ldr	r3, [pc, #192]	; (8004a7c <RCCEx_PLLSAI1_Config+0x1e0>)
 80049ba:	691b      	ldr	r3, [r3, #16]
 80049bc:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 80049c0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80049c4:	687a      	ldr	r2, [r7, #4]
 80049c6:	6892      	ldr	r2, [r2, #8]
 80049c8:	0211      	lsls	r1, r2, #8
 80049ca:	687a      	ldr	r2, [r7, #4]
 80049cc:	68d2      	ldr	r2, [r2, #12]
 80049ce:	06d2      	lsls	r2, r2, #27
 80049d0:	430a      	orrs	r2, r1
 80049d2:	492a      	ldr	r1, [pc, #168]	; (8004a7c <RCCEx_PLLSAI1_Config+0x1e0>)
 80049d4:	4313      	orrs	r3, r2
 80049d6:	610b      	str	r3, [r1, #16]
 80049d8:	e027      	b.n	8004a2a <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80049da:	683b      	ldr	r3, [r7, #0]
 80049dc:	2b01      	cmp	r3, #1
 80049de:	d112      	bne.n	8004a06 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80049e0:	4b26      	ldr	r3, [pc, #152]	; (8004a7c <RCCEx_PLLSAI1_Config+0x1e0>)
 80049e2:	691b      	ldr	r3, [r3, #16]
 80049e4:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80049e8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80049ec:	687a      	ldr	r2, [r7, #4]
 80049ee:	6892      	ldr	r2, [r2, #8]
 80049f0:	0211      	lsls	r1, r2, #8
 80049f2:	687a      	ldr	r2, [r7, #4]
 80049f4:	6912      	ldr	r2, [r2, #16]
 80049f6:	0852      	lsrs	r2, r2, #1
 80049f8:	3a01      	subs	r2, #1
 80049fa:	0552      	lsls	r2, r2, #21
 80049fc:	430a      	orrs	r2, r1
 80049fe:	491f      	ldr	r1, [pc, #124]	; (8004a7c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004a00:	4313      	orrs	r3, r2
 8004a02:	610b      	str	r3, [r1, #16]
 8004a04:	e011      	b.n	8004a2a <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004a06:	4b1d      	ldr	r3, [pc, #116]	; (8004a7c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004a08:	691b      	ldr	r3, [r3, #16]
 8004a0a:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004a0e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004a12:	687a      	ldr	r2, [r7, #4]
 8004a14:	6892      	ldr	r2, [r2, #8]
 8004a16:	0211      	lsls	r1, r2, #8
 8004a18:	687a      	ldr	r2, [r7, #4]
 8004a1a:	6952      	ldr	r2, [r2, #20]
 8004a1c:	0852      	lsrs	r2, r2, #1
 8004a1e:	3a01      	subs	r2, #1
 8004a20:	0652      	lsls	r2, r2, #25
 8004a22:	430a      	orrs	r2, r1
 8004a24:	4915      	ldr	r1, [pc, #84]	; (8004a7c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004a26:	4313      	orrs	r3, r2
 8004a28:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004a2a:	4b14      	ldr	r3, [pc, #80]	; (8004a7c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	4a13      	ldr	r2, [pc, #76]	; (8004a7c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004a30:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004a34:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a36:	f7fe f967 	bl	8002d08 <HAL_GetTick>
 8004a3a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004a3c:	e009      	b.n	8004a52 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004a3e:	f7fe f963 	bl	8002d08 <HAL_GetTick>
 8004a42:	4602      	mov	r2, r0
 8004a44:	68bb      	ldr	r3, [r7, #8]
 8004a46:	1ad3      	subs	r3, r2, r3
 8004a48:	2b02      	cmp	r3, #2
 8004a4a:	d902      	bls.n	8004a52 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8004a4c:	2303      	movs	r3, #3
 8004a4e:	73fb      	strb	r3, [r7, #15]
          break;
 8004a50:	e005      	b.n	8004a5e <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004a52:	4b0a      	ldr	r3, [pc, #40]	; (8004a7c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d0ef      	beq.n	8004a3e <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8004a5e:	7bfb      	ldrb	r3, [r7, #15]
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d106      	bne.n	8004a72 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004a64:	4b05      	ldr	r3, [pc, #20]	; (8004a7c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004a66:	691a      	ldr	r2, [r3, #16]
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	699b      	ldr	r3, [r3, #24]
 8004a6c:	4903      	ldr	r1, [pc, #12]	; (8004a7c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004a6e:	4313      	orrs	r3, r2
 8004a70:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004a72:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a74:	4618      	mov	r0, r3
 8004a76:	3710      	adds	r7, #16
 8004a78:	46bd      	mov	sp, r7
 8004a7a:	bd80      	pop	{r7, pc}
 8004a7c:	40021000 	.word	0x40021000

08004a80 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004a80:	b580      	push	{r7, lr}
 8004a82:	b082      	sub	sp, #8
 8004a84:	af00      	add	r7, sp, #0
 8004a86:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d101      	bne.n	8004a92 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004a8e:	2301      	movs	r3, #1
 8004a90:	e049      	b.n	8004b26 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a98:	b2db      	uxtb	r3, r3
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d106      	bne.n	8004aac <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	2200      	movs	r2, #0
 8004aa2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004aa6:	6878      	ldr	r0, [r7, #4]
 8004aa8:	f000 f841 	bl	8004b2e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	2202      	movs	r2, #2
 8004ab0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681a      	ldr	r2, [r3, #0]
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	3304      	adds	r3, #4
 8004abc:	4619      	mov	r1, r3
 8004abe:	4610      	mov	r0, r2
 8004ac0:	f000 f9dc 	bl	8004e7c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	2201      	movs	r2, #1
 8004ac8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	2201      	movs	r2, #1
 8004ad0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	2201      	movs	r2, #1
 8004ad8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	2201      	movs	r2, #1
 8004ae0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	2201      	movs	r2, #1
 8004ae8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	2201      	movs	r2, #1
 8004af0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	2201      	movs	r2, #1
 8004af8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	2201      	movs	r2, #1
 8004b00:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	2201      	movs	r2, #1
 8004b08:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	2201      	movs	r2, #1
 8004b10:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	2201      	movs	r2, #1
 8004b18:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	2201      	movs	r2, #1
 8004b20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004b24:	2300      	movs	r3, #0
}
 8004b26:	4618      	mov	r0, r3
 8004b28:	3708      	adds	r7, #8
 8004b2a:	46bd      	mov	sp, r7
 8004b2c:	bd80      	pop	{r7, pc}

08004b2e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004b2e:	b480      	push	{r7}
 8004b30:	b083      	sub	sp, #12
 8004b32:	af00      	add	r7, sp, #0
 8004b34:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004b36:	bf00      	nop
 8004b38:	370c      	adds	r7, #12
 8004b3a:	46bd      	mov	sp, r7
 8004b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b40:	4770      	bx	lr
	...

08004b44 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004b44:	b480      	push	{r7}
 8004b46:	b085      	sub	sp, #20
 8004b48:	af00      	add	r7, sp, #0
 8004b4a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b52:	b2db      	uxtb	r3, r3
 8004b54:	2b01      	cmp	r3, #1
 8004b56:	d001      	beq.n	8004b5c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004b58:	2301      	movs	r3, #1
 8004b5a:	e03b      	b.n	8004bd4 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	2202      	movs	r2, #2
 8004b60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	68da      	ldr	r2, [r3, #12]
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	f042 0201 	orr.w	r2, r2, #1
 8004b72:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	4a19      	ldr	r2, [pc, #100]	; (8004be0 <HAL_TIM_Base_Start_IT+0x9c>)
 8004b7a:	4293      	cmp	r3, r2
 8004b7c:	d009      	beq.n	8004b92 <HAL_TIM_Base_Start_IT+0x4e>
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b86:	d004      	beq.n	8004b92 <HAL_TIM_Base_Start_IT+0x4e>
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	4a15      	ldr	r2, [pc, #84]	; (8004be4 <HAL_TIM_Base_Start_IT+0xa0>)
 8004b8e:	4293      	cmp	r3, r2
 8004b90:	d115      	bne.n	8004bbe <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	689a      	ldr	r2, [r3, #8]
 8004b98:	4b13      	ldr	r3, [pc, #76]	; (8004be8 <HAL_TIM_Base_Start_IT+0xa4>)
 8004b9a:	4013      	ands	r3, r2
 8004b9c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	2b06      	cmp	r3, #6
 8004ba2:	d015      	beq.n	8004bd0 <HAL_TIM_Base_Start_IT+0x8c>
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004baa:	d011      	beq.n	8004bd0 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	681a      	ldr	r2, [r3, #0]
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	f042 0201 	orr.w	r2, r2, #1
 8004bba:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004bbc:	e008      	b.n	8004bd0 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	681a      	ldr	r2, [r3, #0]
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	f042 0201 	orr.w	r2, r2, #1
 8004bcc:	601a      	str	r2, [r3, #0]
 8004bce:	e000      	b.n	8004bd2 <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004bd0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004bd2:	2300      	movs	r3, #0
}
 8004bd4:	4618      	mov	r0, r3
 8004bd6:	3714      	adds	r7, #20
 8004bd8:	46bd      	mov	sp, r7
 8004bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bde:	4770      	bx	lr
 8004be0:	40012c00 	.word	0x40012c00
 8004be4:	40014000 	.word	0x40014000
 8004be8:	00010007 	.word	0x00010007

08004bec <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004bec:	b580      	push	{r7, lr}
 8004bee:	b082      	sub	sp, #8
 8004bf0:	af00      	add	r7, sp, #0
 8004bf2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	691b      	ldr	r3, [r3, #16]
 8004bfa:	f003 0302 	and.w	r3, r3, #2
 8004bfe:	2b02      	cmp	r3, #2
 8004c00:	d122      	bne.n	8004c48 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	68db      	ldr	r3, [r3, #12]
 8004c08:	f003 0302 	and.w	r3, r3, #2
 8004c0c:	2b02      	cmp	r3, #2
 8004c0e:	d11b      	bne.n	8004c48 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	f06f 0202 	mvn.w	r2, #2
 8004c18:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	2201      	movs	r2, #1
 8004c1e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	699b      	ldr	r3, [r3, #24]
 8004c26:	f003 0303 	and.w	r3, r3, #3
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d003      	beq.n	8004c36 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004c2e:	6878      	ldr	r0, [r7, #4]
 8004c30:	f000 f905 	bl	8004e3e <HAL_TIM_IC_CaptureCallback>
 8004c34:	e005      	b.n	8004c42 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c36:	6878      	ldr	r0, [r7, #4]
 8004c38:	f000 f8f7 	bl	8004e2a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c3c:	6878      	ldr	r0, [r7, #4]
 8004c3e:	f000 f908 	bl	8004e52 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	2200      	movs	r2, #0
 8004c46:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	691b      	ldr	r3, [r3, #16]
 8004c4e:	f003 0304 	and.w	r3, r3, #4
 8004c52:	2b04      	cmp	r3, #4
 8004c54:	d122      	bne.n	8004c9c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	68db      	ldr	r3, [r3, #12]
 8004c5c:	f003 0304 	and.w	r3, r3, #4
 8004c60:	2b04      	cmp	r3, #4
 8004c62:	d11b      	bne.n	8004c9c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	f06f 0204 	mvn.w	r2, #4
 8004c6c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	2202      	movs	r2, #2
 8004c72:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	699b      	ldr	r3, [r3, #24]
 8004c7a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d003      	beq.n	8004c8a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c82:	6878      	ldr	r0, [r7, #4]
 8004c84:	f000 f8db 	bl	8004e3e <HAL_TIM_IC_CaptureCallback>
 8004c88:	e005      	b.n	8004c96 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c8a:	6878      	ldr	r0, [r7, #4]
 8004c8c:	f000 f8cd 	bl	8004e2a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c90:	6878      	ldr	r0, [r7, #4]
 8004c92:	f000 f8de 	bl	8004e52 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	2200      	movs	r2, #0
 8004c9a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	691b      	ldr	r3, [r3, #16]
 8004ca2:	f003 0308 	and.w	r3, r3, #8
 8004ca6:	2b08      	cmp	r3, #8
 8004ca8:	d122      	bne.n	8004cf0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	68db      	ldr	r3, [r3, #12]
 8004cb0:	f003 0308 	and.w	r3, r3, #8
 8004cb4:	2b08      	cmp	r3, #8
 8004cb6:	d11b      	bne.n	8004cf0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	f06f 0208 	mvn.w	r2, #8
 8004cc0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	2204      	movs	r2, #4
 8004cc6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	69db      	ldr	r3, [r3, #28]
 8004cce:	f003 0303 	and.w	r3, r3, #3
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d003      	beq.n	8004cde <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004cd6:	6878      	ldr	r0, [r7, #4]
 8004cd8:	f000 f8b1 	bl	8004e3e <HAL_TIM_IC_CaptureCallback>
 8004cdc:	e005      	b.n	8004cea <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004cde:	6878      	ldr	r0, [r7, #4]
 8004ce0:	f000 f8a3 	bl	8004e2a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ce4:	6878      	ldr	r0, [r7, #4]
 8004ce6:	f000 f8b4 	bl	8004e52 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	2200      	movs	r2, #0
 8004cee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	691b      	ldr	r3, [r3, #16]
 8004cf6:	f003 0310 	and.w	r3, r3, #16
 8004cfa:	2b10      	cmp	r3, #16
 8004cfc:	d122      	bne.n	8004d44 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	68db      	ldr	r3, [r3, #12]
 8004d04:	f003 0310 	and.w	r3, r3, #16
 8004d08:	2b10      	cmp	r3, #16
 8004d0a:	d11b      	bne.n	8004d44 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	f06f 0210 	mvn.w	r2, #16
 8004d14:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	2208      	movs	r2, #8
 8004d1a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	69db      	ldr	r3, [r3, #28]
 8004d22:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d003      	beq.n	8004d32 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004d2a:	6878      	ldr	r0, [r7, #4]
 8004d2c:	f000 f887 	bl	8004e3e <HAL_TIM_IC_CaptureCallback>
 8004d30:	e005      	b.n	8004d3e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d32:	6878      	ldr	r0, [r7, #4]
 8004d34:	f000 f879 	bl	8004e2a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d38:	6878      	ldr	r0, [r7, #4]
 8004d3a:	f000 f88a 	bl	8004e52 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	2200      	movs	r2, #0
 8004d42:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	691b      	ldr	r3, [r3, #16]
 8004d4a:	f003 0301 	and.w	r3, r3, #1
 8004d4e:	2b01      	cmp	r3, #1
 8004d50:	d10e      	bne.n	8004d70 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	68db      	ldr	r3, [r3, #12]
 8004d58:	f003 0301 	and.w	r3, r3, #1
 8004d5c:	2b01      	cmp	r3, #1
 8004d5e:	d107      	bne.n	8004d70 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	f06f 0201 	mvn.w	r2, #1
 8004d68:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004d6a:	6878      	ldr	r0, [r7, #4]
 8004d6c:	f7fc f932 	bl	8000fd4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	691b      	ldr	r3, [r3, #16]
 8004d76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d7a:	2b80      	cmp	r3, #128	; 0x80
 8004d7c:	d10e      	bne.n	8004d9c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	68db      	ldr	r3, [r3, #12]
 8004d84:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d88:	2b80      	cmp	r3, #128	; 0x80
 8004d8a:	d107      	bne.n	8004d9c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004d94:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004d96:	6878      	ldr	r0, [r7, #4]
 8004d98:	f000 f8de 	bl	8004f58 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	691b      	ldr	r3, [r3, #16]
 8004da2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004da6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004daa:	d10e      	bne.n	8004dca <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	68db      	ldr	r3, [r3, #12]
 8004db2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004db6:	2b80      	cmp	r3, #128	; 0x80
 8004db8:	d107      	bne.n	8004dca <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004dc2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004dc4:	6878      	ldr	r0, [r7, #4]
 8004dc6:	f000 f8d1 	bl	8004f6c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	691b      	ldr	r3, [r3, #16]
 8004dd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004dd4:	2b40      	cmp	r3, #64	; 0x40
 8004dd6:	d10e      	bne.n	8004df6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	68db      	ldr	r3, [r3, #12]
 8004dde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004de2:	2b40      	cmp	r3, #64	; 0x40
 8004de4:	d107      	bne.n	8004df6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004dee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004df0:	6878      	ldr	r0, [r7, #4]
 8004df2:	f000 f838 	bl	8004e66 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	691b      	ldr	r3, [r3, #16]
 8004dfc:	f003 0320 	and.w	r3, r3, #32
 8004e00:	2b20      	cmp	r3, #32
 8004e02:	d10e      	bne.n	8004e22 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	68db      	ldr	r3, [r3, #12]
 8004e0a:	f003 0320 	and.w	r3, r3, #32
 8004e0e:	2b20      	cmp	r3, #32
 8004e10:	d107      	bne.n	8004e22 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	f06f 0220 	mvn.w	r2, #32
 8004e1a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004e1c:	6878      	ldr	r0, [r7, #4]
 8004e1e:	f000 f891 	bl	8004f44 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004e22:	bf00      	nop
 8004e24:	3708      	adds	r7, #8
 8004e26:	46bd      	mov	sp, r7
 8004e28:	bd80      	pop	{r7, pc}

08004e2a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004e2a:	b480      	push	{r7}
 8004e2c:	b083      	sub	sp, #12
 8004e2e:	af00      	add	r7, sp, #0
 8004e30:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004e32:	bf00      	nop
 8004e34:	370c      	adds	r7, #12
 8004e36:	46bd      	mov	sp, r7
 8004e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e3c:	4770      	bx	lr

08004e3e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004e3e:	b480      	push	{r7}
 8004e40:	b083      	sub	sp, #12
 8004e42:	af00      	add	r7, sp, #0
 8004e44:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004e46:	bf00      	nop
 8004e48:	370c      	adds	r7, #12
 8004e4a:	46bd      	mov	sp, r7
 8004e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e50:	4770      	bx	lr

08004e52 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004e52:	b480      	push	{r7}
 8004e54:	b083      	sub	sp, #12
 8004e56:	af00      	add	r7, sp, #0
 8004e58:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004e5a:	bf00      	nop
 8004e5c:	370c      	adds	r7, #12
 8004e5e:	46bd      	mov	sp, r7
 8004e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e64:	4770      	bx	lr

08004e66 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004e66:	b480      	push	{r7}
 8004e68:	b083      	sub	sp, #12
 8004e6a:	af00      	add	r7, sp, #0
 8004e6c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004e6e:	bf00      	nop
 8004e70:	370c      	adds	r7, #12
 8004e72:	46bd      	mov	sp, r7
 8004e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e78:	4770      	bx	lr
	...

08004e7c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004e7c:	b480      	push	{r7}
 8004e7e:	b085      	sub	sp, #20
 8004e80:	af00      	add	r7, sp, #0
 8004e82:	6078      	str	r0, [r7, #4]
 8004e84:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	4a2a      	ldr	r2, [pc, #168]	; (8004f38 <TIM_Base_SetConfig+0xbc>)
 8004e90:	4293      	cmp	r3, r2
 8004e92:	d003      	beq.n	8004e9c <TIM_Base_SetConfig+0x20>
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e9a:	d108      	bne.n	8004eae <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ea2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004ea4:	683b      	ldr	r3, [r7, #0]
 8004ea6:	685b      	ldr	r3, [r3, #4]
 8004ea8:	68fa      	ldr	r2, [r7, #12]
 8004eaa:	4313      	orrs	r3, r2
 8004eac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	4a21      	ldr	r2, [pc, #132]	; (8004f38 <TIM_Base_SetConfig+0xbc>)
 8004eb2:	4293      	cmp	r3, r2
 8004eb4:	d00b      	beq.n	8004ece <TIM_Base_SetConfig+0x52>
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ebc:	d007      	beq.n	8004ece <TIM_Base_SetConfig+0x52>
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	4a1e      	ldr	r2, [pc, #120]	; (8004f3c <TIM_Base_SetConfig+0xc0>)
 8004ec2:	4293      	cmp	r3, r2
 8004ec4:	d003      	beq.n	8004ece <TIM_Base_SetConfig+0x52>
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	4a1d      	ldr	r2, [pc, #116]	; (8004f40 <TIM_Base_SetConfig+0xc4>)
 8004eca:	4293      	cmp	r3, r2
 8004ecc:	d108      	bne.n	8004ee0 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ed4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004ed6:	683b      	ldr	r3, [r7, #0]
 8004ed8:	68db      	ldr	r3, [r3, #12]
 8004eda:	68fa      	ldr	r2, [r7, #12]
 8004edc:	4313      	orrs	r3, r2
 8004ede:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004ee6:	683b      	ldr	r3, [r7, #0]
 8004ee8:	695b      	ldr	r3, [r3, #20]
 8004eea:	4313      	orrs	r3, r2
 8004eec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	68fa      	ldr	r2, [r7, #12]
 8004ef2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004ef4:	683b      	ldr	r3, [r7, #0]
 8004ef6:	689a      	ldr	r2, [r3, #8]
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004efc:	683b      	ldr	r3, [r7, #0]
 8004efe:	681a      	ldr	r2, [r3, #0]
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	4a0c      	ldr	r2, [pc, #48]	; (8004f38 <TIM_Base_SetConfig+0xbc>)
 8004f08:	4293      	cmp	r3, r2
 8004f0a:	d007      	beq.n	8004f1c <TIM_Base_SetConfig+0xa0>
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	4a0b      	ldr	r2, [pc, #44]	; (8004f3c <TIM_Base_SetConfig+0xc0>)
 8004f10:	4293      	cmp	r3, r2
 8004f12:	d003      	beq.n	8004f1c <TIM_Base_SetConfig+0xa0>
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	4a0a      	ldr	r2, [pc, #40]	; (8004f40 <TIM_Base_SetConfig+0xc4>)
 8004f18:	4293      	cmp	r3, r2
 8004f1a:	d103      	bne.n	8004f24 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004f1c:	683b      	ldr	r3, [r7, #0]
 8004f1e:	691a      	ldr	r2, [r3, #16]
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	2201      	movs	r2, #1
 8004f28:	615a      	str	r2, [r3, #20]
}
 8004f2a:	bf00      	nop
 8004f2c:	3714      	adds	r7, #20
 8004f2e:	46bd      	mov	sp, r7
 8004f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f34:	4770      	bx	lr
 8004f36:	bf00      	nop
 8004f38:	40012c00 	.word	0x40012c00
 8004f3c:	40014000 	.word	0x40014000
 8004f40:	40014400 	.word	0x40014400

08004f44 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004f44:	b480      	push	{r7}
 8004f46:	b083      	sub	sp, #12
 8004f48:	af00      	add	r7, sp, #0
 8004f4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004f4c:	bf00      	nop
 8004f4e:	370c      	adds	r7, #12
 8004f50:	46bd      	mov	sp, r7
 8004f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f56:	4770      	bx	lr

08004f58 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004f58:	b480      	push	{r7}
 8004f5a:	b083      	sub	sp, #12
 8004f5c:	af00      	add	r7, sp, #0
 8004f5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004f60:	bf00      	nop
 8004f62:	370c      	adds	r7, #12
 8004f64:	46bd      	mov	sp, r7
 8004f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f6a:	4770      	bx	lr

08004f6c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004f6c:	b480      	push	{r7}
 8004f6e:	b083      	sub	sp, #12
 8004f70:	af00      	add	r7, sp, #0
 8004f72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004f74:	bf00      	nop
 8004f76:	370c      	adds	r7, #12
 8004f78:	46bd      	mov	sp, r7
 8004f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f7e:	4770      	bx	lr

08004f80 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004f80:	b580      	push	{r7, lr}
 8004f82:	b082      	sub	sp, #8
 8004f84:	af00      	add	r7, sp, #0
 8004f86:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d101      	bne.n	8004f92 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004f8e:	2301      	movs	r3, #1
 8004f90:	e040      	b.n	8005014 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d106      	bne.n	8004fa8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	2200      	movs	r2, #0
 8004f9e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004fa2:	6878      	ldr	r0, [r7, #4]
 8004fa4:	f7fd fbdc 	bl	8002760 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	2224      	movs	r2, #36	; 0x24
 8004fac:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	681a      	ldr	r2, [r3, #0]
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	f022 0201 	bic.w	r2, r2, #1
 8004fbc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004fbe:	6878      	ldr	r0, [r7, #4]
 8004fc0:	f000 fce6 	bl	8005990 <UART_SetConfig>
 8004fc4:	4603      	mov	r3, r0
 8004fc6:	2b01      	cmp	r3, #1
 8004fc8:	d101      	bne.n	8004fce <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004fca:	2301      	movs	r3, #1
 8004fcc:	e022      	b.n	8005014 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d002      	beq.n	8004fdc <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004fd6:	6878      	ldr	r0, [r7, #4]
 8004fd8:	f000 ff06 	bl	8005de8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	685a      	ldr	r2, [r3, #4]
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004fea:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	689a      	ldr	r2, [r3, #8]
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004ffa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	681a      	ldr	r2, [r3, #0]
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	f042 0201 	orr.w	r2, r2, #1
 800500a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800500c:	6878      	ldr	r0, [r7, #4]
 800500e:	f000 ff8d 	bl	8005f2c <UART_CheckIdleState>
 8005012:	4603      	mov	r3, r0
}
 8005014:	4618      	mov	r0, r3
 8005016:	3708      	adds	r7, #8
 8005018:	46bd      	mov	sp, r7
 800501a:	bd80      	pop	{r7, pc}

0800501c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800501c:	b580      	push	{r7, lr}
 800501e:	b08a      	sub	sp, #40	; 0x28
 8005020:	af02      	add	r7, sp, #8
 8005022:	60f8      	str	r0, [r7, #12]
 8005024:	60b9      	str	r1, [r7, #8]
 8005026:	603b      	str	r3, [r7, #0]
 8005028:	4613      	mov	r3, r2
 800502a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005030:	2b20      	cmp	r3, #32
 8005032:	f040 8082 	bne.w	800513a <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8005036:	68bb      	ldr	r3, [r7, #8]
 8005038:	2b00      	cmp	r3, #0
 800503a:	d002      	beq.n	8005042 <HAL_UART_Transmit+0x26>
 800503c:	88fb      	ldrh	r3, [r7, #6]
 800503e:	2b00      	cmp	r3, #0
 8005040:	d101      	bne.n	8005046 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8005042:	2301      	movs	r3, #1
 8005044:	e07a      	b.n	800513c <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800504c:	2b01      	cmp	r3, #1
 800504e:	d101      	bne.n	8005054 <HAL_UART_Transmit+0x38>
 8005050:	2302      	movs	r3, #2
 8005052:	e073      	b.n	800513c <HAL_UART_Transmit+0x120>
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	2201      	movs	r2, #1
 8005058:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	2200      	movs	r2, #0
 8005060:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	2221      	movs	r2, #33	; 0x21
 8005068:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800506a:	f7fd fe4d 	bl	8002d08 <HAL_GetTick>
 800506e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	88fa      	ldrh	r2, [r7, #6]
 8005074:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	88fa      	ldrh	r2, [r7, #6]
 800507c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	689b      	ldr	r3, [r3, #8]
 8005084:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005088:	d108      	bne.n	800509c <HAL_UART_Transmit+0x80>
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	691b      	ldr	r3, [r3, #16]
 800508e:	2b00      	cmp	r3, #0
 8005090:	d104      	bne.n	800509c <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8005092:	2300      	movs	r3, #0
 8005094:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005096:	68bb      	ldr	r3, [r7, #8]
 8005098:	61bb      	str	r3, [r7, #24]
 800509a:	e003      	b.n	80050a4 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 800509c:	68bb      	ldr	r3, [r7, #8]
 800509e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80050a0:	2300      	movs	r3, #0
 80050a2:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	2200      	movs	r2, #0
 80050a8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 80050ac:	e02d      	b.n	800510a <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80050ae:	683b      	ldr	r3, [r7, #0]
 80050b0:	9300      	str	r3, [sp, #0]
 80050b2:	697b      	ldr	r3, [r7, #20]
 80050b4:	2200      	movs	r2, #0
 80050b6:	2180      	movs	r1, #128	; 0x80
 80050b8:	68f8      	ldr	r0, [r7, #12]
 80050ba:	f000 ff80 	bl	8005fbe <UART_WaitOnFlagUntilTimeout>
 80050be:	4603      	mov	r3, r0
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d001      	beq.n	80050c8 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 80050c4:	2303      	movs	r3, #3
 80050c6:	e039      	b.n	800513c <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 80050c8:	69fb      	ldr	r3, [r7, #28]
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d10b      	bne.n	80050e6 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80050ce:	69bb      	ldr	r3, [r7, #24]
 80050d0:	881a      	ldrh	r2, [r3, #0]
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80050da:	b292      	uxth	r2, r2
 80050dc:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80050de:	69bb      	ldr	r3, [r7, #24]
 80050e0:	3302      	adds	r3, #2
 80050e2:	61bb      	str	r3, [r7, #24]
 80050e4:	e008      	b.n	80050f8 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80050e6:	69fb      	ldr	r3, [r7, #28]
 80050e8:	781a      	ldrb	r2, [r3, #0]
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	b292      	uxth	r2, r2
 80050f0:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80050f2:	69fb      	ldr	r3, [r7, #28]
 80050f4:	3301      	adds	r3, #1
 80050f6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80050fe:	b29b      	uxth	r3, r3
 8005100:	3b01      	subs	r3, #1
 8005102:	b29a      	uxth	r2, r3
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005110:	b29b      	uxth	r3, r3
 8005112:	2b00      	cmp	r3, #0
 8005114:	d1cb      	bne.n	80050ae <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005116:	683b      	ldr	r3, [r7, #0]
 8005118:	9300      	str	r3, [sp, #0]
 800511a:	697b      	ldr	r3, [r7, #20]
 800511c:	2200      	movs	r2, #0
 800511e:	2140      	movs	r1, #64	; 0x40
 8005120:	68f8      	ldr	r0, [r7, #12]
 8005122:	f000 ff4c 	bl	8005fbe <UART_WaitOnFlagUntilTimeout>
 8005126:	4603      	mov	r3, r0
 8005128:	2b00      	cmp	r3, #0
 800512a:	d001      	beq.n	8005130 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 800512c:	2303      	movs	r3, #3
 800512e:	e005      	b.n	800513c <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	2220      	movs	r2, #32
 8005134:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8005136:	2300      	movs	r3, #0
 8005138:	e000      	b.n	800513c <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 800513a:	2302      	movs	r3, #2
  }
}
 800513c:	4618      	mov	r0, r3
 800513e:	3720      	adds	r7, #32
 8005140:	46bd      	mov	sp, r7
 8005142:	bd80      	pop	{r7, pc}

08005144 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8005144:	b480      	push	{r7}
 8005146:	b08b      	sub	sp, #44	; 0x2c
 8005148:	af00      	add	r7, sp, #0
 800514a:	60f8      	str	r0, [r7, #12]
 800514c:	60b9      	str	r1, [r7, #8]
 800514e:	4613      	mov	r3, r2
 8005150:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005156:	2b20      	cmp	r3, #32
 8005158:	d156      	bne.n	8005208 <HAL_UART_Transmit_IT+0xc4>
  {
    if ((pData == NULL) || (Size == 0U))
 800515a:	68bb      	ldr	r3, [r7, #8]
 800515c:	2b00      	cmp	r3, #0
 800515e:	d002      	beq.n	8005166 <HAL_UART_Transmit_IT+0x22>
 8005160:	88fb      	ldrh	r3, [r7, #6]
 8005162:	2b00      	cmp	r3, #0
 8005164:	d101      	bne.n	800516a <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 8005166:	2301      	movs	r3, #1
 8005168:	e04f      	b.n	800520a <HAL_UART_Transmit_IT+0xc6>
    }

    __HAL_LOCK(huart);
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8005170:	2b01      	cmp	r3, #1
 8005172:	d101      	bne.n	8005178 <HAL_UART_Transmit_IT+0x34>
 8005174:	2302      	movs	r3, #2
 8005176:	e048      	b.n	800520a <HAL_UART_Transmit_IT+0xc6>
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	2201      	movs	r2, #1
 800517c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->pTxBuffPtr  = pData;
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	68ba      	ldr	r2, [r7, #8]
 8005184:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	88fa      	ldrh	r2, [r7, #6]
 800518a:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	88fa      	ldrh	r2, [r7, #6]
 8005192:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	2200      	movs	r2, #0
 800519a:	669a      	str	r2, [r3, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	2200      	movs	r2, #0
 80051a0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	2221      	movs	r2, #33	; 0x21
 80051a8:	679a      	str	r2, [r3, #120]	; 0x78
      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
    }
#else
    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	689b      	ldr	r3, [r3, #8]
 80051ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80051b2:	d107      	bne.n	80051c4 <HAL_UART_Transmit_IT+0x80>
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	691b      	ldr	r3, [r3, #16]
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d103      	bne.n	80051c4 <HAL_UART_Transmit_IT+0x80>
    {
      huart->TxISR = UART_TxISR_16BIT;
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	4a16      	ldr	r2, [pc, #88]	; (8005218 <HAL_UART_Transmit_IT+0xd4>)
 80051c0:	669a      	str	r2, [r3, #104]	; 0x68
 80051c2:	e002      	b.n	80051ca <HAL_UART_Transmit_IT+0x86>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	4a15      	ldr	r2, [pc, #84]	; (800521c <HAL_UART_Transmit_IT+0xd8>)
 80051c8:	669a      	str	r2, [r3, #104]	; 0x68
    }

    __HAL_UNLOCK(huart);
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	2200      	movs	r2, #0
 80051ce:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051d8:	697b      	ldr	r3, [r7, #20]
 80051da:	e853 3f00 	ldrex	r3, [r3]
 80051de:	613b      	str	r3, [r7, #16]
   return(result);
 80051e0:	693b      	ldr	r3, [r7, #16]
 80051e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80051e6:	627b      	str	r3, [r7, #36]	; 0x24
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	461a      	mov	r2, r3
 80051ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051f0:	623b      	str	r3, [r7, #32]
 80051f2:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051f4:	69f9      	ldr	r1, [r7, #28]
 80051f6:	6a3a      	ldr	r2, [r7, #32]
 80051f8:	e841 2300 	strex	r3, r2, [r1]
 80051fc:	61bb      	str	r3, [r7, #24]
   return(result);
 80051fe:	69bb      	ldr	r3, [r7, #24]
 8005200:	2b00      	cmp	r3, #0
 8005202:	d1e6      	bne.n	80051d2 <HAL_UART_Transmit_IT+0x8e>
#endif /* USART_CR1_FIFOEN */

    return HAL_OK;
 8005204:	2300      	movs	r3, #0
 8005206:	e000      	b.n	800520a <HAL_UART_Transmit_IT+0xc6>
  }
  else
  {
    return HAL_BUSY;
 8005208:	2302      	movs	r3, #2
  }
}
 800520a:	4618      	mov	r0, r3
 800520c:	372c      	adds	r7, #44	; 0x2c
 800520e:	46bd      	mov	sp, r7
 8005210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005214:	4770      	bx	lr
 8005216:	bf00      	nop
 8005218:	080067f7 	.word	0x080067f7
 800521c:	0800673f 	.word	0x0800673f

08005220 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005220:	b580      	push	{r7, lr}
 8005222:	b08a      	sub	sp, #40	; 0x28
 8005224:	af00      	add	r7, sp, #0
 8005226:	60f8      	str	r0, [r7, #12]
 8005228:	60b9      	str	r1, [r7, #8]
 800522a:	4613      	mov	r3, r2
 800522c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005232:	2b20      	cmp	r3, #32
 8005234:	d142      	bne.n	80052bc <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005236:	68bb      	ldr	r3, [r7, #8]
 8005238:	2b00      	cmp	r3, #0
 800523a:	d002      	beq.n	8005242 <HAL_UART_Receive_IT+0x22>
 800523c:	88fb      	ldrh	r3, [r7, #6]
 800523e:	2b00      	cmp	r3, #0
 8005240:	d101      	bne.n	8005246 <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 8005242:	2301      	movs	r3, #1
 8005244:	e03b      	b.n	80052be <HAL_UART_Receive_IT+0x9e>
    }

    __HAL_LOCK(huart);
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800524c:	2b01      	cmp	r3, #1
 800524e:	d101      	bne.n	8005254 <HAL_UART_Receive_IT+0x34>
 8005250:	2302      	movs	r3, #2
 8005252:	e034      	b.n	80052be <HAL_UART_Receive_IT+0x9e>
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	2201      	movs	r2, #1
 8005258:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	2200      	movs	r2, #0
 8005260:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	4a18      	ldr	r2, [pc, #96]	; (80052c8 <HAL_UART_Receive_IT+0xa8>)
 8005268:	4293      	cmp	r3, r2
 800526a:	d01f      	beq.n	80052ac <HAL_UART_Receive_IT+0x8c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	685b      	ldr	r3, [r3, #4]
 8005272:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005276:	2b00      	cmp	r3, #0
 8005278:	d018      	beq.n	80052ac <HAL_UART_Receive_IT+0x8c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005280:	697b      	ldr	r3, [r7, #20]
 8005282:	e853 3f00 	ldrex	r3, [r3]
 8005286:	613b      	str	r3, [r7, #16]
   return(result);
 8005288:	693b      	ldr	r3, [r7, #16]
 800528a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800528e:	627b      	str	r3, [r7, #36]	; 0x24
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	461a      	mov	r2, r3
 8005296:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005298:	623b      	str	r3, [r7, #32]
 800529a:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800529c:	69f9      	ldr	r1, [r7, #28]
 800529e:	6a3a      	ldr	r2, [r7, #32]
 80052a0:	e841 2300 	strex	r3, r2, [r1]
 80052a4:	61bb      	str	r3, [r7, #24]
   return(result);
 80052a6:	69bb      	ldr	r3, [r7, #24]
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d1e6      	bne.n	800527a <HAL_UART_Receive_IT+0x5a>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80052ac:	88fb      	ldrh	r3, [r7, #6]
 80052ae:	461a      	mov	r2, r3
 80052b0:	68b9      	ldr	r1, [r7, #8]
 80052b2:	68f8      	ldr	r0, [r7, #12]
 80052b4:	f000 ff48 	bl	8006148 <UART_Start_Receive_IT>
 80052b8:	4603      	mov	r3, r0
 80052ba:	e000      	b.n	80052be <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 80052bc:	2302      	movs	r3, #2
  }
}
 80052be:	4618      	mov	r0, r3
 80052c0:	3728      	adds	r7, #40	; 0x28
 80052c2:	46bd      	mov	sp, r7
 80052c4:	bd80      	pop	{r7, pc}
 80052c6:	bf00      	nop
 80052c8:	40008000 	.word	0x40008000

080052cc <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80052cc:	b580      	push	{r7, lr}
 80052ce:	b08a      	sub	sp, #40	; 0x28
 80052d0:	af00      	add	r7, sp, #0
 80052d2:	60f8      	str	r0, [r7, #12]
 80052d4:	60b9      	str	r1, [r7, #8]
 80052d6:	4613      	mov	r3, r2
 80052d8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80052de:	2b20      	cmp	r3, #32
 80052e0:	d142      	bne.n	8005368 <HAL_UART_Receive_DMA+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 80052e2:	68bb      	ldr	r3, [r7, #8]
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d002      	beq.n	80052ee <HAL_UART_Receive_DMA+0x22>
 80052e8:	88fb      	ldrh	r3, [r7, #6]
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d101      	bne.n	80052f2 <HAL_UART_Receive_DMA+0x26>
    {
      return HAL_ERROR;
 80052ee:	2301      	movs	r3, #1
 80052f0:	e03b      	b.n	800536a <HAL_UART_Receive_DMA+0x9e>
    }

    __HAL_LOCK(huart);
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80052f8:	2b01      	cmp	r3, #1
 80052fa:	d101      	bne.n	8005300 <HAL_UART_Receive_DMA+0x34>
 80052fc:	2302      	movs	r3, #2
 80052fe:	e034      	b.n	800536a <HAL_UART_Receive_DMA+0x9e>
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	2201      	movs	r2, #1
 8005304:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	2200      	movs	r2, #0
 800530c:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	4a18      	ldr	r2, [pc, #96]	; (8005374 <HAL_UART_Receive_DMA+0xa8>)
 8005314:	4293      	cmp	r3, r2
 8005316:	d01f      	beq.n	8005358 <HAL_UART_Receive_DMA+0x8c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	685b      	ldr	r3, [r3, #4]
 800531e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005322:	2b00      	cmp	r3, #0
 8005324:	d018      	beq.n	8005358 <HAL_UART_Receive_DMA+0x8c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800532c:	697b      	ldr	r3, [r7, #20]
 800532e:	e853 3f00 	ldrex	r3, [r3]
 8005332:	613b      	str	r3, [r7, #16]
   return(result);
 8005334:	693b      	ldr	r3, [r7, #16]
 8005336:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800533a:	627b      	str	r3, [r7, #36]	; 0x24
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	461a      	mov	r2, r3
 8005342:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005344:	623b      	str	r3, [r7, #32]
 8005346:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005348:	69f9      	ldr	r1, [r7, #28]
 800534a:	6a3a      	ldr	r2, [r7, #32]
 800534c:	e841 2300 	strex	r3, r2, [r1]
 8005350:	61bb      	str	r3, [r7, #24]
   return(result);
 8005352:	69bb      	ldr	r3, [r7, #24]
 8005354:	2b00      	cmp	r3, #0
 8005356:	d1e6      	bne.n	8005326 <HAL_UART_Receive_DMA+0x5a>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8005358:	88fb      	ldrh	r3, [r7, #6]
 800535a:	461a      	mov	r2, r3
 800535c:	68b9      	ldr	r1, [r7, #8]
 800535e:	68f8      	ldr	r0, [r7, #12]
 8005360:	f000 ffbc 	bl	80062dc <UART_Start_Receive_DMA>
 8005364:	4603      	mov	r3, r0
 8005366:	e000      	b.n	800536a <HAL_UART_Receive_DMA+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8005368:	2302      	movs	r3, #2
  }
}
 800536a:	4618      	mov	r0, r3
 800536c:	3728      	adds	r7, #40	; 0x28
 800536e:	46bd      	mov	sp, r7
 8005370:	bd80      	pop	{r7, pc}
 8005372:	bf00      	nop
 8005374:	40008000 	.word	0x40008000

08005378 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005378:	b580      	push	{r7, lr}
 800537a:	b0ba      	sub	sp, #232	; 0xe8
 800537c:	af00      	add	r7, sp, #0
 800537e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	69db      	ldr	r3, [r3, #28]
 8005386:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	689b      	ldr	r3, [r3, #8]
 800539a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800539e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80053a2:	f640 030f 	movw	r3, #2063	; 0x80f
 80053a6:	4013      	ands	r3, r2
 80053a8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80053ac:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d115      	bne.n	80053e0 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80053b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80053b8:	f003 0320 	and.w	r3, r3, #32
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d00f      	beq.n	80053e0 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80053c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80053c4:	f003 0320 	and.w	r3, r3, #32
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d009      	beq.n	80053e0 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	f000 82a6 	beq.w	8005922 <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80053da:	6878      	ldr	r0, [r7, #4]
 80053dc:	4798      	blx	r3
      }
      return;
 80053de:	e2a0      	b.n	8005922 <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 80053e0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	f000 8117 	beq.w	8005618 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80053ea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80053ee:	f003 0301 	and.w	r3, r3, #1
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d106      	bne.n	8005404 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80053f6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80053fa:	4b85      	ldr	r3, [pc, #532]	; (8005610 <HAL_UART_IRQHandler+0x298>)
 80053fc:	4013      	ands	r3, r2
 80053fe:	2b00      	cmp	r3, #0
 8005400:	f000 810a 	beq.w	8005618 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005404:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005408:	f003 0301 	and.w	r3, r3, #1
 800540c:	2b00      	cmp	r3, #0
 800540e:	d011      	beq.n	8005434 <HAL_UART_IRQHandler+0xbc>
 8005410:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005414:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005418:	2b00      	cmp	r3, #0
 800541a:	d00b      	beq.n	8005434 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	2201      	movs	r2, #1
 8005422:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800542a:	f043 0201 	orr.w	r2, r3, #1
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005434:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005438:	f003 0302 	and.w	r3, r3, #2
 800543c:	2b00      	cmp	r3, #0
 800543e:	d011      	beq.n	8005464 <HAL_UART_IRQHandler+0xec>
 8005440:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005444:	f003 0301 	and.w	r3, r3, #1
 8005448:	2b00      	cmp	r3, #0
 800544a:	d00b      	beq.n	8005464 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	2202      	movs	r2, #2
 8005452:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800545a:	f043 0204 	orr.w	r2, r3, #4
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005464:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005468:	f003 0304 	and.w	r3, r3, #4
 800546c:	2b00      	cmp	r3, #0
 800546e:	d011      	beq.n	8005494 <HAL_UART_IRQHandler+0x11c>
 8005470:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005474:	f003 0301 	and.w	r3, r3, #1
 8005478:	2b00      	cmp	r3, #0
 800547a:	d00b      	beq.n	8005494 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	2204      	movs	r2, #4
 8005482:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800548a:	f043 0202 	orr.w	r2, r3, #2
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005494:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005498:	f003 0308 	and.w	r3, r3, #8
 800549c:	2b00      	cmp	r3, #0
 800549e:	d017      	beq.n	80054d0 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80054a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80054a4:	f003 0320 	and.w	r3, r3, #32
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d105      	bne.n	80054b8 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80054ac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80054b0:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d00b      	beq.n	80054d0 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	2208      	movs	r2, #8
 80054be:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80054c6:	f043 0208 	orr.w	r2, r3, #8
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80054d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80054d4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d012      	beq.n	8005502 <HAL_UART_IRQHandler+0x18a>
 80054dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80054e0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d00c      	beq.n	8005502 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80054f0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80054f8:	f043 0220 	orr.w	r2, r3, #32
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005508:	2b00      	cmp	r3, #0
 800550a:	f000 820c 	beq.w	8005926 <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800550e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005512:	f003 0320 	and.w	r3, r3, #32
 8005516:	2b00      	cmp	r3, #0
 8005518:	d00d      	beq.n	8005536 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800551a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800551e:	f003 0320 	and.w	r3, r3, #32
 8005522:	2b00      	cmp	r3, #0
 8005524:	d007      	beq.n	8005536 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800552a:	2b00      	cmp	r3, #0
 800552c:	d003      	beq.n	8005536 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005532:	6878      	ldr	r0, [r7, #4]
 8005534:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800553c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	689b      	ldr	r3, [r3, #8]
 8005546:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800554a:	2b40      	cmp	r3, #64	; 0x40
 800554c:	d005      	beq.n	800555a <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800554e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005552:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005556:	2b00      	cmp	r3, #0
 8005558:	d04f      	beq.n	80055fa <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800555a:	6878      	ldr	r0, [r7, #4]
 800555c:	f000 ff8a 	bl	8006474 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	689b      	ldr	r3, [r3, #8]
 8005566:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800556a:	2b40      	cmp	r3, #64	; 0x40
 800556c:	d141      	bne.n	80055f2 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	3308      	adds	r3, #8
 8005574:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005578:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800557c:	e853 3f00 	ldrex	r3, [r3]
 8005580:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005584:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005588:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800558c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	3308      	adds	r3, #8
 8005596:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800559a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800559e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055a2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80055a6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80055aa:	e841 2300 	strex	r3, r2, [r1]
 80055ae:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80055b2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d1d9      	bne.n	800556e <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d013      	beq.n	80055ea <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055c6:	4a13      	ldr	r2, [pc, #76]	; (8005614 <HAL_UART_IRQHandler+0x29c>)
 80055c8:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055ce:	4618      	mov	r0, r3
 80055d0:	f7fd fdde 	bl	8003190 <HAL_DMA_Abort_IT>
 80055d4:	4603      	mov	r3, r0
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d017      	beq.n	800560a <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055e0:	687a      	ldr	r2, [r7, #4]
 80055e2:	6f12      	ldr	r2, [r2, #112]	; 0x70
 80055e4:	4610      	mov	r0, r2
 80055e6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80055e8:	e00f      	b.n	800560a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80055ea:	6878      	ldr	r0, [r7, #4]
 80055ec:	f000 f9ba 	bl	8005964 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80055f0:	e00b      	b.n	800560a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80055f2:	6878      	ldr	r0, [r7, #4]
 80055f4:	f000 f9b6 	bl	8005964 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80055f8:	e007      	b.n	800560a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80055fa:	6878      	ldr	r0, [r7, #4]
 80055fc:	f000 f9b2 	bl	8005964 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	2200      	movs	r2, #0
 8005604:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8005608:	e18d      	b.n	8005926 <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800560a:	bf00      	nop
    return;
 800560c:	e18b      	b.n	8005926 <HAL_UART_IRQHandler+0x5ae>
 800560e:	bf00      	nop
 8005610:	04000120 	.word	0x04000120
 8005614:	08006713 	.word	0x08006713

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800561c:	2b01      	cmp	r3, #1
 800561e:	f040 8146 	bne.w	80058ae <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005622:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005626:	f003 0310 	and.w	r3, r3, #16
 800562a:	2b00      	cmp	r3, #0
 800562c:	f000 813f 	beq.w	80058ae <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005630:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005634:	f003 0310 	and.w	r3, r3, #16
 8005638:	2b00      	cmp	r3, #0
 800563a:	f000 8138 	beq.w	80058ae <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	2210      	movs	r2, #16
 8005644:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	689b      	ldr	r3, [r3, #8]
 800564c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005650:	2b40      	cmp	r3, #64	; 0x40
 8005652:	f040 80b4 	bne.w	80057be <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	685b      	ldr	r3, [r3, #4]
 800565e:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005662:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005666:	2b00      	cmp	r3, #0
 8005668:	f000 815f 	beq.w	800592a <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005672:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005676:	429a      	cmp	r2, r3
 8005678:	f080 8157 	bcs.w	800592a <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005682:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	f003 0320 	and.w	r3, r3, #32
 8005692:	2b00      	cmp	r3, #0
 8005694:	f040 8085 	bne.w	80057a2 <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056a0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80056a4:	e853 3f00 	ldrex	r3, [r3]
 80056a8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80056ac:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80056b0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80056b4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	461a      	mov	r2, r3
 80056be:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80056c2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80056c6:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056ca:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80056ce:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80056d2:	e841 2300 	strex	r3, r2, [r1]
 80056d6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80056da:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d1da      	bne.n	8005698 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	3308      	adds	r3, #8
 80056e8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056ea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80056ec:	e853 3f00 	ldrex	r3, [r3]
 80056f0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80056f2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80056f4:	f023 0301 	bic.w	r3, r3, #1
 80056f8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	3308      	adds	r3, #8
 8005702:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005706:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800570a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800570c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800570e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005712:	e841 2300 	strex	r3, r2, [r1]
 8005716:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005718:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800571a:	2b00      	cmp	r3, #0
 800571c:	d1e1      	bne.n	80056e2 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	3308      	adds	r3, #8
 8005724:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005726:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005728:	e853 3f00 	ldrex	r3, [r3]
 800572c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800572e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005730:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005734:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	3308      	adds	r3, #8
 800573e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005742:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005744:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005746:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005748:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800574a:	e841 2300 	strex	r3, r2, [r1]
 800574e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005750:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005752:	2b00      	cmp	r3, #0
 8005754:	d1e3      	bne.n	800571e <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	2220      	movs	r2, #32
 800575a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	2200      	movs	r2, #0
 8005760:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005768:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800576a:	e853 3f00 	ldrex	r3, [r3]
 800576e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005770:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005772:	f023 0310 	bic.w	r3, r3, #16
 8005776:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	461a      	mov	r2, r3
 8005780:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005784:	65bb      	str	r3, [r7, #88]	; 0x58
 8005786:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005788:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800578a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800578c:	e841 2300 	strex	r3, r2, [r1]
 8005790:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005792:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005794:	2b00      	cmp	r3, #0
 8005796:	d1e4      	bne.n	8005762 <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800579c:	4618      	mov	r0, r3
 800579e:	f7fd fcb9 	bl	8003114 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80057ae:	b29b      	uxth	r3, r3
 80057b0:	1ad3      	subs	r3, r2, r3
 80057b2:	b29b      	uxth	r3, r3
 80057b4:	4619      	mov	r1, r3
 80057b6:	6878      	ldr	r0, [r7, #4]
 80057b8:	f000 f8de 	bl	8005978 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80057bc:	e0b5      	b.n	800592a <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80057ca:	b29b      	uxth	r3, r3
 80057cc:	1ad3      	subs	r3, r2, r3
 80057ce:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80057d8:	b29b      	uxth	r3, r3
 80057da:	2b00      	cmp	r3, #0
 80057dc:	f000 80a7 	beq.w	800592e <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 80057e0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	f000 80a2 	beq.w	800592e <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057f2:	e853 3f00 	ldrex	r3, [r3]
 80057f6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80057f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057fa:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80057fe:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	461a      	mov	r2, r3
 8005808:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800580c:	647b      	str	r3, [r7, #68]	; 0x44
 800580e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005810:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005812:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005814:	e841 2300 	strex	r3, r2, [r1]
 8005818:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800581a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800581c:	2b00      	cmp	r3, #0
 800581e:	d1e4      	bne.n	80057ea <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	3308      	adds	r3, #8
 8005826:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005828:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800582a:	e853 3f00 	ldrex	r3, [r3]
 800582e:	623b      	str	r3, [r7, #32]
   return(result);
 8005830:	6a3b      	ldr	r3, [r7, #32]
 8005832:	f023 0301 	bic.w	r3, r3, #1
 8005836:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	3308      	adds	r3, #8
 8005840:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005844:	633a      	str	r2, [r7, #48]	; 0x30
 8005846:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005848:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800584a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800584c:	e841 2300 	strex	r3, r2, [r1]
 8005850:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005852:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005854:	2b00      	cmp	r3, #0
 8005856:	d1e3      	bne.n	8005820 <HAL_UART_IRQHandler+0x4a8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	2220      	movs	r2, #32
 800585c:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	2200      	movs	r2, #0
 8005862:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	2200      	movs	r2, #0
 8005868:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005870:	693b      	ldr	r3, [r7, #16]
 8005872:	e853 3f00 	ldrex	r3, [r3]
 8005876:	60fb      	str	r3, [r7, #12]
   return(result);
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	f023 0310 	bic.w	r3, r3, #16
 800587e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	461a      	mov	r2, r3
 8005888:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800588c:	61fb      	str	r3, [r7, #28]
 800588e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005890:	69b9      	ldr	r1, [r7, #24]
 8005892:	69fa      	ldr	r2, [r7, #28]
 8005894:	e841 2300 	strex	r3, r2, [r1]
 8005898:	617b      	str	r3, [r7, #20]
   return(result);
 800589a:	697b      	ldr	r3, [r7, #20]
 800589c:	2b00      	cmp	r3, #0
 800589e:	d1e4      	bne.n	800586a <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80058a0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80058a4:	4619      	mov	r1, r3
 80058a6:	6878      	ldr	r0, [r7, #4]
 80058a8:	f000 f866 	bl	8005978 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80058ac:	e03f      	b.n	800592e <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80058ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80058b2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d00e      	beq.n	80058d8 <HAL_UART_IRQHandler+0x560>
 80058ba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80058be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d008      	beq.n	80058d8 <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80058ce:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80058d0:	6878      	ldr	r0, [r7, #4]
 80058d2:	f001 f97a 	bl	8006bca <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80058d6:	e02d      	b.n	8005934 <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 80058d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80058dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d00e      	beq.n	8005902 <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80058e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80058e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d008      	beq.n	8005902 <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d01c      	beq.n	8005932 <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80058fc:	6878      	ldr	r0, [r7, #4]
 80058fe:	4798      	blx	r3
    }
    return;
 8005900:	e017      	b.n	8005932 <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005902:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005906:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800590a:	2b00      	cmp	r3, #0
 800590c:	d012      	beq.n	8005934 <HAL_UART_IRQHandler+0x5bc>
 800590e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005912:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005916:	2b00      	cmp	r3, #0
 8005918:	d00c      	beq.n	8005934 <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 800591a:	6878      	ldr	r0, [r7, #4]
 800591c:	f000 ffcb 	bl	80068b6 <UART_EndTransmit_IT>
    return;
 8005920:	e008      	b.n	8005934 <HAL_UART_IRQHandler+0x5bc>
      return;
 8005922:	bf00      	nop
 8005924:	e006      	b.n	8005934 <HAL_UART_IRQHandler+0x5bc>
    return;
 8005926:	bf00      	nop
 8005928:	e004      	b.n	8005934 <HAL_UART_IRQHandler+0x5bc>
      return;
 800592a:	bf00      	nop
 800592c:	e002      	b.n	8005934 <HAL_UART_IRQHandler+0x5bc>
      return;
 800592e:	bf00      	nop
 8005930:	e000      	b.n	8005934 <HAL_UART_IRQHandler+0x5bc>
    return;
 8005932:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8005934:	37e8      	adds	r7, #232	; 0xe8
 8005936:	46bd      	mov	sp, r7
 8005938:	bd80      	pop	{r7, pc}
 800593a:	bf00      	nop

0800593c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800593c:	b480      	push	{r7}
 800593e:	b083      	sub	sp, #12
 8005940:	af00      	add	r7, sp, #0
 8005942:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005944:	bf00      	nop
 8005946:	370c      	adds	r7, #12
 8005948:	46bd      	mov	sp, r7
 800594a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800594e:	4770      	bx	lr

08005950 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005950:	b480      	push	{r7}
 8005952:	b083      	sub	sp, #12
 8005954:	af00      	add	r7, sp, #0
 8005956:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8005958:	bf00      	nop
 800595a:	370c      	adds	r7, #12
 800595c:	46bd      	mov	sp, r7
 800595e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005962:	4770      	bx	lr

08005964 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005964:	b480      	push	{r7}
 8005966:	b083      	sub	sp, #12
 8005968:	af00      	add	r7, sp, #0
 800596a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800596c:	bf00      	nop
 800596e:	370c      	adds	r7, #12
 8005970:	46bd      	mov	sp, r7
 8005972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005976:	4770      	bx	lr

08005978 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005978:	b480      	push	{r7}
 800597a:	b083      	sub	sp, #12
 800597c:	af00      	add	r7, sp, #0
 800597e:	6078      	str	r0, [r7, #4]
 8005980:	460b      	mov	r3, r1
 8005982:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005984:	bf00      	nop
 8005986:	370c      	adds	r7, #12
 8005988:	46bd      	mov	sp, r7
 800598a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800598e:	4770      	bx	lr

08005990 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005990:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005994:	b08a      	sub	sp, #40	; 0x28
 8005996:	af00      	add	r7, sp, #0
 8005998:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800599a:	2300      	movs	r3, #0
 800599c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	689a      	ldr	r2, [r3, #8]
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	691b      	ldr	r3, [r3, #16]
 80059a8:	431a      	orrs	r2, r3
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	695b      	ldr	r3, [r3, #20]
 80059ae:	431a      	orrs	r2, r3
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	69db      	ldr	r3, [r3, #28]
 80059b4:	4313      	orrs	r3, r2
 80059b6:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	681a      	ldr	r2, [r3, #0]
 80059be:	4bb4      	ldr	r3, [pc, #720]	; (8005c90 <UART_SetConfig+0x300>)
 80059c0:	4013      	ands	r3, r2
 80059c2:	68fa      	ldr	r2, [r7, #12]
 80059c4:	6812      	ldr	r2, [r2, #0]
 80059c6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80059c8:	430b      	orrs	r3, r1
 80059ca:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	685b      	ldr	r3, [r3, #4]
 80059d2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	68da      	ldr	r2, [r3, #12]
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	430a      	orrs	r2, r1
 80059e0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	699b      	ldr	r3, [r3, #24]
 80059e6:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	4aa9      	ldr	r2, [pc, #676]	; (8005c94 <UART_SetConfig+0x304>)
 80059ee:	4293      	cmp	r3, r2
 80059f0:	d004      	beq.n	80059fc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	6a1b      	ldr	r3, [r3, #32]
 80059f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80059f8:	4313      	orrs	r3, r2
 80059fa:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	689b      	ldr	r3, [r3, #8]
 8005a02:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a0c:	430a      	orrs	r2, r1
 8005a0e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	4aa0      	ldr	r2, [pc, #640]	; (8005c98 <UART_SetConfig+0x308>)
 8005a16:	4293      	cmp	r3, r2
 8005a18:	d126      	bne.n	8005a68 <UART_SetConfig+0xd8>
 8005a1a:	4ba0      	ldr	r3, [pc, #640]	; (8005c9c <UART_SetConfig+0x30c>)
 8005a1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a20:	f003 0303 	and.w	r3, r3, #3
 8005a24:	2b03      	cmp	r3, #3
 8005a26:	d81b      	bhi.n	8005a60 <UART_SetConfig+0xd0>
 8005a28:	a201      	add	r2, pc, #4	; (adr r2, 8005a30 <UART_SetConfig+0xa0>)
 8005a2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a2e:	bf00      	nop
 8005a30:	08005a41 	.word	0x08005a41
 8005a34:	08005a51 	.word	0x08005a51
 8005a38:	08005a49 	.word	0x08005a49
 8005a3c:	08005a59 	.word	0x08005a59
 8005a40:	2301      	movs	r3, #1
 8005a42:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005a46:	e080      	b.n	8005b4a <UART_SetConfig+0x1ba>
 8005a48:	2302      	movs	r3, #2
 8005a4a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005a4e:	e07c      	b.n	8005b4a <UART_SetConfig+0x1ba>
 8005a50:	2304      	movs	r3, #4
 8005a52:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005a56:	e078      	b.n	8005b4a <UART_SetConfig+0x1ba>
 8005a58:	2308      	movs	r3, #8
 8005a5a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005a5e:	e074      	b.n	8005b4a <UART_SetConfig+0x1ba>
 8005a60:	2310      	movs	r3, #16
 8005a62:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005a66:	e070      	b.n	8005b4a <UART_SetConfig+0x1ba>
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	4a8c      	ldr	r2, [pc, #560]	; (8005ca0 <UART_SetConfig+0x310>)
 8005a6e:	4293      	cmp	r3, r2
 8005a70:	d138      	bne.n	8005ae4 <UART_SetConfig+0x154>
 8005a72:	4b8a      	ldr	r3, [pc, #552]	; (8005c9c <UART_SetConfig+0x30c>)
 8005a74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a78:	f003 030c 	and.w	r3, r3, #12
 8005a7c:	2b0c      	cmp	r3, #12
 8005a7e:	d82d      	bhi.n	8005adc <UART_SetConfig+0x14c>
 8005a80:	a201      	add	r2, pc, #4	; (adr r2, 8005a88 <UART_SetConfig+0xf8>)
 8005a82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a86:	bf00      	nop
 8005a88:	08005abd 	.word	0x08005abd
 8005a8c:	08005add 	.word	0x08005add
 8005a90:	08005add 	.word	0x08005add
 8005a94:	08005add 	.word	0x08005add
 8005a98:	08005acd 	.word	0x08005acd
 8005a9c:	08005add 	.word	0x08005add
 8005aa0:	08005add 	.word	0x08005add
 8005aa4:	08005add 	.word	0x08005add
 8005aa8:	08005ac5 	.word	0x08005ac5
 8005aac:	08005add 	.word	0x08005add
 8005ab0:	08005add 	.word	0x08005add
 8005ab4:	08005add 	.word	0x08005add
 8005ab8:	08005ad5 	.word	0x08005ad5
 8005abc:	2300      	movs	r3, #0
 8005abe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005ac2:	e042      	b.n	8005b4a <UART_SetConfig+0x1ba>
 8005ac4:	2302      	movs	r3, #2
 8005ac6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005aca:	e03e      	b.n	8005b4a <UART_SetConfig+0x1ba>
 8005acc:	2304      	movs	r3, #4
 8005ace:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005ad2:	e03a      	b.n	8005b4a <UART_SetConfig+0x1ba>
 8005ad4:	2308      	movs	r3, #8
 8005ad6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005ada:	e036      	b.n	8005b4a <UART_SetConfig+0x1ba>
 8005adc:	2310      	movs	r3, #16
 8005ade:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005ae2:	e032      	b.n	8005b4a <UART_SetConfig+0x1ba>
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	4a6a      	ldr	r2, [pc, #424]	; (8005c94 <UART_SetConfig+0x304>)
 8005aea:	4293      	cmp	r3, r2
 8005aec:	d12a      	bne.n	8005b44 <UART_SetConfig+0x1b4>
 8005aee:	4b6b      	ldr	r3, [pc, #428]	; (8005c9c <UART_SetConfig+0x30c>)
 8005af0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005af4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005af8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005afc:	d01a      	beq.n	8005b34 <UART_SetConfig+0x1a4>
 8005afe:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005b02:	d81b      	bhi.n	8005b3c <UART_SetConfig+0x1ac>
 8005b04:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005b08:	d00c      	beq.n	8005b24 <UART_SetConfig+0x194>
 8005b0a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005b0e:	d815      	bhi.n	8005b3c <UART_SetConfig+0x1ac>
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d003      	beq.n	8005b1c <UART_SetConfig+0x18c>
 8005b14:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005b18:	d008      	beq.n	8005b2c <UART_SetConfig+0x19c>
 8005b1a:	e00f      	b.n	8005b3c <UART_SetConfig+0x1ac>
 8005b1c:	2300      	movs	r3, #0
 8005b1e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005b22:	e012      	b.n	8005b4a <UART_SetConfig+0x1ba>
 8005b24:	2302      	movs	r3, #2
 8005b26:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005b2a:	e00e      	b.n	8005b4a <UART_SetConfig+0x1ba>
 8005b2c:	2304      	movs	r3, #4
 8005b2e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005b32:	e00a      	b.n	8005b4a <UART_SetConfig+0x1ba>
 8005b34:	2308      	movs	r3, #8
 8005b36:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005b3a:	e006      	b.n	8005b4a <UART_SetConfig+0x1ba>
 8005b3c:	2310      	movs	r3, #16
 8005b3e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005b42:	e002      	b.n	8005b4a <UART_SetConfig+0x1ba>
 8005b44:	2310      	movs	r3, #16
 8005b46:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	4a51      	ldr	r2, [pc, #324]	; (8005c94 <UART_SetConfig+0x304>)
 8005b50:	4293      	cmp	r3, r2
 8005b52:	d17a      	bne.n	8005c4a <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005b54:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005b58:	2b08      	cmp	r3, #8
 8005b5a:	d824      	bhi.n	8005ba6 <UART_SetConfig+0x216>
 8005b5c:	a201      	add	r2, pc, #4	; (adr r2, 8005b64 <UART_SetConfig+0x1d4>)
 8005b5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b62:	bf00      	nop
 8005b64:	08005b89 	.word	0x08005b89
 8005b68:	08005ba7 	.word	0x08005ba7
 8005b6c:	08005b91 	.word	0x08005b91
 8005b70:	08005ba7 	.word	0x08005ba7
 8005b74:	08005b97 	.word	0x08005b97
 8005b78:	08005ba7 	.word	0x08005ba7
 8005b7c:	08005ba7 	.word	0x08005ba7
 8005b80:	08005ba7 	.word	0x08005ba7
 8005b84:	08005b9f 	.word	0x08005b9f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005b88:	f7fe fbc4 	bl	8004314 <HAL_RCC_GetPCLK1Freq>
 8005b8c:	61f8      	str	r0, [r7, #28]
        break;
 8005b8e:	e010      	b.n	8005bb2 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005b90:	4b44      	ldr	r3, [pc, #272]	; (8005ca4 <UART_SetConfig+0x314>)
 8005b92:	61fb      	str	r3, [r7, #28]
        break;
 8005b94:	e00d      	b.n	8005bb2 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005b96:	f7fe fb25 	bl	80041e4 <HAL_RCC_GetSysClockFreq>
 8005b9a:	61f8      	str	r0, [r7, #28]
        break;
 8005b9c:	e009      	b.n	8005bb2 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005b9e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005ba2:	61fb      	str	r3, [r7, #28]
        break;
 8005ba4:	e005      	b.n	8005bb2 <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 8005ba6:	2300      	movs	r3, #0
 8005ba8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005baa:	2301      	movs	r3, #1
 8005bac:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005bb0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005bb2:	69fb      	ldr	r3, [r7, #28]
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	f000 8107 	beq.w	8005dc8 <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	685a      	ldr	r2, [r3, #4]
 8005bbe:	4613      	mov	r3, r2
 8005bc0:	005b      	lsls	r3, r3, #1
 8005bc2:	4413      	add	r3, r2
 8005bc4:	69fa      	ldr	r2, [r7, #28]
 8005bc6:	429a      	cmp	r2, r3
 8005bc8:	d305      	bcc.n	8005bd6 <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	685b      	ldr	r3, [r3, #4]
 8005bce:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005bd0:	69fa      	ldr	r2, [r7, #28]
 8005bd2:	429a      	cmp	r2, r3
 8005bd4:	d903      	bls.n	8005bde <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 8005bd6:	2301      	movs	r3, #1
 8005bd8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005bdc:	e0f4      	b.n	8005dc8 <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8005bde:	69fb      	ldr	r3, [r7, #28]
 8005be0:	2200      	movs	r2, #0
 8005be2:	461c      	mov	r4, r3
 8005be4:	4615      	mov	r5, r2
 8005be6:	f04f 0200 	mov.w	r2, #0
 8005bea:	f04f 0300 	mov.w	r3, #0
 8005bee:	022b      	lsls	r3, r5, #8
 8005bf0:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8005bf4:	0222      	lsls	r2, r4, #8
 8005bf6:	68f9      	ldr	r1, [r7, #12]
 8005bf8:	6849      	ldr	r1, [r1, #4]
 8005bfa:	0849      	lsrs	r1, r1, #1
 8005bfc:	2000      	movs	r0, #0
 8005bfe:	4688      	mov	r8, r1
 8005c00:	4681      	mov	r9, r0
 8005c02:	eb12 0a08 	adds.w	sl, r2, r8
 8005c06:	eb43 0b09 	adc.w	fp, r3, r9
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	685b      	ldr	r3, [r3, #4]
 8005c0e:	2200      	movs	r2, #0
 8005c10:	603b      	str	r3, [r7, #0]
 8005c12:	607a      	str	r2, [r7, #4]
 8005c14:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005c18:	4650      	mov	r0, sl
 8005c1a:	4659      	mov	r1, fp
 8005c1c:	f7fa fe96 	bl	800094c <__aeabi_uldivmod>
 8005c20:	4602      	mov	r2, r0
 8005c22:	460b      	mov	r3, r1
 8005c24:	4613      	mov	r3, r2
 8005c26:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005c28:	69bb      	ldr	r3, [r7, #24]
 8005c2a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005c2e:	d308      	bcc.n	8005c42 <UART_SetConfig+0x2b2>
 8005c30:	69bb      	ldr	r3, [r7, #24]
 8005c32:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005c36:	d204      	bcs.n	8005c42 <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	69ba      	ldr	r2, [r7, #24]
 8005c3e:	60da      	str	r2, [r3, #12]
 8005c40:	e0c2      	b.n	8005dc8 <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 8005c42:	2301      	movs	r3, #1
 8005c44:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005c48:	e0be      	b.n	8005dc8 <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	69db      	ldr	r3, [r3, #28]
 8005c4e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005c52:	d16a      	bne.n	8005d2a <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 8005c54:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005c58:	2b08      	cmp	r3, #8
 8005c5a:	d834      	bhi.n	8005cc6 <UART_SetConfig+0x336>
 8005c5c:	a201      	add	r2, pc, #4	; (adr r2, 8005c64 <UART_SetConfig+0x2d4>)
 8005c5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c62:	bf00      	nop
 8005c64:	08005c89 	.word	0x08005c89
 8005c68:	08005ca9 	.word	0x08005ca9
 8005c6c:	08005cb1 	.word	0x08005cb1
 8005c70:	08005cc7 	.word	0x08005cc7
 8005c74:	08005cb7 	.word	0x08005cb7
 8005c78:	08005cc7 	.word	0x08005cc7
 8005c7c:	08005cc7 	.word	0x08005cc7
 8005c80:	08005cc7 	.word	0x08005cc7
 8005c84:	08005cbf 	.word	0x08005cbf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005c88:	f7fe fb44 	bl	8004314 <HAL_RCC_GetPCLK1Freq>
 8005c8c:	61f8      	str	r0, [r7, #28]
        break;
 8005c8e:	e020      	b.n	8005cd2 <UART_SetConfig+0x342>
 8005c90:	efff69f3 	.word	0xefff69f3
 8005c94:	40008000 	.word	0x40008000
 8005c98:	40013800 	.word	0x40013800
 8005c9c:	40021000 	.word	0x40021000
 8005ca0:	40004400 	.word	0x40004400
 8005ca4:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005ca8:	f7fe fb4a 	bl	8004340 <HAL_RCC_GetPCLK2Freq>
 8005cac:	61f8      	str	r0, [r7, #28]
        break;
 8005cae:	e010      	b.n	8005cd2 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005cb0:	4b4c      	ldr	r3, [pc, #304]	; (8005de4 <UART_SetConfig+0x454>)
 8005cb2:	61fb      	str	r3, [r7, #28]
        break;
 8005cb4:	e00d      	b.n	8005cd2 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005cb6:	f7fe fa95 	bl	80041e4 <HAL_RCC_GetSysClockFreq>
 8005cba:	61f8      	str	r0, [r7, #28]
        break;
 8005cbc:	e009      	b.n	8005cd2 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005cbe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005cc2:	61fb      	str	r3, [r7, #28]
        break;
 8005cc4:	e005      	b.n	8005cd2 <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 8005cc6:	2300      	movs	r3, #0
 8005cc8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005cca:	2301      	movs	r3, #1
 8005ccc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005cd0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005cd2:	69fb      	ldr	r3, [r7, #28]
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d077      	beq.n	8005dc8 <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005cd8:	69fb      	ldr	r3, [r7, #28]
 8005cda:	005a      	lsls	r2, r3, #1
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	685b      	ldr	r3, [r3, #4]
 8005ce0:	085b      	lsrs	r3, r3, #1
 8005ce2:	441a      	add	r2, r3
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	685b      	ldr	r3, [r3, #4]
 8005ce8:	fbb2 f3f3 	udiv	r3, r2, r3
 8005cec:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005cee:	69bb      	ldr	r3, [r7, #24]
 8005cf0:	2b0f      	cmp	r3, #15
 8005cf2:	d916      	bls.n	8005d22 <UART_SetConfig+0x392>
 8005cf4:	69bb      	ldr	r3, [r7, #24]
 8005cf6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005cfa:	d212      	bcs.n	8005d22 <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005cfc:	69bb      	ldr	r3, [r7, #24]
 8005cfe:	b29b      	uxth	r3, r3
 8005d00:	f023 030f 	bic.w	r3, r3, #15
 8005d04:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005d06:	69bb      	ldr	r3, [r7, #24]
 8005d08:	085b      	lsrs	r3, r3, #1
 8005d0a:	b29b      	uxth	r3, r3
 8005d0c:	f003 0307 	and.w	r3, r3, #7
 8005d10:	b29a      	uxth	r2, r3
 8005d12:	8afb      	ldrh	r3, [r7, #22]
 8005d14:	4313      	orrs	r3, r2
 8005d16:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	8afa      	ldrh	r2, [r7, #22]
 8005d1e:	60da      	str	r2, [r3, #12]
 8005d20:	e052      	b.n	8005dc8 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8005d22:	2301      	movs	r3, #1
 8005d24:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005d28:	e04e      	b.n	8005dc8 <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005d2a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005d2e:	2b08      	cmp	r3, #8
 8005d30:	d827      	bhi.n	8005d82 <UART_SetConfig+0x3f2>
 8005d32:	a201      	add	r2, pc, #4	; (adr r2, 8005d38 <UART_SetConfig+0x3a8>)
 8005d34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d38:	08005d5d 	.word	0x08005d5d
 8005d3c:	08005d65 	.word	0x08005d65
 8005d40:	08005d6d 	.word	0x08005d6d
 8005d44:	08005d83 	.word	0x08005d83
 8005d48:	08005d73 	.word	0x08005d73
 8005d4c:	08005d83 	.word	0x08005d83
 8005d50:	08005d83 	.word	0x08005d83
 8005d54:	08005d83 	.word	0x08005d83
 8005d58:	08005d7b 	.word	0x08005d7b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005d5c:	f7fe fada 	bl	8004314 <HAL_RCC_GetPCLK1Freq>
 8005d60:	61f8      	str	r0, [r7, #28]
        break;
 8005d62:	e014      	b.n	8005d8e <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005d64:	f7fe faec 	bl	8004340 <HAL_RCC_GetPCLK2Freq>
 8005d68:	61f8      	str	r0, [r7, #28]
        break;
 8005d6a:	e010      	b.n	8005d8e <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005d6c:	4b1d      	ldr	r3, [pc, #116]	; (8005de4 <UART_SetConfig+0x454>)
 8005d6e:	61fb      	str	r3, [r7, #28]
        break;
 8005d70:	e00d      	b.n	8005d8e <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005d72:	f7fe fa37 	bl	80041e4 <HAL_RCC_GetSysClockFreq>
 8005d76:	61f8      	str	r0, [r7, #28]
        break;
 8005d78:	e009      	b.n	8005d8e <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005d7a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005d7e:	61fb      	str	r3, [r7, #28]
        break;
 8005d80:	e005      	b.n	8005d8e <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 8005d82:	2300      	movs	r3, #0
 8005d84:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005d86:	2301      	movs	r3, #1
 8005d88:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005d8c:	bf00      	nop
    }

    if (pclk != 0U)
 8005d8e:	69fb      	ldr	r3, [r7, #28]
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d019      	beq.n	8005dc8 <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	685b      	ldr	r3, [r3, #4]
 8005d98:	085a      	lsrs	r2, r3, #1
 8005d9a:	69fb      	ldr	r3, [r7, #28]
 8005d9c:	441a      	add	r2, r3
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	685b      	ldr	r3, [r3, #4]
 8005da2:	fbb2 f3f3 	udiv	r3, r2, r3
 8005da6:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005da8:	69bb      	ldr	r3, [r7, #24]
 8005daa:	2b0f      	cmp	r3, #15
 8005dac:	d909      	bls.n	8005dc2 <UART_SetConfig+0x432>
 8005dae:	69bb      	ldr	r3, [r7, #24]
 8005db0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005db4:	d205      	bcs.n	8005dc2 <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005db6:	69bb      	ldr	r3, [r7, #24]
 8005db8:	b29a      	uxth	r2, r3
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	60da      	str	r2, [r3, #12]
 8005dc0:	e002      	b.n	8005dc8 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8005dc2:	2301      	movs	r3, #1
 8005dc4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	2200      	movs	r2, #0
 8005dcc:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	2200      	movs	r2, #0
 8005dd2:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8005dd4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8005dd8:	4618      	mov	r0, r3
 8005dda:	3728      	adds	r7, #40	; 0x28
 8005ddc:	46bd      	mov	sp, r7
 8005dde:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005de2:	bf00      	nop
 8005de4:	00f42400 	.word	0x00f42400

08005de8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005de8:	b480      	push	{r7}
 8005dea:	b083      	sub	sp, #12
 8005dec:	af00      	add	r7, sp, #0
 8005dee:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005df4:	f003 0301 	and.w	r3, r3, #1
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d00a      	beq.n	8005e12 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	685b      	ldr	r3, [r3, #4]
 8005e02:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	430a      	orrs	r2, r1
 8005e10:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e16:	f003 0302 	and.w	r3, r3, #2
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d00a      	beq.n	8005e34 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	685b      	ldr	r3, [r3, #4]
 8005e24:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	430a      	orrs	r2, r1
 8005e32:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e38:	f003 0304 	and.w	r3, r3, #4
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d00a      	beq.n	8005e56 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	685b      	ldr	r3, [r3, #4]
 8005e46:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	430a      	orrs	r2, r1
 8005e54:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e5a:	f003 0308 	and.w	r3, r3, #8
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d00a      	beq.n	8005e78 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	685b      	ldr	r3, [r3, #4]
 8005e68:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	430a      	orrs	r2, r1
 8005e76:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e7c:	f003 0310 	and.w	r3, r3, #16
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d00a      	beq.n	8005e9a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	689b      	ldr	r3, [r3, #8]
 8005e8a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	430a      	orrs	r2, r1
 8005e98:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e9e:	f003 0320 	and.w	r3, r3, #32
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d00a      	beq.n	8005ebc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	689b      	ldr	r3, [r3, #8]
 8005eac:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	430a      	orrs	r2, r1
 8005eba:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ec0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d01a      	beq.n	8005efe <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	685b      	ldr	r3, [r3, #4]
 8005ece:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	430a      	orrs	r2, r1
 8005edc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ee2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005ee6:	d10a      	bne.n	8005efe <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	685b      	ldr	r3, [r3, #4]
 8005eee:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	430a      	orrs	r2, r1
 8005efc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d00a      	beq.n	8005f20 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	685b      	ldr	r3, [r3, #4]
 8005f10:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	430a      	orrs	r2, r1
 8005f1e:	605a      	str	r2, [r3, #4]
  }
}
 8005f20:	bf00      	nop
 8005f22:	370c      	adds	r7, #12
 8005f24:	46bd      	mov	sp, r7
 8005f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f2a:	4770      	bx	lr

08005f2c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005f2c:	b580      	push	{r7, lr}
 8005f2e:	b086      	sub	sp, #24
 8005f30:	af02      	add	r7, sp, #8
 8005f32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	2200      	movs	r2, #0
 8005f38:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005f3c:	f7fc fee4 	bl	8002d08 <HAL_GetTick>
 8005f40:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	f003 0308 	and.w	r3, r3, #8
 8005f4c:	2b08      	cmp	r3, #8
 8005f4e:	d10e      	bne.n	8005f6e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005f50:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005f54:	9300      	str	r3, [sp, #0]
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	2200      	movs	r2, #0
 8005f5a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005f5e:	6878      	ldr	r0, [r7, #4]
 8005f60:	f000 f82d 	bl	8005fbe <UART_WaitOnFlagUntilTimeout>
 8005f64:	4603      	mov	r3, r0
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d001      	beq.n	8005f6e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005f6a:	2303      	movs	r3, #3
 8005f6c:	e023      	b.n	8005fb6 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	f003 0304 	and.w	r3, r3, #4
 8005f78:	2b04      	cmp	r3, #4
 8005f7a:	d10e      	bne.n	8005f9a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005f7c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005f80:	9300      	str	r3, [sp, #0]
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	2200      	movs	r2, #0
 8005f86:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005f8a:	6878      	ldr	r0, [r7, #4]
 8005f8c:	f000 f817 	bl	8005fbe <UART_WaitOnFlagUntilTimeout>
 8005f90:	4603      	mov	r3, r0
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d001      	beq.n	8005f9a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005f96:	2303      	movs	r3, #3
 8005f98:	e00d      	b.n	8005fb6 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	2220      	movs	r2, #32
 8005f9e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	2220      	movs	r2, #32
 8005fa4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	2200      	movs	r2, #0
 8005faa:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	2200      	movs	r2, #0
 8005fb0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8005fb4:	2300      	movs	r3, #0
}
 8005fb6:	4618      	mov	r0, r3
 8005fb8:	3710      	adds	r7, #16
 8005fba:	46bd      	mov	sp, r7
 8005fbc:	bd80      	pop	{r7, pc}

08005fbe <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005fbe:	b580      	push	{r7, lr}
 8005fc0:	b09c      	sub	sp, #112	; 0x70
 8005fc2:	af00      	add	r7, sp, #0
 8005fc4:	60f8      	str	r0, [r7, #12]
 8005fc6:	60b9      	str	r1, [r7, #8]
 8005fc8:	603b      	str	r3, [r7, #0]
 8005fca:	4613      	mov	r3, r2
 8005fcc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005fce:	e0a5      	b.n	800611c <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005fd0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005fd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fd6:	f000 80a1 	beq.w	800611c <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005fda:	f7fc fe95 	bl	8002d08 <HAL_GetTick>
 8005fde:	4602      	mov	r2, r0
 8005fe0:	683b      	ldr	r3, [r7, #0]
 8005fe2:	1ad3      	subs	r3, r2, r3
 8005fe4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8005fe6:	429a      	cmp	r2, r3
 8005fe8:	d302      	bcc.n	8005ff0 <UART_WaitOnFlagUntilTimeout+0x32>
 8005fea:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d13e      	bne.n	800606e <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ff6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005ff8:	e853 3f00 	ldrex	r3, [r3]
 8005ffc:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005ffe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006000:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006004:	667b      	str	r3, [r7, #100]	; 0x64
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	461a      	mov	r2, r3
 800600c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800600e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006010:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006012:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006014:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006016:	e841 2300 	strex	r3, r2, [r1]
 800601a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800601c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800601e:	2b00      	cmp	r3, #0
 8006020:	d1e6      	bne.n	8005ff0 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	3308      	adds	r3, #8
 8006028:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800602a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800602c:	e853 3f00 	ldrex	r3, [r3]
 8006030:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006032:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006034:	f023 0301 	bic.w	r3, r3, #1
 8006038:	663b      	str	r3, [r7, #96]	; 0x60
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	3308      	adds	r3, #8
 8006040:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006042:	64ba      	str	r2, [r7, #72]	; 0x48
 8006044:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006046:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006048:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800604a:	e841 2300 	strex	r3, r2, [r1]
 800604e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006050:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006052:	2b00      	cmp	r3, #0
 8006054:	d1e5      	bne.n	8006022 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	2220      	movs	r2, #32
 800605a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	2220      	movs	r2, #32
 8006060:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	2200      	movs	r2, #0
 8006066:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800606a:	2303      	movs	r3, #3
 800606c:	e067      	b.n	800613e <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	f003 0304 	and.w	r3, r3, #4
 8006078:	2b00      	cmp	r3, #0
 800607a:	d04f      	beq.n	800611c <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	69db      	ldr	r3, [r3, #28]
 8006082:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006086:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800608a:	d147      	bne.n	800611c <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006094:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800609c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800609e:	e853 3f00 	ldrex	r3, [r3]
 80060a2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80060a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060a6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80060aa:	66fb      	str	r3, [r7, #108]	; 0x6c
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	461a      	mov	r2, r3
 80060b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80060b4:	637b      	str	r3, [r7, #52]	; 0x34
 80060b6:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060b8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80060ba:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80060bc:	e841 2300 	strex	r3, r2, [r1]
 80060c0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80060c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d1e6      	bne.n	8006096 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	3308      	adds	r3, #8
 80060ce:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060d0:	697b      	ldr	r3, [r7, #20]
 80060d2:	e853 3f00 	ldrex	r3, [r3]
 80060d6:	613b      	str	r3, [r7, #16]
   return(result);
 80060d8:	693b      	ldr	r3, [r7, #16]
 80060da:	f023 0301 	bic.w	r3, r3, #1
 80060de:	66bb      	str	r3, [r7, #104]	; 0x68
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	3308      	adds	r3, #8
 80060e6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80060e8:	623a      	str	r2, [r7, #32]
 80060ea:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060ec:	69f9      	ldr	r1, [r7, #28]
 80060ee:	6a3a      	ldr	r2, [r7, #32]
 80060f0:	e841 2300 	strex	r3, r2, [r1]
 80060f4:	61bb      	str	r3, [r7, #24]
   return(result);
 80060f6:	69bb      	ldr	r3, [r7, #24]
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d1e5      	bne.n	80060c8 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	2220      	movs	r2, #32
 8006100:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	2220      	movs	r2, #32
 8006106:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	2220      	movs	r2, #32
 800610c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	2200      	movs	r2, #0
 8006114:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8006118:	2303      	movs	r3, #3
 800611a:	e010      	b.n	800613e <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	69da      	ldr	r2, [r3, #28]
 8006122:	68bb      	ldr	r3, [r7, #8]
 8006124:	4013      	ands	r3, r2
 8006126:	68ba      	ldr	r2, [r7, #8]
 8006128:	429a      	cmp	r2, r3
 800612a:	bf0c      	ite	eq
 800612c:	2301      	moveq	r3, #1
 800612e:	2300      	movne	r3, #0
 8006130:	b2db      	uxtb	r3, r3
 8006132:	461a      	mov	r2, r3
 8006134:	79fb      	ldrb	r3, [r7, #7]
 8006136:	429a      	cmp	r2, r3
 8006138:	f43f af4a 	beq.w	8005fd0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800613c:	2300      	movs	r3, #0
}
 800613e:	4618      	mov	r0, r3
 8006140:	3770      	adds	r7, #112	; 0x70
 8006142:	46bd      	mov	sp, r7
 8006144:	bd80      	pop	{r7, pc}
	...

08006148 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006148:	b480      	push	{r7}
 800614a:	b097      	sub	sp, #92	; 0x5c
 800614c:	af00      	add	r7, sp, #0
 800614e:	60f8      	str	r0, [r7, #12]
 8006150:	60b9      	str	r1, [r7, #8]
 8006152:	4613      	mov	r3, r2
 8006154:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	68ba      	ldr	r2, [r7, #8]
 800615a:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	88fa      	ldrh	r2, [r7, #6]
 8006160:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	88fa      	ldrh	r2, [r7, #6]
 8006168:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	2200      	movs	r2, #0
 8006170:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	689b      	ldr	r3, [r3, #8]
 8006176:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800617a:	d10e      	bne.n	800619a <UART_Start_Receive_IT+0x52>
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	691b      	ldr	r3, [r3, #16]
 8006180:	2b00      	cmp	r3, #0
 8006182:	d105      	bne.n	8006190 <UART_Start_Receive_IT+0x48>
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	f240 12ff 	movw	r2, #511	; 0x1ff
 800618a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800618e:	e02d      	b.n	80061ec <UART_Start_Receive_IT+0xa4>
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	22ff      	movs	r2, #255	; 0xff
 8006194:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006198:	e028      	b.n	80061ec <UART_Start_Receive_IT+0xa4>
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	689b      	ldr	r3, [r3, #8]
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d10d      	bne.n	80061be <UART_Start_Receive_IT+0x76>
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	691b      	ldr	r3, [r3, #16]
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d104      	bne.n	80061b4 <UART_Start_Receive_IT+0x6c>
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	22ff      	movs	r2, #255	; 0xff
 80061ae:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80061b2:	e01b      	b.n	80061ec <UART_Start_Receive_IT+0xa4>
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	227f      	movs	r2, #127	; 0x7f
 80061b8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80061bc:	e016      	b.n	80061ec <UART_Start_Receive_IT+0xa4>
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	689b      	ldr	r3, [r3, #8]
 80061c2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80061c6:	d10d      	bne.n	80061e4 <UART_Start_Receive_IT+0x9c>
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	691b      	ldr	r3, [r3, #16]
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d104      	bne.n	80061da <UART_Start_Receive_IT+0x92>
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	227f      	movs	r2, #127	; 0x7f
 80061d4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80061d8:	e008      	b.n	80061ec <UART_Start_Receive_IT+0xa4>
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	223f      	movs	r2, #63	; 0x3f
 80061de:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80061e2:	e003      	b.n	80061ec <UART_Start_Receive_IT+0xa4>
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	2200      	movs	r2, #0
 80061e8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	2200      	movs	r2, #0
 80061f0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	2222      	movs	r2, #34	; 0x22
 80061f8:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	3308      	adds	r3, #8
 8006200:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006202:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006204:	e853 3f00 	ldrex	r3, [r3]
 8006208:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800620a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800620c:	f043 0301 	orr.w	r3, r3, #1
 8006210:	657b      	str	r3, [r7, #84]	; 0x54
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	3308      	adds	r3, #8
 8006218:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800621a:	64ba      	str	r2, [r7, #72]	; 0x48
 800621c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800621e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006220:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006222:	e841 2300 	strex	r3, r2, [r1]
 8006226:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006228:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800622a:	2b00      	cmp	r3, #0
 800622c:	d1e5      	bne.n	80061fa <UART_Start_Receive_IT+0xb2>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	689b      	ldr	r3, [r3, #8]
 8006232:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006236:	d107      	bne.n	8006248 <UART_Start_Receive_IT+0x100>
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	691b      	ldr	r3, [r3, #16]
 800623c:	2b00      	cmp	r3, #0
 800623e:	d103      	bne.n	8006248 <UART_Start_Receive_IT+0x100>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	4a24      	ldr	r2, [pc, #144]	; (80062d4 <UART_Start_Receive_IT+0x18c>)
 8006244:	665a      	str	r2, [r3, #100]	; 0x64
 8006246:	e002      	b.n	800624e <UART_Start_Receive_IT+0x106>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	4a23      	ldr	r2, [pc, #140]	; (80062d8 <UART_Start_Receive_IT+0x190>)
 800624c:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	2200      	movs	r2, #0
 8006252:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	691b      	ldr	r3, [r3, #16]
 800625a:	2b00      	cmp	r3, #0
 800625c:	d019      	beq.n	8006292 <UART_Start_Receive_IT+0x14a>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006264:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006266:	e853 3f00 	ldrex	r3, [r3]
 800626a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800626c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800626e:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8006272:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	461a      	mov	r2, r3
 800627a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800627c:	637b      	str	r3, [r7, #52]	; 0x34
 800627e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006280:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006282:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006284:	e841 2300 	strex	r3, r2, [r1]
 8006288:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800628a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800628c:	2b00      	cmp	r3, #0
 800628e:	d1e6      	bne.n	800625e <UART_Start_Receive_IT+0x116>
 8006290:	e018      	b.n	80062c4 <UART_Start_Receive_IT+0x17c>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006298:	697b      	ldr	r3, [r7, #20]
 800629a:	e853 3f00 	ldrex	r3, [r3]
 800629e:	613b      	str	r3, [r7, #16]
   return(result);
 80062a0:	693b      	ldr	r3, [r7, #16]
 80062a2:	f043 0320 	orr.w	r3, r3, #32
 80062a6:	653b      	str	r3, [r7, #80]	; 0x50
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	461a      	mov	r2, r3
 80062ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80062b0:	623b      	str	r3, [r7, #32]
 80062b2:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062b4:	69f9      	ldr	r1, [r7, #28]
 80062b6:	6a3a      	ldr	r2, [r7, #32]
 80062b8:	e841 2300 	strex	r3, r2, [r1]
 80062bc:	61bb      	str	r3, [r7, #24]
   return(result);
 80062be:	69bb      	ldr	r3, [r7, #24]
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d1e6      	bne.n	8006292 <UART_Start_Receive_IT+0x14a>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 80062c4:	2300      	movs	r3, #0
}
 80062c6:	4618      	mov	r0, r3
 80062c8:	375c      	adds	r7, #92	; 0x5c
 80062ca:	46bd      	mov	sp, r7
 80062cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d0:	4770      	bx	lr
 80062d2:	bf00      	nop
 80062d4:	08006a6b 	.word	0x08006a6b
 80062d8:	0800690b 	.word	0x0800690b

080062dc <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80062dc:	b580      	push	{r7, lr}
 80062de:	b096      	sub	sp, #88	; 0x58
 80062e0:	af00      	add	r7, sp, #0
 80062e2:	60f8      	str	r0, [r7, #12]
 80062e4:	60b9      	str	r1, [r7, #8]
 80062e6:	4613      	mov	r3, r2
 80062e8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	68ba      	ldr	r2, [r7, #8]
 80062ee:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	88fa      	ldrh	r2, [r7, #6]
 80062f4:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	2200      	movs	r2, #0
 80062fc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	2222      	movs	r2, #34	; 0x22
 8006304:	67da      	str	r2, [r3, #124]	; 0x7c

  if (huart->hdmarx != NULL)
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800630a:	2b00      	cmp	r3, #0
 800630c:	d02b      	beq.n	8006366 <UART_Start_Receive_DMA+0x8a>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006312:	4a42      	ldr	r2, [pc, #264]	; (800641c <UART_Start_Receive_DMA+0x140>)
 8006314:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800631a:	4a41      	ldr	r2, [pc, #260]	; (8006420 <UART_Start_Receive_DMA+0x144>)
 800631c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006322:	4a40      	ldr	r2, [pc, #256]	; (8006424 <UART_Start_Receive_DMA+0x148>)
 8006324:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800632a:	2200      	movs	r2, #0
 800632c:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	6f18      	ldr	r0, [r3, #112]	; 0x70
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	3324      	adds	r3, #36	; 0x24
 8006338:	4619      	mov	r1, r3
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800633e:	461a      	mov	r2, r3
 8006340:	88fb      	ldrh	r3, [r7, #6]
 8006342:	f7fc fe87 	bl	8003054 <HAL_DMA_Start_IT>
 8006346:	4603      	mov	r3, r0
 8006348:	2b00      	cmp	r3, #0
 800634a:	d00c      	beq.n	8006366 <UART_Start_Receive_DMA+0x8a>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	2210      	movs	r2, #16
 8006350:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	2200      	movs	r2, #0
 8006358:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	2220      	movs	r2, #32
 8006360:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_ERROR;
 8006362:	2301      	movs	r3, #1
 8006364:	e055      	b.n	8006412 <UART_Start_Receive_DMA+0x136>
    }
  }
  __HAL_UNLOCK(huart);
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	2200      	movs	r2, #0
 800636a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	691b      	ldr	r3, [r3, #16]
 8006372:	2b00      	cmp	r3, #0
 8006374:	d018      	beq.n	80063a8 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800637c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800637e:	e853 3f00 	ldrex	r3, [r3]
 8006382:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006384:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006386:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800638a:	657b      	str	r3, [r7, #84]	; 0x54
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	461a      	mov	r2, r3
 8006392:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006394:	64bb      	str	r3, [r7, #72]	; 0x48
 8006396:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006398:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800639a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800639c:	e841 2300 	strex	r3, r2, [r1]
 80063a0:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80063a2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d1e6      	bne.n	8006376 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	3308      	adds	r3, #8
 80063ae:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063b2:	e853 3f00 	ldrex	r3, [r3]
 80063b6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80063b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063ba:	f043 0301 	orr.w	r3, r3, #1
 80063be:	653b      	str	r3, [r7, #80]	; 0x50
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	3308      	adds	r3, #8
 80063c6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80063c8:	637a      	str	r2, [r7, #52]	; 0x34
 80063ca:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063cc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80063ce:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80063d0:	e841 2300 	strex	r3, r2, [r1]
 80063d4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80063d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d1e5      	bne.n	80063a8 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	3308      	adds	r3, #8
 80063e2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063e4:	697b      	ldr	r3, [r7, #20]
 80063e6:	e853 3f00 	ldrex	r3, [r3]
 80063ea:	613b      	str	r3, [r7, #16]
   return(result);
 80063ec:	693b      	ldr	r3, [r7, #16]
 80063ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80063f2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	3308      	adds	r3, #8
 80063fa:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80063fc:	623a      	str	r2, [r7, #32]
 80063fe:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006400:	69f9      	ldr	r1, [r7, #28]
 8006402:	6a3a      	ldr	r2, [r7, #32]
 8006404:	e841 2300 	strex	r3, r2, [r1]
 8006408:	61bb      	str	r3, [r7, #24]
   return(result);
 800640a:	69bb      	ldr	r3, [r7, #24]
 800640c:	2b00      	cmp	r3, #0
 800640e:	d1e5      	bne.n	80063dc <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 8006410:	2300      	movs	r3, #0
}
 8006412:	4618      	mov	r0, r3
 8006414:	3758      	adds	r7, #88	; 0x58
 8006416:	46bd      	mov	sp, r7
 8006418:	bd80      	pop	{r7, pc}
 800641a:	bf00      	nop
 800641c:	0800653b 	.word	0x0800653b
 8006420:	0800665f 	.word	0x0800665f
 8006424:	08006697 	.word	0x08006697

08006428 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8006428:	b480      	push	{r7}
 800642a:	b089      	sub	sp, #36	; 0x24
 800642c:	af00      	add	r7, sp, #0
 800642e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
#else
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	e853 3f00 	ldrex	r3, [r3]
 800643c:	60bb      	str	r3, [r7, #8]
   return(result);
 800643e:	68bb      	ldr	r3, [r7, #8]
 8006440:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8006444:	61fb      	str	r3, [r7, #28]
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	461a      	mov	r2, r3
 800644c:	69fb      	ldr	r3, [r7, #28]
 800644e:	61bb      	str	r3, [r7, #24]
 8006450:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006452:	6979      	ldr	r1, [r7, #20]
 8006454:	69ba      	ldr	r2, [r7, #24]
 8006456:	e841 2300 	strex	r3, r2, [r1]
 800645a:	613b      	str	r3, [r7, #16]
   return(result);
 800645c:	693b      	ldr	r3, [r7, #16]
 800645e:	2b00      	cmp	r3, #0
 8006460:	d1e6      	bne.n	8006430 <UART_EndTxTransfer+0x8>
#endif /* USART_CR1_FIFOEN */

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	2220      	movs	r2, #32
 8006466:	679a      	str	r2, [r3, #120]	; 0x78
}
 8006468:	bf00      	nop
 800646a:	3724      	adds	r7, #36	; 0x24
 800646c:	46bd      	mov	sp, r7
 800646e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006472:	4770      	bx	lr

08006474 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006474:	b480      	push	{r7}
 8006476:	b095      	sub	sp, #84	; 0x54
 8006478:	af00      	add	r7, sp, #0
 800647a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006482:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006484:	e853 3f00 	ldrex	r3, [r3]
 8006488:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800648a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800648c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006490:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	461a      	mov	r2, r3
 8006498:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800649a:	643b      	str	r3, [r7, #64]	; 0x40
 800649c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800649e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80064a0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80064a2:	e841 2300 	strex	r3, r2, [r1]
 80064a6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80064a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d1e6      	bne.n	800647c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	3308      	adds	r3, #8
 80064b4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064b6:	6a3b      	ldr	r3, [r7, #32]
 80064b8:	e853 3f00 	ldrex	r3, [r3]
 80064bc:	61fb      	str	r3, [r7, #28]
   return(result);
 80064be:	69fb      	ldr	r3, [r7, #28]
 80064c0:	f023 0301 	bic.w	r3, r3, #1
 80064c4:	64bb      	str	r3, [r7, #72]	; 0x48
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	3308      	adds	r3, #8
 80064cc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80064ce:	62fa      	str	r2, [r7, #44]	; 0x2c
 80064d0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064d2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80064d4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80064d6:	e841 2300 	strex	r3, r2, [r1]
 80064da:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80064dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d1e5      	bne.n	80064ae <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80064e6:	2b01      	cmp	r3, #1
 80064e8:	d118      	bne.n	800651c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	e853 3f00 	ldrex	r3, [r3]
 80064f6:	60bb      	str	r3, [r7, #8]
   return(result);
 80064f8:	68bb      	ldr	r3, [r7, #8]
 80064fa:	f023 0310 	bic.w	r3, r3, #16
 80064fe:	647b      	str	r3, [r7, #68]	; 0x44
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	461a      	mov	r2, r3
 8006506:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006508:	61bb      	str	r3, [r7, #24]
 800650a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800650c:	6979      	ldr	r1, [r7, #20]
 800650e:	69ba      	ldr	r2, [r7, #24]
 8006510:	e841 2300 	strex	r3, r2, [r1]
 8006514:	613b      	str	r3, [r7, #16]
   return(result);
 8006516:	693b      	ldr	r3, [r7, #16]
 8006518:	2b00      	cmp	r3, #0
 800651a:	d1e6      	bne.n	80064ea <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	2220      	movs	r2, #32
 8006520:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	2200      	movs	r2, #0
 8006526:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	2200      	movs	r2, #0
 800652c:	665a      	str	r2, [r3, #100]	; 0x64
}
 800652e:	bf00      	nop
 8006530:	3754      	adds	r7, #84	; 0x54
 8006532:	46bd      	mov	sp, r7
 8006534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006538:	4770      	bx	lr

0800653a <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800653a:	b580      	push	{r7, lr}
 800653c:	b09c      	sub	sp, #112	; 0x70
 800653e:	af00      	add	r7, sp, #0
 8006540:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006546:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	f003 0320 	and.w	r3, r3, #32
 8006552:	2b00      	cmp	r3, #0
 8006554:	d170      	bne.n	8006638 <UART_DMAReceiveCplt+0xfe>
  {
    huart->RxXferCount = 0U;
 8006556:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006558:	2200      	movs	r2, #0
 800655a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800655e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006564:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006566:	e853 3f00 	ldrex	r3, [r3]
 800656a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800656c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800656e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006572:	66bb      	str	r3, [r7, #104]	; 0x68
 8006574:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	461a      	mov	r2, r3
 800657a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800657c:	65bb      	str	r3, [r7, #88]	; 0x58
 800657e:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006580:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006582:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006584:	e841 2300 	strex	r3, r2, [r1]
 8006588:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800658a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800658c:	2b00      	cmp	r3, #0
 800658e:	d1e6      	bne.n	800655e <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006590:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	3308      	adds	r3, #8
 8006596:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006598:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800659a:	e853 3f00 	ldrex	r3, [r3]
 800659e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80065a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80065a2:	f023 0301 	bic.w	r3, r3, #1
 80065a6:	667b      	str	r3, [r7, #100]	; 0x64
 80065a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	3308      	adds	r3, #8
 80065ae:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80065b0:	647a      	str	r2, [r7, #68]	; 0x44
 80065b2:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065b4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80065b6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80065b8:	e841 2300 	strex	r3, r2, [r1]
 80065bc:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80065be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d1e5      	bne.n	8006590 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80065c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	3308      	adds	r3, #8
 80065ca:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065ce:	e853 3f00 	ldrex	r3, [r3]
 80065d2:	623b      	str	r3, [r7, #32]
   return(result);
 80065d4:	6a3b      	ldr	r3, [r7, #32]
 80065d6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80065da:	663b      	str	r3, [r7, #96]	; 0x60
 80065dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	3308      	adds	r3, #8
 80065e2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80065e4:	633a      	str	r2, [r7, #48]	; 0x30
 80065e6:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065e8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80065ea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80065ec:	e841 2300 	strex	r3, r2, [r1]
 80065f0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80065f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d1e5      	bne.n	80065c4 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80065f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80065fa:	2220      	movs	r2, #32
 80065fc:	67da      	str	r2, [r3, #124]	; 0x7c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80065fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006600:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006602:	2b01      	cmp	r3, #1
 8006604:	d118      	bne.n	8006638 <UART_DMAReceiveCplt+0xfe>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006606:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800660c:	693b      	ldr	r3, [r7, #16]
 800660e:	e853 3f00 	ldrex	r3, [r3]
 8006612:	60fb      	str	r3, [r7, #12]
   return(result);
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	f023 0310 	bic.w	r3, r3, #16
 800661a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800661c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	461a      	mov	r2, r3
 8006622:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006624:	61fb      	str	r3, [r7, #28]
 8006626:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006628:	69b9      	ldr	r1, [r7, #24]
 800662a:	69fa      	ldr	r2, [r7, #28]
 800662c:	e841 2300 	strex	r3, r2, [r1]
 8006630:	617b      	str	r3, [r7, #20]
   return(result);
 8006632:	697b      	ldr	r3, [r7, #20]
 8006634:	2b00      	cmp	r3, #0
 8006636:	d1e6      	bne.n	8006606 <UART_DMAReceiveCplt+0xcc>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006638:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800663a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800663c:	2b01      	cmp	r3, #1
 800663e:	d107      	bne.n	8006650 <UART_DMAReceiveCplt+0x116>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006640:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006642:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006646:	4619      	mov	r1, r3
 8006648:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800664a:	f7ff f995 	bl	8005978 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800664e:	e002      	b.n	8006656 <UART_DMAReceiveCplt+0x11c>
    HAL_UART_RxCpltCallback(huart);
 8006650:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8006652:	f7fc fabb 	bl	8002bcc <HAL_UART_RxCpltCallback>
}
 8006656:	bf00      	nop
 8006658:	3770      	adds	r7, #112	; 0x70
 800665a:	46bd      	mov	sp, r7
 800665c:	bd80      	pop	{r7, pc}

0800665e <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800665e:	b580      	push	{r7, lr}
 8006660:	b084      	sub	sp, #16
 8006662:	af00      	add	r7, sp, #0
 8006664:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800666a:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006670:	2b01      	cmp	r3, #1
 8006672:	d109      	bne.n	8006688 <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800667a:	085b      	lsrs	r3, r3, #1
 800667c:	b29b      	uxth	r3, r3
 800667e:	4619      	mov	r1, r3
 8006680:	68f8      	ldr	r0, [r7, #12]
 8006682:	f7ff f979 	bl	8005978 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006686:	e002      	b.n	800668e <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 8006688:	68f8      	ldr	r0, [r7, #12]
 800668a:	f7ff f961 	bl	8005950 <HAL_UART_RxHalfCpltCallback>
}
 800668e:	bf00      	nop
 8006690:	3710      	adds	r7, #16
 8006692:	46bd      	mov	sp, r7
 8006694:	bd80      	pop	{r7, pc}

08006696 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8006696:	b580      	push	{r7, lr}
 8006698:	b086      	sub	sp, #24
 800669a:	af00      	add	r7, sp, #0
 800669c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066a2:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80066a4:	697b      	ldr	r3, [r7, #20]
 80066a6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80066a8:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80066aa:	697b      	ldr	r3, [r7, #20]
 80066ac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80066ae:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80066b0:	697b      	ldr	r3, [r7, #20]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	689b      	ldr	r3, [r3, #8]
 80066b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80066ba:	2b80      	cmp	r3, #128	; 0x80
 80066bc:	d109      	bne.n	80066d2 <UART_DMAError+0x3c>
 80066be:	693b      	ldr	r3, [r7, #16]
 80066c0:	2b21      	cmp	r3, #33	; 0x21
 80066c2:	d106      	bne.n	80066d2 <UART_DMAError+0x3c>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 80066c4:	697b      	ldr	r3, [r7, #20]
 80066c6:	2200      	movs	r2, #0
 80066c8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 80066cc:	6978      	ldr	r0, [r7, #20]
 80066ce:	f7ff feab 	bl	8006428 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80066d2:	697b      	ldr	r3, [r7, #20]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	689b      	ldr	r3, [r3, #8]
 80066d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066dc:	2b40      	cmp	r3, #64	; 0x40
 80066de:	d109      	bne.n	80066f4 <UART_DMAError+0x5e>
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	2b22      	cmp	r3, #34	; 0x22
 80066e4:	d106      	bne.n	80066f4 <UART_DMAError+0x5e>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 80066e6:	697b      	ldr	r3, [r7, #20]
 80066e8:	2200      	movs	r2, #0
 80066ea:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 80066ee:	6978      	ldr	r0, [r7, #20]
 80066f0:	f7ff fec0 	bl	8006474 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80066f4:	697b      	ldr	r3, [r7, #20]
 80066f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80066fa:	f043 0210 	orr.w	r2, r3, #16
 80066fe:	697b      	ldr	r3, [r7, #20]
 8006700:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006704:	6978      	ldr	r0, [r7, #20]
 8006706:	f7ff f92d 	bl	8005964 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800670a:	bf00      	nop
 800670c:	3718      	adds	r7, #24
 800670e:	46bd      	mov	sp, r7
 8006710:	bd80      	pop	{r7, pc}

08006712 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006712:	b580      	push	{r7, lr}
 8006714:	b084      	sub	sp, #16
 8006716:	af00      	add	r7, sp, #0
 8006718:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800671e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	2200      	movs	r2, #0
 8006724:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	2200      	movs	r2, #0
 800672c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006730:	68f8      	ldr	r0, [r7, #12]
 8006732:	f7ff f917 	bl	8005964 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006736:	bf00      	nop
 8006738:	3710      	adds	r7, #16
 800673a:	46bd      	mov	sp, r7
 800673c:	bd80      	pop	{r7, pc}

0800673e <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 800673e:	b480      	push	{r7}
 8006740:	b08f      	sub	sp, #60	; 0x3c
 8006742:	af00      	add	r7, sp, #0
 8006744:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800674a:	2b21      	cmp	r3, #33	; 0x21
 800674c:	d14d      	bne.n	80067ea <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006754:	b29b      	uxth	r3, r3
 8006756:	2b00      	cmp	r3, #0
 8006758:	d132      	bne.n	80067c0 <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006760:	6a3b      	ldr	r3, [r7, #32]
 8006762:	e853 3f00 	ldrex	r3, [r3]
 8006766:	61fb      	str	r3, [r7, #28]
   return(result);
 8006768:	69fb      	ldr	r3, [r7, #28]
 800676a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800676e:	637b      	str	r3, [r7, #52]	; 0x34
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	461a      	mov	r2, r3
 8006776:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006778:	62fb      	str	r3, [r7, #44]	; 0x2c
 800677a:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800677c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800677e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006780:	e841 2300 	strex	r3, r2, [r1]
 8006784:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006786:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006788:	2b00      	cmp	r3, #0
 800678a:	d1e6      	bne.n	800675a <UART_TxISR_8BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	e853 3f00 	ldrex	r3, [r3]
 8006798:	60bb      	str	r3, [r7, #8]
   return(result);
 800679a:	68bb      	ldr	r3, [r7, #8]
 800679c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80067a0:	633b      	str	r3, [r7, #48]	; 0x30
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	461a      	mov	r2, r3
 80067a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067aa:	61bb      	str	r3, [r7, #24]
 80067ac:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067ae:	6979      	ldr	r1, [r7, #20]
 80067b0:	69ba      	ldr	r2, [r7, #24]
 80067b2:	e841 2300 	strex	r3, r2, [r1]
 80067b6:	613b      	str	r3, [r7, #16]
   return(result);
 80067b8:	693b      	ldr	r3, [r7, #16]
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d1e6      	bne.n	800678c <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 80067be:	e014      	b.n	80067ea <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80067c4:	781a      	ldrb	r2, [r3, #0]
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	b292      	uxth	r2, r2
 80067cc:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80067d2:	1c5a      	adds	r2, r3, #1
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80067de:	b29b      	uxth	r3, r3
 80067e0:	3b01      	subs	r3, #1
 80067e2:	b29a      	uxth	r2, r3
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 80067ea:	bf00      	nop
 80067ec:	373c      	adds	r7, #60	; 0x3c
 80067ee:	46bd      	mov	sp, r7
 80067f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067f4:	4770      	bx	lr

080067f6 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 80067f6:	b480      	push	{r7}
 80067f8:	b091      	sub	sp, #68	; 0x44
 80067fa:	af00      	add	r7, sp, #0
 80067fc:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006802:	2b21      	cmp	r3, #33	; 0x21
 8006804:	d151      	bne.n	80068aa <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800680c:	b29b      	uxth	r3, r3
 800680e:	2b00      	cmp	r3, #0
 8006810:	d132      	bne.n	8006878 <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006818:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800681a:	e853 3f00 	ldrex	r3, [r3]
 800681e:	623b      	str	r3, [r7, #32]
   return(result);
 8006820:	6a3b      	ldr	r3, [r7, #32]
 8006822:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006826:	63bb      	str	r3, [r7, #56]	; 0x38
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	461a      	mov	r2, r3
 800682e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006830:	633b      	str	r3, [r7, #48]	; 0x30
 8006832:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006834:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006836:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006838:	e841 2300 	strex	r3, r2, [r1]
 800683c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800683e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006840:	2b00      	cmp	r3, #0
 8006842:	d1e6      	bne.n	8006812 <UART_TxISR_16BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800684a:	693b      	ldr	r3, [r7, #16]
 800684c:	e853 3f00 	ldrex	r3, [r3]
 8006850:	60fb      	str	r3, [r7, #12]
   return(result);
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006858:	637b      	str	r3, [r7, #52]	; 0x34
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	461a      	mov	r2, r3
 8006860:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006862:	61fb      	str	r3, [r7, #28]
 8006864:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006866:	69b9      	ldr	r1, [r7, #24]
 8006868:	69fa      	ldr	r2, [r7, #28]
 800686a:	e841 2300 	strex	r3, r2, [r1]
 800686e:	617b      	str	r3, [r7, #20]
   return(result);
 8006870:	697b      	ldr	r3, [r7, #20]
 8006872:	2b00      	cmp	r3, #0
 8006874:	d1e6      	bne.n	8006844 <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8006876:	e018      	b.n	80068aa <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800687c:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800687e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006880:	881a      	ldrh	r2, [r3, #0]
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800688a:	b292      	uxth	r2, r2
 800688c:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006892:	1c9a      	adds	r2, r3, #2
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800689e:	b29b      	uxth	r3, r3
 80068a0:	3b01      	subs	r3, #1
 80068a2:	b29a      	uxth	r2, r3
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 80068aa:	bf00      	nop
 80068ac:	3744      	adds	r7, #68	; 0x44
 80068ae:	46bd      	mov	sp, r7
 80068b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b4:	4770      	bx	lr

080068b6 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80068b6:	b580      	push	{r7, lr}
 80068b8:	b088      	sub	sp, #32
 80068ba:	af00      	add	r7, sp, #0
 80068bc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	e853 3f00 	ldrex	r3, [r3]
 80068ca:	60bb      	str	r3, [r7, #8]
   return(result);
 80068cc:	68bb      	ldr	r3, [r7, #8]
 80068ce:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80068d2:	61fb      	str	r3, [r7, #28]
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	461a      	mov	r2, r3
 80068da:	69fb      	ldr	r3, [r7, #28]
 80068dc:	61bb      	str	r3, [r7, #24]
 80068de:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068e0:	6979      	ldr	r1, [r7, #20]
 80068e2:	69ba      	ldr	r2, [r7, #24]
 80068e4:	e841 2300 	strex	r3, r2, [r1]
 80068e8:	613b      	str	r3, [r7, #16]
   return(result);
 80068ea:	693b      	ldr	r3, [r7, #16]
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d1e6      	bne.n	80068be <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	2220      	movs	r2, #32
 80068f4:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	2200      	movs	r2, #0
 80068fa:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80068fc:	6878      	ldr	r0, [r7, #4]
 80068fe:	f7ff f81d 	bl	800593c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006902:	bf00      	nop
 8006904:	3720      	adds	r7, #32
 8006906:	46bd      	mov	sp, r7
 8006908:	bd80      	pop	{r7, pc}

0800690a <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800690a:	b580      	push	{r7, lr}
 800690c:	b096      	sub	sp, #88	; 0x58
 800690e:	af00      	add	r7, sp, #0
 8006910:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006918:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006920:	2b22      	cmp	r3, #34	; 0x22
 8006922:	f040 8094 	bne.w	8006a4e <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800692c:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006930:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8006934:	b2d9      	uxtb	r1, r3
 8006936:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800693a:	b2da      	uxtb	r2, r3
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006940:	400a      	ands	r2, r1
 8006942:	b2d2      	uxtb	r2, r2
 8006944:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800694a:	1c5a      	adds	r2, r3, #1
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006956:	b29b      	uxth	r3, r3
 8006958:	3b01      	subs	r3, #1
 800695a:	b29a      	uxth	r2, r3
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006968:	b29b      	uxth	r3, r3
 800696a:	2b00      	cmp	r3, #0
 800696c:	d179      	bne.n	8006a62 <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006974:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006976:	e853 3f00 	ldrex	r3, [r3]
 800697a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800697c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800697e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006982:	653b      	str	r3, [r7, #80]	; 0x50
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	461a      	mov	r2, r3
 800698a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800698c:	647b      	str	r3, [r7, #68]	; 0x44
 800698e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006990:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006992:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006994:	e841 2300 	strex	r3, r2, [r1]
 8006998:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800699a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800699c:	2b00      	cmp	r3, #0
 800699e:	d1e6      	bne.n	800696e <UART_RxISR_8BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	3308      	adds	r3, #8
 80069a6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069aa:	e853 3f00 	ldrex	r3, [r3]
 80069ae:	623b      	str	r3, [r7, #32]
   return(result);
 80069b0:	6a3b      	ldr	r3, [r7, #32]
 80069b2:	f023 0301 	bic.w	r3, r3, #1
 80069b6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	3308      	adds	r3, #8
 80069be:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80069c0:	633a      	str	r2, [r7, #48]	; 0x30
 80069c2:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069c4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80069c6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80069c8:	e841 2300 	strex	r3, r2, [r1]
 80069cc:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80069ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d1e5      	bne.n	80069a0 <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	2220      	movs	r2, #32
 80069d8:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	2200      	movs	r2, #0
 80069de:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80069e4:	2b01      	cmp	r3, #1
 80069e6:	d12e      	bne.n	8006a46 <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	2200      	movs	r2, #0
 80069ec:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069f4:	693b      	ldr	r3, [r7, #16]
 80069f6:	e853 3f00 	ldrex	r3, [r3]
 80069fa:	60fb      	str	r3, [r7, #12]
   return(result);
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	f023 0310 	bic.w	r3, r3, #16
 8006a02:	64bb      	str	r3, [r7, #72]	; 0x48
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	461a      	mov	r2, r3
 8006a0a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006a0c:	61fb      	str	r3, [r7, #28]
 8006a0e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a10:	69b9      	ldr	r1, [r7, #24]
 8006a12:	69fa      	ldr	r2, [r7, #28]
 8006a14:	e841 2300 	strex	r3, r2, [r1]
 8006a18:	617b      	str	r3, [r7, #20]
   return(result);
 8006a1a:	697b      	ldr	r3, [r7, #20]
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d1e6      	bne.n	80069ee <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	69db      	ldr	r3, [r3, #28]
 8006a26:	f003 0310 	and.w	r3, r3, #16
 8006a2a:	2b10      	cmp	r3, #16
 8006a2c:	d103      	bne.n	8006a36 <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	2210      	movs	r2, #16
 8006a34:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006a3c:	4619      	mov	r1, r3
 8006a3e:	6878      	ldr	r0, [r7, #4]
 8006a40:	f7fe ff9a 	bl	8005978 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006a44:	e00d      	b.n	8006a62 <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8006a46:	6878      	ldr	r0, [r7, #4]
 8006a48:	f7fc f8c0 	bl	8002bcc <HAL_UART_RxCpltCallback>
}
 8006a4c:	e009      	b.n	8006a62 <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	8b1b      	ldrh	r3, [r3, #24]
 8006a54:	b29a      	uxth	r2, r3
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	f042 0208 	orr.w	r2, r2, #8
 8006a5e:	b292      	uxth	r2, r2
 8006a60:	831a      	strh	r2, [r3, #24]
}
 8006a62:	bf00      	nop
 8006a64:	3758      	adds	r7, #88	; 0x58
 8006a66:	46bd      	mov	sp, r7
 8006a68:	bd80      	pop	{r7, pc}

08006a6a <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8006a6a:	b580      	push	{r7, lr}
 8006a6c:	b096      	sub	sp, #88	; 0x58
 8006a6e:	af00      	add	r7, sp, #0
 8006a70:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006a78:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006a80:	2b22      	cmp	r3, #34	; 0x22
 8006a82:	f040 8094 	bne.w	8006bae <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8006a8c:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a94:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8006a96:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8006a9a:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8006a9e:	4013      	ands	r3, r2
 8006aa0:	b29a      	uxth	r2, r3
 8006aa2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006aa4:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006aaa:	1c9a      	adds	r2, r3, #2
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006ab6:	b29b      	uxth	r3, r3
 8006ab8:	3b01      	subs	r3, #1
 8006aba:	b29a      	uxth	r2, r3
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006ac8:	b29b      	uxth	r3, r3
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d179      	bne.n	8006bc2 <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ad4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ad6:	e853 3f00 	ldrex	r3, [r3]
 8006ada:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006adc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ade:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006ae2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	461a      	mov	r2, r3
 8006aea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006aec:	643b      	str	r3, [r7, #64]	; 0x40
 8006aee:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006af0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006af2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006af4:	e841 2300 	strex	r3, r2, [r1]
 8006af8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006afa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d1e6      	bne.n	8006ace <UART_RxISR_16BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	3308      	adds	r3, #8
 8006b06:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b08:	6a3b      	ldr	r3, [r7, #32]
 8006b0a:	e853 3f00 	ldrex	r3, [r3]
 8006b0e:	61fb      	str	r3, [r7, #28]
   return(result);
 8006b10:	69fb      	ldr	r3, [r7, #28]
 8006b12:	f023 0301 	bic.w	r3, r3, #1
 8006b16:	64bb      	str	r3, [r7, #72]	; 0x48
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	3308      	adds	r3, #8
 8006b1e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006b20:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006b22:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b24:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006b26:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006b28:	e841 2300 	strex	r3, r2, [r1]
 8006b2c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006b2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d1e5      	bne.n	8006b00 <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	2220      	movs	r2, #32
 8006b38:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	2200      	movs	r2, #0
 8006b3e:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006b44:	2b01      	cmp	r3, #1
 8006b46:	d12e      	bne.n	8006ba6 <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	2200      	movs	r2, #0
 8006b4c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	e853 3f00 	ldrex	r3, [r3]
 8006b5a:	60bb      	str	r3, [r7, #8]
   return(result);
 8006b5c:	68bb      	ldr	r3, [r7, #8]
 8006b5e:	f023 0310 	bic.w	r3, r3, #16
 8006b62:	647b      	str	r3, [r7, #68]	; 0x44
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	461a      	mov	r2, r3
 8006b6a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006b6c:	61bb      	str	r3, [r7, #24]
 8006b6e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b70:	6979      	ldr	r1, [r7, #20]
 8006b72:	69ba      	ldr	r2, [r7, #24]
 8006b74:	e841 2300 	strex	r3, r2, [r1]
 8006b78:	613b      	str	r3, [r7, #16]
   return(result);
 8006b7a:	693b      	ldr	r3, [r7, #16]
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d1e6      	bne.n	8006b4e <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	69db      	ldr	r3, [r3, #28]
 8006b86:	f003 0310 	and.w	r3, r3, #16
 8006b8a:	2b10      	cmp	r3, #16
 8006b8c:	d103      	bne.n	8006b96 <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	2210      	movs	r2, #16
 8006b94:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006b9c:	4619      	mov	r1, r3
 8006b9e:	6878      	ldr	r0, [r7, #4]
 8006ba0:	f7fe feea 	bl	8005978 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006ba4:	e00d      	b.n	8006bc2 <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8006ba6:	6878      	ldr	r0, [r7, #4]
 8006ba8:	f7fc f810 	bl	8002bcc <HAL_UART_RxCpltCallback>
}
 8006bac:	e009      	b.n	8006bc2 <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	8b1b      	ldrh	r3, [r3, #24]
 8006bb4:	b29a      	uxth	r2, r3
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	f042 0208 	orr.w	r2, r2, #8
 8006bbe:	b292      	uxth	r2, r2
 8006bc0:	831a      	strh	r2, [r3, #24]
}
 8006bc2:	bf00      	nop
 8006bc4:	3758      	adds	r7, #88	; 0x58
 8006bc6:	46bd      	mov	sp, r7
 8006bc8:	bd80      	pop	{r7, pc}

08006bca <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006bca:	b480      	push	{r7}
 8006bcc:	b083      	sub	sp, #12
 8006bce:	af00      	add	r7, sp, #0
 8006bd0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006bd2:	bf00      	nop
 8006bd4:	370c      	adds	r7, #12
 8006bd6:	46bd      	mov	sp, r7
 8006bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bdc:	4770      	bx	lr
	...

08006be0 <__NVIC_SetPriority>:
{
 8006be0:	b480      	push	{r7}
 8006be2:	b083      	sub	sp, #12
 8006be4:	af00      	add	r7, sp, #0
 8006be6:	4603      	mov	r3, r0
 8006be8:	6039      	str	r1, [r7, #0]
 8006bea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006bec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	db0a      	blt.n	8006c0a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006bf4:	683b      	ldr	r3, [r7, #0]
 8006bf6:	b2da      	uxtb	r2, r3
 8006bf8:	490c      	ldr	r1, [pc, #48]	; (8006c2c <__NVIC_SetPriority+0x4c>)
 8006bfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006bfe:	0112      	lsls	r2, r2, #4
 8006c00:	b2d2      	uxtb	r2, r2
 8006c02:	440b      	add	r3, r1
 8006c04:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8006c08:	e00a      	b.n	8006c20 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006c0a:	683b      	ldr	r3, [r7, #0]
 8006c0c:	b2da      	uxtb	r2, r3
 8006c0e:	4908      	ldr	r1, [pc, #32]	; (8006c30 <__NVIC_SetPriority+0x50>)
 8006c10:	79fb      	ldrb	r3, [r7, #7]
 8006c12:	f003 030f 	and.w	r3, r3, #15
 8006c16:	3b04      	subs	r3, #4
 8006c18:	0112      	lsls	r2, r2, #4
 8006c1a:	b2d2      	uxtb	r2, r2
 8006c1c:	440b      	add	r3, r1
 8006c1e:	761a      	strb	r2, [r3, #24]
}
 8006c20:	bf00      	nop
 8006c22:	370c      	adds	r7, #12
 8006c24:	46bd      	mov	sp, r7
 8006c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c2a:	4770      	bx	lr
 8006c2c:	e000e100 	.word	0xe000e100
 8006c30:	e000ed00 	.word	0xe000ed00

08006c34 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8006c34:	b580      	push	{r7, lr}
 8006c36:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8006c38:	4b05      	ldr	r3, [pc, #20]	; (8006c50 <SysTick_Handler+0x1c>)
 8006c3a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8006c3c:	f001 fda0 	bl	8008780 <xTaskGetSchedulerState>
 8006c40:	4603      	mov	r3, r0
 8006c42:	2b01      	cmp	r3, #1
 8006c44:	d001      	beq.n	8006c4a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8006c46:	f002 fccf 	bl	80095e8 <xPortSysTickHandler>
  }
}
 8006c4a:	bf00      	nop
 8006c4c:	bd80      	pop	{r7, pc}
 8006c4e:	bf00      	nop
 8006c50:	e000e010 	.word	0xe000e010

08006c54 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8006c54:	b580      	push	{r7, lr}
 8006c56:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8006c58:	2100      	movs	r1, #0
 8006c5a:	f06f 0004 	mvn.w	r0, #4
 8006c5e:	f7ff ffbf 	bl	8006be0 <__NVIC_SetPriority>
#endif
}
 8006c62:	bf00      	nop
 8006c64:	bd80      	pop	{r7, pc}
	...

08006c68 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8006c68:	b480      	push	{r7}
 8006c6a:	b083      	sub	sp, #12
 8006c6c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006c6e:	f3ef 8305 	mrs	r3, IPSR
 8006c72:	603b      	str	r3, [r7, #0]
  return(result);
 8006c74:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d003      	beq.n	8006c82 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8006c7a:	f06f 0305 	mvn.w	r3, #5
 8006c7e:	607b      	str	r3, [r7, #4]
 8006c80:	e00c      	b.n	8006c9c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8006c82:	4b0a      	ldr	r3, [pc, #40]	; (8006cac <osKernelInitialize+0x44>)
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d105      	bne.n	8006c96 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8006c8a:	4b08      	ldr	r3, [pc, #32]	; (8006cac <osKernelInitialize+0x44>)
 8006c8c:	2201      	movs	r2, #1
 8006c8e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8006c90:	2300      	movs	r3, #0
 8006c92:	607b      	str	r3, [r7, #4]
 8006c94:	e002      	b.n	8006c9c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8006c96:	f04f 33ff 	mov.w	r3, #4294967295
 8006c9a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8006c9c:	687b      	ldr	r3, [r7, #4]
}
 8006c9e:	4618      	mov	r0, r3
 8006ca0:	370c      	adds	r7, #12
 8006ca2:	46bd      	mov	sp, r7
 8006ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ca8:	4770      	bx	lr
 8006caa:	bf00      	nop
 8006cac:	200022c8 	.word	0x200022c8

08006cb0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8006cb0:	b580      	push	{r7, lr}
 8006cb2:	b082      	sub	sp, #8
 8006cb4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006cb6:	f3ef 8305 	mrs	r3, IPSR
 8006cba:	603b      	str	r3, [r7, #0]
  return(result);
 8006cbc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d003      	beq.n	8006cca <osKernelStart+0x1a>
    stat = osErrorISR;
 8006cc2:	f06f 0305 	mvn.w	r3, #5
 8006cc6:	607b      	str	r3, [r7, #4]
 8006cc8:	e010      	b.n	8006cec <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8006cca:	4b0b      	ldr	r3, [pc, #44]	; (8006cf8 <osKernelStart+0x48>)
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	2b01      	cmp	r3, #1
 8006cd0:	d109      	bne.n	8006ce6 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8006cd2:	f7ff ffbf 	bl	8006c54 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8006cd6:	4b08      	ldr	r3, [pc, #32]	; (8006cf8 <osKernelStart+0x48>)
 8006cd8:	2202      	movs	r2, #2
 8006cda:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8006cdc:	f001 f8f4 	bl	8007ec8 <vTaskStartScheduler>
      stat = osOK;
 8006ce0:	2300      	movs	r3, #0
 8006ce2:	607b      	str	r3, [r7, #4]
 8006ce4:	e002      	b.n	8006cec <osKernelStart+0x3c>
    } else {
      stat = osError;
 8006ce6:	f04f 33ff 	mov.w	r3, #4294967295
 8006cea:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8006cec:	687b      	ldr	r3, [r7, #4]
}
 8006cee:	4618      	mov	r0, r3
 8006cf0:	3708      	adds	r7, #8
 8006cf2:	46bd      	mov	sp, r7
 8006cf4:	bd80      	pop	{r7, pc}
 8006cf6:	bf00      	nop
 8006cf8:	200022c8 	.word	0x200022c8

08006cfc <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8006cfc:	b580      	push	{r7, lr}
 8006cfe:	b08e      	sub	sp, #56	; 0x38
 8006d00:	af04      	add	r7, sp, #16
 8006d02:	60f8      	str	r0, [r7, #12]
 8006d04:	60b9      	str	r1, [r7, #8]
 8006d06:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8006d08:	2300      	movs	r3, #0
 8006d0a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006d0c:	f3ef 8305 	mrs	r3, IPSR
 8006d10:	617b      	str	r3, [r7, #20]
  return(result);
 8006d12:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d17e      	bne.n	8006e16 <osThreadNew+0x11a>
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d07b      	beq.n	8006e16 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8006d1e:	2340      	movs	r3, #64	; 0x40
 8006d20:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8006d22:	2318      	movs	r3, #24
 8006d24:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8006d26:	2300      	movs	r3, #0
 8006d28:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8006d2a:	f04f 33ff 	mov.w	r3, #4294967295
 8006d2e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d045      	beq.n	8006dc2 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d002      	beq.n	8006d44 <osThreadNew+0x48>
        name = attr->name;
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	699b      	ldr	r3, [r3, #24]
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d002      	beq.n	8006d52 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	699b      	ldr	r3, [r3, #24]
 8006d50:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8006d52:	69fb      	ldr	r3, [r7, #28]
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d008      	beq.n	8006d6a <osThreadNew+0x6e>
 8006d58:	69fb      	ldr	r3, [r7, #28]
 8006d5a:	2b38      	cmp	r3, #56	; 0x38
 8006d5c:	d805      	bhi.n	8006d6a <osThreadNew+0x6e>
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	685b      	ldr	r3, [r3, #4]
 8006d62:	f003 0301 	and.w	r3, r3, #1
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d001      	beq.n	8006d6e <osThreadNew+0x72>
        return (NULL);
 8006d6a:	2300      	movs	r3, #0
 8006d6c:	e054      	b.n	8006e18 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	695b      	ldr	r3, [r3, #20]
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d003      	beq.n	8006d7e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	695b      	ldr	r3, [r3, #20]
 8006d7a:	089b      	lsrs	r3, r3, #2
 8006d7c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	689b      	ldr	r3, [r3, #8]
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d00e      	beq.n	8006da4 <osThreadNew+0xa8>
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	68db      	ldr	r3, [r3, #12]
 8006d8a:	2bbb      	cmp	r3, #187	; 0xbb
 8006d8c:	d90a      	bls.n	8006da4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d006      	beq.n	8006da4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	695b      	ldr	r3, [r3, #20]
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d002      	beq.n	8006da4 <osThreadNew+0xa8>
        mem = 1;
 8006d9e:	2301      	movs	r3, #1
 8006da0:	61bb      	str	r3, [r7, #24]
 8006da2:	e010      	b.n	8006dc6 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	689b      	ldr	r3, [r3, #8]
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d10c      	bne.n	8006dc6 <osThreadNew+0xca>
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	68db      	ldr	r3, [r3, #12]
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d108      	bne.n	8006dc6 <osThreadNew+0xca>
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	691b      	ldr	r3, [r3, #16]
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d104      	bne.n	8006dc6 <osThreadNew+0xca>
          mem = 0;
 8006dbc:	2300      	movs	r3, #0
 8006dbe:	61bb      	str	r3, [r7, #24]
 8006dc0:	e001      	b.n	8006dc6 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8006dc2:	2300      	movs	r3, #0
 8006dc4:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8006dc6:	69bb      	ldr	r3, [r7, #24]
 8006dc8:	2b01      	cmp	r3, #1
 8006dca:	d110      	bne.n	8006dee <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8006dd0:	687a      	ldr	r2, [r7, #4]
 8006dd2:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006dd4:	9202      	str	r2, [sp, #8]
 8006dd6:	9301      	str	r3, [sp, #4]
 8006dd8:	69fb      	ldr	r3, [r7, #28]
 8006dda:	9300      	str	r3, [sp, #0]
 8006ddc:	68bb      	ldr	r3, [r7, #8]
 8006dde:	6a3a      	ldr	r2, [r7, #32]
 8006de0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006de2:	68f8      	ldr	r0, [r7, #12]
 8006de4:	f000 fe12 	bl	8007a0c <xTaskCreateStatic>
 8006de8:	4603      	mov	r3, r0
 8006dea:	613b      	str	r3, [r7, #16]
 8006dec:	e013      	b.n	8006e16 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8006dee:	69bb      	ldr	r3, [r7, #24]
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d110      	bne.n	8006e16 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8006df4:	6a3b      	ldr	r3, [r7, #32]
 8006df6:	b29a      	uxth	r2, r3
 8006df8:	f107 0310 	add.w	r3, r7, #16
 8006dfc:	9301      	str	r3, [sp, #4]
 8006dfe:	69fb      	ldr	r3, [r7, #28]
 8006e00:	9300      	str	r3, [sp, #0]
 8006e02:	68bb      	ldr	r3, [r7, #8]
 8006e04:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006e06:	68f8      	ldr	r0, [r7, #12]
 8006e08:	f000 fe5d 	bl	8007ac6 <xTaskCreate>
 8006e0c:	4603      	mov	r3, r0
 8006e0e:	2b01      	cmp	r3, #1
 8006e10:	d001      	beq.n	8006e16 <osThreadNew+0x11a>
            hTask = NULL;
 8006e12:	2300      	movs	r3, #0
 8006e14:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8006e16:	693b      	ldr	r3, [r7, #16]
}
 8006e18:	4618      	mov	r0, r3
 8006e1a:	3728      	adds	r7, #40	; 0x28
 8006e1c:	46bd      	mov	sp, r7
 8006e1e:	bd80      	pop	{r7, pc}

08006e20 <osThreadExit>:

  return (stat);
}
#endif /* (configUSE_OS2_THREAD_SUSPEND_RESUME == 1) */

__NO_RETURN void osThreadExit (void) {
 8006e20:	b580      	push	{r7, lr}
 8006e22:	af00      	add	r7, sp, #0
#ifndef USE_FreeRTOS_HEAP_1
  vTaskDelete (NULL);
 8006e24:	2000      	movs	r0, #0
 8006e26:	f000 ffa9 	bl	8007d7c <vTaskDelete>
#endif
  for (;;);
 8006e2a:	e7fe      	b.n	8006e2a <osThreadExit+0xa>

08006e2c <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8006e2c:	b580      	push	{r7, lr}
 8006e2e:	b084      	sub	sp, #16
 8006e30:	af00      	add	r7, sp, #0
 8006e32:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006e34:	f3ef 8305 	mrs	r3, IPSR
 8006e38:	60bb      	str	r3, [r7, #8]
  return(result);
 8006e3a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d003      	beq.n	8006e48 <osDelay+0x1c>
    stat = osErrorISR;
 8006e40:	f06f 0305 	mvn.w	r3, #5
 8006e44:	60fb      	str	r3, [r7, #12]
 8006e46:	e007      	b.n	8006e58 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8006e48:	2300      	movs	r3, #0
 8006e4a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d002      	beq.n	8006e58 <osDelay+0x2c>
      vTaskDelay(ticks);
 8006e52:	6878      	ldr	r0, [r7, #4]
 8006e54:	f001 f804 	bl	8007e60 <vTaskDelay>
    }
  }

  return (stat);
 8006e58:	68fb      	ldr	r3, [r7, #12]
}
 8006e5a:	4618      	mov	r0, r3
 8006e5c:	3710      	adds	r7, #16
 8006e5e:	46bd      	mov	sp, r7
 8006e60:	bd80      	pop	{r7, pc}
	...

08006e64 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8006e64:	b480      	push	{r7}
 8006e66:	b085      	sub	sp, #20
 8006e68:	af00      	add	r7, sp, #0
 8006e6a:	60f8      	str	r0, [r7, #12]
 8006e6c:	60b9      	str	r1, [r7, #8]
 8006e6e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	4a07      	ldr	r2, [pc, #28]	; (8006e90 <vApplicationGetIdleTaskMemory+0x2c>)
 8006e74:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8006e76:	68bb      	ldr	r3, [r7, #8]
 8006e78:	4a06      	ldr	r2, [pc, #24]	; (8006e94 <vApplicationGetIdleTaskMemory+0x30>)
 8006e7a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	2240      	movs	r2, #64	; 0x40
 8006e80:	601a      	str	r2, [r3, #0]
}
 8006e82:	bf00      	nop
 8006e84:	3714      	adds	r7, #20
 8006e86:	46bd      	mov	sp, r7
 8006e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e8c:	4770      	bx	lr
 8006e8e:	bf00      	nop
 8006e90:	200022cc 	.word	0x200022cc
 8006e94:	20002388 	.word	0x20002388

08006e98 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8006e98:	b480      	push	{r7}
 8006e9a:	b085      	sub	sp, #20
 8006e9c:	af00      	add	r7, sp, #0
 8006e9e:	60f8      	str	r0, [r7, #12]
 8006ea0:	60b9      	str	r1, [r7, #8]
 8006ea2:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	4a07      	ldr	r2, [pc, #28]	; (8006ec4 <vApplicationGetTimerTaskMemory+0x2c>)
 8006ea8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8006eaa:	68bb      	ldr	r3, [r7, #8]
 8006eac:	4a06      	ldr	r2, [pc, #24]	; (8006ec8 <vApplicationGetTimerTaskMemory+0x30>)
 8006eae:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	2280      	movs	r2, #128	; 0x80
 8006eb4:	601a      	str	r2, [r3, #0]
}
 8006eb6:	bf00      	nop
 8006eb8:	3714      	adds	r7, #20
 8006eba:	46bd      	mov	sp, r7
 8006ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ec0:	4770      	bx	lr
 8006ec2:	bf00      	nop
 8006ec4:	20002488 	.word	0x20002488
 8006ec8:	20002544 	.word	0x20002544

08006ecc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006ecc:	b480      	push	{r7}
 8006ece:	b083      	sub	sp, #12
 8006ed0:	af00      	add	r7, sp, #0
 8006ed2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	f103 0208 	add.w	r2, r3, #8
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	f04f 32ff 	mov.w	r2, #4294967295
 8006ee4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	f103 0208 	add.w	r2, r3, #8
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	f103 0208 	add.w	r2, r3, #8
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	2200      	movs	r2, #0
 8006efe:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006f00:	bf00      	nop
 8006f02:	370c      	adds	r7, #12
 8006f04:	46bd      	mov	sp, r7
 8006f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f0a:	4770      	bx	lr

08006f0c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006f0c:	b480      	push	{r7}
 8006f0e:	b083      	sub	sp, #12
 8006f10:	af00      	add	r7, sp, #0
 8006f12:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	2200      	movs	r2, #0
 8006f18:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006f1a:	bf00      	nop
 8006f1c:	370c      	adds	r7, #12
 8006f1e:	46bd      	mov	sp, r7
 8006f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f24:	4770      	bx	lr

08006f26 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006f26:	b480      	push	{r7}
 8006f28:	b085      	sub	sp, #20
 8006f2a:	af00      	add	r7, sp, #0
 8006f2c:	6078      	str	r0, [r7, #4]
 8006f2e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	685b      	ldr	r3, [r3, #4]
 8006f34:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006f36:	683b      	ldr	r3, [r7, #0]
 8006f38:	68fa      	ldr	r2, [r7, #12]
 8006f3a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	689a      	ldr	r2, [r3, #8]
 8006f40:	683b      	ldr	r3, [r7, #0]
 8006f42:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	689b      	ldr	r3, [r3, #8]
 8006f48:	683a      	ldr	r2, [r7, #0]
 8006f4a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	683a      	ldr	r2, [r7, #0]
 8006f50:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8006f52:	683b      	ldr	r3, [r7, #0]
 8006f54:	687a      	ldr	r2, [r7, #4]
 8006f56:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	1c5a      	adds	r2, r3, #1
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	601a      	str	r2, [r3, #0]
}
 8006f62:	bf00      	nop
 8006f64:	3714      	adds	r7, #20
 8006f66:	46bd      	mov	sp, r7
 8006f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f6c:	4770      	bx	lr

08006f6e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006f6e:	b480      	push	{r7}
 8006f70:	b085      	sub	sp, #20
 8006f72:	af00      	add	r7, sp, #0
 8006f74:	6078      	str	r0, [r7, #4]
 8006f76:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006f78:	683b      	ldr	r3, [r7, #0]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006f7e:	68bb      	ldr	r3, [r7, #8]
 8006f80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f84:	d103      	bne.n	8006f8e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	691b      	ldr	r3, [r3, #16]
 8006f8a:	60fb      	str	r3, [r7, #12]
 8006f8c:	e00c      	b.n	8006fa8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	3308      	adds	r3, #8
 8006f92:	60fb      	str	r3, [r7, #12]
 8006f94:	e002      	b.n	8006f9c <vListInsert+0x2e>
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	685b      	ldr	r3, [r3, #4]
 8006f9a:	60fb      	str	r3, [r7, #12]
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	685b      	ldr	r3, [r3, #4]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	68ba      	ldr	r2, [r7, #8]
 8006fa4:	429a      	cmp	r2, r3
 8006fa6:	d2f6      	bcs.n	8006f96 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	685a      	ldr	r2, [r3, #4]
 8006fac:	683b      	ldr	r3, [r7, #0]
 8006fae:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006fb0:	683b      	ldr	r3, [r7, #0]
 8006fb2:	685b      	ldr	r3, [r3, #4]
 8006fb4:	683a      	ldr	r2, [r7, #0]
 8006fb6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006fb8:	683b      	ldr	r3, [r7, #0]
 8006fba:	68fa      	ldr	r2, [r7, #12]
 8006fbc:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	683a      	ldr	r2, [r7, #0]
 8006fc2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8006fc4:	683b      	ldr	r3, [r7, #0]
 8006fc6:	687a      	ldr	r2, [r7, #4]
 8006fc8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	1c5a      	adds	r2, r3, #1
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	601a      	str	r2, [r3, #0]
}
 8006fd4:	bf00      	nop
 8006fd6:	3714      	adds	r7, #20
 8006fd8:	46bd      	mov	sp, r7
 8006fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fde:	4770      	bx	lr

08006fe0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006fe0:	b480      	push	{r7}
 8006fe2:	b085      	sub	sp, #20
 8006fe4:	af00      	add	r7, sp, #0
 8006fe6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	691b      	ldr	r3, [r3, #16]
 8006fec:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	685b      	ldr	r3, [r3, #4]
 8006ff2:	687a      	ldr	r2, [r7, #4]
 8006ff4:	6892      	ldr	r2, [r2, #8]
 8006ff6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	689b      	ldr	r3, [r3, #8]
 8006ffc:	687a      	ldr	r2, [r7, #4]
 8006ffe:	6852      	ldr	r2, [r2, #4]
 8007000:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	685b      	ldr	r3, [r3, #4]
 8007006:	687a      	ldr	r2, [r7, #4]
 8007008:	429a      	cmp	r2, r3
 800700a:	d103      	bne.n	8007014 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	689a      	ldr	r2, [r3, #8]
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	2200      	movs	r2, #0
 8007018:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	1e5a      	subs	r2, r3, #1
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	681b      	ldr	r3, [r3, #0]
}
 8007028:	4618      	mov	r0, r3
 800702a:	3714      	adds	r7, #20
 800702c:	46bd      	mov	sp, r7
 800702e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007032:	4770      	bx	lr

08007034 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8007034:	b580      	push	{r7, lr}
 8007036:	b084      	sub	sp, #16
 8007038:	af00      	add	r7, sp, #0
 800703a:	6078      	str	r0, [r7, #4]
 800703c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	2b00      	cmp	r3, #0
 8007046:	d10a      	bne.n	800705e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007048:	f04f 0350 	mov.w	r3, #80	; 0x50
 800704c:	f383 8811 	msr	BASEPRI, r3
 8007050:	f3bf 8f6f 	isb	sy
 8007054:	f3bf 8f4f 	dsb	sy
 8007058:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800705a:	bf00      	nop
 800705c:	e7fe      	b.n	800705c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800705e:	f002 fa31 	bl	80094c4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	681a      	ldr	r2, [r3, #0]
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800706a:	68f9      	ldr	r1, [r7, #12]
 800706c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800706e:	fb01 f303 	mul.w	r3, r1, r3
 8007072:	441a      	add	r2, r3
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	2200      	movs	r2, #0
 800707c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	681a      	ldr	r2, [r3, #0]
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	681a      	ldr	r2, [r3, #0]
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800708e:	3b01      	subs	r3, #1
 8007090:	68f9      	ldr	r1, [r7, #12]
 8007092:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007094:	fb01 f303 	mul.w	r3, r1, r3
 8007098:	441a      	add	r2, r3
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	22ff      	movs	r2, #255	; 0xff
 80070a2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	22ff      	movs	r2, #255	; 0xff
 80070aa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80070ae:	683b      	ldr	r3, [r7, #0]
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d114      	bne.n	80070de <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	691b      	ldr	r3, [r3, #16]
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d01a      	beq.n	80070f2 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	3310      	adds	r3, #16
 80070c0:	4618      	mov	r0, r3
 80070c2:	f001 f99b 	bl	80083fc <xTaskRemoveFromEventList>
 80070c6:	4603      	mov	r3, r0
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d012      	beq.n	80070f2 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80070cc:	4b0c      	ldr	r3, [pc, #48]	; (8007100 <xQueueGenericReset+0xcc>)
 80070ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80070d2:	601a      	str	r2, [r3, #0]
 80070d4:	f3bf 8f4f 	dsb	sy
 80070d8:	f3bf 8f6f 	isb	sy
 80070dc:	e009      	b.n	80070f2 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	3310      	adds	r3, #16
 80070e2:	4618      	mov	r0, r3
 80070e4:	f7ff fef2 	bl	8006ecc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	3324      	adds	r3, #36	; 0x24
 80070ec:	4618      	mov	r0, r3
 80070ee:	f7ff feed 	bl	8006ecc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80070f2:	f002 fa17 	bl	8009524 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80070f6:	2301      	movs	r3, #1
}
 80070f8:	4618      	mov	r0, r3
 80070fa:	3710      	adds	r7, #16
 80070fc:	46bd      	mov	sp, r7
 80070fe:	bd80      	pop	{r7, pc}
 8007100:	e000ed04 	.word	0xe000ed04

08007104 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8007104:	b580      	push	{r7, lr}
 8007106:	b08e      	sub	sp, #56	; 0x38
 8007108:	af02      	add	r7, sp, #8
 800710a:	60f8      	str	r0, [r7, #12]
 800710c:	60b9      	str	r1, [r7, #8]
 800710e:	607a      	str	r2, [r7, #4]
 8007110:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	2b00      	cmp	r3, #0
 8007116:	d10a      	bne.n	800712e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8007118:	f04f 0350 	mov.w	r3, #80	; 0x50
 800711c:	f383 8811 	msr	BASEPRI, r3
 8007120:	f3bf 8f6f 	isb	sy
 8007124:	f3bf 8f4f 	dsb	sy
 8007128:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800712a:	bf00      	nop
 800712c:	e7fe      	b.n	800712c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800712e:	683b      	ldr	r3, [r7, #0]
 8007130:	2b00      	cmp	r3, #0
 8007132:	d10a      	bne.n	800714a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8007134:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007138:	f383 8811 	msr	BASEPRI, r3
 800713c:	f3bf 8f6f 	isb	sy
 8007140:	f3bf 8f4f 	dsb	sy
 8007144:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007146:	bf00      	nop
 8007148:	e7fe      	b.n	8007148 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	2b00      	cmp	r3, #0
 800714e:	d002      	beq.n	8007156 <xQueueGenericCreateStatic+0x52>
 8007150:	68bb      	ldr	r3, [r7, #8]
 8007152:	2b00      	cmp	r3, #0
 8007154:	d001      	beq.n	800715a <xQueueGenericCreateStatic+0x56>
 8007156:	2301      	movs	r3, #1
 8007158:	e000      	b.n	800715c <xQueueGenericCreateStatic+0x58>
 800715a:	2300      	movs	r3, #0
 800715c:	2b00      	cmp	r3, #0
 800715e:	d10a      	bne.n	8007176 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8007160:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007164:	f383 8811 	msr	BASEPRI, r3
 8007168:	f3bf 8f6f 	isb	sy
 800716c:	f3bf 8f4f 	dsb	sy
 8007170:	623b      	str	r3, [r7, #32]
}
 8007172:	bf00      	nop
 8007174:	e7fe      	b.n	8007174 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	2b00      	cmp	r3, #0
 800717a:	d102      	bne.n	8007182 <xQueueGenericCreateStatic+0x7e>
 800717c:	68bb      	ldr	r3, [r7, #8]
 800717e:	2b00      	cmp	r3, #0
 8007180:	d101      	bne.n	8007186 <xQueueGenericCreateStatic+0x82>
 8007182:	2301      	movs	r3, #1
 8007184:	e000      	b.n	8007188 <xQueueGenericCreateStatic+0x84>
 8007186:	2300      	movs	r3, #0
 8007188:	2b00      	cmp	r3, #0
 800718a:	d10a      	bne.n	80071a2 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800718c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007190:	f383 8811 	msr	BASEPRI, r3
 8007194:	f3bf 8f6f 	isb	sy
 8007198:	f3bf 8f4f 	dsb	sy
 800719c:	61fb      	str	r3, [r7, #28]
}
 800719e:	bf00      	nop
 80071a0:	e7fe      	b.n	80071a0 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80071a2:	2350      	movs	r3, #80	; 0x50
 80071a4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80071a6:	697b      	ldr	r3, [r7, #20]
 80071a8:	2b50      	cmp	r3, #80	; 0x50
 80071aa:	d00a      	beq.n	80071c2 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80071ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071b0:	f383 8811 	msr	BASEPRI, r3
 80071b4:	f3bf 8f6f 	isb	sy
 80071b8:	f3bf 8f4f 	dsb	sy
 80071bc:	61bb      	str	r3, [r7, #24]
}
 80071be:	bf00      	nop
 80071c0:	e7fe      	b.n	80071c0 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80071c2:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80071c4:	683b      	ldr	r3, [r7, #0]
 80071c6:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80071c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d00d      	beq.n	80071ea <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80071ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071d0:	2201      	movs	r2, #1
 80071d2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80071d6:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80071da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071dc:	9300      	str	r3, [sp, #0]
 80071de:	4613      	mov	r3, r2
 80071e0:	687a      	ldr	r2, [r7, #4]
 80071e2:	68b9      	ldr	r1, [r7, #8]
 80071e4:	68f8      	ldr	r0, [r7, #12]
 80071e6:	f000 f805 	bl	80071f4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80071ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80071ec:	4618      	mov	r0, r3
 80071ee:	3730      	adds	r7, #48	; 0x30
 80071f0:	46bd      	mov	sp, r7
 80071f2:	bd80      	pop	{r7, pc}

080071f4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80071f4:	b580      	push	{r7, lr}
 80071f6:	b084      	sub	sp, #16
 80071f8:	af00      	add	r7, sp, #0
 80071fa:	60f8      	str	r0, [r7, #12]
 80071fc:	60b9      	str	r1, [r7, #8]
 80071fe:	607a      	str	r2, [r7, #4]
 8007200:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8007202:	68bb      	ldr	r3, [r7, #8]
 8007204:	2b00      	cmp	r3, #0
 8007206:	d103      	bne.n	8007210 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007208:	69bb      	ldr	r3, [r7, #24]
 800720a:	69ba      	ldr	r2, [r7, #24]
 800720c:	601a      	str	r2, [r3, #0]
 800720e:	e002      	b.n	8007216 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8007210:	69bb      	ldr	r3, [r7, #24]
 8007212:	687a      	ldr	r2, [r7, #4]
 8007214:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8007216:	69bb      	ldr	r3, [r7, #24]
 8007218:	68fa      	ldr	r2, [r7, #12]
 800721a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800721c:	69bb      	ldr	r3, [r7, #24]
 800721e:	68ba      	ldr	r2, [r7, #8]
 8007220:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007222:	2101      	movs	r1, #1
 8007224:	69b8      	ldr	r0, [r7, #24]
 8007226:	f7ff ff05 	bl	8007034 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800722a:	69bb      	ldr	r3, [r7, #24]
 800722c:	78fa      	ldrb	r2, [r7, #3]
 800722e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8007232:	bf00      	nop
 8007234:	3710      	adds	r7, #16
 8007236:	46bd      	mov	sp, r7
 8007238:	bd80      	pop	{r7, pc}
	...

0800723c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800723c:	b580      	push	{r7, lr}
 800723e:	b08e      	sub	sp, #56	; 0x38
 8007240:	af00      	add	r7, sp, #0
 8007242:	60f8      	str	r0, [r7, #12]
 8007244:	60b9      	str	r1, [r7, #8]
 8007246:	607a      	str	r2, [r7, #4]
 8007248:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800724a:	2300      	movs	r3, #0
 800724c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007252:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007254:	2b00      	cmp	r3, #0
 8007256:	d10a      	bne.n	800726e <xQueueGenericSend+0x32>
	__asm volatile
 8007258:	f04f 0350 	mov.w	r3, #80	; 0x50
 800725c:	f383 8811 	msr	BASEPRI, r3
 8007260:	f3bf 8f6f 	isb	sy
 8007264:	f3bf 8f4f 	dsb	sy
 8007268:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800726a:	bf00      	nop
 800726c:	e7fe      	b.n	800726c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800726e:	68bb      	ldr	r3, [r7, #8]
 8007270:	2b00      	cmp	r3, #0
 8007272:	d103      	bne.n	800727c <xQueueGenericSend+0x40>
 8007274:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007276:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007278:	2b00      	cmp	r3, #0
 800727a:	d101      	bne.n	8007280 <xQueueGenericSend+0x44>
 800727c:	2301      	movs	r3, #1
 800727e:	e000      	b.n	8007282 <xQueueGenericSend+0x46>
 8007280:	2300      	movs	r3, #0
 8007282:	2b00      	cmp	r3, #0
 8007284:	d10a      	bne.n	800729c <xQueueGenericSend+0x60>
	__asm volatile
 8007286:	f04f 0350 	mov.w	r3, #80	; 0x50
 800728a:	f383 8811 	msr	BASEPRI, r3
 800728e:	f3bf 8f6f 	isb	sy
 8007292:	f3bf 8f4f 	dsb	sy
 8007296:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007298:	bf00      	nop
 800729a:	e7fe      	b.n	800729a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800729c:	683b      	ldr	r3, [r7, #0]
 800729e:	2b02      	cmp	r3, #2
 80072a0:	d103      	bne.n	80072aa <xQueueGenericSend+0x6e>
 80072a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80072a6:	2b01      	cmp	r3, #1
 80072a8:	d101      	bne.n	80072ae <xQueueGenericSend+0x72>
 80072aa:	2301      	movs	r3, #1
 80072ac:	e000      	b.n	80072b0 <xQueueGenericSend+0x74>
 80072ae:	2300      	movs	r3, #0
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d10a      	bne.n	80072ca <xQueueGenericSend+0x8e>
	__asm volatile
 80072b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072b8:	f383 8811 	msr	BASEPRI, r3
 80072bc:	f3bf 8f6f 	isb	sy
 80072c0:	f3bf 8f4f 	dsb	sy
 80072c4:	623b      	str	r3, [r7, #32]
}
 80072c6:	bf00      	nop
 80072c8:	e7fe      	b.n	80072c8 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80072ca:	f001 fa59 	bl	8008780 <xTaskGetSchedulerState>
 80072ce:	4603      	mov	r3, r0
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d102      	bne.n	80072da <xQueueGenericSend+0x9e>
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d101      	bne.n	80072de <xQueueGenericSend+0xa2>
 80072da:	2301      	movs	r3, #1
 80072dc:	e000      	b.n	80072e0 <xQueueGenericSend+0xa4>
 80072de:	2300      	movs	r3, #0
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d10a      	bne.n	80072fa <xQueueGenericSend+0xbe>
	__asm volatile
 80072e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072e8:	f383 8811 	msr	BASEPRI, r3
 80072ec:	f3bf 8f6f 	isb	sy
 80072f0:	f3bf 8f4f 	dsb	sy
 80072f4:	61fb      	str	r3, [r7, #28]
}
 80072f6:	bf00      	nop
 80072f8:	e7fe      	b.n	80072f8 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80072fa:	f002 f8e3 	bl	80094c4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80072fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007300:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007302:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007304:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007306:	429a      	cmp	r2, r3
 8007308:	d302      	bcc.n	8007310 <xQueueGenericSend+0xd4>
 800730a:	683b      	ldr	r3, [r7, #0]
 800730c:	2b02      	cmp	r3, #2
 800730e:	d129      	bne.n	8007364 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007310:	683a      	ldr	r2, [r7, #0]
 8007312:	68b9      	ldr	r1, [r7, #8]
 8007314:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007316:	f000 fa0b 	bl	8007730 <prvCopyDataToQueue>
 800731a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800731c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800731e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007320:	2b00      	cmp	r3, #0
 8007322:	d010      	beq.n	8007346 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007324:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007326:	3324      	adds	r3, #36	; 0x24
 8007328:	4618      	mov	r0, r3
 800732a:	f001 f867 	bl	80083fc <xTaskRemoveFromEventList>
 800732e:	4603      	mov	r3, r0
 8007330:	2b00      	cmp	r3, #0
 8007332:	d013      	beq.n	800735c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8007334:	4b3f      	ldr	r3, [pc, #252]	; (8007434 <xQueueGenericSend+0x1f8>)
 8007336:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800733a:	601a      	str	r2, [r3, #0]
 800733c:	f3bf 8f4f 	dsb	sy
 8007340:	f3bf 8f6f 	isb	sy
 8007344:	e00a      	b.n	800735c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8007346:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007348:	2b00      	cmp	r3, #0
 800734a:	d007      	beq.n	800735c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800734c:	4b39      	ldr	r3, [pc, #228]	; (8007434 <xQueueGenericSend+0x1f8>)
 800734e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007352:	601a      	str	r2, [r3, #0]
 8007354:	f3bf 8f4f 	dsb	sy
 8007358:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800735c:	f002 f8e2 	bl	8009524 <vPortExitCritical>
				return pdPASS;
 8007360:	2301      	movs	r3, #1
 8007362:	e063      	b.n	800742c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	2b00      	cmp	r3, #0
 8007368:	d103      	bne.n	8007372 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800736a:	f002 f8db 	bl	8009524 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800736e:	2300      	movs	r3, #0
 8007370:	e05c      	b.n	800742c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007372:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007374:	2b00      	cmp	r3, #0
 8007376:	d106      	bne.n	8007386 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007378:	f107 0314 	add.w	r3, r7, #20
 800737c:	4618      	mov	r0, r3
 800737e:	f001 f8a1 	bl	80084c4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007382:	2301      	movs	r3, #1
 8007384:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007386:	f002 f8cd 	bl	8009524 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800738a:	f000 fe0d 	bl	8007fa8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800738e:	f002 f899 	bl	80094c4 <vPortEnterCritical>
 8007392:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007394:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007398:	b25b      	sxtb	r3, r3
 800739a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800739e:	d103      	bne.n	80073a8 <xQueueGenericSend+0x16c>
 80073a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073a2:	2200      	movs	r2, #0
 80073a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80073a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073aa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80073ae:	b25b      	sxtb	r3, r3
 80073b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80073b4:	d103      	bne.n	80073be <xQueueGenericSend+0x182>
 80073b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073b8:	2200      	movs	r2, #0
 80073ba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80073be:	f002 f8b1 	bl	8009524 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80073c2:	1d3a      	adds	r2, r7, #4
 80073c4:	f107 0314 	add.w	r3, r7, #20
 80073c8:	4611      	mov	r1, r2
 80073ca:	4618      	mov	r0, r3
 80073cc:	f001 f890 	bl	80084f0 <xTaskCheckForTimeOut>
 80073d0:	4603      	mov	r3, r0
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d124      	bne.n	8007420 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80073d6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80073d8:	f000 faa2 	bl	8007920 <prvIsQueueFull>
 80073dc:	4603      	mov	r3, r0
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d018      	beq.n	8007414 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80073e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073e4:	3310      	adds	r3, #16
 80073e6:	687a      	ldr	r2, [r7, #4]
 80073e8:	4611      	mov	r1, r2
 80073ea:	4618      	mov	r0, r3
 80073ec:	f000 ffb6 	bl	800835c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80073f0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80073f2:	f000 fa2d 	bl	8007850 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80073f6:	f000 fde5 	bl	8007fc4 <xTaskResumeAll>
 80073fa:	4603      	mov	r3, r0
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	f47f af7c 	bne.w	80072fa <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8007402:	4b0c      	ldr	r3, [pc, #48]	; (8007434 <xQueueGenericSend+0x1f8>)
 8007404:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007408:	601a      	str	r2, [r3, #0]
 800740a:	f3bf 8f4f 	dsb	sy
 800740e:	f3bf 8f6f 	isb	sy
 8007412:	e772      	b.n	80072fa <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8007414:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007416:	f000 fa1b 	bl	8007850 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800741a:	f000 fdd3 	bl	8007fc4 <xTaskResumeAll>
 800741e:	e76c      	b.n	80072fa <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8007420:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007422:	f000 fa15 	bl	8007850 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007426:	f000 fdcd 	bl	8007fc4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800742a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800742c:	4618      	mov	r0, r3
 800742e:	3738      	adds	r7, #56	; 0x38
 8007430:	46bd      	mov	sp, r7
 8007432:	bd80      	pop	{r7, pc}
 8007434:	e000ed04 	.word	0xe000ed04

08007438 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8007438:	b580      	push	{r7, lr}
 800743a:	b090      	sub	sp, #64	; 0x40
 800743c:	af00      	add	r7, sp, #0
 800743e:	60f8      	str	r0, [r7, #12]
 8007440:	60b9      	str	r1, [r7, #8]
 8007442:	607a      	str	r2, [r7, #4]
 8007444:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800744a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800744c:	2b00      	cmp	r3, #0
 800744e:	d10a      	bne.n	8007466 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8007450:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007454:	f383 8811 	msr	BASEPRI, r3
 8007458:	f3bf 8f6f 	isb	sy
 800745c:	f3bf 8f4f 	dsb	sy
 8007460:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007462:	bf00      	nop
 8007464:	e7fe      	b.n	8007464 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007466:	68bb      	ldr	r3, [r7, #8]
 8007468:	2b00      	cmp	r3, #0
 800746a:	d103      	bne.n	8007474 <xQueueGenericSendFromISR+0x3c>
 800746c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800746e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007470:	2b00      	cmp	r3, #0
 8007472:	d101      	bne.n	8007478 <xQueueGenericSendFromISR+0x40>
 8007474:	2301      	movs	r3, #1
 8007476:	e000      	b.n	800747a <xQueueGenericSendFromISR+0x42>
 8007478:	2300      	movs	r3, #0
 800747a:	2b00      	cmp	r3, #0
 800747c:	d10a      	bne.n	8007494 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800747e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007482:	f383 8811 	msr	BASEPRI, r3
 8007486:	f3bf 8f6f 	isb	sy
 800748a:	f3bf 8f4f 	dsb	sy
 800748e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007490:	bf00      	nop
 8007492:	e7fe      	b.n	8007492 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007494:	683b      	ldr	r3, [r7, #0]
 8007496:	2b02      	cmp	r3, #2
 8007498:	d103      	bne.n	80074a2 <xQueueGenericSendFromISR+0x6a>
 800749a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800749c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800749e:	2b01      	cmp	r3, #1
 80074a0:	d101      	bne.n	80074a6 <xQueueGenericSendFromISR+0x6e>
 80074a2:	2301      	movs	r3, #1
 80074a4:	e000      	b.n	80074a8 <xQueueGenericSendFromISR+0x70>
 80074a6:	2300      	movs	r3, #0
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d10a      	bne.n	80074c2 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80074ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074b0:	f383 8811 	msr	BASEPRI, r3
 80074b4:	f3bf 8f6f 	isb	sy
 80074b8:	f3bf 8f4f 	dsb	sy
 80074bc:	623b      	str	r3, [r7, #32]
}
 80074be:	bf00      	nop
 80074c0:	e7fe      	b.n	80074c0 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80074c2:	f002 f8e1 	bl	8009688 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80074c6:	f3ef 8211 	mrs	r2, BASEPRI
 80074ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074ce:	f383 8811 	msr	BASEPRI, r3
 80074d2:	f3bf 8f6f 	isb	sy
 80074d6:	f3bf 8f4f 	dsb	sy
 80074da:	61fa      	str	r2, [r7, #28]
 80074dc:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80074de:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80074e0:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80074e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074e4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80074e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80074ea:	429a      	cmp	r2, r3
 80074ec:	d302      	bcc.n	80074f4 <xQueueGenericSendFromISR+0xbc>
 80074ee:	683b      	ldr	r3, [r7, #0]
 80074f0:	2b02      	cmp	r3, #2
 80074f2:	d12f      	bne.n	8007554 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80074f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074f6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80074fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80074fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007500:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007502:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007504:	683a      	ldr	r2, [r7, #0]
 8007506:	68b9      	ldr	r1, [r7, #8]
 8007508:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800750a:	f000 f911 	bl	8007730 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800750e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8007512:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007516:	d112      	bne.n	800753e <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007518:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800751a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800751c:	2b00      	cmp	r3, #0
 800751e:	d016      	beq.n	800754e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007520:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007522:	3324      	adds	r3, #36	; 0x24
 8007524:	4618      	mov	r0, r3
 8007526:	f000 ff69 	bl	80083fc <xTaskRemoveFromEventList>
 800752a:	4603      	mov	r3, r0
 800752c:	2b00      	cmp	r3, #0
 800752e:	d00e      	beq.n	800754e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	2b00      	cmp	r3, #0
 8007534:	d00b      	beq.n	800754e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	2201      	movs	r2, #1
 800753a:	601a      	str	r2, [r3, #0]
 800753c:	e007      	b.n	800754e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800753e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8007542:	3301      	adds	r3, #1
 8007544:	b2db      	uxtb	r3, r3
 8007546:	b25a      	sxtb	r2, r3
 8007548:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800754a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800754e:	2301      	movs	r3, #1
 8007550:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8007552:	e001      	b.n	8007558 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007554:	2300      	movs	r3, #0
 8007556:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007558:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800755a:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800755c:	697b      	ldr	r3, [r7, #20]
 800755e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8007562:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007564:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8007566:	4618      	mov	r0, r3
 8007568:	3740      	adds	r7, #64	; 0x40
 800756a:	46bd      	mov	sp, r7
 800756c:	bd80      	pop	{r7, pc}
	...

08007570 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8007570:	b580      	push	{r7, lr}
 8007572:	b08c      	sub	sp, #48	; 0x30
 8007574:	af00      	add	r7, sp, #0
 8007576:	60f8      	str	r0, [r7, #12]
 8007578:	60b9      	str	r1, [r7, #8]
 800757a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800757c:	2300      	movs	r3, #0
 800757e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007584:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007586:	2b00      	cmp	r3, #0
 8007588:	d10a      	bne.n	80075a0 <xQueueReceive+0x30>
	__asm volatile
 800758a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800758e:	f383 8811 	msr	BASEPRI, r3
 8007592:	f3bf 8f6f 	isb	sy
 8007596:	f3bf 8f4f 	dsb	sy
 800759a:	623b      	str	r3, [r7, #32]
}
 800759c:	bf00      	nop
 800759e:	e7fe      	b.n	800759e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80075a0:	68bb      	ldr	r3, [r7, #8]
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d103      	bne.n	80075ae <xQueueReceive+0x3e>
 80075a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d101      	bne.n	80075b2 <xQueueReceive+0x42>
 80075ae:	2301      	movs	r3, #1
 80075b0:	e000      	b.n	80075b4 <xQueueReceive+0x44>
 80075b2:	2300      	movs	r3, #0
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d10a      	bne.n	80075ce <xQueueReceive+0x5e>
	__asm volatile
 80075b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075bc:	f383 8811 	msr	BASEPRI, r3
 80075c0:	f3bf 8f6f 	isb	sy
 80075c4:	f3bf 8f4f 	dsb	sy
 80075c8:	61fb      	str	r3, [r7, #28]
}
 80075ca:	bf00      	nop
 80075cc:	e7fe      	b.n	80075cc <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80075ce:	f001 f8d7 	bl	8008780 <xTaskGetSchedulerState>
 80075d2:	4603      	mov	r3, r0
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d102      	bne.n	80075de <xQueueReceive+0x6e>
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d101      	bne.n	80075e2 <xQueueReceive+0x72>
 80075de:	2301      	movs	r3, #1
 80075e0:	e000      	b.n	80075e4 <xQueueReceive+0x74>
 80075e2:	2300      	movs	r3, #0
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d10a      	bne.n	80075fe <xQueueReceive+0x8e>
	__asm volatile
 80075e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075ec:	f383 8811 	msr	BASEPRI, r3
 80075f0:	f3bf 8f6f 	isb	sy
 80075f4:	f3bf 8f4f 	dsb	sy
 80075f8:	61bb      	str	r3, [r7, #24]
}
 80075fa:	bf00      	nop
 80075fc:	e7fe      	b.n	80075fc <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80075fe:	f001 ff61 	bl	80094c4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007602:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007604:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007606:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007608:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800760a:	2b00      	cmp	r3, #0
 800760c:	d01f      	beq.n	800764e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800760e:	68b9      	ldr	r1, [r7, #8]
 8007610:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007612:	f000 f8f7 	bl	8007804 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007616:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007618:	1e5a      	subs	r2, r3, #1
 800761a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800761c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800761e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007620:	691b      	ldr	r3, [r3, #16]
 8007622:	2b00      	cmp	r3, #0
 8007624:	d00f      	beq.n	8007646 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007626:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007628:	3310      	adds	r3, #16
 800762a:	4618      	mov	r0, r3
 800762c:	f000 fee6 	bl	80083fc <xTaskRemoveFromEventList>
 8007630:	4603      	mov	r3, r0
 8007632:	2b00      	cmp	r3, #0
 8007634:	d007      	beq.n	8007646 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007636:	4b3d      	ldr	r3, [pc, #244]	; (800772c <xQueueReceive+0x1bc>)
 8007638:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800763c:	601a      	str	r2, [r3, #0]
 800763e:	f3bf 8f4f 	dsb	sy
 8007642:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007646:	f001 ff6d 	bl	8009524 <vPortExitCritical>
				return pdPASS;
 800764a:	2301      	movs	r3, #1
 800764c:	e069      	b.n	8007722 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	2b00      	cmp	r3, #0
 8007652:	d103      	bne.n	800765c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007654:	f001 ff66 	bl	8009524 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007658:	2300      	movs	r3, #0
 800765a:	e062      	b.n	8007722 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800765c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800765e:	2b00      	cmp	r3, #0
 8007660:	d106      	bne.n	8007670 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007662:	f107 0310 	add.w	r3, r7, #16
 8007666:	4618      	mov	r0, r3
 8007668:	f000 ff2c 	bl	80084c4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800766c:	2301      	movs	r3, #1
 800766e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007670:	f001 ff58 	bl	8009524 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007674:	f000 fc98 	bl	8007fa8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007678:	f001 ff24 	bl	80094c4 <vPortEnterCritical>
 800767c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800767e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007682:	b25b      	sxtb	r3, r3
 8007684:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007688:	d103      	bne.n	8007692 <xQueueReceive+0x122>
 800768a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800768c:	2200      	movs	r2, #0
 800768e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007692:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007694:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007698:	b25b      	sxtb	r3, r3
 800769a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800769e:	d103      	bne.n	80076a8 <xQueueReceive+0x138>
 80076a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076a2:	2200      	movs	r2, #0
 80076a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80076a8:	f001 ff3c 	bl	8009524 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80076ac:	1d3a      	adds	r2, r7, #4
 80076ae:	f107 0310 	add.w	r3, r7, #16
 80076b2:	4611      	mov	r1, r2
 80076b4:	4618      	mov	r0, r3
 80076b6:	f000 ff1b 	bl	80084f0 <xTaskCheckForTimeOut>
 80076ba:	4603      	mov	r3, r0
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d123      	bne.n	8007708 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80076c0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80076c2:	f000 f917 	bl	80078f4 <prvIsQueueEmpty>
 80076c6:	4603      	mov	r3, r0
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d017      	beq.n	80076fc <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80076cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076ce:	3324      	adds	r3, #36	; 0x24
 80076d0:	687a      	ldr	r2, [r7, #4]
 80076d2:	4611      	mov	r1, r2
 80076d4:	4618      	mov	r0, r3
 80076d6:	f000 fe41 	bl	800835c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80076da:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80076dc:	f000 f8b8 	bl	8007850 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80076e0:	f000 fc70 	bl	8007fc4 <xTaskResumeAll>
 80076e4:	4603      	mov	r3, r0
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d189      	bne.n	80075fe <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80076ea:	4b10      	ldr	r3, [pc, #64]	; (800772c <xQueueReceive+0x1bc>)
 80076ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80076f0:	601a      	str	r2, [r3, #0]
 80076f2:	f3bf 8f4f 	dsb	sy
 80076f6:	f3bf 8f6f 	isb	sy
 80076fa:	e780      	b.n	80075fe <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80076fc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80076fe:	f000 f8a7 	bl	8007850 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007702:	f000 fc5f 	bl	8007fc4 <xTaskResumeAll>
 8007706:	e77a      	b.n	80075fe <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8007708:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800770a:	f000 f8a1 	bl	8007850 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800770e:	f000 fc59 	bl	8007fc4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007712:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007714:	f000 f8ee 	bl	80078f4 <prvIsQueueEmpty>
 8007718:	4603      	mov	r3, r0
 800771a:	2b00      	cmp	r3, #0
 800771c:	f43f af6f 	beq.w	80075fe <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007720:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007722:	4618      	mov	r0, r3
 8007724:	3730      	adds	r7, #48	; 0x30
 8007726:	46bd      	mov	sp, r7
 8007728:	bd80      	pop	{r7, pc}
 800772a:	bf00      	nop
 800772c:	e000ed04 	.word	0xe000ed04

08007730 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8007730:	b580      	push	{r7, lr}
 8007732:	b086      	sub	sp, #24
 8007734:	af00      	add	r7, sp, #0
 8007736:	60f8      	str	r0, [r7, #12]
 8007738:	60b9      	str	r1, [r7, #8]
 800773a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800773c:	2300      	movs	r3, #0
 800773e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007744:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800774a:	2b00      	cmp	r3, #0
 800774c:	d10d      	bne.n	800776a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	2b00      	cmp	r3, #0
 8007754:	d14d      	bne.n	80077f2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	689b      	ldr	r3, [r3, #8]
 800775a:	4618      	mov	r0, r3
 800775c:	f001 f82e 	bl	80087bc <xTaskPriorityDisinherit>
 8007760:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	2200      	movs	r2, #0
 8007766:	609a      	str	r2, [r3, #8]
 8007768:	e043      	b.n	80077f2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	2b00      	cmp	r3, #0
 800776e:	d119      	bne.n	80077a4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	6858      	ldr	r0, [r3, #4]
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007778:	461a      	mov	r2, r3
 800777a:	68b9      	ldr	r1, [r7, #8]
 800777c:	f002 f9d4 	bl	8009b28 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	685a      	ldr	r2, [r3, #4]
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007788:	441a      	add	r2, r3
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	685a      	ldr	r2, [r3, #4]
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	689b      	ldr	r3, [r3, #8]
 8007796:	429a      	cmp	r2, r3
 8007798:	d32b      	bcc.n	80077f2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	681a      	ldr	r2, [r3, #0]
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	605a      	str	r2, [r3, #4]
 80077a2:	e026      	b.n	80077f2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	68d8      	ldr	r0, [r3, #12]
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077ac:	461a      	mov	r2, r3
 80077ae:	68b9      	ldr	r1, [r7, #8]
 80077b0:	f002 f9ba 	bl	8009b28 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	68da      	ldr	r2, [r3, #12]
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077bc:	425b      	negs	r3, r3
 80077be:	441a      	add	r2, r3
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	68da      	ldr	r2, [r3, #12]
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	429a      	cmp	r2, r3
 80077ce:	d207      	bcs.n	80077e0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	689a      	ldr	r2, [r3, #8]
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077d8:	425b      	negs	r3, r3
 80077da:	441a      	add	r2, r3
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	2b02      	cmp	r3, #2
 80077e4:	d105      	bne.n	80077f2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80077e6:	693b      	ldr	r3, [r7, #16]
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d002      	beq.n	80077f2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80077ec:	693b      	ldr	r3, [r7, #16]
 80077ee:	3b01      	subs	r3, #1
 80077f0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80077f2:	693b      	ldr	r3, [r7, #16]
 80077f4:	1c5a      	adds	r2, r3, #1
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80077fa:	697b      	ldr	r3, [r7, #20]
}
 80077fc:	4618      	mov	r0, r3
 80077fe:	3718      	adds	r7, #24
 8007800:	46bd      	mov	sp, r7
 8007802:	bd80      	pop	{r7, pc}

08007804 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8007804:	b580      	push	{r7, lr}
 8007806:	b082      	sub	sp, #8
 8007808:	af00      	add	r7, sp, #0
 800780a:	6078      	str	r0, [r7, #4]
 800780c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007812:	2b00      	cmp	r3, #0
 8007814:	d018      	beq.n	8007848 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	68da      	ldr	r2, [r3, #12]
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800781e:	441a      	add	r2, r3
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	68da      	ldr	r2, [r3, #12]
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	689b      	ldr	r3, [r3, #8]
 800782c:	429a      	cmp	r2, r3
 800782e:	d303      	bcc.n	8007838 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	681a      	ldr	r2, [r3, #0]
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	68d9      	ldr	r1, [r3, #12]
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007840:	461a      	mov	r2, r3
 8007842:	6838      	ldr	r0, [r7, #0]
 8007844:	f002 f970 	bl	8009b28 <memcpy>
	}
}
 8007848:	bf00      	nop
 800784a:	3708      	adds	r7, #8
 800784c:	46bd      	mov	sp, r7
 800784e:	bd80      	pop	{r7, pc}

08007850 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8007850:	b580      	push	{r7, lr}
 8007852:	b084      	sub	sp, #16
 8007854:	af00      	add	r7, sp, #0
 8007856:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8007858:	f001 fe34 	bl	80094c4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007862:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007864:	e011      	b.n	800788a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800786a:	2b00      	cmp	r3, #0
 800786c:	d012      	beq.n	8007894 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	3324      	adds	r3, #36	; 0x24
 8007872:	4618      	mov	r0, r3
 8007874:	f000 fdc2 	bl	80083fc <xTaskRemoveFromEventList>
 8007878:	4603      	mov	r3, r0
 800787a:	2b00      	cmp	r3, #0
 800787c:	d001      	beq.n	8007882 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800787e:	f000 fe99 	bl	80085b4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8007882:	7bfb      	ldrb	r3, [r7, #15]
 8007884:	3b01      	subs	r3, #1
 8007886:	b2db      	uxtb	r3, r3
 8007888:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800788a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800788e:	2b00      	cmp	r3, #0
 8007890:	dce9      	bgt.n	8007866 <prvUnlockQueue+0x16>
 8007892:	e000      	b.n	8007896 <prvUnlockQueue+0x46>
					break;
 8007894:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	22ff      	movs	r2, #255	; 0xff
 800789a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800789e:	f001 fe41 	bl	8009524 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80078a2:	f001 fe0f 	bl	80094c4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80078ac:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80078ae:	e011      	b.n	80078d4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	691b      	ldr	r3, [r3, #16]
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d012      	beq.n	80078de <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	3310      	adds	r3, #16
 80078bc:	4618      	mov	r0, r3
 80078be:	f000 fd9d 	bl	80083fc <xTaskRemoveFromEventList>
 80078c2:	4603      	mov	r3, r0
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	d001      	beq.n	80078cc <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80078c8:	f000 fe74 	bl	80085b4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80078cc:	7bbb      	ldrb	r3, [r7, #14]
 80078ce:	3b01      	subs	r3, #1
 80078d0:	b2db      	uxtb	r3, r3
 80078d2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80078d4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80078d8:	2b00      	cmp	r3, #0
 80078da:	dce9      	bgt.n	80078b0 <prvUnlockQueue+0x60>
 80078dc:	e000      	b.n	80078e0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80078de:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	22ff      	movs	r2, #255	; 0xff
 80078e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80078e8:	f001 fe1c 	bl	8009524 <vPortExitCritical>
}
 80078ec:	bf00      	nop
 80078ee:	3710      	adds	r7, #16
 80078f0:	46bd      	mov	sp, r7
 80078f2:	bd80      	pop	{r7, pc}

080078f4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80078f4:	b580      	push	{r7, lr}
 80078f6:	b084      	sub	sp, #16
 80078f8:	af00      	add	r7, sp, #0
 80078fa:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80078fc:	f001 fde2 	bl	80094c4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007904:	2b00      	cmp	r3, #0
 8007906:	d102      	bne.n	800790e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8007908:	2301      	movs	r3, #1
 800790a:	60fb      	str	r3, [r7, #12]
 800790c:	e001      	b.n	8007912 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800790e:	2300      	movs	r3, #0
 8007910:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007912:	f001 fe07 	bl	8009524 <vPortExitCritical>

	return xReturn;
 8007916:	68fb      	ldr	r3, [r7, #12]
}
 8007918:	4618      	mov	r0, r3
 800791a:	3710      	adds	r7, #16
 800791c:	46bd      	mov	sp, r7
 800791e:	bd80      	pop	{r7, pc}

08007920 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8007920:	b580      	push	{r7, lr}
 8007922:	b084      	sub	sp, #16
 8007924:	af00      	add	r7, sp, #0
 8007926:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007928:	f001 fdcc 	bl	80094c4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007934:	429a      	cmp	r2, r3
 8007936:	d102      	bne.n	800793e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8007938:	2301      	movs	r3, #1
 800793a:	60fb      	str	r3, [r7, #12]
 800793c:	e001      	b.n	8007942 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800793e:	2300      	movs	r3, #0
 8007940:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007942:	f001 fdef 	bl	8009524 <vPortExitCritical>

	return xReturn;
 8007946:	68fb      	ldr	r3, [r7, #12]
}
 8007948:	4618      	mov	r0, r3
 800794a:	3710      	adds	r7, #16
 800794c:	46bd      	mov	sp, r7
 800794e:	bd80      	pop	{r7, pc}

08007950 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8007950:	b480      	push	{r7}
 8007952:	b085      	sub	sp, #20
 8007954:	af00      	add	r7, sp, #0
 8007956:	6078      	str	r0, [r7, #4]
 8007958:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800795a:	2300      	movs	r3, #0
 800795c:	60fb      	str	r3, [r7, #12]
 800795e:	e014      	b.n	800798a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8007960:	4a0f      	ldr	r2, [pc, #60]	; (80079a0 <vQueueAddToRegistry+0x50>)
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8007968:	2b00      	cmp	r3, #0
 800796a:	d10b      	bne.n	8007984 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800796c:	490c      	ldr	r1, [pc, #48]	; (80079a0 <vQueueAddToRegistry+0x50>)
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	683a      	ldr	r2, [r7, #0]
 8007972:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8007976:	4a0a      	ldr	r2, [pc, #40]	; (80079a0 <vQueueAddToRegistry+0x50>)
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	00db      	lsls	r3, r3, #3
 800797c:	4413      	add	r3, r2
 800797e:	687a      	ldr	r2, [r7, #4]
 8007980:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8007982:	e006      	b.n	8007992 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	3301      	adds	r3, #1
 8007988:	60fb      	str	r3, [r7, #12]
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	2b07      	cmp	r3, #7
 800798e:	d9e7      	bls.n	8007960 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8007990:	bf00      	nop
 8007992:	bf00      	nop
 8007994:	3714      	adds	r7, #20
 8007996:	46bd      	mov	sp, r7
 8007998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800799c:	4770      	bx	lr
 800799e:	bf00      	nop
 80079a0:	20002744 	.word	0x20002744

080079a4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80079a4:	b580      	push	{r7, lr}
 80079a6:	b086      	sub	sp, #24
 80079a8:	af00      	add	r7, sp, #0
 80079aa:	60f8      	str	r0, [r7, #12]
 80079ac:	60b9      	str	r1, [r7, #8]
 80079ae:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80079b4:	f001 fd86 	bl	80094c4 <vPortEnterCritical>
 80079b8:	697b      	ldr	r3, [r7, #20]
 80079ba:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80079be:	b25b      	sxtb	r3, r3
 80079c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80079c4:	d103      	bne.n	80079ce <vQueueWaitForMessageRestricted+0x2a>
 80079c6:	697b      	ldr	r3, [r7, #20]
 80079c8:	2200      	movs	r2, #0
 80079ca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80079ce:	697b      	ldr	r3, [r7, #20]
 80079d0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80079d4:	b25b      	sxtb	r3, r3
 80079d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80079da:	d103      	bne.n	80079e4 <vQueueWaitForMessageRestricted+0x40>
 80079dc:	697b      	ldr	r3, [r7, #20]
 80079de:	2200      	movs	r2, #0
 80079e0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80079e4:	f001 fd9e 	bl	8009524 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80079e8:	697b      	ldr	r3, [r7, #20]
 80079ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d106      	bne.n	80079fe <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80079f0:	697b      	ldr	r3, [r7, #20]
 80079f2:	3324      	adds	r3, #36	; 0x24
 80079f4:	687a      	ldr	r2, [r7, #4]
 80079f6:	68b9      	ldr	r1, [r7, #8]
 80079f8:	4618      	mov	r0, r3
 80079fa:	f000 fcd3 	bl	80083a4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80079fe:	6978      	ldr	r0, [r7, #20]
 8007a00:	f7ff ff26 	bl	8007850 <prvUnlockQueue>
	}
 8007a04:	bf00      	nop
 8007a06:	3718      	adds	r7, #24
 8007a08:	46bd      	mov	sp, r7
 8007a0a:	bd80      	pop	{r7, pc}

08007a0c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007a0c:	b580      	push	{r7, lr}
 8007a0e:	b08e      	sub	sp, #56	; 0x38
 8007a10:	af04      	add	r7, sp, #16
 8007a12:	60f8      	str	r0, [r7, #12]
 8007a14:	60b9      	str	r1, [r7, #8]
 8007a16:	607a      	str	r2, [r7, #4]
 8007a18:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8007a1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d10a      	bne.n	8007a36 <xTaskCreateStatic+0x2a>
	__asm volatile
 8007a20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a24:	f383 8811 	msr	BASEPRI, r3
 8007a28:	f3bf 8f6f 	isb	sy
 8007a2c:	f3bf 8f4f 	dsb	sy
 8007a30:	623b      	str	r3, [r7, #32]
}
 8007a32:	bf00      	nop
 8007a34:	e7fe      	b.n	8007a34 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8007a36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d10a      	bne.n	8007a52 <xTaskCreateStatic+0x46>
	__asm volatile
 8007a3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a40:	f383 8811 	msr	BASEPRI, r3
 8007a44:	f3bf 8f6f 	isb	sy
 8007a48:	f3bf 8f4f 	dsb	sy
 8007a4c:	61fb      	str	r3, [r7, #28]
}
 8007a4e:	bf00      	nop
 8007a50:	e7fe      	b.n	8007a50 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8007a52:	23bc      	movs	r3, #188	; 0xbc
 8007a54:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8007a56:	693b      	ldr	r3, [r7, #16]
 8007a58:	2bbc      	cmp	r3, #188	; 0xbc
 8007a5a:	d00a      	beq.n	8007a72 <xTaskCreateStatic+0x66>
	__asm volatile
 8007a5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a60:	f383 8811 	msr	BASEPRI, r3
 8007a64:	f3bf 8f6f 	isb	sy
 8007a68:	f3bf 8f4f 	dsb	sy
 8007a6c:	61bb      	str	r3, [r7, #24]
}
 8007a6e:	bf00      	nop
 8007a70:	e7fe      	b.n	8007a70 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8007a72:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007a74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d01e      	beq.n	8007ab8 <xTaskCreateStatic+0xac>
 8007a7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d01b      	beq.n	8007ab8 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007a80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a82:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007a84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a86:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007a88:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007a8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a8c:	2202      	movs	r2, #2
 8007a8e:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007a92:	2300      	movs	r3, #0
 8007a94:	9303      	str	r3, [sp, #12]
 8007a96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a98:	9302      	str	r3, [sp, #8]
 8007a9a:	f107 0314 	add.w	r3, r7, #20
 8007a9e:	9301      	str	r3, [sp, #4]
 8007aa0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007aa2:	9300      	str	r3, [sp, #0]
 8007aa4:	683b      	ldr	r3, [r7, #0]
 8007aa6:	687a      	ldr	r2, [r7, #4]
 8007aa8:	68b9      	ldr	r1, [r7, #8]
 8007aaa:	68f8      	ldr	r0, [r7, #12]
 8007aac:	f000 f850 	bl	8007b50 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007ab0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007ab2:	f000 f8f3 	bl	8007c9c <prvAddNewTaskToReadyList>
 8007ab6:	e001      	b.n	8007abc <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8007ab8:	2300      	movs	r3, #0
 8007aba:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007abc:	697b      	ldr	r3, [r7, #20]
	}
 8007abe:	4618      	mov	r0, r3
 8007ac0:	3728      	adds	r7, #40	; 0x28
 8007ac2:	46bd      	mov	sp, r7
 8007ac4:	bd80      	pop	{r7, pc}

08007ac6 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007ac6:	b580      	push	{r7, lr}
 8007ac8:	b08c      	sub	sp, #48	; 0x30
 8007aca:	af04      	add	r7, sp, #16
 8007acc:	60f8      	str	r0, [r7, #12]
 8007ace:	60b9      	str	r1, [r7, #8]
 8007ad0:	603b      	str	r3, [r7, #0]
 8007ad2:	4613      	mov	r3, r2
 8007ad4:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8007ad6:	88fb      	ldrh	r3, [r7, #6]
 8007ad8:	009b      	lsls	r3, r3, #2
 8007ada:	4618      	mov	r0, r3
 8007adc:	f001 fe14 	bl	8009708 <pvPortMalloc>
 8007ae0:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007ae2:	697b      	ldr	r3, [r7, #20]
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d00e      	beq.n	8007b06 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8007ae8:	20bc      	movs	r0, #188	; 0xbc
 8007aea:	f001 fe0d 	bl	8009708 <pvPortMalloc>
 8007aee:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007af0:	69fb      	ldr	r3, [r7, #28]
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d003      	beq.n	8007afe <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007af6:	69fb      	ldr	r3, [r7, #28]
 8007af8:	697a      	ldr	r2, [r7, #20]
 8007afa:	631a      	str	r2, [r3, #48]	; 0x30
 8007afc:	e005      	b.n	8007b0a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007afe:	6978      	ldr	r0, [r7, #20]
 8007b00:	f001 fece 	bl	80098a0 <vPortFree>
 8007b04:	e001      	b.n	8007b0a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007b06:	2300      	movs	r3, #0
 8007b08:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007b0a:	69fb      	ldr	r3, [r7, #28]
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d017      	beq.n	8007b40 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007b10:	69fb      	ldr	r3, [r7, #28]
 8007b12:	2200      	movs	r2, #0
 8007b14:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007b18:	88fa      	ldrh	r2, [r7, #6]
 8007b1a:	2300      	movs	r3, #0
 8007b1c:	9303      	str	r3, [sp, #12]
 8007b1e:	69fb      	ldr	r3, [r7, #28]
 8007b20:	9302      	str	r3, [sp, #8]
 8007b22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b24:	9301      	str	r3, [sp, #4]
 8007b26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b28:	9300      	str	r3, [sp, #0]
 8007b2a:	683b      	ldr	r3, [r7, #0]
 8007b2c:	68b9      	ldr	r1, [r7, #8]
 8007b2e:	68f8      	ldr	r0, [r7, #12]
 8007b30:	f000 f80e 	bl	8007b50 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007b34:	69f8      	ldr	r0, [r7, #28]
 8007b36:	f000 f8b1 	bl	8007c9c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007b3a:	2301      	movs	r3, #1
 8007b3c:	61bb      	str	r3, [r7, #24]
 8007b3e:	e002      	b.n	8007b46 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007b40:	f04f 33ff 	mov.w	r3, #4294967295
 8007b44:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007b46:	69bb      	ldr	r3, [r7, #24]
	}
 8007b48:	4618      	mov	r0, r3
 8007b4a:	3720      	adds	r7, #32
 8007b4c:	46bd      	mov	sp, r7
 8007b4e:	bd80      	pop	{r7, pc}

08007b50 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007b50:	b580      	push	{r7, lr}
 8007b52:	b088      	sub	sp, #32
 8007b54:	af00      	add	r7, sp, #0
 8007b56:	60f8      	str	r0, [r7, #12]
 8007b58:	60b9      	str	r1, [r7, #8]
 8007b5a:	607a      	str	r2, [r7, #4]
 8007b5c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8007b5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b60:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	009b      	lsls	r3, r3, #2
 8007b66:	461a      	mov	r2, r3
 8007b68:	21a5      	movs	r1, #165	; 0xa5
 8007b6a:	f001 ffeb 	bl	8009b44 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8007b6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b70:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8007b78:	3b01      	subs	r3, #1
 8007b7a:	009b      	lsls	r3, r3, #2
 8007b7c:	4413      	add	r3, r2
 8007b7e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8007b80:	69bb      	ldr	r3, [r7, #24]
 8007b82:	f023 0307 	bic.w	r3, r3, #7
 8007b86:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007b88:	69bb      	ldr	r3, [r7, #24]
 8007b8a:	f003 0307 	and.w	r3, r3, #7
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	d00a      	beq.n	8007ba8 <prvInitialiseNewTask+0x58>
	__asm volatile
 8007b92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b96:	f383 8811 	msr	BASEPRI, r3
 8007b9a:	f3bf 8f6f 	isb	sy
 8007b9e:	f3bf 8f4f 	dsb	sy
 8007ba2:	617b      	str	r3, [r7, #20]
}
 8007ba4:	bf00      	nop
 8007ba6:	e7fe      	b.n	8007ba6 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8007ba8:	68bb      	ldr	r3, [r7, #8]
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d01f      	beq.n	8007bee <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007bae:	2300      	movs	r3, #0
 8007bb0:	61fb      	str	r3, [r7, #28]
 8007bb2:	e012      	b.n	8007bda <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007bb4:	68ba      	ldr	r2, [r7, #8]
 8007bb6:	69fb      	ldr	r3, [r7, #28]
 8007bb8:	4413      	add	r3, r2
 8007bba:	7819      	ldrb	r1, [r3, #0]
 8007bbc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007bbe:	69fb      	ldr	r3, [r7, #28]
 8007bc0:	4413      	add	r3, r2
 8007bc2:	3334      	adds	r3, #52	; 0x34
 8007bc4:	460a      	mov	r2, r1
 8007bc6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8007bc8:	68ba      	ldr	r2, [r7, #8]
 8007bca:	69fb      	ldr	r3, [r7, #28]
 8007bcc:	4413      	add	r3, r2
 8007bce:	781b      	ldrb	r3, [r3, #0]
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	d006      	beq.n	8007be2 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007bd4:	69fb      	ldr	r3, [r7, #28]
 8007bd6:	3301      	adds	r3, #1
 8007bd8:	61fb      	str	r3, [r7, #28]
 8007bda:	69fb      	ldr	r3, [r7, #28]
 8007bdc:	2b0f      	cmp	r3, #15
 8007bde:	d9e9      	bls.n	8007bb4 <prvInitialiseNewTask+0x64>
 8007be0:	e000      	b.n	8007be4 <prvInitialiseNewTask+0x94>
			{
				break;
 8007be2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007be4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007be6:	2200      	movs	r2, #0
 8007be8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007bec:	e003      	b.n	8007bf6 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8007bee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bf0:	2200      	movs	r2, #0
 8007bf2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007bf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bf8:	2b37      	cmp	r3, #55	; 0x37
 8007bfa:	d901      	bls.n	8007c00 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007bfc:	2337      	movs	r3, #55	; 0x37
 8007bfe:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007c00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c02:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007c04:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007c06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c08:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007c0a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8007c0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c0e:	2200      	movs	r2, #0
 8007c10:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007c12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c14:	3304      	adds	r3, #4
 8007c16:	4618      	mov	r0, r3
 8007c18:	f7ff f978 	bl	8006f0c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007c1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c1e:	3318      	adds	r3, #24
 8007c20:	4618      	mov	r0, r3
 8007c22:	f7ff f973 	bl	8006f0c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007c26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c28:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007c2a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007c2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c2e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007c32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c34:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007c36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c38:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007c3a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007c3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c3e:	2200      	movs	r2, #0
 8007c40:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007c44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c46:	2200      	movs	r2, #0
 8007c48:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8007c4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c4e:	3354      	adds	r3, #84	; 0x54
 8007c50:	2260      	movs	r2, #96	; 0x60
 8007c52:	2100      	movs	r1, #0
 8007c54:	4618      	mov	r0, r3
 8007c56:	f001 ff75 	bl	8009b44 <memset>
 8007c5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c5c:	4a0c      	ldr	r2, [pc, #48]	; (8007c90 <prvInitialiseNewTask+0x140>)
 8007c5e:	659a      	str	r2, [r3, #88]	; 0x58
 8007c60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c62:	4a0c      	ldr	r2, [pc, #48]	; (8007c94 <prvInitialiseNewTask+0x144>)
 8007c64:	65da      	str	r2, [r3, #92]	; 0x5c
 8007c66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c68:	4a0b      	ldr	r2, [pc, #44]	; (8007c98 <prvInitialiseNewTask+0x148>)
 8007c6a:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007c6c:	683a      	ldr	r2, [r7, #0]
 8007c6e:	68f9      	ldr	r1, [r7, #12]
 8007c70:	69b8      	ldr	r0, [r7, #24]
 8007c72:	f001 faf7 	bl	8009264 <pxPortInitialiseStack>
 8007c76:	4602      	mov	r2, r0
 8007c78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c7a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8007c7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d002      	beq.n	8007c88 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007c82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c84:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007c86:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007c88:	bf00      	nop
 8007c8a:	3720      	adds	r7, #32
 8007c8c:	46bd      	mov	sp, r7
 8007c8e:	bd80      	pop	{r7, pc}
 8007c90:	08009ef8 	.word	0x08009ef8
 8007c94:	08009f18 	.word	0x08009f18
 8007c98:	08009ed8 	.word	0x08009ed8

08007c9c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007c9c:	b580      	push	{r7, lr}
 8007c9e:	b082      	sub	sp, #8
 8007ca0:	af00      	add	r7, sp, #0
 8007ca2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007ca4:	f001 fc0e 	bl	80094c4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007ca8:	4b2d      	ldr	r3, [pc, #180]	; (8007d60 <prvAddNewTaskToReadyList+0xc4>)
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	3301      	adds	r3, #1
 8007cae:	4a2c      	ldr	r2, [pc, #176]	; (8007d60 <prvAddNewTaskToReadyList+0xc4>)
 8007cb0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8007cb2:	4b2c      	ldr	r3, [pc, #176]	; (8007d64 <prvAddNewTaskToReadyList+0xc8>)
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d109      	bne.n	8007cce <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007cba:	4a2a      	ldr	r2, [pc, #168]	; (8007d64 <prvAddNewTaskToReadyList+0xc8>)
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007cc0:	4b27      	ldr	r3, [pc, #156]	; (8007d60 <prvAddNewTaskToReadyList+0xc4>)
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	2b01      	cmp	r3, #1
 8007cc6:	d110      	bne.n	8007cea <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007cc8:	f000 fc98 	bl	80085fc <prvInitialiseTaskLists>
 8007ccc:	e00d      	b.n	8007cea <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8007cce:	4b26      	ldr	r3, [pc, #152]	; (8007d68 <prvAddNewTaskToReadyList+0xcc>)
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d109      	bne.n	8007cea <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007cd6:	4b23      	ldr	r3, [pc, #140]	; (8007d64 <prvAddNewTaskToReadyList+0xc8>)
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ce0:	429a      	cmp	r2, r3
 8007ce2:	d802      	bhi.n	8007cea <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007ce4:	4a1f      	ldr	r2, [pc, #124]	; (8007d64 <prvAddNewTaskToReadyList+0xc8>)
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8007cea:	4b20      	ldr	r3, [pc, #128]	; (8007d6c <prvAddNewTaskToReadyList+0xd0>)
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	3301      	adds	r3, #1
 8007cf0:	4a1e      	ldr	r2, [pc, #120]	; (8007d6c <prvAddNewTaskToReadyList+0xd0>)
 8007cf2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8007cf4:	4b1d      	ldr	r3, [pc, #116]	; (8007d6c <prvAddNewTaskToReadyList+0xd0>)
 8007cf6:	681a      	ldr	r2, [r3, #0]
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d00:	4b1b      	ldr	r3, [pc, #108]	; (8007d70 <prvAddNewTaskToReadyList+0xd4>)
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	429a      	cmp	r2, r3
 8007d06:	d903      	bls.n	8007d10 <prvAddNewTaskToReadyList+0x74>
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d0c:	4a18      	ldr	r2, [pc, #96]	; (8007d70 <prvAddNewTaskToReadyList+0xd4>)
 8007d0e:	6013      	str	r3, [r2, #0]
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d14:	4613      	mov	r3, r2
 8007d16:	009b      	lsls	r3, r3, #2
 8007d18:	4413      	add	r3, r2
 8007d1a:	009b      	lsls	r3, r3, #2
 8007d1c:	4a15      	ldr	r2, [pc, #84]	; (8007d74 <prvAddNewTaskToReadyList+0xd8>)
 8007d1e:	441a      	add	r2, r3
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	3304      	adds	r3, #4
 8007d24:	4619      	mov	r1, r3
 8007d26:	4610      	mov	r0, r2
 8007d28:	f7ff f8fd 	bl	8006f26 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007d2c:	f001 fbfa 	bl	8009524 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007d30:	4b0d      	ldr	r3, [pc, #52]	; (8007d68 <prvAddNewTaskToReadyList+0xcc>)
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	d00e      	beq.n	8007d56 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007d38:	4b0a      	ldr	r3, [pc, #40]	; (8007d64 <prvAddNewTaskToReadyList+0xc8>)
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d42:	429a      	cmp	r2, r3
 8007d44:	d207      	bcs.n	8007d56 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007d46:	4b0c      	ldr	r3, [pc, #48]	; (8007d78 <prvAddNewTaskToReadyList+0xdc>)
 8007d48:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007d4c:	601a      	str	r2, [r3, #0]
 8007d4e:	f3bf 8f4f 	dsb	sy
 8007d52:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007d56:	bf00      	nop
 8007d58:	3708      	adds	r7, #8
 8007d5a:	46bd      	mov	sp, r7
 8007d5c:	bd80      	pop	{r7, pc}
 8007d5e:	bf00      	nop
 8007d60:	20002c58 	.word	0x20002c58
 8007d64:	20002784 	.word	0x20002784
 8007d68:	20002c64 	.word	0x20002c64
 8007d6c:	20002c74 	.word	0x20002c74
 8007d70:	20002c60 	.word	0x20002c60
 8007d74:	20002788 	.word	0x20002788
 8007d78:	e000ed04 	.word	0xe000ed04

08007d7c <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 8007d7c:	b580      	push	{r7, lr}
 8007d7e:	b084      	sub	sp, #16
 8007d80:	af00      	add	r7, sp, #0
 8007d82:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8007d84:	f001 fb9e 	bl	80094c4 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d102      	bne.n	8007d94 <vTaskDelete+0x18>
 8007d8e:	4b2c      	ldr	r3, [pc, #176]	; (8007e40 <vTaskDelete+0xc4>)
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	e000      	b.n	8007d96 <vTaskDelete+0x1a>
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready/delayed list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	3304      	adds	r3, #4
 8007d9c:	4618      	mov	r0, r3
 8007d9e:	f7ff f91f 	bl	8006fe0 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d004      	beq.n	8007db4 <vTaskDelete+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	3318      	adds	r3, #24
 8007dae:	4618      	mov	r0, r3
 8007db0:	f7ff f916 	bl	8006fe0 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 8007db4:	4b23      	ldr	r3, [pc, #140]	; (8007e44 <vTaskDelete+0xc8>)
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	3301      	adds	r3, #1
 8007dba:	4a22      	ldr	r2, [pc, #136]	; (8007e44 <vTaskDelete+0xc8>)
 8007dbc:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 8007dbe:	4b20      	ldr	r3, [pc, #128]	; (8007e40 <vTaskDelete+0xc4>)
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	68fa      	ldr	r2, [r7, #12]
 8007dc4:	429a      	cmp	r2, r3
 8007dc6:	d10b      	bne.n	8007de0 <vTaskDelete+0x64>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	3304      	adds	r3, #4
 8007dcc:	4619      	mov	r1, r3
 8007dce:	481e      	ldr	r0, [pc, #120]	; (8007e48 <vTaskDelete+0xcc>)
 8007dd0:	f7ff f8a9 	bl	8006f26 <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 8007dd4:	4b1d      	ldr	r3, [pc, #116]	; (8007e4c <vTaskDelete+0xd0>)
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	3301      	adds	r3, #1
 8007dda:	4a1c      	ldr	r2, [pc, #112]	; (8007e4c <vTaskDelete+0xd0>)
 8007ddc:	6013      	str	r3, [r2, #0]
 8007dde:	e009      	b.n	8007df4 <vTaskDelete+0x78>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 8007de0:	4b1b      	ldr	r3, [pc, #108]	; (8007e50 <vTaskDelete+0xd4>)
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	3b01      	subs	r3, #1
 8007de6:	4a1a      	ldr	r2, [pc, #104]	; (8007e50 <vTaskDelete+0xd4>)
 8007de8:	6013      	str	r3, [r2, #0]
				traceTASK_DELETE( pxTCB );
				prvDeleteTCB( pxTCB );
 8007dea:	68f8      	ldr	r0, [r7, #12]
 8007dec:	f000 fc74 	bl	80086d8 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 8007df0:	f000 fca6 	bl	8008740 <prvResetNextTaskUnblockTime>
			}
		}
		taskEXIT_CRITICAL();
 8007df4:	f001 fb96 	bl	8009524 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 8007df8:	4b16      	ldr	r3, [pc, #88]	; (8007e54 <vTaskDelete+0xd8>)
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	d01b      	beq.n	8007e38 <vTaskDelete+0xbc>
		{
			if( pxTCB == pxCurrentTCB )
 8007e00:	4b0f      	ldr	r3, [pc, #60]	; (8007e40 <vTaskDelete+0xc4>)
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	68fa      	ldr	r2, [r7, #12]
 8007e06:	429a      	cmp	r2, r3
 8007e08:	d116      	bne.n	8007e38 <vTaskDelete+0xbc>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 8007e0a:	4b13      	ldr	r3, [pc, #76]	; (8007e58 <vTaskDelete+0xdc>)
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d00a      	beq.n	8007e28 <vTaskDelete+0xac>
	__asm volatile
 8007e12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e16:	f383 8811 	msr	BASEPRI, r3
 8007e1a:	f3bf 8f6f 	isb	sy
 8007e1e:	f3bf 8f4f 	dsb	sy
 8007e22:	60bb      	str	r3, [r7, #8]
}
 8007e24:	bf00      	nop
 8007e26:	e7fe      	b.n	8007e26 <vTaskDelete+0xaa>
				portYIELD_WITHIN_API();
 8007e28:	4b0c      	ldr	r3, [pc, #48]	; (8007e5c <vTaskDelete+0xe0>)
 8007e2a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007e2e:	601a      	str	r2, [r3, #0]
 8007e30:	f3bf 8f4f 	dsb	sy
 8007e34:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8007e38:	bf00      	nop
 8007e3a:	3710      	adds	r7, #16
 8007e3c:	46bd      	mov	sp, r7
 8007e3e:	bd80      	pop	{r7, pc}
 8007e40:	20002784 	.word	0x20002784
 8007e44:	20002c74 	.word	0x20002c74
 8007e48:	20002c2c 	.word	0x20002c2c
 8007e4c:	20002c40 	.word	0x20002c40
 8007e50:	20002c58 	.word	0x20002c58
 8007e54:	20002c64 	.word	0x20002c64
 8007e58:	20002c80 	.word	0x20002c80
 8007e5c:	e000ed04 	.word	0xe000ed04

08007e60 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007e60:	b580      	push	{r7, lr}
 8007e62:	b084      	sub	sp, #16
 8007e64:	af00      	add	r7, sp, #0
 8007e66:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007e68:	2300      	movs	r3, #0
 8007e6a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	d017      	beq.n	8007ea2 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8007e72:	4b13      	ldr	r3, [pc, #76]	; (8007ec0 <vTaskDelay+0x60>)
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	d00a      	beq.n	8007e90 <vTaskDelay+0x30>
	__asm volatile
 8007e7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e7e:	f383 8811 	msr	BASEPRI, r3
 8007e82:	f3bf 8f6f 	isb	sy
 8007e86:	f3bf 8f4f 	dsb	sy
 8007e8a:	60bb      	str	r3, [r7, #8]
}
 8007e8c:	bf00      	nop
 8007e8e:	e7fe      	b.n	8007e8e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8007e90:	f000 f88a 	bl	8007fa8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007e94:	2100      	movs	r1, #0
 8007e96:	6878      	ldr	r0, [r7, #4]
 8007e98:	f000 fe42 	bl	8008b20 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007e9c:	f000 f892 	bl	8007fc4 <xTaskResumeAll>
 8007ea0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	d107      	bne.n	8007eb8 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8007ea8:	4b06      	ldr	r3, [pc, #24]	; (8007ec4 <vTaskDelay+0x64>)
 8007eaa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007eae:	601a      	str	r2, [r3, #0]
 8007eb0:	f3bf 8f4f 	dsb	sy
 8007eb4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007eb8:	bf00      	nop
 8007eba:	3710      	adds	r7, #16
 8007ebc:	46bd      	mov	sp, r7
 8007ebe:	bd80      	pop	{r7, pc}
 8007ec0:	20002c80 	.word	0x20002c80
 8007ec4:	e000ed04 	.word	0xe000ed04

08007ec8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007ec8:	b580      	push	{r7, lr}
 8007eca:	b08a      	sub	sp, #40	; 0x28
 8007ecc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8007ece:	2300      	movs	r3, #0
 8007ed0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8007ed2:	2300      	movs	r3, #0
 8007ed4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007ed6:	463a      	mov	r2, r7
 8007ed8:	1d39      	adds	r1, r7, #4
 8007eda:	f107 0308 	add.w	r3, r7, #8
 8007ede:	4618      	mov	r0, r3
 8007ee0:	f7fe ffc0 	bl	8006e64 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007ee4:	6839      	ldr	r1, [r7, #0]
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	68ba      	ldr	r2, [r7, #8]
 8007eea:	9202      	str	r2, [sp, #8]
 8007eec:	9301      	str	r3, [sp, #4]
 8007eee:	2300      	movs	r3, #0
 8007ef0:	9300      	str	r3, [sp, #0]
 8007ef2:	2300      	movs	r3, #0
 8007ef4:	460a      	mov	r2, r1
 8007ef6:	4924      	ldr	r1, [pc, #144]	; (8007f88 <vTaskStartScheduler+0xc0>)
 8007ef8:	4824      	ldr	r0, [pc, #144]	; (8007f8c <vTaskStartScheduler+0xc4>)
 8007efa:	f7ff fd87 	bl	8007a0c <xTaskCreateStatic>
 8007efe:	4603      	mov	r3, r0
 8007f00:	4a23      	ldr	r2, [pc, #140]	; (8007f90 <vTaskStartScheduler+0xc8>)
 8007f02:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007f04:	4b22      	ldr	r3, [pc, #136]	; (8007f90 <vTaskStartScheduler+0xc8>)
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	d002      	beq.n	8007f12 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007f0c:	2301      	movs	r3, #1
 8007f0e:	617b      	str	r3, [r7, #20]
 8007f10:	e001      	b.n	8007f16 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8007f12:	2300      	movs	r3, #0
 8007f14:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8007f16:	697b      	ldr	r3, [r7, #20]
 8007f18:	2b01      	cmp	r3, #1
 8007f1a:	d102      	bne.n	8007f22 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8007f1c:	f000 fe54 	bl	8008bc8 <xTimerCreateTimerTask>
 8007f20:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8007f22:	697b      	ldr	r3, [r7, #20]
 8007f24:	2b01      	cmp	r3, #1
 8007f26:	d11b      	bne.n	8007f60 <vTaskStartScheduler+0x98>
	__asm volatile
 8007f28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f2c:	f383 8811 	msr	BASEPRI, r3
 8007f30:	f3bf 8f6f 	isb	sy
 8007f34:	f3bf 8f4f 	dsb	sy
 8007f38:	613b      	str	r3, [r7, #16]
}
 8007f3a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007f3c:	4b15      	ldr	r3, [pc, #84]	; (8007f94 <vTaskStartScheduler+0xcc>)
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	3354      	adds	r3, #84	; 0x54
 8007f42:	4a15      	ldr	r2, [pc, #84]	; (8007f98 <vTaskStartScheduler+0xd0>)
 8007f44:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007f46:	4b15      	ldr	r3, [pc, #84]	; (8007f9c <vTaskStartScheduler+0xd4>)
 8007f48:	f04f 32ff 	mov.w	r2, #4294967295
 8007f4c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007f4e:	4b14      	ldr	r3, [pc, #80]	; (8007fa0 <vTaskStartScheduler+0xd8>)
 8007f50:	2201      	movs	r2, #1
 8007f52:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8007f54:	4b13      	ldr	r3, [pc, #76]	; (8007fa4 <vTaskStartScheduler+0xdc>)
 8007f56:	2200      	movs	r2, #0
 8007f58:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007f5a:	f001 fa11 	bl	8009380 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007f5e:	e00e      	b.n	8007f7e <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007f60:	697b      	ldr	r3, [r7, #20]
 8007f62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f66:	d10a      	bne.n	8007f7e <vTaskStartScheduler+0xb6>
	__asm volatile
 8007f68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f6c:	f383 8811 	msr	BASEPRI, r3
 8007f70:	f3bf 8f6f 	isb	sy
 8007f74:	f3bf 8f4f 	dsb	sy
 8007f78:	60fb      	str	r3, [r7, #12]
}
 8007f7a:	bf00      	nop
 8007f7c:	e7fe      	b.n	8007f7c <vTaskStartScheduler+0xb4>
}
 8007f7e:	bf00      	nop
 8007f80:	3718      	adds	r7, #24
 8007f82:	46bd      	mov	sp, r7
 8007f84:	bd80      	pop	{r7, pc}
 8007f86:	bf00      	nop
 8007f88:	08009dc4 	.word	0x08009dc4
 8007f8c:	080085cd 	.word	0x080085cd
 8007f90:	20002c7c 	.word	0x20002c7c
 8007f94:	20002784 	.word	0x20002784
 8007f98:	20000018 	.word	0x20000018
 8007f9c:	20002c78 	.word	0x20002c78
 8007fa0:	20002c64 	.word	0x20002c64
 8007fa4:	20002c5c 	.word	0x20002c5c

08007fa8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007fa8:	b480      	push	{r7}
 8007faa:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8007fac:	4b04      	ldr	r3, [pc, #16]	; (8007fc0 <vTaskSuspendAll+0x18>)
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	3301      	adds	r3, #1
 8007fb2:	4a03      	ldr	r2, [pc, #12]	; (8007fc0 <vTaskSuspendAll+0x18>)
 8007fb4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8007fb6:	bf00      	nop
 8007fb8:	46bd      	mov	sp, r7
 8007fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fbe:	4770      	bx	lr
 8007fc0:	20002c80 	.word	0x20002c80

08007fc4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007fc4:	b580      	push	{r7, lr}
 8007fc6:	b084      	sub	sp, #16
 8007fc8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8007fca:	2300      	movs	r3, #0
 8007fcc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8007fce:	2300      	movs	r3, #0
 8007fd0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8007fd2:	4b42      	ldr	r3, [pc, #264]	; (80080dc <xTaskResumeAll+0x118>)
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	d10a      	bne.n	8007ff0 <xTaskResumeAll+0x2c>
	__asm volatile
 8007fda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fde:	f383 8811 	msr	BASEPRI, r3
 8007fe2:	f3bf 8f6f 	isb	sy
 8007fe6:	f3bf 8f4f 	dsb	sy
 8007fea:	603b      	str	r3, [r7, #0]
}
 8007fec:	bf00      	nop
 8007fee:	e7fe      	b.n	8007fee <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007ff0:	f001 fa68 	bl	80094c4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007ff4:	4b39      	ldr	r3, [pc, #228]	; (80080dc <xTaskResumeAll+0x118>)
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	3b01      	subs	r3, #1
 8007ffa:	4a38      	ldr	r2, [pc, #224]	; (80080dc <xTaskResumeAll+0x118>)
 8007ffc:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007ffe:	4b37      	ldr	r3, [pc, #220]	; (80080dc <xTaskResumeAll+0x118>)
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	2b00      	cmp	r3, #0
 8008004:	d162      	bne.n	80080cc <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008006:	4b36      	ldr	r3, [pc, #216]	; (80080e0 <xTaskResumeAll+0x11c>)
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	2b00      	cmp	r3, #0
 800800c:	d05e      	beq.n	80080cc <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800800e:	e02f      	b.n	8008070 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008010:	4b34      	ldr	r3, [pc, #208]	; (80080e4 <xTaskResumeAll+0x120>)
 8008012:	68db      	ldr	r3, [r3, #12]
 8008014:	68db      	ldr	r3, [r3, #12]
 8008016:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	3318      	adds	r3, #24
 800801c:	4618      	mov	r0, r3
 800801e:	f7fe ffdf 	bl	8006fe0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	3304      	adds	r3, #4
 8008026:	4618      	mov	r0, r3
 8008028:	f7fe ffda 	bl	8006fe0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008030:	4b2d      	ldr	r3, [pc, #180]	; (80080e8 <xTaskResumeAll+0x124>)
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	429a      	cmp	r2, r3
 8008036:	d903      	bls.n	8008040 <xTaskResumeAll+0x7c>
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800803c:	4a2a      	ldr	r2, [pc, #168]	; (80080e8 <xTaskResumeAll+0x124>)
 800803e:	6013      	str	r3, [r2, #0]
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008044:	4613      	mov	r3, r2
 8008046:	009b      	lsls	r3, r3, #2
 8008048:	4413      	add	r3, r2
 800804a:	009b      	lsls	r3, r3, #2
 800804c:	4a27      	ldr	r2, [pc, #156]	; (80080ec <xTaskResumeAll+0x128>)
 800804e:	441a      	add	r2, r3
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	3304      	adds	r3, #4
 8008054:	4619      	mov	r1, r3
 8008056:	4610      	mov	r0, r2
 8008058:	f7fe ff65 	bl	8006f26 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800805c:	68fb      	ldr	r3, [r7, #12]
 800805e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008060:	4b23      	ldr	r3, [pc, #140]	; (80080f0 <xTaskResumeAll+0x12c>)
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008066:	429a      	cmp	r2, r3
 8008068:	d302      	bcc.n	8008070 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800806a:	4b22      	ldr	r3, [pc, #136]	; (80080f4 <xTaskResumeAll+0x130>)
 800806c:	2201      	movs	r2, #1
 800806e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008070:	4b1c      	ldr	r3, [pc, #112]	; (80080e4 <xTaskResumeAll+0x120>)
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	2b00      	cmp	r3, #0
 8008076:	d1cb      	bne.n	8008010 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	2b00      	cmp	r3, #0
 800807c:	d001      	beq.n	8008082 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800807e:	f000 fb5f 	bl	8008740 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8008082:	4b1d      	ldr	r3, [pc, #116]	; (80080f8 <xTaskResumeAll+0x134>)
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	2b00      	cmp	r3, #0
 800808c:	d010      	beq.n	80080b0 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800808e:	f000 f847 	bl	8008120 <xTaskIncrementTick>
 8008092:	4603      	mov	r3, r0
 8008094:	2b00      	cmp	r3, #0
 8008096:	d002      	beq.n	800809e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8008098:	4b16      	ldr	r3, [pc, #88]	; (80080f4 <xTaskResumeAll+0x130>)
 800809a:	2201      	movs	r2, #1
 800809c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	3b01      	subs	r3, #1
 80080a2:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d1f1      	bne.n	800808e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80080aa:	4b13      	ldr	r3, [pc, #76]	; (80080f8 <xTaskResumeAll+0x134>)
 80080ac:	2200      	movs	r2, #0
 80080ae:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80080b0:	4b10      	ldr	r3, [pc, #64]	; (80080f4 <xTaskResumeAll+0x130>)
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	d009      	beq.n	80080cc <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80080b8:	2301      	movs	r3, #1
 80080ba:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80080bc:	4b0f      	ldr	r3, [pc, #60]	; (80080fc <xTaskResumeAll+0x138>)
 80080be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80080c2:	601a      	str	r2, [r3, #0]
 80080c4:	f3bf 8f4f 	dsb	sy
 80080c8:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80080cc:	f001 fa2a 	bl	8009524 <vPortExitCritical>

	return xAlreadyYielded;
 80080d0:	68bb      	ldr	r3, [r7, #8]
}
 80080d2:	4618      	mov	r0, r3
 80080d4:	3710      	adds	r7, #16
 80080d6:	46bd      	mov	sp, r7
 80080d8:	bd80      	pop	{r7, pc}
 80080da:	bf00      	nop
 80080dc:	20002c80 	.word	0x20002c80
 80080e0:	20002c58 	.word	0x20002c58
 80080e4:	20002c18 	.word	0x20002c18
 80080e8:	20002c60 	.word	0x20002c60
 80080ec:	20002788 	.word	0x20002788
 80080f0:	20002784 	.word	0x20002784
 80080f4:	20002c6c 	.word	0x20002c6c
 80080f8:	20002c68 	.word	0x20002c68
 80080fc:	e000ed04 	.word	0xe000ed04

08008100 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8008100:	b480      	push	{r7}
 8008102:	b083      	sub	sp, #12
 8008104:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8008106:	4b05      	ldr	r3, [pc, #20]	; (800811c <xTaskGetTickCount+0x1c>)
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800810c:	687b      	ldr	r3, [r7, #4]
}
 800810e:	4618      	mov	r0, r3
 8008110:	370c      	adds	r7, #12
 8008112:	46bd      	mov	sp, r7
 8008114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008118:	4770      	bx	lr
 800811a:	bf00      	nop
 800811c:	20002c5c 	.word	0x20002c5c

08008120 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008120:	b580      	push	{r7, lr}
 8008122:	b086      	sub	sp, #24
 8008124:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8008126:	2300      	movs	r3, #0
 8008128:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800812a:	4b4f      	ldr	r3, [pc, #316]	; (8008268 <xTaskIncrementTick+0x148>)
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	2b00      	cmp	r3, #0
 8008130:	f040 808f 	bne.w	8008252 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008134:	4b4d      	ldr	r3, [pc, #308]	; (800826c <xTaskIncrementTick+0x14c>)
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	3301      	adds	r3, #1
 800813a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800813c:	4a4b      	ldr	r2, [pc, #300]	; (800826c <xTaskIncrementTick+0x14c>)
 800813e:	693b      	ldr	r3, [r7, #16]
 8008140:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008142:	693b      	ldr	r3, [r7, #16]
 8008144:	2b00      	cmp	r3, #0
 8008146:	d120      	bne.n	800818a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8008148:	4b49      	ldr	r3, [pc, #292]	; (8008270 <xTaskIncrementTick+0x150>)
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	2b00      	cmp	r3, #0
 8008150:	d00a      	beq.n	8008168 <xTaskIncrementTick+0x48>
	__asm volatile
 8008152:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008156:	f383 8811 	msr	BASEPRI, r3
 800815a:	f3bf 8f6f 	isb	sy
 800815e:	f3bf 8f4f 	dsb	sy
 8008162:	603b      	str	r3, [r7, #0]
}
 8008164:	bf00      	nop
 8008166:	e7fe      	b.n	8008166 <xTaskIncrementTick+0x46>
 8008168:	4b41      	ldr	r3, [pc, #260]	; (8008270 <xTaskIncrementTick+0x150>)
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	60fb      	str	r3, [r7, #12]
 800816e:	4b41      	ldr	r3, [pc, #260]	; (8008274 <xTaskIncrementTick+0x154>)
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	4a3f      	ldr	r2, [pc, #252]	; (8008270 <xTaskIncrementTick+0x150>)
 8008174:	6013      	str	r3, [r2, #0]
 8008176:	4a3f      	ldr	r2, [pc, #252]	; (8008274 <xTaskIncrementTick+0x154>)
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	6013      	str	r3, [r2, #0]
 800817c:	4b3e      	ldr	r3, [pc, #248]	; (8008278 <xTaskIncrementTick+0x158>)
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	3301      	adds	r3, #1
 8008182:	4a3d      	ldr	r2, [pc, #244]	; (8008278 <xTaskIncrementTick+0x158>)
 8008184:	6013      	str	r3, [r2, #0]
 8008186:	f000 fadb 	bl	8008740 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800818a:	4b3c      	ldr	r3, [pc, #240]	; (800827c <xTaskIncrementTick+0x15c>)
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	693a      	ldr	r2, [r7, #16]
 8008190:	429a      	cmp	r2, r3
 8008192:	d349      	bcc.n	8008228 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008194:	4b36      	ldr	r3, [pc, #216]	; (8008270 <xTaskIncrementTick+0x150>)
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	2b00      	cmp	r3, #0
 800819c:	d104      	bne.n	80081a8 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800819e:	4b37      	ldr	r3, [pc, #220]	; (800827c <xTaskIncrementTick+0x15c>)
 80081a0:	f04f 32ff 	mov.w	r2, #4294967295
 80081a4:	601a      	str	r2, [r3, #0]
					break;
 80081a6:	e03f      	b.n	8008228 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80081a8:	4b31      	ldr	r3, [pc, #196]	; (8008270 <xTaskIncrementTick+0x150>)
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	68db      	ldr	r3, [r3, #12]
 80081ae:	68db      	ldr	r3, [r3, #12]
 80081b0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80081b2:	68bb      	ldr	r3, [r7, #8]
 80081b4:	685b      	ldr	r3, [r3, #4]
 80081b6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80081b8:	693a      	ldr	r2, [r7, #16]
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	429a      	cmp	r2, r3
 80081be:	d203      	bcs.n	80081c8 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80081c0:	4a2e      	ldr	r2, [pc, #184]	; (800827c <xTaskIncrementTick+0x15c>)
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80081c6:	e02f      	b.n	8008228 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80081c8:	68bb      	ldr	r3, [r7, #8]
 80081ca:	3304      	adds	r3, #4
 80081cc:	4618      	mov	r0, r3
 80081ce:	f7fe ff07 	bl	8006fe0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80081d2:	68bb      	ldr	r3, [r7, #8]
 80081d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	d004      	beq.n	80081e4 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80081da:	68bb      	ldr	r3, [r7, #8]
 80081dc:	3318      	adds	r3, #24
 80081de:	4618      	mov	r0, r3
 80081e0:	f7fe fefe 	bl	8006fe0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80081e4:	68bb      	ldr	r3, [r7, #8]
 80081e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80081e8:	4b25      	ldr	r3, [pc, #148]	; (8008280 <xTaskIncrementTick+0x160>)
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	429a      	cmp	r2, r3
 80081ee:	d903      	bls.n	80081f8 <xTaskIncrementTick+0xd8>
 80081f0:	68bb      	ldr	r3, [r7, #8]
 80081f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081f4:	4a22      	ldr	r2, [pc, #136]	; (8008280 <xTaskIncrementTick+0x160>)
 80081f6:	6013      	str	r3, [r2, #0]
 80081f8:	68bb      	ldr	r3, [r7, #8]
 80081fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80081fc:	4613      	mov	r3, r2
 80081fe:	009b      	lsls	r3, r3, #2
 8008200:	4413      	add	r3, r2
 8008202:	009b      	lsls	r3, r3, #2
 8008204:	4a1f      	ldr	r2, [pc, #124]	; (8008284 <xTaskIncrementTick+0x164>)
 8008206:	441a      	add	r2, r3
 8008208:	68bb      	ldr	r3, [r7, #8]
 800820a:	3304      	adds	r3, #4
 800820c:	4619      	mov	r1, r3
 800820e:	4610      	mov	r0, r2
 8008210:	f7fe fe89 	bl	8006f26 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008214:	68bb      	ldr	r3, [r7, #8]
 8008216:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008218:	4b1b      	ldr	r3, [pc, #108]	; (8008288 <xTaskIncrementTick+0x168>)
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800821e:	429a      	cmp	r2, r3
 8008220:	d3b8      	bcc.n	8008194 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8008222:	2301      	movs	r3, #1
 8008224:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008226:	e7b5      	b.n	8008194 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008228:	4b17      	ldr	r3, [pc, #92]	; (8008288 <xTaskIncrementTick+0x168>)
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800822e:	4915      	ldr	r1, [pc, #84]	; (8008284 <xTaskIncrementTick+0x164>)
 8008230:	4613      	mov	r3, r2
 8008232:	009b      	lsls	r3, r3, #2
 8008234:	4413      	add	r3, r2
 8008236:	009b      	lsls	r3, r3, #2
 8008238:	440b      	add	r3, r1
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	2b01      	cmp	r3, #1
 800823e:	d901      	bls.n	8008244 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8008240:	2301      	movs	r3, #1
 8008242:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8008244:	4b11      	ldr	r3, [pc, #68]	; (800828c <xTaskIncrementTick+0x16c>)
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	2b00      	cmp	r3, #0
 800824a:	d007      	beq.n	800825c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800824c:	2301      	movs	r3, #1
 800824e:	617b      	str	r3, [r7, #20]
 8008250:	e004      	b.n	800825c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8008252:	4b0f      	ldr	r3, [pc, #60]	; (8008290 <xTaskIncrementTick+0x170>)
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	3301      	adds	r3, #1
 8008258:	4a0d      	ldr	r2, [pc, #52]	; (8008290 <xTaskIncrementTick+0x170>)
 800825a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800825c:	697b      	ldr	r3, [r7, #20]
}
 800825e:	4618      	mov	r0, r3
 8008260:	3718      	adds	r7, #24
 8008262:	46bd      	mov	sp, r7
 8008264:	bd80      	pop	{r7, pc}
 8008266:	bf00      	nop
 8008268:	20002c80 	.word	0x20002c80
 800826c:	20002c5c 	.word	0x20002c5c
 8008270:	20002c10 	.word	0x20002c10
 8008274:	20002c14 	.word	0x20002c14
 8008278:	20002c70 	.word	0x20002c70
 800827c:	20002c78 	.word	0x20002c78
 8008280:	20002c60 	.word	0x20002c60
 8008284:	20002788 	.word	0x20002788
 8008288:	20002784 	.word	0x20002784
 800828c:	20002c6c 	.word	0x20002c6c
 8008290:	20002c68 	.word	0x20002c68

08008294 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008294:	b480      	push	{r7}
 8008296:	b085      	sub	sp, #20
 8008298:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800829a:	4b2a      	ldr	r3, [pc, #168]	; (8008344 <vTaskSwitchContext+0xb0>)
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	2b00      	cmp	r3, #0
 80082a0:	d003      	beq.n	80082aa <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80082a2:	4b29      	ldr	r3, [pc, #164]	; (8008348 <vTaskSwitchContext+0xb4>)
 80082a4:	2201      	movs	r2, #1
 80082a6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80082a8:	e046      	b.n	8008338 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 80082aa:	4b27      	ldr	r3, [pc, #156]	; (8008348 <vTaskSwitchContext+0xb4>)
 80082ac:	2200      	movs	r2, #0
 80082ae:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80082b0:	4b26      	ldr	r3, [pc, #152]	; (800834c <vTaskSwitchContext+0xb8>)
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	60fb      	str	r3, [r7, #12]
 80082b6:	e010      	b.n	80082da <vTaskSwitchContext+0x46>
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	d10a      	bne.n	80082d4 <vTaskSwitchContext+0x40>
	__asm volatile
 80082be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082c2:	f383 8811 	msr	BASEPRI, r3
 80082c6:	f3bf 8f6f 	isb	sy
 80082ca:	f3bf 8f4f 	dsb	sy
 80082ce:	607b      	str	r3, [r7, #4]
}
 80082d0:	bf00      	nop
 80082d2:	e7fe      	b.n	80082d2 <vTaskSwitchContext+0x3e>
 80082d4:	68fb      	ldr	r3, [r7, #12]
 80082d6:	3b01      	subs	r3, #1
 80082d8:	60fb      	str	r3, [r7, #12]
 80082da:	491d      	ldr	r1, [pc, #116]	; (8008350 <vTaskSwitchContext+0xbc>)
 80082dc:	68fa      	ldr	r2, [r7, #12]
 80082de:	4613      	mov	r3, r2
 80082e0:	009b      	lsls	r3, r3, #2
 80082e2:	4413      	add	r3, r2
 80082e4:	009b      	lsls	r3, r3, #2
 80082e6:	440b      	add	r3, r1
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	d0e4      	beq.n	80082b8 <vTaskSwitchContext+0x24>
 80082ee:	68fa      	ldr	r2, [r7, #12]
 80082f0:	4613      	mov	r3, r2
 80082f2:	009b      	lsls	r3, r3, #2
 80082f4:	4413      	add	r3, r2
 80082f6:	009b      	lsls	r3, r3, #2
 80082f8:	4a15      	ldr	r2, [pc, #84]	; (8008350 <vTaskSwitchContext+0xbc>)
 80082fa:	4413      	add	r3, r2
 80082fc:	60bb      	str	r3, [r7, #8]
 80082fe:	68bb      	ldr	r3, [r7, #8]
 8008300:	685b      	ldr	r3, [r3, #4]
 8008302:	685a      	ldr	r2, [r3, #4]
 8008304:	68bb      	ldr	r3, [r7, #8]
 8008306:	605a      	str	r2, [r3, #4]
 8008308:	68bb      	ldr	r3, [r7, #8]
 800830a:	685a      	ldr	r2, [r3, #4]
 800830c:	68bb      	ldr	r3, [r7, #8]
 800830e:	3308      	adds	r3, #8
 8008310:	429a      	cmp	r2, r3
 8008312:	d104      	bne.n	800831e <vTaskSwitchContext+0x8a>
 8008314:	68bb      	ldr	r3, [r7, #8]
 8008316:	685b      	ldr	r3, [r3, #4]
 8008318:	685a      	ldr	r2, [r3, #4]
 800831a:	68bb      	ldr	r3, [r7, #8]
 800831c:	605a      	str	r2, [r3, #4]
 800831e:	68bb      	ldr	r3, [r7, #8]
 8008320:	685b      	ldr	r3, [r3, #4]
 8008322:	68db      	ldr	r3, [r3, #12]
 8008324:	4a0b      	ldr	r2, [pc, #44]	; (8008354 <vTaskSwitchContext+0xc0>)
 8008326:	6013      	str	r3, [r2, #0]
 8008328:	4a08      	ldr	r2, [pc, #32]	; (800834c <vTaskSwitchContext+0xb8>)
 800832a:	68fb      	ldr	r3, [r7, #12]
 800832c:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800832e:	4b09      	ldr	r3, [pc, #36]	; (8008354 <vTaskSwitchContext+0xc0>)
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	3354      	adds	r3, #84	; 0x54
 8008334:	4a08      	ldr	r2, [pc, #32]	; (8008358 <vTaskSwitchContext+0xc4>)
 8008336:	6013      	str	r3, [r2, #0]
}
 8008338:	bf00      	nop
 800833a:	3714      	adds	r7, #20
 800833c:	46bd      	mov	sp, r7
 800833e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008342:	4770      	bx	lr
 8008344:	20002c80 	.word	0x20002c80
 8008348:	20002c6c 	.word	0x20002c6c
 800834c:	20002c60 	.word	0x20002c60
 8008350:	20002788 	.word	0x20002788
 8008354:	20002784 	.word	0x20002784
 8008358:	20000018 	.word	0x20000018

0800835c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800835c:	b580      	push	{r7, lr}
 800835e:	b084      	sub	sp, #16
 8008360:	af00      	add	r7, sp, #0
 8008362:	6078      	str	r0, [r7, #4]
 8008364:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	2b00      	cmp	r3, #0
 800836a:	d10a      	bne.n	8008382 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800836c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008370:	f383 8811 	msr	BASEPRI, r3
 8008374:	f3bf 8f6f 	isb	sy
 8008378:	f3bf 8f4f 	dsb	sy
 800837c:	60fb      	str	r3, [r7, #12]
}
 800837e:	bf00      	nop
 8008380:	e7fe      	b.n	8008380 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008382:	4b07      	ldr	r3, [pc, #28]	; (80083a0 <vTaskPlaceOnEventList+0x44>)
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	3318      	adds	r3, #24
 8008388:	4619      	mov	r1, r3
 800838a:	6878      	ldr	r0, [r7, #4]
 800838c:	f7fe fdef 	bl	8006f6e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008390:	2101      	movs	r1, #1
 8008392:	6838      	ldr	r0, [r7, #0]
 8008394:	f000 fbc4 	bl	8008b20 <prvAddCurrentTaskToDelayedList>
}
 8008398:	bf00      	nop
 800839a:	3710      	adds	r7, #16
 800839c:	46bd      	mov	sp, r7
 800839e:	bd80      	pop	{r7, pc}
 80083a0:	20002784 	.word	0x20002784

080083a4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80083a4:	b580      	push	{r7, lr}
 80083a6:	b086      	sub	sp, #24
 80083a8:	af00      	add	r7, sp, #0
 80083aa:	60f8      	str	r0, [r7, #12]
 80083ac:	60b9      	str	r1, [r7, #8]
 80083ae:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	d10a      	bne.n	80083cc <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80083b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083ba:	f383 8811 	msr	BASEPRI, r3
 80083be:	f3bf 8f6f 	isb	sy
 80083c2:	f3bf 8f4f 	dsb	sy
 80083c6:	617b      	str	r3, [r7, #20]
}
 80083c8:	bf00      	nop
 80083ca:	e7fe      	b.n	80083ca <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80083cc:	4b0a      	ldr	r3, [pc, #40]	; (80083f8 <vTaskPlaceOnEventListRestricted+0x54>)
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	3318      	adds	r3, #24
 80083d2:	4619      	mov	r1, r3
 80083d4:	68f8      	ldr	r0, [r7, #12]
 80083d6:	f7fe fda6 	bl	8006f26 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	2b00      	cmp	r3, #0
 80083de:	d002      	beq.n	80083e6 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80083e0:	f04f 33ff 	mov.w	r3, #4294967295
 80083e4:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80083e6:	6879      	ldr	r1, [r7, #4]
 80083e8:	68b8      	ldr	r0, [r7, #8]
 80083ea:	f000 fb99 	bl	8008b20 <prvAddCurrentTaskToDelayedList>
	}
 80083ee:	bf00      	nop
 80083f0:	3718      	adds	r7, #24
 80083f2:	46bd      	mov	sp, r7
 80083f4:	bd80      	pop	{r7, pc}
 80083f6:	bf00      	nop
 80083f8:	20002784 	.word	0x20002784

080083fc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80083fc:	b580      	push	{r7, lr}
 80083fe:	b086      	sub	sp, #24
 8008400:	af00      	add	r7, sp, #0
 8008402:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	68db      	ldr	r3, [r3, #12]
 8008408:	68db      	ldr	r3, [r3, #12]
 800840a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800840c:	693b      	ldr	r3, [r7, #16]
 800840e:	2b00      	cmp	r3, #0
 8008410:	d10a      	bne.n	8008428 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8008412:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008416:	f383 8811 	msr	BASEPRI, r3
 800841a:	f3bf 8f6f 	isb	sy
 800841e:	f3bf 8f4f 	dsb	sy
 8008422:	60fb      	str	r3, [r7, #12]
}
 8008424:	bf00      	nop
 8008426:	e7fe      	b.n	8008426 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8008428:	693b      	ldr	r3, [r7, #16]
 800842a:	3318      	adds	r3, #24
 800842c:	4618      	mov	r0, r3
 800842e:	f7fe fdd7 	bl	8006fe0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008432:	4b1e      	ldr	r3, [pc, #120]	; (80084ac <xTaskRemoveFromEventList+0xb0>)
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	2b00      	cmp	r3, #0
 8008438:	d11d      	bne.n	8008476 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800843a:	693b      	ldr	r3, [r7, #16]
 800843c:	3304      	adds	r3, #4
 800843e:	4618      	mov	r0, r3
 8008440:	f7fe fdce 	bl	8006fe0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8008444:	693b      	ldr	r3, [r7, #16]
 8008446:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008448:	4b19      	ldr	r3, [pc, #100]	; (80084b0 <xTaskRemoveFromEventList+0xb4>)
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	429a      	cmp	r2, r3
 800844e:	d903      	bls.n	8008458 <xTaskRemoveFromEventList+0x5c>
 8008450:	693b      	ldr	r3, [r7, #16]
 8008452:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008454:	4a16      	ldr	r2, [pc, #88]	; (80084b0 <xTaskRemoveFromEventList+0xb4>)
 8008456:	6013      	str	r3, [r2, #0]
 8008458:	693b      	ldr	r3, [r7, #16]
 800845a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800845c:	4613      	mov	r3, r2
 800845e:	009b      	lsls	r3, r3, #2
 8008460:	4413      	add	r3, r2
 8008462:	009b      	lsls	r3, r3, #2
 8008464:	4a13      	ldr	r2, [pc, #76]	; (80084b4 <xTaskRemoveFromEventList+0xb8>)
 8008466:	441a      	add	r2, r3
 8008468:	693b      	ldr	r3, [r7, #16]
 800846a:	3304      	adds	r3, #4
 800846c:	4619      	mov	r1, r3
 800846e:	4610      	mov	r0, r2
 8008470:	f7fe fd59 	bl	8006f26 <vListInsertEnd>
 8008474:	e005      	b.n	8008482 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008476:	693b      	ldr	r3, [r7, #16]
 8008478:	3318      	adds	r3, #24
 800847a:	4619      	mov	r1, r3
 800847c:	480e      	ldr	r0, [pc, #56]	; (80084b8 <xTaskRemoveFromEventList+0xbc>)
 800847e:	f7fe fd52 	bl	8006f26 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008482:	693b      	ldr	r3, [r7, #16]
 8008484:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008486:	4b0d      	ldr	r3, [pc, #52]	; (80084bc <xTaskRemoveFromEventList+0xc0>)
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800848c:	429a      	cmp	r2, r3
 800848e:	d905      	bls.n	800849c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8008490:	2301      	movs	r3, #1
 8008492:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8008494:	4b0a      	ldr	r3, [pc, #40]	; (80084c0 <xTaskRemoveFromEventList+0xc4>)
 8008496:	2201      	movs	r2, #1
 8008498:	601a      	str	r2, [r3, #0]
 800849a:	e001      	b.n	80084a0 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800849c:	2300      	movs	r3, #0
 800849e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80084a0:	697b      	ldr	r3, [r7, #20]
}
 80084a2:	4618      	mov	r0, r3
 80084a4:	3718      	adds	r7, #24
 80084a6:	46bd      	mov	sp, r7
 80084a8:	bd80      	pop	{r7, pc}
 80084aa:	bf00      	nop
 80084ac:	20002c80 	.word	0x20002c80
 80084b0:	20002c60 	.word	0x20002c60
 80084b4:	20002788 	.word	0x20002788
 80084b8:	20002c18 	.word	0x20002c18
 80084bc:	20002784 	.word	0x20002784
 80084c0:	20002c6c 	.word	0x20002c6c

080084c4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80084c4:	b480      	push	{r7}
 80084c6:	b083      	sub	sp, #12
 80084c8:	af00      	add	r7, sp, #0
 80084ca:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80084cc:	4b06      	ldr	r3, [pc, #24]	; (80084e8 <vTaskInternalSetTimeOutState+0x24>)
 80084ce:	681a      	ldr	r2, [r3, #0]
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80084d4:	4b05      	ldr	r3, [pc, #20]	; (80084ec <vTaskInternalSetTimeOutState+0x28>)
 80084d6:	681a      	ldr	r2, [r3, #0]
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	605a      	str	r2, [r3, #4]
}
 80084dc:	bf00      	nop
 80084de:	370c      	adds	r7, #12
 80084e0:	46bd      	mov	sp, r7
 80084e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084e6:	4770      	bx	lr
 80084e8:	20002c70 	.word	0x20002c70
 80084ec:	20002c5c 	.word	0x20002c5c

080084f0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80084f0:	b580      	push	{r7, lr}
 80084f2:	b088      	sub	sp, #32
 80084f4:	af00      	add	r7, sp, #0
 80084f6:	6078      	str	r0, [r7, #4]
 80084f8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	d10a      	bne.n	8008516 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8008500:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008504:	f383 8811 	msr	BASEPRI, r3
 8008508:	f3bf 8f6f 	isb	sy
 800850c:	f3bf 8f4f 	dsb	sy
 8008510:	613b      	str	r3, [r7, #16]
}
 8008512:	bf00      	nop
 8008514:	e7fe      	b.n	8008514 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8008516:	683b      	ldr	r3, [r7, #0]
 8008518:	2b00      	cmp	r3, #0
 800851a:	d10a      	bne.n	8008532 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800851c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008520:	f383 8811 	msr	BASEPRI, r3
 8008524:	f3bf 8f6f 	isb	sy
 8008528:	f3bf 8f4f 	dsb	sy
 800852c:	60fb      	str	r3, [r7, #12]
}
 800852e:	bf00      	nop
 8008530:	e7fe      	b.n	8008530 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8008532:	f000 ffc7 	bl	80094c4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8008536:	4b1d      	ldr	r3, [pc, #116]	; (80085ac <xTaskCheckForTimeOut+0xbc>)
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	685b      	ldr	r3, [r3, #4]
 8008540:	69ba      	ldr	r2, [r7, #24]
 8008542:	1ad3      	subs	r3, r2, r3
 8008544:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8008546:	683b      	ldr	r3, [r7, #0]
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800854e:	d102      	bne.n	8008556 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8008550:	2300      	movs	r3, #0
 8008552:	61fb      	str	r3, [r7, #28]
 8008554:	e023      	b.n	800859e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	681a      	ldr	r2, [r3, #0]
 800855a:	4b15      	ldr	r3, [pc, #84]	; (80085b0 <xTaskCheckForTimeOut+0xc0>)
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	429a      	cmp	r2, r3
 8008560:	d007      	beq.n	8008572 <xTaskCheckForTimeOut+0x82>
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	685b      	ldr	r3, [r3, #4]
 8008566:	69ba      	ldr	r2, [r7, #24]
 8008568:	429a      	cmp	r2, r3
 800856a:	d302      	bcc.n	8008572 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800856c:	2301      	movs	r3, #1
 800856e:	61fb      	str	r3, [r7, #28]
 8008570:	e015      	b.n	800859e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8008572:	683b      	ldr	r3, [r7, #0]
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	697a      	ldr	r2, [r7, #20]
 8008578:	429a      	cmp	r2, r3
 800857a:	d20b      	bcs.n	8008594 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800857c:	683b      	ldr	r3, [r7, #0]
 800857e:	681a      	ldr	r2, [r3, #0]
 8008580:	697b      	ldr	r3, [r7, #20]
 8008582:	1ad2      	subs	r2, r2, r3
 8008584:	683b      	ldr	r3, [r7, #0]
 8008586:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008588:	6878      	ldr	r0, [r7, #4]
 800858a:	f7ff ff9b 	bl	80084c4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800858e:	2300      	movs	r3, #0
 8008590:	61fb      	str	r3, [r7, #28]
 8008592:	e004      	b.n	800859e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8008594:	683b      	ldr	r3, [r7, #0]
 8008596:	2200      	movs	r2, #0
 8008598:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800859a:	2301      	movs	r3, #1
 800859c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800859e:	f000 ffc1 	bl	8009524 <vPortExitCritical>

	return xReturn;
 80085a2:	69fb      	ldr	r3, [r7, #28]
}
 80085a4:	4618      	mov	r0, r3
 80085a6:	3720      	adds	r7, #32
 80085a8:	46bd      	mov	sp, r7
 80085aa:	bd80      	pop	{r7, pc}
 80085ac:	20002c5c 	.word	0x20002c5c
 80085b0:	20002c70 	.word	0x20002c70

080085b4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80085b4:	b480      	push	{r7}
 80085b6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80085b8:	4b03      	ldr	r3, [pc, #12]	; (80085c8 <vTaskMissedYield+0x14>)
 80085ba:	2201      	movs	r2, #1
 80085bc:	601a      	str	r2, [r3, #0]
}
 80085be:	bf00      	nop
 80085c0:	46bd      	mov	sp, r7
 80085c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085c6:	4770      	bx	lr
 80085c8:	20002c6c 	.word	0x20002c6c

080085cc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80085cc:	b580      	push	{r7, lr}
 80085ce:	b082      	sub	sp, #8
 80085d0:	af00      	add	r7, sp, #0
 80085d2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80085d4:	f000 f852 	bl	800867c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80085d8:	4b06      	ldr	r3, [pc, #24]	; (80085f4 <prvIdleTask+0x28>)
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	2b01      	cmp	r3, #1
 80085de:	d9f9      	bls.n	80085d4 <prvIdleTask+0x8>
			{
				taskYIELD();
 80085e0:	4b05      	ldr	r3, [pc, #20]	; (80085f8 <prvIdleTask+0x2c>)
 80085e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80085e6:	601a      	str	r2, [r3, #0]
 80085e8:	f3bf 8f4f 	dsb	sy
 80085ec:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80085f0:	e7f0      	b.n	80085d4 <prvIdleTask+0x8>
 80085f2:	bf00      	nop
 80085f4:	20002788 	.word	0x20002788
 80085f8:	e000ed04 	.word	0xe000ed04

080085fc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80085fc:	b580      	push	{r7, lr}
 80085fe:	b082      	sub	sp, #8
 8008600:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008602:	2300      	movs	r3, #0
 8008604:	607b      	str	r3, [r7, #4]
 8008606:	e00c      	b.n	8008622 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008608:	687a      	ldr	r2, [r7, #4]
 800860a:	4613      	mov	r3, r2
 800860c:	009b      	lsls	r3, r3, #2
 800860e:	4413      	add	r3, r2
 8008610:	009b      	lsls	r3, r3, #2
 8008612:	4a12      	ldr	r2, [pc, #72]	; (800865c <prvInitialiseTaskLists+0x60>)
 8008614:	4413      	add	r3, r2
 8008616:	4618      	mov	r0, r3
 8008618:	f7fe fc58 	bl	8006ecc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	3301      	adds	r3, #1
 8008620:	607b      	str	r3, [r7, #4]
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	2b37      	cmp	r3, #55	; 0x37
 8008626:	d9ef      	bls.n	8008608 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008628:	480d      	ldr	r0, [pc, #52]	; (8008660 <prvInitialiseTaskLists+0x64>)
 800862a:	f7fe fc4f 	bl	8006ecc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800862e:	480d      	ldr	r0, [pc, #52]	; (8008664 <prvInitialiseTaskLists+0x68>)
 8008630:	f7fe fc4c 	bl	8006ecc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008634:	480c      	ldr	r0, [pc, #48]	; (8008668 <prvInitialiseTaskLists+0x6c>)
 8008636:	f7fe fc49 	bl	8006ecc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800863a:	480c      	ldr	r0, [pc, #48]	; (800866c <prvInitialiseTaskLists+0x70>)
 800863c:	f7fe fc46 	bl	8006ecc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008640:	480b      	ldr	r0, [pc, #44]	; (8008670 <prvInitialiseTaskLists+0x74>)
 8008642:	f7fe fc43 	bl	8006ecc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8008646:	4b0b      	ldr	r3, [pc, #44]	; (8008674 <prvInitialiseTaskLists+0x78>)
 8008648:	4a05      	ldr	r2, [pc, #20]	; (8008660 <prvInitialiseTaskLists+0x64>)
 800864a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800864c:	4b0a      	ldr	r3, [pc, #40]	; (8008678 <prvInitialiseTaskLists+0x7c>)
 800864e:	4a05      	ldr	r2, [pc, #20]	; (8008664 <prvInitialiseTaskLists+0x68>)
 8008650:	601a      	str	r2, [r3, #0]
}
 8008652:	bf00      	nop
 8008654:	3708      	adds	r7, #8
 8008656:	46bd      	mov	sp, r7
 8008658:	bd80      	pop	{r7, pc}
 800865a:	bf00      	nop
 800865c:	20002788 	.word	0x20002788
 8008660:	20002be8 	.word	0x20002be8
 8008664:	20002bfc 	.word	0x20002bfc
 8008668:	20002c18 	.word	0x20002c18
 800866c:	20002c2c 	.word	0x20002c2c
 8008670:	20002c44 	.word	0x20002c44
 8008674:	20002c10 	.word	0x20002c10
 8008678:	20002c14 	.word	0x20002c14

0800867c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800867c:	b580      	push	{r7, lr}
 800867e:	b082      	sub	sp, #8
 8008680:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008682:	e019      	b.n	80086b8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008684:	f000 ff1e 	bl	80094c4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008688:	4b10      	ldr	r3, [pc, #64]	; (80086cc <prvCheckTasksWaitingTermination+0x50>)
 800868a:	68db      	ldr	r3, [r3, #12]
 800868c:	68db      	ldr	r3, [r3, #12]
 800868e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	3304      	adds	r3, #4
 8008694:	4618      	mov	r0, r3
 8008696:	f7fe fca3 	bl	8006fe0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800869a:	4b0d      	ldr	r3, [pc, #52]	; (80086d0 <prvCheckTasksWaitingTermination+0x54>)
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	3b01      	subs	r3, #1
 80086a0:	4a0b      	ldr	r2, [pc, #44]	; (80086d0 <prvCheckTasksWaitingTermination+0x54>)
 80086a2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80086a4:	4b0b      	ldr	r3, [pc, #44]	; (80086d4 <prvCheckTasksWaitingTermination+0x58>)
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	3b01      	subs	r3, #1
 80086aa:	4a0a      	ldr	r2, [pc, #40]	; (80086d4 <prvCheckTasksWaitingTermination+0x58>)
 80086ac:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80086ae:	f000 ff39 	bl	8009524 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80086b2:	6878      	ldr	r0, [r7, #4]
 80086b4:	f000 f810 	bl	80086d8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80086b8:	4b06      	ldr	r3, [pc, #24]	; (80086d4 <prvCheckTasksWaitingTermination+0x58>)
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	2b00      	cmp	r3, #0
 80086be:	d1e1      	bne.n	8008684 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80086c0:	bf00      	nop
 80086c2:	bf00      	nop
 80086c4:	3708      	adds	r7, #8
 80086c6:	46bd      	mov	sp, r7
 80086c8:	bd80      	pop	{r7, pc}
 80086ca:	bf00      	nop
 80086cc:	20002c2c 	.word	0x20002c2c
 80086d0:	20002c58 	.word	0x20002c58
 80086d4:	20002c40 	.word	0x20002c40

080086d8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80086d8:	b580      	push	{r7, lr}
 80086da:	b084      	sub	sp, #16
 80086dc:	af00      	add	r7, sp, #0
 80086de:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	3354      	adds	r3, #84	; 0x54
 80086e4:	4618      	mov	r0, r3
 80086e6:	f001 fa43 	bl	8009b70 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	d108      	bne.n	8008706 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80086f8:	4618      	mov	r0, r3
 80086fa:	f001 f8d1 	bl	80098a0 <vPortFree>
				vPortFree( pxTCB );
 80086fe:	6878      	ldr	r0, [r7, #4]
 8008700:	f001 f8ce 	bl	80098a0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008704:	e018      	b.n	8008738 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800870c:	2b01      	cmp	r3, #1
 800870e:	d103      	bne.n	8008718 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8008710:	6878      	ldr	r0, [r7, #4]
 8008712:	f001 f8c5 	bl	80098a0 <vPortFree>
	}
 8008716:	e00f      	b.n	8008738 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800871e:	2b02      	cmp	r3, #2
 8008720:	d00a      	beq.n	8008738 <prvDeleteTCB+0x60>
	__asm volatile
 8008722:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008726:	f383 8811 	msr	BASEPRI, r3
 800872a:	f3bf 8f6f 	isb	sy
 800872e:	f3bf 8f4f 	dsb	sy
 8008732:	60fb      	str	r3, [r7, #12]
}
 8008734:	bf00      	nop
 8008736:	e7fe      	b.n	8008736 <prvDeleteTCB+0x5e>
	}
 8008738:	bf00      	nop
 800873a:	3710      	adds	r7, #16
 800873c:	46bd      	mov	sp, r7
 800873e:	bd80      	pop	{r7, pc}

08008740 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008740:	b480      	push	{r7}
 8008742:	b083      	sub	sp, #12
 8008744:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008746:	4b0c      	ldr	r3, [pc, #48]	; (8008778 <prvResetNextTaskUnblockTime+0x38>)
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	2b00      	cmp	r3, #0
 800874e:	d104      	bne.n	800875a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008750:	4b0a      	ldr	r3, [pc, #40]	; (800877c <prvResetNextTaskUnblockTime+0x3c>)
 8008752:	f04f 32ff 	mov.w	r2, #4294967295
 8008756:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008758:	e008      	b.n	800876c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800875a:	4b07      	ldr	r3, [pc, #28]	; (8008778 <prvResetNextTaskUnblockTime+0x38>)
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	68db      	ldr	r3, [r3, #12]
 8008760:	68db      	ldr	r3, [r3, #12]
 8008762:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	685b      	ldr	r3, [r3, #4]
 8008768:	4a04      	ldr	r2, [pc, #16]	; (800877c <prvResetNextTaskUnblockTime+0x3c>)
 800876a:	6013      	str	r3, [r2, #0]
}
 800876c:	bf00      	nop
 800876e:	370c      	adds	r7, #12
 8008770:	46bd      	mov	sp, r7
 8008772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008776:	4770      	bx	lr
 8008778:	20002c10 	.word	0x20002c10
 800877c:	20002c78 	.word	0x20002c78

08008780 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008780:	b480      	push	{r7}
 8008782:	b083      	sub	sp, #12
 8008784:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8008786:	4b0b      	ldr	r3, [pc, #44]	; (80087b4 <xTaskGetSchedulerState+0x34>)
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	2b00      	cmp	r3, #0
 800878c:	d102      	bne.n	8008794 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800878e:	2301      	movs	r3, #1
 8008790:	607b      	str	r3, [r7, #4]
 8008792:	e008      	b.n	80087a6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008794:	4b08      	ldr	r3, [pc, #32]	; (80087b8 <xTaskGetSchedulerState+0x38>)
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	2b00      	cmp	r3, #0
 800879a:	d102      	bne.n	80087a2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800879c:	2302      	movs	r3, #2
 800879e:	607b      	str	r3, [r7, #4]
 80087a0:	e001      	b.n	80087a6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80087a2:	2300      	movs	r3, #0
 80087a4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80087a6:	687b      	ldr	r3, [r7, #4]
	}
 80087a8:	4618      	mov	r0, r3
 80087aa:	370c      	adds	r7, #12
 80087ac:	46bd      	mov	sp, r7
 80087ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087b2:	4770      	bx	lr
 80087b4:	20002c64 	.word	0x20002c64
 80087b8:	20002c80 	.word	0x20002c80

080087bc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80087bc:	b580      	push	{r7, lr}
 80087be:	b086      	sub	sp, #24
 80087c0:	af00      	add	r7, sp, #0
 80087c2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80087c8:	2300      	movs	r3, #0
 80087ca:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	d056      	beq.n	8008880 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80087d2:	4b2e      	ldr	r3, [pc, #184]	; (800888c <xTaskPriorityDisinherit+0xd0>)
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	693a      	ldr	r2, [r7, #16]
 80087d8:	429a      	cmp	r2, r3
 80087da:	d00a      	beq.n	80087f2 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80087dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087e0:	f383 8811 	msr	BASEPRI, r3
 80087e4:	f3bf 8f6f 	isb	sy
 80087e8:	f3bf 8f4f 	dsb	sy
 80087ec:	60fb      	str	r3, [r7, #12]
}
 80087ee:	bf00      	nop
 80087f0:	e7fe      	b.n	80087f0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80087f2:	693b      	ldr	r3, [r7, #16]
 80087f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	d10a      	bne.n	8008810 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80087fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087fe:	f383 8811 	msr	BASEPRI, r3
 8008802:	f3bf 8f6f 	isb	sy
 8008806:	f3bf 8f4f 	dsb	sy
 800880a:	60bb      	str	r3, [r7, #8]
}
 800880c:	bf00      	nop
 800880e:	e7fe      	b.n	800880e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8008810:	693b      	ldr	r3, [r7, #16]
 8008812:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008814:	1e5a      	subs	r2, r3, #1
 8008816:	693b      	ldr	r3, [r7, #16]
 8008818:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800881a:	693b      	ldr	r3, [r7, #16]
 800881c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800881e:	693b      	ldr	r3, [r7, #16]
 8008820:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008822:	429a      	cmp	r2, r3
 8008824:	d02c      	beq.n	8008880 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8008826:	693b      	ldr	r3, [r7, #16]
 8008828:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800882a:	2b00      	cmp	r3, #0
 800882c:	d128      	bne.n	8008880 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800882e:	693b      	ldr	r3, [r7, #16]
 8008830:	3304      	adds	r3, #4
 8008832:	4618      	mov	r0, r3
 8008834:	f7fe fbd4 	bl	8006fe0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008838:	693b      	ldr	r3, [r7, #16]
 800883a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800883c:	693b      	ldr	r3, [r7, #16]
 800883e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008840:	693b      	ldr	r3, [r7, #16]
 8008842:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008844:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008848:	693b      	ldr	r3, [r7, #16]
 800884a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800884c:	693b      	ldr	r3, [r7, #16]
 800884e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008850:	4b0f      	ldr	r3, [pc, #60]	; (8008890 <xTaskPriorityDisinherit+0xd4>)
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	429a      	cmp	r2, r3
 8008856:	d903      	bls.n	8008860 <xTaskPriorityDisinherit+0xa4>
 8008858:	693b      	ldr	r3, [r7, #16]
 800885a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800885c:	4a0c      	ldr	r2, [pc, #48]	; (8008890 <xTaskPriorityDisinherit+0xd4>)
 800885e:	6013      	str	r3, [r2, #0]
 8008860:	693b      	ldr	r3, [r7, #16]
 8008862:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008864:	4613      	mov	r3, r2
 8008866:	009b      	lsls	r3, r3, #2
 8008868:	4413      	add	r3, r2
 800886a:	009b      	lsls	r3, r3, #2
 800886c:	4a09      	ldr	r2, [pc, #36]	; (8008894 <xTaskPriorityDisinherit+0xd8>)
 800886e:	441a      	add	r2, r3
 8008870:	693b      	ldr	r3, [r7, #16]
 8008872:	3304      	adds	r3, #4
 8008874:	4619      	mov	r1, r3
 8008876:	4610      	mov	r0, r2
 8008878:	f7fe fb55 	bl	8006f26 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800887c:	2301      	movs	r3, #1
 800887e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008880:	697b      	ldr	r3, [r7, #20]
	}
 8008882:	4618      	mov	r0, r3
 8008884:	3718      	adds	r7, #24
 8008886:	46bd      	mov	sp, r7
 8008888:	bd80      	pop	{r7, pc}
 800888a:	bf00      	nop
 800888c:	20002784 	.word	0x20002784
 8008890:	20002c60 	.word	0x20002c60
 8008894:	20002788 	.word	0x20002788

08008898 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 8008898:	b580      	push	{r7, lr}
 800889a:	b086      	sub	sp, #24
 800889c:	af00      	add	r7, sp, #0
 800889e:	60f8      	str	r0, [r7, #12]
 80088a0:	60b9      	str	r1, [r7, #8]
 80088a2:	607a      	str	r2, [r7, #4]
 80088a4:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 80088a6:	f000 fe0d 	bl	80094c4 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 80088aa:	4b29      	ldr	r3, [pc, #164]	; (8008950 <xTaskNotifyWait+0xb8>)
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 80088b2:	b2db      	uxtb	r3, r3
 80088b4:	2b02      	cmp	r3, #2
 80088b6:	d01c      	beq.n	80088f2 <xTaskNotifyWait+0x5a>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 80088b8:	4b25      	ldr	r3, [pc, #148]	; (8008950 <xTaskNotifyWait+0xb8>)
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	f8d3 10b4 	ldr.w	r1, [r3, #180]	; 0xb4
 80088c0:	68fa      	ldr	r2, [r7, #12]
 80088c2:	43d2      	mvns	r2, r2
 80088c4:	400a      	ands	r2, r1
 80088c6:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 80088ca:	4b21      	ldr	r3, [pc, #132]	; (8008950 <xTaskNotifyWait+0xb8>)
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	2201      	movs	r2, #1
 80088d0:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8

				if( xTicksToWait > ( TickType_t ) 0 )
 80088d4:	683b      	ldr	r3, [r7, #0]
 80088d6:	2b00      	cmp	r3, #0
 80088d8:	d00b      	beq.n	80088f2 <xTaskNotifyWait+0x5a>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80088da:	2101      	movs	r1, #1
 80088dc:	6838      	ldr	r0, [r7, #0]
 80088de:	f000 f91f 	bl	8008b20 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 80088e2:	4b1c      	ldr	r3, [pc, #112]	; (8008954 <xTaskNotifyWait+0xbc>)
 80088e4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80088e8:	601a      	str	r2, [r3, #0]
 80088ea:	f3bf 8f4f 	dsb	sy
 80088ee:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 80088f2:	f000 fe17 	bl	8009524 <vPortExitCritical>

		taskENTER_CRITICAL();
 80088f6:	f000 fde5 	bl	80094c4 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	2b00      	cmp	r3, #0
 80088fe:	d005      	beq.n	800890c <xTaskNotifyWait+0x74>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 8008900:	4b13      	ldr	r3, [pc, #76]	; (8008950 <xTaskNotifyWait+0xb8>)
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800890c:	4b10      	ldr	r3, [pc, #64]	; (8008950 <xTaskNotifyWait+0xb8>)
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 8008914:	b2db      	uxtb	r3, r3
 8008916:	2b02      	cmp	r3, #2
 8008918:	d002      	beq.n	8008920 <xTaskNotifyWait+0x88>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 800891a:	2300      	movs	r3, #0
 800891c:	617b      	str	r3, [r7, #20]
 800891e:	e00a      	b.n	8008936 <xTaskNotifyWait+0x9e>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 8008920:	4b0b      	ldr	r3, [pc, #44]	; (8008950 <xTaskNotifyWait+0xb8>)
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	f8d3 10b4 	ldr.w	r1, [r3, #180]	; 0xb4
 8008928:	68ba      	ldr	r2, [r7, #8]
 800892a:	43d2      	mvns	r2, r2
 800892c:	400a      	ands	r2, r1
 800892e:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
				xReturn = pdTRUE;
 8008932:	2301      	movs	r3, #1
 8008934:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008936:	4b06      	ldr	r3, [pc, #24]	; (8008950 <xTaskNotifyWait+0xb8>)
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	2200      	movs	r2, #0
 800893c:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
		}
		taskEXIT_CRITICAL();
 8008940:	f000 fdf0 	bl	8009524 <vPortExitCritical>

		return xReturn;
 8008944:	697b      	ldr	r3, [r7, #20]
	}
 8008946:	4618      	mov	r0, r3
 8008948:	3718      	adds	r7, #24
 800894a:	46bd      	mov	sp, r7
 800894c:	bd80      	pop	{r7, pc}
 800894e:	bf00      	nop
 8008950:	20002784 	.word	0x20002784
 8008954:	e000ed04 	.word	0xe000ed04

08008958 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8008958:	b580      	push	{r7, lr}
 800895a:	b08e      	sub	sp, #56	; 0x38
 800895c:	af00      	add	r7, sp, #0
 800895e:	60f8      	str	r0, [r7, #12]
 8008960:	60b9      	str	r1, [r7, #8]
 8008962:	603b      	str	r3, [r7, #0]
 8008964:	4613      	mov	r3, r2
 8008966:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 8008968:	2301      	movs	r3, #1
 800896a:	637b      	str	r3, [r7, #52]	; 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 800896c:	68fb      	ldr	r3, [r7, #12]
 800896e:	2b00      	cmp	r3, #0
 8008970:	d10a      	bne.n	8008988 <xTaskGenericNotifyFromISR+0x30>
	__asm volatile
 8008972:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008976:	f383 8811 	msr	BASEPRI, r3
 800897a:	f3bf 8f6f 	isb	sy
 800897e:	f3bf 8f4f 	dsb	sy
 8008982:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008984:	bf00      	nop
 8008986:	e7fe      	b.n	8008986 <xTaskGenericNotifyFromISR+0x2e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008988:	f000 fe7e 	bl	8009688 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 800898c:	68fb      	ldr	r3, [r7, #12]
 800898e:	633b      	str	r3, [r7, #48]	; 0x30
	__asm volatile
 8008990:	f3ef 8211 	mrs	r2, BASEPRI
 8008994:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008998:	f383 8811 	msr	BASEPRI, r3
 800899c:	f3bf 8f6f 	isb	sy
 80089a0:	f3bf 8f4f 	dsb	sy
 80089a4:	623a      	str	r2, [r7, #32]
 80089a6:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 80089a8:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80089aa:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 80089ac:	683b      	ldr	r3, [r7, #0]
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	d004      	beq.n	80089bc <xTaskGenericNotifyFromISR+0x64>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 80089b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089b4:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 80089b8:	683b      	ldr	r3, [r7, #0]
 80089ba:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 80089bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089be:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 80089c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 80089c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089c8:	2202      	movs	r2, #2
 80089ca:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8

			switch( eAction )
 80089ce:	79fb      	ldrb	r3, [r7, #7]
 80089d0:	2b04      	cmp	r3, #4
 80089d2:	d82f      	bhi.n	8008a34 <xTaskGenericNotifyFromISR+0xdc>
 80089d4:	a201      	add	r2, pc, #4	; (adr r2, 80089dc <xTaskGenericNotifyFromISR+0x84>)
 80089d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80089da:	bf00      	nop
 80089dc:	08008a57 	.word	0x08008a57
 80089e0:	080089f1 	.word	0x080089f1
 80089e4:	08008a03 	.word	0x08008a03
 80089e8:	08008a13 	.word	0x08008a13
 80089ec:	08008a1d 	.word	0x08008a1d
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 80089f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089f2:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 80089f6:	68bb      	ldr	r3, [r7, #8]
 80089f8:	431a      	orrs	r2, r3
 80089fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089fc:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					break;
 8008a00:	e02c      	b.n	8008a5c <xTaskGenericNotifyFromISR+0x104>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8008a02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a04:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8008a08:	1c5a      	adds	r2, r3, #1
 8008a0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a0c:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					break;
 8008a10:	e024      	b.n	8008a5c <xTaskGenericNotifyFromISR+0x104>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8008a12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a14:	68ba      	ldr	r2, [r7, #8]
 8008a16:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					break;
 8008a1a:	e01f      	b.n	8008a5c <xTaskGenericNotifyFromISR+0x104>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8008a1c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008a20:	2b02      	cmp	r3, #2
 8008a22:	d004      	beq.n	8008a2e <xTaskGenericNotifyFromISR+0xd6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8008a24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a26:	68ba      	ldr	r2, [r7, #8]
 8008a28:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8008a2c:	e016      	b.n	8008a5c <xTaskGenericNotifyFromISR+0x104>
						xReturn = pdFAIL;
 8008a2e:	2300      	movs	r3, #0
 8008a30:	637b      	str	r3, [r7, #52]	; 0x34
					break;
 8008a32:	e013      	b.n	8008a5c <xTaskGenericNotifyFromISR+0x104>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8008a34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a36:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8008a3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a3e:	d00c      	beq.n	8008a5a <xTaskGenericNotifyFromISR+0x102>
	__asm volatile
 8008a40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a44:	f383 8811 	msr	BASEPRI, r3
 8008a48:	f3bf 8f6f 	isb	sy
 8008a4c:	f3bf 8f4f 	dsb	sy
 8008a50:	61bb      	str	r3, [r7, #24]
}
 8008a52:	bf00      	nop
 8008a54:	e7fe      	b.n	8008a54 <xTaskGenericNotifyFromISR+0xfc>
					break;
 8008a56:	bf00      	nop
 8008a58:	e000      	b.n	8008a5c <xTaskGenericNotifyFromISR+0x104>
					break;
 8008a5a:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8008a5c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008a60:	2b01      	cmp	r3, #1
 8008a62:	d146      	bne.n	8008af2 <xTaskGenericNotifyFromISR+0x19a>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8008a64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a68:	2b00      	cmp	r3, #0
 8008a6a:	d00a      	beq.n	8008a82 <xTaskGenericNotifyFromISR+0x12a>
	__asm volatile
 8008a6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a70:	f383 8811 	msr	BASEPRI, r3
 8008a74:	f3bf 8f6f 	isb	sy
 8008a78:	f3bf 8f4f 	dsb	sy
 8008a7c:	617b      	str	r3, [r7, #20]
}
 8008a7e:	bf00      	nop
 8008a80:	e7fe      	b.n	8008a80 <xTaskGenericNotifyFromISR+0x128>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008a82:	4b21      	ldr	r3, [pc, #132]	; (8008b08 <xTaskGenericNotifyFromISR+0x1b0>)
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	2b00      	cmp	r3, #0
 8008a88:	d11d      	bne.n	8008ac6 <xTaskGenericNotifyFromISR+0x16e>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008a8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a8c:	3304      	adds	r3, #4
 8008a8e:	4618      	mov	r0, r3
 8008a90:	f7fe faa6 	bl	8006fe0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008a94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008a98:	4b1c      	ldr	r3, [pc, #112]	; (8008b0c <xTaskGenericNotifyFromISR+0x1b4>)
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	429a      	cmp	r2, r3
 8008a9e:	d903      	bls.n	8008aa8 <xTaskGenericNotifyFromISR+0x150>
 8008aa0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008aa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008aa4:	4a19      	ldr	r2, [pc, #100]	; (8008b0c <xTaskGenericNotifyFromISR+0x1b4>)
 8008aa6:	6013      	str	r3, [r2, #0]
 8008aa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008aaa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008aac:	4613      	mov	r3, r2
 8008aae:	009b      	lsls	r3, r3, #2
 8008ab0:	4413      	add	r3, r2
 8008ab2:	009b      	lsls	r3, r3, #2
 8008ab4:	4a16      	ldr	r2, [pc, #88]	; (8008b10 <xTaskGenericNotifyFromISR+0x1b8>)
 8008ab6:	441a      	add	r2, r3
 8008ab8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008aba:	3304      	adds	r3, #4
 8008abc:	4619      	mov	r1, r3
 8008abe:	4610      	mov	r0, r2
 8008ac0:	f7fe fa31 	bl	8006f26 <vListInsertEnd>
 8008ac4:	e005      	b.n	8008ad2 <xTaskGenericNotifyFromISR+0x17a>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8008ac6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ac8:	3318      	adds	r3, #24
 8008aca:	4619      	mov	r1, r3
 8008acc:	4811      	ldr	r0, [pc, #68]	; (8008b14 <xTaskGenericNotifyFromISR+0x1bc>)
 8008ace:	f7fe fa2a 	bl	8006f26 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008ad2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ad4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ad6:	4b10      	ldr	r3, [pc, #64]	; (8008b18 <xTaskGenericNotifyFromISR+0x1c0>)
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008adc:	429a      	cmp	r2, r3
 8008ade:	d908      	bls.n	8008af2 <xTaskGenericNotifyFromISR+0x19a>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 8008ae0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008ae2:	2b00      	cmp	r3, #0
 8008ae4:	d002      	beq.n	8008aec <xTaskGenericNotifyFromISR+0x194>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 8008ae6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008ae8:	2201      	movs	r2, #1
 8008aea:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 8008aec:	4b0b      	ldr	r3, [pc, #44]	; (8008b1c <xTaskGenericNotifyFromISR+0x1c4>)
 8008aee:	2201      	movs	r2, #1
 8008af0:	601a      	str	r2, [r3, #0]
 8008af2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008af4:	613b      	str	r3, [r7, #16]
	__asm volatile
 8008af6:	693b      	ldr	r3, [r7, #16]
 8008af8:	f383 8811 	msr	BASEPRI, r3
}
 8008afc:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 8008afe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	}
 8008b00:	4618      	mov	r0, r3
 8008b02:	3738      	adds	r7, #56	; 0x38
 8008b04:	46bd      	mov	sp, r7
 8008b06:	bd80      	pop	{r7, pc}
 8008b08:	20002c80 	.word	0x20002c80
 8008b0c:	20002c60 	.word	0x20002c60
 8008b10:	20002788 	.word	0x20002788
 8008b14:	20002c18 	.word	0x20002c18
 8008b18:	20002784 	.word	0x20002784
 8008b1c:	20002c6c 	.word	0x20002c6c

08008b20 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008b20:	b580      	push	{r7, lr}
 8008b22:	b084      	sub	sp, #16
 8008b24:	af00      	add	r7, sp, #0
 8008b26:	6078      	str	r0, [r7, #4]
 8008b28:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008b2a:	4b21      	ldr	r3, [pc, #132]	; (8008bb0 <prvAddCurrentTaskToDelayedList+0x90>)
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008b30:	4b20      	ldr	r3, [pc, #128]	; (8008bb4 <prvAddCurrentTaskToDelayedList+0x94>)
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	3304      	adds	r3, #4
 8008b36:	4618      	mov	r0, r3
 8008b38:	f7fe fa52 	bl	8006fe0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b42:	d10a      	bne.n	8008b5a <prvAddCurrentTaskToDelayedList+0x3a>
 8008b44:	683b      	ldr	r3, [r7, #0]
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	d007      	beq.n	8008b5a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008b4a:	4b1a      	ldr	r3, [pc, #104]	; (8008bb4 <prvAddCurrentTaskToDelayedList+0x94>)
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	3304      	adds	r3, #4
 8008b50:	4619      	mov	r1, r3
 8008b52:	4819      	ldr	r0, [pc, #100]	; (8008bb8 <prvAddCurrentTaskToDelayedList+0x98>)
 8008b54:	f7fe f9e7 	bl	8006f26 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008b58:	e026      	b.n	8008ba8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008b5a:	68fa      	ldr	r2, [r7, #12]
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	4413      	add	r3, r2
 8008b60:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008b62:	4b14      	ldr	r3, [pc, #80]	; (8008bb4 <prvAddCurrentTaskToDelayedList+0x94>)
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	68ba      	ldr	r2, [r7, #8]
 8008b68:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008b6a:	68ba      	ldr	r2, [r7, #8]
 8008b6c:	68fb      	ldr	r3, [r7, #12]
 8008b6e:	429a      	cmp	r2, r3
 8008b70:	d209      	bcs.n	8008b86 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008b72:	4b12      	ldr	r3, [pc, #72]	; (8008bbc <prvAddCurrentTaskToDelayedList+0x9c>)
 8008b74:	681a      	ldr	r2, [r3, #0]
 8008b76:	4b0f      	ldr	r3, [pc, #60]	; (8008bb4 <prvAddCurrentTaskToDelayedList+0x94>)
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	3304      	adds	r3, #4
 8008b7c:	4619      	mov	r1, r3
 8008b7e:	4610      	mov	r0, r2
 8008b80:	f7fe f9f5 	bl	8006f6e <vListInsert>
}
 8008b84:	e010      	b.n	8008ba8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008b86:	4b0e      	ldr	r3, [pc, #56]	; (8008bc0 <prvAddCurrentTaskToDelayedList+0xa0>)
 8008b88:	681a      	ldr	r2, [r3, #0]
 8008b8a:	4b0a      	ldr	r3, [pc, #40]	; (8008bb4 <prvAddCurrentTaskToDelayedList+0x94>)
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	3304      	adds	r3, #4
 8008b90:	4619      	mov	r1, r3
 8008b92:	4610      	mov	r0, r2
 8008b94:	f7fe f9eb 	bl	8006f6e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008b98:	4b0a      	ldr	r3, [pc, #40]	; (8008bc4 <prvAddCurrentTaskToDelayedList+0xa4>)
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	68ba      	ldr	r2, [r7, #8]
 8008b9e:	429a      	cmp	r2, r3
 8008ba0:	d202      	bcs.n	8008ba8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8008ba2:	4a08      	ldr	r2, [pc, #32]	; (8008bc4 <prvAddCurrentTaskToDelayedList+0xa4>)
 8008ba4:	68bb      	ldr	r3, [r7, #8]
 8008ba6:	6013      	str	r3, [r2, #0]
}
 8008ba8:	bf00      	nop
 8008baa:	3710      	adds	r7, #16
 8008bac:	46bd      	mov	sp, r7
 8008bae:	bd80      	pop	{r7, pc}
 8008bb0:	20002c5c 	.word	0x20002c5c
 8008bb4:	20002784 	.word	0x20002784
 8008bb8:	20002c44 	.word	0x20002c44
 8008bbc:	20002c14 	.word	0x20002c14
 8008bc0:	20002c10 	.word	0x20002c10
 8008bc4:	20002c78 	.word	0x20002c78

08008bc8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8008bc8:	b580      	push	{r7, lr}
 8008bca:	b08a      	sub	sp, #40	; 0x28
 8008bcc:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8008bce:	2300      	movs	r3, #0
 8008bd0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8008bd2:	f000 fb07 	bl	80091e4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8008bd6:	4b1c      	ldr	r3, [pc, #112]	; (8008c48 <xTimerCreateTimerTask+0x80>)
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	2b00      	cmp	r3, #0
 8008bdc:	d021      	beq.n	8008c22 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8008bde:	2300      	movs	r3, #0
 8008be0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8008be2:	2300      	movs	r3, #0
 8008be4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8008be6:	1d3a      	adds	r2, r7, #4
 8008be8:	f107 0108 	add.w	r1, r7, #8
 8008bec:	f107 030c 	add.w	r3, r7, #12
 8008bf0:	4618      	mov	r0, r3
 8008bf2:	f7fe f951 	bl	8006e98 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8008bf6:	6879      	ldr	r1, [r7, #4]
 8008bf8:	68bb      	ldr	r3, [r7, #8]
 8008bfa:	68fa      	ldr	r2, [r7, #12]
 8008bfc:	9202      	str	r2, [sp, #8]
 8008bfe:	9301      	str	r3, [sp, #4]
 8008c00:	2302      	movs	r3, #2
 8008c02:	9300      	str	r3, [sp, #0]
 8008c04:	2300      	movs	r3, #0
 8008c06:	460a      	mov	r2, r1
 8008c08:	4910      	ldr	r1, [pc, #64]	; (8008c4c <xTimerCreateTimerTask+0x84>)
 8008c0a:	4811      	ldr	r0, [pc, #68]	; (8008c50 <xTimerCreateTimerTask+0x88>)
 8008c0c:	f7fe fefe 	bl	8007a0c <xTaskCreateStatic>
 8008c10:	4603      	mov	r3, r0
 8008c12:	4a10      	ldr	r2, [pc, #64]	; (8008c54 <xTimerCreateTimerTask+0x8c>)
 8008c14:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8008c16:	4b0f      	ldr	r3, [pc, #60]	; (8008c54 <xTimerCreateTimerTask+0x8c>)
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	d001      	beq.n	8008c22 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8008c1e:	2301      	movs	r3, #1
 8008c20:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8008c22:	697b      	ldr	r3, [r7, #20]
 8008c24:	2b00      	cmp	r3, #0
 8008c26:	d10a      	bne.n	8008c3e <xTimerCreateTimerTask+0x76>
	__asm volatile
 8008c28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c2c:	f383 8811 	msr	BASEPRI, r3
 8008c30:	f3bf 8f6f 	isb	sy
 8008c34:	f3bf 8f4f 	dsb	sy
 8008c38:	613b      	str	r3, [r7, #16]
}
 8008c3a:	bf00      	nop
 8008c3c:	e7fe      	b.n	8008c3c <xTimerCreateTimerTask+0x74>
	return xReturn;
 8008c3e:	697b      	ldr	r3, [r7, #20]
}
 8008c40:	4618      	mov	r0, r3
 8008c42:	3718      	adds	r7, #24
 8008c44:	46bd      	mov	sp, r7
 8008c46:	bd80      	pop	{r7, pc}
 8008c48:	20002cb4 	.word	0x20002cb4
 8008c4c:	08009dcc 	.word	0x08009dcc
 8008c50:	08008d8d 	.word	0x08008d8d
 8008c54:	20002cb8 	.word	0x20002cb8

08008c58 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8008c58:	b580      	push	{r7, lr}
 8008c5a:	b08a      	sub	sp, #40	; 0x28
 8008c5c:	af00      	add	r7, sp, #0
 8008c5e:	60f8      	str	r0, [r7, #12]
 8008c60:	60b9      	str	r1, [r7, #8]
 8008c62:	607a      	str	r2, [r7, #4]
 8008c64:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8008c66:	2300      	movs	r3, #0
 8008c68:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8008c6a:	68fb      	ldr	r3, [r7, #12]
 8008c6c:	2b00      	cmp	r3, #0
 8008c6e:	d10a      	bne.n	8008c86 <xTimerGenericCommand+0x2e>
	__asm volatile
 8008c70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c74:	f383 8811 	msr	BASEPRI, r3
 8008c78:	f3bf 8f6f 	isb	sy
 8008c7c:	f3bf 8f4f 	dsb	sy
 8008c80:	623b      	str	r3, [r7, #32]
}
 8008c82:	bf00      	nop
 8008c84:	e7fe      	b.n	8008c84 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8008c86:	4b1a      	ldr	r3, [pc, #104]	; (8008cf0 <xTimerGenericCommand+0x98>)
 8008c88:	681b      	ldr	r3, [r3, #0]
 8008c8a:	2b00      	cmp	r3, #0
 8008c8c:	d02a      	beq.n	8008ce4 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8008c8e:	68bb      	ldr	r3, [r7, #8]
 8008c90:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8008c96:	68fb      	ldr	r3, [r7, #12]
 8008c98:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8008c9a:	68bb      	ldr	r3, [r7, #8]
 8008c9c:	2b05      	cmp	r3, #5
 8008c9e:	dc18      	bgt.n	8008cd2 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8008ca0:	f7ff fd6e 	bl	8008780 <xTaskGetSchedulerState>
 8008ca4:	4603      	mov	r3, r0
 8008ca6:	2b02      	cmp	r3, #2
 8008ca8:	d109      	bne.n	8008cbe <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8008caa:	4b11      	ldr	r3, [pc, #68]	; (8008cf0 <xTimerGenericCommand+0x98>)
 8008cac:	6818      	ldr	r0, [r3, #0]
 8008cae:	f107 0110 	add.w	r1, r7, #16
 8008cb2:	2300      	movs	r3, #0
 8008cb4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008cb6:	f7fe fac1 	bl	800723c <xQueueGenericSend>
 8008cba:	6278      	str	r0, [r7, #36]	; 0x24
 8008cbc:	e012      	b.n	8008ce4 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8008cbe:	4b0c      	ldr	r3, [pc, #48]	; (8008cf0 <xTimerGenericCommand+0x98>)
 8008cc0:	6818      	ldr	r0, [r3, #0]
 8008cc2:	f107 0110 	add.w	r1, r7, #16
 8008cc6:	2300      	movs	r3, #0
 8008cc8:	2200      	movs	r2, #0
 8008cca:	f7fe fab7 	bl	800723c <xQueueGenericSend>
 8008cce:	6278      	str	r0, [r7, #36]	; 0x24
 8008cd0:	e008      	b.n	8008ce4 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8008cd2:	4b07      	ldr	r3, [pc, #28]	; (8008cf0 <xTimerGenericCommand+0x98>)
 8008cd4:	6818      	ldr	r0, [r3, #0]
 8008cd6:	f107 0110 	add.w	r1, r7, #16
 8008cda:	2300      	movs	r3, #0
 8008cdc:	683a      	ldr	r2, [r7, #0]
 8008cde:	f7fe fbab 	bl	8007438 <xQueueGenericSendFromISR>
 8008ce2:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8008ce4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008ce6:	4618      	mov	r0, r3
 8008ce8:	3728      	adds	r7, #40	; 0x28
 8008cea:	46bd      	mov	sp, r7
 8008cec:	bd80      	pop	{r7, pc}
 8008cee:	bf00      	nop
 8008cf0:	20002cb4 	.word	0x20002cb4

08008cf4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8008cf4:	b580      	push	{r7, lr}
 8008cf6:	b088      	sub	sp, #32
 8008cf8:	af02      	add	r7, sp, #8
 8008cfa:	6078      	str	r0, [r7, #4]
 8008cfc:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008cfe:	4b22      	ldr	r3, [pc, #136]	; (8008d88 <prvProcessExpiredTimer+0x94>)
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	68db      	ldr	r3, [r3, #12]
 8008d04:	68db      	ldr	r3, [r3, #12]
 8008d06:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008d08:	697b      	ldr	r3, [r7, #20]
 8008d0a:	3304      	adds	r3, #4
 8008d0c:	4618      	mov	r0, r3
 8008d0e:	f7fe f967 	bl	8006fe0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008d12:	697b      	ldr	r3, [r7, #20]
 8008d14:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008d18:	f003 0304 	and.w	r3, r3, #4
 8008d1c:	2b00      	cmp	r3, #0
 8008d1e:	d022      	beq.n	8008d66 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8008d20:	697b      	ldr	r3, [r7, #20]
 8008d22:	699a      	ldr	r2, [r3, #24]
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	18d1      	adds	r1, r2, r3
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	683a      	ldr	r2, [r7, #0]
 8008d2c:	6978      	ldr	r0, [r7, #20]
 8008d2e:	f000 f8d1 	bl	8008ed4 <prvInsertTimerInActiveList>
 8008d32:	4603      	mov	r3, r0
 8008d34:	2b00      	cmp	r3, #0
 8008d36:	d01f      	beq.n	8008d78 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008d38:	2300      	movs	r3, #0
 8008d3a:	9300      	str	r3, [sp, #0]
 8008d3c:	2300      	movs	r3, #0
 8008d3e:	687a      	ldr	r2, [r7, #4]
 8008d40:	2100      	movs	r1, #0
 8008d42:	6978      	ldr	r0, [r7, #20]
 8008d44:	f7ff ff88 	bl	8008c58 <xTimerGenericCommand>
 8008d48:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8008d4a:	693b      	ldr	r3, [r7, #16]
 8008d4c:	2b00      	cmp	r3, #0
 8008d4e:	d113      	bne.n	8008d78 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8008d50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d54:	f383 8811 	msr	BASEPRI, r3
 8008d58:	f3bf 8f6f 	isb	sy
 8008d5c:	f3bf 8f4f 	dsb	sy
 8008d60:	60fb      	str	r3, [r7, #12]
}
 8008d62:	bf00      	nop
 8008d64:	e7fe      	b.n	8008d64 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008d66:	697b      	ldr	r3, [r7, #20]
 8008d68:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008d6c:	f023 0301 	bic.w	r3, r3, #1
 8008d70:	b2da      	uxtb	r2, r3
 8008d72:	697b      	ldr	r3, [r7, #20]
 8008d74:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008d78:	697b      	ldr	r3, [r7, #20]
 8008d7a:	6a1b      	ldr	r3, [r3, #32]
 8008d7c:	6978      	ldr	r0, [r7, #20]
 8008d7e:	4798      	blx	r3
}
 8008d80:	bf00      	nop
 8008d82:	3718      	adds	r7, #24
 8008d84:	46bd      	mov	sp, r7
 8008d86:	bd80      	pop	{r7, pc}
 8008d88:	20002cac 	.word	0x20002cac

08008d8c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8008d8c:	b580      	push	{r7, lr}
 8008d8e:	b084      	sub	sp, #16
 8008d90:	af00      	add	r7, sp, #0
 8008d92:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008d94:	f107 0308 	add.w	r3, r7, #8
 8008d98:	4618      	mov	r0, r3
 8008d9a:	f000 f857 	bl	8008e4c <prvGetNextExpireTime>
 8008d9e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8008da0:	68bb      	ldr	r3, [r7, #8]
 8008da2:	4619      	mov	r1, r3
 8008da4:	68f8      	ldr	r0, [r7, #12]
 8008da6:	f000 f803 	bl	8008db0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8008daa:	f000 f8d5 	bl	8008f58 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008dae:	e7f1      	b.n	8008d94 <prvTimerTask+0x8>

08008db0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8008db0:	b580      	push	{r7, lr}
 8008db2:	b084      	sub	sp, #16
 8008db4:	af00      	add	r7, sp, #0
 8008db6:	6078      	str	r0, [r7, #4]
 8008db8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8008dba:	f7ff f8f5 	bl	8007fa8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008dbe:	f107 0308 	add.w	r3, r7, #8
 8008dc2:	4618      	mov	r0, r3
 8008dc4:	f000 f866 	bl	8008e94 <prvSampleTimeNow>
 8008dc8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8008dca:	68bb      	ldr	r3, [r7, #8]
 8008dcc:	2b00      	cmp	r3, #0
 8008dce:	d130      	bne.n	8008e32 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8008dd0:	683b      	ldr	r3, [r7, #0]
 8008dd2:	2b00      	cmp	r3, #0
 8008dd4:	d10a      	bne.n	8008dec <prvProcessTimerOrBlockTask+0x3c>
 8008dd6:	687a      	ldr	r2, [r7, #4]
 8008dd8:	68fb      	ldr	r3, [r7, #12]
 8008dda:	429a      	cmp	r2, r3
 8008ddc:	d806      	bhi.n	8008dec <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8008dde:	f7ff f8f1 	bl	8007fc4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8008de2:	68f9      	ldr	r1, [r7, #12]
 8008de4:	6878      	ldr	r0, [r7, #4]
 8008de6:	f7ff ff85 	bl	8008cf4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8008dea:	e024      	b.n	8008e36 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8008dec:	683b      	ldr	r3, [r7, #0]
 8008dee:	2b00      	cmp	r3, #0
 8008df0:	d008      	beq.n	8008e04 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8008df2:	4b13      	ldr	r3, [pc, #76]	; (8008e40 <prvProcessTimerOrBlockTask+0x90>)
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	2b00      	cmp	r3, #0
 8008dfa:	d101      	bne.n	8008e00 <prvProcessTimerOrBlockTask+0x50>
 8008dfc:	2301      	movs	r3, #1
 8008dfe:	e000      	b.n	8008e02 <prvProcessTimerOrBlockTask+0x52>
 8008e00:	2300      	movs	r3, #0
 8008e02:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8008e04:	4b0f      	ldr	r3, [pc, #60]	; (8008e44 <prvProcessTimerOrBlockTask+0x94>)
 8008e06:	6818      	ldr	r0, [r3, #0]
 8008e08:	687a      	ldr	r2, [r7, #4]
 8008e0a:	68fb      	ldr	r3, [r7, #12]
 8008e0c:	1ad3      	subs	r3, r2, r3
 8008e0e:	683a      	ldr	r2, [r7, #0]
 8008e10:	4619      	mov	r1, r3
 8008e12:	f7fe fdc7 	bl	80079a4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8008e16:	f7ff f8d5 	bl	8007fc4 <xTaskResumeAll>
 8008e1a:	4603      	mov	r3, r0
 8008e1c:	2b00      	cmp	r3, #0
 8008e1e:	d10a      	bne.n	8008e36 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8008e20:	4b09      	ldr	r3, [pc, #36]	; (8008e48 <prvProcessTimerOrBlockTask+0x98>)
 8008e22:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008e26:	601a      	str	r2, [r3, #0]
 8008e28:	f3bf 8f4f 	dsb	sy
 8008e2c:	f3bf 8f6f 	isb	sy
}
 8008e30:	e001      	b.n	8008e36 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8008e32:	f7ff f8c7 	bl	8007fc4 <xTaskResumeAll>
}
 8008e36:	bf00      	nop
 8008e38:	3710      	adds	r7, #16
 8008e3a:	46bd      	mov	sp, r7
 8008e3c:	bd80      	pop	{r7, pc}
 8008e3e:	bf00      	nop
 8008e40:	20002cb0 	.word	0x20002cb0
 8008e44:	20002cb4 	.word	0x20002cb4
 8008e48:	e000ed04 	.word	0xe000ed04

08008e4c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8008e4c:	b480      	push	{r7}
 8008e4e:	b085      	sub	sp, #20
 8008e50:	af00      	add	r7, sp, #0
 8008e52:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8008e54:	4b0e      	ldr	r3, [pc, #56]	; (8008e90 <prvGetNextExpireTime+0x44>)
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	2b00      	cmp	r3, #0
 8008e5c:	d101      	bne.n	8008e62 <prvGetNextExpireTime+0x16>
 8008e5e:	2201      	movs	r2, #1
 8008e60:	e000      	b.n	8008e64 <prvGetNextExpireTime+0x18>
 8008e62:	2200      	movs	r2, #0
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	2b00      	cmp	r3, #0
 8008e6e:	d105      	bne.n	8008e7c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008e70:	4b07      	ldr	r3, [pc, #28]	; (8008e90 <prvGetNextExpireTime+0x44>)
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	68db      	ldr	r3, [r3, #12]
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	60fb      	str	r3, [r7, #12]
 8008e7a:	e001      	b.n	8008e80 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8008e7c:	2300      	movs	r3, #0
 8008e7e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8008e80:	68fb      	ldr	r3, [r7, #12]
}
 8008e82:	4618      	mov	r0, r3
 8008e84:	3714      	adds	r7, #20
 8008e86:	46bd      	mov	sp, r7
 8008e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e8c:	4770      	bx	lr
 8008e8e:	bf00      	nop
 8008e90:	20002cac 	.word	0x20002cac

08008e94 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8008e94:	b580      	push	{r7, lr}
 8008e96:	b084      	sub	sp, #16
 8008e98:	af00      	add	r7, sp, #0
 8008e9a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8008e9c:	f7ff f930 	bl	8008100 <xTaskGetTickCount>
 8008ea0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8008ea2:	4b0b      	ldr	r3, [pc, #44]	; (8008ed0 <prvSampleTimeNow+0x3c>)
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	68fa      	ldr	r2, [r7, #12]
 8008ea8:	429a      	cmp	r2, r3
 8008eaa:	d205      	bcs.n	8008eb8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8008eac:	f000 f936 	bl	800911c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	2201      	movs	r2, #1
 8008eb4:	601a      	str	r2, [r3, #0]
 8008eb6:	e002      	b.n	8008ebe <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	2200      	movs	r2, #0
 8008ebc:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8008ebe:	4a04      	ldr	r2, [pc, #16]	; (8008ed0 <prvSampleTimeNow+0x3c>)
 8008ec0:	68fb      	ldr	r3, [r7, #12]
 8008ec2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8008ec4:	68fb      	ldr	r3, [r7, #12]
}
 8008ec6:	4618      	mov	r0, r3
 8008ec8:	3710      	adds	r7, #16
 8008eca:	46bd      	mov	sp, r7
 8008ecc:	bd80      	pop	{r7, pc}
 8008ece:	bf00      	nop
 8008ed0:	20002cbc 	.word	0x20002cbc

08008ed4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8008ed4:	b580      	push	{r7, lr}
 8008ed6:	b086      	sub	sp, #24
 8008ed8:	af00      	add	r7, sp, #0
 8008eda:	60f8      	str	r0, [r7, #12]
 8008edc:	60b9      	str	r1, [r7, #8]
 8008ede:	607a      	str	r2, [r7, #4]
 8008ee0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8008ee2:	2300      	movs	r3, #0
 8008ee4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8008ee6:	68fb      	ldr	r3, [r7, #12]
 8008ee8:	68ba      	ldr	r2, [r7, #8]
 8008eea:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008eec:	68fb      	ldr	r3, [r7, #12]
 8008eee:	68fa      	ldr	r2, [r7, #12]
 8008ef0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8008ef2:	68ba      	ldr	r2, [r7, #8]
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	429a      	cmp	r2, r3
 8008ef8:	d812      	bhi.n	8008f20 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008efa:	687a      	ldr	r2, [r7, #4]
 8008efc:	683b      	ldr	r3, [r7, #0]
 8008efe:	1ad2      	subs	r2, r2, r3
 8008f00:	68fb      	ldr	r3, [r7, #12]
 8008f02:	699b      	ldr	r3, [r3, #24]
 8008f04:	429a      	cmp	r2, r3
 8008f06:	d302      	bcc.n	8008f0e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8008f08:	2301      	movs	r3, #1
 8008f0a:	617b      	str	r3, [r7, #20]
 8008f0c:	e01b      	b.n	8008f46 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8008f0e:	4b10      	ldr	r3, [pc, #64]	; (8008f50 <prvInsertTimerInActiveList+0x7c>)
 8008f10:	681a      	ldr	r2, [r3, #0]
 8008f12:	68fb      	ldr	r3, [r7, #12]
 8008f14:	3304      	adds	r3, #4
 8008f16:	4619      	mov	r1, r3
 8008f18:	4610      	mov	r0, r2
 8008f1a:	f7fe f828 	bl	8006f6e <vListInsert>
 8008f1e:	e012      	b.n	8008f46 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8008f20:	687a      	ldr	r2, [r7, #4]
 8008f22:	683b      	ldr	r3, [r7, #0]
 8008f24:	429a      	cmp	r2, r3
 8008f26:	d206      	bcs.n	8008f36 <prvInsertTimerInActiveList+0x62>
 8008f28:	68ba      	ldr	r2, [r7, #8]
 8008f2a:	683b      	ldr	r3, [r7, #0]
 8008f2c:	429a      	cmp	r2, r3
 8008f2e:	d302      	bcc.n	8008f36 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8008f30:	2301      	movs	r3, #1
 8008f32:	617b      	str	r3, [r7, #20]
 8008f34:	e007      	b.n	8008f46 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008f36:	4b07      	ldr	r3, [pc, #28]	; (8008f54 <prvInsertTimerInActiveList+0x80>)
 8008f38:	681a      	ldr	r2, [r3, #0]
 8008f3a:	68fb      	ldr	r3, [r7, #12]
 8008f3c:	3304      	adds	r3, #4
 8008f3e:	4619      	mov	r1, r3
 8008f40:	4610      	mov	r0, r2
 8008f42:	f7fe f814 	bl	8006f6e <vListInsert>
		}
	}

	return xProcessTimerNow;
 8008f46:	697b      	ldr	r3, [r7, #20]
}
 8008f48:	4618      	mov	r0, r3
 8008f4a:	3718      	adds	r7, #24
 8008f4c:	46bd      	mov	sp, r7
 8008f4e:	bd80      	pop	{r7, pc}
 8008f50:	20002cb0 	.word	0x20002cb0
 8008f54:	20002cac 	.word	0x20002cac

08008f58 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8008f58:	b580      	push	{r7, lr}
 8008f5a:	b08e      	sub	sp, #56	; 0x38
 8008f5c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008f5e:	e0ca      	b.n	80090f6 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	2b00      	cmp	r3, #0
 8008f64:	da18      	bge.n	8008f98 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8008f66:	1d3b      	adds	r3, r7, #4
 8008f68:	3304      	adds	r3, #4
 8008f6a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8008f6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f6e:	2b00      	cmp	r3, #0
 8008f70:	d10a      	bne.n	8008f88 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8008f72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f76:	f383 8811 	msr	BASEPRI, r3
 8008f7a:	f3bf 8f6f 	isb	sy
 8008f7e:	f3bf 8f4f 	dsb	sy
 8008f82:	61fb      	str	r3, [r7, #28]
}
 8008f84:	bf00      	nop
 8008f86:	e7fe      	b.n	8008f86 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8008f88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008f8e:	6850      	ldr	r0, [r2, #4]
 8008f90:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008f92:	6892      	ldr	r2, [r2, #8]
 8008f94:	4611      	mov	r1, r2
 8008f96:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	2b00      	cmp	r3, #0
 8008f9c:	f2c0 80aa 	blt.w	80090f4 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8008fa0:	68fb      	ldr	r3, [r7, #12]
 8008fa2:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8008fa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fa6:	695b      	ldr	r3, [r3, #20]
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	d004      	beq.n	8008fb6 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008fac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fae:	3304      	adds	r3, #4
 8008fb0:	4618      	mov	r0, r3
 8008fb2:	f7fe f815 	bl	8006fe0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008fb6:	463b      	mov	r3, r7
 8008fb8:	4618      	mov	r0, r3
 8008fba:	f7ff ff6b 	bl	8008e94 <prvSampleTimeNow>
 8008fbe:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	2b09      	cmp	r3, #9
 8008fc4:	f200 8097 	bhi.w	80090f6 <prvProcessReceivedCommands+0x19e>
 8008fc8:	a201      	add	r2, pc, #4	; (adr r2, 8008fd0 <prvProcessReceivedCommands+0x78>)
 8008fca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008fce:	bf00      	nop
 8008fd0:	08008ff9 	.word	0x08008ff9
 8008fd4:	08008ff9 	.word	0x08008ff9
 8008fd8:	08008ff9 	.word	0x08008ff9
 8008fdc:	0800906d 	.word	0x0800906d
 8008fe0:	08009081 	.word	0x08009081
 8008fe4:	080090cb 	.word	0x080090cb
 8008fe8:	08008ff9 	.word	0x08008ff9
 8008fec:	08008ff9 	.word	0x08008ff9
 8008ff0:	0800906d 	.word	0x0800906d
 8008ff4:	08009081 	.word	0x08009081
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008ff8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ffa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008ffe:	f043 0301 	orr.w	r3, r3, #1
 8009002:	b2da      	uxtb	r2, r3
 8009004:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009006:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800900a:	68ba      	ldr	r2, [r7, #8]
 800900c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800900e:	699b      	ldr	r3, [r3, #24]
 8009010:	18d1      	adds	r1, r2, r3
 8009012:	68bb      	ldr	r3, [r7, #8]
 8009014:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009016:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009018:	f7ff ff5c 	bl	8008ed4 <prvInsertTimerInActiveList>
 800901c:	4603      	mov	r3, r0
 800901e:	2b00      	cmp	r3, #0
 8009020:	d069      	beq.n	80090f6 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009022:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009024:	6a1b      	ldr	r3, [r3, #32]
 8009026:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009028:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800902a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800902c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009030:	f003 0304 	and.w	r3, r3, #4
 8009034:	2b00      	cmp	r3, #0
 8009036:	d05e      	beq.n	80090f6 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8009038:	68ba      	ldr	r2, [r7, #8]
 800903a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800903c:	699b      	ldr	r3, [r3, #24]
 800903e:	441a      	add	r2, r3
 8009040:	2300      	movs	r3, #0
 8009042:	9300      	str	r3, [sp, #0]
 8009044:	2300      	movs	r3, #0
 8009046:	2100      	movs	r1, #0
 8009048:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800904a:	f7ff fe05 	bl	8008c58 <xTimerGenericCommand>
 800904e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8009050:	6a3b      	ldr	r3, [r7, #32]
 8009052:	2b00      	cmp	r3, #0
 8009054:	d14f      	bne.n	80090f6 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8009056:	f04f 0350 	mov.w	r3, #80	; 0x50
 800905a:	f383 8811 	msr	BASEPRI, r3
 800905e:	f3bf 8f6f 	isb	sy
 8009062:	f3bf 8f4f 	dsb	sy
 8009066:	61bb      	str	r3, [r7, #24]
}
 8009068:	bf00      	nop
 800906a:	e7fe      	b.n	800906a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800906c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800906e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009072:	f023 0301 	bic.w	r3, r3, #1
 8009076:	b2da      	uxtb	r2, r3
 8009078:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800907a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800907e:	e03a      	b.n	80090f6 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009080:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009082:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009086:	f043 0301 	orr.w	r3, r3, #1
 800908a:	b2da      	uxtb	r2, r3
 800908c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800908e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8009092:	68ba      	ldr	r2, [r7, #8]
 8009094:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009096:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8009098:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800909a:	699b      	ldr	r3, [r3, #24]
 800909c:	2b00      	cmp	r3, #0
 800909e:	d10a      	bne.n	80090b6 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 80090a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090a4:	f383 8811 	msr	BASEPRI, r3
 80090a8:	f3bf 8f6f 	isb	sy
 80090ac:	f3bf 8f4f 	dsb	sy
 80090b0:	617b      	str	r3, [r7, #20]
}
 80090b2:	bf00      	nop
 80090b4:	e7fe      	b.n	80090b4 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80090b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090b8:	699a      	ldr	r2, [r3, #24]
 80090ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090bc:	18d1      	adds	r1, r2, r3
 80090be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80090c2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80090c4:	f7ff ff06 	bl	8008ed4 <prvInsertTimerInActiveList>
					break;
 80090c8:	e015      	b.n	80090f6 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80090ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090cc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80090d0:	f003 0302 	and.w	r3, r3, #2
 80090d4:	2b00      	cmp	r3, #0
 80090d6:	d103      	bne.n	80090e0 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 80090d8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80090da:	f000 fbe1 	bl	80098a0 <vPortFree>
 80090de:	e00a      	b.n	80090f6 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80090e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090e2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80090e6:	f023 0301 	bic.w	r3, r3, #1
 80090ea:	b2da      	uxtb	r2, r3
 80090ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090ee:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80090f2:	e000      	b.n	80090f6 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80090f4:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80090f6:	4b08      	ldr	r3, [pc, #32]	; (8009118 <prvProcessReceivedCommands+0x1c0>)
 80090f8:	681b      	ldr	r3, [r3, #0]
 80090fa:	1d39      	adds	r1, r7, #4
 80090fc:	2200      	movs	r2, #0
 80090fe:	4618      	mov	r0, r3
 8009100:	f7fe fa36 	bl	8007570 <xQueueReceive>
 8009104:	4603      	mov	r3, r0
 8009106:	2b00      	cmp	r3, #0
 8009108:	f47f af2a 	bne.w	8008f60 <prvProcessReceivedCommands+0x8>
	}
}
 800910c:	bf00      	nop
 800910e:	bf00      	nop
 8009110:	3730      	adds	r7, #48	; 0x30
 8009112:	46bd      	mov	sp, r7
 8009114:	bd80      	pop	{r7, pc}
 8009116:	bf00      	nop
 8009118:	20002cb4 	.word	0x20002cb4

0800911c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800911c:	b580      	push	{r7, lr}
 800911e:	b088      	sub	sp, #32
 8009120:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009122:	e048      	b.n	80091b6 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009124:	4b2d      	ldr	r3, [pc, #180]	; (80091dc <prvSwitchTimerLists+0xc0>)
 8009126:	681b      	ldr	r3, [r3, #0]
 8009128:	68db      	ldr	r3, [r3, #12]
 800912a:	681b      	ldr	r3, [r3, #0]
 800912c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800912e:	4b2b      	ldr	r3, [pc, #172]	; (80091dc <prvSwitchTimerLists+0xc0>)
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	68db      	ldr	r3, [r3, #12]
 8009134:	68db      	ldr	r3, [r3, #12]
 8009136:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009138:	68fb      	ldr	r3, [r7, #12]
 800913a:	3304      	adds	r3, #4
 800913c:	4618      	mov	r0, r3
 800913e:	f7fd ff4f 	bl	8006fe0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009142:	68fb      	ldr	r3, [r7, #12]
 8009144:	6a1b      	ldr	r3, [r3, #32]
 8009146:	68f8      	ldr	r0, [r7, #12]
 8009148:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800914a:	68fb      	ldr	r3, [r7, #12]
 800914c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009150:	f003 0304 	and.w	r3, r3, #4
 8009154:	2b00      	cmp	r3, #0
 8009156:	d02e      	beq.n	80091b6 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8009158:	68fb      	ldr	r3, [r7, #12]
 800915a:	699b      	ldr	r3, [r3, #24]
 800915c:	693a      	ldr	r2, [r7, #16]
 800915e:	4413      	add	r3, r2
 8009160:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8009162:	68ba      	ldr	r2, [r7, #8]
 8009164:	693b      	ldr	r3, [r7, #16]
 8009166:	429a      	cmp	r2, r3
 8009168:	d90e      	bls.n	8009188 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800916a:	68fb      	ldr	r3, [r7, #12]
 800916c:	68ba      	ldr	r2, [r7, #8]
 800916e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009170:	68fb      	ldr	r3, [r7, #12]
 8009172:	68fa      	ldr	r2, [r7, #12]
 8009174:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009176:	4b19      	ldr	r3, [pc, #100]	; (80091dc <prvSwitchTimerLists+0xc0>)
 8009178:	681a      	ldr	r2, [r3, #0]
 800917a:	68fb      	ldr	r3, [r7, #12]
 800917c:	3304      	adds	r3, #4
 800917e:	4619      	mov	r1, r3
 8009180:	4610      	mov	r0, r2
 8009182:	f7fd fef4 	bl	8006f6e <vListInsert>
 8009186:	e016      	b.n	80091b6 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009188:	2300      	movs	r3, #0
 800918a:	9300      	str	r3, [sp, #0]
 800918c:	2300      	movs	r3, #0
 800918e:	693a      	ldr	r2, [r7, #16]
 8009190:	2100      	movs	r1, #0
 8009192:	68f8      	ldr	r0, [r7, #12]
 8009194:	f7ff fd60 	bl	8008c58 <xTimerGenericCommand>
 8009198:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	2b00      	cmp	r3, #0
 800919e:	d10a      	bne.n	80091b6 <prvSwitchTimerLists+0x9a>
	__asm volatile
 80091a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091a4:	f383 8811 	msr	BASEPRI, r3
 80091a8:	f3bf 8f6f 	isb	sy
 80091ac:	f3bf 8f4f 	dsb	sy
 80091b0:	603b      	str	r3, [r7, #0]
}
 80091b2:	bf00      	nop
 80091b4:	e7fe      	b.n	80091b4 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80091b6:	4b09      	ldr	r3, [pc, #36]	; (80091dc <prvSwitchTimerLists+0xc0>)
 80091b8:	681b      	ldr	r3, [r3, #0]
 80091ba:	681b      	ldr	r3, [r3, #0]
 80091bc:	2b00      	cmp	r3, #0
 80091be:	d1b1      	bne.n	8009124 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80091c0:	4b06      	ldr	r3, [pc, #24]	; (80091dc <prvSwitchTimerLists+0xc0>)
 80091c2:	681b      	ldr	r3, [r3, #0]
 80091c4:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80091c6:	4b06      	ldr	r3, [pc, #24]	; (80091e0 <prvSwitchTimerLists+0xc4>)
 80091c8:	681b      	ldr	r3, [r3, #0]
 80091ca:	4a04      	ldr	r2, [pc, #16]	; (80091dc <prvSwitchTimerLists+0xc0>)
 80091cc:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80091ce:	4a04      	ldr	r2, [pc, #16]	; (80091e0 <prvSwitchTimerLists+0xc4>)
 80091d0:	697b      	ldr	r3, [r7, #20]
 80091d2:	6013      	str	r3, [r2, #0]
}
 80091d4:	bf00      	nop
 80091d6:	3718      	adds	r7, #24
 80091d8:	46bd      	mov	sp, r7
 80091da:	bd80      	pop	{r7, pc}
 80091dc:	20002cac 	.word	0x20002cac
 80091e0:	20002cb0 	.word	0x20002cb0

080091e4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80091e4:	b580      	push	{r7, lr}
 80091e6:	b082      	sub	sp, #8
 80091e8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80091ea:	f000 f96b 	bl	80094c4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80091ee:	4b15      	ldr	r3, [pc, #84]	; (8009244 <prvCheckForValidListAndQueue+0x60>)
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	2b00      	cmp	r3, #0
 80091f4:	d120      	bne.n	8009238 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80091f6:	4814      	ldr	r0, [pc, #80]	; (8009248 <prvCheckForValidListAndQueue+0x64>)
 80091f8:	f7fd fe68 	bl	8006ecc <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80091fc:	4813      	ldr	r0, [pc, #76]	; (800924c <prvCheckForValidListAndQueue+0x68>)
 80091fe:	f7fd fe65 	bl	8006ecc <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8009202:	4b13      	ldr	r3, [pc, #76]	; (8009250 <prvCheckForValidListAndQueue+0x6c>)
 8009204:	4a10      	ldr	r2, [pc, #64]	; (8009248 <prvCheckForValidListAndQueue+0x64>)
 8009206:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8009208:	4b12      	ldr	r3, [pc, #72]	; (8009254 <prvCheckForValidListAndQueue+0x70>)
 800920a:	4a10      	ldr	r2, [pc, #64]	; (800924c <prvCheckForValidListAndQueue+0x68>)
 800920c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800920e:	2300      	movs	r3, #0
 8009210:	9300      	str	r3, [sp, #0]
 8009212:	4b11      	ldr	r3, [pc, #68]	; (8009258 <prvCheckForValidListAndQueue+0x74>)
 8009214:	4a11      	ldr	r2, [pc, #68]	; (800925c <prvCheckForValidListAndQueue+0x78>)
 8009216:	2110      	movs	r1, #16
 8009218:	200a      	movs	r0, #10
 800921a:	f7fd ff73 	bl	8007104 <xQueueGenericCreateStatic>
 800921e:	4603      	mov	r3, r0
 8009220:	4a08      	ldr	r2, [pc, #32]	; (8009244 <prvCheckForValidListAndQueue+0x60>)
 8009222:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8009224:	4b07      	ldr	r3, [pc, #28]	; (8009244 <prvCheckForValidListAndQueue+0x60>)
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	2b00      	cmp	r3, #0
 800922a:	d005      	beq.n	8009238 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800922c:	4b05      	ldr	r3, [pc, #20]	; (8009244 <prvCheckForValidListAndQueue+0x60>)
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	490b      	ldr	r1, [pc, #44]	; (8009260 <prvCheckForValidListAndQueue+0x7c>)
 8009232:	4618      	mov	r0, r3
 8009234:	f7fe fb8c 	bl	8007950 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009238:	f000 f974 	bl	8009524 <vPortExitCritical>
}
 800923c:	bf00      	nop
 800923e:	46bd      	mov	sp, r7
 8009240:	bd80      	pop	{r7, pc}
 8009242:	bf00      	nop
 8009244:	20002cb4 	.word	0x20002cb4
 8009248:	20002c84 	.word	0x20002c84
 800924c:	20002c98 	.word	0x20002c98
 8009250:	20002cac 	.word	0x20002cac
 8009254:	20002cb0 	.word	0x20002cb0
 8009258:	20002d60 	.word	0x20002d60
 800925c:	20002cc0 	.word	0x20002cc0
 8009260:	08009dd4 	.word	0x08009dd4

08009264 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009264:	b480      	push	{r7}
 8009266:	b085      	sub	sp, #20
 8009268:	af00      	add	r7, sp, #0
 800926a:	60f8      	str	r0, [r7, #12]
 800926c:	60b9      	str	r1, [r7, #8]
 800926e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8009270:	68fb      	ldr	r3, [r7, #12]
 8009272:	3b04      	subs	r3, #4
 8009274:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8009276:	68fb      	ldr	r3, [r7, #12]
 8009278:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800927c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800927e:	68fb      	ldr	r3, [r7, #12]
 8009280:	3b04      	subs	r3, #4
 8009282:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009284:	68bb      	ldr	r3, [r7, #8]
 8009286:	f023 0201 	bic.w	r2, r3, #1
 800928a:	68fb      	ldr	r3, [r7, #12]
 800928c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800928e:	68fb      	ldr	r3, [r7, #12]
 8009290:	3b04      	subs	r3, #4
 8009292:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009294:	4a0c      	ldr	r2, [pc, #48]	; (80092c8 <pxPortInitialiseStack+0x64>)
 8009296:	68fb      	ldr	r3, [r7, #12]
 8009298:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800929a:	68fb      	ldr	r3, [r7, #12]
 800929c:	3b14      	subs	r3, #20
 800929e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80092a0:	687a      	ldr	r2, [r7, #4]
 80092a2:	68fb      	ldr	r3, [r7, #12]
 80092a4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80092a6:	68fb      	ldr	r3, [r7, #12]
 80092a8:	3b04      	subs	r3, #4
 80092aa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80092ac:	68fb      	ldr	r3, [r7, #12]
 80092ae:	f06f 0202 	mvn.w	r2, #2
 80092b2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80092b4:	68fb      	ldr	r3, [r7, #12]
 80092b6:	3b20      	subs	r3, #32
 80092b8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80092ba:	68fb      	ldr	r3, [r7, #12]
}
 80092bc:	4618      	mov	r0, r3
 80092be:	3714      	adds	r7, #20
 80092c0:	46bd      	mov	sp, r7
 80092c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092c6:	4770      	bx	lr
 80092c8:	080092cd 	.word	0x080092cd

080092cc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80092cc:	b480      	push	{r7}
 80092ce:	b085      	sub	sp, #20
 80092d0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80092d2:	2300      	movs	r3, #0
 80092d4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80092d6:	4b12      	ldr	r3, [pc, #72]	; (8009320 <prvTaskExitError+0x54>)
 80092d8:	681b      	ldr	r3, [r3, #0]
 80092da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80092de:	d00a      	beq.n	80092f6 <prvTaskExitError+0x2a>
	__asm volatile
 80092e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092e4:	f383 8811 	msr	BASEPRI, r3
 80092e8:	f3bf 8f6f 	isb	sy
 80092ec:	f3bf 8f4f 	dsb	sy
 80092f0:	60fb      	str	r3, [r7, #12]
}
 80092f2:	bf00      	nop
 80092f4:	e7fe      	b.n	80092f4 <prvTaskExitError+0x28>
	__asm volatile
 80092f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092fa:	f383 8811 	msr	BASEPRI, r3
 80092fe:	f3bf 8f6f 	isb	sy
 8009302:	f3bf 8f4f 	dsb	sy
 8009306:	60bb      	str	r3, [r7, #8]
}
 8009308:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800930a:	bf00      	nop
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	2b00      	cmp	r3, #0
 8009310:	d0fc      	beq.n	800930c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8009312:	bf00      	nop
 8009314:	bf00      	nop
 8009316:	3714      	adds	r7, #20
 8009318:	46bd      	mov	sp, r7
 800931a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800931e:	4770      	bx	lr
 8009320:	20000014 	.word	0x20000014
	...

08009330 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009330:	4b07      	ldr	r3, [pc, #28]	; (8009350 <pxCurrentTCBConst2>)
 8009332:	6819      	ldr	r1, [r3, #0]
 8009334:	6808      	ldr	r0, [r1, #0]
 8009336:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800933a:	f380 8809 	msr	PSP, r0
 800933e:	f3bf 8f6f 	isb	sy
 8009342:	f04f 0000 	mov.w	r0, #0
 8009346:	f380 8811 	msr	BASEPRI, r0
 800934a:	4770      	bx	lr
 800934c:	f3af 8000 	nop.w

08009350 <pxCurrentTCBConst2>:
 8009350:	20002784 	.word	0x20002784
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009354:	bf00      	nop
 8009356:	bf00      	nop

08009358 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009358:	4808      	ldr	r0, [pc, #32]	; (800937c <prvPortStartFirstTask+0x24>)
 800935a:	6800      	ldr	r0, [r0, #0]
 800935c:	6800      	ldr	r0, [r0, #0]
 800935e:	f380 8808 	msr	MSP, r0
 8009362:	f04f 0000 	mov.w	r0, #0
 8009366:	f380 8814 	msr	CONTROL, r0
 800936a:	b662      	cpsie	i
 800936c:	b661      	cpsie	f
 800936e:	f3bf 8f4f 	dsb	sy
 8009372:	f3bf 8f6f 	isb	sy
 8009376:	df00      	svc	0
 8009378:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800937a:	bf00      	nop
 800937c:	e000ed08 	.word	0xe000ed08

08009380 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009380:	b580      	push	{r7, lr}
 8009382:	b086      	sub	sp, #24
 8009384:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8009386:	4b46      	ldr	r3, [pc, #280]	; (80094a0 <xPortStartScheduler+0x120>)
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	4a46      	ldr	r2, [pc, #280]	; (80094a4 <xPortStartScheduler+0x124>)
 800938c:	4293      	cmp	r3, r2
 800938e:	d10a      	bne.n	80093a6 <xPortStartScheduler+0x26>
	__asm volatile
 8009390:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009394:	f383 8811 	msr	BASEPRI, r3
 8009398:	f3bf 8f6f 	isb	sy
 800939c:	f3bf 8f4f 	dsb	sy
 80093a0:	613b      	str	r3, [r7, #16]
}
 80093a2:	bf00      	nop
 80093a4:	e7fe      	b.n	80093a4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80093a6:	4b3e      	ldr	r3, [pc, #248]	; (80094a0 <xPortStartScheduler+0x120>)
 80093a8:	681b      	ldr	r3, [r3, #0]
 80093aa:	4a3f      	ldr	r2, [pc, #252]	; (80094a8 <xPortStartScheduler+0x128>)
 80093ac:	4293      	cmp	r3, r2
 80093ae:	d10a      	bne.n	80093c6 <xPortStartScheduler+0x46>
	__asm volatile
 80093b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093b4:	f383 8811 	msr	BASEPRI, r3
 80093b8:	f3bf 8f6f 	isb	sy
 80093bc:	f3bf 8f4f 	dsb	sy
 80093c0:	60fb      	str	r3, [r7, #12]
}
 80093c2:	bf00      	nop
 80093c4:	e7fe      	b.n	80093c4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80093c6:	4b39      	ldr	r3, [pc, #228]	; (80094ac <xPortStartScheduler+0x12c>)
 80093c8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80093ca:	697b      	ldr	r3, [r7, #20]
 80093cc:	781b      	ldrb	r3, [r3, #0]
 80093ce:	b2db      	uxtb	r3, r3
 80093d0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80093d2:	697b      	ldr	r3, [r7, #20]
 80093d4:	22ff      	movs	r2, #255	; 0xff
 80093d6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80093d8:	697b      	ldr	r3, [r7, #20]
 80093da:	781b      	ldrb	r3, [r3, #0]
 80093dc:	b2db      	uxtb	r3, r3
 80093de:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80093e0:	78fb      	ldrb	r3, [r7, #3]
 80093e2:	b2db      	uxtb	r3, r3
 80093e4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80093e8:	b2da      	uxtb	r2, r3
 80093ea:	4b31      	ldr	r3, [pc, #196]	; (80094b0 <xPortStartScheduler+0x130>)
 80093ec:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80093ee:	4b31      	ldr	r3, [pc, #196]	; (80094b4 <xPortStartScheduler+0x134>)
 80093f0:	2207      	movs	r2, #7
 80093f2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80093f4:	e009      	b.n	800940a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80093f6:	4b2f      	ldr	r3, [pc, #188]	; (80094b4 <xPortStartScheduler+0x134>)
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	3b01      	subs	r3, #1
 80093fc:	4a2d      	ldr	r2, [pc, #180]	; (80094b4 <xPortStartScheduler+0x134>)
 80093fe:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009400:	78fb      	ldrb	r3, [r7, #3]
 8009402:	b2db      	uxtb	r3, r3
 8009404:	005b      	lsls	r3, r3, #1
 8009406:	b2db      	uxtb	r3, r3
 8009408:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800940a:	78fb      	ldrb	r3, [r7, #3]
 800940c:	b2db      	uxtb	r3, r3
 800940e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009412:	2b80      	cmp	r3, #128	; 0x80
 8009414:	d0ef      	beq.n	80093f6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8009416:	4b27      	ldr	r3, [pc, #156]	; (80094b4 <xPortStartScheduler+0x134>)
 8009418:	681b      	ldr	r3, [r3, #0]
 800941a:	f1c3 0307 	rsb	r3, r3, #7
 800941e:	2b04      	cmp	r3, #4
 8009420:	d00a      	beq.n	8009438 <xPortStartScheduler+0xb8>
	__asm volatile
 8009422:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009426:	f383 8811 	msr	BASEPRI, r3
 800942a:	f3bf 8f6f 	isb	sy
 800942e:	f3bf 8f4f 	dsb	sy
 8009432:	60bb      	str	r3, [r7, #8]
}
 8009434:	bf00      	nop
 8009436:	e7fe      	b.n	8009436 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8009438:	4b1e      	ldr	r3, [pc, #120]	; (80094b4 <xPortStartScheduler+0x134>)
 800943a:	681b      	ldr	r3, [r3, #0]
 800943c:	021b      	lsls	r3, r3, #8
 800943e:	4a1d      	ldr	r2, [pc, #116]	; (80094b4 <xPortStartScheduler+0x134>)
 8009440:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009442:	4b1c      	ldr	r3, [pc, #112]	; (80094b4 <xPortStartScheduler+0x134>)
 8009444:	681b      	ldr	r3, [r3, #0]
 8009446:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800944a:	4a1a      	ldr	r2, [pc, #104]	; (80094b4 <xPortStartScheduler+0x134>)
 800944c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	b2da      	uxtb	r2, r3
 8009452:	697b      	ldr	r3, [r7, #20]
 8009454:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8009456:	4b18      	ldr	r3, [pc, #96]	; (80094b8 <xPortStartScheduler+0x138>)
 8009458:	681b      	ldr	r3, [r3, #0]
 800945a:	4a17      	ldr	r2, [pc, #92]	; (80094b8 <xPortStartScheduler+0x138>)
 800945c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8009460:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009462:	4b15      	ldr	r3, [pc, #84]	; (80094b8 <xPortStartScheduler+0x138>)
 8009464:	681b      	ldr	r3, [r3, #0]
 8009466:	4a14      	ldr	r2, [pc, #80]	; (80094b8 <xPortStartScheduler+0x138>)
 8009468:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800946c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800946e:	f000 f8dd 	bl	800962c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009472:	4b12      	ldr	r3, [pc, #72]	; (80094bc <xPortStartScheduler+0x13c>)
 8009474:	2200      	movs	r2, #0
 8009476:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8009478:	f000 f8fc 	bl	8009674 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800947c:	4b10      	ldr	r3, [pc, #64]	; (80094c0 <xPortStartScheduler+0x140>)
 800947e:	681b      	ldr	r3, [r3, #0]
 8009480:	4a0f      	ldr	r2, [pc, #60]	; (80094c0 <xPortStartScheduler+0x140>)
 8009482:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8009486:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8009488:	f7ff ff66 	bl	8009358 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800948c:	f7fe ff02 	bl	8008294 <vTaskSwitchContext>
	prvTaskExitError();
 8009490:	f7ff ff1c 	bl	80092cc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8009494:	2300      	movs	r3, #0
}
 8009496:	4618      	mov	r0, r3
 8009498:	3718      	adds	r7, #24
 800949a:	46bd      	mov	sp, r7
 800949c:	bd80      	pop	{r7, pc}
 800949e:	bf00      	nop
 80094a0:	e000ed00 	.word	0xe000ed00
 80094a4:	410fc271 	.word	0x410fc271
 80094a8:	410fc270 	.word	0x410fc270
 80094ac:	e000e400 	.word	0xe000e400
 80094b0:	20002db0 	.word	0x20002db0
 80094b4:	20002db4 	.word	0x20002db4
 80094b8:	e000ed20 	.word	0xe000ed20
 80094bc:	20000014 	.word	0x20000014
 80094c0:	e000ef34 	.word	0xe000ef34

080094c4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80094c4:	b480      	push	{r7}
 80094c6:	b083      	sub	sp, #12
 80094c8:	af00      	add	r7, sp, #0
	__asm volatile
 80094ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094ce:	f383 8811 	msr	BASEPRI, r3
 80094d2:	f3bf 8f6f 	isb	sy
 80094d6:	f3bf 8f4f 	dsb	sy
 80094da:	607b      	str	r3, [r7, #4]
}
 80094dc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80094de:	4b0f      	ldr	r3, [pc, #60]	; (800951c <vPortEnterCritical+0x58>)
 80094e0:	681b      	ldr	r3, [r3, #0]
 80094e2:	3301      	adds	r3, #1
 80094e4:	4a0d      	ldr	r2, [pc, #52]	; (800951c <vPortEnterCritical+0x58>)
 80094e6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80094e8:	4b0c      	ldr	r3, [pc, #48]	; (800951c <vPortEnterCritical+0x58>)
 80094ea:	681b      	ldr	r3, [r3, #0]
 80094ec:	2b01      	cmp	r3, #1
 80094ee:	d10f      	bne.n	8009510 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80094f0:	4b0b      	ldr	r3, [pc, #44]	; (8009520 <vPortEnterCritical+0x5c>)
 80094f2:	681b      	ldr	r3, [r3, #0]
 80094f4:	b2db      	uxtb	r3, r3
 80094f6:	2b00      	cmp	r3, #0
 80094f8:	d00a      	beq.n	8009510 <vPortEnterCritical+0x4c>
	__asm volatile
 80094fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094fe:	f383 8811 	msr	BASEPRI, r3
 8009502:	f3bf 8f6f 	isb	sy
 8009506:	f3bf 8f4f 	dsb	sy
 800950a:	603b      	str	r3, [r7, #0]
}
 800950c:	bf00      	nop
 800950e:	e7fe      	b.n	800950e <vPortEnterCritical+0x4a>
	}
}
 8009510:	bf00      	nop
 8009512:	370c      	adds	r7, #12
 8009514:	46bd      	mov	sp, r7
 8009516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800951a:	4770      	bx	lr
 800951c:	20000014 	.word	0x20000014
 8009520:	e000ed04 	.word	0xe000ed04

08009524 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009524:	b480      	push	{r7}
 8009526:	b083      	sub	sp, #12
 8009528:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800952a:	4b12      	ldr	r3, [pc, #72]	; (8009574 <vPortExitCritical+0x50>)
 800952c:	681b      	ldr	r3, [r3, #0]
 800952e:	2b00      	cmp	r3, #0
 8009530:	d10a      	bne.n	8009548 <vPortExitCritical+0x24>
	__asm volatile
 8009532:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009536:	f383 8811 	msr	BASEPRI, r3
 800953a:	f3bf 8f6f 	isb	sy
 800953e:	f3bf 8f4f 	dsb	sy
 8009542:	607b      	str	r3, [r7, #4]
}
 8009544:	bf00      	nop
 8009546:	e7fe      	b.n	8009546 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8009548:	4b0a      	ldr	r3, [pc, #40]	; (8009574 <vPortExitCritical+0x50>)
 800954a:	681b      	ldr	r3, [r3, #0]
 800954c:	3b01      	subs	r3, #1
 800954e:	4a09      	ldr	r2, [pc, #36]	; (8009574 <vPortExitCritical+0x50>)
 8009550:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009552:	4b08      	ldr	r3, [pc, #32]	; (8009574 <vPortExitCritical+0x50>)
 8009554:	681b      	ldr	r3, [r3, #0]
 8009556:	2b00      	cmp	r3, #0
 8009558:	d105      	bne.n	8009566 <vPortExitCritical+0x42>
 800955a:	2300      	movs	r3, #0
 800955c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800955e:	683b      	ldr	r3, [r7, #0]
 8009560:	f383 8811 	msr	BASEPRI, r3
}
 8009564:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8009566:	bf00      	nop
 8009568:	370c      	adds	r7, #12
 800956a:	46bd      	mov	sp, r7
 800956c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009570:	4770      	bx	lr
 8009572:	bf00      	nop
 8009574:	20000014 	.word	0x20000014
	...

08009580 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009580:	f3ef 8009 	mrs	r0, PSP
 8009584:	f3bf 8f6f 	isb	sy
 8009588:	4b15      	ldr	r3, [pc, #84]	; (80095e0 <pxCurrentTCBConst>)
 800958a:	681a      	ldr	r2, [r3, #0]
 800958c:	f01e 0f10 	tst.w	lr, #16
 8009590:	bf08      	it	eq
 8009592:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009596:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800959a:	6010      	str	r0, [r2, #0]
 800959c:	e92d 0009 	stmdb	sp!, {r0, r3}
 80095a0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80095a4:	f380 8811 	msr	BASEPRI, r0
 80095a8:	f3bf 8f4f 	dsb	sy
 80095ac:	f3bf 8f6f 	isb	sy
 80095b0:	f7fe fe70 	bl	8008294 <vTaskSwitchContext>
 80095b4:	f04f 0000 	mov.w	r0, #0
 80095b8:	f380 8811 	msr	BASEPRI, r0
 80095bc:	bc09      	pop	{r0, r3}
 80095be:	6819      	ldr	r1, [r3, #0]
 80095c0:	6808      	ldr	r0, [r1, #0]
 80095c2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80095c6:	f01e 0f10 	tst.w	lr, #16
 80095ca:	bf08      	it	eq
 80095cc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80095d0:	f380 8809 	msr	PSP, r0
 80095d4:	f3bf 8f6f 	isb	sy
 80095d8:	4770      	bx	lr
 80095da:	bf00      	nop
 80095dc:	f3af 8000 	nop.w

080095e0 <pxCurrentTCBConst>:
 80095e0:	20002784 	.word	0x20002784
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80095e4:	bf00      	nop
 80095e6:	bf00      	nop

080095e8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80095e8:	b580      	push	{r7, lr}
 80095ea:	b082      	sub	sp, #8
 80095ec:	af00      	add	r7, sp, #0
	__asm volatile
 80095ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095f2:	f383 8811 	msr	BASEPRI, r3
 80095f6:	f3bf 8f6f 	isb	sy
 80095fa:	f3bf 8f4f 	dsb	sy
 80095fe:	607b      	str	r3, [r7, #4]
}
 8009600:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009602:	f7fe fd8d 	bl	8008120 <xTaskIncrementTick>
 8009606:	4603      	mov	r3, r0
 8009608:	2b00      	cmp	r3, #0
 800960a:	d003      	beq.n	8009614 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800960c:	4b06      	ldr	r3, [pc, #24]	; (8009628 <xPortSysTickHandler+0x40>)
 800960e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009612:	601a      	str	r2, [r3, #0]
 8009614:	2300      	movs	r3, #0
 8009616:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009618:	683b      	ldr	r3, [r7, #0]
 800961a:	f383 8811 	msr	BASEPRI, r3
}
 800961e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009620:	bf00      	nop
 8009622:	3708      	adds	r7, #8
 8009624:	46bd      	mov	sp, r7
 8009626:	bd80      	pop	{r7, pc}
 8009628:	e000ed04 	.word	0xe000ed04

0800962c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800962c:	b480      	push	{r7}
 800962e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009630:	4b0b      	ldr	r3, [pc, #44]	; (8009660 <vPortSetupTimerInterrupt+0x34>)
 8009632:	2200      	movs	r2, #0
 8009634:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009636:	4b0b      	ldr	r3, [pc, #44]	; (8009664 <vPortSetupTimerInterrupt+0x38>)
 8009638:	2200      	movs	r2, #0
 800963a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800963c:	4b0a      	ldr	r3, [pc, #40]	; (8009668 <vPortSetupTimerInterrupt+0x3c>)
 800963e:	681b      	ldr	r3, [r3, #0]
 8009640:	4a0a      	ldr	r2, [pc, #40]	; (800966c <vPortSetupTimerInterrupt+0x40>)
 8009642:	fba2 2303 	umull	r2, r3, r2, r3
 8009646:	099b      	lsrs	r3, r3, #6
 8009648:	4a09      	ldr	r2, [pc, #36]	; (8009670 <vPortSetupTimerInterrupt+0x44>)
 800964a:	3b01      	subs	r3, #1
 800964c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800964e:	4b04      	ldr	r3, [pc, #16]	; (8009660 <vPortSetupTimerInterrupt+0x34>)
 8009650:	2207      	movs	r2, #7
 8009652:	601a      	str	r2, [r3, #0]
}
 8009654:	bf00      	nop
 8009656:	46bd      	mov	sp, r7
 8009658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800965c:	4770      	bx	lr
 800965e:	bf00      	nop
 8009660:	e000e010 	.word	0xe000e010
 8009664:	e000e018 	.word	0xe000e018
 8009668:	20000000 	.word	0x20000000
 800966c:	10624dd3 	.word	0x10624dd3
 8009670:	e000e014 	.word	0xe000e014

08009674 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009674:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8009684 <vPortEnableVFP+0x10>
 8009678:	6801      	ldr	r1, [r0, #0]
 800967a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800967e:	6001      	str	r1, [r0, #0]
 8009680:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8009682:	bf00      	nop
 8009684:	e000ed88 	.word	0xe000ed88

08009688 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8009688:	b480      	push	{r7}
 800968a:	b085      	sub	sp, #20
 800968c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800968e:	f3ef 8305 	mrs	r3, IPSR
 8009692:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009694:	68fb      	ldr	r3, [r7, #12]
 8009696:	2b0f      	cmp	r3, #15
 8009698:	d914      	bls.n	80096c4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800969a:	4a17      	ldr	r2, [pc, #92]	; (80096f8 <vPortValidateInterruptPriority+0x70>)
 800969c:	68fb      	ldr	r3, [r7, #12]
 800969e:	4413      	add	r3, r2
 80096a0:	781b      	ldrb	r3, [r3, #0]
 80096a2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80096a4:	4b15      	ldr	r3, [pc, #84]	; (80096fc <vPortValidateInterruptPriority+0x74>)
 80096a6:	781b      	ldrb	r3, [r3, #0]
 80096a8:	7afa      	ldrb	r2, [r7, #11]
 80096aa:	429a      	cmp	r2, r3
 80096ac:	d20a      	bcs.n	80096c4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80096ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096b2:	f383 8811 	msr	BASEPRI, r3
 80096b6:	f3bf 8f6f 	isb	sy
 80096ba:	f3bf 8f4f 	dsb	sy
 80096be:	607b      	str	r3, [r7, #4]
}
 80096c0:	bf00      	nop
 80096c2:	e7fe      	b.n	80096c2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80096c4:	4b0e      	ldr	r3, [pc, #56]	; (8009700 <vPortValidateInterruptPriority+0x78>)
 80096c6:	681b      	ldr	r3, [r3, #0]
 80096c8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80096cc:	4b0d      	ldr	r3, [pc, #52]	; (8009704 <vPortValidateInterruptPriority+0x7c>)
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	429a      	cmp	r2, r3
 80096d2:	d90a      	bls.n	80096ea <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80096d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096d8:	f383 8811 	msr	BASEPRI, r3
 80096dc:	f3bf 8f6f 	isb	sy
 80096e0:	f3bf 8f4f 	dsb	sy
 80096e4:	603b      	str	r3, [r7, #0]
}
 80096e6:	bf00      	nop
 80096e8:	e7fe      	b.n	80096e8 <vPortValidateInterruptPriority+0x60>
	}
 80096ea:	bf00      	nop
 80096ec:	3714      	adds	r7, #20
 80096ee:	46bd      	mov	sp, r7
 80096f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096f4:	4770      	bx	lr
 80096f6:	bf00      	nop
 80096f8:	e000e3f0 	.word	0xe000e3f0
 80096fc:	20002db0 	.word	0x20002db0
 8009700:	e000ed0c 	.word	0xe000ed0c
 8009704:	20002db4 	.word	0x20002db4

08009708 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8009708:	b580      	push	{r7, lr}
 800970a:	b08a      	sub	sp, #40	; 0x28
 800970c:	af00      	add	r7, sp, #0
 800970e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009710:	2300      	movs	r3, #0
 8009712:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009714:	f7fe fc48 	bl	8007fa8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8009718:	4b5b      	ldr	r3, [pc, #364]	; (8009888 <pvPortMalloc+0x180>)
 800971a:	681b      	ldr	r3, [r3, #0]
 800971c:	2b00      	cmp	r3, #0
 800971e:	d101      	bne.n	8009724 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009720:	f000 f920 	bl	8009964 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009724:	4b59      	ldr	r3, [pc, #356]	; (800988c <pvPortMalloc+0x184>)
 8009726:	681a      	ldr	r2, [r3, #0]
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	4013      	ands	r3, r2
 800972c:	2b00      	cmp	r3, #0
 800972e:	f040 8093 	bne.w	8009858 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	2b00      	cmp	r3, #0
 8009736:	d01d      	beq.n	8009774 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8009738:	2208      	movs	r2, #8
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	4413      	add	r3, r2
 800973e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	f003 0307 	and.w	r3, r3, #7
 8009746:	2b00      	cmp	r3, #0
 8009748:	d014      	beq.n	8009774 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	f023 0307 	bic.w	r3, r3, #7
 8009750:	3308      	adds	r3, #8
 8009752:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	f003 0307 	and.w	r3, r3, #7
 800975a:	2b00      	cmp	r3, #0
 800975c:	d00a      	beq.n	8009774 <pvPortMalloc+0x6c>
	__asm volatile
 800975e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009762:	f383 8811 	msr	BASEPRI, r3
 8009766:	f3bf 8f6f 	isb	sy
 800976a:	f3bf 8f4f 	dsb	sy
 800976e:	617b      	str	r3, [r7, #20]
}
 8009770:	bf00      	nop
 8009772:	e7fe      	b.n	8009772 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	2b00      	cmp	r3, #0
 8009778:	d06e      	beq.n	8009858 <pvPortMalloc+0x150>
 800977a:	4b45      	ldr	r3, [pc, #276]	; (8009890 <pvPortMalloc+0x188>)
 800977c:	681b      	ldr	r3, [r3, #0]
 800977e:	687a      	ldr	r2, [r7, #4]
 8009780:	429a      	cmp	r2, r3
 8009782:	d869      	bhi.n	8009858 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8009784:	4b43      	ldr	r3, [pc, #268]	; (8009894 <pvPortMalloc+0x18c>)
 8009786:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8009788:	4b42      	ldr	r3, [pc, #264]	; (8009894 <pvPortMalloc+0x18c>)
 800978a:	681b      	ldr	r3, [r3, #0]
 800978c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800978e:	e004      	b.n	800979a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8009790:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009792:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8009794:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009796:	681b      	ldr	r3, [r3, #0]
 8009798:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800979a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800979c:	685b      	ldr	r3, [r3, #4]
 800979e:	687a      	ldr	r2, [r7, #4]
 80097a0:	429a      	cmp	r2, r3
 80097a2:	d903      	bls.n	80097ac <pvPortMalloc+0xa4>
 80097a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097a6:	681b      	ldr	r3, [r3, #0]
 80097a8:	2b00      	cmp	r3, #0
 80097aa:	d1f1      	bne.n	8009790 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80097ac:	4b36      	ldr	r3, [pc, #216]	; (8009888 <pvPortMalloc+0x180>)
 80097ae:	681b      	ldr	r3, [r3, #0]
 80097b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80097b2:	429a      	cmp	r2, r3
 80097b4:	d050      	beq.n	8009858 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80097b6:	6a3b      	ldr	r3, [r7, #32]
 80097b8:	681b      	ldr	r3, [r3, #0]
 80097ba:	2208      	movs	r2, #8
 80097bc:	4413      	add	r3, r2
 80097be:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80097c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097c2:	681a      	ldr	r2, [r3, #0]
 80097c4:	6a3b      	ldr	r3, [r7, #32]
 80097c6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80097c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097ca:	685a      	ldr	r2, [r3, #4]
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	1ad2      	subs	r2, r2, r3
 80097d0:	2308      	movs	r3, #8
 80097d2:	005b      	lsls	r3, r3, #1
 80097d4:	429a      	cmp	r2, r3
 80097d6:	d91f      	bls.n	8009818 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80097d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	4413      	add	r3, r2
 80097de:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80097e0:	69bb      	ldr	r3, [r7, #24]
 80097e2:	f003 0307 	and.w	r3, r3, #7
 80097e6:	2b00      	cmp	r3, #0
 80097e8:	d00a      	beq.n	8009800 <pvPortMalloc+0xf8>
	__asm volatile
 80097ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097ee:	f383 8811 	msr	BASEPRI, r3
 80097f2:	f3bf 8f6f 	isb	sy
 80097f6:	f3bf 8f4f 	dsb	sy
 80097fa:	613b      	str	r3, [r7, #16]
}
 80097fc:	bf00      	nop
 80097fe:	e7fe      	b.n	80097fe <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009800:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009802:	685a      	ldr	r2, [r3, #4]
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	1ad2      	subs	r2, r2, r3
 8009808:	69bb      	ldr	r3, [r7, #24]
 800980a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800980c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800980e:	687a      	ldr	r2, [r7, #4]
 8009810:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8009812:	69b8      	ldr	r0, [r7, #24]
 8009814:	f000 f908 	bl	8009a28 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009818:	4b1d      	ldr	r3, [pc, #116]	; (8009890 <pvPortMalloc+0x188>)
 800981a:	681a      	ldr	r2, [r3, #0]
 800981c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800981e:	685b      	ldr	r3, [r3, #4]
 8009820:	1ad3      	subs	r3, r2, r3
 8009822:	4a1b      	ldr	r2, [pc, #108]	; (8009890 <pvPortMalloc+0x188>)
 8009824:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009826:	4b1a      	ldr	r3, [pc, #104]	; (8009890 <pvPortMalloc+0x188>)
 8009828:	681a      	ldr	r2, [r3, #0]
 800982a:	4b1b      	ldr	r3, [pc, #108]	; (8009898 <pvPortMalloc+0x190>)
 800982c:	681b      	ldr	r3, [r3, #0]
 800982e:	429a      	cmp	r2, r3
 8009830:	d203      	bcs.n	800983a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009832:	4b17      	ldr	r3, [pc, #92]	; (8009890 <pvPortMalloc+0x188>)
 8009834:	681b      	ldr	r3, [r3, #0]
 8009836:	4a18      	ldr	r2, [pc, #96]	; (8009898 <pvPortMalloc+0x190>)
 8009838:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800983a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800983c:	685a      	ldr	r2, [r3, #4]
 800983e:	4b13      	ldr	r3, [pc, #76]	; (800988c <pvPortMalloc+0x184>)
 8009840:	681b      	ldr	r3, [r3, #0]
 8009842:	431a      	orrs	r2, r3
 8009844:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009846:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009848:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800984a:	2200      	movs	r2, #0
 800984c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800984e:	4b13      	ldr	r3, [pc, #76]	; (800989c <pvPortMalloc+0x194>)
 8009850:	681b      	ldr	r3, [r3, #0]
 8009852:	3301      	adds	r3, #1
 8009854:	4a11      	ldr	r2, [pc, #68]	; (800989c <pvPortMalloc+0x194>)
 8009856:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009858:	f7fe fbb4 	bl	8007fc4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800985c:	69fb      	ldr	r3, [r7, #28]
 800985e:	f003 0307 	and.w	r3, r3, #7
 8009862:	2b00      	cmp	r3, #0
 8009864:	d00a      	beq.n	800987c <pvPortMalloc+0x174>
	__asm volatile
 8009866:	f04f 0350 	mov.w	r3, #80	; 0x50
 800986a:	f383 8811 	msr	BASEPRI, r3
 800986e:	f3bf 8f6f 	isb	sy
 8009872:	f3bf 8f4f 	dsb	sy
 8009876:	60fb      	str	r3, [r7, #12]
}
 8009878:	bf00      	nop
 800987a:	e7fe      	b.n	800987a <pvPortMalloc+0x172>
	return pvReturn;
 800987c:	69fb      	ldr	r3, [r7, #28]
}
 800987e:	4618      	mov	r0, r3
 8009880:	3728      	adds	r7, #40	; 0x28
 8009882:	46bd      	mov	sp, r7
 8009884:	bd80      	pop	{r7, pc}
 8009886:	bf00      	nop
 8009888:	20004530 	.word	0x20004530
 800988c:	20004544 	.word	0x20004544
 8009890:	20004534 	.word	0x20004534
 8009894:	20004528 	.word	0x20004528
 8009898:	20004538 	.word	0x20004538
 800989c:	2000453c 	.word	0x2000453c

080098a0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80098a0:	b580      	push	{r7, lr}
 80098a2:	b086      	sub	sp, #24
 80098a4:	af00      	add	r7, sp, #0
 80098a6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	2b00      	cmp	r3, #0
 80098b0:	d04d      	beq.n	800994e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80098b2:	2308      	movs	r3, #8
 80098b4:	425b      	negs	r3, r3
 80098b6:	697a      	ldr	r2, [r7, #20]
 80098b8:	4413      	add	r3, r2
 80098ba:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80098bc:	697b      	ldr	r3, [r7, #20]
 80098be:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80098c0:	693b      	ldr	r3, [r7, #16]
 80098c2:	685a      	ldr	r2, [r3, #4]
 80098c4:	4b24      	ldr	r3, [pc, #144]	; (8009958 <vPortFree+0xb8>)
 80098c6:	681b      	ldr	r3, [r3, #0]
 80098c8:	4013      	ands	r3, r2
 80098ca:	2b00      	cmp	r3, #0
 80098cc:	d10a      	bne.n	80098e4 <vPortFree+0x44>
	__asm volatile
 80098ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098d2:	f383 8811 	msr	BASEPRI, r3
 80098d6:	f3bf 8f6f 	isb	sy
 80098da:	f3bf 8f4f 	dsb	sy
 80098de:	60fb      	str	r3, [r7, #12]
}
 80098e0:	bf00      	nop
 80098e2:	e7fe      	b.n	80098e2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80098e4:	693b      	ldr	r3, [r7, #16]
 80098e6:	681b      	ldr	r3, [r3, #0]
 80098e8:	2b00      	cmp	r3, #0
 80098ea:	d00a      	beq.n	8009902 <vPortFree+0x62>
	__asm volatile
 80098ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098f0:	f383 8811 	msr	BASEPRI, r3
 80098f4:	f3bf 8f6f 	isb	sy
 80098f8:	f3bf 8f4f 	dsb	sy
 80098fc:	60bb      	str	r3, [r7, #8]
}
 80098fe:	bf00      	nop
 8009900:	e7fe      	b.n	8009900 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009902:	693b      	ldr	r3, [r7, #16]
 8009904:	685a      	ldr	r2, [r3, #4]
 8009906:	4b14      	ldr	r3, [pc, #80]	; (8009958 <vPortFree+0xb8>)
 8009908:	681b      	ldr	r3, [r3, #0]
 800990a:	4013      	ands	r3, r2
 800990c:	2b00      	cmp	r3, #0
 800990e:	d01e      	beq.n	800994e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009910:	693b      	ldr	r3, [r7, #16]
 8009912:	681b      	ldr	r3, [r3, #0]
 8009914:	2b00      	cmp	r3, #0
 8009916:	d11a      	bne.n	800994e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009918:	693b      	ldr	r3, [r7, #16]
 800991a:	685a      	ldr	r2, [r3, #4]
 800991c:	4b0e      	ldr	r3, [pc, #56]	; (8009958 <vPortFree+0xb8>)
 800991e:	681b      	ldr	r3, [r3, #0]
 8009920:	43db      	mvns	r3, r3
 8009922:	401a      	ands	r2, r3
 8009924:	693b      	ldr	r3, [r7, #16]
 8009926:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009928:	f7fe fb3e 	bl	8007fa8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800992c:	693b      	ldr	r3, [r7, #16]
 800992e:	685a      	ldr	r2, [r3, #4]
 8009930:	4b0a      	ldr	r3, [pc, #40]	; (800995c <vPortFree+0xbc>)
 8009932:	681b      	ldr	r3, [r3, #0]
 8009934:	4413      	add	r3, r2
 8009936:	4a09      	ldr	r2, [pc, #36]	; (800995c <vPortFree+0xbc>)
 8009938:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800993a:	6938      	ldr	r0, [r7, #16]
 800993c:	f000 f874 	bl	8009a28 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8009940:	4b07      	ldr	r3, [pc, #28]	; (8009960 <vPortFree+0xc0>)
 8009942:	681b      	ldr	r3, [r3, #0]
 8009944:	3301      	adds	r3, #1
 8009946:	4a06      	ldr	r2, [pc, #24]	; (8009960 <vPortFree+0xc0>)
 8009948:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800994a:	f7fe fb3b 	bl	8007fc4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800994e:	bf00      	nop
 8009950:	3718      	adds	r7, #24
 8009952:	46bd      	mov	sp, r7
 8009954:	bd80      	pop	{r7, pc}
 8009956:	bf00      	nop
 8009958:	20004544 	.word	0x20004544
 800995c:	20004534 	.word	0x20004534
 8009960:	20004540 	.word	0x20004540

08009964 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009964:	b480      	push	{r7}
 8009966:	b085      	sub	sp, #20
 8009968:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800996a:	f241 7370 	movw	r3, #6000	; 0x1770
 800996e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009970:	4b27      	ldr	r3, [pc, #156]	; (8009a10 <prvHeapInit+0xac>)
 8009972:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009974:	68fb      	ldr	r3, [r7, #12]
 8009976:	f003 0307 	and.w	r3, r3, #7
 800997a:	2b00      	cmp	r3, #0
 800997c:	d00c      	beq.n	8009998 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800997e:	68fb      	ldr	r3, [r7, #12]
 8009980:	3307      	adds	r3, #7
 8009982:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009984:	68fb      	ldr	r3, [r7, #12]
 8009986:	f023 0307 	bic.w	r3, r3, #7
 800998a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800998c:	68ba      	ldr	r2, [r7, #8]
 800998e:	68fb      	ldr	r3, [r7, #12]
 8009990:	1ad3      	subs	r3, r2, r3
 8009992:	4a1f      	ldr	r2, [pc, #124]	; (8009a10 <prvHeapInit+0xac>)
 8009994:	4413      	add	r3, r2
 8009996:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009998:	68fb      	ldr	r3, [r7, #12]
 800999a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800999c:	4a1d      	ldr	r2, [pc, #116]	; (8009a14 <prvHeapInit+0xb0>)
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80099a2:	4b1c      	ldr	r3, [pc, #112]	; (8009a14 <prvHeapInit+0xb0>)
 80099a4:	2200      	movs	r2, #0
 80099a6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	68ba      	ldr	r2, [r7, #8]
 80099ac:	4413      	add	r3, r2
 80099ae:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80099b0:	2208      	movs	r2, #8
 80099b2:	68fb      	ldr	r3, [r7, #12]
 80099b4:	1a9b      	subs	r3, r3, r2
 80099b6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80099b8:	68fb      	ldr	r3, [r7, #12]
 80099ba:	f023 0307 	bic.w	r3, r3, #7
 80099be:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80099c0:	68fb      	ldr	r3, [r7, #12]
 80099c2:	4a15      	ldr	r2, [pc, #84]	; (8009a18 <prvHeapInit+0xb4>)
 80099c4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80099c6:	4b14      	ldr	r3, [pc, #80]	; (8009a18 <prvHeapInit+0xb4>)
 80099c8:	681b      	ldr	r3, [r3, #0]
 80099ca:	2200      	movs	r2, #0
 80099cc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80099ce:	4b12      	ldr	r3, [pc, #72]	; (8009a18 <prvHeapInit+0xb4>)
 80099d0:	681b      	ldr	r3, [r3, #0]
 80099d2:	2200      	movs	r2, #0
 80099d4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80099da:	683b      	ldr	r3, [r7, #0]
 80099dc:	68fa      	ldr	r2, [r7, #12]
 80099de:	1ad2      	subs	r2, r2, r3
 80099e0:	683b      	ldr	r3, [r7, #0]
 80099e2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80099e4:	4b0c      	ldr	r3, [pc, #48]	; (8009a18 <prvHeapInit+0xb4>)
 80099e6:	681a      	ldr	r2, [r3, #0]
 80099e8:	683b      	ldr	r3, [r7, #0]
 80099ea:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80099ec:	683b      	ldr	r3, [r7, #0]
 80099ee:	685b      	ldr	r3, [r3, #4]
 80099f0:	4a0a      	ldr	r2, [pc, #40]	; (8009a1c <prvHeapInit+0xb8>)
 80099f2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80099f4:	683b      	ldr	r3, [r7, #0]
 80099f6:	685b      	ldr	r3, [r3, #4]
 80099f8:	4a09      	ldr	r2, [pc, #36]	; (8009a20 <prvHeapInit+0xbc>)
 80099fa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80099fc:	4b09      	ldr	r3, [pc, #36]	; (8009a24 <prvHeapInit+0xc0>)
 80099fe:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8009a02:	601a      	str	r2, [r3, #0]
}
 8009a04:	bf00      	nop
 8009a06:	3714      	adds	r7, #20
 8009a08:	46bd      	mov	sp, r7
 8009a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a0e:	4770      	bx	lr
 8009a10:	20002db8 	.word	0x20002db8
 8009a14:	20004528 	.word	0x20004528
 8009a18:	20004530 	.word	0x20004530
 8009a1c:	20004538 	.word	0x20004538
 8009a20:	20004534 	.word	0x20004534
 8009a24:	20004544 	.word	0x20004544

08009a28 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009a28:	b480      	push	{r7}
 8009a2a:	b085      	sub	sp, #20
 8009a2c:	af00      	add	r7, sp, #0
 8009a2e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009a30:	4b28      	ldr	r3, [pc, #160]	; (8009ad4 <prvInsertBlockIntoFreeList+0xac>)
 8009a32:	60fb      	str	r3, [r7, #12]
 8009a34:	e002      	b.n	8009a3c <prvInsertBlockIntoFreeList+0x14>
 8009a36:	68fb      	ldr	r3, [r7, #12]
 8009a38:	681b      	ldr	r3, [r3, #0]
 8009a3a:	60fb      	str	r3, [r7, #12]
 8009a3c:	68fb      	ldr	r3, [r7, #12]
 8009a3e:	681b      	ldr	r3, [r3, #0]
 8009a40:	687a      	ldr	r2, [r7, #4]
 8009a42:	429a      	cmp	r2, r3
 8009a44:	d8f7      	bhi.n	8009a36 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009a46:	68fb      	ldr	r3, [r7, #12]
 8009a48:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8009a4a:	68fb      	ldr	r3, [r7, #12]
 8009a4c:	685b      	ldr	r3, [r3, #4]
 8009a4e:	68ba      	ldr	r2, [r7, #8]
 8009a50:	4413      	add	r3, r2
 8009a52:	687a      	ldr	r2, [r7, #4]
 8009a54:	429a      	cmp	r2, r3
 8009a56:	d108      	bne.n	8009a6a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009a58:	68fb      	ldr	r3, [r7, #12]
 8009a5a:	685a      	ldr	r2, [r3, #4]
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	685b      	ldr	r3, [r3, #4]
 8009a60:	441a      	add	r2, r3
 8009a62:	68fb      	ldr	r3, [r7, #12]
 8009a64:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009a66:	68fb      	ldr	r3, [r7, #12]
 8009a68:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	685b      	ldr	r3, [r3, #4]
 8009a72:	68ba      	ldr	r2, [r7, #8]
 8009a74:	441a      	add	r2, r3
 8009a76:	68fb      	ldr	r3, [r7, #12]
 8009a78:	681b      	ldr	r3, [r3, #0]
 8009a7a:	429a      	cmp	r2, r3
 8009a7c:	d118      	bne.n	8009ab0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8009a7e:	68fb      	ldr	r3, [r7, #12]
 8009a80:	681a      	ldr	r2, [r3, #0]
 8009a82:	4b15      	ldr	r3, [pc, #84]	; (8009ad8 <prvInsertBlockIntoFreeList+0xb0>)
 8009a84:	681b      	ldr	r3, [r3, #0]
 8009a86:	429a      	cmp	r2, r3
 8009a88:	d00d      	beq.n	8009aa6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	685a      	ldr	r2, [r3, #4]
 8009a8e:	68fb      	ldr	r3, [r7, #12]
 8009a90:	681b      	ldr	r3, [r3, #0]
 8009a92:	685b      	ldr	r3, [r3, #4]
 8009a94:	441a      	add	r2, r3
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8009a9a:	68fb      	ldr	r3, [r7, #12]
 8009a9c:	681b      	ldr	r3, [r3, #0]
 8009a9e:	681a      	ldr	r2, [r3, #0]
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	601a      	str	r2, [r3, #0]
 8009aa4:	e008      	b.n	8009ab8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009aa6:	4b0c      	ldr	r3, [pc, #48]	; (8009ad8 <prvInsertBlockIntoFreeList+0xb0>)
 8009aa8:	681a      	ldr	r2, [r3, #0]
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	601a      	str	r2, [r3, #0]
 8009aae:	e003      	b.n	8009ab8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009ab0:	68fb      	ldr	r3, [r7, #12]
 8009ab2:	681a      	ldr	r2, [r3, #0]
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009ab8:	68fa      	ldr	r2, [r7, #12]
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	429a      	cmp	r2, r3
 8009abe:	d002      	beq.n	8009ac6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009ac0:	68fb      	ldr	r3, [r7, #12]
 8009ac2:	687a      	ldr	r2, [r7, #4]
 8009ac4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009ac6:	bf00      	nop
 8009ac8:	3714      	adds	r7, #20
 8009aca:	46bd      	mov	sp, r7
 8009acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ad0:	4770      	bx	lr
 8009ad2:	bf00      	nop
 8009ad4:	20004528 	.word	0x20004528
 8009ad8:	20004530 	.word	0x20004530

08009adc <__libc_init_array>:
 8009adc:	b570      	push	{r4, r5, r6, lr}
 8009ade:	4d0d      	ldr	r5, [pc, #52]	; (8009b14 <__libc_init_array+0x38>)
 8009ae0:	4c0d      	ldr	r4, [pc, #52]	; (8009b18 <__libc_init_array+0x3c>)
 8009ae2:	1b64      	subs	r4, r4, r5
 8009ae4:	10a4      	asrs	r4, r4, #2
 8009ae6:	2600      	movs	r6, #0
 8009ae8:	42a6      	cmp	r6, r4
 8009aea:	d109      	bne.n	8009b00 <__libc_init_array+0x24>
 8009aec:	4d0b      	ldr	r5, [pc, #44]	; (8009b1c <__libc_init_array+0x40>)
 8009aee:	4c0c      	ldr	r4, [pc, #48]	; (8009b20 <__libc_init_array+0x44>)
 8009af0:	f000 f8f2 	bl	8009cd8 <_init>
 8009af4:	1b64      	subs	r4, r4, r5
 8009af6:	10a4      	asrs	r4, r4, #2
 8009af8:	2600      	movs	r6, #0
 8009afa:	42a6      	cmp	r6, r4
 8009afc:	d105      	bne.n	8009b0a <__libc_init_array+0x2e>
 8009afe:	bd70      	pop	{r4, r5, r6, pc}
 8009b00:	f855 3b04 	ldr.w	r3, [r5], #4
 8009b04:	4798      	blx	r3
 8009b06:	3601      	adds	r6, #1
 8009b08:	e7ee      	b.n	8009ae8 <__libc_init_array+0xc>
 8009b0a:	f855 3b04 	ldr.w	r3, [r5], #4
 8009b0e:	4798      	blx	r3
 8009b10:	3601      	adds	r6, #1
 8009b12:	e7f2      	b.n	8009afa <__libc_init_array+0x1e>
 8009b14:	08009f40 	.word	0x08009f40
 8009b18:	08009f40 	.word	0x08009f40
 8009b1c:	08009f40 	.word	0x08009f40
 8009b20:	08009f44 	.word	0x08009f44

08009b24 <__retarget_lock_acquire_recursive>:
 8009b24:	4770      	bx	lr

08009b26 <__retarget_lock_release_recursive>:
 8009b26:	4770      	bx	lr

08009b28 <memcpy>:
 8009b28:	440a      	add	r2, r1
 8009b2a:	4291      	cmp	r1, r2
 8009b2c:	f100 33ff 	add.w	r3, r0, #4294967295
 8009b30:	d100      	bne.n	8009b34 <memcpy+0xc>
 8009b32:	4770      	bx	lr
 8009b34:	b510      	push	{r4, lr}
 8009b36:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009b3a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009b3e:	4291      	cmp	r1, r2
 8009b40:	d1f9      	bne.n	8009b36 <memcpy+0xe>
 8009b42:	bd10      	pop	{r4, pc}

08009b44 <memset>:
 8009b44:	4402      	add	r2, r0
 8009b46:	4603      	mov	r3, r0
 8009b48:	4293      	cmp	r3, r2
 8009b4a:	d100      	bne.n	8009b4e <memset+0xa>
 8009b4c:	4770      	bx	lr
 8009b4e:	f803 1b01 	strb.w	r1, [r3], #1
 8009b52:	e7f9      	b.n	8009b48 <memset+0x4>

08009b54 <cleanup_glue>:
 8009b54:	b538      	push	{r3, r4, r5, lr}
 8009b56:	460c      	mov	r4, r1
 8009b58:	6809      	ldr	r1, [r1, #0]
 8009b5a:	4605      	mov	r5, r0
 8009b5c:	b109      	cbz	r1, 8009b62 <cleanup_glue+0xe>
 8009b5e:	f7ff fff9 	bl	8009b54 <cleanup_glue>
 8009b62:	4621      	mov	r1, r4
 8009b64:	4628      	mov	r0, r5
 8009b66:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009b6a:	f000 b869 	b.w	8009c40 <_free_r>
	...

08009b70 <_reclaim_reent>:
 8009b70:	4b2c      	ldr	r3, [pc, #176]	; (8009c24 <_reclaim_reent+0xb4>)
 8009b72:	681b      	ldr	r3, [r3, #0]
 8009b74:	4283      	cmp	r3, r0
 8009b76:	b570      	push	{r4, r5, r6, lr}
 8009b78:	4604      	mov	r4, r0
 8009b7a:	d051      	beq.n	8009c20 <_reclaim_reent+0xb0>
 8009b7c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8009b7e:	b143      	cbz	r3, 8009b92 <_reclaim_reent+0x22>
 8009b80:	68db      	ldr	r3, [r3, #12]
 8009b82:	2b00      	cmp	r3, #0
 8009b84:	d14a      	bne.n	8009c1c <_reclaim_reent+0xac>
 8009b86:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009b88:	6819      	ldr	r1, [r3, #0]
 8009b8a:	b111      	cbz	r1, 8009b92 <_reclaim_reent+0x22>
 8009b8c:	4620      	mov	r0, r4
 8009b8e:	f000 f857 	bl	8009c40 <_free_r>
 8009b92:	6961      	ldr	r1, [r4, #20]
 8009b94:	b111      	cbz	r1, 8009b9c <_reclaim_reent+0x2c>
 8009b96:	4620      	mov	r0, r4
 8009b98:	f000 f852 	bl	8009c40 <_free_r>
 8009b9c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8009b9e:	b111      	cbz	r1, 8009ba6 <_reclaim_reent+0x36>
 8009ba0:	4620      	mov	r0, r4
 8009ba2:	f000 f84d 	bl	8009c40 <_free_r>
 8009ba6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8009ba8:	b111      	cbz	r1, 8009bb0 <_reclaim_reent+0x40>
 8009baa:	4620      	mov	r0, r4
 8009bac:	f000 f848 	bl	8009c40 <_free_r>
 8009bb0:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8009bb2:	b111      	cbz	r1, 8009bba <_reclaim_reent+0x4a>
 8009bb4:	4620      	mov	r0, r4
 8009bb6:	f000 f843 	bl	8009c40 <_free_r>
 8009bba:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8009bbc:	b111      	cbz	r1, 8009bc4 <_reclaim_reent+0x54>
 8009bbe:	4620      	mov	r0, r4
 8009bc0:	f000 f83e 	bl	8009c40 <_free_r>
 8009bc4:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8009bc6:	b111      	cbz	r1, 8009bce <_reclaim_reent+0x5e>
 8009bc8:	4620      	mov	r0, r4
 8009bca:	f000 f839 	bl	8009c40 <_free_r>
 8009bce:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8009bd0:	b111      	cbz	r1, 8009bd8 <_reclaim_reent+0x68>
 8009bd2:	4620      	mov	r0, r4
 8009bd4:	f000 f834 	bl	8009c40 <_free_r>
 8009bd8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009bda:	b111      	cbz	r1, 8009be2 <_reclaim_reent+0x72>
 8009bdc:	4620      	mov	r0, r4
 8009bde:	f000 f82f 	bl	8009c40 <_free_r>
 8009be2:	69a3      	ldr	r3, [r4, #24]
 8009be4:	b1e3      	cbz	r3, 8009c20 <_reclaim_reent+0xb0>
 8009be6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8009be8:	4620      	mov	r0, r4
 8009bea:	4798      	blx	r3
 8009bec:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8009bee:	b1b9      	cbz	r1, 8009c20 <_reclaim_reent+0xb0>
 8009bf0:	4620      	mov	r0, r4
 8009bf2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8009bf6:	f7ff bfad 	b.w	8009b54 <cleanup_glue>
 8009bfa:	5949      	ldr	r1, [r1, r5]
 8009bfc:	b941      	cbnz	r1, 8009c10 <_reclaim_reent+0xa0>
 8009bfe:	3504      	adds	r5, #4
 8009c00:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009c02:	2d80      	cmp	r5, #128	; 0x80
 8009c04:	68d9      	ldr	r1, [r3, #12]
 8009c06:	d1f8      	bne.n	8009bfa <_reclaim_reent+0x8a>
 8009c08:	4620      	mov	r0, r4
 8009c0a:	f000 f819 	bl	8009c40 <_free_r>
 8009c0e:	e7ba      	b.n	8009b86 <_reclaim_reent+0x16>
 8009c10:	680e      	ldr	r6, [r1, #0]
 8009c12:	4620      	mov	r0, r4
 8009c14:	f000 f814 	bl	8009c40 <_free_r>
 8009c18:	4631      	mov	r1, r6
 8009c1a:	e7ef      	b.n	8009bfc <_reclaim_reent+0x8c>
 8009c1c:	2500      	movs	r5, #0
 8009c1e:	e7ef      	b.n	8009c00 <_reclaim_reent+0x90>
 8009c20:	bd70      	pop	{r4, r5, r6, pc}
 8009c22:	bf00      	nop
 8009c24:	20000018 	.word	0x20000018

08009c28 <__malloc_lock>:
 8009c28:	4801      	ldr	r0, [pc, #4]	; (8009c30 <__malloc_lock+0x8>)
 8009c2a:	f7ff bf7b 	b.w	8009b24 <__retarget_lock_acquire_recursive>
 8009c2e:	bf00      	nop
 8009c30:	20004548 	.word	0x20004548

08009c34 <__malloc_unlock>:
 8009c34:	4801      	ldr	r0, [pc, #4]	; (8009c3c <__malloc_unlock+0x8>)
 8009c36:	f7ff bf76 	b.w	8009b26 <__retarget_lock_release_recursive>
 8009c3a:	bf00      	nop
 8009c3c:	20004548 	.word	0x20004548

08009c40 <_free_r>:
 8009c40:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009c42:	2900      	cmp	r1, #0
 8009c44:	d044      	beq.n	8009cd0 <_free_r+0x90>
 8009c46:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009c4a:	9001      	str	r0, [sp, #4]
 8009c4c:	2b00      	cmp	r3, #0
 8009c4e:	f1a1 0404 	sub.w	r4, r1, #4
 8009c52:	bfb8      	it	lt
 8009c54:	18e4      	addlt	r4, r4, r3
 8009c56:	f7ff ffe7 	bl	8009c28 <__malloc_lock>
 8009c5a:	4a1e      	ldr	r2, [pc, #120]	; (8009cd4 <_free_r+0x94>)
 8009c5c:	9801      	ldr	r0, [sp, #4]
 8009c5e:	6813      	ldr	r3, [r2, #0]
 8009c60:	b933      	cbnz	r3, 8009c70 <_free_r+0x30>
 8009c62:	6063      	str	r3, [r4, #4]
 8009c64:	6014      	str	r4, [r2, #0]
 8009c66:	b003      	add	sp, #12
 8009c68:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009c6c:	f7ff bfe2 	b.w	8009c34 <__malloc_unlock>
 8009c70:	42a3      	cmp	r3, r4
 8009c72:	d908      	bls.n	8009c86 <_free_r+0x46>
 8009c74:	6825      	ldr	r5, [r4, #0]
 8009c76:	1961      	adds	r1, r4, r5
 8009c78:	428b      	cmp	r3, r1
 8009c7a:	bf01      	itttt	eq
 8009c7c:	6819      	ldreq	r1, [r3, #0]
 8009c7e:	685b      	ldreq	r3, [r3, #4]
 8009c80:	1949      	addeq	r1, r1, r5
 8009c82:	6021      	streq	r1, [r4, #0]
 8009c84:	e7ed      	b.n	8009c62 <_free_r+0x22>
 8009c86:	461a      	mov	r2, r3
 8009c88:	685b      	ldr	r3, [r3, #4]
 8009c8a:	b10b      	cbz	r3, 8009c90 <_free_r+0x50>
 8009c8c:	42a3      	cmp	r3, r4
 8009c8e:	d9fa      	bls.n	8009c86 <_free_r+0x46>
 8009c90:	6811      	ldr	r1, [r2, #0]
 8009c92:	1855      	adds	r5, r2, r1
 8009c94:	42a5      	cmp	r5, r4
 8009c96:	d10b      	bne.n	8009cb0 <_free_r+0x70>
 8009c98:	6824      	ldr	r4, [r4, #0]
 8009c9a:	4421      	add	r1, r4
 8009c9c:	1854      	adds	r4, r2, r1
 8009c9e:	42a3      	cmp	r3, r4
 8009ca0:	6011      	str	r1, [r2, #0]
 8009ca2:	d1e0      	bne.n	8009c66 <_free_r+0x26>
 8009ca4:	681c      	ldr	r4, [r3, #0]
 8009ca6:	685b      	ldr	r3, [r3, #4]
 8009ca8:	6053      	str	r3, [r2, #4]
 8009caa:	4421      	add	r1, r4
 8009cac:	6011      	str	r1, [r2, #0]
 8009cae:	e7da      	b.n	8009c66 <_free_r+0x26>
 8009cb0:	d902      	bls.n	8009cb8 <_free_r+0x78>
 8009cb2:	230c      	movs	r3, #12
 8009cb4:	6003      	str	r3, [r0, #0]
 8009cb6:	e7d6      	b.n	8009c66 <_free_r+0x26>
 8009cb8:	6825      	ldr	r5, [r4, #0]
 8009cba:	1961      	adds	r1, r4, r5
 8009cbc:	428b      	cmp	r3, r1
 8009cbe:	bf04      	itt	eq
 8009cc0:	6819      	ldreq	r1, [r3, #0]
 8009cc2:	685b      	ldreq	r3, [r3, #4]
 8009cc4:	6063      	str	r3, [r4, #4]
 8009cc6:	bf04      	itt	eq
 8009cc8:	1949      	addeq	r1, r1, r5
 8009cca:	6021      	streq	r1, [r4, #0]
 8009ccc:	6054      	str	r4, [r2, #4]
 8009cce:	e7ca      	b.n	8009c66 <_free_r+0x26>
 8009cd0:	b003      	add	sp, #12
 8009cd2:	bd30      	pop	{r4, r5, pc}
 8009cd4:	2000454c 	.word	0x2000454c

08009cd8 <_init>:
 8009cd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009cda:	bf00      	nop
 8009cdc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009cde:	bc08      	pop	{r3}
 8009ce0:	469e      	mov	lr, r3
 8009ce2:	4770      	bx	lr

08009ce4 <_fini>:
 8009ce4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ce6:	bf00      	nop
 8009ce8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009cea:	bc08      	pop	{r3}
 8009cec:	469e      	mov	lr, r3
 8009cee:	4770      	bx	lr
